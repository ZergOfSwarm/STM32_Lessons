
SDIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800a688  0800a688  0001a688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abdc  0800abdc  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800abdc  0800abdc  0001abdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abe4  0800abe4  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abe4  0800abe4  0001abe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abe8  0800abe8  0001abe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800abec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a4  2**0
                  CONTENTS
 10 .bss          00003388  200000a4  200000a4  000200a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000342c  2000342c  000200a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c3c0  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038c3  00000000  00000000  0003c494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001440  00000000  00000000  0003fd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012e8  00000000  00000000  00041198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f58  00000000  00000000  00042480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018dff  00000000  00000000  000673d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d39dd  00000000  00000000  000801d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00153bb4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005f08  00000000  00000000  00153c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a670 	.word	0x0800a670

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	0800a670 	.word	0x0800a670

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800089c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008a0:	f000 b96e 	b.w	8000b80 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	4604      	mov	r4, r0
 80008c4:	468c      	mov	ip, r1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	f040 8083 	bne.w	80009d2 <__udivmoddi4+0x116>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4617      	mov	r7, r2
 80008d0:	d947      	bls.n	8000962 <__udivmoddi4+0xa6>
 80008d2:	fab2 f282 	clz	r2, r2
 80008d6:	b142      	cbz	r2, 80008ea <__udivmoddi4+0x2e>
 80008d8:	f1c2 0020 	rsb	r0, r2, #32
 80008dc:	fa24 f000 	lsr.w	r0, r4, r0
 80008e0:	4091      	lsls	r1, r2
 80008e2:	4097      	lsls	r7, r2
 80008e4:	ea40 0c01 	orr.w	ip, r0, r1
 80008e8:	4094      	lsls	r4, r2
 80008ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008ee:	0c23      	lsrs	r3, r4, #16
 80008f0:	fbbc f6f8 	udiv	r6, ip, r8
 80008f4:	fa1f fe87 	uxth.w	lr, r7
 80008f8:	fb08 c116 	mls	r1, r8, r6, ip
 80008fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000900:	fb06 f10e 	mul.w	r1, r6, lr
 8000904:	4299      	cmp	r1, r3
 8000906:	d909      	bls.n	800091c <__udivmoddi4+0x60>
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800090e:	f080 8119 	bcs.w	8000b44 <__udivmoddi4+0x288>
 8000912:	4299      	cmp	r1, r3
 8000914:	f240 8116 	bls.w	8000b44 <__udivmoddi4+0x288>
 8000918:	3e02      	subs	r6, #2
 800091a:	443b      	add	r3, r7
 800091c:	1a5b      	subs	r3, r3, r1
 800091e:	b2a4      	uxth	r4, r4
 8000920:	fbb3 f0f8 	udiv	r0, r3, r8
 8000924:	fb08 3310 	mls	r3, r8, r0, r3
 8000928:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800092c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000930:	45a6      	cmp	lr, r4
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x8c>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800093a:	f080 8105 	bcs.w	8000b48 <__udivmoddi4+0x28c>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8102 	bls.w	8000b48 <__udivmoddi4+0x28c>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800094c:	eba4 040e 	sub.w	r4, r4, lr
 8000950:	2600      	movs	r6, #0
 8000952:	b11d      	cbz	r5, 800095c <__udivmoddi4+0xa0>
 8000954:	40d4      	lsrs	r4, r2
 8000956:	2300      	movs	r3, #0
 8000958:	e9c5 4300 	strd	r4, r3, [r5]
 800095c:	4631      	mov	r1, r6
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	b902      	cbnz	r2, 8000966 <__udivmoddi4+0xaa>
 8000964:	deff      	udf	#255	; 0xff
 8000966:	fab2 f282 	clz	r2, r2
 800096a:	2a00      	cmp	r2, #0
 800096c:	d150      	bne.n	8000a10 <__udivmoddi4+0x154>
 800096e:	1bcb      	subs	r3, r1, r7
 8000970:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000974:	fa1f f887 	uxth.w	r8, r7
 8000978:	2601      	movs	r6, #1
 800097a:	fbb3 fcfe 	udiv	ip, r3, lr
 800097e:	0c21      	lsrs	r1, r4, #16
 8000980:	fb0e 331c 	mls	r3, lr, ip, r3
 8000984:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000988:	fb08 f30c 	mul.w	r3, r8, ip
 800098c:	428b      	cmp	r3, r1
 800098e:	d907      	bls.n	80009a0 <__udivmoddi4+0xe4>
 8000990:	1879      	adds	r1, r7, r1
 8000992:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000996:	d202      	bcs.n	800099e <__udivmoddi4+0xe2>
 8000998:	428b      	cmp	r3, r1
 800099a:	f200 80e9 	bhi.w	8000b70 <__udivmoddi4+0x2b4>
 800099e:	4684      	mov	ip, r0
 80009a0:	1ac9      	subs	r1, r1, r3
 80009a2:	b2a3      	uxth	r3, r4
 80009a4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009a8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009ac:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009b0:	fb08 f800 	mul.w	r8, r8, r0
 80009b4:	45a0      	cmp	r8, r4
 80009b6:	d907      	bls.n	80009c8 <__udivmoddi4+0x10c>
 80009b8:	193c      	adds	r4, r7, r4
 80009ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x10a>
 80009c0:	45a0      	cmp	r8, r4
 80009c2:	f200 80d9 	bhi.w	8000b78 <__udivmoddi4+0x2bc>
 80009c6:	4618      	mov	r0, r3
 80009c8:	eba4 0408 	sub.w	r4, r4, r8
 80009cc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009d0:	e7bf      	b.n	8000952 <__udivmoddi4+0x96>
 80009d2:	428b      	cmp	r3, r1
 80009d4:	d909      	bls.n	80009ea <__udivmoddi4+0x12e>
 80009d6:	2d00      	cmp	r5, #0
 80009d8:	f000 80b1 	beq.w	8000b3e <__udivmoddi4+0x282>
 80009dc:	2600      	movs	r6, #0
 80009de:	e9c5 0100 	strd	r0, r1, [r5]
 80009e2:	4630      	mov	r0, r6
 80009e4:	4631      	mov	r1, r6
 80009e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ea:	fab3 f683 	clz	r6, r3
 80009ee:	2e00      	cmp	r6, #0
 80009f0:	d14a      	bne.n	8000a88 <__udivmoddi4+0x1cc>
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d302      	bcc.n	80009fc <__udivmoddi4+0x140>
 80009f6:	4282      	cmp	r2, r0
 80009f8:	f200 80b8 	bhi.w	8000b6c <__udivmoddi4+0x2b0>
 80009fc:	1a84      	subs	r4, r0, r2
 80009fe:	eb61 0103 	sbc.w	r1, r1, r3
 8000a02:	2001      	movs	r0, #1
 8000a04:	468c      	mov	ip, r1
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	d0a8      	beq.n	800095c <__udivmoddi4+0xa0>
 8000a0a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a0e:	e7a5      	b.n	800095c <__udivmoddi4+0xa0>
 8000a10:	f1c2 0320 	rsb	r3, r2, #32
 8000a14:	fa20 f603 	lsr.w	r6, r0, r3
 8000a18:	4097      	lsls	r7, r2
 8000a1a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a1e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a22:	40d9      	lsrs	r1, r3
 8000a24:	4330      	orrs	r0, r6
 8000a26:	0c03      	lsrs	r3, r0, #16
 8000a28:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a2c:	fa1f f887 	uxth.w	r8, r7
 8000a30:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a38:	fb06 f108 	mul.w	r1, r6, r8
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a42:	d909      	bls.n	8000a58 <__udivmoddi4+0x19c>
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000a4a:	f080 808d 	bcs.w	8000b68 <__udivmoddi4+0x2ac>
 8000a4e:	4299      	cmp	r1, r3
 8000a50:	f240 808a 	bls.w	8000b68 <__udivmoddi4+0x2ac>
 8000a54:	3e02      	subs	r6, #2
 8000a56:	443b      	add	r3, r7
 8000a58:	1a5b      	subs	r3, r3, r1
 8000a5a:	b281      	uxth	r1, r0
 8000a5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a68:	fb00 f308 	mul.w	r3, r0, r8
 8000a6c:	428b      	cmp	r3, r1
 8000a6e:	d907      	bls.n	8000a80 <__udivmoddi4+0x1c4>
 8000a70:	1879      	adds	r1, r7, r1
 8000a72:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000a76:	d273      	bcs.n	8000b60 <__udivmoddi4+0x2a4>
 8000a78:	428b      	cmp	r3, r1
 8000a7a:	d971      	bls.n	8000b60 <__udivmoddi4+0x2a4>
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	4439      	add	r1, r7
 8000a80:	1acb      	subs	r3, r1, r3
 8000a82:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a86:	e778      	b.n	800097a <__udivmoddi4+0xbe>
 8000a88:	f1c6 0c20 	rsb	ip, r6, #32
 8000a8c:	fa03 f406 	lsl.w	r4, r3, r6
 8000a90:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a94:	431c      	orrs	r4, r3
 8000a96:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000a9e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000aa2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000aa6:	431f      	orrs	r7, r3
 8000aa8:	0c3b      	lsrs	r3, r7, #16
 8000aaa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aae:	fa1f f884 	uxth.w	r8, r4
 8000ab2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ab6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aba:	fb09 fa08 	mul.w	sl, r9, r8
 8000abe:	458a      	cmp	sl, r1
 8000ac0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ac4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ac8:	d908      	bls.n	8000adc <__udivmoddi4+0x220>
 8000aca:	1861      	adds	r1, r4, r1
 8000acc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ad0:	d248      	bcs.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad2:	458a      	cmp	sl, r1
 8000ad4:	d946      	bls.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad6:	f1a9 0902 	sub.w	r9, r9, #2
 8000ada:	4421      	add	r1, r4
 8000adc:	eba1 010a 	sub.w	r1, r1, sl
 8000ae0:	b2bf      	uxth	r7, r7
 8000ae2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ae6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000aea:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000aee:	fb00 f808 	mul.w	r8, r0, r8
 8000af2:	45b8      	cmp	r8, r7
 8000af4:	d907      	bls.n	8000b06 <__udivmoddi4+0x24a>
 8000af6:	19e7      	adds	r7, r4, r7
 8000af8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000afc:	d22e      	bcs.n	8000b5c <__udivmoddi4+0x2a0>
 8000afe:	45b8      	cmp	r8, r7
 8000b00:	d92c      	bls.n	8000b5c <__udivmoddi4+0x2a0>
 8000b02:	3802      	subs	r0, #2
 8000b04:	4427      	add	r7, r4
 8000b06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b0a:	eba7 0708 	sub.w	r7, r7, r8
 8000b0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b12:	454f      	cmp	r7, r9
 8000b14:	46c6      	mov	lr, r8
 8000b16:	4649      	mov	r1, r9
 8000b18:	d31a      	bcc.n	8000b50 <__udivmoddi4+0x294>
 8000b1a:	d017      	beq.n	8000b4c <__udivmoddi4+0x290>
 8000b1c:	b15d      	cbz	r5, 8000b36 <__udivmoddi4+0x27a>
 8000b1e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b22:	eb67 0701 	sbc.w	r7, r7, r1
 8000b26:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b2a:	40f2      	lsrs	r2, r6
 8000b2c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b30:	40f7      	lsrs	r7, r6
 8000b32:	e9c5 2700 	strd	r2, r7, [r5]
 8000b36:	2600      	movs	r6, #0
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	462e      	mov	r6, r5
 8000b40:	4628      	mov	r0, r5
 8000b42:	e70b      	b.n	800095c <__udivmoddi4+0xa0>
 8000b44:	4606      	mov	r6, r0
 8000b46:	e6e9      	b.n	800091c <__udivmoddi4+0x60>
 8000b48:	4618      	mov	r0, r3
 8000b4a:	e6fd      	b.n	8000948 <__udivmoddi4+0x8c>
 8000b4c:	4543      	cmp	r3, r8
 8000b4e:	d2e5      	bcs.n	8000b1c <__udivmoddi4+0x260>
 8000b50:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b54:	eb69 0104 	sbc.w	r1, r9, r4
 8000b58:	3801      	subs	r0, #1
 8000b5a:	e7df      	b.n	8000b1c <__udivmoddi4+0x260>
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	e7d2      	b.n	8000b06 <__udivmoddi4+0x24a>
 8000b60:	4660      	mov	r0, ip
 8000b62:	e78d      	b.n	8000a80 <__udivmoddi4+0x1c4>
 8000b64:	4681      	mov	r9, r0
 8000b66:	e7b9      	b.n	8000adc <__udivmoddi4+0x220>
 8000b68:	4666      	mov	r6, ip
 8000b6a:	e775      	b.n	8000a58 <__udivmoddi4+0x19c>
 8000b6c:	4630      	mov	r0, r6
 8000b6e:	e74a      	b.n	8000a06 <__udivmoddi4+0x14a>
 8000b70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b74:	4439      	add	r1, r7
 8000b76:	e713      	b.n	80009a0 <__udivmoddi4+0xe4>
 8000b78:	3802      	subs	r0, #2
 8000b7a:	443c      	add	r4, r7
 8000b7c:	e724      	b.n	80009c8 <__udivmoddi4+0x10c>
 8000b7e:	bf00      	nop

08000b80 <__aeabi_idiv0>:
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b90:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d013      	beq.n	8000bc4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000b9c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ba0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000ba4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d00b      	beq.n	8000bc4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000bac:	e000      	b.n	8000bb0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000bae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000bb0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d0f9      	beq.n	8000bae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000bba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	b2d2      	uxtb	r2, r2
 8000bc2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000bc4:	687b      	ldr	r3, [r7, #4]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
	...

08000bd4 <_write>:
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_SDIO_SD_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 50);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	2332      	movs	r3, #50	; 0x32
 8000be6:	68b9      	ldr	r1, [r7, #8]
 8000be8:	480c      	ldr	r0, [pc, #48]	; (8000c1c <_write+0x48>)
 8000bea:	f004 f86c 	bl	8004cc6 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
 8000bf2:	e009      	b.n	8000c08 <_write+0x34>
		ITM_SendChar(*ptr++);
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	1c5a      	adds	r2, r3, #1
 8000bf8:	60ba      	str	r2, [r7, #8]
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff ffc1 	bl	8000b84 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	3301      	adds	r3, #1
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	697a      	ldr	r2, [r7, #20]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	dbf1      	blt.n	8000bf4 <_write+0x20>
	}
	return len;
 8000c10:	687b      	ldr	r3, [r7, #4]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20001168 	.word	0x20001168

08000c20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c26:	f000 fefd 	bl	8001a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c2a:	f000 f833 	bl	8000c94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2e:	f000 f90d 	bl	8000e4c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c32:	f000 f8e3 	bl	8000dfc <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8000c36:	f000 f897 	bl	8000d68 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000c3a:	f005 f881 	bl	8005d40 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8000c3e:	f000 f8b3 	bl	8000da8 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	 zerg_mount();
 8000c42:	f000 fc31 	bl	80014a8 <zerg_mount>
	 //zerg_format();
	 //zerg_creat_folder(folder_name);
	 zerg_open();
 8000c46:	f000 fc4b 	bl	80014e0 <zerg_open>
	 zerg_write();
 8000c4a:	f000 fc69 	bl	8001520 <zerg_write>
	 zerg_read();
 8000c4e:	f000 fc9f 	bl	8001590 <zerg_read>

	 for (int i=0;i<=10;i++){
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	e004      	b.n	8000c62 <main+0x42>
	 zerg_add_data();
 8000c58:	f000 fcda 	bl	8001610 <zerg_add_data>
	 for (int i=0;i<=10;i++){
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b0a      	cmp	r3, #10
 8000c66:	ddf7      	ble.n	8000c58 <main+0x38>
	 }
	 zerg_read();
 8000c68:	f000 fc92 	bl	8001590 <zerg_read>
	 zerg_get_free_space(); // Узнаем свободное место до удаления
 8000c6c:	f000 fdca 	bl	8001804 <zerg_get_free_space>
	 zerg_scan_files(path);    // НЕ ВИДИТ ФАЙЛЫ!!!, РАЗБЕРИСЬ!!!
 8000c70:	4806      	ldr	r0, [pc, #24]	; (8000c8c <main+0x6c>)
 8000c72:	f000 fd41 	bl	80016f8 <zerg_scan_files>
	 //zerg_delete(folder_name); // Удаляем папку "folder_name" или файл "name"
	 zerg_get_free_space(); // Узнаем свободное место после удаления
 8000c76:	f000 fdc5 	bl	8001804 <zerg_get_free_space>
	 zerg_get_file_info(name);
 8000c7a:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <main+0x70>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 fe18 	bl	80018b4 <zerg_get_file_info>
	 zerg_ummount(path);    // НЕ РАБОТАЕТ, РАЗБЕРИСЬ!!!
 8000c84:	4801      	ldr	r0, [pc, #4]	; (8000c8c <main+0x6c>)
 8000c86:	f000 fd9d 	bl	80017c4 <zerg_ummount>

	while (1) {
 8000c8a:	e7fe      	b.n	8000c8a <main+0x6a>
 8000c8c:	20000000 	.word	0x20000000
 8000c90:	20000014 	.word	0x20000014

08000c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b094      	sub	sp, #80	; 0x50
 8000c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9a:	f107 0320 	add.w	r3, r7, #32
 8000c9e:	2230      	movs	r2, #48	; 0x30
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f008 fb3e 	bl	8009324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	4b28      	ldr	r3, [pc, #160]	; (8000d60 <SystemClock_Config+0xcc>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc0:	4a27      	ldr	r2, [pc, #156]	; (8000d60 <SystemClock_Config+0xcc>)
 8000cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc8:	4b25      	ldr	r3, [pc, #148]	; (8000d60 <SystemClock_Config+0xcc>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	4b22      	ldr	r3, [pc, #136]	; (8000d64 <SystemClock_Config+0xd0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a21      	ldr	r2, [pc, #132]	; (8000d64 <SystemClock_Config+0xd0>)
 8000cde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce2:	6013      	str	r3, [r2, #0]
 8000ce4:	4b1f      	ldr	r3, [pc, #124]	; (8000d64 <SystemClock_Config+0xd0>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cfe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d04:	2304      	movs	r3, #4
 8000d06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d08:	23a8      	movs	r3, #168	; 0xa8
 8000d0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d10:	2307      	movs	r3, #7
 8000d12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d14:	f107 0320 	add.w	r3, r7, #32
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f001 fd05 	bl	8002728 <HAL_RCC_OscConfig>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d24:	f000 f8e8 	bl	8000ef8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d28:	230f      	movs	r3, #15
 8000d2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	2105      	movs	r1, #5
 8000d46:	4618      	mov	r0, r3
 8000d48:	f001 ff66 	bl	8002c18 <HAL_RCC_ClockConfig>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d52:	f000 f8d1 	bl	8000ef8 <Error_Handler>
  }
}
 8000d56:	bf00      	nop
 8000d58:	3750      	adds	r7, #80	; 0x50
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40007000 	.word	0x40007000

08000d68 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <MX_SDIO_SD_Init+0x38>)
 8000d6e:	4a0d      	ldr	r2, [pc, #52]	; (8000da4 <MX_SDIO_SD_Init+0x3c>)
 8000d70:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <MX_SDIO_SD_Init+0x38>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000d78:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <MX_SDIO_SD_Init+0x38>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000d7e:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <MX_SDIO_SD_Init+0x38>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <MX_SDIO_SD_Init+0x38>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000d8a:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <MX_SDIO_SD_Init+0x38>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <MX_SDIO_SD_Init+0x38>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	2000120c 	.word	0x2000120c
 8000da4:	40012c00 	.word	0x40012c00

08000da8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <MX_USART1_UART_Init+0x4c>)
 8000dae:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <MX_USART1_UART_Init+0x50>)
 8000db0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <MX_USART1_UART_Init+0x4c>)
 8000db4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000db8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <MX_USART1_UART_Init+0x4c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <MX_USART1_UART_Init+0x4c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <MX_USART1_UART_Init+0x4c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dcc:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <MX_USART1_UART_Init+0x4c>)
 8000dce:	220c      	movs	r2, #12
 8000dd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd2:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <MX_USART1_UART_Init+0x4c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <MX_USART1_UART_Init+0x4c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dde:	4805      	ldr	r0, [pc, #20]	; (8000df4 <MX_USART1_UART_Init+0x4c>)
 8000de0:	f003 ff24 	bl	8004c2c <HAL_UART_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dea:	f000 f885 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20001168 	.word	0x20001168
 8000df8:	40011000 	.word	0x40011000

08000dfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <MX_DMA_Init+0x4c>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a0f      	ldr	r2, [pc, #60]	; (8000e48 <MX_DMA_Init+0x4c>)
 8000e0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <MX_DMA_Init+0x4c>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2100      	movs	r1, #0
 8000e22:	203b      	movs	r0, #59	; 0x3b
 8000e24:	f000 ff1c 	bl	8001c60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000e28:	203b      	movs	r0, #59	; 0x3b
 8000e2a:	f000 ff35 	bl	8001c98 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2100      	movs	r1, #0
 8000e32:	2045      	movs	r0, #69	; 0x45
 8000e34:	f000 ff14 	bl	8001c60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000e38:	2045      	movs	r0, #69	; 0x45
 8000e3a:	f000 ff2d 	bl	8001c98 <HAL_NVIC_EnableIRQ>

}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800

08000e4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <MX_GPIO_Init+0x84>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a1d      	ldr	r2, [pc, #116]	; (8000ed0 <MX_GPIO_Init+0x84>)
 8000e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <MX_GPIO_Init+0x84>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <MX_GPIO_Init+0x84>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a16      	ldr	r2, [pc, #88]	; (8000ed0 <MX_GPIO_Init+0x84>)
 8000e78:	f043 0304 	orr.w	r3, r3, #4
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <MX_GPIO_Init+0x84>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0304 	and.w	r3, r3, #4
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <MX_GPIO_Init+0x84>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a0f      	ldr	r2, [pc, #60]	; (8000ed0 <MX_GPIO_Init+0x84>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <MX_GPIO_Init+0x84>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	603b      	str	r3, [r7, #0]
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <MX_GPIO_Init+0x84>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a08      	ldr	r2, [pc, #32]	; (8000ed0 <MX_GPIO_Init+0x84>)
 8000eb0:	f043 0308 	orr.w	r3, r3, #8
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <MX_GPIO_Init+0x84>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0308 	and.w	r3, r3, #8
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]

}
 8000ec2:	bf00      	nop
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	40023800 	.word	0x40023800

08000ed4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d101      	bne.n	8000eea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ee6:	f000 fdbf 	bl	8001a68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40002000 	.word	0x40002000

08000ef8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000efc:	b672      	cpsid	i
}
 8000efe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f00:	e7fe      	b.n	8000f00 <Error_Handler+0x8>
	...

08000f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <HAL_MspInit+0x4c>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	4a0f      	ldr	r2, [pc, #60]	; (8000f50 <HAL_MspInit+0x4c>)
 8000f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f18:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <HAL_MspInit+0x4c>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	603b      	str	r3, [r7, #0]
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <HAL_MspInit+0x4c>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	4a08      	ldr	r2, [pc, #32]	; (8000f50 <HAL_MspInit+0x4c>)
 8000f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f34:	6413      	str	r3, [r2, #64]	; 0x40
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_MspInit+0x4c>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	40023800 	.word	0x40023800

08000f54 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08a      	sub	sp, #40	; 0x28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a70      	ldr	r2, [pc, #448]	; (8001134 <HAL_SD_MspInit+0x1e0>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	f040 80da 	bne.w	800112c <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000f78:	2300      	movs	r3, #0
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	4b6e      	ldr	r3, [pc, #440]	; (8001138 <HAL_SD_MspInit+0x1e4>)
 8000f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f80:	4a6d      	ldr	r2, [pc, #436]	; (8001138 <HAL_SD_MspInit+0x1e4>)
 8000f82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f86:	6453      	str	r3, [r2, #68]	; 0x44
 8000f88:	4b6b      	ldr	r3, [pc, #428]	; (8001138 <HAL_SD_MspInit+0x1e4>)
 8000f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	4b67      	ldr	r3, [pc, #412]	; (8001138 <HAL_SD_MspInit+0x1e4>)
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9c:	4a66      	ldr	r2, [pc, #408]	; (8001138 <HAL_SD_MspInit+0x1e4>)
 8000f9e:	f043 0304 	orr.w	r3, r3, #4
 8000fa2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa4:	4b64      	ldr	r3, [pc, #400]	; (8001138 <HAL_SD_MspInit+0x1e4>)
 8000fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa8:	f003 0304 	and.w	r3, r3, #4
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	4b60      	ldr	r3, [pc, #384]	; (8001138 <HAL_SD_MspInit+0x1e4>)
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb8:	4a5f      	ldr	r2, [pc, #380]	; (8001138 <HAL_SD_MspInit+0x1e4>)
 8000fba:	f043 0308 	orr.w	r3, r3, #8
 8000fbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc0:	4b5d      	ldr	r3, [pc, #372]	; (8001138 <HAL_SD_MspInit+0x1e4>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc4:	f003 0308 	and.w	r3, r3, #8
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000fcc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000fde:	230c      	movs	r3, #12
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4854      	ldr	r0, [pc, #336]	; (800113c <HAL_SD_MspInit+0x1e8>)
 8000fea:	f001 fa01 	bl	80023f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000fee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001000:	230c      	movs	r3, #12
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	484c      	ldr	r0, [pc, #304]	; (800113c <HAL_SD_MspInit+0x1e8>)
 800100c:	f001 f9f0 	bl	80023f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001010:	2304      	movs	r3, #4
 8001012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001018:	2301      	movs	r3, #1
 800101a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101c:	2303      	movs	r3, #3
 800101e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001020:	230c      	movs	r3, #12
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4619      	mov	r1, r3
 800102a:	4845      	ldr	r0, [pc, #276]	; (8001140 <HAL_SD_MspInit+0x1ec>)
 800102c:	f001 f9e0 	bl	80023f0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001030:	4b44      	ldr	r3, [pc, #272]	; (8001144 <HAL_SD_MspInit+0x1f0>)
 8001032:	4a45      	ldr	r2, [pc, #276]	; (8001148 <HAL_SD_MspInit+0x1f4>)
 8001034:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001036:	4b43      	ldr	r3, [pc, #268]	; (8001144 <HAL_SD_MspInit+0x1f0>)
 8001038:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800103c:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800103e:	4b41      	ldr	r3, [pc, #260]	; (8001144 <HAL_SD_MspInit+0x1f0>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001044:	4b3f      	ldr	r3, [pc, #252]	; (8001144 <HAL_SD_MspInit+0x1f0>)
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800104a:	4b3e      	ldr	r3, [pc, #248]	; (8001144 <HAL_SD_MspInit+0x1f0>)
 800104c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001050:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001052:	4b3c      	ldr	r3, [pc, #240]	; (8001144 <HAL_SD_MspInit+0x1f0>)
 8001054:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001058:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800105a:	4b3a      	ldr	r3, [pc, #232]	; (8001144 <HAL_SD_MspInit+0x1f0>)
 800105c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001060:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001062:	4b38      	ldr	r3, [pc, #224]	; (8001144 <HAL_SD_MspInit+0x1f0>)
 8001064:	2220      	movs	r2, #32
 8001066:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001068:	4b36      	ldr	r3, [pc, #216]	; (8001144 <HAL_SD_MspInit+0x1f0>)
 800106a:	2200      	movs	r2, #0
 800106c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800106e:	4b35      	ldr	r3, [pc, #212]	; (8001144 <HAL_SD_MspInit+0x1f0>)
 8001070:	2204      	movs	r2, #4
 8001072:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001074:	4b33      	ldr	r3, [pc, #204]	; (8001144 <HAL_SD_MspInit+0x1f0>)
 8001076:	2203      	movs	r2, #3
 8001078:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800107a:	4b32      	ldr	r3, [pc, #200]	; (8001144 <HAL_SD_MspInit+0x1f0>)
 800107c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001080:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001082:	4b30      	ldr	r3, [pc, #192]	; (8001144 <HAL_SD_MspInit+0x1f0>)
 8001084:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001088:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800108a:	482e      	ldr	r0, [pc, #184]	; (8001144 <HAL_SD_MspInit+0x1f0>)
 800108c:	f000 fe12 	bl	8001cb4 <HAL_DMA_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8001096:	f7ff ff2f 	bl	8000ef8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a29      	ldr	r2, [pc, #164]	; (8001144 <HAL_SD_MspInit+0x1f0>)
 800109e:	641a      	str	r2, [r3, #64]	; 0x40
 80010a0:	4a28      	ldr	r2, [pc, #160]	; (8001144 <HAL_SD_MspInit+0x1f0>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80010a6:	4b29      	ldr	r3, [pc, #164]	; (800114c <HAL_SD_MspInit+0x1f8>)
 80010a8:	4a29      	ldr	r2, [pc, #164]	; (8001150 <HAL_SD_MspInit+0x1fc>)
 80010aa:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80010ac:	4b27      	ldr	r3, [pc, #156]	; (800114c <HAL_SD_MspInit+0x1f8>)
 80010ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010b2:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010b4:	4b25      	ldr	r3, [pc, #148]	; (800114c <HAL_SD_MspInit+0x1f8>)
 80010b6:	2240      	movs	r2, #64	; 0x40
 80010b8:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ba:	4b24      	ldr	r3, [pc, #144]	; (800114c <HAL_SD_MspInit+0x1f8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010c0:	4b22      	ldr	r3, [pc, #136]	; (800114c <HAL_SD_MspInit+0x1f8>)
 80010c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010c6:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010c8:	4b20      	ldr	r3, [pc, #128]	; (800114c <HAL_SD_MspInit+0x1f8>)
 80010ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010ce:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010d0:	4b1e      	ldr	r3, [pc, #120]	; (800114c <HAL_SD_MspInit+0x1f8>)
 80010d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010d6:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80010d8:	4b1c      	ldr	r3, [pc, #112]	; (800114c <HAL_SD_MspInit+0x1f8>)
 80010da:	2220      	movs	r2, #32
 80010dc:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010de:	4b1b      	ldr	r3, [pc, #108]	; (800114c <HAL_SD_MspInit+0x1f8>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80010e4:	4b19      	ldr	r3, [pc, #100]	; (800114c <HAL_SD_MspInit+0x1f8>)
 80010e6:	2204      	movs	r2, #4
 80010e8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80010ea:	4b18      	ldr	r3, [pc, #96]	; (800114c <HAL_SD_MspInit+0x1f8>)
 80010ec:	2203      	movs	r2, #3
 80010ee:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80010f0:	4b16      	ldr	r3, [pc, #88]	; (800114c <HAL_SD_MspInit+0x1f8>)
 80010f2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80010f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <HAL_SD_MspInit+0x1f8>)
 80010fa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80010fe:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001100:	4812      	ldr	r0, [pc, #72]	; (800114c <HAL_SD_MspInit+0x1f8>)
 8001102:	f000 fdd7 	bl	8001cb4 <HAL_DMA_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 800110c:	f7ff fef4 	bl	8000ef8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a0e      	ldr	r2, [pc, #56]	; (800114c <HAL_SD_MspInit+0x1f8>)
 8001114:	63da      	str	r2, [r3, #60]	; 0x3c
 8001116:	4a0d      	ldr	r2, [pc, #52]	; (800114c <HAL_SD_MspInit+0x1f8>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800111c:	2200      	movs	r2, #0
 800111e:	2100      	movs	r1, #0
 8001120:	2031      	movs	r0, #49	; 0x31
 8001122:	f000 fd9d 	bl	8001c60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001126:	2031      	movs	r0, #49	; 0x31
 8001128:	f000 fdb6 	bl	8001c98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800112c:	bf00      	nop
 800112e:	3728      	adds	r7, #40	; 0x28
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40012c00 	.word	0x40012c00
 8001138:	40023800 	.word	0x40023800
 800113c:	40020800 	.word	0x40020800
 8001140:	40020c00 	.word	0x40020c00
 8001144:	20001108 	.word	0x20001108
 8001148:	40026458 	.word	0x40026458
 800114c:	200011ac 	.word	0x200011ac
 8001150:	400264a0 	.word	0x400264a0

08001154 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	; 0x28
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a19      	ldr	r2, [pc, #100]	; (80011d8 <HAL_UART_MspInit+0x84>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d12c      	bne.n	80011d0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	4b18      	ldr	r3, [pc, #96]	; (80011dc <HAL_UART_MspInit+0x88>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	4a17      	ldr	r2, [pc, #92]	; (80011dc <HAL_UART_MspInit+0x88>)
 8001180:	f043 0310 	orr.w	r3, r3, #16
 8001184:	6453      	str	r3, [r2, #68]	; 0x44
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <HAL_UART_MspInit+0x88>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	f003 0310 	and.w	r3, r3, #16
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <HAL_UART_MspInit+0x88>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a10      	ldr	r2, [pc, #64]	; (80011dc <HAL_UART_MspInit+0x88>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <HAL_UART_MspInit+0x88>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011bc:	2303      	movs	r3, #3
 80011be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011c0:	2307      	movs	r3, #7
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4619      	mov	r1, r3
 80011ca:	4805      	ldr	r0, [pc, #20]	; (80011e0 <HAL_UART_MspInit+0x8c>)
 80011cc:	f001 f910 	bl	80023f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011d0:	bf00      	nop
 80011d2:	3728      	adds	r7, #40	; 0x28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40011000 	.word	0x40011000
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40020000 	.word	0x40020000

080011e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08c      	sub	sp, #48	; 0x30
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 80011f4:	2200      	movs	r2, #0
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	202d      	movs	r0, #45	; 0x2d
 80011fa:	f000 fd31 	bl	8001c60 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80011fe:	202d      	movs	r0, #45	; 0x2d
 8001200:	f000 fd4a 	bl	8001c98 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001204:	2300      	movs	r3, #0
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <HAL_InitTick+0xa4>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	4a1e      	ldr	r2, [pc, #120]	; (8001288 <HAL_InitTick+0xa4>)
 800120e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001212:	6413      	str	r3, [r2, #64]	; 0x40
 8001214:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <HAL_InitTick+0xa4>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001220:	f107 0210 	add.w	r2, r7, #16
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4611      	mov	r1, r2
 800122a:	4618      	mov	r0, r3
 800122c:	f001 fef0 	bl	8003010 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001230:	f001 fec6 	bl	8002fc0 <HAL_RCC_GetPCLK1Freq>
 8001234:	4603      	mov	r3, r0
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800123a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123c:	4a13      	ldr	r2, [pc, #76]	; (800128c <HAL_InitTick+0xa8>)
 800123e:	fba2 2303 	umull	r2, r3, r2, r3
 8001242:	0c9b      	lsrs	r3, r3, #18
 8001244:	3b01      	subs	r3, #1
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <HAL_InitTick+0xac>)
 800124a:	4a12      	ldr	r2, [pc, #72]	; (8001294 <HAL_InitTick+0xb0>)
 800124c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <HAL_InitTick+0xac>)
 8001250:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001254:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001256:	4a0e      	ldr	r2, [pc, #56]	; (8001290 <HAL_InitTick+0xac>)
 8001258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800125a:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <HAL_InitTick+0xac>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <HAL_InitTick+0xac>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8001268:	4809      	ldr	r0, [pc, #36]	; (8001290 <HAL_InitTick+0xac>)
 800126a:	f003 fa32 	bl	80046d2 <HAL_TIM_Base_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d104      	bne.n	800127e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8001274:	4806      	ldr	r0, [pc, #24]	; (8001290 <HAL_InitTick+0xac>)
 8001276:	f003 fa85 	bl	8004784 <HAL_TIM_Base_Start_IT>
 800127a:	4603      	mov	r3, r0
 800127c:	e000      	b.n	8001280 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
}
 8001280:	4618      	mov	r0, r3
 8001282:	3730      	adds	r7, #48	; 0x30
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40023800 	.word	0x40023800
 800128c:	431bde83 	.word	0x431bde83
 8001290:	20001290 	.word	0x20001290
 8001294:	40002000 	.word	0x40002000

08001298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800129c:	e7fe      	b.n	800129c <NMI_Handler+0x4>

0800129e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a2:	e7fe      	b.n	80012a2 <HardFault_Handler+0x4>

080012a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <MemManage_Handler+0x4>

080012aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ae:	e7fe      	b.n	80012ae <BusFault_Handler+0x4>

080012b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <UsageFault_Handler+0x4>

080012b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80012f4:	4802      	ldr	r0, [pc, #8]	; (8001300 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80012f6:	f003 fab5 	bl	8004864 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20001290 	.word	0x20001290

08001304 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001308:	4802      	ldr	r0, [pc, #8]	; (8001314 <SDIO_IRQHandler+0x10>)
 800130a:	f002 f929 	bl	8003560 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	2000120c 	.word	0x2000120c

08001318 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800131c:	4802      	ldr	r0, [pc, #8]	; (8001328 <DMA2_Stream3_IRQHandler+0x10>)
 800131e:	f000 fdf1 	bl	8001f04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20001108 	.word	0x20001108

0800132c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001330:	4802      	ldr	r0, [pc, #8]	; (800133c <DMA2_Stream6_IRQHandler+0x10>)
 8001332:	f000 fde7 	bl	8001f04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200011ac 	.word	0x200011ac

08001340 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	e00a      	b.n	8001368 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001352:	f3af 8000 	nop.w
 8001356:	4601      	mov	r1, r0
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	1c5a      	adds	r2, r3, #1
 800135c:	60ba      	str	r2, [r7, #8]
 800135e:	b2ca      	uxtb	r2, r1
 8001360:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	3301      	adds	r3, #1
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	429a      	cmp	r2, r3
 800136e:	dbf0      	blt.n	8001352 <_read+0x12>
	}

return len;
 8001370:	687b      	ldr	r3, [r7, #4]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <_close>:
	}
	return len;
}

int _close(int file)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
	return -1;
 8001382:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001386:	4618      	mov	r0, r3
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013a2:	605a      	str	r2, [r3, #4]
	return 0;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <_isatty>:

int _isatty(int file)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
	return 1;
 80013ba:	2301      	movs	r3, #1
}
 80013bc:	4618      	mov	r0, r3
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
	return 0;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013ec:	4a14      	ldr	r2, [pc, #80]	; (8001440 <_sbrk+0x5c>)
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <_sbrk+0x60>)
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f8:	4b13      	ldr	r3, [pc, #76]	; (8001448 <_sbrk+0x64>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d102      	bne.n	8001406 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <_sbrk+0x64>)
 8001402:	4a12      	ldr	r2, [pc, #72]	; (800144c <_sbrk+0x68>)
 8001404:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <_sbrk+0x64>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	429a      	cmp	r2, r3
 8001412:	d207      	bcs.n	8001424 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001414:	f007 ff5c 	bl	80092d0 <__errno>
 8001418:	4603      	mov	r3, r0
 800141a:	220c      	movs	r2, #12
 800141c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800141e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001422:	e009      	b.n	8001438 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <_sbrk+0x64>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800142a:	4b07      	ldr	r3, [pc, #28]	; (8001448 <_sbrk+0x64>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4413      	add	r3, r2
 8001432:	4a05      	ldr	r2, [pc, #20]	; (8001448 <_sbrk+0x64>)
 8001434:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001436:	68fb      	ldr	r3, [r7, #12]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20020000 	.word	0x20020000
 8001444:	00000400 	.word	0x00000400
 8001448:	200000c0 	.word	0x200000c0
 800144c:	20003430 	.word	0x20003430

08001450 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <SystemInit+0x20>)
 8001456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800145a:	4a05      	ldr	r2, [pc, #20]	; (8001470 <SystemInit+0x20>)
 800145c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001460:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <clear_buffer>:
uint32_t total, free_space;

/*--------------------------------------------------------------------------------------------------------------*/
// Очищаем буфер. / Clear buffer
void clear_buffer(void)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
	for (int i = 0; i < 100; i++)
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	e007      	b.n	8001490 <clear_buffer+0x1c>
		buffer[i] = '\0'; // BUFFER_SIZE
 8001480:	4a08      	ldr	r2, [pc, #32]	; (80014a4 <clear_buffer+0x30>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 100; i++)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3301      	adds	r3, #1
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b63      	cmp	r3, #99	; 0x63
 8001494:	ddf4      	ble.n	8001480 <clear_buffer+0xc>
}
 8001496:	bf00      	nop
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	200000c4 	.word	0x200000c4

080014a8 <zerg_mount>:
/*--------------------------------------------------------------------------------------------------------------*/
// Монтируем SD-карту / Mount SD card
void zerg_mount(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	if (f_mount(&SDFatFS, (TCHAR const *)SDPath, 0) != FR_OK)
 80014ac:	2200      	movs	r2, #0
 80014ae:	4908      	ldr	r1, [pc, #32]	; (80014d0 <zerg_mount+0x28>)
 80014b0:	4808      	ldr	r0, [pc, #32]	; (80014d4 <zerg_mount+0x2c>)
 80014b2:	f006 fd41 	bl	8007f38 <f_mount>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <zerg_mount+0x1c>
	{
		printf("Error Mounting SD Card\r\n");
 80014bc:	4806      	ldr	r0, [pc, #24]	; (80014d8 <zerg_mount+0x30>)
 80014be:	f007 ffbf 	bl	8009440 <puts>
	}
	else
	{
		printf("SD card mounted successfully!\r\n");
	}
}
 80014c2:	e002      	b.n	80014ca <zerg_mount+0x22>
		printf("SD card mounted successfully!\r\n");
 80014c4:	4805      	ldr	r0, [pc, #20]	; (80014dc <zerg_mount+0x34>)
 80014c6:	f007 ffbb 	bl	8009440 <puts>
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200013b4 	.word	0x200013b4
 80014d4:	200023e8 	.word	0x200023e8
 80014d8:	0800a6a0 	.word	0x0800a6a0
 80014dc:	0800a6b8 	.word	0x0800a6b8

080014e0 <zerg_open>:
	}
}
/*--------------------------------------------------------------------------------------------------------------*/
// Создаем файл для записи если не существует то, создаем его! / Open file for writing (Create)
void zerg_open(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
	if (f_open(&SDFile, (char*)name, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 80014e4:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <zerg_open+0x30>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	220a      	movs	r2, #10
 80014ea:	4619      	mov	r1, r3
 80014ec:	4809      	ldr	r0, [pc, #36]	; (8001514 <zerg_open+0x34>)
 80014ee:	f006 fd69 	bl	8007fc4 <f_open>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <zerg_open+0x20>
	{
		printf("Error openning file\r\n");
 80014f8:	4807      	ldr	r0, [pc, #28]	; (8001518 <zerg_open+0x38>)
 80014fa:	f007 ffa1 	bl	8009440 <puts>
	}
	else
	{
		printf("File %s Openned Successfully!\r\n",name);
	}
}
 80014fe:	e005      	b.n	800150c <zerg_open+0x2c>
		printf("File %s Openned Successfully!\r\n",name);
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <zerg_open+0x30>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	4805      	ldr	r0, [pc, #20]	; (800151c <zerg_open+0x3c>)
 8001508:	f007 ff14 	bl	8009334 <iprintf>
}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000014 	.word	0x20000014
 8001514:	200013b8 	.word	0x200013b8
 8001518:	0800a714 	.word	0x0800a714
 800151c:	0800a72c 	.word	0x0800a72c

08001520 <zerg_write>:
/*--------------------------------------------------------------------------------------------------------------*/
// Запись данных в файл / Write data to the text file
void zerg_write(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
	res = f_write(&SDFile, wtext, strlen((char *)wtext),
 8001524:	4814      	ldr	r0, [pc, #80]	; (8001578 <zerg_write+0x58>)
 8001526:	f7fe fe53 	bl	80001d0 <strlen>
 800152a:	4602      	mov	r2, r0
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <zerg_write+0x5c>)
 800152e:	4912      	ldr	r1, [pc, #72]	; (8001578 <zerg_write+0x58>)
 8001530:	4813      	ldr	r0, [pc, #76]	; (8001580 <zerg_write+0x60>)
 8001532:	f007 f872 	bl	800861a <f_write>
 8001536:	4603      	mov	r3, r0
 8001538:	461a      	mov	r2, r3
 800153a:	4b12      	ldr	r3, [pc, #72]	; (8001584 <zerg_write+0x64>)
 800153c:	701a      	strb	r2, [r3, #0]
				  (void *)&byteswritten);
	if ((byteswritten == 0) || (res != FR_OK))
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <zerg_write+0x5c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <zerg_write+0x2e>
 8001546:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <zerg_write+0x64>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d008      	beq.n	8001560 <zerg_write+0x40>
	{
		printf("Failed to write file!\r\n");
 800154e:	480e      	ldr	r0, [pc, #56]	; (8001588 <zerg_write+0x68>)
 8001550:	f007 ff76 	bl	8009440 <puts>
		f_close(&SDFile);
 8001554:	480a      	ldr	r0, [pc, #40]	; (8001580 <zerg_write+0x60>)
 8001556:	f007 fa72 	bl	8008a3e <f_close>
		clear_buffer();
 800155a:	f7ff ff8b 	bl	8001474 <clear_buffer>
 800155e:	e008      	b.n	8001572 <zerg_write+0x52>
	}
	else
	{
		printf("File written successfully\r\n");
 8001560:	480a      	ldr	r0, [pc, #40]	; (800158c <zerg_write+0x6c>)
 8001562:	f007 ff6d 	bl	8009440 <puts>
		f_close(&SDFile);
 8001566:	4806      	ldr	r0, [pc, #24]	; (8001580 <zerg_write+0x60>)
 8001568:	f007 fa69 	bl	8008a3e <f_close>
		clear_buffer();
 800156c:	f7ff ff82 	bl	8001474 <clear_buffer>
	}
}
 8001570:	bf00      	nop
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	2000001c 	.word	0x2000001c
 800157c:	200012dc 	.word	0x200012dc
 8001580:	200013b8 	.word	0x200013b8
 8001584:	200013a8 	.word	0x200013a8
 8001588:	0800a74c 	.word	0x0800a74c
 800158c:	0800a764 	.word	0x0800a764

08001590 <zerg_read>:
/*--------------------------------------------------------------------------------------------------------------*/
// Считываем данные из файла / Reading data from file
void zerg_read(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
	f_open(&SDFile, (char*)name, FA_READ);
 8001594:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <zerg_read+0x64>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2201      	movs	r2, #1
 800159a:	4619      	mov	r1, r3
 800159c:	4816      	ldr	r0, [pc, #88]	; (80015f8 <zerg_read+0x68>)
 800159e:	f006 fd11 	bl	8007fc4 <f_open>
	memset(rtext, 0, sizeof(rtext));
 80015a2:	2264      	movs	r2, #100	; 0x64
 80015a4:	2100      	movs	r1, #0
 80015a6:	4815      	ldr	r0, [pc, #84]	; (80015fc <zerg_read+0x6c>)
 80015a8:	f007 febc 	bl	8009324 <memset>
	res = f_read(&SDFile, rtext, sizeof(rtext), (UINT *)&bytesread);
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <zerg_read+0x70>)
 80015ae:	2264      	movs	r2, #100	; 0x64
 80015b0:	4912      	ldr	r1, [pc, #72]	; (80015fc <zerg_read+0x6c>)
 80015b2:	4811      	ldr	r0, [pc, #68]	; (80015f8 <zerg_read+0x68>)
 80015b4:	f006 fed2 	bl	800835c <f_read>
 80015b8:	4603      	mov	r3, r0
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <zerg_read+0x74>)
 80015be:	701a      	strb	r2, [r3, #0]
	if ((bytesread == 0) || (res != FR_OK))
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <zerg_read+0x70>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <zerg_read+0x40>
 80015c8:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <zerg_read+0x74>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <zerg_read+0x48>
	{
		printf("Failed to read file!\r\n");
 80015d0:	480d      	ldr	r0, [pc, #52]	; (8001608 <zerg_read+0x78>)
 80015d2:	f007 ff35 	bl	8009440 <puts>
 80015d6:	e006      	b.n	80015e6 <zerg_read+0x56>
	}
	else
	{
		//printf("File *%s* readed successfully! \n", name);
		printf("File *%s* has content it is; %s\r\n",name, (char *)rtext);
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <zerg_read+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a07      	ldr	r2, [pc, #28]	; (80015fc <zerg_read+0x6c>)
 80015de:	4619      	mov	r1, r3
 80015e0:	480a      	ldr	r0, [pc, #40]	; (800160c <zerg_read+0x7c>)
 80015e2:	f007 fea7 	bl	8009334 <iprintf>
	}
	f_close(&SDFile);
 80015e6:	4804      	ldr	r0, [pc, #16]	; (80015f8 <zerg_read+0x68>)
 80015e8:	f007 fa29 	bl	8008a3e <f_close>
	clear_buffer();
 80015ec:	f7ff ff42 	bl	8001474 <clear_buffer>
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000014 	.word	0x20000014
 80015f8:	200013b8 	.word	0x200013b8
 80015fc:	20001308 	.word	0x20001308
 8001600:	200012e4 	.word	0x200012e4
 8001604:	200013a8 	.word	0x200013a8
 8001608:	0800a780 	.word	0x0800a780
 800160c:	0800a798 	.word	0x0800a798

08001610 <zerg_add_data>:
//		return i;
//	}
/*--------------------------------------------------------------------------------------------------------------*/
// Дописываем данные в существующий файл / Adding data to an existing file
void zerg_add_data(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
	res = f_open(&SDFile, (char*)name, FA_OPEN_APPEND | FA_WRITE);
 8001616:	4b2f      	ldr	r3, [pc, #188]	; (80016d4 <zerg_add_data+0xc4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2232      	movs	r2, #50	; 0x32
 800161c:	4619      	mov	r1, r3
 800161e:	482e      	ldr	r0, [pc, #184]	; (80016d8 <zerg_add_data+0xc8>)
 8001620:	f006 fcd0 	bl	8007fc4 <f_open>
 8001624:	4603      	mov	r3, r0
 8001626:	461a      	mov	r2, r3
 8001628:	4b2c      	ldr	r3, [pc, #176]	; (80016dc <zerg_add_data+0xcc>)
 800162a:	701a      	strb	r2, [r3, #0]
	if (res != FR_OK)
 800162c:	4b2b      	ldr	r3, [pc, #172]	; (80016dc <zerg_add_data+0xcc>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d009      	beq.n	8001648 <zerg_add_data+0x38>
	{
		printf("Error no %d in opening file *%s*\n", res, name);
 8001634:	4b29      	ldr	r3, [pc, #164]	; (80016dc <zerg_add_data+0xcc>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <zerg_add_data+0xc4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	4827      	ldr	r0, [pc, #156]	; (80016e0 <zerg_add_data+0xd0>)
 8001642:	f007 fe77 	bl	8009334 <iprintf>
 8001646:	e005      	b.n	8001654 <zerg_add_data+0x44>
	}
	else
	{
		printf("File *%s* is opened. Now we will add same information! \n", name);
 8001648:	4b22      	ldr	r3, [pc, #136]	; (80016d4 <zerg_add_data+0xc4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4619      	mov	r1, r3
 800164e:	4825      	ldr	r0, [pc, #148]	; (80016e4 <zerg_add_data+0xd4>)
 8001650:	f007 fe70 	bl	8009334 <iprintf>
	}
	int len = f_size(&SDFile);
 8001654:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <zerg_add_data+0xc8>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	607b      	str	r3, [r7, #4]
	if (len != 0)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d002      	beq.n	8001666 <zerg_add_data+0x56>
		len += 2;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3302      	adds	r3, #2
 8001664:	607b      	str	r3, [r7, #4]
	f_lseek(&SDFile, len);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4619      	mov	r1, r3
 800166a:	481b      	ldr	r0, [pc, #108]	; (80016d8 <zerg_add_data+0xc8>)
 800166c:	f007 fa11 	bl	8008a92 <f_lseek>
	res = f_write(&SDFile, addtext, sizeof(addtext), (void *)&byteswritten);
 8001670:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <zerg_add_data+0xd8>)
 8001672:	2210      	movs	r2, #16
 8001674:	491d      	ldr	r1, [pc, #116]	; (80016ec <zerg_add_data+0xdc>)
 8001676:	4818      	ldr	r0, [pc, #96]	; (80016d8 <zerg_add_data+0xc8>)
 8001678:	f006 ffcf 	bl	800861a <f_write>
 800167c:	4603      	mov	r3, r0
 800167e:	461a      	mov	r2, r3
 8001680:	4b16      	ldr	r3, [pc, #88]	; (80016dc <zerg_add_data+0xcc>)
 8001682:	701a      	strb	r2, [r3, #0]
	if ((byteswritten > 0) && (res == FR_OK))
 8001684:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <zerg_add_data+0xd8>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d005      	beq.n	8001698 <zerg_add_data+0x88>
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <zerg_add_data+0xcc>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d101      	bne.n	8001698 <zerg_add_data+0x88>

		clear_buffer();
 8001694:	f7ff feee 	bl	8001474 <clear_buffer>
	{
		printf("Information was added successfully in %s\n", name);
 8001698:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <zerg_add_data+0xc4>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4619      	mov	r1, r3
 800169e:	4814      	ldr	r0, [pc, #80]	; (80016f0 <zerg_add_data+0xe0>)
 80016a0:	f007 fe48 	bl	8009334 <iprintf>
	}
	/* Close file */
	res = f_close(&SDFile);
 80016a4:	480c      	ldr	r0, [pc, #48]	; (80016d8 <zerg_add_data+0xc8>)
 80016a6:	f007 f9ca 	bl	8008a3e <f_close>
 80016aa:	4603      	mov	r3, r0
 80016ac:	461a      	mov	r2, r3
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <zerg_add_data+0xcc>)
 80016b0:	701a      	strb	r2, [r3, #0]
	if (res != FR_OK)
 80016b2:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <zerg_add_data+0xcc>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d008      	beq.n	80016cc <zerg_add_data+0xbc>
	{
		printf("Error no %d in closing file *%s*\n", res, name);
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <zerg_add_data+0xcc>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	4619      	mov	r1, r3
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <zerg_add_data+0xc4>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	480b      	ldr	r0, [pc, #44]	; (80016f4 <zerg_add_data+0xe4>)
 80016c8:	f007 fe34 	bl	8009334 <iprintf>
	}
}
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000014 	.word	0x20000014
 80016d8:	200013b8 	.word	0x200013b8
 80016dc:	200013a8 	.word	0x200013a8
 80016e0:	0800a7bc 	.word	0x0800a7bc
 80016e4:	0800a7e0 	.word	0x0800a7e0
 80016e8:	200012dc 	.word	0x200012dc
 80016ec:	20000028 	.word	0x20000028
 80016f0:	0800a81c 	.word	0x0800a81c
 80016f4:	0800a848 	.word	0x0800a848

080016f8 <zerg_scan_files>:
//		//f_closedir(&dir);
//	}
//	return res;
//}

FRESULT zerg_scan_files (char *pat){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
    fileinfo.lfname = lfn;
    fileinfo.lfsize = sizeof lfn;
#endif


    res = f_opendir(&dir, path);                       /* Open the directory */
 8001700:	6979      	ldr	r1, [r7, #20]
 8001702:	482a      	ldr	r0, [pc, #168]	; (80017ac <zerg_scan_files+0xb4>)
 8001704:	f007 fbe9 	bl	8008eda <f_opendir>
 8001708:	4603      	mov	r3, r0
 800170a:	461a      	mov	r2, r3
 800170c:	4b28      	ldr	r3, [pc, #160]	; (80017b0 <zerg_scan_files+0xb8>)
 800170e:	701a      	strb	r2, [r3, #0]
    if (res == FR_OK) {
 8001710:	4b27      	ldr	r3, [pc, #156]	; (80017b0 <zerg_scan_files+0xb8>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d142      	bne.n	800179e <zerg_scan_files+0xa6>
        i = strlen(path);
 8001718:	6978      	ldr	r0, [r7, #20]
 800171a:	f7fe fd59 	bl	80001d0 <strlen>
 800171e:	4603      	mov	r3, r0
 8001720:	613b      	str	r3, [r7, #16]
        for (;;) {
            res = f_readdir(&dir, &fileinfo);                   /* Read a directory item */
 8001722:	4924      	ldr	r1, [pc, #144]	; (80017b4 <zerg_scan_files+0xbc>)
 8001724:	4821      	ldr	r0, [pc, #132]	; (80017ac <zerg_scan_files+0xb4>)
 8001726:	f007 fc4b 	bl	8008fc0 <f_readdir>
 800172a:	4603      	mov	r3, r0
 800172c:	461a      	mov	r2, r3
 800172e:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <zerg_scan_files+0xb8>)
 8001730:	701a      	strb	r2, [r3, #0]
            if (res != FR_OK || fileinfo.fname[0] == 0) break;  /* Break on error or end of dir */
 8001732:	4b1f      	ldr	r3, [pc, #124]	; (80017b0 <zerg_scan_files+0xb8>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d131      	bne.n	800179e <zerg_scan_files+0xa6>
 800173a:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <zerg_scan_files+0xbc>)
 800173c:	7a5b      	ldrb	r3, [r3, #9]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d02d      	beq.n	800179e <zerg_scan_files+0xa6>
            if (fileinfo.fname[0] == '.') continue;             /* Ignore dot entry */
 8001742:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <zerg_scan_files+0xbc>)
 8001744:	7a5b      	ldrb	r3, [r3, #9]
 8001746:	2b2e      	cmp	r3, #46	; 0x2e
 8001748:	d026      	beq.n	8001798 <zerg_scan_files+0xa0>
#if _USE_LFN
            fn = *fileinfo.lfname ? fileinfo.lfname : fileinfo.fname;
#else
            fn = fileinfo.fname;
 800174a:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <zerg_scan_files+0xc0>)
 800174c:	60fb      	str	r3, [r7, #12]
#endif
            if (fileinfo.fattrib & AM_DIR) {                    /* It is a directory */
 800174e:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <zerg_scan_files+0xbc>)
 8001750:	7a1b      	ldrb	r3, [r3, #8]
 8001752:	f003 0310 	and.w	r3, r3, #16
 8001756:	2b00      	cmp	r3, #0
 8001758:	d018      	beq.n	800178c <zerg_scan_files+0x94>
                sprintf(&path[i], "/%s", fn);
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	4413      	add	r3, r2
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	4916      	ldr	r1, [pc, #88]	; (80017bc <zerg_scan_files+0xc4>)
 8001764:	4618      	mov	r0, r3
 8001766:	f007 fe73 	bl	8009450 <siprintf>
                res = zerg_scan_files(path);
 800176a:	6978      	ldr	r0, [r7, #20]
 800176c:	f7ff ffc4 	bl	80016f8 <zerg_scan_files>
 8001770:	4603      	mov	r3, r0
 8001772:	461a      	mov	r2, r3
 8001774:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <zerg_scan_files+0xb8>)
 8001776:	701a      	strb	r2, [r3, #0]
                if (res != FR_OK) break;
 8001778:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <zerg_scan_files+0xb8>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d10d      	bne.n	800179c <zerg_scan_files+0xa4>
                path[i] = 0;
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	4413      	add	r3, r2
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
 800178a:	e7ca      	b.n	8001722 <zerg_scan_files+0x2a>
            } else {                                       /* It is a file. */
                printf("%s/%s\n", path, fn);
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	6979      	ldr	r1, [r7, #20]
 8001790:	480b      	ldr	r0, [pc, #44]	; (80017c0 <zerg_scan_files+0xc8>)
 8001792:	f007 fdcf 	bl	8009334 <iprintf>
 8001796:	e7c4      	b.n	8001722 <zerg_scan_files+0x2a>
            if (fileinfo.fname[0] == '.') continue;             /* Ignore dot entry */
 8001798:	bf00      	nop
            res = f_readdir(&dir, &fileinfo);                   /* Read a directory item */
 800179a:	e7c2      	b.n	8001722 <zerg_scan_files+0x2a>
                if (res != FR_OK) break;
 800179c:	bf00      	nop
            }
        }
    }

    return res;
 800179e:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <zerg_scan_files+0xb8>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20001370 	.word	0x20001370
 80017b0:	200013a8 	.word	0x200013a8
 80017b4:	200012f0 	.word	0x200012f0
 80017b8:	200012f9 	.word	0x200012f9
 80017bc:	0800a8d0 	.word	0x0800a8d0
 80017c0:	0800a8d4 	.word	0x0800a8d4

080017c4 <zerg_ummount>:


/*--------------------------------------------------------------------------------------------------------------*/
// Отмантируем SD карту / Ummount the SD card
void zerg_ummount(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
	res = f_mount(&SDFatFS, (TCHAR const *)NULL, 0);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2100      	movs	r1, #0
 80017cc:	4809      	ldr	r0, [pc, #36]	; (80017f4 <zerg_ummount+0x30>)
 80017ce:	f006 fbb3 	bl	8007f38 <f_mount>
 80017d2:	4603      	mov	r3, r0
 80017d4:	461a      	mov	r2, r3
 80017d6:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <zerg_ummount+0x34>)
 80017d8:	701a      	strb	r2, [r3, #0]
	// if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 0) != FR_OK) {
	if (res == FR_OK)
 80017da:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <zerg_ummount+0x34>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d103      	bne.n	80017ea <zerg_ummount+0x26>
		printf("SD CARD UNMOUNTED successfully...\n");
 80017e2:	4806      	ldr	r0, [pc, #24]	; (80017fc <zerg_ummount+0x38>)
 80017e4:	f007 fe2c 	bl	8009440 <puts>
	else
		printf("Error!!! in UNMOUNTING SD CARD\n");
}
 80017e8:	e002      	b.n	80017f0 <zerg_ummount+0x2c>
		printf("Error!!! in UNMOUNTING SD CARD\n");
 80017ea:	4805      	ldr	r0, [pc, #20]	; (8001800 <zerg_ummount+0x3c>)
 80017ec:	f007 fe28 	bl	8009440 <puts>
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	200023e8 	.word	0x200023e8
 80017f8:	200013a8 	.word	0x200013a8
 80017fc:	0800a8dc 	.word	0x0800a8dc
 8001800:	0800a900 	.word	0x0800a900

08001804 <zerg_get_free_space>:
	}
}
/*--------------------------------------------------------------------------------------------------------------*/
// Узнать количество свободного места на SD карте / Check free space
void zerg_get_free_space(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
	/* Check free space */
	f_getfree("", &fre_clust, &pfs);
 8001808:	4a22      	ldr	r2, [pc, #136]	; (8001894 <zerg_get_free_space+0x90>)
 800180a:	4923      	ldr	r1, [pc, #140]	; (8001898 <zerg_get_free_space+0x94>)
 800180c:	4823      	ldr	r0, [pc, #140]	; (800189c <zerg_get_free_space+0x98>)
 800180e:	f007 fc4d 	bl	80090ac <f_getfree>

	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001812:	4b20      	ldr	r3, [pc, #128]	; (8001894 <zerg_get_free_space+0x90>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	3b02      	subs	r3, #2
 800181a:	4a1e      	ldr	r2, [pc, #120]	; (8001894 <zerg_get_free_space+0x90>)
 800181c:	6812      	ldr	r2, [r2, #0]
 800181e:	8952      	ldrh	r2, [r2, #10]
 8001820:	fb02 f303 	mul.w	r3, r2, r3
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe ff97 	bl	8000758 <__aeabi_ui2d>
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	4b1c      	ldr	r3, [pc, #112]	; (80018a0 <zerg_get_free_space+0x9c>)
 8001830:	f7fe fd26 	bl	8000280 <__aeabi_dmul>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4610      	mov	r0, r2
 800183a:	4619      	mov	r1, r3
 800183c:	f7ff f806 	bl	800084c <__aeabi_d2uiz>
 8001840:	4603      	mov	r3, r0
 8001842:	4a18      	ldr	r2, [pc, #96]	; (80018a4 <zerg_get_free_space+0xa0>)
 8001844:	6013      	str	r3, [r2, #0]
	printf("SD CARD Total Size: \t%lu\n", total);
 8001846:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <zerg_get_free_space+0xa0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4619      	mov	r1, r3
 800184c:	4816      	ldr	r0, [pc, #88]	; (80018a8 <zerg_get_free_space+0xa4>)
 800184e:	f007 fd71 	bl	8009334 <iprintf>
	// send_uart(buffer);
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <zerg_get_free_space+0x90>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	895b      	ldrh	r3, [r3, #10]
 8001858:	461a      	mov	r2, r3
 800185a:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <zerg_get_free_space+0x94>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	fb03 f302 	mul.w	r3, r3, r2
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe ff78 	bl	8000758 <__aeabi_ui2d>
 8001868:	f04f 0200 	mov.w	r2, #0
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <zerg_get_free_space+0x9c>)
 800186e:	f7fe fd07 	bl	8000280 <__aeabi_dmul>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4610      	mov	r0, r2
 8001878:	4619      	mov	r1, r3
 800187a:	f7fe ffe7 	bl	800084c <__aeabi_d2uiz>
 800187e:	4603      	mov	r3, r0
 8001880:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <zerg_get_free_space+0xa8>)
 8001882:	6013      	str	r3, [r2, #0]
	printf("SD CARD Free Space: \t%lu\n", free_space);
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <zerg_get_free_space+0xa8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4619      	mov	r1, r3
 800188a:	4809      	ldr	r0, [pc, #36]	; (80018b0 <zerg_get_free_space+0xac>)
 800188c:	f007 fd52 	bl	8009334 <iprintf>
	// send_uart(buffer);
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	200013a0 	.word	0x200013a0
 8001898:	200012d8 	.word	0x200012d8
 800189c:	0800a970 	.word	0x0800a970
 80018a0:	3fe00000 	.word	0x3fe00000
 80018a4:	200013a4 	.word	0x200013a4
 80018a8:	0800a974 	.word	0x0800a974
 80018ac:	200012ec 	.word	0x200012ec
 80018b0:	0800a990 	.word	0x0800a990

080018b4 <zerg_get_file_info>:
/*--------------------------------------------------------------------------------------------------------------*/
// Получить сведения о файле / Get file Information
void zerg_get_file_info(char *name)
{
 80018b4:	b590      	push	{r4, r7, lr}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af02      	add	r7, sp, #8
 80018ba:	6078      	str	r0, [r7, #4]
	res = f_stat(name, &fileinfo);
 80018bc:	493d      	ldr	r1, [pc, #244]	; (80019b4 <zerg_get_file_info+0x100>)
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f007 fbbb 	bl	800903a <f_stat>
 80018c4:	4603      	mov	r3, r0
 80018c6:	461a      	mov	r2, r3
 80018c8:	4b3b      	ldr	r3, [pc, #236]	; (80019b8 <zerg_get_file_info+0x104>)
 80018ca:	701a      	strb	r2, [r3, #0]
	switch (res)
 80018cc:	4b3a      	ldr	r3, [pc, #232]	; (80019b8 <zerg_get_file_info+0x104>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d002      	beq.n	80018da <zerg_get_file_info+0x26>
 80018d4:	2b04      	cmp	r3, #4
 80018d6:	d05d      	beq.n	8001994 <zerg_get_file_info+0xe0>
 80018d8:	e061      	b.n	800199e <zerg_get_file_info+0xea>
	{
	case FR_OK:

		printf("Below are the details of the *%s* \nSize: %lu\n", name, fileinfo.fsize);
 80018da:	4b36      	ldr	r3, [pc, #216]	; (80019b4 <zerg_get_file_info+0x100>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	461a      	mov	r2, r3
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	4836      	ldr	r0, [pc, #216]	; (80019bc <zerg_get_file_info+0x108>)
 80018e4:	f007 fd26 	bl	8009334 <iprintf>
		// send_uart(buffer);
		printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
			   (fileinfo.fdate >> 9) + 1980, fileinfo.fdate >> 5 & 15, fileinfo.fdate & 31,
 80018e8:	4b32      	ldr	r3, [pc, #200]	; (80019b4 <zerg_get_file_info+0x100>)
 80018ea:	889b      	ldrh	r3, [r3, #4]
 80018ec:	0a5b      	lsrs	r3, r3, #9
 80018ee:	b29b      	uxth	r3, r3
		printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
 80018f0:	f203 71bc 	addw	r1, r3, #1980	; 0x7bc
			   (fileinfo.fdate >> 9) + 1980, fileinfo.fdate >> 5 & 15, fileinfo.fdate & 31,
 80018f4:	4b2f      	ldr	r3, [pc, #188]	; (80019b4 <zerg_get_file_info+0x100>)
 80018f6:	889b      	ldrh	r3, [r3, #4]
		printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
 80018f8:	095b      	lsrs	r3, r3, #5
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	f003 020f 	and.w	r2, r3, #15
			   (fileinfo.fdate >> 9) + 1980, fileinfo.fdate >> 5 & 15, fileinfo.fdate & 31,
 8001900:	4b2c      	ldr	r3, [pc, #176]	; (80019b4 <zerg_get_file_info+0x100>)
 8001902:	889b      	ldrh	r3, [r3, #4]
		printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
 8001904:	f003 001f 	and.w	r0, r3, #31
			   fileinfo.ftime >> 11, fileinfo.ftime >> 5 & 63);
 8001908:	4b2a      	ldr	r3, [pc, #168]	; (80019b4 <zerg_get_file_info+0x100>)
 800190a:	88db      	ldrh	r3, [r3, #6]
		printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
 800190c:	0adb      	lsrs	r3, r3, #11
 800190e:	b29b      	uxth	r3, r3
 8001910:	461c      	mov	r4, r3
			   fileinfo.ftime >> 11, fileinfo.ftime >> 5 & 63);
 8001912:	4b28      	ldr	r3, [pc, #160]	; (80019b4 <zerg_get_file_info+0x100>)
 8001914:	88db      	ldrh	r3, [r3, #6]
		printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
 8001916:	095b      	lsrs	r3, r3, #5
 8001918:	b29b      	uxth	r3, r3
 800191a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800191e:	9301      	str	r3, [sp, #4]
 8001920:	9400      	str	r4, [sp, #0]
 8001922:	4603      	mov	r3, r0
 8001924:	4826      	ldr	r0, [pc, #152]	; (80019c0 <zerg_get_file_info+0x10c>)
 8001926:	f007 fd05 	bl	8009334 <iprintf>
		// end_uart(buffer);
		printf("Attributes: %c%c%c%c%c\n",
			   (fileinfo.fattrib & AM_DIR) ? 'D' : '-',
 800192a:	4b22      	ldr	r3, [pc, #136]	; (80019b4 <zerg_get_file_info+0x100>)
 800192c:	7a1b      	ldrb	r3, [r3, #8]
 800192e:	f003 0310 	and.w	r3, r3, #16
		printf("Attributes: %c%c%c%c%c\n",
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <zerg_get_file_info+0x86>
 8001936:	2144      	movs	r1, #68	; 0x44
 8001938:	e000      	b.n	800193c <zerg_get_file_info+0x88>
 800193a:	212d      	movs	r1, #45	; 0x2d
			   (fileinfo.fattrib & AM_RDO) ? 'R' : '-',
 800193c:	4b1d      	ldr	r3, [pc, #116]	; (80019b4 <zerg_get_file_info+0x100>)
 800193e:	7a1b      	ldrb	r3, [r3, #8]
 8001940:	f003 0301 	and.w	r3, r3, #1
		printf("Attributes: %c%c%c%c%c\n",
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <zerg_get_file_info+0x98>
 8001948:	2052      	movs	r0, #82	; 0x52
 800194a:	e000      	b.n	800194e <zerg_get_file_info+0x9a>
 800194c:	202d      	movs	r0, #45	; 0x2d
			   (fileinfo.fattrib & AM_HID) ? 'H' : '-',
 800194e:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <zerg_get_file_info+0x100>)
 8001950:	7a1b      	ldrb	r3, [r3, #8]
 8001952:	f003 0302 	and.w	r3, r3, #2
		printf("Attributes: %c%c%c%c%c\n",
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <zerg_get_file_info+0xaa>
 800195a:	2448      	movs	r4, #72	; 0x48
 800195c:	e000      	b.n	8001960 <zerg_get_file_info+0xac>
 800195e:	242d      	movs	r4, #45	; 0x2d
			   (fileinfo.fattrib & AM_SYS) ? 'S' : '-',
 8001960:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <zerg_get_file_info+0x100>)
 8001962:	7a1b      	ldrb	r3, [r3, #8]
 8001964:	f003 0304 	and.w	r3, r3, #4
		printf("Attributes: %c%c%c%c%c\n",
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <zerg_get_file_info+0xbc>
 800196c:	2353      	movs	r3, #83	; 0x53
 800196e:	e000      	b.n	8001972 <zerg_get_file_info+0xbe>
 8001970:	232d      	movs	r3, #45	; 0x2d
			   (fileinfo.fattrib & AM_ARC) ? 'A' : '-');
 8001972:	4a10      	ldr	r2, [pc, #64]	; (80019b4 <zerg_get_file_info+0x100>)
 8001974:	7a12      	ldrb	r2, [r2, #8]
 8001976:	f002 0220 	and.w	r2, r2, #32
		printf("Attributes: %c%c%c%c%c\n",
 800197a:	2a00      	cmp	r2, #0
 800197c:	d001      	beq.n	8001982 <zerg_get_file_info+0xce>
 800197e:	2241      	movs	r2, #65	; 0x41
 8001980:	e000      	b.n	8001984 <zerg_get_file_info+0xd0>
 8001982:	222d      	movs	r2, #45	; 0x2d
 8001984:	9201      	str	r2, [sp, #4]
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	4623      	mov	r3, r4
 800198a:	4602      	mov	r2, r0
 800198c:	480d      	ldr	r0, [pc, #52]	; (80019c4 <zerg_get_file_info+0x110>)
 800198e:	f007 fcd1 	bl	8009334 <iprintf>
		// send_uart(buffer);
		break;
 8001992:	e00b      	b.n	80019ac <zerg_get_file_info+0xf8>

	case FR_NO_FILE:
		printf("*%s* does not exist.\n", name);
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	480c      	ldr	r0, [pc, #48]	; (80019c8 <zerg_get_file_info+0x114>)
 8001998:	f007 fccc 	bl	8009334 <iprintf>
		// send_uart(buffer);
		break;
 800199c:	e006      	b.n	80019ac <zerg_get_file_info+0xf8>

	default:
		printf("An error occurred. (%d)\n", res);
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <zerg_get_file_info+0x104>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	4619      	mov	r1, r3
 80019a4:	4809      	ldr	r0, [pc, #36]	; (80019cc <zerg_get_file_info+0x118>)
 80019a6:	f007 fcc5 	bl	8009334 <iprintf>
		// send_uart(buffer);
	}
}
 80019aa:	bf00      	nop
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd90      	pop	{r4, r7, pc}
 80019b4:	200012f0 	.word	0x200012f0
 80019b8:	200013a8 	.word	0x200013a8
 80019bc:	0800a9ac 	.word	0x0800a9ac
 80019c0:	0800a9dc 	.word	0x0800a9dc
 80019c4:	0800aa00 	.word	0x0800aa00
 80019c8:	0800aa18 	.word	0x0800aa18
 80019cc:	0800aa30 	.word	0x0800aa30

080019d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019d4:	480d      	ldr	r0, [pc, #52]	; (8001a0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019d6:	490e      	ldr	r1, [pc, #56]	; (8001a10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019d8:	4a0e      	ldr	r2, [pc, #56]	; (8001a14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019dc:	e002      	b.n	80019e4 <LoopCopyDataInit>

080019de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e2:	3304      	adds	r3, #4

080019e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e8:	d3f9      	bcc.n	80019de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ea:	4a0b      	ldr	r2, [pc, #44]	; (8001a18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019ec:	4c0b      	ldr	r4, [pc, #44]	; (8001a1c <LoopFillZerobss+0x26>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f0:	e001      	b.n	80019f6 <LoopFillZerobss>

080019f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f4:	3204      	adds	r2, #4

080019f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f8:	d3fb      	bcc.n	80019f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019fa:	f7ff fd29 	bl	8001450 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019fe:	f007 fc6d 	bl	80092dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a02:	f7ff f90d 	bl	8000c20 <main>
  bx  lr    
 8001a06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a10:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001a14:	0800abec 	.word	0x0800abec
  ldr r2, =_sbss
 8001a18:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8001a1c:	2000342c 	.word	0x2000342c

08001a20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a20:	e7fe      	b.n	8001a20 <ADC_IRQHandler>
	...

08001a24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a28:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <HAL_Init+0x40>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a0d      	ldr	r2, [pc, #52]	; (8001a64 <HAL_Init+0x40>)
 8001a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a34:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <HAL_Init+0x40>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <HAL_Init+0x40>)
 8001a3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <HAL_Init+0x40>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a07      	ldr	r2, [pc, #28]	; (8001a64 <HAL_Init+0x40>)
 8001a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a4c:	2003      	movs	r0, #3
 8001a4e:	f000 f8fc 	bl	8001c4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a52:	200f      	movs	r0, #15
 8001a54:	f7ff fbc6 	bl	80011e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a58:	f7ff fa54 	bl	8000f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40023c00 	.word	0x40023c00

08001a68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_IncTick+0x20>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_IncTick+0x24>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4413      	add	r3, r2
 8001a78:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <HAL_IncTick+0x24>)
 8001a7a:	6013      	str	r3, [r2, #0]
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	2000003c 	.word	0x2000003c
 8001a8c:	200013ac 	.word	0x200013ac

08001a90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return uwTick;
 8001a94:	4b03      	ldr	r3, [pc, #12]	; (8001aa4 <HAL_GetTick+0x14>)
 8001a96:	681b      	ldr	r3, [r3, #0]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	200013ac 	.word	0x200013ac

08001aa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab0:	f7ff ffee 	bl	8001a90 <HAL_GetTick>
 8001ab4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ac0:	d005      	beq.n	8001ace <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ac2:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <HAL_Delay+0x44>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4413      	add	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ace:	bf00      	nop
 8001ad0:	f7ff ffde 	bl	8001a90 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d8f7      	bhi.n	8001ad0 <HAL_Delay+0x28>
  {
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	2000003c 	.word	0x2000003c

08001af0 <__NVIC_SetPriorityGrouping>:
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <__NVIC_SetPriorityGrouping+0x44>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b22:	4a04      	ldr	r2, [pc, #16]	; (8001b34 <__NVIC_SetPriorityGrouping+0x44>)
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	60d3      	str	r3, [r2, #12]
}
 8001b28:	bf00      	nop
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <__NVIC_GetPriorityGrouping>:
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b3c:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <__NVIC_GetPriorityGrouping+0x18>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	0a1b      	lsrs	r3, r3, #8
 8001b42:	f003 0307 	and.w	r3, r3, #7
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <__NVIC_EnableIRQ>:
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	db0b      	blt.n	8001b7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	f003 021f 	and.w	r2, r3, #31
 8001b6c:	4907      	ldr	r1, [pc, #28]	; (8001b8c <__NVIC_EnableIRQ+0x38>)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	095b      	lsrs	r3, r3, #5
 8001b74:	2001      	movs	r0, #1
 8001b76:	fa00 f202 	lsl.w	r2, r0, r2
 8001b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000e100 	.word	0xe000e100

08001b90 <__NVIC_SetPriority>:
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	6039      	str	r1, [r7, #0]
 8001b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	db0a      	blt.n	8001bba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	490c      	ldr	r1, [pc, #48]	; (8001bdc <__NVIC_SetPriority+0x4c>)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	0112      	lsls	r2, r2, #4
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001bb8:	e00a      	b.n	8001bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	4908      	ldr	r1, [pc, #32]	; (8001be0 <__NVIC_SetPriority+0x50>)
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	3b04      	subs	r3, #4
 8001bc8:	0112      	lsls	r2, r2, #4
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	440b      	add	r3, r1
 8001bce:	761a      	strb	r2, [r3, #24]
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000e100 	.word	0xe000e100
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <NVIC_EncodePriority>:
{
 8001be4:	b480      	push	{r7}
 8001be6:	b089      	sub	sp, #36	; 0x24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f1c3 0307 	rsb	r3, r3, #7
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	bf28      	it	cs
 8001c02:	2304      	movcs	r3, #4
 8001c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	2b06      	cmp	r3, #6
 8001c0c:	d902      	bls.n	8001c14 <NVIC_EncodePriority+0x30>
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3b03      	subs	r3, #3
 8001c12:	e000      	b.n	8001c16 <NVIC_EncodePriority+0x32>
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43da      	mvns	r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	401a      	ands	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	fa01 f303 	lsl.w	r3, r1, r3
 8001c36:	43d9      	mvns	r1, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	4313      	orrs	r3, r2
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3724      	adds	r7, #36	; 0x24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff ff4c 	bl	8001af0 <__NVIC_SetPriorityGrouping>
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c72:	f7ff ff61 	bl	8001b38 <__NVIC_GetPriorityGrouping>
 8001c76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	68b9      	ldr	r1, [r7, #8]
 8001c7c:	6978      	ldr	r0, [r7, #20]
 8001c7e:	f7ff ffb1 	bl	8001be4 <NVIC_EncodePriority>
 8001c82:	4602      	mov	r2, r0
 8001c84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c88:	4611      	mov	r1, r2
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff ff80 	bl	8001b90 <__NVIC_SetPriority>
}
 8001c90:	bf00      	nop
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff ff54 	bl	8001b54 <__NVIC_EnableIRQ>
}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001cc0:	f7ff fee6 	bl	8001a90 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e099      	b.n	8001e04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0201 	bic.w	r2, r2, #1
 8001cee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cf0:	e00f      	b.n	8001d12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cf2:	f7ff fecd 	bl	8001a90 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b05      	cmp	r3, #5
 8001cfe:	d908      	bls.n	8001d12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2220      	movs	r2, #32
 8001d04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2203      	movs	r2, #3
 8001d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e078      	b.n	8001e04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1e8      	bne.n	8001cf2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	4b38      	ldr	r3, [pc, #224]	; (8001e0c <HAL_DMA_Init+0x158>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d107      	bne.n	8001d7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	4313      	orrs	r3, r2
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f023 0307 	bic.w	r3, r3, #7
 8001d92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d117      	bne.n	8001dd6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00e      	beq.n	8001dd6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 fa9d 	bl	80022f8 <DMA_CheckFifoParam>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d008      	beq.n	8001dd6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2240      	movs	r2, #64	; 0x40
 8001dc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e016      	b.n	8001e04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 fa54 	bl	800228c <DMA_CalcBaseAndBitshift>
 8001de4:	4603      	mov	r3, r0
 8001de6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dec:	223f      	movs	r2, #63	; 0x3f
 8001dee:	409a      	lsls	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	f010803f 	.word	0xf010803f

08001e10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
 8001e1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d101      	bne.n	8001e36 <HAL_DMA_Start_IT+0x26>
 8001e32:	2302      	movs	r3, #2
 8001e34:	e040      	b.n	8001eb8 <HAL_DMA_Start_IT+0xa8>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d12f      	bne.n	8001eaa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	68b9      	ldr	r1, [r7, #8]
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 f9e6 	bl	8002230 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e68:	223f      	movs	r2, #63	; 0x3f
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0216 	orr.w	r2, r2, #22
 8001e7e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d007      	beq.n	8001e98 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0208 	orr.w	r2, r2, #8
 8001e96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	e005      	b.n	8001eb6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d004      	beq.n	8001ede <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2280      	movs	r2, #128	; 0x80
 8001ed8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e00c      	b.n	8001ef8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2205      	movs	r2, #5
 8001ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0201 	bic.w	r2, r2, #1
 8001ef4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f10:	4b92      	ldr	r3, [pc, #584]	; (800215c <HAL_DMA_IRQHandler+0x258>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a92      	ldr	r2, [pc, #584]	; (8002160 <HAL_DMA_IRQHandler+0x25c>)
 8001f16:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1a:	0a9b      	lsrs	r3, r3, #10
 8001f1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2e:	2208      	movs	r2, #8
 8001f30:	409a      	lsls	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	4013      	ands	r3, r2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d01a      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d013      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0204 	bic.w	r2, r2, #4
 8001f56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5c:	2208      	movs	r2, #8
 8001f5e:	409a      	lsls	r2, r3
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f68:	f043 0201 	orr.w	r2, r3, #1
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f74:	2201      	movs	r2, #1
 8001f76:	409a      	lsls	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d012      	beq.n	8001fa6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00b      	beq.n	8001fa6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f92:	2201      	movs	r2, #1
 8001f94:	409a      	lsls	r2, r3
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9e:	f043 0202 	orr.w	r2, r3, #2
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001faa:	2204      	movs	r2, #4
 8001fac:	409a      	lsls	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d012      	beq.n	8001fdc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00b      	beq.n	8001fdc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc8:	2204      	movs	r2, #4
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd4:	f043 0204 	orr.w	r2, r3, #4
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe0:	2210      	movs	r2, #16
 8001fe2:	409a      	lsls	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d043      	beq.n	8002074 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d03c      	beq.n	8002074 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffe:	2210      	movs	r2, #16
 8002000:	409a      	lsls	r2, r3
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d018      	beq.n	8002046 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d108      	bne.n	8002034 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	2b00      	cmp	r3, #0
 8002028:	d024      	beq.n	8002074 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	4798      	blx	r3
 8002032:	e01f      	b.n	8002074 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002038:	2b00      	cmp	r3, #0
 800203a:	d01b      	beq.n	8002074 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	4798      	blx	r3
 8002044:	e016      	b.n	8002074 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002050:	2b00      	cmp	r3, #0
 8002052:	d107      	bne.n	8002064 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0208 	bic.w	r2, r2, #8
 8002062:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002078:	2220      	movs	r2, #32
 800207a:	409a      	lsls	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4013      	ands	r3, r2
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 808e 	beq.w	80021a2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0310 	and.w	r3, r3, #16
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 8086 	beq.w	80021a2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209a:	2220      	movs	r2, #32
 800209c:	409a      	lsls	r2, r3
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b05      	cmp	r3, #5
 80020ac:	d136      	bne.n	800211c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 0216 	bic.w	r2, r2, #22
 80020bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	695a      	ldr	r2, [r3, #20]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d103      	bne.n	80020de <HAL_DMA_IRQHandler+0x1da>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d007      	beq.n	80020ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0208 	bic.w	r2, r2, #8
 80020ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f2:	223f      	movs	r2, #63	; 0x3f
 80020f4:	409a      	lsls	r2, r3
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800210e:	2b00      	cmp	r3, #0
 8002110:	d07d      	beq.n	800220e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	4798      	blx	r3
        }
        return;
 800211a:	e078      	b.n	800220e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d01c      	beq.n	8002164 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d108      	bne.n	800214a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213c:	2b00      	cmp	r3, #0
 800213e:	d030      	beq.n	80021a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	4798      	blx	r3
 8002148:	e02b      	b.n	80021a2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214e:	2b00      	cmp	r3, #0
 8002150:	d027      	beq.n	80021a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	4798      	blx	r3
 800215a:	e022      	b.n	80021a2 <HAL_DMA_IRQHandler+0x29e>
 800215c:	20000018 	.word	0x20000018
 8002160:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10f      	bne.n	8002192 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0210 	bic.w	r2, r2, #16
 8002180:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d032      	beq.n	8002210 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d022      	beq.n	80021fc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2205      	movs	r2, #5
 80021ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 0201 	bic.w	r2, r2, #1
 80021cc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	3301      	adds	r3, #1
 80021d2:	60bb      	str	r3, [r7, #8]
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d307      	bcc.n	80021ea <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1f2      	bne.n	80021ce <HAL_DMA_IRQHandler+0x2ca>
 80021e8:	e000      	b.n	80021ec <HAL_DMA_IRQHandler+0x2e8>
          break;
 80021ea:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002200:	2b00      	cmp	r3, #0
 8002202:	d005      	beq.n	8002210 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	4798      	blx	r3
 800220c:	e000      	b.n	8002210 <HAL_DMA_IRQHandler+0x30c>
        return;
 800220e:	bf00      	nop
    }
  }
}
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop

08002218 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002224:	4618      	mov	r0, r3
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
 800223c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800224c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2b40      	cmp	r3, #64	; 0x40
 800225c:	d108      	bne.n	8002270 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800226e:	e007      	b.n	8002280 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	60da      	str	r2, [r3, #12]
}
 8002280:	bf00      	nop
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	3b10      	subs	r3, #16
 800229c:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <DMA_CalcBaseAndBitshift+0x64>)
 800229e:	fba2 2303 	umull	r2, r3, r2, r3
 80022a2:	091b      	lsrs	r3, r3, #4
 80022a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022a6:	4a13      	ldr	r2, [pc, #76]	; (80022f4 <DMA_CalcBaseAndBitshift+0x68>)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4413      	add	r3, r2
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	461a      	mov	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	d909      	bls.n	80022ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022c2:	f023 0303 	bic.w	r3, r3, #3
 80022c6:	1d1a      	adds	r2, r3, #4
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	659a      	str	r2, [r3, #88]	; 0x58
 80022cc:	e007      	b.n	80022de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022d6:	f023 0303 	bic.w	r3, r3, #3
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	aaaaaaab 	.word	0xaaaaaaab
 80022f4:	0800aaa8 	.word	0x0800aaa8

080022f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002308:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d11f      	bne.n	8002352 <DMA_CheckFifoParam+0x5a>
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	2b03      	cmp	r3, #3
 8002316:	d856      	bhi.n	80023c6 <DMA_CheckFifoParam+0xce>
 8002318:	a201      	add	r2, pc, #4	; (adr r2, 8002320 <DMA_CheckFifoParam+0x28>)
 800231a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800231e:	bf00      	nop
 8002320:	08002331 	.word	0x08002331
 8002324:	08002343 	.word	0x08002343
 8002328:	08002331 	.word	0x08002331
 800232c:	080023c7 	.word	0x080023c7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002334:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d046      	beq.n	80023ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002340:	e043      	b.n	80023ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002346:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800234a:	d140      	bne.n	80023ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002350:	e03d      	b.n	80023ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800235a:	d121      	bne.n	80023a0 <DMA_CheckFifoParam+0xa8>
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2b03      	cmp	r3, #3
 8002360:	d837      	bhi.n	80023d2 <DMA_CheckFifoParam+0xda>
 8002362:	a201      	add	r2, pc, #4	; (adr r2, 8002368 <DMA_CheckFifoParam+0x70>)
 8002364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002368:	08002379 	.word	0x08002379
 800236c:	0800237f 	.word	0x0800237f
 8002370:	08002379 	.word	0x08002379
 8002374:	08002391 	.word	0x08002391
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	73fb      	strb	r3, [r7, #15]
      break;
 800237c:	e030      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002382:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d025      	beq.n	80023d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800238e:	e022      	b.n	80023d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002394:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002398:	d11f      	bne.n	80023da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800239e:	e01c      	b.n	80023da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d903      	bls.n	80023ae <DMA_CheckFifoParam+0xb6>
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	d003      	beq.n	80023b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023ac:	e018      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	73fb      	strb	r3, [r7, #15]
      break;
 80023b2:	e015      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00e      	beq.n	80023de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	73fb      	strb	r3, [r7, #15]
      break;
 80023c4:	e00b      	b.n	80023de <DMA_CheckFifoParam+0xe6>
      break;
 80023c6:	bf00      	nop
 80023c8:	e00a      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
      break;
 80023ca:	bf00      	nop
 80023cc:	e008      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
      break;
 80023ce:	bf00      	nop
 80023d0:	e006      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
      break;
 80023d2:	bf00      	nop
 80023d4:	e004      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
      break;
 80023d6:	bf00      	nop
 80023d8:	e002      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80023da:	bf00      	nop
 80023dc:	e000      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
      break;
 80023de:	bf00      	nop
    }
  } 
  
  return status; 
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop

080023f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b089      	sub	sp, #36	; 0x24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023fe:	2300      	movs	r3, #0
 8002400:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002402:	2300      	movs	r3, #0
 8002404:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
 800240a:	e16b      	b.n	80026e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800240c:	2201      	movs	r2, #1
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	4013      	ands	r3, r2
 800241e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	429a      	cmp	r2, r3
 8002426:	f040 815a 	bne.w	80026de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	2b01      	cmp	r3, #1
 8002434:	d005      	beq.n	8002442 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800243e:	2b02      	cmp	r3, #2
 8002440:	d130      	bne.n	80024a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	2203      	movs	r2, #3
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002478:	2201      	movs	r2, #1
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	091b      	lsrs	r3, r3, #4
 800248e:	f003 0201 	and.w	r2, r3, #1
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 0303 	and.w	r3, r3, #3
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d017      	beq.n	80024e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	2203      	movs	r2, #3
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d123      	bne.n	8002534 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	08da      	lsrs	r2, r3, #3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3208      	adds	r2, #8
 80024f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	220f      	movs	r2, #15
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	08da      	lsrs	r2, r3, #3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3208      	adds	r2, #8
 800252e:	69b9      	ldr	r1, [r7, #24]
 8002530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	2203      	movs	r2, #3
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 0203 	and.w	r2, r3, #3
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 80b4 	beq.w	80026de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	4b60      	ldr	r3, [pc, #384]	; (80026fc <HAL_GPIO_Init+0x30c>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	4a5f      	ldr	r2, [pc, #380]	; (80026fc <HAL_GPIO_Init+0x30c>)
 8002580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002584:	6453      	str	r3, [r2, #68]	; 0x44
 8002586:	4b5d      	ldr	r3, [pc, #372]	; (80026fc <HAL_GPIO_Init+0x30c>)
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002592:	4a5b      	ldr	r2, [pc, #364]	; (8002700 <HAL_GPIO_Init+0x310>)
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	089b      	lsrs	r3, r3, #2
 8002598:	3302      	adds	r3, #2
 800259a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800259e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	220f      	movs	r2, #15
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43db      	mvns	r3, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4013      	ands	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a52      	ldr	r2, [pc, #328]	; (8002704 <HAL_GPIO_Init+0x314>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d02b      	beq.n	8002616 <HAL_GPIO_Init+0x226>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a51      	ldr	r2, [pc, #324]	; (8002708 <HAL_GPIO_Init+0x318>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d025      	beq.n	8002612 <HAL_GPIO_Init+0x222>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a50      	ldr	r2, [pc, #320]	; (800270c <HAL_GPIO_Init+0x31c>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d01f      	beq.n	800260e <HAL_GPIO_Init+0x21e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a4f      	ldr	r2, [pc, #316]	; (8002710 <HAL_GPIO_Init+0x320>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d019      	beq.n	800260a <HAL_GPIO_Init+0x21a>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a4e      	ldr	r2, [pc, #312]	; (8002714 <HAL_GPIO_Init+0x324>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d013      	beq.n	8002606 <HAL_GPIO_Init+0x216>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a4d      	ldr	r2, [pc, #308]	; (8002718 <HAL_GPIO_Init+0x328>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00d      	beq.n	8002602 <HAL_GPIO_Init+0x212>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a4c      	ldr	r2, [pc, #304]	; (800271c <HAL_GPIO_Init+0x32c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d007      	beq.n	80025fe <HAL_GPIO_Init+0x20e>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a4b      	ldr	r2, [pc, #300]	; (8002720 <HAL_GPIO_Init+0x330>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d101      	bne.n	80025fa <HAL_GPIO_Init+0x20a>
 80025f6:	2307      	movs	r3, #7
 80025f8:	e00e      	b.n	8002618 <HAL_GPIO_Init+0x228>
 80025fa:	2308      	movs	r3, #8
 80025fc:	e00c      	b.n	8002618 <HAL_GPIO_Init+0x228>
 80025fe:	2306      	movs	r3, #6
 8002600:	e00a      	b.n	8002618 <HAL_GPIO_Init+0x228>
 8002602:	2305      	movs	r3, #5
 8002604:	e008      	b.n	8002618 <HAL_GPIO_Init+0x228>
 8002606:	2304      	movs	r3, #4
 8002608:	e006      	b.n	8002618 <HAL_GPIO_Init+0x228>
 800260a:	2303      	movs	r3, #3
 800260c:	e004      	b.n	8002618 <HAL_GPIO_Init+0x228>
 800260e:	2302      	movs	r3, #2
 8002610:	e002      	b.n	8002618 <HAL_GPIO_Init+0x228>
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <HAL_GPIO_Init+0x228>
 8002616:	2300      	movs	r3, #0
 8002618:	69fa      	ldr	r2, [r7, #28]
 800261a:	f002 0203 	and.w	r2, r2, #3
 800261e:	0092      	lsls	r2, r2, #2
 8002620:	4093      	lsls	r3, r2
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002628:	4935      	ldr	r1, [pc, #212]	; (8002700 <HAL_GPIO_Init+0x310>)
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	089b      	lsrs	r3, r3, #2
 800262e:	3302      	adds	r3, #2
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002636:	4b3b      	ldr	r3, [pc, #236]	; (8002724 <HAL_GPIO_Init+0x334>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	43db      	mvns	r3, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4013      	ands	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800265a:	4a32      	ldr	r2, [pc, #200]	; (8002724 <HAL_GPIO_Init+0x334>)
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002660:	4b30      	ldr	r3, [pc, #192]	; (8002724 <HAL_GPIO_Init+0x334>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	43db      	mvns	r3, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	4313      	orrs	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002684:	4a27      	ldr	r2, [pc, #156]	; (8002724 <HAL_GPIO_Init+0x334>)
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800268a:	4b26      	ldr	r3, [pc, #152]	; (8002724 <HAL_GPIO_Init+0x334>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	43db      	mvns	r3, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ae:	4a1d      	ldr	r2, [pc, #116]	; (8002724 <HAL_GPIO_Init+0x334>)
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026b4:	4b1b      	ldr	r3, [pc, #108]	; (8002724 <HAL_GPIO_Init+0x334>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026d8:	4a12      	ldr	r2, [pc, #72]	; (8002724 <HAL_GPIO_Init+0x334>)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	3301      	adds	r3, #1
 80026e2:	61fb      	str	r3, [r7, #28]
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	2b0f      	cmp	r3, #15
 80026e8:	f67f ae90 	bls.w	800240c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026ec:	bf00      	nop
 80026ee:	bf00      	nop
 80026f0:	3724      	adds	r7, #36	; 0x24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	40023800 	.word	0x40023800
 8002700:	40013800 	.word	0x40013800
 8002704:	40020000 	.word	0x40020000
 8002708:	40020400 	.word	0x40020400
 800270c:	40020800 	.word	0x40020800
 8002710:	40020c00 	.word	0x40020c00
 8002714:	40021000 	.word	0x40021000
 8002718:	40021400 	.word	0x40021400
 800271c:	40021800 	.word	0x40021800
 8002720:	40021c00 	.word	0x40021c00
 8002724:	40013c00 	.word	0x40013c00

08002728 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e264      	b.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d075      	beq.n	8002832 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002746:	4ba3      	ldr	r3, [pc, #652]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 030c 	and.w	r3, r3, #12
 800274e:	2b04      	cmp	r3, #4
 8002750:	d00c      	beq.n	800276c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002752:	4ba0      	ldr	r3, [pc, #640]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800275a:	2b08      	cmp	r3, #8
 800275c:	d112      	bne.n	8002784 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800275e:	4b9d      	ldr	r3, [pc, #628]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002766:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800276a:	d10b      	bne.n	8002784 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276c:	4b99      	ldr	r3, [pc, #612]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d05b      	beq.n	8002830 <HAL_RCC_OscConfig+0x108>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d157      	bne.n	8002830 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e23f      	b.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800278c:	d106      	bne.n	800279c <HAL_RCC_OscConfig+0x74>
 800278e:	4b91      	ldr	r3, [pc, #580]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a90      	ldr	r2, [pc, #576]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 8002794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	e01d      	b.n	80027d8 <HAL_RCC_OscConfig+0xb0>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027a4:	d10c      	bne.n	80027c0 <HAL_RCC_OscConfig+0x98>
 80027a6:	4b8b      	ldr	r3, [pc, #556]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a8a      	ldr	r2, [pc, #552]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80027ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	4b88      	ldr	r3, [pc, #544]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a87      	ldr	r2, [pc, #540]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80027b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	e00b      	b.n	80027d8 <HAL_RCC_OscConfig+0xb0>
 80027c0:	4b84      	ldr	r3, [pc, #528]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a83      	ldr	r2, [pc, #524]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80027c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	4b81      	ldr	r3, [pc, #516]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a80      	ldr	r2, [pc, #512]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80027d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d013      	beq.n	8002808 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e0:	f7ff f956 	bl	8001a90 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027e8:	f7ff f952 	bl	8001a90 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b64      	cmp	r3, #100	; 0x64
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e204      	b.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fa:	4b76      	ldr	r3, [pc, #472]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0xc0>
 8002806:	e014      	b.n	8002832 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002808:	f7ff f942 	bl	8001a90 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002810:	f7ff f93e 	bl	8001a90 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b64      	cmp	r3, #100	; 0x64
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e1f0      	b.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002822:	4b6c      	ldr	r3, [pc, #432]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0xe8>
 800282e:	e000      	b.n	8002832 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d063      	beq.n	8002906 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800283e:	4b65      	ldr	r3, [pc, #404]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00b      	beq.n	8002862 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800284a:	4b62      	ldr	r3, [pc, #392]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002852:	2b08      	cmp	r3, #8
 8002854:	d11c      	bne.n	8002890 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002856:	4b5f      	ldr	r3, [pc, #380]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d116      	bne.n	8002890 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002862:	4b5c      	ldr	r3, [pc, #368]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d005      	beq.n	800287a <HAL_RCC_OscConfig+0x152>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d001      	beq.n	800287a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e1c4      	b.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287a:	4b56      	ldr	r3, [pc, #344]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	4952      	ldr	r1, [pc, #328]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 800288a:	4313      	orrs	r3, r2
 800288c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800288e:	e03a      	b.n	8002906 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d020      	beq.n	80028da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002898:	4b4f      	ldr	r3, [pc, #316]	; (80029d8 <HAL_RCC_OscConfig+0x2b0>)
 800289a:	2201      	movs	r2, #1
 800289c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289e:	f7ff f8f7 	bl	8001a90 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028a6:	f7ff f8f3 	bl	8001a90 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e1a5      	b.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b8:	4b46      	ldr	r3, [pc, #280]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f0      	beq.n	80028a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c4:	4b43      	ldr	r3, [pc, #268]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	4940      	ldr	r1, [pc, #256]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	600b      	str	r3, [r1, #0]
 80028d8:	e015      	b.n	8002906 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028da:	4b3f      	ldr	r3, [pc, #252]	; (80029d8 <HAL_RCC_OscConfig+0x2b0>)
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e0:	f7ff f8d6 	bl	8001a90 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e8:	f7ff f8d2 	bl	8001a90 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e184      	b.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fa:	4b36      	ldr	r3, [pc, #216]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d030      	beq.n	8002974 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d016      	beq.n	8002948 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800291a:	4b30      	ldr	r3, [pc, #192]	; (80029dc <HAL_RCC_OscConfig+0x2b4>)
 800291c:	2201      	movs	r2, #1
 800291e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002920:	f7ff f8b6 	bl	8001a90 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002928:	f7ff f8b2 	bl	8001a90 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e164      	b.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800293a:	4b26      	ldr	r3, [pc, #152]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 800293c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0x200>
 8002946:	e015      	b.n	8002974 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002948:	4b24      	ldr	r3, [pc, #144]	; (80029dc <HAL_RCC_OscConfig+0x2b4>)
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294e:	f7ff f89f 	bl	8001a90 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002956:	f7ff f89b 	bl	8001a90 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e14d      	b.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002968:	4b1a      	ldr	r3, [pc, #104]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 800296a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1f0      	bne.n	8002956 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 80a0 	beq.w	8002ac2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002982:	2300      	movs	r3, #0
 8002984:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002986:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10f      	bne.n	80029b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	60bb      	str	r3, [r7, #8]
 8002996:	4b0f      	ldr	r3, [pc, #60]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	4a0e      	ldr	r2, [pc, #56]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 800299c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a0:	6413      	str	r3, [r2, #64]	; 0x40
 80029a2:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029aa:	60bb      	str	r3, [r7, #8]
 80029ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ae:	2301      	movs	r3, #1
 80029b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b2:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <HAL_RCC_OscConfig+0x2b8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d121      	bne.n	8002a02 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029be:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <HAL_RCC_OscConfig+0x2b8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a07      	ldr	r2, [pc, #28]	; (80029e0 <HAL_RCC_OscConfig+0x2b8>)
 80029c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ca:	f7ff f861 	bl	8001a90 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d0:	e011      	b.n	80029f6 <HAL_RCC_OscConfig+0x2ce>
 80029d2:	bf00      	nop
 80029d4:	40023800 	.word	0x40023800
 80029d8:	42470000 	.word	0x42470000
 80029dc:	42470e80 	.word	0x42470e80
 80029e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e4:	f7ff f854 	bl	8001a90 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e106      	b.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f6:	4b85      	ldr	r3, [pc, #532]	; (8002c0c <HAL_RCC_OscConfig+0x4e4>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0f0      	beq.n	80029e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d106      	bne.n	8002a18 <HAL_RCC_OscConfig+0x2f0>
 8002a0a:	4b81      	ldr	r3, [pc, #516]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0e:	4a80      	ldr	r2, [pc, #512]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	6713      	str	r3, [r2, #112]	; 0x70
 8002a16:	e01c      	b.n	8002a52 <HAL_RCC_OscConfig+0x32a>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2b05      	cmp	r3, #5
 8002a1e:	d10c      	bne.n	8002a3a <HAL_RCC_OscConfig+0x312>
 8002a20:	4b7b      	ldr	r3, [pc, #492]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a24:	4a7a      	ldr	r2, [pc, #488]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002a26:	f043 0304 	orr.w	r3, r3, #4
 8002a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a2c:	4b78      	ldr	r3, [pc, #480]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a30:	4a77      	ldr	r2, [pc, #476]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002a32:	f043 0301 	orr.w	r3, r3, #1
 8002a36:	6713      	str	r3, [r2, #112]	; 0x70
 8002a38:	e00b      	b.n	8002a52 <HAL_RCC_OscConfig+0x32a>
 8002a3a:	4b75      	ldr	r3, [pc, #468]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3e:	4a74      	ldr	r2, [pc, #464]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002a40:	f023 0301 	bic.w	r3, r3, #1
 8002a44:	6713      	str	r3, [r2, #112]	; 0x70
 8002a46:	4b72      	ldr	r3, [pc, #456]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4a:	4a71      	ldr	r2, [pc, #452]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002a4c:	f023 0304 	bic.w	r3, r3, #4
 8002a50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d015      	beq.n	8002a86 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5a:	f7ff f819 	bl	8001a90 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a60:	e00a      	b.n	8002a78 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a62:	f7ff f815 	bl	8001a90 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e0c5      	b.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a78:	4b65      	ldr	r3, [pc, #404]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0ee      	beq.n	8002a62 <HAL_RCC_OscConfig+0x33a>
 8002a84:	e014      	b.n	8002ab0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a86:	f7ff f803 	bl	8001a90 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a8c:	e00a      	b.n	8002aa4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a8e:	f7fe ffff 	bl	8001a90 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e0af      	b.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa4:	4b5a      	ldr	r3, [pc, #360]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1ee      	bne.n	8002a8e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ab0:	7dfb      	ldrb	r3, [r7, #23]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d105      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab6:	4b56      	ldr	r3, [pc, #344]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	4a55      	ldr	r2, [pc, #340]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 809b 	beq.w	8002c02 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002acc:	4b50      	ldr	r3, [pc, #320]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 030c 	and.w	r3, r3, #12
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d05c      	beq.n	8002b92 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d141      	bne.n	8002b64 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae0:	4b4c      	ldr	r3, [pc, #304]	; (8002c14 <HAL_RCC_OscConfig+0x4ec>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae6:	f7fe ffd3 	bl	8001a90 <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aec:	e008      	b.n	8002b00 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aee:	f7fe ffcf 	bl	8001a90 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e081      	b.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b00:	4b43      	ldr	r3, [pc, #268]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1f0      	bne.n	8002aee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69da      	ldr	r2, [r3, #28]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	431a      	orrs	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	019b      	lsls	r3, r3, #6
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b22:	085b      	lsrs	r3, r3, #1
 8002b24:	3b01      	subs	r3, #1
 8002b26:	041b      	lsls	r3, r3, #16
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2e:	061b      	lsls	r3, r3, #24
 8002b30:	4937      	ldr	r1, [pc, #220]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b36:	4b37      	ldr	r3, [pc, #220]	; (8002c14 <HAL_RCC_OscConfig+0x4ec>)
 8002b38:	2201      	movs	r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7fe ffa8 	bl	8001a90 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b44:	f7fe ffa4 	bl	8001a90 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e056      	b.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b56:	4b2e      	ldr	r3, [pc, #184]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0f0      	beq.n	8002b44 <HAL_RCC_OscConfig+0x41c>
 8002b62:	e04e      	b.n	8002c02 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b64:	4b2b      	ldr	r3, [pc, #172]	; (8002c14 <HAL_RCC_OscConfig+0x4ec>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6a:	f7fe ff91 	bl	8001a90 <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b72:	f7fe ff8d 	bl	8001a90 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e03f      	b.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b84:	4b22      	ldr	r3, [pc, #136]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1f0      	bne.n	8002b72 <HAL_RCC_OscConfig+0x44a>
 8002b90:	e037      	b.n	8002c02 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d101      	bne.n	8002b9e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e032      	b.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b9e:	4b1c      	ldr	r3, [pc, #112]	; (8002c10 <HAL_RCC_OscConfig+0x4e8>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d028      	beq.n	8002bfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d121      	bne.n	8002bfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d11a      	bne.n	8002bfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bce:	4013      	ands	r3, r2
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bd4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d111      	bne.n	8002bfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	085b      	lsrs	r3, r3, #1
 8002be6:	3b01      	subs	r3, #1
 8002be8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d107      	bne.n	8002bfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d001      	beq.n	8002c02 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40007000 	.word	0x40007000
 8002c10:	40023800 	.word	0x40023800
 8002c14:	42470060 	.word	0x42470060

08002c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0cc      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c2c:	4b68      	ldr	r3, [pc, #416]	; (8002dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d90c      	bls.n	8002c54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3a:	4b65      	ldr	r3, [pc, #404]	; (8002dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c42:	4b63      	ldr	r3, [pc, #396]	; (8002dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e0b8      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d020      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c6c:	4b59      	ldr	r3, [pc, #356]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	4a58      	ldr	r2, [pc, #352]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c84:	4b53      	ldr	r3, [pc, #332]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	4a52      	ldr	r2, [pc, #328]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c90:	4b50      	ldr	r3, [pc, #320]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	494d      	ldr	r1, [pc, #308]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d044      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d107      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb6:	4b47      	ldr	r3, [pc, #284]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d119      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e07f      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d003      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	d107      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd6:	4b3f      	ldr	r3, [pc, #252]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d109      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e06f      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce6:	4b3b      	ldr	r3, [pc, #236]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e067      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cf6:	4b37      	ldr	r3, [pc, #220]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f023 0203 	bic.w	r2, r3, #3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	4934      	ldr	r1, [pc, #208]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d08:	f7fe fec2 	bl	8001a90 <HAL_GetTick>
 8002d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0e:	e00a      	b.n	8002d26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d10:	f7fe febe 	bl	8001a90 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e04f      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d26:	4b2b      	ldr	r3, [pc, #172]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 020c 	and.w	r2, r3, #12
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d1eb      	bne.n	8002d10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d38:	4b25      	ldr	r3, [pc, #148]	; (8002dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d20c      	bcs.n	8002d60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d46:	4b22      	ldr	r3, [pc, #136]	; (8002dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4e:	4b20      	ldr	r3, [pc, #128]	; (8002dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e032      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d008      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d6c:	4b19      	ldr	r3, [pc, #100]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	4916      	ldr	r1, [pc, #88]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d009      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d8a:	4b12      	ldr	r3, [pc, #72]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	490e      	ldr	r1, [pc, #56]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d9e:	f000 f821 	bl	8002de4 <HAL_RCC_GetSysClockFreq>
 8002da2:	4602      	mov	r2, r0
 8002da4:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	091b      	lsrs	r3, r3, #4
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	490a      	ldr	r1, [pc, #40]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002db0:	5ccb      	ldrb	r3, [r1, r3]
 8002db2:	fa22 f303 	lsr.w	r3, r2, r3
 8002db6:	4a09      	ldr	r2, [pc, #36]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dba:	4b09      	ldr	r3, [pc, #36]	; (8002de0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fe fa10 	bl	80011e4 <HAL_InitTick>

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40023c00 	.word	0x40023c00
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	0800aa90 	.word	0x0800aa90
 8002ddc:	20000018 	.word	0x20000018
 8002de0:	20000038 	.word	0x20000038

08002de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002de4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002de8:	b084      	sub	sp, #16
 8002dea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	607b      	str	r3, [r7, #4]
 8002df0:	2300      	movs	r3, #0
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	2300      	movs	r3, #0
 8002df6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dfc:	4b67      	ldr	r3, [pc, #412]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 030c 	and.w	r3, r3, #12
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d00d      	beq.n	8002e24 <HAL_RCC_GetSysClockFreq+0x40>
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	f200 80bd 	bhi.w	8002f88 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <HAL_RCC_GetSysClockFreq+0x34>
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d003      	beq.n	8002e1e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e16:	e0b7      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e18:	4b61      	ldr	r3, [pc, #388]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e1a:	60bb      	str	r3, [r7, #8]
       break;
 8002e1c:	e0b7      	b.n	8002f8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e1e:	4b61      	ldr	r3, [pc, #388]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002e20:	60bb      	str	r3, [r7, #8]
      break;
 8002e22:	e0b4      	b.n	8002f8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e24:	4b5d      	ldr	r3, [pc, #372]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e2c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e2e:	4b5b      	ldr	r3, [pc, #364]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d04d      	beq.n	8002ed6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e3a:	4b58      	ldr	r3, [pc, #352]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	099b      	lsrs	r3, r3, #6
 8002e40:	461a      	mov	r2, r3
 8002e42:	f04f 0300 	mov.w	r3, #0
 8002e46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e4a:	f04f 0100 	mov.w	r1, #0
 8002e4e:	ea02 0800 	and.w	r8, r2, r0
 8002e52:	ea03 0901 	and.w	r9, r3, r1
 8002e56:	4640      	mov	r0, r8
 8002e58:	4649      	mov	r1, r9
 8002e5a:	f04f 0200 	mov.w	r2, #0
 8002e5e:	f04f 0300 	mov.w	r3, #0
 8002e62:	014b      	lsls	r3, r1, #5
 8002e64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e68:	0142      	lsls	r2, r0, #5
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	ebb0 0008 	subs.w	r0, r0, r8
 8002e72:	eb61 0109 	sbc.w	r1, r1, r9
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	f04f 0300 	mov.w	r3, #0
 8002e7e:	018b      	lsls	r3, r1, #6
 8002e80:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e84:	0182      	lsls	r2, r0, #6
 8002e86:	1a12      	subs	r2, r2, r0
 8002e88:	eb63 0301 	sbc.w	r3, r3, r1
 8002e8c:	f04f 0000 	mov.w	r0, #0
 8002e90:	f04f 0100 	mov.w	r1, #0
 8002e94:	00d9      	lsls	r1, r3, #3
 8002e96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e9a:	00d0      	lsls	r0, r2, #3
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	eb12 0208 	adds.w	r2, r2, r8
 8002ea4:	eb43 0309 	adc.w	r3, r3, r9
 8002ea8:	f04f 0000 	mov.w	r0, #0
 8002eac:	f04f 0100 	mov.w	r1, #0
 8002eb0:	0259      	lsls	r1, r3, #9
 8002eb2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002eb6:	0250      	lsls	r0, r2, #9
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	f04f 0300 	mov.w	r3, #0
 8002ec8:	f7fd fce0 	bl	800088c <__aeabi_uldivmod>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	e04a      	b.n	8002f6c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ed6:	4b31      	ldr	r3, [pc, #196]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	099b      	lsrs	r3, r3, #6
 8002edc:	461a      	mov	r2, r3
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ee6:	f04f 0100 	mov.w	r1, #0
 8002eea:	ea02 0400 	and.w	r4, r2, r0
 8002eee:	ea03 0501 	and.w	r5, r3, r1
 8002ef2:	4620      	mov	r0, r4
 8002ef4:	4629      	mov	r1, r5
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	014b      	lsls	r3, r1, #5
 8002f00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f04:	0142      	lsls	r2, r0, #5
 8002f06:	4610      	mov	r0, r2
 8002f08:	4619      	mov	r1, r3
 8002f0a:	1b00      	subs	r0, r0, r4
 8002f0c:	eb61 0105 	sbc.w	r1, r1, r5
 8002f10:	f04f 0200 	mov.w	r2, #0
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	018b      	lsls	r3, r1, #6
 8002f1a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f1e:	0182      	lsls	r2, r0, #6
 8002f20:	1a12      	subs	r2, r2, r0
 8002f22:	eb63 0301 	sbc.w	r3, r3, r1
 8002f26:	f04f 0000 	mov.w	r0, #0
 8002f2a:	f04f 0100 	mov.w	r1, #0
 8002f2e:	00d9      	lsls	r1, r3, #3
 8002f30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f34:	00d0      	lsls	r0, r2, #3
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	1912      	adds	r2, r2, r4
 8002f3c:	eb45 0303 	adc.w	r3, r5, r3
 8002f40:	f04f 0000 	mov.w	r0, #0
 8002f44:	f04f 0100 	mov.w	r1, #0
 8002f48:	0299      	lsls	r1, r3, #10
 8002f4a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f4e:	0290      	lsls	r0, r2, #10
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	4610      	mov	r0, r2
 8002f56:	4619      	mov	r1, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	f7fd fc94 	bl	800088c <__aeabi_uldivmod>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4613      	mov	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	0c1b      	lsrs	r3, r3, #16
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	3301      	adds	r3, #1
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f84:	60bb      	str	r3, [r7, #8]
      break;
 8002f86:	e002      	b.n	8002f8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f88:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f8a:	60bb      	str	r3, [r7, #8]
      break;
 8002f8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f8e:	68bb      	ldr	r3, [r7, #8]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	00f42400 	.word	0x00f42400
 8002fa4:	007a1200 	.word	0x007a1200

08002fa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fac:	4b03      	ldr	r3, [pc, #12]	; (8002fbc <HAL_RCC_GetHCLKFreq+0x14>)
 8002fae:	681b      	ldr	r3, [r3, #0]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	20000018 	.word	0x20000018

08002fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fc4:	f7ff fff0 	bl	8002fa8 <HAL_RCC_GetHCLKFreq>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	4b05      	ldr	r3, [pc, #20]	; (8002fe0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	0a9b      	lsrs	r3, r3, #10
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	4903      	ldr	r1, [pc, #12]	; (8002fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fd6:	5ccb      	ldrb	r3, [r1, r3]
 8002fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	0800aaa0 	.word	0x0800aaa0

08002fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fec:	f7ff ffdc 	bl	8002fa8 <HAL_RCC_GetHCLKFreq>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	4b05      	ldr	r3, [pc, #20]	; (8003008 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	0b5b      	lsrs	r3, r3, #13
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	4903      	ldr	r1, [pc, #12]	; (800300c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ffe:	5ccb      	ldrb	r3, [r1, r3]
 8003000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003004:	4618      	mov	r0, r3
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40023800 	.word	0x40023800
 800300c:	0800aaa0 	.word	0x0800aaa0

08003010 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	220f      	movs	r2, #15
 800301e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003020:	4b12      	ldr	r3, [pc, #72]	; (800306c <HAL_RCC_GetClockConfig+0x5c>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 0203 	and.w	r2, r3, #3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800302c:	4b0f      	ldr	r3, [pc, #60]	; (800306c <HAL_RCC_GetClockConfig+0x5c>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003038:	4b0c      	ldr	r3, [pc, #48]	; (800306c <HAL_RCC_GetClockConfig+0x5c>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003044:	4b09      	ldr	r3, [pc, #36]	; (800306c <HAL_RCC_GetClockConfig+0x5c>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	08db      	lsrs	r3, r3, #3
 800304a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003052:	4b07      	ldr	r3, [pc, #28]	; (8003070 <HAL_RCC_GetClockConfig+0x60>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0207 	and.w	r2, r3, #7
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	601a      	str	r2, [r3, #0]
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	40023800 	.word	0x40023800
 8003070:	40023c00 	.word	0x40023c00

08003074 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e022      	b.n	80030cc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d105      	bne.n	800309e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7fd ff5b 	bl	8000f54 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2203      	movs	r2, #3
 80030a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f814 	bl	80030d4 <HAL_SD_InitCard>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e00a      	b.n	80030cc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80030d4:	b5b0      	push	{r4, r5, r7, lr}
 80030d6:	b08e      	sub	sp, #56	; 0x38
 80030d8:	af04      	add	r7, sp, #16
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80030dc:	2300      	movs	r3, #0
 80030de:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80030e0:	2300      	movs	r3, #0
 80030e2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80030e4:	2300      	movs	r3, #0
 80030e6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80030ec:	2300      	movs	r3, #0
 80030ee:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80030f0:	2376      	movs	r3, #118	; 0x76
 80030f2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681d      	ldr	r5, [r3, #0]
 80030f8:	466c      	mov	r4, sp
 80030fa:	f107 0314 	add.w	r3, r7, #20
 80030fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003102:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003106:	f107 0308 	add.w	r3, r7, #8
 800310a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800310c:	4628      	mov	r0, r5
 800310e:	f002 f8a3 	bl	8005258 <SDIO_Init>
 8003112:	4603      	mov	r3, r0
 8003114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003118:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e04c      	b.n	80031be <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003124:	4b28      	ldr	r3, [pc, #160]	; (80031c8 <HAL_SD_InitCard+0xf4>)
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f002 f8db 	bl	80052ea <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003134:	4b24      	ldr	r3, [pc, #144]	; (80031c8 <HAL_SD_InitCard+0xf4>)
 8003136:	2201      	movs	r2, #1
 8003138:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f001 f804 	bl	8004148 <SD_PowerON>
 8003140:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00b      	beq.n	8003160 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e02e      	b.n	80031be <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 ff25 	bl	8003fb0 <SD_InitCard>
 8003166:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00b      	beq.n	8003186 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800317a:	6a3b      	ldr	r3, [r7, #32]
 800317c:	431a      	orrs	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e01b      	b.n	80031be <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800318e:	4618      	mov	r0, r3
 8003190:	f002 f93e 	bl	8005410 <SDMMC_CmdBlockLength>
 8003194:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00f      	beq.n	80031bc <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a0a      	ldr	r2, [pc, #40]	; (80031cc <HAL_SD_InitCard+0xf8>)
 80031a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e000      	b.n	80031be <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3728      	adds	r7, #40	; 0x28
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bdb0      	pop	{r4, r5, r7, pc}
 80031c6:	bf00      	nop
 80031c8:	422580a0 	.word	0x422580a0
 80031cc:	004005ff 	.word	0x004005ff

080031d0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08c      	sub	sp, #48	; 0x30
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
 80031dc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d107      	bne.n	80031f8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0c0      	b.n	800337a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b01      	cmp	r3, #1
 8003202:	f040 80b9 	bne.w	8003378 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800320c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	441a      	add	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003216:	429a      	cmp	r2, r3
 8003218:	d907      	bls.n	800322a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e0a7      	b.n	800337a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2203      	movs	r2, #3
 800322e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2200      	movs	r2, #0
 8003238:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	6812      	ldr	r2, [r2, #0]
 8003244:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8003248:	f043 0302 	orr.w	r3, r3, #2
 800324c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	4a4c      	ldr	r2, [pc, #304]	; (8003384 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8003254:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	4a4b      	ldr	r2, [pc, #300]	; (8003388 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800325c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	2200      	movs	r2, #0
 8003264:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	2200      	movs	r2, #0
 800326c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	3380      	adds	r3, #128	; 0x80
 8003294:	4619      	mov	r1, r3
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	025b      	lsls	r3, r3, #9
 800329c:	089b      	lsrs	r3, r3, #2
 800329e:	f7fe fdb7 	bl	8001e10 <HAL_DMA_Start_IT>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d017      	beq.n	80032d8 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80032b6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a33      	ldr	r2, [pc, #204]	; (800338c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80032be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e050      	b.n	800337a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80032d8:	4b2d      	ldr	r3, [pc, #180]	; (8003390 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80032da:	2201      	movs	r2, #1
 80032dc:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d002      	beq.n	80032ec <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80032e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e8:	025b      	lsls	r3, r3, #9
 80032ea:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80032ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032f0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	025b      	lsls	r3, r3, #9
 80032f6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80032f8:	2390      	movs	r3, #144	; 0x90
 80032fa:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80032fc:	2302      	movs	r3, #2
 80032fe:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003300:	2300      	movs	r3, #0
 8003302:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003304:	2301      	movs	r3, #1
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f107 0210 	add.w	r2, r7, #16
 8003310:	4611      	mov	r1, r2
 8003312:	4618      	mov	r0, r3
 8003314:	f002 f850 	bl	80053b8 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d90a      	bls.n	8003334 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2282      	movs	r2, #130	; 0x82
 8003322:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800332a:	4618      	mov	r0, r3
 800332c:	f002 f8b4 	bl	8005498 <SDMMC_CmdReadMultiBlock>
 8003330:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003332:	e009      	b.n	8003348 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2281      	movs	r2, #129	; 0x81
 8003338:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003340:	4618      	mov	r0, r3
 8003342:	f002 f887 	bl	8005454 <SDMMC_CmdReadSingleBlock>
 8003346:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334a:	2b00      	cmp	r3, #0
 800334c:	d012      	beq.n	8003374 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a0e      	ldr	r2, [pc, #56]	; (800338c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003354:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800335a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335c:	431a      	orrs	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e002      	b.n	800337a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8003374:	2300      	movs	r3, #0
 8003376:	e000      	b.n	800337a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8003378:	2302      	movs	r3, #2
  }
}
 800337a:	4618      	mov	r0, r3
 800337c:	3730      	adds	r7, #48	; 0x30
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	08003dbf 	.word	0x08003dbf
 8003388:	08003e31 	.word	0x08003e31
 800338c:	004005ff 	.word	0x004005ff
 8003390:	4225858c 	.word	0x4225858c

08003394 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b08c      	sub	sp, #48	; 0x30
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
 80033a0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d107      	bne.n	80033bc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e0c5      	b.n	8003548 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	f040 80be 	bne.w	8003546 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80033d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	441a      	add	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033da:	429a      	cmp	r2, r3
 80033dc:	d907      	bls.n	80033ee <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e0ac      	b.n	8003548 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2203      	movs	r2, #3
 80033f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2200      	movs	r2, #0
 80033fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	6812      	ldr	r2, [r2, #0]
 8003408:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800340c:	f043 0302 	orr.w	r3, r3, #2
 8003410:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003416:	4a4e      	ldr	r2, [pc, #312]	; (8003550 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8003418:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341e:	4a4d      	ldr	r2, [pc, #308]	; (8003554 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003420:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003426:	2200      	movs	r2, #0
 8003428:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	2b01      	cmp	r3, #1
 8003430:	d002      	beq.n	8003438 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8003432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003434:	025b      	lsls	r3, r3, #9
 8003436:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d90a      	bls.n	8003454 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	22a0      	movs	r2, #160	; 0xa0
 8003442:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800344a:	4618      	mov	r0, r3
 800344c:	f002 f868 	bl	8005520 <SDMMC_CmdWriteMultiBlock>
 8003450:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003452:	e009      	b.n	8003468 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2290      	movs	r2, #144	; 0x90
 8003458:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003460:	4618      	mov	r0, r3
 8003462:	f002 f83b 	bl	80054dc <SDMMC_CmdWriteSingleBlock>
 8003466:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346a:	2b00      	cmp	r3, #0
 800346c:	d012      	beq.n	8003494 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a39      	ldr	r2, [pc, #228]	; (8003558 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003474:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800347a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347c:	431a      	orrs	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e059      	b.n	8003548 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003494:	4b31      	ldr	r3, [pc, #196]	; (800355c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003496:	2201      	movs	r2, #1
 8003498:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349e:	2240      	movs	r2, #64	; 0x40
 80034a0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80034c2:	68b9      	ldr	r1, [r7, #8]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	3380      	adds	r3, #128	; 0x80
 80034ca:	461a      	mov	r2, r3
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	025b      	lsls	r3, r3, #9
 80034d0:	089b      	lsrs	r3, r3, #2
 80034d2:	f7fe fc9d 	bl	8001e10 <HAL_DMA_Start_IT>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d01c      	beq.n	8003516 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	6812      	ldr	r2, [r2, #0]
 80034e6:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80034ea:	f023 0302 	bic.w	r3, r3, #2
 80034ee:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a18      	ldr	r2, [pc, #96]	; (8003558 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80034f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e018      	b.n	8003548 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800351a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	025b      	lsls	r3, r3, #9
 8003520:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003522:	2390      	movs	r3, #144	; 0x90
 8003524:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003526:	2300      	movs	r3, #0
 8003528:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800352a:	2300      	movs	r3, #0
 800352c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800352e:	2301      	movs	r3, #1
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f107 0210 	add.w	r2, r7, #16
 800353a:	4611      	mov	r1, r2
 800353c:	4618      	mov	r0, r3
 800353e:	f001 ff3b 	bl	80053b8 <SDIO_ConfigData>

      return HAL_OK;
 8003542:	2300      	movs	r3, #0
 8003544:	e000      	b.n	8003548 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8003546:	2302      	movs	r3, #2
  }
}
 8003548:	4618      	mov	r0, r3
 800354a:	3730      	adds	r7, #48	; 0x30
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	08003d95 	.word	0x08003d95
 8003554:	08003e31 	.word	0x08003e31
 8003558:	004005ff 	.word	0x004005ff
 800355c:	4225858c 	.word	0x4225858c

08003560 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003574:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d008      	beq.n	800358e <HAL_SD_IRQHandler+0x2e>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 fffd 	bl	8004586 <SD_Read_IT>
 800358c:	e165      	b.n	800385a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 808f 	beq.w	80036bc <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035a6:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6812      	ldr	r2, [r2, #0]
 80035b2:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80035b6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80035ba:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0201 	bic.w	r2, r2, #1
 80035ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d039      	beq.n	800364a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d104      	bne.n	80035ea <HAL_SD_IRQHandler+0x8a>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d011      	beq.n	800360e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f001 ffb8 	bl	8005564 <SDMMC_CmdStopTransfer>
 80035f4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d008      	beq.n	800360e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f92f 	bl	800386c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f240 523a 	movw	r2, #1338	; 0x53a
 8003616:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b00      	cmp	r3, #0
 800362e:	d104      	bne.n	800363a <HAL_SD_IRQHandler+0xda>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f002 fc26 	bl	8005e8c <HAL_SD_RxCpltCallback>
 8003640:	e10b      	b.n	800385a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f002 fc18 	bl	8005e78 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003648:	e107      	b.n	800385a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 8102 	beq.w	800385a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f003 0320 	and.w	r3, r3, #32
 800365c:	2b00      	cmp	r3, #0
 800365e:	d011      	beq.n	8003684 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f001 ff7d 	bl	8005564 <SDMMC_CmdStopTransfer>
 800366a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d008      	beq.n	8003684 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	431a      	orrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f8f4 	bl	800386c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	f040 80e5 	bne.w	800385a <HAL_SD_IRQHandler+0x2fa>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	f040 80df 	bne.w	800385a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 0208 	bic.w	r2, r2, #8
 80036aa:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f002 fbdf 	bl	8005e78 <HAL_SD_TxCpltCallback>
}
 80036ba:	e0ce      	b.n	800385a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d008      	beq.n	80036dc <HAL_SD_IRQHandler+0x17c>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f003 0308 	and.w	r3, r3, #8
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 ffa7 	bl	8004628 <SD_Write_IT>
 80036da:	e0be      	b.n	800385a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036e2:	f240 233a 	movw	r3, #570	; 0x23a
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 80b6 	beq.w	800385a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d005      	beq.n	8003708 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003700:	f043 0202 	orr.w	r2, r3, #2
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b00      	cmp	r3, #0
 8003714:	d005      	beq.n	8003722 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371a:	f043 0208 	orr.w	r2, r3, #8
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003728:	f003 0320 	and.w	r3, r3, #32
 800372c:	2b00      	cmp	r3, #0
 800372e:	d005      	beq.n	800373c <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003734:	f043 0220 	orr.w	r2, r3, #32
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003742:	f003 0310 	and.w	r3, r3, #16
 8003746:	2b00      	cmp	r3, #0
 8003748:	d005      	beq.n	8003756 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374e:	f043 0210 	orr.w	r2, r3, #16
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800375c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003760:	2b00      	cmp	r3, #0
 8003762:	d005      	beq.n	8003770 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003768:	f043 0208 	orr.w	r2, r3, #8
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f240 723a 	movw	r2, #1850	; 0x73a
 8003778:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6812      	ldr	r2, [r2, #0]
 8003784:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8003788:	f023 0302 	bic.w	r3, r3, #2
 800378c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f001 fee6 	bl	8005564 <SDMMC_CmdStopTransfer>
 8003798:	4602      	mov	r2, r0
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00a      	beq.n	80037c4 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f855 	bl	800386c <HAL_SD_ErrorCallback>
}
 80037c2:	e04a      	b.n	800385a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d045      	beq.n	800385a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f003 0310 	and.w	r3, r3, #16
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d104      	bne.n	80037e2 <HAL_SD_IRQHandler+0x282>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f003 0320 	and.w	r3, r3, #32
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d011      	beq.n	8003806 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e6:	4a1f      	ldr	r2, [pc, #124]	; (8003864 <HAL_SD_IRQHandler+0x304>)
 80037e8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fe fb66 	bl	8001ec0 <HAL_DMA_Abort_IT>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d02f      	beq.n	800385a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 fb68 	bl	8003ed4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003804:	e029      	b.n	800385a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d104      	bne.n	800381a <HAL_SD_IRQHandler+0x2ba>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d011      	beq.n	800383e <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	4a12      	ldr	r2, [pc, #72]	; (8003868 <HAL_SD_IRQHandler+0x308>)
 8003820:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	4618      	mov	r0, r3
 8003828:	f7fe fb4a 	bl	8001ec0 <HAL_DMA_Abort_IT>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d013      	beq.n	800385a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fb83 	bl	8003f42 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800383c:	e00d      	b.n	800385a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f002 fb06 	bl	8005e64 <HAL_SD_AbortCallback>
}
 8003858:	e7ff      	b.n	800385a <HAL_SD_IRQHandler+0x2fa>
 800385a:	bf00      	nop
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	08003ed5 	.word	0x08003ed5
 8003868:	08003f43 	.word	0x08003f43

0800386c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800388e:	0f9b      	lsrs	r3, r3, #30
 8003890:	b2da      	uxtb	r2, r3
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800389a:	0e9b      	lsrs	r3, r3, #26
 800389c:	b2db      	uxtb	r3, r3
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038ac:	0e1b      	lsrs	r3, r3, #24
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f003 0303 	and.w	r3, r3, #3
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038be:	0c1b      	lsrs	r3, r3, #16
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038ca:	0a1b      	lsrs	r3, r3, #8
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038e0:	0d1b      	lsrs	r3, r3, #20
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038ec:	0c1b      	lsrs	r3, r3, #16
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	f003 030f 	and.w	r3, r3, #15
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038fe:	0bdb      	lsrs	r3, r3, #15
 8003900:	b2db      	uxtb	r3, r3
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	b2da      	uxtb	r2, r3
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003910:	0b9b      	lsrs	r3, r3, #14
 8003912:	b2db      	uxtb	r3, r3
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	b2da      	uxtb	r2, r3
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003922:	0b5b      	lsrs	r3, r3, #13
 8003924:	b2db      	uxtb	r3, r3
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	b2da      	uxtb	r2, r3
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003934:	0b1b      	lsrs	r3, r3, #12
 8003936:	b2db      	uxtb	r3, r3
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	b2da      	uxtb	r2, r3
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2200      	movs	r2, #0
 8003946:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394c:	2b00      	cmp	r3, #0
 800394e:	d163      	bne.n	8003a18 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003954:	009a      	lsls	r2, r3, #2
 8003956:	f640 73fc 	movw	r3, #4092	; 0xffc
 800395a:	4013      	ands	r3, r2
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003960:	0f92      	lsrs	r2, r2, #30
 8003962:	431a      	orrs	r2, r3
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800396c:	0edb      	lsrs	r3, r3, #27
 800396e:	b2db      	uxtb	r3, r3
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	b2da      	uxtb	r2, r3
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800397e:	0e1b      	lsrs	r3, r3, #24
 8003980:	b2db      	uxtb	r3, r3
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	b2da      	uxtb	r2, r3
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003990:	0d5b      	lsrs	r3, r3, #21
 8003992:	b2db      	uxtb	r3, r3
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	b2da      	uxtb	r2, r3
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039a2:	0c9b      	lsrs	r3, r3, #18
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039b4:	0bdb      	lsrs	r3, r3, #15
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	1c5a      	adds	r2, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	7e1b      	ldrb	r3, [r3, #24]
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	f003 0307 	and.w	r3, r3, #7
 80039d6:	3302      	adds	r3, #2
 80039d8:	2201      	movs	r2, #1
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80039e2:	fb02 f203 	mul.w	r2, r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	7a1b      	ldrb	r3, [r3, #8]
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	f003 030f 	and.w	r3, r3, #15
 80039f4:	2201      	movs	r2, #1
 80039f6:	409a      	lsls	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003a04:	0a52      	lsrs	r2, r2, #9
 8003a06:	fb02 f203 	mul.w	r2, r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a14:	661a      	str	r2, [r3, #96]	; 0x60
 8003a16:	e031      	b.n	8003a7c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d11d      	bne.n	8003a5c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a24:	041b      	lsls	r3, r3, #16
 8003a26:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a2e:	0c1b      	lsrs	r3, r3, #16
 8003a30:	431a      	orrs	r2, r3
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	029a      	lsls	r2, r3, #10
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a50:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	661a      	str	r2, [r3, #96]	; 0x60
 8003a5a:	e00f      	b.n	8003a7c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a58      	ldr	r2, [pc, #352]	; (8003bc4 <HAL_SD_GetCardCSD+0x344>)
 8003a62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e09d      	b.n	8003bb8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a80:	0b9b      	lsrs	r3, r3, #14
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a92:	09db      	lsrs	r3, r3, #7
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab4:	0fdb      	lsrs	r3, r3, #31
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac0:	0f5b      	lsrs	r3, r3, #29
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	f003 0303 	and.w	r3, r3, #3
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad2:	0e9b      	lsrs	r3, r3, #26
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae4:	0d9b      	lsrs	r3, r3, #22
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	f003 030f 	and.w	r3, r3, #15
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af6:	0d5b      	lsrs	r3, r3, #21
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b12:	0c1b      	lsrs	r3, r3, #16
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b26:	0bdb      	lsrs	r3, r3, #15
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3a:	0b9b      	lsrs	r3, r3, #14
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4e:	0b5b      	lsrs	r3, r3, #13
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b62:	0b1b      	lsrs	r3, r3, #12
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b76:	0a9b      	lsrs	r3, r3, #10
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8a:	0a1b      	lsrs	r3, r3, #8
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	b2da      	uxtb	r2, r3
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9e:	085b      	lsrs	r3, r3, #1
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	004005ff 	.word	0x004005ff

08003bc8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003c20:	b5b0      	push	{r4, r5, r7, lr}
 8003c22:	b08e      	sub	sp, #56	; 0x38
 8003c24:	af04      	add	r7, sp, #16
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2203      	movs	r2, #3
 8003c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3c:	2b03      	cmp	r3, #3
 8003c3e:	d02e      	beq.n	8003c9e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c46:	d106      	bne.n	8003c56 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	639a      	str	r2, [r3, #56]	; 0x38
 8003c54:	e029      	b.n	8003caa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c5c:	d10a      	bne.n	8003c74 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 fb28 	bl	80042b4 <SD_WideBus_Enable>
 8003c64:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	639a      	str	r2, [r3, #56]	; 0x38
 8003c72:	e01a      	b.n	8003caa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10a      	bne.n	8003c90 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 fb65 	bl	800434a <SD_WideBus_Disable>
 8003c80:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	639a      	str	r2, [r3, #56]	; 0x38
 8003c8e:	e00c      	b.n	8003caa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c94:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	639a      	str	r2, [r3, #56]	; 0x38
 8003c9c:	e005      	b.n	8003caa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00b      	beq.n	8003cca <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a26      	ldr	r2, [pc, #152]	; (8003d50 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003cb8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003cc8:	e01f      	b.n	8003d0a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681d      	ldr	r5, [r3, #0]
 8003cf0:	466c      	mov	r4, sp
 8003cf2:	f107 0314 	add.w	r3, r7, #20
 8003cf6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003cfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003cfe:	f107 0308 	add.w	r3, r7, #8
 8003d02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d04:	4628      	mov	r0, r5
 8003d06:	f001 faa7 	bl	8005258 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d12:	4618      	mov	r0, r3
 8003d14:	f001 fb7c 	bl	8005410 <SDMMC_CmdBlockLength>
 8003d18:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00c      	beq.n	8003d3a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a0a      	ldr	r2, [pc, #40]	; (8003d50 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003d26:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8003d42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3728      	adds	r7, #40	; 0x28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bdb0      	pop	{r4, r5, r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	004005ff 	.word	0x004005ff

08003d54 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003d60:	f107 030c 	add.w	r3, r7, #12
 8003d64:	4619      	mov	r1, r3
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 fa7c 	bl	8004264 <SD_SendStatus>
 8003d6c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	0a5b      	lsrs	r3, r3, #9
 8003d84:	f003 030f 	and.w	r3, r3, #15
 8003d88:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003d8a:	693b      	ldr	r3, [r7, #16]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3718      	adds	r7, #24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003db0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003db2:	bf00      	nop
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b084      	sub	sp, #16
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dca:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd0:	2b82      	cmp	r3, #130	; 0x82
 8003dd2:	d111      	bne.n	8003df8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f001 fbc3 	bl	8005564 <SDMMC_CmdStopTransfer>
 8003dde:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d008      	beq.n	8003df8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	431a      	orrs	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f7ff fd3a 	bl	800386c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0208 	bic.w	r2, r2, #8
 8003e06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f240 523a 	movw	r2, #1338	; 0x53a
 8003e10:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f002 f833 	bl	8005e8c <HAL_SD_RxCpltCallback>
#endif
}
 8003e26:	bf00      	nop
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
	...

08003e30 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7fe f9ea 	bl	8002218 <HAL_DMA_GetError>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d03e      	beq.n	8003ec8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e50:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e58:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d002      	beq.n	8003e66 <SD_DMAError+0x36>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d12d      	bne.n	8003ec2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a19      	ldr	r2, [pc, #100]	; (8003ed0 <SD_DMAError+0xa0>)
 8003e6c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003e7c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e82:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8003e8a:	6978      	ldr	r0, [r7, #20]
 8003e8c:	f7ff ff62 	bl	8003d54 <HAL_SD_GetCardState>
 8003e90:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	2b06      	cmp	r3, #6
 8003e96:	d002      	beq.n	8003e9e <SD_DMAError+0x6e>
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	2b05      	cmp	r3, #5
 8003e9c:	d10a      	bne.n	8003eb4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f001 fb5e 	bl	8005564 <SDMMC_CmdStopTransfer>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003ec2:	6978      	ldr	r0, [r7, #20]
 8003ec4:	f7ff fcd2 	bl	800386c <HAL_SD_ErrorCallback>
#endif
  }
}
 8003ec8:	bf00      	nop
 8003eca:	3718      	adds	r7, #24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	004005ff 	.word	0x004005ff

08003ed4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f240 523a 	movw	r2, #1338	; 0x53a
 8003eea:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f7ff ff31 	bl	8003d54 <HAL_SD_GetCardState>
 8003ef2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	2b06      	cmp	r3, #6
 8003f06:	d002      	beq.n	8003f0e <SD_DMATxAbort+0x3a>
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b05      	cmp	r3, #5
 8003f0c:	d10a      	bne.n	8003f24 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f001 fb26 	bl	8005564 <SDMMC_CmdStopTransfer>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d103      	bne.n	8003f34 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f001 ff99 	bl	8005e64 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003f32:	e002      	b.n	8003f3a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f7ff fc99 	bl	800386c <HAL_SD_ErrorCallback>
}
 8003f3a:	bf00      	nop
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b084      	sub	sp, #16
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f240 523a 	movw	r2, #1338	; 0x53a
 8003f58:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f7ff fefa 	bl	8003d54 <HAL_SD_GetCardState>
 8003f60:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b06      	cmp	r3, #6
 8003f74:	d002      	beq.n	8003f7c <SD_DMARxAbort+0x3a>
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	2b05      	cmp	r3, #5
 8003f7a:	d10a      	bne.n	8003f92 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f001 faef 	bl	8005564 <SDMMC_CmdStopTransfer>
 8003f86:	4602      	mov	r2, r0
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d103      	bne.n	8003fa2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f001 ff62 	bl	8005e64 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003fa0:	e002      	b.n	8003fa8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f7ff fc62 	bl	800386c <HAL_SD_ErrorCallback>
}
 8003fa8:	bf00      	nop
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003fb0:	b5b0      	push	{r4, r5, r7, lr}
 8003fb2:	b094      	sub	sp, #80	; 0x50
 8003fb4:	af04      	add	r7, sp, #16
 8003fb6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f001 f9a1 	bl	8005308 <SDIO_GetPowerState>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d102      	bne.n	8003fd2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003fcc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003fd0:	e0b6      	b.n	8004140 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d02f      	beq.n	800403a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f001 fbca 	bl	8005778 <SDMMC_CmdSendCID>
 8003fe4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <SD_InitCard+0x40>
    {
      return errorstate;
 8003fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fee:	e0a7      	b.n	8004140 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f001 f9cb 	bl	8005392 <SDIO_GetResponse>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2104      	movs	r1, #4
 8004008:	4618      	mov	r0, r3
 800400a:	f001 f9c2 	bl	8005392 <SDIO_GetResponse>
 800400e:	4602      	mov	r2, r0
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2108      	movs	r1, #8
 800401a:	4618      	mov	r0, r3
 800401c:	f001 f9b9 	bl	8005392 <SDIO_GetResponse>
 8004020:	4602      	mov	r2, r0
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	210c      	movs	r1, #12
 800402c:	4618      	mov	r0, r3
 800402e:	f001 f9b0 	bl	8005392 <SDIO_GetResponse>
 8004032:	4602      	mov	r2, r0
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403e:	2b03      	cmp	r3, #3
 8004040:	d00d      	beq.n	800405e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f107 020e 	add.w	r2, r7, #14
 800404a:	4611      	mov	r1, r2
 800404c:	4618      	mov	r0, r3
 800404e:	f001 fbd0 	bl	80057f2 <SDMMC_CmdSetRelAdd>
 8004052:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <SD_InitCard+0xae>
    {
      return errorstate;
 800405a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800405c:	e070      	b.n	8004140 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004062:	2b03      	cmp	r3, #3
 8004064:	d036      	beq.n	80040d4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004066:	89fb      	ldrh	r3, [r7, #14]
 8004068:	461a      	mov	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004076:	041b      	lsls	r3, r3, #16
 8004078:	4619      	mov	r1, r3
 800407a:	4610      	mov	r0, r2
 800407c:	f001 fb9a 	bl	80057b4 <SDMMC_CmdSendCSD>
 8004080:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <SD_InitCard+0xdc>
    {
      return errorstate;
 8004088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800408a:	e059      	b.n	8004140 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2100      	movs	r1, #0
 8004092:	4618      	mov	r0, r3
 8004094:	f001 f97d 	bl	8005392 <SDIO_GetResponse>
 8004098:	4602      	mov	r2, r0
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2104      	movs	r1, #4
 80040a4:	4618      	mov	r0, r3
 80040a6:	f001 f974 	bl	8005392 <SDIO_GetResponse>
 80040aa:	4602      	mov	r2, r0
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2108      	movs	r1, #8
 80040b6:	4618      	mov	r0, r3
 80040b8:	f001 f96b 	bl	8005392 <SDIO_GetResponse>
 80040bc:	4602      	mov	r2, r0
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	210c      	movs	r1, #12
 80040c8:	4618      	mov	r0, r3
 80040ca:	f001 f962 	bl	8005392 <SDIO_GetResponse>
 80040ce:	4602      	mov	r2, r0
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2104      	movs	r1, #4
 80040da:	4618      	mov	r0, r3
 80040dc:	f001 f959 	bl	8005392 <SDIO_GetResponse>
 80040e0:	4603      	mov	r3, r0
 80040e2:	0d1a      	lsrs	r2, r3, #20
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80040e8:	f107 0310 	add.w	r3, r7, #16
 80040ec:	4619      	mov	r1, r3
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7ff fbc6 	bl	8003880 <HAL_SD_GetCardCSD>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80040fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80040fe:	e01f      	b.n	8004140 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6819      	ldr	r1, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004108:	041b      	lsls	r3, r3, #16
 800410a:	461a      	mov	r2, r3
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	4608      	mov	r0, r1
 8004112:	f001 fa49 	bl	80055a8 <SDMMC_CmdSelDesel>
 8004116:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <SD_InitCard+0x172>
  {
    return errorstate;
 800411e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004120:	e00e      	b.n	8004140 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681d      	ldr	r5, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	466c      	mov	r4, sp
 800412a:	f103 0210 	add.w	r2, r3, #16
 800412e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004130:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004134:	3304      	adds	r3, #4
 8004136:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004138:	4628      	mov	r0, r5
 800413a:	f001 f88d 	bl	8005258 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3740      	adds	r7, #64	; 0x40
 8004144:	46bd      	mov	sp, r7
 8004146:	bdb0      	pop	{r4, r5, r7, pc}

08004148 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	2300      	movs	r3, #0
 800415a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f001 fa44 	bl	80055ee <SDMMC_CmdGoIdleState>
 8004166:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <SD_PowerON+0x2a>
  {
    return errorstate;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	e072      	b.n	8004258 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4618      	mov	r0, r3
 8004178:	f001 fa57 	bl	800562a <SDMMC_CmdOperCond>
 800417c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00d      	beq.n	80041a0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f001 fa2d 	bl	80055ee <SDMMC_CmdGoIdleState>
 8004194:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d004      	beq.n	80041a6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	e05b      	b.n	8004258 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d137      	bne.n	800421e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2100      	movs	r1, #0
 80041b4:	4618      	mov	r0, r3
 80041b6:	f001 fa57 	bl	8005668 <SDMMC_CmdAppCommand>
 80041ba:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d02d      	beq.n	800421e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80041c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80041c6:	e047      	b.n	8004258 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2100      	movs	r1, #0
 80041ce:	4618      	mov	r0, r3
 80041d0:	f001 fa4a 	bl	8005668 <SDMMC_CmdAppCommand>
 80041d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <SD_PowerON+0x98>
    {
      return errorstate;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	e03b      	b.n	8004258 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	491e      	ldr	r1, [pc, #120]	; (8004260 <SD_PowerON+0x118>)
 80041e6:	4618      	mov	r0, r3
 80041e8:	f001 fa60 	bl	80056ac <SDMMC_CmdAppOperCommand>
 80041ec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d002      	beq.n	80041fa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80041f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80041f8:	e02e      	b.n	8004258 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2100      	movs	r1, #0
 8004200:	4618      	mov	r0, r3
 8004202:	f001 f8c6 	bl	8005392 <SDIO_GetResponse>
 8004206:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	0fdb      	lsrs	r3, r3, #31
 800420c:	2b01      	cmp	r3, #1
 800420e:	d101      	bne.n	8004214 <SD_PowerON+0xcc>
 8004210:	2301      	movs	r3, #1
 8004212:	e000      	b.n	8004216 <SD_PowerON+0xce>
 8004214:	2300      	movs	r3, #0
 8004216:	613b      	str	r3, [r7, #16]

    count++;
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	3301      	adds	r3, #1
 800421c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004224:	4293      	cmp	r3, r2
 8004226:	d802      	bhi.n	800422e <SD_PowerON+0xe6>
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0cc      	beq.n	80041c8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004234:	4293      	cmp	r3, r2
 8004236:	d902      	bls.n	800423e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004238:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800423c:	e00c      	b.n	8004258 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d003      	beq.n	8004250 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	645a      	str	r2, [r3, #68]	; 0x44
 800424e:	e002      	b.n	8004256 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	c1100000 	.word	0xc1100000

08004264 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d102      	bne.n	800427a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004274:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004278:	e018      	b.n	80042ac <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004282:	041b      	lsls	r3, r3, #16
 8004284:	4619      	mov	r1, r3
 8004286:	4610      	mov	r0, r2
 8004288:	f001 fad4 	bl	8005834 <SDMMC_CmdSendStatus>
 800428c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	e009      	b.n	80042ac <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2100      	movs	r1, #0
 800429e:	4618      	mov	r0, r3
 80042a0:	f001 f877 	bl	8005392 <SDIO_GetResponse>
 80042a4:	4602      	mov	r2, r0
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80042bc:	2300      	movs	r3, #0
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	2300      	movs	r3, #0
 80042c2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2100      	movs	r1, #0
 80042ca:	4618      	mov	r0, r3
 80042cc:	f001 f861 	bl	8005392 <SDIO_GetResponse>
 80042d0:	4603      	mov	r3, r0
 80042d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042da:	d102      	bne.n	80042e2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80042dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042e0:	e02f      	b.n	8004342 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80042e2:	f107 030c 	add.w	r3, r7, #12
 80042e6:	4619      	mov	r1, r3
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f879 	bl	80043e0 <SD_FindSCR>
 80042ee:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	e023      	b.n	8004342 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d01c      	beq.n	800433e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800430c:	041b      	lsls	r3, r3, #16
 800430e:	4619      	mov	r1, r3
 8004310:	4610      	mov	r0, r2
 8004312:	f001 f9a9 	bl	8005668 <SDMMC_CmdAppCommand>
 8004316:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	e00f      	b.n	8004342 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2102      	movs	r1, #2
 8004328:	4618      	mov	r0, r3
 800432a:	f001 f9e2 	bl	80056f2 <SDMMC_CmdBusWidth>
 800432e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	e003      	b.n	8004342 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800433a:	2300      	movs	r3, #0
 800433c:	e001      	b.n	8004342 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800433e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004342:	4618      	mov	r0, r3
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b086      	sub	sp, #24
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004352:	2300      	movs	r3, #0
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	2300      	movs	r3, #0
 8004358:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2100      	movs	r1, #0
 8004360:	4618      	mov	r0, r3
 8004362:	f001 f816 	bl	8005392 <SDIO_GetResponse>
 8004366:	4603      	mov	r3, r0
 8004368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004370:	d102      	bne.n	8004378 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004372:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004376:	e02f      	b.n	80043d8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004378:	f107 030c 	add.w	r3, r7, #12
 800437c:	4619      	mov	r1, r3
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f82e 	bl	80043e0 <SD_FindSCR>
 8004384:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	e023      	b.n	80043d8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d01c      	beq.n	80043d4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a2:	041b      	lsls	r3, r3, #16
 80043a4:	4619      	mov	r1, r3
 80043a6:	4610      	mov	r0, r2
 80043a8:	f001 f95e 	bl	8005668 <SDMMC_CmdAppCommand>
 80043ac:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	e00f      	b.n	80043d8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2100      	movs	r1, #0
 80043be:	4618      	mov	r0, r3
 80043c0:	f001 f997 	bl	80056f2 <SDMMC_CmdBusWidth>
 80043c4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	e003      	b.n	80043d8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80043d0:	2300      	movs	r3, #0
 80043d2:	e001      	b.n	80043d8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80043d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3718      	adds	r7, #24
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80043e0:	b590      	push	{r4, r7, lr}
 80043e2:	b08f      	sub	sp, #60	; 0x3c
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80043ea:	f7fd fb51 	bl	8001a90 <HAL_GetTick>
 80043ee:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80043f4:	2300      	movs	r3, #0
 80043f6:	60bb      	str	r3, [r7, #8]
 80043f8:	2300      	movs	r3, #0
 80043fa:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2108      	movs	r1, #8
 8004406:	4618      	mov	r0, r3
 8004408:	f001 f802 	bl	8005410 <SDMMC_CmdBlockLength>
 800440c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800440e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004416:	e0b2      	b.n	800457e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004420:	041b      	lsls	r3, r3, #16
 8004422:	4619      	mov	r1, r3
 8004424:	4610      	mov	r0, r2
 8004426:	f001 f91f 	bl	8005668 <SDMMC_CmdAppCommand>
 800442a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800442c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <SD_FindSCR+0x56>
  {
    return errorstate;
 8004432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004434:	e0a3      	b.n	800457e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800443a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800443c:	2308      	movs	r3, #8
 800443e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004440:	2330      	movs	r3, #48	; 0x30
 8004442:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004444:	2302      	movs	r3, #2
 8004446:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004448:	2300      	movs	r3, #0
 800444a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800444c:	2301      	movs	r3, #1
 800444e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f107 0210 	add.w	r2, r7, #16
 8004458:	4611      	mov	r1, r2
 800445a:	4618      	mov	r0, r3
 800445c:	f000 ffac 	bl	80053b8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4618      	mov	r0, r3
 8004466:	f001 f966 	bl	8005736 <SDMMC_CmdSendSCR>
 800446a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800446c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446e:	2b00      	cmp	r3, #0
 8004470:	d02a      	beq.n	80044c8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004474:	e083      	b.n	800457e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800447c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00f      	beq.n	80044a4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6819      	ldr	r1, [r3, #0]
 8004488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	f107 0208 	add.w	r2, r7, #8
 8004490:	18d4      	adds	r4, r2, r3
 8004492:	4608      	mov	r0, r1
 8004494:	f000 ff0b 	bl	80052ae <SDIO_ReadFIFO>
 8004498:	4603      	mov	r3, r0
 800449a:	6023      	str	r3, [r4, #0]
      index++;
 800449c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800449e:	3301      	adds	r3, #1
 80044a0:	637b      	str	r3, [r7, #52]	; 0x34
 80044a2:	e006      	b.n	80044b2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d012      	beq.n	80044d8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80044b2:	f7fd faed 	bl	8001a90 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044c0:	d102      	bne.n	80044c8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80044c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80044c6:	e05a      	b.n	800457e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ce:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0cf      	beq.n	8004476 <SD_FindSCR+0x96>
 80044d6:	e000      	b.n	80044da <SD_FindSCR+0xfa>
      break;
 80044d8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e0:	f003 0308 	and.w	r3, r3, #8
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d005      	beq.n	80044f4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2208      	movs	r2, #8
 80044ee:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80044f0:	2308      	movs	r3, #8
 80044f2:	e044      	b.n	800457e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d005      	beq.n	800450e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2202      	movs	r2, #2
 8004508:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800450a:	2302      	movs	r3, #2
 800450c:	e037      	b.n	800457e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b00      	cmp	r3, #0
 800451a:	d005      	beq.n	8004528 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2220      	movs	r2, #32
 8004522:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004524:	2320      	movs	r3, #32
 8004526:	e02a      	b.n	800457e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f240 523a 	movw	r2, #1338	; 0x53a
 8004530:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	061a      	lsls	r2, r3, #24
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	021b      	lsls	r3, r3, #8
 800453a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800453e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	0a1b      	lsrs	r3, r3, #8
 8004544:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004548:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	0e1b      	lsrs	r3, r3, #24
 800454e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004552:	601a      	str	r2, [r3, #0]
    scr++;
 8004554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004556:	3304      	adds	r3, #4
 8004558:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	061a      	lsls	r2, r3, #24
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	021b      	lsls	r3, r3, #8
 8004562:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004566:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	0a1b      	lsrs	r3, r3, #8
 800456c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004570:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	0e1b      	lsrs	r3, r3, #24
 8004576:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	373c      	adds	r7, #60	; 0x3c
 8004582:	46bd      	mov	sp, r7
 8004584:	bd90      	pop	{r4, r7, pc}

08004586 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b086      	sub	sp, #24
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004592:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004598:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d03f      	beq.n	8004620 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80045a0:	2300      	movs	r3, #0
 80045a2:	617b      	str	r3, [r7, #20]
 80045a4:	e033      	b.n	800460e <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 fe7f 	bl	80052ae <SDIO_ReadFIFO>
 80045b0:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	3301      	adds	r3, #1
 80045be:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	3b01      	subs	r3, #1
 80045c4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	0a1b      	lsrs	r3, r3, #8
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	701a      	strb	r2, [r3, #0]
      tmp++;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	3301      	adds	r3, #1
 80045d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	3b01      	subs	r3, #1
 80045da:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	0c1b      	lsrs	r3, r3, #16
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	3301      	adds	r3, #1
 80045ea:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	3b01      	subs	r3, #1
 80045f0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	0e1b      	lsrs	r3, r3, #24
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	3301      	adds	r3, #1
 8004600:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	3b01      	subs	r3, #1
 8004606:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	3301      	adds	r3, #1
 800460c:	617b      	str	r3, [r7, #20]
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	2b07      	cmp	r3, #7
 8004612:	d9c8      	bls.n	80045a6 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004620:	bf00      	nop
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d043      	beq.n	80046ca <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004642:	2300      	movs	r3, #0
 8004644:	617b      	str	r3, [r7, #20]
 8004646:	e037      	b.n	80046b8 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	3301      	adds	r3, #1
 8004652:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	3b01      	subs	r3, #1
 8004658:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	021a      	lsls	r2, r3, #8
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	4313      	orrs	r3, r2
 8004664:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	3301      	adds	r3, #1
 800466a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	3b01      	subs	r3, #1
 8004670:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	041a      	lsls	r2, r3, #16
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	4313      	orrs	r3, r2
 800467c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	3301      	adds	r3, #1
 8004682:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	3b01      	subs	r3, #1
 8004688:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	061a      	lsls	r2, r3, #24
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	4313      	orrs	r3, r2
 8004694:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	3301      	adds	r3, #1
 800469a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	3b01      	subs	r3, #1
 80046a0:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f107 0208 	add.w	r2, r7, #8
 80046aa:	4611      	mov	r1, r2
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 fe0b 	bl	80052c8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	3301      	adds	r3, #1
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	2b07      	cmp	r3, #7
 80046bc:	d9c4      	bls.n	8004648 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80046ca:	bf00      	nop
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b082      	sub	sp, #8
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e041      	b.n	8004768 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d106      	bne.n	80046fe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f839 	bl	8004770 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2202      	movs	r2, #2
 8004702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	3304      	adds	r3, #4
 800470e:	4619      	mov	r1, r3
 8004710:	4610      	mov	r0, r2
 8004712:	f000 f9d7 	bl	8004ac4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b01      	cmp	r3, #1
 8004796:	d001      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e04e      	b.n	800483a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68da      	ldr	r2, [r3, #12]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0201 	orr.w	r2, r2, #1
 80047b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a23      	ldr	r2, [pc, #140]	; (8004848 <HAL_TIM_Base_Start_IT+0xc4>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d022      	beq.n	8004804 <HAL_TIM_Base_Start_IT+0x80>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c6:	d01d      	beq.n	8004804 <HAL_TIM_Base_Start_IT+0x80>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a1f      	ldr	r2, [pc, #124]	; (800484c <HAL_TIM_Base_Start_IT+0xc8>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d018      	beq.n	8004804 <HAL_TIM_Base_Start_IT+0x80>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a1e      	ldr	r2, [pc, #120]	; (8004850 <HAL_TIM_Base_Start_IT+0xcc>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d013      	beq.n	8004804 <HAL_TIM_Base_Start_IT+0x80>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a1c      	ldr	r2, [pc, #112]	; (8004854 <HAL_TIM_Base_Start_IT+0xd0>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d00e      	beq.n	8004804 <HAL_TIM_Base_Start_IT+0x80>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a1b      	ldr	r2, [pc, #108]	; (8004858 <HAL_TIM_Base_Start_IT+0xd4>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d009      	beq.n	8004804 <HAL_TIM_Base_Start_IT+0x80>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a19      	ldr	r2, [pc, #100]	; (800485c <HAL_TIM_Base_Start_IT+0xd8>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d004      	beq.n	8004804 <HAL_TIM_Base_Start_IT+0x80>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a18      	ldr	r2, [pc, #96]	; (8004860 <HAL_TIM_Base_Start_IT+0xdc>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d111      	bne.n	8004828 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2b06      	cmp	r3, #6
 8004814:	d010      	beq.n	8004838 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f042 0201 	orr.w	r2, r2, #1
 8004824:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004826:	e007      	b.n	8004838 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0201 	orr.w	r2, r2, #1
 8004836:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	40010000 	.word	0x40010000
 800484c:	40000400 	.word	0x40000400
 8004850:	40000800 	.word	0x40000800
 8004854:	40000c00 	.word	0x40000c00
 8004858:	40010400 	.word	0x40010400
 800485c:	40014000 	.word	0x40014000
 8004860:	40001800 	.word	0x40001800

08004864 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b02      	cmp	r3, #2
 8004878:	d122      	bne.n	80048c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b02      	cmp	r3, #2
 8004886:	d11b      	bne.n	80048c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f06f 0202 	mvn.w	r2, #2
 8004890:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	f003 0303 	and.w	r3, r3, #3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f8ee 	bl	8004a88 <HAL_TIM_IC_CaptureCallback>
 80048ac:	e005      	b.n	80048ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f8e0 	bl	8004a74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 f8f1 	bl	8004a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f003 0304 	and.w	r3, r3, #4
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d122      	bne.n	8004914 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b04      	cmp	r3, #4
 80048da:	d11b      	bne.n	8004914 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f06f 0204 	mvn.w	r2, #4
 80048e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2202      	movs	r2, #2
 80048ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f8c4 	bl	8004a88 <HAL_TIM_IC_CaptureCallback>
 8004900:	e005      	b.n	800490e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f8b6 	bl	8004a74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 f8c7 	bl	8004a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	2b08      	cmp	r3, #8
 8004920:	d122      	bne.n	8004968 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f003 0308 	and.w	r3, r3, #8
 800492c:	2b08      	cmp	r3, #8
 800492e:	d11b      	bne.n	8004968 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f06f 0208 	mvn.w	r2, #8
 8004938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2204      	movs	r2, #4
 800493e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f89a 	bl	8004a88 <HAL_TIM_IC_CaptureCallback>
 8004954:	e005      	b.n	8004962 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f88c 	bl	8004a74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f89d 	bl	8004a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	f003 0310 	and.w	r3, r3, #16
 8004972:	2b10      	cmp	r3, #16
 8004974:	d122      	bne.n	80049bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	f003 0310 	and.w	r3, r3, #16
 8004980:	2b10      	cmp	r3, #16
 8004982:	d11b      	bne.n	80049bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f06f 0210 	mvn.w	r2, #16
 800498c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2208      	movs	r2, #8
 8004992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f870 	bl	8004a88 <HAL_TIM_IC_CaptureCallback>
 80049a8:	e005      	b.n	80049b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f862 	bl	8004a74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 f873 	bl	8004a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d10e      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d107      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f06f 0201 	mvn.w	r2, #1
 80049e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7fc fa76 	bl	8000ed4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f2:	2b80      	cmp	r3, #128	; 0x80
 80049f4:	d10e      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a00:	2b80      	cmp	r3, #128	; 0x80
 8004a02:	d107      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f902 	bl	8004c18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1e:	2b40      	cmp	r3, #64	; 0x40
 8004a20:	d10e      	bne.n	8004a40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2c:	2b40      	cmp	r3, #64	; 0x40
 8004a2e:	d107      	bne.n	8004a40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f838 	bl	8004ab0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	f003 0320 	and.w	r3, r3, #32
 8004a4a:	2b20      	cmp	r3, #32
 8004a4c:	d10e      	bne.n	8004a6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f003 0320 	and.w	r3, r3, #32
 8004a58:	2b20      	cmp	r3, #32
 8004a5a:	d107      	bne.n	8004a6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f06f 0220 	mvn.w	r2, #32
 8004a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f8cc 	bl	8004c04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a6c:	bf00      	nop
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a40      	ldr	r2, [pc, #256]	; (8004bd8 <TIM_Base_SetConfig+0x114>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d013      	beq.n	8004b04 <TIM_Base_SetConfig+0x40>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae2:	d00f      	beq.n	8004b04 <TIM_Base_SetConfig+0x40>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a3d      	ldr	r2, [pc, #244]	; (8004bdc <TIM_Base_SetConfig+0x118>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d00b      	beq.n	8004b04 <TIM_Base_SetConfig+0x40>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a3c      	ldr	r2, [pc, #240]	; (8004be0 <TIM_Base_SetConfig+0x11c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d007      	beq.n	8004b04 <TIM_Base_SetConfig+0x40>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a3b      	ldr	r2, [pc, #236]	; (8004be4 <TIM_Base_SetConfig+0x120>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d003      	beq.n	8004b04 <TIM_Base_SetConfig+0x40>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a3a      	ldr	r2, [pc, #232]	; (8004be8 <TIM_Base_SetConfig+0x124>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d108      	bne.n	8004b16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a2f      	ldr	r2, [pc, #188]	; (8004bd8 <TIM_Base_SetConfig+0x114>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d02b      	beq.n	8004b76 <TIM_Base_SetConfig+0xb2>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b24:	d027      	beq.n	8004b76 <TIM_Base_SetConfig+0xb2>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a2c      	ldr	r2, [pc, #176]	; (8004bdc <TIM_Base_SetConfig+0x118>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d023      	beq.n	8004b76 <TIM_Base_SetConfig+0xb2>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a2b      	ldr	r2, [pc, #172]	; (8004be0 <TIM_Base_SetConfig+0x11c>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d01f      	beq.n	8004b76 <TIM_Base_SetConfig+0xb2>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a2a      	ldr	r2, [pc, #168]	; (8004be4 <TIM_Base_SetConfig+0x120>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d01b      	beq.n	8004b76 <TIM_Base_SetConfig+0xb2>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a29      	ldr	r2, [pc, #164]	; (8004be8 <TIM_Base_SetConfig+0x124>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d017      	beq.n	8004b76 <TIM_Base_SetConfig+0xb2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a28      	ldr	r2, [pc, #160]	; (8004bec <TIM_Base_SetConfig+0x128>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d013      	beq.n	8004b76 <TIM_Base_SetConfig+0xb2>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a27      	ldr	r2, [pc, #156]	; (8004bf0 <TIM_Base_SetConfig+0x12c>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d00f      	beq.n	8004b76 <TIM_Base_SetConfig+0xb2>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a26      	ldr	r2, [pc, #152]	; (8004bf4 <TIM_Base_SetConfig+0x130>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d00b      	beq.n	8004b76 <TIM_Base_SetConfig+0xb2>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a25      	ldr	r2, [pc, #148]	; (8004bf8 <TIM_Base_SetConfig+0x134>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d007      	beq.n	8004b76 <TIM_Base_SetConfig+0xb2>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a24      	ldr	r2, [pc, #144]	; (8004bfc <TIM_Base_SetConfig+0x138>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d003      	beq.n	8004b76 <TIM_Base_SetConfig+0xb2>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a23      	ldr	r2, [pc, #140]	; (8004c00 <TIM_Base_SetConfig+0x13c>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d108      	bne.n	8004b88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a0a      	ldr	r2, [pc, #40]	; (8004bd8 <TIM_Base_SetConfig+0x114>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d003      	beq.n	8004bbc <TIM_Base_SetConfig+0xf8>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a0c      	ldr	r2, [pc, #48]	; (8004be8 <TIM_Base_SetConfig+0x124>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d103      	bne.n	8004bc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	691a      	ldr	r2, [r3, #16]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	615a      	str	r2, [r3, #20]
}
 8004bca:	bf00      	nop
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	40010000 	.word	0x40010000
 8004bdc:	40000400 	.word	0x40000400
 8004be0:	40000800 	.word	0x40000800
 8004be4:	40000c00 	.word	0x40000c00
 8004be8:	40010400 	.word	0x40010400
 8004bec:	40014000 	.word	0x40014000
 8004bf0:	40014400 	.word	0x40014400
 8004bf4:	40014800 	.word	0x40014800
 8004bf8:	40001800 	.word	0x40001800
 8004bfc:	40001c00 	.word	0x40001c00
 8004c00:	40002000 	.word	0x40002000

08004c04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e03f      	b.n	8004cbe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d106      	bne.n	8004c58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7fc fa7e 	bl	8001154 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2224      	movs	r2, #36	; 0x24
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 f929 	bl	8004ec8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	691a      	ldr	r2, [r3, #16]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	695a      	ldr	r2, [r3, #20]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ca4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b08a      	sub	sp, #40	; 0x28
 8004cca:	af02      	add	r7, sp, #8
 8004ccc:	60f8      	str	r0, [r7, #12]
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	603b      	str	r3, [r7, #0]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b20      	cmp	r3, #32
 8004ce4:	d17c      	bne.n	8004de0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d002      	beq.n	8004cf2 <HAL_UART_Transmit+0x2c>
 8004cec:	88fb      	ldrh	r3, [r7, #6]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e075      	b.n	8004de2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d101      	bne.n	8004d04 <HAL_UART_Transmit+0x3e>
 8004d00:	2302      	movs	r3, #2
 8004d02:	e06e      	b.n	8004de2 <HAL_UART_Transmit+0x11c>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2221      	movs	r2, #33	; 0x21
 8004d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d1a:	f7fc feb9 	bl	8001a90 <HAL_GetTick>
 8004d1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	88fa      	ldrh	r2, [r7, #6]
 8004d24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	88fa      	ldrh	r2, [r7, #6]
 8004d2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d34:	d108      	bne.n	8004d48 <HAL_UART_Transmit+0x82>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d104      	bne.n	8004d48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	61bb      	str	r3, [r7, #24]
 8004d46:	e003      	b.n	8004d50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004d58:	e02a      	b.n	8004db0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2200      	movs	r2, #0
 8004d62:	2180      	movs	r1, #128	; 0x80
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 f840 	bl	8004dea <UART_WaitOnFlagUntilTimeout>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e036      	b.n	8004de2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10b      	bne.n	8004d92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	881b      	ldrh	r3, [r3, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	3302      	adds	r3, #2
 8004d8e:	61bb      	str	r3, [r7, #24]
 8004d90:	e007      	b.n	8004da2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	781a      	ldrb	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1cf      	bne.n	8004d5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	2140      	movs	r1, #64	; 0x40
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f000 f810 	bl	8004dea <UART_WaitOnFlagUntilTimeout>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e006      	b.n	8004de2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	e000      	b.n	8004de2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004de0:	2302      	movs	r3, #2
  }
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3720      	adds	r7, #32
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b090      	sub	sp, #64	; 0x40
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	60f8      	str	r0, [r7, #12]
 8004df2:	60b9      	str	r1, [r7, #8]
 8004df4:	603b      	str	r3, [r7, #0]
 8004df6:	4613      	mov	r3, r2
 8004df8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dfa:	e050      	b.n	8004e9e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e02:	d04c      	beq.n	8004e9e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d007      	beq.n	8004e1a <UART_WaitOnFlagUntilTimeout+0x30>
 8004e0a:	f7fc fe41 	bl	8001a90 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d241      	bcs.n	8004e9e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	330c      	adds	r3, #12
 8004e20:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e24:	e853 3f00 	ldrex	r3, [r3]
 8004e28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	330c      	adds	r3, #12
 8004e38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e3a:	637a      	str	r2, [r7, #52]	; 0x34
 8004e3c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e42:	e841 2300 	strex	r3, r2, [r1]
 8004e46:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1e5      	bne.n	8004e1a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3314      	adds	r3, #20
 8004e54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	e853 3f00 	ldrex	r3, [r3]
 8004e5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	f023 0301 	bic.w	r3, r3, #1
 8004e64:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	3314      	adds	r3, #20
 8004e6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e6e:	623a      	str	r2, [r7, #32]
 8004e70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e72:	69f9      	ldr	r1, [r7, #28]
 8004e74:	6a3a      	ldr	r2, [r7, #32]
 8004e76:	e841 2300 	strex	r3, r2, [r1]
 8004e7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1e5      	bne.n	8004e4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e00f      	b.n	8004ebe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	bf0c      	ite	eq
 8004eae:	2301      	moveq	r3, #1
 8004eb0:	2300      	movne	r3, #0
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	79fb      	ldrb	r3, [r7, #7]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d09f      	beq.n	8004dfc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3740      	adds	r7, #64	; 0x40
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
	...

08004ec8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ecc:	b09f      	sub	sp, #124	; 0x7c
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ede:	68d9      	ldr	r1, [r3, #12]
 8004ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	ea40 0301 	orr.w	r3, r0, r1
 8004ee8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f0c:	f021 010c 	bic.w	r1, r1, #12
 8004f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f16:	430b      	orrs	r3, r1
 8004f18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f26:	6999      	ldr	r1, [r3, #24]
 8004f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	ea40 0301 	orr.w	r3, r0, r1
 8004f30:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	4bc5      	ldr	r3, [pc, #788]	; (800524c <UART_SetConfig+0x384>)
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d004      	beq.n	8004f46 <UART_SetConfig+0x7e>
 8004f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	4bc3      	ldr	r3, [pc, #780]	; (8005250 <UART_SetConfig+0x388>)
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d103      	bne.n	8004f4e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f46:	f7fe f84f 	bl	8002fe8 <HAL_RCC_GetPCLK2Freq>
 8004f4a:	6778      	str	r0, [r7, #116]	; 0x74
 8004f4c:	e002      	b.n	8004f54 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f4e:	f7fe f837 	bl	8002fc0 <HAL_RCC_GetPCLK1Freq>
 8004f52:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f56:	69db      	ldr	r3, [r3, #28]
 8004f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f5c:	f040 80b6 	bne.w	80050cc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f62:	461c      	mov	r4, r3
 8004f64:	f04f 0500 	mov.w	r5, #0
 8004f68:	4622      	mov	r2, r4
 8004f6a:	462b      	mov	r3, r5
 8004f6c:	1891      	adds	r1, r2, r2
 8004f6e:	6439      	str	r1, [r7, #64]	; 0x40
 8004f70:	415b      	adcs	r3, r3
 8004f72:	647b      	str	r3, [r7, #68]	; 0x44
 8004f74:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f78:	1912      	adds	r2, r2, r4
 8004f7a:	eb45 0303 	adc.w	r3, r5, r3
 8004f7e:	f04f 0000 	mov.w	r0, #0
 8004f82:	f04f 0100 	mov.w	r1, #0
 8004f86:	00d9      	lsls	r1, r3, #3
 8004f88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f8c:	00d0      	lsls	r0, r2, #3
 8004f8e:	4602      	mov	r2, r0
 8004f90:	460b      	mov	r3, r1
 8004f92:	1911      	adds	r1, r2, r4
 8004f94:	6639      	str	r1, [r7, #96]	; 0x60
 8004f96:	416b      	adcs	r3, r5
 8004f98:	667b      	str	r3, [r7, #100]	; 0x64
 8004f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	f04f 0300 	mov.w	r3, #0
 8004fa4:	1891      	adds	r1, r2, r2
 8004fa6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004fa8:	415b      	adcs	r3, r3
 8004faa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004fb0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004fb4:	f7fb fc6a 	bl	800088c <__aeabi_uldivmod>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	460b      	mov	r3, r1
 8004fbc:	4ba5      	ldr	r3, [pc, #660]	; (8005254 <UART_SetConfig+0x38c>)
 8004fbe:	fba3 2302 	umull	r2, r3, r3, r2
 8004fc2:	095b      	lsrs	r3, r3, #5
 8004fc4:	011e      	lsls	r6, r3, #4
 8004fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fc8:	461c      	mov	r4, r3
 8004fca:	f04f 0500 	mov.w	r5, #0
 8004fce:	4622      	mov	r2, r4
 8004fd0:	462b      	mov	r3, r5
 8004fd2:	1891      	adds	r1, r2, r2
 8004fd4:	6339      	str	r1, [r7, #48]	; 0x30
 8004fd6:	415b      	adcs	r3, r3
 8004fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8004fda:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004fde:	1912      	adds	r2, r2, r4
 8004fe0:	eb45 0303 	adc.w	r3, r5, r3
 8004fe4:	f04f 0000 	mov.w	r0, #0
 8004fe8:	f04f 0100 	mov.w	r1, #0
 8004fec:	00d9      	lsls	r1, r3, #3
 8004fee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ff2:	00d0      	lsls	r0, r2, #3
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	1911      	adds	r1, r2, r4
 8004ffa:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ffc:	416b      	adcs	r3, r5
 8004ffe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	461a      	mov	r2, r3
 8005006:	f04f 0300 	mov.w	r3, #0
 800500a:	1891      	adds	r1, r2, r2
 800500c:	62b9      	str	r1, [r7, #40]	; 0x28
 800500e:	415b      	adcs	r3, r3
 8005010:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005012:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005016:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800501a:	f7fb fc37 	bl	800088c <__aeabi_uldivmod>
 800501e:	4602      	mov	r2, r0
 8005020:	460b      	mov	r3, r1
 8005022:	4b8c      	ldr	r3, [pc, #560]	; (8005254 <UART_SetConfig+0x38c>)
 8005024:	fba3 1302 	umull	r1, r3, r3, r2
 8005028:	095b      	lsrs	r3, r3, #5
 800502a:	2164      	movs	r1, #100	; 0x64
 800502c:	fb01 f303 	mul.w	r3, r1, r3
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	00db      	lsls	r3, r3, #3
 8005034:	3332      	adds	r3, #50	; 0x32
 8005036:	4a87      	ldr	r2, [pc, #540]	; (8005254 <UART_SetConfig+0x38c>)
 8005038:	fba2 2303 	umull	r2, r3, r2, r3
 800503c:	095b      	lsrs	r3, r3, #5
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005044:	441e      	add	r6, r3
 8005046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005048:	4618      	mov	r0, r3
 800504a:	f04f 0100 	mov.w	r1, #0
 800504e:	4602      	mov	r2, r0
 8005050:	460b      	mov	r3, r1
 8005052:	1894      	adds	r4, r2, r2
 8005054:	623c      	str	r4, [r7, #32]
 8005056:	415b      	adcs	r3, r3
 8005058:	627b      	str	r3, [r7, #36]	; 0x24
 800505a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800505e:	1812      	adds	r2, r2, r0
 8005060:	eb41 0303 	adc.w	r3, r1, r3
 8005064:	f04f 0400 	mov.w	r4, #0
 8005068:	f04f 0500 	mov.w	r5, #0
 800506c:	00dd      	lsls	r5, r3, #3
 800506e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005072:	00d4      	lsls	r4, r2, #3
 8005074:	4622      	mov	r2, r4
 8005076:	462b      	mov	r3, r5
 8005078:	1814      	adds	r4, r2, r0
 800507a:	653c      	str	r4, [r7, #80]	; 0x50
 800507c:	414b      	adcs	r3, r1
 800507e:	657b      	str	r3, [r7, #84]	; 0x54
 8005080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	461a      	mov	r2, r3
 8005086:	f04f 0300 	mov.w	r3, #0
 800508a:	1891      	adds	r1, r2, r2
 800508c:	61b9      	str	r1, [r7, #24]
 800508e:	415b      	adcs	r3, r3
 8005090:	61fb      	str	r3, [r7, #28]
 8005092:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005096:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800509a:	f7fb fbf7 	bl	800088c <__aeabi_uldivmod>
 800509e:	4602      	mov	r2, r0
 80050a0:	460b      	mov	r3, r1
 80050a2:	4b6c      	ldr	r3, [pc, #432]	; (8005254 <UART_SetConfig+0x38c>)
 80050a4:	fba3 1302 	umull	r1, r3, r3, r2
 80050a8:	095b      	lsrs	r3, r3, #5
 80050aa:	2164      	movs	r1, #100	; 0x64
 80050ac:	fb01 f303 	mul.w	r3, r1, r3
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	3332      	adds	r3, #50	; 0x32
 80050b6:	4a67      	ldr	r2, [pc, #412]	; (8005254 <UART_SetConfig+0x38c>)
 80050b8:	fba2 2303 	umull	r2, r3, r2, r3
 80050bc:	095b      	lsrs	r3, r3, #5
 80050be:	f003 0207 	and.w	r2, r3, #7
 80050c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4432      	add	r2, r6
 80050c8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80050ca:	e0b9      	b.n	8005240 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050ce:	461c      	mov	r4, r3
 80050d0:	f04f 0500 	mov.w	r5, #0
 80050d4:	4622      	mov	r2, r4
 80050d6:	462b      	mov	r3, r5
 80050d8:	1891      	adds	r1, r2, r2
 80050da:	6139      	str	r1, [r7, #16]
 80050dc:	415b      	adcs	r3, r3
 80050de:	617b      	str	r3, [r7, #20]
 80050e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80050e4:	1912      	adds	r2, r2, r4
 80050e6:	eb45 0303 	adc.w	r3, r5, r3
 80050ea:	f04f 0000 	mov.w	r0, #0
 80050ee:	f04f 0100 	mov.w	r1, #0
 80050f2:	00d9      	lsls	r1, r3, #3
 80050f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050f8:	00d0      	lsls	r0, r2, #3
 80050fa:	4602      	mov	r2, r0
 80050fc:	460b      	mov	r3, r1
 80050fe:	eb12 0804 	adds.w	r8, r2, r4
 8005102:	eb43 0905 	adc.w	r9, r3, r5
 8005106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	4618      	mov	r0, r3
 800510c:	f04f 0100 	mov.w	r1, #0
 8005110:	f04f 0200 	mov.w	r2, #0
 8005114:	f04f 0300 	mov.w	r3, #0
 8005118:	008b      	lsls	r3, r1, #2
 800511a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800511e:	0082      	lsls	r2, r0, #2
 8005120:	4640      	mov	r0, r8
 8005122:	4649      	mov	r1, r9
 8005124:	f7fb fbb2 	bl	800088c <__aeabi_uldivmod>
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	4b49      	ldr	r3, [pc, #292]	; (8005254 <UART_SetConfig+0x38c>)
 800512e:	fba3 2302 	umull	r2, r3, r3, r2
 8005132:	095b      	lsrs	r3, r3, #5
 8005134:	011e      	lsls	r6, r3, #4
 8005136:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005138:	4618      	mov	r0, r3
 800513a:	f04f 0100 	mov.w	r1, #0
 800513e:	4602      	mov	r2, r0
 8005140:	460b      	mov	r3, r1
 8005142:	1894      	adds	r4, r2, r2
 8005144:	60bc      	str	r4, [r7, #8]
 8005146:	415b      	adcs	r3, r3
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800514e:	1812      	adds	r2, r2, r0
 8005150:	eb41 0303 	adc.w	r3, r1, r3
 8005154:	f04f 0400 	mov.w	r4, #0
 8005158:	f04f 0500 	mov.w	r5, #0
 800515c:	00dd      	lsls	r5, r3, #3
 800515e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005162:	00d4      	lsls	r4, r2, #3
 8005164:	4622      	mov	r2, r4
 8005166:	462b      	mov	r3, r5
 8005168:	1814      	adds	r4, r2, r0
 800516a:	64bc      	str	r4, [r7, #72]	; 0x48
 800516c:	414b      	adcs	r3, r1
 800516e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	4618      	mov	r0, r3
 8005176:	f04f 0100 	mov.w	r1, #0
 800517a:	f04f 0200 	mov.w	r2, #0
 800517e:	f04f 0300 	mov.w	r3, #0
 8005182:	008b      	lsls	r3, r1, #2
 8005184:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005188:	0082      	lsls	r2, r0, #2
 800518a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800518e:	f7fb fb7d 	bl	800088c <__aeabi_uldivmod>
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	4b2f      	ldr	r3, [pc, #188]	; (8005254 <UART_SetConfig+0x38c>)
 8005198:	fba3 1302 	umull	r1, r3, r3, r2
 800519c:	095b      	lsrs	r3, r3, #5
 800519e:	2164      	movs	r1, #100	; 0x64
 80051a0:	fb01 f303 	mul.w	r3, r1, r3
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	011b      	lsls	r3, r3, #4
 80051a8:	3332      	adds	r3, #50	; 0x32
 80051aa:	4a2a      	ldr	r2, [pc, #168]	; (8005254 <UART_SetConfig+0x38c>)
 80051ac:	fba2 2303 	umull	r2, r3, r2, r3
 80051b0:	095b      	lsrs	r3, r3, #5
 80051b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051b6:	441e      	add	r6, r3
 80051b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051ba:	4618      	mov	r0, r3
 80051bc:	f04f 0100 	mov.w	r1, #0
 80051c0:	4602      	mov	r2, r0
 80051c2:	460b      	mov	r3, r1
 80051c4:	1894      	adds	r4, r2, r2
 80051c6:	603c      	str	r4, [r7, #0]
 80051c8:	415b      	adcs	r3, r3
 80051ca:	607b      	str	r3, [r7, #4]
 80051cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051d0:	1812      	adds	r2, r2, r0
 80051d2:	eb41 0303 	adc.w	r3, r1, r3
 80051d6:	f04f 0400 	mov.w	r4, #0
 80051da:	f04f 0500 	mov.w	r5, #0
 80051de:	00dd      	lsls	r5, r3, #3
 80051e0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80051e4:	00d4      	lsls	r4, r2, #3
 80051e6:	4622      	mov	r2, r4
 80051e8:	462b      	mov	r3, r5
 80051ea:	eb12 0a00 	adds.w	sl, r2, r0
 80051ee:	eb43 0b01 	adc.w	fp, r3, r1
 80051f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f04f 0100 	mov.w	r1, #0
 80051fc:	f04f 0200 	mov.w	r2, #0
 8005200:	f04f 0300 	mov.w	r3, #0
 8005204:	008b      	lsls	r3, r1, #2
 8005206:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800520a:	0082      	lsls	r2, r0, #2
 800520c:	4650      	mov	r0, sl
 800520e:	4659      	mov	r1, fp
 8005210:	f7fb fb3c 	bl	800088c <__aeabi_uldivmod>
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	4b0e      	ldr	r3, [pc, #56]	; (8005254 <UART_SetConfig+0x38c>)
 800521a:	fba3 1302 	umull	r1, r3, r3, r2
 800521e:	095b      	lsrs	r3, r3, #5
 8005220:	2164      	movs	r1, #100	; 0x64
 8005222:	fb01 f303 	mul.w	r3, r1, r3
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	011b      	lsls	r3, r3, #4
 800522a:	3332      	adds	r3, #50	; 0x32
 800522c:	4a09      	ldr	r2, [pc, #36]	; (8005254 <UART_SetConfig+0x38c>)
 800522e:	fba2 2303 	umull	r2, r3, r2, r3
 8005232:	095b      	lsrs	r3, r3, #5
 8005234:	f003 020f 	and.w	r2, r3, #15
 8005238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4432      	add	r2, r6
 800523e:	609a      	str	r2, [r3, #8]
}
 8005240:	bf00      	nop
 8005242:	377c      	adds	r7, #124	; 0x7c
 8005244:	46bd      	mov	sp, r7
 8005246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800524a:	bf00      	nop
 800524c:	40011000 	.word	0x40011000
 8005250:	40011400 	.word	0x40011400
 8005254:	51eb851f 	.word	0x51eb851f

08005258 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005258:	b084      	sub	sp, #16
 800525a:	b480      	push	{r7}
 800525c:	b085      	sub	sp, #20
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
 8005262:	f107 001c 	add.w	r0, r7, #28
 8005266:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800526a:	2300      	movs	r3, #0
 800526c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800526e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005270:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005272:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005276:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005278:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800527a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800527c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800527e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005282:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	4313      	orrs	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005292:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	431a      	orrs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	b004      	add	sp, #16
 80052ac:	4770      	bx	lr

080052ae <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b083      	sub	sp, #12
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80052bc:	4618      	mov	r0, r3
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b082      	sub	sp, #8
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2203      	movs	r2, #3
 80052f6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80052f8:	2002      	movs	r0, #2
 80052fa:	f7fc fbd5 	bl	8001aa8 <HAL_Delay>
  
  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0303 	and.w	r3, r3, #3
}
 8005318:	4618      	mov	r0, r3
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800532e:	2300      	movs	r3, #0
 8005330:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005342:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005348:	431a      	orrs	r2, r3
                       Command->CPSM);
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800534e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	4313      	orrs	r3, r2
 8005354:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800535e:	f023 030f 	bic.w	r3, r3, #15
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	431a      	orrs	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3714      	adds	r7, #20
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	b2db      	uxtb	r3, r3
}
 8005386:	4618      	mov	r0, r3
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005392:	b480      	push	{r7}
 8005394:	b085      	sub	sp, #20
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	3314      	adds	r3, #20
 80053a0:	461a      	mov	r2, r3
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	4413      	add	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
}  
 80053ac:	4618      	mov	r0, r3
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80053c2:	2300      	movs	r3, #0
 80053c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80053de:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80053e4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80053ea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	431a      	orrs	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005402:	2300      	movs	r3, #0

}
 8005404:	4618      	mov	r0, r3
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b088      	sub	sp, #32
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800541e:	2310      	movs	r3, #16
 8005420:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005422:	2340      	movs	r3, #64	; 0x40
 8005424:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005426:	2300      	movs	r3, #0
 8005428:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800542a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800542e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005430:	f107 0308 	add.w	r3, r7, #8
 8005434:	4619      	mov	r1, r3
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7ff ff74 	bl	8005324 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800543c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005440:	2110      	movs	r1, #16
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 fa44 	bl	80058d0 <SDMMC_GetCmdResp1>
 8005448:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800544a:	69fb      	ldr	r3, [r7, #28]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3720      	adds	r7, #32
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b088      	sub	sp, #32
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005462:	2311      	movs	r3, #17
 8005464:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005466:	2340      	movs	r3, #64	; 0x40
 8005468:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800546a:	2300      	movs	r3, #0
 800546c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800546e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005472:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005474:	f107 0308 	add.w	r3, r7, #8
 8005478:	4619      	mov	r1, r3
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7ff ff52 	bl	8005324 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005480:	f241 3288 	movw	r2, #5000	; 0x1388
 8005484:	2111      	movs	r1, #17
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fa22 	bl	80058d0 <SDMMC_GetCmdResp1>
 800548c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800548e:	69fb      	ldr	r3, [r7, #28]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3720      	adds	r7, #32
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b088      	sub	sp, #32
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80054a6:	2312      	movs	r3, #18
 80054a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80054aa:	2340      	movs	r3, #64	; 0x40
 80054ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054ae:	2300      	movs	r3, #0
 80054b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054b8:	f107 0308 	add.w	r3, r7, #8
 80054bc:	4619      	mov	r1, r3
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7ff ff30 	bl	8005324 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80054c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c8:	2112      	movs	r1, #18
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 fa00 	bl	80058d0 <SDMMC_GetCmdResp1>
 80054d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054d2:	69fb      	ldr	r3, [r7, #28]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3720      	adds	r7, #32
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b088      	sub	sp, #32
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80054ea:	2318      	movs	r3, #24
 80054ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80054ee:	2340      	movs	r3, #64	; 0x40
 80054f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054f2:	2300      	movs	r3, #0
 80054f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054fc:	f107 0308 	add.w	r3, r7, #8
 8005500:	4619      	mov	r1, r3
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7ff ff0e 	bl	8005324 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005508:	f241 3288 	movw	r2, #5000	; 0x1388
 800550c:	2118      	movs	r1, #24
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f9de 	bl	80058d0 <SDMMC_GetCmdResp1>
 8005514:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005516:	69fb      	ldr	r3, [r7, #28]
}
 8005518:	4618      	mov	r0, r3
 800551a:	3720      	adds	r7, #32
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b088      	sub	sp, #32
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800552e:	2319      	movs	r3, #25
 8005530:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005532:	2340      	movs	r3, #64	; 0x40
 8005534:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005536:	2300      	movs	r3, #0
 8005538:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800553a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800553e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005540:	f107 0308 	add.w	r3, r7, #8
 8005544:	4619      	mov	r1, r3
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f7ff feec 	bl	8005324 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800554c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005550:	2119      	movs	r1, #25
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f9bc 	bl	80058d0 <SDMMC_GetCmdResp1>
 8005558:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800555a:	69fb      	ldr	r3, [r7, #28]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3720      	adds	r7, #32
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b088      	sub	sp, #32
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800556c:	2300      	movs	r3, #0
 800556e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005570:	230c      	movs	r3, #12
 8005572:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005574:	2340      	movs	r3, #64	; 0x40
 8005576:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005578:	2300      	movs	r3, #0
 800557a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800557c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005580:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005582:	f107 0308 	add.w	r3, r7, #8
 8005586:	4619      	mov	r1, r3
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f7ff fecb 	bl	8005324 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800558e:	4a05      	ldr	r2, [pc, #20]	; (80055a4 <SDMMC_CmdStopTransfer+0x40>)
 8005590:	210c      	movs	r1, #12
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f99c 	bl	80058d0 <SDMMC_GetCmdResp1>
 8005598:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800559a:	69fb      	ldr	r3, [r7, #28]
}
 800559c:	4618      	mov	r0, r3
 800559e:	3720      	adds	r7, #32
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	05f5e100 	.word	0x05f5e100

080055a8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b08a      	sub	sp, #40	; 0x28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80055b8:	2307      	movs	r3, #7
 80055ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055bc:	2340      	movs	r3, #64	; 0x40
 80055be:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055c0:	2300      	movs	r3, #0
 80055c2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055c8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055ca:	f107 0310 	add.w	r3, r7, #16
 80055ce:	4619      	mov	r1, r3
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f7ff fea7 	bl	8005324 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80055d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055da:	2107      	movs	r1, #7
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f000 f977 	bl	80058d0 <SDMMC_GetCmdResp1>
 80055e2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80055e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3728      	adds	r7, #40	; 0x28
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b088      	sub	sp, #32
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80055f6:	2300      	movs	r3, #0
 80055f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80055fa:	2300      	movs	r3, #0
 80055fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80055fe:	2300      	movs	r3, #0
 8005600:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005602:	2300      	movs	r3, #0
 8005604:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800560a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800560c:	f107 0308 	add.w	r3, r7, #8
 8005610:	4619      	mov	r1, r3
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7ff fe86 	bl	8005324 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f92d 	bl	8005878 <SDMMC_GetCmdError>
 800561e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005620:	69fb      	ldr	r3, [r7, #28]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3720      	adds	r7, #32
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b088      	sub	sp, #32
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005632:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005636:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005638:	2308      	movs	r3, #8
 800563a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800563c:	2340      	movs	r3, #64	; 0x40
 800563e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005640:	2300      	movs	r3, #0
 8005642:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005648:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800564a:	f107 0308 	add.w	r3, r7, #8
 800564e:	4619      	mov	r1, r3
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f7ff fe67 	bl	8005324 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fb24 	bl	8005ca4 <SDMMC_GetCmdResp7>
 800565c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800565e:	69fb      	ldr	r3, [r7, #28]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3720      	adds	r7, #32
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b088      	sub	sp, #32
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005676:	2337      	movs	r3, #55	; 0x37
 8005678:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800567a:	2340      	movs	r3, #64	; 0x40
 800567c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800567e:	2300      	movs	r3, #0
 8005680:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005686:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005688:	f107 0308 	add.w	r3, r7, #8
 800568c:	4619      	mov	r1, r3
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7ff fe48 	bl	8005324 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005694:	f241 3288 	movw	r2, #5000	; 0x1388
 8005698:	2137      	movs	r1, #55	; 0x37
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f918 	bl	80058d0 <SDMMC_GetCmdResp1>
 80056a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056a2:	69fb      	ldr	r3, [r7, #28]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3720      	adds	r7, #32
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b088      	sub	sp, #32
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80056c2:	2329      	movs	r3, #41	; 0x29
 80056c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056c6:	2340      	movs	r3, #64	; 0x40
 80056c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056ca:	2300      	movs	r3, #0
 80056cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056d4:	f107 0308 	add.w	r3, r7, #8
 80056d8:	4619      	mov	r1, r3
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7ff fe22 	bl	8005324 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fa2b 	bl	8005b3c <SDMMC_GetCmdResp3>
 80056e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056e8:	69fb      	ldr	r3, [r7, #28]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3720      	adds	r7, #32
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b088      	sub	sp, #32
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
 80056fa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005700:	2306      	movs	r3, #6
 8005702:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005704:	2340      	movs	r3, #64	; 0x40
 8005706:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005708:	2300      	movs	r3, #0
 800570a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800570c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005710:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005712:	f107 0308 	add.w	r3, r7, #8
 8005716:	4619      	mov	r1, r3
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7ff fe03 	bl	8005324 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800571e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005722:	2106      	movs	r1, #6
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f8d3 	bl	80058d0 <SDMMC_GetCmdResp1>
 800572a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800572c:	69fb      	ldr	r3, [r7, #28]
}
 800572e:	4618      	mov	r0, r3
 8005730:	3720      	adds	r7, #32
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b088      	sub	sp, #32
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800573e:	2300      	movs	r3, #0
 8005740:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005742:	2333      	movs	r3, #51	; 0x33
 8005744:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005746:	2340      	movs	r3, #64	; 0x40
 8005748:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800574a:	2300      	movs	r3, #0
 800574c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800574e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005752:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005754:	f107 0308 	add.w	r3, r7, #8
 8005758:	4619      	mov	r1, r3
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7ff fde2 	bl	8005324 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005760:	f241 3288 	movw	r2, #5000	; 0x1388
 8005764:	2133      	movs	r1, #51	; 0x33
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f8b2 	bl	80058d0 <SDMMC_GetCmdResp1>
 800576c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800576e:	69fb      	ldr	r3, [r7, #28]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3720      	adds	r7, #32
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b088      	sub	sp, #32
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005784:	2302      	movs	r3, #2
 8005786:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005788:	23c0      	movs	r3, #192	; 0xc0
 800578a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800578c:	2300      	movs	r3, #0
 800578e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005794:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005796:	f107 0308 	add.w	r3, r7, #8
 800579a:	4619      	mov	r1, r3
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7ff fdc1 	bl	8005324 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f982 	bl	8005aac <SDMMC_GetCmdResp2>
 80057a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057aa:	69fb      	ldr	r3, [r7, #28]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3720      	adds	r7, #32
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b088      	sub	sp, #32
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80057c2:	2309      	movs	r3, #9
 80057c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80057c6:	23c0      	movs	r3, #192	; 0xc0
 80057c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057ca:	2300      	movs	r3, #0
 80057cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057d4:	f107 0308 	add.w	r3, r7, #8
 80057d8:	4619      	mov	r1, r3
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7ff fda2 	bl	8005324 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 f963 	bl	8005aac <SDMMC_GetCmdResp2>
 80057e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057e8:	69fb      	ldr	r3, [r7, #28]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3720      	adds	r7, #32
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b088      	sub	sp, #32
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005800:	2303      	movs	r3, #3
 8005802:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005804:	2340      	movs	r3, #64	; 0x40
 8005806:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005808:	2300      	movs	r3, #0
 800580a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800580c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005810:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005812:	f107 0308 	add.w	r3, r7, #8
 8005816:	4619      	mov	r1, r3
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7ff fd83 	bl	8005324 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	2103      	movs	r1, #3
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f9c8 	bl	8005bb8 <SDMMC_GetCmdResp6>
 8005828:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800582a:	69fb      	ldr	r3, [r7, #28]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3720      	adds	r7, #32
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b088      	sub	sp, #32
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005842:	230d      	movs	r3, #13
 8005844:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005846:	2340      	movs	r3, #64	; 0x40
 8005848:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800584a:	2300      	movs	r3, #0
 800584c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800584e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005852:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005854:	f107 0308 	add.w	r3, r7, #8
 8005858:	4619      	mov	r1, r3
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7ff fd62 	bl	8005324 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005860:	f241 3288 	movw	r2, #5000	; 0x1388
 8005864:	210d      	movs	r1, #13
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f832 	bl	80058d0 <SDMMC_GetCmdResp1>
 800586c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800586e:	69fb      	ldr	r3, [r7, #28]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3720      	adds	r7, #32
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005880:	4b11      	ldr	r3, [pc, #68]	; (80058c8 <SDMMC_GetCmdError+0x50>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a11      	ldr	r2, [pc, #68]	; (80058cc <SDMMC_GetCmdError+0x54>)
 8005886:	fba2 2303 	umull	r2, r3, r2, r3
 800588a:	0a5b      	lsrs	r3, r3, #9
 800588c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005890:	fb02 f303 	mul.w	r3, r2, r3
 8005894:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	1e5a      	subs	r2, r3, #1
 800589a:	60fa      	str	r2, [r7, #12]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d102      	bne.n	80058a6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80058a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80058a4:	e009      	b.n	80058ba <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d0f1      	beq.n	8005896 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	22c5      	movs	r2, #197	; 0xc5
 80058b6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3714      	adds	r7, #20
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	20000018 	.word	0x20000018
 80058cc:	10624dd3 	.word	0x10624dd3

080058d0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b088      	sub	sp, #32
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	460b      	mov	r3, r1
 80058da:	607a      	str	r2, [r7, #4]
 80058dc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80058de:	4b70      	ldr	r3, [pc, #448]	; (8005aa0 <SDMMC_GetCmdResp1+0x1d0>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a70      	ldr	r2, [pc, #448]	; (8005aa4 <SDMMC_GetCmdResp1+0x1d4>)
 80058e4:	fba2 2303 	umull	r2, r3, r2, r3
 80058e8:	0a5a      	lsrs	r2, r3, #9
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	fb02 f303 	mul.w	r3, r2, r3
 80058f0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	1e5a      	subs	r2, r3, #1
 80058f6:	61fa      	str	r2, [r7, #28]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d102      	bne.n	8005902 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80058fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005900:	e0c9      	b.n	8005a96 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005906:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800590e:	2b00      	cmp	r3, #0
 8005910:	d0ef      	beq.n	80058f2 <SDMMC_GetCmdResp1+0x22>
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1ea      	bne.n	80058f2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005920:	f003 0304 	and.w	r3, r3, #4
 8005924:	2b00      	cmp	r3, #0
 8005926:	d004      	beq.n	8005932 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2204      	movs	r2, #4
 800592c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800592e:	2304      	movs	r3, #4
 8005930:	e0b1      	b.n	8005a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	d004      	beq.n	8005948 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2201      	movs	r2, #1
 8005942:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005944:	2301      	movs	r3, #1
 8005946:	e0a6      	b.n	8005a96 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	22c5      	movs	r2, #197	; 0xc5
 800594c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f7ff fd12 	bl	8005378 <SDIO_GetCommandResponse>
 8005954:	4603      	mov	r3, r0
 8005956:	461a      	mov	r2, r3
 8005958:	7afb      	ldrb	r3, [r7, #11]
 800595a:	4293      	cmp	r3, r2
 800595c:	d001      	beq.n	8005962 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800595e:	2301      	movs	r3, #1
 8005960:	e099      	b.n	8005a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005962:	2100      	movs	r1, #0
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f7ff fd14 	bl	8005392 <SDIO_GetResponse>
 800596a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	4b4e      	ldr	r3, [pc, #312]	; (8005aa8 <SDMMC_GetCmdResp1+0x1d8>)
 8005970:	4013      	ands	r3, r2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005976:	2300      	movs	r3, #0
 8005978:	e08d      	b.n	8005a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	2b00      	cmp	r3, #0
 800597e:	da02      	bge.n	8005986 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005980:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005984:	e087      	b.n	8005a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d001      	beq.n	8005994 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005990:	2340      	movs	r3, #64	; 0x40
 8005992:	e080      	b.n	8005a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800599e:	2380      	movs	r3, #128	; 0x80
 80059a0:	e079      	b.n	8005a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d002      	beq.n	80059b2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80059ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059b0:	e071      	b.n	8005a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80059bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059c0:	e069      	b.n	8005a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d002      	beq.n	80059d2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80059cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059d0:	e061      	b.n	8005a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80059dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80059e0:	e059      	b.n	8005a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80059ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059f0:	e051      	b.n	8005a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d002      	beq.n	8005a02 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80059fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a00:	e049      	b.n	8005a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d002      	beq.n	8005a12 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005a0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005a10:	e041      	b.n	8005a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005a1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a20:	e039      	b.n	8005a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d002      	beq.n	8005a32 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005a2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a30:	e031      	b.n	8005a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005a3c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005a40:	e029      	b.n	8005a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d002      	beq.n	8005a52 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005a4c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005a50:	e021      	b.n	8005a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005a5c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005a60:	e019      	b.n	8005a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d002      	beq.n	8005a72 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005a6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005a70:	e011      	b.n	8005a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d002      	beq.n	8005a82 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005a7c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005a80:	e009      	b.n	8005a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f003 0308 	and.w	r3, r3, #8
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005a8c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005a90:	e001      	b.n	8005a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005a92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3720      	adds	r7, #32
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	20000018 	.word	0x20000018
 8005aa4:	10624dd3 	.word	0x10624dd3
 8005aa8:	fdffe008 	.word	0xfdffe008

08005aac <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005ab4:	4b1f      	ldr	r3, [pc, #124]	; (8005b34 <SDMMC_GetCmdResp2+0x88>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a1f      	ldr	r2, [pc, #124]	; (8005b38 <SDMMC_GetCmdResp2+0x8c>)
 8005aba:	fba2 2303 	umull	r2, r3, r2, r3
 8005abe:	0a5b      	lsrs	r3, r3, #9
 8005ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ac4:	fb02 f303 	mul.w	r3, r2, r3
 8005ac8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	1e5a      	subs	r2, r3, #1
 8005ace:	60fa      	str	r2, [r7, #12]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d102      	bne.n	8005ada <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005ad4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ad8:	e026      	b.n	8005b28 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ade:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d0ef      	beq.n	8005aca <SDMMC_GetCmdResp2+0x1e>
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1ea      	bne.n	8005aca <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af8:	f003 0304 	and.w	r3, r3, #4
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d004      	beq.n	8005b0a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2204      	movs	r2, #4
 8005b04:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005b06:	2304      	movs	r3, #4
 8005b08:	e00e      	b.n	8005b28 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d004      	beq.n	8005b20 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e003      	b.n	8005b28 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	22c5      	movs	r2, #197	; 0xc5
 8005b24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	20000018 	.word	0x20000018
 8005b38:	10624dd3 	.word	0x10624dd3

08005b3c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b44:	4b1a      	ldr	r3, [pc, #104]	; (8005bb0 <SDMMC_GetCmdResp3+0x74>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a1a      	ldr	r2, [pc, #104]	; (8005bb4 <SDMMC_GetCmdResp3+0x78>)
 8005b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4e:	0a5b      	lsrs	r3, r3, #9
 8005b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b54:	fb02 f303 	mul.w	r3, r2, r3
 8005b58:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	1e5a      	subs	r2, r3, #1
 8005b5e:	60fa      	str	r2, [r7, #12]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d102      	bne.n	8005b6a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b68:	e01b      	b.n	8005ba2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b6e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d0ef      	beq.n	8005b5a <SDMMC_GetCmdResp3+0x1e>
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1ea      	bne.n	8005b5a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b88:	f003 0304 	and.w	r3, r3, #4
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d004      	beq.n	8005b9a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2204      	movs	r2, #4
 8005b94:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005b96:	2304      	movs	r3, #4
 8005b98:	e003      	b.n	8005ba2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	22c5      	movs	r2, #197	; 0xc5
 8005b9e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3714      	adds	r7, #20
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	20000018 	.word	0x20000018
 8005bb4:	10624dd3 	.word	0x10624dd3

08005bb8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b088      	sub	sp, #32
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	607a      	str	r2, [r7, #4]
 8005bc4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005bc6:	4b35      	ldr	r3, [pc, #212]	; (8005c9c <SDMMC_GetCmdResp6+0xe4>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a35      	ldr	r2, [pc, #212]	; (8005ca0 <SDMMC_GetCmdResp6+0xe8>)
 8005bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd0:	0a5b      	lsrs	r3, r3, #9
 8005bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bd6:	fb02 f303 	mul.w	r3, r2, r3
 8005bda:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	1e5a      	subs	r2, r3, #1
 8005be0:	61fa      	str	r2, [r7, #28]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d102      	bne.n	8005bec <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005be6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005bea:	e052      	b.n	8005c92 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d0ef      	beq.n	8005bdc <SDMMC_GetCmdResp6+0x24>
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1ea      	bne.n	8005bdc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c0a:	f003 0304 	and.w	r3, r3, #4
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d004      	beq.n	8005c1c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2204      	movs	r2, #4
 8005c16:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005c18:	2304      	movs	r3, #4
 8005c1a:	e03a      	b.n	8005c92 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c20:	f003 0301 	and.w	r3, r3, #1
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d004      	beq.n	8005c32 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e02f      	b.n	8005c92 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f7ff fba0 	bl	8005378 <SDIO_GetCommandResponse>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	7afb      	ldrb	r3, [r7, #11]
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d001      	beq.n	8005c46 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e025      	b.n	8005c92 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	22c5      	movs	r2, #197	; 0xc5
 8005c4a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f7ff fb9f 	bl	8005392 <SDIO_GetResponse>
 8005c54:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d106      	bne.n	8005c6e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	0c1b      	lsrs	r3, r3, #16
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	e011      	b.n	8005c92 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d002      	beq.n	8005c7e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005c78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c7c:	e009      	b.n	8005c92 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d002      	beq.n	8005c8e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c8c:	e001      	b.n	8005c92 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005c8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3720      	adds	r7, #32
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20000018 	.word	0x20000018
 8005ca0:	10624dd3 	.word	0x10624dd3

08005ca4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005cac:	4b22      	ldr	r3, [pc, #136]	; (8005d38 <SDMMC_GetCmdResp7+0x94>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a22      	ldr	r2, [pc, #136]	; (8005d3c <SDMMC_GetCmdResp7+0x98>)
 8005cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb6:	0a5b      	lsrs	r3, r3, #9
 8005cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cbc:	fb02 f303 	mul.w	r3, r2, r3
 8005cc0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	1e5a      	subs	r2, r3, #1
 8005cc6:	60fa      	str	r2, [r7, #12]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d102      	bne.n	8005cd2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005ccc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005cd0:	e02c      	b.n	8005d2c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d0ef      	beq.n	8005cc2 <SDMMC_GetCmdResp7+0x1e>
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1ea      	bne.n	8005cc2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf0:	f003 0304 	and.w	r3, r3, #4
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d004      	beq.n	8005d02 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2204      	movs	r2, #4
 8005cfc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005cfe:	2304      	movs	r3, #4
 8005d00:	e014      	b.n	8005d2c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d004      	beq.n	8005d18 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e009      	b.n	8005d2c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d002      	beq.n	8005d2a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2240      	movs	r2, #64	; 0x40
 8005d28:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005d2a:	2300      	movs	r3, #0
  
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3714      	adds	r7, #20
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	20000018 	.word	0x20000018
 8005d3c:	10624dd3 	.word	0x10624dd3

08005d40 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005d44:	4904      	ldr	r1, [pc, #16]	; (8005d58 <MX_FATFS_Init+0x18>)
 8005d46:	4805      	ldr	r0, [pc, #20]	; (8005d5c <MX_FATFS_Init+0x1c>)
 8005d48:	f003 fab2 	bl	80092b0 <FATFS_LinkDriver>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	461a      	mov	r2, r3
 8005d50:	4b03      	ldr	r3, [pc, #12]	; (8005d60 <MX_FATFS_Init+0x20>)
 8005d52:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005d54:	bf00      	nop
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	200013b4 	.word	0x200013b4
 8005d5c:	0800aab0 	.word	0x0800aab0
 8005d60:	200013b0 	.word	0x200013b0

08005d64 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005d64:	b480      	push	{r7}
 8005d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005d68:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005d7e:	f000 f896 	bl	8005eae <BSP_SD_IsDetected>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d001      	beq.n	8005d8c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e012      	b.n	8005db2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005d8c:	480b      	ldr	r0, [pc, #44]	; (8005dbc <BSP_SD_Init+0x48>)
 8005d8e:	f7fd f971 	bl	8003074 <HAL_SD_Init>
 8005d92:	4603      	mov	r3, r0
 8005d94:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005d96:	79fb      	ldrb	r3, [r7, #7]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d109      	bne.n	8005db0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005d9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005da0:	4806      	ldr	r0, [pc, #24]	; (8005dbc <BSP_SD_Init+0x48>)
 8005da2:	f7fd ff3d 	bl	8003c20 <HAL_SD_ConfigWideBusOperation>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d001      	beq.n	8005db0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005db0:	79fb      	ldrb	r3, [r7, #7]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	2000120c 	.word	0x2000120c

08005dc0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68ba      	ldr	r2, [r7, #8]
 8005dd4:	68f9      	ldr	r1, [r7, #12]
 8005dd6:	4806      	ldr	r0, [pc, #24]	; (8005df0 <BSP_SD_ReadBlocks_DMA+0x30>)
 8005dd8:	f7fd f9fa 	bl	80031d0 <HAL_SD_ReadBlocks_DMA>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d001      	beq.n	8005de6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3718      	adds	r7, #24
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	2000120c 	.word	0x2000120c

08005df4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b086      	sub	sp, #24
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005e00:	2300      	movs	r3, #0
 8005e02:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	68f9      	ldr	r1, [r7, #12]
 8005e0a:	4806      	ldr	r0, [pc, #24]	; (8005e24 <BSP_SD_WriteBlocks_DMA+0x30>)
 8005e0c:	f7fd fac2 	bl	8003394 <HAL_SD_WriteBlocks_DMA>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d001      	beq.n	8005e1a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3718      	adds	r7, #24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	2000120c 	.word	0x2000120c

08005e28 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005e2c:	4805      	ldr	r0, [pc, #20]	; (8005e44 <BSP_SD_GetCardState+0x1c>)
 8005e2e:	f7fd ff91 	bl	8003d54 <HAL_SD_GetCardState>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b04      	cmp	r3, #4
 8005e36:	bf14      	ite	ne
 8005e38:	2301      	movne	r3, #1
 8005e3a:	2300      	moveq	r3, #0
 8005e3c:	b2db      	uxtb	r3, r3
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	2000120c 	.word	0x2000120c

08005e48 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005e50:	6879      	ldr	r1, [r7, #4]
 8005e52:	4803      	ldr	r0, [pc, #12]	; (8005e60 <BSP_SD_GetCardInfo+0x18>)
 8005e54:	f7fd feb8 	bl	8003bc8 <HAL_SD_GetCardInfo>
}
 8005e58:	bf00      	nop
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	2000120c 	.word	0x2000120c

08005e64 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005e6c:	f000 f818 	bl	8005ea0 <BSP_SD_AbortCallback>
}
 8005e70:	bf00      	nop
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005e80:	f000 f98c 	bl	800619c <BSP_SD_WriteCpltCallback>
}
 8005e84:	bf00      	nop
 8005e86:	3708      	adds	r7, #8
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005e94:	f000 f98e 	bl	80061b4 <BSP_SD_ReadCpltCallback>
}
 8005e98:	bf00      	nop
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	af00      	add	r7, sp, #0

}
 8005ea4:	bf00      	nop
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b083      	sub	sp, #12
 8005eb2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005eb8:	79fb      	ldrb	r3, [r7, #7]
 8005eba:	b2db      	uxtb	r3, r3
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8005ed0:	f7fb fdde 	bl	8001a90 <HAL_GetTick>
 8005ed4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8005ed6:	e006      	b.n	8005ee6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005ed8:	f7ff ffa6 	bl	8005e28 <BSP_SD_GetCardState>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	e009      	b.n	8005efa <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8005ee6:	f7fb fdd3 	bl	8001a90 <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d8f0      	bhi.n	8005ed8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8005ef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
	...

08005f04 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005f0e:	4b0b      	ldr	r3, [pc, #44]	; (8005f3c <SD_CheckStatus+0x38>)
 8005f10:	2201      	movs	r2, #1
 8005f12:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005f14:	f7ff ff88 	bl	8005e28 <BSP_SD_GetCardState>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d107      	bne.n	8005f2e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005f1e:	4b07      	ldr	r3, [pc, #28]	; (8005f3c <SD_CheckStatus+0x38>)
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	f023 0301 	bic.w	r3, r3, #1
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	4b04      	ldr	r3, [pc, #16]	; (8005f3c <SD_CheckStatus+0x38>)
 8005f2c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005f2e:	4b03      	ldr	r3, [pc, #12]	; (8005f3c <SD_CheckStatus+0x38>)
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	b2db      	uxtb	r3, r3
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3708      	adds	r7, #8
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	2000003d 	.word	0x2000003d

08005f40 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	4603      	mov	r3, r0
 8005f48:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005f4a:	f7ff ff13 	bl	8005d74 <BSP_SD_Init>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d107      	bne.n	8005f64 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8005f54:	79fb      	ldrb	r3, [r7, #7]
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7ff ffd4 	bl	8005f04 <SD_CheckStatus>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	461a      	mov	r2, r3
 8005f60:	4b04      	ldr	r3, [pc, #16]	; (8005f74 <SD_initialize+0x34>)
 8005f62:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005f64:	4b03      	ldr	r3, [pc, #12]	; (8005f74 <SD_initialize+0x34>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	b2db      	uxtb	r3, r3
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	2000003d 	.word	0x2000003d

08005f78 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	4603      	mov	r3, r0
 8005f80:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005f82:	79fb      	ldrb	r3, [r7, #7]
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7ff ffbd 	bl	8005f04 <SD_CheckStatus>
 8005f8a:	4603      	mov	r3, r0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3708      	adds	r7, #8
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60b9      	str	r1, [r7, #8]
 8005f9c:	607a      	str	r2, [r7, #4]
 8005f9e:	603b      	str	r3, [r7, #0]
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005fa8:	f247 5030 	movw	r0, #30000	; 0x7530
 8005fac:	f7ff ff8c 	bl	8005ec8 <SD_CheckStatusWithTimeout>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	da01      	bge.n	8005fba <SD_read+0x26>
  {
    return res;
 8005fb6:	7dfb      	ldrb	r3, [r7, #23]
 8005fb8:	e03b      	b.n	8006032 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	6879      	ldr	r1, [r7, #4]
 8005fbe:	68b8      	ldr	r0, [r7, #8]
 8005fc0:	f7ff fefe 	bl	8005dc0 <BSP_SD_ReadBlocks_DMA>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d132      	bne.n	8006030 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8005fca:	4b1c      	ldr	r3, [pc, #112]	; (800603c <SD_read+0xa8>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8005fd0:	f7fb fd5e 	bl	8001a90 <HAL_GetTick>
 8005fd4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8005fd6:	bf00      	nop
 8005fd8:	4b18      	ldr	r3, [pc, #96]	; (800603c <SD_read+0xa8>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d108      	bne.n	8005ff2 <SD_read+0x5e>
 8005fe0:	f7fb fd56 	bl	8001a90 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	f247 522f 	movw	r2, #29999	; 0x752f
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d9f2      	bls.n	8005fd8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8005ff2:	4b12      	ldr	r3, [pc, #72]	; (800603c <SD_read+0xa8>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d102      	bne.n	8006000 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	75fb      	strb	r3, [r7, #23]
 8005ffe:	e017      	b.n	8006030 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8006000:	4b0e      	ldr	r3, [pc, #56]	; (800603c <SD_read+0xa8>)
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006006:	f7fb fd43 	bl	8001a90 <HAL_GetTick>
 800600a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800600c:	e007      	b.n	800601e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800600e:	f7ff ff0b 	bl	8005e28 <BSP_SD_GetCardState>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d102      	bne.n	800601e <SD_read+0x8a>
          {
            res = RES_OK;
 8006018:	2300      	movs	r3, #0
 800601a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800601c:	e008      	b.n	8006030 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800601e:	f7fb fd37 	bl	8001a90 <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	f247 522f 	movw	r2, #29999	; 0x752f
 800602c:	4293      	cmp	r3, r2
 800602e:	d9ee      	bls.n	800600e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8006030:	7dfb      	ldrb	r3, [r7, #23]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3718      	adds	r7, #24
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	200010c8 	.word	0x200010c8

08006040 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	60b9      	str	r1, [r7, #8]
 8006048:	607a      	str	r2, [r7, #4]
 800604a:	603b      	str	r3, [r7, #0]
 800604c:	4603      	mov	r3, r0
 800604e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8006054:	4b24      	ldr	r3, [pc, #144]	; (80060e8 <SD_write+0xa8>)
 8006056:	2200      	movs	r2, #0
 8006058:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800605a:	f247 5030 	movw	r0, #30000	; 0x7530
 800605e:	f7ff ff33 	bl	8005ec8 <SD_CheckStatusWithTimeout>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	da01      	bge.n	800606c <SD_write+0x2c>
  {
    return res;
 8006068:	7dfb      	ldrb	r3, [r7, #23]
 800606a:	e038      	b.n	80060de <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	6879      	ldr	r1, [r7, #4]
 8006070:	68b8      	ldr	r0, [r7, #8]
 8006072:	f7ff febf 	bl	8005df4 <BSP_SD_WriteBlocks_DMA>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d12f      	bne.n	80060dc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800607c:	f7fb fd08 	bl	8001a90 <HAL_GetTick>
 8006080:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006082:	bf00      	nop
 8006084:	4b18      	ldr	r3, [pc, #96]	; (80060e8 <SD_write+0xa8>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d108      	bne.n	800609e <SD_write+0x5e>
 800608c:	f7fb fd00 	bl	8001a90 <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	f247 522f 	movw	r2, #29999	; 0x752f
 800609a:	4293      	cmp	r3, r2
 800609c:	d9f2      	bls.n	8006084 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800609e:	4b12      	ldr	r3, [pc, #72]	; (80060e8 <SD_write+0xa8>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d102      	bne.n	80060ac <SD_write+0x6c>
      {
        res = RES_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	75fb      	strb	r3, [r7, #23]
 80060aa:	e017      	b.n	80060dc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80060ac:	4b0e      	ldr	r3, [pc, #56]	; (80060e8 <SD_write+0xa8>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80060b2:	f7fb fced 	bl	8001a90 <HAL_GetTick>
 80060b6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80060b8:	e007      	b.n	80060ca <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80060ba:	f7ff feb5 	bl	8005e28 <BSP_SD_GetCardState>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d102      	bne.n	80060ca <SD_write+0x8a>
          {
            res = RES_OK;
 80060c4:	2300      	movs	r3, #0
 80060c6:	75fb      	strb	r3, [r7, #23]
            break;
 80060c8:	e008      	b.n	80060dc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80060ca:	f7fb fce1 	bl	8001a90 <HAL_GetTick>
 80060ce:	4602      	mov	r2, r0
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	f247 522f 	movw	r2, #29999	; 0x752f
 80060d8:	4293      	cmp	r3, r2
 80060da:	d9ee      	bls.n	80060ba <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80060dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3718      	adds	r7, #24
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	200010c4 	.word	0x200010c4

080060ec <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b08c      	sub	sp, #48	; 0x30
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	4603      	mov	r3, r0
 80060f4:	603a      	str	r2, [r7, #0]
 80060f6:	71fb      	strb	r3, [r7, #7]
 80060f8:	460b      	mov	r3, r1
 80060fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006102:	4b25      	ldr	r3, [pc, #148]	; (8006198 <SD_ioctl+0xac>)
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	b2db      	uxtb	r3, r3
 8006108:	f003 0301 	and.w	r3, r3, #1
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <SD_ioctl+0x28>
 8006110:	2303      	movs	r3, #3
 8006112:	e03c      	b.n	800618e <SD_ioctl+0xa2>

  switch (cmd)
 8006114:	79bb      	ldrb	r3, [r7, #6]
 8006116:	2b03      	cmp	r3, #3
 8006118:	d834      	bhi.n	8006184 <SD_ioctl+0x98>
 800611a:	a201      	add	r2, pc, #4	; (adr r2, 8006120 <SD_ioctl+0x34>)
 800611c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006120:	08006131 	.word	0x08006131
 8006124:	08006139 	.word	0x08006139
 8006128:	08006151 	.word	0x08006151
 800612c:	0800616b 	.word	0x0800616b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006130:	2300      	movs	r3, #0
 8006132:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006136:	e028      	b.n	800618a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006138:	f107 030c 	add.w	r3, r7, #12
 800613c:	4618      	mov	r0, r3
 800613e:	f7ff fe83 	bl	8005e48 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006148:	2300      	movs	r3, #0
 800614a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800614e:	e01c      	b.n	800618a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006150:	f107 030c 	add.w	r3, r7, #12
 8006154:	4618      	mov	r0, r3
 8006156:	f7ff fe77 	bl	8005e48 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800615a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615c:	b29a      	uxth	r2, r3
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006162:	2300      	movs	r3, #0
 8006164:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006168:	e00f      	b.n	800618a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800616a:	f107 030c 	add.w	r3, r7, #12
 800616e:	4618      	mov	r0, r3
 8006170:	f7ff fe6a 	bl	8005e48 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006176:	0a5a      	lsrs	r2, r3, #9
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800617c:	2300      	movs	r3, #0
 800617e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006182:	e002      	b.n	800618a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006184:	2304      	movs	r3, #4
 8006186:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800618a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800618e:	4618      	mov	r0, r3
 8006190:	3730      	adds	r7, #48	; 0x30
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	2000003d 	.word	0x2000003d

0800619c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800619c:	b480      	push	{r7}
 800619e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80061a0:	4b03      	ldr	r3, [pc, #12]	; (80061b0 <BSP_SD_WriteCpltCallback+0x14>)
 80061a2:	2201      	movs	r2, #1
 80061a4:	601a      	str	r2, [r3, #0]
}
 80061a6:	bf00      	nop
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	200010c4 	.word	0x200010c4

080061b4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80061b4:	b480      	push	{r7}
 80061b6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80061b8:	4b03      	ldr	r3, [pc, #12]	; (80061c8 <BSP_SD_ReadCpltCallback+0x14>)
 80061ba:	2201      	movs	r2, #1
 80061bc:	601a      	str	r2, [r3, #0]
}
 80061be:	bf00      	nop
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr
 80061c8:	200010c8 	.word	0x200010c8

080061cc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	4603      	mov	r3, r0
 80061d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80061d6:	79fb      	ldrb	r3, [r7, #7]
 80061d8:	4a08      	ldr	r2, [pc, #32]	; (80061fc <disk_status+0x30>)
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4413      	add	r3, r2
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	79fa      	ldrb	r2, [r7, #7]
 80061e4:	4905      	ldr	r1, [pc, #20]	; (80061fc <disk_status+0x30>)
 80061e6:	440a      	add	r2, r1
 80061e8:	7a12      	ldrb	r2, [r2, #8]
 80061ea:	4610      	mov	r0, r2
 80061ec:	4798      	blx	r3
 80061ee:	4603      	mov	r3, r0
 80061f0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	200010f4 	.word	0x200010f4

08006200 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	4603      	mov	r3, r0
 8006208:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800620a:	2300      	movs	r3, #0
 800620c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800620e:	79fb      	ldrb	r3, [r7, #7]
 8006210:	4a0d      	ldr	r2, [pc, #52]	; (8006248 <disk_initialize+0x48>)
 8006212:	5cd3      	ldrb	r3, [r2, r3]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d111      	bne.n	800623c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006218:	79fb      	ldrb	r3, [r7, #7]
 800621a:	4a0b      	ldr	r2, [pc, #44]	; (8006248 <disk_initialize+0x48>)
 800621c:	2101      	movs	r1, #1
 800621e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006220:	79fb      	ldrb	r3, [r7, #7]
 8006222:	4a09      	ldr	r2, [pc, #36]	; (8006248 <disk_initialize+0x48>)
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	79fa      	ldrb	r2, [r7, #7]
 800622e:	4906      	ldr	r1, [pc, #24]	; (8006248 <disk_initialize+0x48>)
 8006230:	440a      	add	r2, r1
 8006232:	7a12      	ldrb	r2, [r2, #8]
 8006234:	4610      	mov	r0, r2
 8006236:	4798      	blx	r3
 8006238:	4603      	mov	r3, r0
 800623a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800623c:	7bfb      	ldrb	r3, [r7, #15]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	200010f4 	.word	0x200010f4

0800624c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800624c:	b590      	push	{r4, r7, lr}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	60b9      	str	r1, [r7, #8]
 8006254:	607a      	str	r2, [r7, #4]
 8006256:	603b      	str	r3, [r7, #0]
 8006258:	4603      	mov	r3, r0
 800625a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800625c:	7bfb      	ldrb	r3, [r7, #15]
 800625e:	4a0a      	ldr	r2, [pc, #40]	; (8006288 <disk_read+0x3c>)
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	689c      	ldr	r4, [r3, #8]
 8006268:	7bfb      	ldrb	r3, [r7, #15]
 800626a:	4a07      	ldr	r2, [pc, #28]	; (8006288 <disk_read+0x3c>)
 800626c:	4413      	add	r3, r2
 800626e:	7a18      	ldrb	r0, [r3, #8]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	68b9      	ldr	r1, [r7, #8]
 8006276:	47a0      	blx	r4
 8006278:	4603      	mov	r3, r0
 800627a:	75fb      	strb	r3, [r7, #23]
  return res;
 800627c:	7dfb      	ldrb	r3, [r7, #23]
}
 800627e:	4618      	mov	r0, r3
 8006280:	371c      	adds	r7, #28
 8006282:	46bd      	mov	sp, r7
 8006284:	bd90      	pop	{r4, r7, pc}
 8006286:	bf00      	nop
 8006288:	200010f4 	.word	0x200010f4

0800628c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800628c:	b590      	push	{r4, r7, lr}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	60b9      	str	r1, [r7, #8]
 8006294:	607a      	str	r2, [r7, #4]
 8006296:	603b      	str	r3, [r7, #0]
 8006298:	4603      	mov	r3, r0
 800629a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800629c:	7bfb      	ldrb	r3, [r7, #15]
 800629e:	4a0a      	ldr	r2, [pc, #40]	; (80062c8 <disk_write+0x3c>)
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	68dc      	ldr	r4, [r3, #12]
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
 80062aa:	4a07      	ldr	r2, [pc, #28]	; (80062c8 <disk_write+0x3c>)
 80062ac:	4413      	add	r3, r2
 80062ae:	7a18      	ldrb	r0, [r3, #8]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	68b9      	ldr	r1, [r7, #8]
 80062b6:	47a0      	blx	r4
 80062b8:	4603      	mov	r3, r0
 80062ba:	75fb      	strb	r3, [r7, #23]
  return res;
 80062bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	371c      	adds	r7, #28
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd90      	pop	{r4, r7, pc}
 80062c6:	bf00      	nop
 80062c8:	200010f4 	.word	0x200010f4

080062cc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	4603      	mov	r3, r0
 80062d4:	603a      	str	r2, [r7, #0]
 80062d6:	71fb      	strb	r3, [r7, #7]
 80062d8:	460b      	mov	r3, r1
 80062da:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80062dc:	79fb      	ldrb	r3, [r7, #7]
 80062de:	4a09      	ldr	r2, [pc, #36]	; (8006304 <disk_ioctl+0x38>)
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	79fa      	ldrb	r2, [r7, #7]
 80062ea:	4906      	ldr	r1, [pc, #24]	; (8006304 <disk_ioctl+0x38>)
 80062ec:	440a      	add	r2, r1
 80062ee:	7a10      	ldrb	r0, [r2, #8]
 80062f0:	79b9      	ldrb	r1, [r7, #6]
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	4798      	blx	r3
 80062f6:	4603      	mov	r3, r0
 80062f8:	73fb      	strb	r3, [r7, #15]
  return res;
 80062fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	200010f4 	.word	0x200010f4

08006308 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	3301      	adds	r3, #1
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006318:	89fb      	ldrh	r3, [r7, #14]
 800631a:	021b      	lsls	r3, r3, #8
 800631c:	b21a      	sxth	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	b21b      	sxth	r3, r3
 8006324:	4313      	orrs	r3, r2
 8006326:	b21b      	sxth	r3, r3
 8006328:	81fb      	strh	r3, [r7, #14]
	return rv;
 800632a:	89fb      	ldrh	r3, [r7, #14]
}
 800632c:	4618      	mov	r0, r3
 800632e:	3714      	adds	r7, #20
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	3303      	adds	r3, #3
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	021b      	lsls	r3, r3, #8
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	3202      	adds	r2, #2
 8006350:	7812      	ldrb	r2, [r2, #0]
 8006352:	4313      	orrs	r3, r2
 8006354:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	021b      	lsls	r3, r3, #8
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	3201      	adds	r2, #1
 800635e:	7812      	ldrb	r2, [r2, #0]
 8006360:	4313      	orrs	r3, r2
 8006362:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	021b      	lsls	r3, r3, #8
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	7812      	ldrb	r2, [r2, #0]
 800636c:	4313      	orrs	r3, r2
 800636e:	60fb      	str	r3, [r7, #12]
	return rv;
 8006370:	68fb      	ldr	r3, [r7, #12]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800637e:	b480      	push	{r7}
 8006380:	b083      	sub	sp, #12
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
 8006386:	460b      	mov	r3, r1
 8006388:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	1c5a      	adds	r2, r3, #1
 800638e:	607a      	str	r2, [r7, #4]
 8006390:	887a      	ldrh	r2, [r7, #2]
 8006392:	b2d2      	uxtb	r2, r2
 8006394:	701a      	strb	r2, [r3, #0]
 8006396:	887b      	ldrh	r3, [r7, #2]
 8006398:	0a1b      	lsrs	r3, r3, #8
 800639a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	1c5a      	adds	r2, r3, #1
 80063a0:	607a      	str	r2, [r7, #4]
 80063a2:	887a      	ldrh	r2, [r7, #2]
 80063a4:	b2d2      	uxtb	r2, r2
 80063a6:	701a      	strb	r2, [r3, #0]
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	1c5a      	adds	r2, r3, #1
 80063c2:	607a      	str	r2, [r7, #4]
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	b2d2      	uxtb	r2, r2
 80063c8:	701a      	strb	r2, [r3, #0]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	0a1b      	lsrs	r3, r3, #8
 80063ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	1c5a      	adds	r2, r3, #1
 80063d4:	607a      	str	r2, [r7, #4]
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	b2d2      	uxtb	r2, r2
 80063da:	701a      	strb	r2, [r3, #0]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	0a1b      	lsrs	r3, r3, #8
 80063e0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	1c5a      	adds	r2, r3, #1
 80063e6:	607a      	str	r2, [r7, #4]
 80063e8:	683a      	ldr	r2, [r7, #0]
 80063ea:	b2d2      	uxtb	r2, r2
 80063ec:	701a      	strb	r2, [r3, #0]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	0a1b      	lsrs	r3, r3, #8
 80063f2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	1c5a      	adds	r2, r3, #1
 80063f8:	607a      	str	r2, [r7, #4]
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	b2d2      	uxtb	r2, r2
 80063fe:	701a      	strb	r2, [r3, #0]
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800640c:	b480      	push	{r7}
 800640e:	b087      	sub	sp, #28
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00d      	beq.n	8006442 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	1c53      	adds	r3, r2, #1
 800642a:	613b      	str	r3, [r7, #16]
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	1c59      	adds	r1, r3, #1
 8006430:	6179      	str	r1, [r7, #20]
 8006432:	7812      	ldrb	r2, [r2, #0]
 8006434:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	3b01      	subs	r3, #1
 800643a:	607b      	str	r3, [r7, #4]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1f1      	bne.n	8006426 <mem_cpy+0x1a>
	}
}
 8006442:	bf00      	nop
 8006444:	371c      	adds	r7, #28
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800644e:	b480      	push	{r7}
 8006450:	b087      	sub	sp, #28
 8006452:	af00      	add	r7, sp, #0
 8006454:	60f8      	str	r0, [r7, #12]
 8006456:	60b9      	str	r1, [r7, #8]
 8006458:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	1c5a      	adds	r2, r3, #1
 8006462:	617a      	str	r2, [r7, #20]
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	b2d2      	uxtb	r2, r2
 8006468:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	3b01      	subs	r3, #1
 800646e:	607b      	str	r3, [r7, #4]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1f3      	bne.n	800645e <mem_set+0x10>
}
 8006476:	bf00      	nop
 8006478:	bf00      	nop
 800647a:	371c      	adds	r7, #28
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006484:	b480      	push	{r7}
 8006486:	b089      	sub	sp, #36	; 0x24
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	61fb      	str	r3, [r7, #28]
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006498:	2300      	movs	r3, #0
 800649a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	1c5a      	adds	r2, r3, #1
 80064a0:	61fa      	str	r2, [r7, #28]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	4619      	mov	r1, r3
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	1c5a      	adds	r2, r3, #1
 80064aa:	61ba      	str	r2, [r7, #24]
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	1acb      	subs	r3, r1, r3
 80064b0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	3b01      	subs	r3, #1
 80064b6:	607b      	str	r3, [r7, #4]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d002      	beq.n	80064c4 <mem_cmp+0x40>
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d0eb      	beq.n	800649c <mem_cmp+0x18>

	return r;
 80064c4:	697b      	ldr	r3, [r7, #20]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3724      	adds	r7, #36	; 0x24
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr

080064d2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80064d2:	b480      	push	{r7}
 80064d4:	b083      	sub	sp, #12
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
 80064da:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80064dc:	e002      	b.n	80064e4 <chk_chr+0x12>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	3301      	adds	r3, #1
 80064e2:	607b      	str	r3, [r7, #4]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d005      	beq.n	80064f8 <chk_chr+0x26>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	461a      	mov	r2, r3
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d1f2      	bne.n	80064de <chk_chr+0xc>
	return *str;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	781b      	ldrb	r3, [r3, #0]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006512:	2300      	movs	r3, #0
 8006514:	60bb      	str	r3, [r7, #8]
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	60fb      	str	r3, [r7, #12]
 800651a:	e029      	b.n	8006570 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800651c:	4a27      	ldr	r2, [pc, #156]	; (80065bc <chk_lock+0xb4>)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	011b      	lsls	r3, r3, #4
 8006522:	4413      	add	r3, r2
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d01d      	beq.n	8006566 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800652a:	4a24      	ldr	r2, [pc, #144]	; (80065bc <chk_lock+0xb4>)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	011b      	lsls	r3, r3, #4
 8006530:	4413      	add	r3, r2
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	429a      	cmp	r2, r3
 800653a:	d116      	bne.n	800656a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800653c:	4a1f      	ldr	r2, [pc, #124]	; (80065bc <chk_lock+0xb4>)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	011b      	lsls	r3, r3, #4
 8006542:	4413      	add	r3, r2
 8006544:	3304      	adds	r3, #4
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800654c:	429a      	cmp	r2, r3
 800654e:	d10c      	bne.n	800656a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006550:	4a1a      	ldr	r2, [pc, #104]	; (80065bc <chk_lock+0xb4>)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	011b      	lsls	r3, r3, #4
 8006556:	4413      	add	r3, r2
 8006558:	3308      	adds	r3, #8
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006560:	429a      	cmp	r2, r3
 8006562:	d102      	bne.n	800656a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006564:	e007      	b.n	8006576 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006566:	2301      	movs	r3, #1
 8006568:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	3301      	adds	r3, #1
 800656e:	60fb      	str	r3, [r7, #12]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d9d2      	bls.n	800651c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2b02      	cmp	r3, #2
 800657a:	d109      	bne.n	8006590 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d102      	bne.n	8006588 <chk_lock+0x80>
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2b02      	cmp	r3, #2
 8006586:	d101      	bne.n	800658c <chk_lock+0x84>
 8006588:	2300      	movs	r3, #0
 800658a:	e010      	b.n	80065ae <chk_lock+0xa6>
 800658c:	2312      	movs	r3, #18
 800658e:	e00e      	b.n	80065ae <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d108      	bne.n	80065a8 <chk_lock+0xa0>
 8006596:	4a09      	ldr	r2, [pc, #36]	; (80065bc <chk_lock+0xb4>)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	011b      	lsls	r3, r3, #4
 800659c:	4413      	add	r3, r2
 800659e:	330c      	adds	r3, #12
 80065a0:	881b      	ldrh	r3, [r3, #0]
 80065a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065a6:	d101      	bne.n	80065ac <chk_lock+0xa4>
 80065a8:	2310      	movs	r3, #16
 80065aa:	e000      	b.n	80065ae <chk_lock+0xa6>
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	200010d4 	.word	0x200010d4

080065c0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80065c6:	2300      	movs	r3, #0
 80065c8:	607b      	str	r3, [r7, #4]
 80065ca:	e002      	b.n	80065d2 <enq_lock+0x12>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	3301      	adds	r3, #1
 80065d0:	607b      	str	r3, [r7, #4]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d806      	bhi.n	80065e6 <enq_lock+0x26>
 80065d8:	4a09      	ldr	r2, [pc, #36]	; (8006600 <enq_lock+0x40>)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	011b      	lsls	r3, r3, #4
 80065de:	4413      	add	r3, r2
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1f2      	bne.n	80065cc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	bf14      	ite	ne
 80065ec:	2301      	movne	r3, #1
 80065ee:	2300      	moveq	r3, #0
 80065f0:	b2db      	uxtb	r3, r3
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	200010d4 	.word	0x200010d4

08006604 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800660e:	2300      	movs	r3, #0
 8006610:	60fb      	str	r3, [r7, #12]
 8006612:	e01f      	b.n	8006654 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006614:	4a41      	ldr	r2, [pc, #260]	; (800671c <inc_lock+0x118>)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	011b      	lsls	r3, r3, #4
 800661a:	4413      	add	r3, r2
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	429a      	cmp	r2, r3
 8006624:	d113      	bne.n	800664e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006626:	4a3d      	ldr	r2, [pc, #244]	; (800671c <inc_lock+0x118>)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	011b      	lsls	r3, r3, #4
 800662c:	4413      	add	r3, r2
 800662e:	3304      	adds	r3, #4
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006636:	429a      	cmp	r2, r3
 8006638:	d109      	bne.n	800664e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800663a:	4a38      	ldr	r2, [pc, #224]	; (800671c <inc_lock+0x118>)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	011b      	lsls	r3, r3, #4
 8006640:	4413      	add	r3, r2
 8006642:	3308      	adds	r3, #8
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800664a:	429a      	cmp	r2, r3
 800664c:	d006      	beq.n	800665c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	3301      	adds	r3, #1
 8006652:	60fb      	str	r3, [r7, #12]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d9dc      	bls.n	8006614 <inc_lock+0x10>
 800665a:	e000      	b.n	800665e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800665c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2b02      	cmp	r3, #2
 8006662:	d132      	bne.n	80066ca <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006664:	2300      	movs	r3, #0
 8006666:	60fb      	str	r3, [r7, #12]
 8006668:	e002      	b.n	8006670 <inc_lock+0x6c>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	3301      	adds	r3, #1
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d806      	bhi.n	8006684 <inc_lock+0x80>
 8006676:	4a29      	ldr	r2, [pc, #164]	; (800671c <inc_lock+0x118>)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	011b      	lsls	r3, r3, #4
 800667c:	4413      	add	r3, r2
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1f2      	bne.n	800666a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2b02      	cmp	r3, #2
 8006688:	d101      	bne.n	800668e <inc_lock+0x8a>
 800668a:	2300      	movs	r3, #0
 800668c:	e040      	b.n	8006710 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	4922      	ldr	r1, [pc, #136]	; (800671c <inc_lock+0x118>)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	011b      	lsls	r3, r3, #4
 8006698:	440b      	add	r3, r1
 800669a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	689a      	ldr	r2, [r3, #8]
 80066a0:	491e      	ldr	r1, [pc, #120]	; (800671c <inc_lock+0x118>)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	011b      	lsls	r3, r3, #4
 80066a6:	440b      	add	r3, r1
 80066a8:	3304      	adds	r3, #4
 80066aa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	695a      	ldr	r2, [r3, #20]
 80066b0:	491a      	ldr	r1, [pc, #104]	; (800671c <inc_lock+0x118>)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	011b      	lsls	r3, r3, #4
 80066b6:	440b      	add	r3, r1
 80066b8:	3308      	adds	r3, #8
 80066ba:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80066bc:	4a17      	ldr	r2, [pc, #92]	; (800671c <inc_lock+0x118>)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	011b      	lsls	r3, r3, #4
 80066c2:	4413      	add	r3, r2
 80066c4:	330c      	adds	r3, #12
 80066c6:	2200      	movs	r2, #0
 80066c8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d009      	beq.n	80066e4 <inc_lock+0xe0>
 80066d0:	4a12      	ldr	r2, [pc, #72]	; (800671c <inc_lock+0x118>)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	011b      	lsls	r3, r3, #4
 80066d6:	4413      	add	r3, r2
 80066d8:	330c      	adds	r3, #12
 80066da:	881b      	ldrh	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d001      	beq.n	80066e4 <inc_lock+0xe0>
 80066e0:	2300      	movs	r3, #0
 80066e2:	e015      	b.n	8006710 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d108      	bne.n	80066fc <inc_lock+0xf8>
 80066ea:	4a0c      	ldr	r2, [pc, #48]	; (800671c <inc_lock+0x118>)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	011b      	lsls	r3, r3, #4
 80066f0:	4413      	add	r3, r2
 80066f2:	330c      	adds	r3, #12
 80066f4:	881b      	ldrh	r3, [r3, #0]
 80066f6:	3301      	adds	r3, #1
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	e001      	b.n	8006700 <inc_lock+0xfc>
 80066fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006700:	4906      	ldr	r1, [pc, #24]	; (800671c <inc_lock+0x118>)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	011b      	lsls	r3, r3, #4
 8006706:	440b      	add	r3, r1
 8006708:	330c      	adds	r3, #12
 800670a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	3301      	adds	r3, #1
}
 8006710:	4618      	mov	r0, r3
 8006712:	3714      	adds	r7, #20
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	200010d4 	.word	0x200010d4

08006720 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	3b01      	subs	r3, #1
 800672c:	607b      	str	r3, [r7, #4]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d825      	bhi.n	8006780 <dec_lock+0x60>
		n = Files[i].ctr;
 8006734:	4a17      	ldr	r2, [pc, #92]	; (8006794 <dec_lock+0x74>)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	011b      	lsls	r3, r3, #4
 800673a:	4413      	add	r3, r2
 800673c:	330c      	adds	r3, #12
 800673e:	881b      	ldrh	r3, [r3, #0]
 8006740:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006742:	89fb      	ldrh	r3, [r7, #14]
 8006744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006748:	d101      	bne.n	800674e <dec_lock+0x2e>
 800674a:	2300      	movs	r3, #0
 800674c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800674e:	89fb      	ldrh	r3, [r7, #14]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d002      	beq.n	800675a <dec_lock+0x3a>
 8006754:	89fb      	ldrh	r3, [r7, #14]
 8006756:	3b01      	subs	r3, #1
 8006758:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800675a:	4a0e      	ldr	r2, [pc, #56]	; (8006794 <dec_lock+0x74>)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	011b      	lsls	r3, r3, #4
 8006760:	4413      	add	r3, r2
 8006762:	330c      	adds	r3, #12
 8006764:	89fa      	ldrh	r2, [r7, #14]
 8006766:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006768:	89fb      	ldrh	r3, [r7, #14]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d105      	bne.n	800677a <dec_lock+0x5a>
 800676e:	4a09      	ldr	r2, [pc, #36]	; (8006794 <dec_lock+0x74>)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	011b      	lsls	r3, r3, #4
 8006774:	4413      	add	r3, r2
 8006776:	2200      	movs	r2, #0
 8006778:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	737b      	strb	r3, [r7, #13]
 800677e:	e001      	b.n	8006784 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006780:	2302      	movs	r3, #2
 8006782:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006784:	7b7b      	ldrb	r3, [r7, #13]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3714      	adds	r7, #20
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	200010d4 	.word	0x200010d4

08006798 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80067a0:	2300      	movs	r3, #0
 80067a2:	60fb      	str	r3, [r7, #12]
 80067a4:	e010      	b.n	80067c8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80067a6:	4a0d      	ldr	r2, [pc, #52]	; (80067dc <clear_lock+0x44>)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	011b      	lsls	r3, r3, #4
 80067ac:	4413      	add	r3, r2
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d105      	bne.n	80067c2 <clear_lock+0x2a>
 80067b6:	4a09      	ldr	r2, [pc, #36]	; (80067dc <clear_lock+0x44>)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	011b      	lsls	r3, r3, #4
 80067bc:	4413      	add	r3, r2
 80067be:	2200      	movs	r2, #0
 80067c0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	3301      	adds	r3, #1
 80067c6:	60fb      	str	r3, [r7, #12]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d9eb      	bls.n	80067a6 <clear_lock+0xe>
	}
}
 80067ce:	bf00      	nop
 80067d0:	bf00      	nop
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr
 80067dc:	200010d4 	.word	0x200010d4

080067e0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80067e8:	2300      	movs	r3, #0
 80067ea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	78db      	ldrb	r3, [r3, #3]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d034      	beq.n	800685e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	7858      	ldrb	r0, [r3, #1]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006804:	2301      	movs	r3, #1
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	f7ff fd40 	bl	800628c <disk_write>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d002      	beq.n	8006818 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006812:	2301      	movs	r3, #1
 8006814:	73fb      	strb	r3, [r7, #15]
 8006816:	e022      	b.n	800685e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	1ad2      	subs	r2, r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	69db      	ldr	r3, [r3, #28]
 800682a:	429a      	cmp	r2, r3
 800682c:	d217      	bcs.n	800685e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	789b      	ldrb	r3, [r3, #2]
 8006832:	613b      	str	r3, [r7, #16]
 8006834:	e010      	b.n	8006858 <sync_window+0x78>
					wsect += fs->fsize;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	4413      	add	r3, r2
 800683e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	7858      	ldrb	r0, [r3, #1]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800684a:	2301      	movs	r3, #1
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	f7ff fd1d 	bl	800628c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	3b01      	subs	r3, #1
 8006856:	613b      	str	r3, [r7, #16]
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d8eb      	bhi.n	8006836 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800685e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006860:	4618      	mov	r0, r3
 8006862:	3718      	adds	r7, #24
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006872:	2300      	movs	r3, #0
 8006874:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	429a      	cmp	r2, r3
 800687e:	d01b      	beq.n	80068b8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f7ff ffad 	bl	80067e0 <sync_window>
 8006886:	4603      	mov	r3, r0
 8006888:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800688a:	7bfb      	ldrb	r3, [r7, #15]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d113      	bne.n	80068b8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	7858      	ldrb	r0, [r3, #1]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800689a:	2301      	movs	r3, #1
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	f7ff fcd5 	bl	800624c <disk_read>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d004      	beq.n	80068b2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80068a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068ac:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	683a      	ldr	r2, [r7, #0]
 80068b6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80068b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
	...

080068c4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f7ff ff87 	bl	80067e0 <sync_window>
 80068d2:	4603      	mov	r3, r0
 80068d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80068d6:	7bfb      	ldrb	r3, [r7, #15]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d159      	bne.n	8006990 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	2b03      	cmp	r3, #3
 80068e2:	d149      	bne.n	8006978 <sync_fs+0xb4>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	791b      	ldrb	r3, [r3, #4]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d145      	bne.n	8006978 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	899b      	ldrh	r3, [r3, #12]
 80068f6:	461a      	mov	r2, r3
 80068f8:	2100      	movs	r1, #0
 80068fa:	f7ff fda8 	bl	800644e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	3334      	adds	r3, #52	; 0x34
 8006902:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006906:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800690a:	4618      	mov	r0, r3
 800690c:	f7ff fd37 	bl	800637e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	3334      	adds	r3, #52	; 0x34
 8006914:	4921      	ldr	r1, [pc, #132]	; (800699c <sync_fs+0xd8>)
 8006916:	4618      	mov	r0, r3
 8006918:	f7ff fd4c 	bl	80063b4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	3334      	adds	r3, #52	; 0x34
 8006920:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006924:	491e      	ldr	r1, [pc, #120]	; (80069a0 <sync_fs+0xdc>)
 8006926:	4618      	mov	r0, r3
 8006928:	f7ff fd44 	bl	80063b4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	3334      	adds	r3, #52	; 0x34
 8006930:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	4619      	mov	r1, r3
 800693a:	4610      	mov	r0, r2
 800693c:	f7ff fd3a 	bl	80063b4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	3334      	adds	r3, #52	; 0x34
 8006944:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	4619      	mov	r1, r3
 800694e:	4610      	mov	r0, r2
 8006950:	f7ff fd30 	bl	80063b4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a1b      	ldr	r3, [r3, #32]
 8006958:	1c5a      	adds	r2, r3, #1
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	7858      	ldrb	r0, [r3, #1]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800696c:	2301      	movs	r3, #1
 800696e:	f7ff fc8d 	bl	800628c <disk_write>
			fs->fsi_flag = 0;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	785b      	ldrb	r3, [r3, #1]
 800697c:	2200      	movs	r2, #0
 800697e:	2100      	movs	r1, #0
 8006980:	4618      	mov	r0, r3
 8006982:	f7ff fca3 	bl	80062cc <disk_ioctl>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d001      	beq.n	8006990 <sync_fs+0xcc>
 800698c:	2301      	movs	r3, #1
 800698e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006990:	7bfb      	ldrb	r3, [r7, #15]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	41615252 	.word	0x41615252
 80069a0:	61417272 	.word	0x61417272

080069a4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	3b02      	subs	r3, #2
 80069b2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	3b02      	subs	r3, #2
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d301      	bcc.n	80069c4 <clust2sect+0x20>
 80069c0:	2300      	movs	r3, #0
 80069c2:	e008      	b.n	80069d6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	895b      	ldrh	r3, [r3, #10]
 80069c8:	461a      	mov	r2, r3
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	fb03 f202 	mul.w	r2, r3, r2
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d4:	4413      	add	r3, r2
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b086      	sub	sp, #24
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
 80069ea:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d904      	bls.n	8006a02 <get_fat+0x20>
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	683a      	ldr	r2, [r7, #0]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d302      	bcc.n	8006a08 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006a02:	2301      	movs	r3, #1
 8006a04:	617b      	str	r3, [r7, #20]
 8006a06:	e0bb      	b.n	8006b80 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006a08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a0c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	2b03      	cmp	r3, #3
 8006a14:	f000 8083 	beq.w	8006b1e <get_fat+0x13c>
 8006a18:	2b03      	cmp	r3, #3
 8006a1a:	f300 80a7 	bgt.w	8006b6c <get_fat+0x18a>
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d002      	beq.n	8006a28 <get_fat+0x46>
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d056      	beq.n	8006ad4 <get_fat+0xf2>
 8006a26:	e0a1      	b.n	8006b6c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	60fb      	str	r3, [r7, #12]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	085b      	lsrs	r3, r3, #1
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	4413      	add	r3, r2
 8006a34:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	899b      	ldrh	r3, [r3, #12]
 8006a3e:	4619      	mov	r1, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a46:	4413      	add	r3, r2
 8006a48:	4619      	mov	r1, r3
 8006a4a:	6938      	ldr	r0, [r7, #16]
 8006a4c:	f7ff ff0c 	bl	8006868 <move_window>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f040 808d 	bne.w	8006b72 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	1c5a      	adds	r2, r3, #1
 8006a5c:	60fa      	str	r2, [r7, #12]
 8006a5e:	693a      	ldr	r2, [r7, #16]
 8006a60:	8992      	ldrh	r2, [r2, #12]
 8006a62:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a66:	fb02 f201 	mul.w	r2, r2, r1
 8006a6a:	1a9b      	subs	r3, r3, r2
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a74:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	899b      	ldrh	r3, [r3, #12]
 8006a7e:	4619      	mov	r1, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a86:	4413      	add	r3, r2
 8006a88:	4619      	mov	r1, r3
 8006a8a:	6938      	ldr	r0, [r7, #16]
 8006a8c:	f7ff feec 	bl	8006868 <move_window>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d16f      	bne.n	8006b76 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	899b      	ldrh	r3, [r3, #12]
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006aa2:	fb02 f201 	mul.w	r2, r2, r1
 8006aa6:	1a9b      	subs	r3, r3, r2
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	4413      	add	r3, r2
 8006aac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ab0:	021b      	lsls	r3, r3, #8
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	f003 0301 	and.w	r3, r3, #1
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d002      	beq.n	8006aca <get_fat+0xe8>
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	091b      	lsrs	r3, r3, #4
 8006ac8:	e002      	b.n	8006ad0 <get_fat+0xee>
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ad0:	617b      	str	r3, [r7, #20]
			break;
 8006ad2:	e055      	b.n	8006b80 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	899b      	ldrh	r3, [r3, #12]
 8006adc:	085b      	lsrs	r3, r3, #1
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ae8:	4413      	add	r3, r2
 8006aea:	4619      	mov	r1, r3
 8006aec:	6938      	ldr	r0, [r7, #16]
 8006aee:	f7ff febb 	bl	8006868 <move_window>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d140      	bne.n	8006b7a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	005b      	lsls	r3, r3, #1
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	8992      	ldrh	r2, [r2, #12]
 8006b06:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b0a:	fb02 f200 	mul.w	r2, r2, r0
 8006b0e:	1a9b      	subs	r3, r3, r2
 8006b10:	440b      	add	r3, r1
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7ff fbf8 	bl	8006308 <ld_word>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	617b      	str	r3, [r7, #20]
			break;
 8006b1c:	e030      	b.n	8006b80 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	899b      	ldrh	r3, [r3, #12]
 8006b26:	089b      	lsrs	r3, r3, #2
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b32:	4413      	add	r3, r2
 8006b34:	4619      	mov	r1, r3
 8006b36:	6938      	ldr	r0, [r7, #16]
 8006b38:	f7ff fe96 	bl	8006868 <move_window>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d11d      	bne.n	8006b7e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	8992      	ldrh	r2, [r2, #12]
 8006b50:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b54:	fb02 f200 	mul.w	r2, r2, r0
 8006b58:	1a9b      	subs	r3, r3, r2
 8006b5a:	440b      	add	r3, r1
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7ff fbeb 	bl	8006338 <ld_dword>
 8006b62:	4603      	mov	r3, r0
 8006b64:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006b68:	617b      	str	r3, [r7, #20]
			break;
 8006b6a:	e009      	b.n	8006b80 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	617b      	str	r3, [r7, #20]
 8006b70:	e006      	b.n	8006b80 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b72:	bf00      	nop
 8006b74:	e004      	b.n	8006b80 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b76:	bf00      	nop
 8006b78:	e002      	b.n	8006b80 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006b7a:	bf00      	nop
 8006b7c:	e000      	b.n	8006b80 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006b7e:	bf00      	nop
		}
	}

	return val;
 8006b80:	697b      	ldr	r3, [r7, #20]
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3718      	adds	r7, #24
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006b8a:	b590      	push	{r4, r7, lr}
 8006b8c:	b089      	sub	sp, #36	; 0x24
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	60f8      	str	r0, [r7, #12]
 8006b92:	60b9      	str	r1, [r7, #8]
 8006b94:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006b96:	2302      	movs	r3, #2
 8006b98:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	f240 8102 	bls.w	8006da6 <put_fat+0x21c>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	f080 80fc 	bcs.w	8006da6 <put_fat+0x21c>
		switch (fs->fs_type) {
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	2b03      	cmp	r3, #3
 8006bb4:	f000 80b6 	beq.w	8006d24 <put_fat+0x19a>
 8006bb8:	2b03      	cmp	r3, #3
 8006bba:	f300 80fd 	bgt.w	8006db8 <put_fat+0x22e>
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d003      	beq.n	8006bca <put_fat+0x40>
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	f000 8083 	beq.w	8006cce <put_fat+0x144>
 8006bc8:	e0f6      	b.n	8006db8 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	61bb      	str	r3, [r7, #24]
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	085b      	lsrs	r3, r3, #1
 8006bd2:	69ba      	ldr	r2, [r7, #24]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	899b      	ldrh	r3, [r3, #12]
 8006be0:	4619      	mov	r1, r3
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	fbb3 f3f1 	udiv	r3, r3, r1
 8006be8:	4413      	add	r3, r2
 8006bea:	4619      	mov	r1, r3
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f7ff fe3b 	bl	8006868 <move_window>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006bf6:	7ffb      	ldrb	r3, [r7, #31]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f040 80d6 	bne.w	8006daa <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	1c5a      	adds	r2, r3, #1
 8006c08:	61ba      	str	r2, [r7, #24]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	8992      	ldrh	r2, [r2, #12]
 8006c0e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c12:	fb02 f200 	mul.w	r2, r2, r0
 8006c16:	1a9b      	subs	r3, r3, r2
 8006c18:	440b      	add	r3, r1
 8006c1a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00d      	beq.n	8006c42 <put_fat+0xb8>
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	b25b      	sxtb	r3, r3
 8006c2c:	f003 030f 	and.w	r3, r3, #15
 8006c30:	b25a      	sxtb	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	011b      	lsls	r3, r3, #4
 8006c38:	b25b      	sxtb	r3, r3
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	b25b      	sxtb	r3, r3
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	e001      	b.n	8006c46 <put_fat+0xbc>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	899b      	ldrh	r3, [r3, #12]
 8006c58:	4619      	mov	r1, r3
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c60:	4413      	add	r3, r2
 8006c62:	4619      	mov	r1, r3
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f7ff fdff 	bl	8006868 <move_window>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006c6e:	7ffb      	ldrb	r3, [r7, #31]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f040 809c 	bne.w	8006dae <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	899b      	ldrh	r3, [r3, #12]
 8006c80:	461a      	mov	r2, r3
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c88:	fb02 f200 	mul.w	r2, r2, r0
 8006c8c:	1a9b      	subs	r3, r3, r2
 8006c8e:	440b      	add	r3, r1
 8006c90:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d003      	beq.n	8006ca4 <put_fat+0x11a>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	091b      	lsrs	r3, r3, #4
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	e00e      	b.n	8006cc2 <put_fat+0x138>
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	b25b      	sxtb	r3, r3
 8006caa:	f023 030f 	bic.w	r3, r3, #15
 8006cae:	b25a      	sxtb	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	0a1b      	lsrs	r3, r3, #8
 8006cb4:	b25b      	sxtb	r3, r3
 8006cb6:	f003 030f 	and.w	r3, r3, #15
 8006cba:	b25b      	sxtb	r3, r3
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	b25b      	sxtb	r3, r3
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	697a      	ldr	r2, [r7, #20]
 8006cc4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	70da      	strb	r2, [r3, #3]
			break;
 8006ccc:	e074      	b.n	8006db8 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	899b      	ldrh	r3, [r3, #12]
 8006cd6:	085b      	lsrs	r3, r3, #1
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	4619      	mov	r1, r3
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ce2:	4413      	add	r3, r2
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f7ff fdbe 	bl	8006868 <move_window>
 8006cec:	4603      	mov	r3, r0
 8006cee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006cf0:	7ffb      	ldrb	r3, [r7, #31]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d15d      	bne.n	8006db2 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	005b      	lsls	r3, r3, #1
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	8992      	ldrh	r2, [r2, #12]
 8006d04:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d08:	fb02 f200 	mul.w	r2, r2, r0
 8006d0c:	1a9b      	subs	r3, r3, r2
 8006d0e:	440b      	add	r3, r1
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	b292      	uxth	r2, r2
 8006d14:	4611      	mov	r1, r2
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7ff fb31 	bl	800637e <st_word>
			fs->wflag = 1;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	70da      	strb	r2, [r3, #3]
			break;
 8006d22:	e049      	b.n	8006db8 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	899b      	ldrh	r3, [r3, #12]
 8006d2c:	089b      	lsrs	r3, r3, #2
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	4619      	mov	r1, r3
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d38:	4413      	add	r3, r2
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f7ff fd93 	bl	8006868 <move_window>
 8006d42:	4603      	mov	r3, r0
 8006d44:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d46:	7ffb      	ldrb	r3, [r7, #31]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d134      	bne.n	8006db6 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	8992      	ldrh	r2, [r2, #12]
 8006d60:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d64:	fb02 f200 	mul.w	r2, r2, r0
 8006d68:	1a9b      	subs	r3, r3, r2
 8006d6a:	440b      	add	r3, r1
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7ff fae3 	bl	8006338 <ld_dword>
 8006d72:	4603      	mov	r3, r0
 8006d74:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006d78:	4323      	orrs	r3, r4
 8006d7a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	8992      	ldrh	r2, [r2, #12]
 8006d8a:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d8e:	fb02 f200 	mul.w	r2, r2, r0
 8006d92:	1a9b      	subs	r3, r3, r2
 8006d94:	440b      	add	r3, r1
 8006d96:	6879      	ldr	r1, [r7, #4]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7ff fb0b 	bl	80063b4 <st_dword>
			fs->wflag = 1;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2201      	movs	r2, #1
 8006da2:	70da      	strb	r2, [r3, #3]
			break;
 8006da4:	e008      	b.n	8006db8 <put_fat+0x22e>
		}
	}
 8006da6:	bf00      	nop
 8006da8:	e006      	b.n	8006db8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006daa:	bf00      	nop
 8006dac:	e004      	b.n	8006db8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006dae:	bf00      	nop
 8006db0:	e002      	b.n	8006db8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006db2:	bf00      	nop
 8006db4:	e000      	b.n	8006db8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006db6:	bf00      	nop
	return res;
 8006db8:	7ffb      	ldrb	r3, [r7, #31]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3724      	adds	r7, #36	; 0x24
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd90      	pop	{r4, r7, pc}

08006dc2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b088      	sub	sp, #32
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	60f8      	str	r0, [r7, #12]
 8006dca:	60b9      	str	r1, [r7, #8]
 8006dcc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d904      	bls.n	8006de8 <remove_chain+0x26>
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d301      	bcc.n	8006dec <remove_chain+0x2a>
 8006de8:	2302      	movs	r3, #2
 8006dea:	e04b      	b.n	8006e84 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00c      	beq.n	8006e0c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006df2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006df6:	6879      	ldr	r1, [r7, #4]
 8006df8:	69b8      	ldr	r0, [r7, #24]
 8006dfa:	f7ff fec6 	bl	8006b8a <put_fat>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006e02:	7ffb      	ldrb	r3, [r7, #31]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d001      	beq.n	8006e0c <remove_chain+0x4a>
 8006e08:	7ffb      	ldrb	r3, [r7, #31]
 8006e0a:	e03b      	b.n	8006e84 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006e0c:	68b9      	ldr	r1, [r7, #8]
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f7ff fde7 	bl	80069e2 <get_fat>
 8006e14:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d031      	beq.n	8006e80 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d101      	bne.n	8006e26 <remove_chain+0x64>
 8006e22:	2302      	movs	r3, #2
 8006e24:	e02e      	b.n	8006e84 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e2c:	d101      	bne.n	8006e32 <remove_chain+0x70>
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e028      	b.n	8006e84 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006e32:	2200      	movs	r2, #0
 8006e34:	68b9      	ldr	r1, [r7, #8]
 8006e36:	69b8      	ldr	r0, [r7, #24]
 8006e38:	f7ff fea7 	bl	8006b8a <put_fat>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006e40:	7ffb      	ldrb	r3, [r7, #31]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d001      	beq.n	8006e4a <remove_chain+0x88>
 8006e46:	7ffb      	ldrb	r3, [r7, #31]
 8006e48:	e01c      	b.n	8006e84 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	695a      	ldr	r2, [r3, #20]
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	3b02      	subs	r3, #2
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d20b      	bcs.n	8006e70 <remove_chain+0xae>
			fs->free_clst++;
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	695b      	ldr	r3, [r3, #20]
 8006e5c:	1c5a      	adds	r2, r3, #1
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	791b      	ldrb	r3, [r3, #4]
 8006e66:	f043 0301 	orr.w	r3, r3, #1
 8006e6a:	b2da      	uxtb	r2, r3
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d3c6      	bcc.n	8006e0c <remove_chain+0x4a>
 8006e7e:	e000      	b.n	8006e82 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006e80:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3720      	adds	r7, #32
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b088      	sub	sp, #32
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d10d      	bne.n	8006ebe <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d004      	beq.n	8006eb8 <create_chain+0x2c>
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	69ba      	ldr	r2, [r7, #24]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d31b      	bcc.n	8006ef0 <create_chain+0x64>
 8006eb8:	2301      	movs	r3, #1
 8006eba:	61bb      	str	r3, [r7, #24]
 8006ebc:	e018      	b.n	8006ef0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006ebe:	6839      	ldr	r1, [r7, #0]
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f7ff fd8e 	bl	80069e2 <get_fat>
 8006ec6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d801      	bhi.n	8006ed2 <create_chain+0x46>
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e070      	b.n	8006fb4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ed8:	d101      	bne.n	8006ede <create_chain+0x52>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	e06a      	b.n	8006fb4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d201      	bcs.n	8006eec <create_chain+0x60>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	e063      	b.n	8006fb4 <create_chain+0x128>
		scl = clst;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	69fa      	ldr	r2, [r7, #28]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d307      	bcc.n	8006f14 <create_chain+0x88>
				ncl = 2;
 8006f04:	2302      	movs	r3, #2
 8006f06:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006f08:	69fa      	ldr	r2, [r7, #28]
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d901      	bls.n	8006f14 <create_chain+0x88>
 8006f10:	2300      	movs	r3, #0
 8006f12:	e04f      	b.n	8006fb4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006f14:	69f9      	ldr	r1, [r7, #28]
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7ff fd63 	bl	80069e2 <get_fat>
 8006f1c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00e      	beq.n	8006f42 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d003      	beq.n	8006f32 <create_chain+0xa6>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f30:	d101      	bne.n	8006f36 <create_chain+0xaa>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	e03e      	b.n	8006fb4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006f36:	69fa      	ldr	r2, [r7, #28]
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d1da      	bne.n	8006ef4 <create_chain+0x68>
 8006f3e:	2300      	movs	r3, #0
 8006f40:	e038      	b.n	8006fb4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006f42:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006f44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f48:	69f9      	ldr	r1, [r7, #28]
 8006f4a:	6938      	ldr	r0, [r7, #16]
 8006f4c:	f7ff fe1d 	bl	8006b8a <put_fat>
 8006f50:	4603      	mov	r3, r0
 8006f52:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006f54:	7dfb      	ldrb	r3, [r7, #23]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d109      	bne.n	8006f6e <create_chain+0xe2>
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d006      	beq.n	8006f6e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006f60:	69fa      	ldr	r2, [r7, #28]
 8006f62:	6839      	ldr	r1, [r7, #0]
 8006f64:	6938      	ldr	r0, [r7, #16]
 8006f66:	f7ff fe10 	bl	8006b8a <put_fat>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006f6e:	7dfb      	ldrb	r3, [r7, #23]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d116      	bne.n	8006fa2 <create_chain+0x116>
		fs->last_clst = ncl;
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	69fa      	ldr	r2, [r7, #28]
 8006f78:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	695a      	ldr	r2, [r3, #20]
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	3b02      	subs	r3, #2
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d804      	bhi.n	8006f92 <create_chain+0x106>
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	695b      	ldr	r3, [r3, #20]
 8006f8c:	1e5a      	subs	r2, r3, #1
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	791b      	ldrb	r3, [r3, #4]
 8006f96:	f043 0301 	orr.w	r3, r3, #1
 8006f9a:	b2da      	uxtb	r2, r3
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	711a      	strb	r2, [r3, #4]
 8006fa0:	e007      	b.n	8006fb2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006fa2:	7dfb      	ldrb	r3, [r7, #23]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d102      	bne.n	8006fae <create_chain+0x122>
 8006fa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fac:	e000      	b.n	8006fb0 <create_chain+0x124>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006fb2:	69fb      	ldr	r3, [r7, #28]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3720      	adds	r7, #32
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b087      	sub	sp, #28
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	899b      	ldrh	r3, [r3, #12]
 8006fd8:	461a      	mov	r2, r3
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	8952      	ldrh	r2, [r2, #10]
 8006fe4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fe8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	1d1a      	adds	r2, r3, #4
 8006fee:	613a      	str	r2, [r7, #16]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d101      	bne.n	8006ffe <clmt_clust+0x42>
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	e010      	b.n	8007020 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006ffe:	697a      	ldr	r2, [r7, #20]
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	429a      	cmp	r2, r3
 8007004:	d307      	bcc.n	8007016 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	617b      	str	r3, [r7, #20]
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	3304      	adds	r3, #4
 8007012:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007014:	e7e9      	b.n	8006fea <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007016:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	4413      	add	r3, r2
}
 8007020:	4618      	mov	r0, r3
 8007022:	371c      	adds	r7, #28
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007042:	d204      	bcs.n	800704e <dir_sdi+0x22>
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	f003 031f 	and.w	r3, r3, #31
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <dir_sdi+0x26>
		return FR_INT_ERR;
 800704e:	2302      	movs	r3, #2
 8007050:	e071      	b.n	8007136 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	683a      	ldr	r2, [r7, #0]
 8007056:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d106      	bne.n	8007072 <dir_sdi+0x46>
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	2b02      	cmp	r3, #2
 800706a:	d902      	bls.n	8007072 <dir_sdi+0x46>
		clst = fs->dirbase;
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007070:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10c      	bne.n	8007092 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	095b      	lsrs	r3, r3, #5
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	8912      	ldrh	r2, [r2, #8]
 8007080:	4293      	cmp	r3, r2
 8007082:	d301      	bcc.n	8007088 <dir_sdi+0x5c>
 8007084:	2302      	movs	r3, #2
 8007086:	e056      	b.n	8007136 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	61da      	str	r2, [r3, #28]
 8007090:	e02d      	b.n	80070ee <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	895b      	ldrh	r3, [r3, #10]
 8007096:	461a      	mov	r2, r3
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	899b      	ldrh	r3, [r3, #12]
 800709c:	fb03 f302 	mul.w	r3, r3, r2
 80070a0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80070a2:	e019      	b.n	80070d8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6979      	ldr	r1, [r7, #20]
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7ff fc9a 	bl	80069e2 <get_fat>
 80070ae:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070b6:	d101      	bne.n	80070bc <dir_sdi+0x90>
 80070b8:	2301      	movs	r3, #1
 80070ba:	e03c      	b.n	8007136 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d904      	bls.n	80070cc <dir_sdi+0xa0>
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d301      	bcc.n	80070d0 <dir_sdi+0xa4>
 80070cc:	2302      	movs	r3, #2
 80070ce:	e032      	b.n	8007136 <dir_sdi+0x10a>
			ofs -= csz;
 80070d0:	683a      	ldr	r2, [r7, #0]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80070d8:	683a      	ldr	r2, [r7, #0]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d2e1      	bcs.n	80070a4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80070e0:	6979      	ldr	r1, [r7, #20]
 80070e2:	6938      	ldr	r0, [r7, #16]
 80070e4:	f7ff fc5e 	bl	80069a4 <clust2sect>
 80070e8:	4602      	mov	r2, r0
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	69db      	ldr	r3, [r3, #28]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d101      	bne.n	8007100 <dir_sdi+0xd4>
 80070fc:	2302      	movs	r3, #2
 80070fe:	e01a      	b.n	8007136 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	69da      	ldr	r2, [r3, #28]
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	899b      	ldrh	r3, [r3, #12]
 8007108:	4619      	mov	r1, r3
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007110:	441a      	add	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	899b      	ldrh	r3, [r3, #12]
 8007120:	461a      	mov	r2, r3
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	fbb3 f0f2 	udiv	r0, r3, r2
 8007128:	fb02 f200 	mul.w	r2, r2, r0
 800712c:	1a9b      	subs	r3, r3, r2
 800712e:	18ca      	adds	r2, r1, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3718      	adds	r7, #24
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b086      	sub	sp, #24
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
 8007146:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	3320      	adds	r3, #32
 8007154:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	69db      	ldr	r3, [r3, #28]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d003      	beq.n	8007166 <dir_next+0x28>
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007164:	d301      	bcc.n	800716a <dir_next+0x2c>
 8007166:	2304      	movs	r3, #4
 8007168:	e0bb      	b.n	80072e2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	899b      	ldrh	r3, [r3, #12]
 800716e:	461a      	mov	r2, r3
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	fbb3 f1f2 	udiv	r1, r3, r2
 8007176:	fb02 f201 	mul.w	r2, r2, r1
 800717a:	1a9b      	subs	r3, r3, r2
 800717c:	2b00      	cmp	r3, #0
 800717e:	f040 809d 	bne.w	80072bc <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	69db      	ldr	r3, [r3, #28]
 8007186:	1c5a      	adds	r2, r3, #1
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10b      	bne.n	80071ac <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	095b      	lsrs	r3, r3, #5
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	8912      	ldrh	r2, [r2, #8]
 800719c:	4293      	cmp	r3, r2
 800719e:	f0c0 808d 	bcc.w	80072bc <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	61da      	str	r2, [r3, #28]
 80071a8:	2304      	movs	r3, #4
 80071aa:	e09a      	b.n	80072e2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	899b      	ldrh	r3, [r3, #12]
 80071b0:	461a      	mov	r2, r3
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	8952      	ldrh	r2, [r2, #10]
 80071bc:	3a01      	subs	r2, #1
 80071be:	4013      	ands	r3, r2
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d17b      	bne.n	80072bc <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	4619      	mov	r1, r3
 80071cc:	4610      	mov	r0, r2
 80071ce:	f7ff fc08 	bl	80069e2 <get_fat>
 80071d2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d801      	bhi.n	80071de <dir_next+0xa0>
 80071da:	2302      	movs	r3, #2
 80071dc:	e081      	b.n	80072e2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071e4:	d101      	bne.n	80071ea <dir_next+0xac>
 80071e6:	2301      	movs	r3, #1
 80071e8:	e07b      	b.n	80072e2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d359      	bcc.n	80072a8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d104      	bne.n	8007204 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	61da      	str	r2, [r3, #28]
 8007200:	2304      	movs	r3, #4
 8007202:	e06e      	b.n	80072e2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	4619      	mov	r1, r3
 800720c:	4610      	mov	r0, r2
 800720e:	f7ff fe3d 	bl	8006e8c <create_chain>
 8007212:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <dir_next+0xe0>
 800721a:	2307      	movs	r3, #7
 800721c:	e061      	b.n	80072e2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d101      	bne.n	8007228 <dir_next+0xea>
 8007224:	2302      	movs	r3, #2
 8007226:	e05c      	b.n	80072e2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800722e:	d101      	bne.n	8007234 <dir_next+0xf6>
 8007230:	2301      	movs	r3, #1
 8007232:	e056      	b.n	80072e2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f7ff fad3 	bl	80067e0 <sync_window>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d001      	beq.n	8007244 <dir_next+0x106>
 8007240:	2301      	movs	r3, #1
 8007242:	e04e      	b.n	80072e2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	899b      	ldrh	r3, [r3, #12]
 800724e:	461a      	mov	r2, r3
 8007250:	2100      	movs	r1, #0
 8007252:	f7ff f8fc 	bl	800644e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007256:	2300      	movs	r3, #0
 8007258:	613b      	str	r3, [r7, #16]
 800725a:	6979      	ldr	r1, [r7, #20]
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f7ff fba1 	bl	80069a4 <clust2sect>
 8007262:	4602      	mov	r2, r0
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	631a      	str	r2, [r3, #48]	; 0x30
 8007268:	e012      	b.n	8007290 <dir_next+0x152>
						fs->wflag = 1;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2201      	movs	r2, #1
 800726e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f7ff fab5 	bl	80067e0 <sync_window>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d001      	beq.n	8007280 <dir_next+0x142>
 800727c:	2301      	movs	r3, #1
 800727e:	e030      	b.n	80072e2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	3301      	adds	r3, #1
 8007284:	613b      	str	r3, [r7, #16]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728a:	1c5a      	adds	r2, r3, #1
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	631a      	str	r2, [r3, #48]	; 0x30
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	895b      	ldrh	r3, [r3, #10]
 8007294:	461a      	mov	r2, r3
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	4293      	cmp	r3, r2
 800729a:	d3e6      	bcc.n	800726a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	1ad2      	subs	r2, r2, r3
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80072ae:	6979      	ldr	r1, [r7, #20]
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f7ff fb77 	bl	80069a4 <clust2sect>
 80072b6:	4602      	mov	r2, r0
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	68ba      	ldr	r2, [r7, #8]
 80072c0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	899b      	ldrh	r3, [r3, #12]
 80072cc:	461a      	mov	r2, r3
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	fbb3 f0f2 	udiv	r0, r3, r2
 80072d4:	fb02 f200 	mul.w	r2, r2, r0
 80072d8:	1a9b      	subs	r3, r3, r2
 80072da:	18ca      	adds	r2, r1, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3718      	adds	r7, #24
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b086      	sub	sp, #24
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80072fa:	2100      	movs	r1, #0
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f7ff fe95 	bl	800702c <dir_sdi>
 8007302:	4603      	mov	r3, r0
 8007304:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007306:	7dfb      	ldrb	r3, [r7, #23]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d12b      	bne.n	8007364 <dir_alloc+0x7a>
		n = 0;
 800730c:	2300      	movs	r3, #0
 800730e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	69db      	ldr	r3, [r3, #28]
 8007314:	4619      	mov	r1, r3
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f7ff faa6 	bl	8006868 <move_window>
 800731c:	4603      	mov	r3, r0
 800731e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007320:	7dfb      	ldrb	r3, [r7, #23]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d11d      	bne.n	8007362 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	2be5      	cmp	r3, #229	; 0xe5
 800732e:	d004      	beq.n	800733a <dir_alloc+0x50>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6a1b      	ldr	r3, [r3, #32]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d107      	bne.n	800734a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	3301      	adds	r3, #1
 800733e:	613b      	str	r3, [r7, #16]
 8007340:	693a      	ldr	r2, [r7, #16]
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	429a      	cmp	r2, r3
 8007346:	d102      	bne.n	800734e <dir_alloc+0x64>
 8007348:	e00c      	b.n	8007364 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800734a:	2300      	movs	r3, #0
 800734c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800734e:	2101      	movs	r1, #1
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f7ff fef4 	bl	800713e <dir_next>
 8007356:	4603      	mov	r3, r0
 8007358:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800735a:	7dfb      	ldrb	r3, [r7, #23]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d0d7      	beq.n	8007310 <dir_alloc+0x26>
 8007360:	e000      	b.n	8007364 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007362:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007364:	7dfb      	ldrb	r3, [r7, #23]
 8007366:	2b04      	cmp	r3, #4
 8007368:	d101      	bne.n	800736e <dir_alloc+0x84>
 800736a:	2307      	movs	r3, #7
 800736c:	75fb      	strb	r3, [r7, #23]
	return res;
 800736e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007370:	4618      	mov	r0, r3
 8007372:	3718      	adds	r7, #24
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	331a      	adds	r3, #26
 8007386:	4618      	mov	r0, r3
 8007388:	f7fe ffbe 	bl	8006308 <ld_word>
 800738c:	4603      	mov	r3, r0
 800738e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	2b03      	cmp	r3, #3
 8007396:	d109      	bne.n	80073ac <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	3314      	adds	r3, #20
 800739c:	4618      	mov	r0, r3
 800739e:	f7fe ffb3 	bl	8006308 <ld_word>
 80073a2:	4603      	mov	r3, r0
 80073a4:	041b      	lsls	r3, r3, #16
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80073ac:	68fb      	ldr	r3, [r7, #12]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b084      	sub	sp, #16
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	60f8      	str	r0, [r7, #12]
 80073be:	60b9      	str	r1, [r7, #8]
 80073c0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	331a      	adds	r3, #26
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	b292      	uxth	r2, r2
 80073ca:	4611      	mov	r1, r2
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7fe ffd6 	bl	800637e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	2b03      	cmp	r3, #3
 80073d8:	d109      	bne.n	80073ee <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	f103 0214 	add.w	r2, r3, #20
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	0c1b      	lsrs	r3, r3, #16
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	4619      	mov	r1, r3
 80073e8:	4610      	mov	r0, r2
 80073ea:	f7fe ffc8 	bl	800637e <st_word>
	}
}
 80073ee:	bf00      	nop
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b086      	sub	sp, #24
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
 80073fe:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8007400:	2304      	movs	r3, #4
 8007402:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800740a:	e03c      	b.n	8007486 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	69db      	ldr	r3, [r3, #28]
 8007410:	4619      	mov	r1, r3
 8007412:	6938      	ldr	r0, [r7, #16]
 8007414:	f7ff fa28 	bl	8006868 <move_window>
 8007418:	4603      	mov	r3, r0
 800741a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800741c:	7dfb      	ldrb	r3, [r7, #23]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d136      	bne.n	8007490 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800742a:	7bfb      	ldrb	r3, [r7, #15]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d102      	bne.n	8007436 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8007430:	2304      	movs	r3, #4
 8007432:	75fb      	strb	r3, [r7, #23]
 8007434:	e031      	b.n	800749a <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a1b      	ldr	r3, [r3, #32]
 800743a:	330b      	adds	r3, #11
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007442:	73bb      	strb	r3, [r7, #14]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	7bba      	ldrb	r2, [r7, #14]
 8007448:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800744a:	7bfb      	ldrb	r3, [r7, #15]
 800744c:	2be5      	cmp	r3, #229	; 0xe5
 800744e:	d011      	beq.n	8007474 <dir_read+0x7e>
 8007450:	7bfb      	ldrb	r3, [r7, #15]
 8007452:	2b2e      	cmp	r3, #46	; 0x2e
 8007454:	d00e      	beq.n	8007474 <dir_read+0x7e>
 8007456:	7bbb      	ldrb	r3, [r7, #14]
 8007458:	2b0f      	cmp	r3, #15
 800745a:	d00b      	beq.n	8007474 <dir_read+0x7e>
 800745c:	7bbb      	ldrb	r3, [r7, #14]
 800745e:	f023 0320 	bic.w	r3, r3, #32
 8007462:	2b08      	cmp	r3, #8
 8007464:	bf0c      	ite	eq
 8007466:	2301      	moveq	r3, #1
 8007468:	2300      	movne	r3, #0
 800746a:	b2db      	uxtb	r3, r3
 800746c:	461a      	mov	r2, r3
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	4293      	cmp	r3, r2
 8007472:	d00f      	beq.n	8007494 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8007474:	2100      	movs	r1, #0
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f7ff fe61 	bl	800713e <dir_next>
 800747c:	4603      	mov	r3, r0
 800747e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007480:	7dfb      	ldrb	r3, [r7, #23]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d108      	bne.n	8007498 <dir_read+0xa2>
	while (dp->sect) {
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	69db      	ldr	r3, [r3, #28]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1be      	bne.n	800740c <dir_read+0x16>
 800748e:	e004      	b.n	800749a <dir_read+0xa4>
		if (res != FR_OK) break;
 8007490:	bf00      	nop
 8007492:	e002      	b.n	800749a <dir_read+0xa4>
				break;
 8007494:	bf00      	nop
 8007496:	e000      	b.n	800749a <dir_read+0xa4>
		if (res != FR_OK) break;
 8007498:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800749a:	7dfb      	ldrb	r3, [r7, #23]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d002      	beq.n	80074a6 <dir_read+0xb0>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	61da      	str	r2, [r3, #28]
	return res;
 80074a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3718      	adds	r7, #24
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80074be:	2100      	movs	r1, #0
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f7ff fdb3 	bl	800702c <dir_sdi>
 80074c6:	4603      	mov	r3, r0
 80074c8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80074ca:	7dfb      	ldrb	r3, [r7, #23]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d001      	beq.n	80074d4 <dir_find+0x24>
 80074d0:	7dfb      	ldrb	r3, [r7, #23]
 80074d2:	e03e      	b.n	8007552 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	69db      	ldr	r3, [r3, #28]
 80074d8:	4619      	mov	r1, r3
 80074da:	6938      	ldr	r0, [r7, #16]
 80074dc:	f7ff f9c4 	bl	8006868 <move_window>
 80074e0:	4603      	mov	r3, r0
 80074e2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80074e4:	7dfb      	ldrb	r3, [r7, #23]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d12f      	bne.n	800754a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a1b      	ldr	r3, [r3, #32]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80074f2:	7bfb      	ldrb	r3, [r7, #15]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d102      	bne.n	80074fe <dir_find+0x4e>
 80074f8:	2304      	movs	r3, #4
 80074fa:	75fb      	strb	r3, [r7, #23]
 80074fc:	e028      	b.n	8007550 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a1b      	ldr	r3, [r3, #32]
 8007502:	330b      	adds	r3, #11
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800750a:	b2da      	uxtb	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a1b      	ldr	r3, [r3, #32]
 8007514:	330b      	adds	r3, #11
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	f003 0308 	and.w	r3, r3, #8
 800751c:	2b00      	cmp	r3, #0
 800751e:	d10a      	bne.n	8007536 <dir_find+0x86>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a18      	ldr	r0, [r3, #32]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	3324      	adds	r3, #36	; 0x24
 8007528:	220b      	movs	r2, #11
 800752a:	4619      	mov	r1, r3
 800752c:	f7fe ffaa 	bl	8006484 <mem_cmp>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00b      	beq.n	800754e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007536:	2100      	movs	r1, #0
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f7ff fe00 	bl	800713e <dir_next>
 800753e:	4603      	mov	r3, r0
 8007540:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007542:	7dfb      	ldrb	r3, [r7, #23]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d0c5      	beq.n	80074d4 <dir_find+0x24>
 8007548:	e002      	b.n	8007550 <dir_find+0xa0>
		if (res != FR_OK) break;
 800754a:	bf00      	nop
 800754c:	e000      	b.n	8007550 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800754e:	bf00      	nop

	return res;
 8007550:	7dfb      	ldrb	r3, [r7, #23]
}
 8007552:	4618      	mov	r0, r3
 8007554:	3718      	adds	r7, #24
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b084      	sub	sp, #16
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007568:	2101      	movs	r1, #1
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f7ff febd 	bl	80072ea <dir_alloc>
 8007570:	4603      	mov	r3, r0
 8007572:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007574:	7bfb      	ldrb	r3, [r7, #15]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d11c      	bne.n	80075b4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	69db      	ldr	r3, [r3, #28]
 800757e:	4619      	mov	r1, r3
 8007580:	68b8      	ldr	r0, [r7, #8]
 8007582:	f7ff f971 	bl	8006868 <move_window>
 8007586:	4603      	mov	r3, r0
 8007588:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800758a:	7bfb      	ldrb	r3, [r7, #15]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d111      	bne.n	80075b4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a1b      	ldr	r3, [r3, #32]
 8007594:	2220      	movs	r2, #32
 8007596:	2100      	movs	r1, #0
 8007598:	4618      	mov	r0, r3
 800759a:	f7fe ff58 	bl	800644e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a18      	ldr	r0, [r3, #32]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	3324      	adds	r3, #36	; 0x24
 80075a6:	220b      	movs	r2, #11
 80075a8:	4619      	mov	r1, r3
 80075aa:	f7fe ff2f 	bl	800640c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	2201      	movs	r2, #1
 80075b2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80075b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b086      	sub	sp, #24
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
 80075c6:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2200      	movs	r2, #0
 80075cc:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	69db      	ldr	r3, [r3, #28]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d04e      	beq.n	8007674 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80075d6:	2300      	movs	r3, #0
 80075d8:	613b      	str	r3, [r7, #16]
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80075de:	e021      	b.n	8007624 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a1a      	ldr	r2, [r3, #32]
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	1c59      	adds	r1, r3, #1
 80075e8:	6179      	str	r1, [r7, #20]
 80075ea:	4413      	add	r3, r2
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
 80075f2:	2b20      	cmp	r3, #32
 80075f4:	d100      	bne.n	80075f8 <get_fileinfo+0x3a>
 80075f6:	e015      	b.n	8007624 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80075f8:	7bfb      	ldrb	r3, [r7, #15]
 80075fa:	2b05      	cmp	r3, #5
 80075fc:	d101      	bne.n	8007602 <get_fileinfo+0x44>
 80075fe:	23e5      	movs	r3, #229	; 0xe5
 8007600:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	2b09      	cmp	r3, #9
 8007606:	d106      	bne.n	8007616 <get_fileinfo+0x58>
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	1c5a      	adds	r2, r3, #1
 800760c:	613a      	str	r2, [r7, #16]
 800760e:	683a      	ldr	r2, [r7, #0]
 8007610:	4413      	add	r3, r2
 8007612:	222e      	movs	r2, #46	; 0x2e
 8007614:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	1c5a      	adds	r2, r3, #1
 800761a:	613a      	str	r2, [r7, #16]
 800761c:	683a      	ldr	r2, [r7, #0]
 800761e:	4413      	add	r3, r2
 8007620:	7bfa      	ldrb	r2, [r7, #15]
 8007622:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	2b0a      	cmp	r3, #10
 8007628:	d9da      	bls.n	80075e0 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800762a:	683a      	ldr	r2, [r7, #0]
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	4413      	add	r3, r2
 8007630:	3309      	adds	r3, #9
 8007632:	2200      	movs	r2, #0
 8007634:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	7ada      	ldrb	r2, [r3, #11]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a1b      	ldr	r3, [r3, #32]
 8007644:	331c      	adds	r3, #28
 8007646:	4618      	mov	r0, r3
 8007648:	f7fe fe76 	bl	8006338 <ld_dword>
 800764c:	4602      	mov	r2, r0
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	3316      	adds	r3, #22
 8007658:	4618      	mov	r0, r3
 800765a:	f7fe fe6d 	bl	8006338 <ld_dword>
 800765e:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	b29a      	uxth	r2, r3
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	80da      	strh	r2, [r3, #6]
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	0c1b      	lsrs	r3, r3, #16
 800766c:	b29a      	uxth	r2, r3
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	809a      	strh	r2, [r3, #4]
 8007672:	e000      	b.n	8007676 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007674:	bf00      	nop
}
 8007676:	3718      	adds	r7, #24
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b088      	sub	sp, #32
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	60fb      	str	r3, [r7, #12]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	3324      	adds	r3, #36	; 0x24
 8007690:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007692:	220b      	movs	r2, #11
 8007694:	2120      	movs	r1, #32
 8007696:	68b8      	ldr	r0, [r7, #8]
 8007698:	f7fe fed9 	bl	800644e <mem_set>
	si = i = 0; ni = 8;
 800769c:	2300      	movs	r3, #0
 800769e:	613b      	str	r3, [r7, #16]
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	61fb      	str	r3, [r7, #28]
 80076a4:	2308      	movs	r3, #8
 80076a6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	1c5a      	adds	r2, r3, #1
 80076ac:	61fa      	str	r2, [r7, #28]
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	4413      	add	r3, r2
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80076b6:	7efb      	ldrb	r3, [r7, #27]
 80076b8:	2b20      	cmp	r3, #32
 80076ba:	d94e      	bls.n	800775a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80076bc:	7efb      	ldrb	r3, [r7, #27]
 80076be:	2b2f      	cmp	r3, #47	; 0x2f
 80076c0:	d006      	beq.n	80076d0 <create_name+0x54>
 80076c2:	7efb      	ldrb	r3, [r7, #27]
 80076c4:	2b5c      	cmp	r3, #92	; 0x5c
 80076c6:	d110      	bne.n	80076ea <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80076c8:	e002      	b.n	80076d0 <create_name+0x54>
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	3301      	adds	r3, #1
 80076ce:	61fb      	str	r3, [r7, #28]
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	4413      	add	r3, r2
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	2b2f      	cmp	r3, #47	; 0x2f
 80076da:	d0f6      	beq.n	80076ca <create_name+0x4e>
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	4413      	add	r3, r2
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	2b5c      	cmp	r3, #92	; 0x5c
 80076e6:	d0f0      	beq.n	80076ca <create_name+0x4e>
			break;
 80076e8:	e038      	b.n	800775c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80076ea:	7efb      	ldrb	r3, [r7, #27]
 80076ec:	2b2e      	cmp	r3, #46	; 0x2e
 80076ee:	d003      	beq.n	80076f8 <create_name+0x7c>
 80076f0:	693a      	ldr	r2, [r7, #16]
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d30c      	bcc.n	8007712 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	2b0b      	cmp	r3, #11
 80076fc:	d002      	beq.n	8007704 <create_name+0x88>
 80076fe:	7efb      	ldrb	r3, [r7, #27]
 8007700:	2b2e      	cmp	r3, #46	; 0x2e
 8007702:	d001      	beq.n	8007708 <create_name+0x8c>
 8007704:	2306      	movs	r3, #6
 8007706:	e044      	b.n	8007792 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007708:	2308      	movs	r3, #8
 800770a:	613b      	str	r3, [r7, #16]
 800770c:	230b      	movs	r3, #11
 800770e:	617b      	str	r3, [r7, #20]
			continue;
 8007710:	e022      	b.n	8007758 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007712:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007716:	2b00      	cmp	r3, #0
 8007718:	da04      	bge.n	8007724 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800771a:	7efb      	ldrb	r3, [r7, #27]
 800771c:	3b80      	subs	r3, #128	; 0x80
 800771e:	4a1f      	ldr	r2, [pc, #124]	; (800779c <create_name+0x120>)
 8007720:	5cd3      	ldrb	r3, [r2, r3]
 8007722:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007724:	7efb      	ldrb	r3, [r7, #27]
 8007726:	4619      	mov	r1, r3
 8007728:	481d      	ldr	r0, [pc, #116]	; (80077a0 <create_name+0x124>)
 800772a:	f7fe fed2 	bl	80064d2 <chk_chr>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <create_name+0xbc>
 8007734:	2306      	movs	r3, #6
 8007736:	e02c      	b.n	8007792 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007738:	7efb      	ldrb	r3, [r7, #27]
 800773a:	2b60      	cmp	r3, #96	; 0x60
 800773c:	d905      	bls.n	800774a <create_name+0xce>
 800773e:	7efb      	ldrb	r3, [r7, #27]
 8007740:	2b7a      	cmp	r3, #122	; 0x7a
 8007742:	d802      	bhi.n	800774a <create_name+0xce>
 8007744:	7efb      	ldrb	r3, [r7, #27]
 8007746:	3b20      	subs	r3, #32
 8007748:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	1c5a      	adds	r2, r3, #1
 800774e:	613a      	str	r2, [r7, #16]
 8007750:	68ba      	ldr	r2, [r7, #8]
 8007752:	4413      	add	r3, r2
 8007754:	7efa      	ldrb	r2, [r7, #27]
 8007756:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007758:	e7a6      	b.n	80076a8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800775a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	441a      	add	r2, r3
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <create_name+0xf4>
 800776c:	2306      	movs	r3, #6
 800776e:	e010      	b.n	8007792 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	2be5      	cmp	r3, #229	; 0xe5
 8007776:	d102      	bne.n	800777e <create_name+0x102>
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	2205      	movs	r2, #5
 800777c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800777e:	7efb      	ldrb	r3, [r7, #27]
 8007780:	2b20      	cmp	r3, #32
 8007782:	d801      	bhi.n	8007788 <create_name+0x10c>
 8007784:	2204      	movs	r2, #4
 8007786:	e000      	b.n	800778a <create_name+0x10e>
 8007788:	2200      	movs	r2, #0
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	330b      	adds	r3, #11
 800778e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007790:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007792:	4618      	mov	r0, r3
 8007794:	3720      	adds	r7, #32
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	0800aac4 	.word	0x0800aac4
 80077a0:	0800aa4c 	.word	0x0800aa4c

080077a4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b086      	sub	sp, #24
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80077b8:	e002      	b.n	80077c0 <follow_path+0x1c>
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	3301      	adds	r3, #1
 80077be:	603b      	str	r3, [r7, #0]
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	2b2f      	cmp	r3, #47	; 0x2f
 80077c6:	d0f8      	beq.n	80077ba <follow_path+0x16>
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	2b5c      	cmp	r3, #92	; 0x5c
 80077ce:	d0f4      	beq.n	80077ba <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	2200      	movs	r2, #0
 80077d4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	2b1f      	cmp	r3, #31
 80077dc:	d80a      	bhi.n	80077f4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2280      	movs	r2, #128	; 0x80
 80077e2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80077e6:	2100      	movs	r1, #0
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7ff fc1f 	bl	800702c <dir_sdi>
 80077ee:	4603      	mov	r3, r0
 80077f0:	75fb      	strb	r3, [r7, #23]
 80077f2:	e048      	b.n	8007886 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80077f4:	463b      	mov	r3, r7
 80077f6:	4619      	mov	r1, r3
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f7ff ff3f 	bl	800767c <create_name>
 80077fe:	4603      	mov	r3, r0
 8007800:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007802:	7dfb      	ldrb	r3, [r7, #23]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d139      	bne.n	800787c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f7ff fe51 	bl	80074b0 <dir_find>
 800780e:	4603      	mov	r3, r0
 8007810:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007818:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800781a:	7dfb      	ldrb	r3, [r7, #23]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d00a      	beq.n	8007836 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007820:	7dfb      	ldrb	r3, [r7, #23]
 8007822:	2b04      	cmp	r3, #4
 8007824:	d12c      	bne.n	8007880 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007826:	7afb      	ldrb	r3, [r7, #11]
 8007828:	f003 0304 	and.w	r3, r3, #4
 800782c:	2b00      	cmp	r3, #0
 800782e:	d127      	bne.n	8007880 <follow_path+0xdc>
 8007830:	2305      	movs	r3, #5
 8007832:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007834:	e024      	b.n	8007880 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007836:	7afb      	ldrb	r3, [r7, #11]
 8007838:	f003 0304 	and.w	r3, r3, #4
 800783c:	2b00      	cmp	r3, #0
 800783e:	d121      	bne.n	8007884 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	799b      	ldrb	r3, [r3, #6]
 8007844:	f003 0310 	and.w	r3, r3, #16
 8007848:	2b00      	cmp	r3, #0
 800784a:	d102      	bne.n	8007852 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800784c:	2305      	movs	r3, #5
 800784e:	75fb      	strb	r3, [r7, #23]
 8007850:	e019      	b.n	8007886 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	695b      	ldr	r3, [r3, #20]
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	8992      	ldrh	r2, [r2, #12]
 8007860:	fbb3 f0f2 	udiv	r0, r3, r2
 8007864:	fb02 f200 	mul.w	r2, r2, r0
 8007868:	1a9b      	subs	r3, r3, r2
 800786a:	440b      	add	r3, r1
 800786c:	4619      	mov	r1, r3
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f7ff fd82 	bl	8007378 <ld_clust>
 8007874:	4602      	mov	r2, r0
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800787a:	e7bb      	b.n	80077f4 <follow_path+0x50>
			if (res != FR_OK) break;
 800787c:	bf00      	nop
 800787e:	e002      	b.n	8007886 <follow_path+0xe2>
				break;
 8007880:	bf00      	nop
 8007882:	e000      	b.n	8007886 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007884:	bf00      	nop
			}
		}
	}

	return res;
 8007886:	7dfb      	ldrb	r3, [r7, #23]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3718      	adds	r7, #24
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007890:	b480      	push	{r7}
 8007892:	b087      	sub	sp, #28
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800789c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d031      	beq.n	800790a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	617b      	str	r3, [r7, #20]
 80078ac:	e002      	b.n	80078b4 <get_ldnumber+0x24>
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	3301      	adds	r3, #1
 80078b2:	617b      	str	r3, [r7, #20]
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	2b20      	cmp	r3, #32
 80078ba:	d903      	bls.n	80078c4 <get_ldnumber+0x34>
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	2b3a      	cmp	r3, #58	; 0x3a
 80078c2:	d1f4      	bne.n	80078ae <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	2b3a      	cmp	r3, #58	; 0x3a
 80078ca:	d11c      	bne.n	8007906 <get_ldnumber+0x76>
			tp = *path;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	1c5a      	adds	r2, r3, #1
 80078d6:	60fa      	str	r2, [r7, #12]
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	3b30      	subs	r3, #48	; 0x30
 80078dc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	2b09      	cmp	r3, #9
 80078e2:	d80e      	bhi.n	8007902 <get_ldnumber+0x72>
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d10a      	bne.n	8007902 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d107      	bne.n	8007902 <get_ldnumber+0x72>
					vol = (int)i;
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	3301      	adds	r3, #1
 80078fa:	617b      	str	r3, [r7, #20]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	697a      	ldr	r2, [r7, #20]
 8007900:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	e002      	b.n	800790c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007906:	2300      	movs	r3, #0
 8007908:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800790a:	693b      	ldr	r3, [r7, #16]
}
 800790c:	4618      	mov	r0, r3
 800790e:	371c      	adds	r7, #28
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	70da      	strb	r2, [r3, #3]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800792e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007930:	6839      	ldr	r1, [r7, #0]
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7fe ff98 	bl	8006868 <move_window>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <check_fs+0x2a>
 800793e:	2304      	movs	r3, #4
 8007940:	e038      	b.n	80079b4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	3334      	adds	r3, #52	; 0x34
 8007946:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800794a:	4618      	mov	r0, r3
 800794c:	f7fe fcdc 	bl	8006308 <ld_word>
 8007950:	4603      	mov	r3, r0
 8007952:	461a      	mov	r2, r3
 8007954:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007958:	429a      	cmp	r2, r3
 800795a:	d001      	beq.n	8007960 <check_fs+0x48>
 800795c:	2303      	movs	r3, #3
 800795e:	e029      	b.n	80079b4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007966:	2be9      	cmp	r3, #233	; 0xe9
 8007968:	d009      	beq.n	800797e <check_fs+0x66>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007970:	2beb      	cmp	r3, #235	; 0xeb
 8007972:	d11e      	bne.n	80079b2 <check_fs+0x9a>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800797a:	2b90      	cmp	r3, #144	; 0x90
 800797c:	d119      	bne.n	80079b2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	3334      	adds	r3, #52	; 0x34
 8007982:	3336      	adds	r3, #54	; 0x36
 8007984:	4618      	mov	r0, r3
 8007986:	f7fe fcd7 	bl	8006338 <ld_dword>
 800798a:	4603      	mov	r3, r0
 800798c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007990:	4a0a      	ldr	r2, [pc, #40]	; (80079bc <check_fs+0xa4>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d101      	bne.n	800799a <check_fs+0x82>
 8007996:	2300      	movs	r3, #0
 8007998:	e00c      	b.n	80079b4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	3334      	adds	r3, #52	; 0x34
 800799e:	3352      	adds	r3, #82	; 0x52
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7fe fcc9 	bl	8006338 <ld_dword>
 80079a6:	4603      	mov	r3, r0
 80079a8:	4a05      	ldr	r2, [pc, #20]	; (80079c0 <check_fs+0xa8>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d101      	bne.n	80079b2 <check_fs+0x9a>
 80079ae:	2300      	movs	r3, #0
 80079b0:	e000      	b.n	80079b4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80079b2:	2302      	movs	r3, #2
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	00544146 	.word	0x00544146
 80079c0:	33544146 	.word	0x33544146

080079c4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b096      	sub	sp, #88	; 0x58
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	4613      	mov	r3, r2
 80079d0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	2200      	movs	r2, #0
 80079d6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80079d8:	68f8      	ldr	r0, [r7, #12]
 80079da:	f7ff ff59 	bl	8007890 <get_ldnumber>
 80079de:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80079e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	da01      	bge.n	80079ea <find_volume+0x26>
 80079e6:	230b      	movs	r3, #11
 80079e8:	e265      	b.n	8007eb6 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80079ea:	4ab0      	ldr	r2, [pc, #704]	; (8007cac <find_volume+0x2e8>)
 80079ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079f2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80079f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d101      	bne.n	80079fe <find_volume+0x3a>
 80079fa:	230c      	movs	r3, #12
 80079fc:	e25b      	b.n	8007eb6 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a02:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007a04:	79fb      	ldrb	r3, [r7, #7]
 8007a06:	f023 0301 	bic.w	r3, r3, #1
 8007a0a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d01a      	beq.n	8007a4a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a16:	785b      	ldrb	r3, [r3, #1]
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f7fe fbd7 	bl	80061cc <disk_status>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007a24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a28:	f003 0301 	and.w	r3, r3, #1
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d10c      	bne.n	8007a4a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007a30:	79fb      	ldrb	r3, [r7, #7]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d007      	beq.n	8007a46 <find_volume+0x82>
 8007a36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a3a:	f003 0304 	and.w	r3, r3, #4
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d001      	beq.n	8007a46 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007a42:	230a      	movs	r3, #10
 8007a44:	e237      	b.n	8007eb6 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8007a46:	2300      	movs	r3, #0
 8007a48:	e235      	b.n	8007eb6 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a52:	b2da      	uxtb	r2, r3
 8007a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a56:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5a:	785b      	ldrb	r3, [r3, #1]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7fe fbcf 	bl	8006200 <disk_initialize>
 8007a62:	4603      	mov	r3, r0
 8007a64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007a68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a6c:	f003 0301 	and.w	r3, r3, #1
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d001      	beq.n	8007a78 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007a74:	2303      	movs	r3, #3
 8007a76:	e21e      	b.n	8007eb6 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007a78:	79fb      	ldrb	r3, [r7, #7]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d007      	beq.n	8007a8e <find_volume+0xca>
 8007a7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a82:	f003 0304 	and.w	r3, r3, #4
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007a8a:	230a      	movs	r3, #10
 8007a8c:	e213      	b.n	8007eb6 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a90:	7858      	ldrb	r0, [r3, #1]
 8007a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a94:	330c      	adds	r3, #12
 8007a96:	461a      	mov	r2, r3
 8007a98:	2102      	movs	r1, #2
 8007a9a:	f7fe fc17 	bl	80062cc <disk_ioctl>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d001      	beq.n	8007aa8 <find_volume+0xe4>
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e206      	b.n	8007eb6 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aaa:	899b      	ldrh	r3, [r3, #12]
 8007aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ab0:	d80d      	bhi.n	8007ace <find_volume+0x10a>
 8007ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab4:	899b      	ldrh	r3, [r3, #12]
 8007ab6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aba:	d308      	bcc.n	8007ace <find_volume+0x10a>
 8007abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abe:	899b      	ldrh	r3, [r3, #12]
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac4:	899b      	ldrh	r3, [r3, #12]
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	4013      	ands	r3, r2
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d001      	beq.n	8007ad2 <find_volume+0x10e>
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e1f1      	b.n	8007eb6 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007ad6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007ad8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ada:	f7ff ff1d 	bl	8007918 <check_fs>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007ae4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d14b      	bne.n	8007b84 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007aec:	2300      	movs	r3, #0
 8007aee:	643b      	str	r3, [r7, #64]	; 0x40
 8007af0:	e01f      	b.n	8007b32 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007afa:	011b      	lsls	r3, r3, #4
 8007afc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007b00:	4413      	add	r3, r2
 8007b02:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b06:	3304      	adds	r3, #4
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d006      	beq.n	8007b1c <find_volume+0x158>
 8007b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b10:	3308      	adds	r3, #8
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7fe fc10 	bl	8006338 <ld_dword>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	e000      	b.n	8007b1e <find_volume+0x15a>
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007b26:	440b      	add	r3, r1
 8007b28:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b2e:	3301      	adds	r3, #1
 8007b30:	643b      	str	r3, [r7, #64]	; 0x40
 8007b32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b34:	2b03      	cmp	r3, #3
 8007b36:	d9dc      	bls.n	8007af2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007b38:	2300      	movs	r3, #0
 8007b3a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d002      	beq.n	8007b48 <find_volume+0x184>
 8007b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b44:	3b01      	subs	r3, #1
 8007b46:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007b50:	4413      	add	r3, r2
 8007b52:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007b56:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007b58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d005      	beq.n	8007b6a <find_volume+0x1a6>
 8007b5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007b60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b62:	f7ff fed9 	bl	8007918 <check_fs>
 8007b66:	4603      	mov	r3, r0
 8007b68:	e000      	b.n	8007b6c <find_volume+0x1a8>
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007b70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d905      	bls.n	8007b84 <find_volume+0x1c0>
 8007b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	643b      	str	r3, [r7, #64]	; 0x40
 8007b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b80:	2b03      	cmp	r3, #3
 8007b82:	d9e1      	bls.n	8007b48 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007b84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b88:	2b04      	cmp	r3, #4
 8007b8a:	d101      	bne.n	8007b90 <find_volume+0x1cc>
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e192      	b.n	8007eb6 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007b90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d901      	bls.n	8007b9c <find_volume+0x1d8>
 8007b98:	230d      	movs	r3, #13
 8007b9a:	e18c      	b.n	8007eb6 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9e:	3334      	adds	r3, #52	; 0x34
 8007ba0:	330b      	adds	r3, #11
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7fe fbb0 	bl	8006308 <ld_word>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	461a      	mov	r2, r3
 8007bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bae:	899b      	ldrh	r3, [r3, #12]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d001      	beq.n	8007bb8 <find_volume+0x1f4>
 8007bb4:	230d      	movs	r3, #13
 8007bb6:	e17e      	b.n	8007eb6 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bba:	3334      	adds	r3, #52	; 0x34
 8007bbc:	3316      	adds	r3, #22
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7fe fba2 	bl	8006308 <ld_word>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d106      	bne.n	8007bdc <find_volume+0x218>
 8007bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd0:	3334      	adds	r3, #52	; 0x34
 8007bd2:	3324      	adds	r3, #36	; 0x24
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7fe fbaf 	bl	8006338 <ld_dword>
 8007bda:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007be0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bee:	789b      	ldrb	r3, [r3, #2]
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d005      	beq.n	8007c00 <find_volume+0x23c>
 8007bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf6:	789b      	ldrb	r3, [r3, #2]
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	d001      	beq.n	8007c00 <find_volume+0x23c>
 8007bfc:	230d      	movs	r3, #13
 8007bfe:	e15a      	b.n	8007eb6 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c02:	789b      	ldrb	r3, [r3, #2]
 8007c04:	461a      	mov	r2, r3
 8007c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c08:	fb02 f303 	mul.w	r3, r2, r3
 8007c0c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c14:	b29a      	uxth	r2, r3
 8007c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c18:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1c:	895b      	ldrh	r3, [r3, #10]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d008      	beq.n	8007c34 <find_volume+0x270>
 8007c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c24:	895b      	ldrh	r3, [r3, #10]
 8007c26:	461a      	mov	r2, r3
 8007c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c2a:	895b      	ldrh	r3, [r3, #10]
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	4013      	ands	r3, r2
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d001      	beq.n	8007c38 <find_volume+0x274>
 8007c34:	230d      	movs	r3, #13
 8007c36:	e13e      	b.n	8007eb6 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3a:	3334      	adds	r3, #52	; 0x34
 8007c3c:	3311      	adds	r3, #17
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7fe fb62 	bl	8006308 <ld_word>
 8007c44:	4603      	mov	r3, r0
 8007c46:	461a      	mov	r2, r3
 8007c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4e:	891b      	ldrh	r3, [r3, #8]
 8007c50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c52:	8992      	ldrh	r2, [r2, #12]
 8007c54:	0952      	lsrs	r2, r2, #5
 8007c56:	b292      	uxth	r2, r2
 8007c58:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c5c:	fb02 f201 	mul.w	r2, r2, r1
 8007c60:	1a9b      	subs	r3, r3, r2
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d001      	beq.n	8007c6c <find_volume+0x2a8>
 8007c68:	230d      	movs	r3, #13
 8007c6a:	e124      	b.n	8007eb6 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6e:	3334      	adds	r3, #52	; 0x34
 8007c70:	3313      	adds	r3, #19
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fe fb48 	bl	8006308 <ld_word>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007c7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d106      	bne.n	8007c90 <find_volume+0x2cc>
 8007c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c84:	3334      	adds	r3, #52	; 0x34
 8007c86:	3320      	adds	r3, #32
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f7fe fb55 	bl	8006338 <ld_dword>
 8007c8e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c92:	3334      	adds	r3, #52	; 0x34
 8007c94:	330e      	adds	r3, #14
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fe fb36 	bl	8006308 <ld_word>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007ca0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d104      	bne.n	8007cb0 <find_volume+0x2ec>
 8007ca6:	230d      	movs	r3, #13
 8007ca8:	e105      	b.n	8007eb6 <find_volume+0x4f2>
 8007caa:	bf00      	nop
 8007cac:	200010cc 	.word	0x200010cc

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007cb0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cb4:	4413      	add	r3, r2
 8007cb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cb8:	8911      	ldrh	r1, [r2, #8]
 8007cba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cbc:	8992      	ldrh	r2, [r2, #12]
 8007cbe:	0952      	lsrs	r2, r2, #5
 8007cc0:	b292      	uxth	r2, r2
 8007cc2:	fbb1 f2f2 	udiv	r2, r1, r2
 8007cc6:	b292      	uxth	r2, r2
 8007cc8:	4413      	add	r3, r2
 8007cca:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007ccc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d201      	bcs.n	8007cd8 <find_volume+0x314>
 8007cd4:	230d      	movs	r3, #13
 8007cd6:	e0ee      	b.n	8007eb6 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007cd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ce0:	8952      	ldrh	r2, [r2, #10]
 8007ce2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ce6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d101      	bne.n	8007cf2 <find_volume+0x32e>
 8007cee:	230d      	movs	r3, #13
 8007cf0:	e0e1      	b.n	8007eb6 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfa:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d802      	bhi.n	8007d08 <find_volume+0x344>
 8007d02:	2302      	movs	r3, #2
 8007d04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d802      	bhi.n	8007d18 <find_volume+0x354>
 8007d12:	2301      	movs	r3, #1
 8007d14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1a:	1c9a      	adds	r2, r3, #2
 8007d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d24:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007d26:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d2a:	441a      	add	r2, r3
 8007d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007d30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d34:	441a      	add	r2, r3
 8007d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d38:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8007d3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d3e:	2b03      	cmp	r3, #3
 8007d40:	d11e      	bne.n	8007d80 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d44:	3334      	adds	r3, #52	; 0x34
 8007d46:	332a      	adds	r3, #42	; 0x2a
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7fe fadd 	bl	8006308 <ld_word>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d001      	beq.n	8007d58 <find_volume+0x394>
 8007d54:	230d      	movs	r3, #13
 8007d56:	e0ae      	b.n	8007eb6 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5a:	891b      	ldrh	r3, [r3, #8]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d001      	beq.n	8007d64 <find_volume+0x3a0>
 8007d60:	230d      	movs	r3, #13
 8007d62:	e0a8      	b.n	8007eb6 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d66:	3334      	adds	r3, #52	; 0x34
 8007d68:	332c      	adds	r3, #44	; 0x2c
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7fe fae4 	bl	8006338 <ld_dword>
 8007d70:	4602      	mov	r2, r0
 8007d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d74:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d78:	699b      	ldr	r3, [r3, #24]
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	647b      	str	r3, [r7, #68]	; 0x44
 8007d7e:	e01f      	b.n	8007dc0 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d82:	891b      	ldrh	r3, [r3, #8]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d101      	bne.n	8007d8c <find_volume+0x3c8>
 8007d88:	230d      	movs	r3, #13
 8007d8a:	e094      	b.n	8007eb6 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d92:	441a      	add	r2, r3
 8007d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d96:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007d98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d103      	bne.n	8007da8 <find_volume+0x3e4>
 8007da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	005b      	lsls	r3, r3, #1
 8007da6:	e00a      	b.n	8007dbe <find_volume+0x3fa>
 8007da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007daa:	699a      	ldr	r2, [r3, #24]
 8007dac:	4613      	mov	r3, r2
 8007dae:	005b      	lsls	r3, r3, #1
 8007db0:	4413      	add	r3, r2
 8007db2:	085a      	lsrs	r2, r3, #1
 8007db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db6:	699b      	ldr	r3, [r3, #24]
 8007db8:	f003 0301 	and.w	r3, r3, #1
 8007dbc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007dbe:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc2:	69da      	ldr	r2, [r3, #28]
 8007dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc6:	899b      	ldrh	r3, [r3, #12]
 8007dc8:	4619      	mov	r1, r3
 8007dca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dcc:	440b      	add	r3, r1
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007dd2:	8989      	ldrh	r1, [r1, #12]
 8007dd4:	fbb3 f3f1 	udiv	r3, r3, r1
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d201      	bcs.n	8007de0 <find_volume+0x41c>
 8007ddc:	230d      	movs	r3, #13
 8007dde:	e06a      	b.n	8007eb6 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007de6:	615a      	str	r2, [r3, #20]
 8007de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dea:	695a      	ldr	r2, [r3, #20]
 8007dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dee:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8007df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df2:	2280      	movs	r2, #128	; 0x80
 8007df4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007df6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007dfa:	2b03      	cmp	r3, #3
 8007dfc:	d149      	bne.n	8007e92 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e00:	3334      	adds	r3, #52	; 0x34
 8007e02:	3330      	adds	r3, #48	; 0x30
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7fe fa7f 	bl	8006308 <ld_word>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d140      	bne.n	8007e92 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e12:	3301      	adds	r3, #1
 8007e14:	4619      	mov	r1, r3
 8007e16:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e18:	f7fe fd26 	bl	8006868 <move_window>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d137      	bne.n	8007e92 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8007e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e24:	2200      	movs	r2, #0
 8007e26:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2a:	3334      	adds	r3, #52	; 0x34
 8007e2c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007e30:	4618      	mov	r0, r3
 8007e32:	f7fe fa69 	bl	8006308 <ld_word>
 8007e36:	4603      	mov	r3, r0
 8007e38:	461a      	mov	r2, r3
 8007e3a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d127      	bne.n	8007e92 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e44:	3334      	adds	r3, #52	; 0x34
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7fe fa76 	bl	8006338 <ld_dword>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	4a1c      	ldr	r2, [pc, #112]	; (8007ec0 <find_volume+0x4fc>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d11e      	bne.n	8007e92 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e56:	3334      	adds	r3, #52	; 0x34
 8007e58:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7fe fa6b 	bl	8006338 <ld_dword>
 8007e62:	4603      	mov	r3, r0
 8007e64:	4a17      	ldr	r2, [pc, #92]	; (8007ec4 <find_volume+0x500>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d113      	bne.n	8007e92 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6c:	3334      	adds	r3, #52	; 0x34
 8007e6e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7fe fa60 	bl	8006338 <ld_dword>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e7c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e80:	3334      	adds	r3, #52	; 0x34
 8007e82:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7fe fa56 	bl	8006338 <ld_dword>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e90:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e94:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007e98:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007e9a:	4b0b      	ldr	r3, [pc, #44]	; (8007ec8 <find_volume+0x504>)
 8007e9c:	881b      	ldrh	r3, [r3, #0]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	4b09      	ldr	r3, [pc, #36]	; (8007ec8 <find_volume+0x504>)
 8007ea4:	801a      	strh	r2, [r3, #0]
 8007ea6:	4b08      	ldr	r3, [pc, #32]	; (8007ec8 <find_volume+0x504>)
 8007ea8:	881a      	ldrh	r2, [r3, #0]
 8007eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eac:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007eae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007eb0:	f7fe fc72 	bl	8006798 <clear_lock>
#endif
	return FR_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3758      	adds	r7, #88	; 0x58
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	41615252 	.word	0x41615252
 8007ec4:	61417272 	.word	0x61417272
 8007ec8:	200010d0 	.word	0x200010d0

08007ecc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007ed6:	2309      	movs	r3, #9
 8007ed8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d01c      	beq.n	8007f1a <validate+0x4e>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d018      	beq.n	8007f1a <validate+0x4e>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d013      	beq.n	8007f1a <validate+0x4e>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	889a      	ldrh	r2, [r3, #4]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	88db      	ldrh	r3, [r3, #6]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d10c      	bne.n	8007f1a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	785b      	ldrb	r3, [r3, #1]
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7fe f960 	bl	80061cc <disk_status>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d101      	bne.n	8007f1a <validate+0x4e>
			res = FR_OK;
 8007f16:	2300      	movs	r3, #0
 8007f18:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007f1a:	7bfb      	ldrb	r3, [r7, #15]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d102      	bne.n	8007f26 <validate+0x5a>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	e000      	b.n	8007f28 <validate+0x5c>
 8007f26:	2300      	movs	r3, #0
 8007f28:	683a      	ldr	r2, [r7, #0]
 8007f2a:	6013      	str	r3, [r2, #0]
	return res;
 8007f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
	...

08007f38 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b088      	sub	sp, #32
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	4613      	mov	r3, r2
 8007f44:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007f4a:	f107 0310 	add.w	r3, r7, #16
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7ff fc9e 	bl	8007890 <get_ldnumber>
 8007f54:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	da01      	bge.n	8007f60 <f_mount+0x28>
 8007f5c:	230b      	movs	r3, #11
 8007f5e:	e02b      	b.n	8007fb8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007f60:	4a17      	ldr	r2, [pc, #92]	; (8007fc0 <f_mount+0x88>)
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f68:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d005      	beq.n	8007f7c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007f70:	69b8      	ldr	r0, [r7, #24]
 8007f72:	f7fe fc11 	bl	8006798 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d002      	beq.n	8007f88 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2200      	movs	r2, #0
 8007f86:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	490d      	ldr	r1, [pc, #52]	; (8007fc0 <f_mount+0x88>)
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d002      	beq.n	8007f9e <f_mount+0x66>
 8007f98:	79fb      	ldrb	r3, [r7, #7]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d001      	beq.n	8007fa2 <f_mount+0x6a>
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	e00a      	b.n	8007fb8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007fa2:	f107 010c 	add.w	r1, r7, #12
 8007fa6:	f107 0308 	add.w	r3, r7, #8
 8007faa:	2200      	movs	r2, #0
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7ff fd09 	bl	80079c4 <find_volume>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3720      	adds	r7, #32
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	200010cc 	.word	0x200010cc

08007fc4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b098      	sub	sp, #96	; 0x60
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	4613      	mov	r3, r2
 8007fd0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d101      	bne.n	8007fdc <f_open+0x18>
 8007fd8:	2309      	movs	r3, #9
 8007fda:	e1bb      	b.n	8008354 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007fdc:	79fb      	ldrb	r3, [r7, #7]
 8007fde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fe2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007fe4:	79fa      	ldrb	r2, [r7, #7]
 8007fe6:	f107 0110 	add.w	r1, r7, #16
 8007fea:	f107 0308 	add.w	r3, r7, #8
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7ff fce8 	bl	80079c4 <find_volume>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8007ffa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	f040 819f 	bne.w	8008342 <f_open+0x37e>
		dj.obj.fs = fs;
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008008:	68ba      	ldr	r2, [r7, #8]
 800800a:	f107 0314 	add.w	r3, r7, #20
 800800e:	4611      	mov	r1, r2
 8008010:	4618      	mov	r0, r3
 8008012:	f7ff fbc7 	bl	80077a4 <follow_path>
 8008016:	4603      	mov	r3, r0
 8008018:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800801c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008020:	2b00      	cmp	r3, #0
 8008022:	d11a      	bne.n	800805a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008024:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008028:	b25b      	sxtb	r3, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	da03      	bge.n	8008036 <f_open+0x72>
				res = FR_INVALID_NAME;
 800802e:	2306      	movs	r3, #6
 8008030:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008034:	e011      	b.n	800805a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008036:	79fb      	ldrb	r3, [r7, #7]
 8008038:	f023 0301 	bic.w	r3, r3, #1
 800803c:	2b00      	cmp	r3, #0
 800803e:	bf14      	ite	ne
 8008040:	2301      	movne	r3, #1
 8008042:	2300      	moveq	r3, #0
 8008044:	b2db      	uxtb	r3, r3
 8008046:	461a      	mov	r2, r3
 8008048:	f107 0314 	add.w	r3, r7, #20
 800804c:	4611      	mov	r1, r2
 800804e:	4618      	mov	r0, r3
 8008050:	f7fe fa5a 	bl	8006508 <chk_lock>
 8008054:	4603      	mov	r3, r0
 8008056:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800805a:	79fb      	ldrb	r3, [r7, #7]
 800805c:	f003 031c 	and.w	r3, r3, #28
 8008060:	2b00      	cmp	r3, #0
 8008062:	d07f      	beq.n	8008164 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008064:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008068:	2b00      	cmp	r3, #0
 800806a:	d017      	beq.n	800809c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800806c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008070:	2b04      	cmp	r3, #4
 8008072:	d10e      	bne.n	8008092 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008074:	f7fe faa4 	bl	80065c0 <enq_lock>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d006      	beq.n	800808c <f_open+0xc8>
 800807e:	f107 0314 	add.w	r3, r7, #20
 8008082:	4618      	mov	r0, r3
 8008084:	f7ff fa69 	bl	800755a <dir_register>
 8008088:	4603      	mov	r3, r0
 800808a:	e000      	b.n	800808e <f_open+0xca>
 800808c:	2312      	movs	r3, #18
 800808e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008092:	79fb      	ldrb	r3, [r7, #7]
 8008094:	f043 0308 	orr.w	r3, r3, #8
 8008098:	71fb      	strb	r3, [r7, #7]
 800809a:	e010      	b.n	80080be <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800809c:	7ebb      	ldrb	r3, [r7, #26]
 800809e:	f003 0311 	and.w	r3, r3, #17
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d003      	beq.n	80080ae <f_open+0xea>
					res = FR_DENIED;
 80080a6:	2307      	movs	r3, #7
 80080a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80080ac:	e007      	b.n	80080be <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80080ae:	79fb      	ldrb	r3, [r7, #7]
 80080b0:	f003 0304 	and.w	r3, r3, #4
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d002      	beq.n	80080be <f_open+0xfa>
 80080b8:	2308      	movs	r3, #8
 80080ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80080be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d168      	bne.n	8008198 <f_open+0x1d4>
 80080c6:	79fb      	ldrb	r3, [r7, #7]
 80080c8:	f003 0308 	and.w	r3, r3, #8
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d063      	beq.n	8008198 <f_open+0x1d4>
				dw = GET_FATTIME();
 80080d0:	f7fd fe48 	bl	8005d64 <get_fattime>
 80080d4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80080d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080d8:	330e      	adds	r3, #14
 80080da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80080dc:	4618      	mov	r0, r3
 80080de:	f7fe f969 	bl	80063b4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80080e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e4:	3316      	adds	r3, #22
 80080e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7fe f963 	bl	80063b4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80080ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080f0:	330b      	adds	r3, #11
 80080f2:	2220      	movs	r2, #32
 80080f4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080fa:	4611      	mov	r1, r2
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7ff f93b 	bl	8007378 <ld_clust>
 8008102:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008108:	2200      	movs	r2, #0
 800810a:	4618      	mov	r0, r3
 800810c:	f7ff f953 	bl	80073b6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008112:	331c      	adds	r3, #28
 8008114:	2100      	movs	r1, #0
 8008116:	4618      	mov	r0, r3
 8008118:	f7fe f94c 	bl	80063b4 <st_dword>
					fs->wflag = 1;
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	2201      	movs	r2, #1
 8008120:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008124:	2b00      	cmp	r3, #0
 8008126:	d037      	beq.n	8008198 <f_open+0x1d4>
						dw = fs->winsect;
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800812c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800812e:	f107 0314 	add.w	r3, r7, #20
 8008132:	2200      	movs	r2, #0
 8008134:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008136:	4618      	mov	r0, r3
 8008138:	f7fe fe43 	bl	8006dc2 <remove_chain>
 800813c:	4603      	mov	r3, r0
 800813e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008142:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008146:	2b00      	cmp	r3, #0
 8008148:	d126      	bne.n	8008198 <f_open+0x1d4>
							res = move_window(fs, dw);
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800814e:	4618      	mov	r0, r3
 8008150:	f7fe fb8a 	bl	8006868 <move_window>
 8008154:	4603      	mov	r3, r0
 8008156:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800815e:	3a01      	subs	r2, #1
 8008160:	611a      	str	r2, [r3, #16]
 8008162:	e019      	b.n	8008198 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008164:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008168:	2b00      	cmp	r3, #0
 800816a:	d115      	bne.n	8008198 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800816c:	7ebb      	ldrb	r3, [r7, #26]
 800816e:	f003 0310 	and.w	r3, r3, #16
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <f_open+0x1ba>
					res = FR_NO_FILE;
 8008176:	2304      	movs	r3, #4
 8008178:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800817c:	e00c      	b.n	8008198 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800817e:	79fb      	ldrb	r3, [r7, #7]
 8008180:	f003 0302 	and.w	r3, r3, #2
 8008184:	2b00      	cmp	r3, #0
 8008186:	d007      	beq.n	8008198 <f_open+0x1d4>
 8008188:	7ebb      	ldrb	r3, [r7, #26]
 800818a:	f003 0301 	and.w	r3, r3, #1
 800818e:	2b00      	cmp	r3, #0
 8008190:	d002      	beq.n	8008198 <f_open+0x1d4>
						res = FR_DENIED;
 8008192:	2307      	movs	r3, #7
 8008194:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008198:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800819c:	2b00      	cmp	r3, #0
 800819e:	d128      	bne.n	80081f2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80081a0:	79fb      	ldrb	r3, [r7, #7]
 80081a2:	f003 0308 	and.w	r3, r3, #8
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d003      	beq.n	80081b2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80081aa:	79fb      	ldrb	r3, [r7, #7]
 80081ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081b0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80081ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80081c0:	79fb      	ldrb	r3, [r7, #7]
 80081c2:	f023 0301 	bic.w	r3, r3, #1
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	bf14      	ite	ne
 80081ca:	2301      	movne	r3, #1
 80081cc:	2300      	moveq	r3, #0
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	461a      	mov	r2, r3
 80081d2:	f107 0314 	add.w	r3, r7, #20
 80081d6:	4611      	mov	r1, r2
 80081d8:	4618      	mov	r0, r3
 80081da:	f7fe fa13 	bl	8006604 <inc_lock>
 80081de:	4602      	mov	r2, r0
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d102      	bne.n	80081f2 <f_open+0x22e>
 80081ec:	2302      	movs	r3, #2
 80081ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80081f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	f040 80a3 	bne.w	8008342 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008200:	4611      	mov	r1, r2
 8008202:	4618      	mov	r0, r3
 8008204:	f7ff f8b8 	bl	8007378 <ld_clust>
 8008208:	4602      	mov	r2, r0
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800820e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008210:	331c      	adds	r3, #28
 8008212:	4618      	mov	r0, r3
 8008214:	f7fe f890 	bl	8006338 <ld_dword>
 8008218:	4602      	mov	r2, r0
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2200      	movs	r2, #0
 8008222:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008224:	693a      	ldr	r2, [r7, #16]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	88da      	ldrh	r2, [r3, #6]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	79fa      	ldrb	r2, [r7, #7]
 8008236:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2200      	movs	r2, #0
 800823c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2200      	movs	r2, #0
 8008248:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	3330      	adds	r3, #48	; 0x30
 800824e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008252:	2100      	movs	r1, #0
 8008254:	4618      	mov	r0, r3
 8008256:	f7fe f8fa 	bl	800644e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800825a:	79fb      	ldrb	r3, [r7, #7]
 800825c:	f003 0320 	and.w	r3, r3, #32
 8008260:	2b00      	cmp	r3, #0
 8008262:	d06e      	beq.n	8008342 <f_open+0x37e>
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d06a      	beq.n	8008342 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	68da      	ldr	r2, [r3, #12]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	895b      	ldrh	r3, [r3, #10]
 8008278:	461a      	mov	r2, r3
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	899b      	ldrh	r3, [r3, #12]
 800827e:	fb03 f302 	mul.w	r3, r3, r2
 8008282:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	657b      	str	r3, [r7, #84]	; 0x54
 8008290:	e016      	b.n	80082c0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008296:	4618      	mov	r0, r3
 8008298:	f7fe fba3 	bl	80069e2 <get_fat>
 800829c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800829e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d802      	bhi.n	80082aa <f_open+0x2e6>
 80082a4:	2302      	movs	r3, #2
 80082a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80082aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082b0:	d102      	bne.n	80082b8 <f_open+0x2f4>
 80082b2:	2301      	movs	r3, #1
 80082b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80082b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80082ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	657b      	str	r3, [r7, #84]	; 0x54
 80082c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d103      	bne.n	80082d0 <f_open+0x30c>
 80082c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80082ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d8e0      	bhi.n	8008292 <f_open+0x2ce>
				}
				fp->clust = clst;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082d4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80082d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d131      	bne.n	8008342 <f_open+0x37e>
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	899b      	ldrh	r3, [r3, #12]
 80082e2:	461a      	mov	r2, r3
 80082e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80082ea:	fb02 f201 	mul.w	r2, r2, r1
 80082ee:	1a9b      	subs	r3, r3, r2
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d026      	beq.n	8008342 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7fe fb53 	bl	80069a4 <clust2sect>
 80082fe:	6478      	str	r0, [r7, #68]	; 0x44
 8008300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008302:	2b00      	cmp	r3, #0
 8008304:	d103      	bne.n	800830e <f_open+0x34a>
						res = FR_INT_ERR;
 8008306:	2302      	movs	r3, #2
 8008308:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800830c:	e019      	b.n	8008342 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	899b      	ldrh	r3, [r3, #12]
 8008312:	461a      	mov	r2, r3
 8008314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008316:	fbb3 f2f2 	udiv	r2, r3, r2
 800831a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800831c:	441a      	add	r2, r3
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	7858      	ldrb	r0, [r3, #1]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6a1a      	ldr	r2, [r3, #32]
 8008330:	2301      	movs	r3, #1
 8008332:	f7fd ff8b 	bl	800624c <disk_read>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d002      	beq.n	8008342 <f_open+0x37e>
 800833c:	2301      	movs	r3, #1
 800833e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008342:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008346:	2b00      	cmp	r3, #0
 8008348:	d002      	beq.n	8008350 <f_open+0x38c>
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2200      	movs	r2, #0
 800834e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008350:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008354:	4618      	mov	r0, r3
 8008356:	3760      	adds	r7, #96	; 0x60
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b08e      	sub	sp, #56	; 0x38
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	607a      	str	r2, [r7, #4]
 8008368:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	2200      	movs	r2, #0
 8008372:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f107 0214 	add.w	r2, r7, #20
 800837a:	4611      	mov	r1, r2
 800837c:	4618      	mov	r0, r3
 800837e:	f7ff fda5 	bl	8007ecc <validate>
 8008382:	4603      	mov	r3, r0
 8008384:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008388:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800838c:	2b00      	cmp	r3, #0
 800838e:	d107      	bne.n	80083a0 <f_read+0x44>
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	7d5b      	ldrb	r3, [r3, #21]
 8008394:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008398:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800839c:	2b00      	cmp	r3, #0
 800839e:	d002      	beq.n	80083a6 <f_read+0x4a>
 80083a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80083a4:	e135      	b.n	8008612 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	7d1b      	ldrb	r3, [r3, #20]
 80083aa:	f003 0301 	and.w	r3, r3, #1
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d101      	bne.n	80083b6 <f_read+0x5a>
 80083b2:	2307      	movs	r3, #7
 80083b4:	e12d      	b.n	8008612 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	68da      	ldr	r2, [r3, #12]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	699b      	ldr	r3, [r3, #24]
 80083be:	1ad3      	subs	r3, r2, r3
 80083c0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	6a3b      	ldr	r3, [r7, #32]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	f240 811e 	bls.w	8008608 <f_read+0x2ac>
 80083cc:	6a3b      	ldr	r3, [r7, #32]
 80083ce:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80083d0:	e11a      	b.n	8008608 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	699b      	ldr	r3, [r3, #24]
 80083d6:	697a      	ldr	r2, [r7, #20]
 80083d8:	8992      	ldrh	r2, [r2, #12]
 80083da:	fbb3 f1f2 	udiv	r1, r3, r2
 80083de:	fb02 f201 	mul.w	r2, r2, r1
 80083e2:	1a9b      	subs	r3, r3, r2
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f040 80d5 	bne.w	8008594 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	699b      	ldr	r3, [r3, #24]
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	8992      	ldrh	r2, [r2, #12]
 80083f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	8952      	ldrh	r2, [r2, #10]
 80083fa:	3a01      	subs	r2, #1
 80083fc:	4013      	ands	r3, r2
 80083fe:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d12f      	bne.n	8008466 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	699b      	ldr	r3, [r3, #24]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d103      	bne.n	8008416 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	633b      	str	r3, [r7, #48]	; 0x30
 8008414:	e013      	b.n	800843e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841a:	2b00      	cmp	r3, #0
 800841c:	d007      	beq.n	800842e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	4619      	mov	r1, r3
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f7fe fdc9 	bl	8006fbc <clmt_clust>
 800842a:	6338      	str	r0, [r7, #48]	; 0x30
 800842c:	e007      	b.n	800843e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	69db      	ldr	r3, [r3, #28]
 8008434:	4619      	mov	r1, r3
 8008436:	4610      	mov	r0, r2
 8008438:	f7fe fad3 	bl	80069e2 <get_fat>
 800843c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800843e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008440:	2b01      	cmp	r3, #1
 8008442:	d804      	bhi.n	800844e <f_read+0xf2>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2202      	movs	r2, #2
 8008448:	755a      	strb	r2, [r3, #21]
 800844a:	2302      	movs	r3, #2
 800844c:	e0e1      	b.n	8008612 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800844e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008450:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008454:	d104      	bne.n	8008460 <f_read+0x104>
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2201      	movs	r2, #1
 800845a:	755a      	strb	r2, [r3, #21]
 800845c:	2301      	movs	r3, #1
 800845e:	e0d8      	b.n	8008612 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008464:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	69db      	ldr	r3, [r3, #28]
 800846c:	4619      	mov	r1, r3
 800846e:	4610      	mov	r0, r2
 8008470:	f7fe fa98 	bl	80069a4 <clust2sect>
 8008474:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d104      	bne.n	8008486 <f_read+0x12a>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2202      	movs	r2, #2
 8008480:	755a      	strb	r2, [r3, #21]
 8008482:	2302      	movs	r3, #2
 8008484:	e0c5      	b.n	8008612 <f_read+0x2b6>
			sect += csect;
 8008486:	69ba      	ldr	r2, [r7, #24]
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	4413      	add	r3, r2
 800848c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	899b      	ldrh	r3, [r3, #12]
 8008492:	461a      	mov	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	fbb3 f3f2 	udiv	r3, r3, r2
 800849a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800849c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d041      	beq.n	8008526 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80084a2:	69fa      	ldr	r2, [r7, #28]
 80084a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a6:	4413      	add	r3, r2
 80084a8:	697a      	ldr	r2, [r7, #20]
 80084aa:	8952      	ldrh	r2, [r2, #10]
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d905      	bls.n	80084bc <f_read+0x160>
					cc = fs->csize - csect;
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	895b      	ldrh	r3, [r3, #10]
 80084b4:	461a      	mov	r2, r3
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	7858      	ldrb	r0, [r3, #1]
 80084c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c2:	69ba      	ldr	r2, [r7, #24]
 80084c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084c6:	f7fd fec1 	bl	800624c <disk_read>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d004      	beq.n	80084da <f_read+0x17e>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2201      	movs	r2, #1
 80084d4:	755a      	strb	r2, [r3, #21]
 80084d6:	2301      	movs	r3, #1
 80084d8:	e09b      	b.n	8008612 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	7d1b      	ldrb	r3, [r3, #20]
 80084de:	b25b      	sxtb	r3, r3
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	da18      	bge.n	8008516 <f_read+0x1ba>
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6a1a      	ldr	r2, [r3, #32]
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	1ad3      	subs	r3, r2, r3
 80084ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d911      	bls.n	8008516 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6a1a      	ldr	r2, [r3, #32]
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	697a      	ldr	r2, [r7, #20]
 80084fc:	8992      	ldrh	r2, [r2, #12]
 80084fe:	fb02 f303 	mul.w	r3, r2, r3
 8008502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008504:	18d0      	adds	r0, r2, r3
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	899b      	ldrh	r3, [r3, #12]
 8008510:	461a      	mov	r2, r3
 8008512:	f7fd ff7b 	bl	800640c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	899b      	ldrh	r3, [r3, #12]
 800851a:	461a      	mov	r2, r3
 800851c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851e:	fb02 f303 	mul.w	r3, r2, r3
 8008522:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008524:	e05c      	b.n	80085e0 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	69ba      	ldr	r2, [r7, #24]
 800852c:	429a      	cmp	r2, r3
 800852e:	d02e      	beq.n	800858e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	7d1b      	ldrb	r3, [r3, #20]
 8008534:	b25b      	sxtb	r3, r3
 8008536:	2b00      	cmp	r3, #0
 8008538:	da18      	bge.n	800856c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	7858      	ldrb	r0, [r3, #1]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6a1a      	ldr	r2, [r3, #32]
 8008548:	2301      	movs	r3, #1
 800854a:	f7fd fe9f 	bl	800628c <disk_write>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d004      	beq.n	800855e <f_read+0x202>
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2201      	movs	r2, #1
 8008558:	755a      	strb	r2, [r3, #21]
 800855a:	2301      	movs	r3, #1
 800855c:	e059      	b.n	8008612 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	7d1b      	ldrb	r3, [r3, #20]
 8008562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008566:	b2da      	uxtb	r2, r3
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	7858      	ldrb	r0, [r3, #1]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008576:	2301      	movs	r3, #1
 8008578:	69ba      	ldr	r2, [r7, #24]
 800857a:	f7fd fe67 	bl	800624c <disk_read>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d004      	beq.n	800858e <f_read+0x232>
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2201      	movs	r2, #1
 8008588:	755a      	strb	r2, [r3, #21]
 800858a:	2301      	movs	r3, #1
 800858c:	e041      	b.n	8008612 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	69ba      	ldr	r2, [r7, #24]
 8008592:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	899b      	ldrh	r3, [r3, #12]
 8008598:	4618      	mov	r0, r3
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	697a      	ldr	r2, [r7, #20]
 80085a0:	8992      	ldrh	r2, [r2, #12]
 80085a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80085a6:	fb02 f201 	mul.w	r2, r2, r1
 80085aa:	1a9b      	subs	r3, r3, r2
 80085ac:	1ac3      	subs	r3, r0, r3
 80085ae:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80085b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d901      	bls.n	80085bc <f_read+0x260>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	697a      	ldr	r2, [r7, #20]
 80085c8:	8992      	ldrh	r2, [r2, #12]
 80085ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80085ce:	fb02 f200 	mul.w	r2, r2, r0
 80085d2:	1a9b      	subs	r3, r3, r2
 80085d4:	440b      	add	r3, r1
 80085d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085d8:	4619      	mov	r1, r3
 80085da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085dc:	f7fd ff16 	bl	800640c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80085e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e4:	4413      	add	r3, r2
 80085e6:	627b      	str	r3, [r7, #36]	; 0x24
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	699a      	ldr	r2, [r3, #24]
 80085ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ee:	441a      	add	r2, r3
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	619a      	str	r2, [r3, #24]
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fa:	441a      	add	r2, r3
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	601a      	str	r2, [r3, #0]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2b00      	cmp	r3, #0
 800860c:	f47f aee1 	bne.w	80083d2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3738      	adds	r7, #56	; 0x38
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b08c      	sub	sp, #48	; 0x30
 800861e:	af00      	add	r7, sp, #0
 8008620:	60f8      	str	r0, [r7, #12]
 8008622:	60b9      	str	r1, [r7, #8]
 8008624:	607a      	str	r2, [r7, #4]
 8008626:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	2200      	movs	r2, #0
 8008630:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f107 0210 	add.w	r2, r7, #16
 8008638:	4611      	mov	r1, r2
 800863a:	4618      	mov	r0, r3
 800863c:	f7ff fc46 	bl	8007ecc <validate>
 8008640:	4603      	mov	r3, r0
 8008642:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008646:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800864a:	2b00      	cmp	r3, #0
 800864c:	d107      	bne.n	800865e <f_write+0x44>
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	7d5b      	ldrb	r3, [r3, #21]
 8008652:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008656:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800865a:	2b00      	cmp	r3, #0
 800865c:	d002      	beq.n	8008664 <f_write+0x4a>
 800865e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008662:	e16a      	b.n	800893a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	7d1b      	ldrb	r3, [r3, #20]
 8008668:	f003 0302 	and.w	r3, r3, #2
 800866c:	2b00      	cmp	r3, #0
 800866e:	d101      	bne.n	8008674 <f_write+0x5a>
 8008670:	2307      	movs	r3, #7
 8008672:	e162      	b.n	800893a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	699a      	ldr	r2, [r3, #24]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	441a      	add	r2, r3
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	699b      	ldr	r3, [r3, #24]
 8008680:	429a      	cmp	r2, r3
 8008682:	f080 814c 	bcs.w	800891e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	699b      	ldr	r3, [r3, #24]
 800868a:	43db      	mvns	r3, r3
 800868c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800868e:	e146      	b.n	800891e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	699b      	ldr	r3, [r3, #24]
 8008694:	693a      	ldr	r2, [r7, #16]
 8008696:	8992      	ldrh	r2, [r2, #12]
 8008698:	fbb3 f1f2 	udiv	r1, r3, r2
 800869c:	fb02 f201 	mul.w	r2, r2, r1
 80086a0:	1a9b      	subs	r3, r3, r2
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	f040 80f1 	bne.w	800888a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	699b      	ldr	r3, [r3, #24]
 80086ac:	693a      	ldr	r2, [r7, #16]
 80086ae:	8992      	ldrh	r2, [r2, #12]
 80086b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80086b4:	693a      	ldr	r2, [r7, #16]
 80086b6:	8952      	ldrh	r2, [r2, #10]
 80086b8:	3a01      	subs	r2, #1
 80086ba:	4013      	ands	r3, r2
 80086bc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d143      	bne.n	800874c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	699b      	ldr	r3, [r3, #24]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d10c      	bne.n	80086e6 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80086d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d11a      	bne.n	800870e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2100      	movs	r1, #0
 80086dc:	4618      	mov	r0, r3
 80086de:	f7fe fbd5 	bl	8006e8c <create_chain>
 80086e2:	62b8      	str	r0, [r7, #40]	; 0x28
 80086e4:	e013      	b.n	800870e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d007      	beq.n	80086fe <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	699b      	ldr	r3, [r3, #24]
 80086f2:	4619      	mov	r1, r3
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f7fe fc61 	bl	8006fbc <clmt_clust>
 80086fa:	62b8      	str	r0, [r7, #40]	; 0x28
 80086fc:	e007      	b.n	800870e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80086fe:	68fa      	ldr	r2, [r7, #12]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	69db      	ldr	r3, [r3, #28]
 8008704:	4619      	mov	r1, r3
 8008706:	4610      	mov	r0, r2
 8008708:	f7fe fbc0 	bl	8006e8c <create_chain>
 800870c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800870e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008710:	2b00      	cmp	r3, #0
 8008712:	f000 8109 	beq.w	8008928 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008718:	2b01      	cmp	r3, #1
 800871a:	d104      	bne.n	8008726 <f_write+0x10c>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2202      	movs	r2, #2
 8008720:	755a      	strb	r2, [r3, #21]
 8008722:	2302      	movs	r3, #2
 8008724:	e109      	b.n	800893a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008728:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800872c:	d104      	bne.n	8008738 <f_write+0x11e>
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2201      	movs	r2, #1
 8008732:	755a      	strb	r2, [r3, #21]
 8008734:	2301      	movs	r3, #1
 8008736:	e100      	b.n	800893a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800873c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d102      	bne.n	800874c <f_write+0x132>
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800874a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	7d1b      	ldrb	r3, [r3, #20]
 8008750:	b25b      	sxtb	r3, r3
 8008752:	2b00      	cmp	r3, #0
 8008754:	da18      	bge.n	8008788 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	7858      	ldrb	r0, [r3, #1]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6a1a      	ldr	r2, [r3, #32]
 8008764:	2301      	movs	r3, #1
 8008766:	f7fd fd91 	bl	800628c <disk_write>
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d004      	beq.n	800877a <f_write+0x160>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2201      	movs	r2, #1
 8008774:	755a      	strb	r2, [r3, #21]
 8008776:	2301      	movs	r3, #1
 8008778:	e0df      	b.n	800893a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	7d1b      	ldrb	r3, [r3, #20]
 800877e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008782:	b2da      	uxtb	r2, r3
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008788:	693a      	ldr	r2, [r7, #16]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	69db      	ldr	r3, [r3, #28]
 800878e:	4619      	mov	r1, r3
 8008790:	4610      	mov	r0, r2
 8008792:	f7fe f907 	bl	80069a4 <clust2sect>
 8008796:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d104      	bne.n	80087a8 <f_write+0x18e>
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2202      	movs	r2, #2
 80087a2:	755a      	strb	r2, [r3, #21]
 80087a4:	2302      	movs	r3, #2
 80087a6:	e0c8      	b.n	800893a <f_write+0x320>
			sect += csect;
 80087a8:	697a      	ldr	r2, [r7, #20]
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	4413      	add	r3, r2
 80087ae:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	899b      	ldrh	r3, [r3, #12]
 80087b4:	461a      	mov	r2, r3
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80087bc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80087be:	6a3b      	ldr	r3, [r7, #32]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d043      	beq.n	800884c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80087c4:	69ba      	ldr	r2, [r7, #24]
 80087c6:	6a3b      	ldr	r3, [r7, #32]
 80087c8:	4413      	add	r3, r2
 80087ca:	693a      	ldr	r2, [r7, #16]
 80087cc:	8952      	ldrh	r2, [r2, #10]
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d905      	bls.n	80087de <f_write+0x1c4>
					cc = fs->csize - csect;
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	895b      	ldrh	r3, [r3, #10]
 80087d6:	461a      	mov	r2, r3
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	7858      	ldrb	r0, [r3, #1]
 80087e2:	6a3b      	ldr	r3, [r7, #32]
 80087e4:	697a      	ldr	r2, [r7, #20]
 80087e6:	69f9      	ldr	r1, [r7, #28]
 80087e8:	f7fd fd50 	bl	800628c <disk_write>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d004      	beq.n	80087fc <f_write+0x1e2>
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2201      	movs	r2, #1
 80087f6:	755a      	strb	r2, [r3, #21]
 80087f8:	2301      	movs	r3, #1
 80087fa:	e09e      	b.n	800893a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6a1a      	ldr	r2, [r3, #32]
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	1ad3      	subs	r3, r2, r3
 8008804:	6a3a      	ldr	r2, [r7, #32]
 8008806:	429a      	cmp	r2, r3
 8008808:	d918      	bls.n	800883c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6a1a      	ldr	r2, [r3, #32]
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	693a      	ldr	r2, [r7, #16]
 800881a:	8992      	ldrh	r2, [r2, #12]
 800881c:	fb02 f303 	mul.w	r3, r2, r3
 8008820:	69fa      	ldr	r2, [r7, #28]
 8008822:	18d1      	adds	r1, r2, r3
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	899b      	ldrh	r3, [r3, #12]
 8008828:	461a      	mov	r2, r3
 800882a:	f7fd fdef 	bl	800640c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	7d1b      	ldrb	r3, [r3, #20]
 8008832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008836:	b2da      	uxtb	r2, r3
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	899b      	ldrh	r3, [r3, #12]
 8008840:	461a      	mov	r2, r3
 8008842:	6a3b      	ldr	r3, [r7, #32]
 8008844:	fb02 f303 	mul.w	r3, r2, r3
 8008848:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800884a:	e04b      	b.n	80088e4 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6a1b      	ldr	r3, [r3, #32]
 8008850:	697a      	ldr	r2, [r7, #20]
 8008852:	429a      	cmp	r2, r3
 8008854:	d016      	beq.n	8008884 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	699a      	ldr	r2, [r3, #24]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800885e:	429a      	cmp	r2, r3
 8008860:	d210      	bcs.n	8008884 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	7858      	ldrb	r0, [r3, #1]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800886c:	2301      	movs	r3, #1
 800886e:	697a      	ldr	r2, [r7, #20]
 8008870:	f7fd fcec 	bl	800624c <disk_read>
 8008874:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008876:	2b00      	cmp	r3, #0
 8008878:	d004      	beq.n	8008884 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2201      	movs	r2, #1
 800887e:	755a      	strb	r2, [r3, #21]
 8008880:	2301      	movs	r3, #1
 8008882:	e05a      	b.n	800893a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	697a      	ldr	r2, [r7, #20]
 8008888:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	899b      	ldrh	r3, [r3, #12]
 800888e:	4618      	mov	r0, r3
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	699b      	ldr	r3, [r3, #24]
 8008894:	693a      	ldr	r2, [r7, #16]
 8008896:	8992      	ldrh	r2, [r2, #12]
 8008898:	fbb3 f1f2 	udiv	r1, r3, r2
 800889c:	fb02 f201 	mul.w	r2, r2, r1
 80088a0:	1a9b      	subs	r3, r3, r2
 80088a2:	1ac3      	subs	r3, r0, r3
 80088a4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80088a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d901      	bls.n	80088b2 <f_write+0x298>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	699b      	ldr	r3, [r3, #24]
 80088bc:	693a      	ldr	r2, [r7, #16]
 80088be:	8992      	ldrh	r2, [r2, #12]
 80088c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80088c4:	fb02 f200 	mul.w	r2, r2, r0
 80088c8:	1a9b      	subs	r3, r3, r2
 80088ca:	440b      	add	r3, r1
 80088cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ce:	69f9      	ldr	r1, [r7, #28]
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7fd fd9b 	bl	800640c <mem_cpy>
		fp->flag |= FA_DIRTY;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	7d1b      	ldrb	r3, [r3, #20]
 80088da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80088de:	b2da      	uxtb	r2, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80088e4:	69fa      	ldr	r2, [r7, #28]
 80088e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e8:	4413      	add	r3, r2
 80088ea:	61fb      	str	r3, [r7, #28]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	699a      	ldr	r2, [r3, #24]
 80088f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f2:	441a      	add	r2, r3
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	619a      	str	r2, [r3, #24]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	68da      	ldr	r2, [r3, #12]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	699b      	ldr	r3, [r3, #24]
 8008900:	429a      	cmp	r2, r3
 8008902:	bf38      	it	cc
 8008904:	461a      	movcc	r2, r3
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	60da      	str	r2, [r3, #12]
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008910:	441a      	add	r2, r3
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	601a      	str	r2, [r3, #0]
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891a:	1ad3      	subs	r3, r2, r3
 800891c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2b00      	cmp	r3, #0
 8008922:	f47f aeb5 	bne.w	8008690 <f_write+0x76>
 8008926:	e000      	b.n	800892a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008928:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	7d1b      	ldrb	r3, [r3, #20]
 800892e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008932:	b2da      	uxtb	r2, r3
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3730      	adds	r7, #48	; 0x30
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b086      	sub	sp, #24
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f107 0208 	add.w	r2, r7, #8
 8008950:	4611      	mov	r1, r2
 8008952:	4618      	mov	r0, r3
 8008954:	f7ff faba 	bl	8007ecc <validate>
 8008958:	4603      	mov	r3, r0
 800895a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800895c:	7dfb      	ldrb	r3, [r7, #23]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d168      	bne.n	8008a34 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	7d1b      	ldrb	r3, [r3, #20]
 8008966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800896a:	2b00      	cmp	r3, #0
 800896c:	d062      	beq.n	8008a34 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	7d1b      	ldrb	r3, [r3, #20]
 8008972:	b25b      	sxtb	r3, r3
 8008974:	2b00      	cmp	r3, #0
 8008976:	da15      	bge.n	80089a4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	7858      	ldrb	r0, [r3, #1]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a1a      	ldr	r2, [r3, #32]
 8008986:	2301      	movs	r3, #1
 8008988:	f7fd fc80 	bl	800628c <disk_write>
 800898c:	4603      	mov	r3, r0
 800898e:	2b00      	cmp	r3, #0
 8008990:	d001      	beq.n	8008996 <f_sync+0x54>
 8008992:	2301      	movs	r3, #1
 8008994:	e04f      	b.n	8008a36 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	7d1b      	ldrb	r3, [r3, #20]
 800899a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800899e:	b2da      	uxtb	r2, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80089a4:	f7fd f9de 	bl	8005d64 <get_fattime>
 80089a8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80089aa:	68ba      	ldr	r2, [r7, #8]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b0:	4619      	mov	r1, r3
 80089b2:	4610      	mov	r0, r2
 80089b4:	f7fd ff58 	bl	8006868 <move_window>
 80089b8:	4603      	mov	r3, r0
 80089ba:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80089bc:	7dfb      	ldrb	r3, [r7, #23]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d138      	bne.n	8008a34 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	330b      	adds	r3, #11
 80089cc:	781a      	ldrb	r2, [r3, #0]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	330b      	adds	r3, #11
 80089d2:	f042 0220 	orr.w	r2, r2, #32
 80089d6:	b2d2      	uxtb	r2, r2
 80089d8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6818      	ldr	r0, [r3, #0]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	461a      	mov	r2, r3
 80089e4:	68f9      	ldr	r1, [r7, #12]
 80089e6:	f7fe fce6 	bl	80073b6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f103 021c 	add.w	r2, r3, #28
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	4619      	mov	r1, r3
 80089f6:	4610      	mov	r0, r2
 80089f8:	f7fd fcdc 	bl	80063b4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	3316      	adds	r3, #22
 8008a00:	6939      	ldr	r1, [r7, #16]
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7fd fcd6 	bl	80063b4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	3312      	adds	r3, #18
 8008a0c:	2100      	movs	r1, #0
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f7fd fcb5 	bl	800637e <st_word>
					fs->wflag = 1;
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	2201      	movs	r2, #1
 8008a18:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7fd ff51 	bl	80068c4 <sync_fs>
 8008a22:	4603      	mov	r3, r0
 8008a24:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	7d1b      	ldrb	r3, [r3, #20]
 8008a2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a2e:	b2da      	uxtb	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3718      	adds	r7, #24
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b084      	sub	sp, #16
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f7ff ff7b 	bl	8008942 <f_sync>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008a50:	7bfb      	ldrb	r3, [r7, #15]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d118      	bne.n	8008a88 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f107 0208 	add.w	r2, r7, #8
 8008a5c:	4611      	mov	r1, r2
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7ff fa34 	bl	8007ecc <validate>
 8008a64:	4603      	mov	r3, r0
 8008a66:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008a68:	7bfb      	ldrb	r3, [r7, #15]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d10c      	bne.n	8008a88 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	691b      	ldr	r3, [r3, #16]
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7fd fe54 	bl	8006720 <dec_lock>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008a7c:	7bfb      	ldrb	r3, [r7, #15]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d102      	bne.n	8008a88 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3710      	adds	r7, #16
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b090      	sub	sp, #64	; 0x40
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
 8008a9a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f107 0208 	add.w	r2, r7, #8
 8008aa2:	4611      	mov	r1, r2
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7ff fa11 	bl	8007ecc <validate>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8008ab0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d103      	bne.n	8008ac0 <f_lseek+0x2e>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	7d5b      	ldrb	r3, [r3, #21]
 8008abc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8008ac0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d002      	beq.n	8008ace <f_lseek+0x3c>
 8008ac8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008acc:	e201      	b.n	8008ed2 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	f000 80d9 	beq.w	8008c8a <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ade:	d15a      	bne.n	8008b96 <f_lseek+0x104>
			tbl = fp->cltbl;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae4:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae8:	1d1a      	adds	r2, r3, #4
 8008aea:	627a      	str	r2, [r7, #36]	; 0x24
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	617b      	str	r3, [r7, #20]
 8008af0:	2302      	movs	r3, #2
 8008af2:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8008afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d03a      	beq.n	8008b76 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b02:	613b      	str	r3, [r7, #16]
 8008b04:	2300      	movs	r3, #0
 8008b06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0a:	3302      	adds	r3, #2
 8008b0c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8008b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b10:	60fb      	str	r3, [r7, #12]
 8008b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b14:	3301      	adds	r3, #1
 8008b16:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7fd ff60 	bl	80069e2 <get_fat>
 8008b22:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8008b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d804      	bhi.n	8008b34 <f_lseek+0xa2>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2202      	movs	r2, #2
 8008b2e:	755a      	strb	r2, [r3, #21]
 8008b30:	2302      	movs	r3, #2
 8008b32:	e1ce      	b.n	8008ed2 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b3a:	d104      	bne.n	8008b46 <f_lseek+0xb4>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	755a      	strb	r2, [r3, #21]
 8008b42:	2301      	movs	r3, #1
 8008b44:	e1c5      	b.n	8008ed2 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d0de      	beq.n	8008b0e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d809      	bhi.n	8008b6c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8008b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5a:	1d1a      	adds	r2, r3, #4
 8008b5c:	627a      	str	r2, [r7, #36]	; 0x24
 8008b5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b60:	601a      	str	r2, [r3, #0]
 8008b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b64:	1d1a      	adds	r2, r3, #4
 8008b66:	627a      	str	r2, [r7, #36]	; 0x24
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	699b      	ldr	r3, [r3, #24]
 8008b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d3c4      	bcc.n	8008b00 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b7c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8008b7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d803      	bhi.n	8008b8e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8008b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b88:	2200      	movs	r2, #0
 8008b8a:	601a      	str	r2, [r3, #0]
 8008b8c:	e19f      	b.n	8008ece <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008b8e:	2311      	movs	r3, #17
 8008b90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008b94:	e19b      	b.n	8008ece <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	683a      	ldr	r2, [r7, #0]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d902      	bls.n	8008ba6 <f_lseek+0x114>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	683a      	ldr	r2, [r7, #0]
 8008baa:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	f000 818d 	beq.w	8008ece <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	3b01      	subs	r3, #1
 8008bb8:	4619      	mov	r1, r3
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f7fe f9fe 	bl	8006fbc <clmt_clust>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8008bc6:	68ba      	ldr	r2, [r7, #8]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	69db      	ldr	r3, [r3, #28]
 8008bcc:	4619      	mov	r1, r3
 8008bce:	4610      	mov	r0, r2
 8008bd0:	f7fd fee8 	bl	80069a4 <clust2sect>
 8008bd4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d104      	bne.n	8008be6 <f_lseek+0x154>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2202      	movs	r2, #2
 8008be0:	755a      	strb	r2, [r3, #21]
 8008be2:	2302      	movs	r3, #2
 8008be4:	e175      	b.n	8008ed2 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	3b01      	subs	r3, #1
 8008bea:	68ba      	ldr	r2, [r7, #8]
 8008bec:	8992      	ldrh	r2, [r2, #12]
 8008bee:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bf2:	68ba      	ldr	r2, [r7, #8]
 8008bf4:	8952      	ldrh	r2, [r2, #10]
 8008bf6:	3a01      	subs	r2, #1
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	69ba      	ldr	r2, [r7, #24]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	699b      	ldr	r3, [r3, #24]
 8008c04:	68ba      	ldr	r2, [r7, #8]
 8008c06:	8992      	ldrh	r2, [r2, #12]
 8008c08:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c0c:	fb02 f201 	mul.w	r2, r2, r1
 8008c10:	1a9b      	subs	r3, r3, r2
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	f000 815b 	beq.w	8008ece <f_lseek+0x43c>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6a1b      	ldr	r3, [r3, #32]
 8008c1c:	69ba      	ldr	r2, [r7, #24]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	f000 8155 	beq.w	8008ece <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	7d1b      	ldrb	r3, [r3, #20]
 8008c28:	b25b      	sxtb	r3, r3
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	da18      	bge.n	8008c60 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	7858      	ldrb	r0, [r3, #1]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6a1a      	ldr	r2, [r3, #32]
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	f7fd fb25 	bl	800628c <disk_write>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d004      	beq.n	8008c52 <f_lseek+0x1c0>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	755a      	strb	r2, [r3, #21]
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e13f      	b.n	8008ed2 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	7d1b      	ldrb	r3, [r3, #20]
 8008c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c5a:	b2da      	uxtb	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	7858      	ldrb	r0, [r3, #1]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	69ba      	ldr	r2, [r7, #24]
 8008c6e:	f7fd faed 	bl	800624c <disk_read>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d004      	beq.n	8008c82 <f_lseek+0x1f0>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	755a      	strb	r2, [r3, #21]
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e127      	b.n	8008ed2 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	69ba      	ldr	r2, [r7, #24]
 8008c86:	621a      	str	r2, [r3, #32]
 8008c88:	e121      	b.n	8008ece <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	683a      	ldr	r2, [r7, #0]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d908      	bls.n	8008ca6 <f_lseek+0x214>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	7d1b      	ldrb	r3, [r3, #20]
 8008c98:	f003 0302 	and.w	r3, r3, #2
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d102      	bne.n	8008ca6 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	699b      	ldr	r3, [r3, #24]
 8008caa:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008cac:	2300      	movs	r3, #0
 8008cae:	637b      	str	r3, [r7, #52]	; 0x34
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cb4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f000 80b5 	beq.w	8008e28 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	895b      	ldrh	r3, [r3, #10]
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	899b      	ldrh	r3, [r3, #12]
 8008cc8:	fb03 f302 	mul.w	r3, r3, r2
 8008ccc:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008cce:	6a3b      	ldr	r3, [r7, #32]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d01b      	beq.n	8008d0c <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	1e5a      	subs	r2, r3, #1
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	fbb2 f2f3 	udiv	r2, r2, r3
 8008cde:	6a3b      	ldr	r3, [r7, #32]
 8008ce0:	1e59      	subs	r1, r3, #1
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d30f      	bcc.n	8008d0c <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008cec:	6a3b      	ldr	r3, [r7, #32]
 8008cee:	1e5a      	subs	r2, r3, #1
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	425b      	negs	r3, r3
 8008cf4:	401a      	ands	r2, r3
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	699b      	ldr	r3, [r3, #24]
 8008cfe:	683a      	ldr	r2, [r7, #0]
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	69db      	ldr	r3, [r3, #28]
 8008d08:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d0a:	e022      	b.n	8008d52 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d119      	bne.n	8008d4c <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2100      	movs	r1, #0
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f7fe f8b5 	bl	8006e8c <create_chain>
 8008d22:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d104      	bne.n	8008d34 <f_lseek+0x2a2>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2202      	movs	r2, #2
 8008d2e:	755a      	strb	r2, [r3, #21]
 8008d30:	2302      	movs	r3, #2
 8008d32:	e0ce      	b.n	8008ed2 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d3a:	d104      	bne.n	8008d46 <f_lseek+0x2b4>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	755a      	strb	r2, [r3, #21]
 8008d42:	2301      	movs	r3, #1
 8008d44:	e0c5      	b.n	8008ed2 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d4a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d50:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8008d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d067      	beq.n	8008e28 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8008d58:	e03a      	b.n	8008dd0 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8008d5a:	683a      	ldr	r2, [r7, #0]
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	1ad3      	subs	r3, r2, r3
 8008d60:	603b      	str	r3, [r7, #0]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	699a      	ldr	r2, [r3, #24]
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	441a      	add	r2, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	7d1b      	ldrb	r3, [r3, #20]
 8008d72:	f003 0302 	and.w	r3, r3, #2
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00b      	beq.n	8008d92 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7fe f884 	bl	8006e8c <create_chain>
 8008d84:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8008d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d108      	bne.n	8008d9e <f_lseek+0x30c>
							ofs = 0; break;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	603b      	str	r3, [r7, #0]
 8008d90:	e022      	b.n	8008dd8 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7fd fe23 	bl	80069e2 <get_fat>
 8008d9c:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008da4:	d104      	bne.n	8008db0 <f_lseek+0x31e>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2201      	movs	r2, #1
 8008daa:	755a      	strb	r2, [r3, #21]
 8008dac:	2301      	movs	r3, #1
 8008dae:	e090      	b.n	8008ed2 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8008db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d904      	bls.n	8008dc0 <f_lseek+0x32e>
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	699b      	ldr	r3, [r3, #24]
 8008dba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d304      	bcc.n	8008dca <f_lseek+0x338>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2202      	movs	r2, #2
 8008dc4:	755a      	strb	r2, [r3, #21]
 8008dc6:	2302      	movs	r3, #2
 8008dc8:	e083      	b.n	8008ed2 <f_lseek+0x440>
					fp->clust = clst;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dce:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8008dd0:	683a      	ldr	r2, [r7, #0]
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d8c0      	bhi.n	8008d5a <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	699a      	ldr	r2, [r3, #24]
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	441a      	add	r2, r3
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	899b      	ldrh	r3, [r3, #12]
 8008de8:	461a      	mov	r2, r3
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	fbb3 f1f2 	udiv	r1, r3, r2
 8008df0:	fb02 f201 	mul.w	r2, r2, r1
 8008df4:	1a9b      	subs	r3, r3, r2
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d016      	beq.n	8008e28 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7fd fdd0 	bl	80069a4 <clust2sect>
 8008e04:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8008e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d104      	bne.n	8008e16 <f_lseek+0x384>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2202      	movs	r2, #2
 8008e10:	755a      	strb	r2, [r3, #21]
 8008e12:	2302      	movs	r3, #2
 8008e14:	e05d      	b.n	8008ed2 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	899b      	ldrh	r3, [r3, #12]
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e24:	4413      	add	r3, r2
 8008e26:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	699a      	ldr	r2, [r3, #24]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d90a      	bls.n	8008e4a <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	699a      	ldr	r2, [r3, #24]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	7d1b      	ldrb	r3, [r3, #20]
 8008e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e44:	b2da      	uxtb	r2, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	699b      	ldr	r3, [r3, #24]
 8008e4e:	68ba      	ldr	r2, [r7, #8]
 8008e50:	8992      	ldrh	r2, [r2, #12]
 8008e52:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e56:	fb02 f201 	mul.w	r2, r2, r1
 8008e5a:	1a9b      	subs	r3, r3, r2
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d036      	beq.n	8008ece <f_lseek+0x43c>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6a1b      	ldr	r3, [r3, #32]
 8008e64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d031      	beq.n	8008ece <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	7d1b      	ldrb	r3, [r3, #20]
 8008e6e:	b25b      	sxtb	r3, r3
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	da18      	bge.n	8008ea6 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	7858      	ldrb	r0, [r3, #1]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6a1a      	ldr	r2, [r3, #32]
 8008e82:	2301      	movs	r3, #1
 8008e84:	f7fd fa02 	bl	800628c <disk_write>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d004      	beq.n	8008e98 <f_lseek+0x406>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2201      	movs	r2, #1
 8008e92:	755a      	strb	r2, [r3, #21]
 8008e94:	2301      	movs	r3, #1
 8008e96:	e01c      	b.n	8008ed2 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	7d1b      	ldrb	r3, [r3, #20]
 8008e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ea0:	b2da      	uxtb	r2, r3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	7858      	ldrb	r0, [r3, #1]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008eb4:	f7fd f9ca 	bl	800624c <disk_read>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d004      	beq.n	8008ec8 <f_lseek+0x436>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	755a      	strb	r2, [r3, #21]
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e004      	b.n	8008ed2 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ecc:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8008ece:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3740      	adds	r7, #64	; 0x40
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b086      	sub	sp, #24
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
 8008ee2:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d101      	bne.n	8008eee <f_opendir+0x14>
 8008eea:	2309      	movs	r3, #9
 8008eec:	e064      	b.n	8008fb8 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8008ef2:	f107 010c 	add.w	r1, r7, #12
 8008ef6:	463b      	mov	r3, r7
 8008ef8:	2200      	movs	r2, #0
 8008efa:	4618      	mov	r0, r3
 8008efc:	f7fe fd62 	bl	80079c4 <find_volume>
 8008f00:	4603      	mov	r3, r0
 8008f02:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008f04:	7dfb      	ldrb	r3, [r7, #23]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d14f      	bne.n	8008faa <f_opendir+0xd0>
		obj->fs = fs;
 8008f0a:	68fa      	ldr	r2, [r7, #12]
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	4619      	mov	r1, r3
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f7fe fc45 	bl	80077a4 <follow_path>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8008f1e:	7dfb      	ldrb	r3, [r7, #23]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d13d      	bne.n	8008fa0 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008f2a:	b25b      	sxtb	r3, r3
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	db12      	blt.n	8008f56 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	799b      	ldrb	r3, [r3, #6]
 8008f34:	f003 0310 	and.w	r3, r3, #16
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00a      	beq.n	8008f52 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8008f3c:	68fa      	ldr	r2, [r7, #12]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a1b      	ldr	r3, [r3, #32]
 8008f42:	4619      	mov	r1, r3
 8008f44:	4610      	mov	r0, r2
 8008f46:	f7fe fa17 	bl	8007378 <ld_clust>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	609a      	str	r2, [r3, #8]
 8008f50:	e001      	b.n	8008f56 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8008f52:	2305      	movs	r3, #5
 8008f54:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8008f56:	7dfb      	ldrb	r3, [r7, #23]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d121      	bne.n	8008fa0 <f_opendir+0xc6>
				obj->id = fs->id;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	88da      	ldrh	r2, [r3, #6]
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8008f64:	2100      	movs	r1, #0
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f7fe f860 	bl	800702c <dir_sdi>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8008f70:	7dfb      	ldrb	r3, [r7, #23]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d114      	bne.n	8008fa0 <f_opendir+0xc6>
					if (obj->sclust) {
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00d      	beq.n	8008f9a <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8008f7e:	2100      	movs	r1, #0
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f7fd fb3f 	bl	8006604 <inc_lock>
 8008f86:	4602      	mov	r2, r0
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	691b      	ldr	r3, [r3, #16]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d105      	bne.n	8008fa0 <f_opendir+0xc6>
 8008f94:	2312      	movs	r3, #18
 8008f96:	75fb      	strb	r3, [r7, #23]
 8008f98:	e002      	b.n	8008fa0 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8008fa0:	7dfb      	ldrb	r3, [r7, #23]
 8008fa2:	2b04      	cmp	r3, #4
 8008fa4:	d101      	bne.n	8008faa <f_opendir+0xd0>
 8008fa6:	2305      	movs	r3, #5
 8008fa8:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8008faa:	7dfb      	ldrb	r3, [r7, #23]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d002      	beq.n	8008fb6 <f_opendir+0xdc>
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3718      	adds	r7, #24
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f107 0208 	add.w	r2, r7, #8
 8008fd0:	4611      	mov	r1, r2
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7fe ff7a 	bl	8007ecc <validate>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008fdc:	7bfb      	ldrb	r3, [r7, #15]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d126      	bne.n	8009030 <f_readdir+0x70>
		if (!fno) {
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d106      	bne.n	8008ff6 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8008fe8:	2100      	movs	r1, #0
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f7fe f81e 	bl	800702c <dir_sdi>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	73fb      	strb	r3, [r7, #15]
 8008ff4:	e01c      	b.n	8009030 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8008ff6:	2100      	movs	r1, #0
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f7fe f9fc 	bl	80073f6 <dir_read>
 8008ffe:	4603      	mov	r3, r0
 8009000:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8009002:	7bfb      	ldrb	r3, [r7, #15]
 8009004:	2b04      	cmp	r3, #4
 8009006:	d101      	bne.n	800900c <f_readdir+0x4c>
 8009008:	2300      	movs	r3, #0
 800900a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800900c:	7bfb      	ldrb	r3, [r7, #15]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d10e      	bne.n	8009030 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8009012:	6839      	ldr	r1, [r7, #0]
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f7fe fad2 	bl	80075be <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800901a:	2100      	movs	r1, #0
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f7fe f88e 	bl	800713e <dir_next>
 8009022:	4603      	mov	r3, r0
 8009024:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8009026:	7bfb      	ldrb	r3, [r7, #15]
 8009028:	2b04      	cmp	r3, #4
 800902a:	d101      	bne.n	8009030 <f_readdir+0x70>
 800902c:	2300      	movs	r3, #0
 800902e:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8009030:	7bfb      	ldrb	r3, [r7, #15]
}
 8009032:	4618      	mov	r0, r3
 8009034:	3710      	adds	r7, #16
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b090      	sub	sp, #64	; 0x40
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
 8009042:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8009044:	f107 010c 	add.w	r1, r7, #12
 8009048:	1d3b      	adds	r3, r7, #4
 800904a:	2200      	movs	r2, #0
 800904c:	4618      	mov	r0, r3
 800904e:	f7fe fcb9 	bl	80079c4 <find_volume>
 8009052:	4603      	mov	r3, r0
 8009054:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8009058:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800905c:	2b00      	cmp	r3, #0
 800905e:	d11f      	bne.n	80090a0 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	f107 030c 	add.w	r3, r7, #12
 8009066:	4611      	mov	r1, r2
 8009068:	4618      	mov	r0, r3
 800906a:	f7fe fb9b 	bl	80077a4 <follow_path>
 800906e:	4603      	mov	r3, r0
 8009070:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8009074:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009078:	2b00      	cmp	r3, #0
 800907a:	d111      	bne.n	80090a0 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800907c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009080:	b25b      	sxtb	r3, r3
 8009082:	2b00      	cmp	r3, #0
 8009084:	da03      	bge.n	800908e <f_stat+0x54>
				res = FR_INVALID_NAME;
 8009086:	2306      	movs	r3, #6
 8009088:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800908c:	e008      	b.n	80090a0 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d005      	beq.n	80090a0 <f_stat+0x66>
 8009094:	f107 030c 	add.w	r3, r7, #12
 8009098:	6839      	ldr	r1, [r7, #0]
 800909a:	4618      	mov	r0, r3
 800909c:	f7fe fa8f 	bl	80075be <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 80090a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3740      	adds	r7, #64	; 0x40
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b092      	sub	sp, #72	; 0x48
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80090b8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80090bc:	f107 030c 	add.w	r3, r7, #12
 80090c0:	2200      	movs	r2, #0
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7fe fc7e 	bl	80079c4 <find_volume>
 80090c8:	4603      	mov	r3, r0
 80090ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80090ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	f040 8099 	bne.w	800920a <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80090d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80090de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e0:	695a      	ldr	r2, [r3, #20]
 80090e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e4:	699b      	ldr	r3, [r3, #24]
 80090e6:	3b02      	subs	r3, #2
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d804      	bhi.n	80090f6 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80090ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ee:	695a      	ldr	r2, [r3, #20]
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	601a      	str	r2, [r3, #0]
 80090f4:	e089      	b.n	800920a <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80090f6:	2300      	movs	r3, #0
 80090f8:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80090fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d128      	bne.n	8009154 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8009102:	2302      	movs	r3, #2
 8009104:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009108:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800910a:	f107 0314 	add.w	r3, r7, #20
 800910e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009110:	4618      	mov	r0, r3
 8009112:	f7fd fc66 	bl	80069e2 <get_fat>
 8009116:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8009118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800911a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800911e:	d103      	bne.n	8009128 <f_getfree+0x7c>
 8009120:	2301      	movs	r3, #1
 8009122:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009126:	e063      	b.n	80091f0 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8009128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912a:	2b01      	cmp	r3, #1
 800912c:	d103      	bne.n	8009136 <f_getfree+0x8a>
 800912e:	2302      	movs	r3, #2
 8009130:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009134:	e05c      	b.n	80091f0 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8009136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009138:	2b00      	cmp	r3, #0
 800913a:	d102      	bne.n	8009142 <f_getfree+0x96>
 800913c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800913e:	3301      	adds	r3, #1
 8009140:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8009142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009144:	3301      	adds	r3, #1
 8009146:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914a:	699b      	ldr	r3, [r3, #24]
 800914c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800914e:	429a      	cmp	r2, r3
 8009150:	d3db      	bcc.n	800910a <f_getfree+0x5e>
 8009152:	e04d      	b.n	80091f0 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8009154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009156:	699b      	ldr	r3, [r3, #24]
 8009158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800915a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915e:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8009160:	2300      	movs	r3, #0
 8009162:	637b      	str	r3, [r7, #52]	; 0x34
 8009164:	2300      	movs	r3, #0
 8009166:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8009168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800916a:	2b00      	cmp	r3, #0
 800916c:	d113      	bne.n	8009196 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800916e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009172:	1c5a      	adds	r2, r3, #1
 8009174:	63ba      	str	r2, [r7, #56]	; 0x38
 8009176:	4619      	mov	r1, r3
 8009178:	f7fd fb76 	bl	8006868 <move_window>
 800917c:	4603      	mov	r3, r0
 800917e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8009182:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009186:	2b00      	cmp	r3, #0
 8009188:	d131      	bne.n	80091ee <f_getfree+0x142>
							p = fs->win;
 800918a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918c:	3334      	adds	r3, #52	; 0x34
 800918e:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8009190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009192:	899b      	ldrh	r3, [r3, #12]
 8009194:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8009196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	2b02      	cmp	r3, #2
 800919c:	d10f      	bne.n	80091be <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800919e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091a0:	f7fd f8b2 	bl	8006308 <ld_word>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d102      	bne.n	80091b0 <f_getfree+0x104>
 80091aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091ac:	3301      	adds	r3, #1
 80091ae:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80091b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b2:	3302      	adds	r3, #2
 80091b4:	633b      	str	r3, [r7, #48]	; 0x30
 80091b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091b8:	3b02      	subs	r3, #2
 80091ba:	637b      	str	r3, [r7, #52]	; 0x34
 80091bc:	e010      	b.n	80091e0 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80091be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091c0:	f7fd f8ba 	bl	8006338 <ld_dword>
 80091c4:	4603      	mov	r3, r0
 80091c6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d102      	bne.n	80091d4 <f_getfree+0x128>
 80091ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091d0:	3301      	adds	r3, #1
 80091d2:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80091d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d6:	3304      	adds	r3, #4
 80091d8:	633b      	str	r3, [r7, #48]	; 0x30
 80091da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091dc:	3b04      	subs	r3, #4
 80091de:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80091e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091e2:	3b01      	subs	r3, #1
 80091e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d1bd      	bne.n	8009168 <f_getfree+0xbc>
 80091ec:	e000      	b.n	80091f0 <f_getfree+0x144>
							if (res != FR_OK) break;
 80091ee:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091f4:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80091f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091fa:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80091fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fe:	791a      	ldrb	r2, [r3, #4]
 8009200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009202:	f042 0201 	orr.w	r2, r2, #1
 8009206:	b2d2      	uxtb	r2, r2
 8009208:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800920a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800920e:	4618      	mov	r0, r3
 8009210:	3748      	adds	r7, #72	; 0x48
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
	...

08009218 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009218:	b480      	push	{r7}
 800921a:	b087      	sub	sp, #28
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	4613      	mov	r3, r2
 8009224:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009226:	2301      	movs	r3, #1
 8009228:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800922a:	2300      	movs	r3, #0
 800922c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800922e:	4b1f      	ldr	r3, [pc, #124]	; (80092ac <FATFS_LinkDriverEx+0x94>)
 8009230:	7a5b      	ldrb	r3, [r3, #9]
 8009232:	b2db      	uxtb	r3, r3
 8009234:	2b00      	cmp	r3, #0
 8009236:	d131      	bne.n	800929c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009238:	4b1c      	ldr	r3, [pc, #112]	; (80092ac <FATFS_LinkDriverEx+0x94>)
 800923a:	7a5b      	ldrb	r3, [r3, #9]
 800923c:	b2db      	uxtb	r3, r3
 800923e:	461a      	mov	r2, r3
 8009240:	4b1a      	ldr	r3, [pc, #104]	; (80092ac <FATFS_LinkDriverEx+0x94>)
 8009242:	2100      	movs	r1, #0
 8009244:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009246:	4b19      	ldr	r3, [pc, #100]	; (80092ac <FATFS_LinkDriverEx+0x94>)
 8009248:	7a5b      	ldrb	r3, [r3, #9]
 800924a:	b2db      	uxtb	r3, r3
 800924c:	4a17      	ldr	r2, [pc, #92]	; (80092ac <FATFS_LinkDriverEx+0x94>)
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	4413      	add	r3, r2
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009256:	4b15      	ldr	r3, [pc, #84]	; (80092ac <FATFS_LinkDriverEx+0x94>)
 8009258:	7a5b      	ldrb	r3, [r3, #9]
 800925a:	b2db      	uxtb	r3, r3
 800925c:	461a      	mov	r2, r3
 800925e:	4b13      	ldr	r3, [pc, #76]	; (80092ac <FATFS_LinkDriverEx+0x94>)
 8009260:	4413      	add	r3, r2
 8009262:	79fa      	ldrb	r2, [r7, #7]
 8009264:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009266:	4b11      	ldr	r3, [pc, #68]	; (80092ac <FATFS_LinkDriverEx+0x94>)
 8009268:	7a5b      	ldrb	r3, [r3, #9]
 800926a:	b2db      	uxtb	r3, r3
 800926c:	1c5a      	adds	r2, r3, #1
 800926e:	b2d1      	uxtb	r1, r2
 8009270:	4a0e      	ldr	r2, [pc, #56]	; (80092ac <FATFS_LinkDriverEx+0x94>)
 8009272:	7251      	strb	r1, [r2, #9]
 8009274:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009276:	7dbb      	ldrb	r3, [r7, #22]
 8009278:	3330      	adds	r3, #48	; 0x30
 800927a:	b2da      	uxtb	r2, r3
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	3301      	adds	r3, #1
 8009284:	223a      	movs	r2, #58	; 0x3a
 8009286:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	3302      	adds	r3, #2
 800928c:	222f      	movs	r2, #47	; 0x2f
 800928e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	3303      	adds	r3, #3
 8009294:	2200      	movs	r2, #0
 8009296:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009298:	2300      	movs	r3, #0
 800929a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800929c:	7dfb      	ldrb	r3, [r7, #23]
}
 800929e:	4618      	mov	r0, r3
 80092a0:	371c      	adds	r7, #28
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr
 80092aa:	bf00      	nop
 80092ac:	200010f4 	.word	0x200010f4

080092b0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80092ba:	2200      	movs	r2, #0
 80092bc:	6839      	ldr	r1, [r7, #0]
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f7ff ffaa 	bl	8009218 <FATFS_LinkDriverEx>
 80092c4:	4603      	mov	r3, r0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
	...

080092d0 <__errno>:
 80092d0:	4b01      	ldr	r3, [pc, #4]	; (80092d8 <__errno+0x8>)
 80092d2:	6818      	ldr	r0, [r3, #0]
 80092d4:	4770      	bx	lr
 80092d6:	bf00      	nop
 80092d8:	20000040 	.word	0x20000040

080092dc <__libc_init_array>:
 80092dc:	b570      	push	{r4, r5, r6, lr}
 80092de:	4d0d      	ldr	r5, [pc, #52]	; (8009314 <__libc_init_array+0x38>)
 80092e0:	4c0d      	ldr	r4, [pc, #52]	; (8009318 <__libc_init_array+0x3c>)
 80092e2:	1b64      	subs	r4, r4, r5
 80092e4:	10a4      	asrs	r4, r4, #2
 80092e6:	2600      	movs	r6, #0
 80092e8:	42a6      	cmp	r6, r4
 80092ea:	d109      	bne.n	8009300 <__libc_init_array+0x24>
 80092ec:	4d0b      	ldr	r5, [pc, #44]	; (800931c <__libc_init_array+0x40>)
 80092ee:	4c0c      	ldr	r4, [pc, #48]	; (8009320 <__libc_init_array+0x44>)
 80092f0:	f001 f9be 	bl	800a670 <_init>
 80092f4:	1b64      	subs	r4, r4, r5
 80092f6:	10a4      	asrs	r4, r4, #2
 80092f8:	2600      	movs	r6, #0
 80092fa:	42a6      	cmp	r6, r4
 80092fc:	d105      	bne.n	800930a <__libc_init_array+0x2e>
 80092fe:	bd70      	pop	{r4, r5, r6, pc}
 8009300:	f855 3b04 	ldr.w	r3, [r5], #4
 8009304:	4798      	blx	r3
 8009306:	3601      	adds	r6, #1
 8009308:	e7ee      	b.n	80092e8 <__libc_init_array+0xc>
 800930a:	f855 3b04 	ldr.w	r3, [r5], #4
 800930e:	4798      	blx	r3
 8009310:	3601      	adds	r6, #1
 8009312:	e7f2      	b.n	80092fa <__libc_init_array+0x1e>
 8009314:	0800abe4 	.word	0x0800abe4
 8009318:	0800abe4 	.word	0x0800abe4
 800931c:	0800abe4 	.word	0x0800abe4
 8009320:	0800abe8 	.word	0x0800abe8

08009324 <memset>:
 8009324:	4402      	add	r2, r0
 8009326:	4603      	mov	r3, r0
 8009328:	4293      	cmp	r3, r2
 800932a:	d100      	bne.n	800932e <memset+0xa>
 800932c:	4770      	bx	lr
 800932e:	f803 1b01 	strb.w	r1, [r3], #1
 8009332:	e7f9      	b.n	8009328 <memset+0x4>

08009334 <iprintf>:
 8009334:	b40f      	push	{r0, r1, r2, r3}
 8009336:	4b0a      	ldr	r3, [pc, #40]	; (8009360 <iprintf+0x2c>)
 8009338:	b513      	push	{r0, r1, r4, lr}
 800933a:	681c      	ldr	r4, [r3, #0]
 800933c:	b124      	cbz	r4, 8009348 <iprintf+0x14>
 800933e:	69a3      	ldr	r3, [r4, #24]
 8009340:	b913      	cbnz	r3, 8009348 <iprintf+0x14>
 8009342:	4620      	mov	r0, r4
 8009344:	f000 fa7e 	bl	8009844 <__sinit>
 8009348:	ab05      	add	r3, sp, #20
 800934a:	9a04      	ldr	r2, [sp, #16]
 800934c:	68a1      	ldr	r1, [r4, #8]
 800934e:	9301      	str	r3, [sp, #4]
 8009350:	4620      	mov	r0, r4
 8009352:	f000 fdab 	bl	8009eac <_vfiprintf_r>
 8009356:	b002      	add	sp, #8
 8009358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800935c:	b004      	add	sp, #16
 800935e:	4770      	bx	lr
 8009360:	20000040 	.word	0x20000040

08009364 <_puts_r>:
 8009364:	b570      	push	{r4, r5, r6, lr}
 8009366:	460e      	mov	r6, r1
 8009368:	4605      	mov	r5, r0
 800936a:	b118      	cbz	r0, 8009374 <_puts_r+0x10>
 800936c:	6983      	ldr	r3, [r0, #24]
 800936e:	b90b      	cbnz	r3, 8009374 <_puts_r+0x10>
 8009370:	f000 fa68 	bl	8009844 <__sinit>
 8009374:	69ab      	ldr	r3, [r5, #24]
 8009376:	68ac      	ldr	r4, [r5, #8]
 8009378:	b913      	cbnz	r3, 8009380 <_puts_r+0x1c>
 800937a:	4628      	mov	r0, r5
 800937c:	f000 fa62 	bl	8009844 <__sinit>
 8009380:	4b2c      	ldr	r3, [pc, #176]	; (8009434 <_puts_r+0xd0>)
 8009382:	429c      	cmp	r4, r3
 8009384:	d120      	bne.n	80093c8 <_puts_r+0x64>
 8009386:	686c      	ldr	r4, [r5, #4]
 8009388:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800938a:	07db      	lsls	r3, r3, #31
 800938c:	d405      	bmi.n	800939a <_puts_r+0x36>
 800938e:	89a3      	ldrh	r3, [r4, #12]
 8009390:	0598      	lsls	r0, r3, #22
 8009392:	d402      	bmi.n	800939a <_puts_r+0x36>
 8009394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009396:	f000 faf3 	bl	8009980 <__retarget_lock_acquire_recursive>
 800939a:	89a3      	ldrh	r3, [r4, #12]
 800939c:	0719      	lsls	r1, r3, #28
 800939e:	d51d      	bpl.n	80093dc <_puts_r+0x78>
 80093a0:	6923      	ldr	r3, [r4, #16]
 80093a2:	b1db      	cbz	r3, 80093dc <_puts_r+0x78>
 80093a4:	3e01      	subs	r6, #1
 80093a6:	68a3      	ldr	r3, [r4, #8]
 80093a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80093ac:	3b01      	subs	r3, #1
 80093ae:	60a3      	str	r3, [r4, #8]
 80093b0:	bb39      	cbnz	r1, 8009402 <_puts_r+0x9e>
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	da38      	bge.n	8009428 <_puts_r+0xc4>
 80093b6:	4622      	mov	r2, r4
 80093b8:	210a      	movs	r1, #10
 80093ba:	4628      	mov	r0, r5
 80093bc:	f000 f868 	bl	8009490 <__swbuf_r>
 80093c0:	3001      	adds	r0, #1
 80093c2:	d011      	beq.n	80093e8 <_puts_r+0x84>
 80093c4:	250a      	movs	r5, #10
 80093c6:	e011      	b.n	80093ec <_puts_r+0x88>
 80093c8:	4b1b      	ldr	r3, [pc, #108]	; (8009438 <_puts_r+0xd4>)
 80093ca:	429c      	cmp	r4, r3
 80093cc:	d101      	bne.n	80093d2 <_puts_r+0x6e>
 80093ce:	68ac      	ldr	r4, [r5, #8]
 80093d0:	e7da      	b.n	8009388 <_puts_r+0x24>
 80093d2:	4b1a      	ldr	r3, [pc, #104]	; (800943c <_puts_r+0xd8>)
 80093d4:	429c      	cmp	r4, r3
 80093d6:	bf08      	it	eq
 80093d8:	68ec      	ldreq	r4, [r5, #12]
 80093da:	e7d5      	b.n	8009388 <_puts_r+0x24>
 80093dc:	4621      	mov	r1, r4
 80093de:	4628      	mov	r0, r5
 80093e0:	f000 f8a8 	bl	8009534 <__swsetup_r>
 80093e4:	2800      	cmp	r0, #0
 80093e6:	d0dd      	beq.n	80093a4 <_puts_r+0x40>
 80093e8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80093ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093ee:	07da      	lsls	r2, r3, #31
 80093f0:	d405      	bmi.n	80093fe <_puts_r+0x9a>
 80093f2:	89a3      	ldrh	r3, [r4, #12]
 80093f4:	059b      	lsls	r3, r3, #22
 80093f6:	d402      	bmi.n	80093fe <_puts_r+0x9a>
 80093f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093fa:	f000 fac2 	bl	8009982 <__retarget_lock_release_recursive>
 80093fe:	4628      	mov	r0, r5
 8009400:	bd70      	pop	{r4, r5, r6, pc}
 8009402:	2b00      	cmp	r3, #0
 8009404:	da04      	bge.n	8009410 <_puts_r+0xac>
 8009406:	69a2      	ldr	r2, [r4, #24]
 8009408:	429a      	cmp	r2, r3
 800940a:	dc06      	bgt.n	800941a <_puts_r+0xb6>
 800940c:	290a      	cmp	r1, #10
 800940e:	d004      	beq.n	800941a <_puts_r+0xb6>
 8009410:	6823      	ldr	r3, [r4, #0]
 8009412:	1c5a      	adds	r2, r3, #1
 8009414:	6022      	str	r2, [r4, #0]
 8009416:	7019      	strb	r1, [r3, #0]
 8009418:	e7c5      	b.n	80093a6 <_puts_r+0x42>
 800941a:	4622      	mov	r2, r4
 800941c:	4628      	mov	r0, r5
 800941e:	f000 f837 	bl	8009490 <__swbuf_r>
 8009422:	3001      	adds	r0, #1
 8009424:	d1bf      	bne.n	80093a6 <_puts_r+0x42>
 8009426:	e7df      	b.n	80093e8 <_puts_r+0x84>
 8009428:	6823      	ldr	r3, [r4, #0]
 800942a:	250a      	movs	r5, #10
 800942c:	1c5a      	adds	r2, r3, #1
 800942e:	6022      	str	r2, [r4, #0]
 8009430:	701d      	strb	r5, [r3, #0]
 8009432:	e7db      	b.n	80093ec <_puts_r+0x88>
 8009434:	0800ab68 	.word	0x0800ab68
 8009438:	0800ab88 	.word	0x0800ab88
 800943c:	0800ab48 	.word	0x0800ab48

08009440 <puts>:
 8009440:	4b02      	ldr	r3, [pc, #8]	; (800944c <puts+0xc>)
 8009442:	4601      	mov	r1, r0
 8009444:	6818      	ldr	r0, [r3, #0]
 8009446:	f7ff bf8d 	b.w	8009364 <_puts_r>
 800944a:	bf00      	nop
 800944c:	20000040 	.word	0x20000040

08009450 <siprintf>:
 8009450:	b40e      	push	{r1, r2, r3}
 8009452:	b500      	push	{lr}
 8009454:	b09c      	sub	sp, #112	; 0x70
 8009456:	ab1d      	add	r3, sp, #116	; 0x74
 8009458:	9002      	str	r0, [sp, #8]
 800945a:	9006      	str	r0, [sp, #24]
 800945c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009460:	4809      	ldr	r0, [pc, #36]	; (8009488 <siprintf+0x38>)
 8009462:	9107      	str	r1, [sp, #28]
 8009464:	9104      	str	r1, [sp, #16]
 8009466:	4909      	ldr	r1, [pc, #36]	; (800948c <siprintf+0x3c>)
 8009468:	f853 2b04 	ldr.w	r2, [r3], #4
 800946c:	9105      	str	r1, [sp, #20]
 800946e:	6800      	ldr	r0, [r0, #0]
 8009470:	9301      	str	r3, [sp, #4]
 8009472:	a902      	add	r1, sp, #8
 8009474:	f000 fbf0 	bl	8009c58 <_svfiprintf_r>
 8009478:	9b02      	ldr	r3, [sp, #8]
 800947a:	2200      	movs	r2, #0
 800947c:	701a      	strb	r2, [r3, #0]
 800947e:	b01c      	add	sp, #112	; 0x70
 8009480:	f85d eb04 	ldr.w	lr, [sp], #4
 8009484:	b003      	add	sp, #12
 8009486:	4770      	bx	lr
 8009488:	20000040 	.word	0x20000040
 800948c:	ffff0208 	.word	0xffff0208

08009490 <__swbuf_r>:
 8009490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009492:	460e      	mov	r6, r1
 8009494:	4614      	mov	r4, r2
 8009496:	4605      	mov	r5, r0
 8009498:	b118      	cbz	r0, 80094a2 <__swbuf_r+0x12>
 800949a:	6983      	ldr	r3, [r0, #24]
 800949c:	b90b      	cbnz	r3, 80094a2 <__swbuf_r+0x12>
 800949e:	f000 f9d1 	bl	8009844 <__sinit>
 80094a2:	4b21      	ldr	r3, [pc, #132]	; (8009528 <__swbuf_r+0x98>)
 80094a4:	429c      	cmp	r4, r3
 80094a6:	d12b      	bne.n	8009500 <__swbuf_r+0x70>
 80094a8:	686c      	ldr	r4, [r5, #4]
 80094aa:	69a3      	ldr	r3, [r4, #24]
 80094ac:	60a3      	str	r3, [r4, #8]
 80094ae:	89a3      	ldrh	r3, [r4, #12]
 80094b0:	071a      	lsls	r2, r3, #28
 80094b2:	d52f      	bpl.n	8009514 <__swbuf_r+0x84>
 80094b4:	6923      	ldr	r3, [r4, #16]
 80094b6:	b36b      	cbz	r3, 8009514 <__swbuf_r+0x84>
 80094b8:	6923      	ldr	r3, [r4, #16]
 80094ba:	6820      	ldr	r0, [r4, #0]
 80094bc:	1ac0      	subs	r0, r0, r3
 80094be:	6963      	ldr	r3, [r4, #20]
 80094c0:	b2f6      	uxtb	r6, r6
 80094c2:	4283      	cmp	r3, r0
 80094c4:	4637      	mov	r7, r6
 80094c6:	dc04      	bgt.n	80094d2 <__swbuf_r+0x42>
 80094c8:	4621      	mov	r1, r4
 80094ca:	4628      	mov	r0, r5
 80094cc:	f000 f926 	bl	800971c <_fflush_r>
 80094d0:	bb30      	cbnz	r0, 8009520 <__swbuf_r+0x90>
 80094d2:	68a3      	ldr	r3, [r4, #8]
 80094d4:	3b01      	subs	r3, #1
 80094d6:	60a3      	str	r3, [r4, #8]
 80094d8:	6823      	ldr	r3, [r4, #0]
 80094da:	1c5a      	adds	r2, r3, #1
 80094dc:	6022      	str	r2, [r4, #0]
 80094de:	701e      	strb	r6, [r3, #0]
 80094e0:	6963      	ldr	r3, [r4, #20]
 80094e2:	3001      	adds	r0, #1
 80094e4:	4283      	cmp	r3, r0
 80094e6:	d004      	beq.n	80094f2 <__swbuf_r+0x62>
 80094e8:	89a3      	ldrh	r3, [r4, #12]
 80094ea:	07db      	lsls	r3, r3, #31
 80094ec:	d506      	bpl.n	80094fc <__swbuf_r+0x6c>
 80094ee:	2e0a      	cmp	r6, #10
 80094f0:	d104      	bne.n	80094fc <__swbuf_r+0x6c>
 80094f2:	4621      	mov	r1, r4
 80094f4:	4628      	mov	r0, r5
 80094f6:	f000 f911 	bl	800971c <_fflush_r>
 80094fa:	b988      	cbnz	r0, 8009520 <__swbuf_r+0x90>
 80094fc:	4638      	mov	r0, r7
 80094fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009500:	4b0a      	ldr	r3, [pc, #40]	; (800952c <__swbuf_r+0x9c>)
 8009502:	429c      	cmp	r4, r3
 8009504:	d101      	bne.n	800950a <__swbuf_r+0x7a>
 8009506:	68ac      	ldr	r4, [r5, #8]
 8009508:	e7cf      	b.n	80094aa <__swbuf_r+0x1a>
 800950a:	4b09      	ldr	r3, [pc, #36]	; (8009530 <__swbuf_r+0xa0>)
 800950c:	429c      	cmp	r4, r3
 800950e:	bf08      	it	eq
 8009510:	68ec      	ldreq	r4, [r5, #12]
 8009512:	e7ca      	b.n	80094aa <__swbuf_r+0x1a>
 8009514:	4621      	mov	r1, r4
 8009516:	4628      	mov	r0, r5
 8009518:	f000 f80c 	bl	8009534 <__swsetup_r>
 800951c:	2800      	cmp	r0, #0
 800951e:	d0cb      	beq.n	80094b8 <__swbuf_r+0x28>
 8009520:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009524:	e7ea      	b.n	80094fc <__swbuf_r+0x6c>
 8009526:	bf00      	nop
 8009528:	0800ab68 	.word	0x0800ab68
 800952c:	0800ab88 	.word	0x0800ab88
 8009530:	0800ab48 	.word	0x0800ab48

08009534 <__swsetup_r>:
 8009534:	4b32      	ldr	r3, [pc, #200]	; (8009600 <__swsetup_r+0xcc>)
 8009536:	b570      	push	{r4, r5, r6, lr}
 8009538:	681d      	ldr	r5, [r3, #0]
 800953a:	4606      	mov	r6, r0
 800953c:	460c      	mov	r4, r1
 800953e:	b125      	cbz	r5, 800954a <__swsetup_r+0x16>
 8009540:	69ab      	ldr	r3, [r5, #24]
 8009542:	b913      	cbnz	r3, 800954a <__swsetup_r+0x16>
 8009544:	4628      	mov	r0, r5
 8009546:	f000 f97d 	bl	8009844 <__sinit>
 800954a:	4b2e      	ldr	r3, [pc, #184]	; (8009604 <__swsetup_r+0xd0>)
 800954c:	429c      	cmp	r4, r3
 800954e:	d10f      	bne.n	8009570 <__swsetup_r+0x3c>
 8009550:	686c      	ldr	r4, [r5, #4]
 8009552:	89a3      	ldrh	r3, [r4, #12]
 8009554:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009558:	0719      	lsls	r1, r3, #28
 800955a:	d42c      	bmi.n	80095b6 <__swsetup_r+0x82>
 800955c:	06dd      	lsls	r5, r3, #27
 800955e:	d411      	bmi.n	8009584 <__swsetup_r+0x50>
 8009560:	2309      	movs	r3, #9
 8009562:	6033      	str	r3, [r6, #0]
 8009564:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009568:	81a3      	strh	r3, [r4, #12]
 800956a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800956e:	e03e      	b.n	80095ee <__swsetup_r+0xba>
 8009570:	4b25      	ldr	r3, [pc, #148]	; (8009608 <__swsetup_r+0xd4>)
 8009572:	429c      	cmp	r4, r3
 8009574:	d101      	bne.n	800957a <__swsetup_r+0x46>
 8009576:	68ac      	ldr	r4, [r5, #8]
 8009578:	e7eb      	b.n	8009552 <__swsetup_r+0x1e>
 800957a:	4b24      	ldr	r3, [pc, #144]	; (800960c <__swsetup_r+0xd8>)
 800957c:	429c      	cmp	r4, r3
 800957e:	bf08      	it	eq
 8009580:	68ec      	ldreq	r4, [r5, #12]
 8009582:	e7e6      	b.n	8009552 <__swsetup_r+0x1e>
 8009584:	0758      	lsls	r0, r3, #29
 8009586:	d512      	bpl.n	80095ae <__swsetup_r+0x7a>
 8009588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800958a:	b141      	cbz	r1, 800959e <__swsetup_r+0x6a>
 800958c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009590:	4299      	cmp	r1, r3
 8009592:	d002      	beq.n	800959a <__swsetup_r+0x66>
 8009594:	4630      	mov	r0, r6
 8009596:	f000 fa59 	bl	8009a4c <_free_r>
 800959a:	2300      	movs	r3, #0
 800959c:	6363      	str	r3, [r4, #52]	; 0x34
 800959e:	89a3      	ldrh	r3, [r4, #12]
 80095a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80095a4:	81a3      	strh	r3, [r4, #12]
 80095a6:	2300      	movs	r3, #0
 80095a8:	6063      	str	r3, [r4, #4]
 80095aa:	6923      	ldr	r3, [r4, #16]
 80095ac:	6023      	str	r3, [r4, #0]
 80095ae:	89a3      	ldrh	r3, [r4, #12]
 80095b0:	f043 0308 	orr.w	r3, r3, #8
 80095b4:	81a3      	strh	r3, [r4, #12]
 80095b6:	6923      	ldr	r3, [r4, #16]
 80095b8:	b94b      	cbnz	r3, 80095ce <__swsetup_r+0x9a>
 80095ba:	89a3      	ldrh	r3, [r4, #12]
 80095bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80095c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095c4:	d003      	beq.n	80095ce <__swsetup_r+0x9a>
 80095c6:	4621      	mov	r1, r4
 80095c8:	4630      	mov	r0, r6
 80095ca:	f000 f9ff 	bl	80099cc <__smakebuf_r>
 80095ce:	89a0      	ldrh	r0, [r4, #12]
 80095d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095d4:	f010 0301 	ands.w	r3, r0, #1
 80095d8:	d00a      	beq.n	80095f0 <__swsetup_r+0xbc>
 80095da:	2300      	movs	r3, #0
 80095dc:	60a3      	str	r3, [r4, #8]
 80095de:	6963      	ldr	r3, [r4, #20]
 80095e0:	425b      	negs	r3, r3
 80095e2:	61a3      	str	r3, [r4, #24]
 80095e4:	6923      	ldr	r3, [r4, #16]
 80095e6:	b943      	cbnz	r3, 80095fa <__swsetup_r+0xc6>
 80095e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80095ec:	d1ba      	bne.n	8009564 <__swsetup_r+0x30>
 80095ee:	bd70      	pop	{r4, r5, r6, pc}
 80095f0:	0781      	lsls	r1, r0, #30
 80095f2:	bf58      	it	pl
 80095f4:	6963      	ldrpl	r3, [r4, #20]
 80095f6:	60a3      	str	r3, [r4, #8]
 80095f8:	e7f4      	b.n	80095e4 <__swsetup_r+0xb0>
 80095fa:	2000      	movs	r0, #0
 80095fc:	e7f7      	b.n	80095ee <__swsetup_r+0xba>
 80095fe:	bf00      	nop
 8009600:	20000040 	.word	0x20000040
 8009604:	0800ab68 	.word	0x0800ab68
 8009608:	0800ab88 	.word	0x0800ab88
 800960c:	0800ab48 	.word	0x0800ab48

08009610 <__sflush_r>:
 8009610:	898a      	ldrh	r2, [r1, #12]
 8009612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009616:	4605      	mov	r5, r0
 8009618:	0710      	lsls	r0, r2, #28
 800961a:	460c      	mov	r4, r1
 800961c:	d458      	bmi.n	80096d0 <__sflush_r+0xc0>
 800961e:	684b      	ldr	r3, [r1, #4]
 8009620:	2b00      	cmp	r3, #0
 8009622:	dc05      	bgt.n	8009630 <__sflush_r+0x20>
 8009624:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009626:	2b00      	cmp	r3, #0
 8009628:	dc02      	bgt.n	8009630 <__sflush_r+0x20>
 800962a:	2000      	movs	r0, #0
 800962c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009630:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009632:	2e00      	cmp	r6, #0
 8009634:	d0f9      	beq.n	800962a <__sflush_r+0x1a>
 8009636:	2300      	movs	r3, #0
 8009638:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800963c:	682f      	ldr	r7, [r5, #0]
 800963e:	602b      	str	r3, [r5, #0]
 8009640:	d032      	beq.n	80096a8 <__sflush_r+0x98>
 8009642:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009644:	89a3      	ldrh	r3, [r4, #12]
 8009646:	075a      	lsls	r2, r3, #29
 8009648:	d505      	bpl.n	8009656 <__sflush_r+0x46>
 800964a:	6863      	ldr	r3, [r4, #4]
 800964c:	1ac0      	subs	r0, r0, r3
 800964e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009650:	b10b      	cbz	r3, 8009656 <__sflush_r+0x46>
 8009652:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009654:	1ac0      	subs	r0, r0, r3
 8009656:	2300      	movs	r3, #0
 8009658:	4602      	mov	r2, r0
 800965a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800965c:	6a21      	ldr	r1, [r4, #32]
 800965e:	4628      	mov	r0, r5
 8009660:	47b0      	blx	r6
 8009662:	1c43      	adds	r3, r0, #1
 8009664:	89a3      	ldrh	r3, [r4, #12]
 8009666:	d106      	bne.n	8009676 <__sflush_r+0x66>
 8009668:	6829      	ldr	r1, [r5, #0]
 800966a:	291d      	cmp	r1, #29
 800966c:	d82c      	bhi.n	80096c8 <__sflush_r+0xb8>
 800966e:	4a2a      	ldr	r2, [pc, #168]	; (8009718 <__sflush_r+0x108>)
 8009670:	40ca      	lsrs	r2, r1
 8009672:	07d6      	lsls	r6, r2, #31
 8009674:	d528      	bpl.n	80096c8 <__sflush_r+0xb8>
 8009676:	2200      	movs	r2, #0
 8009678:	6062      	str	r2, [r4, #4]
 800967a:	04d9      	lsls	r1, r3, #19
 800967c:	6922      	ldr	r2, [r4, #16]
 800967e:	6022      	str	r2, [r4, #0]
 8009680:	d504      	bpl.n	800968c <__sflush_r+0x7c>
 8009682:	1c42      	adds	r2, r0, #1
 8009684:	d101      	bne.n	800968a <__sflush_r+0x7a>
 8009686:	682b      	ldr	r3, [r5, #0]
 8009688:	b903      	cbnz	r3, 800968c <__sflush_r+0x7c>
 800968a:	6560      	str	r0, [r4, #84]	; 0x54
 800968c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800968e:	602f      	str	r7, [r5, #0]
 8009690:	2900      	cmp	r1, #0
 8009692:	d0ca      	beq.n	800962a <__sflush_r+0x1a>
 8009694:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009698:	4299      	cmp	r1, r3
 800969a:	d002      	beq.n	80096a2 <__sflush_r+0x92>
 800969c:	4628      	mov	r0, r5
 800969e:	f000 f9d5 	bl	8009a4c <_free_r>
 80096a2:	2000      	movs	r0, #0
 80096a4:	6360      	str	r0, [r4, #52]	; 0x34
 80096a6:	e7c1      	b.n	800962c <__sflush_r+0x1c>
 80096a8:	6a21      	ldr	r1, [r4, #32]
 80096aa:	2301      	movs	r3, #1
 80096ac:	4628      	mov	r0, r5
 80096ae:	47b0      	blx	r6
 80096b0:	1c41      	adds	r1, r0, #1
 80096b2:	d1c7      	bne.n	8009644 <__sflush_r+0x34>
 80096b4:	682b      	ldr	r3, [r5, #0]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d0c4      	beq.n	8009644 <__sflush_r+0x34>
 80096ba:	2b1d      	cmp	r3, #29
 80096bc:	d001      	beq.n	80096c2 <__sflush_r+0xb2>
 80096be:	2b16      	cmp	r3, #22
 80096c0:	d101      	bne.n	80096c6 <__sflush_r+0xb6>
 80096c2:	602f      	str	r7, [r5, #0]
 80096c4:	e7b1      	b.n	800962a <__sflush_r+0x1a>
 80096c6:	89a3      	ldrh	r3, [r4, #12]
 80096c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096cc:	81a3      	strh	r3, [r4, #12]
 80096ce:	e7ad      	b.n	800962c <__sflush_r+0x1c>
 80096d0:	690f      	ldr	r7, [r1, #16]
 80096d2:	2f00      	cmp	r7, #0
 80096d4:	d0a9      	beq.n	800962a <__sflush_r+0x1a>
 80096d6:	0793      	lsls	r3, r2, #30
 80096d8:	680e      	ldr	r6, [r1, #0]
 80096da:	bf08      	it	eq
 80096dc:	694b      	ldreq	r3, [r1, #20]
 80096de:	600f      	str	r7, [r1, #0]
 80096e0:	bf18      	it	ne
 80096e2:	2300      	movne	r3, #0
 80096e4:	eba6 0807 	sub.w	r8, r6, r7
 80096e8:	608b      	str	r3, [r1, #8]
 80096ea:	f1b8 0f00 	cmp.w	r8, #0
 80096ee:	dd9c      	ble.n	800962a <__sflush_r+0x1a>
 80096f0:	6a21      	ldr	r1, [r4, #32]
 80096f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80096f4:	4643      	mov	r3, r8
 80096f6:	463a      	mov	r2, r7
 80096f8:	4628      	mov	r0, r5
 80096fa:	47b0      	blx	r6
 80096fc:	2800      	cmp	r0, #0
 80096fe:	dc06      	bgt.n	800970e <__sflush_r+0xfe>
 8009700:	89a3      	ldrh	r3, [r4, #12]
 8009702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009706:	81a3      	strh	r3, [r4, #12]
 8009708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800970c:	e78e      	b.n	800962c <__sflush_r+0x1c>
 800970e:	4407      	add	r7, r0
 8009710:	eba8 0800 	sub.w	r8, r8, r0
 8009714:	e7e9      	b.n	80096ea <__sflush_r+0xda>
 8009716:	bf00      	nop
 8009718:	20400001 	.word	0x20400001

0800971c <_fflush_r>:
 800971c:	b538      	push	{r3, r4, r5, lr}
 800971e:	690b      	ldr	r3, [r1, #16]
 8009720:	4605      	mov	r5, r0
 8009722:	460c      	mov	r4, r1
 8009724:	b913      	cbnz	r3, 800972c <_fflush_r+0x10>
 8009726:	2500      	movs	r5, #0
 8009728:	4628      	mov	r0, r5
 800972a:	bd38      	pop	{r3, r4, r5, pc}
 800972c:	b118      	cbz	r0, 8009736 <_fflush_r+0x1a>
 800972e:	6983      	ldr	r3, [r0, #24]
 8009730:	b90b      	cbnz	r3, 8009736 <_fflush_r+0x1a>
 8009732:	f000 f887 	bl	8009844 <__sinit>
 8009736:	4b14      	ldr	r3, [pc, #80]	; (8009788 <_fflush_r+0x6c>)
 8009738:	429c      	cmp	r4, r3
 800973a:	d11b      	bne.n	8009774 <_fflush_r+0x58>
 800973c:	686c      	ldr	r4, [r5, #4]
 800973e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d0ef      	beq.n	8009726 <_fflush_r+0xa>
 8009746:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009748:	07d0      	lsls	r0, r2, #31
 800974a:	d404      	bmi.n	8009756 <_fflush_r+0x3a>
 800974c:	0599      	lsls	r1, r3, #22
 800974e:	d402      	bmi.n	8009756 <_fflush_r+0x3a>
 8009750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009752:	f000 f915 	bl	8009980 <__retarget_lock_acquire_recursive>
 8009756:	4628      	mov	r0, r5
 8009758:	4621      	mov	r1, r4
 800975a:	f7ff ff59 	bl	8009610 <__sflush_r>
 800975e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009760:	07da      	lsls	r2, r3, #31
 8009762:	4605      	mov	r5, r0
 8009764:	d4e0      	bmi.n	8009728 <_fflush_r+0xc>
 8009766:	89a3      	ldrh	r3, [r4, #12]
 8009768:	059b      	lsls	r3, r3, #22
 800976a:	d4dd      	bmi.n	8009728 <_fflush_r+0xc>
 800976c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800976e:	f000 f908 	bl	8009982 <__retarget_lock_release_recursive>
 8009772:	e7d9      	b.n	8009728 <_fflush_r+0xc>
 8009774:	4b05      	ldr	r3, [pc, #20]	; (800978c <_fflush_r+0x70>)
 8009776:	429c      	cmp	r4, r3
 8009778:	d101      	bne.n	800977e <_fflush_r+0x62>
 800977a:	68ac      	ldr	r4, [r5, #8]
 800977c:	e7df      	b.n	800973e <_fflush_r+0x22>
 800977e:	4b04      	ldr	r3, [pc, #16]	; (8009790 <_fflush_r+0x74>)
 8009780:	429c      	cmp	r4, r3
 8009782:	bf08      	it	eq
 8009784:	68ec      	ldreq	r4, [r5, #12]
 8009786:	e7da      	b.n	800973e <_fflush_r+0x22>
 8009788:	0800ab68 	.word	0x0800ab68
 800978c:	0800ab88 	.word	0x0800ab88
 8009790:	0800ab48 	.word	0x0800ab48

08009794 <std>:
 8009794:	2300      	movs	r3, #0
 8009796:	b510      	push	{r4, lr}
 8009798:	4604      	mov	r4, r0
 800979a:	e9c0 3300 	strd	r3, r3, [r0]
 800979e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097a2:	6083      	str	r3, [r0, #8]
 80097a4:	8181      	strh	r1, [r0, #12]
 80097a6:	6643      	str	r3, [r0, #100]	; 0x64
 80097a8:	81c2      	strh	r2, [r0, #14]
 80097aa:	6183      	str	r3, [r0, #24]
 80097ac:	4619      	mov	r1, r3
 80097ae:	2208      	movs	r2, #8
 80097b0:	305c      	adds	r0, #92	; 0x5c
 80097b2:	f7ff fdb7 	bl	8009324 <memset>
 80097b6:	4b05      	ldr	r3, [pc, #20]	; (80097cc <std+0x38>)
 80097b8:	6263      	str	r3, [r4, #36]	; 0x24
 80097ba:	4b05      	ldr	r3, [pc, #20]	; (80097d0 <std+0x3c>)
 80097bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80097be:	4b05      	ldr	r3, [pc, #20]	; (80097d4 <std+0x40>)
 80097c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80097c2:	4b05      	ldr	r3, [pc, #20]	; (80097d8 <std+0x44>)
 80097c4:	6224      	str	r4, [r4, #32]
 80097c6:	6323      	str	r3, [r4, #48]	; 0x30
 80097c8:	bd10      	pop	{r4, pc}
 80097ca:	bf00      	nop
 80097cc:	0800a455 	.word	0x0800a455
 80097d0:	0800a477 	.word	0x0800a477
 80097d4:	0800a4af 	.word	0x0800a4af
 80097d8:	0800a4d3 	.word	0x0800a4d3

080097dc <_cleanup_r>:
 80097dc:	4901      	ldr	r1, [pc, #4]	; (80097e4 <_cleanup_r+0x8>)
 80097de:	f000 b8af 	b.w	8009940 <_fwalk_reent>
 80097e2:	bf00      	nop
 80097e4:	0800971d 	.word	0x0800971d

080097e8 <__sfmoreglue>:
 80097e8:	b570      	push	{r4, r5, r6, lr}
 80097ea:	1e4a      	subs	r2, r1, #1
 80097ec:	2568      	movs	r5, #104	; 0x68
 80097ee:	4355      	muls	r5, r2
 80097f0:	460e      	mov	r6, r1
 80097f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80097f6:	f000 f979 	bl	8009aec <_malloc_r>
 80097fa:	4604      	mov	r4, r0
 80097fc:	b140      	cbz	r0, 8009810 <__sfmoreglue+0x28>
 80097fe:	2100      	movs	r1, #0
 8009800:	e9c0 1600 	strd	r1, r6, [r0]
 8009804:	300c      	adds	r0, #12
 8009806:	60a0      	str	r0, [r4, #8]
 8009808:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800980c:	f7ff fd8a 	bl	8009324 <memset>
 8009810:	4620      	mov	r0, r4
 8009812:	bd70      	pop	{r4, r5, r6, pc}

08009814 <__sfp_lock_acquire>:
 8009814:	4801      	ldr	r0, [pc, #4]	; (800981c <__sfp_lock_acquire+0x8>)
 8009816:	f000 b8b3 	b.w	8009980 <__retarget_lock_acquire_recursive>
 800981a:	bf00      	nop
 800981c:	20003424 	.word	0x20003424

08009820 <__sfp_lock_release>:
 8009820:	4801      	ldr	r0, [pc, #4]	; (8009828 <__sfp_lock_release+0x8>)
 8009822:	f000 b8ae 	b.w	8009982 <__retarget_lock_release_recursive>
 8009826:	bf00      	nop
 8009828:	20003424 	.word	0x20003424

0800982c <__sinit_lock_acquire>:
 800982c:	4801      	ldr	r0, [pc, #4]	; (8009834 <__sinit_lock_acquire+0x8>)
 800982e:	f000 b8a7 	b.w	8009980 <__retarget_lock_acquire_recursive>
 8009832:	bf00      	nop
 8009834:	2000341f 	.word	0x2000341f

08009838 <__sinit_lock_release>:
 8009838:	4801      	ldr	r0, [pc, #4]	; (8009840 <__sinit_lock_release+0x8>)
 800983a:	f000 b8a2 	b.w	8009982 <__retarget_lock_release_recursive>
 800983e:	bf00      	nop
 8009840:	2000341f 	.word	0x2000341f

08009844 <__sinit>:
 8009844:	b510      	push	{r4, lr}
 8009846:	4604      	mov	r4, r0
 8009848:	f7ff fff0 	bl	800982c <__sinit_lock_acquire>
 800984c:	69a3      	ldr	r3, [r4, #24]
 800984e:	b11b      	cbz	r3, 8009858 <__sinit+0x14>
 8009850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009854:	f7ff bff0 	b.w	8009838 <__sinit_lock_release>
 8009858:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800985c:	6523      	str	r3, [r4, #80]	; 0x50
 800985e:	4b13      	ldr	r3, [pc, #76]	; (80098ac <__sinit+0x68>)
 8009860:	4a13      	ldr	r2, [pc, #76]	; (80098b0 <__sinit+0x6c>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	62a2      	str	r2, [r4, #40]	; 0x28
 8009866:	42a3      	cmp	r3, r4
 8009868:	bf04      	itt	eq
 800986a:	2301      	moveq	r3, #1
 800986c:	61a3      	streq	r3, [r4, #24]
 800986e:	4620      	mov	r0, r4
 8009870:	f000 f820 	bl	80098b4 <__sfp>
 8009874:	6060      	str	r0, [r4, #4]
 8009876:	4620      	mov	r0, r4
 8009878:	f000 f81c 	bl	80098b4 <__sfp>
 800987c:	60a0      	str	r0, [r4, #8]
 800987e:	4620      	mov	r0, r4
 8009880:	f000 f818 	bl	80098b4 <__sfp>
 8009884:	2200      	movs	r2, #0
 8009886:	60e0      	str	r0, [r4, #12]
 8009888:	2104      	movs	r1, #4
 800988a:	6860      	ldr	r0, [r4, #4]
 800988c:	f7ff ff82 	bl	8009794 <std>
 8009890:	68a0      	ldr	r0, [r4, #8]
 8009892:	2201      	movs	r2, #1
 8009894:	2109      	movs	r1, #9
 8009896:	f7ff ff7d 	bl	8009794 <std>
 800989a:	68e0      	ldr	r0, [r4, #12]
 800989c:	2202      	movs	r2, #2
 800989e:	2112      	movs	r1, #18
 80098a0:	f7ff ff78 	bl	8009794 <std>
 80098a4:	2301      	movs	r3, #1
 80098a6:	61a3      	str	r3, [r4, #24]
 80098a8:	e7d2      	b.n	8009850 <__sinit+0xc>
 80098aa:	bf00      	nop
 80098ac:	0800ab44 	.word	0x0800ab44
 80098b0:	080097dd 	.word	0x080097dd

080098b4 <__sfp>:
 80098b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098b6:	4607      	mov	r7, r0
 80098b8:	f7ff ffac 	bl	8009814 <__sfp_lock_acquire>
 80098bc:	4b1e      	ldr	r3, [pc, #120]	; (8009938 <__sfp+0x84>)
 80098be:	681e      	ldr	r6, [r3, #0]
 80098c0:	69b3      	ldr	r3, [r6, #24]
 80098c2:	b913      	cbnz	r3, 80098ca <__sfp+0x16>
 80098c4:	4630      	mov	r0, r6
 80098c6:	f7ff ffbd 	bl	8009844 <__sinit>
 80098ca:	3648      	adds	r6, #72	; 0x48
 80098cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80098d0:	3b01      	subs	r3, #1
 80098d2:	d503      	bpl.n	80098dc <__sfp+0x28>
 80098d4:	6833      	ldr	r3, [r6, #0]
 80098d6:	b30b      	cbz	r3, 800991c <__sfp+0x68>
 80098d8:	6836      	ldr	r6, [r6, #0]
 80098da:	e7f7      	b.n	80098cc <__sfp+0x18>
 80098dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80098e0:	b9d5      	cbnz	r5, 8009918 <__sfp+0x64>
 80098e2:	4b16      	ldr	r3, [pc, #88]	; (800993c <__sfp+0x88>)
 80098e4:	60e3      	str	r3, [r4, #12]
 80098e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80098ea:	6665      	str	r5, [r4, #100]	; 0x64
 80098ec:	f000 f847 	bl	800997e <__retarget_lock_init_recursive>
 80098f0:	f7ff ff96 	bl	8009820 <__sfp_lock_release>
 80098f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80098f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80098fc:	6025      	str	r5, [r4, #0]
 80098fe:	61a5      	str	r5, [r4, #24]
 8009900:	2208      	movs	r2, #8
 8009902:	4629      	mov	r1, r5
 8009904:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009908:	f7ff fd0c 	bl	8009324 <memset>
 800990c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009910:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009914:	4620      	mov	r0, r4
 8009916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009918:	3468      	adds	r4, #104	; 0x68
 800991a:	e7d9      	b.n	80098d0 <__sfp+0x1c>
 800991c:	2104      	movs	r1, #4
 800991e:	4638      	mov	r0, r7
 8009920:	f7ff ff62 	bl	80097e8 <__sfmoreglue>
 8009924:	4604      	mov	r4, r0
 8009926:	6030      	str	r0, [r6, #0]
 8009928:	2800      	cmp	r0, #0
 800992a:	d1d5      	bne.n	80098d8 <__sfp+0x24>
 800992c:	f7ff ff78 	bl	8009820 <__sfp_lock_release>
 8009930:	230c      	movs	r3, #12
 8009932:	603b      	str	r3, [r7, #0]
 8009934:	e7ee      	b.n	8009914 <__sfp+0x60>
 8009936:	bf00      	nop
 8009938:	0800ab44 	.word	0x0800ab44
 800993c:	ffff0001 	.word	0xffff0001

08009940 <_fwalk_reent>:
 8009940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009944:	4606      	mov	r6, r0
 8009946:	4688      	mov	r8, r1
 8009948:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800994c:	2700      	movs	r7, #0
 800994e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009952:	f1b9 0901 	subs.w	r9, r9, #1
 8009956:	d505      	bpl.n	8009964 <_fwalk_reent+0x24>
 8009958:	6824      	ldr	r4, [r4, #0]
 800995a:	2c00      	cmp	r4, #0
 800995c:	d1f7      	bne.n	800994e <_fwalk_reent+0xe>
 800995e:	4638      	mov	r0, r7
 8009960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009964:	89ab      	ldrh	r3, [r5, #12]
 8009966:	2b01      	cmp	r3, #1
 8009968:	d907      	bls.n	800997a <_fwalk_reent+0x3a>
 800996a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800996e:	3301      	adds	r3, #1
 8009970:	d003      	beq.n	800997a <_fwalk_reent+0x3a>
 8009972:	4629      	mov	r1, r5
 8009974:	4630      	mov	r0, r6
 8009976:	47c0      	blx	r8
 8009978:	4307      	orrs	r7, r0
 800997a:	3568      	adds	r5, #104	; 0x68
 800997c:	e7e9      	b.n	8009952 <_fwalk_reent+0x12>

0800997e <__retarget_lock_init_recursive>:
 800997e:	4770      	bx	lr

08009980 <__retarget_lock_acquire_recursive>:
 8009980:	4770      	bx	lr

08009982 <__retarget_lock_release_recursive>:
 8009982:	4770      	bx	lr

08009984 <__swhatbuf_r>:
 8009984:	b570      	push	{r4, r5, r6, lr}
 8009986:	460e      	mov	r6, r1
 8009988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800998c:	2900      	cmp	r1, #0
 800998e:	b096      	sub	sp, #88	; 0x58
 8009990:	4614      	mov	r4, r2
 8009992:	461d      	mov	r5, r3
 8009994:	da07      	bge.n	80099a6 <__swhatbuf_r+0x22>
 8009996:	2300      	movs	r3, #0
 8009998:	602b      	str	r3, [r5, #0]
 800999a:	89b3      	ldrh	r3, [r6, #12]
 800999c:	061a      	lsls	r2, r3, #24
 800999e:	d410      	bmi.n	80099c2 <__swhatbuf_r+0x3e>
 80099a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099a4:	e00e      	b.n	80099c4 <__swhatbuf_r+0x40>
 80099a6:	466a      	mov	r2, sp
 80099a8:	f000 fdba 	bl	800a520 <_fstat_r>
 80099ac:	2800      	cmp	r0, #0
 80099ae:	dbf2      	blt.n	8009996 <__swhatbuf_r+0x12>
 80099b0:	9a01      	ldr	r2, [sp, #4]
 80099b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80099b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80099ba:	425a      	negs	r2, r3
 80099bc:	415a      	adcs	r2, r3
 80099be:	602a      	str	r2, [r5, #0]
 80099c0:	e7ee      	b.n	80099a0 <__swhatbuf_r+0x1c>
 80099c2:	2340      	movs	r3, #64	; 0x40
 80099c4:	2000      	movs	r0, #0
 80099c6:	6023      	str	r3, [r4, #0]
 80099c8:	b016      	add	sp, #88	; 0x58
 80099ca:	bd70      	pop	{r4, r5, r6, pc}

080099cc <__smakebuf_r>:
 80099cc:	898b      	ldrh	r3, [r1, #12]
 80099ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099d0:	079d      	lsls	r5, r3, #30
 80099d2:	4606      	mov	r6, r0
 80099d4:	460c      	mov	r4, r1
 80099d6:	d507      	bpl.n	80099e8 <__smakebuf_r+0x1c>
 80099d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80099dc:	6023      	str	r3, [r4, #0]
 80099de:	6123      	str	r3, [r4, #16]
 80099e0:	2301      	movs	r3, #1
 80099e2:	6163      	str	r3, [r4, #20]
 80099e4:	b002      	add	sp, #8
 80099e6:	bd70      	pop	{r4, r5, r6, pc}
 80099e8:	ab01      	add	r3, sp, #4
 80099ea:	466a      	mov	r2, sp
 80099ec:	f7ff ffca 	bl	8009984 <__swhatbuf_r>
 80099f0:	9900      	ldr	r1, [sp, #0]
 80099f2:	4605      	mov	r5, r0
 80099f4:	4630      	mov	r0, r6
 80099f6:	f000 f879 	bl	8009aec <_malloc_r>
 80099fa:	b948      	cbnz	r0, 8009a10 <__smakebuf_r+0x44>
 80099fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a00:	059a      	lsls	r2, r3, #22
 8009a02:	d4ef      	bmi.n	80099e4 <__smakebuf_r+0x18>
 8009a04:	f023 0303 	bic.w	r3, r3, #3
 8009a08:	f043 0302 	orr.w	r3, r3, #2
 8009a0c:	81a3      	strh	r3, [r4, #12]
 8009a0e:	e7e3      	b.n	80099d8 <__smakebuf_r+0xc>
 8009a10:	4b0d      	ldr	r3, [pc, #52]	; (8009a48 <__smakebuf_r+0x7c>)
 8009a12:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a14:	89a3      	ldrh	r3, [r4, #12]
 8009a16:	6020      	str	r0, [r4, #0]
 8009a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a1c:	81a3      	strh	r3, [r4, #12]
 8009a1e:	9b00      	ldr	r3, [sp, #0]
 8009a20:	6163      	str	r3, [r4, #20]
 8009a22:	9b01      	ldr	r3, [sp, #4]
 8009a24:	6120      	str	r0, [r4, #16]
 8009a26:	b15b      	cbz	r3, 8009a40 <__smakebuf_r+0x74>
 8009a28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a2c:	4630      	mov	r0, r6
 8009a2e:	f000 fd89 	bl	800a544 <_isatty_r>
 8009a32:	b128      	cbz	r0, 8009a40 <__smakebuf_r+0x74>
 8009a34:	89a3      	ldrh	r3, [r4, #12]
 8009a36:	f023 0303 	bic.w	r3, r3, #3
 8009a3a:	f043 0301 	orr.w	r3, r3, #1
 8009a3e:	81a3      	strh	r3, [r4, #12]
 8009a40:	89a0      	ldrh	r0, [r4, #12]
 8009a42:	4305      	orrs	r5, r0
 8009a44:	81a5      	strh	r5, [r4, #12]
 8009a46:	e7cd      	b.n	80099e4 <__smakebuf_r+0x18>
 8009a48:	080097dd 	.word	0x080097dd

08009a4c <_free_r>:
 8009a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a4e:	2900      	cmp	r1, #0
 8009a50:	d048      	beq.n	8009ae4 <_free_r+0x98>
 8009a52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a56:	9001      	str	r0, [sp, #4]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	f1a1 0404 	sub.w	r4, r1, #4
 8009a5e:	bfb8      	it	lt
 8009a60:	18e4      	addlt	r4, r4, r3
 8009a62:	f000 fdb9 	bl	800a5d8 <__malloc_lock>
 8009a66:	4a20      	ldr	r2, [pc, #128]	; (8009ae8 <_free_r+0x9c>)
 8009a68:	9801      	ldr	r0, [sp, #4]
 8009a6a:	6813      	ldr	r3, [r2, #0]
 8009a6c:	4615      	mov	r5, r2
 8009a6e:	b933      	cbnz	r3, 8009a7e <_free_r+0x32>
 8009a70:	6063      	str	r3, [r4, #4]
 8009a72:	6014      	str	r4, [r2, #0]
 8009a74:	b003      	add	sp, #12
 8009a76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a7a:	f000 bdb3 	b.w	800a5e4 <__malloc_unlock>
 8009a7e:	42a3      	cmp	r3, r4
 8009a80:	d90b      	bls.n	8009a9a <_free_r+0x4e>
 8009a82:	6821      	ldr	r1, [r4, #0]
 8009a84:	1862      	adds	r2, r4, r1
 8009a86:	4293      	cmp	r3, r2
 8009a88:	bf04      	itt	eq
 8009a8a:	681a      	ldreq	r2, [r3, #0]
 8009a8c:	685b      	ldreq	r3, [r3, #4]
 8009a8e:	6063      	str	r3, [r4, #4]
 8009a90:	bf04      	itt	eq
 8009a92:	1852      	addeq	r2, r2, r1
 8009a94:	6022      	streq	r2, [r4, #0]
 8009a96:	602c      	str	r4, [r5, #0]
 8009a98:	e7ec      	b.n	8009a74 <_free_r+0x28>
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	b10b      	cbz	r3, 8009aa4 <_free_r+0x58>
 8009aa0:	42a3      	cmp	r3, r4
 8009aa2:	d9fa      	bls.n	8009a9a <_free_r+0x4e>
 8009aa4:	6811      	ldr	r1, [r2, #0]
 8009aa6:	1855      	adds	r5, r2, r1
 8009aa8:	42a5      	cmp	r5, r4
 8009aaa:	d10b      	bne.n	8009ac4 <_free_r+0x78>
 8009aac:	6824      	ldr	r4, [r4, #0]
 8009aae:	4421      	add	r1, r4
 8009ab0:	1854      	adds	r4, r2, r1
 8009ab2:	42a3      	cmp	r3, r4
 8009ab4:	6011      	str	r1, [r2, #0]
 8009ab6:	d1dd      	bne.n	8009a74 <_free_r+0x28>
 8009ab8:	681c      	ldr	r4, [r3, #0]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	6053      	str	r3, [r2, #4]
 8009abe:	4421      	add	r1, r4
 8009ac0:	6011      	str	r1, [r2, #0]
 8009ac2:	e7d7      	b.n	8009a74 <_free_r+0x28>
 8009ac4:	d902      	bls.n	8009acc <_free_r+0x80>
 8009ac6:	230c      	movs	r3, #12
 8009ac8:	6003      	str	r3, [r0, #0]
 8009aca:	e7d3      	b.n	8009a74 <_free_r+0x28>
 8009acc:	6825      	ldr	r5, [r4, #0]
 8009ace:	1961      	adds	r1, r4, r5
 8009ad0:	428b      	cmp	r3, r1
 8009ad2:	bf04      	itt	eq
 8009ad4:	6819      	ldreq	r1, [r3, #0]
 8009ad6:	685b      	ldreq	r3, [r3, #4]
 8009ad8:	6063      	str	r3, [r4, #4]
 8009ada:	bf04      	itt	eq
 8009adc:	1949      	addeq	r1, r1, r5
 8009ade:	6021      	streq	r1, [r4, #0]
 8009ae0:	6054      	str	r4, [r2, #4]
 8009ae2:	e7c7      	b.n	8009a74 <_free_r+0x28>
 8009ae4:	b003      	add	sp, #12
 8009ae6:	bd30      	pop	{r4, r5, pc}
 8009ae8:	20001100 	.word	0x20001100

08009aec <_malloc_r>:
 8009aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aee:	1ccd      	adds	r5, r1, #3
 8009af0:	f025 0503 	bic.w	r5, r5, #3
 8009af4:	3508      	adds	r5, #8
 8009af6:	2d0c      	cmp	r5, #12
 8009af8:	bf38      	it	cc
 8009afa:	250c      	movcc	r5, #12
 8009afc:	2d00      	cmp	r5, #0
 8009afe:	4606      	mov	r6, r0
 8009b00:	db01      	blt.n	8009b06 <_malloc_r+0x1a>
 8009b02:	42a9      	cmp	r1, r5
 8009b04:	d903      	bls.n	8009b0e <_malloc_r+0x22>
 8009b06:	230c      	movs	r3, #12
 8009b08:	6033      	str	r3, [r6, #0]
 8009b0a:	2000      	movs	r0, #0
 8009b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b0e:	f000 fd63 	bl	800a5d8 <__malloc_lock>
 8009b12:	4921      	ldr	r1, [pc, #132]	; (8009b98 <_malloc_r+0xac>)
 8009b14:	680a      	ldr	r2, [r1, #0]
 8009b16:	4614      	mov	r4, r2
 8009b18:	b99c      	cbnz	r4, 8009b42 <_malloc_r+0x56>
 8009b1a:	4f20      	ldr	r7, [pc, #128]	; (8009b9c <_malloc_r+0xb0>)
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	b923      	cbnz	r3, 8009b2a <_malloc_r+0x3e>
 8009b20:	4621      	mov	r1, r4
 8009b22:	4630      	mov	r0, r6
 8009b24:	f000 fc86 	bl	800a434 <_sbrk_r>
 8009b28:	6038      	str	r0, [r7, #0]
 8009b2a:	4629      	mov	r1, r5
 8009b2c:	4630      	mov	r0, r6
 8009b2e:	f000 fc81 	bl	800a434 <_sbrk_r>
 8009b32:	1c43      	adds	r3, r0, #1
 8009b34:	d123      	bne.n	8009b7e <_malloc_r+0x92>
 8009b36:	230c      	movs	r3, #12
 8009b38:	6033      	str	r3, [r6, #0]
 8009b3a:	4630      	mov	r0, r6
 8009b3c:	f000 fd52 	bl	800a5e4 <__malloc_unlock>
 8009b40:	e7e3      	b.n	8009b0a <_malloc_r+0x1e>
 8009b42:	6823      	ldr	r3, [r4, #0]
 8009b44:	1b5b      	subs	r3, r3, r5
 8009b46:	d417      	bmi.n	8009b78 <_malloc_r+0x8c>
 8009b48:	2b0b      	cmp	r3, #11
 8009b4a:	d903      	bls.n	8009b54 <_malloc_r+0x68>
 8009b4c:	6023      	str	r3, [r4, #0]
 8009b4e:	441c      	add	r4, r3
 8009b50:	6025      	str	r5, [r4, #0]
 8009b52:	e004      	b.n	8009b5e <_malloc_r+0x72>
 8009b54:	6863      	ldr	r3, [r4, #4]
 8009b56:	42a2      	cmp	r2, r4
 8009b58:	bf0c      	ite	eq
 8009b5a:	600b      	streq	r3, [r1, #0]
 8009b5c:	6053      	strne	r3, [r2, #4]
 8009b5e:	4630      	mov	r0, r6
 8009b60:	f000 fd40 	bl	800a5e4 <__malloc_unlock>
 8009b64:	f104 000b 	add.w	r0, r4, #11
 8009b68:	1d23      	adds	r3, r4, #4
 8009b6a:	f020 0007 	bic.w	r0, r0, #7
 8009b6e:	1ac2      	subs	r2, r0, r3
 8009b70:	d0cc      	beq.n	8009b0c <_malloc_r+0x20>
 8009b72:	1a1b      	subs	r3, r3, r0
 8009b74:	50a3      	str	r3, [r4, r2]
 8009b76:	e7c9      	b.n	8009b0c <_malloc_r+0x20>
 8009b78:	4622      	mov	r2, r4
 8009b7a:	6864      	ldr	r4, [r4, #4]
 8009b7c:	e7cc      	b.n	8009b18 <_malloc_r+0x2c>
 8009b7e:	1cc4      	adds	r4, r0, #3
 8009b80:	f024 0403 	bic.w	r4, r4, #3
 8009b84:	42a0      	cmp	r0, r4
 8009b86:	d0e3      	beq.n	8009b50 <_malloc_r+0x64>
 8009b88:	1a21      	subs	r1, r4, r0
 8009b8a:	4630      	mov	r0, r6
 8009b8c:	f000 fc52 	bl	800a434 <_sbrk_r>
 8009b90:	3001      	adds	r0, #1
 8009b92:	d1dd      	bne.n	8009b50 <_malloc_r+0x64>
 8009b94:	e7cf      	b.n	8009b36 <_malloc_r+0x4a>
 8009b96:	bf00      	nop
 8009b98:	20001100 	.word	0x20001100
 8009b9c:	20001104 	.word	0x20001104

08009ba0 <__ssputs_r>:
 8009ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ba4:	688e      	ldr	r6, [r1, #8]
 8009ba6:	429e      	cmp	r6, r3
 8009ba8:	4682      	mov	sl, r0
 8009baa:	460c      	mov	r4, r1
 8009bac:	4690      	mov	r8, r2
 8009bae:	461f      	mov	r7, r3
 8009bb0:	d838      	bhi.n	8009c24 <__ssputs_r+0x84>
 8009bb2:	898a      	ldrh	r2, [r1, #12]
 8009bb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009bb8:	d032      	beq.n	8009c20 <__ssputs_r+0x80>
 8009bba:	6825      	ldr	r5, [r4, #0]
 8009bbc:	6909      	ldr	r1, [r1, #16]
 8009bbe:	eba5 0901 	sub.w	r9, r5, r1
 8009bc2:	6965      	ldr	r5, [r4, #20]
 8009bc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009bc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009bcc:	3301      	adds	r3, #1
 8009bce:	444b      	add	r3, r9
 8009bd0:	106d      	asrs	r5, r5, #1
 8009bd2:	429d      	cmp	r5, r3
 8009bd4:	bf38      	it	cc
 8009bd6:	461d      	movcc	r5, r3
 8009bd8:	0553      	lsls	r3, r2, #21
 8009bda:	d531      	bpl.n	8009c40 <__ssputs_r+0xa0>
 8009bdc:	4629      	mov	r1, r5
 8009bde:	f7ff ff85 	bl	8009aec <_malloc_r>
 8009be2:	4606      	mov	r6, r0
 8009be4:	b950      	cbnz	r0, 8009bfc <__ssputs_r+0x5c>
 8009be6:	230c      	movs	r3, #12
 8009be8:	f8ca 3000 	str.w	r3, [sl]
 8009bec:	89a3      	ldrh	r3, [r4, #12]
 8009bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bf2:	81a3      	strh	r3, [r4, #12]
 8009bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bfc:	6921      	ldr	r1, [r4, #16]
 8009bfe:	464a      	mov	r2, r9
 8009c00:	f000 fcc2 	bl	800a588 <memcpy>
 8009c04:	89a3      	ldrh	r3, [r4, #12]
 8009c06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c0e:	81a3      	strh	r3, [r4, #12]
 8009c10:	6126      	str	r6, [r4, #16]
 8009c12:	6165      	str	r5, [r4, #20]
 8009c14:	444e      	add	r6, r9
 8009c16:	eba5 0509 	sub.w	r5, r5, r9
 8009c1a:	6026      	str	r6, [r4, #0]
 8009c1c:	60a5      	str	r5, [r4, #8]
 8009c1e:	463e      	mov	r6, r7
 8009c20:	42be      	cmp	r6, r7
 8009c22:	d900      	bls.n	8009c26 <__ssputs_r+0x86>
 8009c24:	463e      	mov	r6, r7
 8009c26:	4632      	mov	r2, r6
 8009c28:	6820      	ldr	r0, [r4, #0]
 8009c2a:	4641      	mov	r1, r8
 8009c2c:	f000 fcba 	bl	800a5a4 <memmove>
 8009c30:	68a3      	ldr	r3, [r4, #8]
 8009c32:	6822      	ldr	r2, [r4, #0]
 8009c34:	1b9b      	subs	r3, r3, r6
 8009c36:	4432      	add	r2, r6
 8009c38:	60a3      	str	r3, [r4, #8]
 8009c3a:	6022      	str	r2, [r4, #0]
 8009c3c:	2000      	movs	r0, #0
 8009c3e:	e7db      	b.n	8009bf8 <__ssputs_r+0x58>
 8009c40:	462a      	mov	r2, r5
 8009c42:	f000 fcd5 	bl	800a5f0 <_realloc_r>
 8009c46:	4606      	mov	r6, r0
 8009c48:	2800      	cmp	r0, #0
 8009c4a:	d1e1      	bne.n	8009c10 <__ssputs_r+0x70>
 8009c4c:	6921      	ldr	r1, [r4, #16]
 8009c4e:	4650      	mov	r0, sl
 8009c50:	f7ff fefc 	bl	8009a4c <_free_r>
 8009c54:	e7c7      	b.n	8009be6 <__ssputs_r+0x46>
	...

08009c58 <_svfiprintf_r>:
 8009c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c5c:	4698      	mov	r8, r3
 8009c5e:	898b      	ldrh	r3, [r1, #12]
 8009c60:	061b      	lsls	r3, r3, #24
 8009c62:	b09d      	sub	sp, #116	; 0x74
 8009c64:	4607      	mov	r7, r0
 8009c66:	460d      	mov	r5, r1
 8009c68:	4614      	mov	r4, r2
 8009c6a:	d50e      	bpl.n	8009c8a <_svfiprintf_r+0x32>
 8009c6c:	690b      	ldr	r3, [r1, #16]
 8009c6e:	b963      	cbnz	r3, 8009c8a <_svfiprintf_r+0x32>
 8009c70:	2140      	movs	r1, #64	; 0x40
 8009c72:	f7ff ff3b 	bl	8009aec <_malloc_r>
 8009c76:	6028      	str	r0, [r5, #0]
 8009c78:	6128      	str	r0, [r5, #16]
 8009c7a:	b920      	cbnz	r0, 8009c86 <_svfiprintf_r+0x2e>
 8009c7c:	230c      	movs	r3, #12
 8009c7e:	603b      	str	r3, [r7, #0]
 8009c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c84:	e0d1      	b.n	8009e2a <_svfiprintf_r+0x1d2>
 8009c86:	2340      	movs	r3, #64	; 0x40
 8009c88:	616b      	str	r3, [r5, #20]
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c8e:	2320      	movs	r3, #32
 8009c90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c94:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c98:	2330      	movs	r3, #48	; 0x30
 8009c9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009e44 <_svfiprintf_r+0x1ec>
 8009c9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ca2:	f04f 0901 	mov.w	r9, #1
 8009ca6:	4623      	mov	r3, r4
 8009ca8:	469a      	mov	sl, r3
 8009caa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cae:	b10a      	cbz	r2, 8009cb4 <_svfiprintf_r+0x5c>
 8009cb0:	2a25      	cmp	r2, #37	; 0x25
 8009cb2:	d1f9      	bne.n	8009ca8 <_svfiprintf_r+0x50>
 8009cb4:	ebba 0b04 	subs.w	fp, sl, r4
 8009cb8:	d00b      	beq.n	8009cd2 <_svfiprintf_r+0x7a>
 8009cba:	465b      	mov	r3, fp
 8009cbc:	4622      	mov	r2, r4
 8009cbe:	4629      	mov	r1, r5
 8009cc0:	4638      	mov	r0, r7
 8009cc2:	f7ff ff6d 	bl	8009ba0 <__ssputs_r>
 8009cc6:	3001      	adds	r0, #1
 8009cc8:	f000 80aa 	beq.w	8009e20 <_svfiprintf_r+0x1c8>
 8009ccc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cce:	445a      	add	r2, fp
 8009cd0:	9209      	str	r2, [sp, #36]	; 0x24
 8009cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	f000 80a2 	beq.w	8009e20 <_svfiprintf_r+0x1c8>
 8009cdc:	2300      	movs	r3, #0
 8009cde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ce2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ce6:	f10a 0a01 	add.w	sl, sl, #1
 8009cea:	9304      	str	r3, [sp, #16]
 8009cec:	9307      	str	r3, [sp, #28]
 8009cee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cf2:	931a      	str	r3, [sp, #104]	; 0x68
 8009cf4:	4654      	mov	r4, sl
 8009cf6:	2205      	movs	r2, #5
 8009cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cfc:	4851      	ldr	r0, [pc, #324]	; (8009e44 <_svfiprintf_r+0x1ec>)
 8009cfe:	f7f6 fa6f 	bl	80001e0 <memchr>
 8009d02:	9a04      	ldr	r2, [sp, #16]
 8009d04:	b9d8      	cbnz	r0, 8009d3e <_svfiprintf_r+0xe6>
 8009d06:	06d0      	lsls	r0, r2, #27
 8009d08:	bf44      	itt	mi
 8009d0a:	2320      	movmi	r3, #32
 8009d0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d10:	0711      	lsls	r1, r2, #28
 8009d12:	bf44      	itt	mi
 8009d14:	232b      	movmi	r3, #43	; 0x2b
 8009d16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8009d1e:	2b2a      	cmp	r3, #42	; 0x2a
 8009d20:	d015      	beq.n	8009d4e <_svfiprintf_r+0xf6>
 8009d22:	9a07      	ldr	r2, [sp, #28]
 8009d24:	4654      	mov	r4, sl
 8009d26:	2000      	movs	r0, #0
 8009d28:	f04f 0c0a 	mov.w	ip, #10
 8009d2c:	4621      	mov	r1, r4
 8009d2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d32:	3b30      	subs	r3, #48	; 0x30
 8009d34:	2b09      	cmp	r3, #9
 8009d36:	d94e      	bls.n	8009dd6 <_svfiprintf_r+0x17e>
 8009d38:	b1b0      	cbz	r0, 8009d68 <_svfiprintf_r+0x110>
 8009d3a:	9207      	str	r2, [sp, #28]
 8009d3c:	e014      	b.n	8009d68 <_svfiprintf_r+0x110>
 8009d3e:	eba0 0308 	sub.w	r3, r0, r8
 8009d42:	fa09 f303 	lsl.w	r3, r9, r3
 8009d46:	4313      	orrs	r3, r2
 8009d48:	9304      	str	r3, [sp, #16]
 8009d4a:	46a2      	mov	sl, r4
 8009d4c:	e7d2      	b.n	8009cf4 <_svfiprintf_r+0x9c>
 8009d4e:	9b03      	ldr	r3, [sp, #12]
 8009d50:	1d19      	adds	r1, r3, #4
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	9103      	str	r1, [sp, #12]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	bfbb      	ittet	lt
 8009d5a:	425b      	neglt	r3, r3
 8009d5c:	f042 0202 	orrlt.w	r2, r2, #2
 8009d60:	9307      	strge	r3, [sp, #28]
 8009d62:	9307      	strlt	r3, [sp, #28]
 8009d64:	bfb8      	it	lt
 8009d66:	9204      	strlt	r2, [sp, #16]
 8009d68:	7823      	ldrb	r3, [r4, #0]
 8009d6a:	2b2e      	cmp	r3, #46	; 0x2e
 8009d6c:	d10c      	bne.n	8009d88 <_svfiprintf_r+0x130>
 8009d6e:	7863      	ldrb	r3, [r4, #1]
 8009d70:	2b2a      	cmp	r3, #42	; 0x2a
 8009d72:	d135      	bne.n	8009de0 <_svfiprintf_r+0x188>
 8009d74:	9b03      	ldr	r3, [sp, #12]
 8009d76:	1d1a      	adds	r2, r3, #4
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	9203      	str	r2, [sp, #12]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	bfb8      	it	lt
 8009d80:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009d84:	3402      	adds	r4, #2
 8009d86:	9305      	str	r3, [sp, #20]
 8009d88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009e54 <_svfiprintf_r+0x1fc>
 8009d8c:	7821      	ldrb	r1, [r4, #0]
 8009d8e:	2203      	movs	r2, #3
 8009d90:	4650      	mov	r0, sl
 8009d92:	f7f6 fa25 	bl	80001e0 <memchr>
 8009d96:	b140      	cbz	r0, 8009daa <_svfiprintf_r+0x152>
 8009d98:	2340      	movs	r3, #64	; 0x40
 8009d9a:	eba0 000a 	sub.w	r0, r0, sl
 8009d9e:	fa03 f000 	lsl.w	r0, r3, r0
 8009da2:	9b04      	ldr	r3, [sp, #16]
 8009da4:	4303      	orrs	r3, r0
 8009da6:	3401      	adds	r4, #1
 8009da8:	9304      	str	r3, [sp, #16]
 8009daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dae:	4826      	ldr	r0, [pc, #152]	; (8009e48 <_svfiprintf_r+0x1f0>)
 8009db0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009db4:	2206      	movs	r2, #6
 8009db6:	f7f6 fa13 	bl	80001e0 <memchr>
 8009dba:	2800      	cmp	r0, #0
 8009dbc:	d038      	beq.n	8009e30 <_svfiprintf_r+0x1d8>
 8009dbe:	4b23      	ldr	r3, [pc, #140]	; (8009e4c <_svfiprintf_r+0x1f4>)
 8009dc0:	bb1b      	cbnz	r3, 8009e0a <_svfiprintf_r+0x1b2>
 8009dc2:	9b03      	ldr	r3, [sp, #12]
 8009dc4:	3307      	adds	r3, #7
 8009dc6:	f023 0307 	bic.w	r3, r3, #7
 8009dca:	3308      	adds	r3, #8
 8009dcc:	9303      	str	r3, [sp, #12]
 8009dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dd0:	4433      	add	r3, r6
 8009dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8009dd4:	e767      	b.n	8009ca6 <_svfiprintf_r+0x4e>
 8009dd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dda:	460c      	mov	r4, r1
 8009ddc:	2001      	movs	r0, #1
 8009dde:	e7a5      	b.n	8009d2c <_svfiprintf_r+0xd4>
 8009de0:	2300      	movs	r3, #0
 8009de2:	3401      	adds	r4, #1
 8009de4:	9305      	str	r3, [sp, #20]
 8009de6:	4619      	mov	r1, r3
 8009de8:	f04f 0c0a 	mov.w	ip, #10
 8009dec:	4620      	mov	r0, r4
 8009dee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009df2:	3a30      	subs	r2, #48	; 0x30
 8009df4:	2a09      	cmp	r2, #9
 8009df6:	d903      	bls.n	8009e00 <_svfiprintf_r+0x1a8>
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d0c5      	beq.n	8009d88 <_svfiprintf_r+0x130>
 8009dfc:	9105      	str	r1, [sp, #20]
 8009dfe:	e7c3      	b.n	8009d88 <_svfiprintf_r+0x130>
 8009e00:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e04:	4604      	mov	r4, r0
 8009e06:	2301      	movs	r3, #1
 8009e08:	e7f0      	b.n	8009dec <_svfiprintf_r+0x194>
 8009e0a:	ab03      	add	r3, sp, #12
 8009e0c:	9300      	str	r3, [sp, #0]
 8009e0e:	462a      	mov	r2, r5
 8009e10:	4b0f      	ldr	r3, [pc, #60]	; (8009e50 <_svfiprintf_r+0x1f8>)
 8009e12:	a904      	add	r1, sp, #16
 8009e14:	4638      	mov	r0, r7
 8009e16:	f3af 8000 	nop.w
 8009e1a:	1c42      	adds	r2, r0, #1
 8009e1c:	4606      	mov	r6, r0
 8009e1e:	d1d6      	bne.n	8009dce <_svfiprintf_r+0x176>
 8009e20:	89ab      	ldrh	r3, [r5, #12]
 8009e22:	065b      	lsls	r3, r3, #25
 8009e24:	f53f af2c 	bmi.w	8009c80 <_svfiprintf_r+0x28>
 8009e28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e2a:	b01d      	add	sp, #116	; 0x74
 8009e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e30:	ab03      	add	r3, sp, #12
 8009e32:	9300      	str	r3, [sp, #0]
 8009e34:	462a      	mov	r2, r5
 8009e36:	4b06      	ldr	r3, [pc, #24]	; (8009e50 <_svfiprintf_r+0x1f8>)
 8009e38:	a904      	add	r1, sp, #16
 8009e3a:	4638      	mov	r0, r7
 8009e3c:	f000 f9d4 	bl	800a1e8 <_printf_i>
 8009e40:	e7eb      	b.n	8009e1a <_svfiprintf_r+0x1c2>
 8009e42:	bf00      	nop
 8009e44:	0800aba8 	.word	0x0800aba8
 8009e48:	0800abb2 	.word	0x0800abb2
 8009e4c:	00000000 	.word	0x00000000
 8009e50:	08009ba1 	.word	0x08009ba1
 8009e54:	0800abae 	.word	0x0800abae

08009e58 <__sfputc_r>:
 8009e58:	6893      	ldr	r3, [r2, #8]
 8009e5a:	3b01      	subs	r3, #1
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	b410      	push	{r4}
 8009e60:	6093      	str	r3, [r2, #8]
 8009e62:	da08      	bge.n	8009e76 <__sfputc_r+0x1e>
 8009e64:	6994      	ldr	r4, [r2, #24]
 8009e66:	42a3      	cmp	r3, r4
 8009e68:	db01      	blt.n	8009e6e <__sfputc_r+0x16>
 8009e6a:	290a      	cmp	r1, #10
 8009e6c:	d103      	bne.n	8009e76 <__sfputc_r+0x1e>
 8009e6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e72:	f7ff bb0d 	b.w	8009490 <__swbuf_r>
 8009e76:	6813      	ldr	r3, [r2, #0]
 8009e78:	1c58      	adds	r0, r3, #1
 8009e7a:	6010      	str	r0, [r2, #0]
 8009e7c:	7019      	strb	r1, [r3, #0]
 8009e7e:	4608      	mov	r0, r1
 8009e80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e84:	4770      	bx	lr

08009e86 <__sfputs_r>:
 8009e86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e88:	4606      	mov	r6, r0
 8009e8a:	460f      	mov	r7, r1
 8009e8c:	4614      	mov	r4, r2
 8009e8e:	18d5      	adds	r5, r2, r3
 8009e90:	42ac      	cmp	r4, r5
 8009e92:	d101      	bne.n	8009e98 <__sfputs_r+0x12>
 8009e94:	2000      	movs	r0, #0
 8009e96:	e007      	b.n	8009ea8 <__sfputs_r+0x22>
 8009e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e9c:	463a      	mov	r2, r7
 8009e9e:	4630      	mov	r0, r6
 8009ea0:	f7ff ffda 	bl	8009e58 <__sfputc_r>
 8009ea4:	1c43      	adds	r3, r0, #1
 8009ea6:	d1f3      	bne.n	8009e90 <__sfputs_r+0xa>
 8009ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009eac <_vfiprintf_r>:
 8009eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb0:	460d      	mov	r5, r1
 8009eb2:	b09d      	sub	sp, #116	; 0x74
 8009eb4:	4614      	mov	r4, r2
 8009eb6:	4698      	mov	r8, r3
 8009eb8:	4606      	mov	r6, r0
 8009eba:	b118      	cbz	r0, 8009ec4 <_vfiprintf_r+0x18>
 8009ebc:	6983      	ldr	r3, [r0, #24]
 8009ebe:	b90b      	cbnz	r3, 8009ec4 <_vfiprintf_r+0x18>
 8009ec0:	f7ff fcc0 	bl	8009844 <__sinit>
 8009ec4:	4b89      	ldr	r3, [pc, #548]	; (800a0ec <_vfiprintf_r+0x240>)
 8009ec6:	429d      	cmp	r5, r3
 8009ec8:	d11b      	bne.n	8009f02 <_vfiprintf_r+0x56>
 8009eca:	6875      	ldr	r5, [r6, #4]
 8009ecc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ece:	07d9      	lsls	r1, r3, #31
 8009ed0:	d405      	bmi.n	8009ede <_vfiprintf_r+0x32>
 8009ed2:	89ab      	ldrh	r3, [r5, #12]
 8009ed4:	059a      	lsls	r2, r3, #22
 8009ed6:	d402      	bmi.n	8009ede <_vfiprintf_r+0x32>
 8009ed8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009eda:	f7ff fd51 	bl	8009980 <__retarget_lock_acquire_recursive>
 8009ede:	89ab      	ldrh	r3, [r5, #12]
 8009ee0:	071b      	lsls	r3, r3, #28
 8009ee2:	d501      	bpl.n	8009ee8 <_vfiprintf_r+0x3c>
 8009ee4:	692b      	ldr	r3, [r5, #16]
 8009ee6:	b9eb      	cbnz	r3, 8009f24 <_vfiprintf_r+0x78>
 8009ee8:	4629      	mov	r1, r5
 8009eea:	4630      	mov	r0, r6
 8009eec:	f7ff fb22 	bl	8009534 <__swsetup_r>
 8009ef0:	b1c0      	cbz	r0, 8009f24 <_vfiprintf_r+0x78>
 8009ef2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ef4:	07dc      	lsls	r4, r3, #31
 8009ef6:	d50e      	bpl.n	8009f16 <_vfiprintf_r+0x6a>
 8009ef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009efc:	b01d      	add	sp, #116	; 0x74
 8009efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f02:	4b7b      	ldr	r3, [pc, #492]	; (800a0f0 <_vfiprintf_r+0x244>)
 8009f04:	429d      	cmp	r5, r3
 8009f06:	d101      	bne.n	8009f0c <_vfiprintf_r+0x60>
 8009f08:	68b5      	ldr	r5, [r6, #8]
 8009f0a:	e7df      	b.n	8009ecc <_vfiprintf_r+0x20>
 8009f0c:	4b79      	ldr	r3, [pc, #484]	; (800a0f4 <_vfiprintf_r+0x248>)
 8009f0e:	429d      	cmp	r5, r3
 8009f10:	bf08      	it	eq
 8009f12:	68f5      	ldreq	r5, [r6, #12]
 8009f14:	e7da      	b.n	8009ecc <_vfiprintf_r+0x20>
 8009f16:	89ab      	ldrh	r3, [r5, #12]
 8009f18:	0598      	lsls	r0, r3, #22
 8009f1a:	d4ed      	bmi.n	8009ef8 <_vfiprintf_r+0x4c>
 8009f1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f1e:	f7ff fd30 	bl	8009982 <__retarget_lock_release_recursive>
 8009f22:	e7e9      	b.n	8009ef8 <_vfiprintf_r+0x4c>
 8009f24:	2300      	movs	r3, #0
 8009f26:	9309      	str	r3, [sp, #36]	; 0x24
 8009f28:	2320      	movs	r3, #32
 8009f2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f32:	2330      	movs	r3, #48	; 0x30
 8009f34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a0f8 <_vfiprintf_r+0x24c>
 8009f38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f3c:	f04f 0901 	mov.w	r9, #1
 8009f40:	4623      	mov	r3, r4
 8009f42:	469a      	mov	sl, r3
 8009f44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f48:	b10a      	cbz	r2, 8009f4e <_vfiprintf_r+0xa2>
 8009f4a:	2a25      	cmp	r2, #37	; 0x25
 8009f4c:	d1f9      	bne.n	8009f42 <_vfiprintf_r+0x96>
 8009f4e:	ebba 0b04 	subs.w	fp, sl, r4
 8009f52:	d00b      	beq.n	8009f6c <_vfiprintf_r+0xc0>
 8009f54:	465b      	mov	r3, fp
 8009f56:	4622      	mov	r2, r4
 8009f58:	4629      	mov	r1, r5
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	f7ff ff93 	bl	8009e86 <__sfputs_r>
 8009f60:	3001      	adds	r0, #1
 8009f62:	f000 80aa 	beq.w	800a0ba <_vfiprintf_r+0x20e>
 8009f66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f68:	445a      	add	r2, fp
 8009f6a:	9209      	str	r2, [sp, #36]	; 0x24
 8009f6c:	f89a 3000 	ldrb.w	r3, [sl]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	f000 80a2 	beq.w	800a0ba <_vfiprintf_r+0x20e>
 8009f76:	2300      	movs	r3, #0
 8009f78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f80:	f10a 0a01 	add.w	sl, sl, #1
 8009f84:	9304      	str	r3, [sp, #16]
 8009f86:	9307      	str	r3, [sp, #28]
 8009f88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f8c:	931a      	str	r3, [sp, #104]	; 0x68
 8009f8e:	4654      	mov	r4, sl
 8009f90:	2205      	movs	r2, #5
 8009f92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f96:	4858      	ldr	r0, [pc, #352]	; (800a0f8 <_vfiprintf_r+0x24c>)
 8009f98:	f7f6 f922 	bl	80001e0 <memchr>
 8009f9c:	9a04      	ldr	r2, [sp, #16]
 8009f9e:	b9d8      	cbnz	r0, 8009fd8 <_vfiprintf_r+0x12c>
 8009fa0:	06d1      	lsls	r1, r2, #27
 8009fa2:	bf44      	itt	mi
 8009fa4:	2320      	movmi	r3, #32
 8009fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009faa:	0713      	lsls	r3, r2, #28
 8009fac:	bf44      	itt	mi
 8009fae:	232b      	movmi	r3, #43	; 0x2b
 8009fb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fb4:	f89a 3000 	ldrb.w	r3, [sl]
 8009fb8:	2b2a      	cmp	r3, #42	; 0x2a
 8009fba:	d015      	beq.n	8009fe8 <_vfiprintf_r+0x13c>
 8009fbc:	9a07      	ldr	r2, [sp, #28]
 8009fbe:	4654      	mov	r4, sl
 8009fc0:	2000      	movs	r0, #0
 8009fc2:	f04f 0c0a 	mov.w	ip, #10
 8009fc6:	4621      	mov	r1, r4
 8009fc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fcc:	3b30      	subs	r3, #48	; 0x30
 8009fce:	2b09      	cmp	r3, #9
 8009fd0:	d94e      	bls.n	800a070 <_vfiprintf_r+0x1c4>
 8009fd2:	b1b0      	cbz	r0, 800a002 <_vfiprintf_r+0x156>
 8009fd4:	9207      	str	r2, [sp, #28]
 8009fd6:	e014      	b.n	800a002 <_vfiprintf_r+0x156>
 8009fd8:	eba0 0308 	sub.w	r3, r0, r8
 8009fdc:	fa09 f303 	lsl.w	r3, r9, r3
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	9304      	str	r3, [sp, #16]
 8009fe4:	46a2      	mov	sl, r4
 8009fe6:	e7d2      	b.n	8009f8e <_vfiprintf_r+0xe2>
 8009fe8:	9b03      	ldr	r3, [sp, #12]
 8009fea:	1d19      	adds	r1, r3, #4
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	9103      	str	r1, [sp, #12]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	bfbb      	ittet	lt
 8009ff4:	425b      	neglt	r3, r3
 8009ff6:	f042 0202 	orrlt.w	r2, r2, #2
 8009ffa:	9307      	strge	r3, [sp, #28]
 8009ffc:	9307      	strlt	r3, [sp, #28]
 8009ffe:	bfb8      	it	lt
 800a000:	9204      	strlt	r2, [sp, #16]
 800a002:	7823      	ldrb	r3, [r4, #0]
 800a004:	2b2e      	cmp	r3, #46	; 0x2e
 800a006:	d10c      	bne.n	800a022 <_vfiprintf_r+0x176>
 800a008:	7863      	ldrb	r3, [r4, #1]
 800a00a:	2b2a      	cmp	r3, #42	; 0x2a
 800a00c:	d135      	bne.n	800a07a <_vfiprintf_r+0x1ce>
 800a00e:	9b03      	ldr	r3, [sp, #12]
 800a010:	1d1a      	adds	r2, r3, #4
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	9203      	str	r2, [sp, #12]
 800a016:	2b00      	cmp	r3, #0
 800a018:	bfb8      	it	lt
 800a01a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a01e:	3402      	adds	r4, #2
 800a020:	9305      	str	r3, [sp, #20]
 800a022:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a108 <_vfiprintf_r+0x25c>
 800a026:	7821      	ldrb	r1, [r4, #0]
 800a028:	2203      	movs	r2, #3
 800a02a:	4650      	mov	r0, sl
 800a02c:	f7f6 f8d8 	bl	80001e0 <memchr>
 800a030:	b140      	cbz	r0, 800a044 <_vfiprintf_r+0x198>
 800a032:	2340      	movs	r3, #64	; 0x40
 800a034:	eba0 000a 	sub.w	r0, r0, sl
 800a038:	fa03 f000 	lsl.w	r0, r3, r0
 800a03c:	9b04      	ldr	r3, [sp, #16]
 800a03e:	4303      	orrs	r3, r0
 800a040:	3401      	adds	r4, #1
 800a042:	9304      	str	r3, [sp, #16]
 800a044:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a048:	482c      	ldr	r0, [pc, #176]	; (800a0fc <_vfiprintf_r+0x250>)
 800a04a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a04e:	2206      	movs	r2, #6
 800a050:	f7f6 f8c6 	bl	80001e0 <memchr>
 800a054:	2800      	cmp	r0, #0
 800a056:	d03f      	beq.n	800a0d8 <_vfiprintf_r+0x22c>
 800a058:	4b29      	ldr	r3, [pc, #164]	; (800a100 <_vfiprintf_r+0x254>)
 800a05a:	bb1b      	cbnz	r3, 800a0a4 <_vfiprintf_r+0x1f8>
 800a05c:	9b03      	ldr	r3, [sp, #12]
 800a05e:	3307      	adds	r3, #7
 800a060:	f023 0307 	bic.w	r3, r3, #7
 800a064:	3308      	adds	r3, #8
 800a066:	9303      	str	r3, [sp, #12]
 800a068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a06a:	443b      	add	r3, r7
 800a06c:	9309      	str	r3, [sp, #36]	; 0x24
 800a06e:	e767      	b.n	8009f40 <_vfiprintf_r+0x94>
 800a070:	fb0c 3202 	mla	r2, ip, r2, r3
 800a074:	460c      	mov	r4, r1
 800a076:	2001      	movs	r0, #1
 800a078:	e7a5      	b.n	8009fc6 <_vfiprintf_r+0x11a>
 800a07a:	2300      	movs	r3, #0
 800a07c:	3401      	adds	r4, #1
 800a07e:	9305      	str	r3, [sp, #20]
 800a080:	4619      	mov	r1, r3
 800a082:	f04f 0c0a 	mov.w	ip, #10
 800a086:	4620      	mov	r0, r4
 800a088:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a08c:	3a30      	subs	r2, #48	; 0x30
 800a08e:	2a09      	cmp	r2, #9
 800a090:	d903      	bls.n	800a09a <_vfiprintf_r+0x1ee>
 800a092:	2b00      	cmp	r3, #0
 800a094:	d0c5      	beq.n	800a022 <_vfiprintf_r+0x176>
 800a096:	9105      	str	r1, [sp, #20]
 800a098:	e7c3      	b.n	800a022 <_vfiprintf_r+0x176>
 800a09a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a09e:	4604      	mov	r4, r0
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	e7f0      	b.n	800a086 <_vfiprintf_r+0x1da>
 800a0a4:	ab03      	add	r3, sp, #12
 800a0a6:	9300      	str	r3, [sp, #0]
 800a0a8:	462a      	mov	r2, r5
 800a0aa:	4b16      	ldr	r3, [pc, #88]	; (800a104 <_vfiprintf_r+0x258>)
 800a0ac:	a904      	add	r1, sp, #16
 800a0ae:	4630      	mov	r0, r6
 800a0b0:	f3af 8000 	nop.w
 800a0b4:	4607      	mov	r7, r0
 800a0b6:	1c78      	adds	r0, r7, #1
 800a0b8:	d1d6      	bne.n	800a068 <_vfiprintf_r+0x1bc>
 800a0ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0bc:	07d9      	lsls	r1, r3, #31
 800a0be:	d405      	bmi.n	800a0cc <_vfiprintf_r+0x220>
 800a0c0:	89ab      	ldrh	r3, [r5, #12]
 800a0c2:	059a      	lsls	r2, r3, #22
 800a0c4:	d402      	bmi.n	800a0cc <_vfiprintf_r+0x220>
 800a0c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0c8:	f7ff fc5b 	bl	8009982 <__retarget_lock_release_recursive>
 800a0cc:	89ab      	ldrh	r3, [r5, #12]
 800a0ce:	065b      	lsls	r3, r3, #25
 800a0d0:	f53f af12 	bmi.w	8009ef8 <_vfiprintf_r+0x4c>
 800a0d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0d6:	e711      	b.n	8009efc <_vfiprintf_r+0x50>
 800a0d8:	ab03      	add	r3, sp, #12
 800a0da:	9300      	str	r3, [sp, #0]
 800a0dc:	462a      	mov	r2, r5
 800a0de:	4b09      	ldr	r3, [pc, #36]	; (800a104 <_vfiprintf_r+0x258>)
 800a0e0:	a904      	add	r1, sp, #16
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	f000 f880 	bl	800a1e8 <_printf_i>
 800a0e8:	e7e4      	b.n	800a0b4 <_vfiprintf_r+0x208>
 800a0ea:	bf00      	nop
 800a0ec:	0800ab68 	.word	0x0800ab68
 800a0f0:	0800ab88 	.word	0x0800ab88
 800a0f4:	0800ab48 	.word	0x0800ab48
 800a0f8:	0800aba8 	.word	0x0800aba8
 800a0fc:	0800abb2 	.word	0x0800abb2
 800a100:	00000000 	.word	0x00000000
 800a104:	08009e87 	.word	0x08009e87
 800a108:	0800abae 	.word	0x0800abae

0800a10c <_printf_common>:
 800a10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a110:	4616      	mov	r6, r2
 800a112:	4699      	mov	r9, r3
 800a114:	688a      	ldr	r2, [r1, #8]
 800a116:	690b      	ldr	r3, [r1, #16]
 800a118:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a11c:	4293      	cmp	r3, r2
 800a11e:	bfb8      	it	lt
 800a120:	4613      	movlt	r3, r2
 800a122:	6033      	str	r3, [r6, #0]
 800a124:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a128:	4607      	mov	r7, r0
 800a12a:	460c      	mov	r4, r1
 800a12c:	b10a      	cbz	r2, 800a132 <_printf_common+0x26>
 800a12e:	3301      	adds	r3, #1
 800a130:	6033      	str	r3, [r6, #0]
 800a132:	6823      	ldr	r3, [r4, #0]
 800a134:	0699      	lsls	r1, r3, #26
 800a136:	bf42      	ittt	mi
 800a138:	6833      	ldrmi	r3, [r6, #0]
 800a13a:	3302      	addmi	r3, #2
 800a13c:	6033      	strmi	r3, [r6, #0]
 800a13e:	6825      	ldr	r5, [r4, #0]
 800a140:	f015 0506 	ands.w	r5, r5, #6
 800a144:	d106      	bne.n	800a154 <_printf_common+0x48>
 800a146:	f104 0a19 	add.w	sl, r4, #25
 800a14a:	68e3      	ldr	r3, [r4, #12]
 800a14c:	6832      	ldr	r2, [r6, #0]
 800a14e:	1a9b      	subs	r3, r3, r2
 800a150:	42ab      	cmp	r3, r5
 800a152:	dc26      	bgt.n	800a1a2 <_printf_common+0x96>
 800a154:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a158:	1e13      	subs	r3, r2, #0
 800a15a:	6822      	ldr	r2, [r4, #0]
 800a15c:	bf18      	it	ne
 800a15e:	2301      	movne	r3, #1
 800a160:	0692      	lsls	r2, r2, #26
 800a162:	d42b      	bmi.n	800a1bc <_printf_common+0xb0>
 800a164:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a168:	4649      	mov	r1, r9
 800a16a:	4638      	mov	r0, r7
 800a16c:	47c0      	blx	r8
 800a16e:	3001      	adds	r0, #1
 800a170:	d01e      	beq.n	800a1b0 <_printf_common+0xa4>
 800a172:	6823      	ldr	r3, [r4, #0]
 800a174:	68e5      	ldr	r5, [r4, #12]
 800a176:	6832      	ldr	r2, [r6, #0]
 800a178:	f003 0306 	and.w	r3, r3, #6
 800a17c:	2b04      	cmp	r3, #4
 800a17e:	bf08      	it	eq
 800a180:	1aad      	subeq	r5, r5, r2
 800a182:	68a3      	ldr	r3, [r4, #8]
 800a184:	6922      	ldr	r2, [r4, #16]
 800a186:	bf0c      	ite	eq
 800a188:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a18c:	2500      	movne	r5, #0
 800a18e:	4293      	cmp	r3, r2
 800a190:	bfc4      	itt	gt
 800a192:	1a9b      	subgt	r3, r3, r2
 800a194:	18ed      	addgt	r5, r5, r3
 800a196:	2600      	movs	r6, #0
 800a198:	341a      	adds	r4, #26
 800a19a:	42b5      	cmp	r5, r6
 800a19c:	d11a      	bne.n	800a1d4 <_printf_common+0xc8>
 800a19e:	2000      	movs	r0, #0
 800a1a0:	e008      	b.n	800a1b4 <_printf_common+0xa8>
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	4652      	mov	r2, sl
 800a1a6:	4649      	mov	r1, r9
 800a1a8:	4638      	mov	r0, r7
 800a1aa:	47c0      	blx	r8
 800a1ac:	3001      	adds	r0, #1
 800a1ae:	d103      	bne.n	800a1b8 <_printf_common+0xac>
 800a1b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1b8:	3501      	adds	r5, #1
 800a1ba:	e7c6      	b.n	800a14a <_printf_common+0x3e>
 800a1bc:	18e1      	adds	r1, r4, r3
 800a1be:	1c5a      	adds	r2, r3, #1
 800a1c0:	2030      	movs	r0, #48	; 0x30
 800a1c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1c6:	4422      	add	r2, r4
 800a1c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a1cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1d0:	3302      	adds	r3, #2
 800a1d2:	e7c7      	b.n	800a164 <_printf_common+0x58>
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	4622      	mov	r2, r4
 800a1d8:	4649      	mov	r1, r9
 800a1da:	4638      	mov	r0, r7
 800a1dc:	47c0      	blx	r8
 800a1de:	3001      	adds	r0, #1
 800a1e0:	d0e6      	beq.n	800a1b0 <_printf_common+0xa4>
 800a1e2:	3601      	adds	r6, #1
 800a1e4:	e7d9      	b.n	800a19a <_printf_common+0x8e>
	...

0800a1e8 <_printf_i>:
 800a1e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1ec:	460c      	mov	r4, r1
 800a1ee:	4691      	mov	r9, r2
 800a1f0:	7e27      	ldrb	r7, [r4, #24]
 800a1f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a1f4:	2f78      	cmp	r7, #120	; 0x78
 800a1f6:	4680      	mov	r8, r0
 800a1f8:	469a      	mov	sl, r3
 800a1fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1fe:	d807      	bhi.n	800a210 <_printf_i+0x28>
 800a200:	2f62      	cmp	r7, #98	; 0x62
 800a202:	d80a      	bhi.n	800a21a <_printf_i+0x32>
 800a204:	2f00      	cmp	r7, #0
 800a206:	f000 80d8 	beq.w	800a3ba <_printf_i+0x1d2>
 800a20a:	2f58      	cmp	r7, #88	; 0x58
 800a20c:	f000 80a3 	beq.w	800a356 <_printf_i+0x16e>
 800a210:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a214:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a218:	e03a      	b.n	800a290 <_printf_i+0xa8>
 800a21a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a21e:	2b15      	cmp	r3, #21
 800a220:	d8f6      	bhi.n	800a210 <_printf_i+0x28>
 800a222:	a001      	add	r0, pc, #4	; (adr r0, 800a228 <_printf_i+0x40>)
 800a224:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a228:	0800a281 	.word	0x0800a281
 800a22c:	0800a295 	.word	0x0800a295
 800a230:	0800a211 	.word	0x0800a211
 800a234:	0800a211 	.word	0x0800a211
 800a238:	0800a211 	.word	0x0800a211
 800a23c:	0800a211 	.word	0x0800a211
 800a240:	0800a295 	.word	0x0800a295
 800a244:	0800a211 	.word	0x0800a211
 800a248:	0800a211 	.word	0x0800a211
 800a24c:	0800a211 	.word	0x0800a211
 800a250:	0800a211 	.word	0x0800a211
 800a254:	0800a3a1 	.word	0x0800a3a1
 800a258:	0800a2c5 	.word	0x0800a2c5
 800a25c:	0800a383 	.word	0x0800a383
 800a260:	0800a211 	.word	0x0800a211
 800a264:	0800a211 	.word	0x0800a211
 800a268:	0800a3c3 	.word	0x0800a3c3
 800a26c:	0800a211 	.word	0x0800a211
 800a270:	0800a2c5 	.word	0x0800a2c5
 800a274:	0800a211 	.word	0x0800a211
 800a278:	0800a211 	.word	0x0800a211
 800a27c:	0800a38b 	.word	0x0800a38b
 800a280:	680b      	ldr	r3, [r1, #0]
 800a282:	1d1a      	adds	r2, r3, #4
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	600a      	str	r2, [r1, #0]
 800a288:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a28c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a290:	2301      	movs	r3, #1
 800a292:	e0a3      	b.n	800a3dc <_printf_i+0x1f4>
 800a294:	6825      	ldr	r5, [r4, #0]
 800a296:	6808      	ldr	r0, [r1, #0]
 800a298:	062e      	lsls	r6, r5, #24
 800a29a:	f100 0304 	add.w	r3, r0, #4
 800a29e:	d50a      	bpl.n	800a2b6 <_printf_i+0xce>
 800a2a0:	6805      	ldr	r5, [r0, #0]
 800a2a2:	600b      	str	r3, [r1, #0]
 800a2a4:	2d00      	cmp	r5, #0
 800a2a6:	da03      	bge.n	800a2b0 <_printf_i+0xc8>
 800a2a8:	232d      	movs	r3, #45	; 0x2d
 800a2aa:	426d      	negs	r5, r5
 800a2ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2b0:	485e      	ldr	r0, [pc, #376]	; (800a42c <_printf_i+0x244>)
 800a2b2:	230a      	movs	r3, #10
 800a2b4:	e019      	b.n	800a2ea <_printf_i+0x102>
 800a2b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a2ba:	6805      	ldr	r5, [r0, #0]
 800a2bc:	600b      	str	r3, [r1, #0]
 800a2be:	bf18      	it	ne
 800a2c0:	b22d      	sxthne	r5, r5
 800a2c2:	e7ef      	b.n	800a2a4 <_printf_i+0xbc>
 800a2c4:	680b      	ldr	r3, [r1, #0]
 800a2c6:	6825      	ldr	r5, [r4, #0]
 800a2c8:	1d18      	adds	r0, r3, #4
 800a2ca:	6008      	str	r0, [r1, #0]
 800a2cc:	0628      	lsls	r0, r5, #24
 800a2ce:	d501      	bpl.n	800a2d4 <_printf_i+0xec>
 800a2d0:	681d      	ldr	r5, [r3, #0]
 800a2d2:	e002      	b.n	800a2da <_printf_i+0xf2>
 800a2d4:	0669      	lsls	r1, r5, #25
 800a2d6:	d5fb      	bpl.n	800a2d0 <_printf_i+0xe8>
 800a2d8:	881d      	ldrh	r5, [r3, #0]
 800a2da:	4854      	ldr	r0, [pc, #336]	; (800a42c <_printf_i+0x244>)
 800a2dc:	2f6f      	cmp	r7, #111	; 0x6f
 800a2de:	bf0c      	ite	eq
 800a2e0:	2308      	moveq	r3, #8
 800a2e2:	230a      	movne	r3, #10
 800a2e4:	2100      	movs	r1, #0
 800a2e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a2ea:	6866      	ldr	r6, [r4, #4]
 800a2ec:	60a6      	str	r6, [r4, #8]
 800a2ee:	2e00      	cmp	r6, #0
 800a2f0:	bfa2      	ittt	ge
 800a2f2:	6821      	ldrge	r1, [r4, #0]
 800a2f4:	f021 0104 	bicge.w	r1, r1, #4
 800a2f8:	6021      	strge	r1, [r4, #0]
 800a2fa:	b90d      	cbnz	r5, 800a300 <_printf_i+0x118>
 800a2fc:	2e00      	cmp	r6, #0
 800a2fe:	d04d      	beq.n	800a39c <_printf_i+0x1b4>
 800a300:	4616      	mov	r6, r2
 800a302:	fbb5 f1f3 	udiv	r1, r5, r3
 800a306:	fb03 5711 	mls	r7, r3, r1, r5
 800a30a:	5dc7      	ldrb	r7, [r0, r7]
 800a30c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a310:	462f      	mov	r7, r5
 800a312:	42bb      	cmp	r3, r7
 800a314:	460d      	mov	r5, r1
 800a316:	d9f4      	bls.n	800a302 <_printf_i+0x11a>
 800a318:	2b08      	cmp	r3, #8
 800a31a:	d10b      	bne.n	800a334 <_printf_i+0x14c>
 800a31c:	6823      	ldr	r3, [r4, #0]
 800a31e:	07df      	lsls	r7, r3, #31
 800a320:	d508      	bpl.n	800a334 <_printf_i+0x14c>
 800a322:	6923      	ldr	r3, [r4, #16]
 800a324:	6861      	ldr	r1, [r4, #4]
 800a326:	4299      	cmp	r1, r3
 800a328:	bfde      	ittt	le
 800a32a:	2330      	movle	r3, #48	; 0x30
 800a32c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a330:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800a334:	1b92      	subs	r2, r2, r6
 800a336:	6122      	str	r2, [r4, #16]
 800a338:	f8cd a000 	str.w	sl, [sp]
 800a33c:	464b      	mov	r3, r9
 800a33e:	aa03      	add	r2, sp, #12
 800a340:	4621      	mov	r1, r4
 800a342:	4640      	mov	r0, r8
 800a344:	f7ff fee2 	bl	800a10c <_printf_common>
 800a348:	3001      	adds	r0, #1
 800a34a:	d14c      	bne.n	800a3e6 <_printf_i+0x1fe>
 800a34c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a350:	b004      	add	sp, #16
 800a352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a356:	4835      	ldr	r0, [pc, #212]	; (800a42c <_printf_i+0x244>)
 800a358:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a35c:	6823      	ldr	r3, [r4, #0]
 800a35e:	680e      	ldr	r6, [r1, #0]
 800a360:	061f      	lsls	r7, r3, #24
 800a362:	f856 5b04 	ldr.w	r5, [r6], #4
 800a366:	600e      	str	r6, [r1, #0]
 800a368:	d514      	bpl.n	800a394 <_printf_i+0x1ac>
 800a36a:	07d9      	lsls	r1, r3, #31
 800a36c:	bf44      	itt	mi
 800a36e:	f043 0320 	orrmi.w	r3, r3, #32
 800a372:	6023      	strmi	r3, [r4, #0]
 800a374:	b91d      	cbnz	r5, 800a37e <_printf_i+0x196>
 800a376:	6823      	ldr	r3, [r4, #0]
 800a378:	f023 0320 	bic.w	r3, r3, #32
 800a37c:	6023      	str	r3, [r4, #0]
 800a37e:	2310      	movs	r3, #16
 800a380:	e7b0      	b.n	800a2e4 <_printf_i+0xfc>
 800a382:	6823      	ldr	r3, [r4, #0]
 800a384:	f043 0320 	orr.w	r3, r3, #32
 800a388:	6023      	str	r3, [r4, #0]
 800a38a:	2378      	movs	r3, #120	; 0x78
 800a38c:	4828      	ldr	r0, [pc, #160]	; (800a430 <_printf_i+0x248>)
 800a38e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a392:	e7e3      	b.n	800a35c <_printf_i+0x174>
 800a394:	065e      	lsls	r6, r3, #25
 800a396:	bf48      	it	mi
 800a398:	b2ad      	uxthmi	r5, r5
 800a39a:	e7e6      	b.n	800a36a <_printf_i+0x182>
 800a39c:	4616      	mov	r6, r2
 800a39e:	e7bb      	b.n	800a318 <_printf_i+0x130>
 800a3a0:	680b      	ldr	r3, [r1, #0]
 800a3a2:	6826      	ldr	r6, [r4, #0]
 800a3a4:	6960      	ldr	r0, [r4, #20]
 800a3a6:	1d1d      	adds	r5, r3, #4
 800a3a8:	600d      	str	r5, [r1, #0]
 800a3aa:	0635      	lsls	r5, r6, #24
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	d501      	bpl.n	800a3b4 <_printf_i+0x1cc>
 800a3b0:	6018      	str	r0, [r3, #0]
 800a3b2:	e002      	b.n	800a3ba <_printf_i+0x1d2>
 800a3b4:	0671      	lsls	r1, r6, #25
 800a3b6:	d5fb      	bpl.n	800a3b0 <_printf_i+0x1c8>
 800a3b8:	8018      	strh	r0, [r3, #0]
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	6123      	str	r3, [r4, #16]
 800a3be:	4616      	mov	r6, r2
 800a3c0:	e7ba      	b.n	800a338 <_printf_i+0x150>
 800a3c2:	680b      	ldr	r3, [r1, #0]
 800a3c4:	1d1a      	adds	r2, r3, #4
 800a3c6:	600a      	str	r2, [r1, #0]
 800a3c8:	681e      	ldr	r6, [r3, #0]
 800a3ca:	6862      	ldr	r2, [r4, #4]
 800a3cc:	2100      	movs	r1, #0
 800a3ce:	4630      	mov	r0, r6
 800a3d0:	f7f5 ff06 	bl	80001e0 <memchr>
 800a3d4:	b108      	cbz	r0, 800a3da <_printf_i+0x1f2>
 800a3d6:	1b80      	subs	r0, r0, r6
 800a3d8:	6060      	str	r0, [r4, #4]
 800a3da:	6863      	ldr	r3, [r4, #4]
 800a3dc:	6123      	str	r3, [r4, #16]
 800a3de:	2300      	movs	r3, #0
 800a3e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3e4:	e7a8      	b.n	800a338 <_printf_i+0x150>
 800a3e6:	6923      	ldr	r3, [r4, #16]
 800a3e8:	4632      	mov	r2, r6
 800a3ea:	4649      	mov	r1, r9
 800a3ec:	4640      	mov	r0, r8
 800a3ee:	47d0      	blx	sl
 800a3f0:	3001      	adds	r0, #1
 800a3f2:	d0ab      	beq.n	800a34c <_printf_i+0x164>
 800a3f4:	6823      	ldr	r3, [r4, #0]
 800a3f6:	079b      	lsls	r3, r3, #30
 800a3f8:	d413      	bmi.n	800a422 <_printf_i+0x23a>
 800a3fa:	68e0      	ldr	r0, [r4, #12]
 800a3fc:	9b03      	ldr	r3, [sp, #12]
 800a3fe:	4298      	cmp	r0, r3
 800a400:	bfb8      	it	lt
 800a402:	4618      	movlt	r0, r3
 800a404:	e7a4      	b.n	800a350 <_printf_i+0x168>
 800a406:	2301      	movs	r3, #1
 800a408:	4632      	mov	r2, r6
 800a40a:	4649      	mov	r1, r9
 800a40c:	4640      	mov	r0, r8
 800a40e:	47d0      	blx	sl
 800a410:	3001      	adds	r0, #1
 800a412:	d09b      	beq.n	800a34c <_printf_i+0x164>
 800a414:	3501      	adds	r5, #1
 800a416:	68e3      	ldr	r3, [r4, #12]
 800a418:	9903      	ldr	r1, [sp, #12]
 800a41a:	1a5b      	subs	r3, r3, r1
 800a41c:	42ab      	cmp	r3, r5
 800a41e:	dcf2      	bgt.n	800a406 <_printf_i+0x21e>
 800a420:	e7eb      	b.n	800a3fa <_printf_i+0x212>
 800a422:	2500      	movs	r5, #0
 800a424:	f104 0619 	add.w	r6, r4, #25
 800a428:	e7f5      	b.n	800a416 <_printf_i+0x22e>
 800a42a:	bf00      	nop
 800a42c:	0800abb9 	.word	0x0800abb9
 800a430:	0800abca 	.word	0x0800abca

0800a434 <_sbrk_r>:
 800a434:	b538      	push	{r3, r4, r5, lr}
 800a436:	4d06      	ldr	r5, [pc, #24]	; (800a450 <_sbrk_r+0x1c>)
 800a438:	2300      	movs	r3, #0
 800a43a:	4604      	mov	r4, r0
 800a43c:	4608      	mov	r0, r1
 800a43e:	602b      	str	r3, [r5, #0]
 800a440:	f7f6 ffd0 	bl	80013e4 <_sbrk>
 800a444:	1c43      	adds	r3, r0, #1
 800a446:	d102      	bne.n	800a44e <_sbrk_r+0x1a>
 800a448:	682b      	ldr	r3, [r5, #0]
 800a44a:	b103      	cbz	r3, 800a44e <_sbrk_r+0x1a>
 800a44c:	6023      	str	r3, [r4, #0]
 800a44e:	bd38      	pop	{r3, r4, r5, pc}
 800a450:	20003428 	.word	0x20003428

0800a454 <__sread>:
 800a454:	b510      	push	{r4, lr}
 800a456:	460c      	mov	r4, r1
 800a458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a45c:	f000 f8ee 	bl	800a63c <_read_r>
 800a460:	2800      	cmp	r0, #0
 800a462:	bfab      	itete	ge
 800a464:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a466:	89a3      	ldrhlt	r3, [r4, #12]
 800a468:	181b      	addge	r3, r3, r0
 800a46a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a46e:	bfac      	ite	ge
 800a470:	6563      	strge	r3, [r4, #84]	; 0x54
 800a472:	81a3      	strhlt	r3, [r4, #12]
 800a474:	bd10      	pop	{r4, pc}

0800a476 <__swrite>:
 800a476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a47a:	461f      	mov	r7, r3
 800a47c:	898b      	ldrh	r3, [r1, #12]
 800a47e:	05db      	lsls	r3, r3, #23
 800a480:	4605      	mov	r5, r0
 800a482:	460c      	mov	r4, r1
 800a484:	4616      	mov	r6, r2
 800a486:	d505      	bpl.n	800a494 <__swrite+0x1e>
 800a488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a48c:	2302      	movs	r3, #2
 800a48e:	2200      	movs	r2, #0
 800a490:	f000 f868 	bl	800a564 <_lseek_r>
 800a494:	89a3      	ldrh	r3, [r4, #12]
 800a496:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a49a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a49e:	81a3      	strh	r3, [r4, #12]
 800a4a0:	4632      	mov	r2, r6
 800a4a2:	463b      	mov	r3, r7
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4aa:	f000 b817 	b.w	800a4dc <_write_r>

0800a4ae <__sseek>:
 800a4ae:	b510      	push	{r4, lr}
 800a4b0:	460c      	mov	r4, r1
 800a4b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4b6:	f000 f855 	bl	800a564 <_lseek_r>
 800a4ba:	1c43      	adds	r3, r0, #1
 800a4bc:	89a3      	ldrh	r3, [r4, #12]
 800a4be:	bf15      	itete	ne
 800a4c0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a4c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a4c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a4ca:	81a3      	strheq	r3, [r4, #12]
 800a4cc:	bf18      	it	ne
 800a4ce:	81a3      	strhne	r3, [r4, #12]
 800a4d0:	bd10      	pop	{r4, pc}

0800a4d2 <__sclose>:
 800a4d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4d6:	f000 b813 	b.w	800a500 <_close_r>
	...

0800a4dc <_write_r>:
 800a4dc:	b538      	push	{r3, r4, r5, lr}
 800a4de:	4d07      	ldr	r5, [pc, #28]	; (800a4fc <_write_r+0x20>)
 800a4e0:	4604      	mov	r4, r0
 800a4e2:	4608      	mov	r0, r1
 800a4e4:	4611      	mov	r1, r2
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	602a      	str	r2, [r5, #0]
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	f7f6 fb72 	bl	8000bd4 <_write>
 800a4f0:	1c43      	adds	r3, r0, #1
 800a4f2:	d102      	bne.n	800a4fa <_write_r+0x1e>
 800a4f4:	682b      	ldr	r3, [r5, #0]
 800a4f6:	b103      	cbz	r3, 800a4fa <_write_r+0x1e>
 800a4f8:	6023      	str	r3, [r4, #0]
 800a4fa:	bd38      	pop	{r3, r4, r5, pc}
 800a4fc:	20003428 	.word	0x20003428

0800a500 <_close_r>:
 800a500:	b538      	push	{r3, r4, r5, lr}
 800a502:	4d06      	ldr	r5, [pc, #24]	; (800a51c <_close_r+0x1c>)
 800a504:	2300      	movs	r3, #0
 800a506:	4604      	mov	r4, r0
 800a508:	4608      	mov	r0, r1
 800a50a:	602b      	str	r3, [r5, #0]
 800a50c:	f7f6 ff35 	bl	800137a <_close>
 800a510:	1c43      	adds	r3, r0, #1
 800a512:	d102      	bne.n	800a51a <_close_r+0x1a>
 800a514:	682b      	ldr	r3, [r5, #0]
 800a516:	b103      	cbz	r3, 800a51a <_close_r+0x1a>
 800a518:	6023      	str	r3, [r4, #0]
 800a51a:	bd38      	pop	{r3, r4, r5, pc}
 800a51c:	20003428 	.word	0x20003428

0800a520 <_fstat_r>:
 800a520:	b538      	push	{r3, r4, r5, lr}
 800a522:	4d07      	ldr	r5, [pc, #28]	; (800a540 <_fstat_r+0x20>)
 800a524:	2300      	movs	r3, #0
 800a526:	4604      	mov	r4, r0
 800a528:	4608      	mov	r0, r1
 800a52a:	4611      	mov	r1, r2
 800a52c:	602b      	str	r3, [r5, #0]
 800a52e:	f7f6 ff30 	bl	8001392 <_fstat>
 800a532:	1c43      	adds	r3, r0, #1
 800a534:	d102      	bne.n	800a53c <_fstat_r+0x1c>
 800a536:	682b      	ldr	r3, [r5, #0]
 800a538:	b103      	cbz	r3, 800a53c <_fstat_r+0x1c>
 800a53a:	6023      	str	r3, [r4, #0]
 800a53c:	bd38      	pop	{r3, r4, r5, pc}
 800a53e:	bf00      	nop
 800a540:	20003428 	.word	0x20003428

0800a544 <_isatty_r>:
 800a544:	b538      	push	{r3, r4, r5, lr}
 800a546:	4d06      	ldr	r5, [pc, #24]	; (800a560 <_isatty_r+0x1c>)
 800a548:	2300      	movs	r3, #0
 800a54a:	4604      	mov	r4, r0
 800a54c:	4608      	mov	r0, r1
 800a54e:	602b      	str	r3, [r5, #0]
 800a550:	f7f6 ff2f 	bl	80013b2 <_isatty>
 800a554:	1c43      	adds	r3, r0, #1
 800a556:	d102      	bne.n	800a55e <_isatty_r+0x1a>
 800a558:	682b      	ldr	r3, [r5, #0]
 800a55a:	b103      	cbz	r3, 800a55e <_isatty_r+0x1a>
 800a55c:	6023      	str	r3, [r4, #0]
 800a55e:	bd38      	pop	{r3, r4, r5, pc}
 800a560:	20003428 	.word	0x20003428

0800a564 <_lseek_r>:
 800a564:	b538      	push	{r3, r4, r5, lr}
 800a566:	4d07      	ldr	r5, [pc, #28]	; (800a584 <_lseek_r+0x20>)
 800a568:	4604      	mov	r4, r0
 800a56a:	4608      	mov	r0, r1
 800a56c:	4611      	mov	r1, r2
 800a56e:	2200      	movs	r2, #0
 800a570:	602a      	str	r2, [r5, #0]
 800a572:	461a      	mov	r2, r3
 800a574:	f7f6 ff28 	bl	80013c8 <_lseek>
 800a578:	1c43      	adds	r3, r0, #1
 800a57a:	d102      	bne.n	800a582 <_lseek_r+0x1e>
 800a57c:	682b      	ldr	r3, [r5, #0]
 800a57e:	b103      	cbz	r3, 800a582 <_lseek_r+0x1e>
 800a580:	6023      	str	r3, [r4, #0]
 800a582:	bd38      	pop	{r3, r4, r5, pc}
 800a584:	20003428 	.word	0x20003428

0800a588 <memcpy>:
 800a588:	440a      	add	r2, r1
 800a58a:	4291      	cmp	r1, r2
 800a58c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a590:	d100      	bne.n	800a594 <memcpy+0xc>
 800a592:	4770      	bx	lr
 800a594:	b510      	push	{r4, lr}
 800a596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a59a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a59e:	4291      	cmp	r1, r2
 800a5a0:	d1f9      	bne.n	800a596 <memcpy+0xe>
 800a5a2:	bd10      	pop	{r4, pc}

0800a5a4 <memmove>:
 800a5a4:	4288      	cmp	r0, r1
 800a5a6:	b510      	push	{r4, lr}
 800a5a8:	eb01 0402 	add.w	r4, r1, r2
 800a5ac:	d902      	bls.n	800a5b4 <memmove+0x10>
 800a5ae:	4284      	cmp	r4, r0
 800a5b0:	4623      	mov	r3, r4
 800a5b2:	d807      	bhi.n	800a5c4 <memmove+0x20>
 800a5b4:	1e43      	subs	r3, r0, #1
 800a5b6:	42a1      	cmp	r1, r4
 800a5b8:	d008      	beq.n	800a5cc <memmove+0x28>
 800a5ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5c2:	e7f8      	b.n	800a5b6 <memmove+0x12>
 800a5c4:	4402      	add	r2, r0
 800a5c6:	4601      	mov	r1, r0
 800a5c8:	428a      	cmp	r2, r1
 800a5ca:	d100      	bne.n	800a5ce <memmove+0x2a>
 800a5cc:	bd10      	pop	{r4, pc}
 800a5ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5d6:	e7f7      	b.n	800a5c8 <memmove+0x24>

0800a5d8 <__malloc_lock>:
 800a5d8:	4801      	ldr	r0, [pc, #4]	; (800a5e0 <__malloc_lock+0x8>)
 800a5da:	f7ff b9d1 	b.w	8009980 <__retarget_lock_acquire_recursive>
 800a5de:	bf00      	nop
 800a5e0:	20003420 	.word	0x20003420

0800a5e4 <__malloc_unlock>:
 800a5e4:	4801      	ldr	r0, [pc, #4]	; (800a5ec <__malloc_unlock+0x8>)
 800a5e6:	f7ff b9cc 	b.w	8009982 <__retarget_lock_release_recursive>
 800a5ea:	bf00      	nop
 800a5ec:	20003420 	.word	0x20003420

0800a5f0 <_realloc_r>:
 800a5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5f2:	4607      	mov	r7, r0
 800a5f4:	4614      	mov	r4, r2
 800a5f6:	460e      	mov	r6, r1
 800a5f8:	b921      	cbnz	r1, 800a604 <_realloc_r+0x14>
 800a5fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a5fe:	4611      	mov	r1, r2
 800a600:	f7ff ba74 	b.w	8009aec <_malloc_r>
 800a604:	b922      	cbnz	r2, 800a610 <_realloc_r+0x20>
 800a606:	f7ff fa21 	bl	8009a4c <_free_r>
 800a60a:	4625      	mov	r5, r4
 800a60c:	4628      	mov	r0, r5
 800a60e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a610:	f000 f826 	bl	800a660 <_malloc_usable_size_r>
 800a614:	42a0      	cmp	r0, r4
 800a616:	d20f      	bcs.n	800a638 <_realloc_r+0x48>
 800a618:	4621      	mov	r1, r4
 800a61a:	4638      	mov	r0, r7
 800a61c:	f7ff fa66 	bl	8009aec <_malloc_r>
 800a620:	4605      	mov	r5, r0
 800a622:	2800      	cmp	r0, #0
 800a624:	d0f2      	beq.n	800a60c <_realloc_r+0x1c>
 800a626:	4631      	mov	r1, r6
 800a628:	4622      	mov	r2, r4
 800a62a:	f7ff ffad 	bl	800a588 <memcpy>
 800a62e:	4631      	mov	r1, r6
 800a630:	4638      	mov	r0, r7
 800a632:	f7ff fa0b 	bl	8009a4c <_free_r>
 800a636:	e7e9      	b.n	800a60c <_realloc_r+0x1c>
 800a638:	4635      	mov	r5, r6
 800a63a:	e7e7      	b.n	800a60c <_realloc_r+0x1c>

0800a63c <_read_r>:
 800a63c:	b538      	push	{r3, r4, r5, lr}
 800a63e:	4d07      	ldr	r5, [pc, #28]	; (800a65c <_read_r+0x20>)
 800a640:	4604      	mov	r4, r0
 800a642:	4608      	mov	r0, r1
 800a644:	4611      	mov	r1, r2
 800a646:	2200      	movs	r2, #0
 800a648:	602a      	str	r2, [r5, #0]
 800a64a:	461a      	mov	r2, r3
 800a64c:	f7f6 fe78 	bl	8001340 <_read>
 800a650:	1c43      	adds	r3, r0, #1
 800a652:	d102      	bne.n	800a65a <_read_r+0x1e>
 800a654:	682b      	ldr	r3, [r5, #0]
 800a656:	b103      	cbz	r3, 800a65a <_read_r+0x1e>
 800a658:	6023      	str	r3, [r4, #0]
 800a65a:	bd38      	pop	{r3, r4, r5, pc}
 800a65c:	20003428 	.word	0x20003428

0800a660 <_malloc_usable_size_r>:
 800a660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a664:	1f18      	subs	r0, r3, #4
 800a666:	2b00      	cmp	r3, #0
 800a668:	bfbc      	itt	lt
 800a66a:	580b      	ldrlt	r3, [r1, r0]
 800a66c:	18c0      	addlt	r0, r0, r3
 800a66e:	4770      	bx	lr

0800a670 <_init>:
 800a670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a672:	bf00      	nop
 800a674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a676:	bc08      	pop	{r3}
 800a678:	469e      	mov	lr, r3
 800a67a:	4770      	bx	lr

0800a67c <_fini>:
 800a67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a67e:	bf00      	nop
 800a680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a682:	bc08      	pop	{r3}
 800a684:	469e      	mov	lr, r3
 800a686:	4770      	bx	lr
