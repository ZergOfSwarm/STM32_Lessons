
LWIP_POST_407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000112c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001003c  08011450  08011450  00021450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802148c  0802148c  0004008c  2**0
                  CONTENTS
  4 .ARM          00000008  0802148c  0802148c  0003148c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021494  08021494  0004008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021494  08021494  00031494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021498  08021498  00031498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0802149c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0004008c  2**0
                  CONTENTS
 10 .bss          00006cec  2000008c  2000008c  0004008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20006d78  20006d78  0004008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0004008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c90c  00000000  00000000  000400bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000057f4  00000000  00000000  0006c9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001150  00000000  00000000  000721c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010e8  00000000  00000000  00073310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d093  00000000  00000000  000743f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000213ed  00000000  00000000  000a148b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da4f6  00000000  00000000  000c2878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0019cd6e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005000  00000000  00000000  0019cdc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011438 	.word	0x08011438

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08011438 	.word	0x08011438

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <ssi_handler>:
int indx1 = 0;
/* we will use character "x", "y","z" as tag for SSI */
char const *TAGCHAR[] = { "x", "y", "z", "test" };
char const **TAGS = TAGCHAR;

uint16_t ssi_handler(int iIndex, char *pcInsert, int iInsertLen) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	2b03      	cmp	r3, #3
 80005a8:	d852      	bhi.n	8000650 <ssi_handler+0xb8>
 80005aa:	a201      	add	r2, pc, #4	; (adr r2, 80005b0 <ssi_handler+0x18>)
 80005ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b0:	080005c1 	.word	0x080005c1
 80005b4:	080005e5 	.word	0x080005e5
 80005b8:	08000609 	.word	0x08000609
 80005bc:	0800062d 	.word	0x0800062d
	switch (iIndex) {
	case 0:
		indx += 1;
 80005c0:	4b26      	ldr	r3, [pc, #152]	; (800065c <ssi_handler+0xc4>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	3301      	adds	r3, #1
 80005c6:	4a25      	ldr	r2, [pc, #148]	; (800065c <ssi_handler+0xc4>)
 80005c8:	6013      	str	r3, [r2, #0]
		sprintf(pcInsert, "%d", indx);
 80005ca:	4b24      	ldr	r3, [pc, #144]	; (800065c <ssi_handler+0xc4>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	461a      	mov	r2, r3
 80005d0:	4923      	ldr	r1, [pc, #140]	; (8000660 <ssi_handler+0xc8>)
 80005d2:	68b8      	ldr	r0, [r7, #8]
 80005d4:	f00f fcfa 	bl	800ffcc <siprintf>
		return strlen(pcInsert);
 80005d8:	68b8      	ldr	r0, [r7, #8]
 80005da:	f7ff fe03 	bl	80001e4 <strlen>
 80005de:	4603      	mov	r3, r0
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	e037      	b.n	8000654 <ssi_handler+0xbc>
		break;
	case 1:
		indx += 1;
 80005e4:	4b1d      	ldr	r3, [pc, #116]	; (800065c <ssi_handler+0xc4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	3301      	adds	r3, #1
 80005ea:	4a1c      	ldr	r2, [pc, #112]	; (800065c <ssi_handler+0xc4>)
 80005ec:	6013      	str	r3, [r2, #0]
		sprintf(pcInsert, "%d", indx);
 80005ee:	4b1b      	ldr	r3, [pc, #108]	; (800065c <ssi_handler+0xc4>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	461a      	mov	r2, r3
 80005f4:	491a      	ldr	r1, [pc, #104]	; (8000660 <ssi_handler+0xc8>)
 80005f6:	68b8      	ldr	r0, [r7, #8]
 80005f8:	f00f fce8 	bl	800ffcc <siprintf>
		return strlen(pcInsert);
 80005fc:	68b8      	ldr	r0, [r7, #8]
 80005fe:	f7ff fdf1 	bl	80001e4 <strlen>
 8000602:	4603      	mov	r3, r0
 8000604:	b29b      	uxth	r3, r3
 8000606:	e025      	b.n	8000654 <ssi_handler+0xbc>
		break;
	case 2:
		indx += 1;
 8000608:	4b14      	ldr	r3, [pc, #80]	; (800065c <ssi_handler+0xc4>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	3301      	adds	r3, #1
 800060e:	4a13      	ldr	r2, [pc, #76]	; (800065c <ssi_handler+0xc4>)
 8000610:	6013      	str	r3, [r2, #0]
		sprintf(pcInsert, "%d", indx);
 8000612:	4b12      	ldr	r3, [pc, #72]	; (800065c <ssi_handler+0xc4>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	461a      	mov	r2, r3
 8000618:	4911      	ldr	r1, [pc, #68]	; (8000660 <ssi_handler+0xc8>)
 800061a:	68b8      	ldr	r0, [r7, #8]
 800061c:	f00f fcd6 	bl	800ffcc <siprintf>
		return strlen(pcInsert);
 8000620:	68b8      	ldr	r0, [r7, #8]
 8000622:	f7ff fddf 	bl	80001e4 <strlen>
 8000626:	4603      	mov	r3, r0
 8000628:	b29b      	uxth	r3, r3
 800062a:	e013      	b.n	8000654 <ssi_handler+0xbc>
		break;
	case 3:
		indx1 += 1;
 800062c:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <ssi_handler+0xcc>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	3301      	adds	r3, #1
 8000632:	4a0c      	ldr	r2, [pc, #48]	; (8000664 <ssi_handler+0xcc>)
 8000634:	6013      	str	r3, [r2, #0]
		sprintf(pcInsert, "%d", indx1);
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <ssi_handler+0xcc>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	461a      	mov	r2, r3
 800063c:	4908      	ldr	r1, [pc, #32]	; (8000660 <ssi_handler+0xc8>)
 800063e:	68b8      	ldr	r0, [r7, #8]
 8000640:	f00f fcc4 	bl	800ffcc <siprintf>
		return strlen(pcInsert);
 8000644:	68b8      	ldr	r0, [r7, #8]
 8000646:	f7ff fdcd 	bl	80001e4 <strlen>
 800064a:	4603      	mov	r3, r0
 800064c:	b29b      	uxth	r3, r3
 800064e:	e001      	b.n	8000654 <ssi_handler+0xbc>
		break;
	default:
		break;
 8000650:	bf00      	nop
	}

	return 0;
 8000652:	2300      	movs	r3, #0
}
 8000654:	4618      	mov	r0, r3
 8000656:	3710      	adds	r7, #16
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	200000a8 	.word	0x200000a8
 8000660:	08011464 	.word	0x08011464
 8000664:	200000ac 	.word	0x200000ac

08000668 <CGIForm_Handler>:
char name[30];
char leds[3]; // +1 для пробела!
tCGI CGI_TAB[2]; // 3. For LED создадим массив для LED CGI

const char* CGIForm_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
 8000674:	603b      	str	r3, [r7, #0]
	if (iIndex == 0) {
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d145      	bne.n	8000708 <CGIForm_Handler+0xa0>
		for (int i = 0; i < iNumParams; i++) {
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	e03e      	b.n	8000700 <CGIForm_Handler+0x98>
			if (strcmp(pcParam[i], "fname") == 0) // if the fname string is found
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	4413      	add	r3, r2
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4921      	ldr	r1, [pc, #132]	; (8000714 <CGIForm_Handler+0xac>)
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff fd9e 	bl	80001d0 <strcmp>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d10e      	bne.n	80006b8 <CGIForm_Handler+0x50>
					{
				memset(name, '\0', 30); // Очищаем массив перед записью новых данных.
 800069a:	221e      	movs	r2, #30
 800069c:	2100      	movs	r1, #0
 800069e:	481e      	ldr	r0, [pc, #120]	; (8000718 <CGIForm_Handler+0xb0>)
 80006a0:	f00f fc00 	bl	800fea4 <memset>
				strcpy(name, pcValue[i]); // Сохраняем значение в переменную.
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	683a      	ldr	r2, [r7, #0]
 80006aa:	4413      	add	r3, r2
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4619      	mov	r1, r3
 80006b0:	4819      	ldr	r0, [pc, #100]	; (8000718 <CGIForm_Handler+0xb0>)
 80006b2:	f00f fcc7 	bl	8010044 <strcpy>
 80006b6:	e020      	b.n	80006fa <CGIForm_Handler+0x92>
			}

			else if (strcmp(pcParam[i], "lname") == 0) // if the lname string is found
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	4413      	add	r3, r2
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4916      	ldr	r1, [pc, #88]	; (800071c <CGIForm_Handler+0xb4>)
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff fd83 	bl	80001d0 <strcmp>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d114      	bne.n	80006fa <CGIForm_Handler+0x92>
					{
				strcat(name, " "); // Сконкатенируем fname с lname разделяя пробелом.
 80006d0:	4811      	ldr	r0, [pc, #68]	; (8000718 <CGIForm_Handler+0xb0>)
 80006d2:	f7ff fd87 	bl	80001e4 <strlen>
 80006d6:	4603      	mov	r3, r0
 80006d8:	461a      	mov	r2, r3
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <CGIForm_Handler+0xb0>)
 80006dc:	4413      	add	r3, r2
 80006de:	4910      	ldr	r1, [pc, #64]	; (8000720 <CGIForm_Handler+0xb8>)
 80006e0:	461a      	mov	r2, r3
 80006e2:	460b      	mov	r3, r1
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	8013      	strh	r3, [r2, #0]
				strcat(name, pcValue[i]); // Сохраняем значение в переменную.
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	683a      	ldr	r2, [r7, #0]
 80006ee:	4413      	add	r3, r2
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4619      	mov	r1, r3
 80006f4:	4808      	ldr	r0, [pc, #32]	; (8000718 <CGIForm_Handler+0xb0>)
 80006f6:	f00f fc89 	bl	801000c <strcat>
		for (int i = 0; i < iNumParams; i++) {
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	3301      	adds	r3, #1
 80006fe:	617b      	str	r3, [r7, #20]
 8000700:	697a      	ldr	r2, [r7, #20]
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	429a      	cmp	r2, r3
 8000706:	dbbc      	blt.n	8000682 <CGIForm_Handler+0x1a>
			}
		}
	}

	return "/1.shtml"; // Здесь пропишем имя файла из которого берем переменные.
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <CGIForm_Handler+0xbc>)
}
 800070a:	4618      	mov	r0, r3
 800070c:	3718      	adds	r7, #24
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	08011480 	.word	0x08011480
 8000718:	200006a0 	.word	0x200006a0
 800071c:	08011488 	.word	0x08011488
 8000720:	08011490 	.word	0x08011490
 8000724:	08011494 	.word	0x08011494

08000728 <CGI_LEDs_Handler>:

/************************ CGI HANDLER for LED ***************************/
const char* CGI_LEDs_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
 8000734:	603b      	str	r3, [r7, #0]
	if (iIndex == 1) {
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	2b01      	cmp	r3, #1
 800073a:	d145      	bne.n	80007c8 <CGI_LEDs_Handler+0xa0>
		for (int i = 0; i < iNumParams; i++) {
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	e03e      	b.n	80007c0 <CGI_LEDs_Handler+0x98>
			if (strcmp(pcParam[i], "led_1") == 0) // if the fname string is found
 8000742:	697b      	ldr	r3, [r7, #20]
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	4413      	add	r3, r2
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4921      	ldr	r1, [pc, #132]	; (80007d4 <CGI_LEDs_Handler+0xac>)
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff fd3e 	bl	80001d0 <strcmp>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d10e      	bne.n	8000778 <CGI_LEDs_Handler+0x50>
					{
				memset(leds, '\0', 3); // Очищаем массив перед записью новых данных. Цифра 3 количество елиментов в массиве которое нужно очистить.
 800075a:	2203      	movs	r2, #3
 800075c:	2100      	movs	r1, #0
 800075e:	481e      	ldr	r0, [pc, #120]	; (80007d8 <CGI_LEDs_Handler+0xb0>)
 8000760:	f00f fba0 	bl	800fea4 <memset>
				strcpy(leds, pcValue[i]); // Сохраняем значение в переменную.
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	683a      	ldr	r2, [r7, #0]
 800076a:	4413      	add	r3, r2
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4619      	mov	r1, r3
 8000770:	4819      	ldr	r0, [pc, #100]	; (80007d8 <CGI_LEDs_Handler+0xb0>)
 8000772:	f00f fc67 	bl	8010044 <strcpy>
 8000776:	e020      	b.n	80007ba <CGI_LEDs_Handler+0x92>
			}

			else if (strcmp(pcParam[i], "led_2") == 0) // if the lname string is found
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	4413      	add	r3, r2
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4916      	ldr	r1, [pc, #88]	; (80007dc <CGI_LEDs_Handler+0xb4>)
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fd23 	bl	80001d0 <strcmp>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d114      	bne.n	80007ba <CGI_LEDs_Handler+0x92>
					{
				strcat(leds, " "); // Сконкатенируем fname и lname разделяя пробелом.
 8000790:	4811      	ldr	r0, [pc, #68]	; (80007d8 <CGI_LEDs_Handler+0xb0>)
 8000792:	f7ff fd27 	bl	80001e4 <strlen>
 8000796:	4603      	mov	r3, r0
 8000798:	461a      	mov	r2, r3
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <CGI_LEDs_Handler+0xb0>)
 800079c:	4413      	add	r3, r2
 800079e:	4910      	ldr	r1, [pc, #64]	; (80007e0 <CGI_LEDs_Handler+0xb8>)
 80007a0:	461a      	mov	r2, r3
 80007a2:	460b      	mov	r3, r1
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	8013      	strh	r3, [r2, #0]
				strcat(leds, pcValue[i]); // Сохраняем значение в переменную.
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	683a      	ldr	r2, [r7, #0]
 80007ae:	4413      	add	r3, r2
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4619      	mov	r1, r3
 80007b4:	4808      	ldr	r0, [pc, #32]	; (80007d8 <CGI_LEDs_Handler+0xb0>)
 80007b6:	f00f fc29 	bl	801000c <strcat>
		for (int i = 0; i < iNumParams; i++) {
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	3301      	adds	r3, #1
 80007be:	617b      	str	r3, [r7, #20]
 80007c0:	697a      	ldr	r2, [r7, #20]
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	dbbc      	blt.n	8000742 <CGI_LEDs_Handler+0x1a>
			}
		}
	}

	return "/cgi_leds.html"; // Здесь пропишем имя файла из которого берем переменные.
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <CGI_LEDs_Handler+0xbc>)
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	080114a0 	.word	0x080114a0
 80007d8:	2000069c 	.word	0x2000069c
 80007dc:	080114a8 	.word	0x080114a8
 80007e0:	08011490 	.word	0x08011490
 80007e4:	080114b0 	.word	0x080114b0

080007e8 <httpd_post_begin>:
static void *valid_connection;
static char last_user[USER_PASS_BUFSIZE];

err_t httpd_post_begin(void *connection, const char *uri,
		const char *http_request, uint16_t http_request_len, int content_len,
		char *response_uri, uint16_t response_uri_len, uint8_t *post_auto_wnd) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
 80007f4:	807b      	strh	r3, [r7, #2]
	LWIP_UNUSED_ARG(connection);
	LWIP_UNUSED_ARG(http_request);
	LWIP_UNUSED_ARG(http_request_len);
	LWIP_UNUSED_ARG(content_len);
	LWIP_UNUSED_ARG(post_auto_wnd);
	if (!memcmp(uri, "/login.cgi", 11)) {
 80007f6:	220b      	movs	r2, #11
 80007f8:	4911      	ldr	r1, [pc, #68]	; (8000840 <httpd_post_begin+0x58>)
 80007fa:	68b8      	ldr	r0, [r7, #8]
 80007fc:	f00f fb1c 	bl	800fe38 <memcmp>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d115      	bne.n	8000832 <httpd_post_begin+0x4a>
		if (current_connection != connection) {
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <httpd_post_begin+0x5c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	68fa      	ldr	r2, [r7, #12]
 800080c:	429a      	cmp	r2, r3
 800080e:	d010      	beq.n	8000832 <httpd_post_begin+0x4a>
			current_connection = connection;
 8000810:	4a0c      	ldr	r2, [pc, #48]	; (8000844 <httpd_post_begin+0x5c>)
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	6013      	str	r3, [r2, #0]
			valid_connection = NULL;
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <httpd_post_begin+0x60>)
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
			/* default page is "login failed" */
			snprintf(response_uri, response_uri_len, "/index.html");
 800081c:	8c3b      	ldrh	r3, [r7, #32]
 800081e:	4a0b      	ldr	r2, [pc, #44]	; (800084c <httpd_post_begin+0x64>)
 8000820:	4619      	mov	r1, r3
 8000822:	69f8      	ldr	r0, [r7, #28]
 8000824:	f00f fb9e 	bl	800ff64 <sniprintf>
			/* e.g. for large uploads to slow flash over a fast connection, you should
			 manually update the rx window. That way, a sender can only send a full
			 tcp window at a time. If this is required, set 'post_aut_wnd' to 0.
			 We do not need to throttle upload speed here, so: */
			*post_auto_wnd = 1;
 8000828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800082a:	2201      	movs	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
			return ERR_OK;
 800082e:	2300      	movs	r3, #0
 8000830:	e001      	b.n	8000836 <httpd_post_begin+0x4e>
		}
	}
	return ERR_VAL;
 8000832:	f06f 0305 	mvn.w	r3, #5
}
 8000836:	4618      	mov	r0, r3
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	08011468 	.word	0x08011468
 8000844:	200000b0 	.word	0x200000b0
 8000848:	200000b4 	.word	0x200000b4
 800084c:	080114c0 	.word	0x080114c0

08000850 <httpd_post_receive_data>:

err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 8000850:	b590      	push	{r4, r7, lr}
 8000852:	b093      	sub	sp, #76	; 0x4c
 8000854:	af02      	add	r7, sp, #8
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
	//printf("httpd_post_receive_data! \r\n");
	if (current_connection == connection) {
 800085a:	4b56      	ldr	r3, [pc, #344]	; (80009b4 <httpd_post_receive_data+0x164>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	429a      	cmp	r2, r3
 8000862:	f040 80a1 	bne.w	80009a8 <httpd_post_receive_data+0x158>
		u16_t token_user = pbuf_memfind(p, "user=", 5, 0);
 8000866:	2300      	movs	r3, #0
 8000868:	2205      	movs	r2, #5
 800086a:	4953      	ldr	r1, [pc, #332]	; (80009b8 <httpd_post_receive_data+0x168>)
 800086c:	6838      	ldr	r0, [r7, #0]
 800086e:	f006 fc6b 	bl	8007148 <pbuf_memfind>
 8000872:	4603      	mov	r3, r0
 8000874:	877b      	strh	r3, [r7, #58]	; 0x3a
		u16_t token_pass = pbuf_memfind(p, "pass=", 5, 0);
 8000876:	2300      	movs	r3, #0
 8000878:	2205      	movs	r2, #5
 800087a:	4950      	ldr	r1, [pc, #320]	; (80009bc <httpd_post_receive_data+0x16c>)
 800087c:	6838      	ldr	r0, [r7, #0]
 800087e:	f006 fc63 	bl	8007148 <pbuf_memfind>
 8000882:	4603      	mov	r3, r0
 8000884:	873b      	strh	r3, [r7, #56]	; 0x38
		if ((token_user != 0xFFFF) && (token_pass != 0xFFFF)) {
 8000886:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000888:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800088c:	4293      	cmp	r3, r2
 800088e:	f000 8089 	beq.w	80009a4 <httpd_post_receive_data+0x154>
 8000892:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000894:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000898:	4293      	cmp	r3, r2
 800089a:	f000 8083 	beq.w	80009a4 <httpd_post_receive_data+0x154>
			u16_t value_user = token_user + 5;
 800089e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80008a0:	3305      	adds	r3, #5
 80008a2:	86fb      	strh	r3, [r7, #54]	; 0x36
			u16_t value_pass = token_pass + 5;
 80008a4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80008a6:	3305      	adds	r3, #5
 80008a8:	86bb      	strh	r3, [r7, #52]	; 0x34
			u16_t len_user = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
			u16_t len_pass = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	87bb      	strh	r3, [r7, #60]	; 0x3c
			u16_t tmp;
			/* find user len */
			tmp = pbuf_memfind(p, "&", 1, value_user);
 80008b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80008b4:	2201      	movs	r2, #1
 80008b6:	4942      	ldr	r1, [pc, #264]	; (80009c0 <httpd_post_receive_data+0x170>)
 80008b8:	6838      	ldr	r0, [r7, #0]
 80008ba:	f006 fc45 	bl	8007148 <pbuf_memfind>
 80008be:	4603      	mov	r3, r0
 80008c0:	867b      	strh	r3, [r7, #50]	; 0x32
			if (tmp != 0xFFFF) {
 80008c2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80008c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d004      	beq.n	80008d6 <httpd_post_receive_data+0x86>
				len_user = tmp - value_user;
 80008cc:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80008ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80008d4:	e004      	b.n	80008e0 <httpd_post_receive_data+0x90>
			} else {
				len_user = p->tot_len - value_user;
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	891a      	ldrh	r2, [r3, #8]
 80008da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	87fb      	strh	r3, [r7, #62]	; 0x3e
			}
			/* find pass len */
			tmp = pbuf_memfind(p, "&", 1, value_pass);
 80008e0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80008e2:	2201      	movs	r2, #1
 80008e4:	4936      	ldr	r1, [pc, #216]	; (80009c0 <httpd_post_receive_data+0x170>)
 80008e6:	6838      	ldr	r0, [r7, #0]
 80008e8:	f006 fc2e 	bl	8007148 <pbuf_memfind>
 80008ec:	4603      	mov	r3, r0
 80008ee:	867b      	strh	r3, [r7, #50]	; 0x32
			if (tmp != 0xFFFF) {
 80008f0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80008f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d004      	beq.n	8000904 <httpd_post_receive_data+0xb4>
				len_pass = tmp - value_pass;
 80008fa:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80008fc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80008fe:	1ad3      	subs	r3, r2, r3
 8000900:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8000902:	e004      	b.n	800090e <httpd_post_receive_data+0xbe>
			} else {
				len_pass = p->tot_len - value_pass;
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	891a      	ldrh	r2, [r3, #8]
 8000908:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800090a:	1ad3      	subs	r3, r2, r3
 800090c:	87bb      	strh	r3, [r7, #60]	; 0x3c
			}
			if ((len_user > 0) && (len_user < USER_PASS_BUFSIZE)
 800090e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000910:	2b00      	cmp	r3, #0
 8000912:	d047      	beq.n	80009a4 <httpd_post_receive_data+0x154>
 8000914:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000916:	2b0f      	cmp	r3, #15
 8000918:	d844      	bhi.n	80009a4 <httpd_post_receive_data+0x154>
					&& (len_pass > 0) && (len_pass < USER_PASS_BUFSIZE)) {
 800091a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800091c:	2b00      	cmp	r3, #0
 800091e:	d041      	beq.n	80009a4 <httpd_post_receive_data+0x154>
 8000920:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000922:	2b0f      	cmp	r3, #15
 8000924:	d83e      	bhi.n	80009a4 <httpd_post_receive_data+0x154>
				/* provide contiguous storage if p is a chained pbuf */
				char buf_user[USER_PASS_BUFSIZE];
				char buf_pass[USER_PASS_BUFSIZE];
				char *user = (char*) pbuf_get_contiguous(p, buf_user,
 8000926:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8000928:	f107 0118 	add.w	r1, r7, #24
 800092c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	4613      	mov	r3, r2
 8000932:	2210      	movs	r2, #16
 8000934:	6838      	ldr	r0, [r7, #0]
 8000936:	f006 fabb 	bl	8006eb0 <pbuf_get_contiguous>
 800093a:	62f8      	str	r0, [r7, #44]	; 0x2c
						sizeof(buf_user), len_user, value_user);
				char *pass = (char*) pbuf_get_contiguous(p, buf_pass,
 800093c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800093e:	f107 0108 	add.w	r1, r7, #8
 8000942:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	4613      	mov	r3, r2
 8000948:	2210      	movs	r2, #16
 800094a:	6838      	ldr	r0, [r7, #0]
 800094c:	f006 fab0 	bl	8006eb0 <pbuf_get_contiguous>
 8000950:	62b8      	str	r0, [r7, #40]	; 0x28
						sizeof(buf_pass), len_pass, value_pass);
				if (user && pass) {
 8000952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000954:	2b00      	cmp	r3, #0
 8000956:	d025      	beq.n	80009a4 <httpd_post_receive_data+0x154>
 8000958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800095a:	2b00      	cmp	r3, #0
 800095c:	d022      	beq.n	80009a4 <httpd_post_receive_data+0x154>
					user[len_user] = 0;
 800095e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000962:	4413      	add	r3, r2
 8000964:	2200      	movs	r2, #0
 8000966:	701a      	strb	r2, [r3, #0]
					pass[len_pass] = 0;
 8000968:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800096a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800096c:	4413      	add	r3, r2
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]
					if (!strcmp(user, "lwip") && !strcmp(pass, "post")) {
 8000972:	4914      	ldr	r1, [pc, #80]	; (80009c4 <httpd_post_receive_data+0x174>)
 8000974:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000976:	f7ff fc2b 	bl	80001d0 <strcmp>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d111      	bne.n	80009a4 <httpd_post_receive_data+0x154>
 8000980:	4911      	ldr	r1, [pc, #68]	; (80009c8 <httpd_post_receive_data+0x178>)
 8000982:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000984:	f7ff fc24 	bl	80001d0 <strcmp>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d10a      	bne.n	80009a4 <httpd_post_receive_data+0x154>
						/* user and password are correct, create a "session" */
						valid_connection = connection;
 800098e:	4a0f      	ldr	r2, [pc, #60]	; (80009cc <httpd_post_receive_data+0x17c>)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	6013      	str	r3, [r2, #0]
						memcpy(last_user, user, sizeof(last_user));
 8000994:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <httpd_post_receive_data+0x180>)
 8000996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000998:	4614      	mov	r4, r2
 800099a:	6818      	ldr	r0, [r3, #0]
 800099c:	6859      	ldr	r1, [r3, #4]
 800099e:	689a      	ldr	r2, [r3, #8]
 80009a0:	68db      	ldr	r3, [r3, #12]
 80009a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
				}
			}
		}
		/* not returning ERR_OK aborts the connection, so return ERR_OK unless the
		 conenction is unknown */
		return ERR_OK;
 80009a4:	2300      	movs	r3, #0
 80009a6:	e001      	b.n	80009ac <httpd_post_receive_data+0x15c>
	}
	return ERR_VAL;
 80009a8:	f06f 0305 	mvn.w	r3, #5
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3744      	adds	r7, #68	; 0x44
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd90      	pop	{r4, r7, pc}
 80009b4:	200000b0 	.word	0x200000b0
 80009b8:	080114cc 	.word	0x080114cc
 80009bc:	080114d4 	.word	0x080114d4
 80009c0:	080114dc 	.word	0x080114dc
 80009c4:	080114e0 	.word	0x080114e0
 80009c8:	080114e8 	.word	0x080114e8
 80009cc:	200000b4 	.word	0x200000b4
 80009d0:	200000b8 	.word	0x200000b8

080009d4 <httpd_post_finished>:

void httpd_post_finished(void *connection, char *response_uri,
		u16_t response_uri_len) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	4613      	mov	r3, r2
 80009e0:	80fb      	strh	r3, [r7, #6]
	//printf("httpd_post_finished! \r\n");
	/* default page is "login failed" */
	snprintf(response_uri, response_uri_len, "/loginfail.html");
 80009e2:	88fb      	ldrh	r3, [r7, #6]
 80009e4:	4a0f      	ldr	r2, [pc, #60]	; (8000a24 <httpd_post_finished+0x50>)
 80009e6:	4619      	mov	r1, r3
 80009e8:	68b8      	ldr	r0, [r7, #8]
 80009ea:	f00f fabb 	bl	800ff64 <sniprintf>
	if (current_connection == connection) {
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <httpd_post_finished+0x54>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d110      	bne.n	8000a1a <httpd_post_finished+0x46>
		if (valid_connection == connection) {
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <httpd_post_finished+0x58>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	68fa      	ldr	r2, [r7, #12]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d105      	bne.n	8000a0e <httpd_post_finished+0x3a>
			/* login succeeded */
			snprintf(response_uri, response_uri_len, "/session.html");
 8000a02:	88fb      	ldrh	r3, [r7, #6]
 8000a04:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <httpd_post_finished+0x5c>)
 8000a06:	4619      	mov	r1, r3
 8000a08:	68b8      	ldr	r0, [r7, #8]
 8000a0a:	f00f faab 	bl	800ff64 <sniprintf>
		}
		current_connection = NULL;
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <httpd_post_finished+0x54>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
		valid_connection = NULL;
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <httpd_post_finished+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
	}
}
 8000a1a:	bf00      	nop
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	080114f0 	.word	0x080114f0
 8000a28:	200000b0 	.word	0x200000b0
 8000a2c:	200000b4 	.word	0x200000b4
 8000a30:	08011500 	.word	0x08011500

08000a34 <http_server_init>:
/************************************************************************/
void http_server_init(void) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	httpd_init();
 8000a38:	f004 fc2e 	bl	8005298 <httpd_init>

	http_set_ssi_handler(ssi_handler, (char const**) TAGS, 4);
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <http_server_init+0x3c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2204      	movs	r2, #4
 8000a42:	4619      	mov	r1, r3
 8000a44:	480b      	ldr	r0, [pc, #44]	; (8000a74 <http_server_init+0x40>)
 8000a46:	f004 fc47 	bl	80052d8 <http_set_ssi_handler>
	// 4. For LED Перед созданиме CGI_handle нам нужно назначить
	CGI_TAB[0] = FORM_CGI; // CGI структуру
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <http_server_init+0x44>)
 8000a4c:	4a0b      	ldr	r2, [pc, #44]	; (8000a7c <http_server_init+0x48>)
 8000a4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a52:	e883 0003 	stmia.w	r3, {r0, r1}
	CGI_TAB[1] = LED_CGI;  // в массив
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <http_server_init+0x44>)
 8000a58:	4a09      	ldr	r2, [pc, #36]	; (8000a80 <http_server_init+0x4c>)
 8000a5a:	3308      	adds	r3, #8
 8000a5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a60:	e883 0003 	stmia.w	r3, {r0, r1}

	//http_set_cgi_handlers (&FORM_CGI, 1); // Это пример когда у нас всего один "Handler" пример из видео.
	http_set_cgi_handlers(CGI_TAB, 2); // 5. И теперь мы передадим структуру массива в CGI_handle!
 8000a64:	2102      	movs	r1, #2
 8000a66:	4804      	ldr	r0, [pc, #16]	; (8000a78 <http_server_init+0x44>)
 8000a68:	f004 fc78 	bl	800535c <http_set_cgi_handlers>
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000010 	.word	0x20000010
 8000a74:	08000599 	.word	0x08000599
 8000a78:	200006c0 	.word	0x200006c0
 8000a7c:	08014224 	.word	0x08014224
 8000a80:	0801422c 	.word	0x0801422c

08000a84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a88:	f000 fa1c 	bl	8000ec4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a8c:	f000 f80e 	bl	8000aac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a90:	f000 f876 	bl	8000b80 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000a94:	f002 faa0 	bl	8002fd8 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  http_server_init();
 8000a98:	f7ff ffcc 	bl	8000a34 <http_server_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ethernetif_input(&gnetif);
 8000a9c:	4802      	ldr	r0, [pc, #8]	; (8000aa8 <main+0x24>)
 8000a9e:	f002 fe73 	bl	8003788 <ethernetif_input>
	  sys_check_timeouts();
 8000aa2:	f00c fce5 	bl	800d470 <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 8000aa6:	e7f9      	b.n	8000a9c <main+0x18>
 8000aa8:	200006d8 	.word	0x200006d8

08000aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b094      	sub	sp, #80	; 0x50
 8000ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab2:	f107 0320 	add.w	r3, r7, #32
 8000ab6:	2230      	movs	r2, #48	; 0x30
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f00f f9f2 	bl	800fea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <SystemClock_Config+0xcc>)
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad8:	4a27      	ldr	r2, [pc, #156]	; (8000b78 <SystemClock_Config+0xcc>)
 8000ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ade:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae0:	4b25      	ldr	r3, [pc, #148]	; (8000b78 <SystemClock_Config+0xcc>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aec:	2300      	movs	r3, #0
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <SystemClock_Config+0xd0>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a21      	ldr	r2, [pc, #132]	; (8000b7c <SystemClock_Config+0xd0>)
 8000af6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afa:	6013      	str	r3, [r2, #0]
 8000afc:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <SystemClock_Config+0xd0>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b12:	2302      	movs	r3, #2
 8000b14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b1c:	2304      	movs	r3, #4
 8000b1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b20:	23a8      	movs	r3, #168	; 0xa8
 8000b22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b24:	2302      	movs	r3, #2
 8000b26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b28:	2304      	movs	r3, #4
 8000b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b2c:	f107 0320 	add.w	r3, r7, #32
 8000b30:	4618      	mov	r0, r3
 8000b32:	f001 fe05 	bl	8002740 <HAL_RCC_OscConfig>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b3c:	f000 f864 	bl	8000c08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b40:	230f      	movs	r3, #15
 8000b42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b44:	2302      	movs	r3, #2
 8000b46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b4c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b56:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	2105      	movs	r1, #5
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f002 f866 	bl	8002c30 <HAL_RCC_ClockConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b6a:	f000 f84d 	bl	8000c08 <Error_Handler>
  }
}
 8000b6e:	bf00      	nop
 8000b70:	3750      	adds	r7, #80	; 0x50
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40007000 	.word	0x40007000

08000b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b1e      	ldr	r3, [pc, #120]	; (8000c04 <MX_GPIO_Init+0x84>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a1d      	ldr	r2, [pc, #116]	; (8000c04 <MX_GPIO_Init+0x84>)
 8000b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <MX_GPIO_Init+0x84>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <MX_GPIO_Init+0x84>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a16      	ldr	r2, [pc, #88]	; (8000c04 <MX_GPIO_Init+0x84>)
 8000bac:	f043 0304 	orr.w	r3, r3, #4
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <MX_GPIO_Init+0x84>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0304 	and.w	r3, r3, #4
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <MX_GPIO_Init+0x84>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a0f      	ldr	r2, [pc, #60]	; (8000c04 <MX_GPIO_Init+0x84>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <MX_GPIO_Init+0x84>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <MX_GPIO_Init+0x84>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a08      	ldr	r2, [pc, #32]	; (8000c04 <MX_GPIO_Init+0x84>)
 8000be4:	f043 0302 	orr.w	r3, r3, #2
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <MX_GPIO_Init+0x84>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]

}
 8000bf6:	bf00      	nop
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800

08000c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0c:	b672      	cpsid	i
}
 8000c0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <Error_Handler+0x8>
	...

08000c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	4a0f      	ldr	r2, [pc, #60]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c28:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	603b      	str	r3, [r7, #0]
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	4a08      	ldr	r2, [pc, #32]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c44:	6413      	str	r3, [r2, #64]	; 0x40
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <NMI_Handler+0x4>

08000c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <HardFault_Handler+0x4>

08000c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <MemManage_Handler+0x4>

08000c76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <BusFault_Handler+0x4>

08000c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <UsageFault_Handler+0x4>

08000c82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb0:	f000 f95a 	bl	8000f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
	return 1;
 8000cbc:	2301      	movs	r3, #1
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <_kill>:

int _kill(int pid, int sig)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000cd2:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <_kill+0x20>)
 8000cd4:	2216      	movs	r2, #22
 8000cd6:	601a      	str	r2, [r3, #0]
	return -1;
 8000cd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	20006d68 	.word	0x20006d68

08000cec <_exit>:

void _exit (int status)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f7ff ffe5 	bl	8000cc8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000cfe:	e7fe      	b.n	8000cfe <_exit+0x12>

08000d00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	e00a      	b.n	8000d28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d12:	f3af 8000 	nop.w
 8000d16:	4601      	mov	r1, r0
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	1c5a      	adds	r2, r3, #1
 8000d1c:	60ba      	str	r2, [r7, #8]
 8000d1e:	b2ca      	uxtb	r2, r1
 8000d20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	3301      	adds	r3, #1
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697a      	ldr	r2, [r7, #20]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	dbf0      	blt.n	8000d12 <_read+0x12>
	}

return len;
 8000d30:	687b      	ldr	r3, [r7, #4]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b086      	sub	sp, #24
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	60f8      	str	r0, [r7, #12]
 8000d42:	60b9      	str	r1, [r7, #8]
 8000d44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	e009      	b.n	8000d60 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	1c5a      	adds	r2, r3, #1
 8000d50:	60ba      	str	r2, [r7, #8]
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	697a      	ldr	r2, [r7, #20]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	dbf1      	blt.n	8000d4c <_write+0x12>
	}
	return len;
 8000d68:	687b      	ldr	r3, [r7, #4]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3718      	adds	r7, #24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <_close>:

int _close(int file)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
	return -1;
 8000d7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	b083      	sub	sp, #12
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
 8000d92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d9a:	605a      	str	r2, [r3, #4]
	return 0;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <_isatty>:

int _isatty(int file)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
	return 1;
 8000db2:	2301      	movs	r3, #1
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
	return 0;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3714      	adds	r7, #20
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
	...

08000ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b087      	sub	sp, #28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de4:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <_sbrk+0x5c>)
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <_sbrk+0x60>)
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df0:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d102      	bne.n	8000dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df8:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <_sbrk+0x64>)
 8000dfa:	4a12      	ldr	r2, [pc, #72]	; (8000e44 <_sbrk+0x68>)
 8000dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <_sbrk+0x64>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d205      	bcs.n	8000e18 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <_sbrk+0x6c>)
 8000e0e:	220c      	movs	r2, #12
 8000e10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e16:	e009      	b.n	8000e2c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <_sbrk+0x64>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e1e:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <_sbrk+0x64>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	4a06      	ldr	r2, [pc, #24]	; (8000e40 <_sbrk+0x64>)
 8000e28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	371c      	adds	r7, #28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	20020000 	.word	0x20020000
 8000e3c:	00000400 	.word	0x00000400
 8000e40:	200000c8 	.word	0x200000c8
 8000e44:	20006d78 	.word	0x20006d78
 8000e48:	20006d68 	.word	0x20006d68

08000e4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <SystemInit+0x20>)
 8000e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e56:	4a05      	ldr	r2, [pc, #20]	; (8000e6c <SystemInit+0x20>)
 8000e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e74:	480d      	ldr	r0, [pc, #52]	; (8000eac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e76:	490e      	ldr	r1, [pc, #56]	; (8000eb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e78:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e7c:	e002      	b.n	8000e84 <LoopCopyDataInit>

08000e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e82:	3304      	adds	r3, #4

08000e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e88:	d3f9      	bcc.n	8000e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e8c:	4c0b      	ldr	r4, [pc, #44]	; (8000ebc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e90:	e001      	b.n	8000e96 <LoopFillZerobss>

08000e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e94:	3204      	adds	r2, #4

08000e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e98:	d3fb      	bcc.n	8000e92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e9a:	f7ff ffd7 	bl	8000e4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f00e ffa7 	bl	800fdf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea2:	f7ff fdef 	bl	8000a84 <main>
  bx  lr    
 8000ea6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ea8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb0:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000eb4:	0802149c 	.word	0x0802149c
  ldr r2, =_sbss
 8000eb8:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000ebc:	20006d78 	.word	0x20006d78

08000ec0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC_IRQHandler>
	...

08000ec4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec8:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	; (8000f04 <HAL_Init+0x40>)
 8000ece:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <HAL_Init+0x40>)
 8000eda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <HAL_Init+0x40>)
 8000ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 f931 	bl	8001154 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef2:	200f      	movs	r0, #15
 8000ef4:	f000 f808 	bl	8000f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef8:	f7ff fe8c 	bl	8000c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40023c00 	.word	0x40023c00

08000f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_InitTick+0x54>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_InitTick+0x58>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 f93b 	bl	80011a2 <HAL_SYSTICK_Config>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00e      	b.n	8000f54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b0f      	cmp	r3, #15
 8000f3a:	d80a      	bhi.n	8000f52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f44:	f000 f911 	bl	800116a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f48:	4a06      	ldr	r2, [pc, #24]	; (8000f64 <HAL_InitTick+0x5c>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e000      	b.n	8000f54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000014 	.word	0x20000014
 8000f60:	2000001c 	.word	0x2000001c
 8000f64:	20000018 	.word	0x20000018

08000f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_IncTick+0x20>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x24>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <HAL_IncTick+0x24>)
 8000f7a:	6013      	str	r3, [r2, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	2000001c 	.word	0x2000001c
 8000f8c:	200006d0 	.word	0x200006d0

08000f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <HAL_GetTick+0x14>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	200006d0 	.word	0x200006d0

08000fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb0:	f7ff ffee 	bl	8000f90 <HAL_GetTick>
 8000fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fc0:	d005      	beq.n	8000fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_Delay+0x44>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4413      	add	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fce:	bf00      	nop
 8000fd0:	f7ff ffde 	bl	8000f90 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d8f7      	bhi.n	8000fd0 <HAL_Delay+0x28>
  {
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	2000001c 	.word	0x2000001c

08000ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800100c:	4013      	ands	r3, r2
 800100e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800101c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001022:	4a04      	ldr	r2, [pc, #16]	; (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	60d3      	str	r3, [r2, #12]
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800103c:	4b04      	ldr	r3, [pc, #16]	; (8001050 <__NVIC_GetPriorityGrouping+0x18>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	f003 0307 	and.w	r3, r3, #7
}
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	2b00      	cmp	r3, #0
 8001066:	db0a      	blt.n	800107e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	b2da      	uxtb	r2, r3
 800106c:	490c      	ldr	r1, [pc, #48]	; (80010a0 <__NVIC_SetPriority+0x4c>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	0112      	lsls	r2, r2, #4
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	440b      	add	r3, r1
 8001078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800107c:	e00a      	b.n	8001094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4908      	ldr	r1, [pc, #32]	; (80010a4 <__NVIC_SetPriority+0x50>)
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	f003 030f 	and.w	r3, r3, #15
 800108a:	3b04      	subs	r3, #4
 800108c:	0112      	lsls	r2, r2, #4
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	440b      	add	r3, r1
 8001092:	761a      	strb	r2, [r3, #24]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000e100 	.word	0xe000e100
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b089      	sub	sp, #36	; 0x24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f1c3 0307 	rsb	r3, r3, #7
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	bf28      	it	cs
 80010c6:	2304      	movcs	r3, #4
 80010c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3304      	adds	r3, #4
 80010ce:	2b06      	cmp	r3, #6
 80010d0:	d902      	bls.n	80010d8 <NVIC_EncodePriority+0x30>
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3b03      	subs	r3, #3
 80010d6:	e000      	b.n	80010da <NVIC_EncodePriority+0x32>
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43da      	mvns	r2, r3
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	401a      	ands	r2, r3
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa01 f303 	lsl.w	r3, r1, r3
 80010fa:	43d9      	mvns	r1, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	4313      	orrs	r3, r2
         );
}
 8001102:	4618      	mov	r0, r3
 8001104:	3724      	adds	r7, #36	; 0x24
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001120:	d301      	bcc.n	8001126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001122:	2301      	movs	r3, #1
 8001124:	e00f      	b.n	8001146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001126:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <SysTick_Config+0x40>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112e:	210f      	movs	r1, #15
 8001130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001134:	f7ff ff8e 	bl	8001054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <SysTick_Config+0x40>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <SysTick_Config+0x40>)
 8001140:	2207      	movs	r2, #7
 8001142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	e000e010 	.word	0xe000e010

08001154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff47 	bl	8000ff0 <__NVIC_SetPriorityGrouping>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800116a:	b580      	push	{r7, lr}
 800116c:	b086      	sub	sp, #24
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	607a      	str	r2, [r7, #4]
 8001176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800117c:	f7ff ff5c 	bl	8001038 <__NVIC_GetPriorityGrouping>
 8001180:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	6978      	ldr	r0, [r7, #20]
 8001188:	f7ff ff8e 	bl	80010a8 <NVIC_EncodePriority>
 800118c:	4602      	mov	r2, r0
 800118e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff5d 	bl	8001054 <__NVIC_SetPriority>
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ffb0 	bl	8001110 <SysTick_Config>
 80011b0:	4603      	mov	r3, r0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80011cc:	4baa      	ldr	r3, [pc, #680]	; (8001478 <HAL_ETH_Init+0x2bc>)
 80011ce:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e183      	b.n	80014ea <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d106      	bne.n	80011fc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f002 f820 	bl	800323c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	4b9e      	ldr	r3, [pc, #632]	; (800147c <HAL_ETH_Init+0x2c0>)
 8001202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001204:	4a9d      	ldr	r2, [pc, #628]	; (800147c <HAL_ETH_Init+0x2c0>)
 8001206:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800120a:	6453      	str	r3, [r2, #68]	; 0x44
 800120c:	4b9b      	ldr	r3, [pc, #620]	; (800147c <HAL_ETH_Init+0x2c0>)
 800120e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001218:	4b99      	ldr	r3, [pc, #612]	; (8001480 <HAL_ETH_Init+0x2c4>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	4a98      	ldr	r2, [pc, #608]	; (8001480 <HAL_ETH_Init+0x2c4>)
 800121e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001222:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001224:	4b96      	ldr	r3, [pc, #600]	; (8001480 <HAL_ETH_Init+0x2c4>)
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a1b      	ldr	r3, [r3, #32]
 800122c:	4994      	ldr	r1, [pc, #592]	; (8001480 <HAL_ETH_Init+0x2c4>)
 800122e:	4313      	orrs	r3, r2
 8001230:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f042 0201 	orr.w	r2, r2, #1
 8001244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001248:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800124a:	f7ff fea1 	bl	8000f90 <HAL_GetTick>
 800124e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001250:	e011      	b.n	8001276 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001252:	f7ff fe9d 	bl	8000f90 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001260:	d909      	bls.n	8001276 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2203      	movs	r2, #3
 8001266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e139      	b.n	80014ea <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1e4      	bne.n	8001252 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f023 031c 	bic.w	r3, r3, #28
 8001296:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001298:	f001 fe92 	bl	8002fc0 <HAL_RCC_GetHCLKFreq>
 800129c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	4a78      	ldr	r2, [pc, #480]	; (8001484 <HAL_ETH_Init+0x2c8>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d908      	bls.n	80012b8 <HAL_ETH_Init+0xfc>
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	4a77      	ldr	r2, [pc, #476]	; (8001488 <HAL_ETH_Init+0x2cc>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d804      	bhi.n	80012b8 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	f043 0308 	orr.w	r3, r3, #8
 80012b4:	61fb      	str	r3, [r7, #28]
 80012b6:	e027      	b.n	8001308 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	4a73      	ldr	r2, [pc, #460]	; (8001488 <HAL_ETH_Init+0x2cc>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d908      	bls.n	80012d2 <HAL_ETH_Init+0x116>
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	4a6d      	ldr	r2, [pc, #436]	; (8001478 <HAL_ETH_Init+0x2bc>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d204      	bcs.n	80012d2 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f043 030c 	orr.w	r3, r3, #12
 80012ce:	61fb      	str	r3, [r7, #28]
 80012d0:	e01a      	b.n	8001308 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	4a68      	ldr	r2, [pc, #416]	; (8001478 <HAL_ETH_Init+0x2bc>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d303      	bcc.n	80012e2 <HAL_ETH_Init+0x126>
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	4a6b      	ldr	r2, [pc, #428]	; (800148c <HAL_ETH_Init+0x2d0>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d911      	bls.n	8001306 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	4a69      	ldr	r2, [pc, #420]	; (800148c <HAL_ETH_Init+0x2d0>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d908      	bls.n	80012fc <HAL_ETH_Init+0x140>
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	4a68      	ldr	r2, [pc, #416]	; (8001490 <HAL_ETH_Init+0x2d4>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d804      	bhi.n	80012fc <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	f043 0304 	orr.w	r3, r3, #4
 80012f8:	61fb      	str	r3, [r7, #28]
 80012fa:	e005      	b.n	8001308 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f043 0310 	orr.w	r3, r3, #16
 8001302:	61fb      	str	r3, [r7, #28]
 8001304:	e000      	b.n	8001308 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001306:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	69fa      	ldr	r2, [r7, #28]
 800130e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001310:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001314:	2100      	movs	r1, #0
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f000 fb98 	bl	8001a4c <HAL_ETH_WritePHYRegister>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d00b      	beq.n	800133a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001326:	6939      	ldr	r1, [r7, #16]
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f000 fd4d 	bl	8001dc8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2201      	movs	r2, #1
 8001332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e0d7      	b.n	80014ea <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800133a:	20ff      	movs	r0, #255	; 0xff
 800133c:	f7ff fe34 	bl	8000fa8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	f000 80a5 	beq.w	8001494 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800134a:	f7ff fe21 	bl	8000f90 <HAL_GetTick>
 800134e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	461a      	mov	r2, r3
 8001356:	2101      	movs	r1, #1
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 fb0f 	bl	800197c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800135e:	f7ff fe17 	bl	8000f90 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	f241 3288 	movw	r2, #5000	; 0x1388
 800136c:	4293      	cmp	r3, r2
 800136e:	d90f      	bls.n	8001390 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001374:	6939      	ldr	r1, [r7, #16]
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 fd26 	bl	8001dc8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2201      	movs	r2, #1
 8001380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e0ac      	b.n	80014ea <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0da      	beq.n	8001350 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800139a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800139e:	2100      	movs	r1, #0
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 fb53 	bl	8001a4c <HAL_ETH_WritePHYRegister>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00b      	beq.n	80013c4 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80013b0:	6939      	ldr	r1, [r7, #16]
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f000 fd08 	bl	8001dc8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80013c0:	2301      	movs	r3, #1
 80013c2:	e092      	b.n	80014ea <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80013c4:	f7ff fde4 	bl	8000f90 <HAL_GetTick>
 80013c8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80013ca:	f107 030c 	add.w	r3, r7, #12
 80013ce:	461a      	mov	r2, r3
 80013d0:	2101      	movs	r1, #1
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f000 fad2 	bl	800197c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80013d8:	f7ff fdda 	bl	8000f90 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d90f      	bls.n	800140a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80013ee:	6939      	ldr	r1, [r7, #16]
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f000 fce9 	bl	8001dc8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2201      	movs	r2, #1
 80013fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e06f      	b.n	80014ea <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f003 0320 	and.w	r3, r3, #32
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0da      	beq.n	80013ca <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	461a      	mov	r2, r3
 800141a:	2110      	movs	r1, #16
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 faad 	bl	800197c <HAL_ETH_ReadPHYRegister>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00b      	beq.n	8001440 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800142c:	6939      	ldr	r1, [r7, #16]
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f000 fcca 	bl	8001dc8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800143c:	2301      	movs	r3, #1
 800143e:	e054      	b.n	80014ea <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f003 0304 	and.w	r3, r3, #4
 8001446:	2b00      	cmp	r3, #0
 8001448:	d004      	beq.n	8001454 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	e002      	b.n	800145a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	e035      	b.n	80014d8 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	e030      	b.n	80014d8 <HAL_ETH_Init+0x31c>
 8001476:	bf00      	nop
 8001478:	03938700 	.word	0x03938700
 800147c:	40023800 	.word	0x40023800
 8001480:	40013800 	.word	0x40013800
 8001484:	01312cff 	.word	0x01312cff
 8001488:	02160ebf 	.word	0x02160ebf
 800148c:	05f5e0ff 	.word	0x05f5e0ff
 8001490:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	08db      	lsrs	r3, r3, #3
 800149a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	085b      	lsrs	r3, r3, #1
 80014a2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80014a4:	4313      	orrs	r3, r2
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	461a      	mov	r2, r3
 80014aa:	2100      	movs	r1, #0
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 facd 	bl	8001a4c <HAL_ETH_WritePHYRegister>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d00b      	beq.n	80014d0 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80014bc:	6939      	ldr	r1, [r7, #16]
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f000 fc82 	bl	8001dc8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e00c      	b.n	80014ea <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80014d0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80014d4:	f7ff fd68 	bl	8000fa8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80014d8:	6939      	ldr	r1, [r7, #16]
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 fc74 	bl	8001dc8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3720      	adds	r7, #32
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop

080014f4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
 8001500:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800150c:	2b01      	cmp	r3, #1
 800150e:	d101      	bne.n	8001514 <HAL_ETH_DMATxDescListInit+0x20>
 8001510:	2302      	movs	r3, #2
 8001512:	e052      	b.n	80015ba <HAL_ETH_DMATxDescListInit+0xc6>
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2202      	movs	r2, #2
 8001520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	e030      	b.n	8001592 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	015b      	lsls	r3, r3, #5
 8001534:	68ba      	ldr	r2, [r7, #8]
 8001536:	4413      	add	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001540:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001548:	fb02 f303 	mul.w	r3, r2, r3
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	4413      	add	r3, r2
 8001550:	461a      	mov	r2, r3
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d105      	bne.n	800156a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	3b01      	subs	r3, #1
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	429a      	cmp	r2, r3
 8001572:	d208      	bcs.n	8001586 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	3301      	adds	r3, #1
 8001578:	015b      	lsls	r3, r3, #5
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	4413      	add	r3, r2
 800157e:	461a      	mov	r2, r3
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	60da      	str	r2, [r3, #12]
 8001584:	e002      	b.n	800158c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	3301      	adds	r3, #1
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d3ca      	bcc.n	8001530 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015a4:	3310      	adds	r3, #16
 80015a6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	371c      	adds	r7, #28
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b087      	sub	sp, #28
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	60f8      	str	r0, [r7, #12]
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
 80015d2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d101      	bne.n	80015e6 <HAL_ETH_DMARxDescListInit+0x20>
 80015e2:	2302      	movs	r3, #2
 80015e4:	e056      	b.n	8001694 <HAL_ETH_DMARxDescListInit+0xce>
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2201      	movs	r2, #1
 80015ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2202      	movs	r2, #2
 80015f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	68ba      	ldr	r2, [r7, #8]
 80015fa:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	e034      	b.n	800166c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	015b      	lsls	r3, r3, #5
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	4413      	add	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001612:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800161a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001622:	fb02 f303 	mul.w	r3, r2, r3
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	461a      	mov	r2, r3
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d105      	bne.n	8001644 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	3b01      	subs	r3, #1
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	429a      	cmp	r2, r3
 800164c:	d208      	bcs.n	8001660 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	3301      	adds	r3, #1
 8001652:	015b      	lsls	r3, r3, #5
 8001654:	68ba      	ldr	r2, [r7, #8]
 8001656:	4413      	add	r3, r2
 8001658:	461a      	mov	r2, r3
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	e002      	b.n	8001666 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001660:	68ba      	ldr	r2, [r7, #8]
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	3301      	adds	r3, #1
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	429a      	cmp	r2, r3
 8001672:	d3c6      	bcc.n	8001602 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68ba      	ldr	r2, [r7, #8]
 800167a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800167e:	330c      	adds	r3, #12
 8001680:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2201      	movs	r2, #1
 8001686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	371c      	adds	r7, #28
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b087      	sub	sp, #28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d101      	bne.n	80016c4 <HAL_ETH_TransmitFrame+0x24>
 80016c0:	2302      	movs	r3, #2
 80016c2:	e0cd      	b.n	8001860 <HAL_ETH_TransmitFrame+0x1c0>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2202      	movs	r2, #2
 80016d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d109      	bne.n	80016ee <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80016ea:	2301      	movs	r3, #1
 80016ec:	e0b8      	b.n	8001860 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	da09      	bge.n	800170c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2212      	movs	r2, #18
 80016fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e0a9      	b.n	8001860 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001712:	4293      	cmp	r3, r2
 8001714:	d915      	bls.n	8001742 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	4a54      	ldr	r2, [pc, #336]	; (800186c <HAL_ETH_TransmitFrame+0x1cc>)
 800171a:	fba2 2303 	umull	r2, r3, r2, r3
 800171e:	0a9b      	lsrs	r3, r3, #10
 8001720:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	4b51      	ldr	r3, [pc, #324]	; (800186c <HAL_ETH_TransmitFrame+0x1cc>)
 8001726:	fba3 1302 	umull	r1, r3, r3, r2
 800172a:	0a9b      	lsrs	r3, r3, #10
 800172c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001730:	fb01 f303 	mul.w	r3, r1, r3
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d005      	beq.n	8001746 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	3301      	adds	r3, #1
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	e001      	b.n	8001746 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001742:	2301      	movs	r3, #1
 8001744:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d11c      	bne.n	8001786 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001756:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800175a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001766:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001772:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001776:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	461a      	mov	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	62da      	str	r2, [r3, #44]	; 0x2c
 8001784:	e04b      	b.n	800181e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	e044      	b.n	8001816 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001796:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800179a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d107      	bne.n	80017b2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017b0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80017ba:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	3b01      	subs	r3, #1
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d116      	bne.n	80017f4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80017d4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	4a25      	ldr	r2, [pc, #148]	; (8001870 <HAL_ETH_TransmitFrame+0x1d0>)
 80017da:	fb02 f203 	mul.w	r2, r2, r3
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	4413      	add	r3, r2
 80017e2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80017e6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80017f2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001802:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	461a      	mov	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	3301      	adds	r3, #1
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	429a      	cmp	r2, r3
 800181c:	d3b6      	bcc.n	800178c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001826:	3314      	adds	r3, #20
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0304 	and.w	r3, r3, #4
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00d      	beq.n	800184e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800183a:	3314      	adds	r3, #20
 800183c:	2204      	movs	r2, #4
 800183e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001848:	3304      	adds	r3, #4
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	371c      	adds	r7, #28
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	ac02b00b 	.word	0xac02b00b
 8001870:	fffffa0c 	.word	0xfffffa0c

08001874 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001886:	2b01      	cmp	r3, #1
 8001888:	d101      	bne.n	800188e <HAL_ETH_GetReceivedFrame+0x1a>
 800188a:	2302      	movs	r3, #2
 800188c:	e070      	b.n	8001970 <HAL_ETH_GetReceivedFrame+0xfc>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2202      	movs	r2, #2
 800189a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	db5a      	blt.n	800195e <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d030      	beq.n	8001918 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ba:	1c5a      	adds	r2, r3, #1
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d103      	bne.n	80018d0 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	0c1b      	lsrs	r3, r3, #16
 80018e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80018e4:	3b04      	subs	r3, #4
 80018e6:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	461a      	mov	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001914:	2300      	movs	r3, #0
 8001916:	e02b      	b.n	8001970 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001922:	2b00      	cmp	r3, #0
 8001924:	d010      	beq.n	8001948 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	461a      	mov	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	629a      	str	r2, [r3, #40]	; 0x28
 8001946:	e00a      	b.n	800195e <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800194c:	1c5a      	adds	r2, r3, #1
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	461a      	mov	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
}
 8001970:	4618      	mov	r0, r3
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	460b      	mov	r3, r1
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b82      	cmp	r3, #130	; 0x82
 800199c:	d101      	bne.n	80019a2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800199e:	2302      	movs	r3, #2
 80019a0:	e050      	b.n	8001a44 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2282      	movs	r2, #130	; 0x82
 80019a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f003 031c 	and.w	r3, r3, #28
 80019b8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	8a1b      	ldrh	r3, [r3, #16]
 80019be:	02db      	lsls	r3, r3, #11
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80019c8:	897b      	ldrh	r3, [r7, #10]
 80019ca:	019b      	lsls	r3, r3, #6
 80019cc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f023 0302 	bic.w	r3, r3, #2
 80019dc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80019ee:	f7ff facf 	bl	8000f90 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019f4:	e015      	b.n	8001a22 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80019f6:	f7ff facb 	bl	8000f90 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a04:	d309      	bcc.n	8001a1a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e014      	b.n	8001a44 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1e4      	bne.n	80019f6 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	461a      	mov	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	460b      	mov	r3, r1
 8001a56:	607a      	str	r2, [r7, #4]
 8001a58:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b42      	cmp	r3, #66	; 0x42
 8001a6c:	d101      	bne.n	8001a72 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	e04e      	b.n	8001b10 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2242      	movs	r2, #66	; 0x42
 8001a76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f003 031c 	and.w	r3, r3, #28
 8001a88:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8a1b      	ldrh	r3, [r3, #16]
 8001a8e:	02db      	lsls	r3, r3, #11
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001a98:	897b      	ldrh	r3, [r7, #10]
 8001a9a:	019b      	lsls	r3, r3, #6
 8001a9c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f043 0302 	orr.w	r3, r3, #2
 8001aac:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001ac8:	f7ff fa62 	bl	8000f90 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ace:	e015      	b.n	8001afc <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001ad0:	f7ff fa5e 	bl	8000f90 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ade:	d309      	bcc.n	8001af4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e00d      	b.n	8001b10 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1e4      	bne.n	8001ad0 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d101      	bne.n	8001b2e <HAL_ETH_Start+0x16>
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	e01f      	b.n	8001b6e <HAL_ETH_Start+0x56>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2202      	movs	r2, #2
 8001b3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 fb44 	bl	80021cc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 fb7b 	bl	8002240 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 fc12 	bl	8002374 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 fbaf 	bl	80022b4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 fbdc 	bl	8002314 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d101      	bne.n	8001b8c <HAL_ETH_Stop+0x16>
 8001b88:	2302      	movs	r3, #2
 8001b8a:	e01f      	b.n	8001bcc <HAL_ETH_Stop+0x56>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2202      	movs	r2, #2
 8001b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 fba1 	bl	80022e4 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 fbce 	bl	8002344 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 fb66 	bl	800227a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 fbe0 	bl	8002374 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 fb26 	bl	8002206 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d101      	bne.n	8001bf0 <HAL_ETH_ConfigMAC+0x1c>
 8001bec:	2302      	movs	r3, #2
 8001bee:	e0e4      	b.n	8001dba <HAL_ETH_ConfigMAC+0x1e6>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 80b1 	beq.w	8001d6a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	4b6c      	ldr	r3, [pc, #432]	; (8001dc4 <HAL_ETH_ConfigMAC+0x1f0>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001c20:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001c26:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001c2c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001c32:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001c38:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001c3e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001c44:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001c4a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001c50:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001c56:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001c5c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001c62:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c7a:	2001      	movs	r0, #1
 8001c7c:	f7ff f994 	bl	8000fa8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001c90:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001c96:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001c9c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001ca2:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001ca8:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001cae:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001cba:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001cbc:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	f7ff f96e 	bl	8000fa8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001cdc:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ce6:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfe:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001d04:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001d0a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001d10:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001d16:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001d1c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d34:	2001      	movs	r0, #1
 8001d36:	f7ff f937 	bl	8000fa8 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	f7ff f924 	bl	8000fa8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	61da      	str	r2, [r3, #28]
 8001d68:	e01e      	b.n	8001da8 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001d78:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f7ff f904 	bl	8000fa8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	ff20810f 	.word	0xff20810f

08001dc8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b0b0      	sub	sp, #192	; 0xc0
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d007      	beq.n	8001dee <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001de4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dec:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001dee:	2300      	movs	r3, #0
 8001df0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001df6:	2300      	movs	r3, #0
 8001df8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d103      	bne.n	8001e16 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001e0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e12:	663b      	str	r3, [r7, #96]	; 0x60
 8001e14:	e001      	b.n	8001e1a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001e1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e1e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e24:	2300      	movs	r3, #0
 8001e26:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001e34:	2340      	movs	r3, #64	; 0x40
 8001e36:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001e44:	2300      	movs	r3, #0
 8001e46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001e50:	2300      	movs	r3, #0
 8001e52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001e68:	2380      	movs	r3, #128	; 0x80
 8001e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001e80:	2300      	movs	r3, #0
 8001e82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001e86:	2300      	movs	r3, #0
 8001e88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ea0:	4bac      	ldr	r3, [pc, #688]	; (8002154 <ETH_MACDMAConfig+0x38c>)
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001ea8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001eac:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001eb0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001eb4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001eba:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001ebc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001ebe:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001ec0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001ec2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001ec8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001eca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001ecc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001ece:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001ed0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001ed2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001ed4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001ed8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001eda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001edc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001ede:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ef0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001efc:	2001      	movs	r0, #1
 8001efe:	f7ff f853 	bl	8000fa8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f0a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f0c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001f0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f10:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001f12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001f14:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001f16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001f1a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001f1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001f20:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001f22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001f26:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001f28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001f2c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001f30:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001f38:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f3a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f46:	2001      	movs	r0, #1
 8001f48:	f7ff f82e 	bl	8000fa8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f54:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001f5e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001f68:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f74:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f78:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001f82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f86:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001f88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001f8c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001f8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001f92:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001f94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001f98:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001f9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001f9e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001fa0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001fa4:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001fa6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001faa:	4313      	orrs	r3, r2
 8001fac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fb8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	f7fe ffef 	bl	8000fa8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fd2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001fd4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001fd8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fee:	2001      	movs	r0, #1
 8001ff0:	f7fe ffda 	bl	8000fa8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ffc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001ffe:	2300      	movs	r3, #0
 8002000:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002002:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002006:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002008:	2300      	movs	r3, #0
 800200a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800200c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002010:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002012:	2300      	movs	r3, #0
 8002014:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800201a:	2300      	movs	r3, #0
 800201c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800201e:	2300      	movs	r3, #0
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002022:	2304      	movs	r3, #4
 8002024:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002026:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800202a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800202c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002030:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002032:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002036:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002038:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800203c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800203e:	2380      	movs	r3, #128	; 0x80
 8002040:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002042:	2300      	movs	r3, #0
 8002044:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002046:	2300      	movs	r3, #0
 8002048:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002052:	3318      	adds	r3, #24
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800205a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800205e:	4b3e      	ldr	r3, [pc, #248]	; (8002158 <ETH_MACDMAConfig+0x390>)
 8002060:	4013      	ands	r3, r2
 8002062:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002066:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002068:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800206a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800206c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800206e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002070:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002072:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002074:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002076:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002078:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800207a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800207c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800207e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002082:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002084:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002086:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002088:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800208c:	4313      	orrs	r3, r2
 800208e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800209a:	3318      	adds	r3, #24
 800209c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020a0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020aa:	3318      	adds	r3, #24
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80020b2:	2001      	movs	r0, #1
 80020b4:	f7fe ff78 	bl	8000fa8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020c0:	3318      	adds	r3, #24
 80020c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020c6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80020c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80020ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80020cc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80020ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80020d0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80020d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80020d4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80020d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80020d8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80020da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020dc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80020de:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80020e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80020e2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80020ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020f0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002100:	2001      	movs	r0, #1
 8002102:	f7fe ff51 	bl	8000fa8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800210e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002112:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d10f      	bne.n	800213c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002124:	331c      	adds	r3, #28
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002130:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002138:	331c      	adds	r3, #28
 800213a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	461a      	mov	r2, r3
 8002142:	2100      	movs	r1, #0
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 f809 	bl	800215c <ETH_MACAddressConfig>
}
 800214a:	bf00      	nop
 800214c:	37c0      	adds	r7, #192	; 0xc0
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	ff20810f 	.word	0xff20810f
 8002158:	f8de3f23 	.word	0xf8de3f23

0800215c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800215c:	b480      	push	{r7}
 800215e:	b087      	sub	sp, #28
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3305      	adds	r3, #5
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	021b      	lsls	r3, r3, #8
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	3204      	adds	r2, #4
 8002174:	7812      	ldrb	r2, [r2, #0]
 8002176:	4313      	orrs	r3, r2
 8002178:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <ETH_MACAddressConfig+0x68>)
 800217e:	4413      	add	r3, r2
 8002180:	461a      	mov	r2, r3
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3303      	adds	r3, #3
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	061a      	lsls	r2, r3, #24
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3302      	adds	r3, #2
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	041b      	lsls	r3, r3, #16
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3301      	adds	r3, #1
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	021b      	lsls	r3, r3, #8
 80021a0:	4313      	orrs	r3, r2
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	7812      	ldrb	r2, [r2, #0]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <ETH_MACAddressConfig+0x6c>)
 80021ae:	4413      	add	r3, r2
 80021b0:	461a      	mov	r2, r3
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	6013      	str	r3, [r2, #0]
}
 80021b6:	bf00      	nop
 80021b8:	371c      	adds	r7, #28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40028040 	.word	0x40028040
 80021c8:	40028044 	.word	0x40028044

080021cc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f042 0208 	orr.w	r2, r2, #8
 80021e6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80021f0:	2001      	movs	r0, #1
 80021f2:	f000 f8e9 	bl	80023c8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	601a      	str	r2, [r3, #0]
}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002206:	b580      	push	{r7, lr}
 8002208:	b084      	sub	sp, #16
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0208 	bic.w	r2, r2, #8
 8002220:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800222a:	2001      	movs	r0, #1
 800222c:	f000 f8cc 	bl	80023c8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	601a      	str	r2, [r3, #0]
}
 8002238:	bf00      	nop
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0204 	orr.w	r2, r2, #4
 800225a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002264:	2001      	movs	r0, #1
 8002266:	f000 f8af 	bl	80023c8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	601a      	str	r2, [r3, #0]
}
 8002272:	bf00      	nop
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800227a:	b580      	push	{r7, lr}
 800227c:	b084      	sub	sp, #16
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0204 	bic.w	r2, r2, #4
 8002294:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800229e:	2001      	movs	r0, #1
 80022a0:	f000 f892 	bl	80023c8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	601a      	str	r2, [r3, #0]
}
 80022ac:	bf00      	nop
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022c4:	3318      	adds	r3, #24
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022d4:	3318      	adds	r3, #24
 80022d6:	601a      	str	r2, [r3, #0]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022f4:	3318      	adds	r3, #24
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002304:	3318      	adds	r3, #24
 8002306:	601a      	str	r2, [r3, #0]
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002324:	3318      	adds	r3, #24
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f042 0202 	orr.w	r2, r2, #2
 8002330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002334:	3318      	adds	r3, #24
 8002336:	601a      	str	r2, [r3, #0]
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002354:	3318      	adds	r3, #24
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 0202 	bic.w	r2, r2, #2
 8002360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002364:	3318      	adds	r3, #24
 8002366:	601a      	str	r2, [r3, #0]
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002388:	3318      	adds	r3, #24
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002398:	3318      	adds	r3, #24
 800239a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023a4:	3318      	adds	r3, #24
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80023aa:	2001      	movs	r0, #1
 80023ac:	f000 f80c 	bl	80023c8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ba:	3318      	adds	r3, #24
 80023bc:	601a      	str	r2, [r3, #0]
}
 80023be:	bf00      	nop
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
	...

080023c8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023d0:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <ETH_Delay+0x38>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a0b      	ldr	r2, [pc, #44]	; (8002404 <ETH_Delay+0x3c>)
 80023d6:	fba2 2303 	umull	r2, r3, r2, r3
 80023da:	0a5b      	lsrs	r3, r3, #9
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	fb02 f303 	mul.w	r3, r2, r3
 80023e2:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80023e4:	bf00      	nop
  } 
  while (Delay --);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	1e5a      	subs	r2, r3, #1
 80023ea:	60fa      	str	r2, [r7, #12]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1f9      	bne.n	80023e4 <ETH_Delay+0x1c>
}
 80023f0:	bf00      	nop
 80023f2:	bf00      	nop
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	20000014 	.word	0x20000014
 8002404:	10624dd3 	.word	0x10624dd3

08002408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002408:	b480      	push	{r7}
 800240a:	b089      	sub	sp, #36	; 0x24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002416:	2300      	movs	r3, #0
 8002418:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800241a:	2300      	movs	r3, #0
 800241c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
 8002422:	e16b      	b.n	80026fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002424:	2201      	movs	r2, #1
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	4013      	ands	r3, r2
 8002436:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	429a      	cmp	r2, r3
 800243e:	f040 815a 	bne.w	80026f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	2b01      	cmp	r3, #1
 800244c:	d005      	beq.n	800245a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002456:	2b02      	cmp	r3, #2
 8002458:	d130      	bne.n	80024bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	2203      	movs	r2, #3
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4013      	ands	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002490:	2201      	movs	r2, #1
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	091b      	lsrs	r3, r3, #4
 80024a6:	f003 0201 	and.w	r2, r3, #1
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 0303 	and.w	r3, r3, #3
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	d017      	beq.n	80024f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	2203      	movs	r2, #3
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d123      	bne.n	800254c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	08da      	lsrs	r2, r3, #3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3208      	adds	r2, #8
 800250c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002510:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	220f      	movs	r2, #15
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	08da      	lsrs	r2, r3, #3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3208      	adds	r2, #8
 8002546:	69b9      	ldr	r1, [r7, #24]
 8002548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	2203      	movs	r2, #3
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 0203 	and.w	r2, r3, #3
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 80b4 	beq.w	80026f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	4b60      	ldr	r3, [pc, #384]	; (8002714 <HAL_GPIO_Init+0x30c>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002596:	4a5f      	ldr	r2, [pc, #380]	; (8002714 <HAL_GPIO_Init+0x30c>)
 8002598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800259c:	6453      	str	r3, [r2, #68]	; 0x44
 800259e:	4b5d      	ldr	r3, [pc, #372]	; (8002714 <HAL_GPIO_Init+0x30c>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025aa:	4a5b      	ldr	r2, [pc, #364]	; (8002718 <HAL_GPIO_Init+0x310>)
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	089b      	lsrs	r3, r3, #2
 80025b0:	3302      	adds	r3, #2
 80025b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	220f      	movs	r2, #15
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a52      	ldr	r2, [pc, #328]	; (800271c <HAL_GPIO_Init+0x314>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d02b      	beq.n	800262e <HAL_GPIO_Init+0x226>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a51      	ldr	r2, [pc, #324]	; (8002720 <HAL_GPIO_Init+0x318>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d025      	beq.n	800262a <HAL_GPIO_Init+0x222>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a50      	ldr	r2, [pc, #320]	; (8002724 <HAL_GPIO_Init+0x31c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d01f      	beq.n	8002626 <HAL_GPIO_Init+0x21e>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a4f      	ldr	r2, [pc, #316]	; (8002728 <HAL_GPIO_Init+0x320>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d019      	beq.n	8002622 <HAL_GPIO_Init+0x21a>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a4e      	ldr	r2, [pc, #312]	; (800272c <HAL_GPIO_Init+0x324>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d013      	beq.n	800261e <HAL_GPIO_Init+0x216>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a4d      	ldr	r2, [pc, #308]	; (8002730 <HAL_GPIO_Init+0x328>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d00d      	beq.n	800261a <HAL_GPIO_Init+0x212>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a4c      	ldr	r2, [pc, #304]	; (8002734 <HAL_GPIO_Init+0x32c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d007      	beq.n	8002616 <HAL_GPIO_Init+0x20e>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a4b      	ldr	r2, [pc, #300]	; (8002738 <HAL_GPIO_Init+0x330>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d101      	bne.n	8002612 <HAL_GPIO_Init+0x20a>
 800260e:	2307      	movs	r3, #7
 8002610:	e00e      	b.n	8002630 <HAL_GPIO_Init+0x228>
 8002612:	2308      	movs	r3, #8
 8002614:	e00c      	b.n	8002630 <HAL_GPIO_Init+0x228>
 8002616:	2306      	movs	r3, #6
 8002618:	e00a      	b.n	8002630 <HAL_GPIO_Init+0x228>
 800261a:	2305      	movs	r3, #5
 800261c:	e008      	b.n	8002630 <HAL_GPIO_Init+0x228>
 800261e:	2304      	movs	r3, #4
 8002620:	e006      	b.n	8002630 <HAL_GPIO_Init+0x228>
 8002622:	2303      	movs	r3, #3
 8002624:	e004      	b.n	8002630 <HAL_GPIO_Init+0x228>
 8002626:	2302      	movs	r3, #2
 8002628:	e002      	b.n	8002630 <HAL_GPIO_Init+0x228>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <HAL_GPIO_Init+0x228>
 800262e:	2300      	movs	r3, #0
 8002630:	69fa      	ldr	r2, [r7, #28]
 8002632:	f002 0203 	and.w	r2, r2, #3
 8002636:	0092      	lsls	r2, r2, #2
 8002638:	4093      	lsls	r3, r2
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002640:	4935      	ldr	r1, [pc, #212]	; (8002718 <HAL_GPIO_Init+0x310>)
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	089b      	lsrs	r3, r3, #2
 8002646:	3302      	adds	r3, #2
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800264e:	4b3b      	ldr	r3, [pc, #236]	; (800273c <HAL_GPIO_Init+0x334>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002672:	4a32      	ldr	r2, [pc, #200]	; (800273c <HAL_GPIO_Init+0x334>)
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002678:	4b30      	ldr	r3, [pc, #192]	; (800273c <HAL_GPIO_Init+0x334>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800269c:	4a27      	ldr	r2, [pc, #156]	; (800273c <HAL_GPIO_Init+0x334>)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026a2:	4b26      	ldr	r3, [pc, #152]	; (800273c <HAL_GPIO_Init+0x334>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026c6:	4a1d      	ldr	r2, [pc, #116]	; (800273c <HAL_GPIO_Init+0x334>)
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026cc:	4b1b      	ldr	r3, [pc, #108]	; (800273c <HAL_GPIO_Init+0x334>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026f0:	4a12      	ldr	r2, [pc, #72]	; (800273c <HAL_GPIO_Init+0x334>)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3301      	adds	r3, #1
 80026fa:	61fb      	str	r3, [r7, #28]
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	2b0f      	cmp	r3, #15
 8002700:	f67f ae90 	bls.w	8002424 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002704:	bf00      	nop
 8002706:	bf00      	nop
 8002708:	3724      	adds	r7, #36	; 0x24
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40023800 	.word	0x40023800
 8002718:	40013800 	.word	0x40013800
 800271c:	40020000 	.word	0x40020000
 8002720:	40020400 	.word	0x40020400
 8002724:	40020800 	.word	0x40020800
 8002728:	40020c00 	.word	0x40020c00
 800272c:	40021000 	.word	0x40021000
 8002730:	40021400 	.word	0x40021400
 8002734:	40021800 	.word	0x40021800
 8002738:	40021c00 	.word	0x40021c00
 800273c:	40013c00 	.word	0x40013c00

08002740 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e264      	b.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d075      	beq.n	800284a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800275e:	4ba3      	ldr	r3, [pc, #652]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	2b04      	cmp	r3, #4
 8002768:	d00c      	beq.n	8002784 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800276a:	4ba0      	ldr	r3, [pc, #640]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002772:	2b08      	cmp	r3, #8
 8002774:	d112      	bne.n	800279c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002776:	4b9d      	ldr	r3, [pc, #628]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800277e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002782:	d10b      	bne.n	800279c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002784:	4b99      	ldr	r3, [pc, #612]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d05b      	beq.n	8002848 <HAL_RCC_OscConfig+0x108>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d157      	bne.n	8002848 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e23f      	b.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027a4:	d106      	bne.n	80027b4 <HAL_RCC_OscConfig+0x74>
 80027a6:	4b91      	ldr	r3, [pc, #580]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a90      	ldr	r2, [pc, #576]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80027ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	e01d      	b.n	80027f0 <HAL_RCC_OscConfig+0xb0>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027bc:	d10c      	bne.n	80027d8 <HAL_RCC_OscConfig+0x98>
 80027be:	4b8b      	ldr	r3, [pc, #556]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a8a      	ldr	r2, [pc, #552]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80027c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	4b88      	ldr	r3, [pc, #544]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a87      	ldr	r2, [pc, #540]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80027d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	e00b      	b.n	80027f0 <HAL_RCC_OscConfig+0xb0>
 80027d8:	4b84      	ldr	r3, [pc, #528]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a83      	ldr	r2, [pc, #524]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80027de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	4b81      	ldr	r3, [pc, #516]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a80      	ldr	r2, [pc, #512]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80027ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d013      	beq.n	8002820 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7fe fbca 	bl	8000f90 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002800:	f7fe fbc6 	bl	8000f90 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b64      	cmp	r3, #100	; 0x64
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e204      	b.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002812:	4b76      	ldr	r3, [pc, #472]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0xc0>
 800281e:	e014      	b.n	800284a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7fe fbb6 	bl	8000f90 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002828:	f7fe fbb2 	bl	8000f90 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b64      	cmp	r3, #100	; 0x64
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e1f0      	b.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800283a:	4b6c      	ldr	r3, [pc, #432]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0xe8>
 8002846:	e000      	b.n	800284a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d063      	beq.n	800291e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002856:	4b65      	ldr	r3, [pc, #404]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 030c 	and.w	r3, r3, #12
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00b      	beq.n	800287a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002862:	4b62      	ldr	r3, [pc, #392]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800286a:	2b08      	cmp	r3, #8
 800286c:	d11c      	bne.n	80028a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800286e:	4b5f      	ldr	r3, [pc, #380]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d116      	bne.n	80028a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287a:	4b5c      	ldr	r3, [pc, #368]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d005      	beq.n	8002892 <HAL_RCC_OscConfig+0x152>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d001      	beq.n	8002892 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e1c4      	b.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002892:	4b56      	ldr	r3, [pc, #344]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	4952      	ldr	r1, [pc, #328]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a6:	e03a      	b.n	800291e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d020      	beq.n	80028f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028b0:	4b4f      	ldr	r3, [pc, #316]	; (80029f0 <HAL_RCC_OscConfig+0x2b0>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b6:	f7fe fb6b 	bl	8000f90 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028be:	f7fe fb67 	bl	8000f90 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e1a5      	b.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d0:	4b46      	ldr	r3, [pc, #280]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028dc:	4b43      	ldr	r3, [pc, #268]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4940      	ldr	r1, [pc, #256]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	600b      	str	r3, [r1, #0]
 80028f0:	e015      	b.n	800291e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028f2:	4b3f      	ldr	r3, [pc, #252]	; (80029f0 <HAL_RCC_OscConfig+0x2b0>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f8:	f7fe fb4a 	bl	8000f90 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002900:	f7fe fb46 	bl	8000f90 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e184      	b.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002912:	4b36      	ldr	r3, [pc, #216]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d030      	beq.n	800298c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d016      	beq.n	8002960 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002932:	4b30      	ldr	r3, [pc, #192]	; (80029f4 <HAL_RCC_OscConfig+0x2b4>)
 8002934:	2201      	movs	r2, #1
 8002936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002938:	f7fe fb2a 	bl	8000f90 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002940:	f7fe fb26 	bl	8000f90 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e164      	b.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002952:	4b26      	ldr	r3, [pc, #152]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 8002954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x200>
 800295e:	e015      	b.n	800298c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002960:	4b24      	ldr	r3, [pc, #144]	; (80029f4 <HAL_RCC_OscConfig+0x2b4>)
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002966:	f7fe fb13 	bl	8000f90 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800296e:	f7fe fb0f 	bl	8000f90 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e14d      	b.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002980:	4b1a      	ldr	r3, [pc, #104]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 8002982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1f0      	bne.n	800296e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 80a0 	beq.w	8002ada <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800299a:	2300      	movs	r3, #0
 800299c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800299e:	4b13      	ldr	r3, [pc, #76]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10f      	bne.n	80029ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	4b0f      	ldr	r3, [pc, #60]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	4a0e      	ldr	r2, [pc, #56]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80029b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ba:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029c6:	2301      	movs	r3, #1
 80029c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ca:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <HAL_RCC_OscConfig+0x2b8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d121      	bne.n	8002a1a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029d6:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <HAL_RCC_OscConfig+0x2b8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a07      	ldr	r2, [pc, #28]	; (80029f8 <HAL_RCC_OscConfig+0x2b8>)
 80029dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029e2:	f7fe fad5 	bl	8000f90 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e8:	e011      	b.n	8002a0e <HAL_RCC_OscConfig+0x2ce>
 80029ea:	bf00      	nop
 80029ec:	40023800 	.word	0x40023800
 80029f0:	42470000 	.word	0x42470000
 80029f4:	42470e80 	.word	0x42470e80
 80029f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029fc:	f7fe fac8 	bl	8000f90 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e106      	b.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0e:	4b85      	ldr	r3, [pc, #532]	; (8002c24 <HAL_RCC_OscConfig+0x4e4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d106      	bne.n	8002a30 <HAL_RCC_OscConfig+0x2f0>
 8002a22:	4b81      	ldr	r3, [pc, #516]	; (8002c28 <HAL_RCC_OscConfig+0x4e8>)
 8002a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a26:	4a80      	ldr	r2, [pc, #512]	; (8002c28 <HAL_RCC_OscConfig+0x4e8>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a2e:	e01c      	b.n	8002a6a <HAL_RCC_OscConfig+0x32a>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	2b05      	cmp	r3, #5
 8002a36:	d10c      	bne.n	8002a52 <HAL_RCC_OscConfig+0x312>
 8002a38:	4b7b      	ldr	r3, [pc, #492]	; (8002c28 <HAL_RCC_OscConfig+0x4e8>)
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3c:	4a7a      	ldr	r2, [pc, #488]	; (8002c28 <HAL_RCC_OscConfig+0x4e8>)
 8002a3e:	f043 0304 	orr.w	r3, r3, #4
 8002a42:	6713      	str	r3, [r2, #112]	; 0x70
 8002a44:	4b78      	ldr	r3, [pc, #480]	; (8002c28 <HAL_RCC_OscConfig+0x4e8>)
 8002a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a48:	4a77      	ldr	r2, [pc, #476]	; (8002c28 <HAL_RCC_OscConfig+0x4e8>)
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a50:	e00b      	b.n	8002a6a <HAL_RCC_OscConfig+0x32a>
 8002a52:	4b75      	ldr	r3, [pc, #468]	; (8002c28 <HAL_RCC_OscConfig+0x4e8>)
 8002a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a56:	4a74      	ldr	r2, [pc, #464]	; (8002c28 <HAL_RCC_OscConfig+0x4e8>)
 8002a58:	f023 0301 	bic.w	r3, r3, #1
 8002a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a5e:	4b72      	ldr	r3, [pc, #456]	; (8002c28 <HAL_RCC_OscConfig+0x4e8>)
 8002a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a62:	4a71      	ldr	r2, [pc, #452]	; (8002c28 <HAL_RCC_OscConfig+0x4e8>)
 8002a64:	f023 0304 	bic.w	r3, r3, #4
 8002a68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d015      	beq.n	8002a9e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a72:	f7fe fa8d 	bl	8000f90 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a78:	e00a      	b.n	8002a90 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a7a:	f7fe fa89 	bl	8000f90 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e0c5      	b.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a90:	4b65      	ldr	r3, [pc, #404]	; (8002c28 <HAL_RCC_OscConfig+0x4e8>)
 8002a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0ee      	beq.n	8002a7a <HAL_RCC_OscConfig+0x33a>
 8002a9c:	e014      	b.n	8002ac8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9e:	f7fe fa77 	bl	8000f90 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa4:	e00a      	b.n	8002abc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aa6:	f7fe fa73 	bl	8000f90 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e0af      	b.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002abc:	4b5a      	ldr	r3, [pc, #360]	; (8002c28 <HAL_RCC_OscConfig+0x4e8>)
 8002abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1ee      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ac8:	7dfb      	ldrb	r3, [r7, #23]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d105      	bne.n	8002ada <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ace:	4b56      	ldr	r3, [pc, #344]	; (8002c28 <HAL_RCC_OscConfig+0x4e8>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	4a55      	ldr	r2, [pc, #340]	; (8002c28 <HAL_RCC_OscConfig+0x4e8>)
 8002ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ad8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 809b 	beq.w	8002c1a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ae4:	4b50      	ldr	r3, [pc, #320]	; (8002c28 <HAL_RCC_OscConfig+0x4e8>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 030c 	and.w	r3, r3, #12
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d05c      	beq.n	8002baa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d141      	bne.n	8002b7c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af8:	4b4c      	ldr	r3, [pc, #304]	; (8002c2c <HAL_RCC_OscConfig+0x4ec>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afe:	f7fe fa47 	bl	8000f90 <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b06:	f7fe fa43 	bl	8000f90 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e081      	b.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b18:	4b43      	ldr	r3, [pc, #268]	; (8002c28 <HAL_RCC_OscConfig+0x4e8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1f0      	bne.n	8002b06 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	69da      	ldr	r2, [r3, #28]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	019b      	lsls	r3, r3, #6
 8002b34:	431a      	orrs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3a:	085b      	lsrs	r3, r3, #1
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	041b      	lsls	r3, r3, #16
 8002b40:	431a      	orrs	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b46:	061b      	lsls	r3, r3, #24
 8002b48:	4937      	ldr	r1, [pc, #220]	; (8002c28 <HAL_RCC_OscConfig+0x4e8>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b4e:	4b37      	ldr	r3, [pc, #220]	; (8002c2c <HAL_RCC_OscConfig+0x4ec>)
 8002b50:	2201      	movs	r2, #1
 8002b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b54:	f7fe fa1c 	bl	8000f90 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b5c:	f7fe fa18 	bl	8000f90 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e056      	b.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b6e:	4b2e      	ldr	r3, [pc, #184]	; (8002c28 <HAL_RCC_OscConfig+0x4e8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0f0      	beq.n	8002b5c <HAL_RCC_OscConfig+0x41c>
 8002b7a:	e04e      	b.n	8002c1a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b7c:	4b2b      	ldr	r3, [pc, #172]	; (8002c2c <HAL_RCC_OscConfig+0x4ec>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b82:	f7fe fa05 	bl	8000f90 <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b88:	e008      	b.n	8002b9c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b8a:	f7fe fa01 	bl	8000f90 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e03f      	b.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b9c:	4b22      	ldr	r3, [pc, #136]	; (8002c28 <HAL_RCC_OscConfig+0x4e8>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1f0      	bne.n	8002b8a <HAL_RCC_OscConfig+0x44a>
 8002ba8:	e037      	b.n	8002c1a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d101      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e032      	b.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bb6:	4b1c      	ldr	r3, [pc, #112]	; (8002c28 <HAL_RCC_OscConfig+0x4e8>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d028      	beq.n	8002c16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d121      	bne.n	8002c16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d11a      	bne.n	8002c16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002be6:	4013      	ands	r3, r2
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d111      	bne.n	8002c16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfc:	085b      	lsrs	r3, r3, #1
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d107      	bne.n	8002c16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d001      	beq.n	8002c1a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3718      	adds	r7, #24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40007000 	.word	0x40007000
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	42470060 	.word	0x42470060

08002c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e0cc      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c44:	4b68      	ldr	r3, [pc, #416]	; (8002de8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d90c      	bls.n	8002c6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c52:	4b65      	ldr	r3, [pc, #404]	; (8002de8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5a:	4b63      	ldr	r3, [pc, #396]	; (8002de8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0b8      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d020      	beq.n	8002cba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c84:	4b59      	ldr	r3, [pc, #356]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	4a58      	ldr	r2, [pc, #352]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0308 	and.w	r3, r3, #8
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d005      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c9c:	4b53      	ldr	r3, [pc, #332]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	4a52      	ldr	r2, [pc, #328]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002ca2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ca6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ca8:	4b50      	ldr	r3, [pc, #320]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	494d      	ldr	r1, [pc, #308]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d044      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d107      	bne.n	8002cde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cce:	4b47      	ldr	r3, [pc, #284]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d119      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e07f      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d003      	beq.n	8002cee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cea:	2b03      	cmp	r3, #3
 8002cec:	d107      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cee:	4b3f      	ldr	r3, [pc, #252]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d109      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e06f      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfe:	4b3b      	ldr	r3, [pc, #236]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e067      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d0e:	4b37      	ldr	r3, [pc, #220]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f023 0203 	bic.w	r2, r3, #3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	4934      	ldr	r1, [pc, #208]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d20:	f7fe f936 	bl	8000f90 <HAL_GetTick>
 8002d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d26:	e00a      	b.n	8002d3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d28:	f7fe f932 	bl	8000f90 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e04f      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3e:	4b2b      	ldr	r3, [pc, #172]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 020c 	and.w	r2, r3, #12
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d1eb      	bne.n	8002d28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d50:	4b25      	ldr	r3, [pc, #148]	; (8002de8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d20c      	bcs.n	8002d78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5e:	4b22      	ldr	r3, [pc, #136]	; (8002de8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	b2d2      	uxtb	r2, r2
 8002d64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d66:	4b20      	ldr	r3, [pc, #128]	; (8002de8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d001      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e032      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d008      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d84:	4b19      	ldr	r3, [pc, #100]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	4916      	ldr	r1, [pc, #88]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d009      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002da2:	4b12      	ldr	r3, [pc, #72]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	490e      	ldr	r1, [pc, #56]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002db6:	f000 f821 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	091b      	lsrs	r3, r3, #4
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	490a      	ldr	r1, [pc, #40]	; (8002df0 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc8:	5ccb      	ldrb	r3, [r1, r3]
 8002dca:	fa22 f303 	lsr.w	r3, r2, r3
 8002dce:	4a09      	ldr	r2, [pc, #36]	; (8002df4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dd2:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <HAL_RCC_ClockConfig+0x1c8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fe f896 	bl	8000f08 <HAL_InitTick>

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40023c00 	.word	0x40023c00
 8002dec:	40023800 	.word	0x40023800
 8002df0:	08014234 	.word	0x08014234
 8002df4:	20000014 	.word	0x20000014
 8002df8:	20000018 	.word	0x20000018

08002dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dfc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e00:	b084      	sub	sp, #16
 8002e02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	607b      	str	r3, [r7, #4]
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e14:	4b67      	ldr	r3, [pc, #412]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 030c 	and.w	r3, r3, #12
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d00d      	beq.n	8002e3c <HAL_RCC_GetSysClockFreq+0x40>
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	f200 80bd 	bhi.w	8002fa0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <HAL_RCC_GetSysClockFreq+0x34>
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d003      	beq.n	8002e36 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e2e:	e0b7      	b.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e30:	4b61      	ldr	r3, [pc, #388]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e32:	60bb      	str	r3, [r7, #8]
       break;
 8002e34:	e0b7      	b.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e36:	4b61      	ldr	r3, [pc, #388]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002e38:	60bb      	str	r3, [r7, #8]
      break;
 8002e3a:	e0b4      	b.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e3c:	4b5d      	ldr	r3, [pc, #372]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e44:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e46:	4b5b      	ldr	r3, [pc, #364]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d04d      	beq.n	8002eee <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e52:	4b58      	ldr	r3, [pc, #352]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	099b      	lsrs	r3, r3, #6
 8002e58:	461a      	mov	r2, r3
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e62:	f04f 0100 	mov.w	r1, #0
 8002e66:	ea02 0800 	and.w	r8, r2, r0
 8002e6a:	ea03 0901 	and.w	r9, r3, r1
 8002e6e:	4640      	mov	r0, r8
 8002e70:	4649      	mov	r1, r9
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	014b      	lsls	r3, r1, #5
 8002e7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e80:	0142      	lsls	r2, r0, #5
 8002e82:	4610      	mov	r0, r2
 8002e84:	4619      	mov	r1, r3
 8002e86:	ebb0 0008 	subs.w	r0, r0, r8
 8002e8a:	eb61 0109 	sbc.w	r1, r1, r9
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	018b      	lsls	r3, r1, #6
 8002e98:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e9c:	0182      	lsls	r2, r0, #6
 8002e9e:	1a12      	subs	r2, r2, r0
 8002ea0:	eb63 0301 	sbc.w	r3, r3, r1
 8002ea4:	f04f 0000 	mov.w	r0, #0
 8002ea8:	f04f 0100 	mov.w	r1, #0
 8002eac:	00d9      	lsls	r1, r3, #3
 8002eae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002eb2:	00d0      	lsls	r0, r2, #3
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	eb12 0208 	adds.w	r2, r2, r8
 8002ebc:	eb43 0309 	adc.w	r3, r3, r9
 8002ec0:	f04f 0000 	mov.w	r0, #0
 8002ec4:	f04f 0100 	mov.w	r1, #0
 8002ec8:	0259      	lsls	r1, r3, #9
 8002eca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002ece:	0250      	lsls	r0, r2, #9
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4610      	mov	r0, r2
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	461a      	mov	r2, r3
 8002edc:	f04f 0300 	mov.w	r3, #0
 8002ee0:	f7fd f9de 	bl	80002a0 <__aeabi_uldivmod>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4613      	mov	r3, r2
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	e04a      	b.n	8002f84 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eee:	4b31      	ldr	r3, [pc, #196]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	099b      	lsrs	r3, r3, #6
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	f04f 0300 	mov.w	r3, #0
 8002efa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002efe:	f04f 0100 	mov.w	r1, #0
 8002f02:	ea02 0400 	and.w	r4, r2, r0
 8002f06:	ea03 0501 	and.w	r5, r3, r1
 8002f0a:	4620      	mov	r0, r4
 8002f0c:	4629      	mov	r1, r5
 8002f0e:	f04f 0200 	mov.w	r2, #0
 8002f12:	f04f 0300 	mov.w	r3, #0
 8002f16:	014b      	lsls	r3, r1, #5
 8002f18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f1c:	0142      	lsls	r2, r0, #5
 8002f1e:	4610      	mov	r0, r2
 8002f20:	4619      	mov	r1, r3
 8002f22:	1b00      	subs	r0, r0, r4
 8002f24:	eb61 0105 	sbc.w	r1, r1, r5
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	f04f 0300 	mov.w	r3, #0
 8002f30:	018b      	lsls	r3, r1, #6
 8002f32:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f36:	0182      	lsls	r2, r0, #6
 8002f38:	1a12      	subs	r2, r2, r0
 8002f3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f3e:	f04f 0000 	mov.w	r0, #0
 8002f42:	f04f 0100 	mov.w	r1, #0
 8002f46:	00d9      	lsls	r1, r3, #3
 8002f48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f4c:	00d0      	lsls	r0, r2, #3
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	1912      	adds	r2, r2, r4
 8002f54:	eb45 0303 	adc.w	r3, r5, r3
 8002f58:	f04f 0000 	mov.w	r0, #0
 8002f5c:	f04f 0100 	mov.w	r1, #0
 8002f60:	0299      	lsls	r1, r3, #10
 8002f62:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f66:	0290      	lsls	r0, r2, #10
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	4619      	mov	r1, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	461a      	mov	r2, r3
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	f7fd f992 	bl	80002a0 <__aeabi_uldivmod>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4613      	mov	r3, r2
 8002f82:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	0c1b      	lsrs	r3, r3, #16
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	3301      	adds	r3, #1
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9c:	60bb      	str	r3, [r7, #8]
      break;
 8002f9e:	e002      	b.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fa0:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002fa2:	60bb      	str	r3, [r7, #8]
      break;
 8002fa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fa6:	68bb      	ldr	r3, [r7, #8]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	00f42400 	.word	0x00f42400
 8002fbc:	007a1200 	.word	0x007a1200

08002fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fc4:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	20000014 	.word	0x20000014

08002fd8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8002fde:	4b8d      	ldr	r3, [pc, #564]	; (8003214 <MX_LWIP_Init+0x23c>)
 8002fe0:	22c0      	movs	r2, #192	; 0xc0
 8002fe2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8002fe4:	4b8b      	ldr	r3, [pc, #556]	; (8003214 <MX_LWIP_Init+0x23c>)
 8002fe6:	22a8      	movs	r2, #168	; 0xa8
 8002fe8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 18;
 8002fea:	4b8a      	ldr	r3, [pc, #552]	; (8003214 <MX_LWIP_Init+0x23c>)
 8002fec:	2212      	movs	r2, #18
 8002fee:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 110;
 8002ff0:	4b88      	ldr	r3, [pc, #544]	; (8003214 <MX_LWIP_Init+0x23c>)
 8002ff2:	226e      	movs	r2, #110	; 0x6e
 8002ff4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8002ff6:	4b88      	ldr	r3, [pc, #544]	; (8003218 <MX_LWIP_Init+0x240>)
 8002ff8:	22ff      	movs	r2, #255	; 0xff
 8002ffa:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8002ffc:	4b86      	ldr	r3, [pc, #536]	; (8003218 <MX_LWIP_Init+0x240>)
 8002ffe:	22ff      	movs	r2, #255	; 0xff
 8003000:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003002:	4b85      	ldr	r3, [pc, #532]	; (8003218 <MX_LWIP_Init+0x240>)
 8003004:	22ff      	movs	r2, #255	; 0xff
 8003006:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003008:	4b83      	ldr	r3, [pc, #524]	; (8003218 <MX_LWIP_Init+0x240>)
 800300a:	2200      	movs	r2, #0
 800300c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800300e:	4b83      	ldr	r3, [pc, #524]	; (800321c <MX_LWIP_Init+0x244>)
 8003010:	22c0      	movs	r2, #192	; 0xc0
 8003012:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003014:	4b81      	ldr	r3, [pc, #516]	; (800321c <MX_LWIP_Init+0x244>)
 8003016:	22a8      	movs	r2, #168	; 0xa8
 8003018:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 18;
 800301a:	4b80      	ldr	r3, [pc, #512]	; (800321c <MX_LWIP_Init+0x244>)
 800301c:	2212      	movs	r2, #18
 800301e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003020:	4b7e      	ldr	r3, [pc, #504]	; (800321c <MX_LWIP_Init+0x244>)
 8003022:	2201      	movs	r2, #1
 8003024:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8003026:	f002 fa61 	bl	80054ec <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800302a:	4b7a      	ldr	r3, [pc, #488]	; (8003214 <MX_LWIP_Init+0x23c>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	061a      	lsls	r2, r3, #24
 8003030:	4b78      	ldr	r3, [pc, #480]	; (8003214 <MX_LWIP_Init+0x23c>)
 8003032:	785b      	ldrb	r3, [r3, #1]
 8003034:	041b      	lsls	r3, r3, #16
 8003036:	431a      	orrs	r2, r3
 8003038:	4b76      	ldr	r3, [pc, #472]	; (8003214 <MX_LWIP_Init+0x23c>)
 800303a:	789b      	ldrb	r3, [r3, #2]
 800303c:	021b      	lsls	r3, r3, #8
 800303e:	4313      	orrs	r3, r2
 8003040:	4a74      	ldr	r2, [pc, #464]	; (8003214 <MX_LWIP_Init+0x23c>)
 8003042:	78d2      	ldrb	r2, [r2, #3]
 8003044:	4313      	orrs	r3, r2
 8003046:	061a      	lsls	r2, r3, #24
 8003048:	4b72      	ldr	r3, [pc, #456]	; (8003214 <MX_LWIP_Init+0x23c>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	0619      	lsls	r1, r3, #24
 800304e:	4b71      	ldr	r3, [pc, #452]	; (8003214 <MX_LWIP_Init+0x23c>)
 8003050:	785b      	ldrb	r3, [r3, #1]
 8003052:	041b      	lsls	r3, r3, #16
 8003054:	4319      	orrs	r1, r3
 8003056:	4b6f      	ldr	r3, [pc, #444]	; (8003214 <MX_LWIP_Init+0x23c>)
 8003058:	789b      	ldrb	r3, [r3, #2]
 800305a:	021b      	lsls	r3, r3, #8
 800305c:	430b      	orrs	r3, r1
 800305e:	496d      	ldr	r1, [pc, #436]	; (8003214 <MX_LWIP_Init+0x23c>)
 8003060:	78c9      	ldrb	r1, [r1, #3]
 8003062:	430b      	orrs	r3, r1
 8003064:	021b      	lsls	r3, r3, #8
 8003066:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800306a:	431a      	orrs	r2, r3
 800306c:	4b69      	ldr	r3, [pc, #420]	; (8003214 <MX_LWIP_Init+0x23c>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	0619      	lsls	r1, r3, #24
 8003072:	4b68      	ldr	r3, [pc, #416]	; (8003214 <MX_LWIP_Init+0x23c>)
 8003074:	785b      	ldrb	r3, [r3, #1]
 8003076:	041b      	lsls	r3, r3, #16
 8003078:	4319      	orrs	r1, r3
 800307a:	4b66      	ldr	r3, [pc, #408]	; (8003214 <MX_LWIP_Init+0x23c>)
 800307c:	789b      	ldrb	r3, [r3, #2]
 800307e:	021b      	lsls	r3, r3, #8
 8003080:	430b      	orrs	r3, r1
 8003082:	4964      	ldr	r1, [pc, #400]	; (8003214 <MX_LWIP_Init+0x23c>)
 8003084:	78c9      	ldrb	r1, [r1, #3]
 8003086:	430b      	orrs	r3, r1
 8003088:	0a1b      	lsrs	r3, r3, #8
 800308a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800308e:	431a      	orrs	r2, r3
 8003090:	4b60      	ldr	r3, [pc, #384]	; (8003214 <MX_LWIP_Init+0x23c>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	0619      	lsls	r1, r3, #24
 8003096:	4b5f      	ldr	r3, [pc, #380]	; (8003214 <MX_LWIP_Init+0x23c>)
 8003098:	785b      	ldrb	r3, [r3, #1]
 800309a:	041b      	lsls	r3, r3, #16
 800309c:	4319      	orrs	r1, r3
 800309e:	4b5d      	ldr	r3, [pc, #372]	; (8003214 <MX_LWIP_Init+0x23c>)
 80030a0:	789b      	ldrb	r3, [r3, #2]
 80030a2:	021b      	lsls	r3, r3, #8
 80030a4:	430b      	orrs	r3, r1
 80030a6:	495b      	ldr	r1, [pc, #364]	; (8003214 <MX_LWIP_Init+0x23c>)
 80030a8:	78c9      	ldrb	r1, [r1, #3]
 80030aa:	430b      	orrs	r3, r1
 80030ac:	0e1b      	lsrs	r3, r3, #24
 80030ae:	4313      	orrs	r3, r2
 80030b0:	4a5b      	ldr	r2, [pc, #364]	; (8003220 <MX_LWIP_Init+0x248>)
 80030b2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80030b4:	4b58      	ldr	r3, [pc, #352]	; (8003218 <MX_LWIP_Init+0x240>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	061a      	lsls	r2, r3, #24
 80030ba:	4b57      	ldr	r3, [pc, #348]	; (8003218 <MX_LWIP_Init+0x240>)
 80030bc:	785b      	ldrb	r3, [r3, #1]
 80030be:	041b      	lsls	r3, r3, #16
 80030c0:	431a      	orrs	r2, r3
 80030c2:	4b55      	ldr	r3, [pc, #340]	; (8003218 <MX_LWIP_Init+0x240>)
 80030c4:	789b      	ldrb	r3, [r3, #2]
 80030c6:	021b      	lsls	r3, r3, #8
 80030c8:	4313      	orrs	r3, r2
 80030ca:	4a53      	ldr	r2, [pc, #332]	; (8003218 <MX_LWIP_Init+0x240>)
 80030cc:	78d2      	ldrb	r2, [r2, #3]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	061a      	lsls	r2, r3, #24
 80030d2:	4b51      	ldr	r3, [pc, #324]	; (8003218 <MX_LWIP_Init+0x240>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	0619      	lsls	r1, r3, #24
 80030d8:	4b4f      	ldr	r3, [pc, #316]	; (8003218 <MX_LWIP_Init+0x240>)
 80030da:	785b      	ldrb	r3, [r3, #1]
 80030dc:	041b      	lsls	r3, r3, #16
 80030de:	4319      	orrs	r1, r3
 80030e0:	4b4d      	ldr	r3, [pc, #308]	; (8003218 <MX_LWIP_Init+0x240>)
 80030e2:	789b      	ldrb	r3, [r3, #2]
 80030e4:	021b      	lsls	r3, r3, #8
 80030e6:	430b      	orrs	r3, r1
 80030e8:	494b      	ldr	r1, [pc, #300]	; (8003218 <MX_LWIP_Init+0x240>)
 80030ea:	78c9      	ldrb	r1, [r1, #3]
 80030ec:	430b      	orrs	r3, r1
 80030ee:	021b      	lsls	r3, r3, #8
 80030f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80030f4:	431a      	orrs	r2, r3
 80030f6:	4b48      	ldr	r3, [pc, #288]	; (8003218 <MX_LWIP_Init+0x240>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	0619      	lsls	r1, r3, #24
 80030fc:	4b46      	ldr	r3, [pc, #280]	; (8003218 <MX_LWIP_Init+0x240>)
 80030fe:	785b      	ldrb	r3, [r3, #1]
 8003100:	041b      	lsls	r3, r3, #16
 8003102:	4319      	orrs	r1, r3
 8003104:	4b44      	ldr	r3, [pc, #272]	; (8003218 <MX_LWIP_Init+0x240>)
 8003106:	789b      	ldrb	r3, [r3, #2]
 8003108:	021b      	lsls	r3, r3, #8
 800310a:	430b      	orrs	r3, r1
 800310c:	4942      	ldr	r1, [pc, #264]	; (8003218 <MX_LWIP_Init+0x240>)
 800310e:	78c9      	ldrb	r1, [r1, #3]
 8003110:	430b      	orrs	r3, r1
 8003112:	0a1b      	lsrs	r3, r3, #8
 8003114:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003118:	431a      	orrs	r2, r3
 800311a:	4b3f      	ldr	r3, [pc, #252]	; (8003218 <MX_LWIP_Init+0x240>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	0619      	lsls	r1, r3, #24
 8003120:	4b3d      	ldr	r3, [pc, #244]	; (8003218 <MX_LWIP_Init+0x240>)
 8003122:	785b      	ldrb	r3, [r3, #1]
 8003124:	041b      	lsls	r3, r3, #16
 8003126:	4319      	orrs	r1, r3
 8003128:	4b3b      	ldr	r3, [pc, #236]	; (8003218 <MX_LWIP_Init+0x240>)
 800312a:	789b      	ldrb	r3, [r3, #2]
 800312c:	021b      	lsls	r3, r3, #8
 800312e:	430b      	orrs	r3, r1
 8003130:	4939      	ldr	r1, [pc, #228]	; (8003218 <MX_LWIP_Init+0x240>)
 8003132:	78c9      	ldrb	r1, [r1, #3]
 8003134:	430b      	orrs	r3, r1
 8003136:	0e1b      	lsrs	r3, r3, #24
 8003138:	4313      	orrs	r3, r2
 800313a:	4a3a      	ldr	r2, [pc, #232]	; (8003224 <MX_LWIP_Init+0x24c>)
 800313c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800313e:	4b37      	ldr	r3, [pc, #220]	; (800321c <MX_LWIP_Init+0x244>)
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	061a      	lsls	r2, r3, #24
 8003144:	4b35      	ldr	r3, [pc, #212]	; (800321c <MX_LWIP_Init+0x244>)
 8003146:	785b      	ldrb	r3, [r3, #1]
 8003148:	041b      	lsls	r3, r3, #16
 800314a:	431a      	orrs	r2, r3
 800314c:	4b33      	ldr	r3, [pc, #204]	; (800321c <MX_LWIP_Init+0x244>)
 800314e:	789b      	ldrb	r3, [r3, #2]
 8003150:	021b      	lsls	r3, r3, #8
 8003152:	4313      	orrs	r3, r2
 8003154:	4a31      	ldr	r2, [pc, #196]	; (800321c <MX_LWIP_Init+0x244>)
 8003156:	78d2      	ldrb	r2, [r2, #3]
 8003158:	4313      	orrs	r3, r2
 800315a:	061a      	lsls	r2, r3, #24
 800315c:	4b2f      	ldr	r3, [pc, #188]	; (800321c <MX_LWIP_Init+0x244>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	0619      	lsls	r1, r3, #24
 8003162:	4b2e      	ldr	r3, [pc, #184]	; (800321c <MX_LWIP_Init+0x244>)
 8003164:	785b      	ldrb	r3, [r3, #1]
 8003166:	041b      	lsls	r3, r3, #16
 8003168:	4319      	orrs	r1, r3
 800316a:	4b2c      	ldr	r3, [pc, #176]	; (800321c <MX_LWIP_Init+0x244>)
 800316c:	789b      	ldrb	r3, [r3, #2]
 800316e:	021b      	lsls	r3, r3, #8
 8003170:	430b      	orrs	r3, r1
 8003172:	492a      	ldr	r1, [pc, #168]	; (800321c <MX_LWIP_Init+0x244>)
 8003174:	78c9      	ldrb	r1, [r1, #3]
 8003176:	430b      	orrs	r3, r1
 8003178:	021b      	lsls	r3, r3, #8
 800317a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800317e:	431a      	orrs	r2, r3
 8003180:	4b26      	ldr	r3, [pc, #152]	; (800321c <MX_LWIP_Init+0x244>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	0619      	lsls	r1, r3, #24
 8003186:	4b25      	ldr	r3, [pc, #148]	; (800321c <MX_LWIP_Init+0x244>)
 8003188:	785b      	ldrb	r3, [r3, #1]
 800318a:	041b      	lsls	r3, r3, #16
 800318c:	4319      	orrs	r1, r3
 800318e:	4b23      	ldr	r3, [pc, #140]	; (800321c <MX_LWIP_Init+0x244>)
 8003190:	789b      	ldrb	r3, [r3, #2]
 8003192:	021b      	lsls	r3, r3, #8
 8003194:	430b      	orrs	r3, r1
 8003196:	4921      	ldr	r1, [pc, #132]	; (800321c <MX_LWIP_Init+0x244>)
 8003198:	78c9      	ldrb	r1, [r1, #3]
 800319a:	430b      	orrs	r3, r1
 800319c:	0a1b      	lsrs	r3, r3, #8
 800319e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80031a2:	431a      	orrs	r2, r3
 80031a4:	4b1d      	ldr	r3, [pc, #116]	; (800321c <MX_LWIP_Init+0x244>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	0619      	lsls	r1, r3, #24
 80031aa:	4b1c      	ldr	r3, [pc, #112]	; (800321c <MX_LWIP_Init+0x244>)
 80031ac:	785b      	ldrb	r3, [r3, #1]
 80031ae:	041b      	lsls	r3, r3, #16
 80031b0:	4319      	orrs	r1, r3
 80031b2:	4b1a      	ldr	r3, [pc, #104]	; (800321c <MX_LWIP_Init+0x244>)
 80031b4:	789b      	ldrb	r3, [r3, #2]
 80031b6:	021b      	lsls	r3, r3, #8
 80031b8:	430b      	orrs	r3, r1
 80031ba:	4918      	ldr	r1, [pc, #96]	; (800321c <MX_LWIP_Init+0x244>)
 80031bc:	78c9      	ldrb	r1, [r1, #3]
 80031be:	430b      	orrs	r3, r1
 80031c0:	0e1b      	lsrs	r3, r3, #24
 80031c2:	4313      	orrs	r3, r2
 80031c4:	4a18      	ldr	r2, [pc, #96]	; (8003228 <MX_LWIP_Init+0x250>)
 80031c6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80031c8:	4b18      	ldr	r3, [pc, #96]	; (800322c <MX_LWIP_Init+0x254>)
 80031ca:	9302      	str	r3, [sp, #8]
 80031cc:	4b18      	ldr	r3, [pc, #96]	; (8003230 <MX_LWIP_Init+0x258>)
 80031ce:	9301      	str	r3, [sp, #4]
 80031d0:	2300      	movs	r3, #0
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	4b14      	ldr	r3, [pc, #80]	; (8003228 <MX_LWIP_Init+0x250>)
 80031d6:	4a13      	ldr	r2, [pc, #76]	; (8003224 <MX_LWIP_Init+0x24c>)
 80031d8:	4911      	ldr	r1, [pc, #68]	; (8003220 <MX_LWIP_Init+0x248>)
 80031da:	4816      	ldr	r0, [pc, #88]	; (8003234 <MX_LWIP_Init+0x25c>)
 80031dc:	f002 fe2c 	bl	8005e38 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80031e0:	4814      	ldr	r0, [pc, #80]	; (8003234 <MX_LWIP_Init+0x25c>)
 80031e2:	f002 ffdb 	bl	800619c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80031e6:	4b13      	ldr	r3, [pc, #76]	; (8003234 <MX_LWIP_Init+0x25c>)
 80031e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80031ec:	089b      	lsrs	r3, r3, #2
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80031f8:	480e      	ldr	r0, [pc, #56]	; (8003234 <MX_LWIP_Init+0x25c>)
 80031fa:	f002 ffdf 	bl	80061bc <netif_set_up>
 80031fe:	e002      	b.n	8003206 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003200:	480c      	ldr	r0, [pc, #48]	; (8003234 <MX_LWIP_Init+0x25c>)
 8003202:	f003 f847 	bl	8006294 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003206:	490c      	ldr	r1, [pc, #48]	; (8003238 <MX_LWIP_Init+0x260>)
 8003208:	480a      	ldr	r0, [pc, #40]	; (8003234 <MX_LWIP_Init+0x25c>)
 800320a:	f003 f875 	bl	80062f8 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800320e:	bf00      	nop
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	20000714 	.word	0x20000714
 8003218:	20000710 	.word	0x20000710
 800321c:	200006d4 	.word	0x200006d4
 8003220:	2000070c 	.word	0x2000070c
 8003224:	20000718 	.word	0x20000718
 8003228:	2000071c 	.word	0x2000071c
 800322c:	0800fc3d 	.word	0x0800fc3d
 8003230:	080037c9 	.word	0x080037c9
 8003234:	200006d8 	.word	0x200006d8
 8003238:	08003835 	.word	0x08003835

0800323c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08e      	sub	sp, #56	; 0x38
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	605a      	str	r2, [r3, #4]
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	60da      	str	r2, [r3, #12]
 8003252:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a46      	ldr	r2, [pc, #280]	; (8003374 <HAL_ETH_MspInit+0x138>)
 800325a:	4293      	cmp	r3, r2
 800325c:	f040 8085 	bne.w	800336a <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003260:	2300      	movs	r3, #0
 8003262:	623b      	str	r3, [r7, #32]
 8003264:	4b44      	ldr	r3, [pc, #272]	; (8003378 <HAL_ETH_MspInit+0x13c>)
 8003266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003268:	4a43      	ldr	r2, [pc, #268]	; (8003378 <HAL_ETH_MspInit+0x13c>)
 800326a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800326e:	6313      	str	r3, [r2, #48]	; 0x30
 8003270:	4b41      	ldr	r3, [pc, #260]	; (8003378 <HAL_ETH_MspInit+0x13c>)
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003278:	623b      	str	r3, [r7, #32]
 800327a:	6a3b      	ldr	r3, [r7, #32]
 800327c:	2300      	movs	r3, #0
 800327e:	61fb      	str	r3, [r7, #28]
 8003280:	4b3d      	ldr	r3, [pc, #244]	; (8003378 <HAL_ETH_MspInit+0x13c>)
 8003282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003284:	4a3c      	ldr	r2, [pc, #240]	; (8003378 <HAL_ETH_MspInit+0x13c>)
 8003286:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800328a:	6313      	str	r3, [r2, #48]	; 0x30
 800328c:	4b3a      	ldr	r3, [pc, #232]	; (8003378 <HAL_ETH_MspInit+0x13c>)
 800328e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003290:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003294:	61fb      	str	r3, [r7, #28]
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	2300      	movs	r3, #0
 800329a:	61bb      	str	r3, [r7, #24]
 800329c:	4b36      	ldr	r3, [pc, #216]	; (8003378 <HAL_ETH_MspInit+0x13c>)
 800329e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a0:	4a35      	ldr	r2, [pc, #212]	; (8003378 <HAL_ETH_MspInit+0x13c>)
 80032a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80032a6:	6313      	str	r3, [r2, #48]	; 0x30
 80032a8:	4b33      	ldr	r3, [pc, #204]	; (8003378 <HAL_ETH_MspInit+0x13c>)
 80032aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032b0:	61bb      	str	r3, [r7, #24]
 80032b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	4b2f      	ldr	r3, [pc, #188]	; (8003378 <HAL_ETH_MspInit+0x13c>)
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	4a2e      	ldr	r2, [pc, #184]	; (8003378 <HAL_ETH_MspInit+0x13c>)
 80032be:	f043 0304 	orr.w	r3, r3, #4
 80032c2:	6313      	str	r3, [r2, #48]	; 0x30
 80032c4:	4b2c      	ldr	r3, [pc, #176]	; (8003378 <HAL_ETH_MspInit+0x13c>)
 80032c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032d0:	2300      	movs	r3, #0
 80032d2:	613b      	str	r3, [r7, #16]
 80032d4:	4b28      	ldr	r3, [pc, #160]	; (8003378 <HAL_ETH_MspInit+0x13c>)
 80032d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d8:	4a27      	ldr	r2, [pc, #156]	; (8003378 <HAL_ETH_MspInit+0x13c>)
 80032da:	f043 0301 	orr.w	r3, r3, #1
 80032de:	6313      	str	r3, [r2, #48]	; 0x30
 80032e0:	4b25      	ldr	r3, [pc, #148]	; (8003378 <HAL_ETH_MspInit+0x13c>)
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ec:	2300      	movs	r3, #0
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	4b21      	ldr	r3, [pc, #132]	; (8003378 <HAL_ETH_MspInit+0x13c>)
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	4a20      	ldr	r2, [pc, #128]	; (8003378 <HAL_ETH_MspInit+0x13c>)
 80032f6:	f043 0302 	orr.w	r3, r3, #2
 80032fa:	6313      	str	r3, [r2, #48]	; 0x30
 80032fc:	4b1e      	ldr	r3, [pc, #120]	; (8003378 <HAL_ETH_MspInit+0x13c>)
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003308:	2332      	movs	r3, #50	; 0x32
 800330a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330c:	2302      	movs	r3, #2
 800330e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003310:	2300      	movs	r3, #0
 8003312:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003314:	2303      	movs	r3, #3
 8003316:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003318:	230b      	movs	r3, #11
 800331a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800331c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003320:	4619      	mov	r1, r3
 8003322:	4816      	ldr	r0, [pc, #88]	; (800337c <HAL_ETH_MspInit+0x140>)
 8003324:	f7ff f870 	bl	8002408 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003328:	2386      	movs	r3, #134	; 0x86
 800332a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332c:	2302      	movs	r3, #2
 800332e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003330:	2300      	movs	r3, #0
 8003332:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003334:	2303      	movs	r3, #3
 8003336:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003338:	230b      	movs	r3, #11
 800333a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800333c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003340:	4619      	mov	r1, r3
 8003342:	480f      	ldr	r0, [pc, #60]	; (8003380 <HAL_ETH_MspInit+0x144>)
 8003344:	f7ff f860 	bl	8002408 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8003348:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334e:	2302      	movs	r3, #2
 8003350:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003352:	2300      	movs	r3, #0
 8003354:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003356:	2303      	movs	r3, #3
 8003358:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800335a:	230b      	movs	r3, #11
 800335c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800335e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003362:	4619      	mov	r1, r3
 8003364:	4807      	ldr	r0, [pc, #28]	; (8003384 <HAL_ETH_MspInit+0x148>)
 8003366:	f7ff f84f 	bl	8002408 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800336a:	bf00      	nop
 800336c:	3738      	adds	r7, #56	; 0x38
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	40028000 	.word	0x40028000
 8003378:	40023800 	.word	0x40023800
 800337c:	40020800 	.word	0x40020800
 8003380:	40020000 	.word	0x40020000
 8003384:	40020400 	.word	0x40020400

08003388 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003390:	2300      	movs	r3, #0
 8003392:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003394:	4b4d      	ldr	r3, [pc, #308]	; (80034cc <low_level_init+0x144>)
 8003396:	4a4e      	ldr	r2, [pc, #312]	; (80034d0 <low_level_init+0x148>)
 8003398:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800339a:	4b4c      	ldr	r3, [pc, #304]	; (80034cc <low_level_init+0x144>)
 800339c:	2201      	movs	r2, #1
 800339e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80033a0:	4b4a      	ldr	r3, [pc, #296]	; (80034cc <low_level_init+0x144>)
 80033a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033a6:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80033a8:	4b48      	ldr	r3, [pc, #288]	; (80034cc <low_level_init+0x144>)
 80033aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033ae:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80033b0:	4b46      	ldr	r3, [pc, #280]	; (80034cc <low_level_init+0x144>)
 80033b2:	2201      	movs	r2, #1
 80033b4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80033b6:	2300      	movs	r3, #0
 80033b8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80033ba:	2380      	movs	r3, #128	; 0x80
 80033bc:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80033be:	23e1      	movs	r3, #225	; 0xe1
 80033c0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80033c2:	2300      	movs	r3, #0
 80033c4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80033c6:	2300      	movs	r3, #0
 80033c8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80033ca:	2300      	movs	r3, #0
 80033cc:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80033ce:	4a3f      	ldr	r2, [pc, #252]	; (80034cc <low_level_init+0x144>)
 80033d0:	f107 0308 	add.w	r3, r7, #8
 80033d4:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80033d6:	4b3d      	ldr	r3, [pc, #244]	; (80034cc <low_level_init+0x144>)
 80033d8:	2200      	movs	r2, #0
 80033da:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80033dc:	4b3b      	ldr	r3, [pc, #236]	; (80034cc <low_level_init+0x144>)
 80033de:	2200      	movs	r2, #0
 80033e0:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80033e2:	4b3a      	ldr	r3, [pc, #232]	; (80034cc <low_level_init+0x144>)
 80033e4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80033e8:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80033ea:	4838      	ldr	r0, [pc, #224]	; (80034cc <low_level_init+0x144>)
 80033ec:	f7fd fee6 	bl	80011bc <HAL_ETH_Init>
 80033f0:	4603      	mov	r3, r0
 80033f2:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 80033f4:	7dfb      	ldrb	r3, [r7, #23]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d108      	bne.n	800340c <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003400:	f043 0304 	orr.w	r3, r3, #4
 8003404:	b2da      	uxtb	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800340c:	2304      	movs	r3, #4
 800340e:	4a31      	ldr	r2, [pc, #196]	; (80034d4 <low_level_init+0x14c>)
 8003410:	4931      	ldr	r1, [pc, #196]	; (80034d8 <low_level_init+0x150>)
 8003412:	482e      	ldr	r0, [pc, #184]	; (80034cc <low_level_init+0x144>)
 8003414:	f7fe f86e 	bl	80014f4 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003418:	2304      	movs	r3, #4
 800341a:	4a30      	ldr	r2, [pc, #192]	; (80034dc <low_level_init+0x154>)
 800341c:	4930      	ldr	r1, [pc, #192]	; (80034e0 <low_level_init+0x158>)
 800341e:	482b      	ldr	r0, [pc, #172]	; (80034cc <low_level_init+0x144>)
 8003420:	f7fe f8d1 	bl	80015c6 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2206      	movs	r2, #6
 8003428:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800342c:	4b27      	ldr	r3, [pc, #156]	; (80034cc <low_level_init+0x144>)
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	781a      	ldrb	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003438:	4b24      	ldr	r3, [pc, #144]	; (80034cc <low_level_init+0x144>)
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	785a      	ldrb	r2, [r3, #1]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003444:	4b21      	ldr	r3, [pc, #132]	; (80034cc <low_level_init+0x144>)
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	789a      	ldrb	r2, [r3, #2]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003450:	4b1e      	ldr	r3, [pc, #120]	; (80034cc <low_level_init+0x144>)
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	78da      	ldrb	r2, [r3, #3]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800345c:	4b1b      	ldr	r3, [pc, #108]	; (80034cc <low_level_init+0x144>)
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	791a      	ldrb	r2, [r3, #4]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003468:	4b18      	ldr	r3, [pc, #96]	; (80034cc <low_level_init+0x144>)
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	795a      	ldrb	r2, [r3, #5]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800347a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003482:	f043 030a 	orr.w	r3, r3, #10
 8003486:	b2da      	uxtb	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800348e:	480f      	ldr	r0, [pc, #60]	; (80034cc <low_level_init+0x144>)
 8003490:	f7fe fb42 	bl	8001b18 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8003494:	f107 0310 	add.w	r3, r7, #16
 8003498:	461a      	mov	r2, r3
 800349a:	211d      	movs	r1, #29
 800349c:	480b      	ldr	r0, [pc, #44]	; (80034cc <low_level_init+0x144>)
 800349e:	f7fe fa6d 	bl	800197c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	f043 030b 	orr.w	r3, r3, #11
 80034a8:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	461a      	mov	r2, r3
 80034ae:	211d      	movs	r1, #29
 80034b0:	4806      	ldr	r0, [pc, #24]	; (80034cc <low_level_init+0x144>)
 80034b2:	f7fe facb 	bl	8001a4c <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80034b6:	f107 0310 	add.w	r3, r7, #16
 80034ba:	461a      	mov	r2, r3
 80034bc:	211d      	movs	r1, #29
 80034be:	4803      	ldr	r0, [pc, #12]	; (80034cc <low_level_init+0x144>)
 80034c0:	f7fe fa5c 	bl	800197c <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80034c4:	bf00      	nop
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	20001ff0 	.word	0x20001ff0
 80034d0:	40028000 	.word	0x40028000
 80034d4:	20002038 	.word	0x20002038
 80034d8:	20000720 	.word	0x20000720
 80034dc:	200007a0 	.word	0x200007a0
 80034e0:	20001f70 	.word	0x20001f70

080034e4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08a      	sub	sp, #40	; 0x28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80034ee:	4b4b      	ldr	r3, [pc, #300]	; (800361c <low_level_output+0x138>)
 80034f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80034f6:	2300      	movs	r3, #0
 80034f8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80034fa:	2300      	movs	r3, #0
 80034fc:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80034fe:	2300      	movs	r3, #0
 8003500:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003502:	2300      	movs	r3, #0
 8003504:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003506:	4b45      	ldr	r3, [pc, #276]	; (800361c <low_level_output+0x138>)
 8003508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800350c:	2300      	movs	r3, #0
 800350e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	623b      	str	r3, [r7, #32]
 8003514:	e05a      	b.n	80035cc <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	da03      	bge.n	8003526 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800351e:	23f8      	movs	r3, #248	; 0xf8
 8003520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003524:	e05c      	b.n	80035e0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	895b      	ldrh	r3, [r3, #10]
 800352a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800352c:	2300      	movs	r3, #0
 800352e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003530:	e02f      	b.n	8003592 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003532:	69fa      	ldr	r2, [r7, #28]
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	18d0      	adds	r0, r2, r3
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	18d1      	adds	r1, r2, r3
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003546:	3304      	adds	r3, #4
 8003548:	461a      	mov	r2, r3
 800354a:	f00c fc83 	bl	800fe54 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	da03      	bge.n	8003564 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800355c:	23f8      	movs	r3, #248	; 0xf8
 800355e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8003562:	e03d      	b.n	80035e0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4413      	add	r3, r2
 8003570:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003574:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003580:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800358c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800358e:	2300      	movs	r3, #0
 8003590:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	4413      	add	r3, r2
 8003598:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800359c:	4293      	cmp	r3, r2
 800359e:	d8c8      	bhi.n	8003532 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80035a0:	69fa      	ldr	r2, [r7, #28]
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	18d0      	adds	r0, r2, r3
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	4413      	add	r3, r2
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	4619      	mov	r1, r3
 80035b2:	f00c fc4f 	bl	800fe54 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4413      	add	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4413      	add	r3, r2
 80035c4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	623b      	str	r3, [r7, #32]
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1a1      	bne.n	8003516 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80035d2:	6979      	ldr	r1, [r7, #20]
 80035d4:	4811      	ldr	r0, [pc, #68]	; (800361c <low_level_output+0x138>)
 80035d6:	f7fe f863 	bl	80016a0 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80035e0:	4b0e      	ldr	r3, [pc, #56]	; (800361c <low_level_output+0x138>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035e8:	3314      	adds	r3, #20
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0320 	and.w	r3, r3, #32
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00d      	beq.n	8003610 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80035f4:	4b09      	ldr	r3, [pc, #36]	; (800361c <low_level_output+0x138>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035fc:	3314      	adds	r3, #20
 80035fe:	2220      	movs	r2, #32
 8003600:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003602:	4b06      	ldr	r3, [pc, #24]	; (800361c <low_level_output+0x138>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800360a:	3304      	adds	r3, #4
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003610:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003614:	4618      	mov	r0, r3
 8003616:	3728      	adds	r7, #40	; 0x28
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	20001ff0 	.word	0x20001ff0

08003620 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b08c      	sub	sp, #48	; 0x30
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003628:	2300      	movs	r3, #0
 800362a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800362c:	2300      	movs	r3, #0
 800362e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003630:	2300      	movs	r3, #0
 8003632:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003634:	2300      	movs	r3, #0
 8003636:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003638:	2300      	movs	r3, #0
 800363a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800363c:	2300      	movs	r3, #0
 800363e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003640:	2300      	movs	r3, #0
 8003642:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8003644:	484f      	ldr	r0, [pc, #316]	; (8003784 <low_level_input+0x164>)
 8003646:	f7fe f915 	bl	8001874 <HAL_ETH_GetReceivedFrame>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <low_level_input+0x34>

    return NULL;
 8003650:	2300      	movs	r3, #0
 8003652:	e092      	b.n	800377a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003654:	4b4b      	ldr	r3, [pc, #300]	; (8003784 <low_level_input+0x164>)
 8003656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003658:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800365a:	4b4a      	ldr	r3, [pc, #296]	; (8003784 <low_level_input+0x164>)
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8003660:	89fb      	ldrh	r3, [r7, #14]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d007      	beq.n	8003676 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003666:	89fb      	ldrh	r3, [r7, #14]
 8003668:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800366c:	4619      	mov	r1, r3
 800366e:	2000      	movs	r0, #0
 8003670:	f002 fede 	bl	8006430 <pbuf_alloc>
 8003674:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8003676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003678:	2b00      	cmp	r3, #0
 800367a:	d04b      	beq.n	8003714 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800367c:	4b41      	ldr	r3, [pc, #260]	; (8003784 <low_level_input+0x164>)
 800367e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003680:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003682:	2300      	movs	r3, #0
 8003684:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003688:	62bb      	str	r3, [r7, #40]	; 0x28
 800368a:	e040      	b.n	800370e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800368c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368e:	895b      	ldrh	r3, [r3, #10]
 8003690:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003692:	2300      	movs	r3, #0
 8003694:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003696:	e021      	b.n	80036dc <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	18d0      	adds	r0, r2, r3
 80036a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	18d1      	adds	r1, r2, r3
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80036ac:	3304      	adds	r3, #4
 80036ae:	461a      	mov	r2, r3
 80036b0:	f00c fbd0 	bl	800fe54 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80036c0:	69fa      	ldr	r2, [r7, #28]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	4413      	add	r3, r2
 80036c6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80036ca:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80036d6:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80036d8:	2300      	movs	r3, #0
 80036da:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	4413      	add	r3, r2
 80036e2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d8d6      	bhi.n	8003698 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80036ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	18d0      	adds	r0, r2, r3
 80036f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	4413      	add	r3, r2
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4619      	mov	r1, r3
 80036fc:	f00c fbaa 	bl	800fe54 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003700:	69fa      	ldr	r2, [r7, #28]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	4413      	add	r3, r2
 8003706:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	62bb      	str	r3, [r7, #40]	; 0x28
 800370e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1bb      	bne.n	800368c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003714:	4b1b      	ldr	r3, [pc, #108]	; (8003784 <low_level_input+0x164>)
 8003716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003718:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800371a:	2300      	movs	r3, #0
 800371c:	613b      	str	r3, [r7, #16]
 800371e:	e00b      	b.n	8003738 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	3301      	adds	r3, #1
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	4b12      	ldr	r3, [pc, #72]	; (8003784 <low_level_input+0x164>)
 800373a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	429a      	cmp	r2, r3
 8003740:	d3ee      	bcc.n	8003720 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8003742:	4b10      	ldr	r3, [pc, #64]	; (8003784 <low_level_input+0x164>)
 8003744:	2200      	movs	r2, #0
 8003746:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003748:	4b0e      	ldr	r3, [pc, #56]	; (8003784 <low_level_input+0x164>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003750:	3314      	adds	r3, #20
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00d      	beq.n	8003778 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800375c:	4b09      	ldr	r3, [pc, #36]	; (8003784 <low_level_input+0x164>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003764:	3314      	adds	r3, #20
 8003766:	2280      	movs	r2, #128	; 0x80
 8003768:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800376a:	4b06      	ldr	r3, [pc, #24]	; (8003784 <low_level_input+0x164>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003772:	3308      	adds	r3, #8
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
  }
  return p;
 8003778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800377a:	4618      	mov	r0, r3
 800377c:	3730      	adds	r7, #48	; 0x30
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	20001ff0 	.word	0x20001ff0

08003788 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7ff ff45 	bl	8003620 <low_level_input>
 8003796:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d010      	beq.n	80037c0 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	4798      	blx	r3
 80037a8:	4603      	mov	r3, r0
 80037aa:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 80037ac:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d006      	beq.n	80037c2 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f003 f91f 	bl	80069f8 <pbuf_free>
    p = NULL;
 80037ba:	2300      	movs	r3, #0
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	e000      	b.n	80037c2 <ethernetif_input+0x3a>
  if (p == NULL) return;
 80037c0:	bf00      	nop
  }
}
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d106      	bne.n	80037e4 <ethernetif_init+0x1c>
 80037d6:	4b0e      	ldr	r3, [pc, #56]	; (8003810 <ethernetif_init+0x48>)
 80037d8:	f44f 7202 	mov.w	r2, #520	; 0x208
 80037dc:	490d      	ldr	r1, [pc, #52]	; (8003814 <ethernetif_init+0x4c>)
 80037de:	480e      	ldr	r0, [pc, #56]	; (8003818 <ethernetif_init+0x50>)
 80037e0:	f00c fb68 	bl	800feb4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2273      	movs	r2, #115	; 0x73
 80037e8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2274      	movs	r2, #116	; 0x74
 80037f0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a09      	ldr	r2, [pc, #36]	; (800381c <ethernetif_init+0x54>)
 80037f8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a08      	ldr	r2, [pc, #32]	; (8003820 <ethernetif_init+0x58>)
 80037fe:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7ff fdc1 	bl	8003388 <low_level_init>

  return ERR_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	08011510 	.word	0x08011510
 8003814:	0801152c 	.word	0x0801152c
 8003818:	0801153c 	.word	0x0801153c
 800381c:	0800e101 	.word	0x0800e101
 8003820:	080034e5 	.word	0x080034e5

08003824 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003828:	f7fd fbb2 	bl	8000f90 <HAL_GetTick>
 800382c:	4603      	mov	r3, r0
}
 800382e:	4618      	mov	r0, r3
 8003830:	bd80      	pop	{r7, pc}
	...

08003834 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800383c:	2300      	movs	r3, #0
 800383e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8003840:	2300      	movs	r3, #0
 8003842:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800384a:	089b      	lsrs	r3, r3, #2
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d05d      	beq.n	8003912 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003856:	4b34      	ldr	r3, [pc, #208]	; (8003928 <ethernetif_update_config+0xf4>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d03f      	beq.n	80038de <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800385e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003862:	2100      	movs	r1, #0
 8003864:	4830      	ldr	r0, [pc, #192]	; (8003928 <ethernetif_update_config+0xf4>)
 8003866:	f7fe f8f1 	bl	8001a4c <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800386a:	f7fd fb91 	bl	8000f90 <HAL_GetTick>
 800386e:	4603      	mov	r3, r0
 8003870:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003872:	f107 0308 	add.w	r3, r7, #8
 8003876:	461a      	mov	r2, r3
 8003878:	2101      	movs	r1, #1
 800387a:	482b      	ldr	r0, [pc, #172]	; (8003928 <ethernetif_update_config+0xf4>)
 800387c:	f7fe f87e 	bl	800197c <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003880:	f7fd fb86 	bl	8000f90 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800388e:	d828      	bhi.n	80038e2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f003 0320 	and.w	r3, r3, #32
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0eb      	beq.n	8003872 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800389a:	f107 0308 	add.w	r3, r7, #8
 800389e:	461a      	mov	r2, r3
 80038a0:	2110      	movs	r1, #16
 80038a2:	4821      	ldr	r0, [pc, #132]	; (8003928 <ethernetif_update_config+0xf4>)
 80038a4:	f7fe f86a 	bl	800197c <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d004      	beq.n	80038bc <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80038b2:	4b1d      	ldr	r3, [pc, #116]	; (8003928 <ethernetif_update_config+0xf4>)
 80038b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038b8:	60da      	str	r2, [r3, #12]
 80038ba:	e002      	b.n	80038c2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80038bc:	4b1a      	ldr	r3, [pc, #104]	; (8003928 <ethernetif_update_config+0xf4>)
 80038be:	2200      	movs	r2, #0
 80038c0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80038cc:	4b16      	ldr	r3, [pc, #88]	; (8003928 <ethernetif_update_config+0xf4>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	609a      	str	r2, [r3, #8]
 80038d2:	e016      	b.n	8003902 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80038d4:	4b14      	ldr	r3, [pc, #80]	; (8003928 <ethernetif_update_config+0xf4>)
 80038d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038da:	609a      	str	r2, [r3, #8]
 80038dc:	e011      	b.n	8003902 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80038de:	bf00      	nop
 80038e0:	e000      	b.n	80038e4 <ethernetif_update_config+0xb0>
          goto error;
 80038e2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80038e4:	4b10      	ldr	r3, [pc, #64]	; (8003928 <ethernetif_update_config+0xf4>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	08db      	lsrs	r3, r3, #3
 80038ea:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80038ec:	4b0e      	ldr	r3, [pc, #56]	; (8003928 <ethernetif_update_config+0xf4>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	085b      	lsrs	r3, r3, #1
 80038f2:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80038f4:	4313      	orrs	r3, r2
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	461a      	mov	r2, r3
 80038fa:	2100      	movs	r1, #0
 80038fc:	480a      	ldr	r0, [pc, #40]	; (8003928 <ethernetif_update_config+0xf4>)
 80038fe:	f7fe f8a5 	bl	8001a4c <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8003902:	2100      	movs	r1, #0
 8003904:	4808      	ldr	r0, [pc, #32]	; (8003928 <ethernetif_update_config+0xf4>)
 8003906:	f7fe f965 	bl	8001bd4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800390a:	4807      	ldr	r0, [pc, #28]	; (8003928 <ethernetif_update_config+0xf4>)
 800390c:	f7fe f904 	bl	8001b18 <HAL_ETH_Start>
 8003910:	e002      	b.n	8003918 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8003912:	4805      	ldr	r0, [pc, #20]	; (8003928 <ethernetif_update_config+0xf4>)
 8003914:	f7fe f92f 	bl	8001b76 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f807 	bl	800392c <ethernetif_notify_conn_changed>
}
 800391e:	bf00      	nop
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	20001ff0 	.word	0x20001ff0

0800392c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <fs_open+0x16>
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d102      	bne.n	800395c <fs_open+0x1c>
    return ERR_ARG;
 8003956:	f06f 030f 	mvn.w	r3, #15
 800395a:	e028      	b.n	80039ae <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800395c:	4b16      	ldr	r3, [pc, #88]	; (80039b8 <fs_open+0x78>)
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	e020      	b.n	80039a4 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	4619      	mov	r1, r3
 8003968:	6838      	ldr	r0, [r7, #0]
 800396a:	f7fc fc31 	bl	80001d0 <strcmp>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d114      	bne.n	800399e <fs_open+0x5e>
      file->data = (const char *)f->data;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	7c1a      	ldrb	r2, [r3, #16]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	e007      	b.n	80039ae <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1db      	bne.n	8003962 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 80039aa:	f06f 0305 	mvn.w	r3, #5
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	080210fc 	.word	0x080210fc

080039bc <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	1ad3      	subs	r3, r2, r3
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b082      	sub	sp, #8
 80039f2:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 80039f4:	20e0      	movs	r0, #224	; 0xe0
 80039f6:	f002 f833 	bl	8005a60 <mem_malloc>
 80039fa:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d004      	beq.n	8003a0c <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8003a02:	22e0      	movs	r2, #224	; 0xe0
 8003a04:	2100      	movs	r1, #0
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f00c fa4c 	bl	800fea4 <memset>
  }
  return ret;
 8003a0c:	687b      	ldr	r3, [r7, #4]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b082      	sub	sp, #8
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f001 feb5 	bl	8005794 <mem_free>
  }
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8003a3a:	22b4      	movs	r2, #180	; 0xb4
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f00c fa30 	bl	800fea4 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8003a44:	bf00      	nop
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8003a52:	20b4      	movs	r0, #180	; 0xb4
 8003a54:	f002 f804 	bl	8005a60 <mem_malloc>
 8003a58:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d002      	beq.n	8003a66 <http_state_alloc+0x1a>
    http_state_init(ret);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7ff ffe6 	bl	8003a32 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8003a66:	687b      	ldr	r3, [r7, #4]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d007      	beq.n	8003a90 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff ff99 	bl	80039bc <fs_close>
    hs->handle = NULL;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d007      	beq.n	8003aa8 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff ffba 	bl	8003a16 <http_ssi_state_free>
    hs->ssi = NULL;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d007      	beq.n	8003ac0 <http_state_eof+0x50>
    pbuf_free(hs->req);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f002 ff9f 	bl	80069f8 <pbuf_free>
    hs->req = NULL;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8003ac0:	bf00      	nop
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d005      	beq.n	8003ae2 <http_state_free+0x1a>
    http_state_eof(hs);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7ff ffca 	bl	8003a70 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f001 fe59 	bl	8005794 <mem_free>
  }
}
 8003ae2:	bf00      	nop
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
	...

08003aec <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d106      	bne.n	8003b0e <http_write+0x22>
 8003b00:	4b2c      	ldr	r3, [pc, #176]	; (8003bb4 <http_write+0xc8>)
 8003b02:	f240 2219 	movw	r2, #537	; 0x219
 8003b06:	492c      	ldr	r1, [pc, #176]	; (8003bb8 <http_write+0xcc>)
 8003b08:	482c      	ldr	r0, [pc, #176]	; (8003bbc <http_write+0xd0>)
 8003b0a:	f00c f9d3 	bl	800feb4 <iprintf>
  len = *length;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8003b14:	8afb      	ldrh	r3, [r7, #22]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <http_write+0x32>
    return ERR_OK;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	e045      	b.n	8003baa <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003b24:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8003b26:	8aba      	ldrh	r2, [r7, #20]
 8003b28:	8afb      	ldrh	r3, [r7, #22]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d201      	bcs.n	8003b32 <http_write+0x46>
    len = max_len;
 8003b2e:	8abb      	ldrh	r3, [r7, #20]
 8003b30:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8003b3a:	8afa      	ldrh	r2, [r7, #22]
 8003b3c:	8abb      	ldrh	r3, [r7, #20]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d901      	bls.n	8003b46 <http_write+0x5a>
    len = max_len;
 8003b42:	8abb      	ldrh	r3, [r7, #20]
 8003b44:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8003b46:	78fb      	ldrb	r3, [r7, #3]
 8003b48:	8afa      	ldrh	r2, [r7, #22]
 8003b4a:	68b9      	ldr	r1, [r7, #8]
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f007 fe27 	bl	800b7a0 <tcp_write>
 8003b52:	4603      	mov	r3, r0
 8003b54:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8003b56:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b5e:	d10f      	bne.n	8003b80 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d004      	beq.n	8003b74 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	d902      	bls.n	8003b7a <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8003b74:	2301      	movs	r3, #1
 8003b76:	82fb      	strh	r3, [r7, #22]
 8003b78:	e002      	b.n	8003b80 <http_write+0x94>
      } else {
        len /= 2;
 8003b7a:	8afb      	ldrh	r3, [r7, #22]
 8003b7c:	085b      	lsrs	r3, r3, #1
 8003b7e:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8003b80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003b84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b88:	d102      	bne.n	8003b90 <http_write+0xa4>
 8003b8a:	8afb      	ldrh	r3, [r7, #22]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d8da      	bhi.n	8003b46 <http_write+0x5a>

  if (err == ERR_OK) {
 8003b90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d103      	bne.n	8003ba0 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	8afa      	ldrh	r2, [r7, #22]
 8003b9c:	801a      	strh	r2, [r3, #0]
 8003b9e:	e002      	b.n	8003ba6 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8003ba6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	080115e0 	.word	0x080115e0
 8003bb8:	08011618 	.word	0x08011618
 8003bbc:	08011628 	.word	0x08011628

08003bc0 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void *)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00c      	beq.n	8003bee <http_close_or_abort_conn+0x2e>
    if ((hs->post_content_len_left != 0)
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d007      	beq.n	8003bee <http_close_or_abort_conn+0x2e>
#if LWIP_HTTPD_POST_MANUAL_WND
        || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 8003bde:	4b1f      	ldr	r3, [pc, #124]	; (8003c5c <http_close_or_abort_conn+0x9c>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8003be4:	223f      	movs	r2, #63	; 0x3f
 8003be6:	491d      	ldr	r1, [pc, #116]	; (8003c5c <http_close_or_abort_conn+0x9c>)
 8003be8:	68b8      	ldr	r0, [r7, #8]
 8003bea:	f7fc fef3 	bl	80009d4 <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8003bee:	2100      	movs	r1, #0
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f004 fe97 	bl	8008924 <tcp_arg>
  altcp_recv(pcb, NULL);
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f004 fea5 	bl	8008948 <tcp_recv>
  altcp_err(pcb, NULL);
 8003bfe:	2100      	movs	r1, #0
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f004 fee5 	bl	80089d0 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8003c06:	2200      	movs	r2, #0
 8003c08:	2100      	movs	r1, #0
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f004 ff1a 	bl	8008a44 <tcp_poll>
  altcp_sent(pcb, NULL);
 8003c10:	2100      	movs	r1, #0
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f004 feba 	bl	800898c <tcp_sent>
  if (hs != NULL) {
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d002      	beq.n	8003c24 <http_close_or_abort_conn+0x64>
    http_state_free(hs);
 8003c1e:	68b8      	ldr	r0, [r7, #8]
 8003c20:	f7ff ff52 	bl	8003ac8 <http_state_free>
  }

  if (abort_conn) {
 8003c24:	79fb      	ldrb	r3, [r7, #7]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d004      	beq.n	8003c34 <http_close_or_abort_conn+0x74>
    altcp_abort(pcb);
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f003 fdbc 	bl	80077a8 <tcp_abort>
    return ERR_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	e00f      	b.n	8003c54 <http_close_or_abort_conn+0x94>
  }
  err = altcp_close(pcb);
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f003 fccd 	bl	80075d4 <tcp_close>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8003c3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d004      	beq.n	8003c50 <http_close_or_abort_conn+0x90>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8003c46:	2204      	movs	r2, #4
 8003c48:	4905      	ldr	r1, [pc, #20]	; (8003c60 <http_close_or_abort_conn+0xa0>)
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f004 fefa 	bl	8008a44 <tcp_poll>
  }
  return err;
 8003c50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3718      	adds	r7, #24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	200004cc 	.word	0x200004cc
 8003c60:	08004fd3 	.word	0x08004fd3

08003c64 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8003c6e:	2200      	movs	r2, #0
 8003c70:	6839      	ldr	r1, [r7, #0]
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7ff ffa4 	bl	8003bc0 <http_close_or_abort_conn>
 8003c78:	4603      	mov	r3, r0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b082      	sub	sp, #8
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
 8003c8a:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8003c8c:	6839      	ldr	r1, [r7, #0]
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7ff ffe8 	bl	8003c64 <http_close_conn>
  }
}
 8003c94:	bf00      	nop
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <extract_uri_parameters+0x18>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <extract_uri_parameters+0x1c>
    return (0);
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	e04b      	b.n	8003d50 <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	613b      	str	r3, [r7, #16]
 8003cc0:	e03f      	b.n	8003d42 <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	320c      	adds	r2, #12
 8003cc8:	6979      	ldr	r1, [r7, #20]
 8003cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 8003cd2:	2126      	movs	r1, #38	; 0x26
 8003cd4:	6978      	ldr	r0, [r7, #20]
 8003cd6:	f00c f9a8 	bl	801002a <strchr>
 8003cda:	6178      	str	r0, [r7, #20]
    if (pair) {
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d006      	beq.n	8003cf0 <extract_uri_parameters+0x54>
      *pair = '\0';
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	701a      	strb	r2, [r3, #0]
      pair++;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	3301      	adds	r3, #1
 8003cec:	617b      	str	r3, [r7, #20]
 8003cee:	e00c      	b.n	8003d0a <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 8003cf0:	2120      	movs	r1, #32
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f00c f999 	bl	801002a <strchr>
 8003cf8:	6178      	str	r0, [r7, #20]
      if (pair) {
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d002      	beq.n	8003d06 <extract_uri_parameters+0x6a>
        *pair = '\0';
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	2200      	movs	r2, #0
 8003d04:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 8003d06:	2300      	movs	r3, #0
 8003d08:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 8003d0a:	213d      	movs	r1, #61	; 0x3d
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f00c f98c 	bl	801002a <strchr>
 8003d12:	60f8      	str	r0, [r7, #12]
    if (equals) {
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <extract_uri_parameters+0x94>
      *equals = '\0';
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	1c59      	adds	r1, r3, #1
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	321c      	adds	r2, #28
 8003d2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003d2e:	e005      	b.n	8003d3c <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	321c      	adds	r2, #28
 8003d36:	2100      	movs	r1, #0
 8003d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	613b      	str	r3, [r7, #16]
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	2b0f      	cmp	r3, #15
 8003d46:	dc02      	bgt.n	8003d4e <extract_uri_parameters+0xb2>
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1b9      	bne.n	8003cc2 <extract_uri_parameters+0x26>
    }
  }

  return loop;
 8003d4e:	693b      	ldr	r3, [r7, #16]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <get_tag_insert+0x1c>
 8003d66:	4b51      	ldr	r3, [pc, #324]	; (8003eac <get_tag_insert+0x154>)
 8003d68:	f44f 7241 	mov.w	r2, #772	; 0x304
 8003d6c:	4950      	ldr	r1, [pc, #320]	; (8003eb0 <get_tag_insert+0x158>)
 8003d6e:	4851      	ldr	r0, [pc, #324]	; (8003eb4 <get_tag_insert+0x15c>)
 8003d70:	f00c f8a0 	bl	800feb4 <iprintf>
  ssi = hs->ssi;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d78:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d106      	bne.n	8003d8e <get_tag_insert+0x36>
 8003d80:	4b4a      	ldr	r3, [pc, #296]	; (8003eac <get_tag_insert+0x154>)
 8003d82:	f240 3206 	movw	r2, #774	; 0x306
 8003d86:	494c      	ldr	r1, [pc, #304]	; (8003eb8 <get_tag_insert+0x160>)
 8003d88:	484a      	ldr	r0, [pc, #296]	; (8003eb4 <get_tag_insert+0x15c>)
 8003d8a:	f00c f893 	bl	800feb4 <iprintf>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 8003d8e:	4b4b      	ldr	r3, [pc, #300]	; (8003ebc <get_tag_insert+0x164>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d02e      	beq.n	8003df4 <get_tag_insert+0x9c>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 8003d96:	4b4a      	ldr	r3, [pc, #296]	; (8003ec0 <get_tag_insert+0x168>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d02a      	beq.n	8003df4 <get_tag_insert+0x9c>
 8003d9e:	4b49      	ldr	r3, [pc, #292]	; (8003ec4 <get_tag_insert+0x16c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d026      	beq.n	8003df4 <get_tag_insert+0x9c>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8003da6:	2300      	movs	r3, #0
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	e01e      	b.n	8003dea <get_tag_insert+0x92>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	f103 0012 	add.w	r0, r3, #18
 8003db2:	4b43      	ldr	r3, [pc, #268]	; (8003ec0 <get_tag_insert+0x168>)
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4413      	add	r3, r2
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	f7fc fa06 	bl	80001d0 <strcmp>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10c      	bne.n	8003de4 <get_tag_insert+0x8c>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 8003dca:	4b3c      	ldr	r3, [pc, #240]	; (8003ebc <get_tag_insert+0x164>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	f102 011b 	add.w	r1, r2, #27
 8003dd4:	22c0      	movs	r2, #192	; 0xc0
 8003dd6:	6978      	ldr	r0, [r7, #20]
 8003dd8:	4798      	blx	r3
 8003dda:	4603      	mov	r3, r0
 8003ddc:	461a      	mov	r2, r3
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	81da      	strh	r2, [r3, #14]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 8003de2:	e060      	b.n	8003ea6 <get_tag_insert+0x14e>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	3301      	adds	r3, #1
 8003de8:	617b      	str	r3, [r7, #20]
 8003dea:	4b36      	ldr	r3, [pc, #216]	; (8003ec4 <get_tag_insert+0x16c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	dbdb      	blt.n	8003dac <get_tag_insert+0x54>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	3312      	adds	r3, #18
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fc f9f3 	bl	80001e4 <strlen>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2ba6      	cmp	r3, #166	; 0xa6
 8003e02:	d818      	bhi.n	8003e36 <get_tag_insert+0xde>
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	3312      	adds	r3, #18
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7fc f9eb 	bl	80001e4 <strlen>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b09      	cmp	r3, #9
 8003e12:	d810      	bhi.n	8003e36 <get_tag_insert+0xde>
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	3312      	adds	r3, #18
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fc f9e3 	bl	80001e4 <strlen>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2ba6      	cmp	r3, #166	; 0xa6
 8003e22:	d806      	bhi.n	8003e32 <get_tag_insert+0xda>
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	3312      	adds	r3, #18
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7fc f9db 	bl	80001e4 <strlen>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	e002      	b.n	8003e38 <get_tag_insert+0xe0>
 8003e32:	23a7      	movs	r3, #167	; 0xa7
 8003e34:	e000      	b.n	8003e38 <get_tag_insert+0xe0>
 8003e36:	2309      	movs	r3, #9
 8003e38:	60fb      	str	r3, [r7, #12]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	331b      	adds	r3, #27
 8003e3e:	2212      	movs	r2, #18
 8003e40:	4921      	ldr	r1, [pc, #132]	; (8003ec8 <get_tag_insert+0x170>)
 8003e42:	4618      	mov	r0, r3
 8003e44:	f00c f806 	bl	800fe54 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	3312      	adds	r3, #18
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4619      	mov	r1, r3
 8003e56:	f00b fffd 	bl	800fe54 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	3312      	adds	r3, #18
 8003e5e:	3318      	adds	r3, #24
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	4413      	add	r3, r2
 8003e64:	3303      	adds	r3, #3
 8003e66:	2207      	movs	r2, #7
 8003e68:	4918      	ldr	r1, [pc, #96]	; (8003ecc <get_tag_insert+0x174>)
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f00b fff2 	bl	800fe54 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	3319      	adds	r3, #25
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4413      	add	r3, r2
 8003e78:	2200      	movs	r2, #0
 8003e7a:	76da      	strb	r2, [r3, #27]

  len = strlen(ssi->tag_insert);
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	331b      	adds	r3, #27
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7fc f9af 	bl	80001e4 <strlen>
 8003e86:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e8e:	d306      	bcc.n	8003e9e <get_tag_insert+0x146>
 8003e90:	4b06      	ldr	r3, [pc, #24]	; (8003eac <get_tag_insert+0x154>)
 8003e92:	f240 323f 	movw	r2, #831	; 0x33f
 8003e96:	490e      	ldr	r1, [pc, #56]	; (8003ed0 <get_tag_insert+0x178>)
 8003e98:	4806      	ldr	r0, [pc, #24]	; (8003eb4 <get_tag_insert+0x15c>)
 8003e9a:	f00c f80b 	bl	800feb4 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	81da      	strh	r2, [r3, #14]
}
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	080115e0 	.word	0x080115e0
 8003eb0:	08011650 	.word	0x08011650
 8003eb4:	08011628 	.word	0x08011628
 8003eb8:	0801165c 	.word	0x0801165c
 8003ebc:	2000050c 	.word	0x2000050c
 8003ec0:	20000514 	.word	0x20000514
 8003ec4:	20000510 	.word	0x20000510
 8003ec8:	08011668 	.word	0x08011668
 8003ecc:	0801167c 	.word	0x0801167c
 8003ed0:	08011684 	.word	0x08011684

08003ed4 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d105      	bne.n	8003ef2 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8003ee6:	6839      	ldr	r1, [r7, #0]
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff feca 	bl	8003c82 <http_eof>
    return 0;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	e016      	b.n	8003f20 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7ff fd6a 	bl	80039d0 <fs_bytes_left>
 8003efc:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	dc05      	bgt.n	8003f10 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8003f04:	6839      	ldr	r1, [r7, #0]
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7ff febb 	bl	8003c82 <http_eof>
    return 0;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	e007      	b.n	8003f20 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8003f10:	4b05      	ldr	r3, [pc, #20]	; (8003f28 <http_check_eof+0x54>)
 8003f12:	f240 429d 	movw	r2, #1181	; 0x49d
 8003f16:	4905      	ldr	r1, [pc, #20]	; (8003f2c <http_check_eof+0x58>)
 8003f18:	4805      	ldr	r0, [pc, #20]	; (8003f30 <http_check_eof+0x5c>)
 8003f1a:	f00b ffcb 	bl	800feb4 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8003f1e:	2301      	movs	r3, #1
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	080115e0 	.word	0x080115e0
 8003f2c:	08011694 	.word	0x08011694
 8003f30:	08011628 	.word	0x08011628

08003f34 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d803      	bhi.n	8003f56 <http_send_data_nonssi+0x22>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	e001      	b.n	8003f5a <http_send_data_nonssi+0x26>
 8003f56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f5a:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	6999      	ldr	r1, [r3, #24]
 8003f60:	f107 020c 	add.w	r2, r7, #12
 8003f64:	2300      	movs	r3, #0
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7ff fdc0 	bl	8003aec <http_write>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8003f70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10d      	bne.n	8003f94 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	89ba      	ldrh	r2, [r7, #12]
 8003f82:	441a      	add	r2, r3
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	89ba      	ldrh	r2, [r7, #12]
 8003f8e:	1a9a      	subs	r2, r3, r2
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
	...

08003fa0 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d106      	bne.n	8003fcc <http_send_data_ssi+0x2c>
 8003fbe:	4b9d      	ldr	r3, [pc, #628]	; (8004234 <http_send_data_ssi+0x294>)
 8003fc0:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8003fc4:	499c      	ldr	r1, [pc, #624]	; (8004238 <http_send_data_ssi+0x298>)
 8003fc6:	489d      	ldr	r0, [pc, #628]	; (800423c <http_send_data_ssi+0x29c>)
 8003fc8:	f00b ff74 	bl	800feb4 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003fd2:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	f240 826a 	bls.w	80044b6 <http_send_data_ssi+0x516>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	dc06      	bgt.n	8004002 <http_send_data_ssi+0x62>
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	e001      	b.n	8004006 <http_send_data_ssi+0x66>
 8004002:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004006:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	6999      	ldr	r1, [r3, #24]
 800400c:	f107 020e 	add.w	r2, r7, #14
 8004010:	2300      	movs	r3, #0
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7ff fd6a 	bl	8003aec <http_write>
 8004018:	4603      	mov	r3, r0
 800401a:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800401c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10d      	bne.n	8004040 <http_send_data_ssi+0xa0>
      data_to_send = 1;
 8004024:	2301      	movs	r3, #1
 8004026:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	89fa      	ldrh	r2, [r7, #14]
 800402e:	441a      	add	r2, r3
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	89fa      	ldrh	r2, [r7, #14]
 800403a:	1a9a      	subs	r2, r3, r2
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004046:	2b00      	cmp	r3, #0
 8004048:	f040 8235 	bne.w	80044b6 <http_send_data_ssi+0x516>
      return data_to_send;
 800404c:	7dbb      	ldrb	r3, [r7, #22]
 800404e:	e27b      	b.n	8004548 <http_send_data_ssi+0x5a8>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 8004050:	89fb      	ldrh	r3, [r7, #14]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <http_send_data_ssi+0xba>
      return data_to_send;
 8004056:	7dbb      	ldrb	r3, [r7, #22]
 8004058:	e276      	b.n	8004548 <http_send_data_ssi+0x5a8>
    }
    switch (ssi->tag_state) {
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004060:	2b04      	cmp	r3, #4
 8004062:	f200 8227 	bhi.w	80044b4 <http_send_data_ssi+0x514>
 8004066:	a201      	add	r2, pc, #4	; (adr r2, 800406c <http_send_data_ssi+0xcc>)
 8004068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406c:	08004081 	.word	0x08004081
 8004070:	080040d3 	.word	0x080040d3
 8004074:	08004145 	.word	0x08004145
 8004078:	08004293 	.word	0x08004293
 800407c:	080043db 	.word	0x080043db
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8004080:	2300      	movs	r3, #0
 8004082:	757b      	strb	r3, [r7, #21]
 8004084:	e017      	b.n	80040b6 <http_send_data_ssi+0x116>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	781a      	ldrb	r2, [r3, #0]
 800408c:	7d7b      	ldrb	r3, [r7, #21]
 800408e:	496c      	ldr	r1, [pc, #432]	; (8004240 <http_send_data_ssi+0x2a0>)
 8004090:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	429a      	cmp	r2, r3
 8004098:	d10a      	bne.n	80040b0 <http_send_data_ssi+0x110>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	7d7a      	ldrb	r2, [r7, #21]
 800409e:	741a      	strb	r2, [r3, #16]
            ssi->tag_state = TAG_LEADIN;
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            ssi->tag_index = 1;
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	2201      	movs	r2, #1
 80040ac:	819a      	strh	r2, [r3, #12]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 80040ae:	e005      	b.n	80040bc <http_send_data_ssi+0x11c>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 80040b0:	7d7b      	ldrb	r3, [r7, #21]
 80040b2:	3301      	adds	r3, #1
 80040b4:	757b      	strb	r3, [r7, #21]
 80040b6:	7d7b      	ldrb	r3, [r7, #21]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d9e4      	bls.n	8004086 <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	1e5a      	subs	r2, r3, #1
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	601a      	str	r2, [r3, #0]
        break;
 80040d0:	e1f1      	b.n	80044b6 <http_send_data_ssi+0x516>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	7c1b      	ldrb	r3, [r3, #16]
 80040d6:	461a      	mov	r2, r3
 80040d8:	4b59      	ldr	r3, [pc, #356]	; (8004240 <http_send_data_ssi+0x2a0>)
 80040da:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	8992      	ldrh	r2, [r2, #12]
 80040e2:	4413      	add	r3, r2
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d107      	bne.n	80040fa <http_send_data_ssi+0x15a>
          ssi->tag_index = 0;
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	2200      	movs	r2, #0
 80040ee:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 80040f8:	e1dd      	b.n	80044b6 <http_send_data_ssi+0x516>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	781a      	ldrb	r2, [r3, #0]
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	7c1b      	ldrb	r3, [r3, #16]
 8004104:	4619      	mov	r1, r3
 8004106:	4b4e      	ldr	r3, [pc, #312]	; (8004240 <http_send_data_ssi+0x2a0>)
 8004108:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 800410c:	6939      	ldr	r1, [r7, #16]
 800410e:	8989      	ldrh	r1, [r1, #12]
 8004110:	440b      	add	r3, r1
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	429a      	cmp	r2, r3
 8004116:	d106      	bne.n	8004126 <http_send_data_ssi+0x186>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	899b      	ldrh	r3, [r3, #12]
 800411c:	3301      	adds	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	819a      	strh	r2, [r3, #12]
 8004124:	e003      	b.n	800412e <http_send_data_ssi+0x18e>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	1e5a      	subs	r2, r3, #1
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	1c5a      	adds	r2, r3, #1
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	601a      	str	r2, [r3, #0]
        }
        break;
 8004142:	e1b8      	b.n	80044b6 <http_send_data_ssi+0x516>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	899b      	ldrh	r3, [r3, #12]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d11e      	bne.n	800418a <http_send_data_ssi+0x1ea>
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	2b20      	cmp	r3, #32
 8004154:	d00e      	beq.n	8004174 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800415c:	2b09      	cmp	r3, #9
 800415e:	d009      	beq.n	8004174 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b0a      	cmp	r3, #10
 8004168:	d004      	beq.n	8004174 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\r'))) {
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8004170:	2b0d      	cmp	r3, #13
 8004172:	d10a      	bne.n	800418a <http_send_data_ssi+0x1ea>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	1e5a      	subs	r2, r3, #1
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	601a      	str	r2, [r3, #0]
          break;
 8004188:	e195      	b.n	80044b6 <http_send_data_ssi+0x516>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	781a      	ldrb	r2, [r3, #0]
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	7c1b      	ldrb	r3, [r3, #16]
 8004194:	492a      	ldr	r1, [pc, #168]	; (8004240 <http_send_data_ssi+0x2a0>)
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	440b      	add	r3, r1
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d013      	beq.n	80041ca <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 80041a8:	2b20      	cmp	r3, #32
 80041aa:	d00e      	beq.n	80041ca <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	2b09      	cmp	r3, #9
 80041b4:	d009      	beq.n	80041ca <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80041bc:	2b0a      	cmp	r3, #10
 80041be:	d004      	beq.n	80041ca <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	2b0d      	cmp	r3, #13
 80041c8:	d142      	bne.n	8004250 <http_send_data_ssi+0x2b0>

          if (ssi->tag_index == 0) {
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	899b      	ldrh	r3, [r3, #12]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d104      	bne.n	80041dc <http_send_data_ssi+0x23c>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          if (ssi->tag_index == 0) {
 80041da:	e04f      	b.n	800427c <http_send_data_ssi+0x2dc>
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	2203      	movs	r2, #3
 80041e0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	899b      	ldrh	r3, [r3, #12]
 80041e8:	2bff      	cmp	r3, #255	; 0xff
 80041ea:	d906      	bls.n	80041fa <http_send_data_ssi+0x25a>
 80041ec:	4b11      	ldr	r3, [pc, #68]	; (8004234 <http_send_data_ssi+0x294>)
 80041ee:	f240 523a 	movw	r2, #1338	; 0x53a
 80041f2:	4914      	ldr	r1, [pc, #80]	; (8004244 <http_send_data_ssi+0x2a4>)
 80041f4:	4811      	ldr	r0, [pc, #68]	; (800423c <http_send_data_ssi+0x29c>)
 80041f6:	f00b fe5d 	bl	800feb4 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	899b      	ldrh	r3, [r3, #12]
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	745a      	strb	r2, [r3, #17]
            ssi->tag_name[ssi->tag_index] = '\0';
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	899b      	ldrh	r3, [r3, #12]
 8004208:	461a      	mov	r2, r3
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	4413      	add	r3, r2
 800420e:	2200      	movs	r2, #0
 8004210:	749a      	strb	r2, [r3, #18]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	781a      	ldrb	r2, [r3, #0]
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	7c1b      	ldrb	r3, [r3, #16]
 800421c:	4908      	ldr	r1, [pc, #32]	; (8004240 <http_send_data_ssi+0x2a0>)
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	440b      	add	r3, r1
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	429a      	cmp	r2, r3
 8004228:	d10e      	bne.n	8004248 <http_send_data_ssi+0x2a8>
              ssi->tag_index = 1;
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	2201      	movs	r2, #1
 800422e:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 8004230:	e024      	b.n	800427c <http_send_data_ssi+0x2dc>
 8004232:	bf00      	nop
 8004234:	080115e0 	.word	0x080115e0
 8004238:	0801165c 	.word	0x0801165c
 800423c:	08011628 	.word	0x08011628
 8004240:	0802114c 	.word	0x0802114c
 8004244:	080116cc 	.word	0x080116cc
            } else {
              ssi->tag_index = 0;
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	2200      	movs	r2, #0
 800424c:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 800424e:	e015      	b.n	800427c <http_send_data_ssi+0x2dc>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	899b      	ldrh	r3, [r3, #12]
 8004254:	2b07      	cmp	r3, #7
 8004256:	d80d      	bhi.n	8004274 <http_send_data_ssi+0x2d4>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	899b      	ldrh	r3, [r3, #12]
 8004260:	1c59      	adds	r1, r3, #1
 8004262:	b288      	uxth	r0, r1
 8004264:	6939      	ldr	r1, [r7, #16]
 8004266:	8188      	strh	r0, [r1, #12]
 8004268:	4619      	mov	r1, r3
 800426a:	7812      	ldrb	r2, [r2, #0]
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	440b      	add	r3, r1
 8004270:	749a      	strb	r2, [r3, #18]
 8004272:	e003      	b.n	800427c <http_send_data_ssi+0x2dc>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	1e5a      	subs	r2, r3, #1
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	601a      	str	r2, [r3, #0]

        break;
 8004290:	e111      	b.n	80044b6 <http_send_data_ssi+0x516>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	899b      	ldrh	r3, [r3, #12]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d11e      	bne.n	80042d8 <http_send_data_ssi+0x338>
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	2b20      	cmp	r3, #32
 80042a2:	d00e      	beq.n	80042c2 <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80042aa:	2b09      	cmp	r3, #9
 80042ac:	d009      	beq.n	80042c2 <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b0a      	cmp	r3, #10
 80042b6:	d004      	beq.n	80042c2 <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\r'))) {
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80042be:	2b0d      	cmp	r3, #13
 80042c0:	d10a      	bne.n	80042d8 <http_send_data_ssi+0x338>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	1e5a      	subs	r2, r3, #1
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	1c5a      	adds	r2, r3, #1
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	601a      	str	r2, [r3, #0]
          break;
 80042d6:	e0ee      	b.n	80044b6 <http_send_data_ssi+0x516>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	781a      	ldrb	r2, [r3, #0]
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	7c1b      	ldrb	r3, [r3, #16]
 80042e2:	499b      	ldr	r1, [pc, #620]	; (8004550 <http_send_data_ssi+0x5b0>)
 80042e4:	00db      	lsls	r3, r3, #3
 80042e6:	440b      	add	r3, r1
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	6939      	ldr	r1, [r7, #16]
 80042ec:	8989      	ldrh	r1, [r1, #12]
 80042ee:	440b      	add	r3, r1
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d162      	bne.n	80043bc <http_send_data_ssi+0x41c>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	1e5a      	subs	r2, r3, #1
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	899b      	ldrh	r3, [r3, #12]
 800430e:	3301      	adds	r3, #1
 8004310:	b29a      	uxth	r2, r3
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	819a      	strh	r2, [r3, #12]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	7c1b      	ldrb	r3, [r3, #16]
 800431a:	4a8d      	ldr	r2, [pc, #564]	; (8004550 <http_send_data_ssi+0x5b0>)
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	4413      	add	r3, r2
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	8992      	ldrh	r2, [r2, #12]
 8004326:	4413      	add	r3, r2
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	f040 80c3 	bne.w	80044b6 <http_send_data_ssi+0x516>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 8004330:	6838      	ldr	r0, [r7, #0]
 8004332:	f7ff fd11 	bl	8003d58 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	2200      	movs	r2, #0
 800433a:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	2204      	movs	r2, #4
 8004340:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            ssi->tag_end = ssi->parsed;
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	429a      	cmp	r2, r3
 8004356:	f240 80ae 	bls.w	80044b6 <http_send_data_ssi+0x516>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004368:	4293      	cmp	r3, r2
 800436a:	dc06      	bgt.n	800437a <http_send_data_ssi+0x3da>
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	b29b      	uxth	r3, r3
 8004378:	e001      	b.n	800437e <http_send_data_ssi+0x3de>
 800437a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800437e:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	6999      	ldr	r1, [r3, #24]
 8004384:	f107 020e 	add.w	r2, r7, #14
 8004388:	2300      	movs	r3, #0
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7ff fbae 	bl	8003aec <http_write>
 8004390:	4603      	mov	r3, r0
 8004392:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 8004394:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004398:	2b00      	cmp	r3, #0
 800439a:	f040 808c 	bne.w	80044b6 <http_send_data_ssi+0x516>
                data_to_send = 1;
 800439e:	2301      	movs	r3, #1
 80043a0:	75bb      	strb	r3, [r7, #22]
                if (ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	89fa      	ldrh	r2, [r7, #14]
 80043a8:	441a      	add	r2, r3
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	89fa      	ldrh	r2, [r7, #14]
 80043b4:	1a9a      	subs	r2, r3, r2
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	625a      	str	r2, [r3, #36]	; 0x24
 80043ba:	e07c      	b.n	80044b6 <http_send_data_ssi+0x516>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	1e5a      	subs	r2, r3, #1
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	1c5a      	adds	r2, r3, #1
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        }
        break;
 80043d8:	e06d      	b.n	80044b6 <http_send_data_ssi+0x516>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d935      	bls.n	8004452 <http_send_data_ssi+0x4b2>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80043f4:	4293      	cmp	r3, r2
 80043f6:	dc06      	bgt.n	8004406 <http_send_data_ssi+0x466>
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	b29b      	uxth	r3, r3
 8004404:	e001      	b.n	800440a <http_send_data_ssi+0x46a>
 8004406:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800440a:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 800440c:	89fb      	ldrh	r3, [r7, #14]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00a      	beq.n	8004428 <http_send_data_ssi+0x488>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	6999      	ldr	r1, [r3, #24]
 8004416:	f107 020e 	add.w	r2, r7, #14
 800441a:	2300      	movs	r3, #0
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7ff fb65 	bl	8003aec <http_write>
 8004422:	4603      	mov	r3, r0
 8004424:	75fb      	strb	r3, [r7, #23]
 8004426:	e001      	b.n	800442c <http_send_data_ssi+0x48c>
          } else {
            err = ERR_OK;
 8004428:	2300      	movs	r3, #0
 800442a:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 800442c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d140      	bne.n	80044b6 <http_send_data_ssi+0x516>
            data_to_send = 1;
 8004434:	2301      	movs	r3, #1
 8004436:	75bb      	strb	r3, [r7, #22]
            if (ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	89fa      	ldrh	r2, [r7, #14]
 800443e:	441a      	add	r2, r3
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	89fa      	ldrh	r2, [r7, #14]
 800444a:	1a9a      	subs	r2, r3, r2
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	625a      	str	r2, [r3, #36]	; 0x24
 8004450:	e031      	b.n	80044b6 <http_send_data_ssi+0x516>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	899a      	ldrh	r2, [r3, #12]
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	89db      	ldrh	r3, [r3, #14]
 800445a:	429a      	cmp	r2, r3
 800445c:	d222      	bcs.n	80044a4 <http_send_data_ssi+0x504>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	89da      	ldrh	r2, [r3, #14]
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	899b      	ldrh	r3, [r3, #12]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	b29b      	uxth	r3, r3
 800446a:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	899b      	ldrh	r3, [r3, #12]
 8004470:	3318      	adds	r3, #24
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	4413      	add	r3, r2
 8004476:	1cd9      	adds	r1, r3, #3
 8004478:	f107 020e 	add.w	r2, r7, #14
 800447c:	2301      	movs	r3, #1
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7ff fb34 	bl	8003aec <http_write>
 8004484:	4603      	mov	r3, r0
 8004486:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 8004488:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d112      	bne.n	80044b6 <http_send_data_ssi+0x516>
              data_to_send = 1;
 8004490:	2301      	movs	r3, #1
 8004492:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	899a      	ldrh	r2, [r3, #12]
 8004498:	89fb      	ldrh	r3, [r7, #14]
 800449a:	4413      	add	r3, r2
 800449c:	b29a      	uxth	r2, r3
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	819a      	strh	r2, [r3, #12]
 80044a2:	e008      	b.n	80044b6 <http_send_data_ssi+0x516>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	2200      	movs	r2, #0
 80044a8:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 80044b2:	e000      	b.n	80044b6 <http_send_data_ssi+0x516>
        default:
          break;
 80044b4:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d003      	beq.n	80044c8 <http_send_data_ssi+0x528>
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d004      	beq.n	80044d2 <http_send_data_ssi+0x532>
 80044c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f43f adbf 	beq.w	8004050 <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d034      	beq.n	8004546 <http_send_data_ssi+0x5a6>
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d92e      	bls.n	8004546 <http_send_data_ssi+0x5a6>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80044f6:	4293      	cmp	r3, r2
 80044f8:	dc06      	bgt.n	8004508 <http_send_data_ssi+0x568>
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	b29b      	uxth	r3, r3
 8004506:	e001      	b.n	800450c <http_send_data_ssi+0x56c>
 8004508:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800450c:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	6999      	ldr	r1, [r3, #24]
 8004512:	f107 020e 	add.w	r2, r7, #14
 8004516:	2300      	movs	r3, #0
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f7ff fae7 	bl	8003aec <http_write>
 800451e:	4603      	mov	r3, r0
 8004520:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8004522:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10d      	bne.n	8004546 <http_send_data_ssi+0x5a6>
      data_to_send = 1;
 800452a:	2301      	movs	r3, #1
 800452c:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	89fa      	ldrh	r2, [r7, #14]
 8004534:	441a      	add	r2, r3
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	89fa      	ldrh	r2, [r7, #14]
 8004540:	1a9a      	subs	r2, r3, r2
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 8004546:	7dbb      	ldrb	r3, [r7, #22]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	0802114c 	.word	0x0802114c

08004554 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800455e:	2300      	movs	r3, #0
 8004560:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <http_send+0x18>
    return 0;
 8004568:	2300      	movs	r3, #0
 800456a:	e030      	b.n	80045ce <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	2b00      	cmp	r3, #0
 8004572:	d108      	bne.n	8004586 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8004574:	6839      	ldr	r1, [r7, #0]
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7ff fcac 	bl	8003ed4 <http_check_eof>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <http_send+0x32>
      return 0;
 8004582:	2300      	movs	r3, #0
 8004584:	e023      	b.n	80045ce <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458a:	2b00      	cmp	r3, #0
 800458c:	d006      	beq.n	800459c <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 800458e:	6839      	ldr	r1, [r7, #0]
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f7ff fd05 	bl	8003fa0 <http_send_data_ssi>
 8004596:	4603      	mov	r3, r0
 8004598:	73fb      	strb	r3, [r7, #15]
 800459a:	e005      	b.n	80045a8 <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800459c:	6839      	ldr	r1, [r7, #0]
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7ff fcc8 	bl	8003f34 <http_send_data_nonssi>
 80045a4:	4603      	mov	r3, r0
 80045a6:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10d      	bne.n	80045cc <http_send+0x78>
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7ff fa0b 	bl	80039d0 <fs_bytes_left>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	dc05      	bgt.n	80045cc <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 80045c0:	6839      	ldr	r1, [r7, #0]
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7ff fb5d 	bl	8003c82 <http_eof>
    return 0;
 80045c8:	2300      	movs	r3, #0
 80045ca:	e000      	b.n	80045ce <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 80045cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	4a1c      	ldr	r2, [pc, #112]	; (8004658 <http_get_404_file+0x80>)
 80045e6:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4619      	mov	r1, r3
 80045f0:	4610      	mov	r0, r2
 80045f2:	f7ff f9a5 	bl	8003940 <fs_open>
 80045f6:	4603      	mov	r3, r0
 80045f8:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80045fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d024      	beq.n	800464c <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	4a15      	ldr	r2, [pc, #84]	; (800465c <http_get_404_file+0x84>)
 8004606:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4619      	mov	r1, r3
 8004610:	4610      	mov	r0, r2
 8004612:	f7ff f995 	bl	8003940 <fs_open>
 8004616:	4603      	mov	r3, r0
 8004618:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800461a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d014      	beq.n	800464c <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	4a0e      	ldr	r2, [pc, #56]	; (8004660 <http_get_404_file+0x88>)
 8004626:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4619      	mov	r1, r3
 8004630:	4610      	mov	r0, r2
 8004632:	f7ff f985 	bl	8003940 <fs_open>
 8004636:	4603      	mov	r3, r0
 8004638:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800463a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d004      	beq.n	800464c <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]
        return NULL;
 8004648:	2300      	movs	r3, #0
 800464a:	e000      	b.n	800464e <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800464c:	687b      	ldr	r3, [r7, #4]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	080116e4 	.word	0x080116e4
 800465c:	080116f0 	.word	0x080116f0
 8004660:	080116fc 	.word	0x080116fc

08004664 <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 800466c:	4b08      	ldr	r3, [pc, #32]	; (8004690 <http_handle_post_finished+0x2c>)
 800466e:	2200      	movs	r2, #0
 8004670:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8004672:	223f      	movs	r2, #63	; 0x3f
 8004674:	4906      	ldr	r1, [pc, #24]	; (8004690 <http_handle_post_finished+0x2c>)
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7fc f9ac 	bl	80009d4 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 800467c:	2200      	movs	r2, #0
 800467e:	4904      	ldr	r1, [pc, #16]	; (8004690 <http_handle_post_finished+0x2c>)
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 faab 	bl	8004bdc <http_find_file>
 8004686:	4603      	mov	r3, r0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3708      	adds	r7, #8
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	200004cc 	.word	0x200004cc

08004694 <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d014      	beq.n	80046ce <http_post_rxpbuf+0x3a>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	8912      	ldrh	r2, [r2, #8]
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d204      	bcs.n	80046bc <http_post_rxpbuf+0x28>
      hs->post_content_len_left = 0;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80046ba:	e008      	b.n	80046ce <http_post_rxpbuf+0x3a>
    } else {
      hs->post_content_len_left -= p->tot_len;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	8912      	ldrh	r2, [r2, #8]
 80046c6:	1a9a      	subs	r2, r3, r2
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  if (p != NULL) {
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d006      	beq.n	80046e2 <http_post_rxpbuf+0x4e>
    err = httpd_post_receive_data(hs, p);
 80046d4:	6839      	ldr	r1, [r7, #0]
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7fc f8ba 	bl	8000850 <httpd_post_receive_data>
 80046dc:	4603      	mov	r3, r0
 80046de:	73fb      	strb	r3, [r7, #15]
 80046e0:	e001      	b.n	80046e6 <http_post_rxpbuf+0x52>
  } else {
    err = ERR_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	73fb      	strb	r3, [r7, #15]
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 80046e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <http_post_rxpbuf+0x62>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }
  if (hs->post_content_len_left == 0) {
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d104      	bne.n	800470a <http_post_rxpbuf+0x76>
    if (hs->unrecved_bytes != 0) {
      return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7ff ffaf 	bl	8004664 <http_handle_post_finished>
 8004706:	4603      	mov	r3, r0
 8004708:	e000      	b.n	800470c <http_post_rxpbuf+0x78>
  }

  return ERR_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b092      	sub	sp, #72	; 0x48
 8004718:	af04      	add	r7, sp, #16
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
 8004720:	807b      	strh	r3, [r7, #2]
  err_t err;
  /* search for end-of-header (first double-CRLF) */
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8004722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004724:	1c58      	adds	r0, r3, #1
 8004726:	887a      	ldrh	r2, [r7, #2]
 8004728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800472a:	1c59      	adds	r1, r3, #1
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	1acb      	subs	r3, r1, r3
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	461a      	mov	r2, r3
 8004734:	4965      	ldr	r1, [pc, #404]	; (80048cc <http_post_request+0x1b8>)
 8004736:	f000 fe6f 	bl	8005418 <lwip_strnstr>
 800473a:	62b8      	str	r0, [r7, #40]	; 0x28

  if (crlfcrlf != NULL) {
 800473c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 80be 	beq.w	80048c0 <http_post_request+0x1ac>
    /* search for "Content-Length: " */
#define HTTP_HDR_CONTENT_LEN                "Content-Length: "
#define HTTP_HDR_CONTENT_LEN_LEN            16
#define HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN  10
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 8004744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004746:	1c58      	adds	r0, r3, #1
 8004748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800474a:	3301      	adds	r3, #1
 800474c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	461a      	mov	r2, r3
 8004752:	495f      	ldr	r1, [pc, #380]	; (80048d0 <http_post_request+0x1bc>)
 8004754:	f000 fe60 	bl	8005418 <lwip_strnstr>
 8004758:	6278      	str	r0, [r7, #36]	; 0x24
    if (scontent_len != NULL) {
 800475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 80ac 	beq.w	80048ba <http_post_request+0x1a6>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	3310      	adds	r3, #16
 8004766:	220a      	movs	r2, #10
 8004768:	495a      	ldr	r1, [pc, #360]	; (80048d4 <http_post_request+0x1c0>)
 800476a:	4618      	mov	r0, r3
 800476c:	f000 fe54 	bl	8005418 <lwip_strnstr>
 8004770:	6238      	str	r0, [r7, #32]
      if (scontent_len_end != NULL) {
 8004772:	6a3b      	ldr	r3, [r7, #32]
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 80a0 	beq.w	80048ba <http_post_request+0x1a6>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 800477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477c:	3310      	adds	r3, #16
 800477e:	61fb      	str	r3, [r7, #28]
        content_len = atoi(content_len_num);
 8004780:	69f8      	ldr	r0, [r7, #28]
 8004782:	f00b fb31 	bl	800fde8 <atoi>
 8004786:	6378      	str	r0, [r7, #52]	; 0x34
        if (content_len == 0) {
 8004788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10b      	bne.n	80047a6 <http_post_request+0x92>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	2b30      	cmp	r3, #48	; 0x30
 8004794:	d104      	bne.n	80047a0 <http_post_request+0x8c>
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	3301      	adds	r3, #1
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	2b0d      	cmp	r3, #13
 800479e:	d002      	beq.n	80047a6 <http_post_request+0x92>
            content_len = -1;
 80047a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047a4:	637b      	str	r3, [r7, #52]	; 0x34
          }
        }
        if (content_len >= 0) {
 80047a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f2c0 8083 	blt.w	80048b4 <http_post_request+0x1a0>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 80047ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047b0:	3301      	adds	r3, #1
 80047b2:	61bb      	str	r3, [r7, #24]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 80047b4:	887a      	ldrh	r2, [r7, #2]
 80047b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b8:	1d19      	adds	r1, r3, #4
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	1acb      	subs	r3, r1, r3
 80047be:	429a      	cmp	r2, r3
 80047c0:	db05      	blt.n	80047ce <http_post_request+0xba>
 80047c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c4:	1d1a      	adds	r2, r3, #4
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	e000      	b.n	80047d0 <http_post_request+0xbc>
 80047ce:	887b      	ldrh	r3, [r7, #2]
 80047d0:	82fb      	strh	r3, [r7, #22]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 80047d2:	887a      	ldrh	r2, [r7, #2]
 80047d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d6:	1d19      	adds	r1, r3, #4
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	1acb      	subs	r3, r1, r3
 80047dc:	429a      	cmp	r2, r3
 80047de:	db05      	blt.n	80047ec <http_post_request+0xd8>
 80047e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e2:	1d1a      	adds	r2, r3, #4
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	e000      	b.n	80047ee <http_post_request+0xda>
 80047ec:	887b      	ldrh	r3, [r7, #2]
 80047ee:	82bb      	strh	r3, [r7, #20]
          u8_t post_auto_wnd = 1;
 80047f0:	2301      	movs	r3, #1
 80047f2:	74bb      	strb	r3, [r7, #18]
          http_uri_buf[0] = 0;
 80047f4:	4b38      	ldr	r3, [pc, #224]	; (80048d8 <http_post_request+0x1c4>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 80047fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fc:	2200      	movs	r2, #0
 80047fe:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8004800:	8aba      	ldrh	r2, [r7, #20]
 8004802:	f107 0312 	add.w	r3, r7, #18
 8004806:	9303      	str	r3, [sp, #12]
 8004808:	233f      	movs	r3, #63	; 0x3f
 800480a:	9302      	str	r3, [sp, #8]
 800480c:	4b32      	ldr	r3, [pc, #200]	; (80048d8 <http_post_request+0x1c4>)
 800480e:	9301      	str	r3, [sp, #4]
 8004810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	4613      	mov	r3, r2
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800481a:	68b8      	ldr	r0, [r7, #8]
 800481c:	f7fb ffe4 	bl	80007e8 <httpd_post_begin>
 8004820:	4603      	mov	r3, r0
 8004822:	74fb      	strb	r3, [r7, #19]
                                 http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 8004824:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d13c      	bne.n	80048a6 <http_post_request+0x192>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	633b      	str	r3, [r7, #48]	; 0x30
            u16_t start_offset = hdr_len;
 8004830:	8afb      	ldrh	r3, [r7, #22]
 8004832:	85fb      	strh	r3, [r7, #46]	; 0x2e
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 8004834:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* get to the pbuf where the body starts */
            while ((q != NULL) && (q->len <= start_offset)) {
 800483c:	e007      	b.n	800484e <http_post_request+0x13a>
              start_offset -= q->len;
 800483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004840:	895b      	ldrh	r3, [r3, #10]
 8004842:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	85fb      	strh	r3, [r7, #46]	; 0x2e
              q = q->next;
 8004848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	633b      	str	r3, [r7, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 800484e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004850:	2b00      	cmp	r3, #0
 8004852:	d004      	beq.n	800485e <http_post_request+0x14a>
 8004854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004856:	895b      	ldrh	r3, [r3, #10]
 8004858:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800485a:	429a      	cmp	r2, r3
 800485c:	d2ef      	bcs.n	800483e <http_post_request+0x12a>
            }
            if (q != NULL) {
 800485e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00d      	beq.n	8004880 <http_post_request+0x16c>
              /* hide the remaining HTTP header */
              pbuf_remove_header(q, start_offset);
 8004864:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004866:	4619      	mov	r1, r3
 8004868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800486a:	f002 f83f 	bl	80068ec <pbuf_remove_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 800486e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004870:	f002 f962 	bl	8006b38 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 8004874:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004876:	68b8      	ldr	r0, [r7, #8]
 8004878:	f7ff ff0c 	bl	8004694 <http_post_rxpbuf>
 800487c:	4603      	mov	r3, r0
 800487e:	e021      	b.n	80048c4 <http_post_request+0x1b0>
            } else if (hs->post_content_len_left == 0) {
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10b      	bne.n	80048a2 <http_post_request+0x18e>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 800488a:	2241      	movs	r2, #65	; 0x41
 800488c:	2100      	movs	r1, #0
 800488e:	2000      	movs	r0, #0
 8004890:	f001 fdce 	bl	8006430 <pbuf_alloc>
 8004894:	6338      	str	r0, [r7, #48]	; 0x30
              return http_post_rxpbuf(hs, q);
 8004896:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004898:	68b8      	ldr	r0, [r7, #8]
 800489a:	f7ff fefb 	bl	8004694 <http_post_rxpbuf>
 800489e:	4603      	mov	r3, r0
 80048a0:	e010      	b.n	80048c4 <http_post_request+0x1b0>
            } else {
              return ERR_OK;
 80048a2:	2300      	movs	r3, #0
 80048a4:	e00e      	b.n	80048c4 <http_post_request+0x1b0>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 80048a6:	2200      	movs	r2, #0
 80048a8:	490b      	ldr	r1, [pc, #44]	; (80048d8 <http_post_request+0x1c4>)
 80048aa:	68b8      	ldr	r0, [r7, #8]
 80048ac:	f000 f996 	bl	8004bdc <http_find_file>
 80048b0:	4603      	mov	r3, r0
 80048b2:	e007      	b.n	80048c4 <http_post_request+0x1b0>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
                                    content_len_num));
          return ERR_ARG;
 80048b4:	f06f 030f 	mvn.w	r3, #15
 80048b8:	e004      	b.n	80048c4 <http_post_request+0x1b0>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 80048ba:	f06f 030f 	mvn.w	r3, #15
 80048be:	e001      	b.n	80048c4 <http_post_request+0x1b0>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 80048c0:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3738      	adds	r7, #56	; 0x38
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	08011708 	.word	0x08011708
 80048d0:	08011710 	.word	0x08011710
 80048d4:	08011724 	.word	0x08011724
 80048d8:	200004cc 	.word	0x200004cc

080048dc <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b092      	sub	sp, #72	; 0x48
 80048e0:	af02      	add	r7, sp, #8
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d106      	bne.n	8004900 <http_parse_request+0x24>
 80048f2:	4b87      	ldr	r3, [pc, #540]	; (8004b10 <http_parse_request+0x234>)
 80048f4:	f240 72ae 	movw	r2, #1966	; 0x7ae
 80048f8:	4986      	ldr	r1, [pc, #536]	; (8004b14 <http_parse_request+0x238>)
 80048fa:	4887      	ldr	r0, [pc, #540]	; (8004b18 <http_parse_request+0x23c>)
 80048fc:	f00b fada 	bl	800feb4 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d106      	bne.n	8004914 <http_parse_request+0x38>
 8004906:	4b82      	ldr	r3, [pc, #520]	; (8004b10 <http_parse_request+0x234>)
 8004908:	f240 72af 	movw	r2, #1967	; 0x7af
 800490c:	4983      	ldr	r1, [pc, #524]	; (8004b1c <http_parse_request+0x240>)
 800490e:	4882      	ldr	r0, [pc, #520]	; (8004b18 <http_parse_request+0x23c>)
 8004910:	f00b fad0 	bl	800feb4 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d103      	bne.n	8004924 <http_parse_request+0x48>
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d002      	beq.n	800492a <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8004924:	f06f 0307 	mvn.w	r3, #7
 8004928:	e0ed      	b.n	8004b06 <http_parse_request+0x22a>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d103      	bne.n	800493a <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004936:	621a      	str	r2, [r3, #32]
 8004938:	e005      	b.n	8004946 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004940:	4618      	mov	r0, r3
 8004942:	f002 f91b 	bl	8006b7c <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8004946:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004948:	f002 f8f6 	bl	8006b38 <pbuf_ref>

  if (hs->req->next != NULL) {
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d012      	beq.n	800497c <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	891b      	ldrh	r3, [r3, #8]
 800495c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004960:	4293      	cmp	r3, r2
 8004962:	bf28      	it	cs
 8004964:	4613      	movcs	r3, r2
 8004966:	877b      	strh	r3, [r7, #58]	; 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	6a18      	ldr	r0, [r3, #32]
 800496c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800496e:	2300      	movs	r3, #0
 8004970:	496b      	ldr	r1, [pc, #428]	; (8004b20 <http_parse_request+0x244>)
 8004972:	f002 fa2b 	bl	8006dcc <pbuf_copy_partial>
    data = httpd_req_buf;
 8004976:	4b6a      	ldr	r3, [pc, #424]	; (8004b20 <http_parse_request+0x244>)
 8004978:	63fb      	str	r3, [r7, #60]	; 0x3c
 800497a:	e005      	b.n	8004988 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	63fb      	str	r3, [r7, #60]	; 0x3c
    data_len = p->len;
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004984:	895b      	ldrh	r3, [r3, #10]
 8004986:	877b      	strh	r3, [r7, #58]	; 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8004988:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800498a:	2b06      	cmp	r3, #6
 800498c:	f240 80a1 	bls.w	8004ad2 <http_parse_request+0x1f6>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8004990:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004992:	461a      	mov	r2, r3
 8004994:	4963      	ldr	r1, [pc, #396]	; (8004b24 <http_parse_request+0x248>)
 8004996:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004998:	f000 fd3e 	bl	8005418 <lwip_strnstr>
 800499c:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800499e:	6a3b      	ldr	r3, [r7, #32]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 8096 	beq.w	8004ad2 <http_parse_request+0x1f6>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 80049a6:	2300      	movs	r3, #0
 80049a8:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 80049aa:	2300      	movs	r3, #0
 80049ac:	633b      	str	r3, [r7, #48]	; 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 80049ae:	2204      	movs	r2, #4
 80049b0:	495d      	ldr	r1, [pc, #372]	; (8004b28 <http_parse_request+0x24c>)
 80049b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80049b4:	f00b fb4e 	bl	8010054 <strncmp>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d103      	bne.n	80049c6 <http_parse_request+0xea>
        sp1 = data + 3;
 80049be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049c0:	3303      	adds	r3, #3
 80049c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049c4:	e014      	b.n	80049f0 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 80049c6:	2205      	movs	r2, #5
 80049c8:	4958      	ldr	r1, [pc, #352]	; (8004b2c <http_parse_request+0x250>)
 80049ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80049cc:	f00b fb42 	bl	8010054 <strncmp>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d105      	bne.n	80049e2 <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 80049d6:	2301      	movs	r3, #1
 80049d8:	637b      	str	r3, [r7, #52]	; 0x34
        sp1 = data + 4;
 80049da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049dc:	3304      	adds	r3, #4
 80049de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049e0:	e006      	b.n	80049f0 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 80049e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e4:	3304      	adds	r3, #4
 80049e6:	2200      	movs	r2, #0
 80049e8:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
 80049ea:	f06f 030f 	mvn.w	r3, #15
 80049ee:	e08a      	b.n	8004b06 <http_parse_request+0x22a>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 80049f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f2:	1c5a      	adds	r2, r3, #1
 80049f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8004a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a02:	3301      	adds	r3, #1
 8004a04:	8bfa      	ldrh	r2, [r7, #30]
 8004a06:	494a      	ldr	r1, [pc, #296]	; (8004b30 <http_parse_request+0x254>)
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 fd05 	bl	8005418 <lwip_strnstr>
 8004a0e:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8004a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10c      	bne.n	8004a30 <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8004a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a18:	3301      	adds	r3, #1
 8004a1a:	8bfa      	ldrh	r2, [r7, #30]
 8004a1c:	4941      	ldr	r1, [pc, #260]	; (8004b24 <http_parse_request+0x248>)
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 fcfa 	bl	8005418 <lwip_strnstr>
 8004a24:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8004a26:	2301      	movs	r3, #1
 8004a28:	633b      	str	r3, [r7, #48]	; 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 8004a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d163      	bne.n	8004af8 <http_parse_request+0x21c>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8004a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a32:	3301      	adds	r3, #1
 8004a34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8004a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d048      	beq.n	8004ad2 <http_parse_request+0x1f6>
 8004a40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d944      	bls.n	8004ad2 <http_parse_request+0x1f6>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8004a48:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	4939      	ldr	r1, [pc, #228]	; (8004b34 <http_parse_request+0x258>)
 8004a4e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004a50:	f000 fce2 	bl	8005418 <lwip_strnstr>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d03b      	beq.n	8004ad2 <http_parse_request+0x1f6>
          char *uri = sp1 + 1;
 8004a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8004a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a62:	2200      	movs	r2, #0
 8004a64:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8004a66:	8bbb      	ldrh	r3, [r7, #28]
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                                    data, uri));
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 8004a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d026      	beq.n	8004ac4 <http_parse_request+0x1e8>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 8004a7c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8004a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a80:	9301      	str	r3, [sp, #4]
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	4613      	mov	r3, r2
 8004a88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a8a:	68b9      	ldr	r1, [r7, #8]
 8004a8c:	6978      	ldr	r0, [r7, #20]
 8004a8e:	f7ff fe41 	bl	8004714 <http_post_request>
 8004a92:	4603      	mov	r3, r0
 8004a94:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 8004a96:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <http_parse_request+0x1d8>
              /* restore header for next try */
              *sp1 = ' ';
 8004a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 8004aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 8004aaa:	8bbb      	ldrh	r3, [r7, #28]
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	4413      	add	r3, r2
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 8004ab4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004ab8:	f113 0f10 	cmn.w	r3, #16
 8004abc:	d01e      	beq.n	8004afc <http_parse_request+0x220>
              goto badrequest;
            }
            return err;
 8004abe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004ac2:	e020      	b.n	8004b06 <http_parse_request+0x22a>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8004ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ac6:	69b9      	ldr	r1, [r7, #24]
 8004ac8:	68b8      	ldr	r0, [r7, #8]
 8004aca:	f000 f887 	bl	8004bdc <http_find_file>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	e019      	b.n	8004b06 <http_parse_request+0x22a>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f002 f816 	bl	8006b08 <pbuf_clen>
 8004adc:	4603      	mov	r3, r0
 8004ade:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	891b      	ldrh	r3, [r3, #8]
 8004ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aea:	d209      	bcs.n	8004b00 <http_parse_request+0x224>
 8004aec:	8a3b      	ldrh	r3, [r7, #16]
 8004aee:	2b05      	cmp	r3, #5
 8004af0:	d806      	bhi.n	8004b00 <http_parse_request+0x224>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8004af2:	f06f 0304 	mvn.w	r3, #4
 8004af6:	e006      	b.n	8004b06 <http_parse_request+0x22a>
          goto badrequest;
 8004af8:	bf00      	nop
 8004afa:	e002      	b.n	8004b02 <http_parse_request+0x226>
              goto badrequest;
 8004afc:	bf00      	nop
 8004afe:	e000      	b.n	8004b02 <http_parse_request+0x226>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 8004b00:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8004b02:	f06f 030f 	mvn.w	r3, #15
  }
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3740      	adds	r7, #64	; 0x40
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	080115e0 	.word	0x080115e0
 8004b14:	08011728 	.word	0x08011728
 8004b18:	08011628 	.word	0x08011628
 8004b1c:	08011650 	.word	0x08011650
 8004b20:	200000cc 	.word	0x200000cc
 8004b24:	08011724 	.word	0x08011724
 8004b28:	08011734 	.word	0x08011734
 8004b2c:	0801173c 	.word	0x0801173c
 8004b30:	08011744 	.word	0x08011744
 8004b34:	08011708 	.word	0x08011708

08004b38 <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b088      	sub	sp, #32
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 8004b42:	2300      	movs	r3, #0
 8004b44:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d040      	beq.n	8004bce <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 8004b50:	213f      	movs	r1, #63	; 0x3f
 8004b52:	6838      	ldr	r0, [r7, #0]
 8004b54:	f00b fa69 	bl	801002a <strchr>
 8004b58:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	613b      	str	r3, [r7, #16]
    ext = uri;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8004b6e:	212e      	movs	r1, #46	; 0x2e
 8004b70:	6938      	ldr	r0, [r7, #16]
 8004b72:	f00b fa5a 	bl	801002a <strchr>
 8004b76:	6138      	str	r0, [r7, #16]
 8004b78:	e009      	b.n	8004b8e <http_uri_is_ssi+0x56>
      ext = sub;
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	617b      	str	r3, [r7, #20]
      sub++;
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	3301      	adds	r3, #1
 8004b82:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8004b84:	212e      	movs	r1, #46	; 0x2e
 8004b86:	6938      	ldr	r0, [r7, #16]
 8004b88:	f00b fa4f 	bl	801002a <strchr>
 8004b8c:	6138      	str	r0, [r7, #16]
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1f2      	bne.n	8004b7a <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8004b94:	2300      	movs	r3, #0
 8004b96:	61fb      	str	r3, [r7, #28]
 8004b98:	e010      	b.n	8004bbc <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8004b9a:	4a0f      	ldr	r2, [pc, #60]	; (8004bd8 <http_uri_is_ssi+0xa0>)
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	6978      	ldr	r0, [r7, #20]
 8004ba6:	f000 fc6d 	bl	8005484 <lwip_stricmp>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d102      	bne.n	8004bb6 <http_uri_is_ssi+0x7e>
        tag_check = 1;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	76fb      	strb	r3, [r7, #27]
        break;
 8004bb4:	e005      	b.n	8004bc2 <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	61fb      	str	r3, [r7, #28]
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	d9eb      	bls.n	8004b9a <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d002      	beq.n	8004bce <http_uri_is_ssi+0x96>
      *param = '?';
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	223f      	movs	r2, #63	; 0x3f
 8004bcc:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 8004bce:	7efb      	ldrb	r3, [r7, #27]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3720      	adds	r7, #32
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	08021110 	.word	0x08021110

08004bdc <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8004bdc:	b590      	push	{r4, r7, lr}
 8004bde:	b093      	sub	sp, #76	; 0x4c
 8004be0:	af02      	add	r7, sp, #8
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8004be8:	2300      	movs	r3, #0
 8004bea:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8004bec:	2300      	movs	r3, #0
 8004bee:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7fb faf3 	bl	80001e4 <strlen>
 8004bfe:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d072      	beq.n	8004cec <http_find_file+0x110>
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	4413      	add	r3, r2
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	2b2f      	cmp	r3, #47	; 0x2f
 8004c12:	d16b      	bne.n	8004cec <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8004c14:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8004c16:	4a80      	ldr	r2, [pc, #512]	; (8004e18 <http_find_file+0x23c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d102      	bne.n	8004c22 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d164      	bne.n	8004cec <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	3b01      	subs	r3, #1
 8004c26:	2b3f      	cmp	r3, #63	; 0x3f
 8004c28:	bf28      	it	cs
 8004c2a:	233f      	movcs	r3, #63	; 0x3f
 8004c2c:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 8004c2e:	6a3b      	ldr	r3, [r7, #32]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00a      	beq.n	8004c4a <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	6a3a      	ldr	r2, [r7, #32]
 8004c38:	4619      	mov	r1, r3
 8004c3a:	4877      	ldr	r0, [pc, #476]	; (8004e18 <http_find_file+0x23c>)
 8004c3c:	f00b f90a 	bl	800fe54 <memcpy>
      http_uri_buf[copy_len] = 0;
 8004c40:	4a75      	ldr	r2, [pc, #468]	; (8004e18 <http_find_file+0x23c>)
 8004c42:	6a3b      	ldr	r3, [r7, #32]
 8004c44:	4413      	add	r3, r2
 8004c46:	2200      	movs	r2, #0
 8004c48:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c4e:	e04a      	b.n	8004ce6 <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8004c50:	6a3b      	ldr	r3, [r7, #32]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d028      	beq.n	8004ca8 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8004c5c:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d01e      	beq.n	8004ca2 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8004c64:	4a6d      	ldr	r2, [pc, #436]	; (8004e1c <http_find_file+0x240>)
 8004c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7fb fab9 	bl	80001e4 <strlen>
 8004c72:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8004c74:	69ba      	ldr	r2, [r7, #24]
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	bf28      	it	cs
 8004c7c:	4613      	movcs	r3, r2
 8004c7e:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	4a65      	ldr	r2, [pc, #404]	; (8004e18 <http_find_file+0x23c>)
 8004c84:	1898      	adds	r0, r3, r2
 8004c86:	4a65      	ldr	r2, [pc, #404]	; (8004e1c <http_find_file+0x240>)
 8004c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c8a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	4619      	mov	r1, r3
 8004c92:	f00b f8df 	bl	800fe54 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8004c96:	6a3a      	ldr	r2, [r7, #32]
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	4a5e      	ldr	r2, [pc, #376]	; (8004e18 <http_find_file+0x23c>)
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 8004ca2:	4b5d      	ldr	r3, [pc, #372]	; (8004e18 <http_find_file+0x23c>)
 8004ca4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ca6:	e004      	b.n	8004cb2 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8004ca8:	4a5c      	ldr	r2, [pc, #368]	; (8004e1c <http_find_file+0x240>)
 8004caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004cb0:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fe fe42 	bl	8003940 <fs_open>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 8004cc0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10b      	bne.n	8004ce0 <http_find_file+0x104>
        uri = file_name;
 8004cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cca:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 8004cd0:	4a52      	ldr	r2, [pc, #328]	; (8004e1c <http_find_file+0x240>)
 8004cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	4413      	add	r3, r2
 8004cd8:	791b      	ldrb	r3, [r3, #4]
 8004cda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 8004cde:	e005      	b.n	8004cec <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8004ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ce8:	2b04      	cmp	r3, #4
 8004cea:	d9b1      	bls.n	8004c50 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8004cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d176      	bne.n	8004de0 <http_find_file+0x204>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	213f      	movs	r1, #63	; 0x3f
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f00b f997 	bl	801002a <strchr>
 8004cfc:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 8004cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d005      	beq.n	8004d10 <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8004d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d06:	2200      	movs	r2, #0
 8004d08:	701a      	strb	r2, [r3, #0]
      params++;
 8004d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 8004d10:	4b43      	ldr	r3, [pc, #268]	; (8004e20 <http_find_file+0x244>)
 8004d12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d16:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 8004d18:	4b42      	ldr	r3, [pc, #264]	; (8004e24 <http_find_file+0x248>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d034      	beq.n	8004d8a <http_find_file+0x1ae>
 8004d20:	4b41      	ldr	r3, [pc, #260]	; (8004e28 <http_find_file+0x24c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d030      	beq.n	8004d8a <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 8004d28:	2300      	movs	r3, #0
 8004d2a:	633b      	str	r3, [r7, #48]	; 0x30
 8004d2c:	e028      	b.n	8004d80 <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 8004d2e:	68b8      	ldr	r0, [r7, #8]
 8004d30:	4b3d      	ldr	r3, [pc, #244]	; (8004e28 <http_find_file+0x24c>)
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	4413      	add	r3, r2
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	f7fb fa47 	bl	80001d0 <strcmp>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d118      	bne.n	8004d7a <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 8004d48:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f7fe ffa6 	bl	8003c9c <extract_uri_parameters>
 8004d50:	4603      	mov	r3, r0
 8004d52:	4a33      	ldr	r2, [pc, #204]	; (8004e20 <http_find_file+0x244>)
 8004d54:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8004d56:	4b34      	ldr	r3, [pc, #208]	; (8004e28 <http_find_file+0x24c>)
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	4413      	add	r3, r2
 8004d60:	685c      	ldr	r4, [r3, #4]
 8004d62:	4b2f      	ldr	r3, [pc, #188]	; (8004e20 <http_find_file+0x244>)
 8004d64:	6819      	ldr	r1, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8004d70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d72:	47a0      	blx	r4
 8004d74:	4603      	mov	r3, r0
 8004d76:	60bb      	str	r3, [r7, #8]
          break;
 8004d78:	e007      	b.n	8004d8a <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 8004d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	633b      	str	r3, [r7, #48]	; 0x30
 8004d80:	4b28      	ldr	r3, [pc, #160]	; (8004e24 <http_find_file+0x248>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d86:	429a      	cmp	r2, r3
 8004d88:	dbd1      	blt.n	8004d2e <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	4611      	mov	r1, r2
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7fe fdd5 	bl	8003940 <fs_open>
 8004d96:	4603      	mov	r3, r0
 8004d98:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 8004d9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d102      	bne.n	8004da8 <http_find_file+0x1cc>
      file = &hs->file_handle;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004da6:	e006      	b.n	8004db6 <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
 8004da8:	f107 0308 	add.w	r3, r7, #8
 8004dac:	4619      	mov	r1, r3
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f7ff fc12 	bl	80045d8 <http_get_404_file>
 8004db4:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 8004db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d011      	beq.n	8004de0 <http_find_file+0x204>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 8004dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbe:	7c1b      	ldrb	r3, [r3, #16]
 8004dc0:	f003 0308 	and.w	r3, r3, #8
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <http_find_file+0x1f4>
        tag_check = 1;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004dce:	e007      	b.n	8004de0 <http_find_file+0x204>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004dd6:	f7ff feaf 	bl	8004b38 <http_uri_is_ssi>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8004de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d106      	bne.n	8004df4 <http_find_file+0x218>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 8004de6:	f107 0308 	add.w	r3, r7, #8
 8004dea:	4619      	mov	r1, r3
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f7ff fbf3 	bl	80045d8 <http_get_404_file>
 8004df2:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df8:	9301      	str	r3, [sp, #4]
 8004dfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	4613      	mov	r3, r2
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f000 f810 	bl	8004e2c <http_init_file>
 8004e0c:	4603      	mov	r3, r0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3744      	adds	r7, #68	; 0x44
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd90      	pop	{r4, r7, pc}
 8004e16:	bf00      	nop
 8004e18:	200004cc 	.word	0x200004cc
 8004e1c:	08021124 	.word	0x08021124
 8004e20:	20000520 	.word	0x20000520
 8004e24:	2000051c 	.word	0x2000051c
 8004e28:	20000518 	.word	0x20000518

08004e2c <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b088      	sub	sp, #32
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
 8004e38:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d07d      	beq.n	8004f3c <http_init_file+0x110>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d106      	bne.n	8004e56 <http_init_file+0x2a>
 8004e48:	4b45      	ldr	r3, [pc, #276]	; (8004f60 <http_init_file+0x134>)
 8004e4a:	f640 120b 	movw	r2, #2315	; 0x90b
 8004e4e:	4945      	ldr	r1, [pc, #276]	; (8004f64 <http_init_file+0x138>)
 8004e50:	4845      	ldr	r0, [pc, #276]	; (8004f68 <http_init_file+0x13c>)
 8004e52:	f00b f82f 	bl	800feb4 <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 8004e56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d01c      	beq.n	8004e98 <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 8004e5e:	f7fe fdc6 	bl	80039ee <http_ssi_state_alloc>
 8004e62:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d016      	beq.n	8004e98 <http_init_file+0x6c>
        ssi->tag_index = 0;
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        ssi->parsed = file->data;
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	461a      	mov	r2, r3
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	69fa      	ldr	r2, [r7, #28]
 8004e96:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	da06      	bge.n	8004ebc <http_init_file+0x90>
 8004eae:	4b2c      	ldr	r3, [pc, #176]	; (8004f60 <http_init_file+0x134>)
 8004eb0:	f640 1234 	movw	r2, #2356	; 0x934
 8004eb4:	492d      	ldr	r1, [pc, #180]	; (8004f6c <http_init_file+0x140>)
 8004eb6:	482c      	ldr	r0, [pc, #176]	; (8004f68 <http_init_file+0x13c>)
 8004eb8:	f00a fffc 	bl	800feb4 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	7c1b      	ldrb	r3, [r3, #16]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d106      	bne.n	8004eea <http_init_file+0xbe>
 8004edc:	4b20      	ldr	r3, [pc, #128]	; (8004f60 <http_init_file+0x134>)
 8004ede:	f640 1243 	movw	r2, #2371	; 0x943
 8004ee2:	4923      	ldr	r1, [pc, #140]	; (8004f70 <http_init_file+0x144>)
 8004ee4:	4820      	ldr	r0, [pc, #128]	; (8004f68 <http_init_file+0x13c>)
 8004ee6:	f00a ffe5 	bl	800feb4 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d032      	beq.n	8004f56 <http_init_file+0x12a>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	7c1b      	ldrb	r3, [r3, #16]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d02b      	beq.n	8004f56 <http_init_file+0x12a>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6998      	ldr	r0, [r3, #24]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	461a      	mov	r2, r3
 8004f08:	491a      	ldr	r1, [pc, #104]	; (8004f74 <http_init_file+0x148>)
 8004f0a:	f000 fa85 	bl	8005418 <lwip_strnstr>
 8004f0e:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d01f      	beq.n	8004f56 <http_init_file+0x12a>
        int diff = file_start + 4 - hs->file;
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	1d1a      	adds	r2, r3, #4
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	699a      	ldr	r2, [r3, #24]
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	441a      	add	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	1ad2      	subs	r2, r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	625a      	str	r2, [r3, #36]	; 0x24
 8004f3a:	e00c      	b.n	8004f56 <http_init_file+0x12a>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3720      	adds	r7, #32
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	080115e0 	.word	0x080115e0
 8004f64:	08011748 	.word	0x08011748
 8004f68:	08011628 	.word	0x08011628
 8004f6c:	0801175c 	.word	0x0801175c
 8004f70:	0801177c 	.word	0x0801177c
 8004f74:	08011708 	.word	0x08011708

08004f78 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	460b      	mov	r3, r1
 8004f82:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d002      	beq.n	8004f94 <http_err+0x1c>
    http_state_free(hs);
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f7fe fd9a 	bl	8003ac8 <http_state_free>
  }
}
 8004f94:	bf00      	nop
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d101      	bne.n	8004fb8 <http_sent+0x1c>
    return ERR_OK;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	e008      	b.n	8004fca <http_sent+0x2e>
  }

  hs->retries = 0;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 8004fc0:	6979      	ldr	r1, [r7, #20]
 8004fc2:	68b8      	ldr	r0, [r7, #8]
 8004fc4:	f7ff fac6 	bl	8004554 <http_send>

  return ERR_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b084      	sub	sp, #16
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
 8004fda:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d107      	bne.n	8004ff6 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	6838      	ldr	r0, [r7, #0]
 8004fea:	f7fe fe3b 	bl	8003c64 <http_close_conn>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	e021      	b.n	800503a <http_poll+0x68>
  } else {
    hs->retries++;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	b2da      	uxtb	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800500c:	2b04      	cmp	r3, #4
 800500e:	d105      	bne.n	800501c <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8005010:	68f9      	ldr	r1, [r7, #12]
 8005012:	6838      	ldr	r0, [r7, #0]
 8005014:	f7fe fe26 	bl	8003c64 <http_close_conn>
      return ERR_OK;
 8005018:	2300      	movs	r3, #0
 800501a:	e00e      	b.n	800503a <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d009      	beq.n	8005038 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8005024:	68f9      	ldr	r1, [r7, #12]
 8005026:	6838      	ldr	r0, [r7, #0]
 8005028:	f7ff fa94 	bl	8004554 <http_send>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d002      	beq.n	8005038 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 8005032:	6838      	ldr	r0, [r7, #0]
 8005034:	f007 f99e 	bl	800c374 <tcp_output>
      }
    }
  }

  return ERR_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
	...

08005044 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
 8005050:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8005056:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d105      	bne.n	800506a <http_recv+0x26>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <http_recv+0x26>
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d111      	bne.n	800508e <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d008      	beq.n	8005082 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	891b      	ldrh	r3, [r3, #8]
 8005074:	4619      	mov	r1, r3
 8005076:	68b8      	ldr	r0, [r7, #8]
 8005078:	f002 fd70 	bl	8007b5c <tcp_recved>
      pbuf_free(p);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f001 fcbb 	bl	80069f8 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8005082:	6979      	ldr	r1, [r7, #20]
 8005084:	68b8      	ldr	r0, [r7, #8]
 8005086:	f7fe fded 	bl	8003c64 <http_close_conn>
    return ERR_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	e072      	b.n	8005174 <http_recv+0x130>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	891b      	ldrh	r3, [r3, #8]
 8005092:	4619      	mov	r1, r3
 8005094:	68b8      	ldr	r0, [r7, #8]
 8005096:	f002 fd61 	bl	8007b5c <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d012      	beq.n	80050ca <http_recv+0x86>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 80050ac:	6879      	ldr	r1, [r7, #4]
 80050ae:	6978      	ldr	r0, [r7, #20]
 80050b0:	f7ff faf0 	bl	8004694 <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d103      	bne.n	80050c6 <http_recv+0x82>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 80050be:	6979      	ldr	r1, [r7, #20]
 80050c0:	68b8      	ldr	r0, [r7, #8]
 80050c2:	f7ff fa47 	bl	8004554 <http_send>
    }
    return ERR_OK;
 80050c6:	2300      	movs	r3, #0
 80050c8:	e054      	b.n	8005174 <http_recv+0x130>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d14c      	bne.n	800516c <http_recv+0x128>
      err_t parsed = http_parse_request(p, hs, pcb);
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	6979      	ldr	r1, [r7, #20]
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7ff fc00 	bl	80048dc <http_parse_request>
 80050dc:	4603      	mov	r3, r0
 80050de:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 80050e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d015      	beq.n	8005114 <http_recv+0xd0>
 80050e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80050ec:	f113 0f05 	cmn.w	r3, #5
 80050f0:	d010      	beq.n	8005114 <http_recv+0xd0>
 80050f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80050f6:	f113 0f10 	cmn.w	r3, #16
 80050fa:	d00b      	beq.n	8005114 <http_recv+0xd0>
 80050fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005100:	f113 0f08 	cmn.w	r3, #8
 8005104:	d006      	beq.n	8005114 <http_recv+0xd0>
 8005106:	4b1d      	ldr	r3, [pc, #116]	; (800517c <http_recv+0x138>)
 8005108:	f640 2204 	movw	r2, #2564	; 0xa04
 800510c:	491c      	ldr	r1, [pc, #112]	; (8005180 <http_recv+0x13c>)
 800510e:	481d      	ldr	r0, [pc, #116]	; (8005184 <http_recv+0x140>)
 8005110:	f00a fed0 	bl	800feb4 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8005114:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005118:	f113 0f05 	cmn.w	r3, #5
 800511c:	d00b      	beq.n	8005136 <http_recv+0xf2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d007      	beq.n	8005136 <http_recv+0xf2>
          pbuf_free(hs->req);
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	4618      	mov	r0, r3
 800512c:	f001 fc64 	bl	80069f8 <pbuf_free>
          hs->req = NULL;
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	2200      	movs	r2, #0
 8005134:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f001 fc5e 	bl	80069f8 <pbuf_free>
      if (parsed == ERR_OK) {
 800513c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d109      	bne.n	8005158 <http_recv+0x114>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d111      	bne.n	8005172 <http_recv+0x12e>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800514e:	6979      	ldr	r1, [r7, #20]
 8005150:	68b8      	ldr	r0, [r7, #8]
 8005152:	f7ff f9ff 	bl	8004554 <http_send>
 8005156:	e00c      	b.n	8005172 <http_recv+0x12e>
        }
      } else if (parsed == ERR_ARG) {
 8005158:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800515c:	f113 0f10 	cmn.w	r3, #16
 8005160:	d107      	bne.n	8005172 <http_recv+0x12e>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8005162:	6979      	ldr	r1, [r7, #20]
 8005164:	68b8      	ldr	r0, [r7, #8]
 8005166:	f7fe fd7d 	bl	8003c64 <http_close_conn>
 800516a:	e002      	b.n	8005172 <http_recv+0x12e>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f001 fc43 	bl	80069f8 <pbuf_free>
    }
  }
  return ERR_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3718      	adds	r7, #24
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	080115e0 	.word	0x080115e0
 8005180:	080117a8 	.word	0x080117a8
 8005184:	08011628 	.word	0x08011628

08005188 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	4613      	mov	r3, r2
 8005194:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8005196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d102      	bne.n	80051a4 <http_accept+0x1c>
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d102      	bne.n	80051aa <http_accept+0x22>
    return ERR_VAL;
 80051a4:	f06f 0305 	mvn.w	r3, #5
 80051a8:	e025      	b.n	80051f6 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80051aa:	2101      	movs	r1, #1
 80051ac:	68b8      	ldr	r0, [r7, #8]
 80051ae:	f003 f9b9 	bl	8008524 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 80051b2:	f7fe fc4b 	bl	8003a4c <http_state_alloc>
 80051b6:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d102      	bne.n	80051c4 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 80051be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051c2:	e018      	b.n	80051f6 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 80051ca:	6979      	ldr	r1, [r7, #20]
 80051cc:	68b8      	ldr	r0, [r7, #8]
 80051ce:	f003 fba9 	bl	8008924 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 80051d2:	490b      	ldr	r1, [pc, #44]	; (8005200 <http_accept+0x78>)
 80051d4:	68b8      	ldr	r0, [r7, #8]
 80051d6:	f003 fbb7 	bl	8008948 <tcp_recv>
  altcp_err(pcb, http_err);
 80051da:	490a      	ldr	r1, [pc, #40]	; (8005204 <http_accept+0x7c>)
 80051dc:	68b8      	ldr	r0, [r7, #8]
 80051de:	f003 fbf7 	bl	80089d0 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80051e2:	2204      	movs	r2, #4
 80051e4:	4908      	ldr	r1, [pc, #32]	; (8005208 <http_accept+0x80>)
 80051e6:	68b8      	ldr	r0, [r7, #8]
 80051e8:	f003 fc2c 	bl	8008a44 <tcp_poll>
  altcp_sent(pcb, http_sent);
 80051ec:	4907      	ldr	r1, [pc, #28]	; (800520c <http_accept+0x84>)
 80051ee:	68b8      	ldr	r0, [r7, #8]
 80051f0:	f003 fbcc 	bl	800898c <tcp_sent>

  return ERR_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3718      	adds	r7, #24
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	08005045 	.word	0x08005045
 8005204:	08004f79 	.word	0x08004f79
 8005208:	08004fd3 	.word	0x08004fd3
 800520c:	08004f9d 	.word	0x08004f9d

08005210 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	460b      	mov	r3, r1
 800521a:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d029      	beq.n	8005276 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8005222:	2101      	movs	r1, #1
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f003 f97d 	bl	8008524 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800522a:	887b      	ldrh	r3, [r7, #2]
 800522c:	461a      	mov	r2, r3
 800522e:	4914      	ldr	r1, [pc, #80]	; (8005280 <httpd_init_pcb+0x70>)
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f002 fac5 	bl	80077c0 <tcp_bind>
 8005236:	4603      	mov	r3, r0
 8005238:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800523a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d006      	beq.n	8005250 <httpd_init_pcb+0x40>
 8005242:	4b10      	ldr	r3, [pc, #64]	; (8005284 <httpd_init_pcb+0x74>)
 8005244:	f640 2257 	movw	r2, #2647	; 0xa57
 8005248:	490f      	ldr	r1, [pc, #60]	; (8005288 <httpd_init_pcb+0x78>)
 800524a:	4810      	ldr	r0, [pc, #64]	; (800528c <httpd_init_pcb+0x7c>)
 800524c:	f00a fe32 	bl	800feb4 <iprintf>
    pcb = altcp_listen(pcb);
 8005250:	21ff      	movs	r1, #255	; 0xff
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f002 fb6c 	bl	8007930 <tcp_listen_with_backlog>
 8005258:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d106      	bne.n	800526e <httpd_init_pcb+0x5e>
 8005260:	4b08      	ldr	r3, [pc, #32]	; (8005284 <httpd_init_pcb+0x74>)
 8005262:	f640 2259 	movw	r2, #2649	; 0xa59
 8005266:	490a      	ldr	r1, [pc, #40]	; (8005290 <httpd_init_pcb+0x80>)
 8005268:	4808      	ldr	r0, [pc, #32]	; (800528c <httpd_init_pcb+0x7c>)
 800526a:	f00a fe23 	bl	800feb4 <iprintf>
    altcp_accept(pcb, http_accept);
 800526e:	4909      	ldr	r1, [pc, #36]	; (8005294 <httpd_init_pcb+0x84>)
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f003 fbcf 	bl	8008a14 <tcp_accept>
  }
}
 8005276:	bf00      	nop
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	0802122c 	.word	0x0802122c
 8005284:	080115e0 	.word	0x080115e0
 8005288:	080117d4 	.word	0x080117d4
 800528c:	08011628 	.word	0x08011628
 8005290:	080117f0 	.word	0x080117f0
 8005294:	08005189 	.word	0x08005189

08005298 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800529e:	202e      	movs	r0, #46	; 0x2e
 80052a0:	f003 fb32 	bl	8008908 <tcp_new_ip_type>
 80052a4:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d106      	bne.n	80052ba <httpd_init+0x22>
 80052ac:	4b07      	ldr	r3, [pc, #28]	; (80052cc <httpd_init+0x34>)
 80052ae:	f640 2272 	movw	r2, #2674	; 0xa72
 80052b2:	4907      	ldr	r1, [pc, #28]	; (80052d0 <httpd_init+0x38>)
 80052b4:	4807      	ldr	r0, [pc, #28]	; (80052d4 <httpd_init+0x3c>)
 80052b6:	f00a fdfd 	bl	800feb4 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 80052ba:	2150      	movs	r1, #80	; 0x50
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f7ff ffa7 	bl	8005210 <httpd_init_pcb>
}
 80052c2:	bf00      	nop
 80052c4:	3708      	adds	r7, #8
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	080115e0 	.word	0x080115e0
 80052d0:	08011810 	.word	0x08011810
 80052d4:	08011628 	.word	0x08011628

080052d8 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d106      	bne.n	80052f8 <http_set_ssi_handler+0x20>
 80052ea:	4b14      	ldr	r3, [pc, #80]	; (800533c <http_set_ssi_handler+0x64>)
 80052ec:	f640 2297 	movw	r2, #2711	; 0xa97
 80052f0:	4913      	ldr	r1, [pc, #76]	; (8005340 <http_set_ssi_handler+0x68>)
 80052f2:	4814      	ldr	r0, [pc, #80]	; (8005344 <http_set_ssi_handler+0x6c>)
 80052f4:	f00a fdde 	bl	800feb4 <iprintf>
  httpd_ssi_handler = ssi_handler;
 80052f8:	4a13      	ldr	r2, [pc, #76]	; (8005348 <http_set_ssi_handler+0x70>)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d106      	bne.n	8005312 <http_set_ssi_handler+0x3a>
 8005304:	4b0d      	ldr	r3, [pc, #52]	; (800533c <http_set_ssi_handler+0x64>)
 8005306:	f640 229e 	movw	r2, #2718	; 0xa9e
 800530a:	4910      	ldr	r1, [pc, #64]	; (800534c <http_set_ssi_handler+0x74>)
 800530c:	480d      	ldr	r0, [pc, #52]	; (8005344 <http_set_ssi_handler+0x6c>)
 800530e:	f00a fdd1 	bl	800feb4 <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	dc06      	bgt.n	8005326 <http_set_ssi_handler+0x4e>
 8005318:	4b08      	ldr	r3, [pc, #32]	; (800533c <http_set_ssi_handler+0x64>)
 800531a:	f640 229f 	movw	r2, #2719	; 0xa9f
 800531e:	490c      	ldr	r1, [pc, #48]	; (8005350 <http_set_ssi_handler+0x78>)
 8005320:	4808      	ldr	r0, [pc, #32]	; (8005344 <http_set_ssi_handler+0x6c>)
 8005322:	f00a fdc7 	bl	800feb4 <iprintf>

  httpd_tags = tags;
 8005326:	4a0b      	ldr	r2, [pc, #44]	; (8005354 <http_set_ssi_handler+0x7c>)
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
 800532c:	4a0a      	ldr	r2, [pc, #40]	; (8005358 <http_set_ssi_handler+0x80>)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 8005332:	bf00      	nop
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	080115e0 	.word	0x080115e0
 8005340:	0801182c 	.word	0x0801182c
 8005344:	08011628 	.word	0x08011628
 8005348:	2000050c 	.word	0x2000050c
 800534c:	08011844 	.word	0x08011844
 8005350:	08011854 	.word	0x08011854
 8005354:	20000514 	.word	0x20000514
 8005358:	20000510 	.word	0x20000510

0800535c <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d106      	bne.n	800537a <http_set_cgi_handlers+0x1e>
 800536c:	4b0d      	ldr	r3, [pc, #52]	; (80053a4 <http_set_cgi_handlers+0x48>)
 800536e:	f640 22b2 	movw	r2, #2738	; 0xab2
 8005372:	490d      	ldr	r1, [pc, #52]	; (80053a8 <http_set_cgi_handlers+0x4c>)
 8005374:	480d      	ldr	r0, [pc, #52]	; (80053ac <http_set_cgi_handlers+0x50>)
 8005376:	f00a fd9d 	bl	800feb4 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	dc06      	bgt.n	800538e <http_set_cgi_handlers+0x32>
 8005380:	4b08      	ldr	r3, [pc, #32]	; (80053a4 <http_set_cgi_handlers+0x48>)
 8005382:	f640 22b3 	movw	r2, #2739	; 0xab3
 8005386:	490a      	ldr	r1, [pc, #40]	; (80053b0 <http_set_cgi_handlers+0x54>)
 8005388:	4808      	ldr	r0, [pc, #32]	; (80053ac <http_set_cgi_handlers+0x50>)
 800538a:	f00a fd93 	bl	800feb4 <iprintf>

  httpd_cgis = cgis;
 800538e:	4a09      	ldr	r2, [pc, #36]	; (80053b4 <http_set_cgi_handlers+0x58>)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 8005394:	4a08      	ldr	r2, [pc, #32]	; (80053b8 <http_set_cgi_handlers+0x5c>)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	6013      	str	r3, [r2, #0]
}
 800539a:	bf00      	nop
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	080115e0 	.word	0x080115e0
 80053a8:	0801186c 	.word	0x0801186c
 80053ac:	08011628 	.word	0x08011628
 80053b0:	0801187c 	.word	0x0801187c
 80053b4:	20000518 	.word	0x20000518
 80053b8:	2000051c 	.word	0x2000051c

080053bc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	4603      	mov	r3, r0
 80053c4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80053c6:	88fb      	ldrh	r3, [r7, #6]
 80053c8:	021b      	lsls	r3, r3, #8
 80053ca:	b21a      	sxth	r2, r3
 80053cc:	88fb      	ldrh	r3, [r7, #6]
 80053ce:	0a1b      	lsrs	r3, r3, #8
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	b21b      	sxth	r3, r3
 80053d4:	4313      	orrs	r3, r2
 80053d6:	b21b      	sxth	r3, r3
 80053d8:	b29b      	uxth	r3, r3
}
 80053da:	4618      	mov	r0, r3
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	061a      	lsls	r2, r3, #24
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	021b      	lsls	r3, r3, #8
 80053f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	0a1b      	lsrs	r3, r3, #8
 8005400:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005404:	431a      	orrs	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	0e1b      	lsrs	r3, r3, #24
 800540a:	4313      	orrs	r3, r2
}
 800540c:	4618      	mov	r0, r3
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8005424:	68b8      	ldr	r0, [r7, #8]
 8005426:	f7fa fedd 	bl	80001e4 <strlen>
 800542a:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	e022      	b.n	800547c <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	617b      	str	r3, [r7, #20]
 800543a:	e012      	b.n	8005462 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	781a      	ldrb	r2, [r3, #0]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	429a      	cmp	r2, r3
 8005446:	d109      	bne.n	800545c <lwip_strnstr+0x44>
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	68b9      	ldr	r1, [r7, #8]
 800544c:	6978      	ldr	r0, [r7, #20]
 800544e:	f00a fe01 	bl	8010054 <strncmp>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	e00f      	b.n	800547c <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	3301      	adds	r3, #1
 8005460:	617b      	str	r3, [r7, #20]
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d007      	beq.n	800547a <lwip_strnstr+0x62>
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	441a      	add	r2, r3
 8005470:	68f9      	ldr	r1, [r7, #12]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	440b      	add	r3, r1
 8005476:	429a      	cmp	r2, r3
 8005478:	d9e0      	bls.n	800543c <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3718      	adds	r7, #24
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	607a      	str	r2, [r7, #4]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	1c5a      	adds	r2, r3, #1
 800549c:	603a      	str	r2, [r7, #0]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 80054a2:	7bfa      	ldrb	r2, [r7, #15]
 80054a4:	7bbb      	ldrb	r3, [r7, #14]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d016      	beq.n	80054d8 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 80054aa:	7bfb      	ldrb	r3, [r7, #15]
 80054ac:	f043 0320 	orr.w	r3, r3, #32
 80054b0:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80054b2:	7b7b      	ldrb	r3, [r7, #13]
 80054b4:	2b60      	cmp	r3, #96	; 0x60
 80054b6:	d90c      	bls.n	80054d2 <lwip_stricmp+0x4e>
 80054b8:	7b7b      	ldrb	r3, [r7, #13]
 80054ba:	2b7a      	cmp	r3, #122	; 0x7a
 80054bc:	d809      	bhi.n	80054d2 <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 80054be:	7bbb      	ldrb	r3, [r7, #14]
 80054c0:	f043 0320 	orr.w	r3, r3, #32
 80054c4:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 80054c6:	7b7a      	ldrb	r2, [r7, #13]
 80054c8:	7b3b      	ldrb	r3, [r7, #12]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d003      	beq.n	80054d6 <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e006      	b.n	80054e0 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e004      	b.n	80054e0 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80054d6:	bf00      	nop
      }
    }
  } while (c1 != 0);
 80054d8:	7bfb      	ldrb	r3, [r7, #15]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1d7      	bne.n	800548e <lwip_stricmp+0xa>
  return 0;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80054f2:	2300      	movs	r3, #0
 80054f4:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80054f6:	f000 f8d5 	bl	80056a4 <mem_init>
  memp_init();
 80054fa:	f000 fbdb 	bl	8005cb4 <memp_init>
  pbuf_init();
  netif_init();
 80054fe:	f000 fc93 	bl	8005e28 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005502:	f007 fff7 	bl	800d4f4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005506:	f001 fe55 	bl	80071b4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800550a:	f007 ff69 	bl	800d3e0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800550e:	bf00      	nop
 8005510:	3708      	adds	r7, #8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
	...

08005518 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	4603      	mov	r3, r0
 8005520:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8005522:	4b05      	ldr	r3, [pc, #20]	; (8005538 <ptr_to_mem+0x20>)
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	88fb      	ldrh	r3, [r7, #6]
 8005528:	4413      	add	r3, r2
}
 800552a:	4618      	mov	r0, r3
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	20000524 	.word	0x20000524

0800553c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005544:	4b05      	ldr	r3, [pc, #20]	; (800555c <mem_to_ptr+0x20>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	b29b      	uxth	r3, r3
}
 800554e:	4618      	mov	r0, r3
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	20000524 	.word	0x20000524

08005560 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8005560:	b590      	push	{r4, r7, lr}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005568:	4b45      	ldr	r3, [pc, #276]	; (8005680 <plug_holes+0x120>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	429a      	cmp	r2, r3
 8005570:	d206      	bcs.n	8005580 <plug_holes+0x20>
 8005572:	4b44      	ldr	r3, [pc, #272]	; (8005684 <plug_holes+0x124>)
 8005574:	f240 12df 	movw	r2, #479	; 0x1df
 8005578:	4943      	ldr	r1, [pc, #268]	; (8005688 <plug_holes+0x128>)
 800557a:	4844      	ldr	r0, [pc, #272]	; (800568c <plug_holes+0x12c>)
 800557c:	f00a fc9a 	bl	800feb4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005580:	4b43      	ldr	r3, [pc, #268]	; (8005690 <plug_holes+0x130>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	429a      	cmp	r2, r3
 8005588:	d306      	bcc.n	8005598 <plug_holes+0x38>
 800558a:	4b3e      	ldr	r3, [pc, #248]	; (8005684 <plug_holes+0x124>)
 800558c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005590:	4940      	ldr	r1, [pc, #256]	; (8005694 <plug_holes+0x134>)
 8005592:	483e      	ldr	r0, [pc, #248]	; (800568c <plug_holes+0x12c>)
 8005594:	f00a fc8e 	bl	800feb4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	791b      	ldrb	r3, [r3, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d006      	beq.n	80055ae <plug_holes+0x4e>
 80055a0:	4b38      	ldr	r3, [pc, #224]	; (8005684 <plug_holes+0x124>)
 80055a2:	f240 12e1 	movw	r2, #481	; 0x1e1
 80055a6:	493c      	ldr	r1, [pc, #240]	; (8005698 <plug_holes+0x138>)
 80055a8:	4838      	ldr	r0, [pc, #224]	; (800568c <plug_holes+0x12c>)
 80055aa:	f00a fc83 	bl	800feb4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80055b6:	d906      	bls.n	80055c6 <plug_holes+0x66>
 80055b8:	4b32      	ldr	r3, [pc, #200]	; (8005684 <plug_holes+0x124>)
 80055ba:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80055be:	4937      	ldr	r1, [pc, #220]	; (800569c <plug_holes+0x13c>)
 80055c0:	4832      	ldr	r0, [pc, #200]	; (800568c <plug_holes+0x12c>)
 80055c2:	f00a fc77 	bl	800feb4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	881b      	ldrh	r3, [r3, #0]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7ff ffa4 	bl	8005518 <ptr_to_mem>
 80055d0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d024      	beq.n	8005624 <plug_holes+0xc4>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	791b      	ldrb	r3, [r3, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d120      	bne.n	8005624 <plug_holes+0xc4>
 80055e2:	4b2b      	ldr	r3, [pc, #172]	; (8005690 <plug_holes+0x130>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d01b      	beq.n	8005624 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80055ec:	4b2c      	ldr	r3, [pc, #176]	; (80056a0 <plug_holes+0x140>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d102      	bne.n	80055fc <plug_holes+0x9c>
      lfree = mem;
 80055f6:	4a2a      	ldr	r2, [pc, #168]	; (80056a0 <plug_holes+0x140>)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	881a      	ldrh	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	881b      	ldrh	r3, [r3, #0]
 8005608:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800560c:	d00a      	beq.n	8005624 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	4618      	mov	r0, r3
 8005614:	f7ff ff80 	bl	8005518 <ptr_to_mem>
 8005618:	4604      	mov	r4, r0
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7ff ff8e 	bl	800553c <mem_to_ptr>
 8005620:	4603      	mov	r3, r0
 8005622:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	885b      	ldrh	r3, [r3, #2]
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff ff75 	bl	8005518 <ptr_to_mem>
 800562e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	429a      	cmp	r2, r3
 8005636:	d01f      	beq.n	8005678 <plug_holes+0x118>
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	791b      	ldrb	r3, [r3, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d11b      	bne.n	8005678 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005640:	4b17      	ldr	r3, [pc, #92]	; (80056a0 <plug_holes+0x140>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	429a      	cmp	r2, r3
 8005648:	d102      	bne.n	8005650 <plug_holes+0xf0>
      lfree = pmem;
 800564a:	4a15      	ldr	r2, [pc, #84]	; (80056a0 <plug_holes+0x140>)
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	881a      	ldrh	r2, [r3, #0]
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	881b      	ldrh	r3, [r3, #0]
 800565c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005660:	d00a      	beq.n	8005678 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	4618      	mov	r0, r3
 8005668:	f7ff ff56 	bl	8005518 <ptr_to_mem>
 800566c:	4604      	mov	r4, r0
 800566e:	68b8      	ldr	r0, [r7, #8]
 8005670:	f7ff ff64 	bl	800553c <mem_to_ptr>
 8005674:	4603      	mov	r3, r0
 8005676:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005678:	bf00      	nop
 800567a:	3714      	adds	r7, #20
 800567c:	46bd      	mov	sp, r7
 800567e:	bd90      	pop	{r4, r7, pc}
 8005680:	20000524 	.word	0x20000524
 8005684:	08011898 	.word	0x08011898
 8005688:	080118c8 	.word	0x080118c8
 800568c:	080118e0 	.word	0x080118e0
 8005690:	20000528 	.word	0x20000528
 8005694:	08011908 	.word	0x08011908
 8005698:	08011924 	.word	0x08011924
 800569c:	08011940 	.word	0x08011940
 80056a0:	2000052c 	.word	0x2000052c

080056a4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80056aa:	4b18      	ldr	r3, [pc, #96]	; (800570c <mem_init+0x68>)
 80056ac:	3303      	adds	r3, #3
 80056ae:	f023 0303 	bic.w	r3, r3, #3
 80056b2:	461a      	mov	r2, r3
 80056b4:	4b16      	ldr	r3, [pc, #88]	; (8005710 <mem_init+0x6c>)
 80056b6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80056b8:	4b15      	ldr	r3, [pc, #84]	; (8005710 <mem_init+0x6c>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80056c4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80056d2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80056d6:	f7ff ff1f 	bl	8005518 <ptr_to_mem>
 80056da:	4603      	mov	r3, r0
 80056dc:	4a0d      	ldr	r2, [pc, #52]	; (8005714 <mem_init+0x70>)
 80056de:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80056e0:	4b0c      	ldr	r3, [pc, #48]	; (8005714 <mem_init+0x70>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2201      	movs	r2, #1
 80056e6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80056e8:	4b0a      	ldr	r3, [pc, #40]	; (8005714 <mem_init+0x70>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80056f0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80056f2:	4b08      	ldr	r3, [pc, #32]	; (8005714 <mem_init+0x70>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80056fa:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80056fc:	4b04      	ldr	r3, [pc, #16]	; (8005710 <mem_init+0x6c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a05      	ldr	r2, [pc, #20]	; (8005718 <mem_init+0x74>)
 8005702:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005704:	bf00      	nop
 8005706:	3708      	adds	r7, #8
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	20003820 	.word	0x20003820
 8005710:	20000524 	.word	0x20000524
 8005714:	20000528 	.word	0x20000528
 8005718:	2000052c 	.word	0x2000052c

0800571c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f7ff ff09 	bl	800553c <mem_to_ptr>
 800572a:	4603      	mov	r3, r0
 800572c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	881b      	ldrh	r3, [r3, #0]
 8005732:	4618      	mov	r0, r3
 8005734:	f7ff fef0 	bl	8005518 <ptr_to_mem>
 8005738:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	885b      	ldrh	r3, [r3, #2]
 800573e:	4618      	mov	r0, r3
 8005740:	f7ff feea 	bl	8005518 <ptr_to_mem>
 8005744:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	881b      	ldrh	r3, [r3, #0]
 800574a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800574e:	d818      	bhi.n	8005782 <mem_link_valid+0x66>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	885b      	ldrh	r3, [r3, #2]
 8005754:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005758:	d813      	bhi.n	8005782 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800575e:	8afa      	ldrh	r2, [r7, #22]
 8005760:	429a      	cmp	r2, r3
 8005762:	d004      	beq.n	800576e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	881b      	ldrh	r3, [r3, #0]
 8005768:	8afa      	ldrh	r2, [r7, #22]
 800576a:	429a      	cmp	r2, r3
 800576c:	d109      	bne.n	8005782 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800576e:	4b08      	ldr	r3, [pc, #32]	; (8005790 <mem_link_valid+0x74>)
 8005770:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	429a      	cmp	r2, r3
 8005776:	d006      	beq.n	8005786 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	885b      	ldrh	r3, [r3, #2]
 800577c:	8afa      	ldrh	r2, [r7, #22]
 800577e:	429a      	cmp	r2, r3
 8005780:	d001      	beq.n	8005786 <mem_link_valid+0x6a>
    return 0;
 8005782:	2300      	movs	r3, #0
 8005784:	e000      	b.n	8005788 <mem_link_valid+0x6c>
  }
  return 1;
 8005786:	2301      	movs	r3, #1
}
 8005788:	4618      	mov	r0, r3
 800578a:	3718      	adds	r7, #24
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	20000528 	.word	0x20000528

08005794 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d04c      	beq.n	800583c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f003 0303 	and.w	r3, r3, #3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d007      	beq.n	80057bc <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80057ac:	4b25      	ldr	r3, [pc, #148]	; (8005844 <mem_free+0xb0>)
 80057ae:	f240 2273 	movw	r2, #627	; 0x273
 80057b2:	4925      	ldr	r1, [pc, #148]	; (8005848 <mem_free+0xb4>)
 80057b4:	4825      	ldr	r0, [pc, #148]	; (800584c <mem_free+0xb8>)
 80057b6:	f00a fb7d 	bl	800feb4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80057ba:	e040      	b.n	800583e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	3b08      	subs	r3, #8
 80057c0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80057c2:	4b23      	ldr	r3, [pc, #140]	; (8005850 <mem_free+0xbc>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d306      	bcc.n	80057da <mem_free+0x46>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f103 020c 	add.w	r2, r3, #12
 80057d2:	4b20      	ldr	r3, [pc, #128]	; (8005854 <mem_free+0xc0>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d907      	bls.n	80057ea <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80057da:	4b1a      	ldr	r3, [pc, #104]	; (8005844 <mem_free+0xb0>)
 80057dc:	f240 227f 	movw	r2, #639	; 0x27f
 80057e0:	491d      	ldr	r1, [pc, #116]	; (8005858 <mem_free+0xc4>)
 80057e2:	481a      	ldr	r0, [pc, #104]	; (800584c <mem_free+0xb8>)
 80057e4:	f00a fb66 	bl	800feb4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80057e8:	e029      	b.n	800583e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	791b      	ldrb	r3, [r3, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d107      	bne.n	8005802 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80057f2:	4b14      	ldr	r3, [pc, #80]	; (8005844 <mem_free+0xb0>)
 80057f4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80057f8:	4918      	ldr	r1, [pc, #96]	; (800585c <mem_free+0xc8>)
 80057fa:	4814      	ldr	r0, [pc, #80]	; (800584c <mem_free+0xb8>)
 80057fc:	f00a fb5a 	bl	800feb4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005800:	e01d      	b.n	800583e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f7ff ff8a 	bl	800571c <mem_link_valid>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d107      	bne.n	800581e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800580e:	4b0d      	ldr	r3, [pc, #52]	; (8005844 <mem_free+0xb0>)
 8005810:	f240 2295 	movw	r2, #661	; 0x295
 8005814:	4912      	ldr	r1, [pc, #72]	; (8005860 <mem_free+0xcc>)
 8005816:	480d      	ldr	r0, [pc, #52]	; (800584c <mem_free+0xb8>)
 8005818:	f00a fb4c 	bl	800feb4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800581c:	e00f      	b.n	800583e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005824:	4b0f      	ldr	r3, [pc, #60]	; (8005864 <mem_free+0xd0>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	429a      	cmp	r2, r3
 800582c:	d202      	bcs.n	8005834 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800582e:	4a0d      	ldr	r2, [pc, #52]	; (8005864 <mem_free+0xd0>)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f7ff fe93 	bl	8005560 <plug_holes>
 800583a:	e000      	b.n	800583e <mem_free+0xaa>
    return;
 800583c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	08011898 	.word	0x08011898
 8005848:	0801196c 	.word	0x0801196c
 800584c:	080118e0 	.word	0x080118e0
 8005850:	20000524 	.word	0x20000524
 8005854:	20000528 	.word	0x20000528
 8005858:	08011990 	.word	0x08011990
 800585c:	080119ac 	.word	0x080119ac
 8005860:	080119d4 	.word	0x080119d4
 8005864:	2000052c 	.word	0x2000052c

08005868 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b088      	sub	sp, #32
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	460b      	mov	r3, r1
 8005872:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005874:	887b      	ldrh	r3, [r7, #2]
 8005876:	3303      	adds	r3, #3
 8005878:	b29b      	uxth	r3, r3
 800587a:	f023 0303 	bic.w	r3, r3, #3
 800587e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005880:	8bfb      	ldrh	r3, [r7, #30]
 8005882:	2b0b      	cmp	r3, #11
 8005884:	d801      	bhi.n	800588a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005886:	230c      	movs	r3, #12
 8005888:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800588a:	8bfb      	ldrh	r3, [r7, #30]
 800588c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005890:	d803      	bhi.n	800589a <mem_trim+0x32>
 8005892:	8bfa      	ldrh	r2, [r7, #30]
 8005894:	887b      	ldrh	r3, [r7, #2]
 8005896:	429a      	cmp	r2, r3
 8005898:	d201      	bcs.n	800589e <mem_trim+0x36>
    return NULL;
 800589a:	2300      	movs	r3, #0
 800589c:	e0cc      	b.n	8005a38 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800589e:	4b68      	ldr	r3, [pc, #416]	; (8005a40 <mem_trim+0x1d8>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d304      	bcc.n	80058b2 <mem_trim+0x4a>
 80058a8:	4b66      	ldr	r3, [pc, #408]	; (8005a44 <mem_trim+0x1dc>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d306      	bcc.n	80058c0 <mem_trim+0x58>
 80058b2:	4b65      	ldr	r3, [pc, #404]	; (8005a48 <mem_trim+0x1e0>)
 80058b4:	f240 22d1 	movw	r2, #721	; 0x2d1
 80058b8:	4964      	ldr	r1, [pc, #400]	; (8005a4c <mem_trim+0x1e4>)
 80058ba:	4865      	ldr	r0, [pc, #404]	; (8005a50 <mem_trim+0x1e8>)
 80058bc:	f00a fafa 	bl	800feb4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80058c0:	4b5f      	ldr	r3, [pc, #380]	; (8005a40 <mem_trim+0x1d8>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d304      	bcc.n	80058d4 <mem_trim+0x6c>
 80058ca:	4b5e      	ldr	r3, [pc, #376]	; (8005a44 <mem_trim+0x1dc>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d301      	bcc.n	80058d8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	e0af      	b.n	8005a38 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	3b08      	subs	r3, #8
 80058dc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80058de:	69b8      	ldr	r0, [r7, #24]
 80058e0:	f7ff fe2c 	bl	800553c <mem_to_ptr>
 80058e4:	4603      	mov	r3, r0
 80058e6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	881a      	ldrh	r2, [r3, #0]
 80058ec:	8afb      	ldrh	r3, [r7, #22]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	3b08      	subs	r3, #8
 80058f4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80058f6:	8bfa      	ldrh	r2, [r7, #30]
 80058f8:	8abb      	ldrh	r3, [r7, #20]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d906      	bls.n	800590c <mem_trim+0xa4>
 80058fe:	4b52      	ldr	r3, [pc, #328]	; (8005a48 <mem_trim+0x1e0>)
 8005900:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8005904:	4953      	ldr	r1, [pc, #332]	; (8005a54 <mem_trim+0x1ec>)
 8005906:	4852      	ldr	r0, [pc, #328]	; (8005a50 <mem_trim+0x1e8>)
 8005908:	f00a fad4 	bl	800feb4 <iprintf>
  if (newsize > size) {
 800590c:	8bfa      	ldrh	r2, [r7, #30]
 800590e:	8abb      	ldrh	r3, [r7, #20]
 8005910:	429a      	cmp	r2, r3
 8005912:	d901      	bls.n	8005918 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005914:	2300      	movs	r3, #0
 8005916:	e08f      	b.n	8005a38 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005918:	8bfa      	ldrh	r2, [r7, #30]
 800591a:	8abb      	ldrh	r3, [r7, #20]
 800591c:	429a      	cmp	r2, r3
 800591e:	d101      	bne.n	8005924 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	e089      	b.n	8005a38 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	4618      	mov	r0, r3
 800592a:	f7ff fdf5 	bl	8005518 <ptr_to_mem>
 800592e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	791b      	ldrb	r3, [r3, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d13f      	bne.n	80059b8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	881b      	ldrh	r3, [r3, #0]
 800593c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005940:	d106      	bne.n	8005950 <mem_trim+0xe8>
 8005942:	4b41      	ldr	r3, [pc, #260]	; (8005a48 <mem_trim+0x1e0>)
 8005944:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005948:	4943      	ldr	r1, [pc, #268]	; (8005a58 <mem_trim+0x1f0>)
 800594a:	4841      	ldr	r0, [pc, #260]	; (8005a50 <mem_trim+0x1e8>)
 800594c:	f00a fab2 	bl	800feb4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	881b      	ldrh	r3, [r3, #0]
 8005954:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005956:	8afa      	ldrh	r2, [r7, #22]
 8005958:	8bfb      	ldrh	r3, [r7, #30]
 800595a:	4413      	add	r3, r2
 800595c:	b29b      	uxth	r3, r3
 800595e:	3308      	adds	r3, #8
 8005960:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005962:	4b3e      	ldr	r3, [pc, #248]	; (8005a5c <mem_trim+0x1f4>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	429a      	cmp	r2, r3
 800596a:	d106      	bne.n	800597a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800596c:	89fb      	ldrh	r3, [r7, #14]
 800596e:	4618      	mov	r0, r3
 8005970:	f7ff fdd2 	bl	8005518 <ptr_to_mem>
 8005974:	4603      	mov	r3, r0
 8005976:	4a39      	ldr	r2, [pc, #228]	; (8005a5c <mem_trim+0x1f4>)
 8005978:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800597a:	89fb      	ldrh	r3, [r7, #14]
 800597c:	4618      	mov	r0, r3
 800597e:	f7ff fdcb 	bl	8005518 <ptr_to_mem>
 8005982:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	2200      	movs	r2, #0
 8005988:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	89ba      	ldrh	r2, [r7, #12]
 800598e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	8afa      	ldrh	r2, [r7, #22]
 8005994:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	89fa      	ldrh	r2, [r7, #14]
 800599a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80059a4:	d047      	beq.n	8005a36 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7ff fdb4 	bl	8005518 <ptr_to_mem>
 80059b0:	4602      	mov	r2, r0
 80059b2:	89fb      	ldrh	r3, [r7, #14]
 80059b4:	8053      	strh	r3, [r2, #2]
 80059b6:	e03e      	b.n	8005a36 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80059b8:	8bfb      	ldrh	r3, [r7, #30]
 80059ba:	f103 0214 	add.w	r2, r3, #20
 80059be:	8abb      	ldrh	r3, [r7, #20]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d838      	bhi.n	8005a36 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80059c4:	8afa      	ldrh	r2, [r7, #22]
 80059c6:	8bfb      	ldrh	r3, [r7, #30]
 80059c8:	4413      	add	r3, r2
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	3308      	adds	r3, #8
 80059ce:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	881b      	ldrh	r3, [r3, #0]
 80059d4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80059d8:	d106      	bne.n	80059e8 <mem_trim+0x180>
 80059da:	4b1b      	ldr	r3, [pc, #108]	; (8005a48 <mem_trim+0x1e0>)
 80059dc:	f240 3216 	movw	r2, #790	; 0x316
 80059e0:	491d      	ldr	r1, [pc, #116]	; (8005a58 <mem_trim+0x1f0>)
 80059e2:	481b      	ldr	r0, [pc, #108]	; (8005a50 <mem_trim+0x1e8>)
 80059e4:	f00a fa66 	bl	800feb4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80059e8:	89fb      	ldrh	r3, [r7, #14]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7ff fd94 	bl	8005518 <ptr_to_mem>
 80059f0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80059f2:	4b1a      	ldr	r3, [pc, #104]	; (8005a5c <mem_trim+0x1f4>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d202      	bcs.n	8005a02 <mem_trim+0x19a>
      lfree = mem2;
 80059fc:	4a17      	ldr	r2, [pc, #92]	; (8005a5c <mem_trim+0x1f4>)
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	2200      	movs	r2, #0
 8005a06:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	881a      	ldrh	r2, [r3, #0]
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	8afa      	ldrh	r2, [r7, #22]
 8005a14:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	89fa      	ldrh	r2, [r7, #14]
 8005a1a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	881b      	ldrh	r3, [r3, #0]
 8005a20:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005a24:	d007      	beq.n	8005a36 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7ff fd74 	bl	8005518 <ptr_to_mem>
 8005a30:	4602      	mov	r2, r0
 8005a32:	89fb      	ldrh	r3, [r7, #14]
 8005a34:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005a36:	687b      	ldr	r3, [r7, #4]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3720      	adds	r7, #32
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	20000524 	.word	0x20000524
 8005a44:	20000528 	.word	0x20000528
 8005a48:	08011898 	.word	0x08011898
 8005a4c:	08011a08 	.word	0x08011a08
 8005a50:	080118e0 	.word	0x080118e0
 8005a54:	08011a20 	.word	0x08011a20
 8005a58:	08011a40 	.word	0x08011a40
 8005a5c:	2000052c 	.word	0x2000052c

08005a60 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b088      	sub	sp, #32
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	4603      	mov	r3, r0
 8005a68:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005a6a:	88fb      	ldrh	r3, [r7, #6]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <mem_malloc+0x14>
    return NULL;
 8005a70:	2300      	movs	r3, #0
 8005a72:	e0d9      	b.n	8005c28 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005a74:	88fb      	ldrh	r3, [r7, #6]
 8005a76:	3303      	adds	r3, #3
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	f023 0303 	bic.w	r3, r3, #3
 8005a7e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005a80:	8bbb      	ldrh	r3, [r7, #28]
 8005a82:	2b0b      	cmp	r3, #11
 8005a84:	d801      	bhi.n	8005a8a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005a86:	230c      	movs	r3, #12
 8005a88:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005a8a:	8bbb      	ldrh	r3, [r7, #28]
 8005a8c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005a90:	d803      	bhi.n	8005a9a <mem_malloc+0x3a>
 8005a92:	8bba      	ldrh	r2, [r7, #28]
 8005a94:	88fb      	ldrh	r3, [r7, #6]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d201      	bcs.n	8005a9e <mem_malloc+0x3e>
    return NULL;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	e0c4      	b.n	8005c28 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005a9e:	4b64      	ldr	r3, [pc, #400]	; (8005c30 <mem_malloc+0x1d0>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7ff fd4a 	bl	800553c <mem_to_ptr>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	83fb      	strh	r3, [r7, #30]
 8005aac:	e0b4      	b.n	8005c18 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005aae:	8bfb      	ldrh	r3, [r7, #30]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7ff fd31 	bl	8005518 <ptr_to_mem>
 8005ab6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	791b      	ldrb	r3, [r3, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f040 80a4 	bne.w	8005c0a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	881b      	ldrh	r3, [r3, #0]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	8bfb      	ldrh	r3, [r7, #30]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	f1a3 0208 	sub.w	r2, r3, #8
 8005ad0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	f0c0 8099 	bcc.w	8005c0a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	881b      	ldrh	r3, [r3, #0]
 8005adc:	461a      	mov	r2, r3
 8005ade:	8bfb      	ldrh	r3, [r7, #30]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	f1a3 0208 	sub.w	r2, r3, #8
 8005ae6:	8bbb      	ldrh	r3, [r7, #28]
 8005ae8:	3314      	adds	r3, #20
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d333      	bcc.n	8005b56 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005aee:	8bfa      	ldrh	r2, [r7, #30]
 8005af0:	8bbb      	ldrh	r3, [r7, #28]
 8005af2:	4413      	add	r3, r2
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	3308      	adds	r3, #8
 8005af8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005afa:	8a7b      	ldrh	r3, [r7, #18]
 8005afc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005b00:	d106      	bne.n	8005b10 <mem_malloc+0xb0>
 8005b02:	4b4c      	ldr	r3, [pc, #304]	; (8005c34 <mem_malloc+0x1d4>)
 8005b04:	f240 3287 	movw	r2, #903	; 0x387
 8005b08:	494b      	ldr	r1, [pc, #300]	; (8005c38 <mem_malloc+0x1d8>)
 8005b0a:	484c      	ldr	r0, [pc, #304]	; (8005c3c <mem_malloc+0x1dc>)
 8005b0c:	f00a f9d2 	bl	800feb4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005b10:	8a7b      	ldrh	r3, [r7, #18]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7ff fd00 	bl	8005518 <ptr_to_mem>
 8005b18:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	881a      	ldrh	r2, [r3, #0]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8bfa      	ldrh	r2, [r7, #30]
 8005b2c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	8a7a      	ldrh	r2, [r7, #18]
 8005b32:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	2201      	movs	r2, #1
 8005b38:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	881b      	ldrh	r3, [r3, #0]
 8005b3e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005b42:	d00b      	beq.n	8005b5c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7ff fce5 	bl	8005518 <ptr_to_mem>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	8a7b      	ldrh	r3, [r7, #18]
 8005b52:	8053      	strh	r3, [r2, #2]
 8005b54:	e002      	b.n	8005b5c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005b5c:	4b34      	ldr	r3, [pc, #208]	; (8005c30 <mem_malloc+0x1d0>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d127      	bne.n	8005bb6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005b66:	4b32      	ldr	r3, [pc, #200]	; (8005c30 <mem_malloc+0x1d0>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005b6c:	e005      	b.n	8005b7a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	881b      	ldrh	r3, [r3, #0]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7ff fcd0 	bl	8005518 <ptr_to_mem>
 8005b78:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	791b      	ldrb	r3, [r3, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d004      	beq.n	8005b8c <mem_malloc+0x12c>
 8005b82:	4b2f      	ldr	r3, [pc, #188]	; (8005c40 <mem_malloc+0x1e0>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d1f0      	bne.n	8005b6e <mem_malloc+0x10e>
          }
          lfree = cur;
 8005b8c:	4a28      	ldr	r2, [pc, #160]	; (8005c30 <mem_malloc+0x1d0>)
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005b92:	4b27      	ldr	r3, [pc, #156]	; (8005c30 <mem_malloc+0x1d0>)
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	4b2a      	ldr	r3, [pc, #168]	; (8005c40 <mem_malloc+0x1e0>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d00b      	beq.n	8005bb6 <mem_malloc+0x156>
 8005b9e:	4b24      	ldr	r3, [pc, #144]	; (8005c30 <mem_malloc+0x1d0>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	791b      	ldrb	r3, [r3, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d006      	beq.n	8005bb6 <mem_malloc+0x156>
 8005ba8:	4b22      	ldr	r3, [pc, #136]	; (8005c34 <mem_malloc+0x1d4>)
 8005baa:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005bae:	4925      	ldr	r1, [pc, #148]	; (8005c44 <mem_malloc+0x1e4>)
 8005bb0:	4822      	ldr	r0, [pc, #136]	; (8005c3c <mem_malloc+0x1dc>)
 8005bb2:	f00a f97f 	bl	800feb4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005bb6:	8bba      	ldrh	r2, [r7, #28]
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	4413      	add	r3, r2
 8005bbc:	3308      	adds	r3, #8
 8005bbe:	4a20      	ldr	r2, [pc, #128]	; (8005c40 <mem_malloc+0x1e0>)
 8005bc0:	6812      	ldr	r2, [r2, #0]
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d906      	bls.n	8005bd4 <mem_malloc+0x174>
 8005bc6:	4b1b      	ldr	r3, [pc, #108]	; (8005c34 <mem_malloc+0x1d4>)
 8005bc8:	f240 32b9 	movw	r2, #953	; 0x3b9
 8005bcc:	491e      	ldr	r1, [pc, #120]	; (8005c48 <mem_malloc+0x1e8>)
 8005bce:	481b      	ldr	r0, [pc, #108]	; (8005c3c <mem_malloc+0x1dc>)
 8005bd0:	f00a f970 	bl	800feb4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f003 0303 	and.w	r3, r3, #3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d006      	beq.n	8005bec <mem_malloc+0x18c>
 8005bde:	4b15      	ldr	r3, [pc, #84]	; (8005c34 <mem_malloc+0x1d4>)
 8005be0:	f240 32bb 	movw	r2, #955	; 0x3bb
 8005be4:	4919      	ldr	r1, [pc, #100]	; (8005c4c <mem_malloc+0x1ec>)
 8005be6:	4815      	ldr	r0, [pc, #84]	; (8005c3c <mem_malloc+0x1dc>)
 8005be8:	f00a f964 	bl	800feb4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f003 0303 	and.w	r3, r3, #3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d006      	beq.n	8005c04 <mem_malloc+0x1a4>
 8005bf6:	4b0f      	ldr	r3, [pc, #60]	; (8005c34 <mem_malloc+0x1d4>)
 8005bf8:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005bfc:	4914      	ldr	r1, [pc, #80]	; (8005c50 <mem_malloc+0x1f0>)
 8005bfe:	480f      	ldr	r0, [pc, #60]	; (8005c3c <mem_malloc+0x1dc>)
 8005c00:	f00a f958 	bl	800feb4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	3308      	adds	r3, #8
 8005c08:	e00e      	b.n	8005c28 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005c0a:	8bfb      	ldrh	r3, [r7, #30]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7ff fc83 	bl	8005518 <ptr_to_mem>
 8005c12:	4603      	mov	r3, r0
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005c18:	8bfa      	ldrh	r2, [r7, #30]
 8005c1a:	8bbb      	ldrh	r3, [r7, #28]
 8005c1c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8005c20:	429a      	cmp	r2, r3
 8005c22:	f4ff af44 	bcc.w	8005aae <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3720      	adds	r7, #32
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	2000052c 	.word	0x2000052c
 8005c34:	08011898 	.word	0x08011898
 8005c38:	08011a40 	.word	0x08011a40
 8005c3c:	080118e0 	.word	0x080118e0
 8005c40:	20000528 	.word	0x20000528
 8005c44:	08011a54 	.word	0x08011a54
 8005c48:	08011a70 	.word	0x08011a70
 8005c4c:	08011aa0 	.word	0x08011aa0
 8005c50:	08011ad0 	.word	0x08011ad0

08005c54 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	2200      	movs	r2, #0
 8005c62:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	3303      	adds	r3, #3
 8005c6a:	f023 0303 	bic.w	r3, r3, #3
 8005c6e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005c70:	2300      	movs	r3, #0
 8005c72:	60fb      	str	r3, [r7, #12]
 8005c74:	e011      	b.n	8005c9a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	881b      	ldrh	r3, [r3, #0]
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	4413      	add	r3, r2
 8005c92:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	3301      	adds	r3, #1
 8005c98:	60fb      	str	r3, [r7, #12]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	885b      	ldrh	r3, [r3, #2]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	dbe7      	blt.n	8005c76 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005ca6:	bf00      	nop
 8005ca8:	bf00      	nop
 8005caa:	3714      	adds	r7, #20
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005cba:	2300      	movs	r3, #0
 8005cbc:	80fb      	strh	r3, [r7, #6]
 8005cbe:	e009      	b.n	8005cd4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005cc0:	88fb      	ldrh	r3, [r7, #6]
 8005cc2:	4a08      	ldr	r2, [pc, #32]	; (8005ce4 <memp_init+0x30>)
 8005cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7ff ffc3 	bl	8005c54 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005cce:	88fb      	ldrh	r3, [r7, #6]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	80fb      	strh	r3, [r7, #6]
 8005cd4:	88fb      	ldrh	r3, [r7, #6]
 8005cd6:	2b08      	cmp	r3, #8
 8005cd8:	d9f2      	bls.n	8005cc0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005cda:	bf00      	nop
 8005cdc:	bf00      	nop
 8005cde:	3708      	adds	r7, #8
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	080211c8 	.word	0x080211c8

08005ce8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d012      	beq.n	8005d24 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	6812      	ldr	r2, [r2, #0]
 8005d06:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f003 0303 	and.w	r3, r3, #3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d006      	beq.n	8005d20 <do_memp_malloc_pool+0x38>
 8005d12:	4b07      	ldr	r3, [pc, #28]	; (8005d30 <do_memp_malloc_pool+0x48>)
 8005d14:	f44f 728c 	mov.w	r2, #280	; 0x118
 8005d18:	4906      	ldr	r1, [pc, #24]	; (8005d34 <do_memp_malloc_pool+0x4c>)
 8005d1a:	4807      	ldr	r0, [pc, #28]	; (8005d38 <do_memp_malloc_pool+0x50>)
 8005d1c:	f00a f8ca 	bl	800feb4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	e000      	b.n	8005d26 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	08011af4 	.word	0x08011af4
 8005d34:	08011b24 	.word	0x08011b24
 8005d38:	08011b48 	.word	0x08011b48

08005d3c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	4603      	mov	r3, r0
 8005d44:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005d46:	79fb      	ldrb	r3, [r7, #7]
 8005d48:	2b08      	cmp	r3, #8
 8005d4a:	d908      	bls.n	8005d5e <memp_malloc+0x22>
 8005d4c:	4b0a      	ldr	r3, [pc, #40]	; (8005d78 <memp_malloc+0x3c>)
 8005d4e:	f240 1257 	movw	r2, #343	; 0x157
 8005d52:	490a      	ldr	r1, [pc, #40]	; (8005d7c <memp_malloc+0x40>)
 8005d54:	480a      	ldr	r0, [pc, #40]	; (8005d80 <memp_malloc+0x44>)
 8005d56:	f00a f8ad 	bl	800feb4 <iprintf>
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	e008      	b.n	8005d70 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005d5e:	79fb      	ldrb	r3, [r7, #7]
 8005d60:	4a08      	ldr	r2, [pc, #32]	; (8005d84 <memp_malloc+0x48>)
 8005d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7ff ffbe 	bl	8005ce8 <do_memp_malloc_pool>
 8005d6c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3710      	adds	r7, #16
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	08011af4 	.word	0x08011af4
 8005d7c:	08011b84 	.word	0x08011b84
 8005d80:	08011b48 	.word	0x08011b48
 8005d84:	080211c8 	.word	0x080211c8

08005d88 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	f003 0303 	and.w	r3, r3, #3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d006      	beq.n	8005daa <do_memp_free_pool+0x22>
 8005d9c:	4b0a      	ldr	r3, [pc, #40]	; (8005dc8 <do_memp_free_pool+0x40>)
 8005d9e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8005da2:	490a      	ldr	r1, [pc, #40]	; (8005dcc <do_memp_free_pool+0x44>)
 8005da4:	480a      	ldr	r0, [pc, #40]	; (8005dd0 <do_memp_free_pool+0x48>)
 8005da6:	f00a f885 	bl	800feb4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005dc0:	bf00      	nop
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	08011af4 	.word	0x08011af4
 8005dcc:	08011ba4 	.word	0x08011ba4
 8005dd0:	08011b48 	.word	0x08011b48

08005dd4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	4603      	mov	r3, r0
 8005ddc:	6039      	str	r1, [r7, #0]
 8005dde:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005de0:	79fb      	ldrb	r3, [r7, #7]
 8005de2:	2b08      	cmp	r3, #8
 8005de4:	d907      	bls.n	8005df6 <memp_free+0x22>
 8005de6:	4b0c      	ldr	r3, [pc, #48]	; (8005e18 <memp_free+0x44>)
 8005de8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005dec:	490b      	ldr	r1, [pc, #44]	; (8005e1c <memp_free+0x48>)
 8005dee:	480c      	ldr	r0, [pc, #48]	; (8005e20 <memp_free+0x4c>)
 8005df0:	f00a f860 	bl	800feb4 <iprintf>
 8005df4:	e00c      	b.n	8005e10 <memp_free+0x3c>

  if (mem == NULL) {
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d008      	beq.n	8005e0e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005dfc:	79fb      	ldrb	r3, [r7, #7]
 8005dfe:	4a09      	ldr	r2, [pc, #36]	; (8005e24 <memp_free+0x50>)
 8005e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e04:	6839      	ldr	r1, [r7, #0]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7ff ffbe 	bl	8005d88 <do_memp_free_pool>
 8005e0c:	e000      	b.n	8005e10 <memp_free+0x3c>
    return;
 8005e0e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005e10:	3708      	adds	r7, #8
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	08011af4 	.word	0x08011af4
 8005e1c:	08011bc4 	.word	0x08011bc4
 8005e20:	08011b48 	.word	0x08011b48
 8005e24:	080211c8 	.word	0x080211c8

08005e28 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005e2c:	bf00      	nop
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
	...

08005e38 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b086      	sub	sp, #24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
 8005e44:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d108      	bne.n	8005e5e <netif_add+0x26>
 8005e4c:	4b57      	ldr	r3, [pc, #348]	; (8005fac <netif_add+0x174>)
 8005e4e:	f240 1227 	movw	r2, #295	; 0x127
 8005e52:	4957      	ldr	r1, [pc, #348]	; (8005fb0 <netif_add+0x178>)
 8005e54:	4857      	ldr	r0, [pc, #348]	; (8005fb4 <netif_add+0x17c>)
 8005e56:	f00a f82d 	bl	800feb4 <iprintf>
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	e0a2      	b.n	8005fa4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d108      	bne.n	8005e76 <netif_add+0x3e>
 8005e64:	4b51      	ldr	r3, [pc, #324]	; (8005fac <netif_add+0x174>)
 8005e66:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005e6a:	4953      	ldr	r1, [pc, #332]	; (8005fb8 <netif_add+0x180>)
 8005e6c:	4851      	ldr	r0, [pc, #324]	; (8005fb4 <netif_add+0x17c>)
 8005e6e:	f00a f821 	bl	800feb4 <iprintf>
 8005e72:	2300      	movs	r3, #0
 8005e74:	e096      	b.n	8005fa4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d101      	bne.n	8005e80 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005e7c:	4b4f      	ldr	r3, [pc, #316]	; (8005fbc <netif_add+0x184>)
 8005e7e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005e86:	4b4d      	ldr	r3, [pc, #308]	; (8005fbc <netif_add+0x184>)
 8005e88:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005e90:	4b4a      	ldr	r3, [pc, #296]	; (8005fbc <netif_add+0x184>)
 8005e92:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	4a45      	ldr	r2, [pc, #276]	; (8005fc0 <netif_add+0x188>)
 8005eaa:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6a3a      	ldr	r2, [r7, #32]
 8005ec4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005ec6:	4b3f      	ldr	r3, [pc, #252]	; (8005fc4 <netif_add+0x18c>)
 8005ec8:	781a      	ldrb	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ed4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	68b9      	ldr	r1, [r7, #8]
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f000 f913 	bl	8006108 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	4798      	blx	r3
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <netif_add+0xba>
    return NULL;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	e058      	b.n	8005fa4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ef8:	2bff      	cmp	r3, #255	; 0xff
 8005efa:	d103      	bne.n	8005f04 <netif_add+0xcc>
        netif->num = 0;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8005f04:	2300      	movs	r3, #0
 8005f06:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005f08:	4b2f      	ldr	r3, [pc, #188]	; (8005fc8 <netif_add+0x190>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	617b      	str	r3, [r7, #20]
 8005f0e:	e02b      	b.n	8005f68 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d106      	bne.n	8005f26 <netif_add+0xee>
 8005f18:	4b24      	ldr	r3, [pc, #144]	; (8005fac <netif_add+0x174>)
 8005f1a:	f240 128b 	movw	r2, #395	; 0x18b
 8005f1e:	492b      	ldr	r1, [pc, #172]	; (8005fcc <netif_add+0x194>)
 8005f20:	4824      	ldr	r0, [pc, #144]	; (8005fb4 <netif_add+0x17c>)
 8005f22:	f009 ffc7 	bl	800feb4 <iprintf>
        num_netifs++;
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	2bff      	cmp	r3, #255	; 0xff
 8005f30:	dd06      	ble.n	8005f40 <netif_add+0x108>
 8005f32:	4b1e      	ldr	r3, [pc, #120]	; (8005fac <netif_add+0x174>)
 8005f34:	f240 128d 	movw	r2, #397	; 0x18d
 8005f38:	4925      	ldr	r1, [pc, #148]	; (8005fd0 <netif_add+0x198>)
 8005f3a:	481e      	ldr	r0, [pc, #120]	; (8005fb4 <netif_add+0x17c>)
 8005f3c:	f009 ffba 	bl	800feb4 <iprintf>
        if (netif2->num == netif->num) {
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d108      	bne.n	8005f62 <netif_add+0x12a>
          netif->num++;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f56:	3301      	adds	r3, #1
 8005f58:	b2da      	uxtb	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8005f60:	e005      	b.n	8005f6e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	617b      	str	r3, [r7, #20]
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1d0      	bne.n	8005f10 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1be      	bne.n	8005ef2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f7a:	2bfe      	cmp	r3, #254	; 0xfe
 8005f7c:	d103      	bne.n	8005f86 <netif_add+0x14e>
    netif_num = 0;
 8005f7e:	4b11      	ldr	r3, [pc, #68]	; (8005fc4 <netif_add+0x18c>)
 8005f80:	2200      	movs	r2, #0
 8005f82:	701a      	strb	r2, [r3, #0]
 8005f84:	e006      	b.n	8005f94 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	4b0c      	ldr	r3, [pc, #48]	; (8005fc4 <netif_add+0x18c>)
 8005f92:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005f94:	4b0c      	ldr	r3, [pc, #48]	; (8005fc8 <netif_add+0x190>)
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005f9c:	4a0a      	ldr	r2, [pc, #40]	; (8005fc8 <netif_add+0x190>)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3718      	adds	r7, #24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	08011be0 	.word	0x08011be0
 8005fb0:	08011c74 	.word	0x08011c74
 8005fb4:	08011c30 	.word	0x08011c30
 8005fb8:	08011c90 	.word	0x08011c90
 8005fbc:	0802122c 	.word	0x0802122c
 8005fc0:	0800631b 	.word	0x0800631b
 8005fc4:	20000554 	.word	0x20000554
 8005fc8:	20006d3c 	.word	0x20006d3c
 8005fcc:	08011cb4 	.word	0x08011cb4
 8005fd0:	08011cc8 	.word	0x08011cc8

08005fd4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005fde:	6839      	ldr	r1, [r7, #0]
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f002 fed5 	bl	8008d90 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005fe6:	6839      	ldr	r1, [r7, #0]
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f007 fc0d 	bl	800d808 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8005fee:	bf00      	nop
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
	...

08005ff8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d106      	bne.n	8006018 <netif_do_set_ipaddr+0x20>
 800600a:	4b1d      	ldr	r3, [pc, #116]	; (8006080 <netif_do_set_ipaddr+0x88>)
 800600c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8006010:	491c      	ldr	r1, [pc, #112]	; (8006084 <netif_do_set_ipaddr+0x8c>)
 8006012:	481d      	ldr	r0, [pc, #116]	; (8006088 <netif_do_set_ipaddr+0x90>)
 8006014:	f009 ff4e 	bl	800feb4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d106      	bne.n	800602c <netif_do_set_ipaddr+0x34>
 800601e:	4b18      	ldr	r3, [pc, #96]	; (8006080 <netif_do_set_ipaddr+0x88>)
 8006020:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8006024:	4917      	ldr	r1, [pc, #92]	; (8006084 <netif_do_set_ipaddr+0x8c>)
 8006026:	4818      	ldr	r0, [pc, #96]	; (8006088 <netif_do_set_ipaddr+0x90>)
 8006028:	f009 ff44 	bl	800feb4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	3304      	adds	r3, #4
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	429a      	cmp	r2, r3
 8006038:	d01c      	beq.n	8006074 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	3304      	adds	r3, #4
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800604a:	f107 0314 	add.w	r3, r7, #20
 800604e:	4619      	mov	r1, r3
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f7ff ffbf 	bl	8005fd4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d002      	beq.n	8006062 <netif_do_set_ipaddr+0x6a>
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	e000      	b.n	8006064 <netif_do_set_ipaddr+0x6c>
 8006062:	2300      	movs	r3, #0
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006068:	2101      	movs	r1, #1
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f000 f8d2 	bl	8006214 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8006070:	2301      	movs	r3, #1
 8006072:	e000      	b.n	8006076 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3718      	adds	r7, #24
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	08011be0 	.word	0x08011be0
 8006084:	08011cf8 	.word	0x08011cf8
 8006088:	08011c30 	.word	0x08011c30

0800608c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	3308      	adds	r3, #8
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d00a      	beq.n	80060bc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d002      	beq.n	80060b2 <netif_do_set_netmask+0x26>
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	e000      	b.n	80060b4 <netif_do_set_netmask+0x28>
 80060b2:	2300      	movs	r3, #0
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80060b8:	2301      	movs	r3, #1
 80060ba:	e000      	b.n	80060be <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b085      	sub	sp, #20
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	60f8      	str	r0, [r7, #12]
 80060d2:	60b9      	str	r1, [r7, #8]
 80060d4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	330c      	adds	r3, #12
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d00a      	beq.n	80060fa <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d002      	beq.n	80060f0 <netif_do_set_gw+0x26>
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	e000      	b.n	80060f2 <netif_do_set_gw+0x28>
 80060f0:	2300      	movs	r3, #0
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80060f6:	2301      	movs	r3, #1
 80060f8:	e000      	b.n	80060fc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b088      	sub	sp, #32
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
 8006114:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8006116:	2300      	movs	r3, #0
 8006118:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800611a:	2300      	movs	r3, #0
 800611c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8006124:	4b1c      	ldr	r3, [pc, #112]	; (8006198 <netif_set_addr+0x90>)
 8006126:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d101      	bne.n	8006132 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800612e:	4b1a      	ldr	r3, [pc, #104]	; (8006198 <netif_set_addr+0x90>)
 8006130:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d101      	bne.n	800613c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8006138:	4b17      	ldr	r3, [pc, #92]	; (8006198 <netif_set_addr+0x90>)
 800613a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <netif_set_addr+0x42>
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d101      	bne.n	800614e <netif_set_addr+0x46>
 800614a:	2301      	movs	r3, #1
 800614c:	e000      	b.n	8006150 <netif_set_addr+0x48>
 800614e:	2300      	movs	r3, #0
 8006150:	617b      	str	r3, [r7, #20]
  if (remove) {
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d006      	beq.n	8006166 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006158:	f107 0310 	add.w	r3, r7, #16
 800615c:	461a      	mov	r2, r3
 800615e:	68b9      	ldr	r1, [r7, #8]
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f7ff ff49 	bl	8005ff8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8006166:	69fa      	ldr	r2, [r7, #28]
 8006168:	6879      	ldr	r1, [r7, #4]
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f7ff ff8e 	bl	800608c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8006170:	69ba      	ldr	r2, [r7, #24]
 8006172:	6839      	ldr	r1, [r7, #0]
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f7ff ffa8 	bl	80060ca <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d106      	bne.n	800618e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006180:	f107 0310 	add.w	r3, r7, #16
 8006184:	461a      	mov	r2, r3
 8006186:	68b9      	ldr	r1, [r7, #8]
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f7ff ff35 	bl	8005ff8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800618e:	bf00      	nop
 8006190:	3720      	adds	r7, #32
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	0802122c 	.word	0x0802122c

0800619c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80061a4:	4a04      	ldr	r2, [pc, #16]	; (80061b8 <netif_set_default+0x1c>)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80061aa:	bf00      	nop
 80061ac:	370c      	adds	r7, #12
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	20006d40 	.word	0x20006d40

080061bc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d107      	bne.n	80061da <netif_set_up+0x1e>
 80061ca:	4b0f      	ldr	r3, [pc, #60]	; (8006208 <netif_set_up+0x4c>)
 80061cc:	f44f 7254 	mov.w	r2, #848	; 0x350
 80061d0:	490e      	ldr	r1, [pc, #56]	; (800620c <netif_set_up+0x50>)
 80061d2:	480f      	ldr	r0, [pc, #60]	; (8006210 <netif_set_up+0x54>)
 80061d4:	f009 fe6e 	bl	800feb4 <iprintf>
 80061d8:	e013      	b.n	8006202 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10c      	bne.n	8006202 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80061ee:	f043 0301 	orr.w	r3, r3, #1
 80061f2:	b2da      	uxtb	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80061fa:	2103      	movs	r1, #3
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 f809 	bl	8006214 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	08011be0 	.word	0x08011be0
 800620c:	08011d68 	.word	0x08011d68
 8006210:	08011c30 	.word	0x08011c30

08006214 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	460b      	mov	r3, r1
 800621e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d106      	bne.n	8006234 <netif_issue_reports+0x20>
 8006226:	4b18      	ldr	r3, [pc, #96]	; (8006288 <netif_issue_reports+0x74>)
 8006228:	f240 326d 	movw	r2, #877	; 0x36d
 800622c:	4917      	ldr	r1, [pc, #92]	; (800628c <netif_issue_reports+0x78>)
 800622e:	4818      	ldr	r0, [pc, #96]	; (8006290 <netif_issue_reports+0x7c>)
 8006230:	f009 fe40 	bl	800feb4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800623a:	f003 0304 	and.w	r3, r3, #4
 800623e:	2b00      	cmp	r3, #0
 8006240:	d01e      	beq.n	8006280 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006248:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800624c:	2b00      	cmp	r3, #0
 800624e:	d017      	beq.n	8006280 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006250:	78fb      	ldrb	r3, [r7, #3]
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b00      	cmp	r3, #0
 8006258:	d013      	beq.n	8006282 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	3304      	adds	r3, #4
 800625e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00e      	beq.n	8006282 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800626a:	f003 0308 	and.w	r3, r3, #8
 800626e:	2b00      	cmp	r3, #0
 8006270:	d007      	beq.n	8006282 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	3304      	adds	r3, #4
 8006276:	4619      	mov	r1, r3
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f008 fa2f 	bl	800e6dc <etharp_request>
 800627e:	e000      	b.n	8006282 <netif_issue_reports+0x6e>
    return;
 8006280:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	08011be0 	.word	0x08011be0
 800628c:	08011d84 	.word	0x08011d84
 8006290:	08011c30 	.word	0x08011c30

08006294 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d107      	bne.n	80062b2 <netif_set_down+0x1e>
 80062a2:	4b12      	ldr	r3, [pc, #72]	; (80062ec <netif_set_down+0x58>)
 80062a4:	f240 329b 	movw	r2, #923	; 0x39b
 80062a8:	4911      	ldr	r1, [pc, #68]	; (80062f0 <netif_set_down+0x5c>)
 80062aa:	4812      	ldr	r0, [pc, #72]	; (80062f4 <netif_set_down+0x60>)
 80062ac:	f009 fe02 	bl	800feb4 <iprintf>
 80062b0:	e019      	b.n	80062e6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d012      	beq.n	80062e6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80062c6:	f023 0301 	bic.w	r3, r3, #1
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80062d8:	f003 0308 	and.w	r3, r3, #8
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d002      	beq.n	80062e6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f007 fdb9 	bl	800de58 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80062e6:	3708      	adds	r7, #8
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	08011be0 	.word	0x08011be0
 80062f0:	08011da8 	.word	0x08011da8
 80062f4:	08011c30 	.word	0x08011c30

080062f8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d002      	beq.n	800630e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	683a      	ldr	r2, [r7, #0]
 800630c:	61da      	str	r2, [r3, #28]
  }
}
 800630e:	bf00      	nop
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800631a:	b480      	push	{r7}
 800631c:	b085      	sub	sp, #20
 800631e:	af00      	add	r7, sp, #0
 8006320:	60f8      	str	r0, [r7, #12]
 8006322:	60b9      	str	r1, [r7, #8]
 8006324:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8006326:	f06f 030b 	mvn.w	r3, #11
}
 800632a:	4618      	mov	r0, r3
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
	...

08006338 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	4603      	mov	r3, r0
 8006340:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8006342:	79fb      	ldrb	r3, [r7, #7]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d013      	beq.n	8006370 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8006348:	4b0d      	ldr	r3, [pc, #52]	; (8006380 <netif_get_by_index+0x48>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	60fb      	str	r3, [r7, #12]
 800634e:	e00c      	b.n	800636a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006356:	3301      	adds	r3, #1
 8006358:	b2db      	uxtb	r3, r3
 800635a:	79fa      	ldrb	r2, [r7, #7]
 800635c:	429a      	cmp	r2, r3
 800635e:	d101      	bne.n	8006364 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	e006      	b.n	8006372 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	60fb      	str	r3, [r7, #12]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1ef      	bne.n	8006350 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	20006d3c 	.word	0x20006d3c

08006384 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800638a:	4b0c      	ldr	r3, [pc, #48]	; (80063bc <pbuf_free_ooseq+0x38>)
 800638c:	2200      	movs	r2, #0
 800638e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006390:	4b0b      	ldr	r3, [pc, #44]	; (80063c0 <pbuf_free_ooseq+0x3c>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	607b      	str	r3, [r7, #4]
 8006396:	e00a      	b.n	80063ae <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800639c:	2b00      	cmp	r3, #0
 800639e:	d003      	beq.n	80063a8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f002 fd33 	bl	8008e0c <tcp_free_ooseq>
      return;
 80063a6:	e005      	b.n	80063b4 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	607b      	str	r3, [r7, #4]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1f1      	bne.n	8006398 <pbuf_free_ooseq+0x14>
    }
  }
}
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	20006d44 	.word	0x20006d44
 80063c0:	20006d4c 	.word	0x20006d4c

080063c4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80063c4:	b480      	push	{r7}
 80063c6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80063c8:	4b03      	ldr	r3, [pc, #12]	; (80063d8 <pbuf_pool_is_empty+0x14>)
 80063ca:	2201      	movs	r2, #1
 80063cc:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80063ce:	bf00      	nop
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr
 80063d8:	20006d44 	.word	0x20006d44

080063dc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	4611      	mov	r1, r2
 80063e8:	461a      	mov	r2, r3
 80063ea:	460b      	mov	r3, r1
 80063ec:	80fb      	strh	r3, [r7, #6]
 80063ee:	4613      	mov	r3, r2
 80063f0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	88fa      	ldrh	r2, [r7, #6]
 8006402:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	88ba      	ldrh	r2, [r7, #4]
 8006408:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800640a:	8b3b      	ldrh	r3, [r7, #24]
 800640c:	b2da      	uxtb	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	7f3a      	ldrb	r2, [r7, #28]
 8006416:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2201      	movs	r2, #1
 800641c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	73da      	strb	r2, [r3, #15]
}
 8006424:	bf00      	nop
 8006426:	3714      	adds	r7, #20
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b08c      	sub	sp, #48	; 0x30
 8006434:	af02      	add	r7, sp, #8
 8006436:	4603      	mov	r3, r0
 8006438:	71fb      	strb	r3, [r7, #7]
 800643a:	460b      	mov	r3, r1
 800643c:	80bb      	strh	r3, [r7, #4]
 800643e:	4613      	mov	r3, r2
 8006440:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8006442:	79fb      	ldrb	r3, [r7, #7]
 8006444:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8006446:	887b      	ldrh	r3, [r7, #2]
 8006448:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800644c:	d07f      	beq.n	800654e <pbuf_alloc+0x11e>
 800644e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006452:	f300 80c8 	bgt.w	80065e6 <pbuf_alloc+0x1b6>
 8006456:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800645a:	d010      	beq.n	800647e <pbuf_alloc+0x4e>
 800645c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006460:	f300 80c1 	bgt.w	80065e6 <pbuf_alloc+0x1b6>
 8006464:	2b01      	cmp	r3, #1
 8006466:	d002      	beq.n	800646e <pbuf_alloc+0x3e>
 8006468:	2b41      	cmp	r3, #65	; 0x41
 800646a:	f040 80bc 	bne.w	80065e6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800646e:	887a      	ldrh	r2, [r7, #2]
 8006470:	88bb      	ldrh	r3, [r7, #4]
 8006472:	4619      	mov	r1, r3
 8006474:	2000      	movs	r0, #0
 8006476:	f000 f8d1 	bl	800661c <pbuf_alloc_reference>
 800647a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800647c:	e0bd      	b.n	80065fa <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800647e:	2300      	movs	r3, #0
 8006480:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8006482:	2300      	movs	r3, #0
 8006484:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8006486:	88bb      	ldrh	r3, [r7, #4]
 8006488:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800648a:	2008      	movs	r0, #8
 800648c:	f7ff fc56 	bl	8005d3c <memp_malloc>
 8006490:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d109      	bne.n	80064ac <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8006498:	f7ff ff94 	bl	80063c4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d002      	beq.n	80064a8 <pbuf_alloc+0x78>
            pbuf_free(p);
 80064a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064a4:	f000 faa8 	bl	80069f8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80064a8:	2300      	movs	r3, #0
 80064aa:	e0a7      	b.n	80065fc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80064ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80064ae:	3303      	adds	r3, #3
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	f023 0303 	bic.w	r3, r3, #3
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80064bc:	b29b      	uxth	r3, r3
 80064be:	8b7a      	ldrh	r2, [r7, #26]
 80064c0:	4293      	cmp	r3, r2
 80064c2:	bf28      	it	cs
 80064c4:	4613      	movcs	r3, r2
 80064c6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80064c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80064ca:	3310      	adds	r3, #16
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	4413      	add	r3, r2
 80064d0:	3303      	adds	r3, #3
 80064d2:	f023 0303 	bic.w	r3, r3, #3
 80064d6:	4618      	mov	r0, r3
 80064d8:	89f9      	ldrh	r1, [r7, #14]
 80064da:	8b7a      	ldrh	r2, [r7, #26]
 80064dc:	2300      	movs	r3, #0
 80064de:	9301      	str	r3, [sp, #4]
 80064e0:	887b      	ldrh	r3, [r7, #2]
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	460b      	mov	r3, r1
 80064e6:	4601      	mov	r1, r0
 80064e8:	6938      	ldr	r0, [r7, #16]
 80064ea:	f7ff ff77 	bl	80063dc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f003 0303 	and.w	r3, r3, #3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d006      	beq.n	8006508 <pbuf_alloc+0xd8>
 80064fa:	4b42      	ldr	r3, [pc, #264]	; (8006604 <pbuf_alloc+0x1d4>)
 80064fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006500:	4941      	ldr	r1, [pc, #260]	; (8006608 <pbuf_alloc+0x1d8>)
 8006502:	4842      	ldr	r0, [pc, #264]	; (800660c <pbuf_alloc+0x1dc>)
 8006504:	f009 fcd6 	bl	800feb4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006508:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800650a:	3303      	adds	r3, #3
 800650c:	f023 0303 	bic.w	r3, r3, #3
 8006510:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006514:	d106      	bne.n	8006524 <pbuf_alloc+0xf4>
 8006516:	4b3b      	ldr	r3, [pc, #236]	; (8006604 <pbuf_alloc+0x1d4>)
 8006518:	f44f 7281 	mov.w	r2, #258	; 0x102
 800651c:	493c      	ldr	r1, [pc, #240]	; (8006610 <pbuf_alloc+0x1e0>)
 800651e:	483b      	ldr	r0, [pc, #236]	; (800660c <pbuf_alloc+0x1dc>)
 8006520:	f009 fcc8 	bl	800feb4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	2b00      	cmp	r3, #0
 8006528:	d102      	bne.n	8006530 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	627b      	str	r3, [r7, #36]	; 0x24
 800652e:	e002      	b.n	8006536 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800653a:	8b7a      	ldrh	r2, [r7, #26]
 800653c:	89fb      	ldrh	r3, [r7, #14]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006542:	2300      	movs	r3, #0
 8006544:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8006546:	8b7b      	ldrh	r3, [r7, #26]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d19e      	bne.n	800648a <pbuf_alloc+0x5a>
      break;
 800654c:	e055      	b.n	80065fa <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800654e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006550:	3303      	adds	r3, #3
 8006552:	b29b      	uxth	r3, r3
 8006554:	f023 0303 	bic.w	r3, r3, #3
 8006558:	b29a      	uxth	r2, r3
 800655a:	88bb      	ldrh	r3, [r7, #4]
 800655c:	3303      	adds	r3, #3
 800655e:	b29b      	uxth	r3, r3
 8006560:	f023 0303 	bic.w	r3, r3, #3
 8006564:	b29b      	uxth	r3, r3
 8006566:	4413      	add	r3, r2
 8006568:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800656a:	8b3b      	ldrh	r3, [r7, #24]
 800656c:	3310      	adds	r3, #16
 800656e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006570:	8b3a      	ldrh	r2, [r7, #24]
 8006572:	88bb      	ldrh	r3, [r7, #4]
 8006574:	3303      	adds	r3, #3
 8006576:	f023 0303 	bic.w	r3, r3, #3
 800657a:	429a      	cmp	r2, r3
 800657c:	d306      	bcc.n	800658c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800657e:	8afa      	ldrh	r2, [r7, #22]
 8006580:	88bb      	ldrh	r3, [r7, #4]
 8006582:	3303      	adds	r3, #3
 8006584:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006588:	429a      	cmp	r2, r3
 800658a:	d201      	bcs.n	8006590 <pbuf_alloc+0x160>
        return NULL;
 800658c:	2300      	movs	r3, #0
 800658e:	e035      	b.n	80065fc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8006590:	8afb      	ldrh	r3, [r7, #22]
 8006592:	4618      	mov	r0, r3
 8006594:	f7ff fa64 	bl	8005a60 <mem_malloc>
 8006598:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	2b00      	cmp	r3, #0
 800659e:	d101      	bne.n	80065a4 <pbuf_alloc+0x174>
        return NULL;
 80065a0:	2300      	movs	r3, #0
 80065a2:	e02b      	b.n	80065fc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80065a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80065a6:	3310      	adds	r3, #16
 80065a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065aa:	4413      	add	r3, r2
 80065ac:	3303      	adds	r3, #3
 80065ae:	f023 0303 	bic.w	r3, r3, #3
 80065b2:	4618      	mov	r0, r3
 80065b4:	88b9      	ldrh	r1, [r7, #4]
 80065b6:	88ba      	ldrh	r2, [r7, #4]
 80065b8:	2300      	movs	r3, #0
 80065ba:	9301      	str	r3, [sp, #4]
 80065bc:	887b      	ldrh	r3, [r7, #2]
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	460b      	mov	r3, r1
 80065c2:	4601      	mov	r1, r0
 80065c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065c6:	f7ff ff09 	bl	80063dc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80065ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f003 0303 	and.w	r3, r3, #3
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d010      	beq.n	80065f8 <pbuf_alloc+0x1c8>
 80065d6:	4b0b      	ldr	r3, [pc, #44]	; (8006604 <pbuf_alloc+0x1d4>)
 80065d8:	f44f 7291 	mov.w	r2, #290	; 0x122
 80065dc:	490d      	ldr	r1, [pc, #52]	; (8006614 <pbuf_alloc+0x1e4>)
 80065de:	480b      	ldr	r0, [pc, #44]	; (800660c <pbuf_alloc+0x1dc>)
 80065e0:	f009 fc68 	bl	800feb4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80065e4:	e008      	b.n	80065f8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80065e6:	4b07      	ldr	r3, [pc, #28]	; (8006604 <pbuf_alloc+0x1d4>)
 80065e8:	f240 1227 	movw	r2, #295	; 0x127
 80065ec:	490a      	ldr	r1, [pc, #40]	; (8006618 <pbuf_alloc+0x1e8>)
 80065ee:	4807      	ldr	r0, [pc, #28]	; (800660c <pbuf_alloc+0x1dc>)
 80065f0:	f009 fc60 	bl	800feb4 <iprintf>
      return NULL;
 80065f4:	2300      	movs	r3, #0
 80065f6:	e001      	b.n	80065fc <pbuf_alloc+0x1cc>
      break;
 80065f8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3728      	adds	r7, #40	; 0x28
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	08011e10 	.word	0x08011e10
 8006608:	08011e40 	.word	0x08011e40
 800660c:	08011e70 	.word	0x08011e70
 8006610:	08011e98 	.word	0x08011e98
 8006614:	08011ecc 	.word	0x08011ecc
 8006618:	08011ef8 	.word	0x08011ef8

0800661c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af02      	add	r7, sp, #8
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	460b      	mov	r3, r1
 8006626:	807b      	strh	r3, [r7, #2]
 8006628:	4613      	mov	r3, r2
 800662a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800662c:	883b      	ldrh	r3, [r7, #0]
 800662e:	2b41      	cmp	r3, #65	; 0x41
 8006630:	d009      	beq.n	8006646 <pbuf_alloc_reference+0x2a>
 8006632:	883b      	ldrh	r3, [r7, #0]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d006      	beq.n	8006646 <pbuf_alloc_reference+0x2a>
 8006638:	4b0f      	ldr	r3, [pc, #60]	; (8006678 <pbuf_alloc_reference+0x5c>)
 800663a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800663e:	490f      	ldr	r1, [pc, #60]	; (800667c <pbuf_alloc_reference+0x60>)
 8006640:	480f      	ldr	r0, [pc, #60]	; (8006680 <pbuf_alloc_reference+0x64>)
 8006642:	f009 fc37 	bl	800feb4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006646:	2007      	movs	r0, #7
 8006648:	f7ff fb78 	bl	8005d3c <memp_malloc>
 800664c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d101      	bne.n	8006658 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006654:	2300      	movs	r3, #0
 8006656:	e00b      	b.n	8006670 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006658:	8879      	ldrh	r1, [r7, #2]
 800665a:	887a      	ldrh	r2, [r7, #2]
 800665c:	2300      	movs	r3, #0
 800665e:	9301      	str	r3, [sp, #4]
 8006660:	883b      	ldrh	r3, [r7, #0]
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	460b      	mov	r3, r1
 8006666:	6879      	ldr	r1, [r7, #4]
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f7ff feb7 	bl	80063dc <pbuf_init_alloced_pbuf>
  return p;
 800666e:	68fb      	ldr	r3, [r7, #12]
}
 8006670:	4618      	mov	r0, r3
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	08011e10 	.word	0x08011e10
 800667c:	08011f14 	.word	0x08011f14
 8006680:	08011e70 	.word	0x08011e70

08006684 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b088      	sub	sp, #32
 8006688:	af02      	add	r7, sp, #8
 800668a:	607b      	str	r3, [r7, #4]
 800668c:	4603      	mov	r3, r0
 800668e:	73fb      	strb	r3, [r7, #15]
 8006690:	460b      	mov	r3, r1
 8006692:	81bb      	strh	r3, [r7, #12]
 8006694:	4613      	mov	r3, r2
 8006696:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006698:	7bfb      	ldrb	r3, [r7, #15]
 800669a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800669c:	8a7b      	ldrh	r3, [r7, #18]
 800669e:	3303      	adds	r3, #3
 80066a0:	f023 0203 	bic.w	r2, r3, #3
 80066a4:	89bb      	ldrh	r3, [r7, #12]
 80066a6:	441a      	add	r2, r3
 80066a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d901      	bls.n	80066b2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80066ae:	2300      	movs	r3, #0
 80066b0:	e018      	b.n	80066e4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80066b2:	6a3b      	ldr	r3, [r7, #32]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d007      	beq.n	80066c8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80066b8:	8a7b      	ldrh	r3, [r7, #18]
 80066ba:	3303      	adds	r3, #3
 80066bc:	f023 0303 	bic.w	r3, r3, #3
 80066c0:	6a3a      	ldr	r2, [r7, #32]
 80066c2:	4413      	add	r3, r2
 80066c4:	617b      	str	r3, [r7, #20]
 80066c6:	e001      	b.n	80066cc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80066c8:	2300      	movs	r3, #0
 80066ca:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	89b9      	ldrh	r1, [r7, #12]
 80066d0:	89ba      	ldrh	r2, [r7, #12]
 80066d2:	2302      	movs	r3, #2
 80066d4:	9301      	str	r3, [sp, #4]
 80066d6:	897b      	ldrh	r3, [r7, #10]
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	460b      	mov	r3, r1
 80066dc:	6979      	ldr	r1, [r7, #20]
 80066de:	f7ff fe7d 	bl	80063dc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80066e2:	687b      	ldr	r3, [r7, #4]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3718      	adds	r7, #24
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	460b      	mov	r3, r1
 80066f6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d106      	bne.n	800670c <pbuf_realloc+0x20>
 80066fe:	4b3a      	ldr	r3, [pc, #232]	; (80067e8 <pbuf_realloc+0xfc>)
 8006700:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006704:	4939      	ldr	r1, [pc, #228]	; (80067ec <pbuf_realloc+0x100>)
 8006706:	483a      	ldr	r0, [pc, #232]	; (80067f0 <pbuf_realloc+0x104>)
 8006708:	f009 fbd4 	bl	800feb4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	891b      	ldrh	r3, [r3, #8]
 8006710:	887a      	ldrh	r2, [r7, #2]
 8006712:	429a      	cmp	r2, r3
 8006714:	d263      	bcs.n	80067de <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	891a      	ldrh	r2, [r3, #8]
 800671a:	887b      	ldrh	r3, [r7, #2]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006720:	887b      	ldrh	r3, [r7, #2]
 8006722:	817b      	strh	r3, [r7, #10]
  q = p;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006728:	e018      	b.n	800675c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	895b      	ldrh	r3, [r3, #10]
 800672e:	897a      	ldrh	r2, [r7, #10]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	891a      	ldrh	r2, [r3, #8]
 8006738:	893b      	ldrh	r3, [r7, #8]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	b29a      	uxth	r2, r3
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d106      	bne.n	800675c <pbuf_realloc+0x70>
 800674e:	4b26      	ldr	r3, [pc, #152]	; (80067e8 <pbuf_realloc+0xfc>)
 8006750:	f240 12af 	movw	r2, #431	; 0x1af
 8006754:	4927      	ldr	r1, [pc, #156]	; (80067f4 <pbuf_realloc+0x108>)
 8006756:	4826      	ldr	r0, [pc, #152]	; (80067f0 <pbuf_realloc+0x104>)
 8006758:	f009 fbac 	bl	800feb4 <iprintf>
  while (rem_len > q->len) {
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	895b      	ldrh	r3, [r3, #10]
 8006760:	897a      	ldrh	r2, [r7, #10]
 8006762:	429a      	cmp	r2, r3
 8006764:	d8e1      	bhi.n	800672a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	7b1b      	ldrb	r3, [r3, #12]
 800676a:	f003 030f 	and.w	r3, r3, #15
 800676e:	2b00      	cmp	r3, #0
 8006770:	d121      	bne.n	80067b6 <pbuf_realloc+0xca>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	895b      	ldrh	r3, [r3, #10]
 8006776:	897a      	ldrh	r2, [r7, #10]
 8006778:	429a      	cmp	r2, r3
 800677a:	d01c      	beq.n	80067b6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	7b5b      	ldrb	r3, [r3, #13]
 8006780:	f003 0302 	and.w	r3, r3, #2
 8006784:	2b00      	cmp	r3, #0
 8006786:	d116      	bne.n	80067b6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	b29a      	uxth	r2, r3
 8006792:	897b      	ldrh	r3, [r7, #10]
 8006794:	4413      	add	r3, r2
 8006796:	b29b      	uxth	r3, r3
 8006798:	4619      	mov	r1, r3
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f7ff f864 	bl	8005868 <mem_trim>
 80067a0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d106      	bne.n	80067b6 <pbuf_realloc+0xca>
 80067a8:	4b0f      	ldr	r3, [pc, #60]	; (80067e8 <pbuf_realloc+0xfc>)
 80067aa:	f240 12bd 	movw	r2, #445	; 0x1bd
 80067ae:	4912      	ldr	r1, [pc, #72]	; (80067f8 <pbuf_realloc+0x10c>)
 80067b0:	480f      	ldr	r0, [pc, #60]	; (80067f0 <pbuf_realloc+0x104>)
 80067b2:	f009 fb7f 	bl	800feb4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	897a      	ldrh	r2, [r7, #10]
 80067ba:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	895a      	ldrh	r2, [r3, #10]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d004      	beq.n	80067d6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 f911 	bl	80069f8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	601a      	str	r2, [r3, #0]
 80067dc:	e000      	b.n	80067e0 <pbuf_realloc+0xf4>
    return;
 80067de:	bf00      	nop

}
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	08011e10 	.word	0x08011e10
 80067ec:	08011f28 	.word	0x08011f28
 80067f0:	08011e70 	.word	0x08011e70
 80067f4:	08011f40 	.word	0x08011f40
 80067f8:	08011f58 	.word	0x08011f58

080067fc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b086      	sub	sp, #24
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	4613      	mov	r3, r2
 8006808:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d106      	bne.n	800681e <pbuf_add_header_impl+0x22>
 8006810:	4b2b      	ldr	r3, [pc, #172]	; (80068c0 <pbuf_add_header_impl+0xc4>)
 8006812:	f240 12df 	movw	r2, #479	; 0x1df
 8006816:	492b      	ldr	r1, [pc, #172]	; (80068c4 <pbuf_add_header_impl+0xc8>)
 8006818:	482b      	ldr	r0, [pc, #172]	; (80068c8 <pbuf_add_header_impl+0xcc>)
 800681a:	f009 fb4b 	bl	800feb4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d003      	beq.n	800682c <pbuf_add_header_impl+0x30>
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800682a:	d301      	bcc.n	8006830 <pbuf_add_header_impl+0x34>
    return 1;
 800682c:	2301      	movs	r3, #1
 800682e:	e043      	b.n	80068b8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <pbuf_add_header_impl+0x3e>
    return 0;
 8006836:	2300      	movs	r3, #0
 8006838:	e03e      	b.n	80068b8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	891a      	ldrh	r2, [r3, #8]
 8006842:	8a7b      	ldrh	r3, [r7, #18]
 8006844:	4413      	add	r3, r2
 8006846:	b29b      	uxth	r3, r3
 8006848:	8a7a      	ldrh	r2, [r7, #18]
 800684a:	429a      	cmp	r2, r3
 800684c:	d901      	bls.n	8006852 <pbuf_add_header_impl+0x56>
    return 1;
 800684e:	2301      	movs	r3, #1
 8006850:	e032      	b.n	80068b8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	7b1b      	ldrb	r3, [r3, #12]
 8006856:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006858:	8a3b      	ldrh	r3, [r7, #16]
 800685a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00c      	beq.n	800687c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	425b      	negs	r3, r3
 800686a:	4413      	add	r3, r2
 800686c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	3310      	adds	r3, #16
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	429a      	cmp	r2, r3
 8006876:	d20d      	bcs.n	8006894 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006878:	2301      	movs	r3, #1
 800687a:	e01d      	b.n	80068b8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800687c:	79fb      	ldrb	r3, [r7, #7]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d006      	beq.n	8006890 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	425b      	negs	r3, r3
 800688a:	4413      	add	r3, r2
 800688c:	617b      	str	r3, [r7, #20]
 800688e:	e001      	b.n	8006894 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006890:	2301      	movs	r3, #1
 8006892:	e011      	b.n	80068b8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	895a      	ldrh	r2, [r3, #10]
 800689e:	8a7b      	ldrh	r3, [r7, #18]
 80068a0:	4413      	add	r3, r2
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	891a      	ldrh	r2, [r3, #8]
 80068ac:	8a7b      	ldrh	r3, [r7, #18]
 80068ae:	4413      	add	r3, r2
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	811a      	strh	r2, [r3, #8]


  return 0;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3718      	adds	r7, #24
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	08011e10 	.word	0x08011e10
 80068c4:	08011f74 	.word	0x08011f74
 80068c8:	08011e70 	.word	0x08011e70

080068cc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80068d6:	2200      	movs	r2, #0
 80068d8:	6839      	ldr	r1, [r7, #0]
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7ff ff8e 	bl	80067fc <pbuf_add_header_impl>
 80068e0:	4603      	mov	r3, r0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
	...

080068ec <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d106      	bne.n	800690a <pbuf_remove_header+0x1e>
 80068fc:	4b20      	ldr	r3, [pc, #128]	; (8006980 <pbuf_remove_header+0x94>)
 80068fe:	f240 224b 	movw	r2, #587	; 0x24b
 8006902:	4920      	ldr	r1, [pc, #128]	; (8006984 <pbuf_remove_header+0x98>)
 8006904:	4820      	ldr	r0, [pc, #128]	; (8006988 <pbuf_remove_header+0x9c>)
 8006906:	f009 fad5 	bl	800feb4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d003      	beq.n	8006918 <pbuf_remove_header+0x2c>
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006916:	d301      	bcc.n	800691c <pbuf_remove_header+0x30>
    return 1;
 8006918:	2301      	movs	r3, #1
 800691a:	e02c      	b.n	8006976 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <pbuf_remove_header+0x3a>
    return 0;
 8006922:	2300      	movs	r3, #0
 8006924:	e027      	b.n	8006976 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	895b      	ldrh	r3, [r3, #10]
 800692e:	89fa      	ldrh	r2, [r7, #14]
 8006930:	429a      	cmp	r2, r3
 8006932:	d908      	bls.n	8006946 <pbuf_remove_header+0x5a>
 8006934:	4b12      	ldr	r3, [pc, #72]	; (8006980 <pbuf_remove_header+0x94>)
 8006936:	f240 2255 	movw	r2, #597	; 0x255
 800693a:	4914      	ldr	r1, [pc, #80]	; (800698c <pbuf_remove_header+0xa0>)
 800693c:	4812      	ldr	r0, [pc, #72]	; (8006988 <pbuf_remove_header+0x9c>)
 800693e:	f009 fab9 	bl	800feb4 <iprintf>
 8006942:	2301      	movs	r3, #1
 8006944:	e017      	b.n	8006976 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	441a      	add	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	895a      	ldrh	r2, [r3, #10]
 800695c:	89fb      	ldrh	r3, [r7, #14]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	b29a      	uxth	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	891a      	ldrh	r2, [r3, #8]
 800696a:	89fb      	ldrh	r3, [r7, #14]
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	b29a      	uxth	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	08011e10 	.word	0x08011e10
 8006984:	08011f74 	.word	0x08011f74
 8006988:	08011e70 	.word	0x08011e70
 800698c:	08011f80 	.word	0x08011f80

08006990 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	460b      	mov	r3, r1
 800699a:	807b      	strh	r3, [r7, #2]
 800699c:	4613      	mov	r3, r2
 800699e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80069a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	da08      	bge.n	80069ba <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80069a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80069ac:	425b      	negs	r3, r3
 80069ae:	4619      	mov	r1, r3
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f7ff ff9b 	bl	80068ec <pbuf_remove_header>
 80069b6:	4603      	mov	r3, r0
 80069b8:	e007      	b.n	80069ca <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80069ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80069be:	787a      	ldrb	r2, [r7, #1]
 80069c0:	4619      	mov	r1, r3
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7ff ff1a 	bl	80067fc <pbuf_add_header_impl>
 80069c8:	4603      	mov	r3, r0
  }
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3708      	adds	r7, #8
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b082      	sub	sp, #8
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	460b      	mov	r3, r1
 80069dc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80069de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80069e2:	2201      	movs	r2, #1
 80069e4:	4619      	mov	r1, r3
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f7ff ffd2 	bl	8006990 <pbuf_header_impl>
 80069ec:	4603      	mov	r3, r0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
	...

080069f8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10b      	bne.n	8006a1e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d106      	bne.n	8006a1a <pbuf_free+0x22>
 8006a0c:	4b38      	ldr	r3, [pc, #224]	; (8006af0 <pbuf_free+0xf8>)
 8006a0e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006a12:	4938      	ldr	r1, [pc, #224]	; (8006af4 <pbuf_free+0xfc>)
 8006a14:	4838      	ldr	r0, [pc, #224]	; (8006af8 <pbuf_free+0x100>)
 8006a16:	f009 fa4d 	bl	800feb4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	e063      	b.n	8006ae6 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006a22:	e05c      	b.n	8006ade <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	7b9b      	ldrb	r3, [r3, #14]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d106      	bne.n	8006a3a <pbuf_free+0x42>
 8006a2c:	4b30      	ldr	r3, [pc, #192]	; (8006af0 <pbuf_free+0xf8>)
 8006a2e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8006a32:	4932      	ldr	r1, [pc, #200]	; (8006afc <pbuf_free+0x104>)
 8006a34:	4830      	ldr	r0, [pc, #192]	; (8006af8 <pbuf_free+0x100>)
 8006a36:	f009 fa3d 	bl	800feb4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	7b9b      	ldrb	r3, [r3, #14]
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	b2da      	uxtb	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	739a      	strb	r2, [r3, #14]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	7b9b      	ldrb	r3, [r3, #14]
 8006a4a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006a4c:	7dbb      	ldrb	r3, [r7, #22]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d143      	bne.n	8006ada <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	7b1b      	ldrb	r3, [r3, #12]
 8006a5c:	f003 030f 	and.w	r3, r3, #15
 8006a60:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	7b5b      	ldrb	r3, [r3, #13]
 8006a66:	f003 0302 	and.w	r3, r3, #2
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d011      	beq.n	8006a92 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d106      	bne.n	8006a88 <pbuf_free+0x90>
 8006a7a:	4b1d      	ldr	r3, [pc, #116]	; (8006af0 <pbuf_free+0xf8>)
 8006a7c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8006a80:	491f      	ldr	r1, [pc, #124]	; (8006b00 <pbuf_free+0x108>)
 8006a82:	481d      	ldr	r0, [pc, #116]	; (8006af8 <pbuf_free+0x100>)
 8006a84:	f009 fa16 	bl	800feb4 <iprintf>
        pc->custom_free_function(p);
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	4798      	blx	r3
 8006a90:	e01d      	b.n	8006ace <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006a92:	7bfb      	ldrb	r3, [r7, #15]
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d104      	bne.n	8006aa2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006a98:	6879      	ldr	r1, [r7, #4]
 8006a9a:	2008      	movs	r0, #8
 8006a9c:	f7ff f99a 	bl	8005dd4 <memp_free>
 8006aa0:	e015      	b.n	8006ace <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006aa2:	7bfb      	ldrb	r3, [r7, #15]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d104      	bne.n	8006ab2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006aa8:	6879      	ldr	r1, [r7, #4]
 8006aaa:	2007      	movs	r0, #7
 8006aac:	f7ff f992 	bl	8005dd4 <memp_free>
 8006ab0:	e00d      	b.n	8006ace <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d103      	bne.n	8006ac0 <pbuf_free+0xc8>
          mem_free(p);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f7fe fe6b 	bl	8005794 <mem_free>
 8006abe:	e006      	b.n	8006ace <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006ac0:	4b0b      	ldr	r3, [pc, #44]	; (8006af0 <pbuf_free+0xf8>)
 8006ac2:	f240 320f 	movw	r2, #783	; 0x30f
 8006ac6:	490f      	ldr	r1, [pc, #60]	; (8006b04 <pbuf_free+0x10c>)
 8006ac8:	480b      	ldr	r0, [pc, #44]	; (8006af8 <pbuf_free+0x100>)
 8006aca:	f009 f9f3 	bl	800feb4 <iprintf>
        }
      }
      count++;
 8006ace:	7dfb      	ldrb	r3, [r7, #23]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	607b      	str	r3, [r7, #4]
 8006ad8:	e001      	b.n	8006ade <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006ada:	2300      	movs	r3, #0
 8006adc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d19f      	bne.n	8006a24 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3718      	adds	r7, #24
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	08011e10 	.word	0x08011e10
 8006af4:	08011f74 	.word	0x08011f74
 8006af8:	08011e70 	.word	0x08011e70
 8006afc:	08011fa0 	.word	0x08011fa0
 8006b00:	08011fb8 	.word	0x08011fb8
 8006b04:	08011fdc 	.word	0x08011fdc

08006b08 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006b10:	2300      	movs	r3, #0
 8006b12:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006b14:	e005      	b.n	8006b22 <pbuf_clen+0x1a>
    ++len;
 8006b16:	89fb      	ldrh	r3, [r7, #14]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1f6      	bne.n	8006b16 <pbuf_clen+0xe>
  }
  return len;
 8006b28:	89fb      	ldrh	r3, [r7, #14]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3714      	adds	r7, #20
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
	...

08006b38 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d010      	beq.n	8006b68 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	7b9b      	ldrb	r3, [r3, #14]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	b2da      	uxtb	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	7b9b      	ldrb	r3, [r3, #14]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d106      	bne.n	8006b68 <pbuf_ref+0x30>
 8006b5a:	4b05      	ldr	r3, [pc, #20]	; (8006b70 <pbuf_ref+0x38>)
 8006b5c:	f240 3242 	movw	r2, #834	; 0x342
 8006b60:	4904      	ldr	r1, [pc, #16]	; (8006b74 <pbuf_ref+0x3c>)
 8006b62:	4805      	ldr	r0, [pc, #20]	; (8006b78 <pbuf_ref+0x40>)
 8006b64:	f009 f9a6 	bl	800feb4 <iprintf>
  }
}
 8006b68:	bf00      	nop
 8006b6a:	3708      	adds	r7, #8
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	08011e10 	.word	0x08011e10
 8006b74:	08011ff0 	.word	0x08011ff0
 8006b78:	08011e70 	.word	0x08011e70

08006b7c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d002      	beq.n	8006b92 <pbuf_cat+0x16>
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d107      	bne.n	8006ba2 <pbuf_cat+0x26>
 8006b92:	4b20      	ldr	r3, [pc, #128]	; (8006c14 <pbuf_cat+0x98>)
 8006b94:	f240 3259 	movw	r2, #857	; 0x359
 8006b98:	491f      	ldr	r1, [pc, #124]	; (8006c18 <pbuf_cat+0x9c>)
 8006b9a:	4820      	ldr	r0, [pc, #128]	; (8006c1c <pbuf_cat+0xa0>)
 8006b9c:	f009 f98a 	bl	800feb4 <iprintf>
 8006ba0:	e034      	b.n	8006c0c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	60fb      	str	r3, [r7, #12]
 8006ba6:	e00a      	b.n	8006bbe <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	891a      	ldrh	r2, [r3, #8]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	891b      	ldrh	r3, [r3, #8]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	60fb      	str	r3, [r7, #12]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1f0      	bne.n	8006ba8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	891a      	ldrh	r2, [r3, #8]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	895b      	ldrh	r3, [r3, #10]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d006      	beq.n	8006be0 <pbuf_cat+0x64>
 8006bd2:	4b10      	ldr	r3, [pc, #64]	; (8006c14 <pbuf_cat+0x98>)
 8006bd4:	f240 3262 	movw	r2, #866	; 0x362
 8006bd8:	4911      	ldr	r1, [pc, #68]	; (8006c20 <pbuf_cat+0xa4>)
 8006bda:	4810      	ldr	r0, [pc, #64]	; (8006c1c <pbuf_cat+0xa0>)
 8006bdc:	f009 f96a 	bl	800feb4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d006      	beq.n	8006bf6 <pbuf_cat+0x7a>
 8006be8:	4b0a      	ldr	r3, [pc, #40]	; (8006c14 <pbuf_cat+0x98>)
 8006bea:	f240 3263 	movw	r2, #867	; 0x363
 8006bee:	490d      	ldr	r1, [pc, #52]	; (8006c24 <pbuf_cat+0xa8>)
 8006bf0:	480a      	ldr	r0, [pc, #40]	; (8006c1c <pbuf_cat+0xa0>)
 8006bf2:	f009 f95f 	bl	800feb4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	891a      	ldrh	r2, [r3, #8]
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	891b      	ldrh	r3, [r3, #8]
 8006bfe:	4413      	add	r3, r2
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	683a      	ldr	r2, [r7, #0]
 8006c0a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	08011e10 	.word	0x08011e10
 8006c18:	08012004 	.word	0x08012004
 8006c1c:	08011e70 	.word	0x08011e70
 8006c20:	0801203c 	.word	0x0801203c
 8006c24:	0801206c 	.word	0x0801206c

08006c28 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006c32:	2300      	movs	r3, #0
 8006c34:	617b      	str	r3, [r7, #20]
 8006c36:	2300      	movs	r3, #0
 8006c38:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d008      	beq.n	8006c52 <pbuf_copy+0x2a>
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d005      	beq.n	8006c52 <pbuf_copy+0x2a>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	891a      	ldrh	r2, [r3, #8]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	891b      	ldrh	r3, [r3, #8]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d209      	bcs.n	8006c66 <pbuf_copy+0x3e>
 8006c52:	4b57      	ldr	r3, [pc, #348]	; (8006db0 <pbuf_copy+0x188>)
 8006c54:	f240 32c9 	movw	r2, #969	; 0x3c9
 8006c58:	4956      	ldr	r1, [pc, #344]	; (8006db4 <pbuf_copy+0x18c>)
 8006c5a:	4857      	ldr	r0, [pc, #348]	; (8006db8 <pbuf_copy+0x190>)
 8006c5c:	f009 f92a 	bl	800feb4 <iprintf>
 8006c60:	f06f 030f 	mvn.w	r3, #15
 8006c64:	e09f      	b.n	8006da6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	895b      	ldrh	r3, [r3, #10]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	1ad2      	subs	r2, r2, r3
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	895b      	ldrh	r3, [r3, #10]
 8006c74:	4619      	mov	r1, r3
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	1acb      	subs	r3, r1, r3
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d306      	bcc.n	8006c8c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	895b      	ldrh	r3, [r3, #10]
 8006c82:	461a      	mov	r2, r3
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	60fb      	str	r3, [r7, #12]
 8006c8a:	e005      	b.n	8006c98 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	895b      	ldrh	r3, [r3, #10]
 8006c90:	461a      	mov	r2, r3
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	18d0      	adds	r0, r2, r3
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	4619      	mov	r1, r3
 8006cac:	f009 f8d2 	bl	800fe54 <memcpy>
    offset_to += len;
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	895b      	ldrh	r3, [r3, #10]
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d906      	bls.n	8006cda <pbuf_copy+0xb2>
 8006ccc:	4b38      	ldr	r3, [pc, #224]	; (8006db0 <pbuf_copy+0x188>)
 8006cce:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006cd2:	493a      	ldr	r1, [pc, #232]	; (8006dbc <pbuf_copy+0x194>)
 8006cd4:	4838      	ldr	r0, [pc, #224]	; (8006db8 <pbuf_copy+0x190>)
 8006cd6:	f009 f8ed 	bl	800feb4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	895b      	ldrh	r3, [r3, #10]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d906      	bls.n	8006cf4 <pbuf_copy+0xcc>
 8006ce6:	4b32      	ldr	r3, [pc, #200]	; (8006db0 <pbuf_copy+0x188>)
 8006ce8:	f240 32da 	movw	r2, #986	; 0x3da
 8006cec:	4934      	ldr	r1, [pc, #208]	; (8006dc0 <pbuf_copy+0x198>)
 8006cee:	4832      	ldr	r0, [pc, #200]	; (8006db8 <pbuf_copy+0x190>)
 8006cf0:	f009 f8e0 	bl	800feb4 <iprintf>
    if (offset_from >= p_from->len) {
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	895b      	ldrh	r3, [r3, #10]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d304      	bcc.n	8006d0a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006d00:	2300      	movs	r3, #0
 8006d02:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	895b      	ldrh	r3, [r3, #10]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d114      	bne.n	8006d40 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006d16:	2300      	movs	r3, #0
 8006d18:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10c      	bne.n	8006d40 <pbuf_copy+0x118>
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d009      	beq.n	8006d40 <pbuf_copy+0x118>
 8006d2c:	4b20      	ldr	r3, [pc, #128]	; (8006db0 <pbuf_copy+0x188>)
 8006d2e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8006d32:	4924      	ldr	r1, [pc, #144]	; (8006dc4 <pbuf_copy+0x19c>)
 8006d34:	4820      	ldr	r0, [pc, #128]	; (8006db8 <pbuf_copy+0x190>)
 8006d36:	f009 f8bd 	bl	800feb4 <iprintf>
 8006d3a:	f06f 030f 	mvn.w	r3, #15
 8006d3e:	e032      	b.n	8006da6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d013      	beq.n	8006d6e <pbuf_copy+0x146>
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	895a      	ldrh	r2, [r3, #10]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	891b      	ldrh	r3, [r3, #8]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d10d      	bne.n	8006d6e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d009      	beq.n	8006d6e <pbuf_copy+0x146>
 8006d5a:	4b15      	ldr	r3, [pc, #84]	; (8006db0 <pbuf_copy+0x188>)
 8006d5c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8006d60:	4919      	ldr	r1, [pc, #100]	; (8006dc8 <pbuf_copy+0x1a0>)
 8006d62:	4815      	ldr	r0, [pc, #84]	; (8006db8 <pbuf_copy+0x190>)
 8006d64:	f009 f8a6 	bl	800feb4 <iprintf>
 8006d68:	f06f 0305 	mvn.w	r3, #5
 8006d6c:	e01b      	b.n	8006da6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d013      	beq.n	8006d9c <pbuf_copy+0x174>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	895a      	ldrh	r2, [r3, #10]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	891b      	ldrh	r3, [r3, #8]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d10d      	bne.n	8006d9c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d009      	beq.n	8006d9c <pbuf_copy+0x174>
 8006d88:	4b09      	ldr	r3, [pc, #36]	; (8006db0 <pbuf_copy+0x188>)
 8006d8a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8006d8e:	490e      	ldr	r1, [pc, #56]	; (8006dc8 <pbuf_copy+0x1a0>)
 8006d90:	4809      	ldr	r0, [pc, #36]	; (8006db8 <pbuf_copy+0x190>)
 8006d92:	f009 f88f 	bl	800feb4 <iprintf>
 8006d96:	f06f 0305 	mvn.w	r3, #5
 8006d9a:	e004      	b.n	8006da6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f47f af61 	bne.w	8006c66 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3718      	adds	r7, #24
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	08011e10 	.word	0x08011e10
 8006db4:	080120b8 	.word	0x080120b8
 8006db8:	08011e70 	.word	0x08011e70
 8006dbc:	080120e8 	.word	0x080120e8
 8006dc0:	08012100 	.word	0x08012100
 8006dc4:	0801211c 	.word	0x0801211c
 8006dc8:	0801212c 	.word	0x0801212c

08006dcc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b088      	sub	sp, #32
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	4611      	mov	r1, r2
 8006dd8:	461a      	mov	r2, r3
 8006dda:	460b      	mov	r3, r1
 8006ddc:	80fb      	strh	r3, [r7, #6]
 8006dde:	4613      	mov	r3, r2
 8006de0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006de2:	2300      	movs	r3, #0
 8006de4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006de6:	2300      	movs	r3, #0
 8006de8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d108      	bne.n	8006e02 <pbuf_copy_partial+0x36>
 8006df0:	4b2b      	ldr	r3, [pc, #172]	; (8006ea0 <pbuf_copy_partial+0xd4>)
 8006df2:	f240 420a 	movw	r2, #1034	; 0x40a
 8006df6:	492b      	ldr	r1, [pc, #172]	; (8006ea4 <pbuf_copy_partial+0xd8>)
 8006df8:	482b      	ldr	r0, [pc, #172]	; (8006ea8 <pbuf_copy_partial+0xdc>)
 8006dfa:	f009 f85b 	bl	800feb4 <iprintf>
 8006dfe:	2300      	movs	r3, #0
 8006e00:	e04a      	b.n	8006e98 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d108      	bne.n	8006e1a <pbuf_copy_partial+0x4e>
 8006e08:	4b25      	ldr	r3, [pc, #148]	; (8006ea0 <pbuf_copy_partial+0xd4>)
 8006e0a:	f240 420b 	movw	r2, #1035	; 0x40b
 8006e0e:	4927      	ldr	r1, [pc, #156]	; (8006eac <pbuf_copy_partial+0xe0>)
 8006e10:	4825      	ldr	r0, [pc, #148]	; (8006ea8 <pbuf_copy_partial+0xdc>)
 8006e12:	f009 f84f 	bl	800feb4 <iprintf>
 8006e16:	2300      	movs	r3, #0
 8006e18:	e03e      	b.n	8006e98 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	61fb      	str	r3, [r7, #28]
 8006e1e:	e034      	b.n	8006e8a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006e20:	88bb      	ldrh	r3, [r7, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00a      	beq.n	8006e3c <pbuf_copy_partial+0x70>
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	895b      	ldrh	r3, [r3, #10]
 8006e2a:	88ba      	ldrh	r2, [r7, #4]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d305      	bcc.n	8006e3c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	895b      	ldrh	r3, [r3, #10]
 8006e34:	88ba      	ldrh	r2, [r7, #4]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	80bb      	strh	r3, [r7, #4]
 8006e3a:	e023      	b.n	8006e84 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	895a      	ldrh	r2, [r3, #10]
 8006e40:	88bb      	ldrh	r3, [r7, #4]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006e46:	8b3a      	ldrh	r2, [r7, #24]
 8006e48:	88fb      	ldrh	r3, [r7, #6]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d901      	bls.n	8006e52 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006e4e:	88fb      	ldrh	r3, [r7, #6]
 8006e50:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006e52:	8b7b      	ldrh	r3, [r7, #26]
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	18d0      	adds	r0, r2, r3
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	88bb      	ldrh	r3, [r7, #4]
 8006e5e:	4413      	add	r3, r2
 8006e60:	8b3a      	ldrh	r2, [r7, #24]
 8006e62:	4619      	mov	r1, r3
 8006e64:	f008 fff6 	bl	800fe54 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006e68:	8afa      	ldrh	r2, [r7, #22]
 8006e6a:	8b3b      	ldrh	r3, [r7, #24]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006e70:	8b7a      	ldrh	r2, [r7, #26]
 8006e72:	8b3b      	ldrh	r3, [r7, #24]
 8006e74:	4413      	add	r3, r2
 8006e76:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006e78:	88fa      	ldrh	r2, [r7, #6]
 8006e7a:	8b3b      	ldrh	r3, [r7, #24]
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006e80:	2300      	movs	r3, #0
 8006e82:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	61fb      	str	r3, [r7, #28]
 8006e8a:	88fb      	ldrh	r3, [r7, #6]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d002      	beq.n	8006e96 <pbuf_copy_partial+0xca>
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1c4      	bne.n	8006e20 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006e96:	8afb      	ldrh	r3, [r7, #22]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3720      	adds	r7, #32
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	08011e10 	.word	0x08011e10
 8006ea4:	08012158 	.word	0x08012158
 8006ea8:	08011e70 	.word	0x08011e70
 8006eac:	08012178 	.word	0x08012178

08006eb0 <pbuf_get_contiguous>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
void *
pbuf_get_contiguous(const struct pbuf *p, void *buffer, size_t bufsize, u16_t len, u16_t offset)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b086      	sub	sp, #24
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
 8006ebc:	807b      	strh	r3, [r7, #2]
  const struct pbuf *q;
  u16_t out_offset;

  LWIP_ERROR("pbuf_get_contiguous: invalid buf", (p != NULL), return NULL;);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d108      	bne.n	8006ed6 <pbuf_get_contiguous+0x26>
 8006ec4:	4b27      	ldr	r3, [pc, #156]	; (8006f64 <pbuf_get_contiguous+0xb4>)
 8006ec6:	f240 4237 	movw	r2, #1079	; 0x437
 8006eca:	4927      	ldr	r1, [pc, #156]	; (8006f68 <pbuf_get_contiguous+0xb8>)
 8006ecc:	4827      	ldr	r0, [pc, #156]	; (8006f6c <pbuf_get_contiguous+0xbc>)
 8006ece:	f008 fff1 	bl	800feb4 <iprintf>
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	e041      	b.n	8006f5a <pbuf_get_contiguous+0xaa>
  LWIP_ERROR("pbuf_get_contiguous: invalid dataptr", (buffer != NULL), return NULL;);
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d108      	bne.n	8006eee <pbuf_get_contiguous+0x3e>
 8006edc:	4b21      	ldr	r3, [pc, #132]	; (8006f64 <pbuf_get_contiguous+0xb4>)
 8006ede:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8006ee2:	4923      	ldr	r1, [pc, #140]	; (8006f70 <pbuf_get_contiguous+0xc0>)
 8006ee4:	4821      	ldr	r0, [pc, #132]	; (8006f6c <pbuf_get_contiguous+0xbc>)
 8006ee6:	f008 ffe5 	bl	800feb4 <iprintf>
 8006eea:	2300      	movs	r3, #0
 8006eec:	e035      	b.n	8006f5a <pbuf_get_contiguous+0xaa>
  LWIP_ERROR("pbuf_get_contiguous: invalid dataptr", (bufsize >= len), return NULL;);
 8006eee:	887b      	ldrh	r3, [r7, #2]
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d208      	bcs.n	8006f08 <pbuf_get_contiguous+0x58>
 8006ef6:	4b1b      	ldr	r3, [pc, #108]	; (8006f64 <pbuf_get_contiguous+0xb4>)
 8006ef8:	f240 4239 	movw	r2, #1081	; 0x439
 8006efc:	491c      	ldr	r1, [pc, #112]	; (8006f70 <pbuf_get_contiguous+0xc0>)
 8006efe:	481b      	ldr	r0, [pc, #108]	; (8006f6c <pbuf_get_contiguous+0xbc>)
 8006f00:	f008 ffd8 	bl	800feb4 <iprintf>
 8006f04:	2300      	movs	r3, #0
 8006f06:	e028      	b.n	8006f5a <pbuf_get_contiguous+0xaa>

  q = pbuf_skip_const(p, offset, &out_offset);
 8006f08:	f107 0212 	add.w	r2, r7, #18
 8006f0c:	8c3b      	ldrh	r3, [r7, #32]
 8006f0e:	4619      	mov	r1, r3
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f000 f82f 	bl	8006f74 <pbuf_skip_const>
 8006f16:	6178      	str	r0, [r7, #20]
  if (q != NULL) {
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d01c      	beq.n	8006f58 <pbuf_get_contiguous+0xa8>
    if (q->len >= (out_offset + len)) {
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	895b      	ldrh	r3, [r3, #10]
 8006f22:	461a      	mov	r2, r3
 8006f24:	8a7b      	ldrh	r3, [r7, #18]
 8006f26:	4619      	mov	r1, r3
 8006f28:	887b      	ldrh	r3, [r7, #2]
 8006f2a:	440b      	add	r3, r1
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	db04      	blt.n	8006f3a <pbuf_get_contiguous+0x8a>
      /* all data in this pbuf, return zero-copy */
      return (u8_t *)q->payload + out_offset;
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	8a7a      	ldrh	r2, [r7, #18]
 8006f36:	4413      	add	r3, r2
 8006f38:	e00f      	b.n	8006f5a <pbuf_get_contiguous+0xaa>
    }
    /* need to copy */
    if (pbuf_copy_partial(q, buffer, len, out_offset) != len) {
 8006f3a:	8a7b      	ldrh	r3, [r7, #18]
 8006f3c:	887a      	ldrh	r2, [r7, #2]
 8006f3e:	68b9      	ldr	r1, [r7, #8]
 8006f40:	6978      	ldr	r0, [r7, #20]
 8006f42:	f7ff ff43 	bl	8006dcc <pbuf_copy_partial>
 8006f46:	4603      	mov	r3, r0
 8006f48:	461a      	mov	r2, r3
 8006f4a:	887b      	ldrh	r3, [r7, #2]
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d001      	beq.n	8006f54 <pbuf_get_contiguous+0xa4>
      /* copying failed: pbuf is too short */
      return NULL;
 8006f50:	2300      	movs	r3, #0
 8006f52:	e002      	b.n	8006f5a <pbuf_get_contiguous+0xaa>
    }
    return buffer;
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	e000      	b.n	8006f5a <pbuf_get_contiguous+0xaa>
  }
  /* pbuf is too short (offset does not fit in) */
  return NULL;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3718      	adds	r7, #24
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	08011e10 	.word	0x08011e10
 8006f68:	0801219c 	.word	0x0801219c
 8006f6c:	08011e70 	.word	0x08011e70
 8006f70:	080121c0 	.word	0x080121c0

08006f74 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	607a      	str	r2, [r7, #4]
 8006f80:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8006f82:	897b      	ldrh	r3, [r7, #10]
 8006f84:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8006f8a:	e007      	b.n	8006f9c <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	895b      	ldrh	r3, [r3, #10]
 8006f90:	8afa      	ldrh	r2, [r7, #22]
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d004      	beq.n	8006fac <pbuf_skip_const+0x38>
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	895b      	ldrh	r3, [r3, #10]
 8006fa6:	8afa      	ldrh	r2, [r7, #22]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d2ef      	bcs.n	8006f8c <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d002      	beq.n	8006fb8 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	8afa      	ldrh	r2, [r7, #22]
 8006fb6:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8006fb8:	693b      	ldr	r3, [r7, #16]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	371c      	adds	r7, #28
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
	...

08006fc8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	4603      	mov	r3, r0
 8006fd0:	603a      	str	r2, [r7, #0]
 8006fd2:	71fb      	strb	r3, [r7, #7]
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	8919      	ldrh	r1, [r3, #8]
 8006fdc:	88ba      	ldrh	r2, [r7, #4]
 8006fde:	79fb      	ldrb	r3, [r7, #7]
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7ff fa25 	bl	8006430 <pbuf_alloc>
 8006fe6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d101      	bne.n	8006ff2 <pbuf_clone+0x2a>
    return NULL;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	e011      	b.n	8007016 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8006ff2:	6839      	ldr	r1, [r7, #0]
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f7ff fe17 	bl	8006c28 <pbuf_copy>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8006ffe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d006      	beq.n	8007014 <pbuf_clone+0x4c>
 8007006:	4b06      	ldr	r3, [pc, #24]	; (8007020 <pbuf_clone+0x58>)
 8007008:	f240 5224 	movw	r2, #1316	; 0x524
 800700c:	4905      	ldr	r1, [pc, #20]	; (8007024 <pbuf_clone+0x5c>)
 800700e:	4806      	ldr	r0, [pc, #24]	; (8007028 <pbuf_clone+0x60>)
 8007010:	f008 ff50 	bl	800feb4 <iprintf>
  return q;
 8007014:	68fb      	ldr	r3, [r7, #12]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	08011e10 	.word	0x08011e10
 8007024:	08012284 	.word	0x08012284
 8007028:	08011e70 	.word	0x08011e70

0800702c <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	460b      	mov	r3, r1
 8007036:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 8007038:	887b      	ldrh	r3, [r7, #2]
 800703a:	4619      	mov	r1, r3
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 f80c 	bl	800705a <pbuf_try_get_at>
 8007042:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2b00      	cmp	r3, #0
 8007048:	db02      	blt.n	8007050 <pbuf_get_at+0x24>
    return (u8_t)ret;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	b2db      	uxtb	r3, r3
 800704e:	e000      	b.n	8007052 <pbuf_get_at+0x26>
  }
  return 0;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b084      	sub	sp, #16
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
 8007062:	460b      	mov	r3, r1
 8007064:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 8007066:	f107 020a 	add.w	r2, r7, #10
 800706a:	887b      	ldrh	r3, [r7, #2]
 800706c:	4619      	mov	r1, r3
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7ff ff80 	bl	8006f74 <pbuf_skip_const>
 8007074:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00a      	beq.n	8007092 <pbuf_try_get_at+0x38>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	895a      	ldrh	r2, [r3, #10]
 8007080:	897b      	ldrh	r3, [r7, #10]
 8007082:	429a      	cmp	r2, r3
 8007084:	d905      	bls.n	8007092 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	897a      	ldrh	r2, [r7, #10]
 800708c:	4413      	add	r3, r2
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	e001      	b.n	8007096 <pbuf_try_get_at+0x3c>
  }
  return -1;
 8007092:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007096:	4618      	mov	r0, r3
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b088      	sub	sp, #32
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	60f8      	str	r0, [r7, #12]
 80070a6:	607a      	str	r2, [r7, #4]
 80070a8:	461a      	mov	r2, r3
 80070aa:	460b      	mov	r3, r1
 80070ac:	817b      	strh	r3, [r7, #10]
 80070ae:	4613      	mov	r3, r2
 80070b0:	813b      	strh	r3, [r7, #8]
  u16_t start = offset;
 80070b2:	897b      	ldrh	r3, [r7, #10]
 80070b4:	83fb      	strh	r3, [r7, #30]
  const struct pbuf *q = p;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	61bb      	str	r3, [r7, #24]
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	891b      	ldrh	r3, [r3, #8]
 80070be:	4619      	mov	r1, r3
 80070c0:	897a      	ldrh	r2, [r7, #10]
 80070c2:	893b      	ldrh	r3, [r7, #8]
 80070c4:	4413      	add	r3, r2
 80070c6:	4299      	cmp	r1, r3
 80070c8:	da0a      	bge.n	80070e0 <pbuf_memcmp+0x42>
    return 0xffff;
 80070ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80070ce:	e037      	b.n	8007140 <pbuf_memcmp+0xa2>
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start = (u16_t)(start - q->len);
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	895b      	ldrh	r3, [r3, #10]
 80070d4:	8bfa      	ldrh	r2, [r7, #30]
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	83fb      	strh	r3, [r7, #30]
    q = q->next;
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	61bb      	str	r3, [r7, #24]
  while ((q != NULL) && (q->len <= start)) {
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d004      	beq.n	80070f0 <pbuf_memcmp+0x52>
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	895b      	ldrh	r3, [r3, #10]
 80070ea:	8bfa      	ldrh	r2, [r7, #30]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d2ef      	bcs.n	80070d0 <pbuf_memcmp+0x32>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 80070f0:	2300      	movs	r3, #0
 80070f2:	82fb      	strh	r3, [r7, #22]
 80070f4:	e01f      	b.n	8007136 <pbuf_memcmp+0x98>
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 80070f6:	8bfa      	ldrh	r2, [r7, #30]
 80070f8:	8afb      	ldrh	r3, [r7, #22]
 80070fa:	4413      	add	r3, r2
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	4619      	mov	r1, r3
 8007100:	69b8      	ldr	r0, [r7, #24]
 8007102:	f7ff ff93 	bl	800702c <pbuf_get_at>
 8007106:	4603      	mov	r3, r0
 8007108:	757b      	strb	r3, [r7, #21]
    u8_t b = ((const u8_t *)s2)[i];
 800710a:	8afb      	ldrh	r3, [r7, #22]
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	4413      	add	r3, r2
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	753b      	strb	r3, [r7, #20]
    if (a != b) {
 8007114:	7d7a      	ldrb	r2, [r7, #21]
 8007116:	7d3b      	ldrb	r3, [r7, #20]
 8007118:	429a      	cmp	r2, r3
 800711a:	d009      	beq.n	8007130 <pbuf_memcmp+0x92>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 800711c:	8afb      	ldrh	r3, [r7, #22]
 800711e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007122:	4293      	cmp	r3, r2
 8007124:	bf28      	it	cs
 8007126:	4613      	movcs	r3, r2
 8007128:	b29b      	uxth	r3, r3
 800712a:	3301      	adds	r3, #1
 800712c:	b29b      	uxth	r3, r3
 800712e:	e007      	b.n	8007140 <pbuf_memcmp+0xa2>
  for (i = 0; i < n; i++) {
 8007130:	8afb      	ldrh	r3, [r7, #22]
 8007132:	3301      	adds	r3, #1
 8007134:	82fb      	strh	r3, [r7, #22]
 8007136:	8afa      	ldrh	r2, [r7, #22]
 8007138:	893b      	ldrh	r3, [r7, #8]
 800713a:	429a      	cmp	r2, r3
 800713c:	d3db      	bcc.n	80070f6 <pbuf_memcmp+0x58>
    }
  }
  return 0;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3720      	adds	r7, #32
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(const struct pbuf *p, const void *mem, u16_t mem_len, u16_t start_offset)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b086      	sub	sp, #24
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	4611      	mov	r1, r2
 8007154:	461a      	mov	r2, r3
 8007156:	460b      	mov	r3, r1
 8007158:	80fb      	strh	r3, [r7, #6]
 800715a:	4613      	mov	r3, r2
 800715c:	80bb      	strh	r3, [r7, #4]
  u16_t i;
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	891a      	ldrh	r2, [r3, #8]
 8007162:	88fb      	ldrh	r3, [r7, #6]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	82bb      	strh	r3, [r7, #20]
  if (p->tot_len >= mem_len + start_offset) {
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	891b      	ldrh	r3, [r3, #8]
 800716c:	4619      	mov	r1, r3
 800716e:	88fa      	ldrh	r2, [r7, #6]
 8007170:	88bb      	ldrh	r3, [r7, #4]
 8007172:	4413      	add	r3, r2
 8007174:	4299      	cmp	r1, r3
 8007176:	db16      	blt.n	80071a6 <pbuf_memfind+0x5e>
    for (i = start_offset; i <= max_cmp_start; i++) {
 8007178:	88bb      	ldrh	r3, [r7, #4]
 800717a:	82fb      	strh	r3, [r7, #22]
 800717c:	e00f      	b.n	800719e <pbuf_memfind+0x56>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
 800717e:	88fb      	ldrh	r3, [r7, #6]
 8007180:	8af9      	ldrh	r1, [r7, #22]
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f7ff ff8a 	bl	800709e <pbuf_memcmp>
 800718a:	4603      	mov	r3, r0
 800718c:	827b      	strh	r3, [r7, #18]
      if (plus == 0) {
 800718e:	8a7b      	ldrh	r3, [r7, #18]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d101      	bne.n	8007198 <pbuf_memfind+0x50>
        return i;
 8007194:	8afb      	ldrh	r3, [r7, #22]
 8007196:	e008      	b.n	80071aa <pbuf_memfind+0x62>
    for (i = start_offset; i <= max_cmp_start; i++) {
 8007198:	8afb      	ldrh	r3, [r7, #22]
 800719a:	3301      	adds	r3, #1
 800719c:	82fb      	strh	r3, [r7, #22]
 800719e:	8afa      	ldrh	r2, [r7, #22]
 80071a0:	8abb      	ldrh	r3, [r7, #20]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d9eb      	bls.n	800717e <pbuf_memfind+0x36>
      }
    }
  }
  return 0xFFFF;
 80071a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3718      	adds	r7, #24
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
	...

080071b4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80071b8:	f008 fe94 	bl	800fee4 <rand>
 80071bc:	4603      	mov	r3, r0
 80071be:	b29b      	uxth	r3, r3
 80071c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	4b01      	ldr	r3, [pc, #4]	; (80071d4 <tcp_init+0x20>)
 80071ce:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80071d0:	bf00      	nop
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	2000001e 	.word	0x2000001e

080071d8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	7d1b      	ldrb	r3, [r3, #20]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d105      	bne.n	80071f4 <tcp_free+0x1c>
 80071e8:	4b06      	ldr	r3, [pc, #24]	; (8007204 <tcp_free+0x2c>)
 80071ea:	22d4      	movs	r2, #212	; 0xd4
 80071ec:	4906      	ldr	r1, [pc, #24]	; (8007208 <tcp_free+0x30>)
 80071ee:	4807      	ldr	r0, [pc, #28]	; (800720c <tcp_free+0x34>)
 80071f0:	f008 fe60 	bl	800feb4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80071f4:	6879      	ldr	r1, [r7, #4]
 80071f6:	2001      	movs	r0, #1
 80071f8:	f7fe fdec 	bl	8005dd4 <memp_free>
}
 80071fc:	bf00      	nop
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	08012310 	.word	0x08012310
 8007208:	08012340 	.word	0x08012340
 800720c:	08012354 	.word	0x08012354

08007210 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	7d1b      	ldrb	r3, [r3, #20]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d105      	bne.n	800722c <tcp_free_listen+0x1c>
 8007220:	4b06      	ldr	r3, [pc, #24]	; (800723c <tcp_free_listen+0x2c>)
 8007222:	22df      	movs	r2, #223	; 0xdf
 8007224:	4906      	ldr	r1, [pc, #24]	; (8007240 <tcp_free_listen+0x30>)
 8007226:	4807      	ldr	r0, [pc, #28]	; (8007244 <tcp_free_listen+0x34>)
 8007228:	f008 fe44 	bl	800feb4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800722c:	6879      	ldr	r1, [r7, #4]
 800722e:	2002      	movs	r0, #2
 8007230:	f7fe fdd0 	bl	8005dd4 <memp_free>
}
 8007234:	bf00      	nop
 8007236:	3708      	adds	r7, #8
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	08012310 	.word	0x08012310
 8007240:	0801237c 	.word	0x0801237c
 8007244:	08012354 	.word	0x08012354

08007248 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800724c:	f001 f85c 	bl	8008308 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8007250:	4b07      	ldr	r3, [pc, #28]	; (8007270 <tcp_tmr+0x28>)
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	3301      	adds	r3, #1
 8007256:	b2da      	uxtb	r2, r3
 8007258:	4b05      	ldr	r3, [pc, #20]	; (8007270 <tcp_tmr+0x28>)
 800725a:	701a      	strb	r2, [r3, #0]
 800725c:	4b04      	ldr	r3, [pc, #16]	; (8007270 <tcp_tmr+0x28>)
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	f003 0301 	and.w	r3, r3, #1
 8007264:	2b00      	cmp	r3, #0
 8007266:	d001      	beq.n	800726c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8007268:	f000 fd0e 	bl	8007c88 <tcp_slowtmr>
  }
}
 800726c:	bf00      	nop
 800726e:	bd80      	pop	{r7, pc}
 8007270:	20000555 	.word	0x20000555

08007274 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d105      	bne.n	8007290 <tcp_remove_listener+0x1c>
 8007284:	4b0d      	ldr	r3, [pc, #52]	; (80072bc <tcp_remove_listener+0x48>)
 8007286:	22ff      	movs	r2, #255	; 0xff
 8007288:	490d      	ldr	r1, [pc, #52]	; (80072c0 <tcp_remove_listener+0x4c>)
 800728a:	480e      	ldr	r0, [pc, #56]	; (80072c4 <tcp_remove_listener+0x50>)
 800728c:	f008 fe12 	bl	800feb4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	60fb      	str	r3, [r7, #12]
 8007294:	e00a      	b.n	80072ac <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800729a:	683a      	ldr	r2, [r7, #0]
 800729c:	429a      	cmp	r2, r3
 800729e:	d102      	bne.n	80072a6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	60fb      	str	r3, [r7, #12]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1f1      	bne.n	8007296 <tcp_remove_listener+0x22>
    }
  }
}
 80072b2:	bf00      	nop
 80072b4:	bf00      	nop
 80072b6:	3710      	adds	r7, #16
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	08012310 	.word	0x08012310
 80072c0:	08012398 	.word	0x08012398
 80072c4:	08012354 	.word	0x08012354

080072c8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d106      	bne.n	80072e4 <tcp_listen_closed+0x1c>
 80072d6:	4b14      	ldr	r3, [pc, #80]	; (8007328 <tcp_listen_closed+0x60>)
 80072d8:	f240 1211 	movw	r2, #273	; 0x111
 80072dc:	4913      	ldr	r1, [pc, #76]	; (800732c <tcp_listen_closed+0x64>)
 80072de:	4814      	ldr	r0, [pc, #80]	; (8007330 <tcp_listen_closed+0x68>)
 80072e0:	f008 fde8 	bl	800feb4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	7d1b      	ldrb	r3, [r3, #20]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d006      	beq.n	80072fa <tcp_listen_closed+0x32>
 80072ec:	4b0e      	ldr	r3, [pc, #56]	; (8007328 <tcp_listen_closed+0x60>)
 80072ee:	f44f 7289 	mov.w	r2, #274	; 0x112
 80072f2:	4910      	ldr	r1, [pc, #64]	; (8007334 <tcp_listen_closed+0x6c>)
 80072f4:	480e      	ldr	r0, [pc, #56]	; (8007330 <tcp_listen_closed+0x68>)
 80072f6:	f008 fddd 	bl	800feb4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80072fa:	2301      	movs	r3, #1
 80072fc:	60fb      	str	r3, [r7, #12]
 80072fe:	e00b      	b.n	8007318 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8007300:	4a0d      	ldr	r2, [pc, #52]	; (8007338 <tcp_listen_closed+0x70>)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	6879      	ldr	r1, [r7, #4]
 800730c:	4618      	mov	r0, r3
 800730e:	f7ff ffb1 	bl	8007274 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	3301      	adds	r3, #1
 8007316:	60fb      	str	r3, [r7, #12]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2b03      	cmp	r3, #3
 800731c:	d9f0      	bls.n	8007300 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800731e:	bf00      	nop
 8007320:	bf00      	nop
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	08012310 	.word	0x08012310
 800732c:	080123c0 	.word	0x080123c0
 8007330:	08012354 	.word	0x08012354
 8007334:	080123cc 	.word	0x080123cc
 8007338:	08021204 	.word	0x08021204

0800733c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800733c:	b5b0      	push	{r4, r5, r7, lr}
 800733e:	b088      	sub	sp, #32
 8007340:	af04      	add	r7, sp, #16
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	460b      	mov	r3, r1
 8007346:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d106      	bne.n	800735c <tcp_close_shutdown+0x20>
 800734e:	4b63      	ldr	r3, [pc, #396]	; (80074dc <tcp_close_shutdown+0x1a0>)
 8007350:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8007354:	4962      	ldr	r1, [pc, #392]	; (80074e0 <tcp_close_shutdown+0x1a4>)
 8007356:	4863      	ldr	r0, [pc, #396]	; (80074e4 <tcp_close_shutdown+0x1a8>)
 8007358:	f008 fdac 	bl	800feb4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800735c:	78fb      	ldrb	r3, [r7, #3]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d066      	beq.n	8007430 <tcp_close_shutdown+0xf4>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	7d1b      	ldrb	r3, [r3, #20]
 8007366:	2b04      	cmp	r3, #4
 8007368:	d003      	beq.n	8007372 <tcp_close_shutdown+0x36>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	7d1b      	ldrb	r3, [r3, #20]
 800736e:	2b07      	cmp	r3, #7
 8007370:	d15e      	bne.n	8007430 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007376:	2b00      	cmp	r3, #0
 8007378:	d104      	bne.n	8007384 <tcp_close_shutdown+0x48>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800737e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007382:	d055      	beq.n	8007430 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	8b5b      	ldrh	r3, [r3, #26]
 8007388:	f003 0310 	and.w	r3, r3, #16
 800738c:	2b00      	cmp	r3, #0
 800738e:	d106      	bne.n	800739e <tcp_close_shutdown+0x62>
 8007390:	4b52      	ldr	r3, [pc, #328]	; (80074dc <tcp_close_shutdown+0x1a0>)
 8007392:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8007396:	4954      	ldr	r1, [pc, #336]	; (80074e8 <tcp_close_shutdown+0x1ac>)
 8007398:	4852      	ldr	r0, [pc, #328]	; (80074e4 <tcp_close_shutdown+0x1a8>)
 800739a:	f008 fd8b 	bl	800feb4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80073a6:	687d      	ldr	r5, [r7, #4]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	3304      	adds	r3, #4
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	8ad2      	ldrh	r2, [r2, #22]
 80073b0:	6879      	ldr	r1, [r7, #4]
 80073b2:	8b09      	ldrh	r1, [r1, #24]
 80073b4:	9102      	str	r1, [sp, #8]
 80073b6:	9201      	str	r2, [sp, #4]
 80073b8:	9300      	str	r3, [sp, #0]
 80073ba:	462b      	mov	r3, r5
 80073bc:	4622      	mov	r2, r4
 80073be:	4601      	mov	r1, r0
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f005 fd8b 	bl	800cedc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f001 fb6c 	bl	8008aa4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80073cc:	4b47      	ldr	r3, [pc, #284]	; (80074ec <tcp_close_shutdown+0x1b0>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d105      	bne.n	80073e2 <tcp_close_shutdown+0xa6>
 80073d6:	4b45      	ldr	r3, [pc, #276]	; (80074ec <tcp_close_shutdown+0x1b0>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	4a43      	ldr	r2, [pc, #268]	; (80074ec <tcp_close_shutdown+0x1b0>)
 80073de:	6013      	str	r3, [r2, #0]
 80073e0:	e013      	b.n	800740a <tcp_close_shutdown+0xce>
 80073e2:	4b42      	ldr	r3, [pc, #264]	; (80074ec <tcp_close_shutdown+0x1b0>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	60fb      	str	r3, [r7, #12]
 80073e8:	e00c      	b.n	8007404 <tcp_close_shutdown+0xc8>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d104      	bne.n	80073fe <tcp_close_shutdown+0xc2>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	68da      	ldr	r2, [r3, #12]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	60da      	str	r2, [r3, #12]
 80073fc:	e005      	b.n	800740a <tcp_close_shutdown+0xce>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	60fb      	str	r3, [r7, #12]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1ef      	bne.n	80073ea <tcp_close_shutdown+0xae>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	60da      	str	r2, [r3, #12]
 8007410:	4b37      	ldr	r3, [pc, #220]	; (80074f0 <tcp_close_shutdown+0x1b4>)
 8007412:	2201      	movs	r2, #1
 8007414:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8007416:	4b37      	ldr	r3, [pc, #220]	; (80074f4 <tcp_close_shutdown+0x1b8>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	429a      	cmp	r2, r3
 800741e:	d102      	bne.n	8007426 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8007420:	f004 f800 	bl	800b424 <tcp_trigger_input_pcb_close>
 8007424:	e002      	b.n	800742c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7ff fed6 	bl	80071d8 <tcp_free>
      }
      return ERR_OK;
 800742c:	2300      	movs	r3, #0
 800742e:	e050      	b.n	80074d2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	7d1b      	ldrb	r3, [r3, #20]
 8007434:	2b02      	cmp	r3, #2
 8007436:	d03b      	beq.n	80074b0 <tcp_close_shutdown+0x174>
 8007438:	2b02      	cmp	r3, #2
 800743a:	dc44      	bgt.n	80074c6 <tcp_close_shutdown+0x18a>
 800743c:	2b00      	cmp	r3, #0
 800743e:	d002      	beq.n	8007446 <tcp_close_shutdown+0x10a>
 8007440:	2b01      	cmp	r3, #1
 8007442:	d02a      	beq.n	800749a <tcp_close_shutdown+0x15e>
 8007444:	e03f      	b.n	80074c6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	8adb      	ldrh	r3, [r3, #22]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d021      	beq.n	8007492 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800744e:	4b2a      	ldr	r3, [pc, #168]	; (80074f8 <tcp_close_shutdown+0x1bc>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	429a      	cmp	r2, r3
 8007456:	d105      	bne.n	8007464 <tcp_close_shutdown+0x128>
 8007458:	4b27      	ldr	r3, [pc, #156]	; (80074f8 <tcp_close_shutdown+0x1bc>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	4a26      	ldr	r2, [pc, #152]	; (80074f8 <tcp_close_shutdown+0x1bc>)
 8007460:	6013      	str	r3, [r2, #0]
 8007462:	e013      	b.n	800748c <tcp_close_shutdown+0x150>
 8007464:	4b24      	ldr	r3, [pc, #144]	; (80074f8 <tcp_close_shutdown+0x1bc>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	60bb      	str	r3, [r7, #8]
 800746a:	e00c      	b.n	8007486 <tcp_close_shutdown+0x14a>
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	429a      	cmp	r2, r3
 8007474:	d104      	bne.n	8007480 <tcp_close_shutdown+0x144>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	68da      	ldr	r2, [r3, #12]
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	60da      	str	r2, [r3, #12]
 800747e:	e005      	b.n	800748c <tcp_close_shutdown+0x150>
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	60bb      	str	r3, [r7, #8]
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1ef      	bne.n	800746c <tcp_close_shutdown+0x130>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7ff fea0 	bl	80071d8 <tcp_free>
      break;
 8007498:	e01a      	b.n	80074d0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f7ff ff14 	bl	80072c8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80074a0:	6879      	ldr	r1, [r7, #4]
 80074a2:	4816      	ldr	r0, [pc, #88]	; (80074fc <tcp_close_shutdown+0x1c0>)
 80074a4:	f001 fb4e 	bl	8008b44 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f7ff feb1 	bl	8007210 <tcp_free_listen>
      break;
 80074ae:	e00f      	b.n	80074d0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80074b0:	6879      	ldr	r1, [r7, #4]
 80074b2:	480e      	ldr	r0, [pc, #56]	; (80074ec <tcp_close_shutdown+0x1b0>)
 80074b4:	f001 fb46 	bl	8008b44 <tcp_pcb_remove>
 80074b8:	4b0d      	ldr	r3, [pc, #52]	; (80074f0 <tcp_close_shutdown+0x1b4>)
 80074ba:	2201      	movs	r2, #1
 80074bc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f7ff fe8a 	bl	80071d8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80074c4:	e004      	b.n	80074d0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f81a 	bl	8007500 <tcp_close_shutdown_fin>
 80074cc:	4603      	mov	r3, r0
 80074ce:	e000      	b.n	80074d2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bdb0      	pop	{r4, r5, r7, pc}
 80074da:	bf00      	nop
 80074dc:	08012310 	.word	0x08012310
 80074e0:	080123e4 	.word	0x080123e4
 80074e4:	08012354 	.word	0x08012354
 80074e8:	08012404 	.word	0x08012404
 80074ec:	20006d4c 	.word	0x20006d4c
 80074f0:	20006d48 	.word	0x20006d48
 80074f4:	20006d60 	.word	0x20006d60
 80074f8:	20006d58 	.word	0x20006d58
 80074fc:	20006d54 	.word	0x20006d54

08007500 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d106      	bne.n	800751c <tcp_close_shutdown_fin+0x1c>
 800750e:	4b2e      	ldr	r3, [pc, #184]	; (80075c8 <tcp_close_shutdown_fin+0xc8>)
 8007510:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8007514:	492d      	ldr	r1, [pc, #180]	; (80075cc <tcp_close_shutdown_fin+0xcc>)
 8007516:	482e      	ldr	r0, [pc, #184]	; (80075d0 <tcp_close_shutdown_fin+0xd0>)
 8007518:	f008 fccc 	bl	800feb4 <iprintf>

  switch (pcb->state) {
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	7d1b      	ldrb	r3, [r3, #20]
 8007520:	2b07      	cmp	r3, #7
 8007522:	d020      	beq.n	8007566 <tcp_close_shutdown_fin+0x66>
 8007524:	2b07      	cmp	r3, #7
 8007526:	dc2b      	bgt.n	8007580 <tcp_close_shutdown_fin+0x80>
 8007528:	2b03      	cmp	r3, #3
 800752a:	d002      	beq.n	8007532 <tcp_close_shutdown_fin+0x32>
 800752c:	2b04      	cmp	r3, #4
 800752e:	d00d      	beq.n	800754c <tcp_close_shutdown_fin+0x4c>
 8007530:	e026      	b.n	8007580 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f004 fde0 	bl	800c0f8 <tcp_send_fin>
 8007538:	4603      	mov	r3, r0
 800753a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800753c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d11f      	bne.n	8007584 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2205      	movs	r2, #5
 8007548:	751a      	strb	r2, [r3, #20]
      }
      break;
 800754a:	e01b      	b.n	8007584 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f004 fdd3 	bl	800c0f8 <tcp_send_fin>
 8007552:	4603      	mov	r3, r0
 8007554:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d114      	bne.n	8007588 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2205      	movs	r2, #5
 8007562:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007564:	e010      	b.n	8007588 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f004 fdc6 	bl	800c0f8 <tcp_send_fin>
 800756c:	4603      	mov	r3, r0
 800756e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d109      	bne.n	800758c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2209      	movs	r2, #9
 800757c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800757e:	e005      	b.n	800758c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8007580:	2300      	movs	r3, #0
 8007582:	e01c      	b.n	80075be <tcp_close_shutdown_fin+0xbe>
      break;
 8007584:	bf00      	nop
 8007586:	e002      	b.n	800758e <tcp_close_shutdown_fin+0x8e>
      break;
 8007588:	bf00      	nop
 800758a:	e000      	b.n	800758e <tcp_close_shutdown_fin+0x8e>
      break;
 800758c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800758e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d103      	bne.n	800759e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f004 feec 	bl	800c374 <tcp_output>
 800759c:	e00d      	b.n	80075ba <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800759e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075a6:	d108      	bne.n	80075ba <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	8b5b      	ldrh	r3, [r3, #26]
 80075ac:	f043 0308 	orr.w	r3, r3, #8
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80075b6:	2300      	movs	r3, #0
 80075b8:	e001      	b.n	80075be <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80075ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	08012310 	.word	0x08012310
 80075cc:	080123c0 	.word	0x080123c0
 80075d0:	08012354 	.word	0x08012354

080075d4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d109      	bne.n	80075f6 <tcp_close+0x22>
 80075e2:	4b0f      	ldr	r3, [pc, #60]	; (8007620 <tcp_close+0x4c>)
 80075e4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80075e8:	490e      	ldr	r1, [pc, #56]	; (8007624 <tcp_close+0x50>)
 80075ea:	480f      	ldr	r0, [pc, #60]	; (8007628 <tcp_close+0x54>)
 80075ec:	f008 fc62 	bl	800feb4 <iprintf>
 80075f0:	f06f 030f 	mvn.w	r3, #15
 80075f4:	e00f      	b.n	8007616 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	7d1b      	ldrb	r3, [r3, #20]
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d006      	beq.n	800760c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	8b5b      	ldrh	r3, [r3, #26]
 8007602:	f043 0310 	orr.w	r3, r3, #16
 8007606:	b29a      	uxth	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800760c:	2101      	movs	r1, #1
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f7ff fe94 	bl	800733c <tcp_close_shutdown>
 8007614:	4603      	mov	r3, r0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	08012310 	.word	0x08012310
 8007624:	08012420 	.word	0x08012420
 8007628:	08012354 	.word	0x08012354

0800762c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b08e      	sub	sp, #56	; 0x38
 8007630:	af04      	add	r7, sp, #16
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d107      	bne.n	800764c <tcp_abandon+0x20>
 800763c:	4b52      	ldr	r3, [pc, #328]	; (8007788 <tcp_abandon+0x15c>)
 800763e:	f240 223d 	movw	r2, #573	; 0x23d
 8007642:	4952      	ldr	r1, [pc, #328]	; (800778c <tcp_abandon+0x160>)
 8007644:	4852      	ldr	r0, [pc, #328]	; (8007790 <tcp_abandon+0x164>)
 8007646:	f008 fc35 	bl	800feb4 <iprintf>
 800764a:	e099      	b.n	8007780 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	7d1b      	ldrb	r3, [r3, #20]
 8007650:	2b01      	cmp	r3, #1
 8007652:	d106      	bne.n	8007662 <tcp_abandon+0x36>
 8007654:	4b4c      	ldr	r3, [pc, #304]	; (8007788 <tcp_abandon+0x15c>)
 8007656:	f44f 7210 	mov.w	r2, #576	; 0x240
 800765a:	494e      	ldr	r1, [pc, #312]	; (8007794 <tcp_abandon+0x168>)
 800765c:	484c      	ldr	r0, [pc, #304]	; (8007790 <tcp_abandon+0x164>)
 800765e:	f008 fc29 	bl	800feb4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	7d1b      	ldrb	r3, [r3, #20]
 8007666:	2b0a      	cmp	r3, #10
 8007668:	d107      	bne.n	800767a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800766a:	6879      	ldr	r1, [r7, #4]
 800766c:	484a      	ldr	r0, [pc, #296]	; (8007798 <tcp_abandon+0x16c>)
 800766e:	f001 fa69 	bl	8008b44 <tcp_pcb_remove>
    tcp_free(pcb);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7ff fdb0 	bl	80071d8 <tcp_free>
 8007678:	e082      	b.n	8007780 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800767a:	2300      	movs	r3, #0
 800767c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800767e:	2300      	movs	r3, #0
 8007680:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007686:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007694:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	7d1b      	ldrb	r3, [r3, #20]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d126      	bne.n	80076f2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	8adb      	ldrh	r3, [r3, #22]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d02e      	beq.n	800770a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80076ac:	4b3b      	ldr	r3, [pc, #236]	; (800779c <tcp_abandon+0x170>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d105      	bne.n	80076c2 <tcp_abandon+0x96>
 80076b6:	4b39      	ldr	r3, [pc, #228]	; (800779c <tcp_abandon+0x170>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	4a37      	ldr	r2, [pc, #220]	; (800779c <tcp_abandon+0x170>)
 80076be:	6013      	str	r3, [r2, #0]
 80076c0:	e013      	b.n	80076ea <tcp_abandon+0xbe>
 80076c2:	4b36      	ldr	r3, [pc, #216]	; (800779c <tcp_abandon+0x170>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	61fb      	str	r3, [r7, #28]
 80076c8:	e00c      	b.n	80076e4 <tcp_abandon+0xb8>
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d104      	bne.n	80076de <tcp_abandon+0xb2>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	68da      	ldr	r2, [r3, #12]
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	60da      	str	r2, [r3, #12]
 80076dc:	e005      	b.n	80076ea <tcp_abandon+0xbe>
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	61fb      	str	r3, [r7, #28]
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1ef      	bne.n	80076ca <tcp_abandon+0x9e>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	60da      	str	r2, [r3, #12]
 80076f0:	e00b      	b.n	800770a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	8adb      	ldrh	r3, [r3, #22]
 80076fa:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80076fc:	6879      	ldr	r1, [r7, #4]
 80076fe:	4828      	ldr	r0, [pc, #160]	; (80077a0 <tcp_abandon+0x174>)
 8007700:	f001 fa20 	bl	8008b44 <tcp_pcb_remove>
 8007704:	4b27      	ldr	r3, [pc, #156]	; (80077a4 <tcp_abandon+0x178>)
 8007706:	2201      	movs	r2, #1
 8007708:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800770e:	2b00      	cmp	r3, #0
 8007710:	d004      	beq.n	800771c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007716:	4618      	mov	r0, r3
 8007718:	f000 fed6 	bl	80084c8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007720:	2b00      	cmp	r3, #0
 8007722:	d004      	beq.n	800772e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007728:	4618      	mov	r0, r3
 800772a:	f000 fecd 	bl	80084c8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007732:	2b00      	cmp	r3, #0
 8007734:	d004      	beq.n	8007740 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800773a:	4618      	mov	r0, r3
 800773c:	f000 fec4 	bl	80084c8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8007740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00e      	beq.n	8007764 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007746:	6879      	ldr	r1, [r7, #4]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	3304      	adds	r3, #4
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	8b12      	ldrh	r2, [r2, #24]
 8007750:	9202      	str	r2, [sp, #8]
 8007752:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007754:	9201      	str	r2, [sp, #4]
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	460b      	mov	r3, r1
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	69b9      	ldr	r1, [r7, #24]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f005 fbbc 	bl	800cedc <tcp_rst>
    }
    last_state = pcb->state;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	7d1b      	ldrb	r3, [r3, #20]
 8007768:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7ff fd34 	bl	80071d8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d004      	beq.n	8007780 <tcp_abandon+0x154>
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	f06f 010c 	mvn.w	r1, #12
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	4798      	blx	r3
  }
}
 8007780:	3728      	adds	r7, #40	; 0x28
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	08012310 	.word	0x08012310
 800778c:	08012454 	.word	0x08012454
 8007790:	08012354 	.word	0x08012354
 8007794:	08012470 	.word	0x08012470
 8007798:	20006d5c 	.word	0x20006d5c
 800779c:	20006d58 	.word	0x20006d58
 80077a0:	20006d4c 	.word	0x20006d4c
 80077a4:	20006d48 	.word	0x20006d48

080077a8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80077b0:	2101      	movs	r1, #1
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7ff ff3a 	bl	800762c <tcp_abandon>
}
 80077b8:	bf00      	nop
 80077ba:	3708      	adds	r7, #8
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b088      	sub	sp, #32
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	4613      	mov	r3, r2
 80077cc:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80077ce:	2304      	movs	r3, #4
 80077d0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d101      	bne.n	80077dc <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80077d8:	4b3e      	ldr	r3, [pc, #248]	; (80078d4 <tcp_bind+0x114>)
 80077da:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d109      	bne.n	80077f6 <tcp_bind+0x36>
 80077e2:	4b3d      	ldr	r3, [pc, #244]	; (80078d8 <tcp_bind+0x118>)
 80077e4:	f240 22a9 	movw	r2, #681	; 0x2a9
 80077e8:	493c      	ldr	r1, [pc, #240]	; (80078dc <tcp_bind+0x11c>)
 80077ea:	483d      	ldr	r0, [pc, #244]	; (80078e0 <tcp_bind+0x120>)
 80077ec:	f008 fb62 	bl	800feb4 <iprintf>
 80077f0:	f06f 030f 	mvn.w	r3, #15
 80077f4:	e06a      	b.n	80078cc <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	7d1b      	ldrb	r3, [r3, #20]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d009      	beq.n	8007812 <tcp_bind+0x52>
 80077fe:	4b36      	ldr	r3, [pc, #216]	; (80078d8 <tcp_bind+0x118>)
 8007800:	f240 22ab 	movw	r2, #683	; 0x2ab
 8007804:	4937      	ldr	r1, [pc, #220]	; (80078e4 <tcp_bind+0x124>)
 8007806:	4836      	ldr	r0, [pc, #216]	; (80078e0 <tcp_bind+0x120>)
 8007808:	f008 fb54 	bl	800feb4 <iprintf>
 800780c:	f06f 0305 	mvn.w	r3, #5
 8007810:	e05c      	b.n	80078cc <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8007812:	88fb      	ldrh	r3, [r7, #6]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d109      	bne.n	800782c <tcp_bind+0x6c>
    port = tcp_new_port();
 8007818:	f000 f9f0 	bl	8007bfc <tcp_new_port>
 800781c:	4603      	mov	r3, r0
 800781e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8007820:	88fb      	ldrh	r3, [r7, #6]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d135      	bne.n	8007892 <tcp_bind+0xd2>
      return ERR_BUF;
 8007826:	f06f 0301 	mvn.w	r3, #1
 800782a:	e04f      	b.n	80078cc <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800782c:	2300      	movs	r3, #0
 800782e:	61fb      	str	r3, [r7, #28]
 8007830:	e02b      	b.n	800788a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007832:	4a2d      	ldr	r2, [pc, #180]	; (80078e8 <tcp_bind+0x128>)
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	61bb      	str	r3, [r7, #24]
 800783e:	e01e      	b.n	800787e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	8adb      	ldrh	r3, [r3, #22]
 8007844:	88fa      	ldrh	r2, [r7, #6]
 8007846:	429a      	cmp	r2, r3
 8007848:	d116      	bne.n	8007878 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800784a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800784c:	2b00      	cmp	r3, #0
 800784e:	d010      	beq.n	8007872 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00c      	beq.n	8007872 <tcp_bind+0xb2>
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d009      	beq.n	8007872 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d005      	beq.n	8007872 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800786e:	429a      	cmp	r2, r3
 8007870:	d102      	bne.n	8007878 <tcp_bind+0xb8>
              return ERR_USE;
 8007872:	f06f 0307 	mvn.w	r3, #7
 8007876:	e029      	b.n	80078cc <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	61bb      	str	r3, [r7, #24]
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d1dd      	bne.n	8007840 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	3301      	adds	r3, #1
 8007888:	61fb      	str	r3, [r7, #28]
 800788a:	69fa      	ldr	r2, [r7, #28]
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	429a      	cmp	r2, r3
 8007890:	dbcf      	blt.n	8007832 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00c      	beq.n	80078b2 <tcp_bind+0xf2>
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d008      	beq.n	80078b2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d002      	beq.n	80078ac <tcp_bind+0xec>
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	e000      	b.n	80078ae <tcp_bind+0xee>
 80078ac:	2300      	movs	r3, #0
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	88fa      	ldrh	r2, [r7, #6]
 80078b6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80078b8:	4b0c      	ldr	r3, [pc, #48]	; (80078ec <tcp_bind+0x12c>)
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	60da      	str	r2, [r3, #12]
 80078c0:	4a0a      	ldr	r2, [pc, #40]	; (80078ec <tcp_bind+0x12c>)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6013      	str	r3, [r2, #0]
 80078c6:	f005 fccb 	bl	800d260 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3720      	adds	r7, #32
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	0802122c 	.word	0x0802122c
 80078d8:	08012310 	.word	0x08012310
 80078dc:	080124a4 	.word	0x080124a4
 80078e0:	08012354 	.word	0x08012354
 80078e4:	080124bc 	.word	0x080124bc
 80078e8:	08021204 	.word	0x08021204
 80078ec:	20006d58 	.word	0x20006d58

080078f0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	4613      	mov	r3, r2
 80078fc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d106      	bne.n	8007912 <tcp_accept_null+0x22>
 8007904:	4b07      	ldr	r3, [pc, #28]	; (8007924 <tcp_accept_null+0x34>)
 8007906:	f240 320f 	movw	r2, #783	; 0x30f
 800790a:	4907      	ldr	r1, [pc, #28]	; (8007928 <tcp_accept_null+0x38>)
 800790c:	4807      	ldr	r0, [pc, #28]	; (800792c <tcp_accept_null+0x3c>)
 800790e:	f008 fad1 	bl	800feb4 <iprintf>

  tcp_abort(pcb);
 8007912:	68b8      	ldr	r0, [r7, #8]
 8007914:	f7ff ff48 	bl	80077a8 <tcp_abort>

  return ERR_ABRT;
 8007918:	f06f 030c 	mvn.w	r3, #12
}
 800791c:	4618      	mov	r0, r3
 800791e:	3710      	adds	r7, #16
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	08012310 	.word	0x08012310
 8007928:	080124e4 	.word	0x080124e4
 800792c:	08012354 	.word	0x08012354

08007930 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	460b      	mov	r3, r1
 800793a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800793c:	78fb      	ldrb	r3, [r7, #3]
 800793e:	2200      	movs	r2, #0
 8007940:	4619      	mov	r1, r3
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f806 	bl	8007954 <tcp_listen_with_backlog_and_err>
 8007948:	4603      	mov	r3, r0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3708      	adds	r7, #8
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
	...

08007954 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b088      	sub	sp, #32
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	460b      	mov	r3, r1
 800795e:	607a      	str	r2, [r7, #4]
 8007960:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8007962:	2300      	movs	r3, #0
 8007964:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d109      	bne.n	8007980 <tcp_listen_with_backlog_and_err+0x2c>
 800796c:	4b47      	ldr	r3, [pc, #284]	; (8007a8c <tcp_listen_with_backlog_and_err+0x138>)
 800796e:	f240 3259 	movw	r2, #857	; 0x359
 8007972:	4947      	ldr	r1, [pc, #284]	; (8007a90 <tcp_listen_with_backlog_and_err+0x13c>)
 8007974:	4847      	ldr	r0, [pc, #284]	; (8007a94 <tcp_listen_with_backlog_and_err+0x140>)
 8007976:	f008 fa9d 	bl	800feb4 <iprintf>
 800797a:	23f0      	movs	r3, #240	; 0xf0
 800797c:	76fb      	strb	r3, [r7, #27]
 800797e:	e079      	b.n	8007a74 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	7d1b      	ldrb	r3, [r3, #20]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d009      	beq.n	800799c <tcp_listen_with_backlog_and_err+0x48>
 8007988:	4b40      	ldr	r3, [pc, #256]	; (8007a8c <tcp_listen_with_backlog_and_err+0x138>)
 800798a:	f240 325a 	movw	r2, #858	; 0x35a
 800798e:	4942      	ldr	r1, [pc, #264]	; (8007a98 <tcp_listen_with_backlog_and_err+0x144>)
 8007990:	4840      	ldr	r0, [pc, #256]	; (8007a94 <tcp_listen_with_backlog_and_err+0x140>)
 8007992:	f008 fa8f 	bl	800feb4 <iprintf>
 8007996:	23f1      	movs	r3, #241	; 0xf1
 8007998:	76fb      	strb	r3, [r7, #27]
 800799a:	e06b      	b.n	8007a74 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	7d1b      	ldrb	r3, [r3, #20]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d104      	bne.n	80079ae <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80079a8:	23f7      	movs	r3, #247	; 0xf7
 80079aa:	76fb      	strb	r3, [r7, #27]
    goto done;
 80079ac:	e062      	b.n	8007a74 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80079ae:	2002      	movs	r0, #2
 80079b0:	f7fe f9c4 	bl	8005d3c <memp_malloc>
 80079b4:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d102      	bne.n	80079c2 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 80079bc:	23ff      	movs	r3, #255	; 0xff
 80079be:	76fb      	strb	r3, [r7, #27]
    goto done;
 80079c0:	e058      	b.n	8007a74 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	691a      	ldr	r2, [r3, #16]
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	8ada      	ldrh	r2, [r3, #22]
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	2201      	movs	r2, #1
 80079d6:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	7d5a      	ldrb	r2, [r3, #21]
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	7a5a      	ldrb	r2, [r3, #9]
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	2200      	movs	r2, #0
 80079ec:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	7ada      	ldrb	r2, [r3, #11]
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	7a9a      	ldrb	r2, [r3, #10]
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	8adb      	ldrh	r3, [r3, #22]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d021      	beq.n	8007a52 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8007a0e:	4b23      	ldr	r3, [pc, #140]	; (8007a9c <tcp_listen_with_backlog_and_err+0x148>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d105      	bne.n	8007a24 <tcp_listen_with_backlog_and_err+0xd0>
 8007a18:	4b20      	ldr	r3, [pc, #128]	; (8007a9c <tcp_listen_with_backlog_and_err+0x148>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	4a1f      	ldr	r2, [pc, #124]	; (8007a9c <tcp_listen_with_backlog_and_err+0x148>)
 8007a20:	6013      	str	r3, [r2, #0]
 8007a22:	e013      	b.n	8007a4c <tcp_listen_with_backlog_and_err+0xf8>
 8007a24:	4b1d      	ldr	r3, [pc, #116]	; (8007a9c <tcp_listen_with_backlog_and_err+0x148>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	617b      	str	r3, [r7, #20]
 8007a2a:	e00c      	b.n	8007a46 <tcp_listen_with_backlog_and_err+0xf2>
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d104      	bne.n	8007a40 <tcp_listen_with_backlog_and_err+0xec>
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	68da      	ldr	r2, [r3, #12]
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	60da      	str	r2, [r3, #12]
 8007a3e:	e005      	b.n	8007a4c <tcp_listen_with_backlog_and_err+0xf8>
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	617b      	str	r3, [r7, #20]
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d1ef      	bne.n	8007a2c <tcp_listen_with_backlog_and_err+0xd8>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f7ff fbc0 	bl	80071d8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	4a11      	ldr	r2, [pc, #68]	; (8007aa0 <tcp_listen_with_backlog_and_err+0x14c>)
 8007a5c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8007a5e:	4b11      	ldr	r3, [pc, #68]	; (8007aa4 <tcp_listen_with_backlog_and_err+0x150>)
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	60da      	str	r2, [r3, #12]
 8007a66:	4a0f      	ldr	r2, [pc, #60]	; (8007aa4 <tcp_listen_with_backlog_and_err+0x150>)
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	6013      	str	r3, [r2, #0]
 8007a6c:	f005 fbf8 	bl	800d260 <tcp_timer_needed>
  res = ERR_OK;
 8007a70:	2300      	movs	r3, #0
 8007a72:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d002      	beq.n	8007a80 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	7efa      	ldrb	r2, [r7, #27]
 8007a7e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8007a80:	69fb      	ldr	r3, [r7, #28]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3720      	adds	r7, #32
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	08012310 	.word	0x08012310
 8007a90:	08012504 	.word	0x08012504
 8007a94:	08012354 	.word	0x08012354
 8007a98:	08012534 	.word	0x08012534
 8007a9c:	20006d58 	.word	0x20006d58
 8007aa0:	080078f1 	.word	0x080078f1
 8007aa4:	20006d54 	.word	0x20006d54

08007aa8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d106      	bne.n	8007ac4 <tcp_update_rcv_ann_wnd+0x1c>
 8007ab6:	4b25      	ldr	r3, [pc, #148]	; (8007b4c <tcp_update_rcv_ann_wnd+0xa4>)
 8007ab8:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007abc:	4924      	ldr	r1, [pc, #144]	; (8007b50 <tcp_update_rcv_ann_wnd+0xa8>)
 8007abe:	4825      	ldr	r0, [pc, #148]	; (8007b54 <tcp_update_rcv_ann_wnd+0xac>)
 8007ac0:	f008 f9f8 	bl	800feb4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007acc:	4413      	add	r3, r2
 8007ace:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8007ad8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007adc:	bf28      	it	cs
 8007ade:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8007ae2:	b292      	uxth	r2, r2
 8007ae4:	4413      	add	r3, r2
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	db08      	blt.n	8007b00 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	1ad3      	subs	r3, r2, r3
 8007afe:	e020      	b.n	8007b42 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	dd03      	ble.n	8007b16 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007b14:	e014      	b.n	8007b40 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b28:	d306      	bcc.n	8007b38 <tcp_update_rcv_ann_wnd+0x90>
 8007b2a:	4b08      	ldr	r3, [pc, #32]	; (8007b4c <tcp_update_rcv_ann_wnd+0xa4>)
 8007b2c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8007b30:	4909      	ldr	r1, [pc, #36]	; (8007b58 <tcp_update_rcv_ann_wnd+0xb0>)
 8007b32:	4808      	ldr	r0, [pc, #32]	; (8007b54 <tcp_update_rcv_ann_wnd+0xac>)
 8007b34:	f008 f9be 	bl	800feb4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8007b40:	2300      	movs	r3, #0
  }
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	08012310 	.word	0x08012310
 8007b50:	0801256c 	.word	0x0801256c
 8007b54:	08012354 	.word	0x08012354
 8007b58:	08012590 	.word	0x08012590

08007b5c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	460b      	mov	r3, r1
 8007b66:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d107      	bne.n	8007b7e <tcp_recved+0x22>
 8007b6e:	4b1f      	ldr	r3, [pc, #124]	; (8007bec <tcp_recved+0x90>)
 8007b70:	f240 32cf 	movw	r2, #975	; 0x3cf
 8007b74:	491e      	ldr	r1, [pc, #120]	; (8007bf0 <tcp_recved+0x94>)
 8007b76:	481f      	ldr	r0, [pc, #124]	; (8007bf4 <tcp_recved+0x98>)
 8007b78:	f008 f99c 	bl	800feb4 <iprintf>
 8007b7c:	e032      	b.n	8007be4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	7d1b      	ldrb	r3, [r3, #20]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d106      	bne.n	8007b94 <tcp_recved+0x38>
 8007b86:	4b19      	ldr	r3, [pc, #100]	; (8007bec <tcp_recved+0x90>)
 8007b88:	f240 32d2 	movw	r2, #978	; 0x3d2
 8007b8c:	491a      	ldr	r1, [pc, #104]	; (8007bf8 <tcp_recved+0x9c>)
 8007b8e:	4819      	ldr	r0, [pc, #100]	; (8007bf4 <tcp_recved+0x98>)
 8007b90:	f008 f990 	bl	800feb4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007b98:	887b      	ldrh	r3, [r7, #2]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007b9e:	89fb      	ldrh	r3, [r7, #14]
 8007ba0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007ba4:	d804      	bhi.n	8007bb0 <tcp_recved+0x54>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007baa:	89fa      	ldrh	r2, [r7, #14]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d204      	bcs.n	8007bba <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007bb6:	851a      	strh	r2, [r3, #40]	; 0x28
 8007bb8:	e002      	b.n	8007bc0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	89fa      	ldrh	r2, [r7, #14]
 8007bbe:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f7ff ff71 	bl	8007aa8 <tcp_update_rcv_ann_wnd>
 8007bc6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007bce:	d309      	bcc.n	8007be4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	8b5b      	ldrh	r3, [r3, #26]
 8007bd4:	f043 0302 	orr.w	r3, r3, #2
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f004 fbc8 	bl	800c374 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	08012310 	.word	0x08012310
 8007bf0:	080125ac 	.word	0x080125ac
 8007bf4:	08012354 	.word	0x08012354
 8007bf8:	080125c4 	.word	0x080125c4

08007bfc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8007c02:	2300      	movs	r3, #0
 8007c04:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8007c06:	4b1e      	ldr	r3, [pc, #120]	; (8007c80 <tcp_new_port+0x84>)
 8007c08:	881b      	ldrh	r3, [r3, #0]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	4b1c      	ldr	r3, [pc, #112]	; (8007c80 <tcp_new_port+0x84>)
 8007c10:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8007c12:	4b1b      	ldr	r3, [pc, #108]	; (8007c80 <tcp_new_port+0x84>)
 8007c14:	881b      	ldrh	r3, [r3, #0]
 8007c16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d103      	bne.n	8007c26 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8007c1e:	4b18      	ldr	r3, [pc, #96]	; (8007c80 <tcp_new_port+0x84>)
 8007c20:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8007c24:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007c26:	2300      	movs	r3, #0
 8007c28:	71fb      	strb	r3, [r7, #7]
 8007c2a:	e01e      	b.n	8007c6a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007c2c:	79fb      	ldrb	r3, [r7, #7]
 8007c2e:	4a15      	ldr	r2, [pc, #84]	; (8007c84 <tcp_new_port+0x88>)
 8007c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	603b      	str	r3, [r7, #0]
 8007c38:	e011      	b.n	8007c5e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	8ada      	ldrh	r2, [r3, #22]
 8007c3e:	4b10      	ldr	r3, [pc, #64]	; (8007c80 <tcp_new_port+0x84>)
 8007c40:	881b      	ldrh	r3, [r3, #0]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d108      	bne.n	8007c58 <tcp_new_port+0x5c>
        n++;
 8007c46:	88bb      	ldrh	r3, [r7, #4]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8007c4c:	88bb      	ldrh	r3, [r7, #4]
 8007c4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c52:	d3d8      	bcc.n	8007c06 <tcp_new_port+0xa>
          return 0;
 8007c54:	2300      	movs	r3, #0
 8007c56:	e00d      	b.n	8007c74 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	603b      	str	r3, [r7, #0]
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1ea      	bne.n	8007c3a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007c64:	79fb      	ldrb	r3, [r7, #7]
 8007c66:	3301      	adds	r3, #1
 8007c68:	71fb      	strb	r3, [r7, #7]
 8007c6a:	79fb      	ldrb	r3, [r7, #7]
 8007c6c:	2b03      	cmp	r3, #3
 8007c6e:	d9dd      	bls.n	8007c2c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8007c70:	4b03      	ldr	r3, [pc, #12]	; (8007c80 <tcp_new_port+0x84>)
 8007c72:	881b      	ldrh	r3, [r3, #0]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	2000001e 	.word	0x2000001e
 8007c84:	08021204 	.word	0x08021204

08007c88 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007c88:	b5b0      	push	{r4, r5, r7, lr}
 8007c8a:	b090      	sub	sp, #64	; 0x40
 8007c8c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8007c94:	4b94      	ldr	r3, [pc, #592]	; (8007ee8 <tcp_slowtmr+0x260>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	4a93      	ldr	r2, [pc, #588]	; (8007ee8 <tcp_slowtmr+0x260>)
 8007c9c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007c9e:	4b93      	ldr	r3, [pc, #588]	; (8007eec <tcp_slowtmr+0x264>)
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	4b91      	ldr	r3, [pc, #580]	; (8007eec <tcp_slowtmr+0x264>)
 8007ca8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8007caa:	2300      	movs	r3, #0
 8007cac:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8007cae:	4b90      	ldr	r3, [pc, #576]	; (8007ef0 <tcp_slowtmr+0x268>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8007cb4:	e29f      	b.n	80081f6 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb8:	7d1b      	ldrb	r3, [r3, #20]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d106      	bne.n	8007ccc <tcp_slowtmr+0x44>
 8007cbe:	4b8d      	ldr	r3, [pc, #564]	; (8007ef4 <tcp_slowtmr+0x26c>)
 8007cc0:	f240 42be 	movw	r2, #1214	; 0x4be
 8007cc4:	498c      	ldr	r1, [pc, #560]	; (8007ef8 <tcp_slowtmr+0x270>)
 8007cc6:	488d      	ldr	r0, [pc, #564]	; (8007efc <tcp_slowtmr+0x274>)
 8007cc8:	f008 f8f4 	bl	800feb4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cce:	7d1b      	ldrb	r3, [r3, #20]
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d106      	bne.n	8007ce2 <tcp_slowtmr+0x5a>
 8007cd4:	4b87      	ldr	r3, [pc, #540]	; (8007ef4 <tcp_slowtmr+0x26c>)
 8007cd6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8007cda:	4989      	ldr	r1, [pc, #548]	; (8007f00 <tcp_slowtmr+0x278>)
 8007cdc:	4887      	ldr	r0, [pc, #540]	; (8007efc <tcp_slowtmr+0x274>)
 8007cde:	f008 f8e9 	bl	800feb4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce4:	7d1b      	ldrb	r3, [r3, #20]
 8007ce6:	2b0a      	cmp	r3, #10
 8007ce8:	d106      	bne.n	8007cf8 <tcp_slowtmr+0x70>
 8007cea:	4b82      	ldr	r3, [pc, #520]	; (8007ef4 <tcp_slowtmr+0x26c>)
 8007cec:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007cf0:	4984      	ldr	r1, [pc, #528]	; (8007f04 <tcp_slowtmr+0x27c>)
 8007cf2:	4882      	ldr	r0, [pc, #520]	; (8007efc <tcp_slowtmr+0x274>)
 8007cf4:	f008 f8de 	bl	800feb4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfa:	7f9a      	ldrb	r2, [r3, #30]
 8007cfc:	4b7b      	ldr	r3, [pc, #492]	; (8007eec <tcp_slowtmr+0x264>)
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d105      	bne.n	8007d10 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8007d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d06:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8007d0e:	e272      	b.n	80081f6 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8007d10:	4b76      	ldr	r3, [pc, #472]	; (8007eec <tcp_slowtmr+0x264>)
 8007d12:	781a      	ldrb	r2, [r3, #0]
 8007d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d16:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d26:	7d1b      	ldrb	r3, [r3, #20]
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d10a      	bne.n	8007d42 <tcp_slowtmr+0xba>
 8007d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d32:	2b05      	cmp	r3, #5
 8007d34:	d905      	bls.n	8007d42 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8007d36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007d40:	e11e      	b.n	8007f80 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d48:	2b0b      	cmp	r3, #11
 8007d4a:	d905      	bls.n	8007d58 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8007d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d50:	3301      	adds	r3, #1
 8007d52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007d56:	e113      	b.n	8007f80 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d5a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d075      	beq.n	8007e4e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d006      	beq.n	8007d78 <tcp_slowtmr+0xf0>
 8007d6a:	4b62      	ldr	r3, [pc, #392]	; (8007ef4 <tcp_slowtmr+0x26c>)
 8007d6c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8007d70:	4965      	ldr	r1, [pc, #404]	; (8007f08 <tcp_slowtmr+0x280>)
 8007d72:	4862      	ldr	r0, [pc, #392]	; (8007efc <tcp_slowtmr+0x274>)
 8007d74:	f008 f89e 	bl	800feb4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d106      	bne.n	8007d8e <tcp_slowtmr+0x106>
 8007d80:	4b5c      	ldr	r3, [pc, #368]	; (8007ef4 <tcp_slowtmr+0x26c>)
 8007d82:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8007d86:	4961      	ldr	r1, [pc, #388]	; (8007f0c <tcp_slowtmr+0x284>)
 8007d88:	485c      	ldr	r0, [pc, #368]	; (8007efc <tcp_slowtmr+0x274>)
 8007d8a:	f008 f893 	bl	800feb4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8007d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d90:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8007d94:	2b0b      	cmp	r3, #11
 8007d96:	d905      	bls.n	8007da4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8007d98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007da2:	e0ed      	b.n	8007f80 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007daa:	3b01      	subs	r3, #1
 8007dac:	4a58      	ldr	r2, [pc, #352]	; (8007f10 <tcp_slowtmr+0x288>)
 8007dae:	5cd3      	ldrb	r3, [r2, r3]
 8007db0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8007db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007db8:	7c7a      	ldrb	r2, [r7, #17]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d907      	bls.n	8007dce <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8007dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	b2da      	uxtb	r2, r3
 8007dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8007dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007dd4:	7c7a      	ldrb	r2, [r7, #17]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	f200 80d2 	bhi.w	8007f80 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8007ddc:	2301      	movs	r3, #1
 8007dde:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8007de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d108      	bne.n	8007dfc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007dea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007dec:	f005 f96a 	bl	800d0c4 <tcp_zero_window_probe>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d014      	beq.n	8007e20 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8007df6:	2300      	movs	r3, #0
 8007df8:	623b      	str	r3, [r7, #32]
 8007dfa:	e011      	b.n	8007e20 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dfe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007e02:	4619      	mov	r1, r3
 8007e04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e06:	f004 f82f 	bl	800be68 <tcp_split_unsent_seg>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d107      	bne.n	8007e20 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8007e10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e12:	f004 faaf 	bl	800c374 <tcp_output>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d101      	bne.n	8007e20 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8007e20:	6a3b      	ldr	r3, [r7, #32]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f000 80ac 	beq.w	8007f80 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8007e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e32:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007e36:	2b06      	cmp	r3, #6
 8007e38:	f200 80a2 	bhi.w	8007f80 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8007e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007e42:	3301      	adds	r3, #1
 8007e44:	b2da      	uxtb	r2, r3
 8007e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e48:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8007e4c:	e098      	b.n	8007f80 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e50:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	db0f      	blt.n	8007e78 <tcp_slowtmr+0x1f0>
 8007e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007e5e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d008      	beq.n	8007e78 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8007e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e68:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	3301      	adds	r3, #1
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	b21a      	sxth	r2, r3
 8007e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e76:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8007e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8007e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e80:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007e84:	429a      	cmp	r2, r3
 8007e86:	db7b      	blt.n	8007f80 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007e88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e8a:	f004 fd65 	bl	800c958 <tcp_rexmit_rto_prepare>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d007      	beq.n	8007ea4 <tcp_slowtmr+0x21c>
 8007e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d171      	bne.n	8007f80 <tcp_slowtmr+0x2f8>
 8007e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d06d      	beq.n	8007f80 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8007ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea6:	7d1b      	ldrb	r3, [r3, #20]
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d03a      	beq.n	8007f22 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007eb2:	2b0c      	cmp	r3, #12
 8007eb4:	bf28      	it	cs
 8007eb6:	230c      	movcs	r3, #12
 8007eb8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ebc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007ec0:	10db      	asrs	r3, r3, #3
 8007ec2:	b21b      	sxth	r3, r3
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007ecc:	4413      	add	r3, r2
 8007ece:	7efa      	ldrb	r2, [r7, #27]
 8007ed0:	4910      	ldr	r1, [pc, #64]	; (8007f14 <tcp_slowtmr+0x28c>)
 8007ed2:	5c8a      	ldrb	r2, [r1, r2]
 8007ed4:	4093      	lsls	r3, r2
 8007ed6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	dc1a      	bgt.n	8007f18 <tcp_slowtmr+0x290>
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	b21a      	sxth	r2, r3
 8007ee6:	e019      	b.n	8007f1c <tcp_slowtmr+0x294>
 8007ee8:	20006d50 	.word	0x20006d50
 8007eec:	20000556 	.word	0x20000556
 8007ef0:	20006d4c 	.word	0x20006d4c
 8007ef4:	08012310 	.word	0x08012310
 8007ef8:	08012654 	.word	0x08012654
 8007efc:	08012354 	.word	0x08012354
 8007f00:	08012680 	.word	0x08012680
 8007f04:	080126ac 	.word	0x080126ac
 8007f08:	080126dc 	.word	0x080126dc
 8007f0c:	08012710 	.word	0x08012710
 8007f10:	080211fc 	.word	0x080211fc
 8007f14:	080211ec 	.word	0x080211ec
 8007f18:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8007f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f24:	2200      	movs	r2, #0
 8007f26:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f30:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007f34:	4293      	cmp	r3, r2
 8007f36:	bf28      	it	cs
 8007f38:	4613      	movcs	r3, r2
 8007f3a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007f3c:	8a7b      	ldrh	r3, [r7, #18]
 8007f3e:	085b      	lsrs	r3, r3, #1
 8007f40:	b29a      	uxth	r2, r3
 8007f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f44:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007f52:	005b      	lsls	r3, r3, #1
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d206      	bcs.n	8007f68 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007f5e:	005b      	lsls	r3, r3, #1
 8007f60:	b29a      	uxth	r2, r3
 8007f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f64:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8007f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f74:	2200      	movs	r2, #0
 8007f76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8007f7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f7c:	f004 fd5c 	bl	800ca38 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f82:	7d1b      	ldrb	r3, [r3, #20]
 8007f84:	2b06      	cmp	r3, #6
 8007f86:	d111      	bne.n	8007fac <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f8a:	8b5b      	ldrh	r3, [r3, #26]
 8007f8c:	f003 0310 	and.w	r3, r3, #16
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00b      	beq.n	8007fac <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007f94:	4b9d      	ldr	r3, [pc, #628]	; (800820c <tcp_slowtmr+0x584>)
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9a:	6a1b      	ldr	r3, [r3, #32]
 8007f9c:	1ad3      	subs	r3, r2, r3
 8007f9e:	2b28      	cmp	r3, #40	; 0x28
 8007fa0:	d904      	bls.n	8007fac <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8007fa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fae:	7a5b      	ldrb	r3, [r3, #9]
 8007fb0:	f003 0308 	and.w	r3, r3, #8
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d04c      	beq.n	8008052 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8007fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fba:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007fbc:	2b04      	cmp	r3, #4
 8007fbe:	d003      	beq.n	8007fc8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007fc4:	2b07      	cmp	r3, #7
 8007fc6:	d144      	bne.n	8008052 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007fc8:	4b90      	ldr	r3, [pc, #576]	; (800820c <tcp_slowtmr+0x584>)
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fce:	6a1b      	ldr	r3, [r3, #32]
 8007fd0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007fd8:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8007fdc:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8007fe0:	498b      	ldr	r1, [pc, #556]	; (8008210 <tcp_slowtmr+0x588>)
 8007fe2:	fba1 1303 	umull	r1, r3, r1, r3
 8007fe6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d90a      	bls.n	8008002 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8007ff6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008000:	e027      	b.n	8008052 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008002:	4b82      	ldr	r3, [pc, #520]	; (800820c <tcp_slowtmr+0x584>)
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008008:	6a1b      	ldr	r3, [r3, #32]
 800800a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800800c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008014:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008018:	4618      	mov	r0, r3
 800801a:	4b7e      	ldr	r3, [pc, #504]	; (8008214 <tcp_slowtmr+0x58c>)
 800801c:	fb03 f300 	mul.w	r3, r3, r0
 8008020:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008022:	497b      	ldr	r1, [pc, #492]	; (8008210 <tcp_slowtmr+0x588>)
 8008024:	fba1 1303 	umull	r1, r3, r1, r3
 8008028:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800802a:	429a      	cmp	r2, r3
 800802c:	d911      	bls.n	8008052 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800802e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008030:	f005 f808 	bl	800d044 <tcp_keepalive>
 8008034:	4603      	mov	r3, r0
 8008036:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800803a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800803e:	2b00      	cmp	r3, #0
 8008040:	d107      	bne.n	8008052 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8008042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008044:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008048:	3301      	adds	r3, #1
 800804a:	b2da      	uxtb	r2, r3
 800804c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800804e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8008052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008056:	2b00      	cmp	r3, #0
 8008058:	d011      	beq.n	800807e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800805a:	4b6c      	ldr	r3, [pc, #432]	; (800820c <tcp_slowtmr+0x584>)
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008060:	6a1b      	ldr	r3, [r3, #32]
 8008062:	1ad2      	subs	r2, r2, r3
 8008064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008066:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800806a:	4619      	mov	r1, r3
 800806c:	460b      	mov	r3, r1
 800806e:	005b      	lsls	r3, r3, #1
 8008070:	440b      	add	r3, r1
 8008072:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008074:	429a      	cmp	r2, r3
 8008076:	d302      	bcc.n	800807e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8008078:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800807a:	f000 fec7 	bl	8008e0c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800807e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008080:	7d1b      	ldrb	r3, [r3, #20]
 8008082:	2b03      	cmp	r3, #3
 8008084:	d10b      	bne.n	800809e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008086:	4b61      	ldr	r3, [pc, #388]	; (800820c <tcp_slowtmr+0x584>)
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800808c:	6a1b      	ldr	r3, [r3, #32]
 800808e:	1ad3      	subs	r3, r2, r3
 8008090:	2b28      	cmp	r3, #40	; 0x28
 8008092:	d904      	bls.n	800809e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8008094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008098:	3301      	adds	r3, #1
 800809a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800809e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a0:	7d1b      	ldrb	r3, [r3, #20]
 80080a2:	2b09      	cmp	r3, #9
 80080a4:	d10b      	bne.n	80080be <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80080a6:	4b59      	ldr	r3, [pc, #356]	; (800820c <tcp_slowtmr+0x584>)
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ac:	6a1b      	ldr	r3, [r3, #32]
 80080ae:	1ad3      	subs	r3, r2, r3
 80080b0:	2bf0      	cmp	r3, #240	; 0xf0
 80080b2:	d904      	bls.n	80080be <tcp_slowtmr+0x436>
        ++pcb_remove;
 80080b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080b8:	3301      	adds	r3, #1
 80080ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80080be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d060      	beq.n	8008188 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80080c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080cc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80080ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080d0:	f000 fce8 	bl	8008aa4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80080d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d010      	beq.n	80080fc <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80080da:	4b4f      	ldr	r3, [pc, #316]	; (8008218 <tcp_slowtmr+0x590>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d106      	bne.n	80080f2 <tcp_slowtmr+0x46a>
 80080e4:	4b4d      	ldr	r3, [pc, #308]	; (800821c <tcp_slowtmr+0x594>)
 80080e6:	f240 526d 	movw	r2, #1389	; 0x56d
 80080ea:	494d      	ldr	r1, [pc, #308]	; (8008220 <tcp_slowtmr+0x598>)
 80080ec:	484d      	ldr	r0, [pc, #308]	; (8008224 <tcp_slowtmr+0x59c>)
 80080ee:	f007 fee1 	bl	800feb4 <iprintf>
        prev->next = pcb->next;
 80080f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f4:	68da      	ldr	r2, [r3, #12]
 80080f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f8:	60da      	str	r2, [r3, #12]
 80080fa:	e00f      	b.n	800811c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80080fc:	4b46      	ldr	r3, [pc, #280]	; (8008218 <tcp_slowtmr+0x590>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008102:	429a      	cmp	r2, r3
 8008104:	d006      	beq.n	8008114 <tcp_slowtmr+0x48c>
 8008106:	4b45      	ldr	r3, [pc, #276]	; (800821c <tcp_slowtmr+0x594>)
 8008108:	f240 5271 	movw	r2, #1393	; 0x571
 800810c:	4946      	ldr	r1, [pc, #280]	; (8008228 <tcp_slowtmr+0x5a0>)
 800810e:	4845      	ldr	r0, [pc, #276]	; (8008224 <tcp_slowtmr+0x59c>)
 8008110:	f007 fed0 	bl	800feb4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8008114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	4a3f      	ldr	r2, [pc, #252]	; (8008218 <tcp_slowtmr+0x590>)
 800811a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800811c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008120:	2b00      	cmp	r3, #0
 8008122:	d013      	beq.n	800814c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008126:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800812a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800812c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800812e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008130:	3304      	adds	r3, #4
 8008132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008134:	8ad2      	ldrh	r2, [r2, #22]
 8008136:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008138:	8b09      	ldrh	r1, [r1, #24]
 800813a:	9102      	str	r1, [sp, #8]
 800813c:	9201      	str	r2, [sp, #4]
 800813e:	9300      	str	r3, [sp, #0]
 8008140:	462b      	mov	r3, r5
 8008142:	4622      	mov	r2, r4
 8008144:	4601      	mov	r1, r0
 8008146:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008148:	f004 fec8 	bl	800cedc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800814c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814e:	691b      	ldr	r3, [r3, #16]
 8008150:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008154:	7d1b      	ldrb	r3, [r3, #20]
 8008156:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800815c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008162:	6838      	ldr	r0, [r7, #0]
 8008164:	f7ff f838 	bl	80071d8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8008168:	4b30      	ldr	r3, [pc, #192]	; (800822c <tcp_slowtmr+0x5a4>)
 800816a:	2200      	movs	r2, #0
 800816c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d004      	beq.n	800817e <tcp_slowtmr+0x4f6>
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f06f 010c 	mvn.w	r1, #12
 800817a:	68b8      	ldr	r0, [r7, #8]
 800817c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800817e:	4b2b      	ldr	r3, [pc, #172]	; (800822c <tcp_slowtmr+0x5a4>)
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d037      	beq.n	80081f6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8008186:	e590      	b.n	8007caa <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8008188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800818a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800818c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8008192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008194:	7f1b      	ldrb	r3, [r3, #28]
 8008196:	3301      	adds	r3, #1
 8008198:	b2da      	uxtb	r2, r3
 800819a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800819e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a0:	7f1a      	ldrb	r2, [r3, #28]
 80081a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a4:	7f5b      	ldrb	r3, [r3, #29]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d325      	bcc.n	80081f6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80081aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ac:	2200      	movs	r2, #0
 80081ae:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80081b0:	4b1e      	ldr	r3, [pc, #120]	; (800822c <tcp_slowtmr+0x5a4>)
 80081b2:	2200      	movs	r2, #0
 80081b4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80081b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d00b      	beq.n	80081d8 <tcp_slowtmr+0x550>
 80081c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081c8:	6912      	ldr	r2, [r2, #16]
 80081ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081cc:	4610      	mov	r0, r2
 80081ce:	4798      	blx	r3
 80081d0:	4603      	mov	r3, r0
 80081d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80081d6:	e002      	b.n	80081de <tcp_slowtmr+0x556>
 80081d8:	2300      	movs	r3, #0
 80081da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80081de:	4b13      	ldr	r3, [pc, #76]	; (800822c <tcp_slowtmr+0x5a4>)
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d000      	beq.n	80081e8 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 80081e6:	e560      	b.n	8007caa <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80081e8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d102      	bne.n	80081f6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80081f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081f2:	f004 f8bf 	bl	800c374 <tcp_output>
  while (pcb != NULL) {
 80081f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f47f ad5c 	bne.w	8007cb6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80081fe:	2300      	movs	r3, #0
 8008200:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8008202:	4b0b      	ldr	r3, [pc, #44]	; (8008230 <tcp_slowtmr+0x5a8>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8008208:	e067      	b.n	80082da <tcp_slowtmr+0x652>
 800820a:	bf00      	nop
 800820c:	20006d50 	.word	0x20006d50
 8008210:	10624dd3 	.word	0x10624dd3
 8008214:	000124f8 	.word	0x000124f8
 8008218:	20006d4c 	.word	0x20006d4c
 800821c:	08012310 	.word	0x08012310
 8008220:	08012748 	.word	0x08012748
 8008224:	08012354 	.word	0x08012354
 8008228:	08012774 	.word	0x08012774
 800822c:	20006d48 	.word	0x20006d48
 8008230:	20006d5c 	.word	0x20006d5c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008236:	7d1b      	ldrb	r3, [r3, #20]
 8008238:	2b0a      	cmp	r3, #10
 800823a:	d006      	beq.n	800824a <tcp_slowtmr+0x5c2>
 800823c:	4b2b      	ldr	r3, [pc, #172]	; (80082ec <tcp_slowtmr+0x664>)
 800823e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8008242:	492b      	ldr	r1, [pc, #172]	; (80082f0 <tcp_slowtmr+0x668>)
 8008244:	482b      	ldr	r0, [pc, #172]	; (80082f4 <tcp_slowtmr+0x66c>)
 8008246:	f007 fe35 	bl	800feb4 <iprintf>
    pcb_remove = 0;
 800824a:	2300      	movs	r3, #0
 800824c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008250:	4b29      	ldr	r3, [pc, #164]	; (80082f8 <tcp_slowtmr+0x670>)
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008256:	6a1b      	ldr	r3, [r3, #32]
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	2bf0      	cmp	r3, #240	; 0xf0
 800825c:	d904      	bls.n	8008268 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800825e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008262:	3301      	adds	r3, #1
 8008264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008268:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800826c:	2b00      	cmp	r3, #0
 800826e:	d02f      	beq.n	80082d0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008270:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008272:	f000 fc17 	bl	8008aa4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8008276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008278:	2b00      	cmp	r3, #0
 800827a:	d010      	beq.n	800829e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800827c:	4b1f      	ldr	r3, [pc, #124]	; (80082fc <tcp_slowtmr+0x674>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008282:	429a      	cmp	r2, r3
 8008284:	d106      	bne.n	8008294 <tcp_slowtmr+0x60c>
 8008286:	4b19      	ldr	r3, [pc, #100]	; (80082ec <tcp_slowtmr+0x664>)
 8008288:	f240 52af 	movw	r2, #1455	; 0x5af
 800828c:	491c      	ldr	r1, [pc, #112]	; (8008300 <tcp_slowtmr+0x678>)
 800828e:	4819      	ldr	r0, [pc, #100]	; (80082f4 <tcp_slowtmr+0x66c>)
 8008290:	f007 fe10 	bl	800feb4 <iprintf>
        prev->next = pcb->next;
 8008294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008296:	68da      	ldr	r2, [r3, #12]
 8008298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829a:	60da      	str	r2, [r3, #12]
 800829c:	e00f      	b.n	80082be <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800829e:	4b17      	ldr	r3, [pc, #92]	; (80082fc <tcp_slowtmr+0x674>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d006      	beq.n	80082b6 <tcp_slowtmr+0x62e>
 80082a8:	4b10      	ldr	r3, [pc, #64]	; (80082ec <tcp_slowtmr+0x664>)
 80082aa:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80082ae:	4915      	ldr	r1, [pc, #84]	; (8008304 <tcp_slowtmr+0x67c>)
 80082b0:	4810      	ldr	r0, [pc, #64]	; (80082f4 <tcp_slowtmr+0x66c>)
 80082b2:	f007 fdff 	bl	800feb4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80082b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	4a10      	ldr	r2, [pc, #64]	; (80082fc <tcp_slowtmr+0x674>)
 80082bc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80082be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80082c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80082c8:	69f8      	ldr	r0, [r7, #28]
 80082ca:	f7fe ff85 	bl	80071d8 <tcp_free>
 80082ce:	e004      	b.n	80082da <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80082d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80082d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80082da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1a9      	bne.n	8008234 <tcp_slowtmr+0x5ac>
    }
  }
}
 80082e0:	bf00      	nop
 80082e2:	bf00      	nop
 80082e4:	3730      	adds	r7, #48	; 0x30
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bdb0      	pop	{r4, r5, r7, pc}
 80082ea:	bf00      	nop
 80082ec:	08012310 	.word	0x08012310
 80082f0:	080127a0 	.word	0x080127a0
 80082f4:	08012354 	.word	0x08012354
 80082f8:	20006d50 	.word	0x20006d50
 80082fc:	20006d5c 	.word	0x20006d5c
 8008300:	080127d0 	.word	0x080127d0
 8008304:	080127f8 	.word	0x080127f8

08008308 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800830e:	4b2d      	ldr	r3, [pc, #180]	; (80083c4 <tcp_fasttmr+0xbc>)
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	3301      	adds	r3, #1
 8008314:	b2da      	uxtb	r2, r3
 8008316:	4b2b      	ldr	r3, [pc, #172]	; (80083c4 <tcp_fasttmr+0xbc>)
 8008318:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800831a:	4b2b      	ldr	r3, [pc, #172]	; (80083c8 <tcp_fasttmr+0xc0>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008320:	e048      	b.n	80083b4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	7f9a      	ldrb	r2, [r3, #30]
 8008326:	4b27      	ldr	r3, [pc, #156]	; (80083c4 <tcp_fasttmr+0xbc>)
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	429a      	cmp	r2, r3
 800832c:	d03f      	beq.n	80083ae <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800832e:	4b25      	ldr	r3, [pc, #148]	; (80083c4 <tcp_fasttmr+0xbc>)
 8008330:	781a      	ldrb	r2, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	8b5b      	ldrh	r3, [r3, #26]
 800833a:	f003 0301 	and.w	r3, r3, #1
 800833e:	2b00      	cmp	r3, #0
 8008340:	d010      	beq.n	8008364 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	8b5b      	ldrh	r3, [r3, #26]
 8008346:	f043 0302 	orr.w	r3, r3, #2
 800834a:	b29a      	uxth	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f004 f80f 	bl	800c374 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	8b5b      	ldrh	r3, [r3, #26]
 800835a:	f023 0303 	bic.w	r3, r3, #3
 800835e:	b29a      	uxth	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	8b5b      	ldrh	r3, [r3, #26]
 8008368:	f003 0308 	and.w	r3, r3, #8
 800836c:	2b00      	cmp	r3, #0
 800836e:	d009      	beq.n	8008384 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	8b5b      	ldrh	r3, [r3, #26]
 8008374:	f023 0308 	bic.w	r3, r3, #8
 8008378:	b29a      	uxth	r2, r3
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f7ff f8be 	bl	8007500 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00a      	beq.n	80083a8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8008392:	4b0e      	ldr	r3, [pc, #56]	; (80083cc <tcp_fasttmr+0xc4>)
 8008394:	2200      	movs	r2, #0
 8008396:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 f819 	bl	80083d0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800839e:	4b0b      	ldr	r3, [pc, #44]	; (80083cc <tcp_fasttmr+0xc4>)
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d000      	beq.n	80083a8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80083a6:	e7b8      	b.n	800831a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	607b      	str	r3, [r7, #4]
 80083ac:	e002      	b.n	80083b4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1b3      	bne.n	8008322 <tcp_fasttmr+0x1a>
    }
  }
}
 80083ba:	bf00      	nop
 80083bc:	bf00      	nop
 80083be:	3708      	adds	r7, #8
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	20000556 	.word	0x20000556
 80083c8:	20006d4c 	.word	0x20006d4c
 80083cc:	20006d48 	.word	0x20006d48

080083d0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80083d0:	b590      	push	{r4, r7, lr}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d109      	bne.n	80083f2 <tcp_process_refused_data+0x22>
 80083de:	4b37      	ldr	r3, [pc, #220]	; (80084bc <tcp_process_refused_data+0xec>)
 80083e0:	f240 6209 	movw	r2, #1545	; 0x609
 80083e4:	4936      	ldr	r1, [pc, #216]	; (80084c0 <tcp_process_refused_data+0xf0>)
 80083e6:	4837      	ldr	r0, [pc, #220]	; (80084c4 <tcp_process_refused_data+0xf4>)
 80083e8:	f007 fd64 	bl	800feb4 <iprintf>
 80083ec:	f06f 030f 	mvn.w	r3, #15
 80083f0:	e060      	b.n	80084b4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083f6:	7b5b      	ldrb	r3, [r3, #13]
 80083f8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083fe:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00b      	beq.n	8008428 <tcp_process_refused_data+0x58>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6918      	ldr	r0, [r3, #16]
 800841a:	2300      	movs	r3, #0
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	6879      	ldr	r1, [r7, #4]
 8008420:	47a0      	blx	r4
 8008422:	4603      	mov	r3, r0
 8008424:	73fb      	strb	r3, [r7, #15]
 8008426:	e007      	b.n	8008438 <tcp_process_refused_data+0x68>
 8008428:	2300      	movs	r3, #0
 800842a:	68ba      	ldr	r2, [r7, #8]
 800842c:	6879      	ldr	r1, [r7, #4]
 800842e:	2000      	movs	r0, #0
 8008430:	f000 f8c2 	bl	80085b8 <tcp_recv_null>
 8008434:	4603      	mov	r3, r0
 8008436:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008438:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d12a      	bne.n	8008496 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008440:	7bbb      	ldrb	r3, [r7, #14]
 8008442:	f003 0320 	and.w	r3, r3, #32
 8008446:	2b00      	cmp	r3, #0
 8008448:	d033      	beq.n	80084b2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800844e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008452:	d005      	beq.n	8008460 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008458:	3301      	adds	r3, #1
 800845a:	b29a      	uxth	r2, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00b      	beq.n	8008482 <tcp_process_refused_data+0xb2>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6918      	ldr	r0, [r3, #16]
 8008474:	2300      	movs	r3, #0
 8008476:	2200      	movs	r2, #0
 8008478:	6879      	ldr	r1, [r7, #4]
 800847a:	47a0      	blx	r4
 800847c:	4603      	mov	r3, r0
 800847e:	73fb      	strb	r3, [r7, #15]
 8008480:	e001      	b.n	8008486 <tcp_process_refused_data+0xb6>
 8008482:	2300      	movs	r3, #0
 8008484:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8008486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800848a:	f113 0f0d 	cmn.w	r3, #13
 800848e:	d110      	bne.n	80084b2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8008490:	f06f 030c 	mvn.w	r3, #12
 8008494:	e00e      	b.n	80084b4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8008496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800849a:	f113 0f0d 	cmn.w	r3, #13
 800849e:	d102      	bne.n	80084a6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80084a0:	f06f 030c 	mvn.w	r3, #12
 80084a4:	e006      	b.n	80084b4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	68ba      	ldr	r2, [r7, #8]
 80084aa:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80084ac:	f06f 0304 	mvn.w	r3, #4
 80084b0:	e000      	b.n	80084b4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80084b2:	2300      	movs	r3, #0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3714      	adds	r7, #20
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd90      	pop	{r4, r7, pc}
 80084bc:	08012310 	.word	0x08012310
 80084c0:	08012820 	.word	0x08012820
 80084c4:	08012354 	.word	0x08012354

080084c8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80084d0:	e007      	b.n	80084e2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 f80a 	bl	80084f2 <tcp_seg_free>
    seg = next;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d1f4      	bne.n	80084d2 <tcp_segs_free+0xa>
  }
}
 80084e8:	bf00      	nop
 80084ea:	bf00      	nop
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b082      	sub	sp, #8
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d00c      	beq.n	800851a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d004      	beq.n	8008512 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	4618      	mov	r0, r3
 800850e:	f7fe fa73 	bl	80069f8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8008512:	6879      	ldr	r1, [r7, #4]
 8008514:	2003      	movs	r0, #3
 8008516:	f7fd fc5d 	bl	8005dd4 <memp_free>
  }
}
 800851a:	bf00      	nop
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
	...

08008524 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	460b      	mov	r3, r1
 800852e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d107      	bne.n	8008546 <tcp_setprio+0x22>
 8008536:	4b07      	ldr	r3, [pc, #28]	; (8008554 <tcp_setprio+0x30>)
 8008538:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800853c:	4906      	ldr	r1, [pc, #24]	; (8008558 <tcp_setprio+0x34>)
 800853e:	4807      	ldr	r0, [pc, #28]	; (800855c <tcp_setprio+0x38>)
 8008540:	f007 fcb8 	bl	800feb4 <iprintf>
 8008544:	e002      	b.n	800854c <tcp_setprio+0x28>

  pcb->prio = prio;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	78fa      	ldrb	r2, [r7, #3]
 800854a:	755a      	strb	r2, [r3, #21]
}
 800854c:	3708      	adds	r7, #8
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	08012310 	.word	0x08012310
 8008558:	08012848 	.word	0x08012848
 800855c:	08012354 	.word	0x08012354

08008560 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d106      	bne.n	800857c <tcp_seg_copy+0x1c>
 800856e:	4b0f      	ldr	r3, [pc, #60]	; (80085ac <tcp_seg_copy+0x4c>)
 8008570:	f240 6282 	movw	r2, #1666	; 0x682
 8008574:	490e      	ldr	r1, [pc, #56]	; (80085b0 <tcp_seg_copy+0x50>)
 8008576:	480f      	ldr	r0, [pc, #60]	; (80085b4 <tcp_seg_copy+0x54>)
 8008578:	f007 fc9c 	bl	800feb4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800857c:	2003      	movs	r0, #3
 800857e:	f7fd fbdd 	bl	8005d3c <memp_malloc>
 8008582:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d101      	bne.n	800858e <tcp_seg_copy+0x2e>
    return NULL;
 800858a:	2300      	movs	r3, #0
 800858c:	e00a      	b.n	80085a4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800858e:	2210      	movs	r2, #16
 8008590:	6879      	ldr	r1, [r7, #4]
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f007 fc5e 	bl	800fe54 <memcpy>
  pbuf_ref(cseg->p);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	4618      	mov	r0, r3
 800859e:	f7fe facb 	bl	8006b38 <pbuf_ref>
  return cseg;
 80085a2:	68fb      	ldr	r3, [r7, #12]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	08012310 	.word	0x08012310
 80085b0:	08012864 	.word	0x08012864
 80085b4:	08012354 	.word	0x08012354

080085b8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
 80085c4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d109      	bne.n	80085e0 <tcp_recv_null+0x28>
 80085cc:	4b12      	ldr	r3, [pc, #72]	; (8008618 <tcp_recv_null+0x60>)
 80085ce:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80085d2:	4912      	ldr	r1, [pc, #72]	; (800861c <tcp_recv_null+0x64>)
 80085d4:	4812      	ldr	r0, [pc, #72]	; (8008620 <tcp_recv_null+0x68>)
 80085d6:	f007 fc6d 	bl	800feb4 <iprintf>
 80085da:	f06f 030f 	mvn.w	r3, #15
 80085de:	e016      	b.n	800860e <tcp_recv_null+0x56>

  if (p != NULL) {
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d009      	beq.n	80085fa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	891b      	ldrh	r3, [r3, #8]
 80085ea:	4619      	mov	r1, r3
 80085ec:	68b8      	ldr	r0, [r7, #8]
 80085ee:	f7ff fab5 	bl	8007b5c <tcp_recved>
    pbuf_free(p);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f7fe fa00 	bl	80069f8 <pbuf_free>
 80085f8:	e008      	b.n	800860c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80085fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d104      	bne.n	800860c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8008602:	68b8      	ldr	r0, [r7, #8]
 8008604:	f7fe ffe6 	bl	80075d4 <tcp_close>
 8008608:	4603      	mov	r3, r0
 800860a:	e000      	b.n	800860e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	08012310 	.word	0x08012310
 800861c:	08012880 	.word	0x08012880
 8008620:	08012354 	.word	0x08012354

08008624 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af00      	add	r7, sp, #0
 800862a:	4603      	mov	r3, r0
 800862c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800862e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008632:	2b00      	cmp	r3, #0
 8008634:	db01      	blt.n	800863a <tcp_kill_prio+0x16>
 8008636:	79fb      	ldrb	r3, [r7, #7]
 8008638:	e000      	b.n	800863c <tcp_kill_prio+0x18>
 800863a:	237f      	movs	r3, #127	; 0x7f
 800863c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800863e:	7afb      	ldrb	r3, [r7, #11]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d034      	beq.n	80086ae <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8008644:	7afb      	ldrb	r3, [r7, #11]
 8008646:	3b01      	subs	r3, #1
 8008648:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800864a:	2300      	movs	r3, #0
 800864c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800864e:	2300      	movs	r3, #0
 8008650:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008652:	4b19      	ldr	r3, [pc, #100]	; (80086b8 <tcp_kill_prio+0x94>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	617b      	str	r3, [r7, #20]
 8008658:	e01f      	b.n	800869a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	7d5b      	ldrb	r3, [r3, #21]
 800865e:	7afa      	ldrb	r2, [r7, #11]
 8008660:	429a      	cmp	r2, r3
 8008662:	d80c      	bhi.n	800867e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8008668:	7afa      	ldrb	r2, [r7, #11]
 800866a:	429a      	cmp	r2, r3
 800866c:	d112      	bne.n	8008694 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800866e:	4b13      	ldr	r3, [pc, #76]	; (80086bc <tcp_kill_prio+0x98>)
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	6a1b      	ldr	r3, [r3, #32]
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	429a      	cmp	r2, r3
 800867c:	d80a      	bhi.n	8008694 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800867e:	4b0f      	ldr	r3, [pc, #60]	; (80086bc <tcp_kill_prio+0x98>)
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	6a1b      	ldr	r3, [r3, #32]
 8008686:	1ad3      	subs	r3, r2, r3
 8008688:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	7d5b      	ldrb	r3, [r3, #21]
 8008692:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	617b      	str	r3, [r7, #20]
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d1dc      	bne.n	800865a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d004      	beq.n	80086b0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80086a6:	6938      	ldr	r0, [r7, #16]
 80086a8:	f7ff f87e 	bl	80077a8 <tcp_abort>
 80086ac:	e000      	b.n	80086b0 <tcp_kill_prio+0x8c>
    return;
 80086ae:	bf00      	nop
  }
}
 80086b0:	3718      	adds	r7, #24
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	20006d4c 	.word	0x20006d4c
 80086bc:	20006d50 	.word	0x20006d50

080086c0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b086      	sub	sp, #24
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	4603      	mov	r3, r0
 80086c8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80086ca:	79fb      	ldrb	r3, [r7, #7]
 80086cc:	2b08      	cmp	r3, #8
 80086ce:	d009      	beq.n	80086e4 <tcp_kill_state+0x24>
 80086d0:	79fb      	ldrb	r3, [r7, #7]
 80086d2:	2b09      	cmp	r3, #9
 80086d4:	d006      	beq.n	80086e4 <tcp_kill_state+0x24>
 80086d6:	4b1a      	ldr	r3, [pc, #104]	; (8008740 <tcp_kill_state+0x80>)
 80086d8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80086dc:	4919      	ldr	r1, [pc, #100]	; (8008744 <tcp_kill_state+0x84>)
 80086de:	481a      	ldr	r0, [pc, #104]	; (8008748 <tcp_kill_state+0x88>)
 80086e0:	f007 fbe8 	bl	800feb4 <iprintf>

  inactivity = 0;
 80086e4:	2300      	movs	r3, #0
 80086e6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80086e8:	2300      	movs	r3, #0
 80086ea:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80086ec:	4b17      	ldr	r3, [pc, #92]	; (800874c <tcp_kill_state+0x8c>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	617b      	str	r3, [r7, #20]
 80086f2:	e017      	b.n	8008724 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	7d1b      	ldrb	r3, [r3, #20]
 80086f8:	79fa      	ldrb	r2, [r7, #7]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d10f      	bne.n	800871e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80086fe:	4b14      	ldr	r3, [pc, #80]	; (8008750 <tcp_kill_state+0x90>)
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	6a1b      	ldr	r3, [r3, #32]
 8008706:	1ad3      	subs	r3, r2, r3
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	429a      	cmp	r2, r3
 800870c:	d807      	bhi.n	800871e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800870e:	4b10      	ldr	r3, [pc, #64]	; (8008750 <tcp_kill_state+0x90>)
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	6a1b      	ldr	r3, [r3, #32]
 8008716:	1ad3      	subs	r3, r2, r3
 8008718:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	617b      	str	r3, [r7, #20]
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d1e4      	bne.n	80086f4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d003      	beq.n	8008738 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8008730:	2100      	movs	r1, #0
 8008732:	6938      	ldr	r0, [r7, #16]
 8008734:	f7fe ff7a 	bl	800762c <tcp_abandon>
  }
}
 8008738:	bf00      	nop
 800873a:	3718      	adds	r7, #24
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	08012310 	.word	0x08012310
 8008744:	0801289c 	.word	0x0801289c
 8008748:	08012354 	.word	0x08012354
 800874c:	20006d4c 	.word	0x20006d4c
 8008750:	20006d50 	.word	0x20006d50

08008754 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800875a:	2300      	movs	r3, #0
 800875c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800875e:	2300      	movs	r3, #0
 8008760:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008762:	4b12      	ldr	r3, [pc, #72]	; (80087ac <tcp_kill_timewait+0x58>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	60fb      	str	r3, [r7, #12]
 8008768:	e012      	b.n	8008790 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800876a:	4b11      	ldr	r3, [pc, #68]	; (80087b0 <tcp_kill_timewait+0x5c>)
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6a1b      	ldr	r3, [r3, #32]
 8008772:	1ad3      	subs	r3, r2, r3
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	429a      	cmp	r2, r3
 8008778:	d807      	bhi.n	800878a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800877a:	4b0d      	ldr	r3, [pc, #52]	; (80087b0 <tcp_kill_timewait+0x5c>)
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6a1b      	ldr	r3, [r3, #32]
 8008782:	1ad3      	subs	r3, r2, r3
 8008784:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	60fb      	str	r3, [r7, #12]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d1e9      	bne.n	800876a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d002      	beq.n	80087a2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800879c:	68b8      	ldr	r0, [r7, #8]
 800879e:	f7ff f803 	bl	80077a8 <tcp_abort>
  }
}
 80087a2:	bf00      	nop
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	20006d5c 	.word	0x20006d5c
 80087b0:	20006d50 	.word	0x20006d50

080087b4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80087ba:	4b10      	ldr	r3, [pc, #64]	; (80087fc <tcp_handle_closepend+0x48>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80087c0:	e014      	b.n	80087ec <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	8b5b      	ldrh	r3, [r3, #26]
 80087cc:	f003 0308 	and.w	r3, r3, #8
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d009      	beq.n	80087e8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	8b5b      	ldrh	r3, [r3, #26]
 80087d8:	f023 0308 	bic.w	r3, r3, #8
 80087dc:	b29a      	uxth	r2, r3
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f7fe fe8c 	bl	8007500 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d1e7      	bne.n	80087c2 <tcp_handle_closepend+0xe>
  }
}
 80087f2:	bf00      	nop
 80087f4:	bf00      	nop
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	20006d4c 	.word	0x20006d4c

08008800 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	4603      	mov	r3, r0
 8008808:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800880a:	2001      	movs	r0, #1
 800880c:	f7fd fa96 	bl	8005d3c <memp_malloc>
 8008810:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d126      	bne.n	8008866 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8008818:	f7ff ffcc 	bl	80087b4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800881c:	f7ff ff9a 	bl	8008754 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008820:	2001      	movs	r0, #1
 8008822:	f7fd fa8b 	bl	8005d3c <memp_malloc>
 8008826:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d11b      	bne.n	8008866 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800882e:	2009      	movs	r0, #9
 8008830:	f7ff ff46 	bl	80086c0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008834:	2001      	movs	r0, #1
 8008836:	f7fd fa81 	bl	8005d3c <memp_malloc>
 800883a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d111      	bne.n	8008866 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8008842:	2008      	movs	r0, #8
 8008844:	f7ff ff3c 	bl	80086c0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008848:	2001      	movs	r0, #1
 800884a:	f7fd fa77 	bl	8005d3c <memp_malloc>
 800884e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d107      	bne.n	8008866 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8008856:	79fb      	ldrb	r3, [r7, #7]
 8008858:	4618      	mov	r0, r3
 800885a:	f7ff fee3 	bl	8008624 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800885e:	2001      	movs	r0, #1
 8008860:	f7fd fa6c 	bl	8005d3c <memp_malloc>
 8008864:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d03f      	beq.n	80088ec <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800886c:	229c      	movs	r2, #156	; 0x9c
 800886e:	2100      	movs	r1, #0
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f007 fb17 	bl	800fea4 <memset>
    pcb->prio = prio;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	79fa      	ldrb	r2, [r7, #7]
 800887a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008882:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800888c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	22ff      	movs	r2, #255	; 0xff
 800889a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f44f 7206 	mov.w	r2, #536	; 0x218
 80088a2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2206      	movs	r2, #6
 80088a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2206      	movs	r2, #6
 80088b0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088b8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2201      	movs	r2, #1
 80088be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80088c2:	4b0d      	ldr	r3, [pc, #52]	; (80088f8 <tcp_alloc+0xf8>)
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80088ca:	4b0c      	ldr	r3, [pc, #48]	; (80088fc <tcp_alloc+0xfc>)
 80088cc:	781a      	ldrb	r2, [r3, #0]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80088d8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	4a08      	ldr	r2, [pc, #32]	; (8008900 <tcp_alloc+0x100>)
 80088e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	4a07      	ldr	r2, [pc, #28]	; (8008904 <tcp_alloc+0x104>)
 80088e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80088ec:	68fb      	ldr	r3, [r7, #12]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	20006d50 	.word	0x20006d50
 80088fc:	20000556 	.word	0x20000556
 8008900:	080085b9 	.word	0x080085b9
 8008904:	006ddd00 	.word	0x006ddd00

08008908 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	4603      	mov	r3, r0
 8008910:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8008912:	2040      	movs	r0, #64	; 0x40
 8008914:	f7ff ff74 	bl	8008800 <tcp_alloc>
 8008918:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800891a:	68fb      	ldr	r3, [r7, #12]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3710      	adds	r7, #16
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d002      	beq.n	800893a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	683a      	ldr	r2, [r7, #0]
 8008938:	611a      	str	r2, [r3, #16]
  }
}
 800893a:	bf00      	nop
 800893c:	370c      	adds	r7, #12
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
	...

08008948 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00e      	beq.n	8008976 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	7d1b      	ldrb	r3, [r3, #20]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d106      	bne.n	800896e <tcp_recv+0x26>
 8008960:	4b07      	ldr	r3, [pc, #28]	; (8008980 <tcp_recv+0x38>)
 8008962:	f240 72df 	movw	r2, #2015	; 0x7df
 8008966:	4907      	ldr	r1, [pc, #28]	; (8008984 <tcp_recv+0x3c>)
 8008968:	4807      	ldr	r0, [pc, #28]	; (8008988 <tcp_recv+0x40>)
 800896a:	f007 faa3 	bl	800feb4 <iprintf>
    pcb->recv = recv;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	683a      	ldr	r2, [r7, #0]
 8008972:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8008976:	bf00      	nop
 8008978:	3708      	adds	r7, #8
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	08012310 	.word	0x08012310
 8008984:	080128ac 	.word	0x080128ac
 8008988:	08012354 	.word	0x08012354

0800898c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00e      	beq.n	80089ba <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	7d1b      	ldrb	r3, [r3, #20]
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d106      	bne.n	80089b2 <tcp_sent+0x26>
 80089a4:	4b07      	ldr	r3, [pc, #28]	; (80089c4 <tcp_sent+0x38>)
 80089a6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80089aa:	4907      	ldr	r1, [pc, #28]	; (80089c8 <tcp_sent+0x3c>)
 80089ac:	4807      	ldr	r0, [pc, #28]	; (80089cc <tcp_sent+0x40>)
 80089ae:	f007 fa81 	bl	800feb4 <iprintf>
    pcb->sent = sent;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	683a      	ldr	r2, [r7, #0]
 80089b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80089ba:	bf00      	nop
 80089bc:	3708      	adds	r7, #8
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	08012310 	.word	0x08012310
 80089c8:	080128d4 	.word	0x080128d4
 80089cc:	08012354 	.word	0x08012354

080089d0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00e      	beq.n	80089fe <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	7d1b      	ldrb	r3, [r3, #20]
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d106      	bne.n	80089f6 <tcp_err+0x26>
 80089e8:	4b07      	ldr	r3, [pc, #28]	; (8008a08 <tcp_err+0x38>)
 80089ea:	f640 020d 	movw	r2, #2061	; 0x80d
 80089ee:	4907      	ldr	r1, [pc, #28]	; (8008a0c <tcp_err+0x3c>)
 80089f0:	4807      	ldr	r0, [pc, #28]	; (8008a10 <tcp_err+0x40>)
 80089f2:	f007 fa5f 	bl	800feb4 <iprintf>
    pcb->errf = err;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	683a      	ldr	r2, [r7, #0]
 80089fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80089fe:	bf00      	nop
 8008a00:	3708      	adds	r7, #8
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	08012310 	.word	0x08012310
 8008a0c:	080128fc 	.word	0x080128fc
 8008a10:	08012354 	.word	0x08012354

08008a14 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b085      	sub	sp, #20
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d008      	beq.n	8008a36 <tcp_accept+0x22>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	7d1b      	ldrb	r3, [r3, #20]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d104      	bne.n	8008a36 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	683a      	ldr	r2, [r7, #0]
 8008a34:	619a      	str	r2, [r3, #24]
  }
}
 8008a36:	bf00      	nop
 8008a38:	3714      	adds	r7, #20
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
	...

08008a44 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	4613      	mov	r3, r2
 8008a50:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d107      	bne.n	8008a68 <tcp_poll+0x24>
 8008a58:	4b0e      	ldr	r3, [pc, #56]	; (8008a94 <tcp_poll+0x50>)
 8008a5a:	f640 023d 	movw	r2, #2109	; 0x83d
 8008a5e:	490e      	ldr	r1, [pc, #56]	; (8008a98 <tcp_poll+0x54>)
 8008a60:	480e      	ldr	r0, [pc, #56]	; (8008a9c <tcp_poll+0x58>)
 8008a62:	f007 fa27 	bl	800feb4 <iprintf>
 8008a66:	e011      	b.n	8008a8c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	7d1b      	ldrb	r3, [r3, #20]
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d106      	bne.n	8008a7e <tcp_poll+0x3a>
 8008a70:	4b08      	ldr	r3, [pc, #32]	; (8008a94 <tcp_poll+0x50>)
 8008a72:	f640 023e 	movw	r2, #2110	; 0x83e
 8008a76:	490a      	ldr	r1, [pc, #40]	; (8008aa0 <tcp_poll+0x5c>)
 8008a78:	4808      	ldr	r0, [pc, #32]	; (8008a9c <tcp_poll+0x58>)
 8008a7a:	f007 fa1b 	bl	800feb4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	68ba      	ldr	r2, [r7, #8]
 8008a82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	79fa      	ldrb	r2, [r7, #7]
 8008a8a:	775a      	strb	r2, [r3, #29]
}
 8008a8c:	3710      	adds	r7, #16
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	08012310 	.word	0x08012310
 8008a98:	08012924 	.word	0x08012924
 8008a9c:	08012354 	.word	0x08012354
 8008aa0:	0801293c 	.word	0x0801293c

08008aa4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d107      	bne.n	8008ac2 <tcp_pcb_purge+0x1e>
 8008ab2:	4b21      	ldr	r3, [pc, #132]	; (8008b38 <tcp_pcb_purge+0x94>)
 8008ab4:	f640 0251 	movw	r2, #2129	; 0x851
 8008ab8:	4920      	ldr	r1, [pc, #128]	; (8008b3c <tcp_pcb_purge+0x98>)
 8008aba:	4821      	ldr	r0, [pc, #132]	; (8008b40 <tcp_pcb_purge+0x9c>)
 8008abc:	f007 f9fa 	bl	800feb4 <iprintf>
 8008ac0:	e037      	b.n	8008b32 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	7d1b      	ldrb	r3, [r3, #20]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d033      	beq.n	8008b32 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8008ace:	2b0a      	cmp	r3, #10
 8008ad0:	d02f      	beq.n	8008b32 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d02b      	beq.n	8008b32 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d007      	beq.n	8008af2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7fd ff86 	bl	80069f8 <pbuf_free>
      pcb->refused_data = NULL;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d002      	beq.n	8008b00 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 f986 	bl	8008e0c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b06:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7ff fcdb 	bl	80084c8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7ff fcd6 	bl	80084c8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	66da      	str	r2, [r3, #108]	; 0x6c
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8008b32:	3708      	adds	r7, #8
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	08012310 	.word	0x08012310
 8008b3c:	0801295c 	.word	0x0801295c
 8008b40:	08012354 	.word	0x08012354

08008b44 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d106      	bne.n	8008b62 <tcp_pcb_remove+0x1e>
 8008b54:	4b3e      	ldr	r3, [pc, #248]	; (8008c50 <tcp_pcb_remove+0x10c>)
 8008b56:	f640 0283 	movw	r2, #2179	; 0x883
 8008b5a:	493e      	ldr	r1, [pc, #248]	; (8008c54 <tcp_pcb_remove+0x110>)
 8008b5c:	483e      	ldr	r0, [pc, #248]	; (8008c58 <tcp_pcb_remove+0x114>)
 8008b5e:	f007 f9a9 	bl	800feb4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d106      	bne.n	8008b76 <tcp_pcb_remove+0x32>
 8008b68:	4b39      	ldr	r3, [pc, #228]	; (8008c50 <tcp_pcb_remove+0x10c>)
 8008b6a:	f640 0284 	movw	r2, #2180	; 0x884
 8008b6e:	493b      	ldr	r1, [pc, #236]	; (8008c5c <tcp_pcb_remove+0x118>)
 8008b70:	4839      	ldr	r0, [pc, #228]	; (8008c58 <tcp_pcb_remove+0x114>)
 8008b72:	f007 f99f 	bl	800feb4 <iprintf>

  TCP_RMV(pcblist, pcb);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	683a      	ldr	r2, [r7, #0]
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d105      	bne.n	8008b8c <tcp_pcb_remove+0x48>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	68da      	ldr	r2, [r3, #12]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	601a      	str	r2, [r3, #0]
 8008b8a:	e013      	b.n	8008bb4 <tcp_pcb_remove+0x70>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	60fb      	str	r3, [r7, #12]
 8008b92:	e00c      	b.n	8008bae <tcp_pcb_remove+0x6a>
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	683a      	ldr	r2, [r7, #0]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d104      	bne.n	8008ba8 <tcp_pcb_remove+0x64>
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	68da      	ldr	r2, [r3, #12]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	60da      	str	r2, [r3, #12]
 8008ba6:	e005      	b.n	8008bb4 <tcp_pcb_remove+0x70>
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	60fb      	str	r3, [r7, #12]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d1ef      	bne.n	8008b94 <tcp_pcb_remove+0x50>
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8008bba:	6838      	ldr	r0, [r7, #0]
 8008bbc:	f7ff ff72 	bl	8008aa4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	7d1b      	ldrb	r3, [r3, #20]
 8008bc4:	2b0a      	cmp	r3, #10
 8008bc6:	d013      	beq.n	8008bf0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d00f      	beq.n	8008bf0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	8b5b      	ldrh	r3, [r3, #26]
 8008bd4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d009      	beq.n	8008bf0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	8b5b      	ldrh	r3, [r3, #26]
 8008be0:	f043 0302 	orr.w	r3, r3, #2
 8008be4:	b29a      	uxth	r2, r3
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008bea:	6838      	ldr	r0, [r7, #0]
 8008bec:	f003 fbc2 	bl	800c374 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	7d1b      	ldrb	r3, [r3, #20]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d020      	beq.n	8008c3a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d006      	beq.n	8008c0e <tcp_pcb_remove+0xca>
 8008c00:	4b13      	ldr	r3, [pc, #76]	; (8008c50 <tcp_pcb_remove+0x10c>)
 8008c02:	f640 0293 	movw	r2, #2195	; 0x893
 8008c06:	4916      	ldr	r1, [pc, #88]	; (8008c60 <tcp_pcb_remove+0x11c>)
 8008c08:	4813      	ldr	r0, [pc, #76]	; (8008c58 <tcp_pcb_remove+0x114>)
 8008c0a:	f007 f953 	bl	800feb4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d006      	beq.n	8008c24 <tcp_pcb_remove+0xe0>
 8008c16:	4b0e      	ldr	r3, [pc, #56]	; (8008c50 <tcp_pcb_remove+0x10c>)
 8008c18:	f640 0294 	movw	r2, #2196	; 0x894
 8008c1c:	4911      	ldr	r1, [pc, #68]	; (8008c64 <tcp_pcb_remove+0x120>)
 8008c1e:	480e      	ldr	r0, [pc, #56]	; (8008c58 <tcp_pcb_remove+0x114>)
 8008c20:	f007 f948 	bl	800feb4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d006      	beq.n	8008c3a <tcp_pcb_remove+0xf6>
 8008c2c:	4b08      	ldr	r3, [pc, #32]	; (8008c50 <tcp_pcb_remove+0x10c>)
 8008c2e:	f640 0296 	movw	r2, #2198	; 0x896
 8008c32:	490d      	ldr	r1, [pc, #52]	; (8008c68 <tcp_pcb_remove+0x124>)
 8008c34:	4808      	ldr	r0, [pc, #32]	; (8008c58 <tcp_pcb_remove+0x114>)
 8008c36:	f007 f93d 	bl	800feb4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	2200      	movs	r2, #0
 8008c44:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8008c46:	bf00      	nop
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	08012310 	.word	0x08012310
 8008c54:	08012978 	.word	0x08012978
 8008c58:	08012354 	.word	0x08012354
 8008c5c:	08012994 	.word	0x08012994
 8008c60:	080129b4 	.word	0x080129b4
 8008c64:	080129cc 	.word	0x080129cc
 8008c68:	080129e8 	.word	0x080129e8

08008c6c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d106      	bne.n	8008c88 <tcp_next_iss+0x1c>
 8008c7a:	4b0a      	ldr	r3, [pc, #40]	; (8008ca4 <tcp_next_iss+0x38>)
 8008c7c:	f640 02af 	movw	r2, #2223	; 0x8af
 8008c80:	4909      	ldr	r1, [pc, #36]	; (8008ca8 <tcp_next_iss+0x3c>)
 8008c82:	480a      	ldr	r0, [pc, #40]	; (8008cac <tcp_next_iss+0x40>)
 8008c84:	f007 f916 	bl	800feb4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8008c88:	4b09      	ldr	r3, [pc, #36]	; (8008cb0 <tcp_next_iss+0x44>)
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	4b09      	ldr	r3, [pc, #36]	; (8008cb4 <tcp_next_iss+0x48>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4413      	add	r3, r2
 8008c92:	4a07      	ldr	r2, [pc, #28]	; (8008cb0 <tcp_next_iss+0x44>)
 8008c94:	6013      	str	r3, [r2, #0]
  return iss;
 8008c96:	4b06      	ldr	r3, [pc, #24]	; (8008cb0 <tcp_next_iss+0x44>)
 8008c98:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3708      	adds	r7, #8
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	08012310 	.word	0x08012310
 8008ca8:	08012a00 	.word	0x08012a00
 8008cac:	08012354 	.word	0x08012354
 8008cb0:	20000020 	.word	0x20000020
 8008cb4:	20006d50 	.word	0x20006d50

08008cb8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b086      	sub	sp, #24
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
 8008cc4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d106      	bne.n	8008cda <tcp_eff_send_mss_netif+0x22>
 8008ccc:	4b14      	ldr	r3, [pc, #80]	; (8008d20 <tcp_eff_send_mss_netif+0x68>)
 8008cce:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8008cd2:	4914      	ldr	r1, [pc, #80]	; (8008d24 <tcp_eff_send_mss_netif+0x6c>)
 8008cd4:	4814      	ldr	r0, [pc, #80]	; (8008d28 <tcp_eff_send_mss_netif+0x70>)
 8008cd6:	f007 f8ed 	bl	800feb4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d101      	bne.n	8008ce4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8008ce0:	89fb      	ldrh	r3, [r7, #14]
 8008ce2:	e019      	b.n	8008d18 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008ce8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008cea:	8afb      	ldrh	r3, [r7, #22]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d012      	beq.n	8008d16 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008cf0:	2328      	movs	r3, #40	; 0x28
 8008cf2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008cf4:	8afa      	ldrh	r2, [r7, #22]
 8008cf6:	8abb      	ldrh	r3, [r7, #20]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d904      	bls.n	8008d06 <tcp_eff_send_mss_netif+0x4e>
 8008cfc:	8afa      	ldrh	r2, [r7, #22]
 8008cfe:	8abb      	ldrh	r3, [r7, #20]
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	e000      	b.n	8008d08 <tcp_eff_send_mss_netif+0x50>
 8008d06:	2300      	movs	r3, #0
 8008d08:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008d0a:	8a7a      	ldrh	r2, [r7, #18]
 8008d0c:	89fb      	ldrh	r3, [r7, #14]
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	bf28      	it	cs
 8008d12:	4613      	movcs	r3, r2
 8008d14:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008d16:	89fb      	ldrh	r3, [r7, #14]
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3718      	adds	r7, #24
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	08012310 	.word	0x08012310
 8008d24:	08012a1c 	.word	0x08012a1c
 8008d28:	08012354 	.word	0x08012354

08008d2c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d119      	bne.n	8008d74 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8008d40:	4b10      	ldr	r3, [pc, #64]	; (8008d84 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8008d42:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8008d46:	4910      	ldr	r1, [pc, #64]	; (8008d88 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008d48:	4810      	ldr	r0, [pc, #64]	; (8008d8c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8008d4a:	f007 f8b3 	bl	800feb4 <iprintf>

  while (pcb != NULL) {
 8008d4e:	e011      	b.n	8008d74 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d108      	bne.n	8008d6e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8008d62:	68f8      	ldr	r0, [r7, #12]
 8008d64:	f7fe fd20 	bl	80077a8 <tcp_abort>
      pcb = next;
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	60fb      	str	r3, [r7, #12]
 8008d6c:	e002      	b.n	8008d74 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d1ea      	bne.n	8008d50 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8008d7a:	bf00      	nop
 8008d7c:	bf00      	nop
 8008d7e:	3710      	adds	r7, #16
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	08012310 	.word	0x08012310
 8008d88:	08012a44 	.word	0x08012a44
 8008d8c:	08012354 	.word	0x08012354

08008d90 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d02a      	beq.n	8008df6 <tcp_netif_ip_addr_changed+0x66>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d026      	beq.n	8008df6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008da8:	4b15      	ldr	r3, [pc, #84]	; (8008e00 <tcp_netif_ip_addr_changed+0x70>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4619      	mov	r1, r3
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f7ff ffbc 	bl	8008d2c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008db4:	4b13      	ldr	r3, [pc, #76]	; (8008e04 <tcp_netif_ip_addr_changed+0x74>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4619      	mov	r1, r3
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7ff ffb6 	bl	8008d2c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d017      	beq.n	8008df6 <tcp_netif_ip_addr_changed+0x66>
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d013      	beq.n	8008df6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008dce:	4b0e      	ldr	r3, [pc, #56]	; (8008e08 <tcp_netif_ip_addr_changed+0x78>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	60fb      	str	r3, [r7, #12]
 8008dd4:	e00c      	b.n	8008df0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d103      	bne.n	8008dea <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	60fb      	str	r3, [r7, #12]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1ef      	bne.n	8008dd6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8008df6:	bf00      	nop
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	20006d4c 	.word	0x20006d4c
 8008e04:	20006d58 	.word	0x20006d58
 8008e08:	20006d54 	.word	0x20006d54

08008e0c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d007      	beq.n	8008e2c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e20:	4618      	mov	r0, r3
 8008e22:	f7ff fb51 	bl	80084c8 <tcp_segs_free>
    pcb->ooseq = NULL;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008e2c:	bf00      	nop
 8008e2e:	3708      	adds	r7, #8
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008e34:	b590      	push	{r4, r7, lr}
 8008e36:	b08d      	sub	sp, #52	; 0x34
 8008e38:	af04      	add	r7, sp, #16
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d105      	bne.n	8008e50 <tcp_input+0x1c>
 8008e44:	4b9b      	ldr	r3, [pc, #620]	; (80090b4 <tcp_input+0x280>)
 8008e46:	2283      	movs	r2, #131	; 0x83
 8008e48:	499b      	ldr	r1, [pc, #620]	; (80090b8 <tcp_input+0x284>)
 8008e4a:	489c      	ldr	r0, [pc, #624]	; (80090bc <tcp_input+0x288>)
 8008e4c:	f007 f832 	bl	800feb4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	4a9a      	ldr	r2, [pc, #616]	; (80090c0 <tcp_input+0x28c>)
 8008e56:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	895b      	ldrh	r3, [r3, #10]
 8008e5c:	2b13      	cmp	r3, #19
 8008e5e:	f240 83c4 	bls.w	80095ea <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008e62:	4b98      	ldr	r3, [pc, #608]	; (80090c4 <tcp_input+0x290>)
 8008e64:	695b      	ldr	r3, [r3, #20]
 8008e66:	4a97      	ldr	r2, [pc, #604]	; (80090c4 <tcp_input+0x290>)
 8008e68:	6812      	ldr	r2, [r2, #0]
 8008e6a:	4611      	mov	r1, r2
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f006 f86b 	bl	800ef48 <ip4_addr_isbroadcast_u32>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	f040 83ba 	bne.w	80095ee <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008e7a:	4b92      	ldr	r3, [pc, #584]	; (80090c4 <tcp_input+0x290>)
 8008e7c:	695b      	ldr	r3, [r3, #20]
 8008e7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008e82:	2be0      	cmp	r3, #224	; 0xe0
 8008e84:	f000 83b3 	beq.w	80095ee <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008e88:	4b8d      	ldr	r3, [pc, #564]	; (80090c0 <tcp_input+0x28c>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	899b      	ldrh	r3, [r3, #12]
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7fc fa93 	bl	80053bc <lwip_htons>
 8008e96:	4603      	mov	r3, r0
 8008e98:	0b1b      	lsrs	r3, r3, #12
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008ea2:	7cbb      	ldrb	r3, [r7, #18]
 8008ea4:	2b13      	cmp	r3, #19
 8008ea6:	f240 83a4 	bls.w	80095f2 <tcp_input+0x7be>
 8008eaa:	7cbb      	ldrb	r3, [r7, #18]
 8008eac:	b29a      	uxth	r2, r3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	891b      	ldrh	r3, [r3, #8]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	f200 839d 	bhi.w	80095f2 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008eb8:	7cbb      	ldrb	r3, [r7, #18]
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	3b14      	subs	r3, #20
 8008ebe:	b29a      	uxth	r2, r3
 8008ec0:	4b81      	ldr	r3, [pc, #516]	; (80090c8 <tcp_input+0x294>)
 8008ec2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008ec4:	4b81      	ldr	r3, [pc, #516]	; (80090cc <tcp_input+0x298>)
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	895a      	ldrh	r2, [r3, #10]
 8008ece:	7cbb      	ldrb	r3, [r7, #18]
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d309      	bcc.n	8008eea <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008ed6:	4b7c      	ldr	r3, [pc, #496]	; (80090c8 <tcp_input+0x294>)
 8008ed8:	881a      	ldrh	r2, [r3, #0]
 8008eda:	4b7d      	ldr	r3, [pc, #500]	; (80090d0 <tcp_input+0x29c>)
 8008edc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008ede:	7cbb      	ldrb	r3, [r7, #18]
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f7fd fd02 	bl	80068ec <pbuf_remove_header>
 8008ee8:	e04e      	b.n	8008f88 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d105      	bne.n	8008efe <tcp_input+0xca>
 8008ef2:	4b70      	ldr	r3, [pc, #448]	; (80090b4 <tcp_input+0x280>)
 8008ef4:	22c2      	movs	r2, #194	; 0xc2
 8008ef6:	4977      	ldr	r1, [pc, #476]	; (80090d4 <tcp_input+0x2a0>)
 8008ef8:	4870      	ldr	r0, [pc, #448]	; (80090bc <tcp_input+0x288>)
 8008efa:	f006 ffdb 	bl	800feb4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008efe:	2114      	movs	r1, #20
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f7fd fcf3 	bl	80068ec <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	895a      	ldrh	r2, [r3, #10]
 8008f0a:	4b71      	ldr	r3, [pc, #452]	; (80090d0 <tcp_input+0x29c>)
 8008f0c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008f0e:	4b6e      	ldr	r3, [pc, #440]	; (80090c8 <tcp_input+0x294>)
 8008f10:	881a      	ldrh	r2, [r3, #0]
 8008f12:	4b6f      	ldr	r3, [pc, #444]	; (80090d0 <tcp_input+0x29c>)
 8008f14:	881b      	ldrh	r3, [r3, #0]
 8008f16:	1ad3      	subs	r3, r2, r3
 8008f18:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008f1a:	4b6d      	ldr	r3, [pc, #436]	; (80090d0 <tcp_input+0x29c>)
 8008f1c:	881b      	ldrh	r3, [r3, #0]
 8008f1e:	4619      	mov	r1, r3
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f7fd fce3 	bl	80068ec <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	895b      	ldrh	r3, [r3, #10]
 8008f2c:	8a3a      	ldrh	r2, [r7, #16]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	f200 8361 	bhi.w	80095f6 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	4a64      	ldr	r2, [pc, #400]	; (80090cc <tcp_input+0x298>)
 8008f3c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	8a3a      	ldrh	r2, [r7, #16]
 8008f44:	4611      	mov	r1, r2
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fd fcd0 	bl	80068ec <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	891a      	ldrh	r2, [r3, #8]
 8008f50:	8a3b      	ldrh	r3, [r7, #16]
 8008f52:	1ad3      	subs	r3, r2, r3
 8008f54:	b29a      	uxth	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	895b      	ldrh	r3, [r3, #10]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d005      	beq.n	8008f6e <tcp_input+0x13a>
 8008f62:	4b54      	ldr	r3, [pc, #336]	; (80090b4 <tcp_input+0x280>)
 8008f64:	22df      	movs	r2, #223	; 0xdf
 8008f66:	495c      	ldr	r1, [pc, #368]	; (80090d8 <tcp_input+0x2a4>)
 8008f68:	4854      	ldr	r0, [pc, #336]	; (80090bc <tcp_input+0x288>)
 8008f6a:	f006 ffa3 	bl	800feb4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	891a      	ldrh	r2, [r3, #8]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	891b      	ldrh	r3, [r3, #8]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d005      	beq.n	8008f88 <tcp_input+0x154>
 8008f7c:	4b4d      	ldr	r3, [pc, #308]	; (80090b4 <tcp_input+0x280>)
 8008f7e:	22e0      	movs	r2, #224	; 0xe0
 8008f80:	4956      	ldr	r1, [pc, #344]	; (80090dc <tcp_input+0x2a8>)
 8008f82:	484e      	ldr	r0, [pc, #312]	; (80090bc <tcp_input+0x288>)
 8008f84:	f006 ff96 	bl	800feb4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008f88:	4b4d      	ldr	r3, [pc, #308]	; (80090c0 <tcp_input+0x28c>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	881b      	ldrh	r3, [r3, #0]
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	4a4b      	ldr	r2, [pc, #300]	; (80090c0 <tcp_input+0x28c>)
 8008f92:	6814      	ldr	r4, [r2, #0]
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7fc fa11 	bl	80053bc <lwip_htons>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008f9e:	4b48      	ldr	r3, [pc, #288]	; (80090c0 <tcp_input+0x28c>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	885b      	ldrh	r3, [r3, #2]
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	4a46      	ldr	r2, [pc, #280]	; (80090c0 <tcp_input+0x28c>)
 8008fa8:	6814      	ldr	r4, [r2, #0]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7fc fa06 	bl	80053bc <lwip_htons>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008fb4:	4b42      	ldr	r3, [pc, #264]	; (80090c0 <tcp_input+0x28c>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	4a41      	ldr	r2, [pc, #260]	; (80090c0 <tcp_input+0x28c>)
 8008fbc:	6814      	ldr	r4, [r2, #0]
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7fc fa11 	bl	80053e6 <lwip_htonl>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	6063      	str	r3, [r4, #4]
 8008fc8:	6863      	ldr	r3, [r4, #4]
 8008fca:	4a45      	ldr	r2, [pc, #276]	; (80090e0 <tcp_input+0x2ac>)
 8008fcc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008fce:	4b3c      	ldr	r3, [pc, #240]	; (80090c0 <tcp_input+0x28c>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	4a3a      	ldr	r2, [pc, #232]	; (80090c0 <tcp_input+0x28c>)
 8008fd6:	6814      	ldr	r4, [r2, #0]
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7fc fa04 	bl	80053e6 <lwip_htonl>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	60a3      	str	r3, [r4, #8]
 8008fe2:	68a3      	ldr	r3, [r4, #8]
 8008fe4:	4a3f      	ldr	r2, [pc, #252]	; (80090e4 <tcp_input+0x2b0>)
 8008fe6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008fe8:	4b35      	ldr	r3, [pc, #212]	; (80090c0 <tcp_input+0x28c>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	89db      	ldrh	r3, [r3, #14]
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	4a33      	ldr	r2, [pc, #204]	; (80090c0 <tcp_input+0x28c>)
 8008ff2:	6814      	ldr	r4, [r2, #0]
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7fc f9e1 	bl	80053bc <lwip_htons>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008ffe:	4b30      	ldr	r3, [pc, #192]	; (80090c0 <tcp_input+0x28c>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	899b      	ldrh	r3, [r3, #12]
 8009004:	b29b      	uxth	r3, r3
 8009006:	4618      	mov	r0, r3
 8009008:	f7fc f9d8 	bl	80053bc <lwip_htons>
 800900c:	4603      	mov	r3, r0
 800900e:	b2db      	uxtb	r3, r3
 8009010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009014:	b2da      	uxtb	r2, r3
 8009016:	4b34      	ldr	r3, [pc, #208]	; (80090e8 <tcp_input+0x2b4>)
 8009018:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	891a      	ldrh	r2, [r3, #8]
 800901e:	4b33      	ldr	r3, [pc, #204]	; (80090ec <tcp_input+0x2b8>)
 8009020:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009022:	4b31      	ldr	r3, [pc, #196]	; (80090e8 <tcp_input+0x2b4>)
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	f003 0303 	and.w	r3, r3, #3
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00c      	beq.n	8009048 <tcp_input+0x214>
    tcplen++;
 800902e:	4b2f      	ldr	r3, [pc, #188]	; (80090ec <tcp_input+0x2b8>)
 8009030:	881b      	ldrh	r3, [r3, #0]
 8009032:	3301      	adds	r3, #1
 8009034:	b29a      	uxth	r2, r3
 8009036:	4b2d      	ldr	r3, [pc, #180]	; (80090ec <tcp_input+0x2b8>)
 8009038:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	891a      	ldrh	r2, [r3, #8]
 800903e:	4b2b      	ldr	r3, [pc, #172]	; (80090ec <tcp_input+0x2b8>)
 8009040:	881b      	ldrh	r3, [r3, #0]
 8009042:	429a      	cmp	r2, r3
 8009044:	f200 82d9 	bhi.w	80095fa <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8009048:	2300      	movs	r3, #0
 800904a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800904c:	4b28      	ldr	r3, [pc, #160]	; (80090f0 <tcp_input+0x2bc>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	61fb      	str	r3, [r7, #28]
 8009052:	e09d      	b.n	8009190 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	7d1b      	ldrb	r3, [r3, #20]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d105      	bne.n	8009068 <tcp_input+0x234>
 800905c:	4b15      	ldr	r3, [pc, #84]	; (80090b4 <tcp_input+0x280>)
 800905e:	22fb      	movs	r2, #251	; 0xfb
 8009060:	4924      	ldr	r1, [pc, #144]	; (80090f4 <tcp_input+0x2c0>)
 8009062:	4816      	ldr	r0, [pc, #88]	; (80090bc <tcp_input+0x288>)
 8009064:	f006 ff26 	bl	800feb4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	7d1b      	ldrb	r3, [r3, #20]
 800906c:	2b0a      	cmp	r3, #10
 800906e:	d105      	bne.n	800907c <tcp_input+0x248>
 8009070:	4b10      	ldr	r3, [pc, #64]	; (80090b4 <tcp_input+0x280>)
 8009072:	22fc      	movs	r2, #252	; 0xfc
 8009074:	4920      	ldr	r1, [pc, #128]	; (80090f8 <tcp_input+0x2c4>)
 8009076:	4811      	ldr	r0, [pc, #68]	; (80090bc <tcp_input+0x288>)
 8009078:	f006 ff1c 	bl	800feb4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	7d1b      	ldrb	r3, [r3, #20]
 8009080:	2b01      	cmp	r3, #1
 8009082:	d105      	bne.n	8009090 <tcp_input+0x25c>
 8009084:	4b0b      	ldr	r3, [pc, #44]	; (80090b4 <tcp_input+0x280>)
 8009086:	22fd      	movs	r2, #253	; 0xfd
 8009088:	491c      	ldr	r1, [pc, #112]	; (80090fc <tcp_input+0x2c8>)
 800908a:	480c      	ldr	r0, [pc, #48]	; (80090bc <tcp_input+0x288>)
 800908c:	f006 ff12 	bl	800feb4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	7a1b      	ldrb	r3, [r3, #8]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d033      	beq.n	8009100 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	7a1a      	ldrb	r2, [r3, #8]
 800909c:	4b09      	ldr	r3, [pc, #36]	; (80090c4 <tcp_input+0x290>)
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80090a4:	3301      	adds	r3, #1
 80090a6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d029      	beq.n	8009100 <tcp_input+0x2cc>
      prev = pcb;
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	61bb      	str	r3, [r7, #24]
      continue;
 80090b0:	e06b      	b.n	800918a <tcp_input+0x356>
 80090b2:	bf00      	nop
 80090b4:	08012a78 	.word	0x08012a78
 80090b8:	08012aac 	.word	0x08012aac
 80090bc:	08012ac4 	.word	0x08012ac4
 80090c0:	20000568 	.word	0x20000568
 80090c4:	20003808 	.word	0x20003808
 80090c8:	2000056c 	.word	0x2000056c
 80090cc:	20000570 	.word	0x20000570
 80090d0:	2000056e 	.word	0x2000056e
 80090d4:	08012aec 	.word	0x08012aec
 80090d8:	08012afc 	.word	0x08012afc
 80090dc:	08012b08 	.word	0x08012b08
 80090e0:	20000578 	.word	0x20000578
 80090e4:	2000057c 	.word	0x2000057c
 80090e8:	20000584 	.word	0x20000584
 80090ec:	20000582 	.word	0x20000582
 80090f0:	20006d4c 	.word	0x20006d4c
 80090f4:	08012b28 	.word	0x08012b28
 80090f8:	08012b50 	.word	0x08012b50
 80090fc:	08012b7c 	.word	0x08012b7c
    }

    if (pcb->remote_port == tcphdr->src &&
 8009100:	69fb      	ldr	r3, [r7, #28]
 8009102:	8b1a      	ldrh	r2, [r3, #24]
 8009104:	4b94      	ldr	r3, [pc, #592]	; (8009358 <tcp_input+0x524>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	881b      	ldrh	r3, [r3, #0]
 800910a:	b29b      	uxth	r3, r3
 800910c:	429a      	cmp	r2, r3
 800910e:	d13a      	bne.n	8009186 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8009110:	69fb      	ldr	r3, [r7, #28]
 8009112:	8ada      	ldrh	r2, [r3, #22]
 8009114:	4b90      	ldr	r3, [pc, #576]	; (8009358 <tcp_input+0x524>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	885b      	ldrh	r3, [r3, #2]
 800911a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800911c:	429a      	cmp	r2, r3
 800911e:	d132      	bne.n	8009186 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	685a      	ldr	r2, [r3, #4]
 8009124:	4b8d      	ldr	r3, [pc, #564]	; (800935c <tcp_input+0x528>)
 8009126:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009128:	429a      	cmp	r2, r3
 800912a:	d12c      	bne.n	8009186 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	4b8a      	ldr	r3, [pc, #552]	; (800935c <tcp_input+0x528>)
 8009132:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009134:	429a      	cmp	r2, r3
 8009136:	d126      	bne.n	8009186 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	69fa      	ldr	r2, [r7, #28]
 800913e:	429a      	cmp	r2, r3
 8009140:	d106      	bne.n	8009150 <tcp_input+0x31c>
 8009142:	4b87      	ldr	r3, [pc, #540]	; (8009360 <tcp_input+0x52c>)
 8009144:	f240 120d 	movw	r2, #269	; 0x10d
 8009148:	4986      	ldr	r1, [pc, #536]	; (8009364 <tcp_input+0x530>)
 800914a:	4887      	ldr	r0, [pc, #540]	; (8009368 <tcp_input+0x534>)
 800914c:	f006 feb2 	bl	800feb4 <iprintf>
      if (prev != NULL) {
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00a      	beq.n	800916c <tcp_input+0x338>
        prev->next = pcb->next;
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	68da      	ldr	r2, [r3, #12]
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800915e:	4b83      	ldr	r3, [pc, #524]	; (800936c <tcp_input+0x538>)
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009166:	4a81      	ldr	r2, [pc, #516]	; (800936c <tcp_input+0x538>)
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	69fa      	ldr	r2, [r7, #28]
 8009172:	429a      	cmp	r2, r3
 8009174:	d111      	bne.n	800919a <tcp_input+0x366>
 8009176:	4b7a      	ldr	r3, [pc, #488]	; (8009360 <tcp_input+0x52c>)
 8009178:	f240 1215 	movw	r2, #277	; 0x115
 800917c:	497c      	ldr	r1, [pc, #496]	; (8009370 <tcp_input+0x53c>)
 800917e:	487a      	ldr	r0, [pc, #488]	; (8009368 <tcp_input+0x534>)
 8009180:	f006 fe98 	bl	800feb4 <iprintf>
      break;
 8009184:	e009      	b.n	800919a <tcp_input+0x366>
    }
    prev = pcb;
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800918a:	69fb      	ldr	r3, [r7, #28]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	61fb      	str	r3, [r7, #28]
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	2b00      	cmp	r3, #0
 8009194:	f47f af5e 	bne.w	8009054 <tcp_input+0x220>
 8009198:	e000      	b.n	800919c <tcp_input+0x368>
      break;
 800919a:	bf00      	nop
  }

  if (pcb == NULL) {
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	f040 8095 	bne.w	80092ce <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80091a4:	4b73      	ldr	r3, [pc, #460]	; (8009374 <tcp_input+0x540>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	61fb      	str	r3, [r7, #28]
 80091aa:	e03f      	b.n	800922c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	7d1b      	ldrb	r3, [r3, #20]
 80091b0:	2b0a      	cmp	r3, #10
 80091b2:	d006      	beq.n	80091c2 <tcp_input+0x38e>
 80091b4:	4b6a      	ldr	r3, [pc, #424]	; (8009360 <tcp_input+0x52c>)
 80091b6:	f240 121f 	movw	r2, #287	; 0x11f
 80091ba:	496f      	ldr	r1, [pc, #444]	; (8009378 <tcp_input+0x544>)
 80091bc:	486a      	ldr	r0, [pc, #424]	; (8009368 <tcp_input+0x534>)
 80091be:	f006 fe79 	bl	800feb4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	7a1b      	ldrb	r3, [r3, #8]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d009      	beq.n	80091de <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	7a1a      	ldrb	r2, [r3, #8]
 80091ce:	4b63      	ldr	r3, [pc, #396]	; (800935c <tcp_input+0x528>)
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80091d6:	3301      	adds	r3, #1
 80091d8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80091da:	429a      	cmp	r2, r3
 80091dc:	d122      	bne.n	8009224 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	8b1a      	ldrh	r2, [r3, #24]
 80091e2:	4b5d      	ldr	r3, [pc, #372]	; (8009358 <tcp_input+0x524>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	881b      	ldrh	r3, [r3, #0]
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d11b      	bne.n	8009226 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	8ada      	ldrh	r2, [r3, #22]
 80091f2:	4b59      	ldr	r3, [pc, #356]	; (8009358 <tcp_input+0x524>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	885b      	ldrh	r3, [r3, #2]
 80091f8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d113      	bne.n	8009226 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	685a      	ldr	r2, [r3, #4]
 8009202:	4b56      	ldr	r3, [pc, #344]	; (800935c <tcp_input+0x528>)
 8009204:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009206:	429a      	cmp	r2, r3
 8009208:	d10d      	bne.n	8009226 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	4b53      	ldr	r3, [pc, #332]	; (800935c <tcp_input+0x528>)
 8009210:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009212:	429a      	cmp	r2, r3
 8009214:	d107      	bne.n	8009226 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8009216:	69f8      	ldr	r0, [r7, #28]
 8009218:	f000 fb54 	bl	80098c4 <tcp_timewait_input>
        }
        pbuf_free(p);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f7fd fbeb 	bl	80069f8 <pbuf_free>
        return;
 8009222:	e1f0      	b.n	8009606 <tcp_input+0x7d2>
        continue;
 8009224:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009226:	69fb      	ldr	r3, [r7, #28]
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	61fb      	str	r3, [r7, #28]
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d1bc      	bne.n	80091ac <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8009232:	2300      	movs	r3, #0
 8009234:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009236:	4b51      	ldr	r3, [pc, #324]	; (800937c <tcp_input+0x548>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	617b      	str	r3, [r7, #20]
 800923c:	e02a      	b.n	8009294 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	7a1b      	ldrb	r3, [r3, #8]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00c      	beq.n	8009260 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	7a1a      	ldrb	r2, [r3, #8]
 800924a:	4b44      	ldr	r3, [pc, #272]	; (800935c <tcp_input+0x528>)
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009252:	3301      	adds	r3, #1
 8009254:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009256:	429a      	cmp	r2, r3
 8009258:	d002      	beq.n	8009260 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	61bb      	str	r3, [r7, #24]
        continue;
 800925e:	e016      	b.n	800928e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	8ada      	ldrh	r2, [r3, #22]
 8009264:	4b3c      	ldr	r3, [pc, #240]	; (8009358 <tcp_input+0x524>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	885b      	ldrh	r3, [r3, #2]
 800926a:	b29b      	uxth	r3, r3
 800926c:	429a      	cmp	r2, r3
 800926e:	d10c      	bne.n	800928a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	4b39      	ldr	r3, [pc, #228]	; (800935c <tcp_input+0x528>)
 8009276:	695b      	ldr	r3, [r3, #20]
 8009278:	429a      	cmp	r2, r3
 800927a:	d00f      	beq.n	800929c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00d      	beq.n	800929e <tcp_input+0x46a>
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d009      	beq.n	800929e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	617b      	str	r3, [r7, #20]
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d1d1      	bne.n	800923e <tcp_input+0x40a>
 800929a:	e000      	b.n	800929e <tcp_input+0x46a>
            break;
 800929c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d014      	beq.n	80092ce <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80092a4:	69bb      	ldr	r3, [r7, #24]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d00a      	beq.n	80092c0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	68da      	ldr	r2, [r3, #12]
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80092b2:	4b32      	ldr	r3, [pc, #200]	; (800937c <tcp_input+0x548>)
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80092ba:	4a30      	ldr	r2, [pc, #192]	; (800937c <tcp_input+0x548>)
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80092c0:	6978      	ldr	r0, [r7, #20]
 80092c2:	f000 fa01 	bl	80096c8 <tcp_listen_input>
      }
      pbuf_free(p);
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f7fd fb96 	bl	80069f8 <pbuf_free>
      return;
 80092cc:	e19b      	b.n	8009606 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	f000 8160 	beq.w	8009596 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80092d6:	4b2a      	ldr	r3, [pc, #168]	; (8009380 <tcp_input+0x54c>)
 80092d8:	2200      	movs	r2, #0
 80092da:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	891a      	ldrh	r2, [r3, #8]
 80092e0:	4b27      	ldr	r3, [pc, #156]	; (8009380 <tcp_input+0x54c>)
 80092e2:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80092e4:	4a26      	ldr	r2, [pc, #152]	; (8009380 <tcp_input+0x54c>)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80092ea:	4b1b      	ldr	r3, [pc, #108]	; (8009358 <tcp_input+0x524>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a24      	ldr	r2, [pc, #144]	; (8009380 <tcp_input+0x54c>)
 80092f0:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80092f2:	4b24      	ldr	r3, [pc, #144]	; (8009384 <tcp_input+0x550>)
 80092f4:	2200      	movs	r2, #0
 80092f6:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80092f8:	4b23      	ldr	r3, [pc, #140]	; (8009388 <tcp_input+0x554>)
 80092fa:	2200      	movs	r2, #0
 80092fc:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80092fe:	4b23      	ldr	r3, [pc, #140]	; (800938c <tcp_input+0x558>)
 8009300:	2200      	movs	r2, #0
 8009302:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8009304:	4b22      	ldr	r3, [pc, #136]	; (8009390 <tcp_input+0x55c>)
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	f003 0308 	and.w	r3, r3, #8
 800930c:	2b00      	cmp	r3, #0
 800930e:	d006      	beq.n	800931e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	7b5b      	ldrb	r3, [r3, #13]
 8009314:	f043 0301 	orr.w	r3, r3, #1
 8009318:	b2da      	uxtb	r2, r3
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009322:	2b00      	cmp	r3, #0
 8009324:	d038      	beq.n	8009398 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009326:	69f8      	ldr	r0, [r7, #28]
 8009328:	f7ff f852 	bl	80083d0 <tcp_process_refused_data>
 800932c:	4603      	mov	r3, r0
 800932e:	f113 0f0d 	cmn.w	r3, #13
 8009332:	d007      	beq.n	8009344 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009338:	2b00      	cmp	r3, #0
 800933a:	d02d      	beq.n	8009398 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800933c:	4b15      	ldr	r3, [pc, #84]	; (8009394 <tcp_input+0x560>)
 800933e:	881b      	ldrh	r3, [r3, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d029      	beq.n	8009398 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009348:	2b00      	cmp	r3, #0
 800934a:	f040 8104 	bne.w	8009556 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800934e:	69f8      	ldr	r0, [r7, #28]
 8009350:	f003 fe16 	bl	800cf80 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8009354:	e0ff      	b.n	8009556 <tcp_input+0x722>
 8009356:	bf00      	nop
 8009358:	20000568 	.word	0x20000568
 800935c:	20003808 	.word	0x20003808
 8009360:	08012a78 	.word	0x08012a78
 8009364:	08012ba4 	.word	0x08012ba4
 8009368:	08012ac4 	.word	0x08012ac4
 800936c:	20006d4c 	.word	0x20006d4c
 8009370:	08012bd0 	.word	0x08012bd0
 8009374:	20006d5c 	.word	0x20006d5c
 8009378:	08012bfc 	.word	0x08012bfc
 800937c:	20006d54 	.word	0x20006d54
 8009380:	20000558 	.word	0x20000558
 8009384:	20000588 	.word	0x20000588
 8009388:	20000585 	.word	0x20000585
 800938c:	20000580 	.word	0x20000580
 8009390:	20000584 	.word	0x20000584
 8009394:	20000582 	.word	0x20000582
      }
    }
    tcp_input_pcb = pcb;
 8009398:	4a9c      	ldr	r2, [pc, #624]	; (800960c <tcp_input+0x7d8>)
 800939a:	69fb      	ldr	r3, [r7, #28]
 800939c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800939e:	69f8      	ldr	r0, [r7, #28]
 80093a0:	f000 fb0a 	bl	80099b8 <tcp_process>
 80093a4:	4603      	mov	r3, r0
 80093a6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80093a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80093ac:	f113 0f0d 	cmn.w	r3, #13
 80093b0:	f000 80d3 	beq.w	800955a <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80093b4:	4b96      	ldr	r3, [pc, #600]	; (8009610 <tcp_input+0x7dc>)
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	f003 0308 	and.w	r3, r3, #8
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d015      	beq.n	80093ec <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d008      	beq.n	80093dc <tcp_input+0x5a8>
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093d0:	69fa      	ldr	r2, [r7, #28]
 80093d2:	6912      	ldr	r2, [r2, #16]
 80093d4:	f06f 010d 	mvn.w	r1, #13
 80093d8:	4610      	mov	r0, r2
 80093da:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80093dc:	69f9      	ldr	r1, [r7, #28]
 80093de:	488d      	ldr	r0, [pc, #564]	; (8009614 <tcp_input+0x7e0>)
 80093e0:	f7ff fbb0 	bl	8008b44 <tcp_pcb_remove>
        tcp_free(pcb);
 80093e4:	69f8      	ldr	r0, [r7, #28]
 80093e6:	f7fd fef7 	bl	80071d8 <tcp_free>
 80093ea:	e0c1      	b.n	8009570 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80093ec:	2300      	movs	r3, #0
 80093ee:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80093f0:	4b89      	ldr	r3, [pc, #548]	; (8009618 <tcp_input+0x7e4>)
 80093f2:	881b      	ldrh	r3, [r3, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d01d      	beq.n	8009434 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80093f8:	4b87      	ldr	r3, [pc, #540]	; (8009618 <tcp_input+0x7e4>)
 80093fa:	881b      	ldrh	r3, [r3, #0]
 80093fc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00a      	beq.n	800941e <tcp_input+0x5ea>
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800940e:	69fa      	ldr	r2, [r7, #28]
 8009410:	6910      	ldr	r0, [r2, #16]
 8009412:	89fa      	ldrh	r2, [r7, #14]
 8009414:	69f9      	ldr	r1, [r7, #28]
 8009416:	4798      	blx	r3
 8009418:	4603      	mov	r3, r0
 800941a:	74fb      	strb	r3, [r7, #19]
 800941c:	e001      	b.n	8009422 <tcp_input+0x5ee>
 800941e:	2300      	movs	r3, #0
 8009420:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009422:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009426:	f113 0f0d 	cmn.w	r3, #13
 800942a:	f000 8098 	beq.w	800955e <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800942e:	4b7a      	ldr	r3, [pc, #488]	; (8009618 <tcp_input+0x7e4>)
 8009430:	2200      	movs	r2, #0
 8009432:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009434:	69f8      	ldr	r0, [r7, #28]
 8009436:	f000 f907 	bl	8009648 <tcp_input_delayed_close>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	f040 8090 	bne.w	8009562 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8009442:	4b76      	ldr	r3, [pc, #472]	; (800961c <tcp_input+0x7e8>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d041      	beq.n	80094ce <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800944a:	69fb      	ldr	r3, [r7, #28]
 800944c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800944e:	2b00      	cmp	r3, #0
 8009450:	d006      	beq.n	8009460 <tcp_input+0x62c>
 8009452:	4b73      	ldr	r3, [pc, #460]	; (8009620 <tcp_input+0x7ec>)
 8009454:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009458:	4972      	ldr	r1, [pc, #456]	; (8009624 <tcp_input+0x7f0>)
 800945a:	4873      	ldr	r0, [pc, #460]	; (8009628 <tcp_input+0x7f4>)
 800945c:	f006 fd2a 	bl	800feb4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	8b5b      	ldrh	r3, [r3, #26]
 8009464:	f003 0310 	and.w	r3, r3, #16
 8009468:	2b00      	cmp	r3, #0
 800946a:	d008      	beq.n	800947e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800946c:	4b6b      	ldr	r3, [pc, #428]	; (800961c <tcp_input+0x7e8>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4618      	mov	r0, r3
 8009472:	f7fd fac1 	bl	80069f8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009476:	69f8      	ldr	r0, [r7, #28]
 8009478:	f7fe f996 	bl	80077a8 <tcp_abort>
            goto aborted;
 800947c:	e078      	b.n	8009570 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800947e:	69fb      	ldr	r3, [r7, #28]
 8009480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00c      	beq.n	80094a2 <tcp_input+0x66e>
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800948e:	69fb      	ldr	r3, [r7, #28]
 8009490:	6918      	ldr	r0, [r3, #16]
 8009492:	4b62      	ldr	r3, [pc, #392]	; (800961c <tcp_input+0x7e8>)
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	2300      	movs	r3, #0
 8009498:	69f9      	ldr	r1, [r7, #28]
 800949a:	47a0      	blx	r4
 800949c:	4603      	mov	r3, r0
 800949e:	74fb      	strb	r3, [r7, #19]
 80094a0:	e008      	b.n	80094b4 <tcp_input+0x680>
 80094a2:	4b5e      	ldr	r3, [pc, #376]	; (800961c <tcp_input+0x7e8>)
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	2300      	movs	r3, #0
 80094a8:	69f9      	ldr	r1, [r7, #28]
 80094aa:	2000      	movs	r0, #0
 80094ac:	f7ff f884 	bl	80085b8 <tcp_recv_null>
 80094b0:	4603      	mov	r3, r0
 80094b2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80094b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80094b8:	f113 0f0d 	cmn.w	r3, #13
 80094bc:	d053      	beq.n	8009566 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80094be:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d003      	beq.n	80094ce <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80094c6:	4b55      	ldr	r3, [pc, #340]	; (800961c <tcp_input+0x7e8>)
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	69fb      	ldr	r3, [r7, #28]
 80094cc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80094ce:	4b50      	ldr	r3, [pc, #320]	; (8009610 <tcp_input+0x7dc>)
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	f003 0320 	and.w	r3, r3, #32
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d030      	beq.n	800953c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d009      	beq.n	80094f6 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80094e2:	69fb      	ldr	r3, [r7, #28]
 80094e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094e6:	7b5a      	ldrb	r2, [r3, #13]
 80094e8:	69fb      	ldr	r3, [r7, #28]
 80094ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094ec:	f042 0220 	orr.w	r2, r2, #32
 80094f0:	b2d2      	uxtb	r2, r2
 80094f2:	735a      	strb	r2, [r3, #13]
 80094f4:	e022      	b.n	800953c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80094f6:	69fb      	ldr	r3, [r7, #28]
 80094f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094fa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80094fe:	d005      	beq.n	800950c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009504:	3301      	adds	r3, #1
 8009506:	b29a      	uxth	r2, r3
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800950c:	69fb      	ldr	r3, [r7, #28]
 800950e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009512:	2b00      	cmp	r3, #0
 8009514:	d00b      	beq.n	800952e <tcp_input+0x6fa>
 8009516:	69fb      	ldr	r3, [r7, #28]
 8009518:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	6918      	ldr	r0, [r3, #16]
 8009520:	2300      	movs	r3, #0
 8009522:	2200      	movs	r2, #0
 8009524:	69f9      	ldr	r1, [r7, #28]
 8009526:	47a0      	blx	r4
 8009528:	4603      	mov	r3, r0
 800952a:	74fb      	strb	r3, [r7, #19]
 800952c:	e001      	b.n	8009532 <tcp_input+0x6fe>
 800952e:	2300      	movs	r3, #0
 8009530:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009532:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009536:	f113 0f0d 	cmn.w	r3, #13
 800953a:	d016      	beq.n	800956a <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800953c:	4b33      	ldr	r3, [pc, #204]	; (800960c <tcp_input+0x7d8>)
 800953e:	2200      	movs	r2, #0
 8009540:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009542:	69f8      	ldr	r0, [r7, #28]
 8009544:	f000 f880 	bl	8009648 <tcp_input_delayed_close>
 8009548:	4603      	mov	r3, r0
 800954a:	2b00      	cmp	r3, #0
 800954c:	d10f      	bne.n	800956e <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800954e:	69f8      	ldr	r0, [r7, #28]
 8009550:	f002 ff10 	bl	800c374 <tcp_output>
 8009554:	e00c      	b.n	8009570 <tcp_input+0x73c>
        goto aborted;
 8009556:	bf00      	nop
 8009558:	e00a      	b.n	8009570 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800955a:	bf00      	nop
 800955c:	e008      	b.n	8009570 <tcp_input+0x73c>
              goto aborted;
 800955e:	bf00      	nop
 8009560:	e006      	b.n	8009570 <tcp_input+0x73c>
          goto aborted;
 8009562:	bf00      	nop
 8009564:	e004      	b.n	8009570 <tcp_input+0x73c>
            goto aborted;
 8009566:	bf00      	nop
 8009568:	e002      	b.n	8009570 <tcp_input+0x73c>
              goto aborted;
 800956a:	bf00      	nop
 800956c:	e000      	b.n	8009570 <tcp_input+0x73c>
          goto aborted;
 800956e:	bf00      	nop
    tcp_input_pcb = NULL;
 8009570:	4b26      	ldr	r3, [pc, #152]	; (800960c <tcp_input+0x7d8>)
 8009572:	2200      	movs	r2, #0
 8009574:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009576:	4b29      	ldr	r3, [pc, #164]	; (800961c <tcp_input+0x7e8>)
 8009578:	2200      	movs	r2, #0
 800957a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800957c:	4b2b      	ldr	r3, [pc, #172]	; (800962c <tcp_input+0x7f8>)
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d03f      	beq.n	8009604 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8009584:	4b29      	ldr	r3, [pc, #164]	; (800962c <tcp_input+0x7f8>)
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	4618      	mov	r0, r3
 800958a:	f7fd fa35 	bl	80069f8 <pbuf_free>
      inseg.p = NULL;
 800958e:	4b27      	ldr	r3, [pc, #156]	; (800962c <tcp_input+0x7f8>)
 8009590:	2200      	movs	r2, #0
 8009592:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8009594:	e036      	b.n	8009604 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009596:	4b26      	ldr	r3, [pc, #152]	; (8009630 <tcp_input+0x7fc>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	899b      	ldrh	r3, [r3, #12]
 800959c:	b29b      	uxth	r3, r3
 800959e:	4618      	mov	r0, r3
 80095a0:	f7fb ff0c 	bl	80053bc <lwip_htons>
 80095a4:	4603      	mov	r3, r0
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	f003 0304 	and.w	r3, r3, #4
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d118      	bne.n	80095e2 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80095b0:	4b20      	ldr	r3, [pc, #128]	; (8009634 <tcp_input+0x800>)
 80095b2:	6819      	ldr	r1, [r3, #0]
 80095b4:	4b20      	ldr	r3, [pc, #128]	; (8009638 <tcp_input+0x804>)
 80095b6:	881b      	ldrh	r3, [r3, #0]
 80095b8:	461a      	mov	r2, r3
 80095ba:	4b20      	ldr	r3, [pc, #128]	; (800963c <tcp_input+0x808>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80095c0:	4b1b      	ldr	r3, [pc, #108]	; (8009630 <tcp_input+0x7fc>)
 80095c2:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80095c4:	885b      	ldrh	r3, [r3, #2]
 80095c6:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80095c8:	4a19      	ldr	r2, [pc, #100]	; (8009630 <tcp_input+0x7fc>)
 80095ca:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80095cc:	8812      	ldrh	r2, [r2, #0]
 80095ce:	b292      	uxth	r2, r2
 80095d0:	9202      	str	r2, [sp, #8]
 80095d2:	9301      	str	r3, [sp, #4]
 80095d4:	4b1a      	ldr	r3, [pc, #104]	; (8009640 <tcp_input+0x80c>)
 80095d6:	9300      	str	r3, [sp, #0]
 80095d8:	4b1a      	ldr	r3, [pc, #104]	; (8009644 <tcp_input+0x810>)
 80095da:	4602      	mov	r2, r0
 80095dc:	2000      	movs	r0, #0
 80095de:	f003 fc7d 	bl	800cedc <tcp_rst>
    pbuf_free(p);
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f7fd fa08 	bl	80069f8 <pbuf_free>
  return;
 80095e8:	e00c      	b.n	8009604 <tcp_input+0x7d0>
    goto dropped;
 80095ea:	bf00      	nop
 80095ec:	e006      	b.n	80095fc <tcp_input+0x7c8>
    goto dropped;
 80095ee:	bf00      	nop
 80095f0:	e004      	b.n	80095fc <tcp_input+0x7c8>
    goto dropped;
 80095f2:	bf00      	nop
 80095f4:	e002      	b.n	80095fc <tcp_input+0x7c8>
      goto dropped;
 80095f6:	bf00      	nop
 80095f8:	e000      	b.n	80095fc <tcp_input+0x7c8>
      goto dropped;
 80095fa:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f7fd f9fb 	bl	80069f8 <pbuf_free>
 8009602:	e000      	b.n	8009606 <tcp_input+0x7d2>
  return;
 8009604:	bf00      	nop
}
 8009606:	3724      	adds	r7, #36	; 0x24
 8009608:	46bd      	mov	sp, r7
 800960a:	bd90      	pop	{r4, r7, pc}
 800960c:	20006d60 	.word	0x20006d60
 8009610:	20000585 	.word	0x20000585
 8009614:	20006d4c 	.word	0x20006d4c
 8009618:	20000580 	.word	0x20000580
 800961c:	20000588 	.word	0x20000588
 8009620:	08012a78 	.word	0x08012a78
 8009624:	08012c2c 	.word	0x08012c2c
 8009628:	08012ac4 	.word	0x08012ac4
 800962c:	20000558 	.word	0x20000558
 8009630:	20000568 	.word	0x20000568
 8009634:	2000057c 	.word	0x2000057c
 8009638:	20000582 	.word	0x20000582
 800963c:	20000578 	.word	0x20000578
 8009640:	20003818 	.word	0x20003818
 8009644:	2000381c 	.word	0x2000381c

08009648 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d106      	bne.n	8009664 <tcp_input_delayed_close+0x1c>
 8009656:	4b17      	ldr	r3, [pc, #92]	; (80096b4 <tcp_input_delayed_close+0x6c>)
 8009658:	f240 225a 	movw	r2, #602	; 0x25a
 800965c:	4916      	ldr	r1, [pc, #88]	; (80096b8 <tcp_input_delayed_close+0x70>)
 800965e:	4817      	ldr	r0, [pc, #92]	; (80096bc <tcp_input_delayed_close+0x74>)
 8009660:	f006 fc28 	bl	800feb4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8009664:	4b16      	ldr	r3, [pc, #88]	; (80096c0 <tcp_input_delayed_close+0x78>)
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	f003 0310 	and.w	r3, r3, #16
 800966c:	2b00      	cmp	r3, #0
 800966e:	d01c      	beq.n	80096aa <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	8b5b      	ldrh	r3, [r3, #26]
 8009674:	f003 0310 	and.w	r3, r3, #16
 8009678:	2b00      	cmp	r3, #0
 800967a:	d10d      	bne.n	8009698 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009682:	2b00      	cmp	r3, #0
 8009684:	d008      	beq.n	8009698 <tcp_input_delayed_close+0x50>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	6912      	ldr	r2, [r2, #16]
 8009690:	f06f 010e 	mvn.w	r1, #14
 8009694:	4610      	mov	r0, r2
 8009696:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009698:	6879      	ldr	r1, [r7, #4]
 800969a:	480a      	ldr	r0, [pc, #40]	; (80096c4 <tcp_input_delayed_close+0x7c>)
 800969c:	f7ff fa52 	bl	8008b44 <tcp_pcb_remove>
    tcp_free(pcb);
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f7fd fd99 	bl	80071d8 <tcp_free>
    return 1;
 80096a6:	2301      	movs	r3, #1
 80096a8:	e000      	b.n	80096ac <tcp_input_delayed_close+0x64>
  }
  return 0;
 80096aa:	2300      	movs	r3, #0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3708      	adds	r7, #8
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	08012a78 	.word	0x08012a78
 80096b8:	08012c48 	.word	0x08012c48
 80096bc:	08012ac4 	.word	0x08012ac4
 80096c0:	20000585 	.word	0x20000585
 80096c4:	20006d4c 	.word	0x20006d4c

080096c8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80096c8:	b590      	push	{r4, r7, lr}
 80096ca:	b08b      	sub	sp, #44	; 0x2c
 80096cc:	af04      	add	r7, sp, #16
 80096ce:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80096d0:	4b6f      	ldr	r3, [pc, #444]	; (8009890 <tcp_listen_input+0x1c8>)
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	f003 0304 	and.w	r3, r3, #4
 80096d8:	2b00      	cmp	r3, #0
 80096da:	f040 80d2 	bne.w	8009882 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d106      	bne.n	80096f2 <tcp_listen_input+0x2a>
 80096e4:	4b6b      	ldr	r3, [pc, #428]	; (8009894 <tcp_listen_input+0x1cc>)
 80096e6:	f240 2281 	movw	r2, #641	; 0x281
 80096ea:	496b      	ldr	r1, [pc, #428]	; (8009898 <tcp_listen_input+0x1d0>)
 80096ec:	486b      	ldr	r0, [pc, #428]	; (800989c <tcp_listen_input+0x1d4>)
 80096ee:	f006 fbe1 	bl	800feb4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80096f2:	4b67      	ldr	r3, [pc, #412]	; (8009890 <tcp_listen_input+0x1c8>)
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	f003 0310 	and.w	r3, r3, #16
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d019      	beq.n	8009732 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80096fe:	4b68      	ldr	r3, [pc, #416]	; (80098a0 <tcp_listen_input+0x1d8>)
 8009700:	6819      	ldr	r1, [r3, #0]
 8009702:	4b68      	ldr	r3, [pc, #416]	; (80098a4 <tcp_listen_input+0x1dc>)
 8009704:	881b      	ldrh	r3, [r3, #0]
 8009706:	461a      	mov	r2, r3
 8009708:	4b67      	ldr	r3, [pc, #412]	; (80098a8 <tcp_listen_input+0x1e0>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800970e:	4b67      	ldr	r3, [pc, #412]	; (80098ac <tcp_listen_input+0x1e4>)
 8009710:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009712:	885b      	ldrh	r3, [r3, #2]
 8009714:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009716:	4a65      	ldr	r2, [pc, #404]	; (80098ac <tcp_listen_input+0x1e4>)
 8009718:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800971a:	8812      	ldrh	r2, [r2, #0]
 800971c:	b292      	uxth	r2, r2
 800971e:	9202      	str	r2, [sp, #8]
 8009720:	9301      	str	r3, [sp, #4]
 8009722:	4b63      	ldr	r3, [pc, #396]	; (80098b0 <tcp_listen_input+0x1e8>)
 8009724:	9300      	str	r3, [sp, #0]
 8009726:	4b63      	ldr	r3, [pc, #396]	; (80098b4 <tcp_listen_input+0x1ec>)
 8009728:	4602      	mov	r2, r0
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f003 fbd6 	bl	800cedc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8009730:	e0a9      	b.n	8009886 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8009732:	4b57      	ldr	r3, [pc, #348]	; (8009890 <tcp_listen_input+0x1c8>)
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	f003 0302 	and.w	r3, r3, #2
 800973a:	2b00      	cmp	r3, #0
 800973c:	f000 80a3 	beq.w	8009886 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	7d5b      	ldrb	r3, [r3, #21]
 8009744:	4618      	mov	r0, r3
 8009746:	f7ff f85b 	bl	8008800 <tcp_alloc>
 800974a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d111      	bne.n	8009776 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	699b      	ldr	r3, [r3, #24]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00a      	beq.n	8009770 <tcp_listen_input+0xa8>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	699b      	ldr	r3, [r3, #24]
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	6910      	ldr	r0, [r2, #16]
 8009762:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009766:	2100      	movs	r1, #0
 8009768:	4798      	blx	r3
 800976a:	4603      	mov	r3, r0
 800976c:	73bb      	strb	r3, [r7, #14]
      return;
 800976e:	e08b      	b.n	8009888 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009770:	23f0      	movs	r3, #240	; 0xf0
 8009772:	73bb      	strb	r3, [r7, #14]
      return;
 8009774:	e088      	b.n	8009888 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009776:	4b50      	ldr	r3, [pc, #320]	; (80098b8 <tcp_listen_input+0x1f0>)
 8009778:	695a      	ldr	r2, [r3, #20]
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800977e:	4b4e      	ldr	r3, [pc, #312]	; (80098b8 <tcp_listen_input+0x1f0>)
 8009780:	691a      	ldr	r2, [r3, #16]
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	8ada      	ldrh	r2, [r3, #22]
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800978e:	4b47      	ldr	r3, [pc, #284]	; (80098ac <tcp_listen_input+0x1e4>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	881b      	ldrh	r3, [r3, #0]
 8009794:	b29a      	uxth	r2, r3
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	2203      	movs	r2, #3
 800979e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80097a0:	4b41      	ldr	r3, [pc, #260]	; (80098a8 <tcp_listen_input+0x1e0>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	1c5a      	adds	r2, r3, #1
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80097b2:	6978      	ldr	r0, [r7, #20]
 80097b4:	f7ff fa5a 	bl	8008c6c <tcp_next_iss>
 80097b8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	693a      	ldr	r2, [r7, #16]
 80097be:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	693a      	ldr	r2, [r7, #16]
 80097c4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	693a      	ldr	r2, [r7, #16]
 80097ca:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	693a      	ldr	r2, [r7, #16]
 80097d0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80097d2:	4b35      	ldr	r3, [pc, #212]	; (80098a8 <tcp_listen_input+0x1e0>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	1e5a      	subs	r2, r3, #1
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	691a      	ldr	r2, [r3, #16]
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	7a5b      	ldrb	r3, [r3, #9]
 80097ee:	f003 030c 	and.w	r3, r3, #12
 80097f2:	b2da      	uxtb	r2, r3
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	7a1a      	ldrb	r2, [r3, #8]
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009800:	4b2e      	ldr	r3, [pc, #184]	; (80098bc <tcp_listen_input+0x1f4>)
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	60da      	str	r2, [r3, #12]
 8009808:	4a2c      	ldr	r2, [pc, #176]	; (80098bc <tcp_listen_input+0x1f4>)
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	6013      	str	r3, [r2, #0]
 800980e:	f003 fd27 	bl	800d260 <tcp_timer_needed>
 8009812:	4b2b      	ldr	r3, [pc, #172]	; (80098c0 <tcp_listen_input+0x1f8>)
 8009814:	2201      	movs	r2, #1
 8009816:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009818:	6978      	ldr	r0, [r7, #20]
 800981a:	f001 fd8d 	bl	800b338 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800981e:	4b23      	ldr	r3, [pc, #140]	; (80098ac <tcp_listen_input+0x1e4>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	89db      	ldrh	r3, [r3, #14]
 8009824:	b29a      	uxth	r2, r3
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	3304      	adds	r3, #4
 8009840:	4618      	mov	r0, r3
 8009842:	f005 f8eb 	bl	800ea1c <ip4_route>
 8009846:	4601      	mov	r1, r0
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	3304      	adds	r3, #4
 800984c:	461a      	mov	r2, r3
 800984e:	4620      	mov	r0, r4
 8009850:	f7ff fa32 	bl	8008cb8 <tcp_eff_send_mss_netif>
 8009854:	4603      	mov	r3, r0
 8009856:	461a      	mov	r2, r3
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800985c:	2112      	movs	r1, #18
 800985e:	6978      	ldr	r0, [r7, #20]
 8009860:	f002 fc9a 	bl	800c198 <tcp_enqueue_flags>
 8009864:	4603      	mov	r3, r0
 8009866:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8009868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d004      	beq.n	800987a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8009870:	2100      	movs	r1, #0
 8009872:	6978      	ldr	r0, [r7, #20]
 8009874:	f7fd feda 	bl	800762c <tcp_abandon>
      return;
 8009878:	e006      	b.n	8009888 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800987a:	6978      	ldr	r0, [r7, #20]
 800987c:	f002 fd7a 	bl	800c374 <tcp_output>
  return;
 8009880:	e001      	b.n	8009886 <tcp_listen_input+0x1be>
    return;
 8009882:	bf00      	nop
 8009884:	e000      	b.n	8009888 <tcp_listen_input+0x1c0>
  return;
 8009886:	bf00      	nop
}
 8009888:	371c      	adds	r7, #28
 800988a:	46bd      	mov	sp, r7
 800988c:	bd90      	pop	{r4, r7, pc}
 800988e:	bf00      	nop
 8009890:	20000584 	.word	0x20000584
 8009894:	08012a78 	.word	0x08012a78
 8009898:	08012c70 	.word	0x08012c70
 800989c:	08012ac4 	.word	0x08012ac4
 80098a0:	2000057c 	.word	0x2000057c
 80098a4:	20000582 	.word	0x20000582
 80098a8:	20000578 	.word	0x20000578
 80098ac:	20000568 	.word	0x20000568
 80098b0:	20003818 	.word	0x20003818
 80098b4:	2000381c 	.word	0x2000381c
 80098b8:	20003808 	.word	0x20003808
 80098bc:	20006d4c 	.word	0x20006d4c
 80098c0:	20006d48 	.word	0x20006d48

080098c4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b086      	sub	sp, #24
 80098c8:	af04      	add	r7, sp, #16
 80098ca:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80098cc:	4b2f      	ldr	r3, [pc, #188]	; (800998c <tcp_timewait_input+0xc8>)
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	f003 0304 	and.w	r3, r3, #4
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d153      	bne.n	8009980 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d106      	bne.n	80098ec <tcp_timewait_input+0x28>
 80098de:	4b2c      	ldr	r3, [pc, #176]	; (8009990 <tcp_timewait_input+0xcc>)
 80098e0:	f240 22ee 	movw	r2, #750	; 0x2ee
 80098e4:	492b      	ldr	r1, [pc, #172]	; (8009994 <tcp_timewait_input+0xd0>)
 80098e6:	482c      	ldr	r0, [pc, #176]	; (8009998 <tcp_timewait_input+0xd4>)
 80098e8:	f006 fae4 	bl	800feb4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80098ec:	4b27      	ldr	r3, [pc, #156]	; (800998c <tcp_timewait_input+0xc8>)
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	f003 0302 	and.w	r3, r3, #2
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d02a      	beq.n	800994e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80098f8:	4b28      	ldr	r3, [pc, #160]	; (800999c <tcp_timewait_input+0xd8>)
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009900:	1ad3      	subs	r3, r2, r3
 8009902:	2b00      	cmp	r3, #0
 8009904:	db2d      	blt.n	8009962 <tcp_timewait_input+0x9e>
 8009906:	4b25      	ldr	r3, [pc, #148]	; (800999c <tcp_timewait_input+0xd8>)
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990e:	6879      	ldr	r1, [r7, #4]
 8009910:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009912:	440b      	add	r3, r1
 8009914:	1ad3      	subs	r3, r2, r3
 8009916:	2b00      	cmp	r3, #0
 8009918:	dc23      	bgt.n	8009962 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800991a:	4b21      	ldr	r3, [pc, #132]	; (80099a0 <tcp_timewait_input+0xdc>)
 800991c:	6819      	ldr	r1, [r3, #0]
 800991e:	4b21      	ldr	r3, [pc, #132]	; (80099a4 <tcp_timewait_input+0xe0>)
 8009920:	881b      	ldrh	r3, [r3, #0]
 8009922:	461a      	mov	r2, r3
 8009924:	4b1d      	ldr	r3, [pc, #116]	; (800999c <tcp_timewait_input+0xd8>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800992a:	4b1f      	ldr	r3, [pc, #124]	; (80099a8 <tcp_timewait_input+0xe4>)
 800992c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800992e:	885b      	ldrh	r3, [r3, #2]
 8009930:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009932:	4a1d      	ldr	r2, [pc, #116]	; (80099a8 <tcp_timewait_input+0xe4>)
 8009934:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009936:	8812      	ldrh	r2, [r2, #0]
 8009938:	b292      	uxth	r2, r2
 800993a:	9202      	str	r2, [sp, #8]
 800993c:	9301      	str	r3, [sp, #4]
 800993e:	4b1b      	ldr	r3, [pc, #108]	; (80099ac <tcp_timewait_input+0xe8>)
 8009940:	9300      	str	r3, [sp, #0]
 8009942:	4b1b      	ldr	r3, [pc, #108]	; (80099b0 <tcp_timewait_input+0xec>)
 8009944:	4602      	mov	r2, r0
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f003 fac8 	bl	800cedc <tcp_rst>
      return;
 800994c:	e01b      	b.n	8009986 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800994e:	4b0f      	ldr	r3, [pc, #60]	; (800998c <tcp_timewait_input+0xc8>)
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	f003 0301 	and.w	r3, r3, #1
 8009956:	2b00      	cmp	r3, #0
 8009958:	d003      	beq.n	8009962 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800995a:	4b16      	ldr	r3, [pc, #88]	; (80099b4 <tcp_timewait_input+0xf0>)
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8009962:	4b10      	ldr	r3, [pc, #64]	; (80099a4 <tcp_timewait_input+0xe0>)
 8009964:	881b      	ldrh	r3, [r3, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00c      	beq.n	8009984 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	8b5b      	ldrh	r3, [r3, #26]
 800996e:	f043 0302 	orr.w	r3, r3, #2
 8009972:	b29a      	uxth	r2, r3
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f002 fcfb 	bl	800c374 <tcp_output>
  }
  return;
 800997e:	e001      	b.n	8009984 <tcp_timewait_input+0xc0>
    return;
 8009980:	bf00      	nop
 8009982:	e000      	b.n	8009986 <tcp_timewait_input+0xc2>
  return;
 8009984:	bf00      	nop
}
 8009986:	3708      	adds	r7, #8
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}
 800998c:	20000584 	.word	0x20000584
 8009990:	08012a78 	.word	0x08012a78
 8009994:	08012c90 	.word	0x08012c90
 8009998:	08012ac4 	.word	0x08012ac4
 800999c:	20000578 	.word	0x20000578
 80099a0:	2000057c 	.word	0x2000057c
 80099a4:	20000582 	.word	0x20000582
 80099a8:	20000568 	.word	0x20000568
 80099ac:	20003818 	.word	0x20003818
 80099b0:	2000381c 	.word	0x2000381c
 80099b4:	20006d50 	.word	0x20006d50

080099b8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80099b8:	b590      	push	{r4, r7, lr}
 80099ba:	b08d      	sub	sp, #52	; 0x34
 80099bc:	af04      	add	r7, sp, #16
 80099be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80099c0:	2300      	movs	r3, #0
 80099c2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80099c4:	2300      	movs	r3, #0
 80099c6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d106      	bne.n	80099dc <tcp_process+0x24>
 80099ce:	4ba5      	ldr	r3, [pc, #660]	; (8009c64 <tcp_process+0x2ac>)
 80099d0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80099d4:	49a4      	ldr	r1, [pc, #656]	; (8009c68 <tcp_process+0x2b0>)
 80099d6:	48a5      	ldr	r0, [pc, #660]	; (8009c6c <tcp_process+0x2b4>)
 80099d8:	f006 fa6c 	bl	800feb4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80099dc:	4ba4      	ldr	r3, [pc, #656]	; (8009c70 <tcp_process+0x2b8>)
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	f003 0304 	and.w	r3, r3, #4
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d04e      	beq.n	8009a86 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	7d1b      	ldrb	r3, [r3, #20]
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	d108      	bne.n	8009a02 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80099f4:	4b9f      	ldr	r3, [pc, #636]	; (8009c74 <tcp_process+0x2bc>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d123      	bne.n	8009a44 <tcp_process+0x8c>
        acceptable = 1;
 80099fc:	2301      	movs	r3, #1
 80099fe:	76fb      	strb	r3, [r7, #27]
 8009a00:	e020      	b.n	8009a44 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a06:	4b9c      	ldr	r3, [pc, #624]	; (8009c78 <tcp_process+0x2c0>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d102      	bne.n	8009a14 <tcp_process+0x5c>
        acceptable = 1;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	76fb      	strb	r3, [r7, #27]
 8009a12:	e017      	b.n	8009a44 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009a14:	4b98      	ldr	r3, [pc, #608]	; (8009c78 <tcp_process+0x2c0>)
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1c:	1ad3      	subs	r3, r2, r3
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	db10      	blt.n	8009a44 <tcp_process+0x8c>
 8009a22:	4b95      	ldr	r3, [pc, #596]	; (8009c78 <tcp_process+0x2c0>)
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2a:	6879      	ldr	r1, [r7, #4]
 8009a2c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009a2e:	440b      	add	r3, r1
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	dc06      	bgt.n	8009a44 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	8b5b      	ldrh	r3, [r3, #26]
 8009a3a:	f043 0302 	orr.w	r3, r3, #2
 8009a3e:	b29a      	uxth	r2, r3
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8009a44:	7efb      	ldrb	r3, [r7, #27]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d01b      	beq.n	8009a82 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	7d1b      	ldrb	r3, [r3, #20]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d106      	bne.n	8009a60 <tcp_process+0xa8>
 8009a52:	4b84      	ldr	r3, [pc, #528]	; (8009c64 <tcp_process+0x2ac>)
 8009a54:	f44f 724e 	mov.w	r2, #824	; 0x338
 8009a58:	4988      	ldr	r1, [pc, #544]	; (8009c7c <tcp_process+0x2c4>)
 8009a5a:	4884      	ldr	r0, [pc, #528]	; (8009c6c <tcp_process+0x2b4>)
 8009a5c:	f006 fa2a 	bl	800feb4 <iprintf>
      recv_flags |= TF_RESET;
 8009a60:	4b87      	ldr	r3, [pc, #540]	; (8009c80 <tcp_process+0x2c8>)
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	f043 0308 	orr.w	r3, r3, #8
 8009a68:	b2da      	uxtb	r2, r3
 8009a6a:	4b85      	ldr	r3, [pc, #532]	; (8009c80 <tcp_process+0x2c8>)
 8009a6c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	8b5b      	ldrh	r3, [r3, #26]
 8009a72:	f023 0301 	bic.w	r3, r3, #1
 8009a76:	b29a      	uxth	r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8009a7c:	f06f 030d 	mvn.w	r3, #13
 8009a80:	e37a      	b.n	800a178 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8009a82:	2300      	movs	r3, #0
 8009a84:	e378      	b.n	800a178 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009a86:	4b7a      	ldr	r3, [pc, #488]	; (8009c70 <tcp_process+0x2b8>)
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	f003 0302 	and.w	r3, r3, #2
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d010      	beq.n	8009ab4 <tcp_process+0xfc>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	7d1b      	ldrb	r3, [r3, #20]
 8009a96:	2b02      	cmp	r3, #2
 8009a98:	d00c      	beq.n	8009ab4 <tcp_process+0xfc>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	7d1b      	ldrb	r3, [r3, #20]
 8009a9e:	2b03      	cmp	r3, #3
 8009aa0:	d008      	beq.n	8009ab4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	8b5b      	ldrh	r3, [r3, #26]
 8009aa6:	f043 0302 	orr.w	r3, r3, #2
 8009aaa:	b29a      	uxth	r2, r3
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	e361      	b.n	800a178 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	8b5b      	ldrh	r3, [r3, #26]
 8009ab8:	f003 0310 	and.w	r3, r3, #16
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d103      	bne.n	8009ac8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009ac0:	4b70      	ldr	r3, [pc, #448]	; (8009c84 <tcp_process+0x2cc>)
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f001 fc2d 	bl	800b338 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	7d1b      	ldrb	r3, [r3, #20]
 8009ae2:	3b02      	subs	r3, #2
 8009ae4:	2b07      	cmp	r3, #7
 8009ae6:	f200 8337 	bhi.w	800a158 <tcp_process+0x7a0>
 8009aea:	a201      	add	r2, pc, #4	; (adr r2, 8009af0 <tcp_process+0x138>)
 8009aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af0:	08009b11 	.word	0x08009b11
 8009af4:	08009d41 	.word	0x08009d41
 8009af8:	08009eb9 	.word	0x08009eb9
 8009afc:	08009ee3 	.word	0x08009ee3
 8009b00:	0800a007 	.word	0x0800a007
 8009b04:	08009eb9 	.word	0x08009eb9
 8009b08:	0800a093 	.word	0x0800a093
 8009b0c:	0800a123 	.word	0x0800a123
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009b10:	4b57      	ldr	r3, [pc, #348]	; (8009c70 <tcp_process+0x2b8>)
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	f003 0310 	and.w	r3, r3, #16
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	f000 80e4 	beq.w	8009ce6 <tcp_process+0x32e>
 8009b1e:	4b54      	ldr	r3, [pc, #336]	; (8009c70 <tcp_process+0x2b8>)
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	f003 0302 	and.w	r3, r3, #2
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	f000 80dd 	beq.w	8009ce6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b30:	1c5a      	adds	r2, r3, #1
 8009b32:	4b50      	ldr	r3, [pc, #320]	; (8009c74 <tcp_process+0x2bc>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	f040 80d5 	bne.w	8009ce6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8009b3c:	4b4e      	ldr	r3, [pc, #312]	; (8009c78 <tcp_process+0x2c0>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	1c5a      	adds	r2, r3, #1
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8009b4e:	4b49      	ldr	r3, [pc, #292]	; (8009c74 <tcp_process+0x2bc>)
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8009b56:	4b4c      	ldr	r3, [pc, #304]	; (8009c88 <tcp_process+0x2d0>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	89db      	ldrh	r3, [r3, #14]
 8009b5c:	b29a      	uxth	r2, r3
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009b70:	4b41      	ldr	r3, [pc, #260]	; (8009c78 <tcp_process+0x2c0>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	1e5a      	subs	r2, r3, #1
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2204      	movs	r2, #4
 8009b7e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	3304      	adds	r3, #4
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f004 ff47 	bl	800ea1c <ip4_route>
 8009b8e:	4601      	mov	r1, r0
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	3304      	adds	r3, #4
 8009b94:	461a      	mov	r2, r3
 8009b96:	4620      	mov	r0, r4
 8009b98:	f7ff f88e 	bl	8008cb8 <tcp_eff_send_mss_netif>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009ba8:	009a      	lsls	r2, r3, #2
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009bae:	005b      	lsls	r3, r3, #1
 8009bb0:	f241 111c 	movw	r1, #4380	; 0x111c
 8009bb4:	428b      	cmp	r3, r1
 8009bb6:	bf38      	it	cc
 8009bb8:	460b      	movcc	r3, r1
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d204      	bcs.n	8009bc8 <tcp_process+0x210>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	e00d      	b.n	8009be4 <tcp_process+0x22c>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009bcc:	005b      	lsls	r3, r3, #1
 8009bce:	f241 121c 	movw	r2, #4380	; 0x111c
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d904      	bls.n	8009be0 <tcp_process+0x228>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009bda:	005b      	lsls	r3, r3, #1
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	e001      	b.n	8009be4 <tcp_process+0x22c>
 8009be0:	f241 131c 	movw	r3, #4380	; 0x111c
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d106      	bne.n	8009c02 <tcp_process+0x24a>
 8009bf4:	4b1b      	ldr	r3, [pc, #108]	; (8009c64 <tcp_process+0x2ac>)
 8009bf6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8009bfa:	4924      	ldr	r1, [pc, #144]	; (8009c8c <tcp_process+0x2d4>)
 8009bfc:	481b      	ldr	r0, [pc, #108]	; (8009c6c <tcp_process+0x2b4>)
 8009bfe:	f006 f959 	bl	800feb4 <iprintf>
        --pcb->snd_queuelen;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009c08:	3b01      	subs	r3, #1
 8009c0a:	b29a      	uxth	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c16:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d111      	bne.n	8009c42 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c22:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d106      	bne.n	8009c38 <tcp_process+0x280>
 8009c2a:	4b0e      	ldr	r3, [pc, #56]	; (8009c64 <tcp_process+0x2ac>)
 8009c2c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8009c30:	4917      	ldr	r1, [pc, #92]	; (8009c90 <tcp_process+0x2d8>)
 8009c32:	480e      	ldr	r0, [pc, #56]	; (8009c6c <tcp_process+0x2b4>)
 8009c34:	f006 f93e 	bl	800feb4 <iprintf>
          pcb->unsent = rseg->next;
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	66da      	str	r2, [r3, #108]	; 0x6c
 8009c40:	e003      	b.n	8009c4a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8009c42:	69fb      	ldr	r3, [r7, #28]
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8009c4a:	69f8      	ldr	r0, [r7, #28]
 8009c4c:	f7fe fc51 	bl	80084f2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d11d      	bne.n	8009c94 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c5e:	861a      	strh	r2, [r3, #48]	; 0x30
 8009c60:	e01f      	b.n	8009ca2 <tcp_process+0x2ea>
 8009c62:	bf00      	nop
 8009c64:	08012a78 	.word	0x08012a78
 8009c68:	08012cb0 	.word	0x08012cb0
 8009c6c:	08012ac4 	.word	0x08012ac4
 8009c70:	20000584 	.word	0x20000584
 8009c74:	2000057c 	.word	0x2000057c
 8009c78:	20000578 	.word	0x20000578
 8009c7c:	08012ccc 	.word	0x08012ccc
 8009c80:	20000585 	.word	0x20000585
 8009c84:	20006d50 	.word	0x20006d50
 8009c88:	20000568 	.word	0x20000568
 8009c8c:	08012cec 	.word	0x08012cec
 8009c90:	08012d04 	.word	0x08012d04
        } else {
          pcb->rtime = 0;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2200      	movs	r2, #0
 8009c98:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d00a      	beq.n	8009cc2 <tcp_process+0x30a>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	6910      	ldr	r0, [r2, #16]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	6879      	ldr	r1, [r7, #4]
 8009cba:	4798      	blx	r3
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	76bb      	strb	r3, [r7, #26]
 8009cc0:	e001      	b.n	8009cc6 <tcp_process+0x30e>
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009cc6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009cca:	f113 0f0d 	cmn.w	r3, #13
 8009cce:	d102      	bne.n	8009cd6 <tcp_process+0x31e>
          return ERR_ABRT;
 8009cd0:	f06f 030c 	mvn.w	r3, #12
 8009cd4:	e250      	b.n	800a178 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	8b5b      	ldrh	r3, [r3, #26]
 8009cda:	f043 0302 	orr.w	r3, r3, #2
 8009cde:	b29a      	uxth	r2, r3
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009ce4:	e23a      	b.n	800a15c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8009ce6:	4b9d      	ldr	r3, [pc, #628]	; (8009f5c <tcp_process+0x5a4>)
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	f003 0310 	and.w	r3, r3, #16
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	f000 8234 	beq.w	800a15c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009cf4:	4b9a      	ldr	r3, [pc, #616]	; (8009f60 <tcp_process+0x5a8>)
 8009cf6:	6819      	ldr	r1, [r3, #0]
 8009cf8:	4b9a      	ldr	r3, [pc, #616]	; (8009f64 <tcp_process+0x5ac>)
 8009cfa:	881b      	ldrh	r3, [r3, #0]
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	4b9a      	ldr	r3, [pc, #616]	; (8009f68 <tcp_process+0x5b0>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009d04:	4b99      	ldr	r3, [pc, #612]	; (8009f6c <tcp_process+0x5b4>)
 8009d06:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009d08:	885b      	ldrh	r3, [r3, #2]
 8009d0a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009d0c:	4a97      	ldr	r2, [pc, #604]	; (8009f6c <tcp_process+0x5b4>)
 8009d0e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009d10:	8812      	ldrh	r2, [r2, #0]
 8009d12:	b292      	uxth	r2, r2
 8009d14:	9202      	str	r2, [sp, #8]
 8009d16:	9301      	str	r3, [sp, #4]
 8009d18:	4b95      	ldr	r3, [pc, #596]	; (8009f70 <tcp_process+0x5b8>)
 8009d1a:	9300      	str	r3, [sp, #0]
 8009d1c:	4b95      	ldr	r3, [pc, #596]	; (8009f74 <tcp_process+0x5bc>)
 8009d1e:	4602      	mov	r2, r0
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f003 f8db 	bl	800cedc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009d2c:	2b05      	cmp	r3, #5
 8009d2e:	f200 8215 	bhi.w	800a15c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2200      	movs	r2, #0
 8009d36:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f002 fea5 	bl	800ca88 <tcp_rexmit_rto>
      break;
 8009d3e:	e20d      	b.n	800a15c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8009d40:	4b86      	ldr	r3, [pc, #536]	; (8009f5c <tcp_process+0x5a4>)
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	f003 0310 	and.w	r3, r3, #16
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	f000 80a1 	beq.w	8009e90 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009d4e:	4b84      	ldr	r3, [pc, #528]	; (8009f60 <tcp_process+0x5a8>)
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d56:	1ad3      	subs	r3, r2, r3
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	db7e      	blt.n	8009e5c <tcp_process+0x4a4>
 8009d5e:	4b80      	ldr	r3, [pc, #512]	; (8009f60 <tcp_process+0x5a8>)
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d66:	1ad3      	subs	r3, r2, r3
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	dc77      	bgt.n	8009e5c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2204      	movs	r2, #4
 8009d70:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d102      	bne.n	8009d80 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8009d7a:	23fa      	movs	r3, #250	; 0xfa
 8009d7c:	76bb      	strb	r3, [r7, #26]
 8009d7e:	e01d      	b.n	8009dbc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d84:	699b      	ldr	r3, [r3, #24]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d106      	bne.n	8009d98 <tcp_process+0x3e0>
 8009d8a:	4b7b      	ldr	r3, [pc, #492]	; (8009f78 <tcp_process+0x5c0>)
 8009d8c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8009d90:	497a      	ldr	r1, [pc, #488]	; (8009f7c <tcp_process+0x5c4>)
 8009d92:	487b      	ldr	r0, [pc, #492]	; (8009f80 <tcp_process+0x5c8>)
 8009d94:	f006 f88e 	bl	800feb4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d9c:	699b      	ldr	r3, [r3, #24]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d00a      	beq.n	8009db8 <tcp_process+0x400>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009da6:	699b      	ldr	r3, [r3, #24]
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	6910      	ldr	r0, [r2, #16]
 8009dac:	2200      	movs	r2, #0
 8009dae:	6879      	ldr	r1, [r7, #4]
 8009db0:	4798      	blx	r3
 8009db2:	4603      	mov	r3, r0
 8009db4:	76bb      	strb	r3, [r7, #26]
 8009db6:	e001      	b.n	8009dbc <tcp_process+0x404>
 8009db8:	23f0      	movs	r3, #240	; 0xf0
 8009dba:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8009dbc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00a      	beq.n	8009dda <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009dc4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009dc8:	f113 0f0d 	cmn.w	r3, #13
 8009dcc:	d002      	beq.n	8009dd4 <tcp_process+0x41c>
              tcp_abort(pcb);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f7fd fcea 	bl	80077a8 <tcp_abort>
            }
            return ERR_ABRT;
 8009dd4:	f06f 030c 	mvn.w	r3, #12
 8009dd8:	e1ce      	b.n	800a178 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 fae0 	bl	800a3a0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8009de0:	4b68      	ldr	r3, [pc, #416]	; (8009f84 <tcp_process+0x5cc>)
 8009de2:	881b      	ldrh	r3, [r3, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d005      	beq.n	8009df4 <tcp_process+0x43c>
            recv_acked--;
 8009de8:	4b66      	ldr	r3, [pc, #408]	; (8009f84 <tcp_process+0x5cc>)
 8009dea:	881b      	ldrh	r3, [r3, #0]
 8009dec:	3b01      	subs	r3, #1
 8009dee:	b29a      	uxth	r2, r3
 8009df0:	4b64      	ldr	r3, [pc, #400]	; (8009f84 <tcp_process+0x5cc>)
 8009df2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009df8:	009a      	lsls	r2, r3, #2
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009dfe:	005b      	lsls	r3, r3, #1
 8009e00:	f241 111c 	movw	r1, #4380	; 0x111c
 8009e04:	428b      	cmp	r3, r1
 8009e06:	bf38      	it	cc
 8009e08:	460b      	movcc	r3, r1
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d204      	bcs.n	8009e18 <tcp_process+0x460>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	e00d      	b.n	8009e34 <tcp_process+0x47c>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009e1c:	005b      	lsls	r3, r3, #1
 8009e1e:	f241 121c 	movw	r2, #4380	; 0x111c
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d904      	bls.n	8009e30 <tcp_process+0x478>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009e2a:	005b      	lsls	r3, r3, #1
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	e001      	b.n	8009e34 <tcp_process+0x47c>
 8009e30:	f241 131c 	movw	r3, #4380	; 0x111c
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8009e3a:	4b53      	ldr	r3, [pc, #332]	; (8009f88 <tcp_process+0x5d0>)
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	f003 0320 	and.w	r3, r3, #32
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d037      	beq.n	8009eb6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	8b5b      	ldrh	r3, [r3, #26]
 8009e4a:	f043 0302 	orr.w	r3, r3, #2
 8009e4e:	b29a      	uxth	r2, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2207      	movs	r2, #7
 8009e58:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009e5a:	e02c      	b.n	8009eb6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e5c:	4b40      	ldr	r3, [pc, #256]	; (8009f60 <tcp_process+0x5a8>)
 8009e5e:	6819      	ldr	r1, [r3, #0]
 8009e60:	4b40      	ldr	r3, [pc, #256]	; (8009f64 <tcp_process+0x5ac>)
 8009e62:	881b      	ldrh	r3, [r3, #0]
 8009e64:	461a      	mov	r2, r3
 8009e66:	4b40      	ldr	r3, [pc, #256]	; (8009f68 <tcp_process+0x5b0>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009e6c:	4b3f      	ldr	r3, [pc, #252]	; (8009f6c <tcp_process+0x5b4>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e70:	885b      	ldrh	r3, [r3, #2]
 8009e72:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009e74:	4a3d      	ldr	r2, [pc, #244]	; (8009f6c <tcp_process+0x5b4>)
 8009e76:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e78:	8812      	ldrh	r2, [r2, #0]
 8009e7a:	b292      	uxth	r2, r2
 8009e7c:	9202      	str	r2, [sp, #8]
 8009e7e:	9301      	str	r3, [sp, #4]
 8009e80:	4b3b      	ldr	r3, [pc, #236]	; (8009f70 <tcp_process+0x5b8>)
 8009e82:	9300      	str	r3, [sp, #0]
 8009e84:	4b3b      	ldr	r3, [pc, #236]	; (8009f74 <tcp_process+0x5bc>)
 8009e86:	4602      	mov	r2, r0
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f003 f827 	bl	800cedc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8009e8e:	e167      	b.n	800a160 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009e90:	4b32      	ldr	r3, [pc, #200]	; (8009f5c <tcp_process+0x5a4>)
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	f003 0302 	and.w	r3, r3, #2
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	f000 8161 	beq.w	800a160 <tcp_process+0x7a8>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea2:	1e5a      	subs	r2, r3, #1
 8009ea4:	4b30      	ldr	r3, [pc, #192]	; (8009f68 <tcp_process+0x5b0>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	f040 8159 	bne.w	800a160 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f002 fe0c 	bl	800cacc <tcp_rexmit>
      break;
 8009eb4:	e154      	b.n	800a160 <tcp_process+0x7a8>
 8009eb6:	e153      	b.n	800a160 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 fa71 	bl	800a3a0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009ebe:	4b32      	ldr	r3, [pc, #200]	; (8009f88 <tcp_process+0x5d0>)
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	f003 0320 	and.w	r3, r3, #32
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	f000 814c 	beq.w	800a164 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	8b5b      	ldrh	r3, [r3, #26]
 8009ed0:	f043 0302 	orr.w	r3, r3, #2
 8009ed4:	b29a      	uxth	r2, r3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2207      	movs	r2, #7
 8009ede:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009ee0:	e140      	b.n	800a164 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 fa5c 	bl	800a3a0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009ee8:	4b27      	ldr	r3, [pc, #156]	; (8009f88 <tcp_process+0x5d0>)
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	f003 0320 	and.w	r3, r3, #32
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d071      	beq.n	8009fd8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009ef4:	4b19      	ldr	r3, [pc, #100]	; (8009f5c <tcp_process+0x5a4>)
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	f003 0310 	and.w	r3, r3, #16
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d060      	beq.n	8009fc2 <tcp_process+0x60a>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009f04:	4b16      	ldr	r3, [pc, #88]	; (8009f60 <tcp_process+0x5a8>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d15a      	bne.n	8009fc2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d156      	bne.n	8009fc2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	8b5b      	ldrh	r3, [r3, #26]
 8009f18:	f043 0302 	orr.w	r3, r3, #2
 8009f1c:	b29a      	uxth	r2, r3
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f7fe fdbe 	bl	8008aa4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009f28:	4b18      	ldr	r3, [pc, #96]	; (8009f8c <tcp_process+0x5d4>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d105      	bne.n	8009f3e <tcp_process+0x586>
 8009f32:	4b16      	ldr	r3, [pc, #88]	; (8009f8c <tcp_process+0x5d4>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	68db      	ldr	r3, [r3, #12]
 8009f38:	4a14      	ldr	r2, [pc, #80]	; (8009f8c <tcp_process+0x5d4>)
 8009f3a:	6013      	str	r3, [r2, #0]
 8009f3c:	e02e      	b.n	8009f9c <tcp_process+0x5e4>
 8009f3e:	4b13      	ldr	r3, [pc, #76]	; (8009f8c <tcp_process+0x5d4>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	617b      	str	r3, [r7, #20]
 8009f44:	e027      	b.n	8009f96 <tcp_process+0x5de>
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	68db      	ldr	r3, [r3, #12]
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d11f      	bne.n	8009f90 <tcp_process+0x5d8>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	68da      	ldr	r2, [r3, #12]
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	60da      	str	r2, [r3, #12]
 8009f58:	e020      	b.n	8009f9c <tcp_process+0x5e4>
 8009f5a:	bf00      	nop
 8009f5c:	20000584 	.word	0x20000584
 8009f60:	2000057c 	.word	0x2000057c
 8009f64:	20000582 	.word	0x20000582
 8009f68:	20000578 	.word	0x20000578
 8009f6c:	20000568 	.word	0x20000568
 8009f70:	20003818 	.word	0x20003818
 8009f74:	2000381c 	.word	0x2000381c
 8009f78:	08012a78 	.word	0x08012a78
 8009f7c:	08012d18 	.word	0x08012d18
 8009f80:	08012ac4 	.word	0x08012ac4
 8009f84:	20000580 	.word	0x20000580
 8009f88:	20000585 	.word	0x20000585
 8009f8c:	20006d4c 	.word	0x20006d4c
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	617b      	str	r3, [r7, #20]
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d1d4      	bne.n	8009f46 <tcp_process+0x58e>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	60da      	str	r2, [r3, #12]
 8009fa2:	4b77      	ldr	r3, [pc, #476]	; (800a180 <tcp_process+0x7c8>)
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	220a      	movs	r2, #10
 8009fac:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009fae:	4b75      	ldr	r3, [pc, #468]	; (800a184 <tcp_process+0x7cc>)
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	60da      	str	r2, [r3, #12]
 8009fb6:	4a73      	ldr	r2, [pc, #460]	; (800a184 <tcp_process+0x7cc>)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6013      	str	r3, [r2, #0]
 8009fbc:	f003 f950 	bl	800d260 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009fc0:	e0d2      	b.n	800a168 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	8b5b      	ldrh	r3, [r3, #26]
 8009fc6:	f043 0302 	orr.w	r3, r3, #2
 8009fca:	b29a      	uxth	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2208      	movs	r2, #8
 8009fd4:	751a      	strb	r2, [r3, #20]
      break;
 8009fd6:	e0c7      	b.n	800a168 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009fd8:	4b6b      	ldr	r3, [pc, #428]	; (800a188 <tcp_process+0x7d0>)
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	f003 0310 	and.w	r3, r3, #16
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	f000 80c1 	beq.w	800a168 <tcp_process+0x7b0>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009fea:	4b68      	ldr	r3, [pc, #416]	; (800a18c <tcp_process+0x7d4>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	f040 80ba 	bne.w	800a168 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	f040 80b5 	bne.w	800a168 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2206      	movs	r2, #6
 800a002:	751a      	strb	r2, [r3, #20]
      break;
 800a004:	e0b0      	b.n	800a168 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 f9ca 	bl	800a3a0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a00c:	4b60      	ldr	r3, [pc, #384]	; (800a190 <tcp_process+0x7d8>)
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	f003 0320 	and.w	r3, r3, #32
 800a014:	2b00      	cmp	r3, #0
 800a016:	f000 80a9 	beq.w	800a16c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	8b5b      	ldrh	r3, [r3, #26]
 800a01e:	f043 0302 	orr.w	r3, r3, #2
 800a022:	b29a      	uxth	r2, r3
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f7fe fd3b 	bl	8008aa4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a02e:	4b59      	ldr	r3, [pc, #356]	; (800a194 <tcp_process+0x7dc>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	429a      	cmp	r2, r3
 800a036:	d105      	bne.n	800a044 <tcp_process+0x68c>
 800a038:	4b56      	ldr	r3, [pc, #344]	; (800a194 <tcp_process+0x7dc>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	68db      	ldr	r3, [r3, #12]
 800a03e:	4a55      	ldr	r2, [pc, #340]	; (800a194 <tcp_process+0x7dc>)
 800a040:	6013      	str	r3, [r2, #0]
 800a042:	e013      	b.n	800a06c <tcp_process+0x6b4>
 800a044:	4b53      	ldr	r3, [pc, #332]	; (800a194 <tcp_process+0x7dc>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	613b      	str	r3, [r7, #16]
 800a04a:	e00c      	b.n	800a066 <tcp_process+0x6ae>
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	68db      	ldr	r3, [r3, #12]
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	429a      	cmp	r2, r3
 800a054:	d104      	bne.n	800a060 <tcp_process+0x6a8>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	68da      	ldr	r2, [r3, #12]
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	60da      	str	r2, [r3, #12]
 800a05e:	e005      	b.n	800a06c <tcp_process+0x6b4>
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	68db      	ldr	r3, [r3, #12]
 800a064:	613b      	str	r3, [r7, #16]
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d1ef      	bne.n	800a04c <tcp_process+0x694>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	60da      	str	r2, [r3, #12]
 800a072:	4b43      	ldr	r3, [pc, #268]	; (800a180 <tcp_process+0x7c8>)
 800a074:	2201      	movs	r2, #1
 800a076:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	220a      	movs	r2, #10
 800a07c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a07e:	4b41      	ldr	r3, [pc, #260]	; (800a184 <tcp_process+0x7cc>)
 800a080:	681a      	ldr	r2, [r3, #0]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	60da      	str	r2, [r3, #12]
 800a086:	4a3f      	ldr	r2, [pc, #252]	; (800a184 <tcp_process+0x7cc>)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6013      	str	r3, [r2, #0]
 800a08c:	f003 f8e8 	bl	800d260 <tcp_timer_needed>
      }
      break;
 800a090:	e06c      	b.n	800a16c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 f984 	bl	800a3a0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a098:	4b3b      	ldr	r3, [pc, #236]	; (800a188 <tcp_process+0x7d0>)
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	f003 0310 	and.w	r3, r3, #16
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d065      	beq.n	800a170 <tcp_process+0x7b8>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a0a8:	4b38      	ldr	r3, [pc, #224]	; (800a18c <tcp_process+0x7d4>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d15f      	bne.n	800a170 <tcp_process+0x7b8>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d15b      	bne.n	800a170 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f7fe fcf3 	bl	8008aa4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a0be:	4b35      	ldr	r3, [pc, #212]	; (800a194 <tcp_process+0x7dc>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d105      	bne.n	800a0d4 <tcp_process+0x71c>
 800a0c8:	4b32      	ldr	r3, [pc, #200]	; (800a194 <tcp_process+0x7dc>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	4a31      	ldr	r2, [pc, #196]	; (800a194 <tcp_process+0x7dc>)
 800a0d0:	6013      	str	r3, [r2, #0]
 800a0d2:	e013      	b.n	800a0fc <tcp_process+0x744>
 800a0d4:	4b2f      	ldr	r3, [pc, #188]	; (800a194 <tcp_process+0x7dc>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	60fb      	str	r3, [r7, #12]
 800a0da:	e00c      	b.n	800a0f6 <tcp_process+0x73e>
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	68db      	ldr	r3, [r3, #12]
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d104      	bne.n	800a0f0 <tcp_process+0x738>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	68da      	ldr	r2, [r3, #12]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	60da      	str	r2, [r3, #12]
 800a0ee:	e005      	b.n	800a0fc <tcp_process+0x744>
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	60fb      	str	r3, [r7, #12]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d1ef      	bne.n	800a0dc <tcp_process+0x724>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	60da      	str	r2, [r3, #12]
 800a102:	4b1f      	ldr	r3, [pc, #124]	; (800a180 <tcp_process+0x7c8>)
 800a104:	2201      	movs	r2, #1
 800a106:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	220a      	movs	r2, #10
 800a10c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a10e:	4b1d      	ldr	r3, [pc, #116]	; (800a184 <tcp_process+0x7cc>)
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	60da      	str	r2, [r3, #12]
 800a116:	4a1b      	ldr	r2, [pc, #108]	; (800a184 <tcp_process+0x7cc>)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6013      	str	r3, [r2, #0]
 800a11c:	f003 f8a0 	bl	800d260 <tcp_timer_needed>
      }
      break;
 800a120:	e026      	b.n	800a170 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 f93c 	bl	800a3a0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a128:	4b17      	ldr	r3, [pc, #92]	; (800a188 <tcp_process+0x7d0>)
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	f003 0310 	and.w	r3, r3, #16
 800a130:	2b00      	cmp	r3, #0
 800a132:	d01f      	beq.n	800a174 <tcp_process+0x7bc>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a138:	4b14      	ldr	r3, [pc, #80]	; (800a18c <tcp_process+0x7d4>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d119      	bne.n	800a174 <tcp_process+0x7bc>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a144:	2b00      	cmp	r3, #0
 800a146:	d115      	bne.n	800a174 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800a148:	4b11      	ldr	r3, [pc, #68]	; (800a190 <tcp_process+0x7d8>)
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	f043 0310 	orr.w	r3, r3, #16
 800a150:	b2da      	uxtb	r2, r3
 800a152:	4b0f      	ldr	r3, [pc, #60]	; (800a190 <tcp_process+0x7d8>)
 800a154:	701a      	strb	r2, [r3, #0]
      }
      break;
 800a156:	e00d      	b.n	800a174 <tcp_process+0x7bc>
    default:
      break;
 800a158:	bf00      	nop
 800a15a:	e00c      	b.n	800a176 <tcp_process+0x7be>
      break;
 800a15c:	bf00      	nop
 800a15e:	e00a      	b.n	800a176 <tcp_process+0x7be>
      break;
 800a160:	bf00      	nop
 800a162:	e008      	b.n	800a176 <tcp_process+0x7be>
      break;
 800a164:	bf00      	nop
 800a166:	e006      	b.n	800a176 <tcp_process+0x7be>
      break;
 800a168:	bf00      	nop
 800a16a:	e004      	b.n	800a176 <tcp_process+0x7be>
      break;
 800a16c:	bf00      	nop
 800a16e:	e002      	b.n	800a176 <tcp_process+0x7be>
      break;
 800a170:	bf00      	nop
 800a172:	e000      	b.n	800a176 <tcp_process+0x7be>
      break;
 800a174:	bf00      	nop
  }
  return ERR_OK;
 800a176:	2300      	movs	r3, #0
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3724      	adds	r7, #36	; 0x24
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd90      	pop	{r4, r7, pc}
 800a180:	20006d48 	.word	0x20006d48
 800a184:	20006d5c 	.word	0x20006d5c
 800a188:	20000584 	.word	0x20000584
 800a18c:	2000057c 	.word	0x2000057c
 800a190:	20000585 	.word	0x20000585
 800a194:	20006d4c 	.word	0x20006d4c

0800a198 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800a198:	b590      	push	{r4, r7, lr}
 800a19a:	b085      	sub	sp, #20
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d106      	bne.n	800a1b6 <tcp_oos_insert_segment+0x1e>
 800a1a8:	4b3b      	ldr	r3, [pc, #236]	; (800a298 <tcp_oos_insert_segment+0x100>)
 800a1aa:	f240 421f 	movw	r2, #1055	; 0x41f
 800a1ae:	493b      	ldr	r1, [pc, #236]	; (800a29c <tcp_oos_insert_segment+0x104>)
 800a1b0:	483b      	ldr	r0, [pc, #236]	; (800a2a0 <tcp_oos_insert_segment+0x108>)
 800a1b2:	f005 fe7f 	bl	800feb4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	68db      	ldr	r3, [r3, #12]
 800a1ba:	899b      	ldrh	r3, [r3, #12]
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7fb f8fc 	bl	80053bc <lwip_htons>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	f003 0301 	and.w	r3, r3, #1
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d028      	beq.n	800a222 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800a1d0:	6838      	ldr	r0, [r7, #0]
 800a1d2:	f7fe f979 	bl	80084c8 <tcp_segs_free>
    next = NULL;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	603b      	str	r3, [r7, #0]
 800a1da:	e056      	b.n	800a28a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	68db      	ldr	r3, [r3, #12]
 800a1e0:	899b      	ldrh	r3, [r3, #12]
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f7fb f8e9 	bl	80053bc <lwip_htons>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	f003 0301 	and.w	r3, r3, #1
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00d      	beq.n	800a212 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	68db      	ldr	r3, [r3, #12]
 800a1fa:	899b      	ldrh	r3, [r3, #12]
 800a1fc:	b29c      	uxth	r4, r3
 800a1fe:	2001      	movs	r0, #1
 800a200:	f7fb f8dc 	bl	80053bc <lwip_htons>
 800a204:	4603      	mov	r3, r0
 800a206:	461a      	mov	r2, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	68db      	ldr	r3, [r3, #12]
 800a20c:	4322      	orrs	r2, r4
 800a20e:	b292      	uxth	r2, r2
 800a210:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800a21c:	68f8      	ldr	r0, [r7, #12]
 800a21e:	f7fe f968 	bl	80084f2 <tcp_seg_free>
    while (next &&
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d00e      	beq.n	800a246 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	891b      	ldrh	r3, [r3, #8]
 800a22c:	461a      	mov	r2, r3
 800a22e:	4b1d      	ldr	r3, [pc, #116]	; (800a2a4 <tcp_oos_insert_segment+0x10c>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	441a      	add	r2, r3
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	68db      	ldr	r3, [r3, #12]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	6839      	ldr	r1, [r7, #0]
 800a23c:	8909      	ldrh	r1, [r1, #8]
 800a23e:	440b      	add	r3, r1
 800a240:	1ad3      	subs	r3, r2, r3
    while (next &&
 800a242:	2b00      	cmp	r3, #0
 800a244:	daca      	bge.n	800a1dc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d01e      	beq.n	800a28a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	891b      	ldrh	r3, [r3, #8]
 800a250:	461a      	mov	r2, r3
 800a252:	4b14      	ldr	r3, [pc, #80]	; (800a2a4 <tcp_oos_insert_segment+0x10c>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	441a      	add	r2, r3
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800a260:	2b00      	cmp	r3, #0
 800a262:	dd12      	ble.n	800a28a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	b29a      	uxth	r2, r3
 800a26c:	4b0d      	ldr	r3, [pc, #52]	; (800a2a4 <tcp_oos_insert_segment+0x10c>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	b29b      	uxth	r3, r3
 800a272:	1ad3      	subs	r3, r2, r3
 800a274:	b29a      	uxth	r2, r3
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	685a      	ldr	r2, [r3, #4]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	891b      	ldrh	r3, [r3, #8]
 800a282:	4619      	mov	r1, r3
 800a284:	4610      	mov	r0, r2
 800a286:	f7fc fa31 	bl	80066ec <pbuf_realloc>
    }
  }
  cseg->next = next;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	683a      	ldr	r2, [r7, #0]
 800a28e:	601a      	str	r2, [r3, #0]
}
 800a290:	bf00      	nop
 800a292:	3714      	adds	r7, #20
 800a294:	46bd      	mov	sp, r7
 800a296:	bd90      	pop	{r4, r7, pc}
 800a298:	08012a78 	.word	0x08012a78
 800a29c:	08012d38 	.word	0x08012d38
 800a2a0:	08012ac4 	.word	0x08012ac4
 800a2a4:	20000578 	.word	0x20000578

0800a2a8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800a2a8:	b5b0      	push	{r4, r5, r7, lr}
 800a2aa:	b086      	sub	sp, #24
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	60f8      	str	r0, [r7, #12]
 800a2b0:	60b9      	str	r1, [r7, #8]
 800a2b2:	607a      	str	r2, [r7, #4]
 800a2b4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800a2b6:	e03e      	b.n	800a336 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7fc fc1e 	bl	8006b08 <pbuf_clen>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a2d6:	8a7a      	ldrh	r2, [r7, #18]
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d906      	bls.n	800a2ea <tcp_free_acked_segments+0x42>
 800a2dc:	4b2a      	ldr	r3, [pc, #168]	; (800a388 <tcp_free_acked_segments+0xe0>)
 800a2de:	f240 4257 	movw	r2, #1111	; 0x457
 800a2e2:	492a      	ldr	r1, [pc, #168]	; (800a38c <tcp_free_acked_segments+0xe4>)
 800a2e4:	482a      	ldr	r0, [pc, #168]	; (800a390 <tcp_free_acked_segments+0xe8>)
 800a2e6:	f005 fde5 	bl	800feb4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800a2f0:	8a7b      	ldrh	r3, [r7, #18]
 800a2f2:	1ad3      	subs	r3, r2, r3
 800a2f4:	b29a      	uxth	r2, r3
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	891a      	ldrh	r2, [r3, #8]
 800a300:	4b24      	ldr	r3, [pc, #144]	; (800a394 <tcp_free_acked_segments+0xec>)
 800a302:	881b      	ldrh	r3, [r3, #0]
 800a304:	4413      	add	r3, r2
 800a306:	b29a      	uxth	r2, r3
 800a308:	4b22      	ldr	r3, [pc, #136]	; (800a394 <tcp_free_acked_segments+0xec>)
 800a30a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800a30c:	6978      	ldr	r0, [r7, #20]
 800a30e:	f7fe f8f0 	bl	80084f2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d00c      	beq.n	800a336 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d109      	bne.n	800a336 <tcp_free_acked_segments+0x8e>
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d106      	bne.n	800a336 <tcp_free_acked_segments+0x8e>
 800a328:	4b17      	ldr	r3, [pc, #92]	; (800a388 <tcp_free_acked_segments+0xe0>)
 800a32a:	f240 4261 	movw	r2, #1121	; 0x461
 800a32e:	491a      	ldr	r1, [pc, #104]	; (800a398 <tcp_free_acked_segments+0xf0>)
 800a330:	4817      	ldr	r0, [pc, #92]	; (800a390 <tcp_free_acked_segments+0xe8>)
 800a332:	f005 fdbf 	bl	800feb4 <iprintf>
  while (seg_list != NULL &&
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d020      	beq.n	800a37e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	4618      	mov	r0, r3
 800a344:	f7fb f84f 	bl	80053e6 <lwip_htonl>
 800a348:	4604      	mov	r4, r0
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	891b      	ldrh	r3, [r3, #8]
 800a34e:	461d      	mov	r5, r3
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	68db      	ldr	r3, [r3, #12]
 800a354:	899b      	ldrh	r3, [r3, #12]
 800a356:	b29b      	uxth	r3, r3
 800a358:	4618      	mov	r0, r3
 800a35a:	f7fb f82f 	bl	80053bc <lwip_htons>
 800a35e:	4603      	mov	r3, r0
 800a360:	b2db      	uxtb	r3, r3
 800a362:	f003 0303 	and.w	r3, r3, #3
 800a366:	2b00      	cmp	r3, #0
 800a368:	d001      	beq.n	800a36e <tcp_free_acked_segments+0xc6>
 800a36a:	2301      	movs	r3, #1
 800a36c:	e000      	b.n	800a370 <tcp_free_acked_segments+0xc8>
 800a36e:	2300      	movs	r3, #0
 800a370:	442b      	add	r3, r5
 800a372:	18e2      	adds	r2, r4, r3
 800a374:	4b09      	ldr	r3, [pc, #36]	; (800a39c <tcp_free_acked_segments+0xf4>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	dd9c      	ble.n	800a2b8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800a37e:	68bb      	ldr	r3, [r7, #8]
}
 800a380:	4618      	mov	r0, r3
 800a382:	3718      	adds	r7, #24
 800a384:	46bd      	mov	sp, r7
 800a386:	bdb0      	pop	{r4, r5, r7, pc}
 800a388:	08012a78 	.word	0x08012a78
 800a38c:	08012d60 	.word	0x08012d60
 800a390:	08012ac4 	.word	0x08012ac4
 800a394:	20000580 	.word	0x20000580
 800a398:	08012d88 	.word	0x08012d88
 800a39c:	2000057c 	.word	0x2000057c

0800a3a0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800a3a0:	b5b0      	push	{r4, r5, r7, lr}
 800a3a2:	b094      	sub	sp, #80	; 0x50
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d106      	bne.n	800a3c0 <tcp_receive+0x20>
 800a3b2:	4ba6      	ldr	r3, [pc, #664]	; (800a64c <tcp_receive+0x2ac>)
 800a3b4:	f240 427b 	movw	r2, #1147	; 0x47b
 800a3b8:	49a5      	ldr	r1, [pc, #660]	; (800a650 <tcp_receive+0x2b0>)
 800a3ba:	48a6      	ldr	r0, [pc, #664]	; (800a654 <tcp_receive+0x2b4>)
 800a3bc:	f005 fd7a 	bl	800feb4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	7d1b      	ldrb	r3, [r3, #20]
 800a3c4:	2b03      	cmp	r3, #3
 800a3c6:	d806      	bhi.n	800a3d6 <tcp_receive+0x36>
 800a3c8:	4ba0      	ldr	r3, [pc, #640]	; (800a64c <tcp_receive+0x2ac>)
 800a3ca:	f240 427c 	movw	r2, #1148	; 0x47c
 800a3ce:	49a2      	ldr	r1, [pc, #648]	; (800a658 <tcp_receive+0x2b8>)
 800a3d0:	48a0      	ldr	r0, [pc, #640]	; (800a654 <tcp_receive+0x2b4>)
 800a3d2:	f005 fd6f 	bl	800feb4 <iprintf>

  if (flags & TCP_ACK) {
 800a3d6:	4ba1      	ldr	r3, [pc, #644]	; (800a65c <tcp_receive+0x2bc>)
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	f003 0310 	and.w	r3, r3, #16
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	f000 8263 	beq.w	800a8aa <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3f0:	4413      	add	r3, r2
 800a3f2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a3f8:	4b99      	ldr	r3, [pc, #612]	; (800a660 <tcp_receive+0x2c0>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	1ad3      	subs	r3, r2, r3
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	db1b      	blt.n	800a43a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a406:	4b96      	ldr	r3, [pc, #600]	; (800a660 <tcp_receive+0x2c0>)
 800a408:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d106      	bne.n	800a41c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a412:	4b94      	ldr	r3, [pc, #592]	; (800a664 <tcp_receive+0x2c4>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	1ad3      	subs	r3, r2, r3
 800a418:	2b00      	cmp	r3, #0
 800a41a:	db0e      	blt.n	800a43a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a420:	4b90      	ldr	r3, [pc, #576]	; (800a664 <tcp_receive+0x2c4>)
 800a422:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a424:	429a      	cmp	r2, r3
 800a426:	d125      	bne.n	800a474 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a428:	4b8f      	ldr	r3, [pc, #572]	; (800a668 <tcp_receive+0x2c8>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	89db      	ldrh	r3, [r3, #14]
 800a42e:	b29a      	uxth	r2, r3
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a436:	429a      	cmp	r2, r3
 800a438:	d91c      	bls.n	800a474 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a43a:	4b8b      	ldr	r3, [pc, #556]	; (800a668 <tcp_receive+0x2c8>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	89db      	ldrh	r3, [r3, #14]
 800a440:	b29a      	uxth	r2, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a454:	429a      	cmp	r2, r3
 800a456:	d205      	bcs.n	800a464 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800a464:	4b7e      	ldr	r3, [pc, #504]	; (800a660 <tcp_receive+0x2c0>)
 800a466:	681a      	ldr	r2, [r3, #0]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800a46c:	4b7d      	ldr	r3, [pc, #500]	; (800a664 <tcp_receive+0x2c4>)
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a474:	4b7b      	ldr	r3, [pc, #492]	; (800a664 <tcp_receive+0x2c4>)
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a47c:	1ad3      	subs	r3, r2, r3
 800a47e:	2b00      	cmp	r3, #0
 800a480:	dc58      	bgt.n	800a534 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800a482:	4b7a      	ldr	r3, [pc, #488]	; (800a66c <tcp_receive+0x2cc>)
 800a484:	881b      	ldrh	r3, [r3, #0]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d14b      	bne.n	800a522 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800a494:	4413      	add	r3, r2
 800a496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a498:	429a      	cmp	r2, r3
 800a49a:	d142      	bne.n	800a522 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	db3d      	blt.n	800a522 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4aa:	4b6e      	ldr	r3, [pc, #440]	; (800a664 <tcp_receive+0x2c4>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d137      	bne.n	800a522 <tcp_receive+0x182>
              found_dupack = 1;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a4bc:	2bff      	cmp	r3, #255	; 0xff
 800a4be:	d007      	beq.n	800a4d0 <tcp_receive+0x130>
                ++pcb->dupacks;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	b2da      	uxtb	r2, r3
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a4d6:	2b03      	cmp	r3, #3
 800a4d8:	d91b      	bls.n	800a512 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a4e4:	4413      	add	r3, r2
 800a4e6:	b29a      	uxth	r2, r3
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d30a      	bcc.n	800a508 <tcp_receive+0x168>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a4fc:	4413      	add	r3, r2
 800a4fe:	b29a      	uxth	r2, r3
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a506:	e004      	b.n	800a512 <tcp_receive+0x172>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a50e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a518:	2b02      	cmp	r3, #2
 800a51a:	d902      	bls.n	800a522 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f002 fb41 	bl	800cba4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800a522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a524:	2b00      	cmp	r3, #0
 800a526:	f040 8160 	bne.w	800a7ea <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a532:	e15a      	b.n	800a7ea <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a534:	4b4b      	ldr	r3, [pc, #300]	; (800a664 <tcp_receive+0x2c4>)
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a53c:	1ad3      	subs	r3, r2, r3
 800a53e:	3b01      	subs	r3, #1
 800a540:	2b00      	cmp	r3, #0
 800a542:	f2c0 814d 	blt.w	800a7e0 <tcp_receive+0x440>
 800a546:	4b47      	ldr	r3, [pc, #284]	; (800a664 <tcp_receive+0x2c4>)
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a54e:	1ad3      	subs	r3, r2, r3
 800a550:	2b00      	cmp	r3, #0
 800a552:	f300 8145 	bgt.w	800a7e0 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	8b5b      	ldrh	r3, [r3, #26]
 800a55a:	f003 0304 	and.w	r3, r3, #4
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d010      	beq.n	800a584 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	8b5b      	ldrh	r3, [r3, #26]
 800a566:	f023 0304 	bic.w	r3, r3, #4
 800a56a:	b29a      	uxth	r2, r3
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2200      	movs	r2, #0
 800a588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a592:	10db      	asrs	r3, r3, #3
 800a594:	b21b      	sxth	r3, r3
 800a596:	b29a      	uxth	r2, r3
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a59e:	b29b      	uxth	r3, r3
 800a5a0:	4413      	add	r3, r2
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	b21a      	sxth	r2, r3
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a5ac:	4b2d      	ldr	r3, [pc, #180]	; (800a664 <tcp_receive+0x2c4>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	b29a      	uxth	r2, r3
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	1ad3      	subs	r3, r2, r3
 800a5ba:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800a5c4:	4b27      	ldr	r3, [pc, #156]	; (800a664 <tcp_receive+0x2c4>)
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	7d1b      	ldrb	r3, [r3, #20]
 800a5d0:	2b03      	cmp	r3, #3
 800a5d2:	f240 8096 	bls.w	800a702 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d244      	bcs.n	800a670 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	8b5b      	ldrh	r3, [r3, #26]
 800a5ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d001      	beq.n	800a5f6 <tcp_receive+0x256>
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e000      	b.n	800a5f8 <tcp_receive+0x258>
 800a5f6:	2302      	movs	r3, #2
 800a5f8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a5fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a600:	b29a      	uxth	r2, r3
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a606:	fb12 f303 	smulbb	r3, r2, r3
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a60e:	4293      	cmp	r3, r2
 800a610:	bf28      	it	cs
 800a612:	4613      	movcs	r3, r2
 800a614:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a61c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a61e:	4413      	add	r3, r2
 800a620:	b29a      	uxth	r2, r3
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a628:	429a      	cmp	r2, r3
 800a62a:	d309      	bcc.n	800a640 <tcp_receive+0x2a0>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a632:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a634:	4413      	add	r3, r2
 800a636:	b29a      	uxth	r2, r3
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a63e:	e060      	b.n	800a702 <tcp_receive+0x362>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a646:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a64a:	e05a      	b.n	800a702 <tcp_receive+0x362>
 800a64c:	08012a78 	.word	0x08012a78
 800a650:	08012da8 	.word	0x08012da8
 800a654:	08012ac4 	.word	0x08012ac4
 800a658:	08012dc4 	.word	0x08012dc4
 800a65c:	20000584 	.word	0x20000584
 800a660:	20000578 	.word	0x20000578
 800a664:	2000057c 	.word	0x2000057c
 800a668:	20000568 	.word	0x20000568
 800a66c:	20000582 	.word	0x20000582
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a676:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a678:	4413      	add	r3, r2
 800a67a:	b29a      	uxth	r2, r3
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a682:	429a      	cmp	r2, r3
 800a684:	d309      	bcc.n	800a69a <tcp_receive+0x2fa>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a68c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a68e:	4413      	add	r3, r2
 800a690:	b29a      	uxth	r2, r3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a698:	e004      	b.n	800a6a4 <tcp_receive+0x304>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a6a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d326      	bcc.n	800a702 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a6c0:	1ad3      	subs	r3, r2, r3
 800a6c2:	b29a      	uxth	r2, r3
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a6d4:	4413      	add	r3, r2
 800a6d6:	b29a      	uxth	r2, r3
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d30a      	bcc.n	800a6f8 <tcp_receive+0x358>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a6ec:	4413      	add	r3, r2
 800a6ee:	b29a      	uxth	r2, r3
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a6f6:	e004      	b.n	800a702 <tcp_receive+0x362>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a6fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a70a:	4a98      	ldr	r2, [pc, #608]	; (800a96c <tcp_receive+0x5cc>)
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f7ff fdcb 	bl	800a2a8 <tcp_free_acked_segments>
 800a712:	4602      	mov	r2, r0
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a720:	4a93      	ldr	r2, [pc, #588]	; (800a970 <tcp_receive+0x5d0>)
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f7ff fdc0 	bl	800a2a8 <tcp_free_acked_segments>
 800a728:	4602      	mov	r2, r0
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a732:	2b00      	cmp	r3, #0
 800a734:	d104      	bne.n	800a740 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a73c:	861a      	strh	r2, [r3, #48]	; 0x30
 800a73e:	e002      	b.n	800a746 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2200      	movs	r2, #0
 800a744:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2200      	movs	r2, #0
 800a74a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a750:	2b00      	cmp	r3, #0
 800a752:	d103      	bne.n	800a75c <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2200      	movs	r2, #0
 800a758:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a762:	4b84      	ldr	r3, [pc, #528]	; (800a974 <tcp_receive+0x5d4>)
 800a764:	881b      	ldrh	r3, [r3, #0]
 800a766:	4413      	add	r3, r2
 800a768:	b29a      	uxth	r2, r3
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	8b5b      	ldrh	r3, [r3, #26]
 800a774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d035      	beq.n	800a7e8 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a780:	2b00      	cmp	r3, #0
 800a782:	d118      	bne.n	800a7b6 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d00c      	beq.n	800a7a6 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	4618      	mov	r0, r3
 800a79a:	f7fa fe24 	bl	80053e6 <lwip_htonl>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	dc20      	bgt.n	800a7e8 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	8b5b      	ldrh	r3, [r3, #26]
 800a7aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a7ae:	b29a      	uxth	r2, r3
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a7b4:	e018      	b.n	800a7e8 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7be:	68db      	ldr	r3, [r3, #12]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7fa fe0f 	bl	80053e6 <lwip_htonl>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	1ae3      	subs	r3, r4, r3
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	dc0b      	bgt.n	800a7e8 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	8b5b      	ldrh	r3, [r3, #26]
 800a7d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a7d8:	b29a      	uxth	r2, r3
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a7de:	e003      	b.n	800a7e8 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f002 fbcd 	bl	800cf80 <tcp_send_empty_ack>
 800a7e6:	e000      	b.n	800a7ea <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a7e8:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d05b      	beq.n	800a8aa <tcp_receive+0x50a>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7f6:	4b60      	ldr	r3, [pc, #384]	; (800a978 <tcp_receive+0x5d8>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	1ad3      	subs	r3, r2, r3
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	da54      	bge.n	800a8aa <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a800:	4b5e      	ldr	r3, [pc, #376]	; (800a97c <tcp_receive+0x5dc>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	b29a      	uxth	r2, r3
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	1ad3      	subs	r3, r2, r3
 800a80e:	b29b      	uxth	r3, r3
 800a810:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a814:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a81e:	10db      	asrs	r3, r3, #3
 800a820:	b21b      	sxth	r3, r3
 800a822:	b29b      	uxth	r3, r3
 800a824:	1ad3      	subs	r3, r2, r3
 800a826:	b29b      	uxth	r3, r3
 800a828:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a832:	b29a      	uxth	r2, r3
 800a834:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a838:	4413      	add	r3, r2
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	b21a      	sxth	r2, r3
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800a842:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a846:	2b00      	cmp	r3, #0
 800a848:	da05      	bge.n	800a856 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800a84a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a84e:	425b      	negs	r3, r3
 800a850:	b29b      	uxth	r3, r3
 800a852:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a856:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a860:	109b      	asrs	r3, r3, #2
 800a862:	b21b      	sxth	r3, r3
 800a864:	b29b      	uxth	r3, r3
 800a866:	1ad3      	subs	r3, r2, r3
 800a868:	b29b      	uxth	r3, r3
 800a86a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a874:	b29a      	uxth	r2, r3
 800a876:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a87a:	4413      	add	r3, r2
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	b21a      	sxth	r2, r3
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a88a:	10db      	asrs	r3, r3, #3
 800a88c:	b21b      	sxth	r3, r3
 800a88e:	b29a      	uxth	r2, r3
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a896:	b29b      	uxth	r3, r3
 800a898:	4413      	add	r3, r2
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	b21a      	sxth	r2, r3
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a8aa:	4b35      	ldr	r3, [pc, #212]	; (800a980 <tcp_receive+0x5e0>)
 800a8ac:	881b      	ldrh	r3, [r3, #0]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	f000 84e1 	beq.w	800b276 <tcp_receive+0xed6>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	7d1b      	ldrb	r3, [r3, #20]
 800a8b8:	2b06      	cmp	r3, #6
 800a8ba:	f200 84dc 	bhi.w	800b276 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8c2:	4b30      	ldr	r3, [pc, #192]	; (800a984 <tcp_receive+0x5e4>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	1ad3      	subs	r3, r2, r3
 800a8c8:	3b01      	subs	r3, #1
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	f2c0 808e 	blt.w	800a9ec <tcp_receive+0x64c>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8d4:	4b2a      	ldr	r3, [pc, #168]	; (800a980 <tcp_receive+0x5e0>)
 800a8d6:	881b      	ldrh	r3, [r3, #0]
 800a8d8:	4619      	mov	r1, r3
 800a8da:	4b2a      	ldr	r3, [pc, #168]	; (800a984 <tcp_receive+0x5e4>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	440b      	add	r3, r1
 800a8e0:	1ad3      	subs	r3, r2, r3
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	f300 8081 	bgt.w	800a9ec <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a8ea:	4b27      	ldr	r3, [pc, #156]	; (800a988 <tcp_receive+0x5e8>)
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8f4:	4b23      	ldr	r3, [pc, #140]	; (800a984 <tcp_receive+0x5e4>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	1ad3      	subs	r3, r2, r3
 800a8fa:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a8fc:	4b22      	ldr	r3, [pc, #136]	; (800a988 <tcp_receive+0x5e8>)
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d106      	bne.n	800a912 <tcp_receive+0x572>
 800a904:	4b21      	ldr	r3, [pc, #132]	; (800a98c <tcp_receive+0x5ec>)
 800a906:	f240 5294 	movw	r2, #1428	; 0x594
 800a90a:	4921      	ldr	r1, [pc, #132]	; (800a990 <tcp_receive+0x5f0>)
 800a90c:	4821      	ldr	r0, [pc, #132]	; (800a994 <tcp_receive+0x5f4>)
 800a90e:	f005 fad1 	bl	800feb4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a914:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a918:	4293      	cmp	r3, r2
 800a91a:	d906      	bls.n	800a92a <tcp_receive+0x58a>
 800a91c:	4b1b      	ldr	r3, [pc, #108]	; (800a98c <tcp_receive+0x5ec>)
 800a91e:	f240 5295 	movw	r2, #1429	; 0x595
 800a922:	491d      	ldr	r1, [pc, #116]	; (800a998 <tcp_receive+0x5f8>)
 800a924:	481b      	ldr	r0, [pc, #108]	; (800a994 <tcp_receive+0x5f4>)
 800a926:	f005 fac5 	bl	800feb4 <iprintf>
      off = (u16_t)off32;
 800a92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a930:	4b15      	ldr	r3, [pc, #84]	; (800a988 <tcp_receive+0x5e8>)
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	891b      	ldrh	r3, [r3, #8]
 800a936:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d906      	bls.n	800a94c <tcp_receive+0x5ac>
 800a93e:	4b13      	ldr	r3, [pc, #76]	; (800a98c <tcp_receive+0x5ec>)
 800a940:	f240 5297 	movw	r2, #1431	; 0x597
 800a944:	4915      	ldr	r1, [pc, #84]	; (800a99c <tcp_receive+0x5fc>)
 800a946:	4813      	ldr	r0, [pc, #76]	; (800a994 <tcp_receive+0x5f4>)
 800a948:	f005 fab4 	bl	800feb4 <iprintf>
      inseg.len -= off;
 800a94c:	4b0e      	ldr	r3, [pc, #56]	; (800a988 <tcp_receive+0x5e8>)
 800a94e:	891a      	ldrh	r2, [r3, #8]
 800a950:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a954:	1ad3      	subs	r3, r2, r3
 800a956:	b29a      	uxth	r2, r3
 800a958:	4b0b      	ldr	r3, [pc, #44]	; (800a988 <tcp_receive+0x5e8>)
 800a95a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a95c:	4b0a      	ldr	r3, [pc, #40]	; (800a988 <tcp_receive+0x5e8>)
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	891a      	ldrh	r2, [r3, #8]
 800a962:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a966:	1ad3      	subs	r3, r2, r3
 800a968:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800a96a:	e029      	b.n	800a9c0 <tcp_receive+0x620>
 800a96c:	08012de0 	.word	0x08012de0
 800a970:	08012de8 	.word	0x08012de8
 800a974:	20000580 	.word	0x20000580
 800a978:	2000057c 	.word	0x2000057c
 800a97c:	20006d50 	.word	0x20006d50
 800a980:	20000582 	.word	0x20000582
 800a984:	20000578 	.word	0x20000578
 800a988:	20000558 	.word	0x20000558
 800a98c:	08012a78 	.word	0x08012a78
 800a990:	08012df0 	.word	0x08012df0
 800a994:	08012ac4 	.word	0x08012ac4
 800a998:	08012e00 	.word	0x08012e00
 800a99c:	08012e10 	.word	0x08012e10
        off -= p->len;
 800a9a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9a2:	895b      	ldrh	r3, [r3, #10]
 800a9a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a9a8:	1ad3      	subs	r3, r2, r3
 800a9aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a9ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9b0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a9b2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a9b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a9ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800a9c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9c2:	895b      	ldrh	r3, [r3, #10]
 800a9c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d8e9      	bhi.n	800a9a0 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a9cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a9d4:	f7fb ff8a 	bl	80068ec <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9dc:	4a91      	ldr	r2, [pc, #580]	; (800ac24 <tcp_receive+0x884>)
 800a9de:	6013      	str	r3, [r2, #0]
 800a9e0:	4b91      	ldr	r3, [pc, #580]	; (800ac28 <tcp_receive+0x888>)
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	4a8f      	ldr	r2, [pc, #572]	; (800ac24 <tcp_receive+0x884>)
 800a9e6:	6812      	ldr	r2, [r2, #0]
 800a9e8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a9ea:	e00d      	b.n	800aa08 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a9ec:	4b8d      	ldr	r3, [pc, #564]	; (800ac24 <tcp_receive+0x884>)
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f4:	1ad3      	subs	r3, r2, r3
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	da06      	bge.n	800aa08 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	8b5b      	ldrh	r3, [r3, #26]
 800a9fe:	f043 0302 	orr.w	r3, r3, #2
 800aa02:	b29a      	uxth	r2, r3
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800aa08:	4b86      	ldr	r3, [pc, #536]	; (800ac24 <tcp_receive+0x884>)
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa10:	1ad3      	subs	r3, r2, r3
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	f2c0 842a 	blt.w	800b26c <tcp_receive+0xecc>
 800aa18:	4b82      	ldr	r3, [pc, #520]	; (800ac24 <tcp_receive+0x884>)
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa20:	6879      	ldr	r1, [r7, #4]
 800aa22:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800aa24:	440b      	add	r3, r1
 800aa26:	1ad3      	subs	r3, r2, r3
 800aa28:	3301      	adds	r3, #1
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	f300 841e 	bgt.w	800b26c <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa34:	4b7b      	ldr	r3, [pc, #492]	; (800ac24 <tcp_receive+0x884>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	f040 829a 	bne.w	800af72 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800aa3e:	4b7a      	ldr	r3, [pc, #488]	; (800ac28 <tcp_receive+0x888>)
 800aa40:	891c      	ldrh	r4, [r3, #8]
 800aa42:	4b79      	ldr	r3, [pc, #484]	; (800ac28 <tcp_receive+0x888>)
 800aa44:	68db      	ldr	r3, [r3, #12]
 800aa46:	899b      	ldrh	r3, [r3, #12]
 800aa48:	b29b      	uxth	r3, r3
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7fa fcb6 	bl	80053bc <lwip_htons>
 800aa50:	4603      	mov	r3, r0
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	f003 0303 	and.w	r3, r3, #3
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d001      	beq.n	800aa60 <tcp_receive+0x6c0>
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e000      	b.n	800aa62 <tcp_receive+0x6c2>
 800aa60:	2300      	movs	r3, #0
 800aa62:	4423      	add	r3, r4
 800aa64:	b29a      	uxth	r2, r3
 800aa66:	4b71      	ldr	r3, [pc, #452]	; (800ac2c <tcp_receive+0x88c>)
 800aa68:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aa6e:	4b6f      	ldr	r3, [pc, #444]	; (800ac2c <tcp_receive+0x88c>)
 800aa70:	881b      	ldrh	r3, [r3, #0]
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d275      	bcs.n	800ab62 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800aa76:	4b6c      	ldr	r3, [pc, #432]	; (800ac28 <tcp_receive+0x888>)
 800aa78:	68db      	ldr	r3, [r3, #12]
 800aa7a:	899b      	ldrh	r3, [r3, #12]
 800aa7c:	b29b      	uxth	r3, r3
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7fa fc9c 	bl	80053bc <lwip_htons>
 800aa84:	4603      	mov	r3, r0
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	f003 0301 	and.w	r3, r3, #1
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d01f      	beq.n	800aad0 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800aa90:	4b65      	ldr	r3, [pc, #404]	; (800ac28 <tcp_receive+0x888>)
 800aa92:	68db      	ldr	r3, [r3, #12]
 800aa94:	899b      	ldrh	r3, [r3, #12]
 800aa96:	b29b      	uxth	r3, r3
 800aa98:	b21b      	sxth	r3, r3
 800aa9a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800aa9e:	b21c      	sxth	r4, r3
 800aaa0:	4b61      	ldr	r3, [pc, #388]	; (800ac28 <tcp_receive+0x888>)
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	899b      	ldrh	r3, [r3, #12]
 800aaa6:	b29b      	uxth	r3, r3
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f7fa fc87 	bl	80053bc <lwip_htons>
 800aaae:	4603      	mov	r3, r0
 800aab0:	b2db      	uxtb	r3, r3
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	4618      	mov	r0, r3
 800aabc:	f7fa fc7e 	bl	80053bc <lwip_htons>
 800aac0:	4603      	mov	r3, r0
 800aac2:	b21b      	sxth	r3, r3
 800aac4:	4323      	orrs	r3, r4
 800aac6:	b21a      	sxth	r2, r3
 800aac8:	4b57      	ldr	r3, [pc, #348]	; (800ac28 <tcp_receive+0x888>)
 800aaca:	68db      	ldr	r3, [r3, #12]
 800aacc:	b292      	uxth	r2, r2
 800aace:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aad4:	4b54      	ldr	r3, [pc, #336]	; (800ac28 <tcp_receive+0x888>)
 800aad6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800aad8:	4b53      	ldr	r3, [pc, #332]	; (800ac28 <tcp_receive+0x888>)
 800aada:	68db      	ldr	r3, [r3, #12]
 800aadc:	899b      	ldrh	r3, [r3, #12]
 800aade:	b29b      	uxth	r3, r3
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7fa fc6b 	bl	80053bc <lwip_htons>
 800aae6:	4603      	mov	r3, r0
 800aae8:	b2db      	uxtb	r3, r3
 800aaea:	f003 0302 	and.w	r3, r3, #2
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d005      	beq.n	800aafe <tcp_receive+0x75e>
            inseg.len -= 1;
 800aaf2:	4b4d      	ldr	r3, [pc, #308]	; (800ac28 <tcp_receive+0x888>)
 800aaf4:	891b      	ldrh	r3, [r3, #8]
 800aaf6:	3b01      	subs	r3, #1
 800aaf8:	b29a      	uxth	r2, r3
 800aafa:	4b4b      	ldr	r3, [pc, #300]	; (800ac28 <tcp_receive+0x888>)
 800aafc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800aafe:	4b4a      	ldr	r3, [pc, #296]	; (800ac28 <tcp_receive+0x888>)
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	4a49      	ldr	r2, [pc, #292]	; (800ac28 <tcp_receive+0x888>)
 800ab04:	8912      	ldrh	r2, [r2, #8]
 800ab06:	4611      	mov	r1, r2
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f7fb fdef 	bl	80066ec <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ab0e:	4b46      	ldr	r3, [pc, #280]	; (800ac28 <tcp_receive+0x888>)
 800ab10:	891c      	ldrh	r4, [r3, #8]
 800ab12:	4b45      	ldr	r3, [pc, #276]	; (800ac28 <tcp_receive+0x888>)
 800ab14:	68db      	ldr	r3, [r3, #12]
 800ab16:	899b      	ldrh	r3, [r3, #12]
 800ab18:	b29b      	uxth	r3, r3
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7fa fc4e 	bl	80053bc <lwip_htons>
 800ab20:	4603      	mov	r3, r0
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	f003 0303 	and.w	r3, r3, #3
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d001      	beq.n	800ab30 <tcp_receive+0x790>
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	e000      	b.n	800ab32 <tcp_receive+0x792>
 800ab30:	2300      	movs	r3, #0
 800ab32:	4423      	add	r3, r4
 800ab34:	b29a      	uxth	r2, r3
 800ab36:	4b3d      	ldr	r3, [pc, #244]	; (800ac2c <tcp_receive+0x88c>)
 800ab38:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ab3a:	4b3c      	ldr	r3, [pc, #240]	; (800ac2c <tcp_receive+0x88c>)
 800ab3c:	881b      	ldrh	r3, [r3, #0]
 800ab3e:	461a      	mov	r2, r3
 800ab40:	4b38      	ldr	r3, [pc, #224]	; (800ac24 <tcp_receive+0x884>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	441a      	add	r2, r3
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab4a:	6879      	ldr	r1, [r7, #4]
 800ab4c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ab4e:	440b      	add	r3, r1
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d006      	beq.n	800ab62 <tcp_receive+0x7c2>
 800ab54:	4b36      	ldr	r3, [pc, #216]	; (800ac30 <tcp_receive+0x890>)
 800ab56:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800ab5a:	4936      	ldr	r1, [pc, #216]	; (800ac34 <tcp_receive+0x894>)
 800ab5c:	4836      	ldr	r0, [pc, #216]	; (800ac38 <tcp_receive+0x898>)
 800ab5e:	f005 f9a9 	bl	800feb4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	f000 80e7 	beq.w	800ad3a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ab6c:	4b2e      	ldr	r3, [pc, #184]	; (800ac28 <tcp_receive+0x888>)
 800ab6e:	68db      	ldr	r3, [r3, #12]
 800ab70:	899b      	ldrh	r3, [r3, #12]
 800ab72:	b29b      	uxth	r3, r3
 800ab74:	4618      	mov	r0, r3
 800ab76:	f7fa fc21 	bl	80053bc <lwip_htons>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	f003 0301 	and.w	r3, r3, #1
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d010      	beq.n	800aba8 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ab86:	e00a      	b.n	800ab9e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab8c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800ab98:	68f8      	ldr	r0, [r7, #12]
 800ab9a:	f7fd fcaa 	bl	80084f2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1f0      	bne.n	800ab88 <tcp_receive+0x7e8>
 800aba6:	e0c8      	b.n	800ad3a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abac:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800abae:	e052      	b.n	800ac56 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800abb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abb2:	68db      	ldr	r3, [r3, #12]
 800abb4:	899b      	ldrh	r3, [r3, #12]
 800abb6:	b29b      	uxth	r3, r3
 800abb8:	4618      	mov	r0, r3
 800abba:	f7fa fbff 	bl	80053bc <lwip_htons>
 800abbe:	4603      	mov	r3, r0
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	f003 0301 	and.w	r3, r3, #1
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d03d      	beq.n	800ac46 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800abca:	4b17      	ldr	r3, [pc, #92]	; (800ac28 <tcp_receive+0x888>)
 800abcc:	68db      	ldr	r3, [r3, #12]
 800abce:	899b      	ldrh	r3, [r3, #12]
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7fa fbf2 	bl	80053bc <lwip_htons>
 800abd8:	4603      	mov	r3, r0
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d130      	bne.n	800ac46 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800abe4:	4b10      	ldr	r3, [pc, #64]	; (800ac28 <tcp_receive+0x888>)
 800abe6:	68db      	ldr	r3, [r3, #12]
 800abe8:	899b      	ldrh	r3, [r3, #12]
 800abea:	b29c      	uxth	r4, r3
 800abec:	2001      	movs	r0, #1
 800abee:	f7fa fbe5 	bl	80053bc <lwip_htons>
 800abf2:	4603      	mov	r3, r0
 800abf4:	461a      	mov	r2, r3
 800abf6:	4b0c      	ldr	r3, [pc, #48]	; (800ac28 <tcp_receive+0x888>)
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	4322      	orrs	r2, r4
 800abfc:	b292      	uxth	r2, r2
 800abfe:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800ac00:	4b09      	ldr	r3, [pc, #36]	; (800ac28 <tcp_receive+0x888>)
 800ac02:	891c      	ldrh	r4, [r3, #8]
 800ac04:	4b08      	ldr	r3, [pc, #32]	; (800ac28 <tcp_receive+0x888>)
 800ac06:	68db      	ldr	r3, [r3, #12]
 800ac08:	899b      	ldrh	r3, [r3, #12]
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f7fa fbd5 	bl	80053bc <lwip_htons>
 800ac12:	4603      	mov	r3, r0
 800ac14:	b2db      	uxtb	r3, r3
 800ac16:	f003 0303 	and.w	r3, r3, #3
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d00e      	beq.n	800ac3c <tcp_receive+0x89c>
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e00d      	b.n	800ac3e <tcp_receive+0x89e>
 800ac22:	bf00      	nop
 800ac24:	20000578 	.word	0x20000578
 800ac28:	20000558 	.word	0x20000558
 800ac2c:	20000582 	.word	0x20000582
 800ac30:	08012a78 	.word	0x08012a78
 800ac34:	08012e20 	.word	0x08012e20
 800ac38:	08012ac4 	.word	0x08012ac4
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	4423      	add	r3, r4
 800ac40:	b29a      	uxth	r2, r3
 800ac42:	4b98      	ldr	r3, [pc, #608]	; (800aea4 <tcp_receive+0xb04>)
 800ac44:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800ac46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac48:	613b      	str	r3, [r7, #16]
              next = next->next;
 800ac4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800ac50:	6938      	ldr	r0, [r7, #16]
 800ac52:	f7fd fc4e 	bl	80084f2 <tcp_seg_free>
            while (next &&
 800ac56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d00e      	beq.n	800ac7a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ac5c:	4b91      	ldr	r3, [pc, #580]	; (800aea4 <tcp_receive+0xb04>)
 800ac5e:	881b      	ldrh	r3, [r3, #0]
 800ac60:	461a      	mov	r2, r3
 800ac62:	4b91      	ldr	r3, [pc, #580]	; (800aea8 <tcp_receive+0xb08>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	441a      	add	r2, r3
 800ac68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac6a:	68db      	ldr	r3, [r3, #12]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ac70:	8909      	ldrh	r1, [r1, #8]
 800ac72:	440b      	add	r3, r1
 800ac74:	1ad3      	subs	r3, r2, r3
            while (next &&
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	da9a      	bge.n	800abb0 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ac7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d059      	beq.n	800ad34 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800ac80:	4b88      	ldr	r3, [pc, #544]	; (800aea4 <tcp_receive+0xb04>)
 800ac82:	881b      	ldrh	r3, [r3, #0]
 800ac84:	461a      	mov	r2, r3
 800ac86:	4b88      	ldr	r3, [pc, #544]	; (800aea8 <tcp_receive+0xb08>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	441a      	add	r2, r3
 800ac8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac8e:	68db      	ldr	r3, [r3, #12]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	dd4d      	ble.n	800ad34 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ac98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac9a:	68db      	ldr	r3, [r3, #12]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	b29a      	uxth	r2, r3
 800aca0:	4b81      	ldr	r3, [pc, #516]	; (800aea8 <tcp_receive+0xb08>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	b29b      	uxth	r3, r3
 800aca6:	1ad3      	subs	r3, r2, r3
 800aca8:	b29a      	uxth	r2, r3
 800acaa:	4b80      	ldr	r3, [pc, #512]	; (800aeac <tcp_receive+0xb0c>)
 800acac:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800acae:	4b7f      	ldr	r3, [pc, #508]	; (800aeac <tcp_receive+0xb0c>)
 800acb0:	68db      	ldr	r3, [r3, #12]
 800acb2:	899b      	ldrh	r3, [r3, #12]
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7fa fb80 	bl	80053bc <lwip_htons>
 800acbc:	4603      	mov	r3, r0
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	f003 0302 	and.w	r3, r3, #2
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d005      	beq.n	800acd4 <tcp_receive+0x934>
                inseg.len -= 1;
 800acc8:	4b78      	ldr	r3, [pc, #480]	; (800aeac <tcp_receive+0xb0c>)
 800acca:	891b      	ldrh	r3, [r3, #8]
 800accc:	3b01      	subs	r3, #1
 800acce:	b29a      	uxth	r2, r3
 800acd0:	4b76      	ldr	r3, [pc, #472]	; (800aeac <tcp_receive+0xb0c>)
 800acd2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800acd4:	4b75      	ldr	r3, [pc, #468]	; (800aeac <tcp_receive+0xb0c>)
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	4a74      	ldr	r2, [pc, #464]	; (800aeac <tcp_receive+0xb0c>)
 800acda:	8912      	ldrh	r2, [r2, #8]
 800acdc:	4611      	mov	r1, r2
 800acde:	4618      	mov	r0, r3
 800ace0:	f7fb fd04 	bl	80066ec <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ace4:	4b71      	ldr	r3, [pc, #452]	; (800aeac <tcp_receive+0xb0c>)
 800ace6:	891c      	ldrh	r4, [r3, #8]
 800ace8:	4b70      	ldr	r3, [pc, #448]	; (800aeac <tcp_receive+0xb0c>)
 800acea:	68db      	ldr	r3, [r3, #12]
 800acec:	899b      	ldrh	r3, [r3, #12]
 800acee:	b29b      	uxth	r3, r3
 800acf0:	4618      	mov	r0, r3
 800acf2:	f7fa fb63 	bl	80053bc <lwip_htons>
 800acf6:	4603      	mov	r3, r0
 800acf8:	b2db      	uxtb	r3, r3
 800acfa:	f003 0303 	and.w	r3, r3, #3
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d001      	beq.n	800ad06 <tcp_receive+0x966>
 800ad02:	2301      	movs	r3, #1
 800ad04:	e000      	b.n	800ad08 <tcp_receive+0x968>
 800ad06:	2300      	movs	r3, #0
 800ad08:	4423      	add	r3, r4
 800ad0a:	b29a      	uxth	r2, r3
 800ad0c:	4b65      	ldr	r3, [pc, #404]	; (800aea4 <tcp_receive+0xb04>)
 800ad0e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ad10:	4b64      	ldr	r3, [pc, #400]	; (800aea4 <tcp_receive+0xb04>)
 800ad12:	881b      	ldrh	r3, [r3, #0]
 800ad14:	461a      	mov	r2, r3
 800ad16:	4b64      	ldr	r3, [pc, #400]	; (800aea8 <tcp_receive+0xb08>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	441a      	add	r2, r3
 800ad1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad1e:	68db      	ldr	r3, [r3, #12]
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d006      	beq.n	800ad34 <tcp_receive+0x994>
 800ad26:	4b62      	ldr	r3, [pc, #392]	; (800aeb0 <tcp_receive+0xb10>)
 800ad28:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800ad2c:	4961      	ldr	r1, [pc, #388]	; (800aeb4 <tcp_receive+0xb14>)
 800ad2e:	4862      	ldr	r0, [pc, #392]	; (800aeb8 <tcp_receive+0xb18>)
 800ad30:	f005 f8c0 	bl	800feb4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ad38:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ad3a:	4b5a      	ldr	r3, [pc, #360]	; (800aea4 <tcp_receive+0xb04>)
 800ad3c:	881b      	ldrh	r3, [r3, #0]
 800ad3e:	461a      	mov	r2, r3
 800ad40:	4b59      	ldr	r3, [pc, #356]	; (800aea8 <tcp_receive+0xb08>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	441a      	add	r2, r3
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ad4e:	4b55      	ldr	r3, [pc, #340]	; (800aea4 <tcp_receive+0xb04>)
 800ad50:	881b      	ldrh	r3, [r3, #0]
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d206      	bcs.n	800ad64 <tcp_receive+0x9c4>
 800ad56:	4b56      	ldr	r3, [pc, #344]	; (800aeb0 <tcp_receive+0xb10>)
 800ad58:	f240 6207 	movw	r2, #1543	; 0x607
 800ad5c:	4957      	ldr	r1, [pc, #348]	; (800aebc <tcp_receive+0xb1c>)
 800ad5e:	4856      	ldr	r0, [pc, #344]	; (800aeb8 <tcp_receive+0xb18>)
 800ad60:	f005 f8a8 	bl	800feb4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ad68:	4b4e      	ldr	r3, [pc, #312]	; (800aea4 <tcp_receive+0xb04>)
 800ad6a:	881b      	ldrh	r3, [r3, #0]
 800ad6c:	1ad3      	subs	r3, r2, r3
 800ad6e:	b29a      	uxth	r2, r3
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f7fc fe97 	bl	8007aa8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800ad7a:	4b4c      	ldr	r3, [pc, #304]	; (800aeac <tcp_receive+0xb0c>)
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	891b      	ldrh	r3, [r3, #8]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d006      	beq.n	800ad92 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800ad84:	4b49      	ldr	r3, [pc, #292]	; (800aeac <tcp_receive+0xb0c>)
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	4a4d      	ldr	r2, [pc, #308]	; (800aec0 <tcp_receive+0xb20>)
 800ad8a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800ad8c:	4b47      	ldr	r3, [pc, #284]	; (800aeac <tcp_receive+0xb0c>)
 800ad8e:	2200      	movs	r2, #0
 800ad90:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ad92:	4b46      	ldr	r3, [pc, #280]	; (800aeac <tcp_receive+0xb0c>)
 800ad94:	68db      	ldr	r3, [r3, #12]
 800ad96:	899b      	ldrh	r3, [r3, #12]
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f7fa fb0e 	bl	80053bc <lwip_htons>
 800ada0:	4603      	mov	r3, r0
 800ada2:	b2db      	uxtb	r3, r3
 800ada4:	f003 0301 	and.w	r3, r3, #1
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	f000 80b8 	beq.w	800af1e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800adae:	4b45      	ldr	r3, [pc, #276]	; (800aec4 <tcp_receive+0xb24>)
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	f043 0320 	orr.w	r3, r3, #32
 800adb6:	b2da      	uxtb	r2, r3
 800adb8:	4b42      	ldr	r3, [pc, #264]	; (800aec4 <tcp_receive+0xb24>)
 800adba:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800adbc:	e0af      	b.n	800af1e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adc2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adc8:	68db      	ldr	r3, [r3, #12]
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	4a36      	ldr	r2, [pc, #216]	; (800aea8 <tcp_receive+0xb08>)
 800adce:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	891b      	ldrh	r3, [r3, #8]
 800add4:	461c      	mov	r4, r3
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	68db      	ldr	r3, [r3, #12]
 800adda:	899b      	ldrh	r3, [r3, #12]
 800addc:	b29b      	uxth	r3, r3
 800adde:	4618      	mov	r0, r3
 800ade0:	f7fa faec 	bl	80053bc <lwip_htons>
 800ade4:	4603      	mov	r3, r0
 800ade6:	b2db      	uxtb	r3, r3
 800ade8:	f003 0303 	and.w	r3, r3, #3
 800adec:	2b00      	cmp	r3, #0
 800adee:	d001      	beq.n	800adf4 <tcp_receive+0xa54>
 800adf0:	2301      	movs	r3, #1
 800adf2:	e000      	b.n	800adf6 <tcp_receive+0xa56>
 800adf4:	2300      	movs	r3, #0
 800adf6:	191a      	adds	r2, r3, r4
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adfc:	441a      	add	r2, r3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae06:	461c      	mov	r4, r3
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	891b      	ldrh	r3, [r3, #8]
 800ae0c:	461d      	mov	r5, r3
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	68db      	ldr	r3, [r3, #12]
 800ae12:	899b      	ldrh	r3, [r3, #12]
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	4618      	mov	r0, r3
 800ae18:	f7fa fad0 	bl	80053bc <lwip_htons>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	f003 0303 	and.w	r3, r3, #3
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d001      	beq.n	800ae2c <tcp_receive+0xa8c>
 800ae28:	2301      	movs	r3, #1
 800ae2a:	e000      	b.n	800ae2e <tcp_receive+0xa8e>
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	442b      	add	r3, r5
 800ae30:	429c      	cmp	r4, r3
 800ae32:	d206      	bcs.n	800ae42 <tcp_receive+0xaa2>
 800ae34:	4b1e      	ldr	r3, [pc, #120]	; (800aeb0 <tcp_receive+0xb10>)
 800ae36:	f240 622b 	movw	r2, #1579	; 0x62b
 800ae3a:	4923      	ldr	r1, [pc, #140]	; (800aec8 <tcp_receive+0xb28>)
 800ae3c:	481e      	ldr	r0, [pc, #120]	; (800aeb8 <tcp_receive+0xb18>)
 800ae3e:	f005 f839 	bl	800feb4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	891b      	ldrh	r3, [r3, #8]
 800ae46:	461c      	mov	r4, r3
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	68db      	ldr	r3, [r3, #12]
 800ae4c:	899b      	ldrh	r3, [r3, #12]
 800ae4e:	b29b      	uxth	r3, r3
 800ae50:	4618      	mov	r0, r3
 800ae52:	f7fa fab3 	bl	80053bc <lwip_htons>
 800ae56:	4603      	mov	r3, r0
 800ae58:	b2db      	uxtb	r3, r3
 800ae5a:	f003 0303 	and.w	r3, r3, #3
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d001      	beq.n	800ae66 <tcp_receive+0xac6>
 800ae62:	2301      	movs	r3, #1
 800ae64:	e000      	b.n	800ae68 <tcp_receive+0xac8>
 800ae66:	2300      	movs	r3, #0
 800ae68:	1919      	adds	r1, r3, r4
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ae6e:	b28b      	uxth	r3, r1
 800ae70:	1ad3      	subs	r3, r2, r3
 800ae72:	b29a      	uxth	r2, r3
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f7fc fe15 	bl	8007aa8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	891b      	ldrh	r3, [r3, #8]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d028      	beq.n	800aeda <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800ae88:	4b0d      	ldr	r3, [pc, #52]	; (800aec0 <tcp_receive+0xb20>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d01d      	beq.n	800aecc <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800ae90:	4b0b      	ldr	r3, [pc, #44]	; (800aec0 <tcp_receive+0xb20>)
 800ae92:	681a      	ldr	r2, [r3, #0]
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	4619      	mov	r1, r3
 800ae9a:	4610      	mov	r0, r2
 800ae9c:	f7fb fe6e 	bl	8006b7c <pbuf_cat>
 800aea0:	e018      	b.n	800aed4 <tcp_receive+0xb34>
 800aea2:	bf00      	nop
 800aea4:	20000582 	.word	0x20000582
 800aea8:	20000578 	.word	0x20000578
 800aeac:	20000558 	.word	0x20000558
 800aeb0:	08012a78 	.word	0x08012a78
 800aeb4:	08012e58 	.word	0x08012e58
 800aeb8:	08012ac4 	.word	0x08012ac4
 800aebc:	08012e94 	.word	0x08012e94
 800aec0:	20000588 	.word	0x20000588
 800aec4:	20000585 	.word	0x20000585
 800aec8:	08012eb4 	.word	0x08012eb4
            } else {
              recv_data = cseg->p;
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	4a70      	ldr	r2, [pc, #448]	; (800b094 <tcp_receive+0xcf4>)
 800aed2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	2200      	movs	r2, #0
 800aed8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	899b      	ldrh	r3, [r3, #12]
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7fa fa6a 	bl	80053bc <lwip_htons>
 800aee8:	4603      	mov	r3, r0
 800aeea:	b2db      	uxtb	r3, r3
 800aeec:	f003 0301 	and.w	r3, r3, #1
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d00d      	beq.n	800af10 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800aef4:	4b68      	ldr	r3, [pc, #416]	; (800b098 <tcp_receive+0xcf8>)
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	f043 0320 	orr.w	r3, r3, #32
 800aefc:	b2da      	uxtb	r2, r3
 800aefe:	4b66      	ldr	r3, [pc, #408]	; (800b098 <tcp_receive+0xcf8>)
 800af00:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	7d1b      	ldrb	r3, [r3, #20]
 800af06:	2b04      	cmp	r3, #4
 800af08:	d102      	bne.n	800af10 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2207      	movs	r2, #7
 800af0e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800af18:	68b8      	ldr	r0, [r7, #8]
 800af1a:	f7fd faea 	bl	80084f2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af22:	2b00      	cmp	r3, #0
 800af24:	d008      	beq.n	800af38 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af2a:	68db      	ldr	r3, [r3, #12]
 800af2c:	685a      	ldr	r2, [r3, #4]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800af32:	429a      	cmp	r2, r3
 800af34:	f43f af43 	beq.w	800adbe <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	8b5b      	ldrh	r3, [r3, #26]
 800af3c:	f003 0301 	and.w	r3, r3, #1
 800af40:	2b00      	cmp	r3, #0
 800af42:	d00e      	beq.n	800af62 <tcp_receive+0xbc2>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	8b5b      	ldrh	r3, [r3, #26]
 800af48:	f023 0301 	bic.w	r3, r3, #1
 800af4c:	b29a      	uxth	r2, r3
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	835a      	strh	r2, [r3, #26]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	8b5b      	ldrh	r3, [r3, #26]
 800af56:	f043 0302 	orr.w	r3, r3, #2
 800af5a:	b29a      	uxth	r2, r3
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800af60:	e188      	b.n	800b274 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	8b5b      	ldrh	r3, [r3, #26]
 800af66:	f043 0301 	orr.w	r3, r3, #1
 800af6a:	b29a      	uxth	r2, r3
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800af70:	e180      	b.n	800b274 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af76:	2b00      	cmp	r3, #0
 800af78:	d106      	bne.n	800af88 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800af7a:	4848      	ldr	r0, [pc, #288]	; (800b09c <tcp_receive+0xcfc>)
 800af7c:	f7fd faf0 	bl	8008560 <tcp_seg_copy>
 800af80:	4602      	mov	r2, r0
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	675a      	str	r2, [r3, #116]	; 0x74
 800af86:	e16d      	b.n	800b264 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800af88:	2300      	movs	r3, #0
 800af8a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af90:	63bb      	str	r3, [r7, #56]	; 0x38
 800af92:	e157      	b.n	800b244 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800af94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af96:	68db      	ldr	r3, [r3, #12]
 800af98:	685a      	ldr	r2, [r3, #4]
 800af9a:	4b41      	ldr	r3, [pc, #260]	; (800b0a0 <tcp_receive+0xd00>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d11d      	bne.n	800afde <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800afa2:	4b3e      	ldr	r3, [pc, #248]	; (800b09c <tcp_receive+0xcfc>)
 800afa4:	891a      	ldrh	r2, [r3, #8]
 800afa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa8:	891b      	ldrh	r3, [r3, #8]
 800afaa:	429a      	cmp	r2, r3
 800afac:	f240 814f 	bls.w	800b24e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800afb0:	483a      	ldr	r0, [pc, #232]	; (800b09c <tcp_receive+0xcfc>)
 800afb2:	f7fd fad5 	bl	8008560 <tcp_seg_copy>
 800afb6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	f000 8149 	beq.w	800b252 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800afc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d003      	beq.n	800afce <tcp_receive+0xc2e>
                    prev->next = cseg;
 800afc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afc8:	697a      	ldr	r2, [r7, #20]
 800afca:	601a      	str	r2, [r3, #0]
 800afcc:	e002      	b.n	800afd4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	697a      	ldr	r2, [r7, #20]
 800afd2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800afd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800afd6:	6978      	ldr	r0, [r7, #20]
 800afd8:	f7ff f8de 	bl	800a198 <tcp_oos_insert_segment>
                }
                break;
 800afdc:	e139      	b.n	800b252 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800afde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d117      	bne.n	800b014 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800afe4:	4b2e      	ldr	r3, [pc, #184]	; (800b0a0 <tcp_receive+0xd00>)
 800afe6:	681a      	ldr	r2, [r3, #0]
 800afe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	1ad3      	subs	r3, r2, r3
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	da57      	bge.n	800b0a4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800aff4:	4829      	ldr	r0, [pc, #164]	; (800b09c <tcp_receive+0xcfc>)
 800aff6:	f7fd fab3 	bl	8008560 <tcp_seg_copy>
 800affa:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800affc:	69bb      	ldr	r3, [r7, #24]
 800affe:	2b00      	cmp	r3, #0
 800b000:	f000 8129 	beq.w	800b256 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	69ba      	ldr	r2, [r7, #24]
 800b008:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800b00a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b00c:	69b8      	ldr	r0, [r7, #24]
 800b00e:	f7ff f8c3 	bl	800a198 <tcp_oos_insert_segment>
                  }
                  break;
 800b012:	e120      	b.n	800b256 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800b014:	4b22      	ldr	r3, [pc, #136]	; (800b0a0 <tcp_receive+0xd00>)
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b01a:	68db      	ldr	r3, [r3, #12]
 800b01c:	685b      	ldr	r3, [r3, #4]
 800b01e:	1ad3      	subs	r3, r2, r3
 800b020:	3b01      	subs	r3, #1
 800b022:	2b00      	cmp	r3, #0
 800b024:	db3e      	blt.n	800b0a4 <tcp_receive+0xd04>
 800b026:	4b1e      	ldr	r3, [pc, #120]	; (800b0a0 <tcp_receive+0xd00>)
 800b028:	681a      	ldr	r2, [r3, #0]
 800b02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b02c:	68db      	ldr	r3, [r3, #12]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	1ad3      	subs	r3, r2, r3
 800b032:	3301      	adds	r3, #1
 800b034:	2b00      	cmp	r3, #0
 800b036:	dc35      	bgt.n	800b0a4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b038:	4818      	ldr	r0, [pc, #96]	; (800b09c <tcp_receive+0xcfc>)
 800b03a:	f7fd fa91 	bl	8008560 <tcp_seg_copy>
 800b03e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	2b00      	cmp	r3, #0
 800b044:	f000 8109 	beq.w	800b25a <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800b048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b050:	8912      	ldrh	r2, [r2, #8]
 800b052:	441a      	add	r2, r3
 800b054:	4b12      	ldr	r3, [pc, #72]	; (800b0a0 <tcp_receive+0xd00>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	1ad3      	subs	r3, r2, r3
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	dd12      	ble.n	800b084 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800b05e:	4b10      	ldr	r3, [pc, #64]	; (800b0a0 <tcp_receive+0xd00>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	b29a      	uxth	r2, r3
 800b064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b066:	68db      	ldr	r3, [r3, #12]
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	b29b      	uxth	r3, r3
 800b06c:	1ad3      	subs	r3, r2, r3
 800b06e:	b29a      	uxth	r2, r3
 800b070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b072:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800b074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b076:	685a      	ldr	r2, [r3, #4]
 800b078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b07a:	891b      	ldrh	r3, [r3, #8]
 800b07c:	4619      	mov	r1, r3
 800b07e:	4610      	mov	r0, r2
 800b080:	f7fb fb34 	bl	80066ec <pbuf_realloc>
                    }
                    prev->next = cseg;
 800b084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b086:	69fa      	ldr	r2, [r7, #28]
 800b088:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800b08a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b08c:	69f8      	ldr	r0, [r7, #28]
 800b08e:	f7ff f883 	bl	800a198 <tcp_oos_insert_segment>
                  }
                  break;
 800b092:	e0e2      	b.n	800b25a <tcp_receive+0xeba>
 800b094:	20000588 	.word	0x20000588
 800b098:	20000585 	.word	0x20000585
 800b09c:	20000558 	.word	0x20000558
 800b0a0:	20000578 	.word	0x20000578
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800b0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800b0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	f040 80c6 	bne.w	800b23e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800b0b2:	4b80      	ldr	r3, [pc, #512]	; (800b2b4 <tcp_receive+0xf14>)
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b8:	68db      	ldr	r3, [r3, #12]
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	f340 80bd 	ble.w	800b23e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c6:	68db      	ldr	r3, [r3, #12]
 800b0c8:	899b      	ldrh	r3, [r3, #12]
 800b0ca:	b29b      	uxth	r3, r3
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f7fa f975 	bl	80053bc <lwip_htons>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	b2db      	uxtb	r3, r3
 800b0d6:	f003 0301 	and.w	r3, r3, #1
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	f040 80bf 	bne.w	800b25e <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800b0e0:	4875      	ldr	r0, [pc, #468]	; (800b2b8 <tcp_receive+0xf18>)
 800b0e2:	f7fd fa3d 	bl	8008560 <tcp_seg_copy>
 800b0e6:	4602      	mov	r2, r0
 800b0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ea:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800b0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	f000 80b6 	beq.w	800b262 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800b0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f8:	68db      	ldr	r3, [r3, #12]
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b0fe:	8912      	ldrh	r2, [r2, #8]
 800b100:	441a      	add	r2, r3
 800b102:	4b6c      	ldr	r3, [pc, #432]	; (800b2b4 <tcp_receive+0xf14>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	1ad3      	subs	r3, r2, r3
 800b108:	2b00      	cmp	r3, #0
 800b10a:	dd12      	ble.n	800b132 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800b10c:	4b69      	ldr	r3, [pc, #420]	; (800b2b4 <tcp_receive+0xf14>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	b29a      	uxth	r2, r3
 800b112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b114:	68db      	ldr	r3, [r3, #12]
 800b116:	685b      	ldr	r3, [r3, #4]
 800b118:	b29b      	uxth	r3, r3
 800b11a:	1ad3      	subs	r3, r2, r3
 800b11c:	b29a      	uxth	r2, r3
 800b11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b120:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800b122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b124:	685a      	ldr	r2, [r3, #4]
 800b126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b128:	891b      	ldrh	r3, [r3, #8]
 800b12a:	4619      	mov	r1, r3
 800b12c:	4610      	mov	r0, r2
 800b12e:	f7fb fadd 	bl	80066ec <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800b132:	4b62      	ldr	r3, [pc, #392]	; (800b2bc <tcp_receive+0xf1c>)
 800b134:	881b      	ldrh	r3, [r3, #0]
 800b136:	461a      	mov	r2, r3
 800b138:	4b5e      	ldr	r3, [pc, #376]	; (800b2b4 <tcp_receive+0xf14>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	441a      	add	r2, r3
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b142:	6879      	ldr	r1, [r7, #4]
 800b144:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b146:	440b      	add	r3, r1
 800b148:	1ad3      	subs	r3, r2, r3
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	f340 8089 	ble.w	800b262 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800b150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	68db      	ldr	r3, [r3, #12]
 800b156:	899b      	ldrh	r3, [r3, #12]
 800b158:	b29b      	uxth	r3, r3
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7fa f92e 	bl	80053bc <lwip_htons>
 800b160:	4603      	mov	r3, r0
 800b162:	b2db      	uxtb	r3, r3
 800b164:	f003 0301 	and.w	r3, r3, #1
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d022      	beq.n	800b1b2 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800b16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	68db      	ldr	r3, [r3, #12]
 800b172:	899b      	ldrh	r3, [r3, #12]
 800b174:	b29b      	uxth	r3, r3
 800b176:	b21b      	sxth	r3, r3
 800b178:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b17c:	b21c      	sxth	r4, r3
 800b17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	68db      	ldr	r3, [r3, #12]
 800b184:	899b      	ldrh	r3, [r3, #12]
 800b186:	b29b      	uxth	r3, r3
 800b188:	4618      	mov	r0, r3
 800b18a:	f7fa f917 	bl	80053bc <lwip_htons>
 800b18e:	4603      	mov	r3, r0
 800b190:	b2db      	uxtb	r3, r3
 800b192:	b29b      	uxth	r3, r3
 800b194:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b198:	b29b      	uxth	r3, r3
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7fa f90e 	bl	80053bc <lwip_htons>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	b21b      	sxth	r3, r3
 800b1a4:	4323      	orrs	r3, r4
 800b1a6:	b21a      	sxth	r2, r3
 800b1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	68db      	ldr	r3, [r3, #12]
 800b1ae:	b292      	uxth	r2, r2
 800b1b0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b6:	b29a      	uxth	r2, r3
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1bc:	4413      	add	r3, r2
 800b1be:	b299      	uxth	r1, r3
 800b1c0:	4b3c      	ldr	r3, [pc, #240]	; (800b2b4 <tcp_receive+0xf14>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	b29a      	uxth	r2, r3
 800b1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	1a8a      	subs	r2, r1, r2
 800b1cc:	b292      	uxth	r2, r2
 800b1ce:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800b1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	685a      	ldr	r2, [r3, #4]
 800b1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	891b      	ldrh	r3, [r3, #8]
 800b1dc:	4619      	mov	r1, r3
 800b1de:	4610      	mov	r0, r2
 800b1e0:	f7fb fa84 	bl	80066ec <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800b1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	891c      	ldrh	r4, [r3, #8]
 800b1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	68db      	ldr	r3, [r3, #12]
 800b1f0:	899b      	ldrh	r3, [r3, #12]
 800b1f2:	b29b      	uxth	r3, r3
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f7fa f8e1 	bl	80053bc <lwip_htons>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	f003 0303 	and.w	r3, r3, #3
 800b202:	2b00      	cmp	r3, #0
 800b204:	d001      	beq.n	800b20a <tcp_receive+0xe6a>
 800b206:	2301      	movs	r3, #1
 800b208:	e000      	b.n	800b20c <tcp_receive+0xe6c>
 800b20a:	2300      	movs	r3, #0
 800b20c:	4423      	add	r3, r4
 800b20e:	b29a      	uxth	r2, r3
 800b210:	4b2a      	ldr	r3, [pc, #168]	; (800b2bc <tcp_receive+0xf1c>)
 800b212:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b214:	4b29      	ldr	r3, [pc, #164]	; (800b2bc <tcp_receive+0xf1c>)
 800b216:	881b      	ldrh	r3, [r3, #0]
 800b218:	461a      	mov	r2, r3
 800b21a:	4b26      	ldr	r3, [pc, #152]	; (800b2b4 <tcp_receive+0xf14>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	441a      	add	r2, r3
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b224:	6879      	ldr	r1, [r7, #4]
 800b226:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b228:	440b      	add	r3, r1
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d019      	beq.n	800b262 <tcp_receive+0xec2>
 800b22e:	4b24      	ldr	r3, [pc, #144]	; (800b2c0 <tcp_receive+0xf20>)
 800b230:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800b234:	4923      	ldr	r1, [pc, #140]	; (800b2c4 <tcp_receive+0xf24>)
 800b236:	4824      	ldr	r0, [pc, #144]	; (800b2c8 <tcp_receive+0xf28>)
 800b238:	f004 fe3c 	bl	800feb4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800b23c:	e011      	b.n	800b262 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	63bb      	str	r3, [r7, #56]	; 0x38
 800b244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b246:	2b00      	cmp	r3, #0
 800b248:	f47f aea4 	bne.w	800af94 <tcp_receive+0xbf4>
 800b24c:	e00a      	b.n	800b264 <tcp_receive+0xec4>
                break;
 800b24e:	bf00      	nop
 800b250:	e008      	b.n	800b264 <tcp_receive+0xec4>
                break;
 800b252:	bf00      	nop
 800b254:	e006      	b.n	800b264 <tcp_receive+0xec4>
                  break;
 800b256:	bf00      	nop
 800b258:	e004      	b.n	800b264 <tcp_receive+0xec4>
                  break;
 800b25a:	bf00      	nop
 800b25c:	e002      	b.n	800b264 <tcp_receive+0xec4>
                  break;
 800b25e:	bf00      	nop
 800b260:	e000      	b.n	800b264 <tcp_receive+0xec4>
                break;
 800b262:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f001 fe8b 	bl	800cf80 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800b26a:	e003      	b.n	800b274 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f001 fe87 	bl	800cf80 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b272:	e01a      	b.n	800b2aa <tcp_receive+0xf0a>
 800b274:	e019      	b.n	800b2aa <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b276:	4b0f      	ldr	r3, [pc, #60]	; (800b2b4 <tcp_receive+0xf14>)
 800b278:	681a      	ldr	r2, [r3, #0]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b27e:	1ad3      	subs	r3, r2, r3
 800b280:	2b00      	cmp	r3, #0
 800b282:	db0a      	blt.n	800b29a <tcp_receive+0xefa>
 800b284:	4b0b      	ldr	r3, [pc, #44]	; (800b2b4 <tcp_receive+0xf14>)
 800b286:	681a      	ldr	r2, [r3, #0]
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28c:	6879      	ldr	r1, [r7, #4]
 800b28e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b290:	440b      	add	r3, r1
 800b292:	1ad3      	subs	r3, r2, r3
 800b294:	3301      	adds	r3, #1
 800b296:	2b00      	cmp	r3, #0
 800b298:	dd07      	ble.n	800b2aa <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	8b5b      	ldrh	r3, [r3, #26]
 800b29e:	f043 0302 	orr.w	r3, r3, #2
 800b2a2:	b29a      	uxth	r2, r3
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800b2a8:	e7ff      	b.n	800b2aa <tcp_receive+0xf0a>
 800b2aa:	bf00      	nop
 800b2ac:	3750      	adds	r7, #80	; 0x50
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bdb0      	pop	{r4, r5, r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	20000578 	.word	0x20000578
 800b2b8:	20000558 	.word	0x20000558
 800b2bc:	20000582 	.word	0x20000582
 800b2c0:	08012a78 	.word	0x08012a78
 800b2c4:	08012e20 	.word	0x08012e20
 800b2c8:	08012ac4 	.word	0x08012ac4

0800b2cc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b083      	sub	sp, #12
 800b2d0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800b2d2:	4b15      	ldr	r3, [pc, #84]	; (800b328 <tcp_get_next_optbyte+0x5c>)
 800b2d4:	881b      	ldrh	r3, [r3, #0]
 800b2d6:	1c5a      	adds	r2, r3, #1
 800b2d8:	b291      	uxth	r1, r2
 800b2da:	4a13      	ldr	r2, [pc, #76]	; (800b328 <tcp_get_next_optbyte+0x5c>)
 800b2dc:	8011      	strh	r1, [r2, #0]
 800b2de:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b2e0:	4b12      	ldr	r3, [pc, #72]	; (800b32c <tcp_get_next_optbyte+0x60>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d004      	beq.n	800b2f2 <tcp_get_next_optbyte+0x26>
 800b2e8:	4b11      	ldr	r3, [pc, #68]	; (800b330 <tcp_get_next_optbyte+0x64>)
 800b2ea:	881b      	ldrh	r3, [r3, #0]
 800b2ec:	88fa      	ldrh	r2, [r7, #6]
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d208      	bcs.n	800b304 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800b2f2:	4b10      	ldr	r3, [pc, #64]	; (800b334 <tcp_get_next_optbyte+0x68>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	3314      	adds	r3, #20
 800b2f8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800b2fa:	88fb      	ldrh	r3, [r7, #6]
 800b2fc:	683a      	ldr	r2, [r7, #0]
 800b2fe:	4413      	add	r3, r2
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	e00b      	b.n	800b31c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800b304:	88fb      	ldrh	r3, [r7, #6]
 800b306:	b2da      	uxtb	r2, r3
 800b308:	4b09      	ldr	r3, [pc, #36]	; (800b330 <tcp_get_next_optbyte+0x64>)
 800b30a:	881b      	ldrh	r3, [r3, #0]
 800b30c:	b2db      	uxtb	r3, r3
 800b30e:	1ad3      	subs	r3, r2, r3
 800b310:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800b312:	4b06      	ldr	r3, [pc, #24]	; (800b32c <tcp_get_next_optbyte+0x60>)
 800b314:	681a      	ldr	r2, [r3, #0]
 800b316:	797b      	ldrb	r3, [r7, #5]
 800b318:	4413      	add	r3, r2
 800b31a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	370c      	adds	r7, #12
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr
 800b328:	20000574 	.word	0x20000574
 800b32c:	20000570 	.word	0x20000570
 800b330:	2000056e 	.word	0x2000056e
 800b334:	20000568 	.word	0x20000568

0800b338 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b084      	sub	sp, #16
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d106      	bne.n	800b354 <tcp_parseopt+0x1c>
 800b346:	4b32      	ldr	r3, [pc, #200]	; (800b410 <tcp_parseopt+0xd8>)
 800b348:	f240 727d 	movw	r2, #1917	; 0x77d
 800b34c:	4931      	ldr	r1, [pc, #196]	; (800b414 <tcp_parseopt+0xdc>)
 800b34e:	4832      	ldr	r0, [pc, #200]	; (800b418 <tcp_parseopt+0xe0>)
 800b350:	f004 fdb0 	bl	800feb4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800b354:	4b31      	ldr	r3, [pc, #196]	; (800b41c <tcp_parseopt+0xe4>)
 800b356:	881b      	ldrh	r3, [r3, #0]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d055      	beq.n	800b408 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b35c:	4b30      	ldr	r3, [pc, #192]	; (800b420 <tcp_parseopt+0xe8>)
 800b35e:	2200      	movs	r2, #0
 800b360:	801a      	strh	r2, [r3, #0]
 800b362:	e045      	b.n	800b3f0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800b364:	f7ff ffb2 	bl	800b2cc <tcp_get_next_optbyte>
 800b368:	4603      	mov	r3, r0
 800b36a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800b36c:	7bfb      	ldrb	r3, [r7, #15]
 800b36e:	2b02      	cmp	r3, #2
 800b370:	d006      	beq.n	800b380 <tcp_parseopt+0x48>
 800b372:	2b02      	cmp	r3, #2
 800b374:	dc2b      	bgt.n	800b3ce <tcp_parseopt+0x96>
 800b376:	2b00      	cmp	r3, #0
 800b378:	d041      	beq.n	800b3fe <tcp_parseopt+0xc6>
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	d127      	bne.n	800b3ce <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800b37e:	e037      	b.n	800b3f0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b380:	f7ff ffa4 	bl	800b2cc <tcp_get_next_optbyte>
 800b384:	4603      	mov	r3, r0
 800b386:	2b04      	cmp	r3, #4
 800b388:	d13b      	bne.n	800b402 <tcp_parseopt+0xca>
 800b38a:	4b25      	ldr	r3, [pc, #148]	; (800b420 <tcp_parseopt+0xe8>)
 800b38c:	881b      	ldrh	r3, [r3, #0]
 800b38e:	3301      	adds	r3, #1
 800b390:	4a22      	ldr	r2, [pc, #136]	; (800b41c <tcp_parseopt+0xe4>)
 800b392:	8812      	ldrh	r2, [r2, #0]
 800b394:	4293      	cmp	r3, r2
 800b396:	da34      	bge.n	800b402 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800b398:	f7ff ff98 	bl	800b2cc <tcp_get_next_optbyte>
 800b39c:	4603      	mov	r3, r0
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	021b      	lsls	r3, r3, #8
 800b3a2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800b3a4:	f7ff ff92 	bl	800b2cc <tcp_get_next_optbyte>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	b29a      	uxth	r2, r3
 800b3ac:	89bb      	ldrh	r3, [r7, #12]
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b3b2:	89bb      	ldrh	r3, [r7, #12]
 800b3b4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b3b8:	d804      	bhi.n	800b3c4 <tcp_parseopt+0x8c>
 800b3ba:	89bb      	ldrh	r3, [r7, #12]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d001      	beq.n	800b3c4 <tcp_parseopt+0x8c>
 800b3c0:	89ba      	ldrh	r2, [r7, #12]
 800b3c2:	e001      	b.n	800b3c8 <tcp_parseopt+0x90>
 800b3c4:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800b3cc:	e010      	b.n	800b3f0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800b3ce:	f7ff ff7d 	bl	800b2cc <tcp_get_next_optbyte>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800b3d6:	7afb      	ldrb	r3, [r7, #11]
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	d914      	bls.n	800b406 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800b3dc:	7afb      	ldrb	r3, [r7, #11]
 800b3de:	b29a      	uxth	r2, r3
 800b3e0:	4b0f      	ldr	r3, [pc, #60]	; (800b420 <tcp_parseopt+0xe8>)
 800b3e2:	881b      	ldrh	r3, [r3, #0]
 800b3e4:	4413      	add	r3, r2
 800b3e6:	b29b      	uxth	r3, r3
 800b3e8:	3b02      	subs	r3, #2
 800b3ea:	b29a      	uxth	r2, r3
 800b3ec:	4b0c      	ldr	r3, [pc, #48]	; (800b420 <tcp_parseopt+0xe8>)
 800b3ee:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b3f0:	4b0b      	ldr	r3, [pc, #44]	; (800b420 <tcp_parseopt+0xe8>)
 800b3f2:	881a      	ldrh	r2, [r3, #0]
 800b3f4:	4b09      	ldr	r3, [pc, #36]	; (800b41c <tcp_parseopt+0xe4>)
 800b3f6:	881b      	ldrh	r3, [r3, #0]
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d3b3      	bcc.n	800b364 <tcp_parseopt+0x2c>
 800b3fc:	e004      	b.n	800b408 <tcp_parseopt+0xd0>
          return;
 800b3fe:	bf00      	nop
 800b400:	e002      	b.n	800b408 <tcp_parseopt+0xd0>
            return;
 800b402:	bf00      	nop
 800b404:	e000      	b.n	800b408 <tcp_parseopt+0xd0>
            return;
 800b406:	bf00      	nop
      }
    }
  }
}
 800b408:	3710      	adds	r7, #16
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop
 800b410:	08012a78 	.word	0x08012a78
 800b414:	08012edc 	.word	0x08012edc
 800b418:	08012ac4 	.word	0x08012ac4
 800b41c:	2000056c 	.word	0x2000056c
 800b420:	20000574 	.word	0x20000574

0800b424 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800b424:	b480      	push	{r7}
 800b426:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800b428:	4b05      	ldr	r3, [pc, #20]	; (800b440 <tcp_trigger_input_pcb_close+0x1c>)
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	f043 0310 	orr.w	r3, r3, #16
 800b430:	b2da      	uxtb	r2, r3
 800b432:	4b03      	ldr	r3, [pc, #12]	; (800b440 <tcp_trigger_input_pcb_close+0x1c>)
 800b434:	701a      	strb	r2, [r3, #0]
}
 800b436:	bf00      	nop
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr
 800b440:	20000585 	.word	0x20000585

0800b444 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b084      	sub	sp, #16
 800b448:	af00      	add	r7, sp, #0
 800b44a:	60f8      	str	r0, [r7, #12]
 800b44c:	60b9      	str	r1, [r7, #8]
 800b44e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d00a      	beq.n	800b46c <tcp_route+0x28>
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	7a1b      	ldrb	r3, [r3, #8]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d006      	beq.n	800b46c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	7a1b      	ldrb	r3, [r3, #8]
 800b462:	4618      	mov	r0, r3
 800b464:	f7fa ff68 	bl	8006338 <netif_get_by_index>
 800b468:	4603      	mov	r3, r0
 800b46a:	e003      	b.n	800b474 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f003 fad5 	bl	800ea1c <ip4_route>
 800b472:	4603      	mov	r3, r0
  }
}
 800b474:	4618      	mov	r0, r3
 800b476:	3710      	adds	r7, #16
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800b47c:	b590      	push	{r4, r7, lr}
 800b47e:	b087      	sub	sp, #28
 800b480:	af00      	add	r7, sp, #0
 800b482:	60f8      	str	r0, [r7, #12]
 800b484:	60b9      	str	r1, [r7, #8]
 800b486:	603b      	str	r3, [r7, #0]
 800b488:	4613      	mov	r3, r2
 800b48a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d105      	bne.n	800b49e <tcp_create_segment+0x22>
 800b492:	4b44      	ldr	r3, [pc, #272]	; (800b5a4 <tcp_create_segment+0x128>)
 800b494:	22a3      	movs	r2, #163	; 0xa3
 800b496:	4944      	ldr	r1, [pc, #272]	; (800b5a8 <tcp_create_segment+0x12c>)
 800b498:	4844      	ldr	r0, [pc, #272]	; (800b5ac <tcp_create_segment+0x130>)
 800b49a:	f004 fd0b 	bl	800feb4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d105      	bne.n	800b4b0 <tcp_create_segment+0x34>
 800b4a4:	4b3f      	ldr	r3, [pc, #252]	; (800b5a4 <tcp_create_segment+0x128>)
 800b4a6:	22a4      	movs	r2, #164	; 0xa4
 800b4a8:	4941      	ldr	r1, [pc, #260]	; (800b5b0 <tcp_create_segment+0x134>)
 800b4aa:	4840      	ldr	r0, [pc, #256]	; (800b5ac <tcp_create_segment+0x130>)
 800b4ac:	f004 fd02 	bl	800feb4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b4b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b4b4:	009b      	lsls	r3, r3, #2
 800b4b6:	b2db      	uxtb	r3, r3
 800b4b8:	f003 0304 	and.w	r3, r3, #4
 800b4bc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b4be:	2003      	movs	r0, #3
 800b4c0:	f7fa fc3c 	bl	8005d3c <memp_malloc>
 800b4c4:	6138      	str	r0, [r7, #16]
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d104      	bne.n	800b4d6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b4cc:	68b8      	ldr	r0, [r7, #8]
 800b4ce:	f7fb fa93 	bl	80069f8 <pbuf_free>
    return NULL;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	e061      	b.n	800b59a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b4dc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	68ba      	ldr	r2, [r7, #8]
 800b4e8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	891a      	ldrh	r2, [r3, #8]
 800b4ee:	7dfb      	ldrb	r3, [r7, #23]
 800b4f0:	b29b      	uxth	r3, r3
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d205      	bcs.n	800b502 <tcp_create_segment+0x86>
 800b4f6:	4b2b      	ldr	r3, [pc, #172]	; (800b5a4 <tcp_create_segment+0x128>)
 800b4f8:	22b0      	movs	r2, #176	; 0xb0
 800b4fa:	492e      	ldr	r1, [pc, #184]	; (800b5b4 <tcp_create_segment+0x138>)
 800b4fc:	482b      	ldr	r0, [pc, #172]	; (800b5ac <tcp_create_segment+0x130>)
 800b4fe:	f004 fcd9 	bl	800feb4 <iprintf>
  seg->len = p->tot_len - optlen;
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	891a      	ldrh	r2, [r3, #8]
 800b506:	7dfb      	ldrb	r3, [r7, #23]
 800b508:	b29b      	uxth	r3, r3
 800b50a:	1ad3      	subs	r3, r2, r3
 800b50c:	b29a      	uxth	r2, r3
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b512:	2114      	movs	r1, #20
 800b514:	68b8      	ldr	r0, [r7, #8]
 800b516:	f7fb f9d9 	bl	80068cc <pbuf_add_header>
 800b51a:	4603      	mov	r3, r0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d004      	beq.n	800b52a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b520:	6938      	ldr	r0, [r7, #16]
 800b522:	f7fc ffe6 	bl	80084f2 <tcp_seg_free>
    return NULL;
 800b526:	2300      	movs	r3, #0
 800b528:	e037      	b.n	800b59a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	685a      	ldr	r2, [r3, #4]
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	8ada      	ldrh	r2, [r3, #22]
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	68dc      	ldr	r4, [r3, #12]
 800b53c:	4610      	mov	r0, r2
 800b53e:	f7f9 ff3d 	bl	80053bc <lwip_htons>
 800b542:	4603      	mov	r3, r0
 800b544:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	8b1a      	ldrh	r2, [r3, #24]
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	68dc      	ldr	r4, [r3, #12]
 800b54e:	4610      	mov	r0, r2
 800b550:	f7f9 ff34 	bl	80053bc <lwip_htons>
 800b554:	4603      	mov	r3, r0
 800b556:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	68dc      	ldr	r4, [r3, #12]
 800b55c:	6838      	ldr	r0, [r7, #0]
 800b55e:	f7f9 ff42 	bl	80053e6 <lwip_htonl>
 800b562:	4603      	mov	r3, r0
 800b564:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b566:	7dfb      	ldrb	r3, [r7, #23]
 800b568:	089b      	lsrs	r3, r3, #2
 800b56a:	b2db      	uxtb	r3, r3
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	3305      	adds	r3, #5
 800b570:	b29b      	uxth	r3, r3
 800b572:	031b      	lsls	r3, r3, #12
 800b574:	b29a      	uxth	r2, r3
 800b576:	79fb      	ldrb	r3, [r7, #7]
 800b578:	b29b      	uxth	r3, r3
 800b57a:	4313      	orrs	r3, r2
 800b57c:	b29a      	uxth	r2, r3
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	68dc      	ldr	r4, [r3, #12]
 800b582:	4610      	mov	r0, r2
 800b584:	f7f9 ff1a 	bl	80053bc <lwip_htons>
 800b588:	4603      	mov	r3, r0
 800b58a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	68db      	ldr	r3, [r3, #12]
 800b590:	2200      	movs	r2, #0
 800b592:	749a      	strb	r2, [r3, #18]
 800b594:	2200      	movs	r2, #0
 800b596:	74da      	strb	r2, [r3, #19]
  return seg;
 800b598:	693b      	ldr	r3, [r7, #16]
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	371c      	adds	r7, #28
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd90      	pop	{r4, r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	08012ef8 	.word	0x08012ef8
 800b5a8:	08012f2c 	.word	0x08012f2c
 800b5ac:	08012f4c 	.word	0x08012f4c
 800b5b0:	08012f74 	.word	0x08012f74
 800b5b4:	08012f98 	.word	0x08012f98

0800b5b8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b086      	sub	sp, #24
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	607b      	str	r3, [r7, #4]
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	73fb      	strb	r3, [r7, #15]
 800b5c4:	460b      	mov	r3, r1
 800b5c6:	81bb      	strh	r3, [r7, #12]
 800b5c8:	4613      	mov	r3, r2
 800b5ca:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800b5cc:	89bb      	ldrh	r3, [r7, #12]
 800b5ce:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d105      	bne.n	800b5e2 <tcp_pbuf_prealloc+0x2a>
 800b5d6:	4b30      	ldr	r3, [pc, #192]	; (800b698 <tcp_pbuf_prealloc+0xe0>)
 800b5d8:	22e8      	movs	r2, #232	; 0xe8
 800b5da:	4930      	ldr	r1, [pc, #192]	; (800b69c <tcp_pbuf_prealloc+0xe4>)
 800b5dc:	4830      	ldr	r0, [pc, #192]	; (800b6a0 <tcp_pbuf_prealloc+0xe8>)
 800b5de:	f004 fc69 	bl	800feb4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800b5e2:	6a3b      	ldr	r3, [r7, #32]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d105      	bne.n	800b5f4 <tcp_pbuf_prealloc+0x3c>
 800b5e8:	4b2b      	ldr	r3, [pc, #172]	; (800b698 <tcp_pbuf_prealloc+0xe0>)
 800b5ea:	22e9      	movs	r2, #233	; 0xe9
 800b5ec:	492d      	ldr	r1, [pc, #180]	; (800b6a4 <tcp_pbuf_prealloc+0xec>)
 800b5ee:	482c      	ldr	r0, [pc, #176]	; (800b6a0 <tcp_pbuf_prealloc+0xe8>)
 800b5f0:	f004 fc60 	bl	800feb4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800b5f4:	89ba      	ldrh	r2, [r7, #12]
 800b5f6:	897b      	ldrh	r3, [r7, #10]
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d221      	bcs.n	800b640 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b5fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b600:	f003 0302 	and.w	r3, r3, #2
 800b604:	2b00      	cmp	r3, #0
 800b606:	d111      	bne.n	800b62c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800b608:	6a3b      	ldr	r3, [r7, #32]
 800b60a:	8b5b      	ldrh	r3, [r3, #26]
 800b60c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b610:	2b00      	cmp	r3, #0
 800b612:	d115      	bne.n	800b640 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800b614:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d007      	beq.n	800b62c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800b61c:	6a3b      	ldr	r3, [r7, #32]
 800b61e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800b620:	2b00      	cmp	r3, #0
 800b622:	d103      	bne.n	800b62c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800b624:	6a3b      	ldr	r3, [r7, #32]
 800b626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d009      	beq.n	800b640 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800b62c:	89bb      	ldrh	r3, [r7, #12]
 800b62e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800b632:	f023 0203 	bic.w	r2, r3, #3
 800b636:	897b      	ldrh	r3, [r7, #10]
 800b638:	4293      	cmp	r3, r2
 800b63a:	bf28      	it	cs
 800b63c:	4613      	movcs	r3, r2
 800b63e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800b640:	8af9      	ldrh	r1, [r7, #22]
 800b642:	7bfb      	ldrb	r3, [r7, #15]
 800b644:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b648:	4618      	mov	r0, r3
 800b64a:	f7fa fef1 	bl	8006430 <pbuf_alloc>
 800b64e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d101      	bne.n	800b65a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800b656:	2300      	movs	r3, #0
 800b658:	e019      	b.n	800b68e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d006      	beq.n	800b670 <tcp_pbuf_prealloc+0xb8>
 800b662:	4b0d      	ldr	r3, [pc, #52]	; (800b698 <tcp_pbuf_prealloc+0xe0>)
 800b664:	f240 120b 	movw	r2, #267	; 0x10b
 800b668:	490f      	ldr	r1, [pc, #60]	; (800b6a8 <tcp_pbuf_prealloc+0xf0>)
 800b66a:	480d      	ldr	r0, [pc, #52]	; (800b6a0 <tcp_pbuf_prealloc+0xe8>)
 800b66c:	f004 fc22 	bl	800feb4 <iprintf>
  *oversize = p->len - length;
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	895a      	ldrh	r2, [r3, #10]
 800b674:	89bb      	ldrh	r3, [r7, #12]
 800b676:	1ad3      	subs	r3, r2, r3
 800b678:	b29a      	uxth	r2, r3
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	89ba      	ldrh	r2, [r7, #12]
 800b682:	811a      	strh	r2, [r3, #8]
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	891a      	ldrh	r2, [r3, #8]
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	815a      	strh	r2, [r3, #10]
  return p;
 800b68c:	693b      	ldr	r3, [r7, #16]
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3718      	adds	r7, #24
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	08012ef8 	.word	0x08012ef8
 800b69c:	08012fb0 	.word	0x08012fb0
 800b6a0:	08012f4c 	.word	0x08012f4c
 800b6a4:	08012fd4 	.word	0x08012fd4
 800b6a8:	08012ff4 	.word	0x08012ff4

0800b6ac <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b082      	sub	sp, #8
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	460b      	mov	r3, r1
 800b6b6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d106      	bne.n	800b6cc <tcp_write_checks+0x20>
 800b6be:	4b33      	ldr	r3, [pc, #204]	; (800b78c <tcp_write_checks+0xe0>)
 800b6c0:	f240 1233 	movw	r2, #307	; 0x133
 800b6c4:	4932      	ldr	r1, [pc, #200]	; (800b790 <tcp_write_checks+0xe4>)
 800b6c6:	4833      	ldr	r0, [pc, #204]	; (800b794 <tcp_write_checks+0xe8>)
 800b6c8:	f004 fbf4 	bl	800feb4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	7d1b      	ldrb	r3, [r3, #20]
 800b6d0:	2b04      	cmp	r3, #4
 800b6d2:	d00e      	beq.n	800b6f2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800b6d8:	2b07      	cmp	r3, #7
 800b6da:	d00a      	beq.n	800b6f2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800b6e0:	2b02      	cmp	r3, #2
 800b6e2:	d006      	beq.n	800b6f2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800b6e8:	2b03      	cmp	r3, #3
 800b6ea:	d002      	beq.n	800b6f2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800b6ec:	f06f 030a 	mvn.w	r3, #10
 800b6f0:	e048      	b.n	800b784 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800b6f2:	887b      	ldrh	r3, [r7, #2]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d101      	bne.n	800b6fc <tcp_write_checks+0x50>
    return ERR_OK;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	e043      	b.n	800b784 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b702:	887a      	ldrh	r2, [r7, #2]
 800b704:	429a      	cmp	r2, r3
 800b706:	d909      	bls.n	800b71c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	8b5b      	ldrh	r3, [r3, #26]
 800b70c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b710:	b29a      	uxth	r2, r3
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b71a:	e033      	b.n	800b784 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b722:	2b08      	cmp	r3, #8
 800b724:	d909      	bls.n	800b73a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	8b5b      	ldrh	r3, [r3, #26]
 800b72a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b72e:	b29a      	uxth	r2, r3
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b734:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b738:	e024      	b.n	800b784 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b740:	2b00      	cmp	r3, #0
 800b742:	d00f      	beq.n	800b764 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d11a      	bne.n	800b782 <tcp_write_checks+0xd6>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b750:	2b00      	cmp	r3, #0
 800b752:	d116      	bne.n	800b782 <tcp_write_checks+0xd6>
 800b754:	4b0d      	ldr	r3, [pc, #52]	; (800b78c <tcp_write_checks+0xe0>)
 800b756:	f240 1255 	movw	r2, #341	; 0x155
 800b75a:	490f      	ldr	r1, [pc, #60]	; (800b798 <tcp_write_checks+0xec>)
 800b75c:	480d      	ldr	r0, [pc, #52]	; (800b794 <tcp_write_checks+0xe8>)
 800b75e:	f004 fba9 	bl	800feb4 <iprintf>
 800b762:	e00e      	b.n	800b782 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d103      	bne.n	800b774 <tcp_write_checks+0xc8>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b770:	2b00      	cmp	r3, #0
 800b772:	d006      	beq.n	800b782 <tcp_write_checks+0xd6>
 800b774:	4b05      	ldr	r3, [pc, #20]	; (800b78c <tcp_write_checks+0xe0>)
 800b776:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800b77a:	4908      	ldr	r1, [pc, #32]	; (800b79c <tcp_write_checks+0xf0>)
 800b77c:	4805      	ldr	r0, [pc, #20]	; (800b794 <tcp_write_checks+0xe8>)
 800b77e:	f004 fb99 	bl	800feb4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800b782:	2300      	movs	r3, #0
}
 800b784:	4618      	mov	r0, r3
 800b786:	3708      	adds	r7, #8
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	08012ef8 	.word	0x08012ef8
 800b790:	08013008 	.word	0x08013008
 800b794:	08012f4c 	.word	0x08012f4c
 800b798:	08013028 	.word	0x08013028
 800b79c:	08013064 	.word	0x08013064

0800b7a0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800b7a0:	b590      	push	{r4, r7, lr}
 800b7a2:	b09b      	sub	sp, #108	; 0x6c
 800b7a4:	af04      	add	r7, sp, #16
 800b7a6:	60f8      	str	r0, [r7, #12]
 800b7a8:	60b9      	str	r1, [r7, #8]
 800b7aa:	4611      	mov	r1, r2
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	460b      	mov	r3, r1
 800b7b0:	80fb      	strh	r3, [r7, #6]
 800b7b2:	4613      	mov	r3, r2
 800b7b4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	653b      	str	r3, [r7, #80]	; 0x50
 800b7be:	2300      	movs	r3, #0
 800b7c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d109      	bne.n	800b7fc <tcp_write+0x5c>
 800b7e8:	4ba4      	ldr	r3, [pc, #656]	; (800ba7c <tcp_write+0x2dc>)
 800b7ea:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800b7ee:	49a4      	ldr	r1, [pc, #656]	; (800ba80 <tcp_write+0x2e0>)
 800b7f0:	48a4      	ldr	r0, [pc, #656]	; (800ba84 <tcp_write+0x2e4>)
 800b7f2:	f004 fb5f 	bl	800feb4 <iprintf>
 800b7f6:	f06f 030f 	mvn.w	r3, #15
 800b7fa:	e32a      	b.n	800be52 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b802:	085b      	lsrs	r3, r3, #1
 800b804:	b29a      	uxth	r2, r3
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b80a:	4293      	cmp	r3, r2
 800b80c:	bf28      	it	cs
 800b80e:	4613      	movcs	r3, r2
 800b810:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800b812:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b814:	2b00      	cmp	r3, #0
 800b816:	d102      	bne.n	800b81e <tcp_write+0x7e>
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b81c:	e000      	b.n	800b820 <tcp_write+0x80>
 800b81e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b820:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d109      	bne.n	800b83c <tcp_write+0x9c>
 800b828:	4b94      	ldr	r3, [pc, #592]	; (800ba7c <tcp_write+0x2dc>)
 800b82a:	f240 12ad 	movw	r2, #429	; 0x1ad
 800b82e:	4996      	ldr	r1, [pc, #600]	; (800ba88 <tcp_write+0x2e8>)
 800b830:	4894      	ldr	r0, [pc, #592]	; (800ba84 <tcp_write+0x2e4>)
 800b832:	f004 fb3f 	bl	800feb4 <iprintf>
 800b836:	f06f 030f 	mvn.w	r3, #15
 800b83a:	e30a      	b.n	800be52 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800b83c:	88fb      	ldrh	r3, [r7, #6]
 800b83e:	4619      	mov	r1, r3
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	f7ff ff33 	bl	800b6ac <tcp_write_checks>
 800b846:	4603      	mov	r3, r0
 800b848:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800b84c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b850:	2b00      	cmp	r3, #0
 800b852:	d002      	beq.n	800b85a <tcp_write+0xba>
    return err;
 800b854:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b858:	e2fb      	b.n	800be52 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b860:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b864:	2300      	movs	r3, #0
 800b866:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b86e:	2b00      	cmp	r3, #0
 800b870:	f000 80f6 	beq.w	800ba60 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b878:	653b      	str	r3, [r7, #80]	; 0x50
 800b87a:	e002      	b.n	800b882 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800b87c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d1f8      	bne.n	800b87c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800b88a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b88c:	7a9b      	ldrb	r3, [r3, #10]
 800b88e:	009b      	lsls	r3, r3, #2
 800b890:	b29b      	uxth	r3, r3
 800b892:	f003 0304 	and.w	r3, r3, #4
 800b896:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b898:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b89a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b89c:	891b      	ldrh	r3, [r3, #8]
 800b89e:	4619      	mov	r1, r3
 800b8a0:	8c3b      	ldrh	r3, [r7, #32]
 800b8a2:	440b      	add	r3, r1
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	da06      	bge.n	800b8b6 <tcp_write+0x116>
 800b8a8:	4b74      	ldr	r3, [pc, #464]	; (800ba7c <tcp_write+0x2dc>)
 800b8aa:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b8ae:	4977      	ldr	r1, [pc, #476]	; (800ba8c <tcp_write+0x2ec>)
 800b8b0:	4874      	ldr	r0, [pc, #464]	; (800ba84 <tcp_write+0x2e4>)
 800b8b2:	f004 faff 	bl	800feb4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b8b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8b8:	891a      	ldrh	r2, [r3, #8]
 800b8ba:	8c3b      	ldrh	r3, [r7, #32]
 800b8bc:	4413      	add	r3, r2
 800b8be:	b29b      	uxth	r3, r3
 800b8c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b8c2:	1ad3      	subs	r3, r2, r3
 800b8c4:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b8cc:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800b8ce:	8a7b      	ldrh	r3, [r7, #18]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d026      	beq.n	800b922 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800b8d4:	8a7b      	ldrh	r3, [r7, #18]
 800b8d6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	d206      	bcs.n	800b8ea <tcp_write+0x14a>
 800b8dc:	4b67      	ldr	r3, [pc, #412]	; (800ba7c <tcp_write+0x2dc>)
 800b8de:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800b8e2:	496b      	ldr	r1, [pc, #428]	; (800ba90 <tcp_write+0x2f0>)
 800b8e4:	4867      	ldr	r0, [pc, #412]	; (800ba84 <tcp_write+0x2e4>)
 800b8e6:	f004 fae5 	bl	800feb4 <iprintf>
      seg = last_unsent;
 800b8ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8ec:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800b8ee:	8a7b      	ldrh	r3, [r7, #18]
 800b8f0:	88fa      	ldrh	r2, [r7, #6]
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	bf28      	it	cs
 800b8f6:	4613      	movcs	r3, r2
 800b8f8:	b29b      	uxth	r3, r3
 800b8fa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	bf28      	it	cs
 800b900:	4613      	movcs	r3, r2
 800b902:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800b904:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b908:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b90a:	4413      	add	r3, r2
 800b90c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800b910:	8a7a      	ldrh	r2, [r7, #18]
 800b912:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b914:	1ad3      	subs	r3, r2, r3
 800b916:	b29b      	uxth	r3, r3
 800b918:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800b91a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b91c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b91e:	1ad3      	subs	r3, r2, r3
 800b920:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b922:	8a7b      	ldrh	r3, [r7, #18]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d00b      	beq.n	800b940 <tcp_write+0x1a0>
 800b928:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b92c:	88fb      	ldrh	r3, [r7, #6]
 800b92e:	429a      	cmp	r2, r3
 800b930:	d006      	beq.n	800b940 <tcp_write+0x1a0>
 800b932:	4b52      	ldr	r3, [pc, #328]	; (800ba7c <tcp_write+0x2dc>)
 800b934:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b938:	4956      	ldr	r1, [pc, #344]	; (800ba94 <tcp_write+0x2f4>)
 800b93a:	4852      	ldr	r0, [pc, #328]	; (800ba84 <tcp_write+0x2e4>)
 800b93c:	f004 faba 	bl	800feb4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800b940:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b944:	88fb      	ldrh	r3, [r7, #6]
 800b946:	429a      	cmp	r2, r3
 800b948:	f080 8167 	bcs.w	800bc1a <tcp_write+0x47a>
 800b94c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b94e:	2b00      	cmp	r3, #0
 800b950:	f000 8163 	beq.w	800bc1a <tcp_write+0x47a>
 800b954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b956:	891b      	ldrh	r3, [r3, #8]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	f000 815e 	beq.w	800bc1a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b95e:	88fa      	ldrh	r2, [r7, #6]
 800b960:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b964:	1ad2      	subs	r2, r2, r3
 800b966:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b968:	4293      	cmp	r3, r2
 800b96a:	bfa8      	it	ge
 800b96c:	4613      	movge	r3, r2
 800b96e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800b970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b972:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b974:	797b      	ldrb	r3, [r7, #5]
 800b976:	f003 0301 	and.w	r3, r3, #1
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d027      	beq.n	800b9ce <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800b97e:	f107 0012 	add.w	r0, r7, #18
 800b982:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b984:	8bf9      	ldrh	r1, [r7, #30]
 800b986:	2301      	movs	r3, #1
 800b988:	9302      	str	r3, [sp, #8]
 800b98a:	797b      	ldrb	r3, [r7, #5]
 800b98c:	9301      	str	r3, [sp, #4]
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	9300      	str	r3, [sp, #0]
 800b992:	4603      	mov	r3, r0
 800b994:	2000      	movs	r0, #0
 800b996:	f7ff fe0f 	bl	800b5b8 <tcp_pbuf_prealloc>
 800b99a:	6578      	str	r0, [r7, #84]	; 0x54
 800b99c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	f000 8225 	beq.w	800bdee <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800b9a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9a6:	6858      	ldr	r0, [r3, #4]
 800b9a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b9ac:	68ba      	ldr	r2, [r7, #8]
 800b9ae:	4413      	add	r3, r2
 800b9b0:	8bfa      	ldrh	r2, [r7, #30]
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	f004 fa4e 	bl	800fe54 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800b9b8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b9ba:	f7fb f8a5 	bl	8006b08 <pbuf_clen>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b9c6:	4413      	add	r3, r2
 800b9c8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800b9cc:	e041      	b.n	800ba52 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800b9ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9d0:	685b      	ldr	r3, [r3, #4]
 800b9d2:	637b      	str	r3, [r7, #52]	; 0x34
 800b9d4:	e002      	b.n	800b9dc <tcp_write+0x23c>
 800b9d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	637b      	str	r3, [r7, #52]	; 0x34
 800b9dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d1f8      	bne.n	800b9d6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b9e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9e6:	7b1b      	ldrb	r3, [r3, #12]
 800b9e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d115      	bne.n	800ba1c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800b9f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9f6:	8952      	ldrh	r2, [r2, #10]
 800b9f8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b9fa:	68ba      	ldr	r2, [r7, #8]
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d10d      	bne.n	800ba1c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800ba00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d006      	beq.n	800ba16 <tcp_write+0x276>
 800ba08:	4b1c      	ldr	r3, [pc, #112]	; (800ba7c <tcp_write+0x2dc>)
 800ba0a:	f240 2231 	movw	r2, #561	; 0x231
 800ba0e:	4922      	ldr	r1, [pc, #136]	; (800ba98 <tcp_write+0x2f8>)
 800ba10:	481c      	ldr	r0, [pc, #112]	; (800ba84 <tcp_write+0x2e4>)
 800ba12:	f004 fa4f 	bl	800feb4 <iprintf>
          extendlen = seglen;
 800ba16:	8bfb      	ldrh	r3, [r7, #30]
 800ba18:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ba1a:	e01a      	b.n	800ba52 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800ba1c:	8bfb      	ldrh	r3, [r7, #30]
 800ba1e:	2201      	movs	r2, #1
 800ba20:	4619      	mov	r1, r3
 800ba22:	2000      	movs	r0, #0
 800ba24:	f7fa fd04 	bl	8006430 <pbuf_alloc>
 800ba28:	6578      	str	r0, [r7, #84]	; 0x54
 800ba2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	f000 81e0 	beq.w	800bdf2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800ba32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ba36:	68ba      	ldr	r2, [r7, #8]
 800ba38:	441a      	add	r2, r3
 800ba3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba3c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800ba3e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ba40:	f7fb f862 	bl	8006b08 <pbuf_clen>
 800ba44:	4603      	mov	r3, r0
 800ba46:	461a      	mov	r2, r3
 800ba48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ba4c:	4413      	add	r3, r2
 800ba4e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800ba52:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ba56:	8bfb      	ldrh	r3, [r7, #30]
 800ba58:	4413      	add	r3, r2
 800ba5a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ba5e:	e0dc      	b.n	800bc1a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	f000 80d7 	beq.w	800bc1a <tcp_write+0x47a>
 800ba6c:	4b03      	ldr	r3, [pc, #12]	; (800ba7c <tcp_write+0x2dc>)
 800ba6e:	f240 224a 	movw	r2, #586	; 0x24a
 800ba72:	490a      	ldr	r1, [pc, #40]	; (800ba9c <tcp_write+0x2fc>)
 800ba74:	4803      	ldr	r0, [pc, #12]	; (800ba84 <tcp_write+0x2e4>)
 800ba76:	f004 fa1d 	bl	800feb4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800ba7a:	e0ce      	b.n	800bc1a <tcp_write+0x47a>
 800ba7c:	08012ef8 	.word	0x08012ef8
 800ba80:	08013098 	.word	0x08013098
 800ba84:	08012f4c 	.word	0x08012f4c
 800ba88:	080130b0 	.word	0x080130b0
 800ba8c:	080130e4 	.word	0x080130e4
 800ba90:	080130fc 	.word	0x080130fc
 800ba94:	0801311c 	.word	0x0801311c
 800ba98:	0801313c 	.word	0x0801313c
 800ba9c:	08013168 	.word	0x08013168
    struct pbuf *p;
    u16_t left = len - pos;
 800baa0:	88fa      	ldrh	r2, [r7, #6]
 800baa2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800baa6:	1ad3      	subs	r3, r2, r3
 800baa8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800baaa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800baae:	b29b      	uxth	r3, r3
 800bab0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bab2:	1ad3      	subs	r3, r2, r3
 800bab4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800bab6:	8b7a      	ldrh	r2, [r7, #26]
 800bab8:	8bbb      	ldrh	r3, [r7, #28]
 800baba:	4293      	cmp	r3, r2
 800babc:	bf28      	it	cs
 800babe:	4613      	movcs	r3, r2
 800bac0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bac2:	797b      	ldrb	r3, [r7, #5]
 800bac4:	f003 0301 	and.w	r3, r3, #1
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d036      	beq.n	800bb3a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800bacc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bad0:	b29a      	uxth	r2, r3
 800bad2:	8b3b      	ldrh	r3, [r7, #24]
 800bad4:	4413      	add	r3, r2
 800bad6:	b299      	uxth	r1, r3
 800bad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bada:	2b00      	cmp	r3, #0
 800badc:	bf0c      	ite	eq
 800bade:	2301      	moveq	r3, #1
 800bae0:	2300      	movne	r3, #0
 800bae2:	b2db      	uxtb	r3, r3
 800bae4:	f107 0012 	add.w	r0, r7, #18
 800bae8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800baea:	9302      	str	r3, [sp, #8]
 800baec:	797b      	ldrb	r3, [r7, #5]
 800baee:	9301      	str	r3, [sp, #4]
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	9300      	str	r3, [sp, #0]
 800baf4:	4603      	mov	r3, r0
 800baf6:	2036      	movs	r0, #54	; 0x36
 800baf8:	f7ff fd5e 	bl	800b5b8 <tcp_pbuf_prealloc>
 800bafc:	6338      	str	r0, [r7, #48]	; 0x30
 800bafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	f000 8178 	beq.w	800bdf6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800bb06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb08:	895b      	ldrh	r3, [r3, #10]
 800bb0a:	8b3a      	ldrh	r2, [r7, #24]
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	d906      	bls.n	800bb1e <tcp_write+0x37e>
 800bb10:	4b8c      	ldr	r3, [pc, #560]	; (800bd44 <tcp_write+0x5a4>)
 800bb12:	f240 2266 	movw	r2, #614	; 0x266
 800bb16:	498c      	ldr	r1, [pc, #560]	; (800bd48 <tcp_write+0x5a8>)
 800bb18:	488c      	ldr	r0, [pc, #560]	; (800bd4c <tcp_write+0x5ac>)
 800bb1a:	f004 f9cb 	bl	800feb4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800bb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb20:	685a      	ldr	r2, [r3, #4]
 800bb22:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bb26:	18d0      	adds	r0, r2, r3
 800bb28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bb2c:	68ba      	ldr	r2, [r7, #8]
 800bb2e:	4413      	add	r3, r2
 800bb30:	8b3a      	ldrh	r2, [r7, #24]
 800bb32:	4619      	mov	r1, r3
 800bb34:	f004 f98e 	bl	800fe54 <memcpy>
 800bb38:	e02f      	b.n	800bb9a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800bb3a:	8a7b      	ldrh	r3, [r7, #18]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d006      	beq.n	800bb4e <tcp_write+0x3ae>
 800bb40:	4b80      	ldr	r3, [pc, #512]	; (800bd44 <tcp_write+0x5a4>)
 800bb42:	f240 2271 	movw	r2, #625	; 0x271
 800bb46:	4982      	ldr	r1, [pc, #520]	; (800bd50 <tcp_write+0x5b0>)
 800bb48:	4880      	ldr	r0, [pc, #512]	; (800bd4c <tcp_write+0x5ac>)
 800bb4a:	f004 f9b3 	bl	800feb4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800bb4e:	8b3b      	ldrh	r3, [r7, #24]
 800bb50:	2201      	movs	r2, #1
 800bb52:	4619      	mov	r1, r3
 800bb54:	2036      	movs	r0, #54	; 0x36
 800bb56:	f7fa fc6b 	bl	8006430 <pbuf_alloc>
 800bb5a:	6178      	str	r0, [r7, #20]
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	f000 814b 	beq.w	800bdfa <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800bb64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bb68:	68ba      	ldr	r2, [r7, #8]
 800bb6a:	441a      	add	r2, r3
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bb70:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	2036      	movs	r0, #54	; 0x36
 800bb7e:	f7fa fc57 	bl	8006430 <pbuf_alloc>
 800bb82:	6338      	str	r0, [r7, #48]	; 0x30
 800bb84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d103      	bne.n	800bb92 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800bb8a:	6978      	ldr	r0, [r7, #20]
 800bb8c:	f7fa ff34 	bl	80069f8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800bb90:	e136      	b.n	800be00 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800bb92:	6979      	ldr	r1, [r7, #20]
 800bb94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb96:	f7fa fff1 	bl	8006b7c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800bb9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb9c:	f7fa ffb4 	bl	8006b08 <pbuf_clen>
 800bba0:	4603      	mov	r3, r0
 800bba2:	461a      	mov	r2, r3
 800bba4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bba8:	4413      	add	r3, r2
 800bbaa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800bbae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bbb2:	2b09      	cmp	r3, #9
 800bbb4:	d903      	bls.n	800bbbe <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800bbb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbb8:	f7fa ff1e 	bl	80069f8 <pbuf_free>
      goto memerr;
 800bbbc:	e120      	b.n	800be00 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bbc2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bbc6:	441a      	add	r2, r3
 800bbc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbcc:	9300      	str	r3, [sp, #0]
 800bbce:	4613      	mov	r3, r2
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bbd4:	68f8      	ldr	r0, [r7, #12]
 800bbd6:	f7ff fc51 	bl	800b47c <tcp_create_segment>
 800bbda:	64f8      	str	r0, [r7, #76]	; 0x4c
 800bbdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	f000 810d 	beq.w	800bdfe <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800bbe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d102      	bne.n	800bbf0 <tcp_write+0x450>
      queue = seg;
 800bbea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbec:	647b      	str	r3, [r7, #68]	; 0x44
 800bbee:	e00c      	b.n	800bc0a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800bbf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d106      	bne.n	800bc04 <tcp_write+0x464>
 800bbf6:	4b53      	ldr	r3, [pc, #332]	; (800bd44 <tcp_write+0x5a4>)
 800bbf8:	f240 22ab 	movw	r2, #683	; 0x2ab
 800bbfc:	4955      	ldr	r1, [pc, #340]	; (800bd54 <tcp_write+0x5b4>)
 800bbfe:	4853      	ldr	r0, [pc, #332]	; (800bd4c <tcp_write+0x5ac>)
 800bc00:	f004 f958 	bl	800feb4 <iprintf>
      prev_seg->next = seg;
 800bc04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bc08:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800bc0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc0c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800bc0e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bc12:	8b3b      	ldrh	r3, [r7, #24]
 800bc14:	4413      	add	r3, r2
 800bc16:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800bc1a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bc1e:	88fb      	ldrh	r3, [r7, #6]
 800bc20:	429a      	cmp	r2, r3
 800bc22:	f4ff af3d 	bcc.w	800baa0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800bc26:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d02c      	beq.n	800bc86 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800bc2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc32:	e01e      	b.n	800bc72 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800bc34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc36:	891a      	ldrh	r2, [r3, #8]
 800bc38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bc3a:	4413      	add	r3, r2
 800bc3c:	b29a      	uxth	r2, r3
 800bc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc40:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800bc42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d110      	bne.n	800bc6c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800bc4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc50:	8952      	ldrh	r2, [r2, #10]
 800bc52:	4413      	add	r3, r2
 800bc54:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800bc56:	68b9      	ldr	r1, [r7, #8]
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f004 f8fb 	bl	800fe54 <memcpy>
        p->len += oversize_used;
 800bc5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc60:	895a      	ldrh	r2, [r3, #10]
 800bc62:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bc64:	4413      	add	r3, r2
 800bc66:	b29a      	uxth	r2, r3
 800bc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc6a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800bc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d1dd      	bne.n	800bc34 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800bc78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc7a:	891a      	ldrh	r2, [r3, #8]
 800bc7c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bc7e:	4413      	add	r3, r2
 800bc80:	b29a      	uxth	r2, r3
 800bc82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc84:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800bc86:	8a7a      	ldrh	r2, [r7, #18]
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800bc8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d018      	beq.n	800bcc6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800bc94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d106      	bne.n	800bca8 <tcp_write+0x508>
 800bc9a:	4b2a      	ldr	r3, [pc, #168]	; (800bd44 <tcp_write+0x5a4>)
 800bc9c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800bca0:	492d      	ldr	r1, [pc, #180]	; (800bd58 <tcp_write+0x5b8>)
 800bca2:	482a      	ldr	r0, [pc, #168]	; (800bd4c <tcp_write+0x5ac>)
 800bca4:	f004 f906 	bl	800feb4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800bca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcaa:	685b      	ldr	r3, [r3, #4]
 800bcac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f7fa ff64 	bl	8006b7c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800bcb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcb6:	891a      	ldrh	r2, [r3, #8]
 800bcb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bcba:	891b      	ldrh	r3, [r3, #8]
 800bcbc:	4413      	add	r3, r2
 800bcbe:	b29a      	uxth	r2, r3
 800bcc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcc2:	811a      	strh	r2, [r3, #8]
 800bcc4:	e037      	b.n	800bd36 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800bcc6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d034      	beq.n	800bd36 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800bccc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d003      	beq.n	800bcda <tcp_write+0x53a>
 800bcd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcd4:	685b      	ldr	r3, [r3, #4]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d106      	bne.n	800bce8 <tcp_write+0x548>
 800bcda:	4b1a      	ldr	r3, [pc, #104]	; (800bd44 <tcp_write+0x5a4>)
 800bcdc:	f240 22e6 	movw	r2, #742	; 0x2e6
 800bce0:	491e      	ldr	r1, [pc, #120]	; (800bd5c <tcp_write+0x5bc>)
 800bce2:	481a      	ldr	r0, [pc, #104]	; (800bd4c <tcp_write+0x5ac>)
 800bce4:	f004 f8e6 	bl	800feb4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800bce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcea:	685b      	ldr	r3, [r3, #4]
 800bcec:	62bb      	str	r3, [r7, #40]	; 0x28
 800bcee:	e009      	b.n	800bd04 <tcp_write+0x564>
      p->tot_len += extendlen;
 800bcf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf2:	891a      	ldrh	r2, [r3, #8]
 800bcf4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bcf6:	4413      	add	r3, r2
 800bcf8:	b29a      	uxth	r2, r3
 800bcfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcfc:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800bcfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d1f1      	bne.n	800bcf0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800bd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0e:	891a      	ldrh	r2, [r3, #8]
 800bd10:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bd12:	4413      	add	r3, r2
 800bd14:	b29a      	uxth	r2, r3
 800bd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd18:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800bd1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1c:	895a      	ldrh	r2, [r3, #10]
 800bd1e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bd20:	4413      	add	r3, r2
 800bd22:	b29a      	uxth	r2, r3
 800bd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd26:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800bd28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd2a:	891a      	ldrh	r2, [r3, #8]
 800bd2c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bd2e:	4413      	add	r3, r2
 800bd30:	b29a      	uxth	r2, r3
 800bd32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd34:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800bd36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d111      	bne.n	800bd60 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd40:	66da      	str	r2, [r3, #108]	; 0x6c
 800bd42:	e010      	b.n	800bd66 <tcp_write+0x5c6>
 800bd44:	08012ef8 	.word	0x08012ef8
 800bd48:	08013198 	.word	0x08013198
 800bd4c:	08012f4c 	.word	0x08012f4c
 800bd50:	080131d8 	.word	0x080131d8
 800bd54:	080131e8 	.word	0x080131e8
 800bd58:	080131fc 	.word	0x080131fc
 800bd5c:	08013234 	.word	0x08013234
  } else {
    last_unsent->next = queue;
 800bd60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd64:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bd6a:	88fb      	ldrh	r3, [r7, #6]
 800bd6c:	441a      	add	r2, r3
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800bd78:	88fb      	ldrh	r3, [r7, #6]
 800bd7a:	1ad3      	subs	r3, r2, r3
 800bd7c:	b29a      	uxth	r2, r3
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800bd8a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d00e      	beq.n	800bdb6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d10a      	bne.n	800bdb6 <tcp_write+0x616>
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d106      	bne.n	800bdb6 <tcp_write+0x616>
 800bda8:	4b2c      	ldr	r3, [pc, #176]	; (800be5c <tcp_write+0x6bc>)
 800bdaa:	f240 3212 	movw	r2, #786	; 0x312
 800bdae:	492c      	ldr	r1, [pc, #176]	; (800be60 <tcp_write+0x6c0>)
 800bdb0:	482c      	ldr	r0, [pc, #176]	; (800be64 <tcp_write+0x6c4>)
 800bdb2:	f004 f87f 	bl	800feb4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800bdb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d016      	beq.n	800bdea <tcp_write+0x64a>
 800bdbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdbe:	68db      	ldr	r3, [r3, #12]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d012      	beq.n	800bdea <tcp_write+0x64a>
 800bdc4:	797b      	ldrb	r3, [r7, #5]
 800bdc6:	f003 0302 	and.w	r3, r3, #2
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d10d      	bne.n	800bdea <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800bdce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdd0:	68db      	ldr	r3, [r3, #12]
 800bdd2:	899b      	ldrh	r3, [r3, #12]
 800bdd4:	b29c      	uxth	r4, r3
 800bdd6:	2008      	movs	r0, #8
 800bdd8:	f7f9 faf0 	bl	80053bc <lwip_htons>
 800bddc:	4603      	mov	r3, r0
 800bdde:	461a      	mov	r2, r3
 800bde0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bde2:	68db      	ldr	r3, [r3, #12]
 800bde4:	4322      	orrs	r2, r4
 800bde6:	b292      	uxth	r2, r2
 800bde8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800bdea:	2300      	movs	r3, #0
 800bdec:	e031      	b.n	800be52 <tcp_write+0x6b2>
          goto memerr;
 800bdee:	bf00      	nop
 800bdf0:	e006      	b.n	800be00 <tcp_write+0x660>
            goto memerr;
 800bdf2:	bf00      	nop
 800bdf4:	e004      	b.n	800be00 <tcp_write+0x660>
        goto memerr;
 800bdf6:	bf00      	nop
 800bdf8:	e002      	b.n	800be00 <tcp_write+0x660>
        goto memerr;
 800bdfa:	bf00      	nop
 800bdfc:	e000      	b.n	800be00 <tcp_write+0x660>
      goto memerr;
 800bdfe:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	8b5b      	ldrh	r3, [r3, #26]
 800be04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be08:	b29a      	uxth	r2, r3
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800be0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be10:	2b00      	cmp	r3, #0
 800be12:	d002      	beq.n	800be1a <tcp_write+0x67a>
    pbuf_free(concat_p);
 800be14:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800be16:	f7fa fdef 	bl	80069f8 <pbuf_free>
  }
  if (queue != NULL) {
 800be1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d002      	beq.n	800be26 <tcp_write+0x686>
    tcp_segs_free(queue);
 800be20:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800be22:	f7fc fb51 	bl	80084c8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d00e      	beq.n	800be4e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be34:	2b00      	cmp	r3, #0
 800be36:	d10a      	bne.n	800be4e <tcp_write+0x6ae>
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d106      	bne.n	800be4e <tcp_write+0x6ae>
 800be40:	4b06      	ldr	r3, [pc, #24]	; (800be5c <tcp_write+0x6bc>)
 800be42:	f240 3227 	movw	r2, #807	; 0x327
 800be46:	4906      	ldr	r1, [pc, #24]	; (800be60 <tcp_write+0x6c0>)
 800be48:	4806      	ldr	r0, [pc, #24]	; (800be64 <tcp_write+0x6c4>)
 800be4a:	f004 f833 	bl	800feb4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800be4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800be52:	4618      	mov	r0, r3
 800be54:	375c      	adds	r7, #92	; 0x5c
 800be56:	46bd      	mov	sp, r7
 800be58:	bd90      	pop	{r4, r7, pc}
 800be5a:	bf00      	nop
 800be5c:	08012ef8 	.word	0x08012ef8
 800be60:	0801326c 	.word	0x0801326c
 800be64:	08012f4c 	.word	0x08012f4c

0800be68 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800be68:	b590      	push	{r4, r7, lr}
 800be6a:	b08b      	sub	sp, #44	; 0x2c
 800be6c:	af02      	add	r7, sp, #8
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	460b      	mov	r3, r1
 800be72:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800be74:	2300      	movs	r3, #0
 800be76:	61fb      	str	r3, [r7, #28]
 800be78:	2300      	movs	r3, #0
 800be7a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800be7c:	2300      	movs	r3, #0
 800be7e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d106      	bne.n	800be94 <tcp_split_unsent_seg+0x2c>
 800be86:	4b95      	ldr	r3, [pc, #596]	; (800c0dc <tcp_split_unsent_seg+0x274>)
 800be88:	f240 324b 	movw	r2, #843	; 0x34b
 800be8c:	4994      	ldr	r1, [pc, #592]	; (800c0e0 <tcp_split_unsent_seg+0x278>)
 800be8e:	4895      	ldr	r0, [pc, #596]	; (800c0e4 <tcp_split_unsent_seg+0x27c>)
 800be90:	f004 f810 	bl	800feb4 <iprintf>

  useg = pcb->unsent;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be98:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d102      	bne.n	800bea6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800bea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bea4:	e116      	b.n	800c0d4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800bea6:	887b      	ldrh	r3, [r7, #2]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d109      	bne.n	800bec0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800beac:	4b8b      	ldr	r3, [pc, #556]	; (800c0dc <tcp_split_unsent_seg+0x274>)
 800beae:	f240 3253 	movw	r2, #851	; 0x353
 800beb2:	498d      	ldr	r1, [pc, #564]	; (800c0e8 <tcp_split_unsent_seg+0x280>)
 800beb4:	488b      	ldr	r0, [pc, #556]	; (800c0e4 <tcp_split_unsent_seg+0x27c>)
 800beb6:	f003 fffd 	bl	800feb4 <iprintf>
    return ERR_VAL;
 800beba:	f06f 0305 	mvn.w	r3, #5
 800bebe:	e109      	b.n	800c0d4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800bec0:	697b      	ldr	r3, [r7, #20]
 800bec2:	891b      	ldrh	r3, [r3, #8]
 800bec4:	887a      	ldrh	r2, [r7, #2]
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d301      	bcc.n	800bece <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800beca:	2300      	movs	r3, #0
 800becc:	e102      	b.n	800c0d4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bed2:	887a      	ldrh	r2, [r7, #2]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d906      	bls.n	800bee6 <tcp_split_unsent_seg+0x7e>
 800bed8:	4b80      	ldr	r3, [pc, #512]	; (800c0dc <tcp_split_unsent_seg+0x274>)
 800beda:	f240 325b 	movw	r2, #859	; 0x35b
 800bede:	4983      	ldr	r1, [pc, #524]	; (800c0ec <tcp_split_unsent_seg+0x284>)
 800bee0:	4880      	ldr	r0, [pc, #512]	; (800c0e4 <tcp_split_unsent_seg+0x27c>)
 800bee2:	f003 ffe7 	bl	800feb4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	891b      	ldrh	r3, [r3, #8]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d106      	bne.n	800befc <tcp_split_unsent_seg+0x94>
 800beee:	4b7b      	ldr	r3, [pc, #492]	; (800c0dc <tcp_split_unsent_seg+0x274>)
 800bef0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800bef4:	497e      	ldr	r1, [pc, #504]	; (800c0f0 <tcp_split_unsent_seg+0x288>)
 800bef6:	487b      	ldr	r0, [pc, #492]	; (800c0e4 <tcp_split_unsent_seg+0x27c>)
 800bef8:	f003 ffdc 	bl	800feb4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	7a9b      	ldrb	r3, [r3, #10]
 800bf00:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800bf02:	7bfb      	ldrb	r3, [r7, #15]
 800bf04:	009b      	lsls	r3, r3, #2
 800bf06:	b2db      	uxtb	r3, r3
 800bf08:	f003 0304 	and.w	r3, r3, #4
 800bf0c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	891a      	ldrh	r2, [r3, #8]
 800bf12:	887b      	ldrh	r3, [r7, #2]
 800bf14:	1ad3      	subs	r3, r2, r3
 800bf16:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800bf18:	7bbb      	ldrb	r3, [r7, #14]
 800bf1a:	b29a      	uxth	r2, r3
 800bf1c:	89bb      	ldrh	r3, [r7, #12]
 800bf1e:	4413      	add	r3, r2
 800bf20:	b29b      	uxth	r3, r3
 800bf22:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bf26:	4619      	mov	r1, r3
 800bf28:	2036      	movs	r0, #54	; 0x36
 800bf2a:	f7fa fa81 	bl	8006430 <pbuf_alloc>
 800bf2e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	f000 80b7 	beq.w	800c0a6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	685b      	ldr	r3, [r3, #4]
 800bf3c:	891a      	ldrh	r2, [r3, #8]
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	891b      	ldrh	r3, [r3, #8]
 800bf42:	1ad3      	subs	r3, r2, r3
 800bf44:	b29a      	uxth	r2, r3
 800bf46:	887b      	ldrh	r3, [r7, #2]
 800bf48:	4413      	add	r3, r2
 800bf4a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	6858      	ldr	r0, [r3, #4]
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	685a      	ldr	r2, [r3, #4]
 800bf54:	7bbb      	ldrb	r3, [r7, #14]
 800bf56:	18d1      	adds	r1, r2, r3
 800bf58:	897b      	ldrh	r3, [r7, #10]
 800bf5a:	89ba      	ldrh	r2, [r7, #12]
 800bf5c:	f7fa ff36 	bl	8006dcc <pbuf_copy_partial>
 800bf60:	4603      	mov	r3, r0
 800bf62:	461a      	mov	r2, r3
 800bf64:	89bb      	ldrh	r3, [r7, #12]
 800bf66:	4293      	cmp	r3, r2
 800bf68:	f040 809f 	bne.w	800c0aa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	68db      	ldr	r3, [r3, #12]
 800bf70:	899b      	ldrh	r3, [r3, #12]
 800bf72:	b29b      	uxth	r3, r3
 800bf74:	4618      	mov	r0, r3
 800bf76:	f7f9 fa21 	bl	80053bc <lwip_htons>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf82:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800bf84:	2300      	movs	r3, #0
 800bf86:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800bf88:	7efb      	ldrb	r3, [r7, #27]
 800bf8a:	f003 0308 	and.w	r3, r3, #8
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d007      	beq.n	800bfa2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800bf92:	7efb      	ldrb	r3, [r7, #27]
 800bf94:	f023 0308 	bic.w	r3, r3, #8
 800bf98:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800bf9a:	7ebb      	ldrb	r3, [r7, #26]
 800bf9c:	f043 0308 	orr.w	r3, r3, #8
 800bfa0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800bfa2:	7efb      	ldrb	r3, [r7, #27]
 800bfa4:	f003 0301 	and.w	r3, r3, #1
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d007      	beq.n	800bfbc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800bfac:	7efb      	ldrb	r3, [r7, #27]
 800bfae:	f023 0301 	bic.w	r3, r3, #1
 800bfb2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800bfb4:	7ebb      	ldrb	r3, [r7, #26]
 800bfb6:	f043 0301 	orr.w	r3, r3, #1
 800bfba:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	68db      	ldr	r3, [r3, #12]
 800bfc0:	685b      	ldr	r3, [r3, #4]
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f7f9 fa0f 	bl	80053e6 <lwip_htonl>
 800bfc8:	4602      	mov	r2, r0
 800bfca:	887b      	ldrh	r3, [r7, #2]
 800bfcc:	18d1      	adds	r1, r2, r3
 800bfce:	7eba      	ldrb	r2, [r7, #26]
 800bfd0:	7bfb      	ldrb	r3, [r7, #15]
 800bfd2:	9300      	str	r3, [sp, #0]
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	6939      	ldr	r1, [r7, #16]
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f7ff fa4f 	bl	800b47c <tcp_create_segment>
 800bfde:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800bfe0:	69fb      	ldr	r3, [r7, #28]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d063      	beq.n	800c0ae <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	685b      	ldr	r3, [r3, #4]
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7fa fd8c 	bl	8006b08 <pbuf_clen>
 800bff0:	4603      	mov	r3, r0
 800bff2:	461a      	mov	r2, r3
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bffa:	1a9b      	subs	r3, r3, r2
 800bffc:	b29a      	uxth	r2, r3
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	6858      	ldr	r0, [r3, #4]
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	685b      	ldr	r3, [r3, #4]
 800c00c:	891a      	ldrh	r2, [r3, #8]
 800c00e:	89bb      	ldrh	r3, [r7, #12]
 800c010:	1ad3      	subs	r3, r2, r3
 800c012:	b29b      	uxth	r3, r3
 800c014:	4619      	mov	r1, r3
 800c016:	f7fa fb69 	bl	80066ec <pbuf_realloc>
  useg->len -= remainder;
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	891a      	ldrh	r2, [r3, #8]
 800c01e:	89bb      	ldrh	r3, [r7, #12]
 800c020:	1ad3      	subs	r3, r2, r3
 800c022:	b29a      	uxth	r2, r3
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	68db      	ldr	r3, [r3, #12]
 800c02c:	899b      	ldrh	r3, [r3, #12]
 800c02e:	b29c      	uxth	r4, r3
 800c030:	7efb      	ldrb	r3, [r7, #27]
 800c032:	b29b      	uxth	r3, r3
 800c034:	4618      	mov	r0, r3
 800c036:	f7f9 f9c1 	bl	80053bc <lwip_htons>
 800c03a:	4603      	mov	r3, r0
 800c03c:	461a      	mov	r2, r3
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	68db      	ldr	r3, [r3, #12]
 800c042:	4322      	orrs	r2, r4
 800c044:	b292      	uxth	r2, r2
 800c046:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	4618      	mov	r0, r3
 800c04e:	f7fa fd5b 	bl	8006b08 <pbuf_clen>
 800c052:	4603      	mov	r3, r0
 800c054:	461a      	mov	r2, r3
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c05c:	4413      	add	r3, r2
 800c05e:	b29a      	uxth	r2, r3
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c066:	69fb      	ldr	r3, [r7, #28]
 800c068:	685b      	ldr	r3, [r3, #4]
 800c06a:	4618      	mov	r0, r3
 800c06c:	f7fa fd4c 	bl	8006b08 <pbuf_clen>
 800c070:	4603      	mov	r3, r0
 800c072:	461a      	mov	r2, r3
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c07a:	4413      	add	r3, r2
 800c07c:	b29a      	uxth	r2, r3
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	681a      	ldr	r2, [r3, #0]
 800c088:	69fb      	ldr	r3, [r7, #28]
 800c08a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	69fa      	ldr	r2, [r7, #28]
 800c090:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800c092:	69fb      	ldr	r3, [r7, #28]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d103      	bne.n	800c0a2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2200      	movs	r2, #0
 800c09e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	e016      	b.n	800c0d4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800c0a6:	bf00      	nop
 800c0a8:	e002      	b.n	800c0b0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c0aa:	bf00      	nop
 800c0ac:	e000      	b.n	800c0b0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c0ae:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800c0b0:	69fb      	ldr	r3, [r7, #28]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d006      	beq.n	800c0c4 <tcp_split_unsent_seg+0x25c>
 800c0b6:	4b09      	ldr	r3, [pc, #36]	; (800c0dc <tcp_split_unsent_seg+0x274>)
 800c0b8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800c0bc:	490d      	ldr	r1, [pc, #52]	; (800c0f4 <tcp_split_unsent_seg+0x28c>)
 800c0be:	4809      	ldr	r0, [pc, #36]	; (800c0e4 <tcp_split_unsent_seg+0x27c>)
 800c0c0:	f003 fef8 	bl	800feb4 <iprintf>
  if (p != NULL) {
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d002      	beq.n	800c0d0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800c0ca:	6938      	ldr	r0, [r7, #16]
 800c0cc:	f7fa fc94 	bl	80069f8 <pbuf_free>
  }

  return ERR_MEM;
 800c0d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3724      	adds	r7, #36	; 0x24
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd90      	pop	{r4, r7, pc}
 800c0dc:	08012ef8 	.word	0x08012ef8
 800c0e0:	0801328c 	.word	0x0801328c
 800c0e4:	08012f4c 	.word	0x08012f4c
 800c0e8:	080132b0 	.word	0x080132b0
 800c0ec:	080132d4 	.word	0x080132d4
 800c0f0:	080132e4 	.word	0x080132e4
 800c0f4:	080132f4 	.word	0x080132f4

0800c0f8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800c0f8:	b590      	push	{r4, r7, lr}
 800c0fa:	b085      	sub	sp, #20
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d106      	bne.n	800c114 <tcp_send_fin+0x1c>
 800c106:	4b21      	ldr	r3, [pc, #132]	; (800c18c <tcp_send_fin+0x94>)
 800c108:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800c10c:	4920      	ldr	r1, [pc, #128]	; (800c190 <tcp_send_fin+0x98>)
 800c10e:	4821      	ldr	r0, [pc, #132]	; (800c194 <tcp_send_fin+0x9c>)
 800c110:	f003 fed0 	bl	800feb4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d02e      	beq.n	800c17a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c120:	60fb      	str	r3, [r7, #12]
 800c122:	e002      	b.n	800c12a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d1f8      	bne.n	800c124 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	68db      	ldr	r3, [r3, #12]
 800c136:	899b      	ldrh	r3, [r3, #12]
 800c138:	b29b      	uxth	r3, r3
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7f9 f93e 	bl	80053bc <lwip_htons>
 800c140:	4603      	mov	r3, r0
 800c142:	b2db      	uxtb	r3, r3
 800c144:	f003 0307 	and.w	r3, r3, #7
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d116      	bne.n	800c17a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	68db      	ldr	r3, [r3, #12]
 800c150:	899b      	ldrh	r3, [r3, #12]
 800c152:	b29c      	uxth	r4, r3
 800c154:	2001      	movs	r0, #1
 800c156:	f7f9 f931 	bl	80053bc <lwip_htons>
 800c15a:	4603      	mov	r3, r0
 800c15c:	461a      	mov	r2, r3
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	68db      	ldr	r3, [r3, #12]
 800c162:	4322      	orrs	r2, r4
 800c164:	b292      	uxth	r2, r2
 800c166:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	8b5b      	ldrh	r3, [r3, #26]
 800c16c:	f043 0320 	orr.w	r3, r3, #32
 800c170:	b29a      	uxth	r2, r3
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800c176:	2300      	movs	r3, #0
 800c178:	e004      	b.n	800c184 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c17a:	2101      	movs	r1, #1
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f000 f80b 	bl	800c198 <tcp_enqueue_flags>
 800c182:	4603      	mov	r3, r0
}
 800c184:	4618      	mov	r0, r3
 800c186:	3714      	adds	r7, #20
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd90      	pop	{r4, r7, pc}
 800c18c:	08012ef8 	.word	0x08012ef8
 800c190:	08013300 	.word	0x08013300
 800c194:	08012f4c 	.word	0x08012f4c

0800c198 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b08a      	sub	sp, #40	; 0x28
 800c19c:	af02      	add	r7, sp, #8
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	460b      	mov	r3, r1
 800c1a2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c1ac:	78fb      	ldrb	r3, [r7, #3]
 800c1ae:	f003 0303 	and.w	r3, r3, #3
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d106      	bne.n	800c1c4 <tcp_enqueue_flags+0x2c>
 800c1b6:	4b67      	ldr	r3, [pc, #412]	; (800c354 <tcp_enqueue_flags+0x1bc>)
 800c1b8:	f240 4211 	movw	r2, #1041	; 0x411
 800c1bc:	4966      	ldr	r1, [pc, #408]	; (800c358 <tcp_enqueue_flags+0x1c0>)
 800c1be:	4867      	ldr	r0, [pc, #412]	; (800c35c <tcp_enqueue_flags+0x1c4>)
 800c1c0:	f003 fe78 	bl	800feb4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d106      	bne.n	800c1d8 <tcp_enqueue_flags+0x40>
 800c1ca:	4b62      	ldr	r3, [pc, #392]	; (800c354 <tcp_enqueue_flags+0x1bc>)
 800c1cc:	f240 4213 	movw	r2, #1043	; 0x413
 800c1d0:	4963      	ldr	r1, [pc, #396]	; (800c360 <tcp_enqueue_flags+0x1c8>)
 800c1d2:	4862      	ldr	r0, [pc, #392]	; (800c35c <tcp_enqueue_flags+0x1c4>)
 800c1d4:	f003 fe6e 	bl	800feb4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800c1d8:	78fb      	ldrb	r3, [r7, #3]
 800c1da:	f003 0302 	and.w	r3, r3, #2
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d001      	beq.n	800c1e6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c1e6:	7ffb      	ldrb	r3, [r7, #31]
 800c1e8:	009b      	lsls	r3, r3, #2
 800c1ea:	b2db      	uxtb	r3, r3
 800c1ec:	f003 0304 	and.w	r3, r3, #4
 800c1f0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c1f2:	7dfb      	ldrb	r3, [r7, #23]
 800c1f4:	b29b      	uxth	r3, r3
 800c1f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	2036      	movs	r0, #54	; 0x36
 800c1fe:	f7fa f917 	bl	8006430 <pbuf_alloc>
 800c202:	6138      	str	r0, [r7, #16]
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d109      	bne.n	800c21e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	8b5b      	ldrh	r3, [r3, #26]
 800c20e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c212:	b29a      	uxth	r2, r3
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c218:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c21c:	e095      	b.n	800c34a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	895a      	ldrh	r2, [r3, #10]
 800c222:	7dfb      	ldrb	r3, [r7, #23]
 800c224:	b29b      	uxth	r3, r3
 800c226:	429a      	cmp	r2, r3
 800c228:	d206      	bcs.n	800c238 <tcp_enqueue_flags+0xa0>
 800c22a:	4b4a      	ldr	r3, [pc, #296]	; (800c354 <tcp_enqueue_flags+0x1bc>)
 800c22c:	f240 4239 	movw	r2, #1081	; 0x439
 800c230:	494c      	ldr	r1, [pc, #304]	; (800c364 <tcp_enqueue_flags+0x1cc>)
 800c232:	484a      	ldr	r0, [pc, #296]	; (800c35c <tcp_enqueue_flags+0x1c4>)
 800c234:	f003 fe3e 	bl	800feb4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800c23c:	78fa      	ldrb	r2, [r7, #3]
 800c23e:	7ffb      	ldrb	r3, [r7, #31]
 800c240:	9300      	str	r3, [sp, #0]
 800c242:	460b      	mov	r3, r1
 800c244:	6939      	ldr	r1, [r7, #16]
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f7ff f918 	bl	800b47c <tcp_create_segment>
 800c24c:	60f8      	str	r0, [r7, #12]
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d109      	bne.n	800c268 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	8b5b      	ldrh	r3, [r3, #26]
 800c258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c25c:	b29a      	uxth	r2, r3
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c262:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c266:	e070      	b.n	800c34a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	68db      	ldr	r3, [r3, #12]
 800c26c:	f003 0303 	and.w	r3, r3, #3
 800c270:	2b00      	cmp	r3, #0
 800c272:	d006      	beq.n	800c282 <tcp_enqueue_flags+0xea>
 800c274:	4b37      	ldr	r3, [pc, #220]	; (800c354 <tcp_enqueue_flags+0x1bc>)
 800c276:	f240 4242 	movw	r2, #1090	; 0x442
 800c27a:	493b      	ldr	r1, [pc, #236]	; (800c368 <tcp_enqueue_flags+0x1d0>)
 800c27c:	4837      	ldr	r0, [pc, #220]	; (800c35c <tcp_enqueue_flags+0x1c4>)
 800c27e:	f003 fe19 	bl	800feb4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	891b      	ldrh	r3, [r3, #8]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d006      	beq.n	800c298 <tcp_enqueue_flags+0x100>
 800c28a:	4b32      	ldr	r3, [pc, #200]	; (800c354 <tcp_enqueue_flags+0x1bc>)
 800c28c:	f240 4243 	movw	r2, #1091	; 0x443
 800c290:	4936      	ldr	r1, [pc, #216]	; (800c36c <tcp_enqueue_flags+0x1d4>)
 800c292:	4832      	ldr	r0, [pc, #200]	; (800c35c <tcp_enqueue_flags+0x1c4>)
 800c294:	f003 fe0e 	bl	800feb4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d103      	bne.n	800c2a8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	68fa      	ldr	r2, [r7, #12]
 800c2a4:	66da      	str	r2, [r3, #108]	; 0x6c
 800c2a6:	e00d      	b.n	800c2c4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2ac:	61bb      	str	r3, [r7, #24]
 800c2ae:	e002      	b.n	800c2b6 <tcp_enqueue_flags+0x11e>
 800c2b0:	69bb      	ldr	r3, [r7, #24]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	61bb      	str	r3, [r7, #24]
 800c2b6:	69bb      	ldr	r3, [r7, #24]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d1f8      	bne.n	800c2b0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800c2be:	69bb      	ldr	r3, [r7, #24]
 800c2c0:	68fa      	ldr	r2, [r7, #12]
 800c2c2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c2cc:	78fb      	ldrb	r3, [r7, #3]
 800c2ce:	f003 0302 	and.w	r3, r3, #2
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d104      	bne.n	800c2e0 <tcp_enqueue_flags+0x148>
 800c2d6:	78fb      	ldrb	r3, [r7, #3]
 800c2d8:	f003 0301 	and.w	r3, r3, #1
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d004      	beq.n	800c2ea <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2e4:	1c5a      	adds	r2, r3, #1
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800c2ea:	78fb      	ldrb	r3, [r7, #3]
 800c2ec:	f003 0301 	and.w	r3, r3, #1
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d006      	beq.n	800c302 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	8b5b      	ldrh	r3, [r3, #26]
 800c2f8:	f043 0320 	orr.w	r3, r3, #32
 800c2fc:	b29a      	uxth	r2, r3
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	685b      	ldr	r3, [r3, #4]
 800c306:	4618      	mov	r0, r3
 800c308:	f7fa fbfe 	bl	8006b08 <pbuf_clen>
 800c30c:	4603      	mov	r3, r0
 800c30e:	461a      	mov	r2, r3
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c316:	4413      	add	r3, r2
 800c318:	b29a      	uxth	r2, r3
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c326:	2b00      	cmp	r3, #0
 800c328:	d00e      	beq.n	800c348 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d10a      	bne.n	800c348 <tcp_enqueue_flags+0x1b0>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c336:	2b00      	cmp	r3, #0
 800c338:	d106      	bne.n	800c348 <tcp_enqueue_flags+0x1b0>
 800c33a:	4b06      	ldr	r3, [pc, #24]	; (800c354 <tcp_enqueue_flags+0x1bc>)
 800c33c:	f240 4265 	movw	r2, #1125	; 0x465
 800c340:	490b      	ldr	r1, [pc, #44]	; (800c370 <tcp_enqueue_flags+0x1d8>)
 800c342:	4806      	ldr	r0, [pc, #24]	; (800c35c <tcp_enqueue_flags+0x1c4>)
 800c344:	f003 fdb6 	bl	800feb4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c348:	2300      	movs	r3, #0
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3720      	adds	r7, #32
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}
 800c352:	bf00      	nop
 800c354:	08012ef8 	.word	0x08012ef8
 800c358:	0801331c 	.word	0x0801331c
 800c35c:	08012f4c 	.word	0x08012f4c
 800c360:	08013374 	.word	0x08013374
 800c364:	08013394 	.word	0x08013394
 800c368:	080133d0 	.word	0x080133d0
 800c36c:	080133e8 	.word	0x080133e8
 800c370:	08013414 	.word	0x08013414

0800c374 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c374:	b5b0      	push	{r4, r5, r7, lr}
 800c376:	b08a      	sub	sp, #40	; 0x28
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d106      	bne.n	800c390 <tcp_output+0x1c>
 800c382:	4b9e      	ldr	r3, [pc, #632]	; (800c5fc <tcp_output+0x288>)
 800c384:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800c388:	499d      	ldr	r1, [pc, #628]	; (800c600 <tcp_output+0x28c>)
 800c38a:	489e      	ldr	r0, [pc, #632]	; (800c604 <tcp_output+0x290>)
 800c38c:	f003 fd92 	bl	800feb4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	7d1b      	ldrb	r3, [r3, #20]
 800c394:	2b01      	cmp	r3, #1
 800c396:	d106      	bne.n	800c3a6 <tcp_output+0x32>
 800c398:	4b98      	ldr	r3, [pc, #608]	; (800c5fc <tcp_output+0x288>)
 800c39a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800c39e:	499a      	ldr	r1, [pc, #616]	; (800c608 <tcp_output+0x294>)
 800c3a0:	4898      	ldr	r0, [pc, #608]	; (800c604 <tcp_output+0x290>)
 800c3a2:	f003 fd87 	bl	800feb4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c3a6:	4b99      	ldr	r3, [pc, #612]	; (800c60c <tcp_output+0x298>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	687a      	ldr	r2, [r7, #4]
 800c3ac:	429a      	cmp	r2, r3
 800c3ae:	d101      	bne.n	800c3b4 <tcp_output+0x40>
    return ERR_OK;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	e1ce      	b.n	800c752 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	bf28      	it	cs
 800c3c4:	4613      	movcs	r3, r2
 800c3c6:	b29b      	uxth	r3, r3
 800c3c8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800c3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d10b      	bne.n	800c3ee <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	8b5b      	ldrh	r3, [r3, #26]
 800c3da:	f003 0302 	and.w	r3, r3, #2
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	f000 81aa 	beq.w	800c738 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f000 fdcb 	bl	800cf80 <tcp_send_empty_ack>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	e1b1      	b.n	800c752 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c3ee:	6879      	ldr	r1, [r7, #4]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	3304      	adds	r3, #4
 800c3f4:	461a      	mov	r2, r3
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f7ff f824 	bl	800b444 <tcp_route>
 800c3fc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d102      	bne.n	800c40a <tcp_output+0x96>
    return ERR_RTE;
 800c404:	f06f 0303 	mvn.w	r3, #3
 800c408:	e1a3      	b.n	800c752 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d003      	beq.n	800c418 <tcp_output+0xa4>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d111      	bne.n	800c43c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d002      	beq.n	800c424 <tcp_output+0xb0>
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	3304      	adds	r3, #4
 800c422:	e000      	b.n	800c426 <tcp_output+0xb2>
 800c424:	2300      	movs	r3, #0
 800c426:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d102      	bne.n	800c434 <tcp_output+0xc0>
      return ERR_RTE;
 800c42e:	f06f 0303 	mvn.w	r3, #3
 800c432:	e18e      	b.n	800c752 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	681a      	ldr	r2, [r3, #0]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c43e:	68db      	ldr	r3, [r3, #12]
 800c440:	685b      	ldr	r3, [r3, #4]
 800c442:	4618      	mov	r0, r3
 800c444:	f7f8 ffcf 	bl	80053e6 <lwip_htonl>
 800c448:	4602      	mov	r2, r0
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c44e:	1ad3      	subs	r3, r2, r3
 800c450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c452:	8912      	ldrh	r2, [r2, #8]
 800c454:	4413      	add	r3, r2
 800c456:	69ba      	ldr	r2, [r7, #24]
 800c458:	429a      	cmp	r2, r3
 800c45a:	d227      	bcs.n	800c4ac <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c462:	461a      	mov	r2, r3
 800c464:	69bb      	ldr	r3, [r7, #24]
 800c466:	4293      	cmp	r3, r2
 800c468:	d114      	bne.n	800c494 <tcp_output+0x120>
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d110      	bne.n	800c494 <tcp_output+0x120>
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d10b      	bne.n	800c494 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2200      	movs	r2, #0
 800c480:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2201      	movs	r2, #1
 800c488:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2200      	movs	r2, #0
 800c490:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	8b5b      	ldrh	r3, [r3, #26]
 800c498:	f003 0302 	and.w	r3, r3, #2
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	f000 814d 	beq.w	800c73c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f000 fd6c 	bl	800cf80 <tcp_send_empty_ack>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	e152      	b.n	800c752 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4b8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c4ba:	6a3b      	ldr	r3, [r7, #32]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	f000 811c 	beq.w	800c6fa <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800c4c2:	e002      	b.n	800c4ca <tcp_output+0x156>
 800c4c4:	6a3b      	ldr	r3, [r7, #32]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	623b      	str	r3, [r7, #32]
 800c4ca:	6a3b      	ldr	r3, [r7, #32]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d1f8      	bne.n	800c4c4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800c4d2:	e112      	b.n	800c6fa <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d6:	68db      	ldr	r3, [r3, #12]
 800c4d8:	899b      	ldrh	r3, [r3, #12]
 800c4da:	b29b      	uxth	r3, r3
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7f8 ff6d 	bl	80053bc <lwip_htons>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	b2db      	uxtb	r3, r3
 800c4e6:	f003 0304 	and.w	r3, r3, #4
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d006      	beq.n	800c4fc <tcp_output+0x188>
 800c4ee:	4b43      	ldr	r3, [pc, #268]	; (800c5fc <tcp_output+0x288>)
 800c4f0:	f240 5236 	movw	r2, #1334	; 0x536
 800c4f4:	4946      	ldr	r1, [pc, #280]	; (800c610 <tcp_output+0x29c>)
 800c4f6:	4843      	ldr	r0, [pc, #268]	; (800c604 <tcp_output+0x290>)
 800c4f8:	f003 fcdc 	bl	800feb4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c500:	2b00      	cmp	r3, #0
 800c502:	d01f      	beq.n	800c544 <tcp_output+0x1d0>
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	8b5b      	ldrh	r3, [r3, #26]
 800c508:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d119      	bne.n	800c544 <tcp_output+0x1d0>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c514:	2b00      	cmp	r3, #0
 800c516:	d00b      	beq.n	800c530 <tcp_output+0x1bc>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d110      	bne.n	800c544 <tcp_output+0x1d0>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c526:	891a      	ldrh	r2, [r3, #8]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d209      	bcs.n	800c544 <tcp_output+0x1d0>
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c536:	2b00      	cmp	r3, #0
 800c538:	d004      	beq.n	800c544 <tcp_output+0x1d0>
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c540:	2b08      	cmp	r3, #8
 800c542:	d901      	bls.n	800c548 <tcp_output+0x1d4>
 800c544:	2301      	movs	r3, #1
 800c546:	e000      	b.n	800c54a <tcp_output+0x1d6>
 800c548:	2300      	movs	r3, #0
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d106      	bne.n	800c55c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	8b5b      	ldrh	r3, [r3, #26]
 800c552:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c556:	2b00      	cmp	r3, #0
 800c558:	f000 80e4 	beq.w	800c724 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	7d1b      	ldrb	r3, [r3, #20]
 800c560:	2b02      	cmp	r3, #2
 800c562:	d00d      	beq.n	800c580 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c566:	68db      	ldr	r3, [r3, #12]
 800c568:	899b      	ldrh	r3, [r3, #12]
 800c56a:	b29c      	uxth	r4, r3
 800c56c:	2010      	movs	r0, #16
 800c56e:	f7f8 ff25 	bl	80053bc <lwip_htons>
 800c572:	4603      	mov	r3, r0
 800c574:	461a      	mov	r2, r3
 800c576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c578:	68db      	ldr	r3, [r3, #12]
 800c57a:	4322      	orrs	r2, r4
 800c57c:	b292      	uxth	r2, r2
 800c57e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800c580:	697a      	ldr	r2, [r7, #20]
 800c582:	6879      	ldr	r1, [r7, #4]
 800c584:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c586:	f000 f909 	bl	800c79c <tcp_output_segment>
 800c58a:	4603      	mov	r3, r0
 800c58c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c58e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d009      	beq.n	800c5aa <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	8b5b      	ldrh	r3, [r3, #26]
 800c59a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c59e:	b29a      	uxth	r2, r3
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	835a      	strh	r2, [r3, #26]
      return err;
 800c5a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5a8:	e0d3      	b.n	800c752 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800c5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ac:	681a      	ldr	r2, [r3, #0]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	7d1b      	ldrb	r3, [r3, #20]
 800c5b6:	2b02      	cmp	r3, #2
 800c5b8:	d006      	beq.n	800c5c8 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	8b5b      	ldrh	r3, [r3, #26]
 800c5be:	f023 0303 	bic.w	r3, r3, #3
 800c5c2:	b29a      	uxth	r2, r3
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ca:	68db      	ldr	r3, [r3, #12]
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f7f8 ff09 	bl	80053e6 <lwip_htonl>
 800c5d4:	4604      	mov	r4, r0
 800c5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d8:	891b      	ldrh	r3, [r3, #8]
 800c5da:	461d      	mov	r5, r3
 800c5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5de:	68db      	ldr	r3, [r3, #12]
 800c5e0:	899b      	ldrh	r3, [r3, #12]
 800c5e2:	b29b      	uxth	r3, r3
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f7f8 fee9 	bl	80053bc <lwip_htons>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	b2db      	uxtb	r3, r3
 800c5ee:	f003 0303 	and.w	r3, r3, #3
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d00e      	beq.n	800c614 <tcp_output+0x2a0>
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	e00d      	b.n	800c616 <tcp_output+0x2a2>
 800c5fa:	bf00      	nop
 800c5fc:	08012ef8 	.word	0x08012ef8
 800c600:	0801343c 	.word	0x0801343c
 800c604:	08012f4c 	.word	0x08012f4c
 800c608:	08013454 	.word	0x08013454
 800c60c:	20006d60 	.word	0x20006d60
 800c610:	0801347c 	.word	0x0801347c
 800c614:	2300      	movs	r3, #0
 800c616:	442b      	add	r3, r5
 800c618:	4423      	add	r3, r4
 800c61a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	1ad3      	subs	r3, r2, r3
 800c624:	2b00      	cmp	r3, #0
 800c626:	da02      	bge.n	800c62e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	68ba      	ldr	r2, [r7, #8]
 800c62c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c630:	891b      	ldrh	r3, [r3, #8]
 800c632:	461c      	mov	r4, r3
 800c634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c636:	68db      	ldr	r3, [r3, #12]
 800c638:	899b      	ldrh	r3, [r3, #12]
 800c63a:	b29b      	uxth	r3, r3
 800c63c:	4618      	mov	r0, r3
 800c63e:	f7f8 febd 	bl	80053bc <lwip_htons>
 800c642:	4603      	mov	r3, r0
 800c644:	b2db      	uxtb	r3, r3
 800c646:	f003 0303 	and.w	r3, r3, #3
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d001      	beq.n	800c652 <tcp_output+0x2de>
 800c64e:	2301      	movs	r3, #1
 800c650:	e000      	b.n	800c654 <tcp_output+0x2e0>
 800c652:	2300      	movs	r3, #0
 800c654:	4423      	add	r3, r4
 800c656:	2b00      	cmp	r3, #0
 800c658:	d049      	beq.n	800c6ee <tcp_output+0x37a>
      seg->next = NULL;
 800c65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c65c:	2200      	movs	r2, #0
 800c65e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c664:	2b00      	cmp	r3, #0
 800c666:	d105      	bne.n	800c674 <tcp_output+0x300>
        pcb->unacked = seg;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c66c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800c66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c670:	623b      	str	r3, [r7, #32]
 800c672:	e03f      	b.n	800c6f4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c676:	68db      	ldr	r3, [r3, #12]
 800c678:	685b      	ldr	r3, [r3, #4]
 800c67a:	4618      	mov	r0, r3
 800c67c:	f7f8 feb3 	bl	80053e6 <lwip_htonl>
 800c680:	4604      	mov	r4, r0
 800c682:	6a3b      	ldr	r3, [r7, #32]
 800c684:	68db      	ldr	r3, [r3, #12]
 800c686:	685b      	ldr	r3, [r3, #4]
 800c688:	4618      	mov	r0, r3
 800c68a:	f7f8 feac 	bl	80053e6 <lwip_htonl>
 800c68e:	4603      	mov	r3, r0
 800c690:	1ae3      	subs	r3, r4, r3
 800c692:	2b00      	cmp	r3, #0
 800c694:	da24      	bge.n	800c6e0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	3370      	adds	r3, #112	; 0x70
 800c69a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c69c:	e002      	b.n	800c6a4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800c69e:	69fb      	ldr	r3, [r7, #28]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c6a4:	69fb      	ldr	r3, [r7, #28]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d011      	beq.n	800c6d0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c6ac:	69fb      	ldr	r3, [r7, #28]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	68db      	ldr	r3, [r3, #12]
 800c6b2:	685b      	ldr	r3, [r3, #4]
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f7f8 fe96 	bl	80053e6 <lwip_htonl>
 800c6ba:	4604      	mov	r4, r0
 800c6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6be:	68db      	ldr	r3, [r3, #12]
 800c6c0:	685b      	ldr	r3, [r3, #4]
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f7f8 fe8f 	bl	80053e6 <lwip_htonl>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	dbe6      	blt.n	800c69e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800c6d0:	69fb      	ldr	r3, [r7, #28]
 800c6d2:	681a      	ldr	r2, [r3, #0]
 800c6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c6d8:	69fb      	ldr	r3, [r7, #28]
 800c6da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6dc:	601a      	str	r2, [r3, #0]
 800c6de:	e009      	b.n	800c6f4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c6e0:	6a3b      	ldr	r3, [r7, #32]
 800c6e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6e4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c6e6:	6a3b      	ldr	r3, [r7, #32]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	623b      	str	r3, [r7, #32]
 800c6ec:	e002      	b.n	800c6f4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c6ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c6f0:	f7fb feff 	bl	80084f2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6f8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800c6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d012      	beq.n	800c726 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c702:	68db      	ldr	r3, [r3, #12]
 800c704:	685b      	ldr	r3, [r3, #4]
 800c706:	4618      	mov	r0, r3
 800c708:	f7f8 fe6d 	bl	80053e6 <lwip_htonl>
 800c70c:	4602      	mov	r2, r0
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c712:	1ad3      	subs	r3, r2, r3
 800c714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c716:	8912      	ldrh	r2, [r2, #8]
 800c718:	4413      	add	r3, r2
  while (seg != NULL &&
 800c71a:	69ba      	ldr	r2, [r7, #24]
 800c71c:	429a      	cmp	r2, r3
 800c71e:	f4bf aed9 	bcs.w	800c4d4 <tcp_output+0x160>
 800c722:	e000      	b.n	800c726 <tcp_output+0x3b2>
      break;
 800c724:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d108      	bne.n	800c740 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2200      	movs	r2, #0
 800c732:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800c736:	e004      	b.n	800c742 <tcp_output+0x3ce>
    goto output_done;
 800c738:	bf00      	nop
 800c73a:	e002      	b.n	800c742 <tcp_output+0x3ce>
    goto output_done;
 800c73c:	bf00      	nop
 800c73e:	e000      	b.n	800c742 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800c740:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	8b5b      	ldrh	r3, [r3, #26]
 800c746:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c74a:	b29a      	uxth	r2, r3
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800c750:	2300      	movs	r3, #0
}
 800c752:	4618      	mov	r0, r3
 800c754:	3728      	adds	r7, #40	; 0x28
 800c756:	46bd      	mov	sp, r7
 800c758:	bdb0      	pop	{r4, r5, r7, pc}
 800c75a:	bf00      	nop

0800c75c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b082      	sub	sp, #8
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d106      	bne.n	800c778 <tcp_output_segment_busy+0x1c>
 800c76a:	4b09      	ldr	r3, [pc, #36]	; (800c790 <tcp_output_segment_busy+0x34>)
 800c76c:	f240 529a 	movw	r2, #1434	; 0x59a
 800c770:	4908      	ldr	r1, [pc, #32]	; (800c794 <tcp_output_segment_busy+0x38>)
 800c772:	4809      	ldr	r0, [pc, #36]	; (800c798 <tcp_output_segment_busy+0x3c>)
 800c774:	f003 fb9e 	bl	800feb4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	685b      	ldr	r3, [r3, #4]
 800c77c:	7b9b      	ldrb	r3, [r3, #14]
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d001      	beq.n	800c786 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800c782:	2301      	movs	r3, #1
 800c784:	e000      	b.n	800c788 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800c786:	2300      	movs	r3, #0
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3708      	adds	r7, #8
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}
 800c790:	08012ef8 	.word	0x08012ef8
 800c794:	08013494 	.word	0x08013494
 800c798:	08012f4c 	.word	0x08012f4c

0800c79c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800c79c:	b5b0      	push	{r4, r5, r7, lr}
 800c79e:	b08c      	sub	sp, #48	; 0x30
 800c7a0:	af04      	add	r7, sp, #16
 800c7a2:	60f8      	str	r0, [r7, #12]
 800c7a4:	60b9      	str	r1, [r7, #8]
 800c7a6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d106      	bne.n	800c7bc <tcp_output_segment+0x20>
 800c7ae:	4b63      	ldr	r3, [pc, #396]	; (800c93c <tcp_output_segment+0x1a0>)
 800c7b0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800c7b4:	4962      	ldr	r1, [pc, #392]	; (800c940 <tcp_output_segment+0x1a4>)
 800c7b6:	4863      	ldr	r0, [pc, #396]	; (800c944 <tcp_output_segment+0x1a8>)
 800c7b8:	f003 fb7c 	bl	800feb4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d106      	bne.n	800c7d0 <tcp_output_segment+0x34>
 800c7c2:	4b5e      	ldr	r3, [pc, #376]	; (800c93c <tcp_output_segment+0x1a0>)
 800c7c4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800c7c8:	495f      	ldr	r1, [pc, #380]	; (800c948 <tcp_output_segment+0x1ac>)
 800c7ca:	485e      	ldr	r0, [pc, #376]	; (800c944 <tcp_output_segment+0x1a8>)
 800c7cc:	f003 fb72 	bl	800feb4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d106      	bne.n	800c7e4 <tcp_output_segment+0x48>
 800c7d6:	4b59      	ldr	r3, [pc, #356]	; (800c93c <tcp_output_segment+0x1a0>)
 800c7d8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800c7dc:	495b      	ldr	r1, [pc, #364]	; (800c94c <tcp_output_segment+0x1b0>)
 800c7de:	4859      	ldr	r0, [pc, #356]	; (800c944 <tcp_output_segment+0x1a8>)
 800c7e0:	f003 fb68 	bl	800feb4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800c7e4:	68f8      	ldr	r0, [r7, #12]
 800c7e6:	f7ff ffb9 	bl	800c75c <tcp_output_segment_busy>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d001      	beq.n	800c7f4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	e09f      	b.n	800c934 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	68dc      	ldr	r4, [r3, #12]
 800c7fc:	4610      	mov	r0, r2
 800c7fe:	f7f8 fdf2 	bl	80053e6 <lwip_htonl>
 800c802:	4603      	mov	r3, r0
 800c804:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	68dc      	ldr	r4, [r3, #12]
 800c80e:	4610      	mov	r0, r2
 800c810:	f7f8 fdd4 	bl	80053bc <lwip_htons>
 800c814:	4603      	mov	r3, r0
 800c816:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c81c:	68ba      	ldr	r2, [r7, #8]
 800c81e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c820:	441a      	add	r2, r3
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	68db      	ldr	r3, [r3, #12]
 800c82a:	3314      	adds	r3, #20
 800c82c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	7a9b      	ldrb	r3, [r3, #10]
 800c832:	f003 0301 	and.w	r3, r3, #1
 800c836:	2b00      	cmp	r3, #0
 800c838:	d015      	beq.n	800c866 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	3304      	adds	r3, #4
 800c83e:	461a      	mov	r2, r3
 800c840:	6879      	ldr	r1, [r7, #4]
 800c842:	f44f 7006 	mov.w	r0, #536	; 0x218
 800c846:	f7fc fa37 	bl	8008cb8 <tcp_eff_send_mss_netif>
 800c84a:	4603      	mov	r3, r0
 800c84c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c84e:	8b7b      	ldrh	r3, [r7, #26]
 800c850:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800c854:	4618      	mov	r0, r3
 800c856:	f7f8 fdc6 	bl	80053e6 <lwip_htonl>
 800c85a:	4602      	mov	r2, r0
 800c85c:	69fb      	ldr	r3, [r7, #28]
 800c85e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800c860:	69fb      	ldr	r3, [r7, #28]
 800c862:	3304      	adds	r3, #4
 800c864:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	da02      	bge.n	800c876 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	2200      	movs	r2, #0
 800c874:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d10c      	bne.n	800c898 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800c87e:	4b34      	ldr	r3, [pc, #208]	; (800c950 <tcp_output_segment+0x1b4>)
 800c880:	681a      	ldr	r2, [r3, #0]
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	68db      	ldr	r3, [r3, #12]
 800c88a:	685b      	ldr	r3, [r3, #4]
 800c88c:	4618      	mov	r0, r3
 800c88e:	f7f8 fdaa 	bl	80053e6 <lwip_htonl>
 800c892:	4602      	mov	r2, r0
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	68da      	ldr	r2, [r3, #12]
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	685b      	ldr	r3, [r3, #4]
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	1ad3      	subs	r3, r2, r3
 800c8a4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	685b      	ldr	r3, [r3, #4]
 800c8aa:	8959      	ldrh	r1, [r3, #10]
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	8b3a      	ldrh	r2, [r7, #24]
 800c8b2:	1a8a      	subs	r2, r1, r2
 800c8b4:	b292      	uxth	r2, r2
 800c8b6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	685b      	ldr	r3, [r3, #4]
 800c8bc:	8919      	ldrh	r1, [r3, #8]
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	685b      	ldr	r3, [r3, #4]
 800c8c2:	8b3a      	ldrh	r2, [r7, #24]
 800c8c4:	1a8a      	subs	r2, r1, r2
 800c8c6:	b292      	uxth	r2, r2
 800c8c8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	68fa      	ldr	r2, [r7, #12]
 800c8d0:	68d2      	ldr	r2, [r2, #12]
 800c8d2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	68db      	ldr	r3, [r3, #12]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	741a      	strb	r2, [r3, #16]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	68db      	ldr	r3, [r3, #12]
 800c8e4:	f103 0214 	add.w	r2, r3, #20
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	7a9b      	ldrb	r3, [r3, #10]
 800c8ec:	009b      	lsls	r3, r3, #2
 800c8ee:	f003 0304 	and.w	r3, r3, #4
 800c8f2:	4413      	add	r3, r2
 800c8f4:	69fa      	ldr	r2, [r7, #28]
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	d006      	beq.n	800c908 <tcp_output_segment+0x16c>
 800c8fa:	4b10      	ldr	r3, [pc, #64]	; (800c93c <tcp_output_segment+0x1a0>)
 800c8fc:	f240 621c 	movw	r2, #1564	; 0x61c
 800c900:	4914      	ldr	r1, [pc, #80]	; (800c954 <tcp_output_segment+0x1b8>)
 800c902:	4810      	ldr	r0, [pc, #64]	; (800c944 <tcp_output_segment+0x1a8>)
 800c904:	f003 fad6 	bl	800feb4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	6858      	ldr	r0, [r3, #4]
 800c90c:	68b9      	ldr	r1, [r7, #8]
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	1d1c      	adds	r4, r3, #4
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	7add      	ldrb	r5, [r3, #11]
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	7a9b      	ldrb	r3, [r3, #10]
 800c91a:	687a      	ldr	r2, [r7, #4]
 800c91c:	9202      	str	r2, [sp, #8]
 800c91e:	2206      	movs	r2, #6
 800c920:	9201      	str	r2, [sp, #4]
 800c922:	9300      	str	r3, [sp, #0]
 800c924:	462b      	mov	r3, r5
 800c926:	4622      	mov	r2, r4
 800c928:	f002 fa36 	bl	800ed98 <ip4_output_if>
 800c92c:	4603      	mov	r3, r0
 800c92e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800c930:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c934:	4618      	mov	r0, r3
 800c936:	3720      	adds	r7, #32
 800c938:	46bd      	mov	sp, r7
 800c93a:	bdb0      	pop	{r4, r5, r7, pc}
 800c93c:	08012ef8 	.word	0x08012ef8
 800c940:	080134bc 	.word	0x080134bc
 800c944:	08012f4c 	.word	0x08012f4c
 800c948:	080134dc 	.word	0x080134dc
 800c94c:	080134fc 	.word	0x080134fc
 800c950:	20006d50 	.word	0x20006d50
 800c954:	08013520 	.word	0x08013520

0800c958 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800c958:	b5b0      	push	{r4, r5, r7, lr}
 800c95a:	b084      	sub	sp, #16
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d106      	bne.n	800c974 <tcp_rexmit_rto_prepare+0x1c>
 800c966:	4b31      	ldr	r3, [pc, #196]	; (800ca2c <tcp_rexmit_rto_prepare+0xd4>)
 800c968:	f240 6263 	movw	r2, #1635	; 0x663
 800c96c:	4930      	ldr	r1, [pc, #192]	; (800ca30 <tcp_rexmit_rto_prepare+0xd8>)
 800c96e:	4831      	ldr	r0, [pc, #196]	; (800ca34 <tcp_rexmit_rto_prepare+0xdc>)
 800c970:	f003 faa0 	bl	800feb4 <iprintf>

  if (pcb->unacked == NULL) {
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d102      	bne.n	800c982 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800c97c:	f06f 0305 	mvn.w	r3, #5
 800c980:	e050      	b.n	800ca24 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c986:	60fb      	str	r3, [r7, #12]
 800c988:	e00b      	b.n	800c9a2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800c98a:	68f8      	ldr	r0, [r7, #12]
 800c98c:	f7ff fee6 	bl	800c75c <tcp_output_segment_busy>
 800c990:	4603      	mov	r3, r0
 800c992:	2b00      	cmp	r3, #0
 800c994:	d002      	beq.n	800c99c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800c996:	f06f 0305 	mvn.w	r3, #5
 800c99a:	e043      	b.n	800ca24 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	60fb      	str	r3, [r7, #12]
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d1ef      	bne.n	800c98a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800c9aa:	68f8      	ldr	r0, [r7, #12]
 800c9ac:	f7ff fed6 	bl	800c75c <tcp_output_segment_busy>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d002      	beq.n	800c9bc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800c9b6:	f06f 0305 	mvn.w	r3, #5
 800c9ba:	e033      	b.n	800ca24 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	8b5b      	ldrh	r3, [r3, #26]
 800c9d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c9da:	b29a      	uxth	r2, r3
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	68db      	ldr	r3, [r3, #12]
 800c9e4:	685b      	ldr	r3, [r3, #4]
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f7f8 fcfd 	bl	80053e6 <lwip_htonl>
 800c9ec:	4604      	mov	r4, r0
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	891b      	ldrh	r3, [r3, #8]
 800c9f2:	461d      	mov	r5, r3
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	68db      	ldr	r3, [r3, #12]
 800c9f8:	899b      	ldrh	r3, [r3, #12]
 800c9fa:	b29b      	uxth	r3, r3
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	f7f8 fcdd 	bl	80053bc <lwip_htons>
 800ca02:	4603      	mov	r3, r0
 800ca04:	b2db      	uxtb	r3, r3
 800ca06:	f003 0303 	and.w	r3, r3, #3
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d001      	beq.n	800ca12 <tcp_rexmit_rto_prepare+0xba>
 800ca0e:	2301      	movs	r3, #1
 800ca10:	e000      	b.n	800ca14 <tcp_rexmit_rto_prepare+0xbc>
 800ca12:	2300      	movs	r3, #0
 800ca14:	442b      	add	r3, r5
 800ca16:	18e2      	adds	r2, r4, r3
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800ca22:	2300      	movs	r3, #0
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3710      	adds	r7, #16
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bdb0      	pop	{r4, r5, r7, pc}
 800ca2c:	08012ef8 	.word	0x08012ef8
 800ca30:	08013534 	.word	0x08013534
 800ca34:	08012f4c 	.word	0x08012f4c

0800ca38 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b082      	sub	sp, #8
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d106      	bne.n	800ca54 <tcp_rexmit_rto_commit+0x1c>
 800ca46:	4b0d      	ldr	r3, [pc, #52]	; (800ca7c <tcp_rexmit_rto_commit+0x44>)
 800ca48:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ca4c:	490c      	ldr	r1, [pc, #48]	; (800ca80 <tcp_rexmit_rto_commit+0x48>)
 800ca4e:	480d      	ldr	r0, [pc, #52]	; (800ca84 <tcp_rexmit_rto_commit+0x4c>)
 800ca50:	f003 fa30 	bl	800feb4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca5a:	2bff      	cmp	r3, #255	; 0xff
 800ca5c:	d007      	beq.n	800ca6e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca64:	3301      	adds	r3, #1
 800ca66:	b2da      	uxtb	r2, r3
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f7ff fc80 	bl	800c374 <tcp_output>
}
 800ca74:	bf00      	nop
 800ca76:	3708      	adds	r7, #8
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}
 800ca7c:	08012ef8 	.word	0x08012ef8
 800ca80:	08013558 	.word	0x08013558
 800ca84:	08012f4c 	.word	0x08012f4c

0800ca88 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b082      	sub	sp, #8
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d106      	bne.n	800caa4 <tcp_rexmit_rto+0x1c>
 800ca96:	4b0a      	ldr	r3, [pc, #40]	; (800cac0 <tcp_rexmit_rto+0x38>)
 800ca98:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800ca9c:	4909      	ldr	r1, [pc, #36]	; (800cac4 <tcp_rexmit_rto+0x3c>)
 800ca9e:	480a      	ldr	r0, [pc, #40]	; (800cac8 <tcp_rexmit_rto+0x40>)
 800caa0:	f003 fa08 	bl	800feb4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f7ff ff57 	bl	800c958 <tcp_rexmit_rto_prepare>
 800caaa:	4603      	mov	r3, r0
 800caac:	2b00      	cmp	r3, #0
 800caae:	d102      	bne.n	800cab6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f7ff ffc1 	bl	800ca38 <tcp_rexmit_rto_commit>
  }
}
 800cab6:	bf00      	nop
 800cab8:	3708      	adds	r7, #8
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}
 800cabe:	bf00      	nop
 800cac0:	08012ef8 	.word	0x08012ef8
 800cac4:	0801357c 	.word	0x0801357c
 800cac8:	08012f4c 	.word	0x08012f4c

0800cacc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800cacc:	b590      	push	{r4, r7, lr}
 800cace:	b085      	sub	sp, #20
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d106      	bne.n	800cae8 <tcp_rexmit+0x1c>
 800cada:	4b2f      	ldr	r3, [pc, #188]	; (800cb98 <tcp_rexmit+0xcc>)
 800cadc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800cae0:	492e      	ldr	r1, [pc, #184]	; (800cb9c <tcp_rexmit+0xd0>)
 800cae2:	482f      	ldr	r0, [pc, #188]	; (800cba0 <tcp_rexmit+0xd4>)
 800cae4:	f003 f9e6 	bl	800feb4 <iprintf>

  if (pcb->unacked == NULL) {
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caec:	2b00      	cmp	r3, #0
 800caee:	d102      	bne.n	800caf6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800caf0:	f06f 0305 	mvn.w	r3, #5
 800caf4:	e04c      	b.n	800cb90 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cafa:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800cafc:	68b8      	ldr	r0, [r7, #8]
 800cafe:	f7ff fe2d 	bl	800c75c <tcp_output_segment_busy>
 800cb02:	4603      	mov	r3, r0
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d002      	beq.n	800cb0e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800cb08:	f06f 0305 	mvn.w	r3, #5
 800cb0c:	e040      	b.n	800cb90 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	681a      	ldr	r2, [r3, #0]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	336c      	adds	r3, #108	; 0x6c
 800cb1a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cb1c:	e002      	b.n	800cb24 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d011      	beq.n	800cb50 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	68db      	ldr	r3, [r3, #12]
 800cb32:	685b      	ldr	r3, [r3, #4]
 800cb34:	4618      	mov	r0, r3
 800cb36:	f7f8 fc56 	bl	80053e6 <lwip_htonl>
 800cb3a:	4604      	mov	r4, r0
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	68db      	ldr	r3, [r3, #12]
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	4618      	mov	r0, r3
 800cb44:	f7f8 fc4f 	bl	80053e6 <lwip_htonl>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	dbe6      	blt.n	800cb1e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681a      	ldr	r2, [r3, #0]
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	68ba      	ldr	r2, [r7, #8]
 800cb5c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d103      	bne.n	800cb6e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cb74:	2bff      	cmp	r3, #255	; 0xff
 800cb76:	d007      	beq.n	800cb88 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cb7e:	3301      	adds	r3, #1
 800cb80:	b2da      	uxtb	r2, r3
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800cb8e:	2300      	movs	r3, #0
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3714      	adds	r7, #20
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd90      	pop	{r4, r7, pc}
 800cb98:	08012ef8 	.word	0x08012ef8
 800cb9c:	08013598 	.word	0x08013598
 800cba0:	08012f4c 	.word	0x08012f4c

0800cba4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b082      	sub	sp, #8
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d106      	bne.n	800cbc0 <tcp_rexmit_fast+0x1c>
 800cbb2:	4b2a      	ldr	r3, [pc, #168]	; (800cc5c <tcp_rexmit_fast+0xb8>)
 800cbb4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800cbb8:	4929      	ldr	r1, [pc, #164]	; (800cc60 <tcp_rexmit_fast+0xbc>)
 800cbba:	482a      	ldr	r0, [pc, #168]	; (800cc64 <tcp_rexmit_fast+0xc0>)
 800cbbc:	f003 f97a 	bl	800feb4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d044      	beq.n	800cc52 <tcp_rexmit_fast+0xae>
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	8b5b      	ldrh	r3, [r3, #26]
 800cbcc:	f003 0304 	and.w	r3, r3, #4
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d13e      	bne.n	800cc52 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f7ff ff79 	bl	800cacc <tcp_rexmit>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d138      	bne.n	800cc52 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cbec:	4293      	cmp	r3, r2
 800cbee:	bf28      	it	cs
 800cbf0:	4613      	movcs	r3, r2
 800cbf2:	b29b      	uxth	r3, r3
 800cbf4:	0fda      	lsrs	r2, r3, #31
 800cbf6:	4413      	add	r3, r2
 800cbf8:	105b      	asrs	r3, r3, #1
 800cbfa:	b29a      	uxth	r2, r3
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800cc08:	461a      	mov	r2, r3
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cc0e:	005b      	lsls	r3, r3, #1
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d206      	bcs.n	800cc22 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cc18:	005b      	lsls	r3, r3, #1
 800cc1a:	b29a      	uxth	r2, r3
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cc2c:	4619      	mov	r1, r3
 800cc2e:	0049      	lsls	r1, r1, #1
 800cc30:	440b      	add	r3, r1
 800cc32:	b29b      	uxth	r3, r3
 800cc34:	4413      	add	r3, r2
 800cc36:	b29a      	uxth	r2, r3
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	8b5b      	ldrh	r3, [r3, #26]
 800cc42:	f043 0304 	orr.w	r3, r3, #4
 800cc46:	b29a      	uxth	r2, r3
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800cc52:	bf00      	nop
 800cc54:	3708      	adds	r7, #8
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}
 800cc5a:	bf00      	nop
 800cc5c:	08012ef8 	.word	0x08012ef8
 800cc60:	080135b0 	.word	0x080135b0
 800cc64:	08012f4c 	.word	0x08012f4c

0800cc68 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b086      	sub	sp, #24
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	607b      	str	r3, [r7, #4]
 800cc72:	460b      	mov	r3, r1
 800cc74:	817b      	strh	r3, [r7, #10]
 800cc76:	4613      	mov	r3, r2
 800cc78:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800cc7a:	897a      	ldrh	r2, [r7, #10]
 800cc7c:	893b      	ldrh	r3, [r7, #8]
 800cc7e:	4413      	add	r3, r2
 800cc80:	b29b      	uxth	r3, r3
 800cc82:	3314      	adds	r3, #20
 800cc84:	b29b      	uxth	r3, r3
 800cc86:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	2022      	movs	r0, #34	; 0x22
 800cc8e:	f7f9 fbcf 	bl	8006430 <pbuf_alloc>
 800cc92:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d04d      	beq.n	800cd36 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800cc9a:	897b      	ldrh	r3, [r7, #10]
 800cc9c:	3313      	adds	r3, #19
 800cc9e:	697a      	ldr	r2, [r7, #20]
 800cca0:	8952      	ldrh	r2, [r2, #10]
 800cca2:	4293      	cmp	r3, r2
 800cca4:	db06      	blt.n	800ccb4 <tcp_output_alloc_header_common+0x4c>
 800cca6:	4b26      	ldr	r3, [pc, #152]	; (800cd40 <tcp_output_alloc_header_common+0xd8>)
 800cca8:	f240 7223 	movw	r2, #1827	; 0x723
 800ccac:	4925      	ldr	r1, [pc, #148]	; (800cd44 <tcp_output_alloc_header_common+0xdc>)
 800ccae:	4826      	ldr	r0, [pc, #152]	; (800cd48 <tcp_output_alloc_header_common+0xe0>)
 800ccb0:	f003 f900 	bl	800feb4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	685b      	ldr	r3, [r3, #4]
 800ccb8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800ccba:	8c3b      	ldrh	r3, [r7, #32]
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f7f8 fb7d 	bl	80053bc <lwip_htons>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	461a      	mov	r2, r3
 800ccc6:	693b      	ldr	r3, [r7, #16]
 800ccc8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800ccca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cccc:	4618      	mov	r0, r3
 800ccce:	f7f8 fb75 	bl	80053bc <lwip_htons>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	461a      	mov	r2, r3
 800ccd6:	693b      	ldr	r3, [r7, #16]
 800ccd8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	687a      	ldr	r2, [r7, #4]
 800ccde:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800cce0:	68f8      	ldr	r0, [r7, #12]
 800cce2:	f7f8 fb80 	bl	80053e6 <lwip_htonl>
 800cce6:	4602      	mov	r2, r0
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ccec:	897b      	ldrh	r3, [r7, #10]
 800ccee:	089b      	lsrs	r3, r3, #2
 800ccf0:	b29b      	uxth	r3, r3
 800ccf2:	3305      	adds	r3, #5
 800ccf4:	b29b      	uxth	r3, r3
 800ccf6:	031b      	lsls	r3, r3, #12
 800ccf8:	b29a      	uxth	r2, r3
 800ccfa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ccfe:	b29b      	uxth	r3, r3
 800cd00:	4313      	orrs	r3, r2
 800cd02:	b29b      	uxth	r3, r3
 800cd04:	4618      	mov	r0, r3
 800cd06:	f7f8 fb59 	bl	80053bc <lwip_htons>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	461a      	mov	r2, r3
 800cd0e:	693b      	ldr	r3, [r7, #16]
 800cd10:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800cd12:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cd14:	4618      	mov	r0, r3
 800cd16:	f7f8 fb51 	bl	80053bc <lwip_htons>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	461a      	mov	r2, r3
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	2200      	movs	r2, #0
 800cd26:	741a      	strb	r2, [r3, #16]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800cd2c:	693b      	ldr	r3, [r7, #16]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	749a      	strb	r2, [r3, #18]
 800cd32:	2200      	movs	r2, #0
 800cd34:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800cd36:	697b      	ldr	r3, [r7, #20]
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3718      	adds	r7, #24
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}
 800cd40:	08012ef8 	.word	0x08012ef8
 800cd44:	080135d0 	.word	0x080135d0
 800cd48:	08012f4c 	.word	0x08012f4c

0800cd4c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800cd4c:	b5b0      	push	{r4, r5, r7, lr}
 800cd4e:	b08a      	sub	sp, #40	; 0x28
 800cd50:	af04      	add	r7, sp, #16
 800cd52:	60f8      	str	r0, [r7, #12]
 800cd54:	607b      	str	r3, [r7, #4]
 800cd56:	460b      	mov	r3, r1
 800cd58:	817b      	strh	r3, [r7, #10]
 800cd5a:	4613      	mov	r3, r2
 800cd5c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d106      	bne.n	800cd72 <tcp_output_alloc_header+0x26>
 800cd64:	4b15      	ldr	r3, [pc, #84]	; (800cdbc <tcp_output_alloc_header+0x70>)
 800cd66:	f240 7242 	movw	r2, #1858	; 0x742
 800cd6a:	4915      	ldr	r1, [pc, #84]	; (800cdc0 <tcp_output_alloc_header+0x74>)
 800cd6c:	4815      	ldr	r0, [pc, #84]	; (800cdc4 <tcp_output_alloc_header+0x78>)
 800cd6e:	f003 f8a1 	bl	800feb4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	8adb      	ldrh	r3, [r3, #22]
 800cd7a:	68fa      	ldr	r2, [r7, #12]
 800cd7c:	8b12      	ldrh	r2, [r2, #24]
 800cd7e:	68f9      	ldr	r1, [r7, #12]
 800cd80:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800cd82:	893d      	ldrh	r5, [r7, #8]
 800cd84:	897c      	ldrh	r4, [r7, #10]
 800cd86:	9103      	str	r1, [sp, #12]
 800cd88:	2110      	movs	r1, #16
 800cd8a:	9102      	str	r1, [sp, #8]
 800cd8c:	9201      	str	r2, [sp, #4]
 800cd8e:	9300      	str	r3, [sp, #0]
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	462a      	mov	r2, r5
 800cd94:	4621      	mov	r1, r4
 800cd96:	f7ff ff67 	bl	800cc68 <tcp_output_alloc_header_common>
 800cd9a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d006      	beq.n	800cdb0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cda6:	68fa      	ldr	r2, [r7, #12]
 800cda8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800cdaa:	441a      	add	r2, r3
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800cdb0:	697b      	ldr	r3, [r7, #20]
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3718      	adds	r7, #24
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bdb0      	pop	{r4, r5, r7, pc}
 800cdba:	bf00      	nop
 800cdbc:	08012ef8 	.word	0x08012ef8
 800cdc0:	08013600 	.word	0x08013600
 800cdc4:	08012f4c 	.word	0x08012f4c

0800cdc8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b088      	sub	sp, #32
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	60f8      	str	r0, [r7, #12]
 800cdd0:	60b9      	str	r1, [r7, #8]
 800cdd2:	4611      	mov	r1, r2
 800cdd4:	461a      	mov	r2, r3
 800cdd6:	460b      	mov	r3, r1
 800cdd8:	71fb      	strb	r3, [r7, #7]
 800cdda:	4613      	mov	r3, r2
 800cddc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800cdde:	2300      	movs	r3, #0
 800cde0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d106      	bne.n	800cdf6 <tcp_output_fill_options+0x2e>
 800cde8:	4b13      	ldr	r3, [pc, #76]	; (800ce38 <tcp_output_fill_options+0x70>)
 800cdea:	f240 7256 	movw	r2, #1878	; 0x756
 800cdee:	4913      	ldr	r1, [pc, #76]	; (800ce3c <tcp_output_fill_options+0x74>)
 800cdf0:	4813      	ldr	r0, [pc, #76]	; (800ce40 <tcp_output_fill_options+0x78>)
 800cdf2:	f003 f85f 	bl	800feb4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	685b      	ldr	r3, [r3, #4]
 800cdfa:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800cdfc:	69bb      	ldr	r3, [r7, #24]
 800cdfe:	3314      	adds	r3, #20
 800ce00:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800ce02:	69bb      	ldr	r3, [r7, #24]
 800ce04:	f103 0214 	add.w	r2, r3, #20
 800ce08:	8bfb      	ldrh	r3, [r7, #30]
 800ce0a:	009b      	lsls	r3, r3, #2
 800ce0c:	4619      	mov	r1, r3
 800ce0e:	79fb      	ldrb	r3, [r7, #7]
 800ce10:	009b      	lsls	r3, r3, #2
 800ce12:	f003 0304 	and.w	r3, r3, #4
 800ce16:	440b      	add	r3, r1
 800ce18:	4413      	add	r3, r2
 800ce1a:	697a      	ldr	r2, [r7, #20]
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	d006      	beq.n	800ce2e <tcp_output_fill_options+0x66>
 800ce20:	4b05      	ldr	r3, [pc, #20]	; (800ce38 <tcp_output_fill_options+0x70>)
 800ce22:	f240 7275 	movw	r2, #1909	; 0x775
 800ce26:	4907      	ldr	r1, [pc, #28]	; (800ce44 <tcp_output_fill_options+0x7c>)
 800ce28:	4805      	ldr	r0, [pc, #20]	; (800ce40 <tcp_output_fill_options+0x78>)
 800ce2a:	f003 f843 	bl	800feb4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800ce2e:	bf00      	nop
 800ce30:	3720      	adds	r7, #32
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	08012ef8 	.word	0x08012ef8
 800ce3c:	08013628 	.word	0x08013628
 800ce40:	08012f4c 	.word	0x08012f4c
 800ce44:	08013520 	.word	0x08013520

0800ce48 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b08a      	sub	sp, #40	; 0x28
 800ce4c:	af04      	add	r7, sp, #16
 800ce4e:	60f8      	str	r0, [r7, #12]
 800ce50:	60b9      	str	r1, [r7, #8]
 800ce52:	607a      	str	r2, [r7, #4]
 800ce54:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d106      	bne.n	800ce6a <tcp_output_control_segment+0x22>
 800ce5c:	4b1c      	ldr	r3, [pc, #112]	; (800ced0 <tcp_output_control_segment+0x88>)
 800ce5e:	f240 7287 	movw	r2, #1927	; 0x787
 800ce62:	491c      	ldr	r1, [pc, #112]	; (800ced4 <tcp_output_control_segment+0x8c>)
 800ce64:	481c      	ldr	r0, [pc, #112]	; (800ced8 <tcp_output_control_segment+0x90>)
 800ce66:	f003 f825 	bl	800feb4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800ce6a:	683a      	ldr	r2, [r7, #0]
 800ce6c:	6879      	ldr	r1, [r7, #4]
 800ce6e:	68f8      	ldr	r0, [r7, #12]
 800ce70:	f7fe fae8 	bl	800b444 <tcp_route>
 800ce74:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800ce76:	693b      	ldr	r3, [r7, #16]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d102      	bne.n	800ce82 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800ce7c:	23fc      	movs	r3, #252	; 0xfc
 800ce7e:	75fb      	strb	r3, [r7, #23]
 800ce80:	e01c      	b.n	800cebc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d006      	beq.n	800ce96 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	7adb      	ldrb	r3, [r3, #11]
 800ce8c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	7a9b      	ldrb	r3, [r3, #10]
 800ce92:	757b      	strb	r3, [r7, #21]
 800ce94:	e003      	b.n	800ce9e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800ce96:	23ff      	movs	r3, #255	; 0xff
 800ce98:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ce9e:	7dba      	ldrb	r2, [r7, #22]
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	9302      	str	r3, [sp, #8]
 800cea4:	2306      	movs	r3, #6
 800cea6:	9301      	str	r3, [sp, #4]
 800cea8:	7d7b      	ldrb	r3, [r7, #21]
 800ceaa:	9300      	str	r3, [sp, #0]
 800ceac:	4613      	mov	r3, r2
 800ceae:	683a      	ldr	r2, [r7, #0]
 800ceb0:	6879      	ldr	r1, [r7, #4]
 800ceb2:	68b8      	ldr	r0, [r7, #8]
 800ceb4:	f001 ff70 	bl	800ed98 <ip4_output_if>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800cebc:	68b8      	ldr	r0, [r7, #8]
 800cebe:	f7f9 fd9b 	bl	80069f8 <pbuf_free>
  return err;
 800cec2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3718      	adds	r7, #24
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}
 800cece:	bf00      	nop
 800ced0:	08012ef8 	.word	0x08012ef8
 800ced4:	08013650 	.word	0x08013650
 800ced8:	08012f4c 	.word	0x08012f4c

0800cedc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800cedc:	b590      	push	{r4, r7, lr}
 800cede:	b08b      	sub	sp, #44	; 0x2c
 800cee0:	af04      	add	r7, sp, #16
 800cee2:	60f8      	str	r0, [r7, #12]
 800cee4:	60b9      	str	r1, [r7, #8]
 800cee6:	607a      	str	r2, [r7, #4]
 800cee8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d106      	bne.n	800cefe <tcp_rst+0x22>
 800cef0:	4b1f      	ldr	r3, [pc, #124]	; (800cf70 <tcp_rst+0x94>)
 800cef2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800cef6:	491f      	ldr	r1, [pc, #124]	; (800cf74 <tcp_rst+0x98>)
 800cef8:	481f      	ldr	r0, [pc, #124]	; (800cf78 <tcp_rst+0x9c>)
 800cefa:	f002 ffdb 	bl	800feb4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800cefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d106      	bne.n	800cf12 <tcp_rst+0x36>
 800cf04:	4b1a      	ldr	r3, [pc, #104]	; (800cf70 <tcp_rst+0x94>)
 800cf06:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800cf0a:	491c      	ldr	r1, [pc, #112]	; (800cf7c <tcp_rst+0xa0>)
 800cf0c:	481a      	ldr	r0, [pc, #104]	; (800cf78 <tcp_rst+0x9c>)
 800cf0e:	f002 ffd1 	bl	800feb4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800cf12:	2300      	movs	r3, #0
 800cf14:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800cf16:	f246 0308 	movw	r3, #24584	; 0x6008
 800cf1a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800cf1c:	7dfb      	ldrb	r3, [r7, #23]
 800cf1e:	b29c      	uxth	r4, r3
 800cf20:	68b8      	ldr	r0, [r7, #8]
 800cf22:	f7f8 fa60 	bl	80053e6 <lwip_htonl>
 800cf26:	4602      	mov	r2, r0
 800cf28:	8abb      	ldrh	r3, [r7, #20]
 800cf2a:	9303      	str	r3, [sp, #12]
 800cf2c:	2314      	movs	r3, #20
 800cf2e:	9302      	str	r3, [sp, #8]
 800cf30:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cf32:	9301      	str	r3, [sp, #4]
 800cf34:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cf36:	9300      	str	r3, [sp, #0]
 800cf38:	4613      	mov	r3, r2
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	4621      	mov	r1, r4
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f7ff fe92 	bl	800cc68 <tcp_output_alloc_header_common>
 800cf44:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800cf46:	693b      	ldr	r3, [r7, #16]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d00c      	beq.n	800cf66 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cf4c:	7dfb      	ldrb	r3, [r7, #23]
 800cf4e:	2200      	movs	r2, #0
 800cf50:	6939      	ldr	r1, [r7, #16]
 800cf52:	68f8      	ldr	r0, [r7, #12]
 800cf54:	f7ff ff38 	bl	800cdc8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800cf58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf5a:	683a      	ldr	r2, [r7, #0]
 800cf5c:	6939      	ldr	r1, [r7, #16]
 800cf5e:	68f8      	ldr	r0, [r7, #12]
 800cf60:	f7ff ff72 	bl	800ce48 <tcp_output_control_segment>
 800cf64:	e000      	b.n	800cf68 <tcp_rst+0x8c>
    return;
 800cf66:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800cf68:	371c      	adds	r7, #28
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd90      	pop	{r4, r7, pc}
 800cf6e:	bf00      	nop
 800cf70:	08012ef8 	.word	0x08012ef8
 800cf74:	0801367c 	.word	0x0801367c
 800cf78:	08012f4c 	.word	0x08012f4c
 800cf7c:	08013698 	.word	0x08013698

0800cf80 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800cf80:	b590      	push	{r4, r7, lr}
 800cf82:	b087      	sub	sp, #28
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d106      	bne.n	800cfa4 <tcp_send_empty_ack+0x24>
 800cf96:	4b28      	ldr	r3, [pc, #160]	; (800d038 <tcp_send_empty_ack+0xb8>)
 800cf98:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800cf9c:	4927      	ldr	r1, [pc, #156]	; (800d03c <tcp_send_empty_ack+0xbc>)
 800cf9e:	4828      	ldr	r0, [pc, #160]	; (800d040 <tcp_send_empty_ack+0xc0>)
 800cfa0:	f002 ff88 	bl	800feb4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cfa4:	7dfb      	ldrb	r3, [r7, #23]
 800cfa6:	009b      	lsls	r3, r3, #2
 800cfa8:	b2db      	uxtb	r3, r3
 800cfaa:	f003 0304 	and.w	r3, r3, #4
 800cfae:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800cfb0:	7d7b      	ldrb	r3, [r7, #21]
 800cfb2:	b29c      	uxth	r4, r3
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f7f8 fa14 	bl	80053e6 <lwip_htonl>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	4621      	mov	r1, r4
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f7ff fec1 	bl	800cd4c <tcp_output_alloc_header>
 800cfca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d109      	bne.n	800cfe6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	8b5b      	ldrh	r3, [r3, #26]
 800cfd6:	f043 0303 	orr.w	r3, r3, #3
 800cfda:	b29a      	uxth	r2, r3
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800cfe0:	f06f 0301 	mvn.w	r3, #1
 800cfe4:	e023      	b.n	800d02e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800cfe6:	7dbb      	ldrb	r3, [r7, #22]
 800cfe8:	7dfa      	ldrb	r2, [r7, #23]
 800cfea:	6939      	ldr	r1, [r7, #16]
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f7ff feeb 	bl	800cdc8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cff2:	687a      	ldr	r2, [r7, #4]
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	3304      	adds	r3, #4
 800cff8:	6939      	ldr	r1, [r7, #16]
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f7ff ff24 	bl	800ce48 <tcp_output_control_segment>
 800d000:	4603      	mov	r3, r0
 800d002:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d007      	beq.n	800d01c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	8b5b      	ldrh	r3, [r3, #26]
 800d010:	f043 0303 	orr.w	r3, r3, #3
 800d014:	b29a      	uxth	r2, r3
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	835a      	strh	r2, [r3, #26]
 800d01a:	e006      	b.n	800d02a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	8b5b      	ldrh	r3, [r3, #26]
 800d020:	f023 0303 	bic.w	r3, r3, #3
 800d024:	b29a      	uxth	r2, r3
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800d02a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d02e:	4618      	mov	r0, r3
 800d030:	371c      	adds	r7, #28
 800d032:	46bd      	mov	sp, r7
 800d034:	bd90      	pop	{r4, r7, pc}
 800d036:	bf00      	nop
 800d038:	08012ef8 	.word	0x08012ef8
 800d03c:	080136b4 	.word	0x080136b4
 800d040:	08012f4c 	.word	0x08012f4c

0800d044 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d044:	b590      	push	{r4, r7, lr}
 800d046:	b087      	sub	sp, #28
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d04c:	2300      	movs	r3, #0
 800d04e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d106      	bne.n	800d064 <tcp_keepalive+0x20>
 800d056:	4b18      	ldr	r3, [pc, #96]	; (800d0b8 <tcp_keepalive+0x74>)
 800d058:	f640 0224 	movw	r2, #2084	; 0x824
 800d05c:	4917      	ldr	r1, [pc, #92]	; (800d0bc <tcp_keepalive+0x78>)
 800d05e:	4818      	ldr	r0, [pc, #96]	; (800d0c0 <tcp_keepalive+0x7c>)
 800d060:	f002 ff28 	bl	800feb4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d064:	7dfb      	ldrb	r3, [r7, #23]
 800d066:	b29c      	uxth	r4, r3
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d06c:	3b01      	subs	r3, #1
 800d06e:	4618      	mov	r0, r3
 800d070:	f7f8 f9b9 	bl	80053e6 <lwip_htonl>
 800d074:	4603      	mov	r3, r0
 800d076:	2200      	movs	r2, #0
 800d078:	4621      	mov	r1, r4
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f7ff fe66 	bl	800cd4c <tcp_output_alloc_header>
 800d080:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d082:	693b      	ldr	r3, [r7, #16]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d102      	bne.n	800d08e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d088:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d08c:	e010      	b.n	800d0b0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d08e:	7dfb      	ldrb	r3, [r7, #23]
 800d090:	2200      	movs	r2, #0
 800d092:	6939      	ldr	r1, [r7, #16]
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f7ff fe97 	bl	800cdc8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d09a:	687a      	ldr	r2, [r7, #4]
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	3304      	adds	r3, #4
 800d0a0:	6939      	ldr	r1, [r7, #16]
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f7ff fed0 	bl	800ce48 <tcp_output_control_segment>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d0ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	371c      	adds	r7, #28
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd90      	pop	{r4, r7, pc}
 800d0b8:	08012ef8 	.word	0x08012ef8
 800d0bc:	080136d4 	.word	0x080136d4
 800d0c0:	08012f4c 	.word	0x08012f4c

0800d0c4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d0c4:	b590      	push	{r4, r7, lr}
 800d0c6:	b08b      	sub	sp, #44	; 0x2c
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d106      	bne.n	800d0e6 <tcp_zero_window_probe+0x22>
 800d0d8:	4b4c      	ldr	r3, [pc, #304]	; (800d20c <tcp_zero_window_probe+0x148>)
 800d0da:	f640 024f 	movw	r2, #2127	; 0x84f
 800d0de:	494c      	ldr	r1, [pc, #304]	; (800d210 <tcp_zero_window_probe+0x14c>)
 800d0e0:	484c      	ldr	r0, [pc, #304]	; (800d214 <tcp_zero_window_probe+0x150>)
 800d0e2:	f002 fee7 	bl	800feb4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0ea:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800d0ec:	6a3b      	ldr	r3, [r7, #32]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d101      	bne.n	800d0f6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	e086      	b.n	800d204 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d0fc:	2bff      	cmp	r3, #255	; 0xff
 800d0fe:	d007      	beq.n	800d110 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d106:	3301      	adds	r3, #1
 800d108:	b2da      	uxtb	r2, r3
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d110:	6a3b      	ldr	r3, [r7, #32]
 800d112:	68db      	ldr	r3, [r3, #12]
 800d114:	899b      	ldrh	r3, [r3, #12]
 800d116:	b29b      	uxth	r3, r3
 800d118:	4618      	mov	r0, r3
 800d11a:	f7f8 f94f 	bl	80053bc <lwip_htons>
 800d11e:	4603      	mov	r3, r0
 800d120:	b2db      	uxtb	r3, r3
 800d122:	f003 0301 	and.w	r3, r3, #1
 800d126:	2b00      	cmp	r3, #0
 800d128:	d005      	beq.n	800d136 <tcp_zero_window_probe+0x72>
 800d12a:	6a3b      	ldr	r3, [r7, #32]
 800d12c:	891b      	ldrh	r3, [r3, #8]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d101      	bne.n	800d136 <tcp_zero_window_probe+0x72>
 800d132:	2301      	movs	r3, #1
 800d134:	e000      	b.n	800d138 <tcp_zero_window_probe+0x74>
 800d136:	2300      	movs	r3, #0
 800d138:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d13a:	7ffb      	ldrb	r3, [r7, #31]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	bf0c      	ite	eq
 800d140:	2301      	moveq	r3, #1
 800d142:	2300      	movne	r3, #0
 800d144:	b2db      	uxtb	r3, r3
 800d146:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d14c:	b299      	uxth	r1, r3
 800d14e:	6a3b      	ldr	r3, [r7, #32]
 800d150:	68db      	ldr	r3, [r3, #12]
 800d152:	685b      	ldr	r3, [r3, #4]
 800d154:	8bba      	ldrh	r2, [r7, #28]
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f7ff fdf8 	bl	800cd4c <tcp_output_alloc_header>
 800d15c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800d15e:	69bb      	ldr	r3, [r7, #24]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d102      	bne.n	800d16a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d164:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d168:	e04c      	b.n	800d204 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d16a:	69bb      	ldr	r3, [r7, #24]
 800d16c:	685b      	ldr	r3, [r3, #4]
 800d16e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800d170:	7ffb      	ldrb	r3, [r7, #31]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d011      	beq.n	800d19a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	899b      	ldrh	r3, [r3, #12]
 800d17a:	b29b      	uxth	r3, r3
 800d17c:	b21b      	sxth	r3, r3
 800d17e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d182:	b21c      	sxth	r4, r3
 800d184:	2011      	movs	r0, #17
 800d186:	f7f8 f919 	bl	80053bc <lwip_htons>
 800d18a:	4603      	mov	r3, r0
 800d18c:	b21b      	sxth	r3, r3
 800d18e:	4323      	orrs	r3, r4
 800d190:	b21b      	sxth	r3, r3
 800d192:	b29a      	uxth	r2, r3
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	819a      	strh	r2, [r3, #12]
 800d198:	e010      	b.n	800d1bc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d19a:	69bb      	ldr	r3, [r7, #24]
 800d19c:	685b      	ldr	r3, [r3, #4]
 800d19e:	3314      	adds	r3, #20
 800d1a0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d1a2:	6a3b      	ldr	r3, [r7, #32]
 800d1a4:	6858      	ldr	r0, [r3, #4]
 800d1a6:	6a3b      	ldr	r3, [r7, #32]
 800d1a8:	685b      	ldr	r3, [r3, #4]
 800d1aa:	891a      	ldrh	r2, [r3, #8]
 800d1ac:	6a3b      	ldr	r3, [r7, #32]
 800d1ae:	891b      	ldrh	r3, [r3, #8]
 800d1b0:	1ad3      	subs	r3, r2, r3
 800d1b2:	b29b      	uxth	r3, r3
 800d1b4:	2201      	movs	r2, #1
 800d1b6:	6939      	ldr	r1, [r7, #16]
 800d1b8:	f7f9 fe08 	bl	8006dcc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d1bc:	6a3b      	ldr	r3, [r7, #32]
 800d1be:	68db      	ldr	r3, [r3, #12]
 800d1c0:	685b      	ldr	r3, [r3, #4]
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7f8 f90f 	bl	80053e6 <lwip_htonl>
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	3301      	adds	r3, #1
 800d1cc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	1ad3      	subs	r3, r2, r3
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	da02      	bge.n	800d1e0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	68fa      	ldr	r2, [r7, #12]
 800d1de:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d1e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	69b9      	ldr	r1, [r7, #24]
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f7ff fded 	bl	800cdc8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d1ee:	687a      	ldr	r2, [r7, #4]
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	3304      	adds	r3, #4
 800d1f4:	69b9      	ldr	r1, [r7, #24]
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f7ff fe26 	bl	800ce48 <tcp_output_control_segment>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d200:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d204:	4618      	mov	r0, r3
 800d206:	372c      	adds	r7, #44	; 0x2c
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd90      	pop	{r4, r7, pc}
 800d20c:	08012ef8 	.word	0x08012ef8
 800d210:	080136f0 	.word	0x080136f0
 800d214:	08012f4c 	.word	0x08012f4c

0800d218 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b082      	sub	sp, #8
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d220:	f7fa f812 	bl	8007248 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d224:	4b0a      	ldr	r3, [pc, #40]	; (800d250 <tcpip_tcp_timer+0x38>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d103      	bne.n	800d234 <tcpip_tcp_timer+0x1c>
 800d22c:	4b09      	ldr	r3, [pc, #36]	; (800d254 <tcpip_tcp_timer+0x3c>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d005      	beq.n	800d240 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d234:	2200      	movs	r2, #0
 800d236:	4908      	ldr	r1, [pc, #32]	; (800d258 <tcpip_tcp_timer+0x40>)
 800d238:	20fa      	movs	r0, #250	; 0xfa
 800d23a:	f000 f8f3 	bl	800d424 <sys_timeout>
 800d23e:	e003      	b.n	800d248 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800d240:	4b06      	ldr	r3, [pc, #24]	; (800d25c <tcpip_tcp_timer+0x44>)
 800d242:	2200      	movs	r2, #0
 800d244:	601a      	str	r2, [r3, #0]
  }
}
 800d246:	bf00      	nop
 800d248:	bf00      	nop
 800d24a:	3708      	adds	r7, #8
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bd80      	pop	{r7, pc}
 800d250:	20006d4c 	.word	0x20006d4c
 800d254:	20006d5c 	.word	0x20006d5c
 800d258:	0800d219 	.word	0x0800d219
 800d25c:	20000594 	.word	0x20000594

0800d260 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d264:	4b0a      	ldr	r3, [pc, #40]	; (800d290 <tcp_timer_needed+0x30>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d10f      	bne.n	800d28c <tcp_timer_needed+0x2c>
 800d26c:	4b09      	ldr	r3, [pc, #36]	; (800d294 <tcp_timer_needed+0x34>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d103      	bne.n	800d27c <tcp_timer_needed+0x1c>
 800d274:	4b08      	ldr	r3, [pc, #32]	; (800d298 <tcp_timer_needed+0x38>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d007      	beq.n	800d28c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800d27c:	4b04      	ldr	r3, [pc, #16]	; (800d290 <tcp_timer_needed+0x30>)
 800d27e:	2201      	movs	r2, #1
 800d280:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d282:	2200      	movs	r2, #0
 800d284:	4905      	ldr	r1, [pc, #20]	; (800d29c <tcp_timer_needed+0x3c>)
 800d286:	20fa      	movs	r0, #250	; 0xfa
 800d288:	f000 f8cc 	bl	800d424 <sys_timeout>
  }
}
 800d28c:	bf00      	nop
 800d28e:	bd80      	pop	{r7, pc}
 800d290:	20000594 	.word	0x20000594
 800d294:	20006d4c 	.word	0x20006d4c
 800d298:	20006d5c 	.word	0x20006d5c
 800d29c:	0800d219 	.word	0x0800d219

0800d2a0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b086      	sub	sp, #24
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	60f8      	str	r0, [r7, #12]
 800d2a8:	60b9      	str	r1, [r7, #8]
 800d2aa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d2ac:	2006      	movs	r0, #6
 800d2ae:	f7f8 fd45 	bl	8005d3c <memp_malloc>
 800d2b2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d109      	bne.n	800d2ce <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d2ba:	693b      	ldr	r3, [r7, #16]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d151      	bne.n	800d364 <sys_timeout_abs+0xc4>
 800d2c0:	4b2a      	ldr	r3, [pc, #168]	; (800d36c <sys_timeout_abs+0xcc>)
 800d2c2:	22be      	movs	r2, #190	; 0xbe
 800d2c4:	492a      	ldr	r1, [pc, #168]	; (800d370 <sys_timeout_abs+0xd0>)
 800d2c6:	482b      	ldr	r0, [pc, #172]	; (800d374 <sys_timeout_abs+0xd4>)
 800d2c8:	f002 fdf4 	bl	800feb4 <iprintf>
    return;
 800d2cc:	e04a      	b.n	800d364 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800d2ce:	693b      	ldr	r3, [r7, #16]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800d2d4:	693b      	ldr	r3, [r7, #16]
 800d2d6:	68ba      	ldr	r2, [r7, #8]
 800d2d8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	687a      	ldr	r2, [r7, #4]
 800d2de:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	68fa      	ldr	r2, [r7, #12]
 800d2e4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d2e6:	4b24      	ldr	r3, [pc, #144]	; (800d378 <sys_timeout_abs+0xd8>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d103      	bne.n	800d2f6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800d2ee:	4a22      	ldr	r2, [pc, #136]	; (800d378 <sys_timeout_abs+0xd8>)
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	6013      	str	r3, [r2, #0]
    return;
 800d2f4:	e037      	b.n	800d366 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	685a      	ldr	r2, [r3, #4]
 800d2fa:	4b1f      	ldr	r3, [pc, #124]	; (800d378 <sys_timeout_abs+0xd8>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	685b      	ldr	r3, [r3, #4]
 800d300:	1ad3      	subs	r3, r2, r3
 800d302:	0fdb      	lsrs	r3, r3, #31
 800d304:	f003 0301 	and.w	r3, r3, #1
 800d308:	b2db      	uxtb	r3, r3
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d007      	beq.n	800d31e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800d30e:	4b1a      	ldr	r3, [pc, #104]	; (800d378 <sys_timeout_abs+0xd8>)
 800d310:	681a      	ldr	r2, [r3, #0]
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d316:	4a18      	ldr	r2, [pc, #96]	; (800d378 <sys_timeout_abs+0xd8>)
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	6013      	str	r3, [r2, #0]
 800d31c:	e023      	b.n	800d366 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d31e:	4b16      	ldr	r3, [pc, #88]	; (800d378 <sys_timeout_abs+0xd8>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	617b      	str	r3, [r7, #20]
 800d324:	e01a      	b.n	800d35c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d00b      	beq.n	800d346 <sys_timeout_abs+0xa6>
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	685a      	ldr	r2, [r3, #4]
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	685b      	ldr	r3, [r3, #4]
 800d338:	1ad3      	subs	r3, r2, r3
 800d33a:	0fdb      	lsrs	r3, r3, #31
 800d33c:	f003 0301 	and.w	r3, r3, #1
 800d340:	b2db      	uxtb	r3, r3
 800d342:	2b00      	cmp	r3, #0
 800d344:	d007      	beq.n	800d356 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800d346:	697b      	ldr	r3, [r7, #20]
 800d348:	681a      	ldr	r2, [r3, #0]
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800d34e:	697b      	ldr	r3, [r7, #20]
 800d350:	693a      	ldr	r2, [r7, #16]
 800d352:	601a      	str	r2, [r3, #0]
        break;
 800d354:	e007      	b.n	800d366 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	617b      	str	r3, [r7, #20]
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d1e1      	bne.n	800d326 <sys_timeout_abs+0x86>
 800d362:	e000      	b.n	800d366 <sys_timeout_abs+0xc6>
    return;
 800d364:	bf00      	nop
      }
    }
  }
}
 800d366:	3718      	adds	r7, #24
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}
 800d36c:	08013714 	.word	0x08013714
 800d370:	08013748 	.word	0x08013748
 800d374:	08013788 	.word	0x08013788
 800d378:	2000058c 	.word	0x2000058c

0800d37c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b086      	sub	sp, #24
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	685b      	ldr	r3, [r3, #4]
 800d38c:	4798      	blx	r3

  now = sys_now();
 800d38e:	f7f6 fa49 	bl	8003824 <sys_now>
 800d392:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	681a      	ldr	r2, [r3, #0]
 800d398:	4b0f      	ldr	r3, [pc, #60]	; (800d3d8 <lwip_cyclic_timer+0x5c>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	4413      	add	r3, r2
 800d39e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d3a0:	68fa      	ldr	r2, [r7, #12]
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	1ad3      	subs	r3, r2, r3
 800d3a6:	0fdb      	lsrs	r3, r3, #31
 800d3a8:	f003 0301 	and.w	r3, r3, #1
 800d3ac:	b2db      	uxtb	r3, r3
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d009      	beq.n	800d3c6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d3b2:	697b      	ldr	r3, [r7, #20]
 800d3b4:	681a      	ldr	r2, [r3, #0]
 800d3b6:	693b      	ldr	r3, [r7, #16]
 800d3b8:	4413      	add	r3, r2
 800d3ba:	687a      	ldr	r2, [r7, #4]
 800d3bc:	4907      	ldr	r1, [pc, #28]	; (800d3dc <lwip_cyclic_timer+0x60>)
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f7ff ff6e 	bl	800d2a0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800d3c4:	e004      	b.n	800d3d0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d3c6:	687a      	ldr	r2, [r7, #4]
 800d3c8:	4904      	ldr	r1, [pc, #16]	; (800d3dc <lwip_cyclic_timer+0x60>)
 800d3ca:	68f8      	ldr	r0, [r7, #12]
 800d3cc:	f7ff ff68 	bl	800d2a0 <sys_timeout_abs>
}
 800d3d0:	bf00      	nop
 800d3d2:	3718      	adds	r7, #24
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}
 800d3d8:	20000590 	.word	0x20000590
 800d3dc:	0800d37d 	.word	0x0800d37d

0800d3e0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b082      	sub	sp, #8
 800d3e4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	607b      	str	r3, [r7, #4]
 800d3ea:	e00e      	b.n	800d40a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d3ec:	4a0b      	ldr	r2, [pc, #44]	; (800d41c <sys_timeouts_init+0x3c>)
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	00db      	lsls	r3, r3, #3
 800d3f8:	4a08      	ldr	r2, [pc, #32]	; (800d41c <sys_timeouts_init+0x3c>)
 800d3fa:	4413      	add	r3, r2
 800d3fc:	461a      	mov	r2, r3
 800d3fe:	4908      	ldr	r1, [pc, #32]	; (800d420 <sys_timeouts_init+0x40>)
 800d400:	f000 f810 	bl	800d424 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	3301      	adds	r3, #1
 800d408:	607b      	str	r3, [r7, #4]
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2b02      	cmp	r3, #2
 800d40e:	d9ed      	bls.n	800d3ec <sys_timeouts_init+0xc>
  }
}
 800d410:	bf00      	nop
 800d412:	bf00      	nop
 800d414:	3708      	adds	r7, #8
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}
 800d41a:	bf00      	nop
 800d41c:	08021214 	.word	0x08021214
 800d420:	0800d37d 	.word	0x0800d37d

0800d424 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b086      	sub	sp, #24
 800d428:	af00      	add	r7, sp, #0
 800d42a:	60f8      	str	r0, [r7, #12]
 800d42c:	60b9      	str	r1, [r7, #8]
 800d42e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d436:	d306      	bcc.n	800d446 <sys_timeout+0x22>
 800d438:	4b0a      	ldr	r3, [pc, #40]	; (800d464 <sys_timeout+0x40>)
 800d43a:	f240 1229 	movw	r2, #297	; 0x129
 800d43e:	490a      	ldr	r1, [pc, #40]	; (800d468 <sys_timeout+0x44>)
 800d440:	480a      	ldr	r0, [pc, #40]	; (800d46c <sys_timeout+0x48>)
 800d442:	f002 fd37 	bl	800feb4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d446:	f7f6 f9ed 	bl	8003824 <sys_now>
 800d44a:	4602      	mov	r2, r0
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	4413      	add	r3, r2
 800d450:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d452:	687a      	ldr	r2, [r7, #4]
 800d454:	68b9      	ldr	r1, [r7, #8]
 800d456:	6978      	ldr	r0, [r7, #20]
 800d458:	f7ff ff22 	bl	800d2a0 <sys_timeout_abs>
#endif
}
 800d45c:	bf00      	nop
 800d45e:	3718      	adds	r7, #24
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}
 800d464:	08013714 	.word	0x08013714
 800d468:	080137b0 	.word	0x080137b0
 800d46c:	08013788 	.word	0x08013788

0800d470 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b084      	sub	sp, #16
 800d474:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800d476:	f7f6 f9d5 	bl	8003824 <sys_now>
 800d47a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800d47c:	4b1a      	ldr	r3, [pc, #104]	; (800d4e8 <sys_check_timeouts+0x78>)
 800d47e:	781b      	ldrb	r3, [r3, #0]
 800d480:	b2db      	uxtb	r3, r3
 800d482:	2b00      	cmp	r3, #0
 800d484:	d001      	beq.n	800d48a <sys_check_timeouts+0x1a>
 800d486:	f7f8 ff7d 	bl	8006384 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800d48a:	4b18      	ldr	r3, [pc, #96]	; (800d4ec <sys_check_timeouts+0x7c>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d022      	beq.n	800d4dc <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	685b      	ldr	r3, [r3, #4]
 800d49a:	68fa      	ldr	r2, [r7, #12]
 800d49c:	1ad3      	subs	r3, r2, r3
 800d49e:	0fdb      	lsrs	r3, r3, #31
 800d4a0:	f003 0301 	and.w	r3, r3, #1
 800d4a4:	b2db      	uxtb	r3, r3
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d11a      	bne.n	800d4e0 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	4a0f      	ldr	r2, [pc, #60]	; (800d4ec <sys_check_timeouts+0x7c>)
 800d4b0:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	689b      	ldr	r3, [r3, #8]
 800d4b6:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	68db      	ldr	r3, [r3, #12]
 800d4bc:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	685b      	ldr	r3, [r3, #4]
 800d4c2:	4a0b      	ldr	r2, [pc, #44]	; (800d4f0 <sys_check_timeouts+0x80>)
 800d4c4:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d4c6:	68b9      	ldr	r1, [r7, #8]
 800d4c8:	2006      	movs	r0, #6
 800d4ca:	f7f8 fc83 	bl	8005dd4 <memp_free>
    if (handler != NULL) {
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d0d3      	beq.n	800d47c <sys_check_timeouts+0xc>
      handler(arg);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6838      	ldr	r0, [r7, #0]
 800d4d8:	4798      	blx	r3
  do {
 800d4da:	e7cf      	b.n	800d47c <sys_check_timeouts+0xc>
      return;
 800d4dc:	bf00      	nop
 800d4de:	e000      	b.n	800d4e2 <sys_check_timeouts+0x72>
      return;
 800d4e0:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d4e2:	3710      	adds	r7, #16
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}
 800d4e8:	20006d44 	.word	0x20006d44
 800d4ec:	2000058c 	.word	0x2000058c
 800d4f0:	20000590 	.word	0x20000590

0800d4f4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d4f8:	f002 fcf4 	bl	800fee4 <rand>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	b29b      	uxth	r3, r3
 800d500:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d504:	b29b      	uxth	r3, r3
 800d506:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d50a:	b29a      	uxth	r2, r3
 800d50c:	4b01      	ldr	r3, [pc, #4]	; (800d514 <udp_init+0x20>)
 800d50e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d510:	bf00      	nop
 800d512:	bd80      	pop	{r7, pc}
 800d514:	20000024 	.word	0x20000024

0800d518 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b084      	sub	sp, #16
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	60f8      	str	r0, [r7, #12]
 800d520:	60b9      	str	r1, [r7, #8]
 800d522:	4613      	mov	r3, r2
 800d524:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d105      	bne.n	800d538 <udp_input_local_match+0x20>
 800d52c:	4b27      	ldr	r3, [pc, #156]	; (800d5cc <udp_input_local_match+0xb4>)
 800d52e:	2287      	movs	r2, #135	; 0x87
 800d530:	4927      	ldr	r1, [pc, #156]	; (800d5d0 <udp_input_local_match+0xb8>)
 800d532:	4828      	ldr	r0, [pc, #160]	; (800d5d4 <udp_input_local_match+0xbc>)
 800d534:	f002 fcbe 	bl	800feb4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d105      	bne.n	800d54a <udp_input_local_match+0x32>
 800d53e:	4b23      	ldr	r3, [pc, #140]	; (800d5cc <udp_input_local_match+0xb4>)
 800d540:	2288      	movs	r2, #136	; 0x88
 800d542:	4925      	ldr	r1, [pc, #148]	; (800d5d8 <udp_input_local_match+0xc0>)
 800d544:	4823      	ldr	r0, [pc, #140]	; (800d5d4 <udp_input_local_match+0xbc>)
 800d546:	f002 fcb5 	bl	800feb4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	7a1b      	ldrb	r3, [r3, #8]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d00b      	beq.n	800d56a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	7a1a      	ldrb	r2, [r3, #8]
 800d556:	4b21      	ldr	r3, [pc, #132]	; (800d5dc <udp_input_local_match+0xc4>)
 800d558:	685b      	ldr	r3, [r3, #4]
 800d55a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d55e:	3301      	adds	r3, #1
 800d560:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d562:	429a      	cmp	r2, r3
 800d564:	d001      	beq.n	800d56a <udp_input_local_match+0x52>
    return 0;
 800d566:	2300      	movs	r3, #0
 800d568:	e02b      	b.n	800d5c2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800d56a:	79fb      	ldrb	r3, [r7, #7]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d018      	beq.n	800d5a2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d013      	beq.n	800d59e <udp_input_local_match+0x86>
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d00f      	beq.n	800d59e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d57e:	4b17      	ldr	r3, [pc, #92]	; (800d5dc <udp_input_local_match+0xc4>)
 800d580:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d582:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d586:	d00a      	beq.n	800d59e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	681a      	ldr	r2, [r3, #0]
 800d58c:	4b13      	ldr	r3, [pc, #76]	; (800d5dc <udp_input_local_match+0xc4>)
 800d58e:	695b      	ldr	r3, [r3, #20]
 800d590:	405a      	eors	r2, r3
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	3308      	adds	r3, #8
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d110      	bne.n	800d5c0 <udp_input_local_match+0xa8>
          return 1;
 800d59e:	2301      	movs	r3, #1
 800d5a0:	e00f      	b.n	800d5c2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d009      	beq.n	800d5bc <udp_input_local_match+0xa4>
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d005      	beq.n	800d5bc <udp_input_local_match+0xa4>
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	681a      	ldr	r2, [r3, #0]
 800d5b4:	4b09      	ldr	r3, [pc, #36]	; (800d5dc <udp_input_local_match+0xc4>)
 800d5b6:	695b      	ldr	r3, [r3, #20]
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d101      	bne.n	800d5c0 <udp_input_local_match+0xa8>
        return 1;
 800d5bc:	2301      	movs	r3, #1
 800d5be:	e000      	b.n	800d5c2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800d5c0:	2300      	movs	r3, #0
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3710      	adds	r7, #16
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}
 800d5ca:	bf00      	nop
 800d5cc:	080137fc 	.word	0x080137fc
 800d5d0:	0801382c 	.word	0x0801382c
 800d5d4:	08013850 	.word	0x08013850
 800d5d8:	08013878 	.word	0x08013878
 800d5dc:	20003808 	.word	0x20003808

0800d5e0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d5e0:	b590      	push	{r4, r7, lr}
 800d5e2:	b08d      	sub	sp, #52	; 0x34
 800d5e4:	af02      	add	r7, sp, #8
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d105      	bne.n	800d600 <udp_input+0x20>
 800d5f4:	4b7c      	ldr	r3, [pc, #496]	; (800d7e8 <udp_input+0x208>)
 800d5f6:	22cf      	movs	r2, #207	; 0xcf
 800d5f8:	497c      	ldr	r1, [pc, #496]	; (800d7ec <udp_input+0x20c>)
 800d5fa:	487d      	ldr	r0, [pc, #500]	; (800d7f0 <udp_input+0x210>)
 800d5fc:	f002 fc5a 	bl	800feb4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d105      	bne.n	800d612 <udp_input+0x32>
 800d606:	4b78      	ldr	r3, [pc, #480]	; (800d7e8 <udp_input+0x208>)
 800d608:	22d0      	movs	r2, #208	; 0xd0
 800d60a:	497a      	ldr	r1, [pc, #488]	; (800d7f4 <udp_input+0x214>)
 800d60c:	4878      	ldr	r0, [pc, #480]	; (800d7f0 <udp_input+0x210>)
 800d60e:	f002 fc51 	bl	800feb4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	895b      	ldrh	r3, [r3, #10]
 800d616:	2b07      	cmp	r3, #7
 800d618:	d803      	bhi.n	800d622 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f7f9 f9ec 	bl	80069f8 <pbuf_free>
    goto end;
 800d620:	e0de      	b.n	800d7e0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	685b      	ldr	r3, [r3, #4]
 800d626:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d628:	4b73      	ldr	r3, [pc, #460]	; (800d7f8 <udp_input+0x218>)
 800d62a:	695b      	ldr	r3, [r3, #20]
 800d62c:	4a72      	ldr	r2, [pc, #456]	; (800d7f8 <udp_input+0x218>)
 800d62e:	6812      	ldr	r2, [r2, #0]
 800d630:	4611      	mov	r1, r2
 800d632:	4618      	mov	r0, r3
 800d634:	f001 fc88 	bl	800ef48 <ip4_addr_isbroadcast_u32>
 800d638:	4603      	mov	r3, r0
 800d63a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	881b      	ldrh	r3, [r3, #0]
 800d640:	b29b      	uxth	r3, r3
 800d642:	4618      	mov	r0, r3
 800d644:	f7f7 feba 	bl	80053bc <lwip_htons>
 800d648:	4603      	mov	r3, r0
 800d64a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	885b      	ldrh	r3, [r3, #2]
 800d650:	b29b      	uxth	r3, r3
 800d652:	4618      	mov	r0, r3
 800d654:	f7f7 feb2 	bl	80053bc <lwip_htons>
 800d658:	4603      	mov	r3, r0
 800d65a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800d65c:	2300      	movs	r3, #0
 800d65e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800d660:	2300      	movs	r3, #0
 800d662:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800d664:	2300      	movs	r3, #0
 800d666:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d668:	4b64      	ldr	r3, [pc, #400]	; (800d7fc <udp_input+0x21c>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	627b      	str	r3, [r7, #36]	; 0x24
 800d66e:	e054      	b.n	800d71a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800d670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d672:	8a5b      	ldrh	r3, [r3, #18]
 800d674:	89fa      	ldrh	r2, [r7, #14]
 800d676:	429a      	cmp	r2, r3
 800d678:	d14a      	bne.n	800d710 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800d67a:	7cfb      	ldrb	r3, [r7, #19]
 800d67c:	461a      	mov	r2, r3
 800d67e:	6839      	ldr	r1, [r7, #0]
 800d680:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d682:	f7ff ff49 	bl	800d518 <udp_input_local_match>
 800d686:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d041      	beq.n	800d710 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800d68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d68e:	7c1b      	ldrb	r3, [r3, #16]
 800d690:	f003 0304 	and.w	r3, r3, #4
 800d694:	2b00      	cmp	r3, #0
 800d696:	d11d      	bne.n	800d6d4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800d698:	69fb      	ldr	r3, [r7, #28]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d102      	bne.n	800d6a4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800d69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a0:	61fb      	str	r3, [r7, #28]
 800d6a2:	e017      	b.n	800d6d4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800d6a4:	7cfb      	ldrb	r3, [r7, #19]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d014      	beq.n	800d6d4 <udp_input+0xf4>
 800d6aa:	4b53      	ldr	r3, [pc, #332]	; (800d7f8 <udp_input+0x218>)
 800d6ac:	695b      	ldr	r3, [r3, #20]
 800d6ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d6b2:	d10f      	bne.n	800d6d4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800d6b4:	69fb      	ldr	r3, [r7, #28]
 800d6b6:	681a      	ldr	r2, [r3, #0]
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	3304      	adds	r3, #4
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	d008      	beq.n	800d6d4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800d6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c4:	681a      	ldr	r2, [r3, #0]
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	3304      	adds	r3, #4
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	d101      	bne.n	800d6d4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800d6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800d6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d6:	8a9b      	ldrh	r3, [r3, #20]
 800d6d8:	8a3a      	ldrh	r2, [r7, #16]
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d118      	bne.n	800d710 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d005      	beq.n	800d6f2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e8:	685a      	ldr	r2, [r3, #4]
 800d6ea:	4b43      	ldr	r3, [pc, #268]	; (800d7f8 <udp_input+0x218>)
 800d6ec:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d10e      	bne.n	800d710 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800d6f2:	6a3b      	ldr	r3, [r7, #32]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d014      	beq.n	800d722 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800d6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6fa:	68da      	ldr	r2, [r3, #12]
 800d6fc:	6a3b      	ldr	r3, [r7, #32]
 800d6fe:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800d700:	4b3e      	ldr	r3, [pc, #248]	; (800d7fc <udp_input+0x21c>)
 800d702:	681a      	ldr	r2, [r3, #0]
 800d704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d706:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800d708:	4a3c      	ldr	r2, [pc, #240]	; (800d7fc <udp_input+0x21c>)
 800d70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800d70e:	e008      	b.n	800d722 <udp_input+0x142>
      }
    }

    prev = pcb;
 800d710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d712:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d716:	68db      	ldr	r3, [r3, #12]
 800d718:	627b      	str	r3, [r7, #36]	; 0x24
 800d71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d1a7      	bne.n	800d670 <udp_input+0x90>
 800d720:	e000      	b.n	800d724 <udp_input+0x144>
        break;
 800d722:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800d724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d726:	2b00      	cmp	r3, #0
 800d728:	d101      	bne.n	800d72e <udp_input+0x14e>
    pcb = uncon_pcb;
 800d72a:	69fb      	ldr	r3, [r7, #28]
 800d72c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800d72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d730:	2b00      	cmp	r3, #0
 800d732:	d002      	beq.n	800d73a <udp_input+0x15a>
    for_us = 1;
 800d734:	2301      	movs	r3, #1
 800d736:	76fb      	strb	r3, [r7, #27]
 800d738:	e00a      	b.n	800d750 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	3304      	adds	r3, #4
 800d73e:	681a      	ldr	r2, [r3, #0]
 800d740:	4b2d      	ldr	r3, [pc, #180]	; (800d7f8 <udp_input+0x218>)
 800d742:	695b      	ldr	r3, [r3, #20]
 800d744:	429a      	cmp	r2, r3
 800d746:	bf0c      	ite	eq
 800d748:	2301      	moveq	r3, #1
 800d74a:	2300      	movne	r3, #0
 800d74c:	b2db      	uxtb	r3, r3
 800d74e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800d750:	7efb      	ldrb	r3, [r7, #27]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d041      	beq.n	800d7da <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800d756:	2108      	movs	r1, #8
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	f7f9 f8c7 	bl	80068ec <pbuf_remove_header>
 800d75e:	4603      	mov	r3, r0
 800d760:	2b00      	cmp	r3, #0
 800d762:	d00a      	beq.n	800d77a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800d764:	4b20      	ldr	r3, [pc, #128]	; (800d7e8 <udp_input+0x208>)
 800d766:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800d76a:	4925      	ldr	r1, [pc, #148]	; (800d800 <udp_input+0x220>)
 800d76c:	4820      	ldr	r0, [pc, #128]	; (800d7f0 <udp_input+0x210>)
 800d76e:	f002 fba1 	bl	800feb4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800d772:	6878      	ldr	r0, [r7, #4]
 800d774:	f7f9 f940 	bl	80069f8 <pbuf_free>
      goto end;
 800d778:	e032      	b.n	800d7e0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800d77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d012      	beq.n	800d7a6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800d780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d782:	699b      	ldr	r3, [r3, #24]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d00a      	beq.n	800d79e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d78a:	699c      	ldr	r4, [r3, #24]
 800d78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d78e:	69d8      	ldr	r0, [r3, #28]
 800d790:	8a3b      	ldrh	r3, [r7, #16]
 800d792:	9300      	str	r3, [sp, #0]
 800d794:	4b1b      	ldr	r3, [pc, #108]	; (800d804 <udp_input+0x224>)
 800d796:	687a      	ldr	r2, [r7, #4]
 800d798:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d79a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800d79c:	e021      	b.n	800d7e2 <udp_input+0x202>
        pbuf_free(p);
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f7f9 f92a 	bl	80069f8 <pbuf_free>
        goto end;
 800d7a4:	e01c      	b.n	800d7e0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d7a6:	7cfb      	ldrb	r3, [r7, #19]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d112      	bne.n	800d7d2 <udp_input+0x1f2>
 800d7ac:	4b12      	ldr	r3, [pc, #72]	; (800d7f8 <udp_input+0x218>)
 800d7ae:	695b      	ldr	r3, [r3, #20]
 800d7b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d7b4:	2be0      	cmp	r3, #224	; 0xe0
 800d7b6:	d00c      	beq.n	800d7d2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d7b8:	4b0f      	ldr	r3, [pc, #60]	; (800d7f8 <udp_input+0x218>)
 800d7ba:	899b      	ldrh	r3, [r3, #12]
 800d7bc:	3308      	adds	r3, #8
 800d7be:	b29b      	uxth	r3, r3
 800d7c0:	b21b      	sxth	r3, r3
 800d7c2:	4619      	mov	r1, r3
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f7f9 f904 	bl	80069d2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d7ca:	2103      	movs	r1, #3
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	f001 f89b 	bl	800e908 <icmp_dest_unreach>
      pbuf_free(p);
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f7f9 f910 	bl	80069f8 <pbuf_free>
  return;
 800d7d8:	e003      	b.n	800d7e2 <udp_input+0x202>
    pbuf_free(p);
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f7f9 f90c 	bl	80069f8 <pbuf_free>
  return;
 800d7e0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d7e2:	372c      	adds	r7, #44	; 0x2c
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd90      	pop	{r4, r7, pc}
 800d7e8:	080137fc 	.word	0x080137fc
 800d7ec:	080138a0 	.word	0x080138a0
 800d7f0:	08013850 	.word	0x08013850
 800d7f4:	080138b8 	.word	0x080138b8
 800d7f8:	20003808 	.word	0x20003808
 800d7fc:	20006d64 	.word	0x20006d64
 800d800:	080138d4 	.word	0x080138d4
 800d804:	20003818 	.word	0x20003818

0800d808 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d808:	b480      	push	{r7}
 800d80a:	b085      	sub	sp, #20
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d01e      	beq.n	800d856 <udp_netif_ip_addr_changed+0x4e>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d01a      	beq.n	800d856 <udp_netif_ip_addr_changed+0x4e>
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d017      	beq.n	800d856 <udp_netif_ip_addr_changed+0x4e>
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d013      	beq.n	800d856 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d82e:	4b0d      	ldr	r3, [pc, #52]	; (800d864 <udp_netif_ip_addr_changed+0x5c>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	60fb      	str	r3, [r7, #12]
 800d834:	e00c      	b.n	800d850 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	681a      	ldr	r2, [r3, #0]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	429a      	cmp	r2, r3
 800d840:	d103      	bne.n	800d84a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	681a      	ldr	r2, [r3, #0]
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	68db      	ldr	r3, [r3, #12]
 800d84e:	60fb      	str	r3, [r7, #12]
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d1ef      	bne.n	800d836 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800d856:	bf00      	nop
 800d858:	3714      	adds	r7, #20
 800d85a:	46bd      	mov	sp, r7
 800d85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d860:	4770      	bx	lr
 800d862:	bf00      	nop
 800d864:	20006d64 	.word	0x20006d64

0800d868 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b082      	sub	sp, #8
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d870:	4915      	ldr	r1, [pc, #84]	; (800d8c8 <etharp_free_entry+0x60>)
 800d872:	687a      	ldr	r2, [r7, #4]
 800d874:	4613      	mov	r3, r2
 800d876:	005b      	lsls	r3, r3, #1
 800d878:	4413      	add	r3, r2
 800d87a:	00db      	lsls	r3, r3, #3
 800d87c:	440b      	add	r3, r1
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d013      	beq.n	800d8ac <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d884:	4910      	ldr	r1, [pc, #64]	; (800d8c8 <etharp_free_entry+0x60>)
 800d886:	687a      	ldr	r2, [r7, #4]
 800d888:	4613      	mov	r3, r2
 800d88a:	005b      	lsls	r3, r3, #1
 800d88c:	4413      	add	r3, r2
 800d88e:	00db      	lsls	r3, r3, #3
 800d890:	440b      	add	r3, r1
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	4618      	mov	r0, r3
 800d896:	f7f9 f8af 	bl	80069f8 <pbuf_free>
    arp_table[i].q = NULL;
 800d89a:	490b      	ldr	r1, [pc, #44]	; (800d8c8 <etharp_free_entry+0x60>)
 800d89c:	687a      	ldr	r2, [r7, #4]
 800d89e:	4613      	mov	r3, r2
 800d8a0:	005b      	lsls	r3, r3, #1
 800d8a2:	4413      	add	r3, r2
 800d8a4:	00db      	lsls	r3, r3, #3
 800d8a6:	440b      	add	r3, r1
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d8ac:	4906      	ldr	r1, [pc, #24]	; (800d8c8 <etharp_free_entry+0x60>)
 800d8ae:	687a      	ldr	r2, [r7, #4]
 800d8b0:	4613      	mov	r3, r2
 800d8b2:	005b      	lsls	r3, r3, #1
 800d8b4:	4413      	add	r3, r2
 800d8b6:	00db      	lsls	r3, r3, #3
 800d8b8:	440b      	add	r3, r1
 800d8ba:	3314      	adds	r3, #20
 800d8bc:	2200      	movs	r2, #0
 800d8be:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800d8c0:	bf00      	nop
 800d8c2:	3708      	adds	r7, #8
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}
 800d8c8:	20000598 	.word	0x20000598

0800d8cc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b082      	sub	sp, #8
 800d8d0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	607b      	str	r3, [r7, #4]
 800d8d6:	e096      	b.n	800da06 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800d8d8:	494f      	ldr	r1, [pc, #316]	; (800da18 <etharp_tmr+0x14c>)
 800d8da:	687a      	ldr	r2, [r7, #4]
 800d8dc:	4613      	mov	r3, r2
 800d8de:	005b      	lsls	r3, r3, #1
 800d8e0:	4413      	add	r3, r2
 800d8e2:	00db      	lsls	r3, r3, #3
 800d8e4:	440b      	add	r3, r1
 800d8e6:	3314      	adds	r3, #20
 800d8e8:	781b      	ldrb	r3, [r3, #0]
 800d8ea:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800d8ec:	78fb      	ldrb	r3, [r7, #3]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	f000 8086 	beq.w	800da00 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800d8f4:	4948      	ldr	r1, [pc, #288]	; (800da18 <etharp_tmr+0x14c>)
 800d8f6:	687a      	ldr	r2, [r7, #4]
 800d8f8:	4613      	mov	r3, r2
 800d8fa:	005b      	lsls	r3, r3, #1
 800d8fc:	4413      	add	r3, r2
 800d8fe:	00db      	lsls	r3, r3, #3
 800d900:	440b      	add	r3, r1
 800d902:	3312      	adds	r3, #18
 800d904:	881b      	ldrh	r3, [r3, #0]
 800d906:	3301      	adds	r3, #1
 800d908:	b298      	uxth	r0, r3
 800d90a:	4943      	ldr	r1, [pc, #268]	; (800da18 <etharp_tmr+0x14c>)
 800d90c:	687a      	ldr	r2, [r7, #4]
 800d90e:	4613      	mov	r3, r2
 800d910:	005b      	lsls	r3, r3, #1
 800d912:	4413      	add	r3, r2
 800d914:	00db      	lsls	r3, r3, #3
 800d916:	440b      	add	r3, r1
 800d918:	3312      	adds	r3, #18
 800d91a:	4602      	mov	r2, r0
 800d91c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d91e:	493e      	ldr	r1, [pc, #248]	; (800da18 <etharp_tmr+0x14c>)
 800d920:	687a      	ldr	r2, [r7, #4]
 800d922:	4613      	mov	r3, r2
 800d924:	005b      	lsls	r3, r3, #1
 800d926:	4413      	add	r3, r2
 800d928:	00db      	lsls	r3, r3, #3
 800d92a:	440b      	add	r3, r1
 800d92c:	3312      	adds	r3, #18
 800d92e:	881b      	ldrh	r3, [r3, #0]
 800d930:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d934:	d215      	bcs.n	800d962 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d936:	4938      	ldr	r1, [pc, #224]	; (800da18 <etharp_tmr+0x14c>)
 800d938:	687a      	ldr	r2, [r7, #4]
 800d93a:	4613      	mov	r3, r2
 800d93c:	005b      	lsls	r3, r3, #1
 800d93e:	4413      	add	r3, r2
 800d940:	00db      	lsls	r3, r3, #3
 800d942:	440b      	add	r3, r1
 800d944:	3314      	adds	r3, #20
 800d946:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d948:	2b01      	cmp	r3, #1
 800d94a:	d10e      	bne.n	800d96a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800d94c:	4932      	ldr	r1, [pc, #200]	; (800da18 <etharp_tmr+0x14c>)
 800d94e:	687a      	ldr	r2, [r7, #4]
 800d950:	4613      	mov	r3, r2
 800d952:	005b      	lsls	r3, r3, #1
 800d954:	4413      	add	r3, r2
 800d956:	00db      	lsls	r3, r3, #3
 800d958:	440b      	add	r3, r1
 800d95a:	3312      	adds	r3, #18
 800d95c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d95e:	2b04      	cmp	r3, #4
 800d960:	d903      	bls.n	800d96a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f7ff ff80 	bl	800d868 <etharp_free_entry>
 800d968:	e04a      	b.n	800da00 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d96a:	492b      	ldr	r1, [pc, #172]	; (800da18 <etharp_tmr+0x14c>)
 800d96c:	687a      	ldr	r2, [r7, #4]
 800d96e:	4613      	mov	r3, r2
 800d970:	005b      	lsls	r3, r3, #1
 800d972:	4413      	add	r3, r2
 800d974:	00db      	lsls	r3, r3, #3
 800d976:	440b      	add	r3, r1
 800d978:	3314      	adds	r3, #20
 800d97a:	781b      	ldrb	r3, [r3, #0]
 800d97c:	2b03      	cmp	r3, #3
 800d97e:	d10a      	bne.n	800d996 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d980:	4925      	ldr	r1, [pc, #148]	; (800da18 <etharp_tmr+0x14c>)
 800d982:	687a      	ldr	r2, [r7, #4]
 800d984:	4613      	mov	r3, r2
 800d986:	005b      	lsls	r3, r3, #1
 800d988:	4413      	add	r3, r2
 800d98a:	00db      	lsls	r3, r3, #3
 800d98c:	440b      	add	r3, r1
 800d98e:	3314      	adds	r3, #20
 800d990:	2204      	movs	r2, #4
 800d992:	701a      	strb	r2, [r3, #0]
 800d994:	e034      	b.n	800da00 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d996:	4920      	ldr	r1, [pc, #128]	; (800da18 <etharp_tmr+0x14c>)
 800d998:	687a      	ldr	r2, [r7, #4]
 800d99a:	4613      	mov	r3, r2
 800d99c:	005b      	lsls	r3, r3, #1
 800d99e:	4413      	add	r3, r2
 800d9a0:	00db      	lsls	r3, r3, #3
 800d9a2:	440b      	add	r3, r1
 800d9a4:	3314      	adds	r3, #20
 800d9a6:	781b      	ldrb	r3, [r3, #0]
 800d9a8:	2b04      	cmp	r3, #4
 800d9aa:	d10a      	bne.n	800d9c2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d9ac:	491a      	ldr	r1, [pc, #104]	; (800da18 <etharp_tmr+0x14c>)
 800d9ae:	687a      	ldr	r2, [r7, #4]
 800d9b0:	4613      	mov	r3, r2
 800d9b2:	005b      	lsls	r3, r3, #1
 800d9b4:	4413      	add	r3, r2
 800d9b6:	00db      	lsls	r3, r3, #3
 800d9b8:	440b      	add	r3, r1
 800d9ba:	3314      	adds	r3, #20
 800d9bc:	2202      	movs	r2, #2
 800d9be:	701a      	strb	r2, [r3, #0]
 800d9c0:	e01e      	b.n	800da00 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d9c2:	4915      	ldr	r1, [pc, #84]	; (800da18 <etharp_tmr+0x14c>)
 800d9c4:	687a      	ldr	r2, [r7, #4]
 800d9c6:	4613      	mov	r3, r2
 800d9c8:	005b      	lsls	r3, r3, #1
 800d9ca:	4413      	add	r3, r2
 800d9cc:	00db      	lsls	r3, r3, #3
 800d9ce:	440b      	add	r3, r1
 800d9d0:	3314      	adds	r3, #20
 800d9d2:	781b      	ldrb	r3, [r3, #0]
 800d9d4:	2b01      	cmp	r3, #1
 800d9d6:	d113      	bne.n	800da00 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d9d8:	490f      	ldr	r1, [pc, #60]	; (800da18 <etharp_tmr+0x14c>)
 800d9da:	687a      	ldr	r2, [r7, #4]
 800d9dc:	4613      	mov	r3, r2
 800d9de:	005b      	lsls	r3, r3, #1
 800d9e0:	4413      	add	r3, r2
 800d9e2:	00db      	lsls	r3, r3, #3
 800d9e4:	440b      	add	r3, r1
 800d9e6:	3308      	adds	r3, #8
 800d9e8:	6818      	ldr	r0, [r3, #0]
 800d9ea:	687a      	ldr	r2, [r7, #4]
 800d9ec:	4613      	mov	r3, r2
 800d9ee:	005b      	lsls	r3, r3, #1
 800d9f0:	4413      	add	r3, r2
 800d9f2:	00db      	lsls	r3, r3, #3
 800d9f4:	4a08      	ldr	r2, [pc, #32]	; (800da18 <etharp_tmr+0x14c>)
 800d9f6:	4413      	add	r3, r2
 800d9f8:	3304      	adds	r3, #4
 800d9fa:	4619      	mov	r1, r3
 800d9fc:	f000 fe6e 	bl	800e6dc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	3301      	adds	r3, #1
 800da04:	607b      	str	r3, [r7, #4]
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2b09      	cmp	r3, #9
 800da0a:	f77f af65 	ble.w	800d8d8 <etharp_tmr+0xc>
      }
    }
  }
}
 800da0e:	bf00      	nop
 800da10:	bf00      	nop
 800da12:	3708      	adds	r7, #8
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}
 800da18:	20000598 	.word	0x20000598

0800da1c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b08a      	sub	sp, #40	; 0x28
 800da20:	af00      	add	r7, sp, #0
 800da22:	60f8      	str	r0, [r7, #12]
 800da24:	460b      	mov	r3, r1
 800da26:	607a      	str	r2, [r7, #4]
 800da28:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800da2a:	230a      	movs	r3, #10
 800da2c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800da2e:	230a      	movs	r3, #10
 800da30:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800da32:	230a      	movs	r3, #10
 800da34:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800da36:	2300      	movs	r3, #0
 800da38:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800da3a:	230a      	movs	r3, #10
 800da3c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800da3e:	2300      	movs	r3, #0
 800da40:	83bb      	strh	r3, [r7, #28]
 800da42:	2300      	movs	r3, #0
 800da44:	837b      	strh	r3, [r7, #26]
 800da46:	2300      	movs	r3, #0
 800da48:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800da4a:	2300      	movs	r3, #0
 800da4c:	843b      	strh	r3, [r7, #32]
 800da4e:	e0ae      	b.n	800dbae <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800da50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800da54:	49a6      	ldr	r1, [pc, #664]	; (800dcf0 <etharp_find_entry+0x2d4>)
 800da56:	4613      	mov	r3, r2
 800da58:	005b      	lsls	r3, r3, #1
 800da5a:	4413      	add	r3, r2
 800da5c:	00db      	lsls	r3, r3, #3
 800da5e:	440b      	add	r3, r1
 800da60:	3314      	adds	r3, #20
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800da66:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800da6a:	2b0a      	cmp	r3, #10
 800da6c:	d105      	bne.n	800da7a <etharp_find_entry+0x5e>
 800da6e:	7dfb      	ldrb	r3, [r7, #23]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d102      	bne.n	800da7a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800da74:	8c3b      	ldrh	r3, [r7, #32]
 800da76:	847b      	strh	r3, [r7, #34]	; 0x22
 800da78:	e095      	b.n	800dba6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800da7a:	7dfb      	ldrb	r3, [r7, #23]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	f000 8092 	beq.w	800dba6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800da82:	7dfb      	ldrb	r3, [r7, #23]
 800da84:	2b01      	cmp	r3, #1
 800da86:	d009      	beq.n	800da9c <etharp_find_entry+0x80>
 800da88:	7dfb      	ldrb	r3, [r7, #23]
 800da8a:	2b01      	cmp	r3, #1
 800da8c:	d806      	bhi.n	800da9c <etharp_find_entry+0x80>
 800da8e:	4b99      	ldr	r3, [pc, #612]	; (800dcf4 <etharp_find_entry+0x2d8>)
 800da90:	f240 1223 	movw	r2, #291	; 0x123
 800da94:	4998      	ldr	r1, [pc, #608]	; (800dcf8 <etharp_find_entry+0x2dc>)
 800da96:	4899      	ldr	r0, [pc, #612]	; (800dcfc <etharp_find_entry+0x2e0>)
 800da98:	f002 fa0c 	bl	800feb4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d020      	beq.n	800dae4 <etharp_find_entry+0xc8>
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	6819      	ldr	r1, [r3, #0]
 800daa6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800daaa:	4891      	ldr	r0, [pc, #580]	; (800dcf0 <etharp_find_entry+0x2d4>)
 800daac:	4613      	mov	r3, r2
 800daae:	005b      	lsls	r3, r3, #1
 800dab0:	4413      	add	r3, r2
 800dab2:	00db      	lsls	r3, r3, #3
 800dab4:	4403      	add	r3, r0
 800dab6:	3304      	adds	r3, #4
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	4299      	cmp	r1, r3
 800dabc:	d112      	bne.n	800dae4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d00c      	beq.n	800dade <etharp_find_entry+0xc2>
 800dac4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dac8:	4989      	ldr	r1, [pc, #548]	; (800dcf0 <etharp_find_entry+0x2d4>)
 800daca:	4613      	mov	r3, r2
 800dacc:	005b      	lsls	r3, r3, #1
 800dace:	4413      	add	r3, r2
 800dad0:	00db      	lsls	r3, r3, #3
 800dad2:	440b      	add	r3, r1
 800dad4:	3308      	adds	r3, #8
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	687a      	ldr	r2, [r7, #4]
 800dada:	429a      	cmp	r2, r3
 800dadc:	d102      	bne.n	800dae4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800dade:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dae2:	e100      	b.n	800dce6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800dae4:	7dfb      	ldrb	r3, [r7, #23]
 800dae6:	2b01      	cmp	r3, #1
 800dae8:	d140      	bne.n	800db6c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800daea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800daee:	4980      	ldr	r1, [pc, #512]	; (800dcf0 <etharp_find_entry+0x2d4>)
 800daf0:	4613      	mov	r3, r2
 800daf2:	005b      	lsls	r3, r3, #1
 800daf4:	4413      	add	r3, r2
 800daf6:	00db      	lsls	r3, r3, #3
 800daf8:	440b      	add	r3, r1
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d01a      	beq.n	800db36 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800db00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800db04:	497a      	ldr	r1, [pc, #488]	; (800dcf0 <etharp_find_entry+0x2d4>)
 800db06:	4613      	mov	r3, r2
 800db08:	005b      	lsls	r3, r3, #1
 800db0a:	4413      	add	r3, r2
 800db0c:	00db      	lsls	r3, r3, #3
 800db0e:	440b      	add	r3, r1
 800db10:	3312      	adds	r3, #18
 800db12:	881b      	ldrh	r3, [r3, #0]
 800db14:	8bba      	ldrh	r2, [r7, #28]
 800db16:	429a      	cmp	r2, r3
 800db18:	d845      	bhi.n	800dba6 <etharp_find_entry+0x18a>
            old_queue = i;
 800db1a:	8c3b      	ldrh	r3, [r7, #32]
 800db1c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800db1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800db22:	4973      	ldr	r1, [pc, #460]	; (800dcf0 <etharp_find_entry+0x2d4>)
 800db24:	4613      	mov	r3, r2
 800db26:	005b      	lsls	r3, r3, #1
 800db28:	4413      	add	r3, r2
 800db2a:	00db      	lsls	r3, r3, #3
 800db2c:	440b      	add	r3, r1
 800db2e:	3312      	adds	r3, #18
 800db30:	881b      	ldrh	r3, [r3, #0]
 800db32:	83bb      	strh	r3, [r7, #28]
 800db34:	e037      	b.n	800dba6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800db36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800db3a:	496d      	ldr	r1, [pc, #436]	; (800dcf0 <etharp_find_entry+0x2d4>)
 800db3c:	4613      	mov	r3, r2
 800db3e:	005b      	lsls	r3, r3, #1
 800db40:	4413      	add	r3, r2
 800db42:	00db      	lsls	r3, r3, #3
 800db44:	440b      	add	r3, r1
 800db46:	3312      	adds	r3, #18
 800db48:	881b      	ldrh	r3, [r3, #0]
 800db4a:	8b7a      	ldrh	r2, [r7, #26]
 800db4c:	429a      	cmp	r2, r3
 800db4e:	d82a      	bhi.n	800dba6 <etharp_find_entry+0x18a>
            old_pending = i;
 800db50:	8c3b      	ldrh	r3, [r7, #32]
 800db52:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800db54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800db58:	4965      	ldr	r1, [pc, #404]	; (800dcf0 <etharp_find_entry+0x2d4>)
 800db5a:	4613      	mov	r3, r2
 800db5c:	005b      	lsls	r3, r3, #1
 800db5e:	4413      	add	r3, r2
 800db60:	00db      	lsls	r3, r3, #3
 800db62:	440b      	add	r3, r1
 800db64:	3312      	adds	r3, #18
 800db66:	881b      	ldrh	r3, [r3, #0]
 800db68:	837b      	strh	r3, [r7, #26]
 800db6a:	e01c      	b.n	800dba6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800db6c:	7dfb      	ldrb	r3, [r7, #23]
 800db6e:	2b01      	cmp	r3, #1
 800db70:	d919      	bls.n	800dba6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800db72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800db76:	495e      	ldr	r1, [pc, #376]	; (800dcf0 <etharp_find_entry+0x2d4>)
 800db78:	4613      	mov	r3, r2
 800db7a:	005b      	lsls	r3, r3, #1
 800db7c:	4413      	add	r3, r2
 800db7e:	00db      	lsls	r3, r3, #3
 800db80:	440b      	add	r3, r1
 800db82:	3312      	adds	r3, #18
 800db84:	881b      	ldrh	r3, [r3, #0]
 800db86:	8b3a      	ldrh	r2, [r7, #24]
 800db88:	429a      	cmp	r2, r3
 800db8a:	d80c      	bhi.n	800dba6 <etharp_find_entry+0x18a>
            old_stable = i;
 800db8c:	8c3b      	ldrh	r3, [r7, #32]
 800db8e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800db90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800db94:	4956      	ldr	r1, [pc, #344]	; (800dcf0 <etharp_find_entry+0x2d4>)
 800db96:	4613      	mov	r3, r2
 800db98:	005b      	lsls	r3, r3, #1
 800db9a:	4413      	add	r3, r2
 800db9c:	00db      	lsls	r3, r3, #3
 800db9e:	440b      	add	r3, r1
 800dba0:	3312      	adds	r3, #18
 800dba2:	881b      	ldrh	r3, [r3, #0]
 800dba4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dba6:	8c3b      	ldrh	r3, [r7, #32]
 800dba8:	3301      	adds	r3, #1
 800dbaa:	b29b      	uxth	r3, r3
 800dbac:	843b      	strh	r3, [r7, #32]
 800dbae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dbb2:	2b09      	cmp	r3, #9
 800dbb4:	f77f af4c 	ble.w	800da50 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800dbb8:	7afb      	ldrb	r3, [r7, #11]
 800dbba:	f003 0302 	and.w	r3, r3, #2
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d108      	bne.n	800dbd4 <etharp_find_entry+0x1b8>
 800dbc2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800dbc6:	2b0a      	cmp	r3, #10
 800dbc8:	d107      	bne.n	800dbda <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800dbca:	7afb      	ldrb	r3, [r7, #11]
 800dbcc:	f003 0301 	and.w	r3, r3, #1
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d102      	bne.n	800dbda <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800dbd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dbd8:	e085      	b.n	800dce6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800dbda:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800dbde:	2b09      	cmp	r3, #9
 800dbe0:	dc02      	bgt.n	800dbe8 <etharp_find_entry+0x1cc>
    i = empty;
 800dbe2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dbe4:	843b      	strh	r3, [r7, #32]
 800dbe6:	e039      	b.n	800dc5c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800dbe8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800dbec:	2b09      	cmp	r3, #9
 800dbee:	dc14      	bgt.n	800dc1a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800dbf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dbf2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800dbf4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dbf8:	493d      	ldr	r1, [pc, #244]	; (800dcf0 <etharp_find_entry+0x2d4>)
 800dbfa:	4613      	mov	r3, r2
 800dbfc:	005b      	lsls	r3, r3, #1
 800dbfe:	4413      	add	r3, r2
 800dc00:	00db      	lsls	r3, r3, #3
 800dc02:	440b      	add	r3, r1
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d018      	beq.n	800dc3c <etharp_find_entry+0x220>
 800dc0a:	4b3a      	ldr	r3, [pc, #232]	; (800dcf4 <etharp_find_entry+0x2d8>)
 800dc0c:	f240 126d 	movw	r2, #365	; 0x16d
 800dc10:	493b      	ldr	r1, [pc, #236]	; (800dd00 <etharp_find_entry+0x2e4>)
 800dc12:	483a      	ldr	r0, [pc, #232]	; (800dcfc <etharp_find_entry+0x2e0>)
 800dc14:	f002 f94e 	bl	800feb4 <iprintf>
 800dc18:	e010      	b.n	800dc3c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800dc1a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800dc1e:	2b09      	cmp	r3, #9
 800dc20:	dc02      	bgt.n	800dc28 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800dc22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dc24:	843b      	strh	r3, [r7, #32]
 800dc26:	e009      	b.n	800dc3c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800dc28:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800dc2c:	2b09      	cmp	r3, #9
 800dc2e:	dc02      	bgt.n	800dc36 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800dc30:	8bfb      	ldrh	r3, [r7, #30]
 800dc32:	843b      	strh	r3, [r7, #32]
 800dc34:	e002      	b.n	800dc3c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800dc36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc3a:	e054      	b.n	800dce6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800dc3c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dc40:	2b09      	cmp	r3, #9
 800dc42:	dd06      	ble.n	800dc52 <etharp_find_entry+0x236>
 800dc44:	4b2b      	ldr	r3, [pc, #172]	; (800dcf4 <etharp_find_entry+0x2d8>)
 800dc46:	f240 127f 	movw	r2, #383	; 0x17f
 800dc4a:	492e      	ldr	r1, [pc, #184]	; (800dd04 <etharp_find_entry+0x2e8>)
 800dc4c:	482b      	ldr	r0, [pc, #172]	; (800dcfc <etharp_find_entry+0x2e0>)
 800dc4e:	f002 f931 	bl	800feb4 <iprintf>
    etharp_free_entry(i);
 800dc52:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dc56:	4618      	mov	r0, r3
 800dc58:	f7ff fe06 	bl	800d868 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800dc5c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dc60:	2b09      	cmp	r3, #9
 800dc62:	dd06      	ble.n	800dc72 <etharp_find_entry+0x256>
 800dc64:	4b23      	ldr	r3, [pc, #140]	; (800dcf4 <etharp_find_entry+0x2d8>)
 800dc66:	f240 1283 	movw	r2, #387	; 0x183
 800dc6a:	4926      	ldr	r1, [pc, #152]	; (800dd04 <etharp_find_entry+0x2e8>)
 800dc6c:	4823      	ldr	r0, [pc, #140]	; (800dcfc <etharp_find_entry+0x2e0>)
 800dc6e:	f002 f921 	bl	800feb4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800dc72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dc76:	491e      	ldr	r1, [pc, #120]	; (800dcf0 <etharp_find_entry+0x2d4>)
 800dc78:	4613      	mov	r3, r2
 800dc7a:	005b      	lsls	r3, r3, #1
 800dc7c:	4413      	add	r3, r2
 800dc7e:	00db      	lsls	r3, r3, #3
 800dc80:	440b      	add	r3, r1
 800dc82:	3314      	adds	r3, #20
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d006      	beq.n	800dc98 <etharp_find_entry+0x27c>
 800dc8a:	4b1a      	ldr	r3, [pc, #104]	; (800dcf4 <etharp_find_entry+0x2d8>)
 800dc8c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800dc90:	491d      	ldr	r1, [pc, #116]	; (800dd08 <etharp_find_entry+0x2ec>)
 800dc92:	481a      	ldr	r0, [pc, #104]	; (800dcfc <etharp_find_entry+0x2e0>)
 800dc94:	f002 f90e 	bl	800feb4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d00b      	beq.n	800dcb6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800dc9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	6819      	ldr	r1, [r3, #0]
 800dca6:	4812      	ldr	r0, [pc, #72]	; (800dcf0 <etharp_find_entry+0x2d4>)
 800dca8:	4613      	mov	r3, r2
 800dcaa:	005b      	lsls	r3, r3, #1
 800dcac:	4413      	add	r3, r2
 800dcae:	00db      	lsls	r3, r3, #3
 800dcb0:	4403      	add	r3, r0
 800dcb2:	3304      	adds	r3, #4
 800dcb4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800dcb6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dcba:	490d      	ldr	r1, [pc, #52]	; (800dcf0 <etharp_find_entry+0x2d4>)
 800dcbc:	4613      	mov	r3, r2
 800dcbe:	005b      	lsls	r3, r3, #1
 800dcc0:	4413      	add	r3, r2
 800dcc2:	00db      	lsls	r3, r3, #3
 800dcc4:	440b      	add	r3, r1
 800dcc6:	3312      	adds	r3, #18
 800dcc8:	2200      	movs	r2, #0
 800dcca:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800dccc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dcd0:	4907      	ldr	r1, [pc, #28]	; (800dcf0 <etharp_find_entry+0x2d4>)
 800dcd2:	4613      	mov	r3, r2
 800dcd4:	005b      	lsls	r3, r3, #1
 800dcd6:	4413      	add	r3, r2
 800dcd8:	00db      	lsls	r3, r3, #3
 800dcda:	440b      	add	r3, r1
 800dcdc:	3308      	adds	r3, #8
 800dcde:	687a      	ldr	r2, [r7, #4]
 800dce0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800dce2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	3728      	adds	r7, #40	; 0x28
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}
 800dcee:	bf00      	nop
 800dcf0:	20000598 	.word	0x20000598
 800dcf4:	08013b60 	.word	0x08013b60
 800dcf8:	08013b98 	.word	0x08013b98
 800dcfc:	08013bd8 	.word	0x08013bd8
 800dd00:	08013c00 	.word	0x08013c00
 800dd04:	08013c18 	.word	0x08013c18
 800dd08:	08013c2c 	.word	0x08013c2c

0800dd0c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b088      	sub	sp, #32
 800dd10:	af02      	add	r7, sp, #8
 800dd12:	60f8      	str	r0, [r7, #12]
 800dd14:	60b9      	str	r1, [r7, #8]
 800dd16:	607a      	str	r2, [r7, #4]
 800dd18:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800dd20:	2b06      	cmp	r3, #6
 800dd22:	d006      	beq.n	800dd32 <etharp_update_arp_entry+0x26>
 800dd24:	4b48      	ldr	r3, [pc, #288]	; (800de48 <etharp_update_arp_entry+0x13c>)
 800dd26:	f240 12a9 	movw	r2, #425	; 0x1a9
 800dd2a:	4948      	ldr	r1, [pc, #288]	; (800de4c <etharp_update_arp_entry+0x140>)
 800dd2c:	4848      	ldr	r0, [pc, #288]	; (800de50 <etharp_update_arp_entry+0x144>)
 800dd2e:	f002 f8c1 	bl	800feb4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d012      	beq.n	800dd5e <etharp_update_arp_entry+0x52>
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d00e      	beq.n	800dd5e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	68f9      	ldr	r1, [r7, #12]
 800dd46:	4618      	mov	r0, r3
 800dd48:	f001 f8fe 	bl	800ef48 <ip4_addr_isbroadcast_u32>
 800dd4c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d105      	bne.n	800dd5e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800dd5a:	2be0      	cmp	r3, #224	; 0xe0
 800dd5c:	d102      	bne.n	800dd64 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800dd5e:	f06f 030f 	mvn.w	r3, #15
 800dd62:	e06c      	b.n	800de3e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800dd64:	78fb      	ldrb	r3, [r7, #3]
 800dd66:	68fa      	ldr	r2, [r7, #12]
 800dd68:	4619      	mov	r1, r3
 800dd6a:	68b8      	ldr	r0, [r7, #8]
 800dd6c:	f7ff fe56 	bl	800da1c <etharp_find_entry>
 800dd70:	4603      	mov	r3, r0
 800dd72:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800dd74:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	da02      	bge.n	800dd82 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800dd7c:	8afb      	ldrh	r3, [r7, #22]
 800dd7e:	b25b      	sxtb	r3, r3
 800dd80:	e05d      	b.n	800de3e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800dd82:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dd86:	4933      	ldr	r1, [pc, #204]	; (800de54 <etharp_update_arp_entry+0x148>)
 800dd88:	4613      	mov	r3, r2
 800dd8a:	005b      	lsls	r3, r3, #1
 800dd8c:	4413      	add	r3, r2
 800dd8e:	00db      	lsls	r3, r3, #3
 800dd90:	440b      	add	r3, r1
 800dd92:	3314      	adds	r3, #20
 800dd94:	2202      	movs	r2, #2
 800dd96:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800dd98:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dd9c:	492d      	ldr	r1, [pc, #180]	; (800de54 <etharp_update_arp_entry+0x148>)
 800dd9e:	4613      	mov	r3, r2
 800dda0:	005b      	lsls	r3, r3, #1
 800dda2:	4413      	add	r3, r2
 800dda4:	00db      	lsls	r3, r3, #3
 800dda6:	440b      	add	r3, r1
 800dda8:	3308      	adds	r3, #8
 800ddaa:	68fa      	ldr	r2, [r7, #12]
 800ddac:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800ddae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ddb2:	4613      	mov	r3, r2
 800ddb4:	005b      	lsls	r3, r3, #1
 800ddb6:	4413      	add	r3, r2
 800ddb8:	00db      	lsls	r3, r3, #3
 800ddba:	3308      	adds	r3, #8
 800ddbc:	4a25      	ldr	r2, [pc, #148]	; (800de54 <etharp_update_arp_entry+0x148>)
 800ddbe:	4413      	add	r3, r2
 800ddc0:	3304      	adds	r3, #4
 800ddc2:	2206      	movs	r2, #6
 800ddc4:	6879      	ldr	r1, [r7, #4]
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f002 f844 	bl	800fe54 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800ddcc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ddd0:	4920      	ldr	r1, [pc, #128]	; (800de54 <etharp_update_arp_entry+0x148>)
 800ddd2:	4613      	mov	r3, r2
 800ddd4:	005b      	lsls	r3, r3, #1
 800ddd6:	4413      	add	r3, r2
 800ddd8:	00db      	lsls	r3, r3, #3
 800ddda:	440b      	add	r3, r1
 800dddc:	3312      	adds	r3, #18
 800ddde:	2200      	movs	r2, #0
 800dde0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800dde2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dde6:	491b      	ldr	r1, [pc, #108]	; (800de54 <etharp_update_arp_entry+0x148>)
 800dde8:	4613      	mov	r3, r2
 800ddea:	005b      	lsls	r3, r3, #1
 800ddec:	4413      	add	r3, r2
 800ddee:	00db      	lsls	r3, r3, #3
 800ddf0:	440b      	add	r3, r1
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d021      	beq.n	800de3c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800ddf8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ddfc:	4915      	ldr	r1, [pc, #84]	; (800de54 <etharp_update_arp_entry+0x148>)
 800ddfe:	4613      	mov	r3, r2
 800de00:	005b      	lsls	r3, r3, #1
 800de02:	4413      	add	r3, r2
 800de04:	00db      	lsls	r3, r3, #3
 800de06:	440b      	add	r3, r1
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800de0c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800de10:	4910      	ldr	r1, [pc, #64]	; (800de54 <etharp_update_arp_entry+0x148>)
 800de12:	4613      	mov	r3, r2
 800de14:	005b      	lsls	r3, r3, #1
 800de16:	4413      	add	r3, r2
 800de18:	00db      	lsls	r3, r3, #3
 800de1a:	440b      	add	r3, r1
 800de1c:	2200      	movs	r2, #0
 800de1e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800de26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800de2a:	9300      	str	r3, [sp, #0]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6939      	ldr	r1, [r7, #16]
 800de30:	68f8      	ldr	r0, [r7, #12]
 800de32:	f001 ff91 	bl	800fd58 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800de36:	6938      	ldr	r0, [r7, #16]
 800de38:	f7f8 fdde 	bl	80069f8 <pbuf_free>
  }
  return ERR_OK;
 800de3c:	2300      	movs	r3, #0
}
 800de3e:	4618      	mov	r0, r3
 800de40:	3718      	adds	r7, #24
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}
 800de46:	bf00      	nop
 800de48:	08013b60 	.word	0x08013b60
 800de4c:	08013c58 	.word	0x08013c58
 800de50:	08013bd8 	.word	0x08013bd8
 800de54:	20000598 	.word	0x20000598

0800de58 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b084      	sub	sp, #16
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800de60:	2300      	movs	r3, #0
 800de62:	60fb      	str	r3, [r7, #12]
 800de64:	e01e      	b.n	800dea4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800de66:	4913      	ldr	r1, [pc, #76]	; (800deb4 <etharp_cleanup_netif+0x5c>)
 800de68:	68fa      	ldr	r2, [r7, #12]
 800de6a:	4613      	mov	r3, r2
 800de6c:	005b      	lsls	r3, r3, #1
 800de6e:	4413      	add	r3, r2
 800de70:	00db      	lsls	r3, r3, #3
 800de72:	440b      	add	r3, r1
 800de74:	3314      	adds	r3, #20
 800de76:	781b      	ldrb	r3, [r3, #0]
 800de78:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800de7a:	7afb      	ldrb	r3, [r7, #11]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d00e      	beq.n	800de9e <etharp_cleanup_netif+0x46>
 800de80:	490c      	ldr	r1, [pc, #48]	; (800deb4 <etharp_cleanup_netif+0x5c>)
 800de82:	68fa      	ldr	r2, [r7, #12]
 800de84:	4613      	mov	r3, r2
 800de86:	005b      	lsls	r3, r3, #1
 800de88:	4413      	add	r3, r2
 800de8a:	00db      	lsls	r3, r3, #3
 800de8c:	440b      	add	r3, r1
 800de8e:	3308      	adds	r3, #8
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	687a      	ldr	r2, [r7, #4]
 800de94:	429a      	cmp	r2, r3
 800de96:	d102      	bne.n	800de9e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800de98:	68f8      	ldr	r0, [r7, #12]
 800de9a:	f7ff fce5 	bl	800d868 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	3301      	adds	r3, #1
 800dea2:	60fb      	str	r3, [r7, #12]
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	2b09      	cmp	r3, #9
 800dea8:	dddd      	ble.n	800de66 <etharp_cleanup_netif+0xe>
    }
  }
}
 800deaa:	bf00      	nop
 800deac:	bf00      	nop
 800deae:	3710      	adds	r7, #16
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}
 800deb4:	20000598 	.word	0x20000598

0800deb8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800deb8:	b5b0      	push	{r4, r5, r7, lr}
 800deba:	b08a      	sub	sp, #40	; 0x28
 800debc:	af04      	add	r7, sp, #16
 800debe:	6078      	str	r0, [r7, #4]
 800dec0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d107      	bne.n	800ded8 <etharp_input+0x20>
 800dec8:	4b3d      	ldr	r3, [pc, #244]	; (800dfc0 <etharp_input+0x108>)
 800deca:	f240 228a 	movw	r2, #650	; 0x28a
 800dece:	493d      	ldr	r1, [pc, #244]	; (800dfc4 <etharp_input+0x10c>)
 800ded0:	483d      	ldr	r0, [pc, #244]	; (800dfc8 <etharp_input+0x110>)
 800ded2:	f001 ffef 	bl	800feb4 <iprintf>
 800ded6:	e06f      	b.n	800dfb8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	685b      	ldr	r3, [r3, #4]
 800dedc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800dede:	693b      	ldr	r3, [r7, #16]
 800dee0:	881b      	ldrh	r3, [r3, #0]
 800dee2:	b29b      	uxth	r3, r3
 800dee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dee8:	d10c      	bne.n	800df04 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800deea:	693b      	ldr	r3, [r7, #16]
 800deec:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800deee:	2b06      	cmp	r3, #6
 800def0:	d108      	bne.n	800df04 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800def2:	693b      	ldr	r3, [r7, #16]
 800def4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800def6:	2b04      	cmp	r3, #4
 800def8:	d104      	bne.n	800df04 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800defa:	693b      	ldr	r3, [r7, #16]
 800defc:	885b      	ldrh	r3, [r3, #2]
 800defe:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800df00:	2b08      	cmp	r3, #8
 800df02:	d003      	beq.n	800df0c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	f7f8 fd77 	bl	80069f8 <pbuf_free>
    return;
 800df0a:	e055      	b.n	800dfb8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800df0c:	693b      	ldr	r3, [r7, #16]
 800df0e:	330e      	adds	r3, #14
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	3318      	adds	r3, #24
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	3304      	adds	r3, #4
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d102      	bne.n	800df2c <etharp_input+0x74>
    for_us = 0;
 800df26:	2300      	movs	r3, #0
 800df28:	75fb      	strb	r3, [r7, #23]
 800df2a:	e009      	b.n	800df40 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800df2c:	68ba      	ldr	r2, [r7, #8]
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	3304      	adds	r3, #4
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	429a      	cmp	r2, r3
 800df36:	bf0c      	ite	eq
 800df38:	2301      	moveq	r3, #1
 800df3a:	2300      	movne	r3, #0
 800df3c:	b2db      	uxtb	r3, r3
 800df3e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800df40:	693b      	ldr	r3, [r7, #16]
 800df42:	f103 0208 	add.w	r2, r3, #8
 800df46:	7dfb      	ldrb	r3, [r7, #23]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d001      	beq.n	800df50 <etharp_input+0x98>
 800df4c:	2301      	movs	r3, #1
 800df4e:	e000      	b.n	800df52 <etharp_input+0x9a>
 800df50:	2302      	movs	r3, #2
 800df52:	f107 010c 	add.w	r1, r7, #12
 800df56:	6838      	ldr	r0, [r7, #0]
 800df58:	f7ff fed8 	bl	800dd0c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800df5c:	693b      	ldr	r3, [r7, #16]
 800df5e:	88db      	ldrh	r3, [r3, #6]
 800df60:	b29b      	uxth	r3, r3
 800df62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df66:	d003      	beq.n	800df70 <etharp_input+0xb8>
 800df68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df6c:	d01e      	beq.n	800dfac <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800df6e:	e020      	b.n	800dfb2 <etharp_input+0xfa>
      if (for_us) {
 800df70:	7dfb      	ldrb	r3, [r7, #23]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d01c      	beq.n	800dfb0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800df7c:	693b      	ldr	r3, [r7, #16]
 800df7e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800df8c:	693a      	ldr	r2, [r7, #16]
 800df8e:	3208      	adds	r2, #8
        etharp_raw(netif,
 800df90:	2102      	movs	r1, #2
 800df92:	9103      	str	r1, [sp, #12]
 800df94:	f107 010c 	add.w	r1, r7, #12
 800df98:	9102      	str	r1, [sp, #8]
 800df9a:	9201      	str	r2, [sp, #4]
 800df9c:	9300      	str	r3, [sp, #0]
 800df9e:	462b      	mov	r3, r5
 800dfa0:	4622      	mov	r2, r4
 800dfa2:	4601      	mov	r1, r0
 800dfa4:	6838      	ldr	r0, [r7, #0]
 800dfa6:	f000 faeb 	bl	800e580 <etharp_raw>
      break;
 800dfaa:	e001      	b.n	800dfb0 <etharp_input+0xf8>
      break;
 800dfac:	bf00      	nop
 800dfae:	e000      	b.n	800dfb2 <etharp_input+0xfa>
      break;
 800dfb0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	f7f8 fd20 	bl	80069f8 <pbuf_free>
}
 800dfb8:	3718      	adds	r7, #24
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bdb0      	pop	{r4, r5, r7, pc}
 800dfbe:	bf00      	nop
 800dfc0:	08013b60 	.word	0x08013b60
 800dfc4:	08013cb0 	.word	0x08013cb0
 800dfc8:	08013bd8 	.word	0x08013bd8

0800dfcc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b086      	sub	sp, #24
 800dfd0:	af02      	add	r7, sp, #8
 800dfd2:	60f8      	str	r0, [r7, #12]
 800dfd4:	60b9      	str	r1, [r7, #8]
 800dfd6:	4613      	mov	r3, r2
 800dfd8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800dfda:	79fa      	ldrb	r2, [r7, #7]
 800dfdc:	4944      	ldr	r1, [pc, #272]	; (800e0f0 <etharp_output_to_arp_index+0x124>)
 800dfde:	4613      	mov	r3, r2
 800dfe0:	005b      	lsls	r3, r3, #1
 800dfe2:	4413      	add	r3, r2
 800dfe4:	00db      	lsls	r3, r3, #3
 800dfe6:	440b      	add	r3, r1
 800dfe8:	3314      	adds	r3, #20
 800dfea:	781b      	ldrb	r3, [r3, #0]
 800dfec:	2b01      	cmp	r3, #1
 800dfee:	d806      	bhi.n	800dffe <etharp_output_to_arp_index+0x32>
 800dff0:	4b40      	ldr	r3, [pc, #256]	; (800e0f4 <etharp_output_to_arp_index+0x128>)
 800dff2:	f240 22ee 	movw	r2, #750	; 0x2ee
 800dff6:	4940      	ldr	r1, [pc, #256]	; (800e0f8 <etharp_output_to_arp_index+0x12c>)
 800dff8:	4840      	ldr	r0, [pc, #256]	; (800e0fc <etharp_output_to_arp_index+0x130>)
 800dffa:	f001 ff5b 	bl	800feb4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800dffe:	79fa      	ldrb	r2, [r7, #7]
 800e000:	493b      	ldr	r1, [pc, #236]	; (800e0f0 <etharp_output_to_arp_index+0x124>)
 800e002:	4613      	mov	r3, r2
 800e004:	005b      	lsls	r3, r3, #1
 800e006:	4413      	add	r3, r2
 800e008:	00db      	lsls	r3, r3, #3
 800e00a:	440b      	add	r3, r1
 800e00c:	3314      	adds	r3, #20
 800e00e:	781b      	ldrb	r3, [r3, #0]
 800e010:	2b02      	cmp	r3, #2
 800e012:	d153      	bne.n	800e0bc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800e014:	79fa      	ldrb	r2, [r7, #7]
 800e016:	4936      	ldr	r1, [pc, #216]	; (800e0f0 <etharp_output_to_arp_index+0x124>)
 800e018:	4613      	mov	r3, r2
 800e01a:	005b      	lsls	r3, r3, #1
 800e01c:	4413      	add	r3, r2
 800e01e:	00db      	lsls	r3, r3, #3
 800e020:	440b      	add	r3, r1
 800e022:	3312      	adds	r3, #18
 800e024:	881b      	ldrh	r3, [r3, #0]
 800e026:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800e02a:	d919      	bls.n	800e060 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800e02c:	79fa      	ldrb	r2, [r7, #7]
 800e02e:	4613      	mov	r3, r2
 800e030:	005b      	lsls	r3, r3, #1
 800e032:	4413      	add	r3, r2
 800e034:	00db      	lsls	r3, r3, #3
 800e036:	4a2e      	ldr	r2, [pc, #184]	; (800e0f0 <etharp_output_to_arp_index+0x124>)
 800e038:	4413      	add	r3, r2
 800e03a:	3304      	adds	r3, #4
 800e03c:	4619      	mov	r1, r3
 800e03e:	68f8      	ldr	r0, [r7, #12]
 800e040:	f000 fb4c 	bl	800e6dc <etharp_request>
 800e044:	4603      	mov	r3, r0
 800e046:	2b00      	cmp	r3, #0
 800e048:	d138      	bne.n	800e0bc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e04a:	79fa      	ldrb	r2, [r7, #7]
 800e04c:	4928      	ldr	r1, [pc, #160]	; (800e0f0 <etharp_output_to_arp_index+0x124>)
 800e04e:	4613      	mov	r3, r2
 800e050:	005b      	lsls	r3, r3, #1
 800e052:	4413      	add	r3, r2
 800e054:	00db      	lsls	r3, r3, #3
 800e056:	440b      	add	r3, r1
 800e058:	3314      	adds	r3, #20
 800e05a:	2203      	movs	r2, #3
 800e05c:	701a      	strb	r2, [r3, #0]
 800e05e:	e02d      	b.n	800e0bc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800e060:	79fa      	ldrb	r2, [r7, #7]
 800e062:	4923      	ldr	r1, [pc, #140]	; (800e0f0 <etharp_output_to_arp_index+0x124>)
 800e064:	4613      	mov	r3, r2
 800e066:	005b      	lsls	r3, r3, #1
 800e068:	4413      	add	r3, r2
 800e06a:	00db      	lsls	r3, r3, #3
 800e06c:	440b      	add	r3, r1
 800e06e:	3312      	adds	r3, #18
 800e070:	881b      	ldrh	r3, [r3, #0]
 800e072:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800e076:	d321      	bcc.n	800e0bc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800e078:	79fa      	ldrb	r2, [r7, #7]
 800e07a:	4613      	mov	r3, r2
 800e07c:	005b      	lsls	r3, r3, #1
 800e07e:	4413      	add	r3, r2
 800e080:	00db      	lsls	r3, r3, #3
 800e082:	4a1b      	ldr	r2, [pc, #108]	; (800e0f0 <etharp_output_to_arp_index+0x124>)
 800e084:	4413      	add	r3, r2
 800e086:	1d19      	adds	r1, r3, #4
 800e088:	79fa      	ldrb	r2, [r7, #7]
 800e08a:	4613      	mov	r3, r2
 800e08c:	005b      	lsls	r3, r3, #1
 800e08e:	4413      	add	r3, r2
 800e090:	00db      	lsls	r3, r3, #3
 800e092:	3308      	adds	r3, #8
 800e094:	4a16      	ldr	r2, [pc, #88]	; (800e0f0 <etharp_output_to_arp_index+0x124>)
 800e096:	4413      	add	r3, r2
 800e098:	3304      	adds	r3, #4
 800e09a:	461a      	mov	r2, r3
 800e09c:	68f8      	ldr	r0, [r7, #12]
 800e09e:	f000 fafb 	bl	800e698 <etharp_request_dst>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d109      	bne.n	800e0bc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e0a8:	79fa      	ldrb	r2, [r7, #7]
 800e0aa:	4911      	ldr	r1, [pc, #68]	; (800e0f0 <etharp_output_to_arp_index+0x124>)
 800e0ac:	4613      	mov	r3, r2
 800e0ae:	005b      	lsls	r3, r3, #1
 800e0b0:	4413      	add	r3, r2
 800e0b2:	00db      	lsls	r3, r3, #3
 800e0b4:	440b      	add	r3, r1
 800e0b6:	3314      	adds	r3, #20
 800e0b8:	2203      	movs	r2, #3
 800e0ba:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800e0c2:	79fa      	ldrb	r2, [r7, #7]
 800e0c4:	4613      	mov	r3, r2
 800e0c6:	005b      	lsls	r3, r3, #1
 800e0c8:	4413      	add	r3, r2
 800e0ca:	00db      	lsls	r3, r3, #3
 800e0cc:	3308      	adds	r3, #8
 800e0ce:	4a08      	ldr	r2, [pc, #32]	; (800e0f0 <etharp_output_to_arp_index+0x124>)
 800e0d0:	4413      	add	r3, r2
 800e0d2:	3304      	adds	r3, #4
 800e0d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e0d8:	9200      	str	r2, [sp, #0]
 800e0da:	460a      	mov	r2, r1
 800e0dc:	68b9      	ldr	r1, [r7, #8]
 800e0de:	68f8      	ldr	r0, [r7, #12]
 800e0e0:	f001 fe3a 	bl	800fd58 <ethernet_output>
 800e0e4:	4603      	mov	r3, r0
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3710      	adds	r7, #16
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}
 800e0ee:	bf00      	nop
 800e0f0:	20000598 	.word	0x20000598
 800e0f4:	08013b60 	.word	0x08013b60
 800e0f8:	08013cd0 	.word	0x08013cd0
 800e0fc:	08013bd8 	.word	0x08013bd8

0800e100 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b08a      	sub	sp, #40	; 0x28
 800e104:	af02      	add	r7, sp, #8
 800e106:	60f8      	str	r0, [r7, #12]
 800e108:	60b9      	str	r1, [r7, #8]
 800e10a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d106      	bne.n	800e124 <etharp_output+0x24>
 800e116:	4b73      	ldr	r3, [pc, #460]	; (800e2e4 <etharp_output+0x1e4>)
 800e118:	f240 321e 	movw	r2, #798	; 0x31e
 800e11c:	4972      	ldr	r1, [pc, #456]	; (800e2e8 <etharp_output+0x1e8>)
 800e11e:	4873      	ldr	r0, [pc, #460]	; (800e2ec <etharp_output+0x1ec>)
 800e120:	f001 fec8 	bl	800feb4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d106      	bne.n	800e138 <etharp_output+0x38>
 800e12a:	4b6e      	ldr	r3, [pc, #440]	; (800e2e4 <etharp_output+0x1e4>)
 800e12c:	f240 321f 	movw	r2, #799	; 0x31f
 800e130:	496f      	ldr	r1, [pc, #444]	; (800e2f0 <etharp_output+0x1f0>)
 800e132:	486e      	ldr	r0, [pc, #440]	; (800e2ec <etharp_output+0x1ec>)
 800e134:	f001 febe 	bl	800feb4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d106      	bne.n	800e14c <etharp_output+0x4c>
 800e13e:	4b69      	ldr	r3, [pc, #420]	; (800e2e4 <etharp_output+0x1e4>)
 800e140:	f44f 7248 	mov.w	r2, #800	; 0x320
 800e144:	496b      	ldr	r1, [pc, #428]	; (800e2f4 <etharp_output+0x1f4>)
 800e146:	4869      	ldr	r0, [pc, #420]	; (800e2ec <etharp_output+0x1ec>)
 800e148:	f001 feb4 	bl	800feb4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	68f9      	ldr	r1, [r7, #12]
 800e152:	4618      	mov	r0, r3
 800e154:	f000 fef8 	bl	800ef48 <ip4_addr_isbroadcast_u32>
 800e158:	4603      	mov	r3, r0
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d002      	beq.n	800e164 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800e15e:	4b66      	ldr	r3, [pc, #408]	; (800e2f8 <etharp_output+0x1f8>)
 800e160:	61fb      	str	r3, [r7, #28]
 800e162:	e0af      	b.n	800e2c4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e16c:	2be0      	cmp	r3, #224	; 0xe0
 800e16e:	d118      	bne.n	800e1a2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e170:	2301      	movs	r3, #1
 800e172:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800e174:	2300      	movs	r3, #0
 800e176:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e178:	235e      	movs	r3, #94	; 0x5e
 800e17a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	3301      	adds	r3, #1
 800e180:	781b      	ldrb	r3, [r3, #0]
 800e182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e186:	b2db      	uxtb	r3, r3
 800e188:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	3302      	adds	r3, #2
 800e18e:	781b      	ldrb	r3, [r3, #0]
 800e190:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	3303      	adds	r3, #3
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800e19a:	f107 0310 	add.w	r3, r7, #16
 800e19e:	61fb      	str	r3, [r7, #28]
 800e1a0:	e090      	b.n	800e2c4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681a      	ldr	r2, [r3, #0]
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	3304      	adds	r3, #4
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	405a      	eors	r2, r3
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	3308      	adds	r3, #8
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	4013      	ands	r3, r2
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d012      	beq.n	800e1e0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e1c0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800e1c4:	4293      	cmp	r3, r2
 800e1c6:	d00b      	beq.n	800e1e0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	330c      	adds	r3, #12
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d003      	beq.n	800e1da <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	330c      	adds	r3, #12
 800e1d6:	61bb      	str	r3, [r7, #24]
 800e1d8:	e002      	b.n	800e1e0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800e1da:	f06f 0303 	mvn.w	r3, #3
 800e1de:	e07d      	b.n	800e2dc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e1e0:	4b46      	ldr	r3, [pc, #280]	; (800e2fc <etharp_output+0x1fc>)
 800e1e2:	781b      	ldrb	r3, [r3, #0]
 800e1e4:	4619      	mov	r1, r3
 800e1e6:	4a46      	ldr	r2, [pc, #280]	; (800e300 <etharp_output+0x200>)
 800e1e8:	460b      	mov	r3, r1
 800e1ea:	005b      	lsls	r3, r3, #1
 800e1ec:	440b      	add	r3, r1
 800e1ee:	00db      	lsls	r3, r3, #3
 800e1f0:	4413      	add	r3, r2
 800e1f2:	3314      	adds	r3, #20
 800e1f4:	781b      	ldrb	r3, [r3, #0]
 800e1f6:	2b01      	cmp	r3, #1
 800e1f8:	d925      	bls.n	800e246 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e1fa:	4b40      	ldr	r3, [pc, #256]	; (800e2fc <etharp_output+0x1fc>)
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	4619      	mov	r1, r3
 800e200:	4a3f      	ldr	r2, [pc, #252]	; (800e300 <etharp_output+0x200>)
 800e202:	460b      	mov	r3, r1
 800e204:	005b      	lsls	r3, r3, #1
 800e206:	440b      	add	r3, r1
 800e208:	00db      	lsls	r3, r3, #3
 800e20a:	4413      	add	r3, r2
 800e20c:	3308      	adds	r3, #8
 800e20e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e210:	68fa      	ldr	r2, [r7, #12]
 800e212:	429a      	cmp	r2, r3
 800e214:	d117      	bne.n	800e246 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800e216:	69bb      	ldr	r3, [r7, #24]
 800e218:	681a      	ldr	r2, [r3, #0]
 800e21a:	4b38      	ldr	r3, [pc, #224]	; (800e2fc <etharp_output+0x1fc>)
 800e21c:	781b      	ldrb	r3, [r3, #0]
 800e21e:	4618      	mov	r0, r3
 800e220:	4937      	ldr	r1, [pc, #220]	; (800e300 <etharp_output+0x200>)
 800e222:	4603      	mov	r3, r0
 800e224:	005b      	lsls	r3, r3, #1
 800e226:	4403      	add	r3, r0
 800e228:	00db      	lsls	r3, r3, #3
 800e22a:	440b      	add	r3, r1
 800e22c:	3304      	adds	r3, #4
 800e22e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e230:	429a      	cmp	r2, r3
 800e232:	d108      	bne.n	800e246 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800e234:	4b31      	ldr	r3, [pc, #196]	; (800e2fc <etharp_output+0x1fc>)
 800e236:	781b      	ldrb	r3, [r3, #0]
 800e238:	461a      	mov	r2, r3
 800e23a:	68b9      	ldr	r1, [r7, #8]
 800e23c:	68f8      	ldr	r0, [r7, #12]
 800e23e:	f7ff fec5 	bl	800dfcc <etharp_output_to_arp_index>
 800e242:	4603      	mov	r3, r0
 800e244:	e04a      	b.n	800e2dc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e246:	2300      	movs	r3, #0
 800e248:	75fb      	strb	r3, [r7, #23]
 800e24a:	e031      	b.n	800e2b0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e24c:	7dfa      	ldrb	r2, [r7, #23]
 800e24e:	492c      	ldr	r1, [pc, #176]	; (800e300 <etharp_output+0x200>)
 800e250:	4613      	mov	r3, r2
 800e252:	005b      	lsls	r3, r3, #1
 800e254:	4413      	add	r3, r2
 800e256:	00db      	lsls	r3, r3, #3
 800e258:	440b      	add	r3, r1
 800e25a:	3314      	adds	r3, #20
 800e25c:	781b      	ldrb	r3, [r3, #0]
 800e25e:	2b01      	cmp	r3, #1
 800e260:	d923      	bls.n	800e2aa <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800e262:	7dfa      	ldrb	r2, [r7, #23]
 800e264:	4926      	ldr	r1, [pc, #152]	; (800e300 <etharp_output+0x200>)
 800e266:	4613      	mov	r3, r2
 800e268:	005b      	lsls	r3, r3, #1
 800e26a:	4413      	add	r3, r2
 800e26c:	00db      	lsls	r3, r3, #3
 800e26e:	440b      	add	r3, r1
 800e270:	3308      	adds	r3, #8
 800e272:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e274:	68fa      	ldr	r2, [r7, #12]
 800e276:	429a      	cmp	r2, r3
 800e278:	d117      	bne.n	800e2aa <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800e27a:	69bb      	ldr	r3, [r7, #24]
 800e27c:	6819      	ldr	r1, [r3, #0]
 800e27e:	7dfa      	ldrb	r2, [r7, #23]
 800e280:	481f      	ldr	r0, [pc, #124]	; (800e300 <etharp_output+0x200>)
 800e282:	4613      	mov	r3, r2
 800e284:	005b      	lsls	r3, r3, #1
 800e286:	4413      	add	r3, r2
 800e288:	00db      	lsls	r3, r3, #3
 800e28a:	4403      	add	r3, r0
 800e28c:	3304      	adds	r3, #4
 800e28e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800e290:	4299      	cmp	r1, r3
 800e292:	d10a      	bne.n	800e2aa <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800e294:	4a19      	ldr	r2, [pc, #100]	; (800e2fc <etharp_output+0x1fc>)
 800e296:	7dfb      	ldrb	r3, [r7, #23]
 800e298:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800e29a:	7dfb      	ldrb	r3, [r7, #23]
 800e29c:	461a      	mov	r2, r3
 800e29e:	68b9      	ldr	r1, [r7, #8]
 800e2a0:	68f8      	ldr	r0, [r7, #12]
 800e2a2:	f7ff fe93 	bl	800dfcc <etharp_output_to_arp_index>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	e018      	b.n	800e2dc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e2aa:	7dfb      	ldrb	r3, [r7, #23]
 800e2ac:	3301      	adds	r3, #1
 800e2ae:	75fb      	strb	r3, [r7, #23]
 800e2b0:	7dfb      	ldrb	r3, [r7, #23]
 800e2b2:	2b09      	cmp	r3, #9
 800e2b4:	d9ca      	bls.n	800e24c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800e2b6:	68ba      	ldr	r2, [r7, #8]
 800e2b8:	69b9      	ldr	r1, [r7, #24]
 800e2ba:	68f8      	ldr	r0, [r7, #12]
 800e2bc:	f000 f822 	bl	800e304 <etharp_query>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	e00b      	b.n	800e2dc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800e2ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e2ce:	9300      	str	r3, [sp, #0]
 800e2d0:	69fb      	ldr	r3, [r7, #28]
 800e2d2:	68b9      	ldr	r1, [r7, #8]
 800e2d4:	68f8      	ldr	r0, [r7, #12]
 800e2d6:	f001 fd3f 	bl	800fd58 <ethernet_output>
 800e2da:	4603      	mov	r3, r0
}
 800e2dc:	4618      	mov	r0, r3
 800e2de:	3720      	adds	r7, #32
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	bd80      	pop	{r7, pc}
 800e2e4:	08013b60 	.word	0x08013b60
 800e2e8:	08013cb0 	.word	0x08013cb0
 800e2ec:	08013bd8 	.word	0x08013bd8
 800e2f0:	08013d00 	.word	0x08013d00
 800e2f4:	08013ca0 	.word	0x08013ca0
 800e2f8:	08021230 	.word	0x08021230
 800e2fc:	20000688 	.word	0x20000688
 800e300:	20000598 	.word	0x20000598

0800e304 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b08c      	sub	sp, #48	; 0x30
 800e308:	af02      	add	r7, sp, #8
 800e30a:	60f8      	str	r0, [r7, #12]
 800e30c:	60b9      	str	r1, [r7, #8]
 800e30e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	3326      	adds	r3, #38	; 0x26
 800e314:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800e316:	23ff      	movs	r3, #255	; 0xff
 800e318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800e31c:	2300      	movs	r3, #0
 800e31e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	68f9      	ldr	r1, [r7, #12]
 800e326:	4618      	mov	r0, r3
 800e328:	f000 fe0e 	bl	800ef48 <ip4_addr_isbroadcast_u32>
 800e32c:	4603      	mov	r3, r0
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d10c      	bne.n	800e34c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e332:	68bb      	ldr	r3, [r7, #8]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e33a:	2be0      	cmp	r3, #224	; 0xe0
 800e33c:	d006      	beq.n	800e34c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e33e:	68bb      	ldr	r3, [r7, #8]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d003      	beq.n	800e34c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d102      	bne.n	800e352 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e34c:	f06f 030f 	mvn.w	r3, #15
 800e350:	e101      	b.n	800e556 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800e352:	68fa      	ldr	r2, [r7, #12]
 800e354:	2101      	movs	r1, #1
 800e356:	68b8      	ldr	r0, [r7, #8]
 800e358:	f7ff fb60 	bl	800da1c <etharp_find_entry>
 800e35c:	4603      	mov	r3, r0
 800e35e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800e360:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e364:	2b00      	cmp	r3, #0
 800e366:	da02      	bge.n	800e36e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800e368:	8a7b      	ldrh	r3, [r7, #18]
 800e36a:	b25b      	sxtb	r3, r3
 800e36c:	e0f3      	b.n	800e556 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800e36e:	8a7b      	ldrh	r3, [r7, #18]
 800e370:	2b7e      	cmp	r3, #126	; 0x7e
 800e372:	d906      	bls.n	800e382 <etharp_query+0x7e>
 800e374:	4b7a      	ldr	r3, [pc, #488]	; (800e560 <etharp_query+0x25c>)
 800e376:	f240 32c1 	movw	r2, #961	; 0x3c1
 800e37a:	497a      	ldr	r1, [pc, #488]	; (800e564 <etharp_query+0x260>)
 800e37c:	487a      	ldr	r0, [pc, #488]	; (800e568 <etharp_query+0x264>)
 800e37e:	f001 fd99 	bl	800feb4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800e382:	8a7b      	ldrh	r3, [r7, #18]
 800e384:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800e386:	7c7a      	ldrb	r2, [r7, #17]
 800e388:	4978      	ldr	r1, [pc, #480]	; (800e56c <etharp_query+0x268>)
 800e38a:	4613      	mov	r3, r2
 800e38c:	005b      	lsls	r3, r3, #1
 800e38e:	4413      	add	r3, r2
 800e390:	00db      	lsls	r3, r3, #3
 800e392:	440b      	add	r3, r1
 800e394:	3314      	adds	r3, #20
 800e396:	781b      	ldrb	r3, [r3, #0]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d115      	bne.n	800e3c8 <etharp_query+0xc4>
    is_new_entry = 1;
 800e39c:	2301      	movs	r3, #1
 800e39e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800e3a0:	7c7a      	ldrb	r2, [r7, #17]
 800e3a2:	4972      	ldr	r1, [pc, #456]	; (800e56c <etharp_query+0x268>)
 800e3a4:	4613      	mov	r3, r2
 800e3a6:	005b      	lsls	r3, r3, #1
 800e3a8:	4413      	add	r3, r2
 800e3aa:	00db      	lsls	r3, r3, #3
 800e3ac:	440b      	add	r3, r1
 800e3ae:	3314      	adds	r3, #20
 800e3b0:	2201      	movs	r2, #1
 800e3b2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800e3b4:	7c7a      	ldrb	r2, [r7, #17]
 800e3b6:	496d      	ldr	r1, [pc, #436]	; (800e56c <etharp_query+0x268>)
 800e3b8:	4613      	mov	r3, r2
 800e3ba:	005b      	lsls	r3, r3, #1
 800e3bc:	4413      	add	r3, r2
 800e3be:	00db      	lsls	r3, r3, #3
 800e3c0:	440b      	add	r3, r1
 800e3c2:	3308      	adds	r3, #8
 800e3c4:	68fa      	ldr	r2, [r7, #12]
 800e3c6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800e3c8:	7c7a      	ldrb	r2, [r7, #17]
 800e3ca:	4968      	ldr	r1, [pc, #416]	; (800e56c <etharp_query+0x268>)
 800e3cc:	4613      	mov	r3, r2
 800e3ce:	005b      	lsls	r3, r3, #1
 800e3d0:	4413      	add	r3, r2
 800e3d2:	00db      	lsls	r3, r3, #3
 800e3d4:	440b      	add	r3, r1
 800e3d6:	3314      	adds	r3, #20
 800e3d8:	781b      	ldrb	r3, [r3, #0]
 800e3da:	2b01      	cmp	r3, #1
 800e3dc:	d011      	beq.n	800e402 <etharp_query+0xfe>
 800e3de:	7c7a      	ldrb	r2, [r7, #17]
 800e3e0:	4962      	ldr	r1, [pc, #392]	; (800e56c <etharp_query+0x268>)
 800e3e2:	4613      	mov	r3, r2
 800e3e4:	005b      	lsls	r3, r3, #1
 800e3e6:	4413      	add	r3, r2
 800e3e8:	00db      	lsls	r3, r3, #3
 800e3ea:	440b      	add	r3, r1
 800e3ec:	3314      	adds	r3, #20
 800e3ee:	781b      	ldrb	r3, [r3, #0]
 800e3f0:	2b01      	cmp	r3, #1
 800e3f2:	d806      	bhi.n	800e402 <etharp_query+0xfe>
 800e3f4:	4b5a      	ldr	r3, [pc, #360]	; (800e560 <etharp_query+0x25c>)
 800e3f6:	f240 32cd 	movw	r2, #973	; 0x3cd
 800e3fa:	495d      	ldr	r1, [pc, #372]	; (800e570 <etharp_query+0x26c>)
 800e3fc:	485a      	ldr	r0, [pc, #360]	; (800e568 <etharp_query+0x264>)
 800e3fe:	f001 fd59 	bl	800feb4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800e402:	6a3b      	ldr	r3, [r7, #32]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d102      	bne.n	800e40e <etharp_query+0x10a>
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d10c      	bne.n	800e428 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e40e:	68b9      	ldr	r1, [r7, #8]
 800e410:	68f8      	ldr	r0, [r7, #12]
 800e412:	f000 f963 	bl	800e6dc <etharp_request>
 800e416:	4603      	mov	r3, r0
 800e418:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d102      	bne.n	800e428 <etharp_query+0x124>
      return result;
 800e422:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e426:	e096      	b.n	800e556 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d106      	bne.n	800e43c <etharp_query+0x138>
 800e42e:	4b4c      	ldr	r3, [pc, #304]	; (800e560 <etharp_query+0x25c>)
 800e430:	f240 32e1 	movw	r2, #993	; 0x3e1
 800e434:	494f      	ldr	r1, [pc, #316]	; (800e574 <etharp_query+0x270>)
 800e436:	484c      	ldr	r0, [pc, #304]	; (800e568 <etharp_query+0x264>)
 800e438:	f001 fd3c 	bl	800feb4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e43c:	7c7a      	ldrb	r2, [r7, #17]
 800e43e:	494b      	ldr	r1, [pc, #300]	; (800e56c <etharp_query+0x268>)
 800e440:	4613      	mov	r3, r2
 800e442:	005b      	lsls	r3, r3, #1
 800e444:	4413      	add	r3, r2
 800e446:	00db      	lsls	r3, r3, #3
 800e448:	440b      	add	r3, r1
 800e44a:	3314      	adds	r3, #20
 800e44c:	781b      	ldrb	r3, [r3, #0]
 800e44e:	2b01      	cmp	r3, #1
 800e450:	d917      	bls.n	800e482 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800e452:	4a49      	ldr	r2, [pc, #292]	; (800e578 <etharp_query+0x274>)
 800e454:	7c7b      	ldrb	r3, [r7, #17]
 800e456:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e458:	7c7a      	ldrb	r2, [r7, #17]
 800e45a:	4613      	mov	r3, r2
 800e45c:	005b      	lsls	r3, r3, #1
 800e45e:	4413      	add	r3, r2
 800e460:	00db      	lsls	r3, r3, #3
 800e462:	3308      	adds	r3, #8
 800e464:	4a41      	ldr	r2, [pc, #260]	; (800e56c <etharp_query+0x268>)
 800e466:	4413      	add	r3, r2
 800e468:	3304      	adds	r3, #4
 800e46a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e46e:	9200      	str	r2, [sp, #0]
 800e470:	697a      	ldr	r2, [r7, #20]
 800e472:	6879      	ldr	r1, [r7, #4]
 800e474:	68f8      	ldr	r0, [r7, #12]
 800e476:	f001 fc6f 	bl	800fd58 <ethernet_output>
 800e47a:	4603      	mov	r3, r0
 800e47c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e480:	e067      	b.n	800e552 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e482:	7c7a      	ldrb	r2, [r7, #17]
 800e484:	4939      	ldr	r1, [pc, #228]	; (800e56c <etharp_query+0x268>)
 800e486:	4613      	mov	r3, r2
 800e488:	005b      	lsls	r3, r3, #1
 800e48a:	4413      	add	r3, r2
 800e48c:	00db      	lsls	r3, r3, #3
 800e48e:	440b      	add	r3, r1
 800e490:	3314      	adds	r3, #20
 800e492:	781b      	ldrb	r3, [r3, #0]
 800e494:	2b01      	cmp	r3, #1
 800e496:	d15c      	bne.n	800e552 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e498:	2300      	movs	r3, #0
 800e49a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e4a0:	e01c      	b.n	800e4dc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e4a2:	69fb      	ldr	r3, [r7, #28]
 800e4a4:	895a      	ldrh	r2, [r3, #10]
 800e4a6:	69fb      	ldr	r3, [r7, #28]
 800e4a8:	891b      	ldrh	r3, [r3, #8]
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	d10a      	bne.n	800e4c4 <etharp_query+0x1c0>
 800e4ae:	69fb      	ldr	r3, [r7, #28]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d006      	beq.n	800e4c4 <etharp_query+0x1c0>
 800e4b6:	4b2a      	ldr	r3, [pc, #168]	; (800e560 <etharp_query+0x25c>)
 800e4b8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800e4bc:	492f      	ldr	r1, [pc, #188]	; (800e57c <etharp_query+0x278>)
 800e4be:	482a      	ldr	r0, [pc, #168]	; (800e568 <etharp_query+0x264>)
 800e4c0:	f001 fcf8 	bl	800feb4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800e4c4:	69fb      	ldr	r3, [r7, #28]
 800e4c6:	7b1b      	ldrb	r3, [r3, #12]
 800e4c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d002      	beq.n	800e4d6 <etharp_query+0x1d2>
        copy_needed = 1;
 800e4d0:	2301      	movs	r3, #1
 800e4d2:	61bb      	str	r3, [r7, #24]
        break;
 800e4d4:	e005      	b.n	800e4e2 <etharp_query+0x1de>
      }
      p = p->next;
 800e4d6:	69fb      	ldr	r3, [r7, #28]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e4dc:	69fb      	ldr	r3, [r7, #28]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d1df      	bne.n	800e4a2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800e4e2:	69bb      	ldr	r3, [r7, #24]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d007      	beq.n	800e4f8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800e4e8:	687a      	ldr	r2, [r7, #4]
 800e4ea:	f44f 7120 	mov.w	r1, #640	; 0x280
 800e4ee:	200e      	movs	r0, #14
 800e4f0:	f7f8 fd6a 	bl	8006fc8 <pbuf_clone>
 800e4f4:	61f8      	str	r0, [r7, #28]
 800e4f6:	e004      	b.n	800e502 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e4fc:	69f8      	ldr	r0, [r7, #28]
 800e4fe:	f7f8 fb1b 	bl	8006b38 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e502:	69fb      	ldr	r3, [r7, #28]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d021      	beq.n	800e54c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e508:	7c7a      	ldrb	r2, [r7, #17]
 800e50a:	4918      	ldr	r1, [pc, #96]	; (800e56c <etharp_query+0x268>)
 800e50c:	4613      	mov	r3, r2
 800e50e:	005b      	lsls	r3, r3, #1
 800e510:	4413      	add	r3, r2
 800e512:	00db      	lsls	r3, r3, #3
 800e514:	440b      	add	r3, r1
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d00a      	beq.n	800e532 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800e51c:	7c7a      	ldrb	r2, [r7, #17]
 800e51e:	4913      	ldr	r1, [pc, #76]	; (800e56c <etharp_query+0x268>)
 800e520:	4613      	mov	r3, r2
 800e522:	005b      	lsls	r3, r3, #1
 800e524:	4413      	add	r3, r2
 800e526:	00db      	lsls	r3, r3, #3
 800e528:	440b      	add	r3, r1
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	4618      	mov	r0, r3
 800e52e:	f7f8 fa63 	bl	80069f8 <pbuf_free>
      }
      arp_table[i].q = p;
 800e532:	7c7a      	ldrb	r2, [r7, #17]
 800e534:	490d      	ldr	r1, [pc, #52]	; (800e56c <etharp_query+0x268>)
 800e536:	4613      	mov	r3, r2
 800e538:	005b      	lsls	r3, r3, #1
 800e53a:	4413      	add	r3, r2
 800e53c:	00db      	lsls	r3, r3, #3
 800e53e:	440b      	add	r3, r1
 800e540:	69fa      	ldr	r2, [r7, #28]
 800e542:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e544:	2300      	movs	r3, #0
 800e546:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e54a:	e002      	b.n	800e552 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e54c:	23ff      	movs	r3, #255	; 0xff
 800e54e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800e552:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e556:	4618      	mov	r0, r3
 800e558:	3728      	adds	r7, #40	; 0x28
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}
 800e55e:	bf00      	nop
 800e560:	08013b60 	.word	0x08013b60
 800e564:	08013d0c 	.word	0x08013d0c
 800e568:	08013bd8 	.word	0x08013bd8
 800e56c:	20000598 	.word	0x20000598
 800e570:	08013d1c 	.word	0x08013d1c
 800e574:	08013d00 	.word	0x08013d00
 800e578:	20000688 	.word	0x20000688
 800e57c:	08013d44 	.word	0x08013d44

0800e580 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b08a      	sub	sp, #40	; 0x28
 800e584:	af02      	add	r7, sp, #8
 800e586:	60f8      	str	r0, [r7, #12]
 800e588:	60b9      	str	r1, [r7, #8]
 800e58a:	607a      	str	r2, [r7, #4]
 800e58c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e58e:	2300      	movs	r3, #0
 800e590:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d106      	bne.n	800e5a6 <etharp_raw+0x26>
 800e598:	4b3a      	ldr	r3, [pc, #232]	; (800e684 <etharp_raw+0x104>)
 800e59a:	f240 4257 	movw	r2, #1111	; 0x457
 800e59e:	493a      	ldr	r1, [pc, #232]	; (800e688 <etharp_raw+0x108>)
 800e5a0:	483a      	ldr	r0, [pc, #232]	; (800e68c <etharp_raw+0x10c>)
 800e5a2:	f001 fc87 	bl	800feb4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e5a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e5aa:	211c      	movs	r1, #28
 800e5ac:	200e      	movs	r0, #14
 800e5ae:	f7f7 ff3f 	bl	8006430 <pbuf_alloc>
 800e5b2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e5b4:	69bb      	ldr	r3, [r7, #24]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d102      	bne.n	800e5c0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800e5ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e5be:	e05d      	b.n	800e67c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e5c0:	69bb      	ldr	r3, [r7, #24]
 800e5c2:	895b      	ldrh	r3, [r3, #10]
 800e5c4:	2b1b      	cmp	r3, #27
 800e5c6:	d806      	bhi.n	800e5d6 <etharp_raw+0x56>
 800e5c8:	4b2e      	ldr	r3, [pc, #184]	; (800e684 <etharp_raw+0x104>)
 800e5ca:	f240 4262 	movw	r2, #1122	; 0x462
 800e5ce:	4930      	ldr	r1, [pc, #192]	; (800e690 <etharp_raw+0x110>)
 800e5d0:	482e      	ldr	r0, [pc, #184]	; (800e68c <etharp_raw+0x10c>)
 800e5d2:	f001 fc6f 	bl	800feb4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e5d6:	69bb      	ldr	r3, [r7, #24]
 800e5d8:	685b      	ldr	r3, [r3, #4]
 800e5da:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e5dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f7f6 feec 	bl	80053bc <lwip_htons>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	461a      	mov	r2, r3
 800e5e8:	697b      	ldr	r3, [r7, #20]
 800e5ea:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e5f2:	2b06      	cmp	r3, #6
 800e5f4:	d006      	beq.n	800e604 <etharp_raw+0x84>
 800e5f6:	4b23      	ldr	r3, [pc, #140]	; (800e684 <etharp_raw+0x104>)
 800e5f8:	f240 4269 	movw	r2, #1129	; 0x469
 800e5fc:	4925      	ldr	r1, [pc, #148]	; (800e694 <etharp_raw+0x114>)
 800e5fe:	4823      	ldr	r0, [pc, #140]	; (800e68c <etharp_raw+0x10c>)
 800e600:	f001 fc58 	bl	800feb4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	3308      	adds	r3, #8
 800e608:	2206      	movs	r2, #6
 800e60a:	6839      	ldr	r1, [r7, #0]
 800e60c:	4618      	mov	r0, r3
 800e60e:	f001 fc21 	bl	800fe54 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	3312      	adds	r3, #18
 800e616:	2206      	movs	r2, #6
 800e618:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e61a:	4618      	mov	r0, r3
 800e61c:	f001 fc1a 	bl	800fe54 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800e620:	697b      	ldr	r3, [r7, #20]
 800e622:	330e      	adds	r3, #14
 800e624:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e626:	6812      	ldr	r2, [r2, #0]
 800e628:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	3318      	adds	r3, #24
 800e62e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e630:	6812      	ldr	r2, [r2, #0]
 800e632:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e634:	697b      	ldr	r3, [r7, #20]
 800e636:	2200      	movs	r2, #0
 800e638:	701a      	strb	r2, [r3, #0]
 800e63a:	2200      	movs	r2, #0
 800e63c:	f042 0201 	orr.w	r2, r2, #1
 800e640:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	2200      	movs	r2, #0
 800e646:	f042 0208 	orr.w	r2, r2, #8
 800e64a:	709a      	strb	r2, [r3, #2]
 800e64c:	2200      	movs	r2, #0
 800e64e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	2206      	movs	r2, #6
 800e654:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	2204      	movs	r2, #4
 800e65a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e65c:	f640 0306 	movw	r3, #2054	; 0x806
 800e660:	9300      	str	r3, [sp, #0]
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	68ba      	ldr	r2, [r7, #8]
 800e666:	69b9      	ldr	r1, [r7, #24]
 800e668:	68f8      	ldr	r0, [r7, #12]
 800e66a:	f001 fb75 	bl	800fd58 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e66e:	69b8      	ldr	r0, [r7, #24]
 800e670:	f7f8 f9c2 	bl	80069f8 <pbuf_free>
  p = NULL;
 800e674:	2300      	movs	r3, #0
 800e676:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e678:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e67c:	4618      	mov	r0, r3
 800e67e:	3720      	adds	r7, #32
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}
 800e684:	08013b60 	.word	0x08013b60
 800e688:	08013cb0 	.word	0x08013cb0
 800e68c:	08013bd8 	.word	0x08013bd8
 800e690:	08013d60 	.word	0x08013d60
 800e694:	08013d94 	.word	0x08013d94

0800e698 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b088      	sub	sp, #32
 800e69c:	af04      	add	r7, sp, #16
 800e69e:	60f8      	str	r0, [r7, #12]
 800e6a0:	60b9      	str	r1, [r7, #8]
 800e6a2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e6b4:	2201      	movs	r2, #1
 800e6b6:	9203      	str	r2, [sp, #12]
 800e6b8:	68ba      	ldr	r2, [r7, #8]
 800e6ba:	9202      	str	r2, [sp, #8]
 800e6bc:	4a06      	ldr	r2, [pc, #24]	; (800e6d8 <etharp_request_dst+0x40>)
 800e6be:	9201      	str	r2, [sp, #4]
 800e6c0:	9300      	str	r3, [sp, #0]
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	687a      	ldr	r2, [r7, #4]
 800e6c6:	68f8      	ldr	r0, [r7, #12]
 800e6c8:	f7ff ff5a 	bl	800e580 <etharp_raw>
 800e6cc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	3710      	adds	r7, #16
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}
 800e6d6:	bf00      	nop
 800e6d8:	08021238 	.word	0x08021238

0800e6dc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b082      	sub	sp, #8
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
 800e6e4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e6e6:	4a05      	ldr	r2, [pc, #20]	; (800e6fc <etharp_request+0x20>)
 800e6e8:	6839      	ldr	r1, [r7, #0]
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f7ff ffd4 	bl	800e698 <etharp_request_dst>
 800e6f0:	4603      	mov	r3, r0
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	3708      	adds	r7, #8
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}
 800e6fa:	bf00      	nop
 800e6fc:	08021230 	.word	0x08021230

0800e700 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b08e      	sub	sp, #56	; 0x38
 800e704:	af04      	add	r7, sp, #16
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e70a:	4b79      	ldr	r3, [pc, #484]	; (800e8f0 <icmp_input+0x1f0>)
 800e70c:	689b      	ldr	r3, [r3, #8]
 800e70e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800e710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e712:	781b      	ldrb	r3, [r3, #0]
 800e714:	f003 030f 	and.w	r3, r3, #15
 800e718:	b2db      	uxtb	r3, r3
 800e71a:	009b      	lsls	r3, r3, #2
 800e71c:	b2db      	uxtb	r3, r3
 800e71e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800e720:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e722:	2b13      	cmp	r3, #19
 800e724:	f240 80cd 	bls.w	800e8c2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	895b      	ldrh	r3, [r3, #10]
 800e72c:	2b03      	cmp	r3, #3
 800e72e:	f240 80ca 	bls.w	800e8c6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	685b      	ldr	r3, [r3, #4]
 800e736:	781b      	ldrb	r3, [r3, #0]
 800e738:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e73c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e740:	2b00      	cmp	r3, #0
 800e742:	f000 80b7 	beq.w	800e8b4 <icmp_input+0x1b4>
 800e746:	2b08      	cmp	r3, #8
 800e748:	f040 80b7 	bne.w	800e8ba <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800e74c:	4b69      	ldr	r3, [pc, #420]	; (800e8f4 <icmp_input+0x1f4>)
 800e74e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e750:	4b67      	ldr	r3, [pc, #412]	; (800e8f0 <icmp_input+0x1f0>)
 800e752:	695b      	ldr	r3, [r3, #20]
 800e754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e758:	2be0      	cmp	r3, #224	; 0xe0
 800e75a:	f000 80bb 	beq.w	800e8d4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e75e:	4b64      	ldr	r3, [pc, #400]	; (800e8f0 <icmp_input+0x1f0>)
 800e760:	695b      	ldr	r3, [r3, #20]
 800e762:	4a63      	ldr	r2, [pc, #396]	; (800e8f0 <icmp_input+0x1f0>)
 800e764:	6812      	ldr	r2, [r2, #0]
 800e766:	4611      	mov	r1, r2
 800e768:	4618      	mov	r0, r3
 800e76a:	f000 fbed 	bl	800ef48 <ip4_addr_isbroadcast_u32>
 800e76e:	4603      	mov	r3, r0
 800e770:	2b00      	cmp	r3, #0
 800e772:	f040 80b1 	bne.w	800e8d8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	891b      	ldrh	r3, [r3, #8]
 800e77a:	2b07      	cmp	r3, #7
 800e77c:	f240 80a5 	bls.w	800e8ca <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e780:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e782:	330e      	adds	r3, #14
 800e784:	4619      	mov	r1, r3
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f7f8 f8a0 	bl	80068cc <pbuf_add_header>
 800e78c:	4603      	mov	r3, r0
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d04b      	beq.n	800e82a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	891a      	ldrh	r2, [r3, #8]
 800e796:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e798:	4413      	add	r3, r2
 800e79a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	891b      	ldrh	r3, [r3, #8]
 800e7a0:	8b7a      	ldrh	r2, [r7, #26]
 800e7a2:	429a      	cmp	r2, r3
 800e7a4:	f0c0 809a 	bcc.w	800e8dc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800e7a8:	8b7b      	ldrh	r3, [r7, #26]
 800e7aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e7ae:	4619      	mov	r1, r3
 800e7b0:	200e      	movs	r0, #14
 800e7b2:	f7f7 fe3d 	bl	8006430 <pbuf_alloc>
 800e7b6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	f000 8090 	beq.w	800e8e0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	895b      	ldrh	r3, [r3, #10]
 800e7c4:	461a      	mov	r2, r3
 800e7c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e7c8:	3308      	adds	r3, #8
 800e7ca:	429a      	cmp	r2, r3
 800e7cc:	d203      	bcs.n	800e7d6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800e7ce:	6978      	ldr	r0, [r7, #20]
 800e7d0:	f7f8 f912 	bl	80069f8 <pbuf_free>
          goto icmperr;
 800e7d4:	e085      	b.n	800e8e2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	685b      	ldr	r3, [r3, #4]
 800e7da:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e7dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f001 fb38 	bl	800fe54 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800e7e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e7e6:	4619      	mov	r1, r3
 800e7e8:	6978      	ldr	r0, [r7, #20]
 800e7ea:	f7f8 f87f 	bl	80068ec <pbuf_remove_header>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d009      	beq.n	800e808 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e7f4:	4b40      	ldr	r3, [pc, #256]	; (800e8f8 <icmp_input+0x1f8>)
 800e7f6:	22b6      	movs	r2, #182	; 0xb6
 800e7f8:	4940      	ldr	r1, [pc, #256]	; (800e8fc <icmp_input+0x1fc>)
 800e7fa:	4841      	ldr	r0, [pc, #260]	; (800e900 <icmp_input+0x200>)
 800e7fc:	f001 fb5a 	bl	800feb4 <iprintf>
          pbuf_free(r);
 800e800:	6978      	ldr	r0, [r7, #20]
 800e802:	f7f8 f8f9 	bl	80069f8 <pbuf_free>
          goto icmperr;
 800e806:	e06c      	b.n	800e8e2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800e808:	6879      	ldr	r1, [r7, #4]
 800e80a:	6978      	ldr	r0, [r7, #20]
 800e80c:	f7f8 fa0c 	bl	8006c28 <pbuf_copy>
 800e810:	4603      	mov	r3, r0
 800e812:	2b00      	cmp	r3, #0
 800e814:	d003      	beq.n	800e81e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800e816:	6978      	ldr	r0, [r7, #20]
 800e818:	f7f8 f8ee 	bl	80069f8 <pbuf_free>
          goto icmperr;
 800e81c:	e061      	b.n	800e8e2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f7f8 f8ea 	bl	80069f8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800e824:	697b      	ldr	r3, [r7, #20]
 800e826:	607b      	str	r3, [r7, #4]
 800e828:	e00f      	b.n	800e84a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e82a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e82c:	330e      	adds	r3, #14
 800e82e:	4619      	mov	r1, r3
 800e830:	6878      	ldr	r0, [r7, #4]
 800e832:	f7f8 f85b 	bl	80068ec <pbuf_remove_header>
 800e836:	4603      	mov	r3, r0
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d006      	beq.n	800e84a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e83c:	4b2e      	ldr	r3, [pc, #184]	; (800e8f8 <icmp_input+0x1f8>)
 800e83e:	22c7      	movs	r2, #199	; 0xc7
 800e840:	4930      	ldr	r1, [pc, #192]	; (800e904 <icmp_input+0x204>)
 800e842:	482f      	ldr	r0, [pc, #188]	; (800e900 <icmp_input+0x200>)
 800e844:	f001 fb36 	bl	800feb4 <iprintf>
          goto icmperr;
 800e848:	e04b      	b.n	800e8e2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	685b      	ldr	r3, [r3, #4]
 800e84e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800e850:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e852:	4619      	mov	r1, r3
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	f7f8 f839 	bl	80068cc <pbuf_add_header>
 800e85a:	4603      	mov	r3, r0
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d12b      	bne.n	800e8b8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	685b      	ldr	r3, [r3, #4]
 800e864:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800e866:	69fb      	ldr	r3, [r7, #28]
 800e868:	681a      	ldr	r2, [r3, #0]
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e86e:	4b20      	ldr	r3, [pc, #128]	; (800e8f0 <icmp_input+0x1f0>)
 800e870:	691a      	ldr	r2, [r3, #16]
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e876:	693b      	ldr	r3, [r7, #16]
 800e878:	2200      	movs	r2, #0
 800e87a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800e87c:	693b      	ldr	r3, [r7, #16]
 800e87e:	2200      	movs	r2, #0
 800e880:	709a      	strb	r2, [r3, #2]
 800e882:	2200      	movs	r2, #0
 800e884:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	22ff      	movs	r2, #255	; 0xff
 800e88a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	2200      	movs	r2, #0
 800e890:	729a      	strb	r2, [r3, #10]
 800e892:	2200      	movs	r2, #0
 800e894:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	9302      	str	r3, [sp, #8]
 800e89a:	2301      	movs	r3, #1
 800e89c:	9301      	str	r3, [sp, #4]
 800e89e:	2300      	movs	r3, #0
 800e8a0:	9300      	str	r3, [sp, #0]
 800e8a2:	23ff      	movs	r3, #255	; 0xff
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	69f9      	ldr	r1, [r7, #28]
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f000 fa75 	bl	800ed98 <ip4_output_if>
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800e8b2:	e001      	b.n	800e8b8 <icmp_input+0x1b8>
      break;
 800e8b4:	bf00      	nop
 800e8b6:	e000      	b.n	800e8ba <icmp_input+0x1ba>
      break;
 800e8b8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800e8ba:	6878      	ldr	r0, [r7, #4]
 800e8bc:	f7f8 f89c 	bl	80069f8 <pbuf_free>
  return;
 800e8c0:	e013      	b.n	800e8ea <icmp_input+0x1ea>
    goto lenerr;
 800e8c2:	bf00      	nop
 800e8c4:	e002      	b.n	800e8cc <icmp_input+0x1cc>
    goto lenerr;
 800e8c6:	bf00      	nop
 800e8c8:	e000      	b.n	800e8cc <icmp_input+0x1cc>
        goto lenerr;
 800e8ca:	bf00      	nop
lenerr:
  pbuf_free(p);
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	f7f8 f893 	bl	80069f8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e8d2:	e00a      	b.n	800e8ea <icmp_input+0x1ea>
        goto icmperr;
 800e8d4:	bf00      	nop
 800e8d6:	e004      	b.n	800e8e2 <icmp_input+0x1e2>
        goto icmperr;
 800e8d8:	bf00      	nop
 800e8da:	e002      	b.n	800e8e2 <icmp_input+0x1e2>
          goto icmperr;
 800e8dc:	bf00      	nop
 800e8de:	e000      	b.n	800e8e2 <icmp_input+0x1e2>
          goto icmperr;
 800e8e0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f7f8 f888 	bl	80069f8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e8e8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800e8ea:	3728      	adds	r7, #40	; 0x28
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	bd80      	pop	{r7, pc}
 800e8f0:	20003808 	.word	0x20003808
 800e8f4:	2000381c 	.word	0x2000381c
 800e8f8:	08013dd8 	.word	0x08013dd8
 800e8fc:	08013e10 	.word	0x08013e10
 800e900:	08013e48 	.word	0x08013e48
 800e904:	08013e70 	.word	0x08013e70

0800e908 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b082      	sub	sp, #8
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
 800e910:	460b      	mov	r3, r1
 800e912:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800e914:	78fb      	ldrb	r3, [r7, #3]
 800e916:	461a      	mov	r2, r3
 800e918:	2103      	movs	r1, #3
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	f000 f814 	bl	800e948 <icmp_send_response>
}
 800e920:	bf00      	nop
 800e922:	3708      	adds	r7, #8
 800e924:	46bd      	mov	sp, r7
 800e926:	bd80      	pop	{r7, pc}

0800e928 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b082      	sub	sp, #8
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
 800e930:	460b      	mov	r3, r1
 800e932:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800e934:	78fb      	ldrb	r3, [r7, #3]
 800e936:	461a      	mov	r2, r3
 800e938:	210b      	movs	r1, #11
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f000 f804 	bl	800e948 <icmp_send_response>
}
 800e940:	bf00      	nop
 800e942:	3708      	adds	r7, #8
 800e944:	46bd      	mov	sp, r7
 800e946:	bd80      	pop	{r7, pc}

0800e948 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b08c      	sub	sp, #48	; 0x30
 800e94c:	af04      	add	r7, sp, #16
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	460b      	mov	r3, r1
 800e952:	70fb      	strb	r3, [r7, #3]
 800e954:	4613      	mov	r3, r2
 800e956:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e958:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e95c:	2124      	movs	r1, #36	; 0x24
 800e95e:	2022      	movs	r0, #34	; 0x22
 800e960:	f7f7 fd66 	bl	8006430 <pbuf_alloc>
 800e964:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800e966:	69fb      	ldr	r3, [r7, #28]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d04c      	beq.n	800ea06 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e96c:	69fb      	ldr	r3, [r7, #28]
 800e96e:	895b      	ldrh	r3, [r3, #10]
 800e970:	2b23      	cmp	r3, #35	; 0x23
 800e972:	d806      	bhi.n	800e982 <icmp_send_response+0x3a>
 800e974:	4b26      	ldr	r3, [pc, #152]	; (800ea10 <icmp_send_response+0xc8>)
 800e976:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800e97a:	4926      	ldr	r1, [pc, #152]	; (800ea14 <icmp_send_response+0xcc>)
 800e97c:	4826      	ldr	r0, [pc, #152]	; (800ea18 <icmp_send_response+0xd0>)
 800e97e:	f001 fa99 	bl	800feb4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	685b      	ldr	r3, [r3, #4]
 800e986:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e988:	69fb      	ldr	r3, [r7, #28]
 800e98a:	685b      	ldr	r3, [r3, #4]
 800e98c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	78fa      	ldrb	r2, [r7, #3]
 800e992:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800e994:	697b      	ldr	r3, [r7, #20]
 800e996:	78ba      	ldrb	r2, [r7, #2]
 800e998:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800e99a:	697b      	ldr	r3, [r7, #20]
 800e99c:	2200      	movs	r2, #0
 800e99e:	711a      	strb	r2, [r3, #4]
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800e9a4:	697b      	ldr	r3, [r7, #20]
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	719a      	strb	r2, [r3, #6]
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e9ae:	69fb      	ldr	r3, [r7, #28]
 800e9b0:	685b      	ldr	r3, [r3, #4]
 800e9b2:	f103 0008 	add.w	r0, r3, #8
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	685b      	ldr	r3, [r3, #4]
 800e9ba:	221c      	movs	r2, #28
 800e9bc:	4619      	mov	r1, r3
 800e9be:	f001 fa49 	bl	800fe54 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e9c2:	69bb      	ldr	r3, [r7, #24]
 800e9c4:	68db      	ldr	r3, [r3, #12]
 800e9c6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e9c8:	f107 030c 	add.w	r3, r7, #12
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	f000 f825 	bl	800ea1c <ip4_route>
 800e9d2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800e9d4:	693b      	ldr	r3, [r7, #16]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d011      	beq.n	800e9fe <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800e9da:	697b      	ldr	r3, [r7, #20]
 800e9dc:	2200      	movs	r2, #0
 800e9de:	709a      	strb	r2, [r3, #2]
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e9e4:	f107 020c 	add.w	r2, r7, #12
 800e9e8:	693b      	ldr	r3, [r7, #16]
 800e9ea:	9302      	str	r3, [sp, #8]
 800e9ec:	2301      	movs	r3, #1
 800e9ee:	9301      	str	r3, [sp, #4]
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	9300      	str	r3, [sp, #0]
 800e9f4:	23ff      	movs	r3, #255	; 0xff
 800e9f6:	2100      	movs	r1, #0
 800e9f8:	69f8      	ldr	r0, [r7, #28]
 800e9fa:	f000 f9cd 	bl	800ed98 <ip4_output_if>
  }
  pbuf_free(q);
 800e9fe:	69f8      	ldr	r0, [r7, #28]
 800ea00:	f7f7 fffa 	bl	80069f8 <pbuf_free>
 800ea04:	e000      	b.n	800ea08 <icmp_send_response+0xc0>
    return;
 800ea06:	bf00      	nop
}
 800ea08:	3720      	adds	r7, #32
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}
 800ea0e:	bf00      	nop
 800ea10:	08013dd8 	.word	0x08013dd8
 800ea14:	08013ea4 	.word	0x08013ea4
 800ea18:	08013e48 	.word	0x08013e48

0800ea1c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800ea1c:	b480      	push	{r7}
 800ea1e:	b085      	sub	sp, #20
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800ea24:	4b33      	ldr	r3, [pc, #204]	; (800eaf4 <ip4_route+0xd8>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	60fb      	str	r3, [r7, #12]
 800ea2a:	e036      	b.n	800ea9a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ea32:	f003 0301 	and.w	r3, r3, #1
 800ea36:	b2db      	uxtb	r3, r3
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d02b      	beq.n	800ea94 <ip4_route+0x78>
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ea42:	089b      	lsrs	r3, r3, #2
 800ea44:	f003 0301 	and.w	r3, r3, #1
 800ea48:	b2db      	uxtb	r3, r3
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d022      	beq.n	800ea94 <ip4_route+0x78>
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	3304      	adds	r3, #4
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d01d      	beq.n	800ea94 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681a      	ldr	r2, [r3, #0]
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	3304      	adds	r3, #4
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	405a      	eors	r2, r3
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	3308      	adds	r3, #8
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	4013      	ands	r3, r2
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d101      	bne.n	800ea74 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	e038      	b.n	800eae6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ea7a:	f003 0302 	and.w	r3, r3, #2
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d108      	bne.n	800ea94 <ip4_route+0x78>
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681a      	ldr	r2, [r3, #0]
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	330c      	adds	r3, #12
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	429a      	cmp	r2, r3
 800ea8e:	d101      	bne.n	800ea94 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	e028      	b.n	800eae6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	60fb      	str	r3, [r7, #12]
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d1c5      	bne.n	800ea2c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800eaa0:	4b15      	ldr	r3, [pc, #84]	; (800eaf8 <ip4_route+0xdc>)
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d01a      	beq.n	800eade <ip4_route+0xc2>
 800eaa8:	4b13      	ldr	r3, [pc, #76]	; (800eaf8 <ip4_route+0xdc>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eab0:	f003 0301 	and.w	r3, r3, #1
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d012      	beq.n	800eade <ip4_route+0xc2>
 800eab8:	4b0f      	ldr	r3, [pc, #60]	; (800eaf8 <ip4_route+0xdc>)
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eac0:	f003 0304 	and.w	r3, r3, #4
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d00a      	beq.n	800eade <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800eac8:	4b0b      	ldr	r3, [pc, #44]	; (800eaf8 <ip4_route+0xdc>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	3304      	adds	r3, #4
 800eace:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d004      	beq.n	800eade <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	b2db      	uxtb	r3, r3
 800eada:	2b7f      	cmp	r3, #127	; 0x7f
 800eadc:	d101      	bne.n	800eae2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800eade:	2300      	movs	r3, #0
 800eae0:	e001      	b.n	800eae6 <ip4_route+0xca>
  }

  return netif_default;
 800eae2:	4b05      	ldr	r3, [pc, #20]	; (800eaf8 <ip4_route+0xdc>)
 800eae4:	681b      	ldr	r3, [r3, #0]
}
 800eae6:	4618      	mov	r0, r3
 800eae8:	3714      	adds	r7, #20
 800eaea:	46bd      	mov	sp, r7
 800eaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf0:	4770      	bx	lr
 800eaf2:	bf00      	nop
 800eaf4:	20006d3c 	.word	0x20006d3c
 800eaf8:	20006d40 	.word	0x20006d40

0800eafc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b082      	sub	sp, #8
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eb0a:	f003 0301 	and.w	r3, r3, #1
 800eb0e:	b2db      	uxtb	r3, r3
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d016      	beq.n	800eb42 <ip4_input_accept+0x46>
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	3304      	adds	r3, #4
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d011      	beq.n	800eb42 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800eb1e:	4b0b      	ldr	r3, [pc, #44]	; (800eb4c <ip4_input_accept+0x50>)
 800eb20:	695a      	ldr	r2, [r3, #20]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	3304      	adds	r3, #4
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	429a      	cmp	r2, r3
 800eb2a:	d008      	beq.n	800eb3e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800eb2c:	4b07      	ldr	r3, [pc, #28]	; (800eb4c <ip4_input_accept+0x50>)
 800eb2e:	695b      	ldr	r3, [r3, #20]
 800eb30:	6879      	ldr	r1, [r7, #4]
 800eb32:	4618      	mov	r0, r3
 800eb34:	f000 fa08 	bl	800ef48 <ip4_addr_isbroadcast_u32>
 800eb38:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d001      	beq.n	800eb42 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800eb3e:	2301      	movs	r3, #1
 800eb40:	e000      	b.n	800eb44 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800eb42:	2300      	movs	r3, #0
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3708      	adds	r7, #8
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}
 800eb4c:	20003808 	.word	0x20003808

0800eb50 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b086      	sub	sp, #24
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
 800eb58:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	685b      	ldr	r3, [r3, #4]
 800eb5e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	781b      	ldrb	r3, [r3, #0]
 800eb64:	091b      	lsrs	r3, r3, #4
 800eb66:	b2db      	uxtb	r3, r3
 800eb68:	2b04      	cmp	r3, #4
 800eb6a:	d004      	beq.n	800eb76 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800eb6c:	6878      	ldr	r0, [r7, #4]
 800eb6e:	f7f7 ff43 	bl	80069f8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800eb72:	2300      	movs	r3, #0
 800eb74:	e107      	b.n	800ed86 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800eb76:	697b      	ldr	r3, [r7, #20]
 800eb78:	781b      	ldrb	r3, [r3, #0]
 800eb7a:	f003 030f 	and.w	r3, r3, #15
 800eb7e:	b2db      	uxtb	r3, r3
 800eb80:	009b      	lsls	r3, r3, #2
 800eb82:	b2db      	uxtb	r3, r3
 800eb84:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800eb86:	697b      	ldr	r3, [r7, #20]
 800eb88:	885b      	ldrh	r3, [r3, #2]
 800eb8a:	b29b      	uxth	r3, r3
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	f7f6 fc15 	bl	80053bc <lwip_htons>
 800eb92:	4603      	mov	r3, r0
 800eb94:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	891b      	ldrh	r3, [r3, #8]
 800eb9a:	89ba      	ldrh	r2, [r7, #12]
 800eb9c:	429a      	cmp	r2, r3
 800eb9e:	d204      	bcs.n	800ebaa <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800eba0:	89bb      	ldrh	r3, [r7, #12]
 800eba2:	4619      	mov	r1, r3
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f7f7 fda1 	bl	80066ec <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	895b      	ldrh	r3, [r3, #10]
 800ebae:	89fa      	ldrh	r2, [r7, #14]
 800ebb0:	429a      	cmp	r2, r3
 800ebb2:	d807      	bhi.n	800ebc4 <ip4_input+0x74>
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	891b      	ldrh	r3, [r3, #8]
 800ebb8:	89ba      	ldrh	r2, [r7, #12]
 800ebba:	429a      	cmp	r2, r3
 800ebbc:	d802      	bhi.n	800ebc4 <ip4_input+0x74>
 800ebbe:	89fb      	ldrh	r3, [r7, #14]
 800ebc0:	2b13      	cmp	r3, #19
 800ebc2:	d804      	bhi.n	800ebce <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800ebc4:	6878      	ldr	r0, [r7, #4]
 800ebc6:	f7f7 ff17 	bl	80069f8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800ebca:	2300      	movs	r3, #0
 800ebcc:	e0db      	b.n	800ed86 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800ebce:	697b      	ldr	r3, [r7, #20]
 800ebd0:	691b      	ldr	r3, [r3, #16]
 800ebd2:	4a6f      	ldr	r2, [pc, #444]	; (800ed90 <ip4_input+0x240>)
 800ebd4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ebd6:	697b      	ldr	r3, [r7, #20]
 800ebd8:	68db      	ldr	r3, [r3, #12]
 800ebda:	4a6d      	ldr	r2, [pc, #436]	; (800ed90 <ip4_input+0x240>)
 800ebdc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ebde:	4b6c      	ldr	r3, [pc, #432]	; (800ed90 <ip4_input+0x240>)
 800ebe0:	695b      	ldr	r3, [r3, #20]
 800ebe2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ebe6:	2be0      	cmp	r3, #224	; 0xe0
 800ebe8:	d112      	bne.n	800ec10 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ebf0:	f003 0301 	and.w	r3, r3, #1
 800ebf4:	b2db      	uxtb	r3, r3
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d007      	beq.n	800ec0a <ip4_input+0xba>
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	3304      	adds	r3, #4
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d002      	beq.n	800ec0a <ip4_input+0xba>
      netif = inp;
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	613b      	str	r3, [r7, #16]
 800ec08:	e02a      	b.n	800ec60 <ip4_input+0x110>
    } else {
      netif = NULL;
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	613b      	str	r3, [r7, #16]
 800ec0e:	e027      	b.n	800ec60 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800ec10:	6838      	ldr	r0, [r7, #0]
 800ec12:	f7ff ff73 	bl	800eafc <ip4_input_accept>
 800ec16:	4603      	mov	r3, r0
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d002      	beq.n	800ec22 <ip4_input+0xd2>
      netif = inp;
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	613b      	str	r3, [r7, #16]
 800ec20:	e01e      	b.n	800ec60 <ip4_input+0x110>
    } else {
      netif = NULL;
 800ec22:	2300      	movs	r3, #0
 800ec24:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800ec26:	4b5a      	ldr	r3, [pc, #360]	; (800ed90 <ip4_input+0x240>)
 800ec28:	695b      	ldr	r3, [r3, #20]
 800ec2a:	b2db      	uxtb	r3, r3
 800ec2c:	2b7f      	cmp	r3, #127	; 0x7f
 800ec2e:	d017      	beq.n	800ec60 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800ec30:	4b58      	ldr	r3, [pc, #352]	; (800ed94 <ip4_input+0x244>)
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	613b      	str	r3, [r7, #16]
 800ec36:	e00e      	b.n	800ec56 <ip4_input+0x106>
          if (netif == inp) {
 800ec38:	693a      	ldr	r2, [r7, #16]
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	429a      	cmp	r2, r3
 800ec3e:	d006      	beq.n	800ec4e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800ec40:	6938      	ldr	r0, [r7, #16]
 800ec42:	f7ff ff5b 	bl	800eafc <ip4_input_accept>
 800ec46:	4603      	mov	r3, r0
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d108      	bne.n	800ec5e <ip4_input+0x10e>
 800ec4c:	e000      	b.n	800ec50 <ip4_input+0x100>
            continue;
 800ec4e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800ec50:	693b      	ldr	r3, [r7, #16]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	613b      	str	r3, [r7, #16]
 800ec56:	693b      	ldr	r3, [r7, #16]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d1ed      	bne.n	800ec38 <ip4_input+0xe8>
 800ec5c:	e000      	b.n	800ec60 <ip4_input+0x110>
            break;
 800ec5e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ec60:	4b4b      	ldr	r3, [pc, #300]	; (800ed90 <ip4_input+0x240>)
 800ec62:	691b      	ldr	r3, [r3, #16]
 800ec64:	6839      	ldr	r1, [r7, #0]
 800ec66:	4618      	mov	r0, r3
 800ec68:	f000 f96e 	bl	800ef48 <ip4_addr_isbroadcast_u32>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d105      	bne.n	800ec7e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800ec72:	4b47      	ldr	r3, [pc, #284]	; (800ed90 <ip4_input+0x240>)
 800ec74:	691b      	ldr	r3, [r3, #16]
 800ec76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ec7a:	2be0      	cmp	r3, #224	; 0xe0
 800ec7c:	d104      	bne.n	800ec88 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800ec7e:	6878      	ldr	r0, [r7, #4]
 800ec80:	f7f7 feba 	bl	80069f8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800ec84:	2300      	movs	r3, #0
 800ec86:	e07e      	b.n	800ed86 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800ec88:	693b      	ldr	r3, [r7, #16]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d104      	bne.n	800ec98 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800ec8e:	6878      	ldr	r0, [r7, #4]
 800ec90:	f7f7 feb2 	bl	80069f8 <pbuf_free>
    return ERR_OK;
 800ec94:	2300      	movs	r3, #0
 800ec96:	e076      	b.n	800ed86 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800ec98:	697b      	ldr	r3, [r7, #20]
 800ec9a:	88db      	ldrh	r3, [r3, #6]
 800ec9c:	b29b      	uxth	r3, r3
 800ec9e:	461a      	mov	r2, r3
 800eca0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800eca4:	4013      	ands	r3, r2
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d00b      	beq.n	800ecc2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	f000 fc92 	bl	800f5d4 <ip4_reass>
 800ecb0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d101      	bne.n	800ecbc <ip4_input+0x16c>
      return ERR_OK;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	e064      	b.n	800ed86 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	685b      	ldr	r3, [r3, #4]
 800ecc0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800ecc2:	4a33      	ldr	r2, [pc, #204]	; (800ed90 <ip4_input+0x240>)
 800ecc4:	693b      	ldr	r3, [r7, #16]
 800ecc6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800ecc8:	4a31      	ldr	r2, [pc, #196]	; (800ed90 <ip4_input+0x240>)
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800ecce:	4a30      	ldr	r2, [pc, #192]	; (800ed90 <ip4_input+0x240>)
 800ecd0:	697b      	ldr	r3, [r7, #20]
 800ecd2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800ecd4:	697b      	ldr	r3, [r7, #20]
 800ecd6:	781b      	ldrb	r3, [r3, #0]
 800ecd8:	f003 030f 	and.w	r3, r3, #15
 800ecdc:	b2db      	uxtb	r3, r3
 800ecde:	009b      	lsls	r3, r3, #2
 800ece0:	b2db      	uxtb	r3, r3
 800ece2:	b29a      	uxth	r2, r3
 800ece4:	4b2a      	ldr	r3, [pc, #168]	; (800ed90 <ip4_input+0x240>)
 800ece6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800ece8:	89fb      	ldrh	r3, [r7, #14]
 800ecea:	4619      	mov	r1, r3
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f7f7 fdfd 	bl	80068ec <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800ecf2:	697b      	ldr	r3, [r7, #20]
 800ecf4:	7a5b      	ldrb	r3, [r3, #9]
 800ecf6:	2b11      	cmp	r3, #17
 800ecf8:	d006      	beq.n	800ed08 <ip4_input+0x1b8>
 800ecfa:	2b11      	cmp	r3, #17
 800ecfc:	dc13      	bgt.n	800ed26 <ip4_input+0x1d6>
 800ecfe:	2b01      	cmp	r3, #1
 800ed00:	d00c      	beq.n	800ed1c <ip4_input+0x1cc>
 800ed02:	2b06      	cmp	r3, #6
 800ed04:	d005      	beq.n	800ed12 <ip4_input+0x1c2>
 800ed06:	e00e      	b.n	800ed26 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800ed08:	6839      	ldr	r1, [r7, #0]
 800ed0a:	6878      	ldr	r0, [r7, #4]
 800ed0c:	f7fe fc68 	bl	800d5e0 <udp_input>
        break;
 800ed10:	e026      	b.n	800ed60 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800ed12:	6839      	ldr	r1, [r7, #0]
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f7fa f88d 	bl	8008e34 <tcp_input>
        break;
 800ed1a:	e021      	b.n	800ed60 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800ed1c:	6839      	ldr	r1, [r7, #0]
 800ed1e:	6878      	ldr	r0, [r7, #4]
 800ed20:	f7ff fcee 	bl	800e700 <icmp_input>
        break;
 800ed24:	e01c      	b.n	800ed60 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ed26:	4b1a      	ldr	r3, [pc, #104]	; (800ed90 <ip4_input+0x240>)
 800ed28:	695b      	ldr	r3, [r3, #20]
 800ed2a:	6939      	ldr	r1, [r7, #16]
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	f000 f90b 	bl	800ef48 <ip4_addr_isbroadcast_u32>
 800ed32:	4603      	mov	r3, r0
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d10f      	bne.n	800ed58 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ed38:	4b15      	ldr	r3, [pc, #84]	; (800ed90 <ip4_input+0x240>)
 800ed3a:	695b      	ldr	r3, [r3, #20]
 800ed3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ed40:	2be0      	cmp	r3, #224	; 0xe0
 800ed42:	d009      	beq.n	800ed58 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800ed44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ed48:	4619      	mov	r1, r3
 800ed4a:	6878      	ldr	r0, [r7, #4]
 800ed4c:	f7f7 fe41 	bl	80069d2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ed50:	2102      	movs	r1, #2
 800ed52:	6878      	ldr	r0, [r7, #4]
 800ed54:	f7ff fdd8 	bl	800e908 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800ed58:	6878      	ldr	r0, [r7, #4]
 800ed5a:	f7f7 fe4d 	bl	80069f8 <pbuf_free>
        break;
 800ed5e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800ed60:	4b0b      	ldr	r3, [pc, #44]	; (800ed90 <ip4_input+0x240>)
 800ed62:	2200      	movs	r2, #0
 800ed64:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800ed66:	4b0a      	ldr	r3, [pc, #40]	; (800ed90 <ip4_input+0x240>)
 800ed68:	2200      	movs	r2, #0
 800ed6a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800ed6c:	4b08      	ldr	r3, [pc, #32]	; (800ed90 <ip4_input+0x240>)
 800ed6e:	2200      	movs	r2, #0
 800ed70:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800ed72:	4b07      	ldr	r3, [pc, #28]	; (800ed90 <ip4_input+0x240>)
 800ed74:	2200      	movs	r2, #0
 800ed76:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800ed78:	4b05      	ldr	r3, [pc, #20]	; (800ed90 <ip4_input+0x240>)
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800ed7e:	4b04      	ldr	r3, [pc, #16]	; (800ed90 <ip4_input+0x240>)
 800ed80:	2200      	movs	r2, #0
 800ed82:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800ed84:	2300      	movs	r3, #0
}
 800ed86:	4618      	mov	r0, r3
 800ed88:	3718      	adds	r7, #24
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	bd80      	pop	{r7, pc}
 800ed8e:	bf00      	nop
 800ed90:	20003808 	.word	0x20003808
 800ed94:	20006d3c 	.word	0x20006d3c

0800ed98 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b08a      	sub	sp, #40	; 0x28
 800ed9c:	af04      	add	r7, sp, #16
 800ed9e:	60f8      	str	r0, [r7, #12]
 800eda0:	60b9      	str	r1, [r7, #8]
 800eda2:	607a      	str	r2, [r7, #4]
 800eda4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d009      	beq.n	800edc4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800edb0:	68bb      	ldr	r3, [r7, #8]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d003      	beq.n	800edbe <ip4_output_if+0x26>
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d102      	bne.n	800edc4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800edbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc0:	3304      	adds	r3, #4
 800edc2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800edc4:	78fa      	ldrb	r2, [r7, #3]
 800edc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc8:	9302      	str	r3, [sp, #8]
 800edca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800edce:	9301      	str	r3, [sp, #4]
 800edd0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800edd4:	9300      	str	r3, [sp, #0]
 800edd6:	4613      	mov	r3, r2
 800edd8:	687a      	ldr	r2, [r7, #4]
 800edda:	6979      	ldr	r1, [r7, #20]
 800eddc:	68f8      	ldr	r0, [r7, #12]
 800edde:	f000 f805 	bl	800edec <ip4_output_if_src>
 800ede2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	3718      	adds	r7, #24
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}

0800edec <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b088      	sub	sp, #32
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	60f8      	str	r0, [r7, #12]
 800edf4:	60b9      	str	r1, [r7, #8]
 800edf6:	607a      	str	r2, [r7, #4]
 800edf8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	7b9b      	ldrb	r3, [r3, #14]
 800edfe:	2b01      	cmp	r3, #1
 800ee00:	d006      	beq.n	800ee10 <ip4_output_if_src+0x24>
 800ee02:	4b4b      	ldr	r3, [pc, #300]	; (800ef30 <ip4_output_if_src+0x144>)
 800ee04:	f44f 7255 	mov.w	r2, #852	; 0x354
 800ee08:	494a      	ldr	r1, [pc, #296]	; (800ef34 <ip4_output_if_src+0x148>)
 800ee0a:	484b      	ldr	r0, [pc, #300]	; (800ef38 <ip4_output_if_src+0x14c>)
 800ee0c:	f001 f852 	bl	800feb4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d060      	beq.n	800eed8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800ee16:	2314      	movs	r3, #20
 800ee18:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800ee1a:	2114      	movs	r1, #20
 800ee1c:	68f8      	ldr	r0, [r7, #12]
 800ee1e:	f7f7 fd55 	bl	80068cc <pbuf_add_header>
 800ee22:	4603      	mov	r3, r0
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d002      	beq.n	800ee2e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ee28:	f06f 0301 	mvn.w	r3, #1
 800ee2c:	e07c      	b.n	800ef28 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	685b      	ldr	r3, [r3, #4]
 800ee32:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	895b      	ldrh	r3, [r3, #10]
 800ee38:	2b13      	cmp	r3, #19
 800ee3a:	d806      	bhi.n	800ee4a <ip4_output_if_src+0x5e>
 800ee3c:	4b3c      	ldr	r3, [pc, #240]	; (800ef30 <ip4_output_if_src+0x144>)
 800ee3e:	f44f 7262 	mov.w	r2, #904	; 0x388
 800ee42:	493e      	ldr	r1, [pc, #248]	; (800ef3c <ip4_output_if_src+0x150>)
 800ee44:	483c      	ldr	r0, [pc, #240]	; (800ef38 <ip4_output_if_src+0x14c>)
 800ee46:	f001 f835 	bl	800feb4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800ee4a:	69fb      	ldr	r3, [r7, #28]
 800ee4c:	78fa      	ldrb	r2, [r7, #3]
 800ee4e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800ee50:	69fb      	ldr	r3, [r7, #28]
 800ee52:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ee56:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681a      	ldr	r2, [r3, #0]
 800ee5c:	69fb      	ldr	r3, [r7, #28]
 800ee5e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ee60:	8b7b      	ldrh	r3, [r7, #26]
 800ee62:	089b      	lsrs	r3, r3, #2
 800ee64:	b29b      	uxth	r3, r3
 800ee66:	b2db      	uxtb	r3, r3
 800ee68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee6c:	b2da      	uxtb	r2, r3
 800ee6e:	69fb      	ldr	r3, [r7, #28]
 800ee70:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800ee72:	69fb      	ldr	r3, [r7, #28]
 800ee74:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ee78:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	891b      	ldrh	r3, [r3, #8]
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f7f6 fa9c 	bl	80053bc <lwip_htons>
 800ee84:	4603      	mov	r3, r0
 800ee86:	461a      	mov	r2, r3
 800ee88:	69fb      	ldr	r3, [r7, #28]
 800ee8a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ee8c:	69fb      	ldr	r3, [r7, #28]
 800ee8e:	2200      	movs	r2, #0
 800ee90:	719a      	strb	r2, [r3, #6]
 800ee92:	2200      	movs	r2, #0
 800ee94:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ee96:	4b2a      	ldr	r3, [pc, #168]	; (800ef40 <ip4_output_if_src+0x154>)
 800ee98:	881b      	ldrh	r3, [r3, #0]
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f7f6 fa8e 	bl	80053bc <lwip_htons>
 800eea0:	4603      	mov	r3, r0
 800eea2:	461a      	mov	r2, r3
 800eea4:	69fb      	ldr	r3, [r7, #28]
 800eea6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800eea8:	4b25      	ldr	r3, [pc, #148]	; (800ef40 <ip4_output_if_src+0x154>)
 800eeaa:	881b      	ldrh	r3, [r3, #0]
 800eeac:	3301      	adds	r3, #1
 800eeae:	b29a      	uxth	r2, r3
 800eeb0:	4b23      	ldr	r3, [pc, #140]	; (800ef40 <ip4_output_if_src+0x154>)
 800eeb2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d104      	bne.n	800eec4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800eeba:	4b22      	ldr	r3, [pc, #136]	; (800ef44 <ip4_output_if_src+0x158>)
 800eebc:	681a      	ldr	r2, [r3, #0]
 800eebe:	69fb      	ldr	r3, [r7, #28]
 800eec0:	60da      	str	r2, [r3, #12]
 800eec2:	e003      	b.n	800eecc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	681a      	ldr	r2, [r3, #0]
 800eec8:	69fb      	ldr	r3, [r7, #28]
 800eeca:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800eecc:	69fb      	ldr	r3, [r7, #28]
 800eece:	2200      	movs	r2, #0
 800eed0:	729a      	strb	r2, [r3, #10]
 800eed2:	2200      	movs	r2, #0
 800eed4:	72da      	strb	r2, [r3, #11]
 800eed6:	e00f      	b.n	800eef8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	895b      	ldrh	r3, [r3, #10]
 800eedc:	2b13      	cmp	r3, #19
 800eede:	d802      	bhi.n	800eee6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800eee0:	f06f 0301 	mvn.w	r3, #1
 800eee4:	e020      	b.n	800ef28 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	685b      	ldr	r3, [r3, #4]
 800eeea:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800eeec:	69fb      	ldr	r3, [r7, #28]
 800eeee:	691b      	ldr	r3, [r3, #16]
 800eef0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800eef2:	f107 0314 	add.w	r3, r7, #20
 800eef6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800eef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eefa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d00c      	beq.n	800ef1a <ip4_output_if_src+0x12e>
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	891a      	ldrh	r2, [r3, #8]
 800ef04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ef08:	429a      	cmp	r2, r3
 800ef0a:	d906      	bls.n	800ef1a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800ef0c:	687a      	ldr	r2, [r7, #4]
 800ef0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ef10:	68f8      	ldr	r0, [r7, #12]
 800ef12:	f000 fd4d 	bl	800f9b0 <ip4_frag>
 800ef16:	4603      	mov	r3, r0
 800ef18:	e006      	b.n	800ef28 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800ef1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef1c:	695b      	ldr	r3, [r3, #20]
 800ef1e:	687a      	ldr	r2, [r7, #4]
 800ef20:	68f9      	ldr	r1, [r7, #12]
 800ef22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef24:	4798      	blx	r3
 800ef26:	4603      	mov	r3, r0
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	3720      	adds	r7, #32
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}
 800ef30:	08013ed0 	.word	0x08013ed0
 800ef34:	08013f04 	.word	0x08013f04
 800ef38:	08013f10 	.word	0x08013f10
 800ef3c:	08013f38 	.word	0x08013f38
 800ef40:	2000068a 	.word	0x2000068a
 800ef44:	0802122c 	.word	0x0802122c

0800ef48 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800ef48:	b480      	push	{r7}
 800ef4a:	b085      	sub	sp, #20
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
 800ef50:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef5c:	d002      	beq.n	800ef64 <ip4_addr_isbroadcast_u32+0x1c>
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d101      	bne.n	800ef68 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800ef64:	2301      	movs	r3, #1
 800ef66:	e02a      	b.n	800efbe <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ef6e:	f003 0302 	and.w	r3, r3, #2
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d101      	bne.n	800ef7a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800ef76:	2300      	movs	r3, #0
 800ef78:	e021      	b.n	800efbe <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	3304      	adds	r3, #4
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	687a      	ldr	r2, [r7, #4]
 800ef82:	429a      	cmp	r2, r3
 800ef84:	d101      	bne.n	800ef8a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800ef86:	2300      	movs	r3, #0
 800ef88:	e019      	b.n	800efbe <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800ef8a:	68fa      	ldr	r2, [r7, #12]
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	3304      	adds	r3, #4
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	405a      	eors	r2, r3
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	3308      	adds	r3, #8
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	4013      	ands	r3, r2
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d10d      	bne.n	800efbc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	3308      	adds	r3, #8
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	43da      	mvns	r2, r3
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	3308      	adds	r3, #8
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800efb4:	429a      	cmp	r2, r3
 800efb6:	d101      	bne.n	800efbc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800efb8:	2301      	movs	r3, #1
 800efba:	e000      	b.n	800efbe <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800efbc:	2300      	movs	r3, #0
  }
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	3714      	adds	r7, #20
 800efc2:	46bd      	mov	sp, r7
 800efc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc8:	4770      	bx	lr
	...

0800efcc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b084      	sub	sp, #16
 800efd0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800efd2:	2300      	movs	r3, #0
 800efd4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800efd6:	4b12      	ldr	r3, [pc, #72]	; (800f020 <ip_reass_tmr+0x54>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800efdc:	e018      	b.n	800f010 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	7fdb      	ldrb	r3, [r3, #31]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d00b      	beq.n	800effe <ip_reass_tmr+0x32>
      r->timer--;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	7fdb      	ldrb	r3, [r3, #31]
 800efea:	3b01      	subs	r3, #1
 800efec:	b2da      	uxtb	r2, r3
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	60fb      	str	r3, [r7, #12]
 800effc:	e008      	b.n	800f010 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800f008:	68b9      	ldr	r1, [r7, #8]
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f000 f80a 	bl	800f024 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d1e3      	bne.n	800efde <ip_reass_tmr+0x12>
    }
  }
}
 800f016:	bf00      	nop
 800f018:	bf00      	nop
 800f01a:	3710      	adds	r7, #16
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}
 800f020:	2000068c 	.word	0x2000068c

0800f024 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b088      	sub	sp, #32
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
 800f02c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800f02e:	2300      	movs	r3, #0
 800f030:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f032:	683a      	ldr	r2, [r7, #0]
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	429a      	cmp	r2, r3
 800f038:	d105      	bne.n	800f046 <ip_reass_free_complete_datagram+0x22>
 800f03a:	4b45      	ldr	r3, [pc, #276]	; (800f150 <ip_reass_free_complete_datagram+0x12c>)
 800f03c:	22ab      	movs	r2, #171	; 0xab
 800f03e:	4945      	ldr	r1, [pc, #276]	; (800f154 <ip_reass_free_complete_datagram+0x130>)
 800f040:	4845      	ldr	r0, [pc, #276]	; (800f158 <ip_reass_free_complete_datagram+0x134>)
 800f042:	f000 ff37 	bl	800feb4 <iprintf>
  if (prev != NULL) {
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d00a      	beq.n	800f062 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f04c:	683b      	ldr	r3, [r7, #0]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	687a      	ldr	r2, [r7, #4]
 800f052:	429a      	cmp	r2, r3
 800f054:	d005      	beq.n	800f062 <ip_reass_free_complete_datagram+0x3e>
 800f056:	4b3e      	ldr	r3, [pc, #248]	; (800f150 <ip_reass_free_complete_datagram+0x12c>)
 800f058:	22ad      	movs	r2, #173	; 0xad
 800f05a:	4940      	ldr	r1, [pc, #256]	; (800f15c <ip_reass_free_complete_datagram+0x138>)
 800f05c:	483e      	ldr	r0, [pc, #248]	; (800f158 <ip_reass_free_complete_datagram+0x134>)
 800f05e:	f000 ff29 	bl	800feb4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	685b      	ldr	r3, [r3, #4]
 800f066:	685b      	ldr	r3, [r3, #4]
 800f068:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	889b      	ldrh	r3, [r3, #4]
 800f06e:	b29b      	uxth	r3, r3
 800f070:	2b00      	cmp	r3, #0
 800f072:	d12a      	bne.n	800f0ca <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	685b      	ldr	r3, [r3, #4]
 800f078:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800f07a:	697b      	ldr	r3, [r7, #20]
 800f07c:	681a      	ldr	r2, [r3, #0]
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f082:	69bb      	ldr	r3, [r7, #24]
 800f084:	6858      	ldr	r0, [r3, #4]
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	3308      	adds	r3, #8
 800f08a:	2214      	movs	r2, #20
 800f08c:	4619      	mov	r1, r3
 800f08e:	f000 fee1 	bl	800fe54 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f092:	2101      	movs	r1, #1
 800f094:	69b8      	ldr	r0, [r7, #24]
 800f096:	f7ff fc47 	bl	800e928 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f09a:	69b8      	ldr	r0, [r7, #24]
 800f09c:	f7f7 fd34 	bl	8006b08 <pbuf_clen>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f0a4:	8bfa      	ldrh	r2, [r7, #30]
 800f0a6:	8a7b      	ldrh	r3, [r7, #18]
 800f0a8:	4413      	add	r3, r2
 800f0aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f0ae:	db05      	blt.n	800f0bc <ip_reass_free_complete_datagram+0x98>
 800f0b0:	4b27      	ldr	r3, [pc, #156]	; (800f150 <ip_reass_free_complete_datagram+0x12c>)
 800f0b2:	22bc      	movs	r2, #188	; 0xbc
 800f0b4:	492a      	ldr	r1, [pc, #168]	; (800f160 <ip_reass_free_complete_datagram+0x13c>)
 800f0b6:	4828      	ldr	r0, [pc, #160]	; (800f158 <ip_reass_free_complete_datagram+0x134>)
 800f0b8:	f000 fefc 	bl	800feb4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f0bc:	8bfa      	ldrh	r2, [r7, #30]
 800f0be:	8a7b      	ldrh	r3, [r7, #18]
 800f0c0:	4413      	add	r3, r2
 800f0c2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800f0c4:	69b8      	ldr	r0, [r7, #24]
 800f0c6:	f7f7 fc97 	bl	80069f8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	685b      	ldr	r3, [r3, #4]
 800f0ce:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800f0d0:	e01f      	b.n	800f112 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800f0d2:	69bb      	ldr	r3, [r7, #24]
 800f0d4:	685b      	ldr	r3, [r3, #4]
 800f0d6:	617b      	str	r3, [r7, #20]
    pcur = p;
 800f0d8:	69bb      	ldr	r3, [r7, #24]
 800f0da:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800f0dc:	697b      	ldr	r3, [r7, #20]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800f0e2:	68f8      	ldr	r0, [r7, #12]
 800f0e4:	f7f7 fd10 	bl	8006b08 <pbuf_clen>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f0ec:	8bfa      	ldrh	r2, [r7, #30]
 800f0ee:	8a7b      	ldrh	r3, [r7, #18]
 800f0f0:	4413      	add	r3, r2
 800f0f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f0f6:	db05      	blt.n	800f104 <ip_reass_free_complete_datagram+0xe0>
 800f0f8:	4b15      	ldr	r3, [pc, #84]	; (800f150 <ip_reass_free_complete_datagram+0x12c>)
 800f0fa:	22cc      	movs	r2, #204	; 0xcc
 800f0fc:	4918      	ldr	r1, [pc, #96]	; (800f160 <ip_reass_free_complete_datagram+0x13c>)
 800f0fe:	4816      	ldr	r0, [pc, #88]	; (800f158 <ip_reass_free_complete_datagram+0x134>)
 800f100:	f000 fed8 	bl	800feb4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f104:	8bfa      	ldrh	r2, [r7, #30]
 800f106:	8a7b      	ldrh	r3, [r7, #18]
 800f108:	4413      	add	r3, r2
 800f10a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800f10c:	68f8      	ldr	r0, [r7, #12]
 800f10e:	f7f7 fc73 	bl	80069f8 <pbuf_free>
  while (p != NULL) {
 800f112:	69bb      	ldr	r3, [r7, #24]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d1dc      	bne.n	800f0d2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800f118:	6839      	ldr	r1, [r7, #0]
 800f11a:	6878      	ldr	r0, [r7, #4]
 800f11c:	f000 f8c2 	bl	800f2a4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f120:	4b10      	ldr	r3, [pc, #64]	; (800f164 <ip_reass_free_complete_datagram+0x140>)
 800f122:	881b      	ldrh	r3, [r3, #0]
 800f124:	8bfa      	ldrh	r2, [r7, #30]
 800f126:	429a      	cmp	r2, r3
 800f128:	d905      	bls.n	800f136 <ip_reass_free_complete_datagram+0x112>
 800f12a:	4b09      	ldr	r3, [pc, #36]	; (800f150 <ip_reass_free_complete_datagram+0x12c>)
 800f12c:	22d2      	movs	r2, #210	; 0xd2
 800f12e:	490e      	ldr	r1, [pc, #56]	; (800f168 <ip_reass_free_complete_datagram+0x144>)
 800f130:	4809      	ldr	r0, [pc, #36]	; (800f158 <ip_reass_free_complete_datagram+0x134>)
 800f132:	f000 febf 	bl	800feb4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f136:	4b0b      	ldr	r3, [pc, #44]	; (800f164 <ip_reass_free_complete_datagram+0x140>)
 800f138:	881a      	ldrh	r2, [r3, #0]
 800f13a:	8bfb      	ldrh	r3, [r7, #30]
 800f13c:	1ad3      	subs	r3, r2, r3
 800f13e:	b29a      	uxth	r2, r3
 800f140:	4b08      	ldr	r3, [pc, #32]	; (800f164 <ip_reass_free_complete_datagram+0x140>)
 800f142:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f144:	8bfb      	ldrh	r3, [r7, #30]
}
 800f146:	4618      	mov	r0, r3
 800f148:	3720      	adds	r7, #32
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bd80      	pop	{r7, pc}
 800f14e:	bf00      	nop
 800f150:	08013f68 	.word	0x08013f68
 800f154:	08013fa4 	.word	0x08013fa4
 800f158:	08013fb0 	.word	0x08013fb0
 800f15c:	08013fd8 	.word	0x08013fd8
 800f160:	08013fec 	.word	0x08013fec
 800f164:	20000690 	.word	0x20000690
 800f168:	0801400c 	.word	0x0801400c

0800f16c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b08a      	sub	sp, #40	; 0x28
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
 800f174:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800f176:	2300      	movs	r3, #0
 800f178:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f17a:	2300      	movs	r3, #0
 800f17c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f17e:	2300      	movs	r3, #0
 800f180:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f182:	2300      	movs	r3, #0
 800f184:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f186:	2300      	movs	r3, #0
 800f188:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f18a:	4b28      	ldr	r3, [pc, #160]	; (800f22c <ip_reass_remove_oldest_datagram+0xc0>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f190:	e030      	b.n	800f1f4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f194:	695a      	ldr	r2, [r3, #20]
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	68db      	ldr	r3, [r3, #12]
 800f19a:	429a      	cmp	r2, r3
 800f19c:	d10c      	bne.n	800f1b8 <ip_reass_remove_oldest_datagram+0x4c>
 800f19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1a0:	699a      	ldr	r2, [r3, #24]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	691b      	ldr	r3, [r3, #16]
 800f1a6:	429a      	cmp	r2, r3
 800f1a8:	d106      	bne.n	800f1b8 <ip_reass_remove_oldest_datagram+0x4c>
 800f1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ac:	899a      	ldrh	r2, [r3, #12]
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	889b      	ldrh	r3, [r3, #4]
 800f1b2:	b29b      	uxth	r3, r3
 800f1b4:	429a      	cmp	r2, r3
 800f1b6:	d014      	beq.n	800f1e2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f1b8:	693b      	ldr	r3, [r7, #16]
 800f1ba:	3301      	adds	r3, #1
 800f1bc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f1be:	6a3b      	ldr	r3, [r7, #32]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d104      	bne.n	800f1ce <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1c6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f1c8:	69fb      	ldr	r3, [r7, #28]
 800f1ca:	61bb      	str	r3, [r7, #24]
 800f1cc:	e009      	b.n	800f1e2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d0:	7fda      	ldrb	r2, [r3, #31]
 800f1d2:	6a3b      	ldr	r3, [r7, #32]
 800f1d4:	7fdb      	ldrb	r3, [r3, #31]
 800f1d6:	429a      	cmp	r2, r3
 800f1d8:	d803      	bhi.n	800f1e2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1dc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f1de:	69fb      	ldr	r3, [r7, #28]
 800f1e0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d001      	beq.n	800f1ee <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ec:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d1cb      	bne.n	800f192 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f1fa:	6a3b      	ldr	r3, [r7, #32]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d008      	beq.n	800f212 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f200:	69b9      	ldr	r1, [r7, #24]
 800f202:	6a38      	ldr	r0, [r7, #32]
 800f204:	f7ff ff0e 	bl	800f024 <ip_reass_free_complete_datagram>
 800f208:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f20a:	697a      	ldr	r2, [r7, #20]
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	4413      	add	r3, r2
 800f210:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f212:	697a      	ldr	r2, [r7, #20]
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	429a      	cmp	r2, r3
 800f218:	da02      	bge.n	800f220 <ip_reass_remove_oldest_datagram+0xb4>
 800f21a:	693b      	ldr	r3, [r7, #16]
 800f21c:	2b01      	cmp	r3, #1
 800f21e:	dcac      	bgt.n	800f17a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800f220:	697b      	ldr	r3, [r7, #20]
}
 800f222:	4618      	mov	r0, r3
 800f224:	3728      	adds	r7, #40	; 0x28
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}
 800f22a:	bf00      	nop
 800f22c:	2000068c 	.word	0x2000068c

0800f230 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b084      	sub	sp, #16
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
 800f238:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f23a:	2004      	movs	r0, #4
 800f23c:	f7f6 fd7e 	bl	8005d3c <memp_malloc>
 800f240:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d110      	bne.n	800f26a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f248:	6839      	ldr	r1, [r7, #0]
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f7ff ff8e 	bl	800f16c <ip_reass_remove_oldest_datagram>
 800f250:	4602      	mov	r2, r0
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	4293      	cmp	r3, r2
 800f256:	dc03      	bgt.n	800f260 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f258:	2004      	movs	r0, #4
 800f25a:	f7f6 fd6f 	bl	8005d3c <memp_malloc>
 800f25e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d101      	bne.n	800f26a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800f266:	2300      	movs	r3, #0
 800f268:	e016      	b.n	800f298 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f26a:	2220      	movs	r2, #32
 800f26c:	2100      	movs	r1, #0
 800f26e:	68f8      	ldr	r0, [r7, #12]
 800f270:	f000 fe18 	bl	800fea4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	220f      	movs	r2, #15
 800f278:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800f27a:	4b09      	ldr	r3, [pc, #36]	; (800f2a0 <ip_reass_enqueue_new_datagram+0x70>)
 800f27c:	681a      	ldr	r2, [r3, #0]
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800f282:	4a07      	ldr	r2, [pc, #28]	; (800f2a0 <ip_reass_enqueue_new_datagram+0x70>)
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	3308      	adds	r3, #8
 800f28c:	2214      	movs	r2, #20
 800f28e:	6879      	ldr	r1, [r7, #4]
 800f290:	4618      	mov	r0, r3
 800f292:	f000 fddf 	bl	800fe54 <memcpy>
  return ipr;
 800f296:	68fb      	ldr	r3, [r7, #12]
}
 800f298:	4618      	mov	r0, r3
 800f29a:	3710      	adds	r7, #16
 800f29c:	46bd      	mov	sp, r7
 800f29e:	bd80      	pop	{r7, pc}
 800f2a0:	2000068c 	.word	0x2000068c

0800f2a4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b082      	sub	sp, #8
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
 800f2ac:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f2ae:	4b10      	ldr	r3, [pc, #64]	; (800f2f0 <ip_reass_dequeue_datagram+0x4c>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	687a      	ldr	r2, [r7, #4]
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	d104      	bne.n	800f2c2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	4a0c      	ldr	r2, [pc, #48]	; (800f2f0 <ip_reass_dequeue_datagram+0x4c>)
 800f2be:	6013      	str	r3, [r2, #0]
 800f2c0:	e00d      	b.n	800f2de <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d106      	bne.n	800f2d6 <ip_reass_dequeue_datagram+0x32>
 800f2c8:	4b0a      	ldr	r3, [pc, #40]	; (800f2f4 <ip_reass_dequeue_datagram+0x50>)
 800f2ca:	f240 1245 	movw	r2, #325	; 0x145
 800f2ce:	490a      	ldr	r1, [pc, #40]	; (800f2f8 <ip_reass_dequeue_datagram+0x54>)
 800f2d0:	480a      	ldr	r0, [pc, #40]	; (800f2fc <ip_reass_dequeue_datagram+0x58>)
 800f2d2:	f000 fdef 	bl	800feb4 <iprintf>
    prev->next = ipr->next;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681a      	ldr	r2, [r3, #0]
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f2de:	6879      	ldr	r1, [r7, #4]
 800f2e0:	2004      	movs	r0, #4
 800f2e2:	f7f6 fd77 	bl	8005dd4 <memp_free>
}
 800f2e6:	bf00      	nop
 800f2e8:	3708      	adds	r7, #8
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bd80      	pop	{r7, pc}
 800f2ee:	bf00      	nop
 800f2f0:	2000068c 	.word	0x2000068c
 800f2f4:	08013f68 	.word	0x08013f68
 800f2f8:	08014030 	.word	0x08014030
 800f2fc:	08013fb0 	.word	0x08013fb0

0800f300 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b08c      	sub	sp, #48	; 0x30
 800f304:	af00      	add	r7, sp, #0
 800f306:	60f8      	str	r0, [r7, #12]
 800f308:	60b9      	str	r1, [r7, #8]
 800f30a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800f30c:	2300      	movs	r3, #0
 800f30e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f310:	2301      	movs	r3, #1
 800f312:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	685b      	ldr	r3, [r3, #4]
 800f318:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f31a:	69fb      	ldr	r3, [r7, #28]
 800f31c:	885b      	ldrh	r3, [r3, #2]
 800f31e:	b29b      	uxth	r3, r3
 800f320:	4618      	mov	r0, r3
 800f322:	f7f6 f84b 	bl	80053bc <lwip_htons>
 800f326:	4603      	mov	r3, r0
 800f328:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800f32a:	69fb      	ldr	r3, [r7, #28]
 800f32c:	781b      	ldrb	r3, [r3, #0]
 800f32e:	f003 030f 	and.w	r3, r3, #15
 800f332:	b2db      	uxtb	r3, r3
 800f334:	009b      	lsls	r3, r3, #2
 800f336:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800f338:	7e7b      	ldrb	r3, [r7, #25]
 800f33a:	b29b      	uxth	r3, r3
 800f33c:	8b7a      	ldrh	r2, [r7, #26]
 800f33e:	429a      	cmp	r2, r3
 800f340:	d202      	bcs.n	800f348 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f346:	e135      	b.n	800f5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800f348:	7e7b      	ldrb	r3, [r7, #25]
 800f34a:	b29b      	uxth	r3, r3
 800f34c:	8b7a      	ldrh	r2, [r7, #26]
 800f34e:	1ad3      	subs	r3, r2, r3
 800f350:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f352:	69fb      	ldr	r3, [r7, #28]
 800f354:	88db      	ldrh	r3, [r3, #6]
 800f356:	b29b      	uxth	r3, r3
 800f358:	4618      	mov	r0, r3
 800f35a:	f7f6 f82f 	bl	80053bc <lwip_htons>
 800f35e:	4603      	mov	r3, r0
 800f360:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f364:	b29b      	uxth	r3, r3
 800f366:	00db      	lsls	r3, r3, #3
 800f368:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	685b      	ldr	r3, [r3, #4]
 800f36e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800f370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f372:	2200      	movs	r2, #0
 800f374:	701a      	strb	r2, [r3, #0]
 800f376:	2200      	movs	r2, #0
 800f378:	705a      	strb	r2, [r3, #1]
 800f37a:	2200      	movs	r2, #0
 800f37c:	709a      	strb	r2, [r3, #2]
 800f37e:	2200      	movs	r2, #0
 800f380:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f384:	8afa      	ldrh	r2, [r7, #22]
 800f386:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800f388:	8afa      	ldrh	r2, [r7, #22]
 800f38a:	8b7b      	ldrh	r3, [r7, #26]
 800f38c:	4413      	add	r3, r2
 800f38e:	b29a      	uxth	r2, r3
 800f390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f392:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800f394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f396:	88db      	ldrh	r3, [r3, #6]
 800f398:	b29b      	uxth	r3, r3
 800f39a:	8afa      	ldrh	r2, [r7, #22]
 800f39c:	429a      	cmp	r2, r3
 800f39e:	d902      	bls.n	800f3a6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f3a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f3a4:	e106      	b.n	800f5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	685b      	ldr	r3, [r3, #4]
 800f3aa:	627b      	str	r3, [r7, #36]	; 0x24
 800f3ac:	e068      	b.n	800f480 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3b0:	685b      	ldr	r3, [r3, #4]
 800f3b2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800f3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b6:	889b      	ldrh	r3, [r3, #4]
 800f3b8:	b29a      	uxth	r2, r3
 800f3ba:	693b      	ldr	r3, [r7, #16]
 800f3bc:	889b      	ldrh	r3, [r3, #4]
 800f3be:	b29b      	uxth	r3, r3
 800f3c0:	429a      	cmp	r2, r3
 800f3c2:	d235      	bcs.n	800f430 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3c8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d020      	beq.n	800f412 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3d2:	889b      	ldrh	r3, [r3, #4]
 800f3d4:	b29a      	uxth	r2, r3
 800f3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3d8:	88db      	ldrh	r3, [r3, #6]
 800f3da:	b29b      	uxth	r3, r3
 800f3dc:	429a      	cmp	r2, r3
 800f3de:	d307      	bcc.n	800f3f0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800f3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3e2:	88db      	ldrh	r3, [r3, #6]
 800f3e4:	b29a      	uxth	r2, r3
 800f3e6:	693b      	ldr	r3, [r7, #16]
 800f3e8:	889b      	ldrh	r3, [r3, #4]
 800f3ea:	b29b      	uxth	r3, r3
 800f3ec:	429a      	cmp	r2, r3
 800f3ee:	d902      	bls.n	800f3f6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f3f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f3f4:	e0de      	b.n	800f5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3f8:	68ba      	ldr	r2, [r7, #8]
 800f3fa:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3fe:	88db      	ldrh	r3, [r3, #6]
 800f400:	b29a      	uxth	r2, r3
 800f402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f404:	889b      	ldrh	r3, [r3, #4]
 800f406:	b29b      	uxth	r3, r3
 800f408:	429a      	cmp	r2, r3
 800f40a:	d03d      	beq.n	800f488 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f40c:	2300      	movs	r3, #0
 800f40e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f410:	e03a      	b.n	800f488 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800f412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f414:	88db      	ldrh	r3, [r3, #6]
 800f416:	b29a      	uxth	r2, r3
 800f418:	693b      	ldr	r3, [r7, #16]
 800f41a:	889b      	ldrh	r3, [r3, #4]
 800f41c:	b29b      	uxth	r3, r3
 800f41e:	429a      	cmp	r2, r3
 800f420:	d902      	bls.n	800f428 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f422:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f426:	e0c5      	b.n	800f5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	68ba      	ldr	r2, [r7, #8]
 800f42c:	605a      	str	r2, [r3, #4]
      break;
 800f42e:	e02b      	b.n	800f488 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800f430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f432:	889b      	ldrh	r3, [r3, #4]
 800f434:	b29a      	uxth	r2, r3
 800f436:	693b      	ldr	r3, [r7, #16]
 800f438:	889b      	ldrh	r3, [r3, #4]
 800f43a:	b29b      	uxth	r3, r3
 800f43c:	429a      	cmp	r2, r3
 800f43e:	d102      	bne.n	800f446 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f440:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f444:	e0b6      	b.n	800f5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f448:	889b      	ldrh	r3, [r3, #4]
 800f44a:	b29a      	uxth	r2, r3
 800f44c:	693b      	ldr	r3, [r7, #16]
 800f44e:	88db      	ldrh	r3, [r3, #6]
 800f450:	b29b      	uxth	r3, r3
 800f452:	429a      	cmp	r2, r3
 800f454:	d202      	bcs.n	800f45c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f456:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f45a:	e0ab      	b.n	800f5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d009      	beq.n	800f476 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800f462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f464:	88db      	ldrh	r3, [r3, #6]
 800f466:	b29a      	uxth	r2, r3
 800f468:	693b      	ldr	r3, [r7, #16]
 800f46a:	889b      	ldrh	r3, [r3, #4]
 800f46c:	b29b      	uxth	r3, r3
 800f46e:	429a      	cmp	r2, r3
 800f470:	d001      	beq.n	800f476 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f472:	2300      	movs	r3, #0
 800f474:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f476:	693b      	ldr	r3, [r7, #16]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800f47c:	693b      	ldr	r3, [r7, #16]
 800f47e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800f480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f482:	2b00      	cmp	r3, #0
 800f484:	d193      	bne.n	800f3ae <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800f486:	e000      	b.n	800f48a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800f488:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d12d      	bne.n	800f4ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800f490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f492:	2b00      	cmp	r3, #0
 800f494:	d01c      	beq.n	800f4d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f498:	88db      	ldrh	r3, [r3, #6]
 800f49a:	b29a      	uxth	r2, r3
 800f49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f49e:	889b      	ldrh	r3, [r3, #4]
 800f4a0:	b29b      	uxth	r3, r3
 800f4a2:	429a      	cmp	r2, r3
 800f4a4:	d906      	bls.n	800f4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800f4a6:	4b45      	ldr	r3, [pc, #276]	; (800f5bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f4a8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800f4ac:	4944      	ldr	r1, [pc, #272]	; (800f5c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f4ae:	4845      	ldr	r0, [pc, #276]	; (800f5c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f4b0:	f000 fd00 	bl	800feb4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4b6:	68ba      	ldr	r2, [r7, #8]
 800f4b8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4bc:	88db      	ldrh	r3, [r3, #6]
 800f4be:	b29a      	uxth	r2, r3
 800f4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4c2:	889b      	ldrh	r3, [r3, #4]
 800f4c4:	b29b      	uxth	r3, r3
 800f4c6:	429a      	cmp	r2, r3
 800f4c8:	d010      	beq.n	800f4ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	623b      	str	r3, [r7, #32]
 800f4ce:	e00d      	b.n	800f4ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	685b      	ldr	r3, [r3, #4]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d006      	beq.n	800f4e6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f4d8:	4b38      	ldr	r3, [pc, #224]	; (800f5bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f4da:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800f4de:	493a      	ldr	r1, [pc, #232]	; (800f5c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f4e0:	4838      	ldr	r0, [pc, #224]	; (800f5c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f4e2:	f000 fce7 	bl	800feb4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	68ba      	ldr	r2, [r7, #8]
 800f4ea:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d105      	bne.n	800f4fe <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	7f9b      	ldrb	r3, [r3, #30]
 800f4f6:	f003 0301 	and.w	r3, r3, #1
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d059      	beq.n	800f5b2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800f4fe:	6a3b      	ldr	r3, [r7, #32]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d04f      	beq.n	800f5a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	685b      	ldr	r3, [r3, #4]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d006      	beq.n	800f51a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	685b      	ldr	r3, [r3, #4]
 800f510:	685b      	ldr	r3, [r3, #4]
 800f512:	889b      	ldrh	r3, [r3, #4]
 800f514:	b29b      	uxth	r3, r3
 800f516:	2b00      	cmp	r3, #0
 800f518:	d002      	beq.n	800f520 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800f51a:	2300      	movs	r3, #0
 800f51c:	623b      	str	r3, [r7, #32]
 800f51e:	e041      	b.n	800f5a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f522:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800f524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f52a:	e012      	b.n	800f552 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800f52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f52e:	685b      	ldr	r3, [r3, #4]
 800f530:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800f532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f534:	88db      	ldrh	r3, [r3, #6]
 800f536:	b29a      	uxth	r2, r3
 800f538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f53a:	889b      	ldrh	r3, [r3, #4]
 800f53c:	b29b      	uxth	r3, r3
 800f53e:	429a      	cmp	r2, r3
 800f540:	d002      	beq.n	800f548 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800f542:	2300      	movs	r3, #0
 800f544:	623b      	str	r3, [r7, #32]
            break;
 800f546:	e007      	b.n	800f558 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800f548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f54a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800f54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f554:	2b00      	cmp	r3, #0
 800f556:	d1e9      	bne.n	800f52c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f558:	6a3b      	ldr	r3, [r7, #32]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d022      	beq.n	800f5a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	685b      	ldr	r3, [r3, #4]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d106      	bne.n	800f574 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800f566:	4b15      	ldr	r3, [pc, #84]	; (800f5bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f568:	f240 12df 	movw	r2, #479	; 0x1df
 800f56c:	4917      	ldr	r1, [pc, #92]	; (800f5cc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f56e:	4815      	ldr	r0, [pc, #84]	; (800f5c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f570:	f000 fca0 	bl	800feb4 <iprintf>
          LWIP_ASSERT("sanity check",
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	685b      	ldr	r3, [r3, #4]
 800f578:	685b      	ldr	r3, [r3, #4]
 800f57a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f57c:	429a      	cmp	r2, r3
 800f57e:	d106      	bne.n	800f58e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800f580:	4b0e      	ldr	r3, [pc, #56]	; (800f5bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f582:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f586:	4911      	ldr	r1, [pc, #68]	; (800f5cc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f588:	480e      	ldr	r0, [pc, #56]	; (800f5c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f58a:	f000 fc93 	bl	800feb4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d006      	beq.n	800f5a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800f596:	4b09      	ldr	r3, [pc, #36]	; (800f5bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f598:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800f59c:	490c      	ldr	r1, [pc, #48]	; (800f5d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f59e:	4809      	ldr	r0, [pc, #36]	; (800f5c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f5a0:	f000 fc88 	bl	800feb4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f5a4:	6a3b      	ldr	r3, [r7, #32]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	bf14      	ite	ne
 800f5aa:	2301      	movne	r3, #1
 800f5ac:	2300      	moveq	r3, #0
 800f5ae:	b2db      	uxtb	r3, r3
 800f5b0:	e000      	b.n	800f5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f5b2:	2300      	movs	r3, #0
}
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	3730      	adds	r7, #48	; 0x30
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd80      	pop	{r7, pc}
 800f5bc:	08013f68 	.word	0x08013f68
 800f5c0:	0801404c 	.word	0x0801404c
 800f5c4:	08013fb0 	.word	0x08013fb0
 800f5c8:	0801406c 	.word	0x0801406c
 800f5cc:	080140a4 	.word	0x080140a4
 800f5d0:	080140b4 	.word	0x080140b4

0800f5d4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b08e      	sub	sp, #56	; 0x38
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	685b      	ldr	r3, [r3, #4]
 800f5e0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5e4:	781b      	ldrb	r3, [r3, #0]
 800f5e6:	f003 030f 	and.w	r3, r3, #15
 800f5ea:	b2db      	uxtb	r3, r3
 800f5ec:	009b      	lsls	r3, r3, #2
 800f5ee:	b2db      	uxtb	r3, r3
 800f5f0:	2b14      	cmp	r3, #20
 800f5f2:	f040 8167 	bne.w	800f8c4 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800f5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5f8:	88db      	ldrh	r3, [r3, #6]
 800f5fa:	b29b      	uxth	r3, r3
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7f5 fedd 	bl	80053bc <lwip_htons>
 800f602:	4603      	mov	r3, r0
 800f604:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f608:	b29b      	uxth	r3, r3
 800f60a:	00db      	lsls	r3, r3, #3
 800f60c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f610:	885b      	ldrh	r3, [r3, #2]
 800f612:	b29b      	uxth	r3, r3
 800f614:	4618      	mov	r0, r3
 800f616:	f7f5 fed1 	bl	80053bc <lwip_htons>
 800f61a:	4603      	mov	r3, r0
 800f61c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800f61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f620:	781b      	ldrb	r3, [r3, #0]
 800f622:	f003 030f 	and.w	r3, r3, #15
 800f626:	b2db      	uxtb	r3, r3
 800f628:	009b      	lsls	r3, r3, #2
 800f62a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800f62e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f632:	b29b      	uxth	r3, r3
 800f634:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f636:	429a      	cmp	r2, r3
 800f638:	f0c0 8146 	bcc.w	800f8c8 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800f63c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f640:	b29b      	uxth	r3, r3
 800f642:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f644:	1ad3      	subs	r3, r2, r3
 800f646:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f648:	6878      	ldr	r0, [r7, #4]
 800f64a:	f7f7 fa5d 	bl	8006b08 <pbuf_clen>
 800f64e:	4603      	mov	r3, r0
 800f650:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f652:	4b9f      	ldr	r3, [pc, #636]	; (800f8d0 <ip4_reass+0x2fc>)
 800f654:	881b      	ldrh	r3, [r3, #0]
 800f656:	461a      	mov	r2, r3
 800f658:	8c3b      	ldrh	r3, [r7, #32]
 800f65a:	4413      	add	r3, r2
 800f65c:	2b0a      	cmp	r3, #10
 800f65e:	dd10      	ble.n	800f682 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f660:	8c3b      	ldrh	r3, [r7, #32]
 800f662:	4619      	mov	r1, r3
 800f664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f666:	f7ff fd81 	bl	800f16c <ip_reass_remove_oldest_datagram>
 800f66a:	4603      	mov	r3, r0
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	f000 812d 	beq.w	800f8cc <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f672:	4b97      	ldr	r3, [pc, #604]	; (800f8d0 <ip4_reass+0x2fc>)
 800f674:	881b      	ldrh	r3, [r3, #0]
 800f676:	461a      	mov	r2, r3
 800f678:	8c3b      	ldrh	r3, [r7, #32]
 800f67a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f67c:	2b0a      	cmp	r3, #10
 800f67e:	f300 8125 	bgt.w	800f8cc <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f682:	4b94      	ldr	r3, [pc, #592]	; (800f8d4 <ip4_reass+0x300>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	633b      	str	r3, [r7, #48]	; 0x30
 800f688:	e015      	b.n	800f6b6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f68c:	695a      	ldr	r2, [r3, #20]
 800f68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f690:	68db      	ldr	r3, [r3, #12]
 800f692:	429a      	cmp	r2, r3
 800f694:	d10c      	bne.n	800f6b0 <ip4_reass+0xdc>
 800f696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f698:	699a      	ldr	r2, [r3, #24]
 800f69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f69c:	691b      	ldr	r3, [r3, #16]
 800f69e:	429a      	cmp	r2, r3
 800f6a0:	d106      	bne.n	800f6b0 <ip4_reass+0xdc>
 800f6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6a4:	899a      	ldrh	r2, [r3, #12]
 800f6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6a8:	889b      	ldrh	r3, [r3, #4]
 800f6aa:	b29b      	uxth	r3, r3
 800f6ac:	429a      	cmp	r2, r3
 800f6ae:	d006      	beq.n	800f6be <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	633b      	str	r3, [r7, #48]	; 0x30
 800f6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d1e6      	bne.n	800f68a <ip4_reass+0xb6>
 800f6bc:	e000      	b.n	800f6c0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f6be:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d109      	bne.n	800f6da <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f6c6:	8c3b      	ldrh	r3, [r7, #32]
 800f6c8:	4619      	mov	r1, r3
 800f6ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6cc:	f7ff fdb0 	bl	800f230 <ip_reass_enqueue_new_datagram>
 800f6d0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d11c      	bne.n	800f712 <ip4_reass+0x13e>
      goto nullreturn;
 800f6d8:	e109      	b.n	800f8ee <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6dc:	88db      	ldrh	r3, [r3, #6]
 800f6de:	b29b      	uxth	r3, r3
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f7f5 fe6b 	bl	80053bc <lwip_htons>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d110      	bne.n	800f712 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6f2:	89db      	ldrh	r3, [r3, #14]
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f7f5 fe61 	bl	80053bc <lwip_htons>
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f700:	2b00      	cmp	r3, #0
 800f702:	d006      	beq.n	800f712 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f706:	3308      	adds	r3, #8
 800f708:	2214      	movs	r2, #20
 800f70a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f70c:	4618      	mov	r0, r3
 800f70e:	f000 fba1 	bl	800fe54 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f714:	88db      	ldrh	r3, [r3, #6]
 800f716:	b29b      	uxth	r3, r3
 800f718:	f003 0320 	and.w	r3, r3, #32
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	bf0c      	ite	eq
 800f720:	2301      	moveq	r3, #1
 800f722:	2300      	movne	r3, #0
 800f724:	b2db      	uxtb	r3, r3
 800f726:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f728:	69fb      	ldr	r3, [r7, #28]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d00e      	beq.n	800f74c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800f72e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f730:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f732:	4413      	add	r3, r2
 800f734:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f736:	8b7a      	ldrh	r2, [r7, #26]
 800f738:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f73a:	429a      	cmp	r2, r3
 800f73c:	f0c0 80a0 	bcc.w	800f880 <ip4_reass+0x2ac>
 800f740:	8b7b      	ldrh	r3, [r7, #26]
 800f742:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800f746:	4293      	cmp	r3, r2
 800f748:	f200 809a 	bhi.w	800f880 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f74c:	69fa      	ldr	r2, [r7, #28]
 800f74e:	6879      	ldr	r1, [r7, #4]
 800f750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f752:	f7ff fdd5 	bl	800f300 <ip_reass_chain_frag_into_datagram_and_validate>
 800f756:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f758:	697b      	ldr	r3, [r7, #20]
 800f75a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f75e:	f000 8091 	beq.w	800f884 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f762:	4b5b      	ldr	r3, [pc, #364]	; (800f8d0 <ip4_reass+0x2fc>)
 800f764:	881a      	ldrh	r2, [r3, #0]
 800f766:	8c3b      	ldrh	r3, [r7, #32]
 800f768:	4413      	add	r3, r2
 800f76a:	b29a      	uxth	r2, r3
 800f76c:	4b58      	ldr	r3, [pc, #352]	; (800f8d0 <ip4_reass+0x2fc>)
 800f76e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f770:	69fb      	ldr	r3, [r7, #28]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d00d      	beq.n	800f792 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800f776:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f778:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f77a:	4413      	add	r3, r2
 800f77c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f780:	8a7a      	ldrh	r2, [r7, #18]
 800f782:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f786:	7f9b      	ldrb	r3, [r3, #30]
 800f788:	f043 0301 	orr.w	r3, r3, #1
 800f78c:	b2da      	uxtb	r2, r3
 800f78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f790:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	2b01      	cmp	r3, #1
 800f796:	d171      	bne.n	800f87c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800f798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f79a:	8b9b      	ldrh	r3, [r3, #28]
 800f79c:	3314      	adds	r3, #20
 800f79e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800f7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7a2:	685b      	ldr	r3, [r3, #4]
 800f7a4:	685b      	ldr	r3, [r3, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800f7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ac:	685b      	ldr	r3, [r3, #4]
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7b4:	3308      	adds	r3, #8
 800f7b6:	2214      	movs	r2, #20
 800f7b8:	4619      	mov	r1, r3
 800f7ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7bc:	f000 fb4a 	bl	800fe54 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f7c0:	8a3b      	ldrh	r3, [r7, #16]
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	f7f5 fdfa 	bl	80053bc <lwip_htons>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	461a      	mov	r2, r3
 800f7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ce:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	719a      	strb	r2, [r3, #6]
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7dc:	2200      	movs	r2, #0
 800f7de:	729a      	strb	r2, [r3, #10]
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800f7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7e6:	685b      	ldr	r3, [r3, #4]
 800f7e8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800f7ea:	e00d      	b.n	800f808 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800f7ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7ee:	685b      	ldr	r3, [r3, #4]
 800f7f0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800f7f2:	2114      	movs	r1, #20
 800f7f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f7f6:	f7f7 f879 	bl	80068ec <pbuf_remove_header>
      pbuf_cat(p, r);
 800f7fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f7fc:	6878      	ldr	r0, [r7, #4]
 800f7fe:	f7f7 f9bd 	bl	8006b7c <pbuf_cat>
      r = iprh->next_pbuf;
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800f808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d1ee      	bne.n	800f7ec <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f80e:	4b31      	ldr	r3, [pc, #196]	; (800f8d4 <ip4_reass+0x300>)
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f814:	429a      	cmp	r2, r3
 800f816:	d102      	bne.n	800f81e <ip4_reass+0x24a>
      ipr_prev = NULL;
 800f818:	2300      	movs	r3, #0
 800f81a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f81c:	e010      	b.n	800f840 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f81e:	4b2d      	ldr	r3, [pc, #180]	; (800f8d4 <ip4_reass+0x300>)
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f824:	e007      	b.n	800f836 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800f826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f82c:	429a      	cmp	r2, r3
 800f82e:	d006      	beq.n	800f83e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d1f4      	bne.n	800f826 <ip4_reass+0x252>
 800f83c:	e000      	b.n	800f840 <ip4_reass+0x26c>
          break;
 800f83e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f840:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f842:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f844:	f7ff fd2e 	bl	800f2a4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800f848:	6878      	ldr	r0, [r7, #4]
 800f84a:	f7f7 f95d 	bl	8006b08 <pbuf_clen>
 800f84e:	4603      	mov	r3, r0
 800f850:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f852:	4b1f      	ldr	r3, [pc, #124]	; (800f8d0 <ip4_reass+0x2fc>)
 800f854:	881b      	ldrh	r3, [r3, #0]
 800f856:	8c3a      	ldrh	r2, [r7, #32]
 800f858:	429a      	cmp	r2, r3
 800f85a:	d906      	bls.n	800f86a <ip4_reass+0x296>
 800f85c:	4b1e      	ldr	r3, [pc, #120]	; (800f8d8 <ip4_reass+0x304>)
 800f85e:	f240 229b 	movw	r2, #667	; 0x29b
 800f862:	491e      	ldr	r1, [pc, #120]	; (800f8dc <ip4_reass+0x308>)
 800f864:	481e      	ldr	r0, [pc, #120]	; (800f8e0 <ip4_reass+0x30c>)
 800f866:	f000 fb25 	bl	800feb4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800f86a:	4b19      	ldr	r3, [pc, #100]	; (800f8d0 <ip4_reass+0x2fc>)
 800f86c:	881a      	ldrh	r2, [r3, #0]
 800f86e:	8c3b      	ldrh	r3, [r7, #32]
 800f870:	1ad3      	subs	r3, r2, r3
 800f872:	b29a      	uxth	r2, r3
 800f874:	4b16      	ldr	r3, [pc, #88]	; (800f8d0 <ip4_reass+0x2fc>)
 800f876:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	e03c      	b.n	800f8f6 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800f87c:	2300      	movs	r3, #0
 800f87e:	e03a      	b.n	800f8f6 <ip4_reass+0x322>
      goto nullreturn_ipr;
 800f880:	bf00      	nop
 800f882:	e000      	b.n	800f886 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800f884:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800f886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d106      	bne.n	800f89a <ip4_reass+0x2c6>
 800f88c:	4b12      	ldr	r3, [pc, #72]	; (800f8d8 <ip4_reass+0x304>)
 800f88e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800f892:	4914      	ldr	r1, [pc, #80]	; (800f8e4 <ip4_reass+0x310>)
 800f894:	4812      	ldr	r0, [pc, #72]	; (800f8e0 <ip4_reass+0x30c>)
 800f896:	f000 fb0d 	bl	800feb4 <iprintf>
  if (ipr->p == NULL) {
 800f89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f89c:	685b      	ldr	r3, [r3, #4]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d124      	bne.n	800f8ec <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800f8a2:	4b0c      	ldr	r3, [pc, #48]	; (800f8d4 <ip4_reass+0x300>)
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8a8:	429a      	cmp	r2, r3
 800f8aa:	d006      	beq.n	800f8ba <ip4_reass+0x2e6>
 800f8ac:	4b0a      	ldr	r3, [pc, #40]	; (800f8d8 <ip4_reass+0x304>)
 800f8ae:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f8b2:	490d      	ldr	r1, [pc, #52]	; (800f8e8 <ip4_reass+0x314>)
 800f8b4:	480a      	ldr	r0, [pc, #40]	; (800f8e0 <ip4_reass+0x30c>)
 800f8b6:	f000 fafd 	bl	800feb4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800f8ba:	2100      	movs	r1, #0
 800f8bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f8be:	f7ff fcf1 	bl	800f2a4 <ip_reass_dequeue_datagram>
 800f8c2:	e014      	b.n	800f8ee <ip4_reass+0x31a>
    goto nullreturn;
 800f8c4:	bf00      	nop
 800f8c6:	e012      	b.n	800f8ee <ip4_reass+0x31a>
    goto nullreturn;
 800f8c8:	bf00      	nop
 800f8ca:	e010      	b.n	800f8ee <ip4_reass+0x31a>
      goto nullreturn;
 800f8cc:	bf00      	nop
 800f8ce:	e00e      	b.n	800f8ee <ip4_reass+0x31a>
 800f8d0:	20000690 	.word	0x20000690
 800f8d4:	2000068c 	.word	0x2000068c
 800f8d8:	08013f68 	.word	0x08013f68
 800f8dc:	080140d8 	.word	0x080140d8
 800f8e0:	08013fb0 	.word	0x08013fb0
 800f8e4:	080140f4 	.word	0x080140f4
 800f8e8:	08014100 	.word	0x08014100
  }

nullreturn:
 800f8ec:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800f8ee:	6878      	ldr	r0, [r7, #4]
 800f8f0:	f7f7 f882 	bl	80069f8 <pbuf_free>
  return NULL;
 800f8f4:	2300      	movs	r3, #0
}
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	3738      	adds	r7, #56	; 0x38
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	bd80      	pop	{r7, pc}
 800f8fe:	bf00      	nop

0800f900 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800f900:	b580      	push	{r7, lr}
 800f902:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800f904:	2005      	movs	r0, #5
 800f906:	f7f6 fa19 	bl	8005d3c <memp_malloc>
 800f90a:	4603      	mov	r3, r0
}
 800f90c:	4618      	mov	r0, r3
 800f90e:	bd80      	pop	{r7, pc}

0800f910 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b082      	sub	sp, #8
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d106      	bne.n	800f92c <ip_frag_free_pbuf_custom_ref+0x1c>
 800f91e:	4b07      	ldr	r3, [pc, #28]	; (800f93c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800f920:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800f924:	4906      	ldr	r1, [pc, #24]	; (800f940 <ip_frag_free_pbuf_custom_ref+0x30>)
 800f926:	4807      	ldr	r0, [pc, #28]	; (800f944 <ip_frag_free_pbuf_custom_ref+0x34>)
 800f928:	f000 fac4 	bl	800feb4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800f92c:	6879      	ldr	r1, [r7, #4]
 800f92e:	2005      	movs	r0, #5
 800f930:	f7f6 fa50 	bl	8005dd4 <memp_free>
}
 800f934:	bf00      	nop
 800f936:	3708      	adds	r7, #8
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}
 800f93c:	08013f68 	.word	0x08013f68
 800f940:	08014120 	.word	0x08014120
 800f944:	08013fb0 	.word	0x08013fb0

0800f948 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b084      	sub	sp, #16
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d106      	bne.n	800f968 <ipfrag_free_pbuf_custom+0x20>
 800f95a:	4b11      	ldr	r3, [pc, #68]	; (800f9a0 <ipfrag_free_pbuf_custom+0x58>)
 800f95c:	f240 22ce 	movw	r2, #718	; 0x2ce
 800f960:	4910      	ldr	r1, [pc, #64]	; (800f9a4 <ipfrag_free_pbuf_custom+0x5c>)
 800f962:	4811      	ldr	r0, [pc, #68]	; (800f9a8 <ipfrag_free_pbuf_custom+0x60>)
 800f964:	f000 faa6 	bl	800feb4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800f968:	68fa      	ldr	r2, [r7, #12]
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	429a      	cmp	r2, r3
 800f96e:	d006      	beq.n	800f97e <ipfrag_free_pbuf_custom+0x36>
 800f970:	4b0b      	ldr	r3, [pc, #44]	; (800f9a0 <ipfrag_free_pbuf_custom+0x58>)
 800f972:	f240 22cf 	movw	r2, #719	; 0x2cf
 800f976:	490d      	ldr	r1, [pc, #52]	; (800f9ac <ipfrag_free_pbuf_custom+0x64>)
 800f978:	480b      	ldr	r0, [pc, #44]	; (800f9a8 <ipfrag_free_pbuf_custom+0x60>)
 800f97a:	f000 fa9b 	bl	800feb4 <iprintf>
  if (pcr->original != NULL) {
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	695b      	ldr	r3, [r3, #20]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d004      	beq.n	800f990 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	695b      	ldr	r3, [r3, #20]
 800f98a:	4618      	mov	r0, r3
 800f98c:	f7f7 f834 	bl	80069f8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f990:	68f8      	ldr	r0, [r7, #12]
 800f992:	f7ff ffbd 	bl	800f910 <ip_frag_free_pbuf_custom_ref>
}
 800f996:	bf00      	nop
 800f998:	3710      	adds	r7, #16
 800f99a:	46bd      	mov	sp, r7
 800f99c:	bd80      	pop	{r7, pc}
 800f99e:	bf00      	nop
 800f9a0:	08013f68 	.word	0x08013f68
 800f9a4:	0801412c 	.word	0x0801412c
 800f9a8:	08013fb0 	.word	0x08013fb0
 800f9ac:	08014138 	.word	0x08014138

0800f9b0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b094      	sub	sp, #80	; 0x50
 800f9b4:	af02      	add	r7, sp, #8
 800f9b6:	60f8      	str	r0, [r7, #12]
 800f9b8:	60b9      	str	r1, [r7, #8]
 800f9ba:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800f9bc:	2300      	movs	r3, #0
 800f9be:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f9c2:	68bb      	ldr	r3, [r7, #8]
 800f9c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f9c6:	3b14      	subs	r3, #20
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	da00      	bge.n	800f9ce <ip4_frag+0x1e>
 800f9cc:	3307      	adds	r3, #7
 800f9ce:	10db      	asrs	r3, r3, #3
 800f9d0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800f9d2:	2314      	movs	r3, #20
 800f9d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	685b      	ldr	r3, [r3, #4]
 800f9da:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800f9dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9de:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800f9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9e2:	781b      	ldrb	r3, [r3, #0]
 800f9e4:	f003 030f 	and.w	r3, r3, #15
 800f9e8:	b2db      	uxtb	r3, r3
 800f9ea:	009b      	lsls	r3, r3, #2
 800f9ec:	b2db      	uxtb	r3, r3
 800f9ee:	2b14      	cmp	r3, #20
 800f9f0:	d002      	beq.n	800f9f8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800f9f2:	f06f 0305 	mvn.w	r3, #5
 800f9f6:	e110      	b.n	800fc1a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	895b      	ldrh	r3, [r3, #10]
 800f9fc:	2b13      	cmp	r3, #19
 800f9fe:	d809      	bhi.n	800fa14 <ip4_frag+0x64>
 800fa00:	4b88      	ldr	r3, [pc, #544]	; (800fc24 <ip4_frag+0x274>)
 800fa02:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800fa06:	4988      	ldr	r1, [pc, #544]	; (800fc28 <ip4_frag+0x278>)
 800fa08:	4888      	ldr	r0, [pc, #544]	; (800fc2c <ip4_frag+0x27c>)
 800fa0a:	f000 fa53 	bl	800feb4 <iprintf>
 800fa0e:	f06f 0305 	mvn.w	r3, #5
 800fa12:	e102      	b.n	800fc1a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800fa14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa16:	88db      	ldrh	r3, [r3, #6]
 800fa18:	b29b      	uxth	r3, r3
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	f7f5 fcce 	bl	80053bc <lwip_htons>
 800fa20:	4603      	mov	r3, r0
 800fa22:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800fa24:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fa26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fa2a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800fa2e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fa30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fa34:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	891b      	ldrh	r3, [r3, #8]
 800fa3a:	3b14      	subs	r3, #20
 800fa3c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800fa40:	e0e1      	b.n	800fc06 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800fa42:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fa44:	00db      	lsls	r3, r3, #3
 800fa46:	b29b      	uxth	r3, r3
 800fa48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fa4c:	4293      	cmp	r3, r2
 800fa4e:	bf28      	it	cs
 800fa50:	4613      	movcs	r3, r2
 800fa52:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800fa54:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fa58:	2114      	movs	r1, #20
 800fa5a:	200e      	movs	r0, #14
 800fa5c:	f7f6 fce8 	bl	8006430 <pbuf_alloc>
 800fa60:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800fa62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	f000 80d5 	beq.w	800fc14 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800fa6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa6c:	895b      	ldrh	r3, [r3, #10]
 800fa6e:	2b13      	cmp	r3, #19
 800fa70:	d806      	bhi.n	800fa80 <ip4_frag+0xd0>
 800fa72:	4b6c      	ldr	r3, [pc, #432]	; (800fc24 <ip4_frag+0x274>)
 800fa74:	f44f 7249 	mov.w	r2, #804	; 0x324
 800fa78:	496d      	ldr	r1, [pc, #436]	; (800fc30 <ip4_frag+0x280>)
 800fa7a:	486c      	ldr	r0, [pc, #432]	; (800fc2c <ip4_frag+0x27c>)
 800fa7c:	f000 fa1a 	bl	800feb4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800fa80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa82:	685b      	ldr	r3, [r3, #4]
 800fa84:	2214      	movs	r2, #20
 800fa86:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f000 f9e3 	bl	800fe54 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800fa8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa90:	685b      	ldr	r3, [r3, #4]
 800fa92:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800fa94:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fa96:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800fa9a:	e064      	b.n	800fb66 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	895a      	ldrh	r2, [r3, #10]
 800faa0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800faa2:	1ad3      	subs	r3, r2, r3
 800faa4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	895b      	ldrh	r3, [r3, #10]
 800faaa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800faac:	429a      	cmp	r2, r3
 800faae:	d906      	bls.n	800fabe <ip4_frag+0x10e>
 800fab0:	4b5c      	ldr	r3, [pc, #368]	; (800fc24 <ip4_frag+0x274>)
 800fab2:	f240 322d 	movw	r2, #813	; 0x32d
 800fab6:	495f      	ldr	r1, [pc, #380]	; (800fc34 <ip4_frag+0x284>)
 800fab8:	485c      	ldr	r0, [pc, #368]	; (800fc2c <ip4_frag+0x27c>)
 800faba:	f000 f9fb 	bl	800feb4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800fabe:	8bfa      	ldrh	r2, [r7, #30]
 800fac0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fac4:	4293      	cmp	r3, r2
 800fac6:	bf28      	it	cs
 800fac8:	4613      	movcs	r3, r2
 800faca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800face:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d105      	bne.n	800fae2 <ip4_frag+0x132>
        poff = 0;
 800fad6:	2300      	movs	r3, #0
 800fad8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	60fb      	str	r3, [r7, #12]
        continue;
 800fae0:	e041      	b.n	800fb66 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800fae2:	f7ff ff0d 	bl	800f900 <ip_frag_alloc_pbuf_custom_ref>
 800fae6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800fae8:	69bb      	ldr	r3, [r7, #24]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d103      	bne.n	800faf6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800faee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800faf0:	f7f6 ff82 	bl	80069f8 <pbuf_free>
        goto memerr;
 800faf4:	e08f      	b.n	800fc16 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800faf6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fafc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fafe:	4413      	add	r3, r2
 800fb00:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800fb04:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800fb08:	9201      	str	r2, [sp, #4]
 800fb0a:	9300      	str	r3, [sp, #0]
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	2241      	movs	r2, #65	; 0x41
 800fb10:	2000      	movs	r0, #0
 800fb12:	f7f6 fdb7 	bl	8006684 <pbuf_alloced_custom>
 800fb16:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800fb18:	697b      	ldr	r3, [r7, #20]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d106      	bne.n	800fb2c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800fb1e:	69b8      	ldr	r0, [r7, #24]
 800fb20:	f7ff fef6 	bl	800f910 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800fb24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fb26:	f7f6 ff67 	bl	80069f8 <pbuf_free>
        goto memerr;
 800fb2a:	e074      	b.n	800fc16 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800fb2c:	68f8      	ldr	r0, [r7, #12]
 800fb2e:	f7f7 f803 	bl	8006b38 <pbuf_ref>
      pcr->original = p;
 800fb32:	69bb      	ldr	r3, [r7, #24]
 800fb34:	68fa      	ldr	r2, [r7, #12]
 800fb36:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800fb38:	69bb      	ldr	r3, [r7, #24]
 800fb3a:	4a3f      	ldr	r2, [pc, #252]	; (800fc38 <ip4_frag+0x288>)
 800fb3c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800fb3e:	6979      	ldr	r1, [r7, #20]
 800fb40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fb42:	f7f7 f81b 	bl	8006b7c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800fb46:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800fb4a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800fb4e:	1ad3      	subs	r3, r2, r3
 800fb50:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800fb54:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d004      	beq.n	800fb66 <ip4_frag+0x1b6>
        poff = 0;
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800fb66:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d196      	bne.n	800fa9c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800fb6e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800fb70:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800fb74:	4413      	add	r3, r2
 800fb76:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800fb78:	68bb      	ldr	r3, [r7, #8]
 800fb7a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fb7c:	f1a3 0213 	sub.w	r2, r3, #19
 800fb80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fb84:	429a      	cmp	r2, r3
 800fb86:	bfcc      	ite	gt
 800fb88:	2301      	movgt	r3, #1
 800fb8a:	2300      	movle	r3, #0
 800fb8c:	b2db      	uxtb	r3, r3
 800fb8e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800fb90:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fb94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fb98:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800fb9a:	6a3b      	ldr	r3, [r7, #32]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d002      	beq.n	800fba6 <ip4_frag+0x1f6>
 800fba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d003      	beq.n	800fbae <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800fba6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fba8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fbac:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800fbae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f7f5 fc03 	bl	80053bc <lwip_htons>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	461a      	mov	r2, r3
 800fbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbbc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800fbbe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fbc0:	3314      	adds	r3, #20
 800fbc2:	b29b      	uxth	r3, r3
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f7f5 fbf9 	bl	80053bc <lwip_htons>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	461a      	mov	r2, r3
 800fbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbd0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800fbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	729a      	strb	r2, [r3, #10]
 800fbd8:	2200      	movs	r2, #0
 800fbda:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800fbdc:	68bb      	ldr	r3, [r7, #8]
 800fbde:	695b      	ldr	r3, [r3, #20]
 800fbe0:	687a      	ldr	r2, [r7, #4]
 800fbe2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fbe4:	68b8      	ldr	r0, [r7, #8]
 800fbe6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800fbe8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fbea:	f7f6 ff05 	bl	80069f8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800fbee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fbf2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fbf4:	1ad3      	subs	r3, r2, r3
 800fbf6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800fbfa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800fbfe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fc00:	4413      	add	r3, r2
 800fc02:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800fc06:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	f47f af19 	bne.w	800fa42 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800fc10:	2300      	movs	r3, #0
 800fc12:	e002      	b.n	800fc1a <ip4_frag+0x26a>
      goto memerr;
 800fc14:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800fc16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	3748      	adds	r7, #72	; 0x48
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}
 800fc22:	bf00      	nop
 800fc24:	08013f68 	.word	0x08013f68
 800fc28:	08014144 	.word	0x08014144
 800fc2c:	08013fb0 	.word	0x08013fb0
 800fc30:	08014160 	.word	0x08014160
 800fc34:	08014180 	.word	0x08014180
 800fc38:	0800f949 	.word	0x0800f949

0800fc3c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b086      	sub	sp, #24
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
 800fc44:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800fc46:	230e      	movs	r3, #14
 800fc48:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	895b      	ldrh	r3, [r3, #10]
 800fc4e:	2b0e      	cmp	r3, #14
 800fc50:	d96e      	bls.n	800fd30 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	7bdb      	ldrb	r3, [r3, #15]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d106      	bne.n	800fc68 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fc60:	3301      	adds	r3, #1
 800fc62:	b2da      	uxtb	r2, r3
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	685b      	ldr	r3, [r3, #4]
 800fc6c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800fc6e:	693b      	ldr	r3, [r7, #16]
 800fc70:	7b1a      	ldrb	r2, [r3, #12]
 800fc72:	7b5b      	ldrb	r3, [r3, #13]
 800fc74:	021b      	lsls	r3, r3, #8
 800fc76:	4313      	orrs	r3, r2
 800fc78:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800fc7a:	693b      	ldr	r3, [r7, #16]
 800fc7c:	781b      	ldrb	r3, [r3, #0]
 800fc7e:	f003 0301 	and.w	r3, r3, #1
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d023      	beq.n	800fcce <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800fc86:	693b      	ldr	r3, [r7, #16]
 800fc88:	781b      	ldrb	r3, [r3, #0]
 800fc8a:	2b01      	cmp	r3, #1
 800fc8c:	d10f      	bne.n	800fcae <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800fc8e:	693b      	ldr	r3, [r7, #16]
 800fc90:	785b      	ldrb	r3, [r3, #1]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d11b      	bne.n	800fcce <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800fc96:	693b      	ldr	r3, [r7, #16]
 800fc98:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800fc9a:	2b5e      	cmp	r3, #94	; 0x5e
 800fc9c:	d117      	bne.n	800fcce <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	7b5b      	ldrb	r3, [r3, #13]
 800fca2:	f043 0310 	orr.w	r3, r3, #16
 800fca6:	b2da      	uxtb	r2, r3
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	735a      	strb	r2, [r3, #13]
 800fcac:	e00f      	b.n	800fcce <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800fcae:	693b      	ldr	r3, [r7, #16]
 800fcb0:	2206      	movs	r2, #6
 800fcb2:	4928      	ldr	r1, [pc, #160]	; (800fd54 <ethernet_input+0x118>)
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f000 f8bf 	bl	800fe38 <memcmp>
 800fcba:	4603      	mov	r3, r0
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d106      	bne.n	800fcce <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	7b5b      	ldrb	r3, [r3, #13]
 800fcc4:	f043 0308 	orr.w	r3, r3, #8
 800fcc8:	b2da      	uxtb	r2, r3
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800fcce:	89fb      	ldrh	r3, [r7, #14]
 800fcd0:	2b08      	cmp	r3, #8
 800fcd2:	d003      	beq.n	800fcdc <ethernet_input+0xa0>
 800fcd4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800fcd8:	d014      	beq.n	800fd04 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800fcda:	e032      	b.n	800fd42 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fce2:	f003 0308 	and.w	r3, r3, #8
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d024      	beq.n	800fd34 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800fcea:	8afb      	ldrh	r3, [r7, #22]
 800fcec:	4619      	mov	r1, r3
 800fcee:	6878      	ldr	r0, [r7, #4]
 800fcf0:	f7f6 fdfc 	bl	80068ec <pbuf_remove_header>
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d11e      	bne.n	800fd38 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800fcfa:	6839      	ldr	r1, [r7, #0]
 800fcfc:	6878      	ldr	r0, [r7, #4]
 800fcfe:	f7fe ff27 	bl	800eb50 <ip4_input>
      break;
 800fd02:	e013      	b.n	800fd2c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fd0a:	f003 0308 	and.w	r3, r3, #8
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d014      	beq.n	800fd3c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800fd12:	8afb      	ldrh	r3, [r7, #22]
 800fd14:	4619      	mov	r1, r3
 800fd16:	6878      	ldr	r0, [r7, #4]
 800fd18:	f7f6 fde8 	bl	80068ec <pbuf_remove_header>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d10e      	bne.n	800fd40 <ethernet_input+0x104>
        etharp_input(p, netif);
 800fd22:	6839      	ldr	r1, [r7, #0]
 800fd24:	6878      	ldr	r0, [r7, #4]
 800fd26:	f7fe f8c7 	bl	800deb8 <etharp_input>
      break;
 800fd2a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	e00c      	b.n	800fd4a <ethernet_input+0x10e>
    goto free_and_return;
 800fd30:	bf00      	nop
 800fd32:	e006      	b.n	800fd42 <ethernet_input+0x106>
        goto free_and_return;
 800fd34:	bf00      	nop
 800fd36:	e004      	b.n	800fd42 <ethernet_input+0x106>
        goto free_and_return;
 800fd38:	bf00      	nop
 800fd3a:	e002      	b.n	800fd42 <ethernet_input+0x106>
        goto free_and_return;
 800fd3c:	bf00      	nop
 800fd3e:	e000      	b.n	800fd42 <ethernet_input+0x106>
        goto free_and_return;
 800fd40:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800fd42:	6878      	ldr	r0, [r7, #4]
 800fd44:	f7f6 fe58 	bl	80069f8 <pbuf_free>
  return ERR_OK;
 800fd48:	2300      	movs	r3, #0
}
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	3718      	adds	r7, #24
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	bd80      	pop	{r7, pc}
 800fd52:	bf00      	nop
 800fd54:	08021230 	.word	0x08021230

0800fd58 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b086      	sub	sp, #24
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	60f8      	str	r0, [r7, #12]
 800fd60:	60b9      	str	r1, [r7, #8]
 800fd62:	607a      	str	r2, [r7, #4]
 800fd64:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800fd66:	8c3b      	ldrh	r3, [r7, #32]
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f7f5 fb27 	bl	80053bc <lwip_htons>
 800fd6e:	4603      	mov	r3, r0
 800fd70:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800fd72:	210e      	movs	r1, #14
 800fd74:	68b8      	ldr	r0, [r7, #8]
 800fd76:	f7f6 fda9 	bl	80068cc <pbuf_add_header>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d125      	bne.n	800fdcc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800fd80:	68bb      	ldr	r3, [r7, #8]
 800fd82:	685b      	ldr	r3, [r3, #4]
 800fd84:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800fd86:	693b      	ldr	r3, [r7, #16]
 800fd88:	8afa      	ldrh	r2, [r7, #22]
 800fd8a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800fd8c:	693b      	ldr	r3, [r7, #16]
 800fd8e:	2206      	movs	r2, #6
 800fd90:	6839      	ldr	r1, [r7, #0]
 800fd92:	4618      	mov	r0, r3
 800fd94:	f000 f85e 	bl	800fe54 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800fd98:	693b      	ldr	r3, [r7, #16]
 800fd9a:	3306      	adds	r3, #6
 800fd9c:	2206      	movs	r2, #6
 800fd9e:	6879      	ldr	r1, [r7, #4]
 800fda0:	4618      	mov	r0, r3
 800fda2:	f000 f857 	bl	800fe54 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fdac:	2b06      	cmp	r3, #6
 800fdae:	d006      	beq.n	800fdbe <ethernet_output+0x66>
 800fdb0:	4b0a      	ldr	r3, [pc, #40]	; (800fddc <ethernet_output+0x84>)
 800fdb2:	f44f 7299 	mov.w	r2, #306	; 0x132
 800fdb6:	490a      	ldr	r1, [pc, #40]	; (800fde0 <ethernet_output+0x88>)
 800fdb8:	480a      	ldr	r0, [pc, #40]	; (800fde4 <ethernet_output+0x8c>)
 800fdba:	f000 f87b 	bl	800feb4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	699b      	ldr	r3, [r3, #24]
 800fdc2:	68b9      	ldr	r1, [r7, #8]
 800fdc4:	68f8      	ldr	r0, [r7, #12]
 800fdc6:	4798      	blx	r3
 800fdc8:	4603      	mov	r3, r0
 800fdca:	e002      	b.n	800fdd2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800fdcc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800fdce:	f06f 0301 	mvn.w	r3, #1
}
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	3718      	adds	r7, #24
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	bd80      	pop	{r7, pc}
 800fdda:	bf00      	nop
 800fddc:	08014190 	.word	0x08014190
 800fde0:	080141c8 	.word	0x080141c8
 800fde4:	080141fc 	.word	0x080141fc

0800fde8 <atoi>:
 800fde8:	220a      	movs	r2, #10
 800fdea:	2100      	movs	r1, #0
 800fdec:	f000 b9c8 	b.w	8010180 <strtol>

0800fdf0 <__libc_init_array>:
 800fdf0:	b570      	push	{r4, r5, r6, lr}
 800fdf2:	4d0d      	ldr	r5, [pc, #52]	; (800fe28 <__libc_init_array+0x38>)
 800fdf4:	4c0d      	ldr	r4, [pc, #52]	; (800fe2c <__libc_init_array+0x3c>)
 800fdf6:	1b64      	subs	r4, r4, r5
 800fdf8:	10a4      	asrs	r4, r4, #2
 800fdfa:	2600      	movs	r6, #0
 800fdfc:	42a6      	cmp	r6, r4
 800fdfe:	d109      	bne.n	800fe14 <__libc_init_array+0x24>
 800fe00:	4d0b      	ldr	r5, [pc, #44]	; (800fe30 <__libc_init_array+0x40>)
 800fe02:	4c0c      	ldr	r4, [pc, #48]	; (800fe34 <__libc_init_array+0x44>)
 800fe04:	f001 fb18 	bl	8011438 <_init>
 800fe08:	1b64      	subs	r4, r4, r5
 800fe0a:	10a4      	asrs	r4, r4, #2
 800fe0c:	2600      	movs	r6, #0
 800fe0e:	42a6      	cmp	r6, r4
 800fe10:	d105      	bne.n	800fe1e <__libc_init_array+0x2e>
 800fe12:	bd70      	pop	{r4, r5, r6, pc}
 800fe14:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe18:	4798      	blx	r3
 800fe1a:	3601      	adds	r6, #1
 800fe1c:	e7ee      	b.n	800fdfc <__libc_init_array+0xc>
 800fe1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe22:	4798      	blx	r3
 800fe24:	3601      	adds	r6, #1
 800fe26:	e7f2      	b.n	800fe0e <__libc_init_array+0x1e>
 800fe28:	08021494 	.word	0x08021494
 800fe2c:	08021494 	.word	0x08021494
 800fe30:	08021494 	.word	0x08021494
 800fe34:	08021498 	.word	0x08021498

0800fe38 <memcmp>:
 800fe38:	b530      	push	{r4, r5, lr}
 800fe3a:	3901      	subs	r1, #1
 800fe3c:	2400      	movs	r4, #0
 800fe3e:	42a2      	cmp	r2, r4
 800fe40:	d101      	bne.n	800fe46 <memcmp+0xe>
 800fe42:	2000      	movs	r0, #0
 800fe44:	e005      	b.n	800fe52 <memcmp+0x1a>
 800fe46:	5d03      	ldrb	r3, [r0, r4]
 800fe48:	3401      	adds	r4, #1
 800fe4a:	5d0d      	ldrb	r5, [r1, r4]
 800fe4c:	42ab      	cmp	r3, r5
 800fe4e:	d0f6      	beq.n	800fe3e <memcmp+0x6>
 800fe50:	1b58      	subs	r0, r3, r5
 800fe52:	bd30      	pop	{r4, r5, pc}

0800fe54 <memcpy>:
 800fe54:	440a      	add	r2, r1
 800fe56:	4291      	cmp	r1, r2
 800fe58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fe5c:	d100      	bne.n	800fe60 <memcpy+0xc>
 800fe5e:	4770      	bx	lr
 800fe60:	b510      	push	{r4, lr}
 800fe62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fe6a:	4291      	cmp	r1, r2
 800fe6c:	d1f9      	bne.n	800fe62 <memcpy+0xe>
 800fe6e:	bd10      	pop	{r4, pc}

0800fe70 <memmove>:
 800fe70:	4288      	cmp	r0, r1
 800fe72:	b510      	push	{r4, lr}
 800fe74:	eb01 0402 	add.w	r4, r1, r2
 800fe78:	d902      	bls.n	800fe80 <memmove+0x10>
 800fe7a:	4284      	cmp	r4, r0
 800fe7c:	4623      	mov	r3, r4
 800fe7e:	d807      	bhi.n	800fe90 <memmove+0x20>
 800fe80:	1e43      	subs	r3, r0, #1
 800fe82:	42a1      	cmp	r1, r4
 800fe84:	d008      	beq.n	800fe98 <memmove+0x28>
 800fe86:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fe8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fe8e:	e7f8      	b.n	800fe82 <memmove+0x12>
 800fe90:	4402      	add	r2, r0
 800fe92:	4601      	mov	r1, r0
 800fe94:	428a      	cmp	r2, r1
 800fe96:	d100      	bne.n	800fe9a <memmove+0x2a>
 800fe98:	bd10      	pop	{r4, pc}
 800fe9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fe9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fea2:	e7f7      	b.n	800fe94 <memmove+0x24>

0800fea4 <memset>:
 800fea4:	4402      	add	r2, r0
 800fea6:	4603      	mov	r3, r0
 800fea8:	4293      	cmp	r3, r2
 800feaa:	d100      	bne.n	800feae <memset+0xa>
 800feac:	4770      	bx	lr
 800feae:	f803 1b01 	strb.w	r1, [r3], #1
 800feb2:	e7f9      	b.n	800fea8 <memset+0x4>

0800feb4 <iprintf>:
 800feb4:	b40f      	push	{r0, r1, r2, r3}
 800feb6:	4b0a      	ldr	r3, [pc, #40]	; (800fee0 <iprintf+0x2c>)
 800feb8:	b513      	push	{r0, r1, r4, lr}
 800feba:	681c      	ldr	r4, [r3, #0]
 800febc:	b124      	cbz	r4, 800fec8 <iprintf+0x14>
 800febe:	69a3      	ldr	r3, [r4, #24]
 800fec0:	b913      	cbnz	r3, 800fec8 <iprintf+0x14>
 800fec2:	4620      	mov	r0, r4
 800fec4:	f000 f9e2 	bl	801028c <__sinit>
 800fec8:	ab05      	add	r3, sp, #20
 800feca:	9a04      	ldr	r2, [sp, #16]
 800fecc:	68a1      	ldr	r1, [r4, #8]
 800fece:	9301      	str	r3, [sp, #4]
 800fed0:	4620      	mov	r0, r4
 800fed2:	f000 fcc5 	bl	8010860 <_vfiprintf_r>
 800fed6:	b002      	add	sp, #8
 800fed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fedc:	b004      	add	sp, #16
 800fede:	4770      	bx	lr
 800fee0:	20000028 	.word	0x20000028

0800fee4 <rand>:
 800fee4:	4b17      	ldr	r3, [pc, #92]	; (800ff44 <rand+0x60>)
 800fee6:	b510      	push	{r4, lr}
 800fee8:	681c      	ldr	r4, [r3, #0]
 800feea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800feec:	b9b3      	cbnz	r3, 800ff1c <rand+0x38>
 800feee:	2018      	movs	r0, #24
 800fef0:	f000 fa7e 	bl	80103f0 <malloc>
 800fef4:	63a0      	str	r0, [r4, #56]	; 0x38
 800fef6:	b928      	cbnz	r0, 800ff04 <rand+0x20>
 800fef8:	4602      	mov	r2, r0
 800fefa:	4b13      	ldr	r3, [pc, #76]	; (800ff48 <rand+0x64>)
 800fefc:	4813      	ldr	r0, [pc, #76]	; (800ff4c <rand+0x68>)
 800fefe:	214e      	movs	r1, #78	; 0x4e
 800ff00:	f000 f948 	bl	8010194 <__assert_func>
 800ff04:	4a12      	ldr	r2, [pc, #72]	; (800ff50 <rand+0x6c>)
 800ff06:	4b13      	ldr	r3, [pc, #76]	; (800ff54 <rand+0x70>)
 800ff08:	e9c0 2300 	strd	r2, r3, [r0]
 800ff0c:	4b12      	ldr	r3, [pc, #72]	; (800ff58 <rand+0x74>)
 800ff0e:	6083      	str	r3, [r0, #8]
 800ff10:	230b      	movs	r3, #11
 800ff12:	8183      	strh	r3, [r0, #12]
 800ff14:	2201      	movs	r2, #1
 800ff16:	2300      	movs	r3, #0
 800ff18:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ff1c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ff1e:	480f      	ldr	r0, [pc, #60]	; (800ff5c <rand+0x78>)
 800ff20:	690a      	ldr	r2, [r1, #16]
 800ff22:	694b      	ldr	r3, [r1, #20]
 800ff24:	4c0e      	ldr	r4, [pc, #56]	; (800ff60 <rand+0x7c>)
 800ff26:	4350      	muls	r0, r2
 800ff28:	fb04 0003 	mla	r0, r4, r3, r0
 800ff2c:	fba2 3404 	umull	r3, r4, r2, r4
 800ff30:	1c5a      	adds	r2, r3, #1
 800ff32:	4404      	add	r4, r0
 800ff34:	f144 0000 	adc.w	r0, r4, #0
 800ff38:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800ff3c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ff40:	bd10      	pop	{r4, pc}
 800ff42:	bf00      	nop
 800ff44:	20000028 	.word	0x20000028
 800ff48:	08021344 	.word	0x08021344
 800ff4c:	0802135b 	.word	0x0802135b
 800ff50:	abcd330e 	.word	0xabcd330e
 800ff54:	e66d1234 	.word	0xe66d1234
 800ff58:	0005deec 	.word	0x0005deec
 800ff5c:	5851f42d 	.word	0x5851f42d
 800ff60:	4c957f2d 	.word	0x4c957f2d

0800ff64 <sniprintf>:
 800ff64:	b40c      	push	{r2, r3}
 800ff66:	b530      	push	{r4, r5, lr}
 800ff68:	4b17      	ldr	r3, [pc, #92]	; (800ffc8 <sniprintf+0x64>)
 800ff6a:	1e0c      	subs	r4, r1, #0
 800ff6c:	681d      	ldr	r5, [r3, #0]
 800ff6e:	b09d      	sub	sp, #116	; 0x74
 800ff70:	da08      	bge.n	800ff84 <sniprintf+0x20>
 800ff72:	238b      	movs	r3, #139	; 0x8b
 800ff74:	602b      	str	r3, [r5, #0]
 800ff76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ff7a:	b01d      	add	sp, #116	; 0x74
 800ff7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff80:	b002      	add	sp, #8
 800ff82:	4770      	bx	lr
 800ff84:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ff88:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ff8c:	bf14      	ite	ne
 800ff8e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800ff92:	4623      	moveq	r3, r4
 800ff94:	9304      	str	r3, [sp, #16]
 800ff96:	9307      	str	r3, [sp, #28]
 800ff98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ff9c:	9002      	str	r0, [sp, #8]
 800ff9e:	9006      	str	r0, [sp, #24]
 800ffa0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ffa4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ffa6:	ab21      	add	r3, sp, #132	; 0x84
 800ffa8:	a902      	add	r1, sp, #8
 800ffaa:	4628      	mov	r0, r5
 800ffac:	9301      	str	r3, [sp, #4]
 800ffae:	f000 fb2d 	bl	801060c <_svfiprintf_r>
 800ffb2:	1c43      	adds	r3, r0, #1
 800ffb4:	bfbc      	itt	lt
 800ffb6:	238b      	movlt	r3, #139	; 0x8b
 800ffb8:	602b      	strlt	r3, [r5, #0]
 800ffba:	2c00      	cmp	r4, #0
 800ffbc:	d0dd      	beq.n	800ff7a <sniprintf+0x16>
 800ffbe:	9b02      	ldr	r3, [sp, #8]
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	701a      	strb	r2, [r3, #0]
 800ffc4:	e7d9      	b.n	800ff7a <sniprintf+0x16>
 800ffc6:	bf00      	nop
 800ffc8:	20000028 	.word	0x20000028

0800ffcc <siprintf>:
 800ffcc:	b40e      	push	{r1, r2, r3}
 800ffce:	b500      	push	{lr}
 800ffd0:	b09c      	sub	sp, #112	; 0x70
 800ffd2:	ab1d      	add	r3, sp, #116	; 0x74
 800ffd4:	9002      	str	r0, [sp, #8]
 800ffd6:	9006      	str	r0, [sp, #24]
 800ffd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ffdc:	4809      	ldr	r0, [pc, #36]	; (8010004 <siprintf+0x38>)
 800ffde:	9107      	str	r1, [sp, #28]
 800ffe0:	9104      	str	r1, [sp, #16]
 800ffe2:	4909      	ldr	r1, [pc, #36]	; (8010008 <siprintf+0x3c>)
 800ffe4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffe8:	9105      	str	r1, [sp, #20]
 800ffea:	6800      	ldr	r0, [r0, #0]
 800ffec:	9301      	str	r3, [sp, #4]
 800ffee:	a902      	add	r1, sp, #8
 800fff0:	f000 fb0c 	bl	801060c <_svfiprintf_r>
 800fff4:	9b02      	ldr	r3, [sp, #8]
 800fff6:	2200      	movs	r2, #0
 800fff8:	701a      	strb	r2, [r3, #0]
 800fffa:	b01c      	add	sp, #112	; 0x70
 800fffc:	f85d eb04 	ldr.w	lr, [sp], #4
 8010000:	b003      	add	sp, #12
 8010002:	4770      	bx	lr
 8010004:	20000028 	.word	0x20000028
 8010008:	ffff0208 	.word	0xffff0208

0801000c <strcat>:
 801000c:	b510      	push	{r4, lr}
 801000e:	4602      	mov	r2, r0
 8010010:	7814      	ldrb	r4, [r2, #0]
 8010012:	4613      	mov	r3, r2
 8010014:	3201      	adds	r2, #1
 8010016:	2c00      	cmp	r4, #0
 8010018:	d1fa      	bne.n	8010010 <strcat+0x4>
 801001a:	3b01      	subs	r3, #1
 801001c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010020:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010024:	2a00      	cmp	r2, #0
 8010026:	d1f9      	bne.n	801001c <strcat+0x10>
 8010028:	bd10      	pop	{r4, pc}

0801002a <strchr>:
 801002a:	b2c9      	uxtb	r1, r1
 801002c:	4603      	mov	r3, r0
 801002e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010032:	b11a      	cbz	r2, 801003c <strchr+0x12>
 8010034:	428a      	cmp	r2, r1
 8010036:	d1f9      	bne.n	801002c <strchr+0x2>
 8010038:	4618      	mov	r0, r3
 801003a:	4770      	bx	lr
 801003c:	2900      	cmp	r1, #0
 801003e:	bf18      	it	ne
 8010040:	2300      	movne	r3, #0
 8010042:	e7f9      	b.n	8010038 <strchr+0xe>

08010044 <strcpy>:
 8010044:	4603      	mov	r3, r0
 8010046:	f811 2b01 	ldrb.w	r2, [r1], #1
 801004a:	f803 2b01 	strb.w	r2, [r3], #1
 801004e:	2a00      	cmp	r2, #0
 8010050:	d1f9      	bne.n	8010046 <strcpy+0x2>
 8010052:	4770      	bx	lr

08010054 <strncmp>:
 8010054:	b510      	push	{r4, lr}
 8010056:	b16a      	cbz	r2, 8010074 <strncmp+0x20>
 8010058:	3901      	subs	r1, #1
 801005a:	1884      	adds	r4, r0, r2
 801005c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010060:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010064:	4293      	cmp	r3, r2
 8010066:	d103      	bne.n	8010070 <strncmp+0x1c>
 8010068:	42a0      	cmp	r0, r4
 801006a:	d001      	beq.n	8010070 <strncmp+0x1c>
 801006c:	2b00      	cmp	r3, #0
 801006e:	d1f5      	bne.n	801005c <strncmp+0x8>
 8010070:	1a98      	subs	r0, r3, r2
 8010072:	bd10      	pop	{r4, pc}
 8010074:	4610      	mov	r0, r2
 8010076:	e7fc      	b.n	8010072 <strncmp+0x1e>

08010078 <_strtol_l.isra.0>:
 8010078:	2b01      	cmp	r3, #1
 801007a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801007e:	d001      	beq.n	8010084 <_strtol_l.isra.0+0xc>
 8010080:	2b24      	cmp	r3, #36	; 0x24
 8010082:	d906      	bls.n	8010092 <_strtol_l.isra.0+0x1a>
 8010084:	f000 f8a4 	bl	80101d0 <__errno>
 8010088:	2316      	movs	r3, #22
 801008a:	6003      	str	r3, [r0, #0]
 801008c:	2000      	movs	r0, #0
 801008e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010092:	4f3a      	ldr	r7, [pc, #232]	; (801017c <_strtol_l.isra.0+0x104>)
 8010094:	468e      	mov	lr, r1
 8010096:	4676      	mov	r6, lr
 8010098:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801009c:	5de5      	ldrb	r5, [r4, r7]
 801009e:	f015 0508 	ands.w	r5, r5, #8
 80100a2:	d1f8      	bne.n	8010096 <_strtol_l.isra.0+0x1e>
 80100a4:	2c2d      	cmp	r4, #45	; 0x2d
 80100a6:	d134      	bne.n	8010112 <_strtol_l.isra.0+0x9a>
 80100a8:	f89e 4000 	ldrb.w	r4, [lr]
 80100ac:	f04f 0801 	mov.w	r8, #1
 80100b0:	f106 0e02 	add.w	lr, r6, #2
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d05c      	beq.n	8010172 <_strtol_l.isra.0+0xfa>
 80100b8:	2b10      	cmp	r3, #16
 80100ba:	d10c      	bne.n	80100d6 <_strtol_l.isra.0+0x5e>
 80100bc:	2c30      	cmp	r4, #48	; 0x30
 80100be:	d10a      	bne.n	80100d6 <_strtol_l.isra.0+0x5e>
 80100c0:	f89e 4000 	ldrb.w	r4, [lr]
 80100c4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80100c8:	2c58      	cmp	r4, #88	; 0x58
 80100ca:	d14d      	bne.n	8010168 <_strtol_l.isra.0+0xf0>
 80100cc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80100d0:	2310      	movs	r3, #16
 80100d2:	f10e 0e02 	add.w	lr, lr, #2
 80100d6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80100da:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80100de:	2600      	movs	r6, #0
 80100e0:	fbbc f9f3 	udiv	r9, ip, r3
 80100e4:	4635      	mov	r5, r6
 80100e6:	fb03 ca19 	mls	sl, r3, r9, ip
 80100ea:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80100ee:	2f09      	cmp	r7, #9
 80100f0:	d818      	bhi.n	8010124 <_strtol_l.isra.0+0xac>
 80100f2:	463c      	mov	r4, r7
 80100f4:	42a3      	cmp	r3, r4
 80100f6:	dd24      	ble.n	8010142 <_strtol_l.isra.0+0xca>
 80100f8:	2e00      	cmp	r6, #0
 80100fa:	db1f      	blt.n	801013c <_strtol_l.isra.0+0xc4>
 80100fc:	45a9      	cmp	r9, r5
 80100fe:	d31d      	bcc.n	801013c <_strtol_l.isra.0+0xc4>
 8010100:	d101      	bne.n	8010106 <_strtol_l.isra.0+0x8e>
 8010102:	45a2      	cmp	sl, r4
 8010104:	db1a      	blt.n	801013c <_strtol_l.isra.0+0xc4>
 8010106:	fb05 4503 	mla	r5, r5, r3, r4
 801010a:	2601      	movs	r6, #1
 801010c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8010110:	e7eb      	b.n	80100ea <_strtol_l.isra.0+0x72>
 8010112:	2c2b      	cmp	r4, #43	; 0x2b
 8010114:	bf08      	it	eq
 8010116:	f89e 4000 	ldrbeq.w	r4, [lr]
 801011a:	46a8      	mov	r8, r5
 801011c:	bf08      	it	eq
 801011e:	f106 0e02 	addeq.w	lr, r6, #2
 8010122:	e7c7      	b.n	80100b4 <_strtol_l.isra.0+0x3c>
 8010124:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8010128:	2f19      	cmp	r7, #25
 801012a:	d801      	bhi.n	8010130 <_strtol_l.isra.0+0xb8>
 801012c:	3c37      	subs	r4, #55	; 0x37
 801012e:	e7e1      	b.n	80100f4 <_strtol_l.isra.0+0x7c>
 8010130:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8010134:	2f19      	cmp	r7, #25
 8010136:	d804      	bhi.n	8010142 <_strtol_l.isra.0+0xca>
 8010138:	3c57      	subs	r4, #87	; 0x57
 801013a:	e7db      	b.n	80100f4 <_strtol_l.isra.0+0x7c>
 801013c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8010140:	e7e4      	b.n	801010c <_strtol_l.isra.0+0x94>
 8010142:	2e00      	cmp	r6, #0
 8010144:	da05      	bge.n	8010152 <_strtol_l.isra.0+0xda>
 8010146:	2322      	movs	r3, #34	; 0x22
 8010148:	6003      	str	r3, [r0, #0]
 801014a:	4665      	mov	r5, ip
 801014c:	b942      	cbnz	r2, 8010160 <_strtol_l.isra.0+0xe8>
 801014e:	4628      	mov	r0, r5
 8010150:	e79d      	b.n	801008e <_strtol_l.isra.0+0x16>
 8010152:	f1b8 0f00 	cmp.w	r8, #0
 8010156:	d000      	beq.n	801015a <_strtol_l.isra.0+0xe2>
 8010158:	426d      	negs	r5, r5
 801015a:	2a00      	cmp	r2, #0
 801015c:	d0f7      	beq.n	801014e <_strtol_l.isra.0+0xd6>
 801015e:	b10e      	cbz	r6, 8010164 <_strtol_l.isra.0+0xec>
 8010160:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8010164:	6011      	str	r1, [r2, #0]
 8010166:	e7f2      	b.n	801014e <_strtol_l.isra.0+0xd6>
 8010168:	2430      	movs	r4, #48	; 0x30
 801016a:	2b00      	cmp	r3, #0
 801016c:	d1b3      	bne.n	80100d6 <_strtol_l.isra.0+0x5e>
 801016e:	2308      	movs	r3, #8
 8010170:	e7b1      	b.n	80100d6 <_strtol_l.isra.0+0x5e>
 8010172:	2c30      	cmp	r4, #48	; 0x30
 8010174:	d0a4      	beq.n	80100c0 <_strtol_l.isra.0+0x48>
 8010176:	230a      	movs	r3, #10
 8010178:	e7ad      	b.n	80100d6 <_strtol_l.isra.0+0x5e>
 801017a:	bf00      	nop
 801017c:	0802123f 	.word	0x0802123f

08010180 <strtol>:
 8010180:	4613      	mov	r3, r2
 8010182:	460a      	mov	r2, r1
 8010184:	4601      	mov	r1, r0
 8010186:	4802      	ldr	r0, [pc, #8]	; (8010190 <strtol+0x10>)
 8010188:	6800      	ldr	r0, [r0, #0]
 801018a:	f7ff bf75 	b.w	8010078 <_strtol_l.isra.0>
 801018e:	bf00      	nop
 8010190:	20000028 	.word	0x20000028

08010194 <__assert_func>:
 8010194:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010196:	4614      	mov	r4, r2
 8010198:	461a      	mov	r2, r3
 801019a:	4b09      	ldr	r3, [pc, #36]	; (80101c0 <__assert_func+0x2c>)
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	4605      	mov	r5, r0
 80101a0:	68d8      	ldr	r0, [r3, #12]
 80101a2:	b14c      	cbz	r4, 80101b8 <__assert_func+0x24>
 80101a4:	4b07      	ldr	r3, [pc, #28]	; (80101c4 <__assert_func+0x30>)
 80101a6:	9100      	str	r1, [sp, #0]
 80101a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80101ac:	4906      	ldr	r1, [pc, #24]	; (80101c8 <__assert_func+0x34>)
 80101ae:	462b      	mov	r3, r5
 80101b0:	f000 f8ea 	bl	8010388 <fiprintf>
 80101b4:	f000 ff3e 	bl	8011034 <abort>
 80101b8:	4b04      	ldr	r3, [pc, #16]	; (80101cc <__assert_func+0x38>)
 80101ba:	461c      	mov	r4, r3
 80101bc:	e7f3      	b.n	80101a6 <__assert_func+0x12>
 80101be:	bf00      	nop
 80101c0:	20000028 	.word	0x20000028
 80101c4:	080213ba 	.word	0x080213ba
 80101c8:	080213c7 	.word	0x080213c7
 80101cc:	080213f5 	.word	0x080213f5

080101d0 <__errno>:
 80101d0:	4b01      	ldr	r3, [pc, #4]	; (80101d8 <__errno+0x8>)
 80101d2:	6818      	ldr	r0, [r3, #0]
 80101d4:	4770      	bx	lr
 80101d6:	bf00      	nop
 80101d8:	20000028 	.word	0x20000028

080101dc <std>:
 80101dc:	2300      	movs	r3, #0
 80101de:	b510      	push	{r4, lr}
 80101e0:	4604      	mov	r4, r0
 80101e2:	e9c0 3300 	strd	r3, r3, [r0]
 80101e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80101ea:	6083      	str	r3, [r0, #8]
 80101ec:	8181      	strh	r1, [r0, #12]
 80101ee:	6643      	str	r3, [r0, #100]	; 0x64
 80101f0:	81c2      	strh	r2, [r0, #14]
 80101f2:	6183      	str	r3, [r0, #24]
 80101f4:	4619      	mov	r1, r3
 80101f6:	2208      	movs	r2, #8
 80101f8:	305c      	adds	r0, #92	; 0x5c
 80101fa:	f7ff fe53 	bl	800fea4 <memset>
 80101fe:	4b05      	ldr	r3, [pc, #20]	; (8010214 <std+0x38>)
 8010200:	6263      	str	r3, [r4, #36]	; 0x24
 8010202:	4b05      	ldr	r3, [pc, #20]	; (8010218 <std+0x3c>)
 8010204:	62a3      	str	r3, [r4, #40]	; 0x28
 8010206:	4b05      	ldr	r3, [pc, #20]	; (801021c <std+0x40>)
 8010208:	62e3      	str	r3, [r4, #44]	; 0x2c
 801020a:	4b05      	ldr	r3, [pc, #20]	; (8010220 <std+0x44>)
 801020c:	6224      	str	r4, [r4, #32]
 801020e:	6323      	str	r3, [r4, #48]	; 0x30
 8010210:	bd10      	pop	{r4, pc}
 8010212:	bf00      	nop
 8010214:	08010e09 	.word	0x08010e09
 8010218:	08010e2b 	.word	0x08010e2b
 801021c:	08010e63 	.word	0x08010e63
 8010220:	08010e87 	.word	0x08010e87

08010224 <_cleanup_r>:
 8010224:	4901      	ldr	r1, [pc, #4]	; (801022c <_cleanup_r+0x8>)
 8010226:	f000 b8c1 	b.w	80103ac <_fwalk_reent>
 801022a:	bf00      	nop
 801022c:	08011171 	.word	0x08011171

08010230 <__sfmoreglue>:
 8010230:	b570      	push	{r4, r5, r6, lr}
 8010232:	1e4a      	subs	r2, r1, #1
 8010234:	2568      	movs	r5, #104	; 0x68
 8010236:	4355      	muls	r5, r2
 8010238:	460e      	mov	r6, r1
 801023a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801023e:	f000 f92f 	bl	80104a0 <_malloc_r>
 8010242:	4604      	mov	r4, r0
 8010244:	b140      	cbz	r0, 8010258 <__sfmoreglue+0x28>
 8010246:	2100      	movs	r1, #0
 8010248:	e9c0 1600 	strd	r1, r6, [r0]
 801024c:	300c      	adds	r0, #12
 801024e:	60a0      	str	r0, [r4, #8]
 8010250:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010254:	f7ff fe26 	bl	800fea4 <memset>
 8010258:	4620      	mov	r0, r4
 801025a:	bd70      	pop	{r4, r5, r6, pc}

0801025c <__sfp_lock_acquire>:
 801025c:	4801      	ldr	r0, [pc, #4]	; (8010264 <__sfp_lock_acquire+0x8>)
 801025e:	f000 b8c5 	b.w	80103ec <__retarget_lock_acquire_recursive>
 8010262:	bf00      	nop
 8010264:	20006d74 	.word	0x20006d74

08010268 <__sfp_lock_release>:
 8010268:	4801      	ldr	r0, [pc, #4]	; (8010270 <__sfp_lock_release+0x8>)
 801026a:	f000 b8c0 	b.w	80103ee <__retarget_lock_release_recursive>
 801026e:	bf00      	nop
 8010270:	20006d74 	.word	0x20006d74

08010274 <__sinit_lock_acquire>:
 8010274:	4801      	ldr	r0, [pc, #4]	; (801027c <__sinit_lock_acquire+0x8>)
 8010276:	f000 b8b9 	b.w	80103ec <__retarget_lock_acquire_recursive>
 801027a:	bf00      	nop
 801027c:	20006d6f 	.word	0x20006d6f

08010280 <__sinit_lock_release>:
 8010280:	4801      	ldr	r0, [pc, #4]	; (8010288 <__sinit_lock_release+0x8>)
 8010282:	f000 b8b4 	b.w	80103ee <__retarget_lock_release_recursive>
 8010286:	bf00      	nop
 8010288:	20006d6f 	.word	0x20006d6f

0801028c <__sinit>:
 801028c:	b510      	push	{r4, lr}
 801028e:	4604      	mov	r4, r0
 8010290:	f7ff fff0 	bl	8010274 <__sinit_lock_acquire>
 8010294:	69a3      	ldr	r3, [r4, #24]
 8010296:	b11b      	cbz	r3, 80102a0 <__sinit+0x14>
 8010298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801029c:	f7ff bff0 	b.w	8010280 <__sinit_lock_release>
 80102a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80102a4:	6523      	str	r3, [r4, #80]	; 0x50
 80102a6:	4b13      	ldr	r3, [pc, #76]	; (80102f4 <__sinit+0x68>)
 80102a8:	4a13      	ldr	r2, [pc, #76]	; (80102f8 <__sinit+0x6c>)
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80102ae:	42a3      	cmp	r3, r4
 80102b0:	bf04      	itt	eq
 80102b2:	2301      	moveq	r3, #1
 80102b4:	61a3      	streq	r3, [r4, #24]
 80102b6:	4620      	mov	r0, r4
 80102b8:	f000 f820 	bl	80102fc <__sfp>
 80102bc:	6060      	str	r0, [r4, #4]
 80102be:	4620      	mov	r0, r4
 80102c0:	f000 f81c 	bl	80102fc <__sfp>
 80102c4:	60a0      	str	r0, [r4, #8]
 80102c6:	4620      	mov	r0, r4
 80102c8:	f000 f818 	bl	80102fc <__sfp>
 80102cc:	2200      	movs	r2, #0
 80102ce:	60e0      	str	r0, [r4, #12]
 80102d0:	2104      	movs	r1, #4
 80102d2:	6860      	ldr	r0, [r4, #4]
 80102d4:	f7ff ff82 	bl	80101dc <std>
 80102d8:	68a0      	ldr	r0, [r4, #8]
 80102da:	2201      	movs	r2, #1
 80102dc:	2109      	movs	r1, #9
 80102de:	f7ff ff7d 	bl	80101dc <std>
 80102e2:	68e0      	ldr	r0, [r4, #12]
 80102e4:	2202      	movs	r2, #2
 80102e6:	2112      	movs	r1, #18
 80102e8:	f7ff ff78 	bl	80101dc <std>
 80102ec:	2301      	movs	r3, #1
 80102ee:	61a3      	str	r3, [r4, #24]
 80102f0:	e7d2      	b.n	8010298 <__sinit+0xc>
 80102f2:	bf00      	nop
 80102f4:	08021340 	.word	0x08021340
 80102f8:	08010225 	.word	0x08010225

080102fc <__sfp>:
 80102fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102fe:	4607      	mov	r7, r0
 8010300:	f7ff ffac 	bl	801025c <__sfp_lock_acquire>
 8010304:	4b1e      	ldr	r3, [pc, #120]	; (8010380 <__sfp+0x84>)
 8010306:	681e      	ldr	r6, [r3, #0]
 8010308:	69b3      	ldr	r3, [r6, #24]
 801030a:	b913      	cbnz	r3, 8010312 <__sfp+0x16>
 801030c:	4630      	mov	r0, r6
 801030e:	f7ff ffbd 	bl	801028c <__sinit>
 8010312:	3648      	adds	r6, #72	; 0x48
 8010314:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010318:	3b01      	subs	r3, #1
 801031a:	d503      	bpl.n	8010324 <__sfp+0x28>
 801031c:	6833      	ldr	r3, [r6, #0]
 801031e:	b30b      	cbz	r3, 8010364 <__sfp+0x68>
 8010320:	6836      	ldr	r6, [r6, #0]
 8010322:	e7f7      	b.n	8010314 <__sfp+0x18>
 8010324:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010328:	b9d5      	cbnz	r5, 8010360 <__sfp+0x64>
 801032a:	4b16      	ldr	r3, [pc, #88]	; (8010384 <__sfp+0x88>)
 801032c:	60e3      	str	r3, [r4, #12]
 801032e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010332:	6665      	str	r5, [r4, #100]	; 0x64
 8010334:	f000 f859 	bl	80103ea <__retarget_lock_init_recursive>
 8010338:	f7ff ff96 	bl	8010268 <__sfp_lock_release>
 801033c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010340:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010344:	6025      	str	r5, [r4, #0]
 8010346:	61a5      	str	r5, [r4, #24]
 8010348:	2208      	movs	r2, #8
 801034a:	4629      	mov	r1, r5
 801034c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010350:	f7ff fda8 	bl	800fea4 <memset>
 8010354:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010358:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801035c:	4620      	mov	r0, r4
 801035e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010360:	3468      	adds	r4, #104	; 0x68
 8010362:	e7d9      	b.n	8010318 <__sfp+0x1c>
 8010364:	2104      	movs	r1, #4
 8010366:	4638      	mov	r0, r7
 8010368:	f7ff ff62 	bl	8010230 <__sfmoreglue>
 801036c:	4604      	mov	r4, r0
 801036e:	6030      	str	r0, [r6, #0]
 8010370:	2800      	cmp	r0, #0
 8010372:	d1d5      	bne.n	8010320 <__sfp+0x24>
 8010374:	f7ff ff78 	bl	8010268 <__sfp_lock_release>
 8010378:	230c      	movs	r3, #12
 801037a:	603b      	str	r3, [r7, #0]
 801037c:	e7ee      	b.n	801035c <__sfp+0x60>
 801037e:	bf00      	nop
 8010380:	08021340 	.word	0x08021340
 8010384:	ffff0001 	.word	0xffff0001

08010388 <fiprintf>:
 8010388:	b40e      	push	{r1, r2, r3}
 801038a:	b503      	push	{r0, r1, lr}
 801038c:	4601      	mov	r1, r0
 801038e:	ab03      	add	r3, sp, #12
 8010390:	4805      	ldr	r0, [pc, #20]	; (80103a8 <fiprintf+0x20>)
 8010392:	f853 2b04 	ldr.w	r2, [r3], #4
 8010396:	6800      	ldr	r0, [r0, #0]
 8010398:	9301      	str	r3, [sp, #4]
 801039a:	f000 fa61 	bl	8010860 <_vfiprintf_r>
 801039e:	b002      	add	sp, #8
 80103a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80103a4:	b003      	add	sp, #12
 80103a6:	4770      	bx	lr
 80103a8:	20000028 	.word	0x20000028

080103ac <_fwalk_reent>:
 80103ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103b0:	4606      	mov	r6, r0
 80103b2:	4688      	mov	r8, r1
 80103b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80103b8:	2700      	movs	r7, #0
 80103ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80103be:	f1b9 0901 	subs.w	r9, r9, #1
 80103c2:	d505      	bpl.n	80103d0 <_fwalk_reent+0x24>
 80103c4:	6824      	ldr	r4, [r4, #0]
 80103c6:	2c00      	cmp	r4, #0
 80103c8:	d1f7      	bne.n	80103ba <_fwalk_reent+0xe>
 80103ca:	4638      	mov	r0, r7
 80103cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103d0:	89ab      	ldrh	r3, [r5, #12]
 80103d2:	2b01      	cmp	r3, #1
 80103d4:	d907      	bls.n	80103e6 <_fwalk_reent+0x3a>
 80103d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80103da:	3301      	adds	r3, #1
 80103dc:	d003      	beq.n	80103e6 <_fwalk_reent+0x3a>
 80103de:	4629      	mov	r1, r5
 80103e0:	4630      	mov	r0, r6
 80103e2:	47c0      	blx	r8
 80103e4:	4307      	orrs	r7, r0
 80103e6:	3568      	adds	r5, #104	; 0x68
 80103e8:	e7e9      	b.n	80103be <_fwalk_reent+0x12>

080103ea <__retarget_lock_init_recursive>:
 80103ea:	4770      	bx	lr

080103ec <__retarget_lock_acquire_recursive>:
 80103ec:	4770      	bx	lr

080103ee <__retarget_lock_release_recursive>:
 80103ee:	4770      	bx	lr

080103f0 <malloc>:
 80103f0:	4b02      	ldr	r3, [pc, #8]	; (80103fc <malloc+0xc>)
 80103f2:	4601      	mov	r1, r0
 80103f4:	6818      	ldr	r0, [r3, #0]
 80103f6:	f000 b853 	b.w	80104a0 <_malloc_r>
 80103fa:	bf00      	nop
 80103fc:	20000028 	.word	0x20000028

08010400 <_free_r>:
 8010400:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010402:	2900      	cmp	r1, #0
 8010404:	d048      	beq.n	8010498 <_free_r+0x98>
 8010406:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801040a:	9001      	str	r0, [sp, #4]
 801040c:	2b00      	cmp	r3, #0
 801040e:	f1a1 0404 	sub.w	r4, r1, #4
 8010412:	bfb8      	it	lt
 8010414:	18e4      	addlt	r4, r4, r3
 8010416:	f000 ff5d 	bl	80112d4 <__malloc_lock>
 801041a:	4a20      	ldr	r2, [pc, #128]	; (801049c <_free_r+0x9c>)
 801041c:	9801      	ldr	r0, [sp, #4]
 801041e:	6813      	ldr	r3, [r2, #0]
 8010420:	4615      	mov	r5, r2
 8010422:	b933      	cbnz	r3, 8010432 <_free_r+0x32>
 8010424:	6063      	str	r3, [r4, #4]
 8010426:	6014      	str	r4, [r2, #0]
 8010428:	b003      	add	sp, #12
 801042a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801042e:	f000 bf57 	b.w	80112e0 <__malloc_unlock>
 8010432:	42a3      	cmp	r3, r4
 8010434:	d90b      	bls.n	801044e <_free_r+0x4e>
 8010436:	6821      	ldr	r1, [r4, #0]
 8010438:	1862      	adds	r2, r4, r1
 801043a:	4293      	cmp	r3, r2
 801043c:	bf04      	itt	eq
 801043e:	681a      	ldreq	r2, [r3, #0]
 8010440:	685b      	ldreq	r3, [r3, #4]
 8010442:	6063      	str	r3, [r4, #4]
 8010444:	bf04      	itt	eq
 8010446:	1852      	addeq	r2, r2, r1
 8010448:	6022      	streq	r2, [r4, #0]
 801044a:	602c      	str	r4, [r5, #0]
 801044c:	e7ec      	b.n	8010428 <_free_r+0x28>
 801044e:	461a      	mov	r2, r3
 8010450:	685b      	ldr	r3, [r3, #4]
 8010452:	b10b      	cbz	r3, 8010458 <_free_r+0x58>
 8010454:	42a3      	cmp	r3, r4
 8010456:	d9fa      	bls.n	801044e <_free_r+0x4e>
 8010458:	6811      	ldr	r1, [r2, #0]
 801045a:	1855      	adds	r5, r2, r1
 801045c:	42a5      	cmp	r5, r4
 801045e:	d10b      	bne.n	8010478 <_free_r+0x78>
 8010460:	6824      	ldr	r4, [r4, #0]
 8010462:	4421      	add	r1, r4
 8010464:	1854      	adds	r4, r2, r1
 8010466:	42a3      	cmp	r3, r4
 8010468:	6011      	str	r1, [r2, #0]
 801046a:	d1dd      	bne.n	8010428 <_free_r+0x28>
 801046c:	681c      	ldr	r4, [r3, #0]
 801046e:	685b      	ldr	r3, [r3, #4]
 8010470:	6053      	str	r3, [r2, #4]
 8010472:	4421      	add	r1, r4
 8010474:	6011      	str	r1, [r2, #0]
 8010476:	e7d7      	b.n	8010428 <_free_r+0x28>
 8010478:	d902      	bls.n	8010480 <_free_r+0x80>
 801047a:	230c      	movs	r3, #12
 801047c:	6003      	str	r3, [r0, #0]
 801047e:	e7d3      	b.n	8010428 <_free_r+0x28>
 8010480:	6825      	ldr	r5, [r4, #0]
 8010482:	1961      	adds	r1, r4, r5
 8010484:	428b      	cmp	r3, r1
 8010486:	bf04      	itt	eq
 8010488:	6819      	ldreq	r1, [r3, #0]
 801048a:	685b      	ldreq	r3, [r3, #4]
 801048c:	6063      	str	r3, [r4, #4]
 801048e:	bf04      	itt	eq
 8010490:	1949      	addeq	r1, r1, r5
 8010492:	6021      	streq	r1, [r4, #0]
 8010494:	6054      	str	r4, [r2, #4]
 8010496:	e7c7      	b.n	8010428 <_free_r+0x28>
 8010498:	b003      	add	sp, #12
 801049a:	bd30      	pop	{r4, r5, pc}
 801049c:	20000694 	.word	0x20000694

080104a0 <_malloc_r>:
 80104a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104a2:	1ccd      	adds	r5, r1, #3
 80104a4:	f025 0503 	bic.w	r5, r5, #3
 80104a8:	3508      	adds	r5, #8
 80104aa:	2d0c      	cmp	r5, #12
 80104ac:	bf38      	it	cc
 80104ae:	250c      	movcc	r5, #12
 80104b0:	2d00      	cmp	r5, #0
 80104b2:	4606      	mov	r6, r0
 80104b4:	db01      	blt.n	80104ba <_malloc_r+0x1a>
 80104b6:	42a9      	cmp	r1, r5
 80104b8:	d903      	bls.n	80104c2 <_malloc_r+0x22>
 80104ba:	230c      	movs	r3, #12
 80104bc:	6033      	str	r3, [r6, #0]
 80104be:	2000      	movs	r0, #0
 80104c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104c2:	f000 ff07 	bl	80112d4 <__malloc_lock>
 80104c6:	4921      	ldr	r1, [pc, #132]	; (801054c <_malloc_r+0xac>)
 80104c8:	680a      	ldr	r2, [r1, #0]
 80104ca:	4614      	mov	r4, r2
 80104cc:	b99c      	cbnz	r4, 80104f6 <_malloc_r+0x56>
 80104ce:	4f20      	ldr	r7, [pc, #128]	; (8010550 <_malloc_r+0xb0>)
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	b923      	cbnz	r3, 80104de <_malloc_r+0x3e>
 80104d4:	4621      	mov	r1, r4
 80104d6:	4630      	mov	r0, r6
 80104d8:	f000 fc86 	bl	8010de8 <_sbrk_r>
 80104dc:	6038      	str	r0, [r7, #0]
 80104de:	4629      	mov	r1, r5
 80104e0:	4630      	mov	r0, r6
 80104e2:	f000 fc81 	bl	8010de8 <_sbrk_r>
 80104e6:	1c43      	adds	r3, r0, #1
 80104e8:	d123      	bne.n	8010532 <_malloc_r+0x92>
 80104ea:	230c      	movs	r3, #12
 80104ec:	6033      	str	r3, [r6, #0]
 80104ee:	4630      	mov	r0, r6
 80104f0:	f000 fef6 	bl	80112e0 <__malloc_unlock>
 80104f4:	e7e3      	b.n	80104be <_malloc_r+0x1e>
 80104f6:	6823      	ldr	r3, [r4, #0]
 80104f8:	1b5b      	subs	r3, r3, r5
 80104fa:	d417      	bmi.n	801052c <_malloc_r+0x8c>
 80104fc:	2b0b      	cmp	r3, #11
 80104fe:	d903      	bls.n	8010508 <_malloc_r+0x68>
 8010500:	6023      	str	r3, [r4, #0]
 8010502:	441c      	add	r4, r3
 8010504:	6025      	str	r5, [r4, #0]
 8010506:	e004      	b.n	8010512 <_malloc_r+0x72>
 8010508:	6863      	ldr	r3, [r4, #4]
 801050a:	42a2      	cmp	r2, r4
 801050c:	bf0c      	ite	eq
 801050e:	600b      	streq	r3, [r1, #0]
 8010510:	6053      	strne	r3, [r2, #4]
 8010512:	4630      	mov	r0, r6
 8010514:	f000 fee4 	bl	80112e0 <__malloc_unlock>
 8010518:	f104 000b 	add.w	r0, r4, #11
 801051c:	1d23      	adds	r3, r4, #4
 801051e:	f020 0007 	bic.w	r0, r0, #7
 8010522:	1ac2      	subs	r2, r0, r3
 8010524:	d0cc      	beq.n	80104c0 <_malloc_r+0x20>
 8010526:	1a1b      	subs	r3, r3, r0
 8010528:	50a3      	str	r3, [r4, r2]
 801052a:	e7c9      	b.n	80104c0 <_malloc_r+0x20>
 801052c:	4622      	mov	r2, r4
 801052e:	6864      	ldr	r4, [r4, #4]
 8010530:	e7cc      	b.n	80104cc <_malloc_r+0x2c>
 8010532:	1cc4      	adds	r4, r0, #3
 8010534:	f024 0403 	bic.w	r4, r4, #3
 8010538:	42a0      	cmp	r0, r4
 801053a:	d0e3      	beq.n	8010504 <_malloc_r+0x64>
 801053c:	1a21      	subs	r1, r4, r0
 801053e:	4630      	mov	r0, r6
 8010540:	f000 fc52 	bl	8010de8 <_sbrk_r>
 8010544:	3001      	adds	r0, #1
 8010546:	d1dd      	bne.n	8010504 <_malloc_r+0x64>
 8010548:	e7cf      	b.n	80104ea <_malloc_r+0x4a>
 801054a:	bf00      	nop
 801054c:	20000694 	.word	0x20000694
 8010550:	20000698 	.word	0x20000698

08010554 <__ssputs_r>:
 8010554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010558:	688e      	ldr	r6, [r1, #8]
 801055a:	429e      	cmp	r6, r3
 801055c:	4682      	mov	sl, r0
 801055e:	460c      	mov	r4, r1
 8010560:	4690      	mov	r8, r2
 8010562:	461f      	mov	r7, r3
 8010564:	d838      	bhi.n	80105d8 <__ssputs_r+0x84>
 8010566:	898a      	ldrh	r2, [r1, #12]
 8010568:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801056c:	d032      	beq.n	80105d4 <__ssputs_r+0x80>
 801056e:	6825      	ldr	r5, [r4, #0]
 8010570:	6909      	ldr	r1, [r1, #16]
 8010572:	eba5 0901 	sub.w	r9, r5, r1
 8010576:	6965      	ldr	r5, [r4, #20]
 8010578:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801057c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010580:	3301      	adds	r3, #1
 8010582:	444b      	add	r3, r9
 8010584:	106d      	asrs	r5, r5, #1
 8010586:	429d      	cmp	r5, r3
 8010588:	bf38      	it	cc
 801058a:	461d      	movcc	r5, r3
 801058c:	0553      	lsls	r3, r2, #21
 801058e:	d531      	bpl.n	80105f4 <__ssputs_r+0xa0>
 8010590:	4629      	mov	r1, r5
 8010592:	f7ff ff85 	bl	80104a0 <_malloc_r>
 8010596:	4606      	mov	r6, r0
 8010598:	b950      	cbnz	r0, 80105b0 <__ssputs_r+0x5c>
 801059a:	230c      	movs	r3, #12
 801059c:	f8ca 3000 	str.w	r3, [sl]
 80105a0:	89a3      	ldrh	r3, [r4, #12]
 80105a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105a6:	81a3      	strh	r3, [r4, #12]
 80105a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80105ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105b0:	6921      	ldr	r1, [r4, #16]
 80105b2:	464a      	mov	r2, r9
 80105b4:	f7ff fc4e 	bl	800fe54 <memcpy>
 80105b8:	89a3      	ldrh	r3, [r4, #12]
 80105ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80105be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105c2:	81a3      	strh	r3, [r4, #12]
 80105c4:	6126      	str	r6, [r4, #16]
 80105c6:	6165      	str	r5, [r4, #20]
 80105c8:	444e      	add	r6, r9
 80105ca:	eba5 0509 	sub.w	r5, r5, r9
 80105ce:	6026      	str	r6, [r4, #0]
 80105d0:	60a5      	str	r5, [r4, #8]
 80105d2:	463e      	mov	r6, r7
 80105d4:	42be      	cmp	r6, r7
 80105d6:	d900      	bls.n	80105da <__ssputs_r+0x86>
 80105d8:	463e      	mov	r6, r7
 80105da:	4632      	mov	r2, r6
 80105dc:	6820      	ldr	r0, [r4, #0]
 80105de:	4641      	mov	r1, r8
 80105e0:	f7ff fc46 	bl	800fe70 <memmove>
 80105e4:	68a3      	ldr	r3, [r4, #8]
 80105e6:	6822      	ldr	r2, [r4, #0]
 80105e8:	1b9b      	subs	r3, r3, r6
 80105ea:	4432      	add	r2, r6
 80105ec:	60a3      	str	r3, [r4, #8]
 80105ee:	6022      	str	r2, [r4, #0]
 80105f0:	2000      	movs	r0, #0
 80105f2:	e7db      	b.n	80105ac <__ssputs_r+0x58>
 80105f4:	462a      	mov	r2, r5
 80105f6:	f000 fe79 	bl	80112ec <_realloc_r>
 80105fa:	4606      	mov	r6, r0
 80105fc:	2800      	cmp	r0, #0
 80105fe:	d1e1      	bne.n	80105c4 <__ssputs_r+0x70>
 8010600:	6921      	ldr	r1, [r4, #16]
 8010602:	4650      	mov	r0, sl
 8010604:	f7ff fefc 	bl	8010400 <_free_r>
 8010608:	e7c7      	b.n	801059a <__ssputs_r+0x46>
	...

0801060c <_svfiprintf_r>:
 801060c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010610:	4698      	mov	r8, r3
 8010612:	898b      	ldrh	r3, [r1, #12]
 8010614:	061b      	lsls	r3, r3, #24
 8010616:	b09d      	sub	sp, #116	; 0x74
 8010618:	4607      	mov	r7, r0
 801061a:	460d      	mov	r5, r1
 801061c:	4614      	mov	r4, r2
 801061e:	d50e      	bpl.n	801063e <_svfiprintf_r+0x32>
 8010620:	690b      	ldr	r3, [r1, #16]
 8010622:	b963      	cbnz	r3, 801063e <_svfiprintf_r+0x32>
 8010624:	2140      	movs	r1, #64	; 0x40
 8010626:	f7ff ff3b 	bl	80104a0 <_malloc_r>
 801062a:	6028      	str	r0, [r5, #0]
 801062c:	6128      	str	r0, [r5, #16]
 801062e:	b920      	cbnz	r0, 801063a <_svfiprintf_r+0x2e>
 8010630:	230c      	movs	r3, #12
 8010632:	603b      	str	r3, [r7, #0]
 8010634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010638:	e0d1      	b.n	80107de <_svfiprintf_r+0x1d2>
 801063a:	2340      	movs	r3, #64	; 0x40
 801063c:	616b      	str	r3, [r5, #20]
 801063e:	2300      	movs	r3, #0
 8010640:	9309      	str	r3, [sp, #36]	; 0x24
 8010642:	2320      	movs	r3, #32
 8010644:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010648:	f8cd 800c 	str.w	r8, [sp, #12]
 801064c:	2330      	movs	r3, #48	; 0x30
 801064e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80107f8 <_svfiprintf_r+0x1ec>
 8010652:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010656:	f04f 0901 	mov.w	r9, #1
 801065a:	4623      	mov	r3, r4
 801065c:	469a      	mov	sl, r3
 801065e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010662:	b10a      	cbz	r2, 8010668 <_svfiprintf_r+0x5c>
 8010664:	2a25      	cmp	r2, #37	; 0x25
 8010666:	d1f9      	bne.n	801065c <_svfiprintf_r+0x50>
 8010668:	ebba 0b04 	subs.w	fp, sl, r4
 801066c:	d00b      	beq.n	8010686 <_svfiprintf_r+0x7a>
 801066e:	465b      	mov	r3, fp
 8010670:	4622      	mov	r2, r4
 8010672:	4629      	mov	r1, r5
 8010674:	4638      	mov	r0, r7
 8010676:	f7ff ff6d 	bl	8010554 <__ssputs_r>
 801067a:	3001      	adds	r0, #1
 801067c:	f000 80aa 	beq.w	80107d4 <_svfiprintf_r+0x1c8>
 8010680:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010682:	445a      	add	r2, fp
 8010684:	9209      	str	r2, [sp, #36]	; 0x24
 8010686:	f89a 3000 	ldrb.w	r3, [sl]
 801068a:	2b00      	cmp	r3, #0
 801068c:	f000 80a2 	beq.w	80107d4 <_svfiprintf_r+0x1c8>
 8010690:	2300      	movs	r3, #0
 8010692:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010696:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801069a:	f10a 0a01 	add.w	sl, sl, #1
 801069e:	9304      	str	r3, [sp, #16]
 80106a0:	9307      	str	r3, [sp, #28]
 80106a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80106a6:	931a      	str	r3, [sp, #104]	; 0x68
 80106a8:	4654      	mov	r4, sl
 80106aa:	2205      	movs	r2, #5
 80106ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106b0:	4851      	ldr	r0, [pc, #324]	; (80107f8 <_svfiprintf_r+0x1ec>)
 80106b2:	f7ef fda5 	bl	8000200 <memchr>
 80106b6:	9a04      	ldr	r2, [sp, #16]
 80106b8:	b9d8      	cbnz	r0, 80106f2 <_svfiprintf_r+0xe6>
 80106ba:	06d0      	lsls	r0, r2, #27
 80106bc:	bf44      	itt	mi
 80106be:	2320      	movmi	r3, #32
 80106c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80106c4:	0711      	lsls	r1, r2, #28
 80106c6:	bf44      	itt	mi
 80106c8:	232b      	movmi	r3, #43	; 0x2b
 80106ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80106ce:	f89a 3000 	ldrb.w	r3, [sl]
 80106d2:	2b2a      	cmp	r3, #42	; 0x2a
 80106d4:	d015      	beq.n	8010702 <_svfiprintf_r+0xf6>
 80106d6:	9a07      	ldr	r2, [sp, #28]
 80106d8:	4654      	mov	r4, sl
 80106da:	2000      	movs	r0, #0
 80106dc:	f04f 0c0a 	mov.w	ip, #10
 80106e0:	4621      	mov	r1, r4
 80106e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80106e6:	3b30      	subs	r3, #48	; 0x30
 80106e8:	2b09      	cmp	r3, #9
 80106ea:	d94e      	bls.n	801078a <_svfiprintf_r+0x17e>
 80106ec:	b1b0      	cbz	r0, 801071c <_svfiprintf_r+0x110>
 80106ee:	9207      	str	r2, [sp, #28]
 80106f0:	e014      	b.n	801071c <_svfiprintf_r+0x110>
 80106f2:	eba0 0308 	sub.w	r3, r0, r8
 80106f6:	fa09 f303 	lsl.w	r3, r9, r3
 80106fa:	4313      	orrs	r3, r2
 80106fc:	9304      	str	r3, [sp, #16]
 80106fe:	46a2      	mov	sl, r4
 8010700:	e7d2      	b.n	80106a8 <_svfiprintf_r+0x9c>
 8010702:	9b03      	ldr	r3, [sp, #12]
 8010704:	1d19      	adds	r1, r3, #4
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	9103      	str	r1, [sp, #12]
 801070a:	2b00      	cmp	r3, #0
 801070c:	bfbb      	ittet	lt
 801070e:	425b      	neglt	r3, r3
 8010710:	f042 0202 	orrlt.w	r2, r2, #2
 8010714:	9307      	strge	r3, [sp, #28]
 8010716:	9307      	strlt	r3, [sp, #28]
 8010718:	bfb8      	it	lt
 801071a:	9204      	strlt	r2, [sp, #16]
 801071c:	7823      	ldrb	r3, [r4, #0]
 801071e:	2b2e      	cmp	r3, #46	; 0x2e
 8010720:	d10c      	bne.n	801073c <_svfiprintf_r+0x130>
 8010722:	7863      	ldrb	r3, [r4, #1]
 8010724:	2b2a      	cmp	r3, #42	; 0x2a
 8010726:	d135      	bne.n	8010794 <_svfiprintf_r+0x188>
 8010728:	9b03      	ldr	r3, [sp, #12]
 801072a:	1d1a      	adds	r2, r3, #4
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	9203      	str	r2, [sp, #12]
 8010730:	2b00      	cmp	r3, #0
 8010732:	bfb8      	it	lt
 8010734:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010738:	3402      	adds	r4, #2
 801073a:	9305      	str	r3, [sp, #20]
 801073c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010808 <_svfiprintf_r+0x1fc>
 8010740:	7821      	ldrb	r1, [r4, #0]
 8010742:	2203      	movs	r2, #3
 8010744:	4650      	mov	r0, sl
 8010746:	f7ef fd5b 	bl	8000200 <memchr>
 801074a:	b140      	cbz	r0, 801075e <_svfiprintf_r+0x152>
 801074c:	2340      	movs	r3, #64	; 0x40
 801074e:	eba0 000a 	sub.w	r0, r0, sl
 8010752:	fa03 f000 	lsl.w	r0, r3, r0
 8010756:	9b04      	ldr	r3, [sp, #16]
 8010758:	4303      	orrs	r3, r0
 801075a:	3401      	adds	r4, #1
 801075c:	9304      	str	r3, [sp, #16]
 801075e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010762:	4826      	ldr	r0, [pc, #152]	; (80107fc <_svfiprintf_r+0x1f0>)
 8010764:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010768:	2206      	movs	r2, #6
 801076a:	f7ef fd49 	bl	8000200 <memchr>
 801076e:	2800      	cmp	r0, #0
 8010770:	d038      	beq.n	80107e4 <_svfiprintf_r+0x1d8>
 8010772:	4b23      	ldr	r3, [pc, #140]	; (8010800 <_svfiprintf_r+0x1f4>)
 8010774:	bb1b      	cbnz	r3, 80107be <_svfiprintf_r+0x1b2>
 8010776:	9b03      	ldr	r3, [sp, #12]
 8010778:	3307      	adds	r3, #7
 801077a:	f023 0307 	bic.w	r3, r3, #7
 801077e:	3308      	adds	r3, #8
 8010780:	9303      	str	r3, [sp, #12]
 8010782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010784:	4433      	add	r3, r6
 8010786:	9309      	str	r3, [sp, #36]	; 0x24
 8010788:	e767      	b.n	801065a <_svfiprintf_r+0x4e>
 801078a:	fb0c 3202 	mla	r2, ip, r2, r3
 801078e:	460c      	mov	r4, r1
 8010790:	2001      	movs	r0, #1
 8010792:	e7a5      	b.n	80106e0 <_svfiprintf_r+0xd4>
 8010794:	2300      	movs	r3, #0
 8010796:	3401      	adds	r4, #1
 8010798:	9305      	str	r3, [sp, #20]
 801079a:	4619      	mov	r1, r3
 801079c:	f04f 0c0a 	mov.w	ip, #10
 80107a0:	4620      	mov	r0, r4
 80107a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80107a6:	3a30      	subs	r2, #48	; 0x30
 80107a8:	2a09      	cmp	r2, #9
 80107aa:	d903      	bls.n	80107b4 <_svfiprintf_r+0x1a8>
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d0c5      	beq.n	801073c <_svfiprintf_r+0x130>
 80107b0:	9105      	str	r1, [sp, #20]
 80107b2:	e7c3      	b.n	801073c <_svfiprintf_r+0x130>
 80107b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80107b8:	4604      	mov	r4, r0
 80107ba:	2301      	movs	r3, #1
 80107bc:	e7f0      	b.n	80107a0 <_svfiprintf_r+0x194>
 80107be:	ab03      	add	r3, sp, #12
 80107c0:	9300      	str	r3, [sp, #0]
 80107c2:	462a      	mov	r2, r5
 80107c4:	4b0f      	ldr	r3, [pc, #60]	; (8010804 <_svfiprintf_r+0x1f8>)
 80107c6:	a904      	add	r1, sp, #16
 80107c8:	4638      	mov	r0, r7
 80107ca:	f3af 8000 	nop.w
 80107ce:	1c42      	adds	r2, r0, #1
 80107d0:	4606      	mov	r6, r0
 80107d2:	d1d6      	bne.n	8010782 <_svfiprintf_r+0x176>
 80107d4:	89ab      	ldrh	r3, [r5, #12]
 80107d6:	065b      	lsls	r3, r3, #25
 80107d8:	f53f af2c 	bmi.w	8010634 <_svfiprintf_r+0x28>
 80107dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80107de:	b01d      	add	sp, #116	; 0x74
 80107e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107e4:	ab03      	add	r3, sp, #12
 80107e6:	9300      	str	r3, [sp, #0]
 80107e8:	462a      	mov	r2, r5
 80107ea:	4b06      	ldr	r3, [pc, #24]	; (8010804 <_svfiprintf_r+0x1f8>)
 80107ec:	a904      	add	r1, sp, #16
 80107ee:	4638      	mov	r0, r7
 80107f0:	f000 f9d4 	bl	8010b9c <_printf_i>
 80107f4:	e7eb      	b.n	80107ce <_svfiprintf_r+0x1c2>
 80107f6:	bf00      	nop
 80107f8:	08021458 	.word	0x08021458
 80107fc:	08021462 	.word	0x08021462
 8010800:	00000000 	.word	0x00000000
 8010804:	08010555 	.word	0x08010555
 8010808:	0802145e 	.word	0x0802145e

0801080c <__sfputc_r>:
 801080c:	6893      	ldr	r3, [r2, #8]
 801080e:	3b01      	subs	r3, #1
 8010810:	2b00      	cmp	r3, #0
 8010812:	b410      	push	{r4}
 8010814:	6093      	str	r3, [r2, #8]
 8010816:	da08      	bge.n	801082a <__sfputc_r+0x1e>
 8010818:	6994      	ldr	r4, [r2, #24]
 801081a:	42a3      	cmp	r3, r4
 801081c:	db01      	blt.n	8010822 <__sfputc_r+0x16>
 801081e:	290a      	cmp	r1, #10
 8010820:	d103      	bne.n	801082a <__sfputc_r+0x1e>
 8010822:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010826:	f000 bb33 	b.w	8010e90 <__swbuf_r>
 801082a:	6813      	ldr	r3, [r2, #0]
 801082c:	1c58      	adds	r0, r3, #1
 801082e:	6010      	str	r0, [r2, #0]
 8010830:	7019      	strb	r1, [r3, #0]
 8010832:	4608      	mov	r0, r1
 8010834:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010838:	4770      	bx	lr

0801083a <__sfputs_r>:
 801083a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801083c:	4606      	mov	r6, r0
 801083e:	460f      	mov	r7, r1
 8010840:	4614      	mov	r4, r2
 8010842:	18d5      	adds	r5, r2, r3
 8010844:	42ac      	cmp	r4, r5
 8010846:	d101      	bne.n	801084c <__sfputs_r+0x12>
 8010848:	2000      	movs	r0, #0
 801084a:	e007      	b.n	801085c <__sfputs_r+0x22>
 801084c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010850:	463a      	mov	r2, r7
 8010852:	4630      	mov	r0, r6
 8010854:	f7ff ffda 	bl	801080c <__sfputc_r>
 8010858:	1c43      	adds	r3, r0, #1
 801085a:	d1f3      	bne.n	8010844 <__sfputs_r+0xa>
 801085c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010860 <_vfiprintf_r>:
 8010860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010864:	460d      	mov	r5, r1
 8010866:	b09d      	sub	sp, #116	; 0x74
 8010868:	4614      	mov	r4, r2
 801086a:	4698      	mov	r8, r3
 801086c:	4606      	mov	r6, r0
 801086e:	b118      	cbz	r0, 8010878 <_vfiprintf_r+0x18>
 8010870:	6983      	ldr	r3, [r0, #24]
 8010872:	b90b      	cbnz	r3, 8010878 <_vfiprintf_r+0x18>
 8010874:	f7ff fd0a 	bl	801028c <__sinit>
 8010878:	4b89      	ldr	r3, [pc, #548]	; (8010aa0 <_vfiprintf_r+0x240>)
 801087a:	429d      	cmp	r5, r3
 801087c:	d11b      	bne.n	80108b6 <_vfiprintf_r+0x56>
 801087e:	6875      	ldr	r5, [r6, #4]
 8010880:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010882:	07d9      	lsls	r1, r3, #31
 8010884:	d405      	bmi.n	8010892 <_vfiprintf_r+0x32>
 8010886:	89ab      	ldrh	r3, [r5, #12]
 8010888:	059a      	lsls	r2, r3, #22
 801088a:	d402      	bmi.n	8010892 <_vfiprintf_r+0x32>
 801088c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801088e:	f7ff fdad 	bl	80103ec <__retarget_lock_acquire_recursive>
 8010892:	89ab      	ldrh	r3, [r5, #12]
 8010894:	071b      	lsls	r3, r3, #28
 8010896:	d501      	bpl.n	801089c <_vfiprintf_r+0x3c>
 8010898:	692b      	ldr	r3, [r5, #16]
 801089a:	b9eb      	cbnz	r3, 80108d8 <_vfiprintf_r+0x78>
 801089c:	4629      	mov	r1, r5
 801089e:	4630      	mov	r0, r6
 80108a0:	f000 fb5a 	bl	8010f58 <__swsetup_r>
 80108a4:	b1c0      	cbz	r0, 80108d8 <_vfiprintf_r+0x78>
 80108a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80108a8:	07dc      	lsls	r4, r3, #31
 80108aa:	d50e      	bpl.n	80108ca <_vfiprintf_r+0x6a>
 80108ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80108b0:	b01d      	add	sp, #116	; 0x74
 80108b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108b6:	4b7b      	ldr	r3, [pc, #492]	; (8010aa4 <_vfiprintf_r+0x244>)
 80108b8:	429d      	cmp	r5, r3
 80108ba:	d101      	bne.n	80108c0 <_vfiprintf_r+0x60>
 80108bc:	68b5      	ldr	r5, [r6, #8]
 80108be:	e7df      	b.n	8010880 <_vfiprintf_r+0x20>
 80108c0:	4b79      	ldr	r3, [pc, #484]	; (8010aa8 <_vfiprintf_r+0x248>)
 80108c2:	429d      	cmp	r5, r3
 80108c4:	bf08      	it	eq
 80108c6:	68f5      	ldreq	r5, [r6, #12]
 80108c8:	e7da      	b.n	8010880 <_vfiprintf_r+0x20>
 80108ca:	89ab      	ldrh	r3, [r5, #12]
 80108cc:	0598      	lsls	r0, r3, #22
 80108ce:	d4ed      	bmi.n	80108ac <_vfiprintf_r+0x4c>
 80108d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80108d2:	f7ff fd8c 	bl	80103ee <__retarget_lock_release_recursive>
 80108d6:	e7e9      	b.n	80108ac <_vfiprintf_r+0x4c>
 80108d8:	2300      	movs	r3, #0
 80108da:	9309      	str	r3, [sp, #36]	; 0x24
 80108dc:	2320      	movs	r3, #32
 80108de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80108e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80108e6:	2330      	movs	r3, #48	; 0x30
 80108e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010aac <_vfiprintf_r+0x24c>
 80108ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80108f0:	f04f 0901 	mov.w	r9, #1
 80108f4:	4623      	mov	r3, r4
 80108f6:	469a      	mov	sl, r3
 80108f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80108fc:	b10a      	cbz	r2, 8010902 <_vfiprintf_r+0xa2>
 80108fe:	2a25      	cmp	r2, #37	; 0x25
 8010900:	d1f9      	bne.n	80108f6 <_vfiprintf_r+0x96>
 8010902:	ebba 0b04 	subs.w	fp, sl, r4
 8010906:	d00b      	beq.n	8010920 <_vfiprintf_r+0xc0>
 8010908:	465b      	mov	r3, fp
 801090a:	4622      	mov	r2, r4
 801090c:	4629      	mov	r1, r5
 801090e:	4630      	mov	r0, r6
 8010910:	f7ff ff93 	bl	801083a <__sfputs_r>
 8010914:	3001      	adds	r0, #1
 8010916:	f000 80aa 	beq.w	8010a6e <_vfiprintf_r+0x20e>
 801091a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801091c:	445a      	add	r2, fp
 801091e:	9209      	str	r2, [sp, #36]	; 0x24
 8010920:	f89a 3000 	ldrb.w	r3, [sl]
 8010924:	2b00      	cmp	r3, #0
 8010926:	f000 80a2 	beq.w	8010a6e <_vfiprintf_r+0x20e>
 801092a:	2300      	movs	r3, #0
 801092c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010930:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010934:	f10a 0a01 	add.w	sl, sl, #1
 8010938:	9304      	str	r3, [sp, #16]
 801093a:	9307      	str	r3, [sp, #28]
 801093c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010940:	931a      	str	r3, [sp, #104]	; 0x68
 8010942:	4654      	mov	r4, sl
 8010944:	2205      	movs	r2, #5
 8010946:	f814 1b01 	ldrb.w	r1, [r4], #1
 801094a:	4858      	ldr	r0, [pc, #352]	; (8010aac <_vfiprintf_r+0x24c>)
 801094c:	f7ef fc58 	bl	8000200 <memchr>
 8010950:	9a04      	ldr	r2, [sp, #16]
 8010952:	b9d8      	cbnz	r0, 801098c <_vfiprintf_r+0x12c>
 8010954:	06d1      	lsls	r1, r2, #27
 8010956:	bf44      	itt	mi
 8010958:	2320      	movmi	r3, #32
 801095a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801095e:	0713      	lsls	r3, r2, #28
 8010960:	bf44      	itt	mi
 8010962:	232b      	movmi	r3, #43	; 0x2b
 8010964:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010968:	f89a 3000 	ldrb.w	r3, [sl]
 801096c:	2b2a      	cmp	r3, #42	; 0x2a
 801096e:	d015      	beq.n	801099c <_vfiprintf_r+0x13c>
 8010970:	9a07      	ldr	r2, [sp, #28]
 8010972:	4654      	mov	r4, sl
 8010974:	2000      	movs	r0, #0
 8010976:	f04f 0c0a 	mov.w	ip, #10
 801097a:	4621      	mov	r1, r4
 801097c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010980:	3b30      	subs	r3, #48	; 0x30
 8010982:	2b09      	cmp	r3, #9
 8010984:	d94e      	bls.n	8010a24 <_vfiprintf_r+0x1c4>
 8010986:	b1b0      	cbz	r0, 80109b6 <_vfiprintf_r+0x156>
 8010988:	9207      	str	r2, [sp, #28]
 801098a:	e014      	b.n	80109b6 <_vfiprintf_r+0x156>
 801098c:	eba0 0308 	sub.w	r3, r0, r8
 8010990:	fa09 f303 	lsl.w	r3, r9, r3
 8010994:	4313      	orrs	r3, r2
 8010996:	9304      	str	r3, [sp, #16]
 8010998:	46a2      	mov	sl, r4
 801099a:	e7d2      	b.n	8010942 <_vfiprintf_r+0xe2>
 801099c:	9b03      	ldr	r3, [sp, #12]
 801099e:	1d19      	adds	r1, r3, #4
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	9103      	str	r1, [sp, #12]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	bfbb      	ittet	lt
 80109a8:	425b      	neglt	r3, r3
 80109aa:	f042 0202 	orrlt.w	r2, r2, #2
 80109ae:	9307      	strge	r3, [sp, #28]
 80109b0:	9307      	strlt	r3, [sp, #28]
 80109b2:	bfb8      	it	lt
 80109b4:	9204      	strlt	r2, [sp, #16]
 80109b6:	7823      	ldrb	r3, [r4, #0]
 80109b8:	2b2e      	cmp	r3, #46	; 0x2e
 80109ba:	d10c      	bne.n	80109d6 <_vfiprintf_r+0x176>
 80109bc:	7863      	ldrb	r3, [r4, #1]
 80109be:	2b2a      	cmp	r3, #42	; 0x2a
 80109c0:	d135      	bne.n	8010a2e <_vfiprintf_r+0x1ce>
 80109c2:	9b03      	ldr	r3, [sp, #12]
 80109c4:	1d1a      	adds	r2, r3, #4
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	9203      	str	r2, [sp, #12]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	bfb8      	it	lt
 80109ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80109d2:	3402      	adds	r4, #2
 80109d4:	9305      	str	r3, [sp, #20]
 80109d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010abc <_vfiprintf_r+0x25c>
 80109da:	7821      	ldrb	r1, [r4, #0]
 80109dc:	2203      	movs	r2, #3
 80109de:	4650      	mov	r0, sl
 80109e0:	f7ef fc0e 	bl	8000200 <memchr>
 80109e4:	b140      	cbz	r0, 80109f8 <_vfiprintf_r+0x198>
 80109e6:	2340      	movs	r3, #64	; 0x40
 80109e8:	eba0 000a 	sub.w	r0, r0, sl
 80109ec:	fa03 f000 	lsl.w	r0, r3, r0
 80109f0:	9b04      	ldr	r3, [sp, #16]
 80109f2:	4303      	orrs	r3, r0
 80109f4:	3401      	adds	r4, #1
 80109f6:	9304      	str	r3, [sp, #16]
 80109f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109fc:	482c      	ldr	r0, [pc, #176]	; (8010ab0 <_vfiprintf_r+0x250>)
 80109fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010a02:	2206      	movs	r2, #6
 8010a04:	f7ef fbfc 	bl	8000200 <memchr>
 8010a08:	2800      	cmp	r0, #0
 8010a0a:	d03f      	beq.n	8010a8c <_vfiprintf_r+0x22c>
 8010a0c:	4b29      	ldr	r3, [pc, #164]	; (8010ab4 <_vfiprintf_r+0x254>)
 8010a0e:	bb1b      	cbnz	r3, 8010a58 <_vfiprintf_r+0x1f8>
 8010a10:	9b03      	ldr	r3, [sp, #12]
 8010a12:	3307      	adds	r3, #7
 8010a14:	f023 0307 	bic.w	r3, r3, #7
 8010a18:	3308      	adds	r3, #8
 8010a1a:	9303      	str	r3, [sp, #12]
 8010a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a1e:	443b      	add	r3, r7
 8010a20:	9309      	str	r3, [sp, #36]	; 0x24
 8010a22:	e767      	b.n	80108f4 <_vfiprintf_r+0x94>
 8010a24:	fb0c 3202 	mla	r2, ip, r2, r3
 8010a28:	460c      	mov	r4, r1
 8010a2a:	2001      	movs	r0, #1
 8010a2c:	e7a5      	b.n	801097a <_vfiprintf_r+0x11a>
 8010a2e:	2300      	movs	r3, #0
 8010a30:	3401      	adds	r4, #1
 8010a32:	9305      	str	r3, [sp, #20]
 8010a34:	4619      	mov	r1, r3
 8010a36:	f04f 0c0a 	mov.w	ip, #10
 8010a3a:	4620      	mov	r0, r4
 8010a3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a40:	3a30      	subs	r2, #48	; 0x30
 8010a42:	2a09      	cmp	r2, #9
 8010a44:	d903      	bls.n	8010a4e <_vfiprintf_r+0x1ee>
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d0c5      	beq.n	80109d6 <_vfiprintf_r+0x176>
 8010a4a:	9105      	str	r1, [sp, #20]
 8010a4c:	e7c3      	b.n	80109d6 <_vfiprintf_r+0x176>
 8010a4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010a52:	4604      	mov	r4, r0
 8010a54:	2301      	movs	r3, #1
 8010a56:	e7f0      	b.n	8010a3a <_vfiprintf_r+0x1da>
 8010a58:	ab03      	add	r3, sp, #12
 8010a5a:	9300      	str	r3, [sp, #0]
 8010a5c:	462a      	mov	r2, r5
 8010a5e:	4b16      	ldr	r3, [pc, #88]	; (8010ab8 <_vfiprintf_r+0x258>)
 8010a60:	a904      	add	r1, sp, #16
 8010a62:	4630      	mov	r0, r6
 8010a64:	f3af 8000 	nop.w
 8010a68:	4607      	mov	r7, r0
 8010a6a:	1c78      	adds	r0, r7, #1
 8010a6c:	d1d6      	bne.n	8010a1c <_vfiprintf_r+0x1bc>
 8010a6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010a70:	07d9      	lsls	r1, r3, #31
 8010a72:	d405      	bmi.n	8010a80 <_vfiprintf_r+0x220>
 8010a74:	89ab      	ldrh	r3, [r5, #12]
 8010a76:	059a      	lsls	r2, r3, #22
 8010a78:	d402      	bmi.n	8010a80 <_vfiprintf_r+0x220>
 8010a7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010a7c:	f7ff fcb7 	bl	80103ee <__retarget_lock_release_recursive>
 8010a80:	89ab      	ldrh	r3, [r5, #12]
 8010a82:	065b      	lsls	r3, r3, #25
 8010a84:	f53f af12 	bmi.w	80108ac <_vfiprintf_r+0x4c>
 8010a88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010a8a:	e711      	b.n	80108b0 <_vfiprintf_r+0x50>
 8010a8c:	ab03      	add	r3, sp, #12
 8010a8e:	9300      	str	r3, [sp, #0]
 8010a90:	462a      	mov	r2, r5
 8010a92:	4b09      	ldr	r3, [pc, #36]	; (8010ab8 <_vfiprintf_r+0x258>)
 8010a94:	a904      	add	r1, sp, #16
 8010a96:	4630      	mov	r0, r6
 8010a98:	f000 f880 	bl	8010b9c <_printf_i>
 8010a9c:	e7e4      	b.n	8010a68 <_vfiprintf_r+0x208>
 8010a9e:	bf00      	nop
 8010aa0:	08021418 	.word	0x08021418
 8010aa4:	08021438 	.word	0x08021438
 8010aa8:	080213f8 	.word	0x080213f8
 8010aac:	08021458 	.word	0x08021458
 8010ab0:	08021462 	.word	0x08021462
 8010ab4:	00000000 	.word	0x00000000
 8010ab8:	0801083b 	.word	0x0801083b
 8010abc:	0802145e 	.word	0x0802145e

08010ac0 <_printf_common>:
 8010ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ac4:	4616      	mov	r6, r2
 8010ac6:	4699      	mov	r9, r3
 8010ac8:	688a      	ldr	r2, [r1, #8]
 8010aca:	690b      	ldr	r3, [r1, #16]
 8010acc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010ad0:	4293      	cmp	r3, r2
 8010ad2:	bfb8      	it	lt
 8010ad4:	4613      	movlt	r3, r2
 8010ad6:	6033      	str	r3, [r6, #0]
 8010ad8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010adc:	4607      	mov	r7, r0
 8010ade:	460c      	mov	r4, r1
 8010ae0:	b10a      	cbz	r2, 8010ae6 <_printf_common+0x26>
 8010ae2:	3301      	adds	r3, #1
 8010ae4:	6033      	str	r3, [r6, #0]
 8010ae6:	6823      	ldr	r3, [r4, #0]
 8010ae8:	0699      	lsls	r1, r3, #26
 8010aea:	bf42      	ittt	mi
 8010aec:	6833      	ldrmi	r3, [r6, #0]
 8010aee:	3302      	addmi	r3, #2
 8010af0:	6033      	strmi	r3, [r6, #0]
 8010af2:	6825      	ldr	r5, [r4, #0]
 8010af4:	f015 0506 	ands.w	r5, r5, #6
 8010af8:	d106      	bne.n	8010b08 <_printf_common+0x48>
 8010afa:	f104 0a19 	add.w	sl, r4, #25
 8010afe:	68e3      	ldr	r3, [r4, #12]
 8010b00:	6832      	ldr	r2, [r6, #0]
 8010b02:	1a9b      	subs	r3, r3, r2
 8010b04:	42ab      	cmp	r3, r5
 8010b06:	dc26      	bgt.n	8010b56 <_printf_common+0x96>
 8010b08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010b0c:	1e13      	subs	r3, r2, #0
 8010b0e:	6822      	ldr	r2, [r4, #0]
 8010b10:	bf18      	it	ne
 8010b12:	2301      	movne	r3, #1
 8010b14:	0692      	lsls	r2, r2, #26
 8010b16:	d42b      	bmi.n	8010b70 <_printf_common+0xb0>
 8010b18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010b1c:	4649      	mov	r1, r9
 8010b1e:	4638      	mov	r0, r7
 8010b20:	47c0      	blx	r8
 8010b22:	3001      	adds	r0, #1
 8010b24:	d01e      	beq.n	8010b64 <_printf_common+0xa4>
 8010b26:	6823      	ldr	r3, [r4, #0]
 8010b28:	68e5      	ldr	r5, [r4, #12]
 8010b2a:	6832      	ldr	r2, [r6, #0]
 8010b2c:	f003 0306 	and.w	r3, r3, #6
 8010b30:	2b04      	cmp	r3, #4
 8010b32:	bf08      	it	eq
 8010b34:	1aad      	subeq	r5, r5, r2
 8010b36:	68a3      	ldr	r3, [r4, #8]
 8010b38:	6922      	ldr	r2, [r4, #16]
 8010b3a:	bf0c      	ite	eq
 8010b3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010b40:	2500      	movne	r5, #0
 8010b42:	4293      	cmp	r3, r2
 8010b44:	bfc4      	itt	gt
 8010b46:	1a9b      	subgt	r3, r3, r2
 8010b48:	18ed      	addgt	r5, r5, r3
 8010b4a:	2600      	movs	r6, #0
 8010b4c:	341a      	adds	r4, #26
 8010b4e:	42b5      	cmp	r5, r6
 8010b50:	d11a      	bne.n	8010b88 <_printf_common+0xc8>
 8010b52:	2000      	movs	r0, #0
 8010b54:	e008      	b.n	8010b68 <_printf_common+0xa8>
 8010b56:	2301      	movs	r3, #1
 8010b58:	4652      	mov	r2, sl
 8010b5a:	4649      	mov	r1, r9
 8010b5c:	4638      	mov	r0, r7
 8010b5e:	47c0      	blx	r8
 8010b60:	3001      	adds	r0, #1
 8010b62:	d103      	bne.n	8010b6c <_printf_common+0xac>
 8010b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b6c:	3501      	adds	r5, #1
 8010b6e:	e7c6      	b.n	8010afe <_printf_common+0x3e>
 8010b70:	18e1      	adds	r1, r4, r3
 8010b72:	1c5a      	adds	r2, r3, #1
 8010b74:	2030      	movs	r0, #48	; 0x30
 8010b76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010b7a:	4422      	add	r2, r4
 8010b7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010b80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010b84:	3302      	adds	r3, #2
 8010b86:	e7c7      	b.n	8010b18 <_printf_common+0x58>
 8010b88:	2301      	movs	r3, #1
 8010b8a:	4622      	mov	r2, r4
 8010b8c:	4649      	mov	r1, r9
 8010b8e:	4638      	mov	r0, r7
 8010b90:	47c0      	blx	r8
 8010b92:	3001      	adds	r0, #1
 8010b94:	d0e6      	beq.n	8010b64 <_printf_common+0xa4>
 8010b96:	3601      	adds	r6, #1
 8010b98:	e7d9      	b.n	8010b4e <_printf_common+0x8e>
	...

08010b9c <_printf_i>:
 8010b9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010ba0:	460c      	mov	r4, r1
 8010ba2:	4691      	mov	r9, r2
 8010ba4:	7e27      	ldrb	r7, [r4, #24]
 8010ba6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010ba8:	2f78      	cmp	r7, #120	; 0x78
 8010baa:	4680      	mov	r8, r0
 8010bac:	469a      	mov	sl, r3
 8010bae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010bb2:	d807      	bhi.n	8010bc4 <_printf_i+0x28>
 8010bb4:	2f62      	cmp	r7, #98	; 0x62
 8010bb6:	d80a      	bhi.n	8010bce <_printf_i+0x32>
 8010bb8:	2f00      	cmp	r7, #0
 8010bba:	f000 80d8 	beq.w	8010d6e <_printf_i+0x1d2>
 8010bbe:	2f58      	cmp	r7, #88	; 0x58
 8010bc0:	f000 80a3 	beq.w	8010d0a <_printf_i+0x16e>
 8010bc4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010bc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010bcc:	e03a      	b.n	8010c44 <_printf_i+0xa8>
 8010bce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010bd2:	2b15      	cmp	r3, #21
 8010bd4:	d8f6      	bhi.n	8010bc4 <_printf_i+0x28>
 8010bd6:	a001      	add	r0, pc, #4	; (adr r0, 8010bdc <_printf_i+0x40>)
 8010bd8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010bdc:	08010c35 	.word	0x08010c35
 8010be0:	08010c49 	.word	0x08010c49
 8010be4:	08010bc5 	.word	0x08010bc5
 8010be8:	08010bc5 	.word	0x08010bc5
 8010bec:	08010bc5 	.word	0x08010bc5
 8010bf0:	08010bc5 	.word	0x08010bc5
 8010bf4:	08010c49 	.word	0x08010c49
 8010bf8:	08010bc5 	.word	0x08010bc5
 8010bfc:	08010bc5 	.word	0x08010bc5
 8010c00:	08010bc5 	.word	0x08010bc5
 8010c04:	08010bc5 	.word	0x08010bc5
 8010c08:	08010d55 	.word	0x08010d55
 8010c0c:	08010c79 	.word	0x08010c79
 8010c10:	08010d37 	.word	0x08010d37
 8010c14:	08010bc5 	.word	0x08010bc5
 8010c18:	08010bc5 	.word	0x08010bc5
 8010c1c:	08010d77 	.word	0x08010d77
 8010c20:	08010bc5 	.word	0x08010bc5
 8010c24:	08010c79 	.word	0x08010c79
 8010c28:	08010bc5 	.word	0x08010bc5
 8010c2c:	08010bc5 	.word	0x08010bc5
 8010c30:	08010d3f 	.word	0x08010d3f
 8010c34:	680b      	ldr	r3, [r1, #0]
 8010c36:	1d1a      	adds	r2, r3, #4
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	600a      	str	r2, [r1, #0]
 8010c3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010c40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010c44:	2301      	movs	r3, #1
 8010c46:	e0a3      	b.n	8010d90 <_printf_i+0x1f4>
 8010c48:	6825      	ldr	r5, [r4, #0]
 8010c4a:	6808      	ldr	r0, [r1, #0]
 8010c4c:	062e      	lsls	r6, r5, #24
 8010c4e:	f100 0304 	add.w	r3, r0, #4
 8010c52:	d50a      	bpl.n	8010c6a <_printf_i+0xce>
 8010c54:	6805      	ldr	r5, [r0, #0]
 8010c56:	600b      	str	r3, [r1, #0]
 8010c58:	2d00      	cmp	r5, #0
 8010c5a:	da03      	bge.n	8010c64 <_printf_i+0xc8>
 8010c5c:	232d      	movs	r3, #45	; 0x2d
 8010c5e:	426d      	negs	r5, r5
 8010c60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c64:	485e      	ldr	r0, [pc, #376]	; (8010de0 <_printf_i+0x244>)
 8010c66:	230a      	movs	r3, #10
 8010c68:	e019      	b.n	8010c9e <_printf_i+0x102>
 8010c6a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010c6e:	6805      	ldr	r5, [r0, #0]
 8010c70:	600b      	str	r3, [r1, #0]
 8010c72:	bf18      	it	ne
 8010c74:	b22d      	sxthne	r5, r5
 8010c76:	e7ef      	b.n	8010c58 <_printf_i+0xbc>
 8010c78:	680b      	ldr	r3, [r1, #0]
 8010c7a:	6825      	ldr	r5, [r4, #0]
 8010c7c:	1d18      	adds	r0, r3, #4
 8010c7e:	6008      	str	r0, [r1, #0]
 8010c80:	0628      	lsls	r0, r5, #24
 8010c82:	d501      	bpl.n	8010c88 <_printf_i+0xec>
 8010c84:	681d      	ldr	r5, [r3, #0]
 8010c86:	e002      	b.n	8010c8e <_printf_i+0xf2>
 8010c88:	0669      	lsls	r1, r5, #25
 8010c8a:	d5fb      	bpl.n	8010c84 <_printf_i+0xe8>
 8010c8c:	881d      	ldrh	r5, [r3, #0]
 8010c8e:	4854      	ldr	r0, [pc, #336]	; (8010de0 <_printf_i+0x244>)
 8010c90:	2f6f      	cmp	r7, #111	; 0x6f
 8010c92:	bf0c      	ite	eq
 8010c94:	2308      	moveq	r3, #8
 8010c96:	230a      	movne	r3, #10
 8010c98:	2100      	movs	r1, #0
 8010c9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010c9e:	6866      	ldr	r6, [r4, #4]
 8010ca0:	60a6      	str	r6, [r4, #8]
 8010ca2:	2e00      	cmp	r6, #0
 8010ca4:	bfa2      	ittt	ge
 8010ca6:	6821      	ldrge	r1, [r4, #0]
 8010ca8:	f021 0104 	bicge.w	r1, r1, #4
 8010cac:	6021      	strge	r1, [r4, #0]
 8010cae:	b90d      	cbnz	r5, 8010cb4 <_printf_i+0x118>
 8010cb0:	2e00      	cmp	r6, #0
 8010cb2:	d04d      	beq.n	8010d50 <_printf_i+0x1b4>
 8010cb4:	4616      	mov	r6, r2
 8010cb6:	fbb5 f1f3 	udiv	r1, r5, r3
 8010cba:	fb03 5711 	mls	r7, r3, r1, r5
 8010cbe:	5dc7      	ldrb	r7, [r0, r7]
 8010cc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010cc4:	462f      	mov	r7, r5
 8010cc6:	42bb      	cmp	r3, r7
 8010cc8:	460d      	mov	r5, r1
 8010cca:	d9f4      	bls.n	8010cb6 <_printf_i+0x11a>
 8010ccc:	2b08      	cmp	r3, #8
 8010cce:	d10b      	bne.n	8010ce8 <_printf_i+0x14c>
 8010cd0:	6823      	ldr	r3, [r4, #0]
 8010cd2:	07df      	lsls	r7, r3, #31
 8010cd4:	d508      	bpl.n	8010ce8 <_printf_i+0x14c>
 8010cd6:	6923      	ldr	r3, [r4, #16]
 8010cd8:	6861      	ldr	r1, [r4, #4]
 8010cda:	4299      	cmp	r1, r3
 8010cdc:	bfde      	ittt	le
 8010cde:	2330      	movle	r3, #48	; 0x30
 8010ce0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010ce4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8010ce8:	1b92      	subs	r2, r2, r6
 8010cea:	6122      	str	r2, [r4, #16]
 8010cec:	f8cd a000 	str.w	sl, [sp]
 8010cf0:	464b      	mov	r3, r9
 8010cf2:	aa03      	add	r2, sp, #12
 8010cf4:	4621      	mov	r1, r4
 8010cf6:	4640      	mov	r0, r8
 8010cf8:	f7ff fee2 	bl	8010ac0 <_printf_common>
 8010cfc:	3001      	adds	r0, #1
 8010cfe:	d14c      	bne.n	8010d9a <_printf_i+0x1fe>
 8010d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010d04:	b004      	add	sp, #16
 8010d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d0a:	4835      	ldr	r0, [pc, #212]	; (8010de0 <_printf_i+0x244>)
 8010d0c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010d10:	6823      	ldr	r3, [r4, #0]
 8010d12:	680e      	ldr	r6, [r1, #0]
 8010d14:	061f      	lsls	r7, r3, #24
 8010d16:	f856 5b04 	ldr.w	r5, [r6], #4
 8010d1a:	600e      	str	r6, [r1, #0]
 8010d1c:	d514      	bpl.n	8010d48 <_printf_i+0x1ac>
 8010d1e:	07d9      	lsls	r1, r3, #31
 8010d20:	bf44      	itt	mi
 8010d22:	f043 0320 	orrmi.w	r3, r3, #32
 8010d26:	6023      	strmi	r3, [r4, #0]
 8010d28:	b91d      	cbnz	r5, 8010d32 <_printf_i+0x196>
 8010d2a:	6823      	ldr	r3, [r4, #0]
 8010d2c:	f023 0320 	bic.w	r3, r3, #32
 8010d30:	6023      	str	r3, [r4, #0]
 8010d32:	2310      	movs	r3, #16
 8010d34:	e7b0      	b.n	8010c98 <_printf_i+0xfc>
 8010d36:	6823      	ldr	r3, [r4, #0]
 8010d38:	f043 0320 	orr.w	r3, r3, #32
 8010d3c:	6023      	str	r3, [r4, #0]
 8010d3e:	2378      	movs	r3, #120	; 0x78
 8010d40:	4828      	ldr	r0, [pc, #160]	; (8010de4 <_printf_i+0x248>)
 8010d42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010d46:	e7e3      	b.n	8010d10 <_printf_i+0x174>
 8010d48:	065e      	lsls	r6, r3, #25
 8010d4a:	bf48      	it	mi
 8010d4c:	b2ad      	uxthmi	r5, r5
 8010d4e:	e7e6      	b.n	8010d1e <_printf_i+0x182>
 8010d50:	4616      	mov	r6, r2
 8010d52:	e7bb      	b.n	8010ccc <_printf_i+0x130>
 8010d54:	680b      	ldr	r3, [r1, #0]
 8010d56:	6826      	ldr	r6, [r4, #0]
 8010d58:	6960      	ldr	r0, [r4, #20]
 8010d5a:	1d1d      	adds	r5, r3, #4
 8010d5c:	600d      	str	r5, [r1, #0]
 8010d5e:	0635      	lsls	r5, r6, #24
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	d501      	bpl.n	8010d68 <_printf_i+0x1cc>
 8010d64:	6018      	str	r0, [r3, #0]
 8010d66:	e002      	b.n	8010d6e <_printf_i+0x1d2>
 8010d68:	0671      	lsls	r1, r6, #25
 8010d6a:	d5fb      	bpl.n	8010d64 <_printf_i+0x1c8>
 8010d6c:	8018      	strh	r0, [r3, #0]
 8010d6e:	2300      	movs	r3, #0
 8010d70:	6123      	str	r3, [r4, #16]
 8010d72:	4616      	mov	r6, r2
 8010d74:	e7ba      	b.n	8010cec <_printf_i+0x150>
 8010d76:	680b      	ldr	r3, [r1, #0]
 8010d78:	1d1a      	adds	r2, r3, #4
 8010d7a:	600a      	str	r2, [r1, #0]
 8010d7c:	681e      	ldr	r6, [r3, #0]
 8010d7e:	6862      	ldr	r2, [r4, #4]
 8010d80:	2100      	movs	r1, #0
 8010d82:	4630      	mov	r0, r6
 8010d84:	f7ef fa3c 	bl	8000200 <memchr>
 8010d88:	b108      	cbz	r0, 8010d8e <_printf_i+0x1f2>
 8010d8a:	1b80      	subs	r0, r0, r6
 8010d8c:	6060      	str	r0, [r4, #4]
 8010d8e:	6863      	ldr	r3, [r4, #4]
 8010d90:	6123      	str	r3, [r4, #16]
 8010d92:	2300      	movs	r3, #0
 8010d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010d98:	e7a8      	b.n	8010cec <_printf_i+0x150>
 8010d9a:	6923      	ldr	r3, [r4, #16]
 8010d9c:	4632      	mov	r2, r6
 8010d9e:	4649      	mov	r1, r9
 8010da0:	4640      	mov	r0, r8
 8010da2:	47d0      	blx	sl
 8010da4:	3001      	adds	r0, #1
 8010da6:	d0ab      	beq.n	8010d00 <_printf_i+0x164>
 8010da8:	6823      	ldr	r3, [r4, #0]
 8010daa:	079b      	lsls	r3, r3, #30
 8010dac:	d413      	bmi.n	8010dd6 <_printf_i+0x23a>
 8010dae:	68e0      	ldr	r0, [r4, #12]
 8010db0:	9b03      	ldr	r3, [sp, #12]
 8010db2:	4298      	cmp	r0, r3
 8010db4:	bfb8      	it	lt
 8010db6:	4618      	movlt	r0, r3
 8010db8:	e7a4      	b.n	8010d04 <_printf_i+0x168>
 8010dba:	2301      	movs	r3, #1
 8010dbc:	4632      	mov	r2, r6
 8010dbe:	4649      	mov	r1, r9
 8010dc0:	4640      	mov	r0, r8
 8010dc2:	47d0      	blx	sl
 8010dc4:	3001      	adds	r0, #1
 8010dc6:	d09b      	beq.n	8010d00 <_printf_i+0x164>
 8010dc8:	3501      	adds	r5, #1
 8010dca:	68e3      	ldr	r3, [r4, #12]
 8010dcc:	9903      	ldr	r1, [sp, #12]
 8010dce:	1a5b      	subs	r3, r3, r1
 8010dd0:	42ab      	cmp	r3, r5
 8010dd2:	dcf2      	bgt.n	8010dba <_printf_i+0x21e>
 8010dd4:	e7eb      	b.n	8010dae <_printf_i+0x212>
 8010dd6:	2500      	movs	r5, #0
 8010dd8:	f104 0619 	add.w	r6, r4, #25
 8010ddc:	e7f5      	b.n	8010dca <_printf_i+0x22e>
 8010dde:	bf00      	nop
 8010de0:	08021469 	.word	0x08021469
 8010de4:	0802147a 	.word	0x0802147a

08010de8 <_sbrk_r>:
 8010de8:	b538      	push	{r3, r4, r5, lr}
 8010dea:	4d06      	ldr	r5, [pc, #24]	; (8010e04 <_sbrk_r+0x1c>)
 8010dec:	2300      	movs	r3, #0
 8010dee:	4604      	mov	r4, r0
 8010df0:	4608      	mov	r0, r1
 8010df2:	602b      	str	r3, [r5, #0]
 8010df4:	f7ef fff2 	bl	8000ddc <_sbrk>
 8010df8:	1c43      	adds	r3, r0, #1
 8010dfa:	d102      	bne.n	8010e02 <_sbrk_r+0x1a>
 8010dfc:	682b      	ldr	r3, [r5, #0]
 8010dfe:	b103      	cbz	r3, 8010e02 <_sbrk_r+0x1a>
 8010e00:	6023      	str	r3, [r4, #0]
 8010e02:	bd38      	pop	{r3, r4, r5, pc}
 8010e04:	20006d68 	.word	0x20006d68

08010e08 <__sread>:
 8010e08:	b510      	push	{r4, lr}
 8010e0a:	460c      	mov	r4, r1
 8010e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e10:	f000 fa92 	bl	8011338 <_read_r>
 8010e14:	2800      	cmp	r0, #0
 8010e16:	bfab      	itete	ge
 8010e18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010e1a:	89a3      	ldrhlt	r3, [r4, #12]
 8010e1c:	181b      	addge	r3, r3, r0
 8010e1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010e22:	bfac      	ite	ge
 8010e24:	6563      	strge	r3, [r4, #84]	; 0x54
 8010e26:	81a3      	strhlt	r3, [r4, #12]
 8010e28:	bd10      	pop	{r4, pc}

08010e2a <__swrite>:
 8010e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e2e:	461f      	mov	r7, r3
 8010e30:	898b      	ldrh	r3, [r1, #12]
 8010e32:	05db      	lsls	r3, r3, #23
 8010e34:	4605      	mov	r5, r0
 8010e36:	460c      	mov	r4, r1
 8010e38:	4616      	mov	r6, r2
 8010e3a:	d505      	bpl.n	8010e48 <__swrite+0x1e>
 8010e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e40:	2302      	movs	r3, #2
 8010e42:	2200      	movs	r2, #0
 8010e44:	f000 f9d0 	bl	80111e8 <_lseek_r>
 8010e48:	89a3      	ldrh	r3, [r4, #12]
 8010e4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010e52:	81a3      	strh	r3, [r4, #12]
 8010e54:	4632      	mov	r2, r6
 8010e56:	463b      	mov	r3, r7
 8010e58:	4628      	mov	r0, r5
 8010e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e5e:	f000 b869 	b.w	8010f34 <_write_r>

08010e62 <__sseek>:
 8010e62:	b510      	push	{r4, lr}
 8010e64:	460c      	mov	r4, r1
 8010e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e6a:	f000 f9bd 	bl	80111e8 <_lseek_r>
 8010e6e:	1c43      	adds	r3, r0, #1
 8010e70:	89a3      	ldrh	r3, [r4, #12]
 8010e72:	bf15      	itete	ne
 8010e74:	6560      	strne	r0, [r4, #84]	; 0x54
 8010e76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010e7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010e7e:	81a3      	strheq	r3, [r4, #12]
 8010e80:	bf18      	it	ne
 8010e82:	81a3      	strhne	r3, [r4, #12]
 8010e84:	bd10      	pop	{r4, pc}

08010e86 <__sclose>:
 8010e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e8a:	f000 b8db 	b.w	8011044 <_close_r>
	...

08010e90 <__swbuf_r>:
 8010e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e92:	460e      	mov	r6, r1
 8010e94:	4614      	mov	r4, r2
 8010e96:	4605      	mov	r5, r0
 8010e98:	b118      	cbz	r0, 8010ea2 <__swbuf_r+0x12>
 8010e9a:	6983      	ldr	r3, [r0, #24]
 8010e9c:	b90b      	cbnz	r3, 8010ea2 <__swbuf_r+0x12>
 8010e9e:	f7ff f9f5 	bl	801028c <__sinit>
 8010ea2:	4b21      	ldr	r3, [pc, #132]	; (8010f28 <__swbuf_r+0x98>)
 8010ea4:	429c      	cmp	r4, r3
 8010ea6:	d12b      	bne.n	8010f00 <__swbuf_r+0x70>
 8010ea8:	686c      	ldr	r4, [r5, #4]
 8010eaa:	69a3      	ldr	r3, [r4, #24]
 8010eac:	60a3      	str	r3, [r4, #8]
 8010eae:	89a3      	ldrh	r3, [r4, #12]
 8010eb0:	071a      	lsls	r2, r3, #28
 8010eb2:	d52f      	bpl.n	8010f14 <__swbuf_r+0x84>
 8010eb4:	6923      	ldr	r3, [r4, #16]
 8010eb6:	b36b      	cbz	r3, 8010f14 <__swbuf_r+0x84>
 8010eb8:	6923      	ldr	r3, [r4, #16]
 8010eba:	6820      	ldr	r0, [r4, #0]
 8010ebc:	1ac0      	subs	r0, r0, r3
 8010ebe:	6963      	ldr	r3, [r4, #20]
 8010ec0:	b2f6      	uxtb	r6, r6
 8010ec2:	4283      	cmp	r3, r0
 8010ec4:	4637      	mov	r7, r6
 8010ec6:	dc04      	bgt.n	8010ed2 <__swbuf_r+0x42>
 8010ec8:	4621      	mov	r1, r4
 8010eca:	4628      	mov	r0, r5
 8010ecc:	f000 f950 	bl	8011170 <_fflush_r>
 8010ed0:	bb30      	cbnz	r0, 8010f20 <__swbuf_r+0x90>
 8010ed2:	68a3      	ldr	r3, [r4, #8]
 8010ed4:	3b01      	subs	r3, #1
 8010ed6:	60a3      	str	r3, [r4, #8]
 8010ed8:	6823      	ldr	r3, [r4, #0]
 8010eda:	1c5a      	adds	r2, r3, #1
 8010edc:	6022      	str	r2, [r4, #0]
 8010ede:	701e      	strb	r6, [r3, #0]
 8010ee0:	6963      	ldr	r3, [r4, #20]
 8010ee2:	3001      	adds	r0, #1
 8010ee4:	4283      	cmp	r3, r0
 8010ee6:	d004      	beq.n	8010ef2 <__swbuf_r+0x62>
 8010ee8:	89a3      	ldrh	r3, [r4, #12]
 8010eea:	07db      	lsls	r3, r3, #31
 8010eec:	d506      	bpl.n	8010efc <__swbuf_r+0x6c>
 8010eee:	2e0a      	cmp	r6, #10
 8010ef0:	d104      	bne.n	8010efc <__swbuf_r+0x6c>
 8010ef2:	4621      	mov	r1, r4
 8010ef4:	4628      	mov	r0, r5
 8010ef6:	f000 f93b 	bl	8011170 <_fflush_r>
 8010efa:	b988      	cbnz	r0, 8010f20 <__swbuf_r+0x90>
 8010efc:	4638      	mov	r0, r7
 8010efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f00:	4b0a      	ldr	r3, [pc, #40]	; (8010f2c <__swbuf_r+0x9c>)
 8010f02:	429c      	cmp	r4, r3
 8010f04:	d101      	bne.n	8010f0a <__swbuf_r+0x7a>
 8010f06:	68ac      	ldr	r4, [r5, #8]
 8010f08:	e7cf      	b.n	8010eaa <__swbuf_r+0x1a>
 8010f0a:	4b09      	ldr	r3, [pc, #36]	; (8010f30 <__swbuf_r+0xa0>)
 8010f0c:	429c      	cmp	r4, r3
 8010f0e:	bf08      	it	eq
 8010f10:	68ec      	ldreq	r4, [r5, #12]
 8010f12:	e7ca      	b.n	8010eaa <__swbuf_r+0x1a>
 8010f14:	4621      	mov	r1, r4
 8010f16:	4628      	mov	r0, r5
 8010f18:	f000 f81e 	bl	8010f58 <__swsetup_r>
 8010f1c:	2800      	cmp	r0, #0
 8010f1e:	d0cb      	beq.n	8010eb8 <__swbuf_r+0x28>
 8010f20:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010f24:	e7ea      	b.n	8010efc <__swbuf_r+0x6c>
 8010f26:	bf00      	nop
 8010f28:	08021418 	.word	0x08021418
 8010f2c:	08021438 	.word	0x08021438
 8010f30:	080213f8 	.word	0x080213f8

08010f34 <_write_r>:
 8010f34:	b538      	push	{r3, r4, r5, lr}
 8010f36:	4d07      	ldr	r5, [pc, #28]	; (8010f54 <_write_r+0x20>)
 8010f38:	4604      	mov	r4, r0
 8010f3a:	4608      	mov	r0, r1
 8010f3c:	4611      	mov	r1, r2
 8010f3e:	2200      	movs	r2, #0
 8010f40:	602a      	str	r2, [r5, #0]
 8010f42:	461a      	mov	r2, r3
 8010f44:	f7ef fef9 	bl	8000d3a <_write>
 8010f48:	1c43      	adds	r3, r0, #1
 8010f4a:	d102      	bne.n	8010f52 <_write_r+0x1e>
 8010f4c:	682b      	ldr	r3, [r5, #0]
 8010f4e:	b103      	cbz	r3, 8010f52 <_write_r+0x1e>
 8010f50:	6023      	str	r3, [r4, #0]
 8010f52:	bd38      	pop	{r3, r4, r5, pc}
 8010f54:	20006d68 	.word	0x20006d68

08010f58 <__swsetup_r>:
 8010f58:	4b32      	ldr	r3, [pc, #200]	; (8011024 <__swsetup_r+0xcc>)
 8010f5a:	b570      	push	{r4, r5, r6, lr}
 8010f5c:	681d      	ldr	r5, [r3, #0]
 8010f5e:	4606      	mov	r6, r0
 8010f60:	460c      	mov	r4, r1
 8010f62:	b125      	cbz	r5, 8010f6e <__swsetup_r+0x16>
 8010f64:	69ab      	ldr	r3, [r5, #24]
 8010f66:	b913      	cbnz	r3, 8010f6e <__swsetup_r+0x16>
 8010f68:	4628      	mov	r0, r5
 8010f6a:	f7ff f98f 	bl	801028c <__sinit>
 8010f6e:	4b2e      	ldr	r3, [pc, #184]	; (8011028 <__swsetup_r+0xd0>)
 8010f70:	429c      	cmp	r4, r3
 8010f72:	d10f      	bne.n	8010f94 <__swsetup_r+0x3c>
 8010f74:	686c      	ldr	r4, [r5, #4]
 8010f76:	89a3      	ldrh	r3, [r4, #12]
 8010f78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010f7c:	0719      	lsls	r1, r3, #28
 8010f7e:	d42c      	bmi.n	8010fda <__swsetup_r+0x82>
 8010f80:	06dd      	lsls	r5, r3, #27
 8010f82:	d411      	bmi.n	8010fa8 <__swsetup_r+0x50>
 8010f84:	2309      	movs	r3, #9
 8010f86:	6033      	str	r3, [r6, #0]
 8010f88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010f8c:	81a3      	strh	r3, [r4, #12]
 8010f8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f92:	e03e      	b.n	8011012 <__swsetup_r+0xba>
 8010f94:	4b25      	ldr	r3, [pc, #148]	; (801102c <__swsetup_r+0xd4>)
 8010f96:	429c      	cmp	r4, r3
 8010f98:	d101      	bne.n	8010f9e <__swsetup_r+0x46>
 8010f9a:	68ac      	ldr	r4, [r5, #8]
 8010f9c:	e7eb      	b.n	8010f76 <__swsetup_r+0x1e>
 8010f9e:	4b24      	ldr	r3, [pc, #144]	; (8011030 <__swsetup_r+0xd8>)
 8010fa0:	429c      	cmp	r4, r3
 8010fa2:	bf08      	it	eq
 8010fa4:	68ec      	ldreq	r4, [r5, #12]
 8010fa6:	e7e6      	b.n	8010f76 <__swsetup_r+0x1e>
 8010fa8:	0758      	lsls	r0, r3, #29
 8010faa:	d512      	bpl.n	8010fd2 <__swsetup_r+0x7a>
 8010fac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010fae:	b141      	cbz	r1, 8010fc2 <__swsetup_r+0x6a>
 8010fb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010fb4:	4299      	cmp	r1, r3
 8010fb6:	d002      	beq.n	8010fbe <__swsetup_r+0x66>
 8010fb8:	4630      	mov	r0, r6
 8010fba:	f7ff fa21 	bl	8010400 <_free_r>
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	6363      	str	r3, [r4, #52]	; 0x34
 8010fc2:	89a3      	ldrh	r3, [r4, #12]
 8010fc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010fc8:	81a3      	strh	r3, [r4, #12]
 8010fca:	2300      	movs	r3, #0
 8010fcc:	6063      	str	r3, [r4, #4]
 8010fce:	6923      	ldr	r3, [r4, #16]
 8010fd0:	6023      	str	r3, [r4, #0]
 8010fd2:	89a3      	ldrh	r3, [r4, #12]
 8010fd4:	f043 0308 	orr.w	r3, r3, #8
 8010fd8:	81a3      	strh	r3, [r4, #12]
 8010fda:	6923      	ldr	r3, [r4, #16]
 8010fdc:	b94b      	cbnz	r3, 8010ff2 <__swsetup_r+0x9a>
 8010fde:	89a3      	ldrh	r3, [r4, #12]
 8010fe0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010fe8:	d003      	beq.n	8010ff2 <__swsetup_r+0x9a>
 8010fea:	4621      	mov	r1, r4
 8010fec:	4630      	mov	r0, r6
 8010fee:	f000 f931 	bl	8011254 <__smakebuf_r>
 8010ff2:	89a0      	ldrh	r0, [r4, #12]
 8010ff4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010ff8:	f010 0301 	ands.w	r3, r0, #1
 8010ffc:	d00a      	beq.n	8011014 <__swsetup_r+0xbc>
 8010ffe:	2300      	movs	r3, #0
 8011000:	60a3      	str	r3, [r4, #8]
 8011002:	6963      	ldr	r3, [r4, #20]
 8011004:	425b      	negs	r3, r3
 8011006:	61a3      	str	r3, [r4, #24]
 8011008:	6923      	ldr	r3, [r4, #16]
 801100a:	b943      	cbnz	r3, 801101e <__swsetup_r+0xc6>
 801100c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011010:	d1ba      	bne.n	8010f88 <__swsetup_r+0x30>
 8011012:	bd70      	pop	{r4, r5, r6, pc}
 8011014:	0781      	lsls	r1, r0, #30
 8011016:	bf58      	it	pl
 8011018:	6963      	ldrpl	r3, [r4, #20]
 801101a:	60a3      	str	r3, [r4, #8]
 801101c:	e7f4      	b.n	8011008 <__swsetup_r+0xb0>
 801101e:	2000      	movs	r0, #0
 8011020:	e7f7      	b.n	8011012 <__swsetup_r+0xba>
 8011022:	bf00      	nop
 8011024:	20000028 	.word	0x20000028
 8011028:	08021418 	.word	0x08021418
 801102c:	08021438 	.word	0x08021438
 8011030:	080213f8 	.word	0x080213f8

08011034 <abort>:
 8011034:	b508      	push	{r3, lr}
 8011036:	2006      	movs	r0, #6
 8011038:	f000 f9b8 	bl	80113ac <raise>
 801103c:	2001      	movs	r0, #1
 801103e:	f7ef fe55 	bl	8000cec <_exit>
	...

08011044 <_close_r>:
 8011044:	b538      	push	{r3, r4, r5, lr}
 8011046:	4d06      	ldr	r5, [pc, #24]	; (8011060 <_close_r+0x1c>)
 8011048:	2300      	movs	r3, #0
 801104a:	4604      	mov	r4, r0
 801104c:	4608      	mov	r0, r1
 801104e:	602b      	str	r3, [r5, #0]
 8011050:	f7ef fe8f 	bl	8000d72 <_close>
 8011054:	1c43      	adds	r3, r0, #1
 8011056:	d102      	bne.n	801105e <_close_r+0x1a>
 8011058:	682b      	ldr	r3, [r5, #0]
 801105a:	b103      	cbz	r3, 801105e <_close_r+0x1a>
 801105c:	6023      	str	r3, [r4, #0]
 801105e:	bd38      	pop	{r3, r4, r5, pc}
 8011060:	20006d68 	.word	0x20006d68

08011064 <__sflush_r>:
 8011064:	898a      	ldrh	r2, [r1, #12]
 8011066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801106a:	4605      	mov	r5, r0
 801106c:	0710      	lsls	r0, r2, #28
 801106e:	460c      	mov	r4, r1
 8011070:	d458      	bmi.n	8011124 <__sflush_r+0xc0>
 8011072:	684b      	ldr	r3, [r1, #4]
 8011074:	2b00      	cmp	r3, #0
 8011076:	dc05      	bgt.n	8011084 <__sflush_r+0x20>
 8011078:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801107a:	2b00      	cmp	r3, #0
 801107c:	dc02      	bgt.n	8011084 <__sflush_r+0x20>
 801107e:	2000      	movs	r0, #0
 8011080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011084:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011086:	2e00      	cmp	r6, #0
 8011088:	d0f9      	beq.n	801107e <__sflush_r+0x1a>
 801108a:	2300      	movs	r3, #0
 801108c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011090:	682f      	ldr	r7, [r5, #0]
 8011092:	602b      	str	r3, [r5, #0]
 8011094:	d032      	beq.n	80110fc <__sflush_r+0x98>
 8011096:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011098:	89a3      	ldrh	r3, [r4, #12]
 801109a:	075a      	lsls	r2, r3, #29
 801109c:	d505      	bpl.n	80110aa <__sflush_r+0x46>
 801109e:	6863      	ldr	r3, [r4, #4]
 80110a0:	1ac0      	subs	r0, r0, r3
 80110a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80110a4:	b10b      	cbz	r3, 80110aa <__sflush_r+0x46>
 80110a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80110a8:	1ac0      	subs	r0, r0, r3
 80110aa:	2300      	movs	r3, #0
 80110ac:	4602      	mov	r2, r0
 80110ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80110b0:	6a21      	ldr	r1, [r4, #32]
 80110b2:	4628      	mov	r0, r5
 80110b4:	47b0      	blx	r6
 80110b6:	1c43      	adds	r3, r0, #1
 80110b8:	89a3      	ldrh	r3, [r4, #12]
 80110ba:	d106      	bne.n	80110ca <__sflush_r+0x66>
 80110bc:	6829      	ldr	r1, [r5, #0]
 80110be:	291d      	cmp	r1, #29
 80110c0:	d82c      	bhi.n	801111c <__sflush_r+0xb8>
 80110c2:	4a2a      	ldr	r2, [pc, #168]	; (801116c <__sflush_r+0x108>)
 80110c4:	40ca      	lsrs	r2, r1
 80110c6:	07d6      	lsls	r6, r2, #31
 80110c8:	d528      	bpl.n	801111c <__sflush_r+0xb8>
 80110ca:	2200      	movs	r2, #0
 80110cc:	6062      	str	r2, [r4, #4]
 80110ce:	04d9      	lsls	r1, r3, #19
 80110d0:	6922      	ldr	r2, [r4, #16]
 80110d2:	6022      	str	r2, [r4, #0]
 80110d4:	d504      	bpl.n	80110e0 <__sflush_r+0x7c>
 80110d6:	1c42      	adds	r2, r0, #1
 80110d8:	d101      	bne.n	80110de <__sflush_r+0x7a>
 80110da:	682b      	ldr	r3, [r5, #0]
 80110dc:	b903      	cbnz	r3, 80110e0 <__sflush_r+0x7c>
 80110de:	6560      	str	r0, [r4, #84]	; 0x54
 80110e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80110e2:	602f      	str	r7, [r5, #0]
 80110e4:	2900      	cmp	r1, #0
 80110e6:	d0ca      	beq.n	801107e <__sflush_r+0x1a>
 80110e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110ec:	4299      	cmp	r1, r3
 80110ee:	d002      	beq.n	80110f6 <__sflush_r+0x92>
 80110f0:	4628      	mov	r0, r5
 80110f2:	f7ff f985 	bl	8010400 <_free_r>
 80110f6:	2000      	movs	r0, #0
 80110f8:	6360      	str	r0, [r4, #52]	; 0x34
 80110fa:	e7c1      	b.n	8011080 <__sflush_r+0x1c>
 80110fc:	6a21      	ldr	r1, [r4, #32]
 80110fe:	2301      	movs	r3, #1
 8011100:	4628      	mov	r0, r5
 8011102:	47b0      	blx	r6
 8011104:	1c41      	adds	r1, r0, #1
 8011106:	d1c7      	bne.n	8011098 <__sflush_r+0x34>
 8011108:	682b      	ldr	r3, [r5, #0]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d0c4      	beq.n	8011098 <__sflush_r+0x34>
 801110e:	2b1d      	cmp	r3, #29
 8011110:	d001      	beq.n	8011116 <__sflush_r+0xb2>
 8011112:	2b16      	cmp	r3, #22
 8011114:	d101      	bne.n	801111a <__sflush_r+0xb6>
 8011116:	602f      	str	r7, [r5, #0]
 8011118:	e7b1      	b.n	801107e <__sflush_r+0x1a>
 801111a:	89a3      	ldrh	r3, [r4, #12]
 801111c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011120:	81a3      	strh	r3, [r4, #12]
 8011122:	e7ad      	b.n	8011080 <__sflush_r+0x1c>
 8011124:	690f      	ldr	r7, [r1, #16]
 8011126:	2f00      	cmp	r7, #0
 8011128:	d0a9      	beq.n	801107e <__sflush_r+0x1a>
 801112a:	0793      	lsls	r3, r2, #30
 801112c:	680e      	ldr	r6, [r1, #0]
 801112e:	bf08      	it	eq
 8011130:	694b      	ldreq	r3, [r1, #20]
 8011132:	600f      	str	r7, [r1, #0]
 8011134:	bf18      	it	ne
 8011136:	2300      	movne	r3, #0
 8011138:	eba6 0807 	sub.w	r8, r6, r7
 801113c:	608b      	str	r3, [r1, #8]
 801113e:	f1b8 0f00 	cmp.w	r8, #0
 8011142:	dd9c      	ble.n	801107e <__sflush_r+0x1a>
 8011144:	6a21      	ldr	r1, [r4, #32]
 8011146:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011148:	4643      	mov	r3, r8
 801114a:	463a      	mov	r2, r7
 801114c:	4628      	mov	r0, r5
 801114e:	47b0      	blx	r6
 8011150:	2800      	cmp	r0, #0
 8011152:	dc06      	bgt.n	8011162 <__sflush_r+0xfe>
 8011154:	89a3      	ldrh	r3, [r4, #12]
 8011156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801115a:	81a3      	strh	r3, [r4, #12]
 801115c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011160:	e78e      	b.n	8011080 <__sflush_r+0x1c>
 8011162:	4407      	add	r7, r0
 8011164:	eba8 0800 	sub.w	r8, r8, r0
 8011168:	e7e9      	b.n	801113e <__sflush_r+0xda>
 801116a:	bf00      	nop
 801116c:	20400001 	.word	0x20400001

08011170 <_fflush_r>:
 8011170:	b538      	push	{r3, r4, r5, lr}
 8011172:	690b      	ldr	r3, [r1, #16]
 8011174:	4605      	mov	r5, r0
 8011176:	460c      	mov	r4, r1
 8011178:	b913      	cbnz	r3, 8011180 <_fflush_r+0x10>
 801117a:	2500      	movs	r5, #0
 801117c:	4628      	mov	r0, r5
 801117e:	bd38      	pop	{r3, r4, r5, pc}
 8011180:	b118      	cbz	r0, 801118a <_fflush_r+0x1a>
 8011182:	6983      	ldr	r3, [r0, #24]
 8011184:	b90b      	cbnz	r3, 801118a <_fflush_r+0x1a>
 8011186:	f7ff f881 	bl	801028c <__sinit>
 801118a:	4b14      	ldr	r3, [pc, #80]	; (80111dc <_fflush_r+0x6c>)
 801118c:	429c      	cmp	r4, r3
 801118e:	d11b      	bne.n	80111c8 <_fflush_r+0x58>
 8011190:	686c      	ldr	r4, [r5, #4]
 8011192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d0ef      	beq.n	801117a <_fflush_r+0xa>
 801119a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801119c:	07d0      	lsls	r0, r2, #31
 801119e:	d404      	bmi.n	80111aa <_fflush_r+0x3a>
 80111a0:	0599      	lsls	r1, r3, #22
 80111a2:	d402      	bmi.n	80111aa <_fflush_r+0x3a>
 80111a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80111a6:	f7ff f921 	bl	80103ec <__retarget_lock_acquire_recursive>
 80111aa:	4628      	mov	r0, r5
 80111ac:	4621      	mov	r1, r4
 80111ae:	f7ff ff59 	bl	8011064 <__sflush_r>
 80111b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80111b4:	07da      	lsls	r2, r3, #31
 80111b6:	4605      	mov	r5, r0
 80111b8:	d4e0      	bmi.n	801117c <_fflush_r+0xc>
 80111ba:	89a3      	ldrh	r3, [r4, #12]
 80111bc:	059b      	lsls	r3, r3, #22
 80111be:	d4dd      	bmi.n	801117c <_fflush_r+0xc>
 80111c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80111c2:	f7ff f914 	bl	80103ee <__retarget_lock_release_recursive>
 80111c6:	e7d9      	b.n	801117c <_fflush_r+0xc>
 80111c8:	4b05      	ldr	r3, [pc, #20]	; (80111e0 <_fflush_r+0x70>)
 80111ca:	429c      	cmp	r4, r3
 80111cc:	d101      	bne.n	80111d2 <_fflush_r+0x62>
 80111ce:	68ac      	ldr	r4, [r5, #8]
 80111d0:	e7df      	b.n	8011192 <_fflush_r+0x22>
 80111d2:	4b04      	ldr	r3, [pc, #16]	; (80111e4 <_fflush_r+0x74>)
 80111d4:	429c      	cmp	r4, r3
 80111d6:	bf08      	it	eq
 80111d8:	68ec      	ldreq	r4, [r5, #12]
 80111da:	e7da      	b.n	8011192 <_fflush_r+0x22>
 80111dc:	08021418 	.word	0x08021418
 80111e0:	08021438 	.word	0x08021438
 80111e4:	080213f8 	.word	0x080213f8

080111e8 <_lseek_r>:
 80111e8:	b538      	push	{r3, r4, r5, lr}
 80111ea:	4d07      	ldr	r5, [pc, #28]	; (8011208 <_lseek_r+0x20>)
 80111ec:	4604      	mov	r4, r0
 80111ee:	4608      	mov	r0, r1
 80111f0:	4611      	mov	r1, r2
 80111f2:	2200      	movs	r2, #0
 80111f4:	602a      	str	r2, [r5, #0]
 80111f6:	461a      	mov	r2, r3
 80111f8:	f7ef fde2 	bl	8000dc0 <_lseek>
 80111fc:	1c43      	adds	r3, r0, #1
 80111fe:	d102      	bne.n	8011206 <_lseek_r+0x1e>
 8011200:	682b      	ldr	r3, [r5, #0]
 8011202:	b103      	cbz	r3, 8011206 <_lseek_r+0x1e>
 8011204:	6023      	str	r3, [r4, #0]
 8011206:	bd38      	pop	{r3, r4, r5, pc}
 8011208:	20006d68 	.word	0x20006d68

0801120c <__swhatbuf_r>:
 801120c:	b570      	push	{r4, r5, r6, lr}
 801120e:	460e      	mov	r6, r1
 8011210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011214:	2900      	cmp	r1, #0
 8011216:	b096      	sub	sp, #88	; 0x58
 8011218:	4614      	mov	r4, r2
 801121a:	461d      	mov	r5, r3
 801121c:	da07      	bge.n	801122e <__swhatbuf_r+0x22>
 801121e:	2300      	movs	r3, #0
 8011220:	602b      	str	r3, [r5, #0]
 8011222:	89b3      	ldrh	r3, [r6, #12]
 8011224:	061a      	lsls	r2, r3, #24
 8011226:	d410      	bmi.n	801124a <__swhatbuf_r+0x3e>
 8011228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801122c:	e00e      	b.n	801124c <__swhatbuf_r+0x40>
 801122e:	466a      	mov	r2, sp
 8011230:	f000 f8d8 	bl	80113e4 <_fstat_r>
 8011234:	2800      	cmp	r0, #0
 8011236:	dbf2      	blt.n	801121e <__swhatbuf_r+0x12>
 8011238:	9a01      	ldr	r2, [sp, #4]
 801123a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801123e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011242:	425a      	negs	r2, r3
 8011244:	415a      	adcs	r2, r3
 8011246:	602a      	str	r2, [r5, #0]
 8011248:	e7ee      	b.n	8011228 <__swhatbuf_r+0x1c>
 801124a:	2340      	movs	r3, #64	; 0x40
 801124c:	2000      	movs	r0, #0
 801124e:	6023      	str	r3, [r4, #0]
 8011250:	b016      	add	sp, #88	; 0x58
 8011252:	bd70      	pop	{r4, r5, r6, pc}

08011254 <__smakebuf_r>:
 8011254:	898b      	ldrh	r3, [r1, #12]
 8011256:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011258:	079d      	lsls	r5, r3, #30
 801125a:	4606      	mov	r6, r0
 801125c:	460c      	mov	r4, r1
 801125e:	d507      	bpl.n	8011270 <__smakebuf_r+0x1c>
 8011260:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011264:	6023      	str	r3, [r4, #0]
 8011266:	6123      	str	r3, [r4, #16]
 8011268:	2301      	movs	r3, #1
 801126a:	6163      	str	r3, [r4, #20]
 801126c:	b002      	add	sp, #8
 801126e:	bd70      	pop	{r4, r5, r6, pc}
 8011270:	ab01      	add	r3, sp, #4
 8011272:	466a      	mov	r2, sp
 8011274:	f7ff ffca 	bl	801120c <__swhatbuf_r>
 8011278:	9900      	ldr	r1, [sp, #0]
 801127a:	4605      	mov	r5, r0
 801127c:	4630      	mov	r0, r6
 801127e:	f7ff f90f 	bl	80104a0 <_malloc_r>
 8011282:	b948      	cbnz	r0, 8011298 <__smakebuf_r+0x44>
 8011284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011288:	059a      	lsls	r2, r3, #22
 801128a:	d4ef      	bmi.n	801126c <__smakebuf_r+0x18>
 801128c:	f023 0303 	bic.w	r3, r3, #3
 8011290:	f043 0302 	orr.w	r3, r3, #2
 8011294:	81a3      	strh	r3, [r4, #12]
 8011296:	e7e3      	b.n	8011260 <__smakebuf_r+0xc>
 8011298:	4b0d      	ldr	r3, [pc, #52]	; (80112d0 <__smakebuf_r+0x7c>)
 801129a:	62b3      	str	r3, [r6, #40]	; 0x28
 801129c:	89a3      	ldrh	r3, [r4, #12]
 801129e:	6020      	str	r0, [r4, #0]
 80112a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112a4:	81a3      	strh	r3, [r4, #12]
 80112a6:	9b00      	ldr	r3, [sp, #0]
 80112a8:	6163      	str	r3, [r4, #20]
 80112aa:	9b01      	ldr	r3, [sp, #4]
 80112ac:	6120      	str	r0, [r4, #16]
 80112ae:	b15b      	cbz	r3, 80112c8 <__smakebuf_r+0x74>
 80112b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80112b4:	4630      	mov	r0, r6
 80112b6:	f000 f8a7 	bl	8011408 <_isatty_r>
 80112ba:	b128      	cbz	r0, 80112c8 <__smakebuf_r+0x74>
 80112bc:	89a3      	ldrh	r3, [r4, #12]
 80112be:	f023 0303 	bic.w	r3, r3, #3
 80112c2:	f043 0301 	orr.w	r3, r3, #1
 80112c6:	81a3      	strh	r3, [r4, #12]
 80112c8:	89a0      	ldrh	r0, [r4, #12]
 80112ca:	4305      	orrs	r5, r0
 80112cc:	81a5      	strh	r5, [r4, #12]
 80112ce:	e7cd      	b.n	801126c <__smakebuf_r+0x18>
 80112d0:	08010225 	.word	0x08010225

080112d4 <__malloc_lock>:
 80112d4:	4801      	ldr	r0, [pc, #4]	; (80112dc <__malloc_lock+0x8>)
 80112d6:	f7ff b889 	b.w	80103ec <__retarget_lock_acquire_recursive>
 80112da:	bf00      	nop
 80112dc:	20006d70 	.word	0x20006d70

080112e0 <__malloc_unlock>:
 80112e0:	4801      	ldr	r0, [pc, #4]	; (80112e8 <__malloc_unlock+0x8>)
 80112e2:	f7ff b884 	b.w	80103ee <__retarget_lock_release_recursive>
 80112e6:	bf00      	nop
 80112e8:	20006d70 	.word	0x20006d70

080112ec <_realloc_r>:
 80112ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112ee:	4607      	mov	r7, r0
 80112f0:	4614      	mov	r4, r2
 80112f2:	460e      	mov	r6, r1
 80112f4:	b921      	cbnz	r1, 8011300 <_realloc_r+0x14>
 80112f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80112fa:	4611      	mov	r1, r2
 80112fc:	f7ff b8d0 	b.w	80104a0 <_malloc_r>
 8011300:	b922      	cbnz	r2, 801130c <_realloc_r+0x20>
 8011302:	f7ff f87d 	bl	8010400 <_free_r>
 8011306:	4625      	mov	r5, r4
 8011308:	4628      	mov	r0, r5
 801130a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801130c:	f000 f88c 	bl	8011428 <_malloc_usable_size_r>
 8011310:	42a0      	cmp	r0, r4
 8011312:	d20f      	bcs.n	8011334 <_realloc_r+0x48>
 8011314:	4621      	mov	r1, r4
 8011316:	4638      	mov	r0, r7
 8011318:	f7ff f8c2 	bl	80104a0 <_malloc_r>
 801131c:	4605      	mov	r5, r0
 801131e:	2800      	cmp	r0, #0
 8011320:	d0f2      	beq.n	8011308 <_realloc_r+0x1c>
 8011322:	4631      	mov	r1, r6
 8011324:	4622      	mov	r2, r4
 8011326:	f7fe fd95 	bl	800fe54 <memcpy>
 801132a:	4631      	mov	r1, r6
 801132c:	4638      	mov	r0, r7
 801132e:	f7ff f867 	bl	8010400 <_free_r>
 8011332:	e7e9      	b.n	8011308 <_realloc_r+0x1c>
 8011334:	4635      	mov	r5, r6
 8011336:	e7e7      	b.n	8011308 <_realloc_r+0x1c>

08011338 <_read_r>:
 8011338:	b538      	push	{r3, r4, r5, lr}
 801133a:	4d07      	ldr	r5, [pc, #28]	; (8011358 <_read_r+0x20>)
 801133c:	4604      	mov	r4, r0
 801133e:	4608      	mov	r0, r1
 8011340:	4611      	mov	r1, r2
 8011342:	2200      	movs	r2, #0
 8011344:	602a      	str	r2, [r5, #0]
 8011346:	461a      	mov	r2, r3
 8011348:	f7ef fcda 	bl	8000d00 <_read>
 801134c:	1c43      	adds	r3, r0, #1
 801134e:	d102      	bne.n	8011356 <_read_r+0x1e>
 8011350:	682b      	ldr	r3, [r5, #0]
 8011352:	b103      	cbz	r3, 8011356 <_read_r+0x1e>
 8011354:	6023      	str	r3, [r4, #0]
 8011356:	bd38      	pop	{r3, r4, r5, pc}
 8011358:	20006d68 	.word	0x20006d68

0801135c <_raise_r>:
 801135c:	291f      	cmp	r1, #31
 801135e:	b538      	push	{r3, r4, r5, lr}
 8011360:	4604      	mov	r4, r0
 8011362:	460d      	mov	r5, r1
 8011364:	d904      	bls.n	8011370 <_raise_r+0x14>
 8011366:	2316      	movs	r3, #22
 8011368:	6003      	str	r3, [r0, #0]
 801136a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801136e:	bd38      	pop	{r3, r4, r5, pc}
 8011370:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011372:	b112      	cbz	r2, 801137a <_raise_r+0x1e>
 8011374:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011378:	b94b      	cbnz	r3, 801138e <_raise_r+0x32>
 801137a:	4620      	mov	r0, r4
 801137c:	f000 f830 	bl	80113e0 <_getpid_r>
 8011380:	462a      	mov	r2, r5
 8011382:	4601      	mov	r1, r0
 8011384:	4620      	mov	r0, r4
 8011386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801138a:	f000 b817 	b.w	80113bc <_kill_r>
 801138e:	2b01      	cmp	r3, #1
 8011390:	d00a      	beq.n	80113a8 <_raise_r+0x4c>
 8011392:	1c59      	adds	r1, r3, #1
 8011394:	d103      	bne.n	801139e <_raise_r+0x42>
 8011396:	2316      	movs	r3, #22
 8011398:	6003      	str	r3, [r0, #0]
 801139a:	2001      	movs	r0, #1
 801139c:	e7e7      	b.n	801136e <_raise_r+0x12>
 801139e:	2400      	movs	r4, #0
 80113a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80113a4:	4628      	mov	r0, r5
 80113a6:	4798      	blx	r3
 80113a8:	2000      	movs	r0, #0
 80113aa:	e7e0      	b.n	801136e <_raise_r+0x12>

080113ac <raise>:
 80113ac:	4b02      	ldr	r3, [pc, #8]	; (80113b8 <raise+0xc>)
 80113ae:	4601      	mov	r1, r0
 80113b0:	6818      	ldr	r0, [r3, #0]
 80113b2:	f7ff bfd3 	b.w	801135c <_raise_r>
 80113b6:	bf00      	nop
 80113b8:	20000028 	.word	0x20000028

080113bc <_kill_r>:
 80113bc:	b538      	push	{r3, r4, r5, lr}
 80113be:	4d07      	ldr	r5, [pc, #28]	; (80113dc <_kill_r+0x20>)
 80113c0:	2300      	movs	r3, #0
 80113c2:	4604      	mov	r4, r0
 80113c4:	4608      	mov	r0, r1
 80113c6:	4611      	mov	r1, r2
 80113c8:	602b      	str	r3, [r5, #0]
 80113ca:	f7ef fc7d 	bl	8000cc8 <_kill>
 80113ce:	1c43      	adds	r3, r0, #1
 80113d0:	d102      	bne.n	80113d8 <_kill_r+0x1c>
 80113d2:	682b      	ldr	r3, [r5, #0]
 80113d4:	b103      	cbz	r3, 80113d8 <_kill_r+0x1c>
 80113d6:	6023      	str	r3, [r4, #0]
 80113d8:	bd38      	pop	{r3, r4, r5, pc}
 80113da:	bf00      	nop
 80113dc:	20006d68 	.word	0x20006d68

080113e0 <_getpid_r>:
 80113e0:	f7ef bc6a 	b.w	8000cb8 <_getpid>

080113e4 <_fstat_r>:
 80113e4:	b538      	push	{r3, r4, r5, lr}
 80113e6:	4d07      	ldr	r5, [pc, #28]	; (8011404 <_fstat_r+0x20>)
 80113e8:	2300      	movs	r3, #0
 80113ea:	4604      	mov	r4, r0
 80113ec:	4608      	mov	r0, r1
 80113ee:	4611      	mov	r1, r2
 80113f0:	602b      	str	r3, [r5, #0]
 80113f2:	f7ef fcca 	bl	8000d8a <_fstat>
 80113f6:	1c43      	adds	r3, r0, #1
 80113f8:	d102      	bne.n	8011400 <_fstat_r+0x1c>
 80113fa:	682b      	ldr	r3, [r5, #0]
 80113fc:	b103      	cbz	r3, 8011400 <_fstat_r+0x1c>
 80113fe:	6023      	str	r3, [r4, #0]
 8011400:	bd38      	pop	{r3, r4, r5, pc}
 8011402:	bf00      	nop
 8011404:	20006d68 	.word	0x20006d68

08011408 <_isatty_r>:
 8011408:	b538      	push	{r3, r4, r5, lr}
 801140a:	4d06      	ldr	r5, [pc, #24]	; (8011424 <_isatty_r+0x1c>)
 801140c:	2300      	movs	r3, #0
 801140e:	4604      	mov	r4, r0
 8011410:	4608      	mov	r0, r1
 8011412:	602b      	str	r3, [r5, #0]
 8011414:	f7ef fcc9 	bl	8000daa <_isatty>
 8011418:	1c43      	adds	r3, r0, #1
 801141a:	d102      	bne.n	8011422 <_isatty_r+0x1a>
 801141c:	682b      	ldr	r3, [r5, #0]
 801141e:	b103      	cbz	r3, 8011422 <_isatty_r+0x1a>
 8011420:	6023      	str	r3, [r4, #0]
 8011422:	bd38      	pop	{r3, r4, r5, pc}
 8011424:	20006d68 	.word	0x20006d68

08011428 <_malloc_usable_size_r>:
 8011428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801142c:	1f18      	subs	r0, r3, #4
 801142e:	2b00      	cmp	r3, #0
 8011430:	bfbc      	itt	lt
 8011432:	580b      	ldrlt	r3, [r1, r0]
 8011434:	18c0      	addlt	r0, r0, r3
 8011436:	4770      	bx	lr

08011438 <_init>:
 8011438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801143a:	bf00      	nop
 801143c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801143e:	bc08      	pop	{r3}
 8011440:	469e      	mov	lr, r3
 8011442:	4770      	bx	lr

08011444 <_fini>:
 8011444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011446:	bf00      	nop
 8011448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801144a:	bc08      	pop	{r3}
 801144c:	469e      	mov	lr, r3
 801144e:	4770      	bx	lr
