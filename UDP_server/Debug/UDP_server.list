
UDP_server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ebe4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c3c  0800ed74  0800ed74  0001ed74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080119b0  080119b0  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  080119b0  080119b0  000219b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080119b8  080119b8  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080119b8  080119b8  000219b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080119bc  080119bc  000219bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080119c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030078  2**0
                  CONTENTS
 10 .bss          00008a10  20000078  20000078  00030078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008a88  20008a88  00030078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029950  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052de  00000000  00000000  000599f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe0  00000000  00000000  0005ecd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f50  00000000  00000000  0005fcb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c15a  00000000  00000000  00060c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e9d8  00000000  00000000  0008cd62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8fc9  00000000  00000000  000ab73a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00184703  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004844  00000000  00000000  00184758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ed5c 	.word	0x0800ed5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800ed5c 	.word	0x0800ed5c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 fa8c 	bl	8000a88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f80e 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 f876 	bl	8000664 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000578:	f002 fbc2 	bl	8002d00 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  udpServer_init ();
 800057c:	f000 f9f4 	bl	8000968 <udpServer_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ethernetif_input(&gnetif);
 8000580:	4802      	ldr	r0, [pc, #8]	; (800058c <main+0x24>)
 8000582:	f002 ff9d 	bl	80034c0 <ethernetif_input>
	  sys_check_timeouts();
 8000586:	f00a f8bb 	bl	800a700 <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 800058a:	e7f9      	b.n	8000580 <main+0x18>
 800058c:	20000220 	.word	0x20000220

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	; 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2230      	movs	r2, #48	; 0x30
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f00d fa10 	bl	800d9c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	4b28      	ldr	r3, [pc, #160]	; (800065c <SystemClock_Config+0xcc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	4a27      	ldr	r2, [pc, #156]	; (800065c <SystemClock_Config+0xcc>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40
 80005c4:	4b25      	ldr	r3, [pc, #148]	; (800065c <SystemClock_Config+0xcc>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b22      	ldr	r3, [pc, #136]	; (8000660 <SystemClock_Config+0xd0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a21      	ldr	r2, [pc, #132]	; (8000660 <SystemClock_Config+0xd0>)
 80005da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <SystemClock_Config+0xd0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ec:	2301      	movs	r3, #1
 80005ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	2302      	movs	r3, #2
 80005f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000600:	2304      	movs	r3, #4
 8000602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000604:	23a8      	movs	r3, #168	; 0xa8
 8000606:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000608:	2302      	movs	r3, #2
 800060a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800060c:	2304      	movs	r3, #4
 800060e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 0320 	add.w	r3, r7, #32
 8000614:	4618      	mov	r0, r3
 8000616:	f001 ff27 	bl	8002468 <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000620:	f000 f864 	bl	80006ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	230f      	movs	r3, #15
 8000626:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000628:	2302      	movs	r3, #2
 800062a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000630:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000634:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2105      	movs	r1, #5
 8000642:	4618      	mov	r0, r3
 8000644:	f002 f988 	bl	8002958 <HAL_RCC_ClockConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800064e:	f000 f84d 	bl	80006ec <Error_Handler>
  }
}
 8000652:	bf00      	nop
 8000654:	3750      	adds	r7, #80	; 0x50
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <MX_GPIO_Init+0x84>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a1d      	ldr	r2, [pc, #116]	; (80006e8 <MX_GPIO_Init+0x84>)
 8000674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <MX_GPIO_Init+0x84>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <MX_GPIO_Init+0x84>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a16      	ldr	r2, [pc, #88]	; (80006e8 <MX_GPIO_Init+0x84>)
 8000690:	f043 0304 	orr.w	r3, r3, #4
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_GPIO_Init+0x84>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0304 	and.w	r3, r3, #4
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <MX_GPIO_Init+0x84>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a0f      	ldr	r2, [pc, #60]	; (80006e8 <MX_GPIO_Init+0x84>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <MX_GPIO_Init+0x84>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_GPIO_Init+0x84>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a08      	ldr	r2, [pc, #32]	; (80006e8 <MX_GPIO_Init+0x84>)
 80006c8:	f043 0302 	orr.w	r3, r3, #2
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_GPIO_Init+0x84>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0302 	and.w	r3, r3, #2
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

}
 80006da:	bf00      	nop
 80006dc:	3714      	adds	r7, #20
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
}
 80006f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <Error_Handler+0x8>
	...

080006f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <HAL_MspInit+0x4c>)
 8000704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000706:	4a0f      	ldr	r2, [pc, #60]	; (8000744 <HAL_MspInit+0x4c>)
 8000708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070c:	6453      	str	r3, [r2, #68]	; 0x44
 800070e:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <HAL_MspInit+0x4c>)
 8000710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <HAL_MspInit+0x4c>)
 8000720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000722:	4a08      	ldr	r2, [pc, #32]	; (8000744 <HAL_MspInit+0x4c>)
 8000724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000728:	6413      	str	r3, [r2, #64]	; 0x40
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <HAL_MspInit+0x4c>)
 800072c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800

08000748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800074c:	e7fe      	b.n	800074c <NMI_Handler+0x4>

0800074e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000752:	e7fe      	b.n	8000752 <HardFault_Handler+0x4>

08000754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <MemManage_Handler+0x4>

0800075a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075e:	e7fe      	b.n	800075e <BusFault_Handler+0x4>

08000760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <UsageFault_Handler+0x4>

08000766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000794:	f000 f9ca 	bl	8000b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}

0800079c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80007a0:	4802      	ldr	r0, [pc, #8]	; (80007ac <ETH_IRQHandler+0x10>)
 80007a2:	f000 fef9 	bl	8001598 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20001b40 	.word	0x20001b40

080007b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
	return 1;
 80007b4:	2301      	movs	r3, #1
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <_kill>:

int _kill(int pid, int sig)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80007ca:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <_kill+0x20>)
 80007cc:	2216      	movs	r2, #22
 80007ce:	601a      	str	r2, [r3, #0]
	return -1;
 80007d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	20008a78 	.word	0x20008a78

080007e4 <_exit>:

void _exit (int status)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80007ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff ffe5 	bl	80007c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80007f6:	e7fe      	b.n	80007f6 <_exit+0x12>

080007f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	e00a      	b.n	8000820 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800080a:	f3af 8000 	nop.w
 800080e:	4601      	mov	r1, r0
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	1c5a      	adds	r2, r3, #1
 8000814:	60ba      	str	r2, [r7, #8]
 8000816:	b2ca      	uxtb	r2, r1
 8000818:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	3301      	adds	r3, #1
 800081e:	617b      	str	r3, [r7, #20]
 8000820:	697a      	ldr	r2, [r7, #20]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	429a      	cmp	r2, r3
 8000826:	dbf0      	blt.n	800080a <_read+0x12>
	}

return len;
 8000828:	687b      	ldr	r3, [r7, #4]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b086      	sub	sp, #24
 8000836:	af00      	add	r7, sp, #0
 8000838:	60f8      	str	r0, [r7, #12]
 800083a:	60b9      	str	r1, [r7, #8]
 800083c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
 8000842:	e009      	b.n	8000858 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	1c5a      	adds	r2, r3, #1
 8000848:	60ba      	str	r2, [r7, #8]
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	4618      	mov	r0, r3
 800084e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	3301      	adds	r3, #1
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	697a      	ldr	r2, [r7, #20]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	429a      	cmp	r2, r3
 800085e:	dbf1      	blt.n	8000844 <_write+0x12>
	}
	return len;
 8000860:	687b      	ldr	r3, [r7, #4]
}
 8000862:	4618      	mov	r0, r3
 8000864:	3718      	adds	r7, #24
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <_close>:

int _close(int file)
{
 800086a:	b480      	push	{r7}
 800086c:	b083      	sub	sp, #12
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
	return -1;
 8000872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000876:	4618      	mov	r0, r3
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000882:	b480      	push	{r7}
 8000884:	b083      	sub	sp, #12
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
 800088a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000892:	605a      	str	r2, [r3, #4]
	return 0;
 8000894:	2300      	movs	r3, #0
}
 8000896:	4618      	mov	r0, r3
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <_isatty>:

int _isatty(int file)
{
 80008a2:	b480      	push	{r7}
 80008a4:	b083      	sub	sp, #12
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
	return 1;
 80008aa:	2301      	movs	r3, #1
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
	return 0;
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
	...

080008d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b087      	sub	sp, #28
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008dc:	4a14      	ldr	r2, [pc, #80]	; (8000930 <_sbrk+0x5c>)
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <_sbrk+0x60>)
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008e8:	4b13      	ldr	r3, [pc, #76]	; (8000938 <_sbrk+0x64>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d102      	bne.n	80008f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <_sbrk+0x64>)
 80008f2:	4a12      	ldr	r2, [pc, #72]	; (800093c <_sbrk+0x68>)
 80008f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <_sbrk+0x64>)
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4413      	add	r3, r2
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	429a      	cmp	r2, r3
 8000902:	d205      	bcs.n	8000910 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000904:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <_sbrk+0x6c>)
 8000906:	220c      	movs	r2, #12
 8000908:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800090a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800090e:	e009      	b.n	8000924 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <_sbrk+0x64>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <_sbrk+0x64>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	4a06      	ldr	r2, [pc, #24]	; (8000938 <_sbrk+0x64>)
 8000920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000922:	68fb      	ldr	r3, [r7, #12]
}
 8000924:	4618      	mov	r0, r3
 8000926:	371c      	adds	r7, #28
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	20020000 	.word	0x20020000
 8000934:	00000400 	.word	0x00000400
 8000938:	20000094 	.word	0x20000094
 800093c:	20008a88 	.word	0x20008a88
 8000940:	20008a78 	.word	0x20008a78

08000944 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <SystemInit+0x20>)
 800094a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800094e:	4a05      	ldr	r2, [pc, #20]	; (8000964 <SystemInit+0x20>)
 8000950:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000954:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <udpServer_init>:
4. Process the datagram packet and send a reply to client.
5. Go back to Step 3.
*/

void udpServer_init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
	// UDP Control Block structure
   struct udp_pcb *upcb;
   err_t err;

   /* 1. Create a new UDP control block  */
   upcb = udp_new();
 800096e:	f00a fc35 	bl	800b1dc <udp_new>
 8000972:	60f8      	str	r0, [r7, #12]

   /* 2. Bind the upcb to the local port */
   ip_addr_t myIPADDR;
   IP_ADDR4(&myIPADDR, 192, 168, 18, 114);
 8000974:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <udpServer_init+0x44>)
 8000976:	607b      	str	r3, [r7, #4]

   err = udp_bind(upcb, &myIPADDR, 7);  // 7 is the server UDP port
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2207      	movs	r2, #7
 800097c:	4619      	mov	r1, r3
 800097e:	68f8      	ldr	r0, [r7, #12]
 8000980:	f00a faac 	bl	800aedc <udp_bind>
 8000984:	4603      	mov	r3, r0
 8000986:	72fb      	strb	r3, [r7, #11]


   /* 3. Set a receive callback for the upcb */
   if(err == ERR_OK)
 8000988:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d105      	bne.n	800099c <udpServer_init+0x34>
   {
	   udp_recv(upcb, udp_receive_callback, NULL);
 8000990:	2200      	movs	r2, #0
 8000992:	4907      	ldr	r1, [pc, #28]	; (80009b0 <udpServer_init+0x48>)
 8000994:	68f8      	ldr	r0, [r7, #12]
 8000996:	f00a fbbf 	bl	800b118 <udp_recv>
   }
   else
   {
	   udp_remove(upcb);
   }
}
 800099a:	e002      	b.n	80009a2 <udpServer_init+0x3a>
	   udp_remove(upcb);
 800099c:	68f8      	ldr	r0, [r7, #12]
 800099e:	f00a fbdb 	bl	800b158 <udp_remove>
}
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	7212a8c0 	.word	0x7212a8c0
 80009b0:	080009b5 	.word	0x080009b5

080009b4 <udp_receive_callback>:

// udp_receive_callback will be called, when the client sends some data to the server
/* 4. Process the datagram packet and send a reply to client. */

void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b0a0      	sub	sp, #128	; 0x80
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	607a      	str	r2, [r7, #4]
 80009c0:	603b      	str	r3, [r7, #0]
	struct pbuf *txBuf;  // Пакет который будет отправлять.

	/* Get the IP of the Client */
	char *remoteIP = ipaddr_ntoa(addr);
 80009c2:	6838      	ldr	r0, [r7, #0]
 80009c4:	f00c f804 	bl	800c9d0 <ip4addr_ntoa>
 80009c8:	67f8      	str	r0, [r7, #124]	; 0x7c

	char buf[100];


	int len = sprintf (buf,"Hello %s From UDP SERVER\n", (char*)p->payload);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	685a      	ldr	r2, [r3, #4]
 80009ce:	f107 0310 	add.w	r3, r7, #16
 80009d2:	4917      	ldr	r1, [pc, #92]	; (8000a30 <udp_receive_callback+0x7c>)
 80009d4:	4618      	mov	r0, r3
 80009d6:	f00d f855 	bl	800da84 <siprintf>
 80009da:	67b8      	str	r0, [r7, #120]	; 0x78

	/* allocate pbuf from RAM*/
	txBuf = pbuf_alloc(PBUF_TRANSPORT,len, PBUF_RAM);
 80009dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80009de:	b29b      	uxth	r3, r3
 80009e0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80009e4:	4619      	mov	r1, r3
 80009e6:	2036      	movs	r0, #54	; 0x36
 80009e8:	f003 fe16 	bl	8004618 <pbuf_alloc>
 80009ec:	6778      	str	r0, [r7, #116]	; 0x74

	/* copy the data into the buffer  */
	pbuf_take(txBuf, buf, len);
 80009ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	f107 0310 	add.w	r3, r7, #16
 80009f6:	4619      	mov	r1, r3
 80009f8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80009fa:	f004 fb5d 	bl	80050b8 <pbuf_take>

	/* Connect to the remote client */
	udp_connect(upcb, addr, port);
 80009fe:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8000a02:	461a      	mov	r2, r3
 8000a04:	6839      	ldr	r1, [r7, #0]
 8000a06:	68b8      	ldr	r0, [r7, #8]
 8000a08:	f00a faf0 	bl	800afec <udp_connect>

	/* Send a Reply to the Client */
	udp_send(upcb, txBuf);
 8000a0c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000a0e:	68b8      	ldr	r0, [r7, #8]
 8000a10:	f00a f87a 	bl	800ab08 <udp_send>

	/* free the UDP connection, so we can accept new clients */
	udp_disconnect(upcb);
 8000a14:	68b8      	ldr	r0, [r7, #8]
 8000a16:	f00a fb57 	bl	800b0c8 <udp_disconnect>

	/* Free the p_tx buffer */
	pbuf_free(txBuf);
 8000a1a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000a1c:	f004 f8e0 	bl	8004be0 <pbuf_free>

	/* Free the p buffer */
	pbuf_free(p);
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f004 f8dd 	bl	8004be0 <pbuf_free>
}
 8000a26:	bf00      	nop
 8000a28:	3780      	adds	r7, #128	; 0x80
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	0800ed74 	.word	0x0800ed74

08000a34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a38:	480d      	ldr	r0, [pc, #52]	; (8000a70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a3a:	490e      	ldr	r1, [pc, #56]	; (8000a74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a3c:	4a0e      	ldr	r2, [pc, #56]	; (8000a78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a40:	e002      	b.n	8000a48 <LoopCopyDataInit>

08000a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a46:	3304      	adds	r3, #4

08000a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a4c:	d3f9      	bcc.n	8000a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4e:	4a0b      	ldr	r2, [pc, #44]	; (8000a7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a50:	4c0b      	ldr	r4, [pc, #44]	; (8000a80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a54:	e001      	b.n	8000a5a <LoopFillZerobss>

08000a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a58:	3204      	adds	r2, #4

08000a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a5c:	d3fb      	bcc.n	8000a56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a5e:	f7ff ff71 	bl	8000944 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a62:	f00c ff55 	bl	800d910 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a66:	f7ff fd7f 	bl	8000568 <main>
  bx  lr    
 8000a6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a74:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000a78:	080119c0 	.word	0x080119c0
  ldr r2, =_sbss
 8000a7c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000a80:	20008a88 	.word	0x20008a88

08000a84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a84:	e7fe      	b.n	8000a84 <ADC_IRQHandler>
	...

08000a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <HAL_Init+0x40>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a0d      	ldr	r2, [pc, #52]	; (8000ac8 <HAL_Init+0x40>)
 8000a92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a98:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <HAL_Init+0x40>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a0a      	ldr	r2, [pc, #40]	; (8000ac8 <HAL_Init+0x40>)
 8000a9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <HAL_Init+0x40>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a07      	ldr	r2, [pc, #28]	; (8000ac8 <HAL_Init+0x40>)
 8000aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab0:	2003      	movs	r0, #3
 8000ab2:	f000 f94f 	bl	8000d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ab6:	200f      	movs	r0, #15
 8000ab8:	f000 f808 	bl	8000acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000abc:	f7ff fe1c 	bl	80006f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40023c00 	.word	0x40023c00

08000acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <HAL_InitTick+0x54>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <HAL_InitTick+0x58>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	4619      	mov	r1, r3
 8000ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 f967 	bl	8000dbe <HAL_SYSTICK_Config>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e00e      	b.n	8000b18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2b0f      	cmp	r3, #15
 8000afe:	d80a      	bhi.n	8000b16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b00:	2200      	movs	r2, #0
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b08:	f000 f92f 	bl	8000d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b0c:	4a06      	ldr	r2, [pc, #24]	; (8000b28 <HAL_InitTick+0x5c>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b12:	2300      	movs	r3, #0
 8000b14:	e000      	b.n	8000b18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000000 	.word	0x20000000
 8000b24:	20000008 	.word	0x20000008
 8000b28:	20000004 	.word	0x20000004

08000b2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_IncTick+0x20>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_IncTick+0x24>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <HAL_IncTick+0x24>)
 8000b3e:	6013      	str	r3, [r2, #0]
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20000008 	.word	0x20000008
 8000b50:	20000254 	.word	0x20000254

08000b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return uwTick;
 8000b58:	4b03      	ldr	r3, [pc, #12]	; (8000b68 <HAL_GetTick+0x14>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	20000254 	.word	0x20000254

08000b6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b74:	f7ff ffee 	bl	8000b54 <HAL_GetTick>
 8000b78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b84:	d005      	beq.n	8000b92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b86:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <HAL_Delay+0x44>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	4413      	add	r3, r2
 8000b90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b92:	bf00      	nop
 8000b94:	f7ff ffde 	bl	8000b54 <HAL_GetTick>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d8f7      	bhi.n	8000b94 <HAL_Delay+0x28>
  {
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	bf00      	nop
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000008 	.word	0x20000008

08000bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bca:	68ba      	ldr	r2, [r7, #8]
 8000bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be6:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	60d3      	str	r3, [r2, #12]
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <__NVIC_GetPriorityGrouping+0x18>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	0a1b      	lsrs	r3, r3, #8
 8000c06:	f003 0307 	and.w	r3, r3, #7
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	db0b      	blt.n	8000c42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	f003 021f 	and.w	r2, r3, #31
 8000c30:	4907      	ldr	r1, [pc, #28]	; (8000c50 <__NVIC_EnableIRQ+0x38>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	095b      	lsrs	r3, r3, #5
 8000c38:	2001      	movs	r0, #1
 8000c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000e100 	.word	0xe000e100

08000c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db0a      	blt.n	8000c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	490c      	ldr	r1, [pc, #48]	; (8000ca0 <__NVIC_SetPriority+0x4c>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	0112      	lsls	r2, r2, #4
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	440b      	add	r3, r1
 8000c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c7c:	e00a      	b.n	8000c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4908      	ldr	r1, [pc, #32]	; (8000ca4 <__NVIC_SetPriority+0x50>)
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	f003 030f 	and.w	r3, r3, #15
 8000c8a:	3b04      	subs	r3, #4
 8000c8c:	0112      	lsls	r2, r2, #4
 8000c8e:	b2d2      	uxtb	r2, r2
 8000c90:	440b      	add	r3, r1
 8000c92:	761a      	strb	r2, [r3, #24]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000e100 	.word	0xe000e100
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b089      	sub	sp, #36	; 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	f1c3 0307 	rsb	r3, r3, #7
 8000cc2:	2b04      	cmp	r3, #4
 8000cc4:	bf28      	it	cs
 8000cc6:	2304      	movcs	r3, #4
 8000cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	2b06      	cmp	r3, #6
 8000cd0:	d902      	bls.n	8000cd8 <NVIC_EncodePriority+0x30>
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3b03      	subs	r3, #3
 8000cd6:	e000      	b.n	8000cda <NVIC_EncodePriority+0x32>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43da      	mvns	r2, r3
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	401a      	ands	r2, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfa:	43d9      	mvns	r1, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	4313      	orrs	r3, r2
         );
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3724      	adds	r7, #36	; 0x24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d20:	d301      	bcc.n	8000d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d22:	2301      	movs	r3, #1
 8000d24:	e00f      	b.n	8000d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <SysTick_Config+0x40>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2e:	210f      	movs	r1, #15
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d34:	f7ff ff8e 	bl	8000c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <SysTick_Config+0x40>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3e:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <SysTick_Config+0x40>)
 8000d40:	2207      	movs	r2, #7
 8000d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	e000e010 	.word	0xe000e010

08000d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ff29 	bl	8000bb4 <__NVIC_SetPriorityGrouping>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b086      	sub	sp, #24
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
 8000d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d7c:	f7ff ff3e 	bl	8000bfc <__NVIC_GetPriorityGrouping>
 8000d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	68b9      	ldr	r1, [r7, #8]
 8000d86:	6978      	ldr	r0, [r7, #20]
 8000d88:	f7ff ff8e 	bl	8000ca8 <NVIC_EncodePriority>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff5d 	bl	8000c54 <__NVIC_SetPriority>
}
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	4603      	mov	r3, r0
 8000daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff31 	bl	8000c18 <__NVIC_EnableIRQ>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff ffa2 	bl	8000d10 <SysTick_Config>
 8000dcc:	4603      	mov	r3, r0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000de8:	4baa      	ldr	r3, [pc, #680]	; (8001094 <HAL_ETH_Init+0x2bc>)
 8000dea:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000df0:	2300      	movs	r3, #0
 8000df2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d101      	bne.n	8000dfe <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e183      	b.n	8001106 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d106      	bne.n	8000e18 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f002 f8a6 	bl	8002f64 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	4b9e      	ldr	r3, [pc, #632]	; (8001098 <HAL_ETH_Init+0x2c0>)
 8000e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e20:	4a9d      	ldr	r2, [pc, #628]	; (8001098 <HAL_ETH_Init+0x2c0>)
 8000e22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e26:	6453      	str	r3, [r2, #68]	; 0x44
 8000e28:	4b9b      	ldr	r3, [pc, #620]	; (8001098 <HAL_ETH_Init+0x2c0>)
 8000e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000e34:	4b99      	ldr	r3, [pc, #612]	; (800109c <HAL_ETH_Init+0x2c4>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	4a98      	ldr	r2, [pc, #608]	; (800109c <HAL_ETH_Init+0x2c4>)
 8000e3a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000e3e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000e40:	4b96      	ldr	r3, [pc, #600]	; (800109c <HAL_ETH_Init+0x2c4>)
 8000e42:	685a      	ldr	r2, [r3, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6a1b      	ldr	r3, [r3, #32]
 8000e48:	4994      	ldr	r1, [pc, #592]	; (800109c <HAL_ETH_Init+0x2c4>)
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f042 0201 	orr.w	r2, r2, #1
 8000e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e64:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000e66:	f7ff fe75 	bl	8000b54 <HAL_GetTick>
 8000e6a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000e6c:	e011      	b.n	8000e92 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000e6e:	f7ff fe71 	bl	8000b54 <HAL_GetTick>
 8000e72:	4602      	mov	r2, r0
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e7c:	d909      	bls.n	8000e92 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2203      	movs	r2, #3
 8000e82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e139      	b.n	8001106 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d1e4      	bne.n	8000e6e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	691b      	ldr	r3, [r3, #16]
 8000eaa:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f023 031c 	bic.w	r3, r3, #28
 8000eb2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000eb4:	f001 ff18 	bl	8002ce8 <HAL_RCC_GetHCLKFreq>
 8000eb8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	4a78      	ldr	r2, [pc, #480]	; (80010a0 <HAL_ETH_Init+0x2c8>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d908      	bls.n	8000ed4 <HAL_ETH_Init+0xfc>
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	4a77      	ldr	r2, [pc, #476]	; (80010a4 <HAL_ETH_Init+0x2cc>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d804      	bhi.n	8000ed4 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	f043 0308 	orr.w	r3, r3, #8
 8000ed0:	61fb      	str	r3, [r7, #28]
 8000ed2:	e027      	b.n	8000f24 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	4a73      	ldr	r2, [pc, #460]	; (80010a4 <HAL_ETH_Init+0x2cc>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d908      	bls.n	8000eee <HAL_ETH_Init+0x116>
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	4a6d      	ldr	r2, [pc, #436]	; (8001094 <HAL_ETH_Init+0x2bc>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d204      	bcs.n	8000eee <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f043 030c 	orr.w	r3, r3, #12
 8000eea:	61fb      	str	r3, [r7, #28]
 8000eec:	e01a      	b.n	8000f24 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	4a68      	ldr	r2, [pc, #416]	; (8001094 <HAL_ETH_Init+0x2bc>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d303      	bcc.n	8000efe <HAL_ETH_Init+0x126>
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	4a6b      	ldr	r2, [pc, #428]	; (80010a8 <HAL_ETH_Init+0x2d0>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d911      	bls.n	8000f22 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	4a69      	ldr	r2, [pc, #420]	; (80010a8 <HAL_ETH_Init+0x2d0>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d908      	bls.n	8000f18 <HAL_ETH_Init+0x140>
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	4a68      	ldr	r2, [pc, #416]	; (80010ac <HAL_ETH_Init+0x2d4>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d804      	bhi.n	8000f18 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	f043 0304 	orr.w	r3, r3, #4
 8000f14:	61fb      	str	r3, [r7, #28]
 8000f16:	e005      	b.n	8000f24 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f043 0310 	orr.w	r3, r3, #16
 8000f1e:	61fb      	str	r3, [r7, #28]
 8000f20:	e000      	b.n	8000f24 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000f22:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	69fa      	ldr	r2, [r7, #28]
 8000f2a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000f2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f30:	2100      	movs	r1, #0
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f000 fc1d 	bl	8001772 <HAL_ETH_WritePHYRegister>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d00b      	beq.n	8000f56 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000f42:	6939      	ldr	r1, [r7, #16]
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f000 fdd3 	bl	8001af0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e0d7      	b.n	8001106 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000f56:	20ff      	movs	r0, #255	; 0xff
 8000f58:	f7ff fe08 	bl	8000b6c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f000 80a5 	beq.w	80010b0 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000f66:	f7ff fdf5 	bl	8000b54 <HAL_GetTick>
 8000f6a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	461a      	mov	r2, r3
 8000f72:	2101      	movs	r1, #1
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f000 fb94 	bl	80016a2 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000f7a:	f7ff fdeb 	bl	8000b54 <HAL_GetTick>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d90f      	bls.n	8000fac <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000f90:	6939      	ldr	r1, [r7, #16]
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 fdac 	bl	8001af0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e0ac      	b.n	8001106 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f003 0304 	and.w	r3, r3, #4
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d0da      	beq.n	8000f6c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000fb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fba:	2100      	movs	r1, #0
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f000 fbd8 	bl	8001772 <HAL_ETH_WritePHYRegister>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d00b      	beq.n	8000fe0 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000fcc:	6939      	ldr	r1, [r7, #16]
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f000 fd8e 	bl	8001af0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e092      	b.n	8001106 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000fe0:	f7ff fdb8 	bl	8000b54 <HAL_GetTick>
 8000fe4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000fe6:	f107 030c 	add.w	r3, r7, #12
 8000fea:	461a      	mov	r2, r3
 8000fec:	2101      	movs	r1, #1
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 fb57 	bl	80016a2 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000ff4:	f7ff fdae 	bl	8000b54 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001002:	4293      	cmp	r3, r2
 8001004:	d90f      	bls.n	8001026 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800100a:	6939      	ldr	r1, [r7, #16]
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f000 fd6f 	bl	8001af0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2201      	movs	r2, #1
 8001016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e06f      	b.n	8001106 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f003 0320 	and.w	r3, r3, #32
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0da      	beq.n	8000fe6 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	461a      	mov	r2, r3
 8001036:	2110      	movs	r1, #16
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 fb32 	bl	80016a2 <HAL_ETH_ReadPHYRegister>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d00b      	beq.n	800105c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001048:	6939      	ldr	r1, [r7, #16]
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 fd50 	bl	8001af0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2201      	movs	r2, #1
 8001054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001058:	2301      	movs	r3, #1
 800105a:	e054      	b.n	8001106 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f003 0304 	and.w	r3, r3, #4
 8001062:	2b00      	cmp	r3, #0
 8001064:	d004      	beq.n	8001070 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	e002      	b.n	8001076 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	e035      	b.n	80010f4 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	e030      	b.n	80010f4 <HAL_ETH_Init+0x31c>
 8001092:	bf00      	nop
 8001094:	03938700 	.word	0x03938700
 8001098:	40023800 	.word	0x40023800
 800109c:	40013800 	.word	0x40013800
 80010a0:	01312cff 	.word	0x01312cff
 80010a4:	02160ebf 	.word	0x02160ebf
 80010a8:	05f5e0ff 	.word	0x05f5e0ff
 80010ac:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	08db      	lsrs	r3, r3, #3
 80010b6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	085b      	lsrs	r3, r3, #1
 80010be:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80010c0:	4313      	orrs	r3, r2
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	461a      	mov	r2, r3
 80010c6:	2100      	movs	r1, #0
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 fb52 	bl	8001772 <HAL_ETH_WritePHYRegister>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00b      	beq.n	80010ec <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80010d8:	6939      	ldr	r1, [r7, #16]
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 fd08 	bl	8001af0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2201      	movs	r2, #1
 80010e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e00c      	b.n	8001106 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80010ec:	f640 70ff 	movw	r0, #4095	; 0xfff
 80010f0:	f7ff fd3c 	bl	8000b6c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80010f4:	6939      	ldr	r1, [r7, #16]
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f000 fcfa 	bl	8001af0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2201      	movs	r2, #1
 8001100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3720      	adds	r7, #32
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop

08001110 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001110:	b480      	push	{r7}
 8001112:	b087      	sub	sp, #28
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
 800111c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001128:	2b01      	cmp	r3, #1
 800112a:	d101      	bne.n	8001130 <HAL_ETH_DMATxDescListInit+0x20>
 800112c:	2302      	movs	r3, #2
 800112e:	e052      	b.n	80011d6 <HAL_ETH_DMATxDescListInit+0xc6>
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2201      	movs	r2, #1
 8001134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2202      	movs	r2, #2
 800113c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
 800114a:	e030      	b.n	80011ae <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	015b      	lsls	r3, r3, #5
 8001150:	68ba      	ldr	r2, [r7, #8]
 8001152:	4413      	add	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800115c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001164:	fb02 f303 	mul.w	r3, r2, r3
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	4413      	add	r3, r2
 800116c:	461a      	mov	r2, r3
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d105      	bne.n	8001186 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	3b01      	subs	r3, #1
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	429a      	cmp	r2, r3
 800118e:	d208      	bcs.n	80011a2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	3301      	adds	r3, #1
 8001194:	015b      	lsls	r3, r3, #5
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	4413      	add	r3, r2
 800119a:	461a      	mov	r2, r3
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	60da      	str	r2, [r3, #12]
 80011a0:	e002      	b.n	80011a8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	3301      	adds	r3, #1
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d3ca      	bcc.n	800114c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011c0:	3310      	adds	r3, #16
 80011c2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2201      	movs	r2, #1
 80011c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	371c      	adds	r7, #28
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b087      	sub	sp, #28
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	60f8      	str	r0, [r7, #12]
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
 80011ee:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d101      	bne.n	8001202 <HAL_ETH_DMARxDescListInit+0x20>
 80011fe:	2302      	movs	r3, #2
 8001200:	e056      	b.n	80012b0 <HAL_ETH_DMARxDescListInit+0xce>
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2201      	movs	r2, #1
 8001206:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	2202      	movs	r2, #2
 800120e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	e034      	b.n	8001288 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	015b      	lsls	r3, r3, #5
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	4413      	add	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800122e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001236:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800123e:	fb02 f303 	mul.w	r3, r2, r3
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	461a      	mov	r2, r3
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d105      	bne.n	8001260 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	3b01      	subs	r3, #1
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	429a      	cmp	r2, r3
 8001268:	d208      	bcs.n	800127c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	3301      	adds	r3, #1
 800126e:	015b      	lsls	r3, r3, #5
 8001270:	68ba      	ldr	r2, [r7, #8]
 8001272:	4413      	add	r3, r2
 8001274:	461a      	mov	r2, r3
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	e002      	b.n	8001282 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800127c:	68ba      	ldr	r2, [r7, #8]
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	3301      	adds	r3, #1
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	429a      	cmp	r2, r3
 800128e:	d3c6      	bcc.n	800121e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68ba      	ldr	r2, [r7, #8]
 8001296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800129a:	330c      	adds	r3, #12
 800129c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2201      	movs	r2, #1
 80012a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	371c      	adds	r7, #28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80012bc:	b480      	push	{r7}
 80012be:	b087      	sub	sp, #28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d101      	bne.n	80012e0 <HAL_ETH_TransmitFrame+0x24>
 80012dc:	2302      	movs	r3, #2
 80012de:	e0cd      	b.n	800147c <HAL_ETH_TransmitFrame+0x1c0>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2201      	movs	r2, #1
 80012e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2202      	movs	r2, #2
 80012ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d109      	bne.n	800130a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2201      	movs	r2, #1
 80012fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001306:	2301      	movs	r3, #1
 8001308:	e0b8      	b.n	800147c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	da09      	bge.n	8001328 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2212      	movs	r2, #18
 8001318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e0a9      	b.n	800147c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800132e:	4293      	cmp	r3, r2
 8001330:	d915      	bls.n	800135e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	4a54      	ldr	r2, [pc, #336]	; (8001488 <HAL_ETH_TransmitFrame+0x1cc>)
 8001336:	fba2 2303 	umull	r2, r3, r2, r3
 800133a:	0a9b      	lsrs	r3, r3, #10
 800133c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	4b51      	ldr	r3, [pc, #324]	; (8001488 <HAL_ETH_TransmitFrame+0x1cc>)
 8001342:	fba3 1302 	umull	r1, r3, r3, r2
 8001346:	0a9b      	lsrs	r3, r3, #10
 8001348:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800134c:	fb01 f303 	mul.w	r3, r1, r3
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d005      	beq.n	8001362 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	3301      	adds	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	e001      	b.n	8001362 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800135e:	2301      	movs	r3, #1
 8001360:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d11c      	bne.n	80013a2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001372:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001376:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001382:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001392:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	461a      	mov	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	62da      	str	r2, [r3, #44]	; 0x2c
 80013a0:	e04b      	b.n	800143a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	e044      	b.n	8001432 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013b6:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d107      	bne.n	80013ce <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013cc:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80013d6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	3b01      	subs	r3, #1
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d116      	bne.n	8001410 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ec:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80013f0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	4a25      	ldr	r2, [pc, #148]	; (800148c <HAL_ETH_TransmitFrame+0x1d0>)
 80013f6:	fb02 f203 	mul.w	r2, r2, r3
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	4413      	add	r3, r2
 80013fe:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001402:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001408:	68fa      	ldr	r2, [r7, #12]
 800140a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800140e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800141e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	461a      	mov	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	3301      	adds	r3, #1
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	429a      	cmp	r2, r3
 8001438:	d3b6      	bcc.n	80013a8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001442:	3314      	adds	r3, #20
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00d      	beq.n	800146a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001456:	3314      	adds	r3, #20
 8001458:	2204      	movs	r2, #4
 800145a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001464:	3304      	adds	r3, #4
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2201      	movs	r2, #1
 800146e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	371c      	adds	r7, #28
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	ac02b00b 	.word	0xac02b00b
 800148c:	fffffa0c 	.word	0xfffffa0c

08001490 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d101      	bne.n	80014aa <HAL_ETH_GetReceivedFrame+0x1a>
 80014a6:	2302      	movs	r3, #2
 80014a8:	e070      	b.n	800158c <HAL_ETH_GetReceivedFrame+0xfc>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2201      	movs	r2, #1
 80014ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2202      	movs	r2, #2
 80014b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	db5a      	blt.n	800157a <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d030      	beq.n	8001534 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d6:	1c5a      	adds	r2, r3, #1
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d103      	bne.n	80014ec <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	0c1b      	lsrs	r3, r3, #16
 80014fc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001500:	3b04      	subs	r3, #4
 8001502:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	461a      	mov	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2201      	movs	r2, #1
 8001524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001530:	2300      	movs	r3, #0
 8001532:	e02b      	b.n	800158c <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800153e:	2b00      	cmp	r3, #0
 8001540:	d010      	beq.n	8001564 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2201      	movs	r2, #1
 8001554:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	461a      	mov	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	629a      	str	r2, [r3, #40]	; 0x28
 8001562:	e00a      	b.n	800157a <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001568:	1c5a      	adds	r2, r3, #1
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	461a      	mov	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2201      	movs	r2, #1
 800157e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
}
 800158c:	4618      	mov	r0, r3
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015a8:	3314      	adds	r3, #20
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b0:	2b40      	cmp	r3, #64	; 0x40
 80015b2:	d112      	bne.n	80015da <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f000 f860 	bl	800167a <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c2:	3314      	adds	r3, #20
 80015c4:	2240      	movs	r2, #64	; 0x40
 80015c6:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80015d8:	e01b      	b.n	8001612 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015e2:	3314      	adds	r3, #20
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d111      	bne.n	8001612 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f839 	bl	8001666 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015fc:	3314      	adds	r3, #20
 80015fe:	2201      	movs	r2, #1
 8001600:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2201      	movs	r2, #1
 8001606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800161a:	3314      	adds	r3, #20
 800161c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001620:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800162a:	3314      	adds	r3, #20
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001636:	d112      	bne.n	800165e <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 f828 	bl	800168e <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001646:	3314      	adds	r3, #20
 8001648:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800164c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2201      	movs	r2, #1
 8001652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b086      	sub	sp, #24
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	60f8      	str	r0, [r7, #12]
 80016aa:	460b      	mov	r3, r1
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b82      	cmp	r3, #130	; 0x82
 80016c2:	d101      	bne.n	80016c8 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80016c4:	2302      	movs	r3, #2
 80016c6:	e050      	b.n	800176a <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2282      	movs	r2, #130	; 0x82
 80016cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	f003 031c 	and.w	r3, r3, #28
 80016de:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	8a1b      	ldrh	r3, [r3, #16]
 80016e4:	02db      	lsls	r3, r3, #11
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80016ee:	897b      	ldrh	r3, [r7, #10]
 80016f0:	019b      	lsls	r3, r3, #6
 80016f2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	f023 0302 	bic.w	r3, r3, #2
 8001702:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001714:	f7ff fa1e 	bl	8000b54 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800171a:	e015      	b.n	8001748 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800171c:	f7ff fa1a 	bl	8000b54 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800172a:	d309      	bcc.n	8001740 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e014      	b.n	800176a <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1e4      	bne.n	800171c <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	b29b      	uxth	r3, r3
 800175a:	461a      	mov	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b086      	sub	sp, #24
 8001776:	af00      	add	r7, sp, #0
 8001778:	60f8      	str	r0, [r7, #12]
 800177a:	460b      	mov	r3, r1
 800177c:	607a      	str	r2, [r7, #4]
 800177e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001784:	2300      	movs	r3, #0
 8001786:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b42      	cmp	r3, #66	; 0x42
 8001792:	d101      	bne.n	8001798 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001794:	2302      	movs	r3, #2
 8001796:	e04e      	b.n	8001836 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2242      	movs	r2, #66	; 0x42
 800179c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	f003 031c 	and.w	r3, r3, #28
 80017ae:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8a1b      	ldrh	r3, [r3, #16]
 80017b4:	02db      	lsls	r3, r3, #11
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80017be:	897b      	ldrh	r3, [r7, #10]
 80017c0:	019b      	lsls	r3, r3, #6
 80017c2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	f043 0302 	orr.w	r3, r3, #2
 80017d2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	b29a      	uxth	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80017ee:	f7ff f9b1 	bl	8000b54 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80017f4:	e015      	b.n	8001822 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80017f6:	f7ff f9ad 	bl	8000b54 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001804:	d309      	bcc.n	800181a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e00d      	b.n	8001836 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1e4      	bne.n	80017f6 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2201      	movs	r2, #1
 8001830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800184c:	2b01      	cmp	r3, #1
 800184e:	d101      	bne.n	8001854 <HAL_ETH_Start+0x16>
 8001850:	2302      	movs	r3, #2
 8001852:	e01f      	b.n	8001894 <HAL_ETH_Start+0x56>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2202      	movs	r2, #2
 8001860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 fb45 	bl	8001ef4 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 fb7c 	bl	8001f68 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f000 fc13 	bl	800209c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 fbb0 	bl	8001fdc <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 fbdd 	bl	800203c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2201      	movs	r2, #1
 8001886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d101      	bne.n	80018b2 <HAL_ETH_Stop+0x16>
 80018ae:	2302      	movs	r3, #2
 80018b0:	e01f      	b.n	80018f2 <HAL_ETH_Stop+0x56>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2202      	movs	r2, #2
 80018be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 fba2 	bl	800200c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 fbcf 	bl	800206c <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 fb67 	bl	8001fa2 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 fbe1 	bl	800209c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 fb27 	bl	8001f2e <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001910:	2b01      	cmp	r3, #1
 8001912:	d101      	bne.n	8001918 <HAL_ETH_ConfigMAC+0x1c>
 8001914:	2302      	movs	r3, #2
 8001916:	e0e4      	b.n	8001ae2 <HAL_ETH_ConfigMAC+0x1e6>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2202      	movs	r2, #2
 8001924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 80b1 	beq.w	8001a92 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	4b6c      	ldr	r3, [pc, #432]	; (8001aec <HAL_ETH_ConfigMAC+0x1f0>)
 800193c:	4013      	ands	r3, r2
 800193e:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001948:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800194e:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001954:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800195a:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001960:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001966:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 800196c:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001972:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001978:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800197e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001984:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800198a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	4313      	orrs	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019a2:	2001      	movs	r0, #1
 80019a4:	f7ff f8e2 	bl	8000b6c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80019b8:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80019be:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80019c4:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80019ca:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80019d0:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80019d6:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80019e2:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80019e4:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80019ee:	2001      	movs	r0, #1
 80019f0:	f7ff f8bc 	bl	8000b6c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001a04:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a0e:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001a1e:	4013      	ands	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a26:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001a2c:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001a32:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001a38:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001a3e:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001a44:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	f7ff f885 	bl	8000b6c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	69db      	ldr	r3, [r3, #28]
 8001a80:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a82:	2001      	movs	r0, #1
 8001a84:	f7ff f872 	bl	8000b6c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	61da      	str	r2, [r3, #28]
 8001a90:	e01e      	b.n	8001ad0 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001aa0:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	f7ff f852 	bl	8000b6c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	ff20810f 	.word	0xff20810f

08001af0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b0b0      	sub	sp, #192	; 0xc0
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d007      	beq.n	8001b16 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b0c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b14:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001b16:	2300      	movs	r3, #0
 8001b18:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001b22:	2300      	movs	r3, #0
 8001b24:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d103      	bne.n	8001b3e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b3a:	663b      	str	r3, [r7, #96]	; 0x60
 8001b3c:	e001      	b.n	8001b42 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001b42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b46:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001b5c:	2340      	movs	r3, #64	; 0x40
 8001b5e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001b72:	2300      	movs	r3, #0
 8001b74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001b90:	2380      	movs	r3, #128	; 0x80
 8001b92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001b96:	2300      	movs	r3, #0
 8001b98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001bc4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bc8:	4bac      	ldr	r3, [pc, #688]	; (8001e7c <ETH_MACDMAConfig+0x38c>)
 8001bca:	4013      	ands	r3, r2
 8001bcc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001bd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001bd4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001bd8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001bda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001bdc:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001be2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001be4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001be6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001be8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001bea:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001bf0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001bf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001bf4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001bf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001bf8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001bfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001bfc:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001c00:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001c02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001c04:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001c06:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c18:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c24:	2001      	movs	r0, #1
 8001c26:	f7fe ffa1 	bl	8000b6c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c32:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c34:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001c36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c38:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001c3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001c3c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001c3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001c42:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001c44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001c48:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001c4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001c4e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001c50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001c54:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001c58:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001c60:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c62:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c6e:	2001      	movs	r0, #1
 8001c70:	f7fe ff7c 	bl	8000b6c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c7c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c86:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001c90:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001c9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ca0:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001caa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cae:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001cb0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001cb4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001cb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001cba:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001cbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001cc0:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001cc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001cc6:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001cc8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001ccc:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001cce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ce0:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cec:	2001      	movs	r0, #1
 8001cee:	f7fe ff3d 	bl	8000b6c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cfa:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001cfc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001d00:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d16:	2001      	movs	r0, #1
 8001d18:	f7fe ff28 	bl	8000b6c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d24:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001d2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d2e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001d30:	2300      	movs	r3, #0
 8001d32:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001d34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d38:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001d46:	2300      	movs	r3, #0
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001d4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001d54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d58:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d5e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d64:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001d66:	2380      	movs	r3, #128	; 0x80
 8001d68:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d7a:	3318      	adds	r3, #24
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001d82:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d86:	4b3e      	ldr	r3, [pc, #248]	; (8001e80 <ETH_MACDMAConfig+0x390>)
 8001d88:	4013      	ands	r3, r2
 8001d8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001d8e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001d90:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001d92:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001d94:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001d96:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001d98:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001d9a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001d9c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001d9e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001da0:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001da2:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001da4:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001da6:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001daa:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001dae:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001db0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001db4:	4313      	orrs	r3, r2
 8001db6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dc2:	3318      	adds	r3, #24
 8001dc4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dc8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd2:	3318      	adds	r3, #24
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f7fe fec6 	bl	8000b6c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de8:	3318      	adds	r3, #24
 8001dea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dee:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001df4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001df8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001dfc:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001e00:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e04:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001e06:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001e0a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e18:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e28:	2001      	movs	r0, #1
 8001e2a:	f7fe fe9f 	bl	8000b6c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e36:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e3a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d10f      	bne.n	8001e64 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e4c:	331c      	adds	r3, #28
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e60:	331c      	adds	r3, #28
 8001e62:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f809 	bl	8001e84 <ETH_MACAddressConfig>
}
 8001e72:	bf00      	nop
 8001e74:	37c0      	adds	r7, #192	; 0xc0
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	ff20810f 	.word	0xff20810f
 8001e80:	f8de3f23 	.word	0xf8de3f23

08001e84 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b087      	sub	sp, #28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3305      	adds	r3, #5
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	021b      	lsls	r3, r3, #8
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	3204      	adds	r2, #4
 8001e9c:	7812      	ldrb	r2, [r2, #0]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <ETH_MACAddressConfig+0x68>)
 8001ea6:	4413      	add	r3, r2
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3303      	adds	r3, #3
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	061a      	lsls	r2, r3, #24
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3302      	adds	r3, #2
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	041b      	lsls	r3, r3, #16
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	021b      	lsls	r3, r3, #8
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	7812      	ldrb	r2, [r2, #0]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <ETH_MACAddressConfig+0x6c>)
 8001ed6:	4413      	add	r3, r2
 8001ed8:	461a      	mov	r2, r3
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	6013      	str	r3, [r2, #0]
}
 8001ede:	bf00      	nop
 8001ee0:	371c      	adds	r7, #28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40028040 	.word	0x40028040
 8001ef0:	40028044 	.word	0x40028044

08001ef4 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0208 	orr.w	r2, r2, #8
 8001f0e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001f18:	2001      	movs	r0, #1
 8001f1a:	f000 f8e9 	bl	80020f0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	601a      	str	r2, [r3, #0]
}
 8001f26:	bf00      	nop
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b084      	sub	sp, #16
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0208 	bic.w	r2, r2, #8
 8001f48:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001f52:	2001      	movs	r0, #1
 8001f54:	f000 f8cc 	bl	80020f0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	601a      	str	r2, [r3, #0]
}
 8001f60:	bf00      	nop
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0204 	orr.w	r2, r2, #4
 8001f82:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	f000 f8af 	bl	80020f0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	601a      	str	r2, [r3, #0]
}
 8001f9a:	bf00      	nop
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b084      	sub	sp, #16
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0204 	bic.w	r2, r2, #4
 8001fbc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001fc6:	2001      	movs	r0, #1
 8001fc8:	f000 f892 	bl	80020f0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	601a      	str	r2, [r3, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fec:	3318      	adds	r3, #24
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ffc:	3318      	adds	r3, #24
 8001ffe:	601a      	str	r2, [r3, #0]
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800201c:	3318      	adds	r3, #24
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800202c:	3318      	adds	r3, #24
 800202e:	601a      	str	r2, [r3, #0]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800204c:	3318      	adds	r3, #24
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f042 0202 	orr.w	r2, r2, #2
 8002058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800205c:	3318      	adds	r3, #24
 800205e:	601a      	str	r2, [r3, #0]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800207c:	3318      	adds	r3, #24
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0202 	bic.w	r2, r2, #2
 8002088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800208c:	3318      	adds	r3, #24
 800208e:	601a      	str	r2, [r3, #0]
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020b0:	3318      	adds	r3, #24
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80020bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020c0:	3318      	adds	r3, #24
 80020c2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020cc:	3318      	adds	r3, #24
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80020d2:	2001      	movs	r0, #1
 80020d4:	f000 f80c 	bl	80020f0 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020e2:	3318      	adds	r3, #24
 80020e4:	601a      	str	r2, [r3, #0]
}
 80020e6:	bf00      	nop
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <ETH_Delay+0x38>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a0b      	ldr	r2, [pc, #44]	; (800212c <ETH_Delay+0x3c>)
 80020fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002102:	0a5b      	lsrs	r3, r3, #9
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	fb02 f303 	mul.w	r3, r2, r3
 800210a:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 800210c:	bf00      	nop
  } 
  while (Delay --);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	1e5a      	subs	r2, r3, #1
 8002112:	60fa      	str	r2, [r7, #12]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1f9      	bne.n	800210c <ETH_Delay+0x1c>
}
 8002118:	bf00      	nop
 800211a:	bf00      	nop
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	20000000 	.word	0x20000000
 800212c:	10624dd3 	.word	0x10624dd3

08002130 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002130:	b480      	push	{r7}
 8002132:	b089      	sub	sp, #36	; 0x24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800213e:	2300      	movs	r3, #0
 8002140:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002142:	2300      	movs	r3, #0
 8002144:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
 800214a:	e16b      	b.n	8002424 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800214c:	2201      	movs	r2, #1
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	4013      	ands	r3, r2
 800215e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	429a      	cmp	r2, r3
 8002166:	f040 815a 	bne.w	800241e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	2b01      	cmp	r3, #1
 8002174:	d005      	beq.n	8002182 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800217e:	2b02      	cmp	r3, #2
 8002180:	d130      	bne.n	80021e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	2203      	movs	r2, #3
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	68da      	ldr	r2, [r3, #12]
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021b8:	2201      	movs	r2, #1
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	091b      	lsrs	r3, r3, #4
 80021ce:	f003 0201 	and.w	r2, r3, #1
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 0303 	and.w	r3, r3, #3
 80021ec:	2b03      	cmp	r3, #3
 80021ee:	d017      	beq.n	8002220 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	2203      	movs	r2, #3
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0303 	and.w	r3, r3, #3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d123      	bne.n	8002274 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	08da      	lsrs	r2, r3, #3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3208      	adds	r2, #8
 8002234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002238:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	220f      	movs	r2, #15
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	08da      	lsrs	r2, r3, #3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3208      	adds	r2, #8
 800226e:	69b9      	ldr	r1, [r7, #24]
 8002270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	2203      	movs	r2, #3
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0203 	and.w	r2, r3, #3
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 80b4 	beq.w	800241e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	4b60      	ldr	r3, [pc, #384]	; (800243c <HAL_GPIO_Init+0x30c>)
 80022bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022be:	4a5f      	ldr	r2, [pc, #380]	; (800243c <HAL_GPIO_Init+0x30c>)
 80022c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c4:	6453      	str	r3, [r2, #68]	; 0x44
 80022c6:	4b5d      	ldr	r3, [pc, #372]	; (800243c <HAL_GPIO_Init+0x30c>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022d2:	4a5b      	ldr	r2, [pc, #364]	; (8002440 <HAL_GPIO_Init+0x310>)
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	089b      	lsrs	r3, r3, #2
 80022d8:	3302      	adds	r3, #2
 80022da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	220f      	movs	r2, #15
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a52      	ldr	r2, [pc, #328]	; (8002444 <HAL_GPIO_Init+0x314>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d02b      	beq.n	8002356 <HAL_GPIO_Init+0x226>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a51      	ldr	r2, [pc, #324]	; (8002448 <HAL_GPIO_Init+0x318>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d025      	beq.n	8002352 <HAL_GPIO_Init+0x222>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a50      	ldr	r2, [pc, #320]	; (800244c <HAL_GPIO_Init+0x31c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d01f      	beq.n	800234e <HAL_GPIO_Init+0x21e>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a4f      	ldr	r2, [pc, #316]	; (8002450 <HAL_GPIO_Init+0x320>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d019      	beq.n	800234a <HAL_GPIO_Init+0x21a>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a4e      	ldr	r2, [pc, #312]	; (8002454 <HAL_GPIO_Init+0x324>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d013      	beq.n	8002346 <HAL_GPIO_Init+0x216>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a4d      	ldr	r2, [pc, #308]	; (8002458 <HAL_GPIO_Init+0x328>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d00d      	beq.n	8002342 <HAL_GPIO_Init+0x212>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a4c      	ldr	r2, [pc, #304]	; (800245c <HAL_GPIO_Init+0x32c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d007      	beq.n	800233e <HAL_GPIO_Init+0x20e>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a4b      	ldr	r2, [pc, #300]	; (8002460 <HAL_GPIO_Init+0x330>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d101      	bne.n	800233a <HAL_GPIO_Init+0x20a>
 8002336:	2307      	movs	r3, #7
 8002338:	e00e      	b.n	8002358 <HAL_GPIO_Init+0x228>
 800233a:	2308      	movs	r3, #8
 800233c:	e00c      	b.n	8002358 <HAL_GPIO_Init+0x228>
 800233e:	2306      	movs	r3, #6
 8002340:	e00a      	b.n	8002358 <HAL_GPIO_Init+0x228>
 8002342:	2305      	movs	r3, #5
 8002344:	e008      	b.n	8002358 <HAL_GPIO_Init+0x228>
 8002346:	2304      	movs	r3, #4
 8002348:	e006      	b.n	8002358 <HAL_GPIO_Init+0x228>
 800234a:	2303      	movs	r3, #3
 800234c:	e004      	b.n	8002358 <HAL_GPIO_Init+0x228>
 800234e:	2302      	movs	r3, #2
 8002350:	e002      	b.n	8002358 <HAL_GPIO_Init+0x228>
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <HAL_GPIO_Init+0x228>
 8002356:	2300      	movs	r3, #0
 8002358:	69fa      	ldr	r2, [r7, #28]
 800235a:	f002 0203 	and.w	r2, r2, #3
 800235e:	0092      	lsls	r2, r2, #2
 8002360:	4093      	lsls	r3, r2
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002368:	4935      	ldr	r1, [pc, #212]	; (8002440 <HAL_GPIO_Init+0x310>)
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	089b      	lsrs	r3, r3, #2
 800236e:	3302      	adds	r3, #2
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002376:	4b3b      	ldr	r3, [pc, #236]	; (8002464 <HAL_GPIO_Init+0x334>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	43db      	mvns	r3, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4013      	ands	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800239a:	4a32      	ldr	r2, [pc, #200]	; (8002464 <HAL_GPIO_Init+0x334>)
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023a0:	4b30      	ldr	r3, [pc, #192]	; (8002464 <HAL_GPIO_Init+0x334>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023c4:	4a27      	ldr	r2, [pc, #156]	; (8002464 <HAL_GPIO_Init+0x334>)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ca:	4b26      	ldr	r3, [pc, #152]	; (8002464 <HAL_GPIO_Init+0x334>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	43db      	mvns	r3, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4013      	ands	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ee:	4a1d      	ldr	r2, [pc, #116]	; (8002464 <HAL_GPIO_Init+0x334>)
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023f4:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <HAL_GPIO_Init+0x334>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4313      	orrs	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002418:	4a12      	ldr	r2, [pc, #72]	; (8002464 <HAL_GPIO_Init+0x334>)
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3301      	adds	r3, #1
 8002422:	61fb      	str	r3, [r7, #28]
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	2b0f      	cmp	r3, #15
 8002428:	f67f ae90 	bls.w	800214c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800242c:	bf00      	nop
 800242e:	bf00      	nop
 8002430:	3724      	adds	r7, #36	; 0x24
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40023800 	.word	0x40023800
 8002440:	40013800 	.word	0x40013800
 8002444:	40020000 	.word	0x40020000
 8002448:	40020400 	.word	0x40020400
 800244c:	40020800 	.word	0x40020800
 8002450:	40020c00 	.word	0x40020c00
 8002454:	40021000 	.word	0x40021000
 8002458:	40021400 	.word	0x40021400
 800245c:	40021800 	.word	0x40021800
 8002460:	40021c00 	.word	0x40021c00
 8002464:	40013c00 	.word	0x40013c00

08002468 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e264      	b.n	8002944 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d075      	beq.n	8002572 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002486:	4ba3      	ldr	r3, [pc, #652]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 030c 	and.w	r3, r3, #12
 800248e:	2b04      	cmp	r3, #4
 8002490:	d00c      	beq.n	80024ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002492:	4ba0      	ldr	r3, [pc, #640]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800249a:	2b08      	cmp	r3, #8
 800249c:	d112      	bne.n	80024c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800249e:	4b9d      	ldr	r3, [pc, #628]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024aa:	d10b      	bne.n	80024c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ac:	4b99      	ldr	r3, [pc, #612]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d05b      	beq.n	8002570 <HAL_RCC_OscConfig+0x108>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d157      	bne.n	8002570 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e23f      	b.n	8002944 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024cc:	d106      	bne.n	80024dc <HAL_RCC_OscConfig+0x74>
 80024ce:	4b91      	ldr	r3, [pc, #580]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a90      	ldr	r2, [pc, #576]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80024d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	e01d      	b.n	8002518 <HAL_RCC_OscConfig+0xb0>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024e4:	d10c      	bne.n	8002500 <HAL_RCC_OscConfig+0x98>
 80024e6:	4b8b      	ldr	r3, [pc, #556]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a8a      	ldr	r2, [pc, #552]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80024ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	4b88      	ldr	r3, [pc, #544]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a87      	ldr	r2, [pc, #540]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80024f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	e00b      	b.n	8002518 <HAL_RCC_OscConfig+0xb0>
 8002500:	4b84      	ldr	r3, [pc, #528]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a83      	ldr	r2, [pc, #524]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 8002506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800250a:	6013      	str	r3, [r2, #0]
 800250c:	4b81      	ldr	r3, [pc, #516]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a80      	ldr	r2, [pc, #512]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 8002512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d013      	beq.n	8002548 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002520:	f7fe fb18 	bl	8000b54 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002528:	f7fe fb14 	bl	8000b54 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b64      	cmp	r3, #100	; 0x64
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e204      	b.n	8002944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253a:	4b76      	ldr	r3, [pc, #472]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0xc0>
 8002546:	e014      	b.n	8002572 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002548:	f7fe fb04 	bl	8000b54 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002550:	f7fe fb00 	bl	8000b54 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b64      	cmp	r3, #100	; 0x64
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e1f0      	b.n	8002944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002562:	4b6c      	ldr	r3, [pc, #432]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0xe8>
 800256e:	e000      	b.n	8002572 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d063      	beq.n	8002646 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800257e:	4b65      	ldr	r3, [pc, #404]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 030c 	and.w	r3, r3, #12
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00b      	beq.n	80025a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800258a:	4b62      	ldr	r3, [pc, #392]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002592:	2b08      	cmp	r3, #8
 8002594:	d11c      	bne.n	80025d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002596:	4b5f      	ldr	r3, [pc, #380]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d116      	bne.n	80025d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a2:	4b5c      	ldr	r3, [pc, #368]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d005      	beq.n	80025ba <HAL_RCC_OscConfig+0x152>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d001      	beq.n	80025ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e1c4      	b.n	8002944 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ba:	4b56      	ldr	r3, [pc, #344]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4952      	ldr	r1, [pc, #328]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ce:	e03a      	b.n	8002646 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d020      	beq.n	800261a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d8:	4b4f      	ldr	r3, [pc, #316]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 80025da:	2201      	movs	r2, #1
 80025dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025de:	f7fe fab9 	bl	8000b54 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025e6:	f7fe fab5 	bl	8000b54 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e1a5      	b.n	8002944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f8:	4b46      	ldr	r3, [pc, #280]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002604:	4b43      	ldr	r3, [pc, #268]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	4940      	ldr	r1, [pc, #256]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 8002614:	4313      	orrs	r3, r2
 8002616:	600b      	str	r3, [r1, #0]
 8002618:	e015      	b.n	8002646 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800261a:	4b3f      	ldr	r3, [pc, #252]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002620:	f7fe fa98 	bl	8000b54 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002628:	f7fe fa94 	bl	8000b54 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e184      	b.n	8002944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800263a:	4b36      	ldr	r3, [pc, #216]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b00      	cmp	r3, #0
 8002650:	d030      	beq.n	80026b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d016      	beq.n	8002688 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800265a:	4b30      	ldr	r3, [pc, #192]	; (800271c <HAL_RCC_OscConfig+0x2b4>)
 800265c:	2201      	movs	r2, #1
 800265e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002660:	f7fe fa78 	bl	8000b54 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002668:	f7fe fa74 	bl	8000b54 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e164      	b.n	8002944 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800267a:	4b26      	ldr	r3, [pc, #152]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 800267c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f0      	beq.n	8002668 <HAL_RCC_OscConfig+0x200>
 8002686:	e015      	b.n	80026b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002688:	4b24      	ldr	r3, [pc, #144]	; (800271c <HAL_RCC_OscConfig+0x2b4>)
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800268e:	f7fe fa61 	bl	8000b54 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002696:	f7fe fa5d 	bl	8000b54 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e14d      	b.n	8002944 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a8:	4b1a      	ldr	r3, [pc, #104]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80026aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f0      	bne.n	8002696 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 80a0 	beq.w	8002802 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026c2:	2300      	movs	r3, #0
 80026c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026c6:	4b13      	ldr	r3, [pc, #76]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10f      	bne.n	80026f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	4a0e      	ldr	r2, [pc, #56]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80026dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e0:	6413      	str	r3, [r2, #64]	; 0x40
 80026e2:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ee:	2301      	movs	r3, #1
 80026f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f2:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <HAL_RCC_OscConfig+0x2b8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d121      	bne.n	8002742 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026fe:	4b08      	ldr	r3, [pc, #32]	; (8002720 <HAL_RCC_OscConfig+0x2b8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a07      	ldr	r2, [pc, #28]	; (8002720 <HAL_RCC_OscConfig+0x2b8>)
 8002704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800270a:	f7fe fa23 	bl	8000b54 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002710:	e011      	b.n	8002736 <HAL_RCC_OscConfig+0x2ce>
 8002712:	bf00      	nop
 8002714:	40023800 	.word	0x40023800
 8002718:	42470000 	.word	0x42470000
 800271c:	42470e80 	.word	0x42470e80
 8002720:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002724:	f7fe fa16 	bl	8000b54 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e106      	b.n	8002944 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002736:	4b85      	ldr	r3, [pc, #532]	; (800294c <HAL_RCC_OscConfig+0x4e4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f0      	beq.n	8002724 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d106      	bne.n	8002758 <HAL_RCC_OscConfig+0x2f0>
 800274a:	4b81      	ldr	r3, [pc, #516]	; (8002950 <HAL_RCC_OscConfig+0x4e8>)
 800274c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274e:	4a80      	ldr	r2, [pc, #512]	; (8002950 <HAL_RCC_OscConfig+0x4e8>)
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	6713      	str	r3, [r2, #112]	; 0x70
 8002756:	e01c      	b.n	8002792 <HAL_RCC_OscConfig+0x32a>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	2b05      	cmp	r3, #5
 800275e:	d10c      	bne.n	800277a <HAL_RCC_OscConfig+0x312>
 8002760:	4b7b      	ldr	r3, [pc, #492]	; (8002950 <HAL_RCC_OscConfig+0x4e8>)
 8002762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002764:	4a7a      	ldr	r2, [pc, #488]	; (8002950 <HAL_RCC_OscConfig+0x4e8>)
 8002766:	f043 0304 	orr.w	r3, r3, #4
 800276a:	6713      	str	r3, [r2, #112]	; 0x70
 800276c:	4b78      	ldr	r3, [pc, #480]	; (8002950 <HAL_RCC_OscConfig+0x4e8>)
 800276e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002770:	4a77      	ldr	r2, [pc, #476]	; (8002950 <HAL_RCC_OscConfig+0x4e8>)
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	6713      	str	r3, [r2, #112]	; 0x70
 8002778:	e00b      	b.n	8002792 <HAL_RCC_OscConfig+0x32a>
 800277a:	4b75      	ldr	r3, [pc, #468]	; (8002950 <HAL_RCC_OscConfig+0x4e8>)
 800277c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277e:	4a74      	ldr	r2, [pc, #464]	; (8002950 <HAL_RCC_OscConfig+0x4e8>)
 8002780:	f023 0301 	bic.w	r3, r3, #1
 8002784:	6713      	str	r3, [r2, #112]	; 0x70
 8002786:	4b72      	ldr	r3, [pc, #456]	; (8002950 <HAL_RCC_OscConfig+0x4e8>)
 8002788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278a:	4a71      	ldr	r2, [pc, #452]	; (8002950 <HAL_RCC_OscConfig+0x4e8>)
 800278c:	f023 0304 	bic.w	r3, r3, #4
 8002790:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d015      	beq.n	80027c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279a:	f7fe f9db 	bl	8000b54 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a0:	e00a      	b.n	80027b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a2:	f7fe f9d7 	bl	8000b54 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e0c5      	b.n	8002944 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b8:	4b65      	ldr	r3, [pc, #404]	; (8002950 <HAL_RCC_OscConfig+0x4e8>)
 80027ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0ee      	beq.n	80027a2 <HAL_RCC_OscConfig+0x33a>
 80027c4:	e014      	b.n	80027f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c6:	f7fe f9c5 	bl	8000b54 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027cc:	e00a      	b.n	80027e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ce:	f7fe f9c1 	bl	8000b54 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027dc:	4293      	cmp	r3, r2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e0af      	b.n	8002944 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e4:	4b5a      	ldr	r3, [pc, #360]	; (8002950 <HAL_RCC_OscConfig+0x4e8>)
 80027e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1ee      	bne.n	80027ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027f0:	7dfb      	ldrb	r3, [r7, #23]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d105      	bne.n	8002802 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f6:	4b56      	ldr	r3, [pc, #344]	; (8002950 <HAL_RCC_OscConfig+0x4e8>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	4a55      	ldr	r2, [pc, #340]	; (8002950 <HAL_RCC_OscConfig+0x4e8>)
 80027fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002800:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 809b 	beq.w	8002942 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800280c:	4b50      	ldr	r3, [pc, #320]	; (8002950 <HAL_RCC_OscConfig+0x4e8>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 030c 	and.w	r3, r3, #12
 8002814:	2b08      	cmp	r3, #8
 8002816:	d05c      	beq.n	80028d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d141      	bne.n	80028a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002820:	4b4c      	ldr	r3, [pc, #304]	; (8002954 <HAL_RCC_OscConfig+0x4ec>)
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002826:	f7fe f995 	bl	8000b54 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800282e:	f7fe f991 	bl	8000b54 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e081      	b.n	8002944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002840:	4b43      	ldr	r3, [pc, #268]	; (8002950 <HAL_RCC_OscConfig+0x4e8>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f0      	bne.n	800282e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69da      	ldr	r2, [r3, #28]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	431a      	orrs	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	019b      	lsls	r3, r3, #6
 800285c:	431a      	orrs	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002862:	085b      	lsrs	r3, r3, #1
 8002864:	3b01      	subs	r3, #1
 8002866:	041b      	lsls	r3, r3, #16
 8002868:	431a      	orrs	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286e:	061b      	lsls	r3, r3, #24
 8002870:	4937      	ldr	r1, [pc, #220]	; (8002950 <HAL_RCC_OscConfig+0x4e8>)
 8002872:	4313      	orrs	r3, r2
 8002874:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002876:	4b37      	ldr	r3, [pc, #220]	; (8002954 <HAL_RCC_OscConfig+0x4ec>)
 8002878:	2201      	movs	r2, #1
 800287a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287c:	f7fe f96a 	bl	8000b54 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002884:	f7fe f966 	bl	8000b54 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e056      	b.n	8002944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002896:	4b2e      	ldr	r3, [pc, #184]	; (8002950 <HAL_RCC_OscConfig+0x4e8>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0x41c>
 80028a2:	e04e      	b.n	8002942 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a4:	4b2b      	ldr	r3, [pc, #172]	; (8002954 <HAL_RCC_OscConfig+0x4ec>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028aa:	f7fe f953 	bl	8000b54 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b2:	f7fe f94f 	bl	8000b54 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e03f      	b.n	8002944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c4:	4b22      	ldr	r3, [pc, #136]	; (8002950 <HAL_RCC_OscConfig+0x4e8>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1f0      	bne.n	80028b2 <HAL_RCC_OscConfig+0x44a>
 80028d0:	e037      	b.n	8002942 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d101      	bne.n	80028de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e032      	b.n	8002944 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028de:	4b1c      	ldr	r3, [pc, #112]	; (8002950 <HAL_RCC_OscConfig+0x4e8>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d028      	beq.n	800293e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d121      	bne.n	800293e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002904:	429a      	cmp	r2, r3
 8002906:	d11a      	bne.n	800293e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800290e:	4013      	ands	r3, r2
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002914:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002916:	4293      	cmp	r3, r2
 8002918:	d111      	bne.n	800293e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002924:	085b      	lsrs	r3, r3, #1
 8002926:	3b01      	subs	r3, #1
 8002928:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800292a:	429a      	cmp	r2, r3
 800292c:	d107      	bne.n	800293e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002938:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800293a:	429a      	cmp	r2, r3
 800293c:	d001      	beq.n	8002942 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40007000 	.word	0x40007000
 8002950:	40023800 	.word	0x40023800
 8002954:	42470060 	.word	0x42470060

08002958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0cc      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800296c:	4b68      	ldr	r3, [pc, #416]	; (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d90c      	bls.n	8002994 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297a:	4b65      	ldr	r3, [pc, #404]	; (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002982:	4b63      	ldr	r3, [pc, #396]	; (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d001      	beq.n	8002994 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0b8      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d020      	beq.n	80029e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029ac:	4b59      	ldr	r3, [pc, #356]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	4a58      	ldr	r2, [pc, #352]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029c4:	4b53      	ldr	r3, [pc, #332]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	4a52      	ldr	r2, [pc, #328]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d0:	4b50      	ldr	r3, [pc, #320]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	494d      	ldr	r1, [pc, #308]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d044      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d107      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f6:	4b47      	ldr	r3, [pc, #284]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d119      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e07f      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d003      	beq.n	8002a16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d107      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a16:	4b3f      	ldr	r3, [pc, #252]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d109      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e06f      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a26:	4b3b      	ldr	r3, [pc, #236]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e067      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a36:	4b37      	ldr	r3, [pc, #220]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f023 0203 	bic.w	r2, r3, #3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	4934      	ldr	r1, [pc, #208]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a48:	f7fe f884 	bl	8000b54 <HAL_GetTick>
 8002a4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4e:	e00a      	b.n	8002a66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a50:	f7fe f880 	bl	8000b54 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e04f      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a66:	4b2b      	ldr	r3, [pc, #172]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 020c 	and.w	r2, r3, #12
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d1eb      	bne.n	8002a50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a78:	4b25      	ldr	r3, [pc, #148]	; (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d20c      	bcs.n	8002aa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a86:	4b22      	ldr	r3, [pc, #136]	; (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8e:	4b20      	ldr	r3, [pc, #128]	; (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e032      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d008      	beq.n	8002abe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aac:	4b19      	ldr	r3, [pc, #100]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	4916      	ldr	r1, [pc, #88]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d009      	beq.n	8002ade <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aca:	4b12      	ldr	r3, [pc, #72]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	490e      	ldr	r1, [pc, #56]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ade:	f000 f821 	bl	8002b24 <HAL_RCC_GetSysClockFreq>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	091b      	lsrs	r3, r3, #4
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	490a      	ldr	r1, [pc, #40]	; (8002b18 <HAL_RCC_ClockConfig+0x1c0>)
 8002af0:	5ccb      	ldrb	r3, [r1, r3]
 8002af2:	fa22 f303 	lsr.w	r3, r2, r3
 8002af6:	4a09      	ldr	r2, [pc, #36]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002afa:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <HAL_RCC_ClockConfig+0x1c8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fd ffe4 	bl	8000acc <HAL_InitTick>

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40023c00 	.word	0x40023c00
 8002b14:	40023800 	.word	0x40023800
 8002b18:	08011770 	.word	0x08011770
 8002b1c:	20000000 	.word	0x20000000
 8002b20:	20000004 	.word	0x20000004

08002b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b24:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b28:	b084      	sub	sp, #16
 8002b2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	607b      	str	r3, [r7, #4]
 8002b30:	2300      	movs	r3, #0
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	2300      	movs	r3, #0
 8002b36:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b3c:	4b67      	ldr	r3, [pc, #412]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 030c 	and.w	r3, r3, #12
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d00d      	beq.n	8002b64 <HAL_RCC_GetSysClockFreq+0x40>
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	f200 80bd 	bhi.w	8002cc8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d002      	beq.n	8002b58 <HAL_RCC_GetSysClockFreq+0x34>
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d003      	beq.n	8002b5e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b56:	e0b7      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b58:	4b61      	ldr	r3, [pc, #388]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b5a:	60bb      	str	r3, [r7, #8]
       break;
 8002b5c:	e0b7      	b.n	8002cce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b5e:	4b61      	ldr	r3, [pc, #388]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002b60:	60bb      	str	r3, [r7, #8]
      break;
 8002b62:	e0b4      	b.n	8002cce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b64:	4b5d      	ldr	r3, [pc, #372]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b6c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b6e:	4b5b      	ldr	r3, [pc, #364]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d04d      	beq.n	8002c16 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b7a:	4b58      	ldr	r3, [pc, #352]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	099b      	lsrs	r3, r3, #6
 8002b80:	461a      	mov	r2, r3
 8002b82:	f04f 0300 	mov.w	r3, #0
 8002b86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b8a:	f04f 0100 	mov.w	r1, #0
 8002b8e:	ea02 0800 	and.w	r8, r2, r0
 8002b92:	ea03 0901 	and.w	r9, r3, r1
 8002b96:	4640      	mov	r0, r8
 8002b98:	4649      	mov	r1, r9
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	f04f 0300 	mov.w	r3, #0
 8002ba2:	014b      	lsls	r3, r1, #5
 8002ba4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ba8:	0142      	lsls	r2, r0, #5
 8002baa:	4610      	mov	r0, r2
 8002bac:	4619      	mov	r1, r3
 8002bae:	ebb0 0008 	subs.w	r0, r0, r8
 8002bb2:	eb61 0109 	sbc.w	r1, r1, r9
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	f04f 0300 	mov.w	r3, #0
 8002bbe:	018b      	lsls	r3, r1, #6
 8002bc0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002bc4:	0182      	lsls	r2, r0, #6
 8002bc6:	1a12      	subs	r2, r2, r0
 8002bc8:	eb63 0301 	sbc.w	r3, r3, r1
 8002bcc:	f04f 0000 	mov.w	r0, #0
 8002bd0:	f04f 0100 	mov.w	r1, #0
 8002bd4:	00d9      	lsls	r1, r3, #3
 8002bd6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bda:	00d0      	lsls	r0, r2, #3
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	eb12 0208 	adds.w	r2, r2, r8
 8002be4:	eb43 0309 	adc.w	r3, r3, r9
 8002be8:	f04f 0000 	mov.w	r0, #0
 8002bec:	f04f 0100 	mov.w	r1, #0
 8002bf0:	0259      	lsls	r1, r3, #9
 8002bf2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002bf6:	0250      	lsls	r0, r2, #9
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	4619      	mov	r1, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	461a      	mov	r2, r3
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	f7fd fb32 	bl	8000270 <__aeabi_uldivmod>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4613      	mov	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	e04a      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c16:	4b31      	ldr	r3, [pc, #196]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	099b      	lsrs	r3, r3, #6
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c26:	f04f 0100 	mov.w	r1, #0
 8002c2a:	ea02 0400 	and.w	r4, r2, r0
 8002c2e:	ea03 0501 	and.w	r5, r3, r1
 8002c32:	4620      	mov	r0, r4
 8002c34:	4629      	mov	r1, r5
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	014b      	lsls	r3, r1, #5
 8002c40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c44:	0142      	lsls	r2, r0, #5
 8002c46:	4610      	mov	r0, r2
 8002c48:	4619      	mov	r1, r3
 8002c4a:	1b00      	subs	r0, r0, r4
 8002c4c:	eb61 0105 	sbc.w	r1, r1, r5
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	018b      	lsls	r3, r1, #6
 8002c5a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c5e:	0182      	lsls	r2, r0, #6
 8002c60:	1a12      	subs	r2, r2, r0
 8002c62:	eb63 0301 	sbc.w	r3, r3, r1
 8002c66:	f04f 0000 	mov.w	r0, #0
 8002c6a:	f04f 0100 	mov.w	r1, #0
 8002c6e:	00d9      	lsls	r1, r3, #3
 8002c70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c74:	00d0      	lsls	r0, r2, #3
 8002c76:	4602      	mov	r2, r0
 8002c78:	460b      	mov	r3, r1
 8002c7a:	1912      	adds	r2, r2, r4
 8002c7c:	eb45 0303 	adc.w	r3, r5, r3
 8002c80:	f04f 0000 	mov.w	r0, #0
 8002c84:	f04f 0100 	mov.w	r1, #0
 8002c88:	0299      	lsls	r1, r3, #10
 8002c8a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002c8e:	0290      	lsls	r0, r2, #10
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4610      	mov	r0, r2
 8002c96:	4619      	mov	r1, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f04f 0300 	mov.w	r3, #0
 8002ca0:	f7fd fae6 	bl	8000270 <__aeabi_uldivmod>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4613      	mov	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cac:	4b0b      	ldr	r3, [pc, #44]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	0c1b      	lsrs	r3, r3, #16
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc4:	60bb      	str	r3, [r7, #8]
      break;
 8002cc6:	e002      	b.n	8002cce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cc8:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002cca:	60bb      	str	r3, [r7, #8]
      break;
 8002ccc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cce:	68bb      	ldr	r3, [r7, #8]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002cda:	bf00      	nop
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	00f42400 	.word	0x00f42400
 8002ce4:	007a1200 	.word	0x007a1200

08002ce8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cec:	4b03      	ldr	r3, [pc, #12]	; (8002cfc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cee:	681b      	ldr	r3, [r3, #0]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	20000000 	.word	0x20000000

08002d00 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8002d06:	4b8d      	ldr	r3, [pc, #564]	; (8002f3c <MX_LWIP_Init+0x23c>)
 8002d08:	22c0      	movs	r2, #192	; 0xc0
 8002d0a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8002d0c:	4b8b      	ldr	r3, [pc, #556]	; (8002f3c <MX_LWIP_Init+0x23c>)
 8002d0e:	22a8      	movs	r2, #168	; 0xa8
 8002d10:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 18;
 8002d12:	4b8a      	ldr	r3, [pc, #552]	; (8002f3c <MX_LWIP_Init+0x23c>)
 8002d14:	2212      	movs	r2, #18
 8002d16:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 114;
 8002d18:	4b88      	ldr	r3, [pc, #544]	; (8002f3c <MX_LWIP_Init+0x23c>)
 8002d1a:	2272      	movs	r2, #114	; 0x72
 8002d1c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8002d1e:	4b88      	ldr	r3, [pc, #544]	; (8002f40 <MX_LWIP_Init+0x240>)
 8002d20:	22ff      	movs	r2, #255	; 0xff
 8002d22:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8002d24:	4b86      	ldr	r3, [pc, #536]	; (8002f40 <MX_LWIP_Init+0x240>)
 8002d26:	22ff      	movs	r2, #255	; 0xff
 8002d28:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8002d2a:	4b85      	ldr	r3, [pc, #532]	; (8002f40 <MX_LWIP_Init+0x240>)
 8002d2c:	22ff      	movs	r2, #255	; 0xff
 8002d2e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8002d30:	4b83      	ldr	r3, [pc, #524]	; (8002f40 <MX_LWIP_Init+0x240>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8002d36:	4b83      	ldr	r3, [pc, #524]	; (8002f44 <MX_LWIP_Init+0x244>)
 8002d38:	22c0      	movs	r2, #192	; 0xc0
 8002d3a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8002d3c:	4b81      	ldr	r3, [pc, #516]	; (8002f44 <MX_LWIP_Init+0x244>)
 8002d3e:	22a8      	movs	r2, #168	; 0xa8
 8002d40:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 18;
 8002d42:	4b80      	ldr	r3, [pc, #512]	; (8002f44 <MX_LWIP_Init+0x244>)
 8002d44:	2212      	movs	r2, #18
 8002d46:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8002d48:	4b7e      	ldr	r3, [pc, #504]	; (8002f44 <MX_LWIP_Init+0x244>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8002d4e:	f000 fcc1 	bl	80036d4 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8002d52:	4b7a      	ldr	r3, [pc, #488]	; (8002f3c <MX_LWIP_Init+0x23c>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	061a      	lsls	r2, r3, #24
 8002d58:	4b78      	ldr	r3, [pc, #480]	; (8002f3c <MX_LWIP_Init+0x23c>)
 8002d5a:	785b      	ldrb	r3, [r3, #1]
 8002d5c:	041b      	lsls	r3, r3, #16
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	4b76      	ldr	r3, [pc, #472]	; (8002f3c <MX_LWIP_Init+0x23c>)
 8002d62:	789b      	ldrb	r3, [r3, #2]
 8002d64:	021b      	lsls	r3, r3, #8
 8002d66:	4313      	orrs	r3, r2
 8002d68:	4a74      	ldr	r2, [pc, #464]	; (8002f3c <MX_LWIP_Init+0x23c>)
 8002d6a:	78d2      	ldrb	r2, [r2, #3]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	061a      	lsls	r2, r3, #24
 8002d70:	4b72      	ldr	r3, [pc, #456]	; (8002f3c <MX_LWIP_Init+0x23c>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	0619      	lsls	r1, r3, #24
 8002d76:	4b71      	ldr	r3, [pc, #452]	; (8002f3c <MX_LWIP_Init+0x23c>)
 8002d78:	785b      	ldrb	r3, [r3, #1]
 8002d7a:	041b      	lsls	r3, r3, #16
 8002d7c:	4319      	orrs	r1, r3
 8002d7e:	4b6f      	ldr	r3, [pc, #444]	; (8002f3c <MX_LWIP_Init+0x23c>)
 8002d80:	789b      	ldrb	r3, [r3, #2]
 8002d82:	021b      	lsls	r3, r3, #8
 8002d84:	430b      	orrs	r3, r1
 8002d86:	496d      	ldr	r1, [pc, #436]	; (8002f3c <MX_LWIP_Init+0x23c>)
 8002d88:	78c9      	ldrb	r1, [r1, #3]
 8002d8a:	430b      	orrs	r3, r1
 8002d8c:	021b      	lsls	r3, r3, #8
 8002d8e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002d92:	431a      	orrs	r2, r3
 8002d94:	4b69      	ldr	r3, [pc, #420]	; (8002f3c <MX_LWIP_Init+0x23c>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	0619      	lsls	r1, r3, #24
 8002d9a:	4b68      	ldr	r3, [pc, #416]	; (8002f3c <MX_LWIP_Init+0x23c>)
 8002d9c:	785b      	ldrb	r3, [r3, #1]
 8002d9e:	041b      	lsls	r3, r3, #16
 8002da0:	4319      	orrs	r1, r3
 8002da2:	4b66      	ldr	r3, [pc, #408]	; (8002f3c <MX_LWIP_Init+0x23c>)
 8002da4:	789b      	ldrb	r3, [r3, #2]
 8002da6:	021b      	lsls	r3, r3, #8
 8002da8:	430b      	orrs	r3, r1
 8002daa:	4964      	ldr	r1, [pc, #400]	; (8002f3c <MX_LWIP_Init+0x23c>)
 8002dac:	78c9      	ldrb	r1, [r1, #3]
 8002dae:	430b      	orrs	r3, r1
 8002db0:	0a1b      	lsrs	r3, r3, #8
 8002db2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002db6:	431a      	orrs	r2, r3
 8002db8:	4b60      	ldr	r3, [pc, #384]	; (8002f3c <MX_LWIP_Init+0x23c>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	0619      	lsls	r1, r3, #24
 8002dbe:	4b5f      	ldr	r3, [pc, #380]	; (8002f3c <MX_LWIP_Init+0x23c>)
 8002dc0:	785b      	ldrb	r3, [r3, #1]
 8002dc2:	041b      	lsls	r3, r3, #16
 8002dc4:	4319      	orrs	r1, r3
 8002dc6:	4b5d      	ldr	r3, [pc, #372]	; (8002f3c <MX_LWIP_Init+0x23c>)
 8002dc8:	789b      	ldrb	r3, [r3, #2]
 8002dca:	021b      	lsls	r3, r3, #8
 8002dcc:	430b      	orrs	r3, r1
 8002dce:	495b      	ldr	r1, [pc, #364]	; (8002f3c <MX_LWIP_Init+0x23c>)
 8002dd0:	78c9      	ldrb	r1, [r1, #3]
 8002dd2:	430b      	orrs	r3, r1
 8002dd4:	0e1b      	lsrs	r3, r3, #24
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	4a5b      	ldr	r2, [pc, #364]	; (8002f48 <MX_LWIP_Init+0x248>)
 8002dda:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8002ddc:	4b58      	ldr	r3, [pc, #352]	; (8002f40 <MX_LWIP_Init+0x240>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	061a      	lsls	r2, r3, #24
 8002de2:	4b57      	ldr	r3, [pc, #348]	; (8002f40 <MX_LWIP_Init+0x240>)
 8002de4:	785b      	ldrb	r3, [r3, #1]
 8002de6:	041b      	lsls	r3, r3, #16
 8002de8:	431a      	orrs	r2, r3
 8002dea:	4b55      	ldr	r3, [pc, #340]	; (8002f40 <MX_LWIP_Init+0x240>)
 8002dec:	789b      	ldrb	r3, [r3, #2]
 8002dee:	021b      	lsls	r3, r3, #8
 8002df0:	4313      	orrs	r3, r2
 8002df2:	4a53      	ldr	r2, [pc, #332]	; (8002f40 <MX_LWIP_Init+0x240>)
 8002df4:	78d2      	ldrb	r2, [r2, #3]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	061a      	lsls	r2, r3, #24
 8002dfa:	4b51      	ldr	r3, [pc, #324]	; (8002f40 <MX_LWIP_Init+0x240>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	0619      	lsls	r1, r3, #24
 8002e00:	4b4f      	ldr	r3, [pc, #316]	; (8002f40 <MX_LWIP_Init+0x240>)
 8002e02:	785b      	ldrb	r3, [r3, #1]
 8002e04:	041b      	lsls	r3, r3, #16
 8002e06:	4319      	orrs	r1, r3
 8002e08:	4b4d      	ldr	r3, [pc, #308]	; (8002f40 <MX_LWIP_Init+0x240>)
 8002e0a:	789b      	ldrb	r3, [r3, #2]
 8002e0c:	021b      	lsls	r3, r3, #8
 8002e0e:	430b      	orrs	r3, r1
 8002e10:	494b      	ldr	r1, [pc, #300]	; (8002f40 <MX_LWIP_Init+0x240>)
 8002e12:	78c9      	ldrb	r1, [r1, #3]
 8002e14:	430b      	orrs	r3, r1
 8002e16:	021b      	lsls	r3, r3, #8
 8002e18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	4b48      	ldr	r3, [pc, #288]	; (8002f40 <MX_LWIP_Init+0x240>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	0619      	lsls	r1, r3, #24
 8002e24:	4b46      	ldr	r3, [pc, #280]	; (8002f40 <MX_LWIP_Init+0x240>)
 8002e26:	785b      	ldrb	r3, [r3, #1]
 8002e28:	041b      	lsls	r3, r3, #16
 8002e2a:	4319      	orrs	r1, r3
 8002e2c:	4b44      	ldr	r3, [pc, #272]	; (8002f40 <MX_LWIP_Init+0x240>)
 8002e2e:	789b      	ldrb	r3, [r3, #2]
 8002e30:	021b      	lsls	r3, r3, #8
 8002e32:	430b      	orrs	r3, r1
 8002e34:	4942      	ldr	r1, [pc, #264]	; (8002f40 <MX_LWIP_Init+0x240>)
 8002e36:	78c9      	ldrb	r1, [r1, #3]
 8002e38:	430b      	orrs	r3, r1
 8002e3a:	0a1b      	lsrs	r3, r3, #8
 8002e3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002e40:	431a      	orrs	r2, r3
 8002e42:	4b3f      	ldr	r3, [pc, #252]	; (8002f40 <MX_LWIP_Init+0x240>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	0619      	lsls	r1, r3, #24
 8002e48:	4b3d      	ldr	r3, [pc, #244]	; (8002f40 <MX_LWIP_Init+0x240>)
 8002e4a:	785b      	ldrb	r3, [r3, #1]
 8002e4c:	041b      	lsls	r3, r3, #16
 8002e4e:	4319      	orrs	r1, r3
 8002e50:	4b3b      	ldr	r3, [pc, #236]	; (8002f40 <MX_LWIP_Init+0x240>)
 8002e52:	789b      	ldrb	r3, [r3, #2]
 8002e54:	021b      	lsls	r3, r3, #8
 8002e56:	430b      	orrs	r3, r1
 8002e58:	4939      	ldr	r1, [pc, #228]	; (8002f40 <MX_LWIP_Init+0x240>)
 8002e5a:	78c9      	ldrb	r1, [r1, #3]
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	0e1b      	lsrs	r3, r3, #24
 8002e60:	4313      	orrs	r3, r2
 8002e62:	4a3a      	ldr	r2, [pc, #232]	; (8002f4c <MX_LWIP_Init+0x24c>)
 8002e64:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8002e66:	4b37      	ldr	r3, [pc, #220]	; (8002f44 <MX_LWIP_Init+0x244>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	061a      	lsls	r2, r3, #24
 8002e6c:	4b35      	ldr	r3, [pc, #212]	; (8002f44 <MX_LWIP_Init+0x244>)
 8002e6e:	785b      	ldrb	r3, [r3, #1]
 8002e70:	041b      	lsls	r3, r3, #16
 8002e72:	431a      	orrs	r2, r3
 8002e74:	4b33      	ldr	r3, [pc, #204]	; (8002f44 <MX_LWIP_Init+0x244>)
 8002e76:	789b      	ldrb	r3, [r3, #2]
 8002e78:	021b      	lsls	r3, r3, #8
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	4a31      	ldr	r2, [pc, #196]	; (8002f44 <MX_LWIP_Init+0x244>)
 8002e7e:	78d2      	ldrb	r2, [r2, #3]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	061a      	lsls	r2, r3, #24
 8002e84:	4b2f      	ldr	r3, [pc, #188]	; (8002f44 <MX_LWIP_Init+0x244>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	0619      	lsls	r1, r3, #24
 8002e8a:	4b2e      	ldr	r3, [pc, #184]	; (8002f44 <MX_LWIP_Init+0x244>)
 8002e8c:	785b      	ldrb	r3, [r3, #1]
 8002e8e:	041b      	lsls	r3, r3, #16
 8002e90:	4319      	orrs	r1, r3
 8002e92:	4b2c      	ldr	r3, [pc, #176]	; (8002f44 <MX_LWIP_Init+0x244>)
 8002e94:	789b      	ldrb	r3, [r3, #2]
 8002e96:	021b      	lsls	r3, r3, #8
 8002e98:	430b      	orrs	r3, r1
 8002e9a:	492a      	ldr	r1, [pc, #168]	; (8002f44 <MX_LWIP_Init+0x244>)
 8002e9c:	78c9      	ldrb	r1, [r1, #3]
 8002e9e:	430b      	orrs	r3, r1
 8002ea0:	021b      	lsls	r3, r3, #8
 8002ea2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	4b26      	ldr	r3, [pc, #152]	; (8002f44 <MX_LWIP_Init+0x244>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	0619      	lsls	r1, r3, #24
 8002eae:	4b25      	ldr	r3, [pc, #148]	; (8002f44 <MX_LWIP_Init+0x244>)
 8002eb0:	785b      	ldrb	r3, [r3, #1]
 8002eb2:	041b      	lsls	r3, r3, #16
 8002eb4:	4319      	orrs	r1, r3
 8002eb6:	4b23      	ldr	r3, [pc, #140]	; (8002f44 <MX_LWIP_Init+0x244>)
 8002eb8:	789b      	ldrb	r3, [r3, #2]
 8002eba:	021b      	lsls	r3, r3, #8
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	4921      	ldr	r1, [pc, #132]	; (8002f44 <MX_LWIP_Init+0x244>)
 8002ec0:	78c9      	ldrb	r1, [r1, #3]
 8002ec2:	430b      	orrs	r3, r1
 8002ec4:	0a1b      	lsrs	r3, r3, #8
 8002ec6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	4b1d      	ldr	r3, [pc, #116]	; (8002f44 <MX_LWIP_Init+0x244>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	0619      	lsls	r1, r3, #24
 8002ed2:	4b1c      	ldr	r3, [pc, #112]	; (8002f44 <MX_LWIP_Init+0x244>)
 8002ed4:	785b      	ldrb	r3, [r3, #1]
 8002ed6:	041b      	lsls	r3, r3, #16
 8002ed8:	4319      	orrs	r1, r3
 8002eda:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <MX_LWIP_Init+0x244>)
 8002edc:	789b      	ldrb	r3, [r3, #2]
 8002ede:	021b      	lsls	r3, r3, #8
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	4918      	ldr	r1, [pc, #96]	; (8002f44 <MX_LWIP_Init+0x244>)
 8002ee4:	78c9      	ldrb	r1, [r1, #3]
 8002ee6:	430b      	orrs	r3, r1
 8002ee8:	0e1b      	lsrs	r3, r3, #24
 8002eea:	4313      	orrs	r3, r2
 8002eec:	4a18      	ldr	r2, [pc, #96]	; (8002f50 <MX_LWIP_Init+0x250>)
 8002eee:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8002ef0:	4b18      	ldr	r3, [pc, #96]	; (8002f54 <MX_LWIP_Init+0x254>)
 8002ef2:	9302      	str	r3, [sp, #8]
 8002ef4:	4b18      	ldr	r3, [pc, #96]	; (8002f58 <MX_LWIP_Init+0x258>)
 8002ef6:	9301      	str	r3, [sp, #4]
 8002ef8:	2300      	movs	r3, #0
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	4b14      	ldr	r3, [pc, #80]	; (8002f50 <MX_LWIP_Init+0x250>)
 8002efe:	4a13      	ldr	r2, [pc, #76]	; (8002f4c <MX_LWIP_Init+0x24c>)
 8002f00:	4911      	ldr	r1, [pc, #68]	; (8002f48 <MX_LWIP_Init+0x248>)
 8002f02:	4816      	ldr	r0, [pc, #88]	; (8002f5c <MX_LWIP_Init+0x25c>)
 8002f04:	f001 f88c 	bl	8004020 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8002f08:	4814      	ldr	r0, [pc, #80]	; (8002f5c <MX_LWIP_Init+0x25c>)
 8002f0a:	f001 fa3b 	bl	8004384 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8002f0e:	4b13      	ldr	r3, [pc, #76]	; (8002f5c <MX_LWIP_Init+0x25c>)
 8002f10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002f14:	089b      	lsrs	r3, r3, #2
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8002f20:	480e      	ldr	r0, [pc, #56]	; (8002f5c <MX_LWIP_Init+0x25c>)
 8002f22:	f001 fa3f 	bl	80043a4 <netif_set_up>
 8002f26:	e002      	b.n	8002f2e <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8002f28:	480c      	ldr	r0, [pc, #48]	; (8002f5c <MX_LWIP_Init+0x25c>)
 8002f2a:	f001 faa7 	bl	800447c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8002f2e:	490c      	ldr	r1, [pc, #48]	; (8002f60 <MX_LWIP_Init+0x260>)
 8002f30:	480a      	ldr	r0, [pc, #40]	; (8002f5c <MX_LWIP_Init+0x25c>)
 8002f32:	f001 fad5 	bl	80044e0 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8002f36:	bf00      	nop
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	20000264 	.word	0x20000264
 8002f40:	20000260 	.word	0x20000260
 8002f44:	20000258 	.word	0x20000258
 8002f48:	2000025c 	.word	0x2000025c
 8002f4c:	20000268 	.word	0x20000268
 8002f50:	2000026c 	.word	0x2000026c
 8002f54:	0800d765 	.word	0x0800d765
 8002f58:	08003501 	.word	0x08003501
 8002f5c:	20000220 	.word	0x20000220
 8002f60:	0800356d 	.word	0x0800356d

08002f64 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08e      	sub	sp, #56	; 0x38
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	60da      	str	r2, [r3, #12]
 8002f7a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a4a      	ldr	r2, [pc, #296]	; (80030ac <HAL_ETH_MspInit+0x148>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	f040 808d 	bne.w	80030a2 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002f88:	2300      	movs	r3, #0
 8002f8a:	623b      	str	r3, [r7, #32]
 8002f8c:	4b48      	ldr	r3, [pc, #288]	; (80030b0 <HAL_ETH_MspInit+0x14c>)
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f90:	4a47      	ldr	r2, [pc, #284]	; (80030b0 <HAL_ETH_MspInit+0x14c>)
 8002f92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f96:	6313      	str	r3, [r2, #48]	; 0x30
 8002f98:	4b45      	ldr	r3, [pc, #276]	; (80030b0 <HAL_ETH_MspInit+0x14c>)
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa0:	623b      	str	r3, [r7, #32]
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	61fb      	str	r3, [r7, #28]
 8002fa8:	4b41      	ldr	r3, [pc, #260]	; (80030b0 <HAL_ETH_MspInit+0x14c>)
 8002faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fac:	4a40      	ldr	r2, [pc, #256]	; (80030b0 <HAL_ETH_MspInit+0x14c>)
 8002fae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fb2:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb4:	4b3e      	ldr	r3, [pc, #248]	; (80030b0 <HAL_ETH_MspInit+0x14c>)
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fbc:	61fb      	str	r3, [r7, #28]
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61bb      	str	r3, [r7, #24]
 8002fc4:	4b3a      	ldr	r3, [pc, #232]	; (80030b0 <HAL_ETH_MspInit+0x14c>)
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	4a39      	ldr	r2, [pc, #228]	; (80030b0 <HAL_ETH_MspInit+0x14c>)
 8002fca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002fce:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd0:	4b37      	ldr	r3, [pc, #220]	; (80030b0 <HAL_ETH_MspInit+0x14c>)
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fd8:	61bb      	str	r3, [r7, #24]
 8002fda:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fdc:	2300      	movs	r3, #0
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	4b33      	ldr	r3, [pc, #204]	; (80030b0 <HAL_ETH_MspInit+0x14c>)
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe4:	4a32      	ldr	r2, [pc, #200]	; (80030b0 <HAL_ETH_MspInit+0x14c>)
 8002fe6:	f043 0304 	orr.w	r3, r3, #4
 8002fea:	6313      	str	r3, [r2, #48]	; 0x30
 8002fec:	4b30      	ldr	r3, [pc, #192]	; (80030b0 <HAL_ETH_MspInit+0x14c>)
 8002fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	613b      	str	r3, [r7, #16]
 8002ffc:	4b2c      	ldr	r3, [pc, #176]	; (80030b0 <HAL_ETH_MspInit+0x14c>)
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003000:	4a2b      	ldr	r2, [pc, #172]	; (80030b0 <HAL_ETH_MspInit+0x14c>)
 8003002:	f043 0301 	orr.w	r3, r3, #1
 8003006:	6313      	str	r3, [r2, #48]	; 0x30
 8003008:	4b29      	ldr	r3, [pc, #164]	; (80030b0 <HAL_ETH_MspInit+0x14c>)
 800300a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003014:	2300      	movs	r3, #0
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	4b25      	ldr	r3, [pc, #148]	; (80030b0 <HAL_ETH_MspInit+0x14c>)
 800301a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301c:	4a24      	ldr	r2, [pc, #144]	; (80030b0 <HAL_ETH_MspInit+0x14c>)
 800301e:	f043 0302 	orr.w	r3, r3, #2
 8003022:	6313      	str	r3, [r2, #48]	; 0x30
 8003024:	4b22      	ldr	r3, [pc, #136]	; (80030b0 <HAL_ETH_MspInit+0x14c>)
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003030:	2332      	movs	r3, #50	; 0x32
 8003032:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003034:	2302      	movs	r3, #2
 8003036:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003038:	2300      	movs	r3, #0
 800303a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800303c:	2303      	movs	r3, #3
 800303e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003040:	230b      	movs	r3, #11
 8003042:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003048:	4619      	mov	r1, r3
 800304a:	481a      	ldr	r0, [pc, #104]	; (80030b4 <HAL_ETH_MspInit+0x150>)
 800304c:	f7ff f870 	bl	8002130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003050:	2386      	movs	r3, #134	; 0x86
 8003052:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003054:	2302      	movs	r3, #2
 8003056:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003058:	2300      	movs	r3, #0
 800305a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800305c:	2303      	movs	r3, #3
 800305e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003060:	230b      	movs	r3, #11
 8003062:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003068:	4619      	mov	r1, r3
 800306a:	4813      	ldr	r0, [pc, #76]	; (80030b8 <HAL_ETH_MspInit+0x154>)
 800306c:	f7ff f860 	bl	8002130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8003070:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003076:	2302      	movs	r3, #2
 8003078:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307a:	2300      	movs	r3, #0
 800307c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800307e:	2303      	movs	r3, #3
 8003080:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003082:	230b      	movs	r3, #11
 8003084:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800308a:	4619      	mov	r1, r3
 800308c:	480b      	ldr	r0, [pc, #44]	; (80030bc <HAL_ETH_MspInit+0x158>)
 800308e:	f7ff f84f 	bl	8002130 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8003092:	2200      	movs	r2, #0
 8003094:	2100      	movs	r1, #0
 8003096:	203d      	movs	r0, #61	; 0x3d
 8003098:	f7fd fe67 	bl	8000d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800309c:	203d      	movs	r0, #61	; 0x3d
 800309e:	f7fd fe80 	bl	8000da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80030a2:	bf00      	nop
 80030a4:	3738      	adds	r7, #56	; 0x38
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40028000 	.word	0x40028000
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40020800 	.word	0x40020800
 80030b8:	40020000 	.word	0x40020000
 80030bc:	40020400 	.word	0x40020400

080030c0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80030c8:	2300      	movs	r3, #0
 80030ca:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80030cc:	4b4d      	ldr	r3, [pc, #308]	; (8003204 <low_level_init+0x144>)
 80030ce:	4a4e      	ldr	r2, [pc, #312]	; (8003208 <low_level_init+0x148>)
 80030d0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80030d2:	4b4c      	ldr	r3, [pc, #304]	; (8003204 <low_level_init+0x144>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80030d8:	4b4a      	ldr	r3, [pc, #296]	; (8003204 <low_level_init+0x144>)
 80030da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030de:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80030e0:	4b48      	ldr	r3, [pc, #288]	; (8003204 <low_level_init+0x144>)
 80030e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030e6:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80030e8:	4b46      	ldr	r3, [pc, #280]	; (8003204 <low_level_init+0x144>)
 80030ea:	2201      	movs	r2, #1
 80030ec:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80030ee:	2300      	movs	r3, #0
 80030f0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80030f2:	2380      	movs	r3, #128	; 0x80
 80030f4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80030f6:	23e1      	movs	r3, #225	; 0xe1
 80030f8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80030fa:	2300      	movs	r3, #0
 80030fc:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80030fe:	2300      	movs	r3, #0
 8003100:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003102:	2300      	movs	r3, #0
 8003104:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003106:	4a3f      	ldr	r2, [pc, #252]	; (8003204 <low_level_init+0x144>)
 8003108:	f107 0308 	add.w	r3, r7, #8
 800310c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800310e:	4b3d      	ldr	r3, [pc, #244]	; (8003204 <low_level_init+0x144>)
 8003110:	2200      	movs	r2, #0
 8003112:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003114:	4b3b      	ldr	r3, [pc, #236]	; (8003204 <low_level_init+0x144>)
 8003116:	2200      	movs	r2, #0
 8003118:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800311a:	4b3a      	ldr	r3, [pc, #232]	; (8003204 <low_level_init+0x144>)
 800311c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003120:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003122:	4838      	ldr	r0, [pc, #224]	; (8003204 <low_level_init+0x144>)
 8003124:	f7fd fe58 	bl	8000dd8 <HAL_ETH_Init>
 8003128:	4603      	mov	r3, r0
 800312a:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800312c:	7dfb      	ldrb	r3, [r7, #23]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d108      	bne.n	8003144 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003138:	f043 0304 	orr.w	r3, r3, #4
 800313c:	b2da      	uxtb	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003144:	2304      	movs	r3, #4
 8003146:	4a31      	ldr	r2, [pc, #196]	; (800320c <low_level_init+0x14c>)
 8003148:	4931      	ldr	r1, [pc, #196]	; (8003210 <low_level_init+0x150>)
 800314a:	482e      	ldr	r0, [pc, #184]	; (8003204 <low_level_init+0x144>)
 800314c:	f7fd ffe0 	bl	8001110 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003150:	2304      	movs	r3, #4
 8003152:	4a30      	ldr	r2, [pc, #192]	; (8003214 <low_level_init+0x154>)
 8003154:	4930      	ldr	r1, [pc, #192]	; (8003218 <low_level_init+0x158>)
 8003156:	482b      	ldr	r0, [pc, #172]	; (8003204 <low_level_init+0x144>)
 8003158:	f7fe f843 	bl	80011e2 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2206      	movs	r2, #6
 8003160:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003164:	4b27      	ldr	r3, [pc, #156]	; (8003204 <low_level_init+0x144>)
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	781a      	ldrb	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003170:	4b24      	ldr	r3, [pc, #144]	; (8003204 <low_level_init+0x144>)
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	785a      	ldrb	r2, [r3, #1]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800317c:	4b21      	ldr	r3, [pc, #132]	; (8003204 <low_level_init+0x144>)
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	789a      	ldrb	r2, [r3, #2]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003188:	4b1e      	ldr	r3, [pc, #120]	; (8003204 <low_level_init+0x144>)
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	78da      	ldrb	r2, [r3, #3]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003194:	4b1b      	ldr	r3, [pc, #108]	; (8003204 <low_level_init+0x144>)
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	791a      	ldrb	r2, [r3, #4]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80031a0:	4b18      	ldr	r3, [pc, #96]	; (8003204 <low_level_init+0x144>)
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	795a      	ldrb	r2, [r3, #5]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80031b2:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80031ba:	f043 030a 	orr.w	r3, r3, #10
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80031c6:	480f      	ldr	r0, [pc, #60]	; (8003204 <low_level_init+0x144>)
 80031c8:	f7fe fb39 	bl	800183e <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80031cc:	f107 0310 	add.w	r3, r7, #16
 80031d0:	461a      	mov	r2, r3
 80031d2:	211d      	movs	r1, #29
 80031d4:	480b      	ldr	r0, [pc, #44]	; (8003204 <low_level_init+0x144>)
 80031d6:	f7fe fa64 	bl	80016a2 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	f043 030b 	orr.w	r3, r3, #11
 80031e0:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	461a      	mov	r2, r3
 80031e6:	211d      	movs	r1, #29
 80031e8:	4806      	ldr	r0, [pc, #24]	; (8003204 <low_level_init+0x144>)
 80031ea:	f7fe fac2 	bl	8001772 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80031ee:	f107 0310 	add.w	r3, r7, #16
 80031f2:	461a      	mov	r2, r3
 80031f4:	211d      	movs	r1, #29
 80031f6:	4803      	ldr	r0, [pc, #12]	; (8003204 <low_level_init+0x144>)
 80031f8:	f7fe fa53 	bl	80016a2 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80031fc:	bf00      	nop
 80031fe:	3718      	adds	r7, #24
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	20001b40 	.word	0x20001b40
 8003208:	40028000 	.word	0x40028000
 800320c:	20001b88 	.word	0x20001b88
 8003210:	20000270 	.word	0x20000270
 8003214:	200002f0 	.word	0x200002f0
 8003218:	20001ac0 	.word	0x20001ac0

0800321c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08a      	sub	sp, #40	; 0x28
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003226:	4b4b      	ldr	r3, [pc, #300]	; (8003354 <low_level_output+0x138>)
 8003228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8003232:	2300      	movs	r3, #0
 8003234:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8003236:	2300      	movs	r3, #0
 8003238:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800323a:	2300      	movs	r3, #0
 800323c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800323e:	4b45      	ldr	r3, [pc, #276]	; (8003354 <low_level_output+0x138>)
 8003240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003242:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003244:	2300      	movs	r3, #0
 8003246:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	623b      	str	r3, [r7, #32]
 800324c:	e05a      	b.n	8003304 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	da03      	bge.n	800325e <low_level_output+0x42>
      {
        errval = ERR_USE;
 8003256:	23f8      	movs	r3, #248	; 0xf8
 8003258:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800325c:	e05c      	b.n	8003318 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	895b      	ldrh	r3, [r3, #10]
 8003262:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003264:	2300      	movs	r3, #0
 8003266:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003268:	e02f      	b.n	80032ca <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800326a:	69fa      	ldr	r2, [r7, #28]
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	18d0      	adds	r0, r2, r3
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	18d1      	adds	r1, r2, r3
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800327e:	3304      	adds	r3, #4
 8003280:	461a      	mov	r2, r3
 8003282:	f00a fb77 	bl	800d974 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	da03      	bge.n	800329c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003294:	23f8      	movs	r3, #248	; 0xf8
 8003296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800329a:	e03d      	b.n	8003318 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4413      	add	r3, r2
 80032a8:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80032ac:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80032b8:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80032c4:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80032c6:	2300      	movs	r3, #0
 80032c8:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	4413      	add	r3, r2
 80032d0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d8c8      	bhi.n	800326a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80032d8:	69fa      	ldr	r2, [r7, #28]
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	18d0      	adds	r0, r2, r3
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	4413      	add	r3, r2
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4619      	mov	r1, r3
 80032ea:	f00a fb43 	bl	800d974 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4413      	add	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4413      	add	r3, r2
 80032fc:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	623b      	str	r3, [r7, #32]
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1a1      	bne.n	800324e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800330a:	6979      	ldr	r1, [r7, #20]
 800330c:	4811      	ldr	r0, [pc, #68]	; (8003354 <low_level_output+0x138>)
 800330e:	f7fd ffd5 	bl	80012bc <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8003312:	2300      	movs	r3, #0
 8003314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003318:	4b0e      	ldr	r3, [pc, #56]	; (8003354 <low_level_output+0x138>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003320:	3314      	adds	r3, #20
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0320 	and.w	r3, r3, #32
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00d      	beq.n	8003348 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800332c:	4b09      	ldr	r3, [pc, #36]	; (8003354 <low_level_output+0x138>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003334:	3314      	adds	r3, #20
 8003336:	2220      	movs	r2, #32
 8003338:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800333a:	4b06      	ldr	r3, [pc, #24]	; (8003354 <low_level_output+0x138>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003342:	3304      	adds	r3, #4
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003348:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800334c:	4618      	mov	r0, r3
 800334e:	3728      	adds	r7, #40	; 0x28
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	20001b40 	.word	0x20001b40

08003358 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b08c      	sub	sp, #48	; 0x30
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003360:	2300      	movs	r3, #0
 8003362:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8003364:	2300      	movs	r3, #0
 8003366:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003368:	2300      	movs	r3, #0
 800336a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003370:	2300      	movs	r3, #0
 8003372:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003378:	2300      	movs	r3, #0
 800337a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800337c:	484f      	ldr	r0, [pc, #316]	; (80034bc <low_level_input+0x164>)
 800337e:	f7fe f887 	bl	8001490 <HAL_ETH_GetReceivedFrame>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <low_level_input+0x34>

    return NULL;
 8003388:	2300      	movs	r3, #0
 800338a:	e092      	b.n	80034b2 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800338c:	4b4b      	ldr	r3, [pc, #300]	; (80034bc <low_level_input+0x164>)
 800338e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003390:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003392:	4b4a      	ldr	r3, [pc, #296]	; (80034bc <low_level_input+0x164>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8003398:	89fb      	ldrh	r3, [r7, #14]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d007      	beq.n	80033ae <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800339e:	89fb      	ldrh	r3, [r7, #14]
 80033a0:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80033a4:	4619      	mov	r1, r3
 80033a6:	2000      	movs	r0, #0
 80033a8:	f001 f936 	bl	8004618 <pbuf_alloc>
 80033ac:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80033ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d04b      	beq.n	800344c <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80033b4:	4b41      	ldr	r3, [pc, #260]	; (80034bc <low_level_input+0x164>)
 80033b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b8:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80033ba:	2300      	movs	r3, #0
 80033bc:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80033be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80033c2:	e040      	b.n	8003446 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80033c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c6:	895b      	ldrh	r3, [r3, #10]
 80033c8:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80033ce:	e021      	b.n	8003414 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80033d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	18d0      	adds	r0, r2, r3
 80033d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	18d1      	adds	r1, r2, r3
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80033e4:	3304      	adds	r3, #4
 80033e6:	461a      	mov	r2, r3
 80033e8:	f00a fac4 	bl	800d974 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80033f8:	69fa      	ldr	r2, [r7, #28]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	4413      	add	r3, r2
 80033fe:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003402:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800340e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003410:	2300      	movs	r3, #0
 8003412:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	4413      	add	r3, r2
 800341a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800341e:	4293      	cmp	r3, r2
 8003420:	d8d6      	bhi.n	80033d0 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	18d0      	adds	r0, r2, r3
 800342a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	4413      	add	r3, r2
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	4619      	mov	r1, r3
 8003434:	f00a fa9e 	bl	800d974 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003438:	69fa      	ldr	r2, [r7, #28]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	4413      	add	r3, r2
 800343e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	62bb      	str	r3, [r7, #40]	; 0x28
 8003446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1bb      	bne.n	80033c4 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800344c:	4b1b      	ldr	r3, [pc, #108]	; (80034bc <low_level_input+0x164>)
 800344e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003450:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003452:	2300      	movs	r3, #0
 8003454:	613b      	str	r3, [r7, #16]
 8003456:	e00b      	b.n	8003470 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003458:	6a3b      	ldr	r3, [r7, #32]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003460:	6a3b      	ldr	r3, [r7, #32]
 8003462:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	3301      	adds	r3, #1
 800346e:	613b      	str	r3, [r7, #16]
 8003470:	4b12      	ldr	r3, [pc, #72]	; (80034bc <low_level_input+0x164>)
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	429a      	cmp	r2, r3
 8003478:	d3ee      	bcc.n	8003458 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800347a:	4b10      	ldr	r3, [pc, #64]	; (80034bc <low_level_input+0x164>)
 800347c:	2200      	movs	r2, #0
 800347e:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003480:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <low_level_input+0x164>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003488:	3314      	adds	r3, #20
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00d      	beq.n	80034b0 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003494:	4b09      	ldr	r3, [pc, #36]	; (80034bc <low_level_input+0x164>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800349c:	3314      	adds	r3, #20
 800349e:	2280      	movs	r2, #128	; 0x80
 80034a0:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80034a2:	4b06      	ldr	r3, [pc, #24]	; (80034bc <low_level_input+0x164>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034aa:	3308      	adds	r3, #8
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]
  }
  return p;
 80034b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3730      	adds	r7, #48	; 0x30
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	20001b40 	.word	0x20001b40

080034c0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7ff ff45 	bl	8003358 <low_level_input>
 80034ce:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d010      	beq.n	80034f8 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	4798      	blx	r3
 80034e0:	4603      	mov	r3, r0
 80034e2:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 80034e4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d006      	beq.n	80034fa <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f001 fb77 	bl	8004be0 <pbuf_free>
    p = NULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	e000      	b.n	80034fa <ethernetif_input+0x3a>
  if (p == NULL) return;
 80034f8:	bf00      	nop
  }
}
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d106      	bne.n	800351c <ethernetif_init+0x1c>
 800350e:	4b0e      	ldr	r3, [pc, #56]	; (8003548 <ethernetif_init+0x48>)
 8003510:	f240 220e 	movw	r2, #526	; 0x20e
 8003514:	490d      	ldr	r1, [pc, #52]	; (800354c <ethernetif_init+0x4c>)
 8003516:	480e      	ldr	r0, [pc, #56]	; (8003550 <ethernetif_init+0x50>)
 8003518:	f00a fa5c 	bl	800d9d4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2273      	movs	r2, #115	; 0x73
 8003520:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2274      	movs	r2, #116	; 0x74
 8003528:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a09      	ldr	r2, [pc, #36]	; (8003554 <ethernetif_init+0x54>)
 8003530:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a08      	ldr	r2, [pc, #32]	; (8003558 <ethernetif_init+0x58>)
 8003536:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f7ff fdc1 	bl	80030c0 <low_level_init>

  return ERR_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	0800ed90 	.word	0x0800ed90
 800354c:	0800edac 	.word	0x0800edac
 8003550:	0800edbc 	.word	0x0800edbc
 8003554:	0800bb05 	.word	0x0800bb05
 8003558:	0800321d 	.word	0x0800321d

0800355c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003560:	f7fd faf8 	bl	8000b54 <HAL_GetTick>
 8003564:	4603      	mov	r3, r0
}
 8003566:	4618      	mov	r0, r3
 8003568:	bd80      	pop	{r7, pc}
	...

0800356c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8003574:	2300      	movs	r3, #0
 8003576:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8003578:	2300      	movs	r3, #0
 800357a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003582:	089b      	lsrs	r3, r3, #2
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d05d      	beq.n	800364a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800358e:	4b34      	ldr	r3, [pc, #208]	; (8003660 <ethernetif_update_config+0xf4>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d03f      	beq.n	8003616 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8003596:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800359a:	2100      	movs	r1, #0
 800359c:	4830      	ldr	r0, [pc, #192]	; (8003660 <ethernetif_update_config+0xf4>)
 800359e:	f7fe f8e8 	bl	8001772 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80035a2:	f7fd fad7 	bl	8000b54 <HAL_GetTick>
 80035a6:	4603      	mov	r3, r0
 80035a8:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80035aa:	f107 0308 	add.w	r3, r7, #8
 80035ae:	461a      	mov	r2, r3
 80035b0:	2101      	movs	r1, #1
 80035b2:	482b      	ldr	r0, [pc, #172]	; (8003660 <ethernetif_update_config+0xf4>)
 80035b4:	f7fe f875 	bl	80016a2 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80035b8:	f7fd facc 	bl	8000b54 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035c6:	d828      	bhi.n	800361a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f003 0320 	and.w	r3, r3, #32
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0eb      	beq.n	80035aa <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80035d2:	f107 0308 	add.w	r3, r7, #8
 80035d6:	461a      	mov	r2, r3
 80035d8:	2110      	movs	r1, #16
 80035da:	4821      	ldr	r0, [pc, #132]	; (8003660 <ethernetif_update_config+0xf4>)
 80035dc:	f7fe f861 	bl	80016a2 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d004      	beq.n	80035f4 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80035ea:	4b1d      	ldr	r3, [pc, #116]	; (8003660 <ethernetif_update_config+0xf4>)
 80035ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035f0:	60da      	str	r2, [r3, #12]
 80035f2:	e002      	b.n	80035fa <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80035f4:	4b1a      	ldr	r3, [pc, #104]	; (8003660 <ethernetif_update_config+0xf4>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8003604:	4b16      	ldr	r3, [pc, #88]	; (8003660 <ethernetif_update_config+0xf4>)
 8003606:	2200      	movs	r2, #0
 8003608:	609a      	str	r2, [r3, #8]
 800360a:	e016      	b.n	800363a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800360c:	4b14      	ldr	r3, [pc, #80]	; (8003660 <ethernetif_update_config+0xf4>)
 800360e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003612:	609a      	str	r2, [r3, #8]
 8003614:	e011      	b.n	800363a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8003616:	bf00      	nop
 8003618:	e000      	b.n	800361c <ethernetif_update_config+0xb0>
          goto error;
 800361a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800361c:	4b10      	ldr	r3, [pc, #64]	; (8003660 <ethernetif_update_config+0xf4>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	08db      	lsrs	r3, r3, #3
 8003622:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003624:	4b0e      	ldr	r3, [pc, #56]	; (8003660 <ethernetif_update_config+0xf4>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	085b      	lsrs	r3, r3, #1
 800362a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800362c:	4313      	orrs	r3, r2
 800362e:	b29b      	uxth	r3, r3
 8003630:	461a      	mov	r2, r3
 8003632:	2100      	movs	r1, #0
 8003634:	480a      	ldr	r0, [pc, #40]	; (8003660 <ethernetif_update_config+0xf4>)
 8003636:	f7fe f89c 	bl	8001772 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800363a:	2100      	movs	r1, #0
 800363c:	4808      	ldr	r0, [pc, #32]	; (8003660 <ethernetif_update_config+0xf4>)
 800363e:	f7fe f95d 	bl	80018fc <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8003642:	4807      	ldr	r0, [pc, #28]	; (8003660 <ethernetif_update_config+0xf4>)
 8003644:	f7fe f8fb 	bl	800183e <HAL_ETH_Start>
 8003648:	e002      	b.n	8003650 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800364a:	4805      	ldr	r0, [pc, #20]	; (8003660 <ethernetif_update_config+0xf4>)
 800364c:	f7fe f926 	bl	800189c <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f807 	bl	8003664 <ethernetif_notify_conn_changed>
}
 8003656:	bf00      	nop
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	20001b40 	.word	0x20001b40

08003664 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8003682:	88fb      	ldrh	r3, [r7, #6]
 8003684:	021b      	lsls	r3, r3, #8
 8003686:	b21a      	sxth	r2, r3
 8003688:	88fb      	ldrh	r3, [r7, #6]
 800368a:	0a1b      	lsrs	r3, r3, #8
 800368c:	b29b      	uxth	r3, r3
 800368e:	b21b      	sxth	r3, r3
 8003690:	4313      	orrs	r3, r2
 8003692:	b21b      	sxth	r3, r3
 8003694:	b29b      	uxth	r3, r3
}
 8003696:	4618      	mov	r0, r3
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	061a      	lsls	r2, r3, #24
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	021b      	lsls	r3, r3, #8
 80036b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	0a1b      	lsrs	r3, r3, #8
 80036bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80036c0:	431a      	orrs	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	0e1b      	lsrs	r3, r3, #24
 80036c6:	4313      	orrs	r3, r2
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80036da:	2300      	movs	r3, #0
 80036dc:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80036de:	f000 f8d5 	bl	800388c <mem_init>
  memp_init();
 80036e2:	f000 fbdb 	bl	8003e9c <memp_init>
  pbuf_init();
  netif_init();
 80036e6:	f000 fc93 	bl	8004010 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80036ea:	f007 f84b 	bl	800a784 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80036ee:	f001 fda7 	bl	8005240 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80036f2:	f006 ffbd 	bl	800a670 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80036f6:	bf00      	nop
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	4603      	mov	r3, r0
 8003708:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800370a:	4b05      	ldr	r3, [pc, #20]	; (8003720 <ptr_to_mem+0x20>)
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	88fb      	ldrh	r3, [r7, #6]
 8003710:	4413      	add	r3, r2
}
 8003712:	4618      	mov	r0, r3
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	20000098 	.word	0x20000098

08003724 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800372c:	4b05      	ldr	r3, [pc, #20]	; (8003744 <mem_to_ptr+0x20>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	b29b      	uxth	r3, r3
}
 8003736:	4618      	mov	r0, r3
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	20000098 	.word	0x20000098

08003748 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003748:	b590      	push	{r4, r7, lr}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003750:	4b45      	ldr	r3, [pc, #276]	; (8003868 <plug_holes+0x120>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	429a      	cmp	r2, r3
 8003758:	d206      	bcs.n	8003768 <plug_holes+0x20>
 800375a:	4b44      	ldr	r3, [pc, #272]	; (800386c <plug_holes+0x124>)
 800375c:	f240 12df 	movw	r2, #479	; 0x1df
 8003760:	4943      	ldr	r1, [pc, #268]	; (8003870 <plug_holes+0x128>)
 8003762:	4844      	ldr	r0, [pc, #272]	; (8003874 <plug_holes+0x12c>)
 8003764:	f00a f936 	bl	800d9d4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003768:	4b43      	ldr	r3, [pc, #268]	; (8003878 <plug_holes+0x130>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	429a      	cmp	r2, r3
 8003770:	d306      	bcc.n	8003780 <plug_holes+0x38>
 8003772:	4b3e      	ldr	r3, [pc, #248]	; (800386c <plug_holes+0x124>)
 8003774:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003778:	4940      	ldr	r1, [pc, #256]	; (800387c <plug_holes+0x134>)
 800377a:	483e      	ldr	r0, [pc, #248]	; (8003874 <plug_holes+0x12c>)
 800377c:	f00a f92a 	bl	800d9d4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	791b      	ldrb	r3, [r3, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d006      	beq.n	8003796 <plug_holes+0x4e>
 8003788:	4b38      	ldr	r3, [pc, #224]	; (800386c <plug_holes+0x124>)
 800378a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800378e:	493c      	ldr	r1, [pc, #240]	; (8003880 <plug_holes+0x138>)
 8003790:	4838      	ldr	r0, [pc, #224]	; (8003874 <plug_holes+0x12c>)
 8003792:	f00a f91f 	bl	800d9d4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800379e:	d906      	bls.n	80037ae <plug_holes+0x66>
 80037a0:	4b32      	ldr	r3, [pc, #200]	; (800386c <plug_holes+0x124>)
 80037a2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80037a6:	4937      	ldr	r1, [pc, #220]	; (8003884 <plug_holes+0x13c>)
 80037a8:	4832      	ldr	r0, [pc, #200]	; (8003874 <plug_holes+0x12c>)
 80037aa:	f00a f913 	bl	800d9d4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	881b      	ldrh	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff ffa4 	bl	8003700 <ptr_to_mem>
 80037b8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d024      	beq.n	800380c <plug_holes+0xc4>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	791b      	ldrb	r3, [r3, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d120      	bne.n	800380c <plug_holes+0xc4>
 80037ca:	4b2b      	ldr	r3, [pc, #172]	; (8003878 <plug_holes+0x130>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d01b      	beq.n	800380c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80037d4:	4b2c      	ldr	r3, [pc, #176]	; (8003888 <plug_holes+0x140>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d102      	bne.n	80037e4 <plug_holes+0x9c>
      lfree = mem;
 80037de:	4a2a      	ldr	r2, [pc, #168]	; (8003888 <plug_holes+0x140>)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	881a      	ldrh	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	881b      	ldrh	r3, [r3, #0]
 80037f0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80037f4:	d00a      	beq.n	800380c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff ff80 	bl	8003700 <ptr_to_mem>
 8003800:	4604      	mov	r4, r0
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7ff ff8e 	bl	8003724 <mem_to_ptr>
 8003808:	4603      	mov	r3, r0
 800380a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	885b      	ldrh	r3, [r3, #2]
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff ff75 	bl	8003700 <ptr_to_mem>
 8003816:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	429a      	cmp	r2, r3
 800381e:	d01f      	beq.n	8003860 <plug_holes+0x118>
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	791b      	ldrb	r3, [r3, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d11b      	bne.n	8003860 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003828:	4b17      	ldr	r3, [pc, #92]	; (8003888 <plug_holes+0x140>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	429a      	cmp	r2, r3
 8003830:	d102      	bne.n	8003838 <plug_holes+0xf0>
      lfree = pmem;
 8003832:	4a15      	ldr	r2, [pc, #84]	; (8003888 <plug_holes+0x140>)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	881a      	ldrh	r2, [r3, #0]
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003848:	d00a      	beq.n	8003860 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	881b      	ldrh	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff ff56 	bl	8003700 <ptr_to_mem>
 8003854:	4604      	mov	r4, r0
 8003856:	68b8      	ldr	r0, [r7, #8]
 8003858:	f7ff ff64 	bl	8003724 <mem_to_ptr>
 800385c:	4603      	mov	r3, r0
 800385e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8003860:	bf00      	nop
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	bd90      	pop	{r4, r7, pc}
 8003868:	20000098 	.word	0x20000098
 800386c:	0800ede4 	.word	0x0800ede4
 8003870:	0800ee14 	.word	0x0800ee14
 8003874:	0800ee2c 	.word	0x0800ee2c
 8003878:	2000009c 	.word	0x2000009c
 800387c:	0800ee54 	.word	0x0800ee54
 8003880:	0800ee70 	.word	0x0800ee70
 8003884:	0800ee8c 	.word	0x0800ee8c
 8003888:	200000a0 	.word	0x200000a0

0800388c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003892:	4b18      	ldr	r3, [pc, #96]	; (80038f4 <mem_init+0x68>)
 8003894:	3303      	adds	r3, #3
 8003896:	f023 0303 	bic.w	r3, r3, #3
 800389a:	461a      	mov	r2, r3
 800389c:	4b16      	ldr	r3, [pc, #88]	; (80038f8 <mem_init+0x6c>)
 800389e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80038a0:	4b15      	ldr	r3, [pc, #84]	; (80038f8 <mem_init+0x6c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80038ac:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80038ba:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 80038be:	f7ff ff1f 	bl	8003700 <ptr_to_mem>
 80038c2:	4603      	mov	r3, r0
 80038c4:	4a0d      	ldr	r2, [pc, #52]	; (80038fc <mem_init+0x70>)
 80038c6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80038c8:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <mem_init+0x70>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2201      	movs	r2, #1
 80038ce:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80038d0:	4b0a      	ldr	r3, [pc, #40]	; (80038fc <mem_init+0x70>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80038d8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80038da:	4b08      	ldr	r3, [pc, #32]	; (80038fc <mem_init+0x70>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80038e2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80038e4:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <mem_init+0x6c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a05      	ldr	r2, [pc, #20]	; (8003900 <mem_init+0x74>)
 80038ea:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80038ec:	bf00      	nop
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	20003370 	.word	0x20003370
 80038f8:	20000098 	.word	0x20000098
 80038fc:	2000009c 	.word	0x2000009c
 8003900:	200000a0 	.word	0x200000a0

08003904 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7ff ff09 	bl	8003724 <mem_to_ptr>
 8003912:	4603      	mov	r3, r0
 8003914:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f7ff fef0 	bl	8003700 <ptr_to_mem>
 8003920:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	885b      	ldrh	r3, [r3, #2]
 8003926:	4618      	mov	r0, r3
 8003928:	f7ff feea 	bl	8003700 <ptr_to_mem>
 800392c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003936:	d818      	bhi.n	800396a <mem_link_valid+0x66>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	885b      	ldrh	r3, [r3, #2]
 800393c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003940:	d813      	bhi.n	800396a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003946:	8afa      	ldrh	r2, [r7, #22]
 8003948:	429a      	cmp	r2, r3
 800394a:	d004      	beq.n	8003956 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	881b      	ldrh	r3, [r3, #0]
 8003950:	8afa      	ldrh	r2, [r7, #22]
 8003952:	429a      	cmp	r2, r3
 8003954:	d109      	bne.n	800396a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003956:	4b08      	ldr	r3, [pc, #32]	; (8003978 <mem_link_valid+0x74>)
 8003958:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	429a      	cmp	r2, r3
 800395e:	d006      	beq.n	800396e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	885b      	ldrh	r3, [r3, #2]
 8003964:	8afa      	ldrh	r2, [r7, #22]
 8003966:	429a      	cmp	r2, r3
 8003968:	d001      	beq.n	800396e <mem_link_valid+0x6a>
    return 0;
 800396a:	2300      	movs	r3, #0
 800396c:	e000      	b.n	8003970 <mem_link_valid+0x6c>
  }
  return 1;
 800396e:	2301      	movs	r3, #1
}
 8003970:	4618      	mov	r0, r3
 8003972:	3718      	adds	r7, #24
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	2000009c 	.word	0x2000009c

0800397c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d04c      	beq.n	8003a24 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f003 0303 	and.w	r3, r3, #3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d007      	beq.n	80039a4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8003994:	4b25      	ldr	r3, [pc, #148]	; (8003a2c <mem_free+0xb0>)
 8003996:	f240 2273 	movw	r2, #627	; 0x273
 800399a:	4925      	ldr	r1, [pc, #148]	; (8003a30 <mem_free+0xb4>)
 800399c:	4825      	ldr	r0, [pc, #148]	; (8003a34 <mem_free+0xb8>)
 800399e:	f00a f819 	bl	800d9d4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80039a2:	e040      	b.n	8003a26 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3b08      	subs	r3, #8
 80039a8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80039aa:	4b23      	ldr	r3, [pc, #140]	; (8003a38 <mem_free+0xbc>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d306      	bcc.n	80039c2 <mem_free+0x46>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f103 020c 	add.w	r2, r3, #12
 80039ba:	4b20      	ldr	r3, [pc, #128]	; (8003a3c <mem_free+0xc0>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d907      	bls.n	80039d2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80039c2:	4b1a      	ldr	r3, [pc, #104]	; (8003a2c <mem_free+0xb0>)
 80039c4:	f240 227f 	movw	r2, #639	; 0x27f
 80039c8:	491d      	ldr	r1, [pc, #116]	; (8003a40 <mem_free+0xc4>)
 80039ca:	481a      	ldr	r0, [pc, #104]	; (8003a34 <mem_free+0xb8>)
 80039cc:	f00a f802 	bl	800d9d4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80039d0:	e029      	b.n	8003a26 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	791b      	ldrb	r3, [r3, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d107      	bne.n	80039ea <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80039da:	4b14      	ldr	r3, [pc, #80]	; (8003a2c <mem_free+0xb0>)
 80039dc:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80039e0:	4918      	ldr	r1, [pc, #96]	; (8003a44 <mem_free+0xc8>)
 80039e2:	4814      	ldr	r0, [pc, #80]	; (8003a34 <mem_free+0xb8>)
 80039e4:	f009 fff6 	bl	800d9d4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80039e8:	e01d      	b.n	8003a26 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f7ff ff8a 	bl	8003904 <mem_link_valid>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d107      	bne.n	8003a06 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80039f6:	4b0d      	ldr	r3, [pc, #52]	; (8003a2c <mem_free+0xb0>)
 80039f8:	f240 2295 	movw	r2, #661	; 0x295
 80039fc:	4912      	ldr	r1, [pc, #72]	; (8003a48 <mem_free+0xcc>)
 80039fe:	480d      	ldr	r0, [pc, #52]	; (8003a34 <mem_free+0xb8>)
 8003a00:	f009 ffe8 	bl	800d9d4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003a04:	e00f      	b.n	8003a26 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8003a0c:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <mem_free+0xd0>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d202      	bcs.n	8003a1c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8003a16:	4a0d      	ldr	r2, [pc, #52]	; (8003a4c <mem_free+0xd0>)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f7ff fe93 	bl	8003748 <plug_holes>
 8003a22:	e000      	b.n	8003a26 <mem_free+0xaa>
    return;
 8003a24:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	0800ede4 	.word	0x0800ede4
 8003a30:	0800eeb8 	.word	0x0800eeb8
 8003a34:	0800ee2c 	.word	0x0800ee2c
 8003a38:	20000098 	.word	0x20000098
 8003a3c:	2000009c 	.word	0x2000009c
 8003a40:	0800eedc 	.word	0x0800eedc
 8003a44:	0800eef8 	.word	0x0800eef8
 8003a48:	0800ef20 	.word	0x0800ef20
 8003a4c:	200000a0 	.word	0x200000a0

08003a50 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b088      	sub	sp, #32
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8003a5c:	887b      	ldrh	r3, [r7, #2]
 8003a5e:	3303      	adds	r3, #3
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	f023 0303 	bic.w	r3, r3, #3
 8003a66:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8003a68:	8bfb      	ldrh	r3, [r7, #30]
 8003a6a:	2b0b      	cmp	r3, #11
 8003a6c:	d801      	bhi.n	8003a72 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8003a6e:	230c      	movs	r3, #12
 8003a70:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8003a72:	8bfb      	ldrh	r3, [r7, #30]
 8003a74:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003a78:	d803      	bhi.n	8003a82 <mem_trim+0x32>
 8003a7a:	8bfa      	ldrh	r2, [r7, #30]
 8003a7c:	887b      	ldrh	r3, [r7, #2]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d201      	bcs.n	8003a86 <mem_trim+0x36>
    return NULL;
 8003a82:	2300      	movs	r3, #0
 8003a84:	e0cc      	b.n	8003c20 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003a86:	4b68      	ldr	r3, [pc, #416]	; (8003c28 <mem_trim+0x1d8>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d304      	bcc.n	8003a9a <mem_trim+0x4a>
 8003a90:	4b66      	ldr	r3, [pc, #408]	; (8003c2c <mem_trim+0x1dc>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d306      	bcc.n	8003aa8 <mem_trim+0x58>
 8003a9a:	4b65      	ldr	r3, [pc, #404]	; (8003c30 <mem_trim+0x1e0>)
 8003a9c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8003aa0:	4964      	ldr	r1, [pc, #400]	; (8003c34 <mem_trim+0x1e4>)
 8003aa2:	4865      	ldr	r0, [pc, #404]	; (8003c38 <mem_trim+0x1e8>)
 8003aa4:	f009 ff96 	bl	800d9d4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003aa8:	4b5f      	ldr	r3, [pc, #380]	; (8003c28 <mem_trim+0x1d8>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d304      	bcc.n	8003abc <mem_trim+0x6c>
 8003ab2:	4b5e      	ldr	r3, [pc, #376]	; (8003c2c <mem_trim+0x1dc>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d301      	bcc.n	8003ac0 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	e0af      	b.n	8003c20 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3b08      	subs	r3, #8
 8003ac4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8003ac6:	69b8      	ldr	r0, [r7, #24]
 8003ac8:	f7ff fe2c 	bl	8003724 <mem_to_ptr>
 8003acc:	4603      	mov	r3, r0
 8003ace:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	881a      	ldrh	r2, [r3, #0]
 8003ad4:	8afb      	ldrh	r3, [r7, #22]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	3b08      	subs	r3, #8
 8003adc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8003ade:	8bfa      	ldrh	r2, [r7, #30]
 8003ae0:	8abb      	ldrh	r3, [r7, #20]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d906      	bls.n	8003af4 <mem_trim+0xa4>
 8003ae6:	4b52      	ldr	r3, [pc, #328]	; (8003c30 <mem_trim+0x1e0>)
 8003ae8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8003aec:	4953      	ldr	r1, [pc, #332]	; (8003c3c <mem_trim+0x1ec>)
 8003aee:	4852      	ldr	r0, [pc, #328]	; (8003c38 <mem_trim+0x1e8>)
 8003af0:	f009 ff70 	bl	800d9d4 <iprintf>
  if (newsize > size) {
 8003af4:	8bfa      	ldrh	r2, [r7, #30]
 8003af6:	8abb      	ldrh	r3, [r7, #20]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d901      	bls.n	8003b00 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8003afc:	2300      	movs	r3, #0
 8003afe:	e08f      	b.n	8003c20 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8003b00:	8bfa      	ldrh	r2, [r7, #30]
 8003b02:	8abb      	ldrh	r3, [r7, #20]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d101      	bne.n	8003b0c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	e089      	b.n	8003c20 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	881b      	ldrh	r3, [r3, #0]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff fdf5 	bl	8003700 <ptr_to_mem>
 8003b16:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	791b      	ldrb	r3, [r3, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d13f      	bne.n	8003ba0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003b28:	d106      	bne.n	8003b38 <mem_trim+0xe8>
 8003b2a:	4b41      	ldr	r3, [pc, #260]	; (8003c30 <mem_trim+0x1e0>)
 8003b2c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8003b30:	4943      	ldr	r1, [pc, #268]	; (8003c40 <mem_trim+0x1f0>)
 8003b32:	4841      	ldr	r0, [pc, #260]	; (8003c38 <mem_trim+0x1e8>)
 8003b34:	f009 ff4e 	bl	800d9d4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	881b      	ldrh	r3, [r3, #0]
 8003b3c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003b3e:	8afa      	ldrh	r2, [r7, #22]
 8003b40:	8bfb      	ldrh	r3, [r7, #30]
 8003b42:	4413      	add	r3, r2
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	3308      	adds	r3, #8
 8003b48:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8003b4a:	4b3e      	ldr	r3, [pc, #248]	; (8003c44 <mem_trim+0x1f4>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d106      	bne.n	8003b62 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8003b54:	89fb      	ldrh	r3, [r7, #14]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7ff fdd2 	bl	8003700 <ptr_to_mem>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	4a39      	ldr	r2, [pc, #228]	; (8003c44 <mem_trim+0x1f4>)
 8003b60:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8003b62:	89fb      	ldrh	r3, [r7, #14]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff fdcb 	bl	8003700 <ptr_to_mem>
 8003b6a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	89ba      	ldrh	r2, [r7, #12]
 8003b76:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	8afa      	ldrh	r2, [r7, #22]
 8003b7c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	89fa      	ldrh	r2, [r7, #14]
 8003b82:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003b8c:	d047      	beq.n	8003c1e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff fdb4 	bl	8003700 <ptr_to_mem>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	89fb      	ldrh	r3, [r7, #14]
 8003b9c:	8053      	strh	r3, [r2, #2]
 8003b9e:	e03e      	b.n	8003c1e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8003ba0:	8bfb      	ldrh	r3, [r7, #30]
 8003ba2:	f103 0214 	add.w	r2, r3, #20
 8003ba6:	8abb      	ldrh	r3, [r7, #20]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d838      	bhi.n	8003c1e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003bac:	8afa      	ldrh	r2, [r7, #22]
 8003bae:	8bfb      	ldrh	r3, [r7, #30]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	3308      	adds	r3, #8
 8003bb6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003bc0:	d106      	bne.n	8003bd0 <mem_trim+0x180>
 8003bc2:	4b1b      	ldr	r3, [pc, #108]	; (8003c30 <mem_trim+0x1e0>)
 8003bc4:	f240 3216 	movw	r2, #790	; 0x316
 8003bc8:	491d      	ldr	r1, [pc, #116]	; (8003c40 <mem_trim+0x1f0>)
 8003bca:	481b      	ldr	r0, [pc, #108]	; (8003c38 <mem_trim+0x1e8>)
 8003bcc:	f009 ff02 	bl	800d9d4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8003bd0:	89fb      	ldrh	r3, [r7, #14]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7ff fd94 	bl	8003700 <ptr_to_mem>
 8003bd8:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8003bda:	4b1a      	ldr	r3, [pc, #104]	; (8003c44 <mem_trim+0x1f4>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d202      	bcs.n	8003bea <mem_trim+0x19a>
      lfree = mem2;
 8003be4:	4a17      	ldr	r2, [pc, #92]	; (8003c44 <mem_trim+0x1f4>)
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	2200      	movs	r2, #0
 8003bee:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	881a      	ldrh	r2, [r3, #0]
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	8afa      	ldrh	r2, [r7, #22]
 8003bfc:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	89fa      	ldrh	r2, [r7, #14]
 8003c02:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003c0c:	d007      	beq.n	8003c1e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff fd74 	bl	8003700 <ptr_to_mem>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	89fb      	ldrh	r3, [r7, #14]
 8003c1c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8003c1e:	687b      	ldr	r3, [r7, #4]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3720      	adds	r7, #32
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	20000098 	.word	0x20000098
 8003c2c:	2000009c 	.word	0x2000009c
 8003c30:	0800ede4 	.word	0x0800ede4
 8003c34:	0800ef54 	.word	0x0800ef54
 8003c38:	0800ee2c 	.word	0x0800ee2c
 8003c3c:	0800ef6c 	.word	0x0800ef6c
 8003c40:	0800ef8c 	.word	0x0800ef8c
 8003c44:	200000a0 	.word	0x200000a0

08003c48 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b088      	sub	sp, #32
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	4603      	mov	r3, r0
 8003c50:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8003c52:	88fb      	ldrh	r3, [r7, #6]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <mem_malloc+0x14>
    return NULL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	e0d9      	b.n	8003e10 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8003c5c:	88fb      	ldrh	r3, [r7, #6]
 8003c5e:	3303      	adds	r3, #3
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	f023 0303 	bic.w	r3, r3, #3
 8003c66:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8003c68:	8bbb      	ldrh	r3, [r7, #28]
 8003c6a:	2b0b      	cmp	r3, #11
 8003c6c:	d801      	bhi.n	8003c72 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8003c6e:	230c      	movs	r3, #12
 8003c70:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8003c72:	8bbb      	ldrh	r3, [r7, #28]
 8003c74:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003c78:	d803      	bhi.n	8003c82 <mem_malloc+0x3a>
 8003c7a:	8bba      	ldrh	r2, [r7, #28]
 8003c7c:	88fb      	ldrh	r3, [r7, #6]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d201      	bcs.n	8003c86 <mem_malloc+0x3e>
    return NULL;
 8003c82:	2300      	movs	r3, #0
 8003c84:	e0c4      	b.n	8003e10 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003c86:	4b64      	ldr	r3, [pc, #400]	; (8003e18 <mem_malloc+0x1d0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7ff fd4a 	bl	8003724 <mem_to_ptr>
 8003c90:	4603      	mov	r3, r0
 8003c92:	83fb      	strh	r3, [r7, #30]
 8003c94:	e0b4      	b.n	8003e00 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8003c96:	8bfb      	ldrh	r3, [r7, #30]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff fd31 	bl	8003700 <ptr_to_mem>
 8003c9e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	791b      	ldrb	r3, [r3, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f040 80a4 	bne.w	8003df2 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	8bfb      	ldrh	r3, [r7, #30]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	f1a3 0208 	sub.w	r2, r3, #8
 8003cb8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	f0c0 8099 	bcc.w	8003df2 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	8bfb      	ldrh	r3, [r7, #30]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	f1a3 0208 	sub.w	r2, r3, #8
 8003cce:	8bbb      	ldrh	r3, [r7, #28]
 8003cd0:	3314      	adds	r3, #20
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d333      	bcc.n	8003d3e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8003cd6:	8bfa      	ldrh	r2, [r7, #30]
 8003cd8:	8bbb      	ldrh	r3, [r7, #28]
 8003cda:	4413      	add	r3, r2
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	3308      	adds	r3, #8
 8003ce0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8003ce2:	8a7b      	ldrh	r3, [r7, #18]
 8003ce4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003ce8:	d106      	bne.n	8003cf8 <mem_malloc+0xb0>
 8003cea:	4b4c      	ldr	r3, [pc, #304]	; (8003e1c <mem_malloc+0x1d4>)
 8003cec:	f240 3287 	movw	r2, #903	; 0x387
 8003cf0:	494b      	ldr	r1, [pc, #300]	; (8003e20 <mem_malloc+0x1d8>)
 8003cf2:	484c      	ldr	r0, [pc, #304]	; (8003e24 <mem_malloc+0x1dc>)
 8003cf4:	f009 fe6e 	bl	800d9d4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8003cf8:	8a7b      	ldrh	r3, [r7, #18]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff fd00 	bl	8003700 <ptr_to_mem>
 8003d00:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	881a      	ldrh	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8bfa      	ldrh	r2, [r7, #30]
 8003d14:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	8a7a      	ldrh	r2, [r7, #18]
 8003d1a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003d2a:	d00b      	beq.n	8003d44 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	881b      	ldrh	r3, [r3, #0]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff fce5 	bl	8003700 <ptr_to_mem>
 8003d36:	4602      	mov	r2, r0
 8003d38:	8a7b      	ldrh	r3, [r7, #18]
 8003d3a:	8053      	strh	r3, [r2, #2]
 8003d3c:	e002      	b.n	8003d44 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	2201      	movs	r2, #1
 8003d42:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8003d44:	4b34      	ldr	r3, [pc, #208]	; (8003e18 <mem_malloc+0x1d0>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d127      	bne.n	8003d9e <mem_malloc+0x156>
          struct mem *cur = lfree;
 8003d4e:	4b32      	ldr	r3, [pc, #200]	; (8003e18 <mem_malloc+0x1d0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8003d54:	e005      	b.n	8003d62 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7ff fcd0 	bl	8003700 <ptr_to_mem>
 8003d60:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	791b      	ldrb	r3, [r3, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d004      	beq.n	8003d74 <mem_malloc+0x12c>
 8003d6a:	4b2f      	ldr	r3, [pc, #188]	; (8003e28 <mem_malloc+0x1e0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d1f0      	bne.n	8003d56 <mem_malloc+0x10e>
          }
          lfree = cur;
 8003d74:	4a28      	ldr	r2, [pc, #160]	; (8003e18 <mem_malloc+0x1d0>)
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8003d7a:	4b27      	ldr	r3, [pc, #156]	; (8003e18 <mem_malloc+0x1d0>)
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	4b2a      	ldr	r3, [pc, #168]	; (8003e28 <mem_malloc+0x1e0>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d00b      	beq.n	8003d9e <mem_malloc+0x156>
 8003d86:	4b24      	ldr	r3, [pc, #144]	; (8003e18 <mem_malloc+0x1d0>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	791b      	ldrb	r3, [r3, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d006      	beq.n	8003d9e <mem_malloc+0x156>
 8003d90:	4b22      	ldr	r3, [pc, #136]	; (8003e1c <mem_malloc+0x1d4>)
 8003d92:	f240 32b5 	movw	r2, #949	; 0x3b5
 8003d96:	4925      	ldr	r1, [pc, #148]	; (8003e2c <mem_malloc+0x1e4>)
 8003d98:	4822      	ldr	r0, [pc, #136]	; (8003e24 <mem_malloc+0x1dc>)
 8003d9a:	f009 fe1b 	bl	800d9d4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8003d9e:	8bba      	ldrh	r2, [r7, #28]
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	4413      	add	r3, r2
 8003da4:	3308      	adds	r3, #8
 8003da6:	4a20      	ldr	r2, [pc, #128]	; (8003e28 <mem_malloc+0x1e0>)
 8003da8:	6812      	ldr	r2, [r2, #0]
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d906      	bls.n	8003dbc <mem_malloc+0x174>
 8003dae:	4b1b      	ldr	r3, [pc, #108]	; (8003e1c <mem_malloc+0x1d4>)
 8003db0:	f240 32b9 	movw	r2, #953	; 0x3b9
 8003db4:	491e      	ldr	r1, [pc, #120]	; (8003e30 <mem_malloc+0x1e8>)
 8003db6:	481b      	ldr	r0, [pc, #108]	; (8003e24 <mem_malloc+0x1dc>)
 8003db8:	f009 fe0c 	bl	800d9d4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d006      	beq.n	8003dd4 <mem_malloc+0x18c>
 8003dc6:	4b15      	ldr	r3, [pc, #84]	; (8003e1c <mem_malloc+0x1d4>)
 8003dc8:	f240 32bb 	movw	r2, #955	; 0x3bb
 8003dcc:	4919      	ldr	r1, [pc, #100]	; (8003e34 <mem_malloc+0x1ec>)
 8003dce:	4815      	ldr	r0, [pc, #84]	; (8003e24 <mem_malloc+0x1dc>)
 8003dd0:	f009 fe00 	bl	800d9d4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d006      	beq.n	8003dec <mem_malloc+0x1a4>
 8003dde:	4b0f      	ldr	r3, [pc, #60]	; (8003e1c <mem_malloc+0x1d4>)
 8003de0:	f240 32bd 	movw	r2, #957	; 0x3bd
 8003de4:	4914      	ldr	r1, [pc, #80]	; (8003e38 <mem_malloc+0x1f0>)
 8003de6:	480f      	ldr	r0, [pc, #60]	; (8003e24 <mem_malloc+0x1dc>)
 8003de8:	f009 fdf4 	bl	800d9d4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	3308      	adds	r3, #8
 8003df0:	e00e      	b.n	8003e10 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8003df2:	8bfb      	ldrh	r3, [r7, #30]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff fc83 	bl	8003700 <ptr_to_mem>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003e00:	8bfa      	ldrh	r2, [r7, #30]
 8003e02:	8bbb      	ldrh	r3, [r7, #28]
 8003e04:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	f4ff af44 	bcc.w	8003c96 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3720      	adds	r7, #32
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	200000a0 	.word	0x200000a0
 8003e1c:	0800ede4 	.word	0x0800ede4
 8003e20:	0800ef8c 	.word	0x0800ef8c
 8003e24:	0800ee2c 	.word	0x0800ee2c
 8003e28:	2000009c 	.word	0x2000009c
 8003e2c:	0800efa0 	.word	0x0800efa0
 8003e30:	0800efbc 	.word	0x0800efbc
 8003e34:	0800efec 	.word	0x0800efec
 8003e38:	0800f01c 	.word	0x0800f01c

08003e3c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	3303      	adds	r3, #3
 8003e52:	f023 0303 	bic.w	r3, r3, #3
 8003e56:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8003e58:	2300      	movs	r3, #0
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	e011      	b.n	8003e82 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	461a      	mov	r2, r3
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	4413      	add	r3, r2
 8003e7a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	885b      	ldrh	r3, [r3, #2]
 8003e86:	461a      	mov	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	dbe7      	blt.n	8003e5e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8003e8e:	bf00      	nop
 8003e90:	bf00      	nop
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	80fb      	strh	r3, [r7, #6]
 8003ea6:	e009      	b.n	8003ebc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8003ea8:	88fb      	ldrh	r3, [r7, #6]
 8003eaa:	4a08      	ldr	r2, [pc, #32]	; (8003ecc <memp_init+0x30>)
 8003eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff ffc3 	bl	8003e3c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8003eb6:	88fb      	ldrh	r3, [r7, #6]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	80fb      	strh	r3, [r7, #6]
 8003ebc:	88fb      	ldrh	r3, [r7, #6]
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d9f2      	bls.n	8003ea8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8003ec2:	bf00      	nop
 8003ec4:	bf00      	nop
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	080117ec 	.word	0x080117ec

08003ed0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d012      	beq.n	8003f0c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	6812      	ldr	r2, [r2, #0]
 8003eee:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d006      	beq.n	8003f08 <do_memp_malloc_pool+0x38>
 8003efa:	4b07      	ldr	r3, [pc, #28]	; (8003f18 <do_memp_malloc_pool+0x48>)
 8003efc:	f44f 728c 	mov.w	r2, #280	; 0x118
 8003f00:	4906      	ldr	r1, [pc, #24]	; (8003f1c <do_memp_malloc_pool+0x4c>)
 8003f02:	4807      	ldr	r0, [pc, #28]	; (8003f20 <do_memp_malloc_pool+0x50>)
 8003f04:	f009 fd66 	bl	800d9d4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	e000      	b.n	8003f0e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	0800f040 	.word	0x0800f040
 8003f1c:	0800f070 	.word	0x0800f070
 8003f20:	0800f094 	.word	0x0800f094

08003f24 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8003f2e:	79fb      	ldrb	r3, [r7, #7]
 8003f30:	2b08      	cmp	r3, #8
 8003f32:	d908      	bls.n	8003f46 <memp_malloc+0x22>
 8003f34:	4b0a      	ldr	r3, [pc, #40]	; (8003f60 <memp_malloc+0x3c>)
 8003f36:	f240 1257 	movw	r2, #343	; 0x157
 8003f3a:	490a      	ldr	r1, [pc, #40]	; (8003f64 <memp_malloc+0x40>)
 8003f3c:	480a      	ldr	r0, [pc, #40]	; (8003f68 <memp_malloc+0x44>)
 8003f3e:	f009 fd49 	bl	800d9d4 <iprintf>
 8003f42:	2300      	movs	r3, #0
 8003f44:	e008      	b.n	8003f58 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8003f46:	79fb      	ldrb	r3, [r7, #7]
 8003f48:	4a08      	ldr	r2, [pc, #32]	; (8003f6c <memp_malloc+0x48>)
 8003f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7ff ffbe 	bl	8003ed0 <do_memp_malloc_pool>
 8003f54:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8003f56:	68fb      	ldr	r3, [r7, #12]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	0800f040 	.word	0x0800f040
 8003f64:	0800f0d0 	.word	0x0800f0d0
 8003f68:	0800f094 	.word	0x0800f094
 8003f6c:	080117ec 	.word	0x080117ec

08003f70 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	f003 0303 	and.w	r3, r3, #3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d006      	beq.n	8003f92 <do_memp_free_pool+0x22>
 8003f84:	4b0a      	ldr	r3, [pc, #40]	; (8003fb0 <do_memp_free_pool+0x40>)
 8003f86:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8003f8a:	490a      	ldr	r1, [pc, #40]	; (8003fb4 <do_memp_free_pool+0x44>)
 8003f8c:	480a      	ldr	r0, [pc, #40]	; (8003fb8 <do_memp_free_pool+0x48>)
 8003f8e:	f009 fd21 	bl	800d9d4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8003fa8:	bf00      	nop
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	0800f040 	.word	0x0800f040
 8003fb4:	0800f0f0 	.word	0x0800f0f0
 8003fb8:	0800f094 	.word	0x0800f094

08003fbc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	6039      	str	r1, [r7, #0]
 8003fc6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8003fc8:	79fb      	ldrb	r3, [r7, #7]
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d907      	bls.n	8003fde <memp_free+0x22>
 8003fce:	4b0c      	ldr	r3, [pc, #48]	; (8004000 <memp_free+0x44>)
 8003fd0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8003fd4:	490b      	ldr	r1, [pc, #44]	; (8004004 <memp_free+0x48>)
 8003fd6:	480c      	ldr	r0, [pc, #48]	; (8004008 <memp_free+0x4c>)
 8003fd8:	f009 fcfc 	bl	800d9d4 <iprintf>
 8003fdc:	e00c      	b.n	8003ff8 <memp_free+0x3c>

  if (mem == NULL) {
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d008      	beq.n	8003ff6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8003fe4:	79fb      	ldrb	r3, [r7, #7]
 8003fe6:	4a09      	ldr	r2, [pc, #36]	; (800400c <memp_free+0x50>)
 8003fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fec:	6839      	ldr	r1, [r7, #0]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7ff ffbe 	bl	8003f70 <do_memp_free_pool>
 8003ff4:	e000      	b.n	8003ff8 <memp_free+0x3c>
    return;
 8003ff6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	0800f040 	.word	0x0800f040
 8004004:	0800f110 	.word	0x0800f110
 8004008:	0800f094 	.word	0x0800f094
 800400c:	080117ec 	.word	0x080117ec

08004010 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004014:	bf00      	nop
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
	...

08004020 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
 800402c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d108      	bne.n	8004046 <netif_add+0x26>
 8004034:	4b57      	ldr	r3, [pc, #348]	; (8004194 <netif_add+0x174>)
 8004036:	f240 1227 	movw	r2, #295	; 0x127
 800403a:	4957      	ldr	r1, [pc, #348]	; (8004198 <netif_add+0x178>)
 800403c:	4857      	ldr	r0, [pc, #348]	; (800419c <netif_add+0x17c>)
 800403e:	f009 fcc9 	bl	800d9d4 <iprintf>
 8004042:	2300      	movs	r3, #0
 8004044:	e0a2      	b.n	800418c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	2b00      	cmp	r3, #0
 800404a:	d108      	bne.n	800405e <netif_add+0x3e>
 800404c:	4b51      	ldr	r3, [pc, #324]	; (8004194 <netif_add+0x174>)
 800404e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8004052:	4953      	ldr	r1, [pc, #332]	; (80041a0 <netif_add+0x180>)
 8004054:	4851      	ldr	r0, [pc, #324]	; (800419c <netif_add+0x17c>)
 8004056:	f009 fcbd 	bl	800d9d4 <iprintf>
 800405a:	2300      	movs	r3, #0
 800405c:	e096      	b.n	800418c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8004064:	4b4f      	ldr	r3, [pc, #316]	; (80041a4 <netif_add+0x184>)
 8004066:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800406e:	4b4d      	ldr	r3, [pc, #308]	; (80041a4 <netif_add+0x184>)
 8004070:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8004078:	4b4a      	ldr	r3, [pc, #296]	; (80041a4 <netif_add+0x184>)
 800407a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4a45      	ldr	r2, [pc, #276]	; (80041a8 <netif_add+0x188>)
 8004092:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6a3a      	ldr	r2, [r7, #32]
 80040ac:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80040ae:	4b3f      	ldr	r3, [pc, #252]	; (80041ac <netif_add+0x18c>)
 80040b0:	781a      	ldrb	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040bc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	68b9      	ldr	r1, [r7, #8]
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 f913 	bl	80042f0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	4798      	blx	r3
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <netif_add+0xba>
    return NULL;
 80040d6:	2300      	movs	r3, #0
 80040d8:	e058      	b.n	800418c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040e0:	2bff      	cmp	r3, #255	; 0xff
 80040e2:	d103      	bne.n	80040ec <netif_add+0xcc>
        netif->num = 0;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80040ec:	2300      	movs	r3, #0
 80040ee:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80040f0:	4b2f      	ldr	r3, [pc, #188]	; (80041b0 <netif_add+0x190>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	617b      	str	r3, [r7, #20]
 80040f6:	e02b      	b.n	8004150 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d106      	bne.n	800410e <netif_add+0xee>
 8004100:	4b24      	ldr	r3, [pc, #144]	; (8004194 <netif_add+0x174>)
 8004102:	f240 128b 	movw	r2, #395	; 0x18b
 8004106:	492b      	ldr	r1, [pc, #172]	; (80041b4 <netif_add+0x194>)
 8004108:	4824      	ldr	r0, [pc, #144]	; (800419c <netif_add+0x17c>)
 800410a:	f009 fc63 	bl	800d9d4 <iprintf>
        num_netifs++;
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	3301      	adds	r3, #1
 8004112:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	2bff      	cmp	r3, #255	; 0xff
 8004118:	dd06      	ble.n	8004128 <netif_add+0x108>
 800411a:	4b1e      	ldr	r3, [pc, #120]	; (8004194 <netif_add+0x174>)
 800411c:	f240 128d 	movw	r2, #397	; 0x18d
 8004120:	4925      	ldr	r1, [pc, #148]	; (80041b8 <netif_add+0x198>)
 8004122:	481e      	ldr	r0, [pc, #120]	; (800419c <netif_add+0x17c>)
 8004124:	f009 fc56 	bl	800d9d4 <iprintf>
        if (netif2->num == netif->num) {
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004134:	429a      	cmp	r2, r3
 8004136:	d108      	bne.n	800414a <netif_add+0x12a>
          netif->num++;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800413e:	3301      	adds	r3, #1
 8004140:	b2da      	uxtb	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8004148:	e005      	b.n	8004156 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	617b      	str	r3, [r7, #20]
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1d0      	bne.n	80040f8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1be      	bne.n	80040da <netif_add+0xba>
  }
  if (netif->num == 254) {
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004162:	2bfe      	cmp	r3, #254	; 0xfe
 8004164:	d103      	bne.n	800416e <netif_add+0x14e>
    netif_num = 0;
 8004166:	4b11      	ldr	r3, [pc, #68]	; (80041ac <netif_add+0x18c>)
 8004168:	2200      	movs	r2, #0
 800416a:	701a      	strb	r2, [r3, #0]
 800416c:	e006      	b.n	800417c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004174:	3301      	adds	r3, #1
 8004176:	b2da      	uxtb	r2, r3
 8004178:	4b0c      	ldr	r3, [pc, #48]	; (80041ac <netif_add+0x18c>)
 800417a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800417c:	4b0c      	ldr	r3, [pc, #48]	; (80041b0 <netif_add+0x190>)
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8004184:	4a0a      	ldr	r2, [pc, #40]	; (80041b0 <netif_add+0x190>)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800418a:	68fb      	ldr	r3, [r7, #12]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	0800f12c 	.word	0x0800f12c
 8004198:	0800f1c0 	.word	0x0800f1c0
 800419c:	0800f17c 	.word	0x0800f17c
 80041a0:	0800f1dc 	.word	0x0800f1dc
 80041a4:	08011850 	.word	0x08011850
 80041a8:	08004503 	.word	0x08004503
 80041ac:	200000c8 	.word	0x200000c8
 80041b0:	20008a4c 	.word	0x20008a4c
 80041b4:	0800f200 	.word	0x0800f200
 80041b8:	0800f214 	.word	0x0800f214

080041bc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80041c6:	6839      	ldr	r1, [r7, #0]
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f002 fb81 	bl	80068d0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80041ce:	6839      	ldr	r1, [r7, #0]
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f007 f81b 	bl	800b20c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80041d6:	bf00      	nop
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
	...

080041e0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <netif_do_set_ipaddr+0x20>
 80041f2:	4b1d      	ldr	r3, [pc, #116]	; (8004268 <netif_do_set_ipaddr+0x88>)
 80041f4:	f240 12cb 	movw	r2, #459	; 0x1cb
 80041f8:	491c      	ldr	r1, [pc, #112]	; (800426c <netif_do_set_ipaddr+0x8c>)
 80041fa:	481d      	ldr	r0, [pc, #116]	; (8004270 <netif_do_set_ipaddr+0x90>)
 80041fc:	f009 fbea 	bl	800d9d4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d106      	bne.n	8004214 <netif_do_set_ipaddr+0x34>
 8004206:	4b18      	ldr	r3, [pc, #96]	; (8004268 <netif_do_set_ipaddr+0x88>)
 8004208:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800420c:	4917      	ldr	r1, [pc, #92]	; (800426c <netif_do_set_ipaddr+0x8c>)
 800420e:	4818      	ldr	r0, [pc, #96]	; (8004270 <netif_do_set_ipaddr+0x90>)
 8004210:	f009 fbe0 	bl	800d9d4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	3304      	adds	r3, #4
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d01c      	beq.n	800425c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	3304      	adds	r3, #4
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8004232:	f107 0314 	add.w	r3, r7, #20
 8004236:	4619      	mov	r1, r3
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7ff ffbf 	bl	80041bc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d002      	beq.n	800424a <netif_do_set_ipaddr+0x6a>
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	e000      	b.n	800424c <netif_do_set_ipaddr+0x6c>
 800424a:	2300      	movs	r3, #0
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004250:	2101      	movs	r1, #1
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 f8d2 	bl	80043fc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8004258:	2301      	movs	r3, #1
 800425a:	e000      	b.n	800425e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	0800f12c 	.word	0x0800f12c
 800426c:	0800f244 	.word	0x0800f244
 8004270:	0800f17c 	.word	0x0800f17c

08004274 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	3308      	adds	r3, #8
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d00a      	beq.n	80042a4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d002      	beq.n	800429a <netif_do_set_netmask+0x26>
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	e000      	b.n	800429c <netif_do_set_netmask+0x28>
 800429a:	2300      	movs	r3, #0
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b085      	sub	sp, #20
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	60f8      	str	r0, [r7, #12]
 80042ba:	60b9      	str	r1, [r7, #8]
 80042bc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	330c      	adds	r3, #12
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d00a      	beq.n	80042e2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d002      	beq.n	80042d8 <netif_do_set_gw+0x26>
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	e000      	b.n	80042da <netif_do_set_gw+0x28>
 80042d8:	2300      	movs	r3, #0
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80042de:	2301      	movs	r3, #1
 80042e0:	e000      	b.n	80042e4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3714      	adds	r7, #20
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80042fe:	2300      	movs	r3, #0
 8004300:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8004302:	2300      	movs	r3, #0
 8004304:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800430c:	4b1c      	ldr	r3, [pc, #112]	; (8004380 <netif_set_addr+0x90>)
 800430e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8004316:	4b1a      	ldr	r3, [pc, #104]	; (8004380 <netif_set_addr+0x90>)
 8004318:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004320:	4b17      	ldr	r3, [pc, #92]	; (8004380 <netif_set_addr+0x90>)
 8004322:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <netif_set_addr+0x42>
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <netif_set_addr+0x46>
 8004332:	2301      	movs	r3, #1
 8004334:	e000      	b.n	8004338 <netif_set_addr+0x48>
 8004336:	2300      	movs	r3, #0
 8004338:	617b      	str	r3, [r7, #20]
  if (remove) {
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d006      	beq.n	800434e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004340:	f107 0310 	add.w	r3, r7, #16
 8004344:	461a      	mov	r2, r3
 8004346:	68b9      	ldr	r1, [r7, #8]
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f7ff ff49 	bl	80041e0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800434e:	69fa      	ldr	r2, [r7, #28]
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f7ff ff8e 	bl	8004274 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	6839      	ldr	r1, [r7, #0]
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f7ff ffa8 	bl	80042b2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d106      	bne.n	8004376 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004368:	f107 0310 	add.w	r3, r7, #16
 800436c:	461a      	mov	r2, r3
 800436e:	68b9      	ldr	r1, [r7, #8]
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f7ff ff35 	bl	80041e0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8004376:	bf00      	nop
 8004378:	3720      	adds	r7, #32
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	08011850 	.word	0x08011850

08004384 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800438c:	4a04      	ldr	r2, [pc, #16]	; (80043a0 <netif_set_default+0x1c>)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	20008a50 	.word	0x20008a50

080043a4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d107      	bne.n	80043c2 <netif_set_up+0x1e>
 80043b2:	4b0f      	ldr	r3, [pc, #60]	; (80043f0 <netif_set_up+0x4c>)
 80043b4:	f44f 7254 	mov.w	r2, #848	; 0x350
 80043b8:	490e      	ldr	r1, [pc, #56]	; (80043f4 <netif_set_up+0x50>)
 80043ba:	480f      	ldr	r0, [pc, #60]	; (80043f8 <netif_set_up+0x54>)
 80043bc:	f009 fb0a 	bl	800d9d4 <iprintf>
 80043c0:	e013      	b.n	80043ea <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10c      	bne.n	80043ea <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80043d6:	f043 0301 	orr.w	r3, r3, #1
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80043e2:	2103      	movs	r1, #3
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f809 	bl	80043fc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	0800f12c 	.word	0x0800f12c
 80043f4:	0800f2b4 	.word	0x0800f2b4
 80043f8:	0800f17c 	.word	0x0800f17c

080043fc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d106      	bne.n	800441c <netif_issue_reports+0x20>
 800440e:	4b18      	ldr	r3, [pc, #96]	; (8004470 <netif_issue_reports+0x74>)
 8004410:	f240 326d 	movw	r2, #877	; 0x36d
 8004414:	4917      	ldr	r1, [pc, #92]	; (8004474 <netif_issue_reports+0x78>)
 8004416:	4818      	ldr	r0, [pc, #96]	; (8004478 <netif_issue_reports+0x7c>)
 8004418:	f009 fadc 	bl	800d9d4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004422:	f003 0304 	and.w	r3, r3, #4
 8004426:	2b00      	cmp	r3, #0
 8004428:	d01e      	beq.n	8004468 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004430:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004434:	2b00      	cmp	r3, #0
 8004436:	d017      	beq.n	8004468 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004438:	78fb      	ldrb	r3, [r7, #3]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d013      	beq.n	800446a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3304      	adds	r3, #4
 8004446:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00e      	beq.n	800446a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b00      	cmp	r3, #0
 8004458:	d007      	beq.n	800446a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3304      	adds	r3, #4
 800445e:	4619      	mov	r1, r3
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f007 fe3d 	bl	800c0e0 <etharp_request>
 8004466:	e000      	b.n	800446a <netif_issue_reports+0x6e>
    return;
 8004468:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	0800f12c 	.word	0x0800f12c
 8004474:	0800f2d0 	.word	0x0800f2d0
 8004478:	0800f17c 	.word	0x0800f17c

0800447c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d107      	bne.n	800449a <netif_set_down+0x1e>
 800448a:	4b12      	ldr	r3, [pc, #72]	; (80044d4 <netif_set_down+0x58>)
 800448c:	f240 329b 	movw	r2, #923	; 0x39b
 8004490:	4911      	ldr	r1, [pc, #68]	; (80044d8 <netif_set_down+0x5c>)
 8004492:	4812      	ldr	r0, [pc, #72]	; (80044dc <netif_set_down+0x60>)
 8004494:	f009 fa9e 	bl	800d9d4 <iprintf>
 8004498:	e019      	b.n	80044ce <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d012      	beq.n	80044ce <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80044ae:	f023 0301 	bic.w	r3, r3, #1
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80044c0:	f003 0308 	and.w	r3, r3, #8
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d002      	beq.n	80044ce <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f007 f9c7 	bl	800b85c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80044ce:	3708      	adds	r7, #8
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	0800f12c 	.word	0x0800f12c
 80044d8:	0800f2f4 	.word	0x0800f2f4
 80044dc:	0800f17c 	.word	0x0800f17c

080044e0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d002      	beq.n	80044f6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	61da      	str	r2, [r3, #28]
  }
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8004502:	b480      	push	{r7}
 8004504:	b085      	sub	sp, #20
 8004506:	af00      	add	r7, sp, #0
 8004508:	60f8      	str	r0, [r7, #12]
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800450e:	f06f 030b 	mvn.w	r3, #11
}
 8004512:	4618      	mov	r0, r3
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
	...

08004520 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	4603      	mov	r3, r0
 8004528:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d013      	beq.n	8004558 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8004530:	4b0d      	ldr	r3, [pc, #52]	; (8004568 <netif_get_by_index+0x48>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	e00c      	b.n	8004552 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800453e:	3301      	adds	r3, #1
 8004540:	b2db      	uxtb	r3, r3
 8004542:	79fa      	ldrb	r2, [r7, #7]
 8004544:	429a      	cmp	r2, r3
 8004546:	d101      	bne.n	800454c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	e006      	b.n	800455a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1ef      	bne.n	8004538 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	20008a4c 	.word	0x20008a4c

0800456c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8004572:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <pbuf_free_ooseq+0x38>)
 8004574:	2200      	movs	r2, #0
 8004576:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004578:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <pbuf_free_ooseq+0x3c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	607b      	str	r3, [r7, #4]
 800457e:	e00a      	b.n	8004596 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f002 f9df 	bl	800694c <tcp_free_ooseq>
      return;
 800458e:	e005      	b.n	800459c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	607b      	str	r3, [r7, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1f1      	bne.n	8004580 <pbuf_free_ooseq+0x14>
    }
  }
}
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	20008a54 	.word	0x20008a54
 80045a8:	20008a5c 	.word	0x20008a5c

080045ac <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80045b0:	4b03      	ldr	r3, [pc, #12]	; (80045c0 <pbuf_pool_is_empty+0x14>)
 80045b2:	2201      	movs	r2, #1
 80045b4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80045b6:	bf00      	nop
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	20008a54 	.word	0x20008a54

080045c4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	4611      	mov	r1, r2
 80045d0:	461a      	mov	r2, r3
 80045d2:	460b      	mov	r3, r1
 80045d4:	80fb      	strh	r3, [r7, #6]
 80045d6:	4613      	mov	r3, r2
 80045d8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	88fa      	ldrh	r2, [r7, #6]
 80045ea:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	88ba      	ldrh	r2, [r7, #4]
 80045f0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80045f2:	8b3b      	ldrh	r3, [r7, #24]
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	7f3a      	ldrb	r2, [r7, #28]
 80045fe:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2201      	movs	r2, #1
 8004604:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	73da      	strb	r2, [r3, #15]
}
 800460c:	bf00      	nop
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b08c      	sub	sp, #48	; 0x30
 800461c:	af02      	add	r7, sp, #8
 800461e:	4603      	mov	r3, r0
 8004620:	71fb      	strb	r3, [r7, #7]
 8004622:	460b      	mov	r3, r1
 8004624:	80bb      	strh	r3, [r7, #4]
 8004626:	4613      	mov	r3, r2
 8004628:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800462a:	79fb      	ldrb	r3, [r7, #7]
 800462c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800462e:	887b      	ldrh	r3, [r7, #2]
 8004630:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8004634:	d07f      	beq.n	8004736 <pbuf_alloc+0x11e>
 8004636:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800463a:	f300 80c8 	bgt.w	80047ce <pbuf_alloc+0x1b6>
 800463e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004642:	d010      	beq.n	8004666 <pbuf_alloc+0x4e>
 8004644:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004648:	f300 80c1 	bgt.w	80047ce <pbuf_alloc+0x1b6>
 800464c:	2b01      	cmp	r3, #1
 800464e:	d002      	beq.n	8004656 <pbuf_alloc+0x3e>
 8004650:	2b41      	cmp	r3, #65	; 0x41
 8004652:	f040 80bc 	bne.w	80047ce <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8004656:	887a      	ldrh	r2, [r7, #2]
 8004658:	88bb      	ldrh	r3, [r7, #4]
 800465a:	4619      	mov	r1, r3
 800465c:	2000      	movs	r0, #0
 800465e:	f000 f8d1 	bl	8004804 <pbuf_alloc_reference>
 8004662:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8004664:	e0bd      	b.n	80047e2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8004666:	2300      	movs	r3, #0
 8004668:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800466a:	2300      	movs	r3, #0
 800466c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800466e:	88bb      	ldrh	r3, [r7, #4]
 8004670:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004672:	2008      	movs	r0, #8
 8004674:	f7ff fc56 	bl	8003f24 <memp_malloc>
 8004678:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d109      	bne.n	8004694 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8004680:	f7ff ff94 	bl	80045ac <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	2b00      	cmp	r3, #0
 8004688:	d002      	beq.n	8004690 <pbuf_alloc+0x78>
            pbuf_free(p);
 800468a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800468c:	f000 faa8 	bl	8004be0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8004690:	2300      	movs	r3, #0
 8004692:	e0a7      	b.n	80047e4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8004694:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004696:	3303      	adds	r3, #3
 8004698:	b29b      	uxth	r3, r3
 800469a:	f023 0303 	bic.w	r3, r3, #3
 800469e:	b29b      	uxth	r3, r3
 80046a0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	8b7a      	ldrh	r2, [r7, #26]
 80046a8:	4293      	cmp	r3, r2
 80046aa:	bf28      	it	cs
 80046ac:	4613      	movcs	r3, r2
 80046ae:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80046b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80046b2:	3310      	adds	r3, #16
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	4413      	add	r3, r2
 80046b8:	3303      	adds	r3, #3
 80046ba:	f023 0303 	bic.w	r3, r3, #3
 80046be:	4618      	mov	r0, r3
 80046c0:	89f9      	ldrh	r1, [r7, #14]
 80046c2:	8b7a      	ldrh	r2, [r7, #26]
 80046c4:	2300      	movs	r3, #0
 80046c6:	9301      	str	r3, [sp, #4]
 80046c8:	887b      	ldrh	r3, [r7, #2]
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	460b      	mov	r3, r1
 80046ce:	4601      	mov	r1, r0
 80046d0:	6938      	ldr	r0, [r7, #16]
 80046d2:	f7ff ff77 	bl	80045c4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f003 0303 	and.w	r3, r3, #3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d006      	beq.n	80046f0 <pbuf_alloc+0xd8>
 80046e2:	4b42      	ldr	r3, [pc, #264]	; (80047ec <pbuf_alloc+0x1d4>)
 80046e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046e8:	4941      	ldr	r1, [pc, #260]	; (80047f0 <pbuf_alloc+0x1d8>)
 80046ea:	4842      	ldr	r0, [pc, #264]	; (80047f4 <pbuf_alloc+0x1dc>)
 80046ec:	f009 f972 	bl	800d9d4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80046f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80046f2:	3303      	adds	r3, #3
 80046f4:	f023 0303 	bic.w	r3, r3, #3
 80046f8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80046fc:	d106      	bne.n	800470c <pbuf_alloc+0xf4>
 80046fe:	4b3b      	ldr	r3, [pc, #236]	; (80047ec <pbuf_alloc+0x1d4>)
 8004700:	f44f 7281 	mov.w	r2, #258	; 0x102
 8004704:	493c      	ldr	r1, [pc, #240]	; (80047f8 <pbuf_alloc+0x1e0>)
 8004706:	483b      	ldr	r0, [pc, #236]	; (80047f4 <pbuf_alloc+0x1dc>)
 8004708:	f009 f964 	bl	800d9d4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	2b00      	cmp	r3, #0
 8004710:	d102      	bne.n	8004718 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	627b      	str	r3, [r7, #36]	; 0x24
 8004716:	e002      	b.n	800471e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8004722:	8b7a      	ldrh	r2, [r7, #26]
 8004724:	89fb      	ldrh	r3, [r7, #14]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800472a:	2300      	movs	r3, #0
 800472c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800472e:	8b7b      	ldrh	r3, [r7, #26]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d19e      	bne.n	8004672 <pbuf_alloc+0x5a>
      break;
 8004734:	e055      	b.n	80047e2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8004736:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004738:	3303      	adds	r3, #3
 800473a:	b29b      	uxth	r3, r3
 800473c:	f023 0303 	bic.w	r3, r3, #3
 8004740:	b29a      	uxth	r2, r3
 8004742:	88bb      	ldrh	r3, [r7, #4]
 8004744:	3303      	adds	r3, #3
 8004746:	b29b      	uxth	r3, r3
 8004748:	f023 0303 	bic.w	r3, r3, #3
 800474c:	b29b      	uxth	r3, r3
 800474e:	4413      	add	r3, r2
 8004750:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8004752:	8b3b      	ldrh	r3, [r7, #24]
 8004754:	3310      	adds	r3, #16
 8004756:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004758:	8b3a      	ldrh	r2, [r7, #24]
 800475a:	88bb      	ldrh	r3, [r7, #4]
 800475c:	3303      	adds	r3, #3
 800475e:	f023 0303 	bic.w	r3, r3, #3
 8004762:	429a      	cmp	r2, r3
 8004764:	d306      	bcc.n	8004774 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8004766:	8afa      	ldrh	r2, [r7, #22]
 8004768:	88bb      	ldrh	r3, [r7, #4]
 800476a:	3303      	adds	r3, #3
 800476c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004770:	429a      	cmp	r2, r3
 8004772:	d201      	bcs.n	8004778 <pbuf_alloc+0x160>
        return NULL;
 8004774:	2300      	movs	r3, #0
 8004776:	e035      	b.n	80047e4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8004778:	8afb      	ldrh	r3, [r7, #22]
 800477a:	4618      	mov	r0, r3
 800477c:	f7ff fa64 	bl	8003c48 <mem_malloc>
 8004780:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <pbuf_alloc+0x174>
        return NULL;
 8004788:	2300      	movs	r3, #0
 800478a:	e02b      	b.n	80047e4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800478c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800478e:	3310      	adds	r3, #16
 8004790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004792:	4413      	add	r3, r2
 8004794:	3303      	adds	r3, #3
 8004796:	f023 0303 	bic.w	r3, r3, #3
 800479a:	4618      	mov	r0, r3
 800479c:	88b9      	ldrh	r1, [r7, #4]
 800479e:	88ba      	ldrh	r2, [r7, #4]
 80047a0:	2300      	movs	r3, #0
 80047a2:	9301      	str	r3, [sp, #4]
 80047a4:	887b      	ldrh	r3, [r7, #2]
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	460b      	mov	r3, r1
 80047aa:	4601      	mov	r1, r0
 80047ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047ae:	f7ff ff09 	bl	80045c4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80047b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f003 0303 	and.w	r3, r3, #3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d010      	beq.n	80047e0 <pbuf_alloc+0x1c8>
 80047be:	4b0b      	ldr	r3, [pc, #44]	; (80047ec <pbuf_alloc+0x1d4>)
 80047c0:	f44f 7291 	mov.w	r2, #290	; 0x122
 80047c4:	490d      	ldr	r1, [pc, #52]	; (80047fc <pbuf_alloc+0x1e4>)
 80047c6:	480b      	ldr	r0, [pc, #44]	; (80047f4 <pbuf_alloc+0x1dc>)
 80047c8:	f009 f904 	bl	800d9d4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80047cc:	e008      	b.n	80047e0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80047ce:	4b07      	ldr	r3, [pc, #28]	; (80047ec <pbuf_alloc+0x1d4>)
 80047d0:	f240 1227 	movw	r2, #295	; 0x127
 80047d4:	490a      	ldr	r1, [pc, #40]	; (8004800 <pbuf_alloc+0x1e8>)
 80047d6:	4807      	ldr	r0, [pc, #28]	; (80047f4 <pbuf_alloc+0x1dc>)
 80047d8:	f009 f8fc 	bl	800d9d4 <iprintf>
      return NULL;
 80047dc:	2300      	movs	r3, #0
 80047de:	e001      	b.n	80047e4 <pbuf_alloc+0x1cc>
      break;
 80047e0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3728      	adds	r7, #40	; 0x28
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	0800f35c 	.word	0x0800f35c
 80047f0:	0800f38c 	.word	0x0800f38c
 80047f4:	0800f3bc 	.word	0x0800f3bc
 80047f8:	0800f3e4 	.word	0x0800f3e4
 80047fc:	0800f418 	.word	0x0800f418
 8004800:	0800f444 	.word	0x0800f444

08004804 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af02      	add	r7, sp, #8
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	807b      	strh	r3, [r7, #2]
 8004810:	4613      	mov	r3, r2
 8004812:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8004814:	883b      	ldrh	r3, [r7, #0]
 8004816:	2b41      	cmp	r3, #65	; 0x41
 8004818:	d009      	beq.n	800482e <pbuf_alloc_reference+0x2a>
 800481a:	883b      	ldrh	r3, [r7, #0]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d006      	beq.n	800482e <pbuf_alloc_reference+0x2a>
 8004820:	4b0f      	ldr	r3, [pc, #60]	; (8004860 <pbuf_alloc_reference+0x5c>)
 8004822:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8004826:	490f      	ldr	r1, [pc, #60]	; (8004864 <pbuf_alloc_reference+0x60>)
 8004828:	480f      	ldr	r0, [pc, #60]	; (8004868 <pbuf_alloc_reference+0x64>)
 800482a:	f009 f8d3 	bl	800d9d4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800482e:	2007      	movs	r0, #7
 8004830:	f7ff fb78 	bl	8003f24 <memp_malloc>
 8004834:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800483c:	2300      	movs	r3, #0
 800483e:	e00b      	b.n	8004858 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8004840:	8879      	ldrh	r1, [r7, #2]
 8004842:	887a      	ldrh	r2, [r7, #2]
 8004844:	2300      	movs	r3, #0
 8004846:	9301      	str	r3, [sp, #4]
 8004848:	883b      	ldrh	r3, [r7, #0]
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	460b      	mov	r3, r1
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f7ff feb7 	bl	80045c4 <pbuf_init_alloced_pbuf>
  return p;
 8004856:	68fb      	ldr	r3, [r7, #12]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	0800f35c 	.word	0x0800f35c
 8004864:	0800f460 	.word	0x0800f460
 8004868:	0800f3bc 	.word	0x0800f3bc

0800486c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b088      	sub	sp, #32
 8004870:	af02      	add	r7, sp, #8
 8004872:	607b      	str	r3, [r7, #4]
 8004874:	4603      	mov	r3, r0
 8004876:	73fb      	strb	r3, [r7, #15]
 8004878:	460b      	mov	r3, r1
 800487a:	81bb      	strh	r3, [r7, #12]
 800487c:	4613      	mov	r3, r2
 800487e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8004880:	7bfb      	ldrb	r3, [r7, #15]
 8004882:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004884:	8a7b      	ldrh	r3, [r7, #18]
 8004886:	3303      	adds	r3, #3
 8004888:	f023 0203 	bic.w	r2, r3, #3
 800488c:	89bb      	ldrh	r3, [r7, #12]
 800488e:	441a      	add	r2, r3
 8004890:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004892:	429a      	cmp	r2, r3
 8004894:	d901      	bls.n	800489a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8004896:	2300      	movs	r3, #0
 8004898:	e018      	b.n	80048cc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d007      	beq.n	80048b0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80048a0:	8a7b      	ldrh	r3, [r7, #18]
 80048a2:	3303      	adds	r3, #3
 80048a4:	f023 0303 	bic.w	r3, r3, #3
 80048a8:	6a3a      	ldr	r2, [r7, #32]
 80048aa:	4413      	add	r3, r2
 80048ac:	617b      	str	r3, [r7, #20]
 80048ae:	e001      	b.n	80048b4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80048b0:	2300      	movs	r3, #0
 80048b2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	89b9      	ldrh	r1, [r7, #12]
 80048b8:	89ba      	ldrh	r2, [r7, #12]
 80048ba:	2302      	movs	r3, #2
 80048bc:	9301      	str	r3, [sp, #4]
 80048be:	897b      	ldrh	r3, [r7, #10]
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	460b      	mov	r3, r1
 80048c4:	6979      	ldr	r1, [r7, #20]
 80048c6:	f7ff fe7d 	bl	80045c4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80048ca:	687b      	ldr	r3, [r7, #4]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3718      	adds	r7, #24
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	460b      	mov	r3, r1
 80048de:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d106      	bne.n	80048f4 <pbuf_realloc+0x20>
 80048e6:	4b3a      	ldr	r3, [pc, #232]	; (80049d0 <pbuf_realloc+0xfc>)
 80048e8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80048ec:	4939      	ldr	r1, [pc, #228]	; (80049d4 <pbuf_realloc+0x100>)
 80048ee:	483a      	ldr	r0, [pc, #232]	; (80049d8 <pbuf_realloc+0x104>)
 80048f0:	f009 f870 	bl	800d9d4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	891b      	ldrh	r3, [r3, #8]
 80048f8:	887a      	ldrh	r2, [r7, #2]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d263      	bcs.n	80049c6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	891a      	ldrh	r2, [r3, #8]
 8004902:	887b      	ldrh	r3, [r7, #2]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8004908:	887b      	ldrh	r3, [r7, #2]
 800490a:	817b      	strh	r3, [r7, #10]
  q = p;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8004910:	e018      	b.n	8004944 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	895b      	ldrh	r3, [r3, #10]
 8004916:	897a      	ldrh	r2, [r7, #10]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	891a      	ldrh	r2, [r3, #8]
 8004920:	893b      	ldrh	r3, [r7, #8]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	b29a      	uxth	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d106      	bne.n	8004944 <pbuf_realloc+0x70>
 8004936:	4b26      	ldr	r3, [pc, #152]	; (80049d0 <pbuf_realloc+0xfc>)
 8004938:	f240 12af 	movw	r2, #431	; 0x1af
 800493c:	4927      	ldr	r1, [pc, #156]	; (80049dc <pbuf_realloc+0x108>)
 800493e:	4826      	ldr	r0, [pc, #152]	; (80049d8 <pbuf_realloc+0x104>)
 8004940:	f009 f848 	bl	800d9d4 <iprintf>
  while (rem_len > q->len) {
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	895b      	ldrh	r3, [r3, #10]
 8004948:	897a      	ldrh	r2, [r7, #10]
 800494a:	429a      	cmp	r2, r3
 800494c:	d8e1      	bhi.n	8004912 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	7b1b      	ldrb	r3, [r3, #12]
 8004952:	f003 030f 	and.w	r3, r3, #15
 8004956:	2b00      	cmp	r3, #0
 8004958:	d121      	bne.n	800499e <pbuf_realloc+0xca>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	895b      	ldrh	r3, [r3, #10]
 800495e:	897a      	ldrh	r2, [r7, #10]
 8004960:	429a      	cmp	r2, r3
 8004962:	d01c      	beq.n	800499e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	7b5b      	ldrb	r3, [r3, #13]
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d116      	bne.n	800499e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	b29a      	uxth	r2, r3
 800497a:	897b      	ldrh	r3, [r7, #10]
 800497c:	4413      	add	r3, r2
 800497e:	b29b      	uxth	r3, r3
 8004980:	4619      	mov	r1, r3
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f7ff f864 	bl	8003a50 <mem_trim>
 8004988:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d106      	bne.n	800499e <pbuf_realloc+0xca>
 8004990:	4b0f      	ldr	r3, [pc, #60]	; (80049d0 <pbuf_realloc+0xfc>)
 8004992:	f240 12bd 	movw	r2, #445	; 0x1bd
 8004996:	4912      	ldr	r1, [pc, #72]	; (80049e0 <pbuf_realloc+0x10c>)
 8004998:	480f      	ldr	r0, [pc, #60]	; (80049d8 <pbuf_realloc+0x104>)
 800499a:	f009 f81b 	bl	800d9d4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	897a      	ldrh	r2, [r7, #10]
 80049a2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	895a      	ldrh	r2, [r3, #10]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d004      	beq.n	80049be <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 f911 	bl	8004be0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	e000      	b.n	80049c8 <pbuf_realloc+0xf4>
    return;
 80049c6:	bf00      	nop

}
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	0800f35c 	.word	0x0800f35c
 80049d4:	0800f474 	.word	0x0800f474
 80049d8:	0800f3bc 	.word	0x0800f3bc
 80049dc:	0800f48c 	.word	0x0800f48c
 80049e0:	0800f4a4 	.word	0x0800f4a4

080049e4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	4613      	mov	r3, r2
 80049f0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d106      	bne.n	8004a06 <pbuf_add_header_impl+0x22>
 80049f8:	4b2b      	ldr	r3, [pc, #172]	; (8004aa8 <pbuf_add_header_impl+0xc4>)
 80049fa:	f240 12df 	movw	r2, #479	; 0x1df
 80049fe:	492b      	ldr	r1, [pc, #172]	; (8004aac <pbuf_add_header_impl+0xc8>)
 8004a00:	482b      	ldr	r0, [pc, #172]	; (8004ab0 <pbuf_add_header_impl+0xcc>)
 8004a02:	f008 ffe7 	bl	800d9d4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <pbuf_add_header_impl+0x30>
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a12:	d301      	bcc.n	8004a18 <pbuf_add_header_impl+0x34>
    return 1;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e043      	b.n	8004aa0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <pbuf_add_header_impl+0x3e>
    return 0;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	e03e      	b.n	8004aa0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	891a      	ldrh	r2, [r3, #8]
 8004a2a:	8a7b      	ldrh	r3, [r7, #18]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	8a7a      	ldrh	r2, [r7, #18]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d901      	bls.n	8004a3a <pbuf_add_header_impl+0x56>
    return 1;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e032      	b.n	8004aa0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	7b1b      	ldrb	r3, [r3, #12]
 8004a3e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8004a40:	8a3b      	ldrh	r3, [r7, #16]
 8004a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00c      	beq.n	8004a64 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	425b      	negs	r3, r3
 8004a52:	4413      	add	r3, r2
 8004a54:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	3310      	adds	r3, #16
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d20d      	bcs.n	8004a7c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e01d      	b.n	8004aa0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8004a64:	79fb      	ldrb	r3, [r7, #7]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d006      	beq.n	8004a78 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	425b      	negs	r3, r3
 8004a72:	4413      	add	r3, r2
 8004a74:	617b      	str	r3, [r7, #20]
 8004a76:	e001      	b.n	8004a7c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e011      	b.n	8004aa0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	895a      	ldrh	r2, [r3, #10]
 8004a86:	8a7b      	ldrh	r3, [r7, #18]
 8004a88:	4413      	add	r3, r2
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	891a      	ldrh	r2, [r3, #8]
 8004a94:	8a7b      	ldrh	r3, [r7, #18]
 8004a96:	4413      	add	r3, r2
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	811a      	strh	r2, [r3, #8]


  return 0;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	0800f35c 	.word	0x0800f35c
 8004aac:	0800f4c0 	.word	0x0800f4c0
 8004ab0:	0800f3bc 	.word	0x0800f3bc

08004ab4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8004abe:	2200      	movs	r2, #0
 8004ac0:	6839      	ldr	r1, [r7, #0]
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7ff ff8e 	bl	80049e4 <pbuf_add_header_impl>
 8004ac8:	4603      	mov	r3, r0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
	...

08004ad4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d106      	bne.n	8004af2 <pbuf_remove_header+0x1e>
 8004ae4:	4b20      	ldr	r3, [pc, #128]	; (8004b68 <pbuf_remove_header+0x94>)
 8004ae6:	f240 224b 	movw	r2, #587	; 0x24b
 8004aea:	4920      	ldr	r1, [pc, #128]	; (8004b6c <pbuf_remove_header+0x98>)
 8004aec:	4820      	ldr	r0, [pc, #128]	; (8004b70 <pbuf_remove_header+0x9c>)
 8004aee:	f008 ff71 	bl	800d9d4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d003      	beq.n	8004b00 <pbuf_remove_header+0x2c>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004afe:	d301      	bcc.n	8004b04 <pbuf_remove_header+0x30>
    return 1;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e02c      	b.n	8004b5e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <pbuf_remove_header+0x3a>
    return 0;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	e027      	b.n	8004b5e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	895b      	ldrh	r3, [r3, #10]
 8004b16:	89fa      	ldrh	r2, [r7, #14]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d908      	bls.n	8004b2e <pbuf_remove_header+0x5a>
 8004b1c:	4b12      	ldr	r3, [pc, #72]	; (8004b68 <pbuf_remove_header+0x94>)
 8004b1e:	f240 2255 	movw	r2, #597	; 0x255
 8004b22:	4914      	ldr	r1, [pc, #80]	; (8004b74 <pbuf_remove_header+0xa0>)
 8004b24:	4812      	ldr	r0, [pc, #72]	; (8004b70 <pbuf_remove_header+0x9c>)
 8004b26:	f008 ff55 	bl	800d9d4 <iprintf>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e017      	b.n	8004b5e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	441a      	add	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	895a      	ldrh	r2, [r3, #10]
 8004b44:	89fb      	ldrh	r3, [r7, #14]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	891a      	ldrh	r2, [r3, #8]
 8004b52:	89fb      	ldrh	r3, [r7, #14]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	0800f35c 	.word	0x0800f35c
 8004b6c:	0800f4c0 	.word	0x0800f4c0
 8004b70:	0800f3bc 	.word	0x0800f3bc
 8004b74:	0800f4cc 	.word	0x0800f4cc

08004b78 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	460b      	mov	r3, r1
 8004b82:	807b      	strh	r3, [r7, #2]
 8004b84:	4613      	mov	r3, r2
 8004b86:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8004b88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	da08      	bge.n	8004ba2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8004b90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b94:	425b      	negs	r3, r3
 8004b96:	4619      	mov	r1, r3
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7ff ff9b 	bl	8004ad4 <pbuf_remove_header>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	e007      	b.n	8004bb2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8004ba2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004ba6:	787a      	ldrb	r2, [r7, #1]
 8004ba8:	4619      	mov	r1, r3
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7ff ff1a 	bl	80049e4 <pbuf_add_header_impl>
 8004bb0:	4603      	mov	r3, r0
  }
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b082      	sub	sp, #8
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8004bc6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	4619      	mov	r1, r3
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7ff ffd2 	bl	8004b78 <pbuf_header_impl>
 8004bd4:	4603      	mov	r3, r0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
	...

08004be0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10b      	bne.n	8004c06 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d106      	bne.n	8004c02 <pbuf_free+0x22>
 8004bf4:	4b38      	ldr	r3, [pc, #224]	; (8004cd8 <pbuf_free+0xf8>)
 8004bf6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8004bfa:	4938      	ldr	r1, [pc, #224]	; (8004cdc <pbuf_free+0xfc>)
 8004bfc:	4838      	ldr	r0, [pc, #224]	; (8004ce0 <pbuf_free+0x100>)
 8004bfe:	f008 fee9 	bl	800d9d4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8004c02:	2300      	movs	r3, #0
 8004c04:	e063      	b.n	8004cce <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8004c06:	2300      	movs	r3, #0
 8004c08:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8004c0a:	e05c      	b.n	8004cc6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	7b9b      	ldrb	r3, [r3, #14]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d106      	bne.n	8004c22 <pbuf_free+0x42>
 8004c14:	4b30      	ldr	r3, [pc, #192]	; (8004cd8 <pbuf_free+0xf8>)
 8004c16:	f240 22f1 	movw	r2, #753	; 0x2f1
 8004c1a:	4932      	ldr	r1, [pc, #200]	; (8004ce4 <pbuf_free+0x104>)
 8004c1c:	4830      	ldr	r0, [pc, #192]	; (8004ce0 <pbuf_free+0x100>)
 8004c1e:	f008 fed9 	bl	800d9d4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	7b9b      	ldrb	r3, [r3, #14]
 8004c26:	3b01      	subs	r3, #1
 8004c28:	b2da      	uxtb	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	739a      	strb	r2, [r3, #14]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	7b9b      	ldrb	r3, [r3, #14]
 8004c32:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8004c34:	7dbb      	ldrb	r3, [r7, #22]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d143      	bne.n	8004cc2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	7b1b      	ldrb	r3, [r3, #12]
 8004c44:	f003 030f 	and.w	r3, r3, #15
 8004c48:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	7b5b      	ldrb	r3, [r3, #13]
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d011      	beq.n	8004c7a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d106      	bne.n	8004c70 <pbuf_free+0x90>
 8004c62:	4b1d      	ldr	r3, [pc, #116]	; (8004cd8 <pbuf_free+0xf8>)
 8004c64:	f240 22ff 	movw	r2, #767	; 0x2ff
 8004c68:	491f      	ldr	r1, [pc, #124]	; (8004ce8 <pbuf_free+0x108>)
 8004c6a:	481d      	ldr	r0, [pc, #116]	; (8004ce0 <pbuf_free+0x100>)
 8004c6c:	f008 feb2 	bl	800d9d4 <iprintf>
        pc->custom_free_function(p);
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	4798      	blx	r3
 8004c78:	e01d      	b.n	8004cb6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8004c7a:	7bfb      	ldrb	r3, [r7, #15]
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d104      	bne.n	8004c8a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	2008      	movs	r0, #8
 8004c84:	f7ff f99a 	bl	8003fbc <memp_free>
 8004c88:	e015      	b.n	8004cb6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8004c8a:	7bfb      	ldrb	r3, [r7, #15]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d104      	bne.n	8004c9a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8004c90:	6879      	ldr	r1, [r7, #4]
 8004c92:	2007      	movs	r0, #7
 8004c94:	f7ff f992 	bl	8003fbc <memp_free>
 8004c98:	e00d      	b.n	8004cb6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8004c9a:	7bfb      	ldrb	r3, [r7, #15]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d103      	bne.n	8004ca8 <pbuf_free+0xc8>
          mem_free(p);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7fe fe6b 	bl	800397c <mem_free>
 8004ca6:	e006      	b.n	8004cb6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8004ca8:	4b0b      	ldr	r3, [pc, #44]	; (8004cd8 <pbuf_free+0xf8>)
 8004caa:	f240 320f 	movw	r2, #783	; 0x30f
 8004cae:	490f      	ldr	r1, [pc, #60]	; (8004cec <pbuf_free+0x10c>)
 8004cb0:	480b      	ldr	r0, [pc, #44]	; (8004ce0 <pbuf_free+0x100>)
 8004cb2:	f008 fe8f 	bl	800d9d4 <iprintf>
        }
      }
      count++;
 8004cb6:	7dfb      	ldrb	r3, [r7, #23]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	607b      	str	r3, [r7, #4]
 8004cc0:	e001      	b.n	8004cc6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d19f      	bne.n	8004c0c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8004ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	0800f35c 	.word	0x0800f35c
 8004cdc:	0800f4c0 	.word	0x0800f4c0
 8004ce0:	0800f3bc 	.word	0x0800f3bc
 8004ce4:	0800f4ec 	.word	0x0800f4ec
 8004ce8:	0800f504 	.word	0x0800f504
 8004cec:	0800f528 	.word	0x0800f528

08004cf0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8004cfc:	e005      	b.n	8004d0a <pbuf_clen+0x1a>
    ++len;
 8004cfe:	89fb      	ldrh	r3, [r7, #14]
 8004d00:	3301      	adds	r3, #1
 8004d02:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1f6      	bne.n	8004cfe <pbuf_clen+0xe>
  }
  return len;
 8004d10:	89fb      	ldrh	r3, [r7, #14]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
	...

08004d20 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d010      	beq.n	8004d50 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	7b9b      	ldrb	r3, [r3, #14]
 8004d32:	3301      	adds	r3, #1
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	7b9b      	ldrb	r3, [r3, #14]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d106      	bne.n	8004d50 <pbuf_ref+0x30>
 8004d42:	4b05      	ldr	r3, [pc, #20]	; (8004d58 <pbuf_ref+0x38>)
 8004d44:	f240 3242 	movw	r2, #834	; 0x342
 8004d48:	4904      	ldr	r1, [pc, #16]	; (8004d5c <pbuf_ref+0x3c>)
 8004d4a:	4805      	ldr	r0, [pc, #20]	; (8004d60 <pbuf_ref+0x40>)
 8004d4c:	f008 fe42 	bl	800d9d4 <iprintf>
  }
}
 8004d50:	bf00      	nop
 8004d52:	3708      	adds	r7, #8
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	0800f35c 	.word	0x0800f35c
 8004d5c:	0800f53c 	.word	0x0800f53c
 8004d60:	0800f3bc 	.word	0x0800f3bc

08004d64 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d002      	beq.n	8004d7a <pbuf_cat+0x16>
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d107      	bne.n	8004d8a <pbuf_cat+0x26>
 8004d7a:	4b20      	ldr	r3, [pc, #128]	; (8004dfc <pbuf_cat+0x98>)
 8004d7c:	f240 3259 	movw	r2, #857	; 0x359
 8004d80:	491f      	ldr	r1, [pc, #124]	; (8004e00 <pbuf_cat+0x9c>)
 8004d82:	4820      	ldr	r0, [pc, #128]	; (8004e04 <pbuf_cat+0xa0>)
 8004d84:	f008 fe26 	bl	800d9d4 <iprintf>
 8004d88:	e034      	b.n	8004df4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	60fb      	str	r3, [r7, #12]
 8004d8e:	e00a      	b.n	8004da6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	891a      	ldrh	r2, [r3, #8]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	891b      	ldrh	r3, [r3, #8]
 8004d98:	4413      	add	r3, r2
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1f0      	bne.n	8004d90 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	891a      	ldrh	r2, [r3, #8]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	895b      	ldrh	r3, [r3, #10]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d006      	beq.n	8004dc8 <pbuf_cat+0x64>
 8004dba:	4b10      	ldr	r3, [pc, #64]	; (8004dfc <pbuf_cat+0x98>)
 8004dbc:	f240 3262 	movw	r2, #866	; 0x362
 8004dc0:	4911      	ldr	r1, [pc, #68]	; (8004e08 <pbuf_cat+0xa4>)
 8004dc2:	4810      	ldr	r0, [pc, #64]	; (8004e04 <pbuf_cat+0xa0>)
 8004dc4:	f008 fe06 	bl	800d9d4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d006      	beq.n	8004dde <pbuf_cat+0x7a>
 8004dd0:	4b0a      	ldr	r3, [pc, #40]	; (8004dfc <pbuf_cat+0x98>)
 8004dd2:	f240 3263 	movw	r2, #867	; 0x363
 8004dd6:	490d      	ldr	r1, [pc, #52]	; (8004e0c <pbuf_cat+0xa8>)
 8004dd8:	480a      	ldr	r0, [pc, #40]	; (8004e04 <pbuf_cat+0xa0>)
 8004dda:	f008 fdfb 	bl	800d9d4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	891a      	ldrh	r2, [r3, #8]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	891b      	ldrh	r3, [r3, #8]
 8004de6:	4413      	add	r3, r2
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	0800f35c 	.word	0x0800f35c
 8004e00:	0800f550 	.word	0x0800f550
 8004e04:	0800f3bc 	.word	0x0800f3bc
 8004e08:	0800f588 	.word	0x0800f588
 8004e0c:	0800f5b8 	.word	0x0800f5b8

08004e10 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8004e1a:	6839      	ldr	r1, [r7, #0]
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f7ff ffa1 	bl	8004d64 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8004e22:	6838      	ldr	r0, [r7, #0]
 8004e24:	f7ff ff7c 	bl	8004d20 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8004e28:	bf00      	nop
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	2300      	movs	r3, #0
 8004e40:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d008      	beq.n	8004e5a <pbuf_copy+0x2a>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d005      	beq.n	8004e5a <pbuf_copy+0x2a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	891a      	ldrh	r2, [r3, #8]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	891b      	ldrh	r3, [r3, #8]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d209      	bcs.n	8004e6e <pbuf_copy+0x3e>
 8004e5a:	4b57      	ldr	r3, [pc, #348]	; (8004fb8 <pbuf_copy+0x188>)
 8004e5c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8004e60:	4956      	ldr	r1, [pc, #344]	; (8004fbc <pbuf_copy+0x18c>)
 8004e62:	4857      	ldr	r0, [pc, #348]	; (8004fc0 <pbuf_copy+0x190>)
 8004e64:	f008 fdb6 	bl	800d9d4 <iprintf>
 8004e68:	f06f 030f 	mvn.w	r3, #15
 8004e6c:	e09f      	b.n	8004fae <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	895b      	ldrh	r3, [r3, #10]
 8004e72:	461a      	mov	r2, r3
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	1ad2      	subs	r2, r2, r3
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	895b      	ldrh	r3, [r3, #10]
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	1acb      	subs	r3, r1, r3
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d306      	bcc.n	8004e94 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	895b      	ldrh	r3, [r3, #10]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	e005      	b.n	8004ea0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	895b      	ldrh	r3, [r3, #10]
 8004e98:	461a      	mov	r2, r3
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	18d0      	adds	r0, r2, r3
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	4413      	add	r3, r2
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	f008 fd5e 	bl	800d974 <memcpy>
    offset_to += len;
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	895b      	ldrh	r3, [r3, #10]
 8004ecc:	461a      	mov	r2, r3
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d906      	bls.n	8004ee2 <pbuf_copy+0xb2>
 8004ed4:	4b38      	ldr	r3, [pc, #224]	; (8004fb8 <pbuf_copy+0x188>)
 8004ed6:	f240 32d9 	movw	r2, #985	; 0x3d9
 8004eda:	493a      	ldr	r1, [pc, #232]	; (8004fc4 <pbuf_copy+0x194>)
 8004edc:	4838      	ldr	r0, [pc, #224]	; (8004fc0 <pbuf_copy+0x190>)
 8004ede:	f008 fd79 	bl	800d9d4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	895b      	ldrh	r3, [r3, #10]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d906      	bls.n	8004efc <pbuf_copy+0xcc>
 8004eee:	4b32      	ldr	r3, [pc, #200]	; (8004fb8 <pbuf_copy+0x188>)
 8004ef0:	f240 32da 	movw	r2, #986	; 0x3da
 8004ef4:	4934      	ldr	r1, [pc, #208]	; (8004fc8 <pbuf_copy+0x198>)
 8004ef6:	4832      	ldr	r0, [pc, #200]	; (8004fc0 <pbuf_copy+0x190>)
 8004ef8:	f008 fd6c 	bl	800d9d4 <iprintf>
    if (offset_from >= p_from->len) {
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	895b      	ldrh	r3, [r3, #10]
 8004f00:	461a      	mov	r2, r3
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d304      	bcc.n	8004f12 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	895b      	ldrh	r3, [r3, #10]
 8004f16:	461a      	mov	r2, r3
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d114      	bne.n	8004f48 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10c      	bne.n	8004f48 <pbuf_copy+0x118>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d009      	beq.n	8004f48 <pbuf_copy+0x118>
 8004f34:	4b20      	ldr	r3, [pc, #128]	; (8004fb8 <pbuf_copy+0x188>)
 8004f36:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8004f3a:	4924      	ldr	r1, [pc, #144]	; (8004fcc <pbuf_copy+0x19c>)
 8004f3c:	4820      	ldr	r0, [pc, #128]	; (8004fc0 <pbuf_copy+0x190>)
 8004f3e:	f008 fd49 	bl	800d9d4 <iprintf>
 8004f42:	f06f 030f 	mvn.w	r3, #15
 8004f46:	e032      	b.n	8004fae <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d013      	beq.n	8004f76 <pbuf_copy+0x146>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	895a      	ldrh	r2, [r3, #10]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	891b      	ldrh	r3, [r3, #8]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d10d      	bne.n	8004f76 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d009      	beq.n	8004f76 <pbuf_copy+0x146>
 8004f62:	4b15      	ldr	r3, [pc, #84]	; (8004fb8 <pbuf_copy+0x188>)
 8004f64:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8004f68:	4919      	ldr	r1, [pc, #100]	; (8004fd0 <pbuf_copy+0x1a0>)
 8004f6a:	4815      	ldr	r0, [pc, #84]	; (8004fc0 <pbuf_copy+0x190>)
 8004f6c:	f008 fd32 	bl	800d9d4 <iprintf>
 8004f70:	f06f 0305 	mvn.w	r3, #5
 8004f74:	e01b      	b.n	8004fae <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d013      	beq.n	8004fa4 <pbuf_copy+0x174>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	895a      	ldrh	r2, [r3, #10]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	891b      	ldrh	r3, [r3, #8]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d10d      	bne.n	8004fa4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d009      	beq.n	8004fa4 <pbuf_copy+0x174>
 8004f90:	4b09      	ldr	r3, [pc, #36]	; (8004fb8 <pbuf_copy+0x188>)
 8004f92:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8004f96:	490e      	ldr	r1, [pc, #56]	; (8004fd0 <pbuf_copy+0x1a0>)
 8004f98:	4809      	ldr	r0, [pc, #36]	; (8004fc0 <pbuf_copy+0x190>)
 8004f9a:	f008 fd1b 	bl	800d9d4 <iprintf>
 8004f9e:	f06f 0305 	mvn.w	r3, #5
 8004fa2:	e004      	b.n	8004fae <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f47f af61 	bne.w	8004e6e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	0800f35c 	.word	0x0800f35c
 8004fbc:	0800f604 	.word	0x0800f604
 8004fc0:	0800f3bc 	.word	0x0800f3bc
 8004fc4:	0800f634 	.word	0x0800f634
 8004fc8:	0800f64c 	.word	0x0800f64c
 8004fcc:	0800f668 	.word	0x0800f668
 8004fd0:	0800f678 	.word	0x0800f678

08004fd4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b088      	sub	sp, #32
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	4611      	mov	r1, r2
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	80fb      	strh	r3, [r7, #6]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8004fea:	2300      	movs	r3, #0
 8004fec:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d108      	bne.n	800500a <pbuf_copy_partial+0x36>
 8004ff8:	4b2b      	ldr	r3, [pc, #172]	; (80050a8 <pbuf_copy_partial+0xd4>)
 8004ffa:	f240 420a 	movw	r2, #1034	; 0x40a
 8004ffe:	492b      	ldr	r1, [pc, #172]	; (80050ac <pbuf_copy_partial+0xd8>)
 8005000:	482b      	ldr	r0, [pc, #172]	; (80050b0 <pbuf_copy_partial+0xdc>)
 8005002:	f008 fce7 	bl	800d9d4 <iprintf>
 8005006:	2300      	movs	r3, #0
 8005008:	e04a      	b.n	80050a0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d108      	bne.n	8005022 <pbuf_copy_partial+0x4e>
 8005010:	4b25      	ldr	r3, [pc, #148]	; (80050a8 <pbuf_copy_partial+0xd4>)
 8005012:	f240 420b 	movw	r2, #1035	; 0x40b
 8005016:	4927      	ldr	r1, [pc, #156]	; (80050b4 <pbuf_copy_partial+0xe0>)
 8005018:	4825      	ldr	r0, [pc, #148]	; (80050b0 <pbuf_copy_partial+0xdc>)
 800501a:	f008 fcdb 	bl	800d9d4 <iprintf>
 800501e:	2300      	movs	r3, #0
 8005020:	e03e      	b.n	80050a0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	61fb      	str	r3, [r7, #28]
 8005026:	e034      	b.n	8005092 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8005028:	88bb      	ldrh	r3, [r7, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00a      	beq.n	8005044 <pbuf_copy_partial+0x70>
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	895b      	ldrh	r3, [r3, #10]
 8005032:	88ba      	ldrh	r2, [r7, #4]
 8005034:	429a      	cmp	r2, r3
 8005036:	d305      	bcc.n	8005044 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	895b      	ldrh	r3, [r3, #10]
 800503c:	88ba      	ldrh	r2, [r7, #4]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	80bb      	strh	r3, [r7, #4]
 8005042:	e023      	b.n	800508c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	895a      	ldrh	r2, [r3, #10]
 8005048:	88bb      	ldrh	r3, [r7, #4]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800504e:	8b3a      	ldrh	r2, [r7, #24]
 8005050:	88fb      	ldrh	r3, [r7, #6]
 8005052:	429a      	cmp	r2, r3
 8005054:	d901      	bls.n	800505a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8005056:	88fb      	ldrh	r3, [r7, #6]
 8005058:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800505a:	8b7b      	ldrh	r3, [r7, #26]
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	18d0      	adds	r0, r2, r3
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	88bb      	ldrh	r3, [r7, #4]
 8005066:	4413      	add	r3, r2
 8005068:	8b3a      	ldrh	r2, [r7, #24]
 800506a:	4619      	mov	r1, r3
 800506c:	f008 fc82 	bl	800d974 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8005070:	8afa      	ldrh	r2, [r7, #22]
 8005072:	8b3b      	ldrh	r3, [r7, #24]
 8005074:	4413      	add	r3, r2
 8005076:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8005078:	8b7a      	ldrh	r2, [r7, #26]
 800507a:	8b3b      	ldrh	r3, [r7, #24]
 800507c:	4413      	add	r3, r2
 800507e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8005080:	88fa      	ldrh	r2, [r7, #6]
 8005082:	8b3b      	ldrh	r3, [r7, #24]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005088:	2300      	movs	r3, #0
 800508a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	61fb      	str	r3, [r7, #28]
 8005092:	88fb      	ldrh	r3, [r7, #6]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d002      	beq.n	800509e <pbuf_copy_partial+0xca>
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1c4      	bne.n	8005028 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800509e:	8afb      	ldrh	r3, [r7, #22]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3720      	adds	r7, #32
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	0800f35c 	.word	0x0800f35c
 80050ac:	0800f6a4 	.word	0x0800f6a4
 80050b0:	0800f3bc 	.word	0x0800f3bc
 80050b4:	0800f6c4 	.word	0x0800f6c4

080050b8 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	4613      	mov	r3, r2
 80050c4:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 80050c6:	88fb      	ldrh	r3, [r7, #6]
 80050c8:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 80050ca:	2300      	movs	r3, #0
 80050cc:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d109      	bne.n	80050e8 <pbuf_take+0x30>
 80050d4:	4b3a      	ldr	r3, [pc, #232]	; (80051c0 <pbuf_take+0x108>)
 80050d6:	f240 42b3 	movw	r2, #1203	; 0x4b3
 80050da:	493a      	ldr	r1, [pc, #232]	; (80051c4 <pbuf_take+0x10c>)
 80050dc:	483a      	ldr	r0, [pc, #232]	; (80051c8 <pbuf_take+0x110>)
 80050de:	f008 fc79 	bl	800d9d4 <iprintf>
 80050e2:	f06f 030f 	mvn.w	r3, #15
 80050e6:	e067      	b.n	80051b8 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d109      	bne.n	8005102 <pbuf_take+0x4a>
 80050ee:	4b34      	ldr	r3, [pc, #208]	; (80051c0 <pbuf_take+0x108>)
 80050f0:	f240 42b4 	movw	r2, #1204	; 0x4b4
 80050f4:	4935      	ldr	r1, [pc, #212]	; (80051cc <pbuf_take+0x114>)
 80050f6:	4834      	ldr	r0, [pc, #208]	; (80051c8 <pbuf_take+0x110>)
 80050f8:	f008 fc6c 	bl	800d9d4 <iprintf>
 80050fc:	f06f 030f 	mvn.w	r3, #15
 8005100:	e05a      	b.n	80051b8 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	891b      	ldrh	r3, [r3, #8]
 8005106:	88fa      	ldrh	r2, [r7, #6]
 8005108:	429a      	cmp	r2, r3
 800510a:	d909      	bls.n	8005120 <pbuf_take+0x68>
 800510c:	4b2c      	ldr	r3, [pc, #176]	; (80051c0 <pbuf_take+0x108>)
 800510e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8005112:	492f      	ldr	r1, [pc, #188]	; (80051d0 <pbuf_take+0x118>)
 8005114:	482c      	ldr	r0, [pc, #176]	; (80051c8 <pbuf_take+0x110>)
 8005116:	f008 fc5d 	bl	800d9d4 <iprintf>
 800511a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800511e:	e04b      	b.n	80051b8 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d007      	beq.n	8005136 <pbuf_take+0x7e>
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d004      	beq.n	8005136 <pbuf_take+0x7e>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	891b      	ldrh	r3, [r3, #8]
 8005130:	88fa      	ldrh	r2, [r7, #6]
 8005132:	429a      	cmp	r2, r3
 8005134:	d902      	bls.n	800513c <pbuf_take+0x84>
    return ERR_ARG;
 8005136:	f06f 030f 	mvn.w	r3, #15
 800513a:	e03d      	b.n	80051b8 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	61fb      	str	r3, [r7, #28]
 8005140:	e028      	b.n	8005194 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d106      	bne.n	8005156 <pbuf_take+0x9e>
 8005148:	4b1d      	ldr	r3, [pc, #116]	; (80051c0 <pbuf_take+0x108>)
 800514a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800514e:	4921      	ldr	r1, [pc, #132]	; (80051d4 <pbuf_take+0x11c>)
 8005150:	481d      	ldr	r0, [pc, #116]	; (80051c8 <pbuf_take+0x110>)
 8005152:	f008 fc3f 	bl	800d9d4 <iprintf>
    buf_copy_len = total_copy_len;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	895b      	ldrh	r3, [r3, #10]
 800515e:	461a      	mov	r2, r3
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	4293      	cmp	r3, r2
 8005164:	d902      	bls.n	800516c <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	895b      	ldrh	r3, [r3, #10]
 800516a:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	6858      	ldr	r0, [r3, #4]
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	4413      	add	r3, r2
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	4619      	mov	r1, r3
 800517a:	f008 fbfb 	bl	800d974 <memcpy>
    total_copy_len -= buf_copy_len;
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	4413      	add	r3, r2
 800518c:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	61fb      	str	r3, [r7, #28]
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1d3      	bne.n	8005142 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d103      	bne.n	80051a8 <pbuf_take+0xf0>
 80051a0:	88fb      	ldrh	r3, [r7, #6]
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d006      	beq.n	80051b6 <pbuf_take+0xfe>
 80051a8:	4b05      	ldr	r3, [pc, #20]	; (80051c0 <pbuf_take+0x108>)
 80051aa:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 80051ae:	490a      	ldr	r1, [pc, #40]	; (80051d8 <pbuf_take+0x120>)
 80051b0:	4805      	ldr	r0, [pc, #20]	; (80051c8 <pbuf_take+0x110>)
 80051b2:	f008 fc0f 	bl	800d9d4 <iprintf>
  return ERR_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3720      	adds	r7, #32
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	0800f35c 	.word	0x0800f35c
 80051c4:	0800f734 	.word	0x0800f734
 80051c8:	0800f3bc 	.word	0x0800f3bc
 80051cc:	0800f74c 	.word	0x0800f74c
 80051d0:	0800f768 	.word	0x0800f768
 80051d4:	0800f788 	.word	0x0800f788
 80051d8:	0800f7a0 	.word	0x0800f7a0

080051dc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	4603      	mov	r3, r0
 80051e4:	603a      	str	r2, [r7, #0]
 80051e6:	71fb      	strb	r3, [r7, #7]
 80051e8:	460b      	mov	r3, r1
 80051ea:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	8919      	ldrh	r1, [r3, #8]
 80051f0:	88ba      	ldrh	r2, [r7, #4]
 80051f2:	79fb      	ldrb	r3, [r7, #7]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7ff fa0f 	bl	8004618 <pbuf_alloc>
 80051fa:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <pbuf_clone+0x2a>
    return NULL;
 8005202:	2300      	movs	r3, #0
 8005204:	e011      	b.n	800522a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8005206:	6839      	ldr	r1, [r7, #0]
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f7ff fe11 	bl	8004e30 <pbuf_copy>
 800520e:	4603      	mov	r3, r0
 8005210:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8005212:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d006      	beq.n	8005228 <pbuf_clone+0x4c>
 800521a:	4b06      	ldr	r3, [pc, #24]	; (8005234 <pbuf_clone+0x58>)
 800521c:	f240 5224 	movw	r2, #1316	; 0x524
 8005220:	4905      	ldr	r1, [pc, #20]	; (8005238 <pbuf_clone+0x5c>)
 8005222:	4806      	ldr	r0, [pc, #24]	; (800523c <pbuf_clone+0x60>)
 8005224:	f008 fbd6 	bl	800d9d4 <iprintf>
  return q;
 8005228:	68fb      	ldr	r3, [r7, #12]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	0800f35c 	.word	0x0800f35c
 8005238:	0800f7d0 	.word	0x0800f7d0
 800523c:	0800f3bc 	.word	0x0800f3bc

08005240 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8005244:	f008 fbde 	bl	800da04 <rand>
 8005248:	4603      	mov	r3, r0
 800524a:	b29b      	uxth	r3, r3
 800524c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005250:	b29b      	uxth	r3, r3
 8005252:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8005256:	b29a      	uxth	r2, r3
 8005258:	4b01      	ldr	r3, [pc, #4]	; (8005260 <tcp_init+0x20>)
 800525a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800525c:	bf00      	nop
 800525e:	bd80      	pop	{r7, pc}
 8005260:	2000000a 	.word	0x2000000a

08005264 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	7d1b      	ldrb	r3, [r3, #20]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d105      	bne.n	8005280 <tcp_free+0x1c>
 8005274:	4b06      	ldr	r3, [pc, #24]	; (8005290 <tcp_free+0x2c>)
 8005276:	22d4      	movs	r2, #212	; 0xd4
 8005278:	4906      	ldr	r1, [pc, #24]	; (8005294 <tcp_free+0x30>)
 800527a:	4807      	ldr	r0, [pc, #28]	; (8005298 <tcp_free+0x34>)
 800527c:	f008 fbaa 	bl	800d9d4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8005280:	6879      	ldr	r1, [r7, #4]
 8005282:	2001      	movs	r0, #1
 8005284:	f7fe fe9a 	bl	8003fbc <memp_free>
}
 8005288:	bf00      	nop
 800528a:	3708      	adds	r7, #8
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	0800f85c 	.word	0x0800f85c
 8005294:	0800f88c 	.word	0x0800f88c
 8005298:	0800f8a0 	.word	0x0800f8a0

0800529c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	7d1b      	ldrb	r3, [r3, #20]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d105      	bne.n	80052b8 <tcp_free_listen+0x1c>
 80052ac:	4b06      	ldr	r3, [pc, #24]	; (80052c8 <tcp_free_listen+0x2c>)
 80052ae:	22df      	movs	r2, #223	; 0xdf
 80052b0:	4906      	ldr	r1, [pc, #24]	; (80052cc <tcp_free_listen+0x30>)
 80052b2:	4807      	ldr	r0, [pc, #28]	; (80052d0 <tcp_free_listen+0x34>)
 80052b4:	f008 fb8e 	bl	800d9d4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80052b8:	6879      	ldr	r1, [r7, #4]
 80052ba:	2002      	movs	r0, #2
 80052bc:	f7fe fe7e 	bl	8003fbc <memp_free>
}
 80052c0:	bf00      	nop
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	0800f85c 	.word	0x0800f85c
 80052cc:	0800f8c8 	.word	0x0800f8c8
 80052d0:	0800f8a0 	.word	0x0800f8a0

080052d4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80052d8:	f000 fea2 	bl	8006020 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80052dc:	4b07      	ldr	r3, [pc, #28]	; (80052fc <tcp_tmr+0x28>)
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	3301      	adds	r3, #1
 80052e2:	b2da      	uxtb	r2, r3
 80052e4:	4b05      	ldr	r3, [pc, #20]	; (80052fc <tcp_tmr+0x28>)
 80052e6:	701a      	strb	r2, [r3, #0]
 80052e8:	4b04      	ldr	r3, [pc, #16]	; (80052fc <tcp_tmr+0x28>)
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d001      	beq.n	80052f8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80052f4:	f000 fb54 	bl	80059a0 <tcp_slowtmr>
  }
}
 80052f8:	bf00      	nop
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	200000c9 	.word	0x200000c9

08005300 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d105      	bne.n	800531c <tcp_remove_listener+0x1c>
 8005310:	4b0d      	ldr	r3, [pc, #52]	; (8005348 <tcp_remove_listener+0x48>)
 8005312:	22ff      	movs	r2, #255	; 0xff
 8005314:	490d      	ldr	r1, [pc, #52]	; (800534c <tcp_remove_listener+0x4c>)
 8005316:	480e      	ldr	r0, [pc, #56]	; (8005350 <tcp_remove_listener+0x50>)
 8005318:	f008 fb5c 	bl	800d9d4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	e00a      	b.n	8005338 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	429a      	cmp	r2, r3
 800532a:	d102      	bne.n	8005332 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1f1      	bne.n	8005322 <tcp_remove_listener+0x22>
    }
  }
}
 800533e:	bf00      	nop
 8005340:	bf00      	nop
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	0800f85c 	.word	0x0800f85c
 800534c:	0800f8e4 	.word	0x0800f8e4
 8005350:	0800f8a0 	.word	0x0800f8a0

08005354 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d106      	bne.n	8005370 <tcp_listen_closed+0x1c>
 8005362:	4b14      	ldr	r3, [pc, #80]	; (80053b4 <tcp_listen_closed+0x60>)
 8005364:	f240 1211 	movw	r2, #273	; 0x111
 8005368:	4913      	ldr	r1, [pc, #76]	; (80053b8 <tcp_listen_closed+0x64>)
 800536a:	4814      	ldr	r0, [pc, #80]	; (80053bc <tcp_listen_closed+0x68>)
 800536c:	f008 fb32 	bl	800d9d4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	7d1b      	ldrb	r3, [r3, #20]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d006      	beq.n	8005386 <tcp_listen_closed+0x32>
 8005378:	4b0e      	ldr	r3, [pc, #56]	; (80053b4 <tcp_listen_closed+0x60>)
 800537a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800537e:	4910      	ldr	r1, [pc, #64]	; (80053c0 <tcp_listen_closed+0x6c>)
 8005380:	480e      	ldr	r0, [pc, #56]	; (80053bc <tcp_listen_closed+0x68>)
 8005382:	f008 fb27 	bl	800d9d4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005386:	2301      	movs	r3, #1
 8005388:	60fb      	str	r3, [r7, #12]
 800538a:	e00b      	b.n	80053a4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800538c:	4a0d      	ldr	r2, [pc, #52]	; (80053c4 <tcp_listen_closed+0x70>)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	6879      	ldr	r1, [r7, #4]
 8005398:	4618      	mov	r0, r3
 800539a:	f7ff ffb1 	bl	8005300 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	3301      	adds	r3, #1
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2b03      	cmp	r3, #3
 80053a8:	d9f0      	bls.n	800538c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80053aa:	bf00      	nop
 80053ac:	bf00      	nop
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	0800f85c 	.word	0x0800f85c
 80053b8:	0800f90c 	.word	0x0800f90c
 80053bc:	0800f8a0 	.word	0x0800f8a0
 80053c0:	0800f918 	.word	0x0800f918
 80053c4:	08011828 	.word	0x08011828

080053c8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80053c8:	b5b0      	push	{r4, r5, r7, lr}
 80053ca:	b088      	sub	sp, #32
 80053cc:	af04      	add	r7, sp, #16
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	460b      	mov	r3, r1
 80053d2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d106      	bne.n	80053e8 <tcp_close_shutdown+0x20>
 80053da:	4b63      	ldr	r3, [pc, #396]	; (8005568 <tcp_close_shutdown+0x1a0>)
 80053dc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80053e0:	4962      	ldr	r1, [pc, #392]	; (800556c <tcp_close_shutdown+0x1a4>)
 80053e2:	4863      	ldr	r0, [pc, #396]	; (8005570 <tcp_close_shutdown+0x1a8>)
 80053e4:	f008 faf6 	bl	800d9d4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80053e8:	78fb      	ldrb	r3, [r7, #3]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d066      	beq.n	80054bc <tcp_close_shutdown+0xf4>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	7d1b      	ldrb	r3, [r3, #20]
 80053f2:	2b04      	cmp	r3, #4
 80053f4:	d003      	beq.n	80053fe <tcp_close_shutdown+0x36>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	7d1b      	ldrb	r3, [r3, #20]
 80053fa:	2b07      	cmp	r3, #7
 80053fc:	d15e      	bne.n	80054bc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005402:	2b00      	cmp	r3, #0
 8005404:	d104      	bne.n	8005410 <tcp_close_shutdown+0x48>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800540a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800540e:	d055      	beq.n	80054bc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	8b5b      	ldrh	r3, [r3, #26]
 8005414:	f003 0310 	and.w	r3, r3, #16
 8005418:	2b00      	cmp	r3, #0
 800541a:	d106      	bne.n	800542a <tcp_close_shutdown+0x62>
 800541c:	4b52      	ldr	r3, [pc, #328]	; (8005568 <tcp_close_shutdown+0x1a0>)
 800541e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8005422:	4954      	ldr	r1, [pc, #336]	; (8005574 <tcp_close_shutdown+0x1ac>)
 8005424:	4852      	ldr	r0, [pc, #328]	; (8005570 <tcp_close_shutdown+0x1a8>)
 8005426:	f008 fad5 	bl	800d9d4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005432:	687d      	ldr	r5, [r7, #4]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	3304      	adds	r3, #4
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	8ad2      	ldrh	r2, [r2, #22]
 800543c:	6879      	ldr	r1, [r7, #4]
 800543e:	8b09      	ldrh	r1, [r1, #24]
 8005440:	9102      	str	r1, [sp, #8]
 8005442:	9201      	str	r2, [sp, #4]
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	462b      	mov	r3, r5
 8005448:	4622      	mov	r2, r4
 800544a:	4601      	mov	r1, r0
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f004 fe8d 	bl	800a16c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f001 f8c6 	bl	80065e4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005458:	4b47      	ldr	r3, [pc, #284]	; (8005578 <tcp_close_shutdown+0x1b0>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	429a      	cmp	r2, r3
 8005460:	d105      	bne.n	800546e <tcp_close_shutdown+0xa6>
 8005462:	4b45      	ldr	r3, [pc, #276]	; (8005578 <tcp_close_shutdown+0x1b0>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	4a43      	ldr	r2, [pc, #268]	; (8005578 <tcp_close_shutdown+0x1b0>)
 800546a:	6013      	str	r3, [r2, #0]
 800546c:	e013      	b.n	8005496 <tcp_close_shutdown+0xce>
 800546e:	4b42      	ldr	r3, [pc, #264]	; (8005578 <tcp_close_shutdown+0x1b0>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	e00c      	b.n	8005490 <tcp_close_shutdown+0xc8>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	429a      	cmp	r2, r3
 800547e:	d104      	bne.n	800548a <tcp_close_shutdown+0xc2>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	68da      	ldr	r2, [r3, #12]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	60da      	str	r2, [r3, #12]
 8005488:	e005      	b.n	8005496 <tcp_close_shutdown+0xce>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1ef      	bne.n	8005476 <tcp_close_shutdown+0xae>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	60da      	str	r2, [r3, #12]
 800549c:	4b37      	ldr	r3, [pc, #220]	; (800557c <tcp_close_shutdown+0x1b4>)
 800549e:	2201      	movs	r2, #1
 80054a0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80054a2:	4b37      	ldr	r3, [pc, #220]	; (8005580 <tcp_close_shutdown+0x1b8>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d102      	bne.n	80054b2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80054ac:	f003 fd5a 	bl	8008f64 <tcp_trigger_input_pcb_close>
 80054b0:	e002      	b.n	80054b8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7ff fed6 	bl	8005264 <tcp_free>
      }
      return ERR_OK;
 80054b8:	2300      	movs	r3, #0
 80054ba:	e050      	b.n	800555e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	7d1b      	ldrb	r3, [r3, #20]
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d03b      	beq.n	800553c <tcp_close_shutdown+0x174>
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	dc44      	bgt.n	8005552 <tcp_close_shutdown+0x18a>
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d002      	beq.n	80054d2 <tcp_close_shutdown+0x10a>
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d02a      	beq.n	8005526 <tcp_close_shutdown+0x15e>
 80054d0:	e03f      	b.n	8005552 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	8adb      	ldrh	r3, [r3, #22]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d021      	beq.n	800551e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80054da:	4b2a      	ldr	r3, [pc, #168]	; (8005584 <tcp_close_shutdown+0x1bc>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d105      	bne.n	80054f0 <tcp_close_shutdown+0x128>
 80054e4:	4b27      	ldr	r3, [pc, #156]	; (8005584 <tcp_close_shutdown+0x1bc>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	4a26      	ldr	r2, [pc, #152]	; (8005584 <tcp_close_shutdown+0x1bc>)
 80054ec:	6013      	str	r3, [r2, #0]
 80054ee:	e013      	b.n	8005518 <tcp_close_shutdown+0x150>
 80054f0:	4b24      	ldr	r3, [pc, #144]	; (8005584 <tcp_close_shutdown+0x1bc>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	60bb      	str	r3, [r7, #8]
 80054f6:	e00c      	b.n	8005512 <tcp_close_shutdown+0x14a>
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d104      	bne.n	800550c <tcp_close_shutdown+0x144>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68da      	ldr	r2, [r3, #12]
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	60da      	str	r2, [r3, #12]
 800550a:	e005      	b.n	8005518 <tcp_close_shutdown+0x150>
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	60bb      	str	r3, [r7, #8]
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1ef      	bne.n	80054f8 <tcp_close_shutdown+0x130>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7ff fea0 	bl	8005264 <tcp_free>
      break;
 8005524:	e01a      	b.n	800555c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7ff ff14 	bl	8005354 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800552c:	6879      	ldr	r1, [r7, #4]
 800552e:	4816      	ldr	r0, [pc, #88]	; (8005588 <tcp_close_shutdown+0x1c0>)
 8005530:	f001 f8a8 	bl	8006684 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f7ff feb1 	bl	800529c <tcp_free_listen>
      break;
 800553a:	e00f      	b.n	800555c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800553c:	6879      	ldr	r1, [r7, #4]
 800553e:	480e      	ldr	r0, [pc, #56]	; (8005578 <tcp_close_shutdown+0x1b0>)
 8005540:	f001 f8a0 	bl	8006684 <tcp_pcb_remove>
 8005544:	4b0d      	ldr	r3, [pc, #52]	; (800557c <tcp_close_shutdown+0x1b4>)
 8005546:	2201      	movs	r2, #1
 8005548:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7ff fe8a 	bl	8005264 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8005550:	e004      	b.n	800555c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f81a 	bl	800558c <tcp_close_shutdown_fin>
 8005558:	4603      	mov	r3, r0
 800555a:	e000      	b.n	800555e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bdb0      	pop	{r4, r5, r7, pc}
 8005566:	bf00      	nop
 8005568:	0800f85c 	.word	0x0800f85c
 800556c:	0800f930 	.word	0x0800f930
 8005570:	0800f8a0 	.word	0x0800f8a0
 8005574:	0800f950 	.word	0x0800f950
 8005578:	20008a5c 	.word	0x20008a5c
 800557c:	20008a58 	.word	0x20008a58
 8005580:	20008a70 	.word	0x20008a70
 8005584:	20008a68 	.word	0x20008a68
 8005588:	20008a64 	.word	0x20008a64

0800558c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d106      	bne.n	80055a8 <tcp_close_shutdown_fin+0x1c>
 800559a:	4b2e      	ldr	r3, [pc, #184]	; (8005654 <tcp_close_shutdown_fin+0xc8>)
 800559c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80055a0:	492d      	ldr	r1, [pc, #180]	; (8005658 <tcp_close_shutdown_fin+0xcc>)
 80055a2:	482e      	ldr	r0, [pc, #184]	; (800565c <tcp_close_shutdown_fin+0xd0>)
 80055a4:	f008 fa16 	bl	800d9d4 <iprintf>

  switch (pcb->state) {
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	7d1b      	ldrb	r3, [r3, #20]
 80055ac:	2b07      	cmp	r3, #7
 80055ae:	d020      	beq.n	80055f2 <tcp_close_shutdown_fin+0x66>
 80055b0:	2b07      	cmp	r3, #7
 80055b2:	dc2b      	bgt.n	800560c <tcp_close_shutdown_fin+0x80>
 80055b4:	2b03      	cmp	r3, #3
 80055b6:	d002      	beq.n	80055be <tcp_close_shutdown_fin+0x32>
 80055b8:	2b04      	cmp	r3, #4
 80055ba:	d00d      	beq.n	80055d8 <tcp_close_shutdown_fin+0x4c>
 80055bc:	e026      	b.n	800560c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f003 fee2 	bl	8009388 <tcp_send_fin>
 80055c4:	4603      	mov	r3, r0
 80055c6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80055c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d11f      	bne.n	8005610 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2205      	movs	r2, #5
 80055d4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80055d6:	e01b      	b.n	8005610 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f003 fed5 	bl	8009388 <tcp_send_fin>
 80055de:	4603      	mov	r3, r0
 80055e0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80055e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d114      	bne.n	8005614 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2205      	movs	r2, #5
 80055ee:	751a      	strb	r2, [r3, #20]
      }
      break;
 80055f0:	e010      	b.n	8005614 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f003 fec8 	bl	8009388 <tcp_send_fin>
 80055f8:	4603      	mov	r3, r0
 80055fa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80055fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d109      	bne.n	8005618 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2209      	movs	r2, #9
 8005608:	751a      	strb	r2, [r3, #20]
      }
      break;
 800560a:	e005      	b.n	8005618 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800560c:	2300      	movs	r3, #0
 800560e:	e01c      	b.n	800564a <tcp_close_shutdown_fin+0xbe>
      break;
 8005610:	bf00      	nop
 8005612:	e002      	b.n	800561a <tcp_close_shutdown_fin+0x8e>
      break;
 8005614:	bf00      	nop
 8005616:	e000      	b.n	800561a <tcp_close_shutdown_fin+0x8e>
      break;
 8005618:	bf00      	nop
  }

  if (err == ERR_OK) {
 800561a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d103      	bne.n	800562a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f003 ffee 	bl	8009604 <tcp_output>
 8005628:	e00d      	b.n	8005646 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800562a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800562e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005632:	d108      	bne.n	8005646 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	8b5b      	ldrh	r3, [r3, #26]
 8005638:	f043 0308 	orr.w	r3, r3, #8
 800563c:	b29a      	uxth	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	e001      	b.n	800564a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8005646:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	0800f85c 	.word	0x0800f85c
 8005658:	0800f90c 	.word	0x0800f90c
 800565c:	0800f8a0 	.word	0x0800f8a0

08005660 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d109      	bne.n	8005682 <tcp_close+0x22>
 800566e:	4b0f      	ldr	r3, [pc, #60]	; (80056ac <tcp_close+0x4c>)
 8005670:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005674:	490e      	ldr	r1, [pc, #56]	; (80056b0 <tcp_close+0x50>)
 8005676:	480f      	ldr	r0, [pc, #60]	; (80056b4 <tcp_close+0x54>)
 8005678:	f008 f9ac 	bl	800d9d4 <iprintf>
 800567c:	f06f 030f 	mvn.w	r3, #15
 8005680:	e00f      	b.n	80056a2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	7d1b      	ldrb	r3, [r3, #20]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d006      	beq.n	8005698 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	8b5b      	ldrh	r3, [r3, #26]
 800568e:	f043 0310 	orr.w	r3, r3, #16
 8005692:	b29a      	uxth	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8005698:	2101      	movs	r1, #1
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7ff fe94 	bl	80053c8 <tcp_close_shutdown>
 80056a0:	4603      	mov	r3, r0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	0800f85c 	.word	0x0800f85c
 80056b0:	0800f96c 	.word	0x0800f96c
 80056b4:	0800f8a0 	.word	0x0800f8a0

080056b8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b08e      	sub	sp, #56	; 0x38
 80056bc:	af04      	add	r7, sp, #16
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d107      	bne.n	80056d8 <tcp_abandon+0x20>
 80056c8:	4b52      	ldr	r3, [pc, #328]	; (8005814 <tcp_abandon+0x15c>)
 80056ca:	f240 223d 	movw	r2, #573	; 0x23d
 80056ce:	4952      	ldr	r1, [pc, #328]	; (8005818 <tcp_abandon+0x160>)
 80056d0:	4852      	ldr	r0, [pc, #328]	; (800581c <tcp_abandon+0x164>)
 80056d2:	f008 f97f 	bl	800d9d4 <iprintf>
 80056d6:	e099      	b.n	800580c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	7d1b      	ldrb	r3, [r3, #20]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d106      	bne.n	80056ee <tcp_abandon+0x36>
 80056e0:	4b4c      	ldr	r3, [pc, #304]	; (8005814 <tcp_abandon+0x15c>)
 80056e2:	f44f 7210 	mov.w	r2, #576	; 0x240
 80056e6:	494e      	ldr	r1, [pc, #312]	; (8005820 <tcp_abandon+0x168>)
 80056e8:	484c      	ldr	r0, [pc, #304]	; (800581c <tcp_abandon+0x164>)
 80056ea:	f008 f973 	bl	800d9d4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	7d1b      	ldrb	r3, [r3, #20]
 80056f2:	2b0a      	cmp	r3, #10
 80056f4:	d107      	bne.n	8005706 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80056f6:	6879      	ldr	r1, [r7, #4]
 80056f8:	484a      	ldr	r0, [pc, #296]	; (8005824 <tcp_abandon+0x16c>)
 80056fa:	f000 ffc3 	bl	8006684 <tcp_pcb_remove>
    tcp_free(pcb);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f7ff fdb0 	bl	8005264 <tcp_free>
 8005704:	e082      	b.n	800580c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8005706:	2300      	movs	r3, #0
 8005708:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800570a:	2300      	movs	r3, #0
 800570c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005712:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005720:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	7d1b      	ldrb	r3, [r3, #20]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d126      	bne.n	800577e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	8adb      	ldrh	r3, [r3, #22]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d02e      	beq.n	8005796 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005738:	4b3b      	ldr	r3, [pc, #236]	; (8005828 <tcp_abandon+0x170>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	429a      	cmp	r2, r3
 8005740:	d105      	bne.n	800574e <tcp_abandon+0x96>
 8005742:	4b39      	ldr	r3, [pc, #228]	; (8005828 <tcp_abandon+0x170>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	4a37      	ldr	r2, [pc, #220]	; (8005828 <tcp_abandon+0x170>)
 800574a:	6013      	str	r3, [r2, #0]
 800574c:	e013      	b.n	8005776 <tcp_abandon+0xbe>
 800574e:	4b36      	ldr	r3, [pc, #216]	; (8005828 <tcp_abandon+0x170>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	61fb      	str	r3, [r7, #28]
 8005754:	e00c      	b.n	8005770 <tcp_abandon+0xb8>
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	429a      	cmp	r2, r3
 800575e:	d104      	bne.n	800576a <tcp_abandon+0xb2>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68da      	ldr	r2, [r3, #12]
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	60da      	str	r2, [r3, #12]
 8005768:	e005      	b.n	8005776 <tcp_abandon+0xbe>
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	61fb      	str	r3, [r7, #28]
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1ef      	bne.n	8005756 <tcp_abandon+0x9e>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	60da      	str	r2, [r3, #12]
 800577c:	e00b      	b.n	8005796 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	8adb      	ldrh	r3, [r3, #22]
 8005786:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005788:	6879      	ldr	r1, [r7, #4]
 800578a:	4828      	ldr	r0, [pc, #160]	; (800582c <tcp_abandon+0x174>)
 800578c:	f000 ff7a 	bl	8006684 <tcp_pcb_remove>
 8005790:	4b27      	ldr	r3, [pc, #156]	; (8005830 <tcp_abandon+0x178>)
 8005792:	2201      	movs	r2, #1
 8005794:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579a:	2b00      	cmp	r3, #0
 800579c:	d004      	beq.n	80057a8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 fd1c 	bl	80061e0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d004      	beq.n	80057ba <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 fd13 	bl	80061e0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d004      	beq.n	80057cc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 fd0a 	bl	80061e0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00e      	beq.n	80057f0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80057d2:	6879      	ldr	r1, [r7, #4]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	3304      	adds	r3, #4
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	8b12      	ldrh	r2, [r2, #24]
 80057dc:	9202      	str	r2, [sp, #8]
 80057de:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80057e0:	9201      	str	r2, [sp, #4]
 80057e2:	9300      	str	r3, [sp, #0]
 80057e4:	460b      	mov	r3, r1
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	69b9      	ldr	r1, [r7, #24]
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f004 fcbe 	bl	800a16c <tcp_rst>
    }
    last_state = pcb->state;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	7d1b      	ldrb	r3, [r3, #20]
 80057f4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7ff fd34 	bl	8005264 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d004      	beq.n	800580c <tcp_abandon+0x154>
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	f06f 010c 	mvn.w	r1, #12
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	4798      	blx	r3
  }
}
 800580c:	3728      	adds	r7, #40	; 0x28
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	0800f85c 	.word	0x0800f85c
 8005818:	0800f9a0 	.word	0x0800f9a0
 800581c:	0800f8a0 	.word	0x0800f8a0
 8005820:	0800f9bc 	.word	0x0800f9bc
 8005824:	20008a6c 	.word	0x20008a6c
 8005828:	20008a68 	.word	0x20008a68
 800582c:	20008a5c 	.word	0x20008a5c
 8005830:	20008a58 	.word	0x20008a58

08005834 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800583c:	2101      	movs	r1, #1
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7ff ff3a 	bl	80056b8 <tcp_abandon>
}
 8005844:	bf00      	nop
 8005846:	3708      	adds	r7, #8
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d106      	bne.n	8005868 <tcp_update_rcv_ann_wnd+0x1c>
 800585a:	4b25      	ldr	r3, [pc, #148]	; (80058f0 <tcp_update_rcv_ann_wnd+0xa4>)
 800585c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8005860:	4924      	ldr	r1, [pc, #144]	; (80058f4 <tcp_update_rcv_ann_wnd+0xa8>)
 8005862:	4825      	ldr	r0, [pc, #148]	; (80058f8 <tcp_update_rcv_ann_wnd+0xac>)
 8005864:	f008 f8b6 	bl	800d9d4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8005870:	4413      	add	r3, r2
 8005872:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800587c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8005880:	bf28      	it	cs
 8005882:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8005886:	b292      	uxth	r2, r2
 8005888:	4413      	add	r3, r2
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	db08      	blt.n	80058a4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	e020      	b.n	80058e6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	dd03      	ble.n	80058ba <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058b8:	e014      	b.n	80058e4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058cc:	d306      	bcc.n	80058dc <tcp_update_rcv_ann_wnd+0x90>
 80058ce:	4b08      	ldr	r3, [pc, #32]	; (80058f0 <tcp_update_rcv_ann_wnd+0xa4>)
 80058d0:	f240 32b6 	movw	r2, #950	; 0x3b6
 80058d4:	4909      	ldr	r1, [pc, #36]	; (80058fc <tcp_update_rcv_ann_wnd+0xb0>)
 80058d6:	4808      	ldr	r0, [pc, #32]	; (80058f8 <tcp_update_rcv_ann_wnd+0xac>)
 80058d8:	f008 f87c 	bl	800d9d4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	b29a      	uxth	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80058e4:	2300      	movs	r3, #0
  }
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	0800f85c 	.word	0x0800f85c
 80058f4:	0800fab8 	.word	0x0800fab8
 80058f8:	0800f8a0 	.word	0x0800f8a0
 80058fc:	0800fadc 	.word	0x0800fadc

08005900 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	460b      	mov	r3, r1
 800590a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d107      	bne.n	8005922 <tcp_recved+0x22>
 8005912:	4b1f      	ldr	r3, [pc, #124]	; (8005990 <tcp_recved+0x90>)
 8005914:	f240 32cf 	movw	r2, #975	; 0x3cf
 8005918:	491e      	ldr	r1, [pc, #120]	; (8005994 <tcp_recved+0x94>)
 800591a:	481f      	ldr	r0, [pc, #124]	; (8005998 <tcp_recved+0x98>)
 800591c:	f008 f85a 	bl	800d9d4 <iprintf>
 8005920:	e032      	b.n	8005988 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	7d1b      	ldrb	r3, [r3, #20]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d106      	bne.n	8005938 <tcp_recved+0x38>
 800592a:	4b19      	ldr	r3, [pc, #100]	; (8005990 <tcp_recved+0x90>)
 800592c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8005930:	491a      	ldr	r1, [pc, #104]	; (800599c <tcp_recved+0x9c>)
 8005932:	4819      	ldr	r0, [pc, #100]	; (8005998 <tcp_recved+0x98>)
 8005934:	f008 f84e 	bl	800d9d4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800593c:	887b      	ldrh	r3, [r7, #2]
 800593e:	4413      	add	r3, r2
 8005940:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8005942:	89fb      	ldrh	r3, [r7, #14]
 8005944:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005948:	d804      	bhi.n	8005954 <tcp_recved+0x54>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800594e:	89fa      	ldrh	r2, [r7, #14]
 8005950:	429a      	cmp	r2, r3
 8005952:	d204      	bcs.n	800595e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800595a:	851a      	strh	r2, [r3, #40]	; 0x28
 800595c:	e002      	b.n	8005964 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	89fa      	ldrh	r2, [r7, #14]
 8005962:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f7ff ff71 	bl	800584c <tcp_update_rcv_ann_wnd>
 800596a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8005972:	d309      	bcc.n	8005988 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	8b5b      	ldrh	r3, [r3, #26]
 8005978:	f043 0302 	orr.w	r3, r3, #2
 800597c:	b29a      	uxth	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f003 fe3e 	bl	8009604 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	0800f85c 	.word	0x0800f85c
 8005994:	0800faf8 	.word	0x0800faf8
 8005998:	0800f8a0 	.word	0x0800f8a0
 800599c:	0800fb10 	.word	0x0800fb10

080059a0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80059a0:	b5b0      	push	{r4, r5, r7, lr}
 80059a2:	b090      	sub	sp, #64	; 0x40
 80059a4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80059a6:	2300      	movs	r3, #0
 80059a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80059ac:	4b94      	ldr	r3, [pc, #592]	; (8005c00 <tcp_slowtmr+0x260>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	3301      	adds	r3, #1
 80059b2:	4a93      	ldr	r2, [pc, #588]	; (8005c00 <tcp_slowtmr+0x260>)
 80059b4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80059b6:	4b93      	ldr	r3, [pc, #588]	; (8005c04 <tcp_slowtmr+0x264>)
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	3301      	adds	r3, #1
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	4b91      	ldr	r3, [pc, #580]	; (8005c04 <tcp_slowtmr+0x264>)
 80059c0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80059c2:	2300      	movs	r3, #0
 80059c4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80059c6:	4b90      	ldr	r3, [pc, #576]	; (8005c08 <tcp_slowtmr+0x268>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80059cc:	e29f      	b.n	8005f0e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80059ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d0:	7d1b      	ldrb	r3, [r3, #20]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d106      	bne.n	80059e4 <tcp_slowtmr+0x44>
 80059d6:	4b8d      	ldr	r3, [pc, #564]	; (8005c0c <tcp_slowtmr+0x26c>)
 80059d8:	f240 42be 	movw	r2, #1214	; 0x4be
 80059dc:	498c      	ldr	r1, [pc, #560]	; (8005c10 <tcp_slowtmr+0x270>)
 80059de:	488d      	ldr	r0, [pc, #564]	; (8005c14 <tcp_slowtmr+0x274>)
 80059e0:	f007 fff8 	bl	800d9d4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80059e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e6:	7d1b      	ldrb	r3, [r3, #20]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d106      	bne.n	80059fa <tcp_slowtmr+0x5a>
 80059ec:	4b87      	ldr	r3, [pc, #540]	; (8005c0c <tcp_slowtmr+0x26c>)
 80059ee:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80059f2:	4989      	ldr	r1, [pc, #548]	; (8005c18 <tcp_slowtmr+0x278>)
 80059f4:	4887      	ldr	r0, [pc, #540]	; (8005c14 <tcp_slowtmr+0x274>)
 80059f6:	f007 ffed 	bl	800d9d4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80059fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fc:	7d1b      	ldrb	r3, [r3, #20]
 80059fe:	2b0a      	cmp	r3, #10
 8005a00:	d106      	bne.n	8005a10 <tcp_slowtmr+0x70>
 8005a02:	4b82      	ldr	r3, [pc, #520]	; (8005c0c <tcp_slowtmr+0x26c>)
 8005a04:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8005a08:	4984      	ldr	r1, [pc, #528]	; (8005c1c <tcp_slowtmr+0x27c>)
 8005a0a:	4882      	ldr	r0, [pc, #520]	; (8005c14 <tcp_slowtmr+0x274>)
 8005a0c:	f007 ffe2 	bl	800d9d4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8005a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a12:	7f9a      	ldrb	r2, [r3, #30]
 8005a14:	4b7b      	ldr	r3, [pc, #492]	; (8005c04 <tcp_slowtmr+0x264>)
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d105      	bne.n	8005a28 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8005a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8005a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8005a26:	e272      	b.n	8005f0e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8005a28:	4b76      	ldr	r3, [pc, #472]	; (8005c04 <tcp_slowtmr+0x264>)
 8005a2a:	781a      	ldrb	r2, [r3, #0]
 8005a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8005a30:	2300      	movs	r3, #0
 8005a32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8005a36:	2300      	movs	r3, #0
 8005a38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3e:	7d1b      	ldrb	r3, [r3, #20]
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d10a      	bne.n	8005a5a <tcp_slowtmr+0xba>
 8005a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a4a:	2b05      	cmp	r3, #5
 8005a4c:	d905      	bls.n	8005a5a <tcp_slowtmr+0xba>
      ++pcb_remove;
 8005a4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a52:	3301      	adds	r3, #1
 8005a54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005a58:	e11e      	b.n	8005c98 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8005a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a60:	2b0b      	cmp	r3, #11
 8005a62:	d905      	bls.n	8005a70 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8005a64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a68:	3301      	adds	r3, #1
 8005a6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005a6e:	e113      	b.n	8005c98 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8005a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a72:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d075      	beq.n	8005b66 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8005a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d006      	beq.n	8005a90 <tcp_slowtmr+0xf0>
 8005a82:	4b62      	ldr	r3, [pc, #392]	; (8005c0c <tcp_slowtmr+0x26c>)
 8005a84:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8005a88:	4965      	ldr	r1, [pc, #404]	; (8005c20 <tcp_slowtmr+0x280>)
 8005a8a:	4862      	ldr	r0, [pc, #392]	; (8005c14 <tcp_slowtmr+0x274>)
 8005a8c:	f007 ffa2 	bl	800d9d4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8005a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d106      	bne.n	8005aa6 <tcp_slowtmr+0x106>
 8005a98:	4b5c      	ldr	r3, [pc, #368]	; (8005c0c <tcp_slowtmr+0x26c>)
 8005a9a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8005a9e:	4961      	ldr	r1, [pc, #388]	; (8005c24 <tcp_slowtmr+0x284>)
 8005aa0:	485c      	ldr	r0, [pc, #368]	; (8005c14 <tcp_slowtmr+0x274>)
 8005aa2:	f007 ff97 	bl	800d9d4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8005aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8005aac:	2b0b      	cmp	r3, #11
 8005aae:	d905      	bls.n	8005abc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8005ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005aba:	e0ed      	b.n	8005c98 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8005abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005abe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	4a58      	ldr	r2, [pc, #352]	; (8005c28 <tcp_slowtmr+0x288>)
 8005ac6:	5cd3      	ldrb	r3, [r2, r3]
 8005ac8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8005aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005acc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005ad0:	7c7a      	ldrb	r2, [r7, #17]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d907      	bls.n	8005ae6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8005ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005adc:	3301      	adds	r3, #1
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8005ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005aec:	7c7a      	ldrb	r2, [r7, #17]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	f200 80d2 	bhi.w	8005c98 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8005af4:	2301      	movs	r3, #1
 8005af6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8005af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d108      	bne.n	8005b14 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8005b02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b04:	f004 fc26 	bl	800a354 <tcp_zero_window_probe>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d014      	beq.n	8005b38 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8005b0e:	2300      	movs	r3, #0
 8005b10:	623b      	str	r3, [r7, #32]
 8005b12:	e011      	b.n	8005b38 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8005b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b1e:	f003 faeb 	bl	80090f8 <tcp_split_unsent_seg>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d107      	bne.n	8005b38 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8005b28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b2a:	f003 fd6b 	bl	8009604 <tcp_output>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d101      	bne.n	8005b38 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8005b34:	2300      	movs	r3, #0
 8005b36:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f000 80ac 	beq.w	8005c98 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8005b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8005b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005b4e:	2b06      	cmp	r3, #6
 8005b50:	f200 80a2 	bhi.w	8005c98 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8005b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b56:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b60:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8005b64:	e098      	b.n	8005c98 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8005b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b68:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	db0f      	blt.n	8005b90 <tcp_slowtmr+0x1f0>
 8005b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b72:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005b76:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d008      	beq.n	8005b90 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8005b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b80:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	3301      	adds	r3, #1
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	b21a      	sxth	r2, r3
 8005b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8005b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b92:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8005b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b98:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	db7b      	blt.n	8005c98 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8005ba0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ba2:	f004 f821 	bl	8009be8 <tcp_rexmit_rto_prepare>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d007      	beq.n	8005bbc <tcp_slowtmr+0x21c>
 8005bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d171      	bne.n	8005c98 <tcp_slowtmr+0x2f8>
 8005bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d06d      	beq.n	8005c98 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8005bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbe:	7d1b      	ldrb	r3, [r3, #20]
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d03a      	beq.n	8005c3a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8005bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bca:	2b0c      	cmp	r3, #12
 8005bcc:	bf28      	it	cs
 8005bce:	230c      	movcs	r3, #12
 8005bd0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8005bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8005bd8:	10db      	asrs	r3, r3, #3
 8005bda:	b21b      	sxth	r3, r3
 8005bdc:	461a      	mov	r2, r3
 8005bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8005be4:	4413      	add	r3, r2
 8005be6:	7efa      	ldrb	r2, [r7, #27]
 8005be8:	4910      	ldr	r1, [pc, #64]	; (8005c2c <tcp_slowtmr+0x28c>)
 8005bea:	5c8a      	ldrb	r2, [r1, r2]
 8005bec:	4093      	lsls	r3, r2
 8005bee:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	dc1a      	bgt.n	8005c30 <tcp_slowtmr+0x290>
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	b21a      	sxth	r2, r3
 8005bfe:	e019      	b.n	8005c34 <tcp_slowtmr+0x294>
 8005c00:	20008a60 	.word	0x20008a60
 8005c04:	200000ca 	.word	0x200000ca
 8005c08:	20008a5c 	.word	0x20008a5c
 8005c0c:	0800f85c 	.word	0x0800f85c
 8005c10:	0800fba0 	.word	0x0800fba0
 8005c14:	0800f8a0 	.word	0x0800f8a0
 8005c18:	0800fbcc 	.word	0x0800fbcc
 8005c1c:	0800fbf8 	.word	0x0800fbf8
 8005c20:	0800fc28 	.word	0x0800fc28
 8005c24:	0800fc5c 	.word	0x0800fc5c
 8005c28:	08011820 	.word	0x08011820
 8005c2c:	08011810 	.word	0x08011810
 8005c30:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8005c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8005c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c42:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8005c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c48:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	bf28      	it	cs
 8005c50:	4613      	movcs	r3, r2
 8005c52:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8005c54:	8a7b      	ldrh	r3, [r7, #18]
 8005c56:	085b      	lsrs	r3, r3, #1
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c62:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8005c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c6a:	005b      	lsls	r3, r3, #1
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d206      	bcs.n	8005c80 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8005c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c76:	005b      	lsls	r3, r3, #1
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8005c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c82:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8005c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c86:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8005c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8005c92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c94:	f004 f818 	bl	8009cc8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8005c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9a:	7d1b      	ldrb	r3, [r3, #20]
 8005c9c:	2b06      	cmp	r3, #6
 8005c9e:	d111      	bne.n	8005cc4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8005ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca2:	8b5b      	ldrh	r3, [r3, #26]
 8005ca4:	f003 0310 	and.w	r3, r3, #16
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00b      	beq.n	8005cc4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005cac:	4b9d      	ldr	r3, [pc, #628]	; (8005f24 <tcp_slowtmr+0x584>)
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	2b28      	cmp	r3, #40	; 0x28
 8005cb8:	d904      	bls.n	8005cc4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8005cba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc6:	7a5b      	ldrb	r3, [r3, #9]
 8005cc8:	f003 0308 	and.w	r3, r3, #8
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d04c      	beq.n	8005d6a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8005cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005cd4:	2b04      	cmp	r3, #4
 8005cd6:	d003      	beq.n	8005ce0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8005cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cda:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8005cdc:	2b07      	cmp	r3, #7
 8005cde:	d144      	bne.n	8005d6a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005ce0:	4b90      	ldr	r3, [pc, #576]	; (8005f24 <tcp_slowtmr+0x584>)
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8005cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cf0:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8005cf4:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8005cf8:	498b      	ldr	r1, [pc, #556]	; (8005f28 <tcp_slowtmr+0x588>)
 8005cfa:	fba1 1303 	umull	r1, r3, r1, r3
 8005cfe:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d90a      	bls.n	8005d1a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8005d04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d08:	3301      	adds	r3, #1
 8005d0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8005d0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005d12:	3301      	adds	r3, #1
 8005d14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005d18:	e027      	b.n	8005d6a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005d1a:	4b82      	ldr	r3, [pc, #520]	; (8005f24 <tcp_slowtmr+0x584>)
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8005d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d26:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8005d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8005d30:	4618      	mov	r0, r3
 8005d32:	4b7e      	ldr	r3, [pc, #504]	; (8005f2c <tcp_slowtmr+0x58c>)
 8005d34:	fb03 f300 	mul.w	r3, r3, r0
 8005d38:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8005d3a:	497b      	ldr	r1, [pc, #492]	; (8005f28 <tcp_slowtmr+0x588>)
 8005d3c:	fba1 1303 	umull	r1, r3, r1, r3
 8005d40:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d911      	bls.n	8005d6a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8005d46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d48:	f004 fac4 	bl	800a2d4 <tcp_keepalive>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8005d52:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d107      	bne.n	8005d6a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8005d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8005d60:	3301      	adds	r3, #1
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d66:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8005d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d011      	beq.n	8005d96 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8005d72:	4b6c      	ldr	r3, [pc, #432]	; (8005f24 <tcp_slowtmr+0x584>)
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	1ad2      	subs	r2, r2, r3
 8005d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005d82:	4619      	mov	r1, r3
 8005d84:	460b      	mov	r3, r1
 8005d86:	005b      	lsls	r3, r3, #1
 8005d88:	440b      	add	r3, r1
 8005d8a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d302      	bcc.n	8005d96 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8005d90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d92:	f000 fddb 	bl	800694c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8005d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d98:	7d1b      	ldrb	r3, [r3, #20]
 8005d9a:	2b03      	cmp	r3, #3
 8005d9c:	d10b      	bne.n	8005db6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005d9e:	4b61      	ldr	r3, [pc, #388]	; (8005f24 <tcp_slowtmr+0x584>)
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	2b28      	cmp	r3, #40	; 0x28
 8005daa:	d904      	bls.n	8005db6 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8005dac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005db0:	3301      	adds	r3, #1
 8005db2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8005db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db8:	7d1b      	ldrb	r3, [r3, #20]
 8005dba:	2b09      	cmp	r3, #9
 8005dbc:	d10b      	bne.n	8005dd6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005dbe:	4b59      	ldr	r3, [pc, #356]	; (8005f24 <tcp_slowtmr+0x584>)
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	2bf0      	cmp	r3, #240	; 0xf0
 8005dca:	d904      	bls.n	8005dd6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8005dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8005dd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d060      	beq.n	8005ea0 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8005dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8005de6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005de8:	f000 fbfc 	bl	80065e4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8005dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d010      	beq.n	8005e14 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8005df2:	4b4f      	ldr	r3, [pc, #316]	; (8005f30 <tcp_slowtmr+0x590>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d106      	bne.n	8005e0a <tcp_slowtmr+0x46a>
 8005dfc:	4b4d      	ldr	r3, [pc, #308]	; (8005f34 <tcp_slowtmr+0x594>)
 8005dfe:	f240 526d 	movw	r2, #1389	; 0x56d
 8005e02:	494d      	ldr	r1, [pc, #308]	; (8005f38 <tcp_slowtmr+0x598>)
 8005e04:	484d      	ldr	r0, [pc, #308]	; (8005f3c <tcp_slowtmr+0x59c>)
 8005e06:	f007 fde5 	bl	800d9d4 <iprintf>
        prev->next = pcb->next;
 8005e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0c:	68da      	ldr	r2, [r3, #12]
 8005e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e10:	60da      	str	r2, [r3, #12]
 8005e12:	e00f      	b.n	8005e34 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8005e14:	4b46      	ldr	r3, [pc, #280]	; (8005f30 <tcp_slowtmr+0x590>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d006      	beq.n	8005e2c <tcp_slowtmr+0x48c>
 8005e1e:	4b45      	ldr	r3, [pc, #276]	; (8005f34 <tcp_slowtmr+0x594>)
 8005e20:	f240 5271 	movw	r2, #1393	; 0x571
 8005e24:	4946      	ldr	r1, [pc, #280]	; (8005f40 <tcp_slowtmr+0x5a0>)
 8005e26:	4845      	ldr	r0, [pc, #276]	; (8005f3c <tcp_slowtmr+0x59c>)
 8005e28:	f007 fdd4 	bl	800d9d4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8005e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	4a3f      	ldr	r2, [pc, #252]	; (8005f30 <tcp_slowtmr+0x590>)
 8005e32:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8005e34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d013      	beq.n	8005e64 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e42:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005e44:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8005e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e48:	3304      	adds	r3, #4
 8005e4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e4c:	8ad2      	ldrh	r2, [r2, #22]
 8005e4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e50:	8b09      	ldrh	r1, [r1, #24]
 8005e52:	9102      	str	r1, [sp, #8]
 8005e54:	9201      	str	r2, [sp, #4]
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	462b      	mov	r3, r5
 8005e5a:	4622      	mov	r2, r4
 8005e5c:	4601      	mov	r1, r0
 8005e5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e60:	f004 f984 	bl	800a16c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8005e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8005e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6c:	7d1b      	ldrb	r3, [r3, #20]
 8005e6e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8005e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e72:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8005e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8005e7a:	6838      	ldr	r0, [r7, #0]
 8005e7c:	f7ff f9f2 	bl	8005264 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8005e80:	4b30      	ldr	r3, [pc, #192]	; (8005f44 <tcp_slowtmr+0x5a4>)
 8005e82:	2200      	movs	r2, #0
 8005e84:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d004      	beq.n	8005e96 <tcp_slowtmr+0x4f6>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f06f 010c 	mvn.w	r1, #12
 8005e92:	68b8      	ldr	r0, [r7, #8]
 8005e94:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8005e96:	4b2b      	ldr	r3, [pc, #172]	; (8005f44 <tcp_slowtmr+0x5a4>)
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d037      	beq.n	8005f0e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8005e9e:	e590      	b.n	80059c2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8005ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8005ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8005eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eac:	7f1b      	ldrb	r3, [r3, #28]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8005eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb8:	7f1a      	ldrb	r2, [r3, #28]
 8005eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ebc:	7f5b      	ldrb	r3, [r3, #29]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d325      	bcc.n	8005f0e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8005ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8005ec8:	4b1e      	ldr	r3, [pc, #120]	; (8005f44 <tcp_slowtmr+0x5a4>)
 8005eca:	2200      	movs	r2, #0
 8005ecc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8005ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00b      	beq.n	8005ef0 <tcp_slowtmr+0x550>
 8005ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ee0:	6912      	ldr	r2, [r2, #16]
 8005ee2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ee4:	4610      	mov	r0, r2
 8005ee6:	4798      	blx	r3
 8005ee8:	4603      	mov	r3, r0
 8005eea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8005eee:	e002      	b.n	8005ef6 <tcp_slowtmr+0x556>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8005ef6:	4b13      	ldr	r3, [pc, #76]	; (8005f44 <tcp_slowtmr+0x5a4>)
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d000      	beq.n	8005f00 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8005efe:	e560      	b.n	80059c2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8005f00:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d102      	bne.n	8005f0e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8005f08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f0a:	f003 fb7b 	bl	8009604 <tcp_output>
  while (pcb != NULL) {
 8005f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f47f ad5c 	bne.w	80059ce <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8005f16:	2300      	movs	r3, #0
 8005f18:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8005f1a:	4b0b      	ldr	r3, [pc, #44]	; (8005f48 <tcp_slowtmr+0x5a8>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8005f20:	e067      	b.n	8005ff2 <tcp_slowtmr+0x652>
 8005f22:	bf00      	nop
 8005f24:	20008a60 	.word	0x20008a60
 8005f28:	10624dd3 	.word	0x10624dd3
 8005f2c:	000124f8 	.word	0x000124f8
 8005f30:	20008a5c 	.word	0x20008a5c
 8005f34:	0800f85c 	.word	0x0800f85c
 8005f38:	0800fc94 	.word	0x0800fc94
 8005f3c:	0800f8a0 	.word	0x0800f8a0
 8005f40:	0800fcc0 	.word	0x0800fcc0
 8005f44:	20008a58 	.word	0x20008a58
 8005f48:	20008a6c 	.word	0x20008a6c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8005f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4e:	7d1b      	ldrb	r3, [r3, #20]
 8005f50:	2b0a      	cmp	r3, #10
 8005f52:	d006      	beq.n	8005f62 <tcp_slowtmr+0x5c2>
 8005f54:	4b2b      	ldr	r3, [pc, #172]	; (8006004 <tcp_slowtmr+0x664>)
 8005f56:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8005f5a:	492b      	ldr	r1, [pc, #172]	; (8006008 <tcp_slowtmr+0x668>)
 8005f5c:	482b      	ldr	r0, [pc, #172]	; (800600c <tcp_slowtmr+0x66c>)
 8005f5e:	f007 fd39 	bl	800d9d4 <iprintf>
    pcb_remove = 0;
 8005f62:	2300      	movs	r3, #0
 8005f64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005f68:	4b29      	ldr	r3, [pc, #164]	; (8006010 <tcp_slowtmr+0x670>)
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6e:	6a1b      	ldr	r3, [r3, #32]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	2bf0      	cmp	r3, #240	; 0xf0
 8005f74:	d904      	bls.n	8005f80 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8005f76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8005f80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d02f      	beq.n	8005fe8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8005f88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f8a:	f000 fb2b 	bl	80065e4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8005f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d010      	beq.n	8005fb6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8005f94:	4b1f      	ldr	r3, [pc, #124]	; (8006014 <tcp_slowtmr+0x674>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d106      	bne.n	8005fac <tcp_slowtmr+0x60c>
 8005f9e:	4b19      	ldr	r3, [pc, #100]	; (8006004 <tcp_slowtmr+0x664>)
 8005fa0:	f240 52af 	movw	r2, #1455	; 0x5af
 8005fa4:	491c      	ldr	r1, [pc, #112]	; (8006018 <tcp_slowtmr+0x678>)
 8005fa6:	4819      	ldr	r0, [pc, #100]	; (800600c <tcp_slowtmr+0x66c>)
 8005fa8:	f007 fd14 	bl	800d9d4 <iprintf>
        prev->next = pcb->next;
 8005fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fae:	68da      	ldr	r2, [r3, #12]
 8005fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb2:	60da      	str	r2, [r3, #12]
 8005fb4:	e00f      	b.n	8005fd6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8005fb6:	4b17      	ldr	r3, [pc, #92]	; (8006014 <tcp_slowtmr+0x674>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d006      	beq.n	8005fce <tcp_slowtmr+0x62e>
 8005fc0:	4b10      	ldr	r3, [pc, #64]	; (8006004 <tcp_slowtmr+0x664>)
 8005fc2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8005fc6:	4915      	ldr	r1, [pc, #84]	; (800601c <tcp_slowtmr+0x67c>)
 8005fc8:	4810      	ldr	r0, [pc, #64]	; (800600c <tcp_slowtmr+0x66c>)
 8005fca:	f007 fd03 	bl	800d9d4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8005fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	4a10      	ldr	r2, [pc, #64]	; (8006014 <tcp_slowtmr+0x674>)
 8005fd4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8005fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8005fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8005fe0:	69f8      	ldr	r0, [r7, #28]
 8005fe2:	f7ff f93f 	bl	8005264 <tcp_free>
 8005fe6:	e004      	b.n	8005ff2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8005fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fea:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8005fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8005ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1a9      	bne.n	8005f4c <tcp_slowtmr+0x5ac>
    }
  }
}
 8005ff8:	bf00      	nop
 8005ffa:	bf00      	nop
 8005ffc:	3730      	adds	r7, #48	; 0x30
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bdb0      	pop	{r4, r5, r7, pc}
 8006002:	bf00      	nop
 8006004:	0800f85c 	.word	0x0800f85c
 8006008:	0800fcec 	.word	0x0800fcec
 800600c:	0800f8a0 	.word	0x0800f8a0
 8006010:	20008a60 	.word	0x20008a60
 8006014:	20008a6c 	.word	0x20008a6c
 8006018:	0800fd1c 	.word	0x0800fd1c
 800601c:	0800fd44 	.word	0x0800fd44

08006020 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8006026:	4b2d      	ldr	r3, [pc, #180]	; (80060dc <tcp_fasttmr+0xbc>)
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	3301      	adds	r3, #1
 800602c:	b2da      	uxtb	r2, r3
 800602e:	4b2b      	ldr	r3, [pc, #172]	; (80060dc <tcp_fasttmr+0xbc>)
 8006030:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8006032:	4b2b      	ldr	r3, [pc, #172]	; (80060e0 <tcp_fasttmr+0xc0>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006038:	e048      	b.n	80060cc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	7f9a      	ldrb	r2, [r3, #30]
 800603e:	4b27      	ldr	r3, [pc, #156]	; (80060dc <tcp_fasttmr+0xbc>)
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	429a      	cmp	r2, r3
 8006044:	d03f      	beq.n	80060c6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8006046:	4b25      	ldr	r3, [pc, #148]	; (80060dc <tcp_fasttmr+0xbc>)
 8006048:	781a      	ldrb	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	8b5b      	ldrh	r3, [r3, #26]
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b00      	cmp	r3, #0
 8006058:	d010      	beq.n	800607c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	8b5b      	ldrh	r3, [r3, #26]
 800605e:	f043 0302 	orr.w	r3, r3, #2
 8006062:	b29a      	uxth	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f003 facb 	bl	8009604 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	8b5b      	ldrh	r3, [r3, #26]
 8006072:	f023 0303 	bic.w	r3, r3, #3
 8006076:	b29a      	uxth	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	8b5b      	ldrh	r3, [r3, #26]
 8006080:	f003 0308 	and.w	r3, r3, #8
 8006084:	2b00      	cmp	r3, #0
 8006086:	d009      	beq.n	800609c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	8b5b      	ldrh	r3, [r3, #26]
 800608c:	f023 0308 	bic.w	r3, r3, #8
 8006090:	b29a      	uxth	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7ff fa78 	bl	800558c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00a      	beq.n	80060c0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80060aa:	4b0e      	ldr	r3, [pc, #56]	; (80060e4 <tcp_fasttmr+0xc4>)
 80060ac:	2200      	movs	r2, #0
 80060ae:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f819 	bl	80060e8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80060b6:	4b0b      	ldr	r3, [pc, #44]	; (80060e4 <tcp_fasttmr+0xc4>)
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d000      	beq.n	80060c0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80060be:	e7b8      	b.n	8006032 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	607b      	str	r3, [r7, #4]
 80060c4:	e002      	b.n	80060cc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1b3      	bne.n	800603a <tcp_fasttmr+0x1a>
    }
  }
}
 80060d2:	bf00      	nop
 80060d4:	bf00      	nop
 80060d6:	3708      	adds	r7, #8
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	200000ca 	.word	0x200000ca
 80060e0:	20008a5c 	.word	0x20008a5c
 80060e4:	20008a58 	.word	0x20008a58

080060e8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80060e8:	b590      	push	{r4, r7, lr}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d109      	bne.n	800610a <tcp_process_refused_data+0x22>
 80060f6:	4b37      	ldr	r3, [pc, #220]	; (80061d4 <tcp_process_refused_data+0xec>)
 80060f8:	f240 6209 	movw	r2, #1545	; 0x609
 80060fc:	4936      	ldr	r1, [pc, #216]	; (80061d8 <tcp_process_refused_data+0xf0>)
 80060fe:	4837      	ldr	r0, [pc, #220]	; (80061dc <tcp_process_refused_data+0xf4>)
 8006100:	f007 fc68 	bl	800d9d4 <iprintf>
 8006104:	f06f 030f 	mvn.w	r3, #15
 8006108:	e060      	b.n	80061cc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800610e:	7b5b      	ldrb	r3, [r3, #13]
 8006110:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006116:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00b      	beq.n	8006140 <tcp_process_refused_data+0x58>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6918      	ldr	r0, [r3, #16]
 8006132:	2300      	movs	r3, #0
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	6879      	ldr	r1, [r7, #4]
 8006138:	47a0      	blx	r4
 800613a:	4603      	mov	r3, r0
 800613c:	73fb      	strb	r3, [r7, #15]
 800613e:	e007      	b.n	8006150 <tcp_process_refused_data+0x68>
 8006140:	2300      	movs	r3, #0
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	6879      	ldr	r1, [r7, #4]
 8006146:	2000      	movs	r0, #0
 8006148:	f000 f8a4 	bl	8006294 <tcp_recv_null>
 800614c:	4603      	mov	r3, r0
 800614e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006150:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d12a      	bne.n	80061ae <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8006158:	7bbb      	ldrb	r3, [r7, #14]
 800615a:	f003 0320 	and.w	r3, r3, #32
 800615e:	2b00      	cmp	r3, #0
 8006160:	d033      	beq.n	80061ca <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006166:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800616a:	d005      	beq.n	8006178 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006170:	3301      	adds	r3, #1
 8006172:	b29a      	uxth	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00b      	beq.n	800619a <tcp_process_refused_data+0xb2>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6918      	ldr	r0, [r3, #16]
 800618c:	2300      	movs	r3, #0
 800618e:	2200      	movs	r2, #0
 8006190:	6879      	ldr	r1, [r7, #4]
 8006192:	47a0      	blx	r4
 8006194:	4603      	mov	r3, r0
 8006196:	73fb      	strb	r3, [r7, #15]
 8006198:	e001      	b.n	800619e <tcp_process_refused_data+0xb6>
 800619a:	2300      	movs	r3, #0
 800619c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800619e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061a2:	f113 0f0d 	cmn.w	r3, #13
 80061a6:	d110      	bne.n	80061ca <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80061a8:	f06f 030c 	mvn.w	r3, #12
 80061ac:	e00e      	b.n	80061cc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80061ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061b2:	f113 0f0d 	cmn.w	r3, #13
 80061b6:	d102      	bne.n	80061be <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80061b8:	f06f 030c 	mvn.w	r3, #12
 80061bc:	e006      	b.n	80061cc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80061c4:	f06f 0304 	mvn.w	r3, #4
 80061c8:	e000      	b.n	80061cc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3714      	adds	r7, #20
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd90      	pop	{r4, r7, pc}
 80061d4:	0800f85c 	.word	0x0800f85c
 80061d8:	0800fd6c 	.word	0x0800fd6c
 80061dc:	0800f8a0 	.word	0x0800f8a0

080061e0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80061e8:	e007      	b.n	80061fa <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f80a 	bl	800620a <tcp_seg_free>
    seg = next;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1f4      	bne.n	80061ea <tcp_segs_free+0xa>
  }
}
 8006200:	bf00      	nop
 8006202:	bf00      	nop
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b082      	sub	sp, #8
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00c      	beq.n	8006232 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d004      	beq.n	800622a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	4618      	mov	r0, r3
 8006226:	f7fe fcdb 	bl	8004be0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800622a:	6879      	ldr	r1, [r7, #4]
 800622c:	2003      	movs	r0, #3
 800622e:	f7fd fec5 	bl	8003fbc <memp_free>
  }
}
 8006232:	bf00      	nop
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
	...

0800623c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d106      	bne.n	8006258 <tcp_seg_copy+0x1c>
 800624a:	4b0f      	ldr	r3, [pc, #60]	; (8006288 <tcp_seg_copy+0x4c>)
 800624c:	f240 6282 	movw	r2, #1666	; 0x682
 8006250:	490e      	ldr	r1, [pc, #56]	; (800628c <tcp_seg_copy+0x50>)
 8006252:	480f      	ldr	r0, [pc, #60]	; (8006290 <tcp_seg_copy+0x54>)
 8006254:	f007 fbbe 	bl	800d9d4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006258:	2003      	movs	r0, #3
 800625a:	f7fd fe63 	bl	8003f24 <memp_malloc>
 800625e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d101      	bne.n	800626a <tcp_seg_copy+0x2e>
    return NULL;
 8006266:	2300      	movs	r3, #0
 8006268:	e00a      	b.n	8006280 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800626a:	2210      	movs	r2, #16
 800626c:	6879      	ldr	r1, [r7, #4]
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f007 fb80 	bl	800d974 <memcpy>
  pbuf_ref(cseg->p);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	4618      	mov	r0, r3
 800627a:	f7fe fd51 	bl	8004d20 <pbuf_ref>
  return cseg;
 800627e:	68fb      	ldr	r3, [r7, #12]
}
 8006280:	4618      	mov	r0, r3
 8006282:	3710      	adds	r7, #16
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	0800f85c 	.word	0x0800f85c
 800628c:	0800fdb0 	.word	0x0800fdb0
 8006290:	0800f8a0 	.word	0x0800f8a0

08006294 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
 80062a0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d109      	bne.n	80062bc <tcp_recv_null+0x28>
 80062a8:	4b12      	ldr	r3, [pc, #72]	; (80062f4 <tcp_recv_null+0x60>)
 80062aa:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80062ae:	4912      	ldr	r1, [pc, #72]	; (80062f8 <tcp_recv_null+0x64>)
 80062b0:	4812      	ldr	r0, [pc, #72]	; (80062fc <tcp_recv_null+0x68>)
 80062b2:	f007 fb8f 	bl	800d9d4 <iprintf>
 80062b6:	f06f 030f 	mvn.w	r3, #15
 80062ba:	e016      	b.n	80062ea <tcp_recv_null+0x56>

  if (p != NULL) {
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d009      	beq.n	80062d6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	891b      	ldrh	r3, [r3, #8]
 80062c6:	4619      	mov	r1, r3
 80062c8:	68b8      	ldr	r0, [r7, #8]
 80062ca:	f7ff fb19 	bl	8005900 <tcp_recved>
    pbuf_free(p);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7fe fc86 	bl	8004be0 <pbuf_free>
 80062d4:	e008      	b.n	80062e8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80062d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d104      	bne.n	80062e8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80062de:	68b8      	ldr	r0, [r7, #8]
 80062e0:	f7ff f9be 	bl	8005660 <tcp_close>
 80062e4:	4603      	mov	r3, r0
 80062e6:	e000      	b.n	80062ea <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	0800f85c 	.word	0x0800f85c
 80062f8:	0800fdcc 	.word	0x0800fdcc
 80062fc:	0800f8a0 	.word	0x0800f8a0

08006300 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	4603      	mov	r3, r0
 8006308:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800630a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800630e:	2b00      	cmp	r3, #0
 8006310:	db01      	blt.n	8006316 <tcp_kill_prio+0x16>
 8006312:	79fb      	ldrb	r3, [r7, #7]
 8006314:	e000      	b.n	8006318 <tcp_kill_prio+0x18>
 8006316:	237f      	movs	r3, #127	; 0x7f
 8006318:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800631a:	7afb      	ldrb	r3, [r7, #11]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d034      	beq.n	800638a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8006320:	7afb      	ldrb	r3, [r7, #11]
 8006322:	3b01      	subs	r3, #1
 8006324:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8006326:	2300      	movs	r3, #0
 8006328:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800632a:	2300      	movs	r3, #0
 800632c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800632e:	4b19      	ldr	r3, [pc, #100]	; (8006394 <tcp_kill_prio+0x94>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	617b      	str	r3, [r7, #20]
 8006334:	e01f      	b.n	8006376 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	7d5b      	ldrb	r3, [r3, #21]
 800633a:	7afa      	ldrb	r2, [r7, #11]
 800633c:	429a      	cmp	r2, r3
 800633e:	d80c      	bhi.n	800635a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8006344:	7afa      	ldrb	r2, [r7, #11]
 8006346:	429a      	cmp	r2, r3
 8006348:	d112      	bne.n	8006370 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800634a:	4b13      	ldr	r3, [pc, #76]	; (8006398 <tcp_kill_prio+0x98>)
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	429a      	cmp	r2, r3
 8006358:	d80a      	bhi.n	8006370 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800635a:	4b0f      	ldr	r3, [pc, #60]	; (8006398 <tcp_kill_prio+0x98>)
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	7d5b      	ldrb	r3, [r3, #21]
 800636e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	617b      	str	r3, [r7, #20]
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1dc      	bne.n	8006336 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d004      	beq.n	800638c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006382:	6938      	ldr	r0, [r7, #16]
 8006384:	f7ff fa56 	bl	8005834 <tcp_abort>
 8006388:	e000      	b.n	800638c <tcp_kill_prio+0x8c>
    return;
 800638a:	bf00      	nop
  }
}
 800638c:	3718      	adds	r7, #24
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	20008a5c 	.word	0x20008a5c
 8006398:	20008a60 	.word	0x20008a60

0800639c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	4603      	mov	r3, r0
 80063a4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80063a6:	79fb      	ldrb	r3, [r7, #7]
 80063a8:	2b08      	cmp	r3, #8
 80063aa:	d009      	beq.n	80063c0 <tcp_kill_state+0x24>
 80063ac:	79fb      	ldrb	r3, [r7, #7]
 80063ae:	2b09      	cmp	r3, #9
 80063b0:	d006      	beq.n	80063c0 <tcp_kill_state+0x24>
 80063b2:	4b1a      	ldr	r3, [pc, #104]	; (800641c <tcp_kill_state+0x80>)
 80063b4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80063b8:	4919      	ldr	r1, [pc, #100]	; (8006420 <tcp_kill_state+0x84>)
 80063ba:	481a      	ldr	r0, [pc, #104]	; (8006424 <tcp_kill_state+0x88>)
 80063bc:	f007 fb0a 	bl	800d9d4 <iprintf>

  inactivity = 0;
 80063c0:	2300      	movs	r3, #0
 80063c2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80063c4:	2300      	movs	r3, #0
 80063c6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80063c8:	4b17      	ldr	r3, [pc, #92]	; (8006428 <tcp_kill_state+0x8c>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	617b      	str	r3, [r7, #20]
 80063ce:	e017      	b.n	8006400 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	7d1b      	ldrb	r3, [r3, #20]
 80063d4:	79fa      	ldrb	r2, [r7, #7]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d10f      	bne.n	80063fa <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80063da:	4b14      	ldr	r3, [pc, #80]	; (800642c <tcp_kill_state+0x90>)
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d807      	bhi.n	80063fa <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80063ea:	4b10      	ldr	r3, [pc, #64]	; (800642c <tcp_kill_state+0x90>)
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	6a1b      	ldr	r3, [r3, #32]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	617b      	str	r3, [r7, #20]
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1e4      	bne.n	80063d0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d003      	beq.n	8006414 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800640c:	2100      	movs	r1, #0
 800640e:	6938      	ldr	r0, [r7, #16]
 8006410:	f7ff f952 	bl	80056b8 <tcp_abandon>
  }
}
 8006414:	bf00      	nop
 8006416:	3718      	adds	r7, #24
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	0800f85c 	.word	0x0800f85c
 8006420:	0800fde8 	.word	0x0800fde8
 8006424:	0800f8a0 	.word	0x0800f8a0
 8006428:	20008a5c 	.word	0x20008a5c
 800642c:	20008a60 	.word	0x20008a60

08006430 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006436:	2300      	movs	r3, #0
 8006438:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800643a:	2300      	movs	r3, #0
 800643c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800643e:	4b12      	ldr	r3, [pc, #72]	; (8006488 <tcp_kill_timewait+0x58>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	60fb      	str	r3, [r7, #12]
 8006444:	e012      	b.n	800646c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006446:	4b11      	ldr	r3, [pc, #68]	; (800648c <tcp_kill_timewait+0x5c>)
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	429a      	cmp	r2, r3
 8006454:	d807      	bhi.n	8006466 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006456:	4b0d      	ldr	r3, [pc, #52]	; (800648c <tcp_kill_timewait+0x5c>)
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	60fb      	str	r3, [r7, #12]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1e9      	bne.n	8006446 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d002      	beq.n	800647e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006478:	68b8      	ldr	r0, [r7, #8]
 800647a:	f7ff f9db 	bl	8005834 <tcp_abort>
  }
}
 800647e:	bf00      	nop
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	20008a6c 	.word	0x20008a6c
 800648c:	20008a60 	.word	0x20008a60

08006490 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8006496:	4b10      	ldr	r3, [pc, #64]	; (80064d8 <tcp_handle_closepend+0x48>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800649c:	e014      	b.n	80064c8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	8b5b      	ldrh	r3, [r3, #26]
 80064a8:	f003 0308 	and.w	r3, r3, #8
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d009      	beq.n	80064c4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	8b5b      	ldrh	r3, [r3, #26]
 80064b4:	f023 0308 	bic.w	r3, r3, #8
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f7ff f864 	bl	800558c <tcp_close_shutdown_fin>
    }
    pcb = next;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1e7      	bne.n	800649e <tcp_handle_closepend+0xe>
  }
}
 80064ce:	bf00      	nop
 80064d0:	bf00      	nop
 80064d2:	3708      	adds	r7, #8
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	20008a5c 	.word	0x20008a5c

080064dc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	4603      	mov	r3, r0
 80064e4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80064e6:	2001      	movs	r0, #1
 80064e8:	f7fd fd1c 	bl	8003f24 <memp_malloc>
 80064ec:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d126      	bne.n	8006542 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80064f4:	f7ff ffcc 	bl	8006490 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80064f8:	f7ff ff9a 	bl	8006430 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80064fc:	2001      	movs	r0, #1
 80064fe:	f7fd fd11 	bl	8003f24 <memp_malloc>
 8006502:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d11b      	bne.n	8006542 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800650a:	2009      	movs	r0, #9
 800650c:	f7ff ff46 	bl	800639c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006510:	2001      	movs	r0, #1
 8006512:	f7fd fd07 	bl	8003f24 <memp_malloc>
 8006516:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d111      	bne.n	8006542 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800651e:	2008      	movs	r0, #8
 8006520:	f7ff ff3c 	bl	800639c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006524:	2001      	movs	r0, #1
 8006526:	f7fd fcfd 	bl	8003f24 <memp_malloc>
 800652a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d107      	bne.n	8006542 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8006532:	79fb      	ldrb	r3, [r7, #7]
 8006534:	4618      	mov	r0, r3
 8006536:	f7ff fee3 	bl	8006300 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800653a:	2001      	movs	r0, #1
 800653c:	f7fd fcf2 	bl	8003f24 <memp_malloc>
 8006540:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d03f      	beq.n	80065c8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006548:	229c      	movs	r2, #156	; 0x9c
 800654a:	2100      	movs	r1, #0
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f007 fa39 	bl	800d9c4 <memset>
    pcb->prio = prio;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	79fa      	ldrb	r2, [r7, #7]
 8006556:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800655e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006568:	855a      	strh	r2, [r3, #42]	; 0x2a
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	22ff      	movs	r2, #255	; 0xff
 8006576:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800657e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2206      	movs	r2, #6
 8006584:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2206      	movs	r2, #6
 800658c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006594:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2201      	movs	r2, #1
 800659a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800659e:	4b0d      	ldr	r3, [pc, #52]	; (80065d4 <tcp_alloc+0xf8>)
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80065a6:	4b0c      	ldr	r3, [pc, #48]	; (80065d8 <tcp_alloc+0xfc>)
 80065a8:	781a      	ldrb	r2, [r3, #0]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80065b4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	4a08      	ldr	r2, [pc, #32]	; (80065dc <tcp_alloc+0x100>)
 80065bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	4a07      	ldr	r2, [pc, #28]	; (80065e0 <tcp_alloc+0x104>)
 80065c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80065c8:	68fb      	ldr	r3, [r7, #12]
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	20008a60 	.word	0x20008a60
 80065d8:	200000ca 	.word	0x200000ca
 80065dc:	08006295 	.word	0x08006295
 80065e0:	006ddd00 	.word	0x006ddd00

080065e4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d107      	bne.n	8006602 <tcp_pcb_purge+0x1e>
 80065f2:	4b21      	ldr	r3, [pc, #132]	; (8006678 <tcp_pcb_purge+0x94>)
 80065f4:	f640 0251 	movw	r2, #2129	; 0x851
 80065f8:	4920      	ldr	r1, [pc, #128]	; (800667c <tcp_pcb_purge+0x98>)
 80065fa:	4821      	ldr	r0, [pc, #132]	; (8006680 <tcp_pcb_purge+0x9c>)
 80065fc:	f007 f9ea 	bl	800d9d4 <iprintf>
 8006600:	e037      	b.n	8006672 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	7d1b      	ldrb	r3, [r3, #20]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d033      	beq.n	8006672 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800660e:	2b0a      	cmp	r3, #10
 8006610:	d02f      	beq.n	8006672 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8006616:	2b01      	cmp	r3, #1
 8006618:	d02b      	beq.n	8006672 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800661e:	2b00      	cmp	r3, #0
 8006620:	d007      	beq.n	8006632 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006626:	4618      	mov	r0, r3
 8006628:	f7fe fada 	bl	8004be0 <pbuf_free>
      pcb->refused_data = NULL;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006636:	2b00      	cmp	r3, #0
 8006638:	d002      	beq.n	8006640 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f986 	bl	800694c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006646:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800664c:	4618      	mov	r0, r3
 800664e:	f7ff fdc7 	bl	80061e0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006656:	4618      	mov	r0, r3
 8006658:	f7ff fdc2 	bl	80061e0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	66da      	str	r2, [r3, #108]	; 0x6c
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	0800f85c 	.word	0x0800f85c
 800667c:	0800fea8 	.word	0x0800fea8
 8006680:	0800f8a0 	.word	0x0800f8a0

08006684 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d106      	bne.n	80066a2 <tcp_pcb_remove+0x1e>
 8006694:	4b3e      	ldr	r3, [pc, #248]	; (8006790 <tcp_pcb_remove+0x10c>)
 8006696:	f640 0283 	movw	r2, #2179	; 0x883
 800669a:	493e      	ldr	r1, [pc, #248]	; (8006794 <tcp_pcb_remove+0x110>)
 800669c:	483e      	ldr	r0, [pc, #248]	; (8006798 <tcp_pcb_remove+0x114>)
 800669e:	f007 f999 	bl	800d9d4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d106      	bne.n	80066b6 <tcp_pcb_remove+0x32>
 80066a8:	4b39      	ldr	r3, [pc, #228]	; (8006790 <tcp_pcb_remove+0x10c>)
 80066aa:	f640 0284 	movw	r2, #2180	; 0x884
 80066ae:	493b      	ldr	r1, [pc, #236]	; (800679c <tcp_pcb_remove+0x118>)
 80066b0:	4839      	ldr	r0, [pc, #228]	; (8006798 <tcp_pcb_remove+0x114>)
 80066b2:	f007 f98f 	bl	800d9d4 <iprintf>

  TCP_RMV(pcblist, pcb);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	683a      	ldr	r2, [r7, #0]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d105      	bne.n	80066cc <tcp_pcb_remove+0x48>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68da      	ldr	r2, [r3, #12]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	601a      	str	r2, [r3, #0]
 80066ca:	e013      	b.n	80066f4 <tcp_pcb_remove+0x70>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	60fb      	str	r3, [r7, #12]
 80066d2:	e00c      	b.n	80066ee <tcp_pcb_remove+0x6a>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d104      	bne.n	80066e8 <tcp_pcb_remove+0x64>
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	68da      	ldr	r2, [r3, #12]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	60da      	str	r2, [r3, #12]
 80066e6:	e005      	b.n	80066f4 <tcp_pcb_remove+0x70>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	60fb      	str	r3, [r7, #12]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1ef      	bne.n	80066d4 <tcp_pcb_remove+0x50>
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	2200      	movs	r2, #0
 80066f8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80066fa:	6838      	ldr	r0, [r7, #0]
 80066fc:	f7ff ff72 	bl	80065e4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	7d1b      	ldrb	r3, [r3, #20]
 8006704:	2b0a      	cmp	r3, #10
 8006706:	d013      	beq.n	8006730 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800670c:	2b01      	cmp	r3, #1
 800670e:	d00f      	beq.n	8006730 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	8b5b      	ldrh	r3, [r3, #26]
 8006714:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8006718:	2b00      	cmp	r3, #0
 800671a:	d009      	beq.n	8006730 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	8b5b      	ldrh	r3, [r3, #26]
 8006720:	f043 0302 	orr.w	r3, r3, #2
 8006724:	b29a      	uxth	r2, r3
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800672a:	6838      	ldr	r0, [r7, #0]
 800672c:	f002 ff6a 	bl	8009604 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	7d1b      	ldrb	r3, [r3, #20]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d020      	beq.n	800677a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800673c:	2b00      	cmp	r3, #0
 800673e:	d006      	beq.n	800674e <tcp_pcb_remove+0xca>
 8006740:	4b13      	ldr	r3, [pc, #76]	; (8006790 <tcp_pcb_remove+0x10c>)
 8006742:	f640 0293 	movw	r2, #2195	; 0x893
 8006746:	4916      	ldr	r1, [pc, #88]	; (80067a0 <tcp_pcb_remove+0x11c>)
 8006748:	4813      	ldr	r0, [pc, #76]	; (8006798 <tcp_pcb_remove+0x114>)
 800674a:	f007 f943 	bl	800d9d4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006752:	2b00      	cmp	r3, #0
 8006754:	d006      	beq.n	8006764 <tcp_pcb_remove+0xe0>
 8006756:	4b0e      	ldr	r3, [pc, #56]	; (8006790 <tcp_pcb_remove+0x10c>)
 8006758:	f640 0294 	movw	r2, #2196	; 0x894
 800675c:	4911      	ldr	r1, [pc, #68]	; (80067a4 <tcp_pcb_remove+0x120>)
 800675e:	480e      	ldr	r0, [pc, #56]	; (8006798 <tcp_pcb_remove+0x114>)
 8006760:	f007 f938 	bl	800d9d4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006768:	2b00      	cmp	r3, #0
 800676a:	d006      	beq.n	800677a <tcp_pcb_remove+0xf6>
 800676c:	4b08      	ldr	r3, [pc, #32]	; (8006790 <tcp_pcb_remove+0x10c>)
 800676e:	f640 0296 	movw	r2, #2198	; 0x896
 8006772:	490d      	ldr	r1, [pc, #52]	; (80067a8 <tcp_pcb_remove+0x124>)
 8006774:	4808      	ldr	r0, [pc, #32]	; (8006798 <tcp_pcb_remove+0x114>)
 8006776:	f007 f92d 	bl	800d9d4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2200      	movs	r2, #0
 800677e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	2200      	movs	r2, #0
 8006784:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8006786:	bf00      	nop
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	0800f85c 	.word	0x0800f85c
 8006794:	0800fec4 	.word	0x0800fec4
 8006798:	0800f8a0 	.word	0x0800f8a0
 800679c:	0800fee0 	.word	0x0800fee0
 80067a0:	0800ff00 	.word	0x0800ff00
 80067a4:	0800ff18 	.word	0x0800ff18
 80067a8:	0800ff34 	.word	0x0800ff34

080067ac <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d106      	bne.n	80067c8 <tcp_next_iss+0x1c>
 80067ba:	4b0a      	ldr	r3, [pc, #40]	; (80067e4 <tcp_next_iss+0x38>)
 80067bc:	f640 02af 	movw	r2, #2223	; 0x8af
 80067c0:	4909      	ldr	r1, [pc, #36]	; (80067e8 <tcp_next_iss+0x3c>)
 80067c2:	480a      	ldr	r0, [pc, #40]	; (80067ec <tcp_next_iss+0x40>)
 80067c4:	f007 f906 	bl	800d9d4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80067c8:	4b09      	ldr	r3, [pc, #36]	; (80067f0 <tcp_next_iss+0x44>)
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	4b09      	ldr	r3, [pc, #36]	; (80067f4 <tcp_next_iss+0x48>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4413      	add	r3, r2
 80067d2:	4a07      	ldr	r2, [pc, #28]	; (80067f0 <tcp_next_iss+0x44>)
 80067d4:	6013      	str	r3, [r2, #0]
  return iss;
 80067d6:	4b06      	ldr	r3, [pc, #24]	; (80067f0 <tcp_next_iss+0x44>)
 80067d8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	0800f85c 	.word	0x0800f85c
 80067e8:	0800ff4c 	.word	0x0800ff4c
 80067ec:	0800f8a0 	.word	0x0800f8a0
 80067f0:	2000000c 	.word	0x2000000c
 80067f4:	20008a60 	.word	0x20008a60

080067f8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	4603      	mov	r3, r0
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
 8006804:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d106      	bne.n	800681a <tcp_eff_send_mss_netif+0x22>
 800680c:	4b14      	ldr	r3, [pc, #80]	; (8006860 <tcp_eff_send_mss_netif+0x68>)
 800680e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8006812:	4914      	ldr	r1, [pc, #80]	; (8006864 <tcp_eff_send_mss_netif+0x6c>)
 8006814:	4814      	ldr	r0, [pc, #80]	; (8006868 <tcp_eff_send_mss_netif+0x70>)
 8006816:	f007 f8dd 	bl	800d9d4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8006820:	89fb      	ldrh	r3, [r7, #14]
 8006822:	e019      	b.n	8006858 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006828:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800682a:	8afb      	ldrh	r3, [r7, #22]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d012      	beq.n	8006856 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8006830:	2328      	movs	r3, #40	; 0x28
 8006832:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8006834:	8afa      	ldrh	r2, [r7, #22]
 8006836:	8abb      	ldrh	r3, [r7, #20]
 8006838:	429a      	cmp	r2, r3
 800683a:	d904      	bls.n	8006846 <tcp_eff_send_mss_netif+0x4e>
 800683c:	8afa      	ldrh	r2, [r7, #22]
 800683e:	8abb      	ldrh	r3, [r7, #20]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	b29b      	uxth	r3, r3
 8006844:	e000      	b.n	8006848 <tcp_eff_send_mss_netif+0x50>
 8006846:	2300      	movs	r3, #0
 8006848:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800684a:	8a7a      	ldrh	r2, [r7, #18]
 800684c:	89fb      	ldrh	r3, [r7, #14]
 800684e:	4293      	cmp	r3, r2
 8006850:	bf28      	it	cs
 8006852:	4613      	movcs	r3, r2
 8006854:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8006856:	89fb      	ldrh	r3, [r7, #14]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3718      	adds	r7, #24
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	0800f85c 	.word	0x0800f85c
 8006864:	0800ff68 	.word	0x0800ff68
 8006868:	0800f8a0 	.word	0x0800f8a0

0800686c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d119      	bne.n	80068b4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8006880:	4b10      	ldr	r3, [pc, #64]	; (80068c4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8006882:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8006886:	4910      	ldr	r1, [pc, #64]	; (80068c8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8006888:	4810      	ldr	r0, [pc, #64]	; (80068cc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800688a:	f007 f8a3 	bl	800d9d4 <iprintf>

  while (pcb != NULL) {
 800688e:	e011      	b.n	80068b4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	429a      	cmp	r2, r3
 800689a:	d108      	bne.n	80068ae <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f7fe ffc6 	bl	8005834 <tcp_abort>
      pcb = next;
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	60fb      	str	r3, [r7, #12]
 80068ac:	e002      	b.n	80068b4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1ea      	bne.n	8006890 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80068ba:	bf00      	nop
 80068bc:	bf00      	nop
 80068be:	3710      	adds	r7, #16
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	0800f85c 	.word	0x0800f85c
 80068c8:	0800ff90 	.word	0x0800ff90
 80068cc:	0800f8a0 	.word	0x0800f8a0

080068d0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d02a      	beq.n	8006936 <tcp_netif_ip_addr_changed+0x66>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d026      	beq.n	8006936 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80068e8:	4b15      	ldr	r3, [pc, #84]	; (8006940 <tcp_netif_ip_addr_changed+0x70>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4619      	mov	r1, r3
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f7ff ffbc 	bl	800686c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80068f4:	4b13      	ldr	r3, [pc, #76]	; (8006944 <tcp_netif_ip_addr_changed+0x74>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4619      	mov	r1, r3
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7ff ffb6 	bl	800686c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d017      	beq.n	8006936 <tcp_netif_ip_addr_changed+0x66>
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d013      	beq.n	8006936 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800690e:	4b0e      	ldr	r3, [pc, #56]	; (8006948 <tcp_netif_ip_addr_changed+0x78>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	60fb      	str	r3, [r7, #12]
 8006914:	e00c      	b.n	8006930 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	429a      	cmp	r2, r3
 8006920:	d103      	bne.n	800692a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	60fb      	str	r3, [r7, #12]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1ef      	bne.n	8006916 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8006936:	bf00      	nop
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	20008a5c 	.word	0x20008a5c
 8006944:	20008a68 	.word	0x20008a68
 8006948:	20008a64 	.word	0x20008a64

0800694c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006958:	2b00      	cmp	r3, #0
 800695a:	d007      	beq.n	800696c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006960:	4618      	mov	r0, r3
 8006962:	f7ff fc3d 	bl	80061e0 <tcp_segs_free>
    pcb->ooseq = NULL;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800696c:	bf00      	nop
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8006974:	b590      	push	{r4, r7, lr}
 8006976:	b08d      	sub	sp, #52	; 0x34
 8006978:	af04      	add	r7, sp, #16
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d105      	bne.n	8006990 <tcp_input+0x1c>
 8006984:	4b9b      	ldr	r3, [pc, #620]	; (8006bf4 <tcp_input+0x280>)
 8006986:	2283      	movs	r2, #131	; 0x83
 8006988:	499b      	ldr	r1, [pc, #620]	; (8006bf8 <tcp_input+0x284>)
 800698a:	489c      	ldr	r0, [pc, #624]	; (8006bfc <tcp_input+0x288>)
 800698c:	f007 f822 	bl	800d9d4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	4a9a      	ldr	r2, [pc, #616]	; (8006c00 <tcp_input+0x28c>)
 8006996:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	895b      	ldrh	r3, [r3, #10]
 800699c:	2b13      	cmp	r3, #19
 800699e:	f240 83c4 	bls.w	800712a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80069a2:	4b98      	ldr	r3, [pc, #608]	; (8006c04 <tcp_input+0x290>)
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	4a97      	ldr	r2, [pc, #604]	; (8006c04 <tcp_input+0x290>)
 80069a8:	6812      	ldr	r2, [r2, #0]
 80069aa:	4611      	mov	r1, r2
 80069ac:	4618      	mov	r0, r3
 80069ae:	f005 ffcd 	bl	800c94c <ip4_addr_isbroadcast_u32>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f040 83ba 	bne.w	800712e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80069ba:	4b92      	ldr	r3, [pc, #584]	; (8006c04 <tcp_input+0x290>)
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80069c2:	2be0      	cmp	r3, #224	; 0xe0
 80069c4:	f000 83b3 	beq.w	800712e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80069c8:	4b8d      	ldr	r3, [pc, #564]	; (8006c00 <tcp_input+0x28c>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	899b      	ldrh	r3, [r3, #12]
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fc fe51 	bl	8003678 <lwip_htons>
 80069d6:	4603      	mov	r3, r0
 80069d8:	0b1b      	lsrs	r3, r3, #12
 80069da:	b29b      	uxth	r3, r3
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80069e2:	7cbb      	ldrb	r3, [r7, #18]
 80069e4:	2b13      	cmp	r3, #19
 80069e6:	f240 83a4 	bls.w	8007132 <tcp_input+0x7be>
 80069ea:	7cbb      	ldrb	r3, [r7, #18]
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	891b      	ldrh	r3, [r3, #8]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	f200 839d 	bhi.w	8007132 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80069f8:	7cbb      	ldrb	r3, [r7, #18]
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	3b14      	subs	r3, #20
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	4b81      	ldr	r3, [pc, #516]	; (8006c08 <tcp_input+0x294>)
 8006a02:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8006a04:	4b81      	ldr	r3, [pc, #516]	; (8006c0c <tcp_input+0x298>)
 8006a06:	2200      	movs	r2, #0
 8006a08:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	895a      	ldrh	r2, [r3, #10]
 8006a0e:	7cbb      	ldrb	r3, [r7, #18]
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d309      	bcc.n	8006a2a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8006a16:	4b7c      	ldr	r3, [pc, #496]	; (8006c08 <tcp_input+0x294>)
 8006a18:	881a      	ldrh	r2, [r3, #0]
 8006a1a:	4b7d      	ldr	r3, [pc, #500]	; (8006c10 <tcp_input+0x29c>)
 8006a1c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8006a1e:	7cbb      	ldrb	r3, [r7, #18]
 8006a20:	4619      	mov	r1, r3
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7fe f856 	bl	8004ad4 <pbuf_remove_header>
 8006a28:	e04e      	b.n	8006ac8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d105      	bne.n	8006a3e <tcp_input+0xca>
 8006a32:	4b70      	ldr	r3, [pc, #448]	; (8006bf4 <tcp_input+0x280>)
 8006a34:	22c2      	movs	r2, #194	; 0xc2
 8006a36:	4977      	ldr	r1, [pc, #476]	; (8006c14 <tcp_input+0x2a0>)
 8006a38:	4870      	ldr	r0, [pc, #448]	; (8006bfc <tcp_input+0x288>)
 8006a3a:	f006 ffcb 	bl	800d9d4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8006a3e:	2114      	movs	r1, #20
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f7fe f847 	bl	8004ad4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	895a      	ldrh	r2, [r3, #10]
 8006a4a:	4b71      	ldr	r3, [pc, #452]	; (8006c10 <tcp_input+0x29c>)
 8006a4c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8006a4e:	4b6e      	ldr	r3, [pc, #440]	; (8006c08 <tcp_input+0x294>)
 8006a50:	881a      	ldrh	r2, [r3, #0]
 8006a52:	4b6f      	ldr	r3, [pc, #444]	; (8006c10 <tcp_input+0x29c>)
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8006a5a:	4b6d      	ldr	r3, [pc, #436]	; (8006c10 <tcp_input+0x29c>)
 8006a5c:	881b      	ldrh	r3, [r3, #0]
 8006a5e:	4619      	mov	r1, r3
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f7fe f837 	bl	8004ad4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	895b      	ldrh	r3, [r3, #10]
 8006a6c:	8a3a      	ldrh	r2, [r7, #16]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	f200 8361 	bhi.w	8007136 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	4a64      	ldr	r2, [pc, #400]	; (8006c0c <tcp_input+0x298>)
 8006a7c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	8a3a      	ldrh	r2, [r7, #16]
 8006a84:	4611      	mov	r1, r2
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7fe f824 	bl	8004ad4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	891a      	ldrh	r2, [r3, #8]
 8006a90:	8a3b      	ldrh	r3, [r7, #16]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	895b      	ldrh	r3, [r3, #10]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d005      	beq.n	8006aae <tcp_input+0x13a>
 8006aa2:	4b54      	ldr	r3, [pc, #336]	; (8006bf4 <tcp_input+0x280>)
 8006aa4:	22df      	movs	r2, #223	; 0xdf
 8006aa6:	495c      	ldr	r1, [pc, #368]	; (8006c18 <tcp_input+0x2a4>)
 8006aa8:	4854      	ldr	r0, [pc, #336]	; (8006bfc <tcp_input+0x288>)
 8006aaa:	f006 ff93 	bl	800d9d4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	891a      	ldrh	r2, [r3, #8]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	891b      	ldrh	r3, [r3, #8]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d005      	beq.n	8006ac8 <tcp_input+0x154>
 8006abc:	4b4d      	ldr	r3, [pc, #308]	; (8006bf4 <tcp_input+0x280>)
 8006abe:	22e0      	movs	r2, #224	; 0xe0
 8006ac0:	4956      	ldr	r1, [pc, #344]	; (8006c1c <tcp_input+0x2a8>)
 8006ac2:	484e      	ldr	r0, [pc, #312]	; (8006bfc <tcp_input+0x288>)
 8006ac4:	f006 ff86 	bl	800d9d4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8006ac8:	4b4d      	ldr	r3, [pc, #308]	; (8006c00 <tcp_input+0x28c>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	881b      	ldrh	r3, [r3, #0]
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	4a4b      	ldr	r2, [pc, #300]	; (8006c00 <tcp_input+0x28c>)
 8006ad2:	6814      	ldr	r4, [r2, #0]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7fc fdcf 	bl	8003678 <lwip_htons>
 8006ada:	4603      	mov	r3, r0
 8006adc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8006ade:	4b48      	ldr	r3, [pc, #288]	; (8006c00 <tcp_input+0x28c>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	885b      	ldrh	r3, [r3, #2]
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	4a46      	ldr	r2, [pc, #280]	; (8006c00 <tcp_input+0x28c>)
 8006ae8:	6814      	ldr	r4, [r2, #0]
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fc fdc4 	bl	8003678 <lwip_htons>
 8006af0:	4603      	mov	r3, r0
 8006af2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8006af4:	4b42      	ldr	r3, [pc, #264]	; (8006c00 <tcp_input+0x28c>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	4a41      	ldr	r2, [pc, #260]	; (8006c00 <tcp_input+0x28c>)
 8006afc:	6814      	ldr	r4, [r2, #0]
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7fc fdcf 	bl	80036a2 <lwip_htonl>
 8006b04:	4603      	mov	r3, r0
 8006b06:	6063      	str	r3, [r4, #4]
 8006b08:	6863      	ldr	r3, [r4, #4]
 8006b0a:	4a45      	ldr	r2, [pc, #276]	; (8006c20 <tcp_input+0x2ac>)
 8006b0c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8006b0e:	4b3c      	ldr	r3, [pc, #240]	; (8006c00 <tcp_input+0x28c>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	4a3a      	ldr	r2, [pc, #232]	; (8006c00 <tcp_input+0x28c>)
 8006b16:	6814      	ldr	r4, [r2, #0]
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7fc fdc2 	bl	80036a2 <lwip_htonl>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	60a3      	str	r3, [r4, #8]
 8006b22:	68a3      	ldr	r3, [r4, #8]
 8006b24:	4a3f      	ldr	r2, [pc, #252]	; (8006c24 <tcp_input+0x2b0>)
 8006b26:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8006b28:	4b35      	ldr	r3, [pc, #212]	; (8006c00 <tcp_input+0x28c>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	89db      	ldrh	r3, [r3, #14]
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	4a33      	ldr	r2, [pc, #204]	; (8006c00 <tcp_input+0x28c>)
 8006b32:	6814      	ldr	r4, [r2, #0]
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7fc fd9f 	bl	8003678 <lwip_htons>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8006b3e:	4b30      	ldr	r3, [pc, #192]	; (8006c00 <tcp_input+0x28c>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	899b      	ldrh	r3, [r3, #12]
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fc fd96 	bl	8003678 <lwip_htons>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b54:	b2da      	uxtb	r2, r3
 8006b56:	4b34      	ldr	r3, [pc, #208]	; (8006c28 <tcp_input+0x2b4>)
 8006b58:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	891a      	ldrh	r2, [r3, #8]
 8006b5e:	4b33      	ldr	r3, [pc, #204]	; (8006c2c <tcp_input+0x2b8>)
 8006b60:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8006b62:	4b31      	ldr	r3, [pc, #196]	; (8006c28 <tcp_input+0x2b4>)
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	f003 0303 	and.w	r3, r3, #3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00c      	beq.n	8006b88 <tcp_input+0x214>
    tcplen++;
 8006b6e:	4b2f      	ldr	r3, [pc, #188]	; (8006c2c <tcp_input+0x2b8>)
 8006b70:	881b      	ldrh	r3, [r3, #0]
 8006b72:	3301      	adds	r3, #1
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	4b2d      	ldr	r3, [pc, #180]	; (8006c2c <tcp_input+0x2b8>)
 8006b78:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	891a      	ldrh	r2, [r3, #8]
 8006b7e:	4b2b      	ldr	r3, [pc, #172]	; (8006c2c <tcp_input+0x2b8>)
 8006b80:	881b      	ldrh	r3, [r3, #0]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	f200 82d9 	bhi.w	800713a <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006b8c:	4b28      	ldr	r3, [pc, #160]	; (8006c30 <tcp_input+0x2bc>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	61fb      	str	r3, [r7, #28]
 8006b92:	e09d      	b.n	8006cd0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	7d1b      	ldrb	r3, [r3, #20]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d105      	bne.n	8006ba8 <tcp_input+0x234>
 8006b9c:	4b15      	ldr	r3, [pc, #84]	; (8006bf4 <tcp_input+0x280>)
 8006b9e:	22fb      	movs	r2, #251	; 0xfb
 8006ba0:	4924      	ldr	r1, [pc, #144]	; (8006c34 <tcp_input+0x2c0>)
 8006ba2:	4816      	ldr	r0, [pc, #88]	; (8006bfc <tcp_input+0x288>)
 8006ba4:	f006 ff16 	bl	800d9d4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	7d1b      	ldrb	r3, [r3, #20]
 8006bac:	2b0a      	cmp	r3, #10
 8006bae:	d105      	bne.n	8006bbc <tcp_input+0x248>
 8006bb0:	4b10      	ldr	r3, [pc, #64]	; (8006bf4 <tcp_input+0x280>)
 8006bb2:	22fc      	movs	r2, #252	; 0xfc
 8006bb4:	4920      	ldr	r1, [pc, #128]	; (8006c38 <tcp_input+0x2c4>)
 8006bb6:	4811      	ldr	r0, [pc, #68]	; (8006bfc <tcp_input+0x288>)
 8006bb8:	f006 ff0c 	bl	800d9d4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	7d1b      	ldrb	r3, [r3, #20]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d105      	bne.n	8006bd0 <tcp_input+0x25c>
 8006bc4:	4b0b      	ldr	r3, [pc, #44]	; (8006bf4 <tcp_input+0x280>)
 8006bc6:	22fd      	movs	r2, #253	; 0xfd
 8006bc8:	491c      	ldr	r1, [pc, #112]	; (8006c3c <tcp_input+0x2c8>)
 8006bca:	480c      	ldr	r0, [pc, #48]	; (8006bfc <tcp_input+0x288>)
 8006bcc:	f006 ff02 	bl	800d9d4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	7a1b      	ldrb	r3, [r3, #8]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d033      	beq.n	8006c40 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	7a1a      	ldrb	r2, [r3, #8]
 8006bdc:	4b09      	ldr	r3, [pc, #36]	; (8006c04 <tcp_input+0x290>)
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006be4:	3301      	adds	r3, #1
 8006be6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d029      	beq.n	8006c40 <tcp_input+0x2cc>
      prev = pcb;
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	61bb      	str	r3, [r7, #24]
      continue;
 8006bf0:	e06b      	b.n	8006cca <tcp_input+0x356>
 8006bf2:	bf00      	nop
 8006bf4:	0800ffc4 	.word	0x0800ffc4
 8006bf8:	0800fff8 	.word	0x0800fff8
 8006bfc:	08010010 	.word	0x08010010
 8006c00:	200000dc 	.word	0x200000dc
 8006c04:	20003358 	.word	0x20003358
 8006c08:	200000e0 	.word	0x200000e0
 8006c0c:	200000e4 	.word	0x200000e4
 8006c10:	200000e2 	.word	0x200000e2
 8006c14:	08010038 	.word	0x08010038
 8006c18:	08010048 	.word	0x08010048
 8006c1c:	08010054 	.word	0x08010054
 8006c20:	200000ec 	.word	0x200000ec
 8006c24:	200000f0 	.word	0x200000f0
 8006c28:	200000f8 	.word	0x200000f8
 8006c2c:	200000f6 	.word	0x200000f6
 8006c30:	20008a5c 	.word	0x20008a5c
 8006c34:	08010074 	.word	0x08010074
 8006c38:	0801009c 	.word	0x0801009c
 8006c3c:	080100c8 	.word	0x080100c8
    }

    if (pcb->remote_port == tcphdr->src &&
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	8b1a      	ldrh	r2, [r3, #24]
 8006c44:	4b94      	ldr	r3, [pc, #592]	; (8006e98 <tcp_input+0x524>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	881b      	ldrh	r3, [r3, #0]
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d13a      	bne.n	8006cc6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	8ada      	ldrh	r2, [r3, #22]
 8006c54:	4b90      	ldr	r3, [pc, #576]	; (8006e98 <tcp_input+0x524>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	885b      	ldrh	r3, [r3, #2]
 8006c5a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d132      	bne.n	8006cc6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	4b8d      	ldr	r3, [pc, #564]	; (8006e9c <tcp_input+0x528>)
 8006c66:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d12c      	bne.n	8006cc6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	4b8a      	ldr	r3, [pc, #552]	; (8006e9c <tcp_input+0x528>)
 8006c72:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d126      	bne.n	8006cc6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	69fa      	ldr	r2, [r7, #28]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d106      	bne.n	8006c90 <tcp_input+0x31c>
 8006c82:	4b87      	ldr	r3, [pc, #540]	; (8006ea0 <tcp_input+0x52c>)
 8006c84:	f240 120d 	movw	r2, #269	; 0x10d
 8006c88:	4986      	ldr	r1, [pc, #536]	; (8006ea4 <tcp_input+0x530>)
 8006c8a:	4887      	ldr	r0, [pc, #540]	; (8006ea8 <tcp_input+0x534>)
 8006c8c:	f006 fea2 	bl	800d9d4 <iprintf>
      if (prev != NULL) {
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00a      	beq.n	8006cac <tcp_input+0x338>
        prev->next = pcb->next;
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	68da      	ldr	r2, [r3, #12]
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8006c9e:	4b83      	ldr	r3, [pc, #524]	; (8006eac <tcp_input+0x538>)
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8006ca6:	4a81      	ldr	r2, [pc, #516]	; (8006eac <tcp_input+0x538>)
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	69fa      	ldr	r2, [r7, #28]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d111      	bne.n	8006cda <tcp_input+0x366>
 8006cb6:	4b7a      	ldr	r3, [pc, #488]	; (8006ea0 <tcp_input+0x52c>)
 8006cb8:	f240 1215 	movw	r2, #277	; 0x115
 8006cbc:	497c      	ldr	r1, [pc, #496]	; (8006eb0 <tcp_input+0x53c>)
 8006cbe:	487a      	ldr	r0, [pc, #488]	; (8006ea8 <tcp_input+0x534>)
 8006cc0:	f006 fe88 	bl	800d9d4 <iprintf>
      break;
 8006cc4:	e009      	b.n	8006cda <tcp_input+0x366>
    }
    prev = pcb;
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	61fb      	str	r3, [r7, #28]
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f47f af5e 	bne.w	8006b94 <tcp_input+0x220>
 8006cd8:	e000      	b.n	8006cdc <tcp_input+0x368>
      break;
 8006cda:	bf00      	nop
  }

  if (pcb == NULL) {
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f040 8095 	bne.w	8006e0e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ce4:	4b73      	ldr	r3, [pc, #460]	; (8006eb4 <tcp_input+0x540>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	61fb      	str	r3, [r7, #28]
 8006cea:	e03f      	b.n	8006d6c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	7d1b      	ldrb	r3, [r3, #20]
 8006cf0:	2b0a      	cmp	r3, #10
 8006cf2:	d006      	beq.n	8006d02 <tcp_input+0x38e>
 8006cf4:	4b6a      	ldr	r3, [pc, #424]	; (8006ea0 <tcp_input+0x52c>)
 8006cf6:	f240 121f 	movw	r2, #287	; 0x11f
 8006cfa:	496f      	ldr	r1, [pc, #444]	; (8006eb8 <tcp_input+0x544>)
 8006cfc:	486a      	ldr	r0, [pc, #424]	; (8006ea8 <tcp_input+0x534>)
 8006cfe:	f006 fe69 	bl	800d9d4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	7a1b      	ldrb	r3, [r3, #8]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d009      	beq.n	8006d1e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	7a1a      	ldrb	r2, [r3, #8]
 8006d0e:	4b63      	ldr	r3, [pc, #396]	; (8006e9c <tcp_input+0x528>)
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d16:	3301      	adds	r3, #1
 8006d18:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d122      	bne.n	8006d64 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	8b1a      	ldrh	r2, [r3, #24]
 8006d22:	4b5d      	ldr	r3, [pc, #372]	; (8006e98 <tcp_input+0x524>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	881b      	ldrh	r3, [r3, #0]
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d11b      	bne.n	8006d66 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	8ada      	ldrh	r2, [r3, #22]
 8006d32:	4b59      	ldr	r3, [pc, #356]	; (8006e98 <tcp_input+0x524>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	885b      	ldrh	r3, [r3, #2]
 8006d38:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d113      	bne.n	8006d66 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	685a      	ldr	r2, [r3, #4]
 8006d42:	4b56      	ldr	r3, [pc, #344]	; (8006e9c <tcp_input+0x528>)
 8006d44:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d10d      	bne.n	8006d66 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	4b53      	ldr	r3, [pc, #332]	; (8006e9c <tcp_input+0x528>)
 8006d50:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d107      	bne.n	8006d66 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8006d56:	69f8      	ldr	r0, [r7, #28]
 8006d58:	f000 fb54 	bl	8007404 <tcp_timewait_input>
        }
        pbuf_free(p);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f7fd ff3f 	bl	8004be0 <pbuf_free>
        return;
 8006d62:	e1f0      	b.n	8007146 <tcp_input+0x7d2>
        continue;
 8006d64:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	61fb      	str	r3, [r7, #28]
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1bc      	bne.n	8006cec <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8006d72:	2300      	movs	r3, #0
 8006d74:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006d76:	4b51      	ldr	r3, [pc, #324]	; (8006ebc <tcp_input+0x548>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	617b      	str	r3, [r7, #20]
 8006d7c:	e02a      	b.n	8006dd4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	7a1b      	ldrb	r3, [r3, #8]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00c      	beq.n	8006da0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	7a1a      	ldrb	r2, [r3, #8]
 8006d8a:	4b44      	ldr	r3, [pc, #272]	; (8006e9c <tcp_input+0x528>)
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d92:	3301      	adds	r3, #1
 8006d94:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d002      	beq.n	8006da0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	61bb      	str	r3, [r7, #24]
        continue;
 8006d9e:	e016      	b.n	8006dce <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	8ada      	ldrh	r2, [r3, #22]
 8006da4:	4b3c      	ldr	r3, [pc, #240]	; (8006e98 <tcp_input+0x524>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	885b      	ldrh	r3, [r3, #2]
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d10c      	bne.n	8006dca <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	4b39      	ldr	r3, [pc, #228]	; (8006e9c <tcp_input+0x528>)
 8006db6:	695b      	ldr	r3, [r3, #20]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d00f      	beq.n	8006ddc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00d      	beq.n	8006dde <tcp_input+0x46a>
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d009      	beq.n	8006dde <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	617b      	str	r3, [r7, #20]
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1d1      	bne.n	8006d7e <tcp_input+0x40a>
 8006dda:	e000      	b.n	8006dde <tcp_input+0x46a>
            break;
 8006ddc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d014      	beq.n	8006e0e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00a      	beq.n	8006e00 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	68da      	ldr	r2, [r3, #12]
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8006df2:	4b32      	ldr	r3, [pc, #200]	; (8006ebc <tcp_input+0x548>)
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8006dfa:	4a30      	ldr	r2, [pc, #192]	; (8006ebc <tcp_input+0x548>)
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8006e00:	6978      	ldr	r0, [r7, #20]
 8006e02:	f000 fa01 	bl	8007208 <tcp_listen_input>
      }
      pbuf_free(p);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f7fd feea 	bl	8004be0 <pbuf_free>
      return;
 8006e0c:	e19b      	b.n	8007146 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f000 8160 	beq.w	80070d6 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8006e16:	4b2a      	ldr	r3, [pc, #168]	; (8006ec0 <tcp_input+0x54c>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	891a      	ldrh	r2, [r3, #8]
 8006e20:	4b27      	ldr	r3, [pc, #156]	; (8006ec0 <tcp_input+0x54c>)
 8006e22:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8006e24:	4a26      	ldr	r2, [pc, #152]	; (8006ec0 <tcp_input+0x54c>)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8006e2a:	4b1b      	ldr	r3, [pc, #108]	; (8006e98 <tcp_input+0x524>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a24      	ldr	r2, [pc, #144]	; (8006ec0 <tcp_input+0x54c>)
 8006e30:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8006e32:	4b24      	ldr	r3, [pc, #144]	; (8006ec4 <tcp_input+0x550>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8006e38:	4b23      	ldr	r3, [pc, #140]	; (8006ec8 <tcp_input+0x554>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8006e3e:	4b23      	ldr	r3, [pc, #140]	; (8006ecc <tcp_input+0x558>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8006e44:	4b22      	ldr	r3, [pc, #136]	; (8006ed0 <tcp_input+0x55c>)
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	f003 0308 	and.w	r3, r3, #8
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d006      	beq.n	8006e5e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	7b5b      	ldrb	r3, [r3, #13]
 8006e54:	f043 0301 	orr.w	r3, r3, #1
 8006e58:	b2da      	uxtb	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d038      	beq.n	8006ed8 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8006e66:	69f8      	ldr	r0, [r7, #28]
 8006e68:	f7ff f93e 	bl	80060e8 <tcp_process_refused_data>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	f113 0f0d 	cmn.w	r3, #13
 8006e72:	d007      	beq.n	8006e84 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d02d      	beq.n	8006ed8 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006e7c:	4b15      	ldr	r3, [pc, #84]	; (8006ed4 <tcp_input+0x560>)
 8006e7e:	881b      	ldrh	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d029      	beq.n	8006ed8 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f040 8104 	bne.w	8007096 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8006e8e:	69f8      	ldr	r0, [r7, #28]
 8006e90:	f003 f9be 	bl	800a210 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8006e94:	e0ff      	b.n	8007096 <tcp_input+0x722>
 8006e96:	bf00      	nop
 8006e98:	200000dc 	.word	0x200000dc
 8006e9c:	20003358 	.word	0x20003358
 8006ea0:	0800ffc4 	.word	0x0800ffc4
 8006ea4:	080100f0 	.word	0x080100f0
 8006ea8:	08010010 	.word	0x08010010
 8006eac:	20008a5c 	.word	0x20008a5c
 8006eb0:	0801011c 	.word	0x0801011c
 8006eb4:	20008a6c 	.word	0x20008a6c
 8006eb8:	08010148 	.word	0x08010148
 8006ebc:	20008a64 	.word	0x20008a64
 8006ec0:	200000cc 	.word	0x200000cc
 8006ec4:	200000fc 	.word	0x200000fc
 8006ec8:	200000f9 	.word	0x200000f9
 8006ecc:	200000f4 	.word	0x200000f4
 8006ed0:	200000f8 	.word	0x200000f8
 8006ed4:	200000f6 	.word	0x200000f6
      }
    }
    tcp_input_pcb = pcb;
 8006ed8:	4a9c      	ldr	r2, [pc, #624]	; (800714c <tcp_input+0x7d8>)
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8006ede:	69f8      	ldr	r0, [r7, #28]
 8006ee0:	f000 fb0a 	bl	80074f8 <tcp_process>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8006ee8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006eec:	f113 0f0d 	cmn.w	r3, #13
 8006ef0:	f000 80d3 	beq.w	800709a <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8006ef4:	4b96      	ldr	r3, [pc, #600]	; (8007150 <tcp_input+0x7dc>)
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	f003 0308 	and.w	r3, r3, #8
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d015      	beq.n	8006f2c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d008      	beq.n	8006f1c <tcp_input+0x5a8>
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f10:	69fa      	ldr	r2, [r7, #28]
 8006f12:	6912      	ldr	r2, [r2, #16]
 8006f14:	f06f 010d 	mvn.w	r1, #13
 8006f18:	4610      	mov	r0, r2
 8006f1a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8006f1c:	69f9      	ldr	r1, [r7, #28]
 8006f1e:	488d      	ldr	r0, [pc, #564]	; (8007154 <tcp_input+0x7e0>)
 8006f20:	f7ff fbb0 	bl	8006684 <tcp_pcb_remove>
        tcp_free(pcb);
 8006f24:	69f8      	ldr	r0, [r7, #28]
 8006f26:	f7fe f99d 	bl	8005264 <tcp_free>
 8006f2a:	e0c1      	b.n	80070b0 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8006f30:	4b89      	ldr	r3, [pc, #548]	; (8007158 <tcp_input+0x7e4>)
 8006f32:	881b      	ldrh	r3, [r3, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d01d      	beq.n	8006f74 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8006f38:	4b87      	ldr	r3, [pc, #540]	; (8007158 <tcp_input+0x7e4>)
 8006f3a:	881b      	ldrh	r3, [r3, #0]
 8006f3c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00a      	beq.n	8006f5e <tcp_input+0x5ea>
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f4e:	69fa      	ldr	r2, [r7, #28]
 8006f50:	6910      	ldr	r0, [r2, #16]
 8006f52:	89fa      	ldrh	r2, [r7, #14]
 8006f54:	69f9      	ldr	r1, [r7, #28]
 8006f56:	4798      	blx	r3
 8006f58:	4603      	mov	r3, r0
 8006f5a:	74fb      	strb	r3, [r7, #19]
 8006f5c:	e001      	b.n	8006f62 <tcp_input+0x5ee>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8006f62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006f66:	f113 0f0d 	cmn.w	r3, #13
 8006f6a:	f000 8098 	beq.w	800709e <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8006f6e:	4b7a      	ldr	r3, [pc, #488]	; (8007158 <tcp_input+0x7e4>)
 8006f70:	2200      	movs	r2, #0
 8006f72:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8006f74:	69f8      	ldr	r0, [r7, #28]
 8006f76:	f000 f907 	bl	8007188 <tcp_input_delayed_close>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	f040 8090 	bne.w	80070a2 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8006f82:	4b76      	ldr	r3, [pc, #472]	; (800715c <tcp_input+0x7e8>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d041      	beq.n	800700e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d006      	beq.n	8006fa0 <tcp_input+0x62c>
 8006f92:	4b73      	ldr	r3, [pc, #460]	; (8007160 <tcp_input+0x7ec>)
 8006f94:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8006f98:	4972      	ldr	r1, [pc, #456]	; (8007164 <tcp_input+0x7f0>)
 8006f9a:	4873      	ldr	r0, [pc, #460]	; (8007168 <tcp_input+0x7f4>)
 8006f9c:	f006 fd1a 	bl	800d9d4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	8b5b      	ldrh	r3, [r3, #26]
 8006fa4:	f003 0310 	and.w	r3, r3, #16
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d008      	beq.n	8006fbe <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8006fac:	4b6b      	ldr	r3, [pc, #428]	; (800715c <tcp_input+0x7e8>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7fd fe15 	bl	8004be0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8006fb6:	69f8      	ldr	r0, [r7, #28]
 8006fb8:	f7fe fc3c 	bl	8005834 <tcp_abort>
            goto aborted;
 8006fbc:	e078      	b.n	80070b0 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00c      	beq.n	8006fe2 <tcp_input+0x66e>
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	6918      	ldr	r0, [r3, #16]
 8006fd2:	4b62      	ldr	r3, [pc, #392]	; (800715c <tcp_input+0x7e8>)
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	69f9      	ldr	r1, [r7, #28]
 8006fda:	47a0      	blx	r4
 8006fdc:	4603      	mov	r3, r0
 8006fde:	74fb      	strb	r3, [r7, #19]
 8006fe0:	e008      	b.n	8006ff4 <tcp_input+0x680>
 8006fe2:	4b5e      	ldr	r3, [pc, #376]	; (800715c <tcp_input+0x7e8>)
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	69f9      	ldr	r1, [r7, #28]
 8006fea:	2000      	movs	r0, #0
 8006fec:	f7ff f952 	bl	8006294 <tcp_recv_null>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8006ff4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006ff8:	f113 0f0d 	cmn.w	r3, #13
 8006ffc:	d053      	beq.n	80070a6 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8006ffe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d003      	beq.n	800700e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007006:	4b55      	ldr	r3, [pc, #340]	; (800715c <tcp_input+0x7e8>)
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800700e:	4b50      	ldr	r3, [pc, #320]	; (8007150 <tcp_input+0x7dc>)
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	f003 0320 	and.w	r3, r3, #32
 8007016:	2b00      	cmp	r3, #0
 8007018:	d030      	beq.n	800707c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800701e:	2b00      	cmp	r3, #0
 8007020:	d009      	beq.n	8007036 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007026:	7b5a      	ldrb	r2, [r3, #13]
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800702c:	f042 0220 	orr.w	r2, r2, #32
 8007030:	b2d2      	uxtb	r2, r2
 8007032:	735a      	strb	r2, [r3, #13]
 8007034:	e022      	b.n	800707c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800703a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800703e:	d005      	beq.n	800704c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007044:	3301      	adds	r3, #1
 8007046:	b29a      	uxth	r2, r3
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00b      	beq.n	800706e <tcp_input+0x6fa>
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	6918      	ldr	r0, [r3, #16]
 8007060:	2300      	movs	r3, #0
 8007062:	2200      	movs	r2, #0
 8007064:	69f9      	ldr	r1, [r7, #28]
 8007066:	47a0      	blx	r4
 8007068:	4603      	mov	r3, r0
 800706a:	74fb      	strb	r3, [r7, #19]
 800706c:	e001      	b.n	8007072 <tcp_input+0x6fe>
 800706e:	2300      	movs	r3, #0
 8007070:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007072:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007076:	f113 0f0d 	cmn.w	r3, #13
 800707a:	d016      	beq.n	80070aa <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800707c:	4b33      	ldr	r3, [pc, #204]	; (800714c <tcp_input+0x7d8>)
 800707e:	2200      	movs	r2, #0
 8007080:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007082:	69f8      	ldr	r0, [r7, #28]
 8007084:	f000 f880 	bl	8007188 <tcp_input_delayed_close>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10f      	bne.n	80070ae <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800708e:	69f8      	ldr	r0, [r7, #28]
 8007090:	f002 fab8 	bl	8009604 <tcp_output>
 8007094:	e00c      	b.n	80070b0 <tcp_input+0x73c>
        goto aborted;
 8007096:	bf00      	nop
 8007098:	e00a      	b.n	80070b0 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800709a:	bf00      	nop
 800709c:	e008      	b.n	80070b0 <tcp_input+0x73c>
              goto aborted;
 800709e:	bf00      	nop
 80070a0:	e006      	b.n	80070b0 <tcp_input+0x73c>
          goto aborted;
 80070a2:	bf00      	nop
 80070a4:	e004      	b.n	80070b0 <tcp_input+0x73c>
            goto aborted;
 80070a6:	bf00      	nop
 80070a8:	e002      	b.n	80070b0 <tcp_input+0x73c>
              goto aborted;
 80070aa:	bf00      	nop
 80070ac:	e000      	b.n	80070b0 <tcp_input+0x73c>
          goto aborted;
 80070ae:	bf00      	nop
    tcp_input_pcb = NULL;
 80070b0:	4b26      	ldr	r3, [pc, #152]	; (800714c <tcp_input+0x7d8>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80070b6:	4b29      	ldr	r3, [pc, #164]	; (800715c <tcp_input+0x7e8>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80070bc:	4b2b      	ldr	r3, [pc, #172]	; (800716c <tcp_input+0x7f8>)
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d03f      	beq.n	8007144 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 80070c4:	4b29      	ldr	r3, [pc, #164]	; (800716c <tcp_input+0x7f8>)
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7fd fd89 	bl	8004be0 <pbuf_free>
      inseg.p = NULL;
 80070ce:	4b27      	ldr	r3, [pc, #156]	; (800716c <tcp_input+0x7f8>)
 80070d0:	2200      	movs	r2, #0
 80070d2:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80070d4:	e036      	b.n	8007144 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80070d6:	4b26      	ldr	r3, [pc, #152]	; (8007170 <tcp_input+0x7fc>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	899b      	ldrh	r3, [r3, #12]
 80070dc:	b29b      	uxth	r3, r3
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fc faca 	bl	8003678 <lwip_htons>
 80070e4:	4603      	mov	r3, r0
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	f003 0304 	and.w	r3, r3, #4
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d118      	bne.n	8007122 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80070f0:	4b20      	ldr	r3, [pc, #128]	; (8007174 <tcp_input+0x800>)
 80070f2:	6819      	ldr	r1, [r3, #0]
 80070f4:	4b20      	ldr	r3, [pc, #128]	; (8007178 <tcp_input+0x804>)
 80070f6:	881b      	ldrh	r3, [r3, #0]
 80070f8:	461a      	mov	r2, r3
 80070fa:	4b20      	ldr	r3, [pc, #128]	; (800717c <tcp_input+0x808>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007100:	4b1b      	ldr	r3, [pc, #108]	; (8007170 <tcp_input+0x7fc>)
 8007102:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007104:	885b      	ldrh	r3, [r3, #2]
 8007106:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007108:	4a19      	ldr	r2, [pc, #100]	; (8007170 <tcp_input+0x7fc>)
 800710a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800710c:	8812      	ldrh	r2, [r2, #0]
 800710e:	b292      	uxth	r2, r2
 8007110:	9202      	str	r2, [sp, #8]
 8007112:	9301      	str	r3, [sp, #4]
 8007114:	4b1a      	ldr	r3, [pc, #104]	; (8007180 <tcp_input+0x80c>)
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	4b1a      	ldr	r3, [pc, #104]	; (8007184 <tcp_input+0x810>)
 800711a:	4602      	mov	r2, r0
 800711c:	2000      	movs	r0, #0
 800711e:	f003 f825 	bl	800a16c <tcp_rst>
    pbuf_free(p);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f7fd fd5c 	bl	8004be0 <pbuf_free>
  return;
 8007128:	e00c      	b.n	8007144 <tcp_input+0x7d0>
    goto dropped;
 800712a:	bf00      	nop
 800712c:	e006      	b.n	800713c <tcp_input+0x7c8>
    goto dropped;
 800712e:	bf00      	nop
 8007130:	e004      	b.n	800713c <tcp_input+0x7c8>
    goto dropped;
 8007132:	bf00      	nop
 8007134:	e002      	b.n	800713c <tcp_input+0x7c8>
      goto dropped;
 8007136:	bf00      	nop
 8007138:	e000      	b.n	800713c <tcp_input+0x7c8>
      goto dropped;
 800713a:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f7fd fd4f 	bl	8004be0 <pbuf_free>
 8007142:	e000      	b.n	8007146 <tcp_input+0x7d2>
  return;
 8007144:	bf00      	nop
}
 8007146:	3724      	adds	r7, #36	; 0x24
 8007148:	46bd      	mov	sp, r7
 800714a:	bd90      	pop	{r4, r7, pc}
 800714c:	20008a70 	.word	0x20008a70
 8007150:	200000f9 	.word	0x200000f9
 8007154:	20008a5c 	.word	0x20008a5c
 8007158:	200000f4 	.word	0x200000f4
 800715c:	200000fc 	.word	0x200000fc
 8007160:	0800ffc4 	.word	0x0800ffc4
 8007164:	08010178 	.word	0x08010178
 8007168:	08010010 	.word	0x08010010
 800716c:	200000cc 	.word	0x200000cc
 8007170:	200000dc 	.word	0x200000dc
 8007174:	200000f0 	.word	0x200000f0
 8007178:	200000f6 	.word	0x200000f6
 800717c:	200000ec 	.word	0x200000ec
 8007180:	20003368 	.word	0x20003368
 8007184:	2000336c 	.word	0x2000336c

08007188 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d106      	bne.n	80071a4 <tcp_input_delayed_close+0x1c>
 8007196:	4b17      	ldr	r3, [pc, #92]	; (80071f4 <tcp_input_delayed_close+0x6c>)
 8007198:	f240 225a 	movw	r2, #602	; 0x25a
 800719c:	4916      	ldr	r1, [pc, #88]	; (80071f8 <tcp_input_delayed_close+0x70>)
 800719e:	4817      	ldr	r0, [pc, #92]	; (80071fc <tcp_input_delayed_close+0x74>)
 80071a0:	f006 fc18 	bl	800d9d4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80071a4:	4b16      	ldr	r3, [pc, #88]	; (8007200 <tcp_input_delayed_close+0x78>)
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	f003 0310 	and.w	r3, r3, #16
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d01c      	beq.n	80071ea <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	8b5b      	ldrh	r3, [r3, #26]
 80071b4:	f003 0310 	and.w	r3, r3, #16
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10d      	bne.n	80071d8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d008      	beq.n	80071d8 <tcp_input_delayed_close+0x50>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	6912      	ldr	r2, [r2, #16]
 80071d0:	f06f 010e 	mvn.w	r1, #14
 80071d4:	4610      	mov	r0, r2
 80071d6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80071d8:	6879      	ldr	r1, [r7, #4]
 80071da:	480a      	ldr	r0, [pc, #40]	; (8007204 <tcp_input_delayed_close+0x7c>)
 80071dc:	f7ff fa52 	bl	8006684 <tcp_pcb_remove>
    tcp_free(pcb);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f7fe f83f 	bl	8005264 <tcp_free>
    return 1;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e000      	b.n	80071ec <tcp_input_delayed_close+0x64>
  }
  return 0;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	0800ffc4 	.word	0x0800ffc4
 80071f8:	08010194 	.word	0x08010194
 80071fc:	08010010 	.word	0x08010010
 8007200:	200000f9 	.word	0x200000f9
 8007204:	20008a5c 	.word	0x20008a5c

08007208 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007208:	b590      	push	{r4, r7, lr}
 800720a:	b08b      	sub	sp, #44	; 0x2c
 800720c:	af04      	add	r7, sp, #16
 800720e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8007210:	4b6f      	ldr	r3, [pc, #444]	; (80073d0 <tcp_listen_input+0x1c8>)
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	f003 0304 	and.w	r3, r3, #4
 8007218:	2b00      	cmp	r3, #0
 800721a:	f040 80d2 	bne.w	80073c2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d106      	bne.n	8007232 <tcp_listen_input+0x2a>
 8007224:	4b6b      	ldr	r3, [pc, #428]	; (80073d4 <tcp_listen_input+0x1cc>)
 8007226:	f240 2281 	movw	r2, #641	; 0x281
 800722a:	496b      	ldr	r1, [pc, #428]	; (80073d8 <tcp_listen_input+0x1d0>)
 800722c:	486b      	ldr	r0, [pc, #428]	; (80073dc <tcp_listen_input+0x1d4>)
 800722e:	f006 fbd1 	bl	800d9d4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8007232:	4b67      	ldr	r3, [pc, #412]	; (80073d0 <tcp_listen_input+0x1c8>)
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	f003 0310 	and.w	r3, r3, #16
 800723a:	2b00      	cmp	r3, #0
 800723c:	d019      	beq.n	8007272 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800723e:	4b68      	ldr	r3, [pc, #416]	; (80073e0 <tcp_listen_input+0x1d8>)
 8007240:	6819      	ldr	r1, [r3, #0]
 8007242:	4b68      	ldr	r3, [pc, #416]	; (80073e4 <tcp_listen_input+0x1dc>)
 8007244:	881b      	ldrh	r3, [r3, #0]
 8007246:	461a      	mov	r2, r3
 8007248:	4b67      	ldr	r3, [pc, #412]	; (80073e8 <tcp_listen_input+0x1e0>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800724e:	4b67      	ldr	r3, [pc, #412]	; (80073ec <tcp_listen_input+0x1e4>)
 8007250:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007252:	885b      	ldrh	r3, [r3, #2]
 8007254:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007256:	4a65      	ldr	r2, [pc, #404]	; (80073ec <tcp_listen_input+0x1e4>)
 8007258:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800725a:	8812      	ldrh	r2, [r2, #0]
 800725c:	b292      	uxth	r2, r2
 800725e:	9202      	str	r2, [sp, #8]
 8007260:	9301      	str	r3, [sp, #4]
 8007262:	4b63      	ldr	r3, [pc, #396]	; (80073f0 <tcp_listen_input+0x1e8>)
 8007264:	9300      	str	r3, [sp, #0]
 8007266:	4b63      	ldr	r3, [pc, #396]	; (80073f4 <tcp_listen_input+0x1ec>)
 8007268:	4602      	mov	r2, r0
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f002 ff7e 	bl	800a16c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8007270:	e0a9      	b.n	80073c6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8007272:	4b57      	ldr	r3, [pc, #348]	; (80073d0 <tcp_listen_input+0x1c8>)
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	f003 0302 	and.w	r3, r3, #2
 800727a:	2b00      	cmp	r3, #0
 800727c:	f000 80a3 	beq.w	80073c6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	7d5b      	ldrb	r3, [r3, #21]
 8007284:	4618      	mov	r0, r3
 8007286:	f7ff f929 	bl	80064dc <tcp_alloc>
 800728a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d111      	bne.n	80072b6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00a      	beq.n	80072b0 <tcp_listen_input+0xa8>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	6910      	ldr	r0, [r2, #16]
 80072a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072a6:	2100      	movs	r1, #0
 80072a8:	4798      	blx	r3
 80072aa:	4603      	mov	r3, r0
 80072ac:	73bb      	strb	r3, [r7, #14]
      return;
 80072ae:	e08b      	b.n	80073c8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80072b0:	23f0      	movs	r3, #240	; 0xf0
 80072b2:	73bb      	strb	r3, [r7, #14]
      return;
 80072b4:	e088      	b.n	80073c8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80072b6:	4b50      	ldr	r3, [pc, #320]	; (80073f8 <tcp_listen_input+0x1f0>)
 80072b8:	695a      	ldr	r2, [r3, #20]
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80072be:	4b4e      	ldr	r3, [pc, #312]	; (80073f8 <tcp_listen_input+0x1f0>)
 80072c0:	691a      	ldr	r2, [r3, #16]
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	8ada      	ldrh	r2, [r3, #22]
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80072ce:	4b47      	ldr	r3, [pc, #284]	; (80073ec <tcp_listen_input+0x1e4>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	881b      	ldrh	r3, [r3, #0]
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	2203      	movs	r2, #3
 80072de:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80072e0:	4b41      	ldr	r3, [pc, #260]	; (80073e8 <tcp_listen_input+0x1e0>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	1c5a      	adds	r2, r3, #1
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80072f2:	6978      	ldr	r0, [r7, #20]
 80072f4:	f7ff fa5a 	bl	80067ac <tcp_next_iss>
 80072f8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	693a      	ldr	r2, [r7, #16]
 80072fe:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	693a      	ldr	r2, [r7, #16]
 8007310:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007312:	4b35      	ldr	r3, [pc, #212]	; (80073e8 <tcp_listen_input+0x1e0>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	1e5a      	subs	r2, r3, #1
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	691a      	ldr	r2, [r3, #16]
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	7a5b      	ldrb	r3, [r3, #9]
 800732e:	f003 030c 	and.w	r3, r3, #12
 8007332:	b2da      	uxtb	r2, r3
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	7a1a      	ldrb	r2, [r3, #8]
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8007340:	4b2e      	ldr	r3, [pc, #184]	; (80073fc <tcp_listen_input+0x1f4>)
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	60da      	str	r2, [r3, #12]
 8007348:	4a2c      	ldr	r2, [pc, #176]	; (80073fc <tcp_listen_input+0x1f4>)
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	6013      	str	r3, [r2, #0]
 800734e:	f003 f8cf 	bl	800a4f0 <tcp_timer_needed>
 8007352:	4b2b      	ldr	r3, [pc, #172]	; (8007400 <tcp_listen_input+0x1f8>)
 8007354:	2201      	movs	r2, #1
 8007356:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007358:	6978      	ldr	r0, [r7, #20]
 800735a:	f001 fd8d 	bl	8008e78 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800735e:	4b23      	ldr	r3, [pc, #140]	; (80073ec <tcp_listen_input+0x1e4>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	89db      	ldrh	r3, [r3, #14]
 8007364:	b29a      	uxth	r2, r3
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	3304      	adds	r3, #4
 8007380:	4618      	mov	r0, r3
 8007382:	f005 f84d 	bl	800c420 <ip4_route>
 8007386:	4601      	mov	r1, r0
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	3304      	adds	r3, #4
 800738c:	461a      	mov	r2, r3
 800738e:	4620      	mov	r0, r4
 8007390:	f7ff fa32 	bl	80067f8 <tcp_eff_send_mss_netif>
 8007394:	4603      	mov	r3, r0
 8007396:	461a      	mov	r2, r3
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800739c:	2112      	movs	r1, #18
 800739e:	6978      	ldr	r0, [r7, #20]
 80073a0:	f002 f842 	bl	8009428 <tcp_enqueue_flags>
 80073a4:	4603      	mov	r3, r0
 80073a6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80073a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d004      	beq.n	80073ba <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80073b0:	2100      	movs	r1, #0
 80073b2:	6978      	ldr	r0, [r7, #20]
 80073b4:	f7fe f980 	bl	80056b8 <tcp_abandon>
      return;
 80073b8:	e006      	b.n	80073c8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80073ba:	6978      	ldr	r0, [r7, #20]
 80073bc:	f002 f922 	bl	8009604 <tcp_output>
  return;
 80073c0:	e001      	b.n	80073c6 <tcp_listen_input+0x1be>
    return;
 80073c2:	bf00      	nop
 80073c4:	e000      	b.n	80073c8 <tcp_listen_input+0x1c0>
  return;
 80073c6:	bf00      	nop
}
 80073c8:	371c      	adds	r7, #28
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd90      	pop	{r4, r7, pc}
 80073ce:	bf00      	nop
 80073d0:	200000f8 	.word	0x200000f8
 80073d4:	0800ffc4 	.word	0x0800ffc4
 80073d8:	080101bc 	.word	0x080101bc
 80073dc:	08010010 	.word	0x08010010
 80073e0:	200000f0 	.word	0x200000f0
 80073e4:	200000f6 	.word	0x200000f6
 80073e8:	200000ec 	.word	0x200000ec
 80073ec:	200000dc 	.word	0x200000dc
 80073f0:	20003368 	.word	0x20003368
 80073f4:	2000336c 	.word	0x2000336c
 80073f8:	20003358 	.word	0x20003358
 80073fc:	20008a5c 	.word	0x20008a5c
 8007400:	20008a58 	.word	0x20008a58

08007404 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b086      	sub	sp, #24
 8007408:	af04      	add	r7, sp, #16
 800740a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800740c:	4b2f      	ldr	r3, [pc, #188]	; (80074cc <tcp_timewait_input+0xc8>)
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	f003 0304 	and.w	r3, r3, #4
 8007414:	2b00      	cmp	r3, #0
 8007416:	d153      	bne.n	80074c0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d106      	bne.n	800742c <tcp_timewait_input+0x28>
 800741e:	4b2c      	ldr	r3, [pc, #176]	; (80074d0 <tcp_timewait_input+0xcc>)
 8007420:	f240 22ee 	movw	r2, #750	; 0x2ee
 8007424:	492b      	ldr	r1, [pc, #172]	; (80074d4 <tcp_timewait_input+0xd0>)
 8007426:	482c      	ldr	r0, [pc, #176]	; (80074d8 <tcp_timewait_input+0xd4>)
 8007428:	f006 fad4 	bl	800d9d4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800742c:	4b27      	ldr	r3, [pc, #156]	; (80074cc <tcp_timewait_input+0xc8>)
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	f003 0302 	and.w	r3, r3, #2
 8007434:	2b00      	cmp	r3, #0
 8007436:	d02a      	beq.n	800748e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007438:	4b28      	ldr	r3, [pc, #160]	; (80074dc <tcp_timewait_input+0xd8>)
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	db2d      	blt.n	80074a2 <tcp_timewait_input+0x9e>
 8007446:	4b25      	ldr	r3, [pc, #148]	; (80074dc <tcp_timewait_input+0xd8>)
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744e:	6879      	ldr	r1, [r7, #4]
 8007450:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007452:	440b      	add	r3, r1
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	2b00      	cmp	r3, #0
 8007458:	dc23      	bgt.n	80074a2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800745a:	4b21      	ldr	r3, [pc, #132]	; (80074e0 <tcp_timewait_input+0xdc>)
 800745c:	6819      	ldr	r1, [r3, #0]
 800745e:	4b21      	ldr	r3, [pc, #132]	; (80074e4 <tcp_timewait_input+0xe0>)
 8007460:	881b      	ldrh	r3, [r3, #0]
 8007462:	461a      	mov	r2, r3
 8007464:	4b1d      	ldr	r3, [pc, #116]	; (80074dc <tcp_timewait_input+0xd8>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800746a:	4b1f      	ldr	r3, [pc, #124]	; (80074e8 <tcp_timewait_input+0xe4>)
 800746c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800746e:	885b      	ldrh	r3, [r3, #2]
 8007470:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007472:	4a1d      	ldr	r2, [pc, #116]	; (80074e8 <tcp_timewait_input+0xe4>)
 8007474:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007476:	8812      	ldrh	r2, [r2, #0]
 8007478:	b292      	uxth	r2, r2
 800747a:	9202      	str	r2, [sp, #8]
 800747c:	9301      	str	r3, [sp, #4]
 800747e:	4b1b      	ldr	r3, [pc, #108]	; (80074ec <tcp_timewait_input+0xe8>)
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	4b1b      	ldr	r3, [pc, #108]	; (80074f0 <tcp_timewait_input+0xec>)
 8007484:	4602      	mov	r2, r0
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f002 fe70 	bl	800a16c <tcp_rst>
      return;
 800748c:	e01b      	b.n	80074c6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800748e:	4b0f      	ldr	r3, [pc, #60]	; (80074cc <tcp_timewait_input+0xc8>)
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	2b00      	cmp	r3, #0
 8007498:	d003      	beq.n	80074a2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800749a:	4b16      	ldr	r3, [pc, #88]	; (80074f4 <tcp_timewait_input+0xf0>)
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80074a2:	4b10      	ldr	r3, [pc, #64]	; (80074e4 <tcp_timewait_input+0xe0>)
 80074a4:	881b      	ldrh	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00c      	beq.n	80074c4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	8b5b      	ldrh	r3, [r3, #26]
 80074ae:	f043 0302 	orr.w	r3, r3, #2
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f002 f8a3 	bl	8009604 <tcp_output>
  }
  return;
 80074be:	e001      	b.n	80074c4 <tcp_timewait_input+0xc0>
    return;
 80074c0:	bf00      	nop
 80074c2:	e000      	b.n	80074c6 <tcp_timewait_input+0xc2>
  return;
 80074c4:	bf00      	nop
}
 80074c6:	3708      	adds	r7, #8
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	200000f8 	.word	0x200000f8
 80074d0:	0800ffc4 	.word	0x0800ffc4
 80074d4:	080101dc 	.word	0x080101dc
 80074d8:	08010010 	.word	0x08010010
 80074dc:	200000ec 	.word	0x200000ec
 80074e0:	200000f0 	.word	0x200000f0
 80074e4:	200000f6 	.word	0x200000f6
 80074e8:	200000dc 	.word	0x200000dc
 80074ec:	20003368 	.word	0x20003368
 80074f0:	2000336c 	.word	0x2000336c
 80074f4:	20008a60 	.word	0x20008a60

080074f8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80074f8:	b590      	push	{r4, r7, lr}
 80074fa:	b08d      	sub	sp, #52	; 0x34
 80074fc:	af04      	add	r7, sp, #16
 80074fe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007500:	2300      	movs	r3, #0
 8007502:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8007504:	2300      	movs	r3, #0
 8007506:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d106      	bne.n	800751c <tcp_process+0x24>
 800750e:	4ba5      	ldr	r3, [pc, #660]	; (80077a4 <tcp_process+0x2ac>)
 8007510:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8007514:	49a4      	ldr	r1, [pc, #656]	; (80077a8 <tcp_process+0x2b0>)
 8007516:	48a5      	ldr	r0, [pc, #660]	; (80077ac <tcp_process+0x2b4>)
 8007518:	f006 fa5c 	bl	800d9d4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800751c:	4ba4      	ldr	r3, [pc, #656]	; (80077b0 <tcp_process+0x2b8>)
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	f003 0304 	and.w	r3, r3, #4
 8007524:	2b00      	cmp	r3, #0
 8007526:	d04e      	beq.n	80075c6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	7d1b      	ldrb	r3, [r3, #20]
 800752c:	2b02      	cmp	r3, #2
 800752e:	d108      	bne.n	8007542 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007534:	4b9f      	ldr	r3, [pc, #636]	; (80077b4 <tcp_process+0x2bc>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	429a      	cmp	r2, r3
 800753a:	d123      	bne.n	8007584 <tcp_process+0x8c>
        acceptable = 1;
 800753c:	2301      	movs	r3, #1
 800753e:	76fb      	strb	r3, [r7, #27]
 8007540:	e020      	b.n	8007584 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007546:	4b9c      	ldr	r3, [pc, #624]	; (80077b8 <tcp_process+0x2c0>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	429a      	cmp	r2, r3
 800754c:	d102      	bne.n	8007554 <tcp_process+0x5c>
        acceptable = 1;
 800754e:	2301      	movs	r3, #1
 8007550:	76fb      	strb	r3, [r7, #27]
 8007552:	e017      	b.n	8007584 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007554:	4b98      	ldr	r3, [pc, #608]	; (80077b8 <tcp_process+0x2c0>)
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	2b00      	cmp	r3, #0
 8007560:	db10      	blt.n	8007584 <tcp_process+0x8c>
 8007562:	4b95      	ldr	r3, [pc, #596]	; (80077b8 <tcp_process+0x2c0>)
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756a:	6879      	ldr	r1, [r7, #4]
 800756c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800756e:	440b      	add	r3, r1
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	2b00      	cmp	r3, #0
 8007574:	dc06      	bgt.n	8007584 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	8b5b      	ldrh	r3, [r3, #26]
 800757a:	f043 0302 	orr.w	r3, r3, #2
 800757e:	b29a      	uxth	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007584:	7efb      	ldrb	r3, [r7, #27]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d01b      	beq.n	80075c2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	7d1b      	ldrb	r3, [r3, #20]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d106      	bne.n	80075a0 <tcp_process+0xa8>
 8007592:	4b84      	ldr	r3, [pc, #528]	; (80077a4 <tcp_process+0x2ac>)
 8007594:	f44f 724e 	mov.w	r2, #824	; 0x338
 8007598:	4988      	ldr	r1, [pc, #544]	; (80077bc <tcp_process+0x2c4>)
 800759a:	4884      	ldr	r0, [pc, #528]	; (80077ac <tcp_process+0x2b4>)
 800759c:	f006 fa1a 	bl	800d9d4 <iprintf>
      recv_flags |= TF_RESET;
 80075a0:	4b87      	ldr	r3, [pc, #540]	; (80077c0 <tcp_process+0x2c8>)
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	f043 0308 	orr.w	r3, r3, #8
 80075a8:	b2da      	uxtb	r2, r3
 80075aa:	4b85      	ldr	r3, [pc, #532]	; (80077c0 <tcp_process+0x2c8>)
 80075ac:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	8b5b      	ldrh	r3, [r3, #26]
 80075b2:	f023 0301 	bic.w	r3, r3, #1
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80075bc:	f06f 030d 	mvn.w	r3, #13
 80075c0:	e37a      	b.n	8007cb8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80075c2:	2300      	movs	r3, #0
 80075c4:	e378      	b.n	8007cb8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80075c6:	4b7a      	ldr	r3, [pc, #488]	; (80077b0 <tcp_process+0x2b8>)
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	f003 0302 	and.w	r3, r3, #2
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d010      	beq.n	80075f4 <tcp_process+0xfc>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	7d1b      	ldrb	r3, [r3, #20]
 80075d6:	2b02      	cmp	r3, #2
 80075d8:	d00c      	beq.n	80075f4 <tcp_process+0xfc>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	7d1b      	ldrb	r3, [r3, #20]
 80075de:	2b03      	cmp	r3, #3
 80075e0:	d008      	beq.n	80075f4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	8b5b      	ldrh	r3, [r3, #26]
 80075e6:	f043 0302 	orr.w	r3, r3, #2
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80075f0:	2300      	movs	r3, #0
 80075f2:	e361      	b.n	8007cb8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	8b5b      	ldrh	r3, [r3, #26]
 80075f8:	f003 0310 	and.w	r3, r3, #16
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d103      	bne.n	8007608 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007600:	4b70      	ldr	r3, [pc, #448]	; (80077c4 <tcp_process+0x2cc>)
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f001 fc2d 	bl	8008e78 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	7d1b      	ldrb	r3, [r3, #20]
 8007622:	3b02      	subs	r3, #2
 8007624:	2b07      	cmp	r3, #7
 8007626:	f200 8337 	bhi.w	8007c98 <tcp_process+0x7a0>
 800762a:	a201      	add	r2, pc, #4	; (adr r2, 8007630 <tcp_process+0x138>)
 800762c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007630:	08007651 	.word	0x08007651
 8007634:	08007881 	.word	0x08007881
 8007638:	080079f9 	.word	0x080079f9
 800763c:	08007a23 	.word	0x08007a23
 8007640:	08007b47 	.word	0x08007b47
 8007644:	080079f9 	.word	0x080079f9
 8007648:	08007bd3 	.word	0x08007bd3
 800764c:	08007c63 	.word	0x08007c63
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8007650:	4b57      	ldr	r3, [pc, #348]	; (80077b0 <tcp_process+0x2b8>)
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	f003 0310 	and.w	r3, r3, #16
 8007658:	2b00      	cmp	r3, #0
 800765a:	f000 80e4 	beq.w	8007826 <tcp_process+0x32e>
 800765e:	4b54      	ldr	r3, [pc, #336]	; (80077b0 <tcp_process+0x2b8>)
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	f003 0302 	and.w	r3, r3, #2
 8007666:	2b00      	cmp	r3, #0
 8007668:	f000 80dd 	beq.w	8007826 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007670:	1c5a      	adds	r2, r3, #1
 8007672:	4b50      	ldr	r3, [pc, #320]	; (80077b4 <tcp_process+0x2bc>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	429a      	cmp	r2, r3
 8007678:	f040 80d5 	bne.w	8007826 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800767c:	4b4e      	ldr	r3, [pc, #312]	; (80077b8 <tcp_process+0x2c0>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	1c5a      	adds	r2, r3, #1
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800768e:	4b49      	ldr	r3, [pc, #292]	; (80077b4 <tcp_process+0x2bc>)
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8007696:	4b4c      	ldr	r3, [pc, #304]	; (80077c8 <tcp_process+0x2d0>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	89db      	ldrh	r3, [r3, #14]
 800769c:	b29a      	uxth	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80076b0:	4b41      	ldr	r3, [pc, #260]	; (80077b8 <tcp_process+0x2c0>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	1e5a      	subs	r2, r3, #1
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2204      	movs	r2, #4
 80076be:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	3304      	adds	r3, #4
 80076c8:	4618      	mov	r0, r3
 80076ca:	f004 fea9 	bl	800c420 <ip4_route>
 80076ce:	4601      	mov	r1, r0
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	3304      	adds	r3, #4
 80076d4:	461a      	mov	r2, r3
 80076d6:	4620      	mov	r0, r4
 80076d8:	f7ff f88e 	bl	80067f8 <tcp_eff_send_mss_netif>
 80076dc:	4603      	mov	r3, r0
 80076de:	461a      	mov	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80076e8:	009a      	lsls	r2, r3, #2
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80076ee:	005b      	lsls	r3, r3, #1
 80076f0:	f241 111c 	movw	r1, #4380	; 0x111c
 80076f4:	428b      	cmp	r3, r1
 80076f6:	bf38      	it	cc
 80076f8:	460b      	movcc	r3, r1
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d204      	bcs.n	8007708 <tcp_process+0x210>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	b29b      	uxth	r3, r3
 8007706:	e00d      	b.n	8007724 <tcp_process+0x22c>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800770c:	005b      	lsls	r3, r3, #1
 800770e:	f241 121c 	movw	r2, #4380	; 0x111c
 8007712:	4293      	cmp	r3, r2
 8007714:	d904      	bls.n	8007720 <tcp_process+0x228>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800771a:	005b      	lsls	r3, r3, #1
 800771c:	b29b      	uxth	r3, r3
 800771e:	e001      	b.n	8007724 <tcp_process+0x22c>
 8007720:	f241 131c 	movw	r3, #4380	; 0x111c
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007730:	2b00      	cmp	r3, #0
 8007732:	d106      	bne.n	8007742 <tcp_process+0x24a>
 8007734:	4b1b      	ldr	r3, [pc, #108]	; (80077a4 <tcp_process+0x2ac>)
 8007736:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800773a:	4924      	ldr	r1, [pc, #144]	; (80077cc <tcp_process+0x2d4>)
 800773c:	481b      	ldr	r0, [pc, #108]	; (80077ac <tcp_process+0x2b4>)
 800773e:	f006 f949 	bl	800d9d4 <iprintf>
        --pcb->snd_queuelen;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007748:	3b01      	subs	r3, #1
 800774a:	b29a      	uxth	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007756:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d111      	bne.n	8007782 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007762:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d106      	bne.n	8007778 <tcp_process+0x280>
 800776a:	4b0e      	ldr	r3, [pc, #56]	; (80077a4 <tcp_process+0x2ac>)
 800776c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8007770:	4917      	ldr	r1, [pc, #92]	; (80077d0 <tcp_process+0x2d8>)
 8007772:	480e      	ldr	r0, [pc, #56]	; (80077ac <tcp_process+0x2b4>)
 8007774:	f006 f92e 	bl	800d9d4 <iprintf>
          pcb->unsent = rseg->next;
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	66da      	str	r2, [r3, #108]	; 0x6c
 8007780:	e003      	b.n	800778a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800778a:	69f8      	ldr	r0, [r7, #28]
 800778c:	f7fe fd3d 	bl	800620a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007794:	2b00      	cmp	r3, #0
 8007796:	d11d      	bne.n	80077d4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800779e:	861a      	strh	r2, [r3, #48]	; 0x30
 80077a0:	e01f      	b.n	80077e2 <tcp_process+0x2ea>
 80077a2:	bf00      	nop
 80077a4:	0800ffc4 	.word	0x0800ffc4
 80077a8:	080101fc 	.word	0x080101fc
 80077ac:	08010010 	.word	0x08010010
 80077b0:	200000f8 	.word	0x200000f8
 80077b4:	200000f0 	.word	0x200000f0
 80077b8:	200000ec 	.word	0x200000ec
 80077bc:	08010218 	.word	0x08010218
 80077c0:	200000f9 	.word	0x200000f9
 80077c4:	20008a60 	.word	0x20008a60
 80077c8:	200000dc 	.word	0x200000dc
 80077cc:	08010238 	.word	0x08010238
 80077d0:	08010250 	.word	0x08010250
        } else {
          pcb->rtime = 0;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00a      	beq.n	8007802 <tcp_process+0x30a>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	6910      	ldr	r0, [r2, #16]
 80077f6:	2200      	movs	r2, #0
 80077f8:	6879      	ldr	r1, [r7, #4]
 80077fa:	4798      	blx	r3
 80077fc:	4603      	mov	r3, r0
 80077fe:	76bb      	strb	r3, [r7, #26]
 8007800:	e001      	b.n	8007806 <tcp_process+0x30e>
 8007802:	2300      	movs	r3, #0
 8007804:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8007806:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800780a:	f113 0f0d 	cmn.w	r3, #13
 800780e:	d102      	bne.n	8007816 <tcp_process+0x31e>
          return ERR_ABRT;
 8007810:	f06f 030c 	mvn.w	r3, #12
 8007814:	e250      	b.n	8007cb8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	8b5b      	ldrh	r3, [r3, #26]
 800781a:	f043 0302 	orr.w	r3, r3, #2
 800781e:	b29a      	uxth	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8007824:	e23a      	b.n	8007c9c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8007826:	4b9d      	ldr	r3, [pc, #628]	; (8007a9c <tcp_process+0x5a4>)
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	f003 0310 	and.w	r3, r3, #16
 800782e:	2b00      	cmp	r3, #0
 8007830:	f000 8234 	beq.w	8007c9c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007834:	4b9a      	ldr	r3, [pc, #616]	; (8007aa0 <tcp_process+0x5a8>)
 8007836:	6819      	ldr	r1, [r3, #0]
 8007838:	4b9a      	ldr	r3, [pc, #616]	; (8007aa4 <tcp_process+0x5ac>)
 800783a:	881b      	ldrh	r3, [r3, #0]
 800783c:	461a      	mov	r2, r3
 800783e:	4b9a      	ldr	r3, [pc, #616]	; (8007aa8 <tcp_process+0x5b0>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007844:	4b99      	ldr	r3, [pc, #612]	; (8007aac <tcp_process+0x5b4>)
 8007846:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007848:	885b      	ldrh	r3, [r3, #2]
 800784a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800784c:	4a97      	ldr	r2, [pc, #604]	; (8007aac <tcp_process+0x5b4>)
 800784e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007850:	8812      	ldrh	r2, [r2, #0]
 8007852:	b292      	uxth	r2, r2
 8007854:	9202      	str	r2, [sp, #8]
 8007856:	9301      	str	r3, [sp, #4]
 8007858:	4b95      	ldr	r3, [pc, #596]	; (8007ab0 <tcp_process+0x5b8>)
 800785a:	9300      	str	r3, [sp, #0]
 800785c:	4b95      	ldr	r3, [pc, #596]	; (8007ab4 <tcp_process+0x5bc>)
 800785e:	4602      	mov	r2, r0
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f002 fc83 	bl	800a16c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800786c:	2b05      	cmp	r3, #5
 800786e:	f200 8215 	bhi.w	8007c9c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f002 fa4d 	bl	8009d18 <tcp_rexmit_rto>
      break;
 800787e:	e20d      	b.n	8007c9c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8007880:	4b86      	ldr	r3, [pc, #536]	; (8007a9c <tcp_process+0x5a4>)
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	f003 0310 	and.w	r3, r3, #16
 8007888:	2b00      	cmp	r3, #0
 800788a:	f000 80a1 	beq.w	80079d0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800788e:	4b84      	ldr	r3, [pc, #528]	; (8007aa0 <tcp_process+0x5a8>)
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007896:	1ad3      	subs	r3, r2, r3
 8007898:	3b01      	subs	r3, #1
 800789a:	2b00      	cmp	r3, #0
 800789c:	db7e      	blt.n	800799c <tcp_process+0x4a4>
 800789e:	4b80      	ldr	r3, [pc, #512]	; (8007aa0 <tcp_process+0x5a8>)
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	dc77      	bgt.n	800799c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2204      	movs	r2, #4
 80078b0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d102      	bne.n	80078c0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80078ba:	23fa      	movs	r3, #250	; 0xfa
 80078bc:	76bb      	strb	r3, [r7, #26]
 80078be:	e01d      	b.n	80078fc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d106      	bne.n	80078d8 <tcp_process+0x3e0>
 80078ca:	4b7b      	ldr	r3, [pc, #492]	; (8007ab8 <tcp_process+0x5c0>)
 80078cc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80078d0:	497a      	ldr	r1, [pc, #488]	; (8007abc <tcp_process+0x5c4>)
 80078d2:	487b      	ldr	r0, [pc, #492]	; (8007ac0 <tcp_process+0x5c8>)
 80078d4:	f006 f87e 	bl	800d9d4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00a      	beq.n	80078f8 <tcp_process+0x400>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078e6:	699b      	ldr	r3, [r3, #24]
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	6910      	ldr	r0, [r2, #16]
 80078ec:	2200      	movs	r2, #0
 80078ee:	6879      	ldr	r1, [r7, #4]
 80078f0:	4798      	blx	r3
 80078f2:	4603      	mov	r3, r0
 80078f4:	76bb      	strb	r3, [r7, #26]
 80078f6:	e001      	b.n	80078fc <tcp_process+0x404>
 80078f8:	23f0      	movs	r3, #240	; 0xf0
 80078fa:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80078fc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00a      	beq.n	800791a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8007904:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007908:	f113 0f0d 	cmn.w	r3, #13
 800790c:	d002      	beq.n	8007914 <tcp_process+0x41c>
              tcp_abort(pcb);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f7fd ff90 	bl	8005834 <tcp_abort>
            }
            return ERR_ABRT;
 8007914:	f06f 030c 	mvn.w	r3, #12
 8007918:	e1ce      	b.n	8007cb8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 fae0 	bl	8007ee0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8007920:	4b68      	ldr	r3, [pc, #416]	; (8007ac4 <tcp_process+0x5cc>)
 8007922:	881b      	ldrh	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d005      	beq.n	8007934 <tcp_process+0x43c>
            recv_acked--;
 8007928:	4b66      	ldr	r3, [pc, #408]	; (8007ac4 <tcp_process+0x5cc>)
 800792a:	881b      	ldrh	r3, [r3, #0]
 800792c:	3b01      	subs	r3, #1
 800792e:	b29a      	uxth	r2, r3
 8007930:	4b64      	ldr	r3, [pc, #400]	; (8007ac4 <tcp_process+0x5cc>)
 8007932:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007938:	009a      	lsls	r2, r3, #2
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800793e:	005b      	lsls	r3, r3, #1
 8007940:	f241 111c 	movw	r1, #4380	; 0x111c
 8007944:	428b      	cmp	r3, r1
 8007946:	bf38      	it	cc
 8007948:	460b      	movcc	r3, r1
 800794a:	429a      	cmp	r2, r3
 800794c:	d204      	bcs.n	8007958 <tcp_process+0x460>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	b29b      	uxth	r3, r3
 8007956:	e00d      	b.n	8007974 <tcp_process+0x47c>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800795c:	005b      	lsls	r3, r3, #1
 800795e:	f241 121c 	movw	r2, #4380	; 0x111c
 8007962:	4293      	cmp	r3, r2
 8007964:	d904      	bls.n	8007970 <tcp_process+0x478>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800796a:	005b      	lsls	r3, r3, #1
 800796c:	b29b      	uxth	r3, r3
 800796e:	e001      	b.n	8007974 <tcp_process+0x47c>
 8007970:	f241 131c 	movw	r3, #4380	; 0x111c
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800797a:	4b53      	ldr	r3, [pc, #332]	; (8007ac8 <tcp_process+0x5d0>)
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	f003 0320 	and.w	r3, r3, #32
 8007982:	2b00      	cmp	r3, #0
 8007984:	d037      	beq.n	80079f6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	8b5b      	ldrh	r3, [r3, #26]
 800798a:	f043 0302 	orr.w	r3, r3, #2
 800798e:	b29a      	uxth	r2, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2207      	movs	r2, #7
 8007998:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800799a:	e02c      	b.n	80079f6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800799c:	4b40      	ldr	r3, [pc, #256]	; (8007aa0 <tcp_process+0x5a8>)
 800799e:	6819      	ldr	r1, [r3, #0]
 80079a0:	4b40      	ldr	r3, [pc, #256]	; (8007aa4 <tcp_process+0x5ac>)
 80079a2:	881b      	ldrh	r3, [r3, #0]
 80079a4:	461a      	mov	r2, r3
 80079a6:	4b40      	ldr	r3, [pc, #256]	; (8007aa8 <tcp_process+0x5b0>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80079ac:	4b3f      	ldr	r3, [pc, #252]	; (8007aac <tcp_process+0x5b4>)
 80079ae:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80079b0:	885b      	ldrh	r3, [r3, #2]
 80079b2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80079b4:	4a3d      	ldr	r2, [pc, #244]	; (8007aac <tcp_process+0x5b4>)
 80079b6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80079b8:	8812      	ldrh	r2, [r2, #0]
 80079ba:	b292      	uxth	r2, r2
 80079bc:	9202      	str	r2, [sp, #8]
 80079be:	9301      	str	r3, [sp, #4]
 80079c0:	4b3b      	ldr	r3, [pc, #236]	; (8007ab0 <tcp_process+0x5b8>)
 80079c2:	9300      	str	r3, [sp, #0]
 80079c4:	4b3b      	ldr	r3, [pc, #236]	; (8007ab4 <tcp_process+0x5bc>)
 80079c6:	4602      	mov	r2, r0
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f002 fbcf 	bl	800a16c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80079ce:	e167      	b.n	8007ca0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80079d0:	4b32      	ldr	r3, [pc, #200]	; (8007a9c <tcp_process+0x5a4>)
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	f003 0302 	and.w	r3, r3, #2
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 8161 	beq.w	8007ca0 <tcp_process+0x7a8>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e2:	1e5a      	subs	r2, r3, #1
 80079e4:	4b30      	ldr	r3, [pc, #192]	; (8007aa8 <tcp_process+0x5b0>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	f040 8159 	bne.w	8007ca0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f002 f9b4 	bl	8009d5c <tcp_rexmit>
      break;
 80079f4:	e154      	b.n	8007ca0 <tcp_process+0x7a8>
 80079f6:	e153      	b.n	8007ca0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 fa71 	bl	8007ee0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80079fe:	4b32      	ldr	r3, [pc, #200]	; (8007ac8 <tcp_process+0x5d0>)
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	f003 0320 	and.w	r3, r3, #32
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f000 814c 	beq.w	8007ca4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	8b5b      	ldrh	r3, [r3, #26]
 8007a10:	f043 0302 	orr.w	r3, r3, #2
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2207      	movs	r2, #7
 8007a1e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007a20:	e140      	b.n	8007ca4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 fa5c 	bl	8007ee0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007a28:	4b27      	ldr	r3, [pc, #156]	; (8007ac8 <tcp_process+0x5d0>)
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	f003 0320 	and.w	r3, r3, #32
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d071      	beq.n	8007b18 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007a34:	4b19      	ldr	r3, [pc, #100]	; (8007a9c <tcp_process+0x5a4>)
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	f003 0310 	and.w	r3, r3, #16
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d060      	beq.n	8007b02 <tcp_process+0x60a>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a44:	4b16      	ldr	r3, [pc, #88]	; (8007aa0 <tcp_process+0x5a8>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d15a      	bne.n	8007b02 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d156      	bne.n	8007b02 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	8b5b      	ldrh	r3, [r3, #26]
 8007a58:	f043 0302 	orr.w	r3, r3, #2
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7fe fdbe 	bl	80065e4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8007a68:	4b18      	ldr	r3, [pc, #96]	; (8007acc <tcp_process+0x5d4>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d105      	bne.n	8007a7e <tcp_process+0x586>
 8007a72:	4b16      	ldr	r3, [pc, #88]	; (8007acc <tcp_process+0x5d4>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	4a14      	ldr	r2, [pc, #80]	; (8007acc <tcp_process+0x5d4>)
 8007a7a:	6013      	str	r3, [r2, #0]
 8007a7c:	e02e      	b.n	8007adc <tcp_process+0x5e4>
 8007a7e:	4b13      	ldr	r3, [pc, #76]	; (8007acc <tcp_process+0x5d4>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	617b      	str	r3, [r7, #20]
 8007a84:	e027      	b.n	8007ad6 <tcp_process+0x5de>
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d11f      	bne.n	8007ad0 <tcp_process+0x5d8>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	68da      	ldr	r2, [r3, #12]
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	60da      	str	r2, [r3, #12]
 8007a98:	e020      	b.n	8007adc <tcp_process+0x5e4>
 8007a9a:	bf00      	nop
 8007a9c:	200000f8 	.word	0x200000f8
 8007aa0:	200000f0 	.word	0x200000f0
 8007aa4:	200000f6 	.word	0x200000f6
 8007aa8:	200000ec 	.word	0x200000ec
 8007aac:	200000dc 	.word	0x200000dc
 8007ab0:	20003368 	.word	0x20003368
 8007ab4:	2000336c 	.word	0x2000336c
 8007ab8:	0800ffc4 	.word	0x0800ffc4
 8007abc:	08010264 	.word	0x08010264
 8007ac0:	08010010 	.word	0x08010010
 8007ac4:	200000f4 	.word	0x200000f4
 8007ac8:	200000f9 	.word	0x200000f9
 8007acc:	20008a5c 	.word	0x20008a5c
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	617b      	str	r3, [r7, #20]
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1d4      	bne.n	8007a86 <tcp_process+0x58e>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	60da      	str	r2, [r3, #12]
 8007ae2:	4b77      	ldr	r3, [pc, #476]	; (8007cc0 <tcp_process+0x7c8>)
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	220a      	movs	r2, #10
 8007aec:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8007aee:	4b75      	ldr	r3, [pc, #468]	; (8007cc4 <tcp_process+0x7cc>)
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	60da      	str	r2, [r3, #12]
 8007af6:	4a73      	ldr	r2, [pc, #460]	; (8007cc4 <tcp_process+0x7cc>)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6013      	str	r3, [r2, #0]
 8007afc:	f002 fcf8 	bl	800a4f0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8007b00:	e0d2      	b.n	8007ca8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	8b5b      	ldrh	r3, [r3, #26]
 8007b06:	f043 0302 	orr.w	r3, r3, #2
 8007b0a:	b29a      	uxth	r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2208      	movs	r2, #8
 8007b14:	751a      	strb	r2, [r3, #20]
      break;
 8007b16:	e0c7      	b.n	8007ca8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007b18:	4b6b      	ldr	r3, [pc, #428]	; (8007cc8 <tcp_process+0x7d0>)
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	f003 0310 	and.w	r3, r3, #16
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f000 80c1 	beq.w	8007ca8 <tcp_process+0x7b0>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b2a:	4b68      	ldr	r3, [pc, #416]	; (8007ccc <tcp_process+0x7d4>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	f040 80ba 	bne.w	8007ca8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f040 80b5 	bne.w	8007ca8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2206      	movs	r2, #6
 8007b42:	751a      	strb	r2, [r3, #20]
      break;
 8007b44:	e0b0      	b.n	8007ca8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 f9ca 	bl	8007ee0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007b4c:	4b60      	ldr	r3, [pc, #384]	; (8007cd0 <tcp_process+0x7d8>)
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	f003 0320 	and.w	r3, r3, #32
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f000 80a9 	beq.w	8007cac <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	8b5b      	ldrh	r3, [r3, #26]
 8007b5e:	f043 0302 	orr.w	r3, r3, #2
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f7fe fd3b 	bl	80065e4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007b6e:	4b59      	ldr	r3, [pc, #356]	; (8007cd4 <tcp_process+0x7dc>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d105      	bne.n	8007b84 <tcp_process+0x68c>
 8007b78:	4b56      	ldr	r3, [pc, #344]	; (8007cd4 <tcp_process+0x7dc>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	4a55      	ldr	r2, [pc, #340]	; (8007cd4 <tcp_process+0x7dc>)
 8007b80:	6013      	str	r3, [r2, #0]
 8007b82:	e013      	b.n	8007bac <tcp_process+0x6b4>
 8007b84:	4b53      	ldr	r3, [pc, #332]	; (8007cd4 <tcp_process+0x7dc>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	613b      	str	r3, [r7, #16]
 8007b8a:	e00c      	b.n	8007ba6 <tcp_process+0x6ae>
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d104      	bne.n	8007ba0 <tcp_process+0x6a8>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	68da      	ldr	r2, [r3, #12]
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	60da      	str	r2, [r3, #12]
 8007b9e:	e005      	b.n	8007bac <tcp_process+0x6b4>
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	613b      	str	r3, [r7, #16]
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1ef      	bne.n	8007b8c <tcp_process+0x694>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	60da      	str	r2, [r3, #12]
 8007bb2:	4b43      	ldr	r3, [pc, #268]	; (8007cc0 <tcp_process+0x7c8>)
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	220a      	movs	r2, #10
 8007bbc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007bbe:	4b41      	ldr	r3, [pc, #260]	; (8007cc4 <tcp_process+0x7cc>)
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	60da      	str	r2, [r3, #12]
 8007bc6:	4a3f      	ldr	r2, [pc, #252]	; (8007cc4 <tcp_process+0x7cc>)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6013      	str	r3, [r2, #0]
 8007bcc:	f002 fc90 	bl	800a4f0 <tcp_timer_needed>
      }
      break;
 8007bd0:	e06c      	b.n	8007cac <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 f984 	bl	8007ee0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007bd8:	4b3b      	ldr	r3, [pc, #236]	; (8007cc8 <tcp_process+0x7d0>)
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	f003 0310 	and.w	r3, r3, #16
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d065      	beq.n	8007cb0 <tcp_process+0x7b8>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007be8:	4b38      	ldr	r3, [pc, #224]	; (8007ccc <tcp_process+0x7d4>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d15f      	bne.n	8007cb0 <tcp_process+0x7b8>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d15b      	bne.n	8007cb0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f7fe fcf3 	bl	80065e4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007bfe:	4b35      	ldr	r3, [pc, #212]	; (8007cd4 <tcp_process+0x7dc>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d105      	bne.n	8007c14 <tcp_process+0x71c>
 8007c08:	4b32      	ldr	r3, [pc, #200]	; (8007cd4 <tcp_process+0x7dc>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	4a31      	ldr	r2, [pc, #196]	; (8007cd4 <tcp_process+0x7dc>)
 8007c10:	6013      	str	r3, [r2, #0]
 8007c12:	e013      	b.n	8007c3c <tcp_process+0x744>
 8007c14:	4b2f      	ldr	r3, [pc, #188]	; (8007cd4 <tcp_process+0x7dc>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	60fb      	str	r3, [r7, #12]
 8007c1a:	e00c      	b.n	8007c36 <tcp_process+0x73e>
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d104      	bne.n	8007c30 <tcp_process+0x738>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	68da      	ldr	r2, [r3, #12]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	60da      	str	r2, [r3, #12]
 8007c2e:	e005      	b.n	8007c3c <tcp_process+0x744>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	60fb      	str	r3, [r7, #12]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1ef      	bne.n	8007c1c <tcp_process+0x724>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	60da      	str	r2, [r3, #12]
 8007c42:	4b1f      	ldr	r3, [pc, #124]	; (8007cc0 <tcp_process+0x7c8>)
 8007c44:	2201      	movs	r2, #1
 8007c46:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	220a      	movs	r2, #10
 8007c4c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007c4e:	4b1d      	ldr	r3, [pc, #116]	; (8007cc4 <tcp_process+0x7cc>)
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	60da      	str	r2, [r3, #12]
 8007c56:	4a1b      	ldr	r2, [pc, #108]	; (8007cc4 <tcp_process+0x7cc>)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6013      	str	r3, [r2, #0]
 8007c5c:	f002 fc48 	bl	800a4f0 <tcp_timer_needed>
      }
      break;
 8007c60:	e026      	b.n	8007cb0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f93c 	bl	8007ee0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007c68:	4b17      	ldr	r3, [pc, #92]	; (8007cc8 <tcp_process+0x7d0>)
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	f003 0310 	and.w	r3, r3, #16
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d01f      	beq.n	8007cb4 <tcp_process+0x7bc>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c78:	4b14      	ldr	r3, [pc, #80]	; (8007ccc <tcp_process+0x7d4>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d119      	bne.n	8007cb4 <tcp_process+0x7bc>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d115      	bne.n	8007cb4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8007c88:	4b11      	ldr	r3, [pc, #68]	; (8007cd0 <tcp_process+0x7d8>)
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	f043 0310 	orr.w	r3, r3, #16
 8007c90:	b2da      	uxtb	r2, r3
 8007c92:	4b0f      	ldr	r3, [pc, #60]	; (8007cd0 <tcp_process+0x7d8>)
 8007c94:	701a      	strb	r2, [r3, #0]
      }
      break;
 8007c96:	e00d      	b.n	8007cb4 <tcp_process+0x7bc>
    default:
      break;
 8007c98:	bf00      	nop
 8007c9a:	e00c      	b.n	8007cb6 <tcp_process+0x7be>
      break;
 8007c9c:	bf00      	nop
 8007c9e:	e00a      	b.n	8007cb6 <tcp_process+0x7be>
      break;
 8007ca0:	bf00      	nop
 8007ca2:	e008      	b.n	8007cb6 <tcp_process+0x7be>
      break;
 8007ca4:	bf00      	nop
 8007ca6:	e006      	b.n	8007cb6 <tcp_process+0x7be>
      break;
 8007ca8:	bf00      	nop
 8007caa:	e004      	b.n	8007cb6 <tcp_process+0x7be>
      break;
 8007cac:	bf00      	nop
 8007cae:	e002      	b.n	8007cb6 <tcp_process+0x7be>
      break;
 8007cb0:	bf00      	nop
 8007cb2:	e000      	b.n	8007cb6 <tcp_process+0x7be>
      break;
 8007cb4:	bf00      	nop
  }
  return ERR_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3724      	adds	r7, #36	; 0x24
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd90      	pop	{r4, r7, pc}
 8007cc0:	20008a58 	.word	0x20008a58
 8007cc4:	20008a6c 	.word	0x20008a6c
 8007cc8:	200000f8 	.word	0x200000f8
 8007ccc:	200000f0 	.word	0x200000f0
 8007cd0:	200000f9 	.word	0x200000f9
 8007cd4:	20008a5c 	.word	0x20008a5c

08007cd8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8007cd8:	b590      	push	{r4, r7, lr}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d106      	bne.n	8007cf6 <tcp_oos_insert_segment+0x1e>
 8007ce8:	4b3b      	ldr	r3, [pc, #236]	; (8007dd8 <tcp_oos_insert_segment+0x100>)
 8007cea:	f240 421f 	movw	r2, #1055	; 0x41f
 8007cee:	493b      	ldr	r1, [pc, #236]	; (8007ddc <tcp_oos_insert_segment+0x104>)
 8007cf0:	483b      	ldr	r0, [pc, #236]	; (8007de0 <tcp_oos_insert_segment+0x108>)
 8007cf2:	f005 fe6f 	bl	800d9d4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	899b      	ldrh	r3, [r3, #12]
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7fb fcba 	bl	8003678 <lwip_htons>
 8007d04:	4603      	mov	r3, r0
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	f003 0301 	and.w	r3, r3, #1
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d028      	beq.n	8007d62 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8007d10:	6838      	ldr	r0, [r7, #0]
 8007d12:	f7fe fa65 	bl	80061e0 <tcp_segs_free>
    next = NULL;
 8007d16:	2300      	movs	r3, #0
 8007d18:	603b      	str	r3, [r7, #0]
 8007d1a:	e056      	b.n	8007dca <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	899b      	ldrh	r3, [r3, #12]
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7fb fca7 	bl	8003678 <lwip_htons>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	f003 0301 	and.w	r3, r3, #1
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00d      	beq.n	8007d52 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	899b      	ldrh	r3, [r3, #12]
 8007d3c:	b29c      	uxth	r4, r3
 8007d3e:	2001      	movs	r0, #1
 8007d40:	f7fb fc9a 	bl	8003678 <lwip_htons>
 8007d44:	4603      	mov	r3, r0
 8007d46:	461a      	mov	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	4322      	orrs	r2, r4
 8007d4e:	b292      	uxth	r2, r2
 8007d50:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f7fe fa54 	bl	800620a <tcp_seg_free>
    while (next &&
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00e      	beq.n	8007d86 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	891b      	ldrh	r3, [r3, #8]
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	4b1d      	ldr	r3, [pc, #116]	; (8007de4 <tcp_oos_insert_segment+0x10c>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	441a      	add	r2, r3
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	6839      	ldr	r1, [r7, #0]
 8007d7c:	8909      	ldrh	r1, [r1, #8]
 8007d7e:	440b      	add	r3, r1
 8007d80:	1ad3      	subs	r3, r2, r3
    while (next &&
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	daca      	bge.n	8007d1c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d01e      	beq.n	8007dca <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	891b      	ldrh	r3, [r3, #8]
 8007d90:	461a      	mov	r2, r3
 8007d92:	4b14      	ldr	r3, [pc, #80]	; (8007de4 <tcp_oos_insert_segment+0x10c>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	441a      	add	r2, r3
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	dd12      	ble.n	8007dca <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	4b0d      	ldr	r3, [pc, #52]	; (8007de4 <tcp_oos_insert_segment+0x10c>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	685a      	ldr	r2, [r3, #4]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	891b      	ldrh	r3, [r3, #8]
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	4610      	mov	r0, r2
 8007dc6:	f7fc fd85 	bl	80048d4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	683a      	ldr	r2, [r7, #0]
 8007dce:	601a      	str	r2, [r3, #0]
}
 8007dd0:	bf00      	nop
 8007dd2:	3714      	adds	r7, #20
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd90      	pop	{r4, r7, pc}
 8007dd8:	0800ffc4 	.word	0x0800ffc4
 8007ddc:	08010284 	.word	0x08010284
 8007de0:	08010010 	.word	0x08010010
 8007de4:	200000ec 	.word	0x200000ec

08007de8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8007de8:	b5b0      	push	{r4, r5, r7, lr}
 8007dea:	b086      	sub	sp, #24
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	607a      	str	r2, [r7, #4]
 8007df4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8007df6:	e03e      	b.n	8007e76 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7fc ff72 	bl	8004cf0 <pbuf_clen>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007e16:	8a7a      	ldrh	r2, [r7, #18]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d906      	bls.n	8007e2a <tcp_free_acked_segments+0x42>
 8007e1c:	4b2a      	ldr	r3, [pc, #168]	; (8007ec8 <tcp_free_acked_segments+0xe0>)
 8007e1e:	f240 4257 	movw	r2, #1111	; 0x457
 8007e22:	492a      	ldr	r1, [pc, #168]	; (8007ecc <tcp_free_acked_segments+0xe4>)
 8007e24:	482a      	ldr	r0, [pc, #168]	; (8007ed0 <tcp_free_acked_segments+0xe8>)
 8007e26:	f005 fdd5 	bl	800d9d4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8007e30:	8a7b      	ldrh	r3, [r7, #18]
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	891a      	ldrh	r2, [r3, #8]
 8007e40:	4b24      	ldr	r3, [pc, #144]	; (8007ed4 <tcp_free_acked_segments+0xec>)
 8007e42:	881b      	ldrh	r3, [r3, #0]
 8007e44:	4413      	add	r3, r2
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	4b22      	ldr	r3, [pc, #136]	; (8007ed4 <tcp_free_acked_segments+0xec>)
 8007e4a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8007e4c:	6978      	ldr	r0, [r7, #20]
 8007e4e:	f7fe f9dc 	bl	800620a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00c      	beq.n	8007e76 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d109      	bne.n	8007e76 <tcp_free_acked_segments+0x8e>
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d106      	bne.n	8007e76 <tcp_free_acked_segments+0x8e>
 8007e68:	4b17      	ldr	r3, [pc, #92]	; (8007ec8 <tcp_free_acked_segments+0xe0>)
 8007e6a:	f240 4261 	movw	r2, #1121	; 0x461
 8007e6e:	491a      	ldr	r1, [pc, #104]	; (8007ed8 <tcp_free_acked_segments+0xf0>)
 8007e70:	4817      	ldr	r0, [pc, #92]	; (8007ed0 <tcp_free_acked_segments+0xe8>)
 8007e72:	f005 fdaf 	bl	800d9d4 <iprintf>
  while (seg_list != NULL &&
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d020      	beq.n	8007ebe <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7fb fc0d 	bl	80036a2 <lwip_htonl>
 8007e88:	4604      	mov	r4, r0
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	891b      	ldrh	r3, [r3, #8]
 8007e8e:	461d      	mov	r5, r3
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	899b      	ldrh	r3, [r3, #12]
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7fb fbed 	bl	8003678 <lwip_htons>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	f003 0303 	and.w	r3, r3, #3
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d001      	beq.n	8007eae <tcp_free_acked_segments+0xc6>
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e000      	b.n	8007eb0 <tcp_free_acked_segments+0xc8>
 8007eae:	2300      	movs	r3, #0
 8007eb0:	442b      	add	r3, r5
 8007eb2:	18e2      	adds	r2, r4, r3
 8007eb4:	4b09      	ldr	r3, [pc, #36]	; (8007edc <tcp_free_acked_segments+0xf4>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	dd9c      	ble.n	8007df8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8007ebe:	68bb      	ldr	r3, [r7, #8]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3718      	adds	r7, #24
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bdb0      	pop	{r4, r5, r7, pc}
 8007ec8:	0800ffc4 	.word	0x0800ffc4
 8007ecc:	080102ac 	.word	0x080102ac
 8007ed0:	08010010 	.word	0x08010010
 8007ed4:	200000f4 	.word	0x200000f4
 8007ed8:	080102d4 	.word	0x080102d4
 8007edc:	200000f0 	.word	0x200000f0

08007ee0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8007ee0:	b5b0      	push	{r4, r5, r7, lr}
 8007ee2:	b094      	sub	sp, #80	; 0x50
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d106      	bne.n	8007f00 <tcp_receive+0x20>
 8007ef2:	4ba6      	ldr	r3, [pc, #664]	; (800818c <tcp_receive+0x2ac>)
 8007ef4:	f240 427b 	movw	r2, #1147	; 0x47b
 8007ef8:	49a5      	ldr	r1, [pc, #660]	; (8008190 <tcp_receive+0x2b0>)
 8007efa:	48a6      	ldr	r0, [pc, #664]	; (8008194 <tcp_receive+0x2b4>)
 8007efc:	f005 fd6a 	bl	800d9d4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	7d1b      	ldrb	r3, [r3, #20]
 8007f04:	2b03      	cmp	r3, #3
 8007f06:	d806      	bhi.n	8007f16 <tcp_receive+0x36>
 8007f08:	4ba0      	ldr	r3, [pc, #640]	; (800818c <tcp_receive+0x2ac>)
 8007f0a:	f240 427c 	movw	r2, #1148	; 0x47c
 8007f0e:	49a2      	ldr	r1, [pc, #648]	; (8008198 <tcp_receive+0x2b8>)
 8007f10:	48a0      	ldr	r0, [pc, #640]	; (8008194 <tcp_receive+0x2b4>)
 8007f12:	f005 fd5f 	bl	800d9d4 <iprintf>

  if (flags & TCP_ACK) {
 8007f16:	4ba1      	ldr	r3, [pc, #644]	; (800819c <tcp_receive+0x2bc>)
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	f003 0310 	and.w	r3, r3, #16
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f000 8263 	beq.w	80083ea <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f30:	4413      	add	r3, r2
 8007f32:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f38:	4b99      	ldr	r3, [pc, #612]	; (80081a0 <tcp_receive+0x2c0>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	db1b      	blt.n	8007f7a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f46:	4b96      	ldr	r3, [pc, #600]	; (80081a0 <tcp_receive+0x2c0>)
 8007f48:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d106      	bne.n	8007f5c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007f52:	4b94      	ldr	r3, [pc, #592]	; (80081a4 <tcp_receive+0x2c4>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	1ad3      	subs	r3, r2, r3
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	db0e      	blt.n	8007f7a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007f60:	4b90      	ldr	r3, [pc, #576]	; (80081a4 <tcp_receive+0x2c4>)
 8007f62:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d125      	bne.n	8007fb4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8007f68:	4b8f      	ldr	r3, [pc, #572]	; (80081a8 <tcp_receive+0x2c8>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	89db      	ldrh	r3, [r3, #14]
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d91c      	bls.n	8007fb4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8007f7a:	4b8b      	ldr	r3, [pc, #556]	; (80081a8 <tcp_receive+0x2c8>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	89db      	ldrh	r3, [r3, #14]
 8007f80:	b29a      	uxth	r2, r3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d205      	bcs.n	8007fa4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8007fa4:	4b7e      	ldr	r3, [pc, #504]	; (80081a0 <tcp_receive+0x2c0>)
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8007fac:	4b7d      	ldr	r3, [pc, #500]	; (80081a4 <tcp_receive+0x2c4>)
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8007fb4:	4b7b      	ldr	r3, [pc, #492]	; (80081a4 <tcp_receive+0x2c4>)
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	dc58      	bgt.n	8008074 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8007fc2:	4b7a      	ldr	r3, [pc, #488]	; (80081ac <tcp_receive+0x2cc>)
 8007fc4:	881b      	ldrh	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d14b      	bne.n	8008062 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8007fd4:	4413      	add	r3, r2
 8007fd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d142      	bne.n	8008062 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	db3d      	blt.n	8008062 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fea:	4b6e      	ldr	r3, [pc, #440]	; (80081a4 <tcp_receive+0x2c4>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d137      	bne.n	8008062 <tcp_receive+0x182>
              found_dupack = 1;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007ffc:	2bff      	cmp	r3, #255	; 0xff
 8007ffe:	d007      	beq.n	8008010 <tcp_receive+0x130>
                ++pcb->dupacks;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008006:	3301      	adds	r3, #1
 8008008:	b2da      	uxtb	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008016:	2b03      	cmp	r3, #3
 8008018:	d91b      	bls.n	8008052 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008024:	4413      	add	r3, r2
 8008026:	b29a      	uxth	r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800802e:	429a      	cmp	r2, r3
 8008030:	d30a      	bcc.n	8008048 <tcp_receive+0x168>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800803c:	4413      	add	r3, r2
 800803e:	b29a      	uxth	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008046:	e004      	b.n	8008052 <tcp_receive+0x172>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800804e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008058:	2b02      	cmp	r3, #2
 800805a:	d902      	bls.n	8008062 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f001 fee9 	bl	8009e34 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008064:	2b00      	cmp	r3, #0
 8008066:	f040 8160 	bne.w	800832a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008072:	e15a      	b.n	800832a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008074:	4b4b      	ldr	r3, [pc, #300]	; (80081a4 <tcp_receive+0x2c4>)
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800807c:	1ad3      	subs	r3, r2, r3
 800807e:	3b01      	subs	r3, #1
 8008080:	2b00      	cmp	r3, #0
 8008082:	f2c0 814d 	blt.w	8008320 <tcp_receive+0x440>
 8008086:	4b47      	ldr	r3, [pc, #284]	; (80081a4 <tcp_receive+0x2c4>)
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800808e:	1ad3      	subs	r3, r2, r3
 8008090:	2b00      	cmp	r3, #0
 8008092:	f300 8145 	bgt.w	8008320 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	8b5b      	ldrh	r3, [r3, #26]
 800809a:	f003 0304 	and.w	r3, r3, #4
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d010      	beq.n	80080c4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	8b5b      	ldrh	r3, [r3, #26]
 80080a6:	f023 0304 	bic.w	r3, r3, #4
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80080d2:	10db      	asrs	r3, r3, #3
 80080d4:	b21b      	sxth	r3, r3
 80080d6:	b29a      	uxth	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80080de:	b29b      	uxth	r3, r3
 80080e0:	4413      	add	r3, r2
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	b21a      	sxth	r2, r3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80080ec:	4b2d      	ldr	r3, [pc, #180]	; (80081a4 <tcp_receive+0x2c4>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	b29a      	uxth	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	1ad3      	subs	r3, r2, r3
 80080fa:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8008104:	4b27      	ldr	r3, [pc, #156]	; (80081a4 <tcp_receive+0x2c4>)
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	7d1b      	ldrb	r3, [r3, #20]
 8008110:	2b03      	cmp	r3, #3
 8008112:	f240 8096 	bls.w	8008242 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8008122:	429a      	cmp	r2, r3
 8008124:	d244      	bcs.n	80081b0 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	8b5b      	ldrh	r3, [r3, #26]
 800812a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800812e:	2b00      	cmp	r3, #0
 8008130:	d001      	beq.n	8008136 <tcp_receive+0x256>
 8008132:	2301      	movs	r3, #1
 8008134:	e000      	b.n	8008138 <tcp_receive+0x258>
 8008136:	2302      	movs	r3, #2
 8008138:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800813c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008140:	b29a      	uxth	r2, r3
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008146:	fb12 f303 	smulbb	r3, r2, r3
 800814a:	b29b      	uxth	r3, r3
 800814c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800814e:	4293      	cmp	r3, r2
 8008150:	bf28      	it	cs
 8008152:	4613      	movcs	r3, r2
 8008154:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800815c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800815e:	4413      	add	r3, r2
 8008160:	b29a      	uxth	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008168:	429a      	cmp	r2, r3
 800816a:	d309      	bcc.n	8008180 <tcp_receive+0x2a0>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008172:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008174:	4413      	add	r3, r2
 8008176:	b29a      	uxth	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800817e:	e060      	b.n	8008242 <tcp_receive+0x362>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008186:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800818a:	e05a      	b.n	8008242 <tcp_receive+0x362>
 800818c:	0800ffc4 	.word	0x0800ffc4
 8008190:	080102f4 	.word	0x080102f4
 8008194:	08010010 	.word	0x08010010
 8008198:	08010310 	.word	0x08010310
 800819c:	200000f8 	.word	0x200000f8
 80081a0:	200000ec 	.word	0x200000ec
 80081a4:	200000f0 	.word	0x200000f0
 80081a8:	200000dc 	.word	0x200000dc
 80081ac:	200000f6 	.word	0x200000f6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80081b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80081b8:	4413      	add	r3, r2
 80081ba:	b29a      	uxth	r2, r3
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d309      	bcc.n	80081da <tcp_receive+0x2fa>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80081cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80081ce:	4413      	add	r3, r2
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80081d8:	e004      	b.n	80081e4 <tcp_receive+0x304>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d326      	bcc.n	8008242 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	b29a      	uxth	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008214:	4413      	add	r3, r2
 8008216:	b29a      	uxth	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800821e:	429a      	cmp	r2, r3
 8008220:	d30a      	bcc.n	8008238 <tcp_receive+0x358>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800822c:	4413      	add	r3, r2
 800822e:	b29a      	uxth	r2, r3
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008236:	e004      	b.n	8008242 <tcp_receive+0x362>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800823e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800824a:	4a98      	ldr	r2, [pc, #608]	; (80084ac <tcp_receive+0x5cc>)
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f7ff fdcb 	bl	8007de8 <tcp_free_acked_segments>
 8008252:	4602      	mov	r2, r0
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008260:	4a93      	ldr	r2, [pc, #588]	; (80084b0 <tcp_receive+0x5d0>)
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f7ff fdc0 	bl	8007de8 <tcp_free_acked_segments>
 8008268:	4602      	mov	r2, r0
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008272:	2b00      	cmp	r3, #0
 8008274:	d104      	bne.n	8008280 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800827c:	861a      	strh	r2, [r3, #48]	; 0x30
 800827e:	e002      	b.n	8008286 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008290:	2b00      	cmp	r3, #0
 8008292:	d103      	bne.n	800829c <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80082a2:	4b84      	ldr	r3, [pc, #528]	; (80084b4 <tcp_receive+0x5d4>)
 80082a4:	881b      	ldrh	r3, [r3, #0]
 80082a6:	4413      	add	r3, r2
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	8b5b      	ldrh	r3, [r3, #26]
 80082b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d035      	beq.n	8008328 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d118      	bne.n	80082f6 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00c      	beq.n	80082e6 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	4618      	mov	r0, r3
 80082da:	f7fb f9e2 	bl	80036a2 <lwip_htonl>
 80082de:	4603      	mov	r3, r0
 80082e0:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	dc20      	bgt.n	8008328 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	8b5b      	ldrh	r3, [r3, #26]
 80082ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80082f4:	e018      	b.n	8008328 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	4618      	mov	r0, r3
 8008304:	f7fb f9cd 	bl	80036a2 <lwip_htonl>
 8008308:	4603      	mov	r3, r0
 800830a:	1ae3      	subs	r3, r4, r3
 800830c:	2b00      	cmp	r3, #0
 800830e:	dc0b      	bgt.n	8008328 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	8b5b      	ldrh	r3, [r3, #26]
 8008314:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008318:	b29a      	uxth	r2, r3
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800831e:	e003      	b.n	8008328 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f001 ff75 	bl	800a210 <tcp_send_empty_ack>
 8008326:	e000      	b.n	800832a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008328:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800832e:	2b00      	cmp	r3, #0
 8008330:	d05b      	beq.n	80083ea <tcp_receive+0x50a>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008336:	4b60      	ldr	r3, [pc, #384]	; (80084b8 <tcp_receive+0x5d8>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	2b00      	cmp	r3, #0
 800833e:	da54      	bge.n	80083ea <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008340:	4b5e      	ldr	r3, [pc, #376]	; (80084bc <tcp_receive+0x5dc>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	b29a      	uxth	r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800834a:	b29b      	uxth	r3, r3
 800834c:	1ad3      	subs	r3, r2, r3
 800834e:	b29b      	uxth	r3, r3
 8008350:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8008354:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800835e:	10db      	asrs	r3, r3, #3
 8008360:	b21b      	sxth	r3, r3
 8008362:	b29b      	uxth	r3, r3
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	b29b      	uxth	r3, r3
 8008368:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008372:	b29a      	uxth	r2, r3
 8008374:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008378:	4413      	add	r3, r2
 800837a:	b29b      	uxth	r3, r3
 800837c:	b21a      	sxth	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8008382:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8008386:	2b00      	cmp	r3, #0
 8008388:	da05      	bge.n	8008396 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800838a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800838e:	425b      	negs	r3, r3
 8008390:	b29b      	uxth	r3, r3
 8008392:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8008396:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80083a0:	109b      	asrs	r3, r3, #2
 80083a2:	b21b      	sxth	r3, r3
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80083b4:	b29a      	uxth	r2, r3
 80083b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80083ba:	4413      	add	r3, r2
 80083bc:	b29b      	uxth	r3, r3
 80083be:	b21a      	sxth	r2, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80083ca:	10db      	asrs	r3, r3, #3
 80083cc:	b21b      	sxth	r3, r3
 80083ce:	b29a      	uxth	r2, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	4413      	add	r3, r2
 80083da:	b29b      	uxth	r3, r3
 80083dc:	b21a      	sxth	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80083ea:	4b35      	ldr	r3, [pc, #212]	; (80084c0 <tcp_receive+0x5e0>)
 80083ec:	881b      	ldrh	r3, [r3, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f000 84e1 	beq.w	8008db6 <tcp_receive+0xed6>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	7d1b      	ldrb	r3, [r3, #20]
 80083f8:	2b06      	cmp	r3, #6
 80083fa:	f200 84dc 	bhi.w	8008db6 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008402:	4b30      	ldr	r3, [pc, #192]	; (80084c4 <tcp_receive+0x5e4>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	1ad3      	subs	r3, r2, r3
 8008408:	3b01      	subs	r3, #1
 800840a:	2b00      	cmp	r3, #0
 800840c:	f2c0 808e 	blt.w	800852c <tcp_receive+0x64c>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008414:	4b2a      	ldr	r3, [pc, #168]	; (80084c0 <tcp_receive+0x5e0>)
 8008416:	881b      	ldrh	r3, [r3, #0]
 8008418:	4619      	mov	r1, r3
 800841a:	4b2a      	ldr	r3, [pc, #168]	; (80084c4 <tcp_receive+0x5e4>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	440b      	add	r3, r1
 8008420:	1ad3      	subs	r3, r2, r3
 8008422:	3301      	adds	r3, #1
 8008424:	2b00      	cmp	r3, #0
 8008426:	f300 8081 	bgt.w	800852c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800842a:	4b27      	ldr	r3, [pc, #156]	; (80084c8 <tcp_receive+0x5e8>)
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008434:	4b23      	ldr	r3, [pc, #140]	; (80084c4 <tcp_receive+0x5e4>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	1ad3      	subs	r3, r2, r3
 800843a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800843c:	4b22      	ldr	r3, [pc, #136]	; (80084c8 <tcp_receive+0x5e8>)
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d106      	bne.n	8008452 <tcp_receive+0x572>
 8008444:	4b21      	ldr	r3, [pc, #132]	; (80084cc <tcp_receive+0x5ec>)
 8008446:	f240 5294 	movw	r2, #1428	; 0x594
 800844a:	4921      	ldr	r1, [pc, #132]	; (80084d0 <tcp_receive+0x5f0>)
 800844c:	4821      	ldr	r0, [pc, #132]	; (80084d4 <tcp_receive+0x5f4>)
 800844e:	f005 fac1 	bl	800d9d4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8008452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008454:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008458:	4293      	cmp	r3, r2
 800845a:	d906      	bls.n	800846a <tcp_receive+0x58a>
 800845c:	4b1b      	ldr	r3, [pc, #108]	; (80084cc <tcp_receive+0x5ec>)
 800845e:	f240 5295 	movw	r2, #1429	; 0x595
 8008462:	491d      	ldr	r1, [pc, #116]	; (80084d8 <tcp_receive+0x5f8>)
 8008464:	481b      	ldr	r0, [pc, #108]	; (80084d4 <tcp_receive+0x5f4>)
 8008466:	f005 fab5 	bl	800d9d4 <iprintf>
      off = (u16_t)off32;
 800846a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008470:	4b15      	ldr	r3, [pc, #84]	; (80084c8 <tcp_receive+0x5e8>)
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	891b      	ldrh	r3, [r3, #8]
 8008476:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800847a:	429a      	cmp	r2, r3
 800847c:	d906      	bls.n	800848c <tcp_receive+0x5ac>
 800847e:	4b13      	ldr	r3, [pc, #76]	; (80084cc <tcp_receive+0x5ec>)
 8008480:	f240 5297 	movw	r2, #1431	; 0x597
 8008484:	4915      	ldr	r1, [pc, #84]	; (80084dc <tcp_receive+0x5fc>)
 8008486:	4813      	ldr	r0, [pc, #76]	; (80084d4 <tcp_receive+0x5f4>)
 8008488:	f005 faa4 	bl	800d9d4 <iprintf>
      inseg.len -= off;
 800848c:	4b0e      	ldr	r3, [pc, #56]	; (80084c8 <tcp_receive+0x5e8>)
 800848e:	891a      	ldrh	r2, [r3, #8]
 8008490:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008494:	1ad3      	subs	r3, r2, r3
 8008496:	b29a      	uxth	r2, r3
 8008498:	4b0b      	ldr	r3, [pc, #44]	; (80084c8 <tcp_receive+0x5e8>)
 800849a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800849c:	4b0a      	ldr	r3, [pc, #40]	; (80084c8 <tcp_receive+0x5e8>)
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	891a      	ldrh	r2, [r3, #8]
 80084a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80084a6:	1ad3      	subs	r3, r2, r3
 80084a8:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80084aa:	e029      	b.n	8008500 <tcp_receive+0x620>
 80084ac:	0801032c 	.word	0x0801032c
 80084b0:	08010334 	.word	0x08010334
 80084b4:	200000f4 	.word	0x200000f4
 80084b8:	200000f0 	.word	0x200000f0
 80084bc:	20008a60 	.word	0x20008a60
 80084c0:	200000f6 	.word	0x200000f6
 80084c4:	200000ec 	.word	0x200000ec
 80084c8:	200000cc 	.word	0x200000cc
 80084cc:	0800ffc4 	.word	0x0800ffc4
 80084d0:	0801033c 	.word	0x0801033c
 80084d4:	08010010 	.word	0x08010010
 80084d8:	0801034c 	.word	0x0801034c
 80084dc:	0801035c 	.word	0x0801035c
        off -= p->len;
 80084e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084e2:	895b      	ldrh	r3, [r3, #10]
 80084e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80084e8:	1ad3      	subs	r3, r2, r3
 80084ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80084ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084f0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80084f2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80084f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084f6:	2200      	movs	r2, #0
 80084f8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80084fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8008500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008502:	895b      	ldrh	r3, [r3, #10]
 8008504:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008508:	429a      	cmp	r2, r3
 800850a:	d8e9      	bhi.n	80084e0 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800850c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008510:	4619      	mov	r1, r3
 8008512:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008514:	f7fc fade 	bl	8004ad4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851c:	4a91      	ldr	r2, [pc, #580]	; (8008764 <tcp_receive+0x884>)
 800851e:	6013      	str	r3, [r2, #0]
 8008520:	4b91      	ldr	r3, [pc, #580]	; (8008768 <tcp_receive+0x888>)
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	4a8f      	ldr	r2, [pc, #572]	; (8008764 <tcp_receive+0x884>)
 8008526:	6812      	ldr	r2, [r2, #0]
 8008528:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800852a:	e00d      	b.n	8008548 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800852c:	4b8d      	ldr	r3, [pc, #564]	; (8008764 <tcp_receive+0x884>)
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	2b00      	cmp	r3, #0
 8008538:	da06      	bge.n	8008548 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	8b5b      	ldrh	r3, [r3, #26]
 800853e:	f043 0302 	orr.w	r3, r3, #2
 8008542:	b29a      	uxth	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008548:	4b86      	ldr	r3, [pc, #536]	; (8008764 <tcp_receive+0x884>)
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008550:	1ad3      	subs	r3, r2, r3
 8008552:	2b00      	cmp	r3, #0
 8008554:	f2c0 842a 	blt.w	8008dac <tcp_receive+0xecc>
 8008558:	4b82      	ldr	r3, [pc, #520]	; (8008764 <tcp_receive+0x884>)
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008560:	6879      	ldr	r1, [r7, #4]
 8008562:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008564:	440b      	add	r3, r1
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	3301      	adds	r3, #1
 800856a:	2b00      	cmp	r3, #0
 800856c:	f300 841e 	bgt.w	8008dac <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008574:	4b7b      	ldr	r3, [pc, #492]	; (8008764 <tcp_receive+0x884>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	429a      	cmp	r2, r3
 800857a:	f040 829a 	bne.w	8008ab2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800857e:	4b7a      	ldr	r3, [pc, #488]	; (8008768 <tcp_receive+0x888>)
 8008580:	891c      	ldrh	r4, [r3, #8]
 8008582:	4b79      	ldr	r3, [pc, #484]	; (8008768 <tcp_receive+0x888>)
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	899b      	ldrh	r3, [r3, #12]
 8008588:	b29b      	uxth	r3, r3
 800858a:	4618      	mov	r0, r3
 800858c:	f7fb f874 	bl	8003678 <lwip_htons>
 8008590:	4603      	mov	r3, r0
 8008592:	b2db      	uxtb	r3, r3
 8008594:	f003 0303 	and.w	r3, r3, #3
 8008598:	2b00      	cmp	r3, #0
 800859a:	d001      	beq.n	80085a0 <tcp_receive+0x6c0>
 800859c:	2301      	movs	r3, #1
 800859e:	e000      	b.n	80085a2 <tcp_receive+0x6c2>
 80085a0:	2300      	movs	r3, #0
 80085a2:	4423      	add	r3, r4
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	4b71      	ldr	r3, [pc, #452]	; (800876c <tcp_receive+0x88c>)
 80085a8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80085ae:	4b6f      	ldr	r3, [pc, #444]	; (800876c <tcp_receive+0x88c>)
 80085b0:	881b      	ldrh	r3, [r3, #0]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d275      	bcs.n	80086a2 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80085b6:	4b6c      	ldr	r3, [pc, #432]	; (8008768 <tcp_receive+0x888>)
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	899b      	ldrh	r3, [r3, #12]
 80085bc:	b29b      	uxth	r3, r3
 80085be:	4618      	mov	r0, r3
 80085c0:	f7fb f85a 	bl	8003678 <lwip_htons>
 80085c4:	4603      	mov	r3, r0
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	f003 0301 	and.w	r3, r3, #1
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d01f      	beq.n	8008610 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80085d0:	4b65      	ldr	r3, [pc, #404]	; (8008768 <tcp_receive+0x888>)
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	899b      	ldrh	r3, [r3, #12]
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	b21b      	sxth	r3, r3
 80085da:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80085de:	b21c      	sxth	r4, r3
 80085e0:	4b61      	ldr	r3, [pc, #388]	; (8008768 <tcp_receive+0x888>)
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	899b      	ldrh	r3, [r3, #12]
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7fb f845 	bl	8003678 <lwip_htons>
 80085ee:	4603      	mov	r3, r0
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7fb f83c 	bl	8003678 <lwip_htons>
 8008600:	4603      	mov	r3, r0
 8008602:	b21b      	sxth	r3, r3
 8008604:	4323      	orrs	r3, r4
 8008606:	b21a      	sxth	r2, r3
 8008608:	4b57      	ldr	r3, [pc, #348]	; (8008768 <tcp_receive+0x888>)
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	b292      	uxth	r2, r2
 800860e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008614:	4b54      	ldr	r3, [pc, #336]	; (8008768 <tcp_receive+0x888>)
 8008616:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008618:	4b53      	ldr	r3, [pc, #332]	; (8008768 <tcp_receive+0x888>)
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	899b      	ldrh	r3, [r3, #12]
 800861e:	b29b      	uxth	r3, r3
 8008620:	4618      	mov	r0, r3
 8008622:	f7fb f829 	bl	8003678 <lwip_htons>
 8008626:	4603      	mov	r3, r0
 8008628:	b2db      	uxtb	r3, r3
 800862a:	f003 0302 	and.w	r3, r3, #2
 800862e:	2b00      	cmp	r3, #0
 8008630:	d005      	beq.n	800863e <tcp_receive+0x75e>
            inseg.len -= 1;
 8008632:	4b4d      	ldr	r3, [pc, #308]	; (8008768 <tcp_receive+0x888>)
 8008634:	891b      	ldrh	r3, [r3, #8]
 8008636:	3b01      	subs	r3, #1
 8008638:	b29a      	uxth	r2, r3
 800863a:	4b4b      	ldr	r3, [pc, #300]	; (8008768 <tcp_receive+0x888>)
 800863c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800863e:	4b4a      	ldr	r3, [pc, #296]	; (8008768 <tcp_receive+0x888>)
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	4a49      	ldr	r2, [pc, #292]	; (8008768 <tcp_receive+0x888>)
 8008644:	8912      	ldrh	r2, [r2, #8]
 8008646:	4611      	mov	r1, r2
 8008648:	4618      	mov	r0, r3
 800864a:	f7fc f943 	bl	80048d4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800864e:	4b46      	ldr	r3, [pc, #280]	; (8008768 <tcp_receive+0x888>)
 8008650:	891c      	ldrh	r4, [r3, #8]
 8008652:	4b45      	ldr	r3, [pc, #276]	; (8008768 <tcp_receive+0x888>)
 8008654:	68db      	ldr	r3, [r3, #12]
 8008656:	899b      	ldrh	r3, [r3, #12]
 8008658:	b29b      	uxth	r3, r3
 800865a:	4618      	mov	r0, r3
 800865c:	f7fb f80c 	bl	8003678 <lwip_htons>
 8008660:	4603      	mov	r3, r0
 8008662:	b2db      	uxtb	r3, r3
 8008664:	f003 0303 	and.w	r3, r3, #3
 8008668:	2b00      	cmp	r3, #0
 800866a:	d001      	beq.n	8008670 <tcp_receive+0x790>
 800866c:	2301      	movs	r3, #1
 800866e:	e000      	b.n	8008672 <tcp_receive+0x792>
 8008670:	2300      	movs	r3, #0
 8008672:	4423      	add	r3, r4
 8008674:	b29a      	uxth	r2, r3
 8008676:	4b3d      	ldr	r3, [pc, #244]	; (800876c <tcp_receive+0x88c>)
 8008678:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800867a:	4b3c      	ldr	r3, [pc, #240]	; (800876c <tcp_receive+0x88c>)
 800867c:	881b      	ldrh	r3, [r3, #0]
 800867e:	461a      	mov	r2, r3
 8008680:	4b38      	ldr	r3, [pc, #224]	; (8008764 <tcp_receive+0x884>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	441a      	add	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868a:	6879      	ldr	r1, [r7, #4]
 800868c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800868e:	440b      	add	r3, r1
 8008690:	429a      	cmp	r2, r3
 8008692:	d006      	beq.n	80086a2 <tcp_receive+0x7c2>
 8008694:	4b36      	ldr	r3, [pc, #216]	; (8008770 <tcp_receive+0x890>)
 8008696:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800869a:	4936      	ldr	r1, [pc, #216]	; (8008774 <tcp_receive+0x894>)
 800869c:	4836      	ldr	r0, [pc, #216]	; (8008778 <tcp_receive+0x898>)
 800869e:	f005 f999 	bl	800d9d4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f000 80e7 	beq.w	800887a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80086ac:	4b2e      	ldr	r3, [pc, #184]	; (8008768 <tcp_receive+0x888>)
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	899b      	ldrh	r3, [r3, #12]
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7fa ffdf 	bl	8003678 <lwip_htons>
 80086ba:	4603      	mov	r3, r0
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	f003 0301 	and.w	r3, r3, #1
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d010      	beq.n	80086e8 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80086c6:	e00a      	b.n	80086de <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086cc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f7fd fd96 	bl	800620a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d1f0      	bne.n	80086c8 <tcp_receive+0x7e8>
 80086e6:	e0c8      	b.n	800887a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086ec:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80086ee:	e052      	b.n	8008796 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80086f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	899b      	ldrh	r3, [r3, #12]
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7fa ffbd 	bl	8003678 <lwip_htons>
 80086fe:	4603      	mov	r3, r0
 8008700:	b2db      	uxtb	r3, r3
 8008702:	f003 0301 	and.w	r3, r3, #1
 8008706:	2b00      	cmp	r3, #0
 8008708:	d03d      	beq.n	8008786 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800870a:	4b17      	ldr	r3, [pc, #92]	; (8008768 <tcp_receive+0x888>)
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	899b      	ldrh	r3, [r3, #12]
 8008710:	b29b      	uxth	r3, r3
 8008712:	4618      	mov	r0, r3
 8008714:	f7fa ffb0 	bl	8003678 <lwip_htons>
 8008718:	4603      	mov	r3, r0
 800871a:	b2db      	uxtb	r3, r3
 800871c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008720:	2b00      	cmp	r3, #0
 8008722:	d130      	bne.n	8008786 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008724:	4b10      	ldr	r3, [pc, #64]	; (8008768 <tcp_receive+0x888>)
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	899b      	ldrh	r3, [r3, #12]
 800872a:	b29c      	uxth	r4, r3
 800872c:	2001      	movs	r0, #1
 800872e:	f7fa ffa3 	bl	8003678 <lwip_htons>
 8008732:	4603      	mov	r3, r0
 8008734:	461a      	mov	r2, r3
 8008736:	4b0c      	ldr	r3, [pc, #48]	; (8008768 <tcp_receive+0x888>)
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	4322      	orrs	r2, r4
 800873c:	b292      	uxth	r2, r2
 800873e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8008740:	4b09      	ldr	r3, [pc, #36]	; (8008768 <tcp_receive+0x888>)
 8008742:	891c      	ldrh	r4, [r3, #8]
 8008744:	4b08      	ldr	r3, [pc, #32]	; (8008768 <tcp_receive+0x888>)
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	899b      	ldrh	r3, [r3, #12]
 800874a:	b29b      	uxth	r3, r3
 800874c:	4618      	mov	r0, r3
 800874e:	f7fa ff93 	bl	8003678 <lwip_htons>
 8008752:	4603      	mov	r3, r0
 8008754:	b2db      	uxtb	r3, r3
 8008756:	f003 0303 	and.w	r3, r3, #3
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00e      	beq.n	800877c <tcp_receive+0x89c>
 800875e:	2301      	movs	r3, #1
 8008760:	e00d      	b.n	800877e <tcp_receive+0x89e>
 8008762:	bf00      	nop
 8008764:	200000ec 	.word	0x200000ec
 8008768:	200000cc 	.word	0x200000cc
 800876c:	200000f6 	.word	0x200000f6
 8008770:	0800ffc4 	.word	0x0800ffc4
 8008774:	0801036c 	.word	0x0801036c
 8008778:	08010010 	.word	0x08010010
 800877c:	2300      	movs	r3, #0
 800877e:	4423      	add	r3, r4
 8008780:	b29a      	uxth	r2, r3
 8008782:	4b98      	ldr	r3, [pc, #608]	; (80089e4 <tcp_receive+0xb04>)
 8008784:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8008786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008788:	613b      	str	r3, [r7, #16]
              next = next->next;
 800878a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8008790:	6938      	ldr	r0, [r7, #16]
 8008792:	f7fd fd3a 	bl	800620a <tcp_seg_free>
            while (next &&
 8008796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00e      	beq.n	80087ba <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800879c:	4b91      	ldr	r3, [pc, #580]	; (80089e4 <tcp_receive+0xb04>)
 800879e:	881b      	ldrh	r3, [r3, #0]
 80087a0:	461a      	mov	r2, r3
 80087a2:	4b91      	ldr	r3, [pc, #580]	; (80089e8 <tcp_receive+0xb08>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	441a      	add	r2, r3
 80087a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80087b0:	8909      	ldrh	r1, [r1, #8]
 80087b2:	440b      	add	r3, r1
 80087b4:	1ad3      	subs	r3, r2, r3
            while (next &&
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	da9a      	bge.n	80086f0 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80087ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d059      	beq.n	8008874 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80087c0:	4b88      	ldr	r3, [pc, #544]	; (80089e4 <tcp_receive+0xb04>)
 80087c2:	881b      	ldrh	r3, [r3, #0]
 80087c4:	461a      	mov	r2, r3
 80087c6:	4b88      	ldr	r3, [pc, #544]	; (80089e8 <tcp_receive+0xb08>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	441a      	add	r2, r3
 80087cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	1ad3      	subs	r3, r2, r3
            if (next &&
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	dd4d      	ble.n	8008874 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80087d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	b29a      	uxth	r2, r3
 80087e0:	4b81      	ldr	r3, [pc, #516]	; (80089e8 <tcp_receive+0xb08>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	1ad3      	subs	r3, r2, r3
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	4b80      	ldr	r3, [pc, #512]	; (80089ec <tcp_receive+0xb0c>)
 80087ec:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80087ee:	4b7f      	ldr	r3, [pc, #508]	; (80089ec <tcp_receive+0xb0c>)
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	899b      	ldrh	r3, [r3, #12]
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7fa ff3e 	bl	8003678 <lwip_htons>
 80087fc:	4603      	mov	r3, r0
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	f003 0302 	and.w	r3, r3, #2
 8008804:	2b00      	cmp	r3, #0
 8008806:	d005      	beq.n	8008814 <tcp_receive+0x934>
                inseg.len -= 1;
 8008808:	4b78      	ldr	r3, [pc, #480]	; (80089ec <tcp_receive+0xb0c>)
 800880a:	891b      	ldrh	r3, [r3, #8]
 800880c:	3b01      	subs	r3, #1
 800880e:	b29a      	uxth	r2, r3
 8008810:	4b76      	ldr	r3, [pc, #472]	; (80089ec <tcp_receive+0xb0c>)
 8008812:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8008814:	4b75      	ldr	r3, [pc, #468]	; (80089ec <tcp_receive+0xb0c>)
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	4a74      	ldr	r2, [pc, #464]	; (80089ec <tcp_receive+0xb0c>)
 800881a:	8912      	ldrh	r2, [r2, #8]
 800881c:	4611      	mov	r1, r2
 800881e:	4618      	mov	r0, r3
 8008820:	f7fc f858 	bl	80048d4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8008824:	4b71      	ldr	r3, [pc, #452]	; (80089ec <tcp_receive+0xb0c>)
 8008826:	891c      	ldrh	r4, [r3, #8]
 8008828:	4b70      	ldr	r3, [pc, #448]	; (80089ec <tcp_receive+0xb0c>)
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	899b      	ldrh	r3, [r3, #12]
 800882e:	b29b      	uxth	r3, r3
 8008830:	4618      	mov	r0, r3
 8008832:	f7fa ff21 	bl	8003678 <lwip_htons>
 8008836:	4603      	mov	r3, r0
 8008838:	b2db      	uxtb	r3, r3
 800883a:	f003 0303 	and.w	r3, r3, #3
 800883e:	2b00      	cmp	r3, #0
 8008840:	d001      	beq.n	8008846 <tcp_receive+0x966>
 8008842:	2301      	movs	r3, #1
 8008844:	e000      	b.n	8008848 <tcp_receive+0x968>
 8008846:	2300      	movs	r3, #0
 8008848:	4423      	add	r3, r4
 800884a:	b29a      	uxth	r2, r3
 800884c:	4b65      	ldr	r3, [pc, #404]	; (80089e4 <tcp_receive+0xb04>)
 800884e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008850:	4b64      	ldr	r3, [pc, #400]	; (80089e4 <tcp_receive+0xb04>)
 8008852:	881b      	ldrh	r3, [r3, #0]
 8008854:	461a      	mov	r2, r3
 8008856:	4b64      	ldr	r3, [pc, #400]	; (80089e8 <tcp_receive+0xb08>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	441a      	add	r2, r3
 800885c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	429a      	cmp	r2, r3
 8008864:	d006      	beq.n	8008874 <tcp_receive+0x994>
 8008866:	4b62      	ldr	r3, [pc, #392]	; (80089f0 <tcp_receive+0xb10>)
 8008868:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800886c:	4961      	ldr	r1, [pc, #388]	; (80089f4 <tcp_receive+0xb14>)
 800886e:	4862      	ldr	r0, [pc, #392]	; (80089f8 <tcp_receive+0xb18>)
 8008870:	f005 f8b0 	bl	800d9d4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008878:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800887a:	4b5a      	ldr	r3, [pc, #360]	; (80089e4 <tcp_receive+0xb04>)
 800887c:	881b      	ldrh	r3, [r3, #0]
 800887e:	461a      	mov	r2, r3
 8008880:	4b59      	ldr	r3, [pc, #356]	; (80089e8 <tcp_receive+0xb08>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	441a      	add	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800888e:	4b55      	ldr	r3, [pc, #340]	; (80089e4 <tcp_receive+0xb04>)
 8008890:	881b      	ldrh	r3, [r3, #0]
 8008892:	429a      	cmp	r2, r3
 8008894:	d206      	bcs.n	80088a4 <tcp_receive+0x9c4>
 8008896:	4b56      	ldr	r3, [pc, #344]	; (80089f0 <tcp_receive+0xb10>)
 8008898:	f240 6207 	movw	r2, #1543	; 0x607
 800889c:	4957      	ldr	r1, [pc, #348]	; (80089fc <tcp_receive+0xb1c>)
 800889e:	4856      	ldr	r0, [pc, #344]	; (80089f8 <tcp_receive+0xb18>)
 80088a0:	f005 f898 	bl	800d9d4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80088a8:	4b4e      	ldr	r3, [pc, #312]	; (80089e4 <tcp_receive+0xb04>)
 80088aa:	881b      	ldrh	r3, [r3, #0]
 80088ac:	1ad3      	subs	r3, r2, r3
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f7fc ffc9 	bl	800584c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80088ba:	4b4c      	ldr	r3, [pc, #304]	; (80089ec <tcp_receive+0xb0c>)
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	891b      	ldrh	r3, [r3, #8]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d006      	beq.n	80088d2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80088c4:	4b49      	ldr	r3, [pc, #292]	; (80089ec <tcp_receive+0xb0c>)
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	4a4d      	ldr	r2, [pc, #308]	; (8008a00 <tcp_receive+0xb20>)
 80088ca:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80088cc:	4b47      	ldr	r3, [pc, #284]	; (80089ec <tcp_receive+0xb0c>)
 80088ce:	2200      	movs	r2, #0
 80088d0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80088d2:	4b46      	ldr	r3, [pc, #280]	; (80089ec <tcp_receive+0xb0c>)
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	899b      	ldrh	r3, [r3, #12]
 80088d8:	b29b      	uxth	r3, r3
 80088da:	4618      	mov	r0, r3
 80088dc:	f7fa fecc 	bl	8003678 <lwip_htons>
 80088e0:	4603      	mov	r3, r0
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	f003 0301 	and.w	r3, r3, #1
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f000 80b8 	beq.w	8008a5e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80088ee:	4b45      	ldr	r3, [pc, #276]	; (8008a04 <tcp_receive+0xb24>)
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	f043 0320 	orr.w	r3, r3, #32
 80088f6:	b2da      	uxtb	r2, r3
 80088f8:	4b42      	ldr	r3, [pc, #264]	; (8008a04 <tcp_receive+0xb24>)
 80088fa:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80088fc:	e0af      	b.n	8008a5e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008902:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	4a36      	ldr	r2, [pc, #216]	; (80089e8 <tcp_receive+0xb08>)
 800890e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	891b      	ldrh	r3, [r3, #8]
 8008914:	461c      	mov	r4, r3
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	899b      	ldrh	r3, [r3, #12]
 800891c:	b29b      	uxth	r3, r3
 800891e:	4618      	mov	r0, r3
 8008920:	f7fa feaa 	bl	8003678 <lwip_htons>
 8008924:	4603      	mov	r3, r0
 8008926:	b2db      	uxtb	r3, r3
 8008928:	f003 0303 	and.w	r3, r3, #3
 800892c:	2b00      	cmp	r3, #0
 800892e:	d001      	beq.n	8008934 <tcp_receive+0xa54>
 8008930:	2301      	movs	r3, #1
 8008932:	e000      	b.n	8008936 <tcp_receive+0xa56>
 8008934:	2300      	movs	r3, #0
 8008936:	191a      	adds	r2, r3, r4
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893c:	441a      	add	r2, r3
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008946:	461c      	mov	r4, r3
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	891b      	ldrh	r3, [r3, #8]
 800894c:	461d      	mov	r5, r3
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	899b      	ldrh	r3, [r3, #12]
 8008954:	b29b      	uxth	r3, r3
 8008956:	4618      	mov	r0, r3
 8008958:	f7fa fe8e 	bl	8003678 <lwip_htons>
 800895c:	4603      	mov	r3, r0
 800895e:	b2db      	uxtb	r3, r3
 8008960:	f003 0303 	and.w	r3, r3, #3
 8008964:	2b00      	cmp	r3, #0
 8008966:	d001      	beq.n	800896c <tcp_receive+0xa8c>
 8008968:	2301      	movs	r3, #1
 800896a:	e000      	b.n	800896e <tcp_receive+0xa8e>
 800896c:	2300      	movs	r3, #0
 800896e:	442b      	add	r3, r5
 8008970:	429c      	cmp	r4, r3
 8008972:	d206      	bcs.n	8008982 <tcp_receive+0xaa2>
 8008974:	4b1e      	ldr	r3, [pc, #120]	; (80089f0 <tcp_receive+0xb10>)
 8008976:	f240 622b 	movw	r2, #1579	; 0x62b
 800897a:	4923      	ldr	r1, [pc, #140]	; (8008a08 <tcp_receive+0xb28>)
 800897c:	481e      	ldr	r0, [pc, #120]	; (80089f8 <tcp_receive+0xb18>)
 800897e:	f005 f829 	bl	800d9d4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	891b      	ldrh	r3, [r3, #8]
 8008986:	461c      	mov	r4, r3
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	899b      	ldrh	r3, [r3, #12]
 800898e:	b29b      	uxth	r3, r3
 8008990:	4618      	mov	r0, r3
 8008992:	f7fa fe71 	bl	8003678 <lwip_htons>
 8008996:	4603      	mov	r3, r0
 8008998:	b2db      	uxtb	r3, r3
 800899a:	f003 0303 	and.w	r3, r3, #3
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d001      	beq.n	80089a6 <tcp_receive+0xac6>
 80089a2:	2301      	movs	r3, #1
 80089a4:	e000      	b.n	80089a8 <tcp_receive+0xac8>
 80089a6:	2300      	movs	r3, #0
 80089a8:	1919      	adds	r1, r3, r4
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80089ae:	b28b      	uxth	r3, r1
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f7fc ff47 	bl	800584c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	891b      	ldrh	r3, [r3, #8]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d028      	beq.n	8008a1a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80089c8:	4b0d      	ldr	r3, [pc, #52]	; (8008a00 <tcp_receive+0xb20>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d01d      	beq.n	8008a0c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80089d0:	4b0b      	ldr	r3, [pc, #44]	; (8008a00 <tcp_receive+0xb20>)
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	4619      	mov	r1, r3
 80089da:	4610      	mov	r0, r2
 80089dc:	f7fc f9c2 	bl	8004d64 <pbuf_cat>
 80089e0:	e018      	b.n	8008a14 <tcp_receive+0xb34>
 80089e2:	bf00      	nop
 80089e4:	200000f6 	.word	0x200000f6
 80089e8:	200000ec 	.word	0x200000ec
 80089ec:	200000cc 	.word	0x200000cc
 80089f0:	0800ffc4 	.word	0x0800ffc4
 80089f4:	080103a4 	.word	0x080103a4
 80089f8:	08010010 	.word	0x08010010
 80089fc:	080103e0 	.word	0x080103e0
 8008a00:	200000fc 	.word	0x200000fc
 8008a04:	200000f9 	.word	0x200000f9
 8008a08:	08010400 	.word	0x08010400
            } else {
              recv_data = cseg->p;
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	4a70      	ldr	r2, [pc, #448]	; (8008bd4 <tcp_receive+0xcf4>)
 8008a12:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	2200      	movs	r2, #0
 8008a18:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	899b      	ldrh	r3, [r3, #12]
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7fa fe28 	bl	8003678 <lwip_htons>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	f003 0301 	and.w	r3, r3, #1
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d00d      	beq.n	8008a50 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8008a34:	4b68      	ldr	r3, [pc, #416]	; (8008bd8 <tcp_receive+0xcf8>)
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	f043 0320 	orr.w	r3, r3, #32
 8008a3c:	b2da      	uxtb	r2, r3
 8008a3e:	4b66      	ldr	r3, [pc, #408]	; (8008bd8 <tcp_receive+0xcf8>)
 8008a40:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	7d1b      	ldrb	r3, [r3, #20]
 8008a46:	2b04      	cmp	r3, #4
 8008a48:	d102      	bne.n	8008a50 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2207      	movs	r2, #7
 8008a4e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8008a58:	68b8      	ldr	r0, [r7, #8]
 8008a5a:	f7fd fbd6 	bl	800620a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d008      	beq.n	8008a78 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	685a      	ldr	r2, [r3, #4]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8008a72:	429a      	cmp	r2, r3
 8008a74:	f43f af43 	beq.w	80088fe <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	8b5b      	ldrh	r3, [r3, #26]
 8008a7c:	f003 0301 	and.w	r3, r3, #1
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00e      	beq.n	8008aa2 <tcp_receive+0xbc2>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	8b5b      	ldrh	r3, [r3, #26]
 8008a88:	f023 0301 	bic.w	r3, r3, #1
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	835a      	strh	r2, [r3, #26]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	8b5b      	ldrh	r3, [r3, #26]
 8008a96:	f043 0302 	orr.w	r3, r3, #2
 8008a9a:	b29a      	uxth	r2, r3
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008aa0:	e188      	b.n	8008db4 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	8b5b      	ldrh	r3, [r3, #26]
 8008aa6:	f043 0301 	orr.w	r3, r3, #1
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008ab0:	e180      	b.n	8008db4 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d106      	bne.n	8008ac8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8008aba:	4848      	ldr	r0, [pc, #288]	; (8008bdc <tcp_receive+0xcfc>)
 8008abc:	f7fd fbbe 	bl	800623c <tcp_seg_copy>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	675a      	str	r2, [r3, #116]	; 0x74
 8008ac6:	e16d      	b.n	8008da4 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ad0:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ad2:	e157      	b.n	8008d84 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8008ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	685a      	ldr	r2, [r3, #4]
 8008ada:	4b41      	ldr	r3, [pc, #260]	; (8008be0 <tcp_receive+0xd00>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d11d      	bne.n	8008b1e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8008ae2:	4b3e      	ldr	r3, [pc, #248]	; (8008bdc <tcp_receive+0xcfc>)
 8008ae4:	891a      	ldrh	r2, [r3, #8]
 8008ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae8:	891b      	ldrh	r3, [r3, #8]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	f240 814f 	bls.w	8008d8e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008af0:	483a      	ldr	r0, [pc, #232]	; (8008bdc <tcp_receive+0xcfc>)
 8008af2:	f7fd fba3 	bl	800623c <tcp_seg_copy>
 8008af6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f000 8149 	beq.w	8008d92 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8008b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d003      	beq.n	8008b0e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8008b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b08:	697a      	ldr	r2, [r7, #20]
 8008b0a:	601a      	str	r2, [r3, #0]
 8008b0c:	e002      	b.n	8008b14 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	697a      	ldr	r2, [r7, #20]
 8008b12:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8008b14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008b16:	6978      	ldr	r0, [r7, #20]
 8008b18:	f7ff f8de 	bl	8007cd8 <tcp_oos_insert_segment>
                }
                break;
 8008b1c:	e139      	b.n	8008d92 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8008b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d117      	bne.n	8008b54 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8008b24:	4b2e      	ldr	r3, [pc, #184]	; (8008be0 <tcp_receive+0xd00>)
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	1ad3      	subs	r3, r2, r3
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	da57      	bge.n	8008be4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008b34:	4829      	ldr	r0, [pc, #164]	; (8008bdc <tcp_receive+0xcfc>)
 8008b36:	f7fd fb81 	bl	800623c <tcp_seg_copy>
 8008b3a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	f000 8129 	beq.w	8008d96 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	69ba      	ldr	r2, [r7, #24]
 8008b48:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8008b4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008b4c:	69b8      	ldr	r0, [r7, #24]
 8008b4e:	f7ff f8c3 	bl	8007cd8 <tcp_oos_insert_segment>
                  }
                  break;
 8008b52:	e120      	b.n	8008d96 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8008b54:	4b22      	ldr	r3, [pc, #136]	; (8008be0 <tcp_receive+0xd00>)
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	1ad3      	subs	r3, r2, r3
 8008b60:	3b01      	subs	r3, #1
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	db3e      	blt.n	8008be4 <tcp_receive+0xd04>
 8008b66:	4b1e      	ldr	r3, [pc, #120]	; (8008be0 <tcp_receive+0xd00>)
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	3301      	adds	r3, #1
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	dc35      	bgt.n	8008be4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008b78:	4818      	ldr	r0, [pc, #96]	; (8008bdc <tcp_receive+0xcfc>)
 8008b7a:	f7fd fb5f 	bl	800623c <tcp_seg_copy>
 8008b7e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	f000 8109 	beq.w	8008d9a <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8008b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b90:	8912      	ldrh	r2, [r2, #8]
 8008b92:	441a      	add	r2, r3
 8008b94:	4b12      	ldr	r3, [pc, #72]	; (8008be0 <tcp_receive+0xd00>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	1ad3      	subs	r3, r2, r3
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	dd12      	ble.n	8008bc4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8008b9e:	4b10      	ldr	r3, [pc, #64]	; (8008be0 <tcp_receive+0xd00>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	1ad3      	subs	r3, r2, r3
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8008bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb6:	685a      	ldr	r2, [r3, #4]
 8008bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bba:	891b      	ldrh	r3, [r3, #8]
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	4610      	mov	r0, r2
 8008bc0:	f7fb fe88 	bl	80048d4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8008bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bc6:	69fa      	ldr	r2, [r7, #28]
 8008bc8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8008bca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008bcc:	69f8      	ldr	r0, [r7, #28]
 8008bce:	f7ff f883 	bl	8007cd8 <tcp_oos_insert_segment>
                  }
                  break;
 8008bd2:	e0e2      	b.n	8008d9a <tcp_receive+0xeba>
 8008bd4:	200000fc 	.word	0x200000fc
 8008bd8:	200000f9 	.word	0x200000f9
 8008bdc:	200000cc 	.word	0x200000cc
 8008be0:	200000ec 	.word	0x200000ec
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8008be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8008be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f040 80c6 	bne.w	8008d7e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8008bf2:	4b80      	ldr	r3, [pc, #512]	; (8008df4 <tcp_receive+0xf14>)
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	f340 80bd 	ble.w	8008d7e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	899b      	ldrh	r3, [r3, #12]
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f7fa fd33 	bl	8003678 <lwip_htons>
 8008c12:	4603      	mov	r3, r0
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	f003 0301 	and.w	r3, r3, #1
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	f040 80bf 	bne.w	8008d9e <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8008c20:	4875      	ldr	r0, [pc, #468]	; (8008df8 <tcp_receive+0xf18>)
 8008c22:	f7fd fb0b 	bl	800623c <tcp_seg_copy>
 8008c26:	4602      	mov	r2, r0
 8008c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8008c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	f000 80b6 	beq.w	8008da2 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8008c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c3e:	8912      	ldrh	r2, [r2, #8]
 8008c40:	441a      	add	r2, r3
 8008c42:	4b6c      	ldr	r3, [pc, #432]	; (8008df4 <tcp_receive+0xf14>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	1ad3      	subs	r3, r2, r3
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	dd12      	ble.n	8008c72 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8008c4c:	4b69      	ldr	r3, [pc, #420]	; (8008df4 <tcp_receive+0xf14>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	b29a      	uxth	r2, r3
 8008c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	1ad3      	subs	r3, r2, r3
 8008c5c:	b29a      	uxth	r2, r3
 8008c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c60:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8008c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c64:	685a      	ldr	r2, [r3, #4]
 8008c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c68:	891b      	ldrh	r3, [r3, #8]
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	4610      	mov	r0, r2
 8008c6e:	f7fb fe31 	bl	80048d4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8008c72:	4b62      	ldr	r3, [pc, #392]	; (8008dfc <tcp_receive+0xf1c>)
 8008c74:	881b      	ldrh	r3, [r3, #0]
 8008c76:	461a      	mov	r2, r3
 8008c78:	4b5e      	ldr	r3, [pc, #376]	; (8008df4 <tcp_receive+0xf14>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	441a      	add	r2, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c82:	6879      	ldr	r1, [r7, #4]
 8008c84:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008c86:	440b      	add	r3, r1
 8008c88:	1ad3      	subs	r3, r2, r3
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f340 8089 	ble.w	8008da2 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8008c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	899b      	ldrh	r3, [r3, #12]
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7fa fcec 	bl	8003678 <lwip_htons>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	f003 0301 	and.w	r3, r3, #1
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d022      	beq.n	8008cf2 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8008cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	899b      	ldrh	r3, [r3, #12]
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	b21b      	sxth	r3, r3
 8008cb8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008cbc:	b21c      	sxth	r4, r3
 8008cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	899b      	ldrh	r3, [r3, #12]
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f7fa fcd5 	bl	8003678 <lwip_htons>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f7fa fccc 	bl	8003678 <lwip_htons>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	b21b      	sxth	r3, r3
 8008ce4:	4323      	orrs	r3, r4
 8008ce6:	b21a      	sxth	r2, r3
 8008ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	b292      	uxth	r2, r2
 8008cf0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf6:	b29a      	uxth	r2, r3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cfc:	4413      	add	r3, r2
 8008cfe:	b299      	uxth	r1, r3
 8008d00:	4b3c      	ldr	r3, [pc, #240]	; (8008df4 <tcp_receive+0xf14>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	b29a      	uxth	r2, r3
 8008d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	1a8a      	subs	r2, r1, r2
 8008d0c:	b292      	uxth	r2, r2
 8008d0e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8008d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	685a      	ldr	r2, [r3, #4]
 8008d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	891b      	ldrh	r3, [r3, #8]
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	4610      	mov	r0, r2
 8008d20:	f7fb fdd8 	bl	80048d4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8008d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	891c      	ldrh	r4, [r3, #8]
 8008d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	899b      	ldrh	r3, [r3, #12]
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7fa fc9f 	bl	8003678 <lwip_htons>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	f003 0303 	and.w	r3, r3, #3
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d001      	beq.n	8008d4a <tcp_receive+0xe6a>
 8008d46:	2301      	movs	r3, #1
 8008d48:	e000      	b.n	8008d4c <tcp_receive+0xe6c>
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	4423      	add	r3, r4
 8008d4e:	b29a      	uxth	r2, r3
 8008d50:	4b2a      	ldr	r3, [pc, #168]	; (8008dfc <tcp_receive+0xf1c>)
 8008d52:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008d54:	4b29      	ldr	r3, [pc, #164]	; (8008dfc <tcp_receive+0xf1c>)
 8008d56:	881b      	ldrh	r3, [r3, #0]
 8008d58:	461a      	mov	r2, r3
 8008d5a:	4b26      	ldr	r3, [pc, #152]	; (8008df4 <tcp_receive+0xf14>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	441a      	add	r2, r3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d64:	6879      	ldr	r1, [r7, #4]
 8008d66:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008d68:	440b      	add	r3, r1
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d019      	beq.n	8008da2 <tcp_receive+0xec2>
 8008d6e:	4b24      	ldr	r3, [pc, #144]	; (8008e00 <tcp_receive+0xf20>)
 8008d70:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8008d74:	4923      	ldr	r1, [pc, #140]	; (8008e04 <tcp_receive+0xf24>)
 8008d76:	4824      	ldr	r0, [pc, #144]	; (8008e08 <tcp_receive+0xf28>)
 8008d78:	f004 fe2c 	bl	800d9d4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8008d7c:	e011      	b.n	8008da2 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	f47f aea4 	bne.w	8008ad4 <tcp_receive+0xbf4>
 8008d8c:	e00a      	b.n	8008da4 <tcp_receive+0xec4>
                break;
 8008d8e:	bf00      	nop
 8008d90:	e008      	b.n	8008da4 <tcp_receive+0xec4>
                break;
 8008d92:	bf00      	nop
 8008d94:	e006      	b.n	8008da4 <tcp_receive+0xec4>
                  break;
 8008d96:	bf00      	nop
 8008d98:	e004      	b.n	8008da4 <tcp_receive+0xec4>
                  break;
 8008d9a:	bf00      	nop
 8008d9c:	e002      	b.n	8008da4 <tcp_receive+0xec4>
                  break;
 8008d9e:	bf00      	nop
 8008da0:	e000      	b.n	8008da4 <tcp_receive+0xec4>
                break;
 8008da2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f001 fa33 	bl	800a210 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8008daa:	e003      	b.n	8008db4 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f001 fa2f 	bl	800a210 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008db2:	e01a      	b.n	8008dea <tcp_receive+0xf0a>
 8008db4:	e019      	b.n	8008dea <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8008db6:	4b0f      	ldr	r3, [pc, #60]	; (8008df4 <tcp_receive+0xf14>)
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dbe:	1ad3      	subs	r3, r2, r3
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	db0a      	blt.n	8008dda <tcp_receive+0xefa>
 8008dc4:	4b0b      	ldr	r3, [pc, #44]	; (8008df4 <tcp_receive+0xf14>)
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dcc:	6879      	ldr	r1, [r7, #4]
 8008dce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008dd0:	440b      	add	r3, r1
 8008dd2:	1ad3      	subs	r3, r2, r3
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	dd07      	ble.n	8008dea <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	8b5b      	ldrh	r3, [r3, #26]
 8008dde:	f043 0302 	orr.w	r3, r3, #2
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8008de8:	e7ff      	b.n	8008dea <tcp_receive+0xf0a>
 8008dea:	bf00      	nop
 8008dec:	3750      	adds	r7, #80	; 0x50
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bdb0      	pop	{r4, r5, r7, pc}
 8008df2:	bf00      	nop
 8008df4:	200000ec 	.word	0x200000ec
 8008df8:	200000cc 	.word	0x200000cc
 8008dfc:	200000f6 	.word	0x200000f6
 8008e00:	0800ffc4 	.word	0x0800ffc4
 8008e04:	0801036c 	.word	0x0801036c
 8008e08:	08010010 	.word	0x08010010

08008e0c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8008e12:	4b15      	ldr	r3, [pc, #84]	; (8008e68 <tcp_get_next_optbyte+0x5c>)
 8008e14:	881b      	ldrh	r3, [r3, #0]
 8008e16:	1c5a      	adds	r2, r3, #1
 8008e18:	b291      	uxth	r1, r2
 8008e1a:	4a13      	ldr	r2, [pc, #76]	; (8008e68 <tcp_get_next_optbyte+0x5c>)
 8008e1c:	8011      	strh	r1, [r2, #0]
 8008e1e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8008e20:	4b12      	ldr	r3, [pc, #72]	; (8008e6c <tcp_get_next_optbyte+0x60>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d004      	beq.n	8008e32 <tcp_get_next_optbyte+0x26>
 8008e28:	4b11      	ldr	r3, [pc, #68]	; (8008e70 <tcp_get_next_optbyte+0x64>)
 8008e2a:	881b      	ldrh	r3, [r3, #0]
 8008e2c:	88fa      	ldrh	r2, [r7, #6]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d208      	bcs.n	8008e44 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8008e32:	4b10      	ldr	r3, [pc, #64]	; (8008e74 <tcp_get_next_optbyte+0x68>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	3314      	adds	r3, #20
 8008e38:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8008e3a:	88fb      	ldrh	r3, [r7, #6]
 8008e3c:	683a      	ldr	r2, [r7, #0]
 8008e3e:	4413      	add	r3, r2
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	e00b      	b.n	8008e5c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8008e44:	88fb      	ldrh	r3, [r7, #6]
 8008e46:	b2da      	uxtb	r2, r3
 8008e48:	4b09      	ldr	r3, [pc, #36]	; (8008e70 <tcp_get_next_optbyte+0x64>)
 8008e4a:	881b      	ldrh	r3, [r3, #0]
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	1ad3      	subs	r3, r2, r3
 8008e50:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8008e52:	4b06      	ldr	r3, [pc, #24]	; (8008e6c <tcp_get_next_optbyte+0x60>)
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	797b      	ldrb	r3, [r7, #5]
 8008e58:	4413      	add	r3, r2
 8008e5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr
 8008e68:	200000e8 	.word	0x200000e8
 8008e6c:	200000e4 	.word	0x200000e4
 8008e70:	200000e2 	.word	0x200000e2
 8008e74:	200000dc 	.word	0x200000dc

08008e78 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d106      	bne.n	8008e94 <tcp_parseopt+0x1c>
 8008e86:	4b32      	ldr	r3, [pc, #200]	; (8008f50 <tcp_parseopt+0xd8>)
 8008e88:	f240 727d 	movw	r2, #1917	; 0x77d
 8008e8c:	4931      	ldr	r1, [pc, #196]	; (8008f54 <tcp_parseopt+0xdc>)
 8008e8e:	4832      	ldr	r0, [pc, #200]	; (8008f58 <tcp_parseopt+0xe0>)
 8008e90:	f004 fda0 	bl	800d9d4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8008e94:	4b31      	ldr	r3, [pc, #196]	; (8008f5c <tcp_parseopt+0xe4>)
 8008e96:	881b      	ldrh	r3, [r3, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d055      	beq.n	8008f48 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008e9c:	4b30      	ldr	r3, [pc, #192]	; (8008f60 <tcp_parseopt+0xe8>)
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	801a      	strh	r2, [r3, #0]
 8008ea2:	e045      	b.n	8008f30 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8008ea4:	f7ff ffb2 	bl	8008e0c <tcp_get_next_optbyte>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8008eac:	7bfb      	ldrb	r3, [r7, #15]
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d006      	beq.n	8008ec0 <tcp_parseopt+0x48>
 8008eb2:	2b02      	cmp	r3, #2
 8008eb4:	dc2b      	bgt.n	8008f0e <tcp_parseopt+0x96>
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d041      	beq.n	8008f3e <tcp_parseopt+0xc6>
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d127      	bne.n	8008f0e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8008ebe:	e037      	b.n	8008f30 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8008ec0:	f7ff ffa4 	bl	8008e0c <tcp_get_next_optbyte>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b04      	cmp	r3, #4
 8008ec8:	d13b      	bne.n	8008f42 <tcp_parseopt+0xca>
 8008eca:	4b25      	ldr	r3, [pc, #148]	; (8008f60 <tcp_parseopt+0xe8>)
 8008ecc:	881b      	ldrh	r3, [r3, #0]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	4a22      	ldr	r2, [pc, #136]	; (8008f5c <tcp_parseopt+0xe4>)
 8008ed2:	8812      	ldrh	r2, [r2, #0]
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	da34      	bge.n	8008f42 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8008ed8:	f7ff ff98 	bl	8008e0c <tcp_get_next_optbyte>
 8008edc:	4603      	mov	r3, r0
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	021b      	lsls	r3, r3, #8
 8008ee2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8008ee4:	f7ff ff92 	bl	8008e0c <tcp_get_next_optbyte>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	b29a      	uxth	r2, r3
 8008eec:	89bb      	ldrh	r3, [r7, #12]
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8008ef2:	89bb      	ldrh	r3, [r7, #12]
 8008ef4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8008ef8:	d804      	bhi.n	8008f04 <tcp_parseopt+0x8c>
 8008efa:	89bb      	ldrh	r3, [r7, #12]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d001      	beq.n	8008f04 <tcp_parseopt+0x8c>
 8008f00:	89ba      	ldrh	r2, [r7, #12]
 8008f02:	e001      	b.n	8008f08 <tcp_parseopt+0x90>
 8008f04:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8008f0c:	e010      	b.n	8008f30 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8008f0e:	f7ff ff7d 	bl	8008e0c <tcp_get_next_optbyte>
 8008f12:	4603      	mov	r3, r0
 8008f14:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8008f16:	7afb      	ldrb	r3, [r7, #11]
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d914      	bls.n	8008f46 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8008f1c:	7afb      	ldrb	r3, [r7, #11]
 8008f1e:	b29a      	uxth	r2, r3
 8008f20:	4b0f      	ldr	r3, [pc, #60]	; (8008f60 <tcp_parseopt+0xe8>)
 8008f22:	881b      	ldrh	r3, [r3, #0]
 8008f24:	4413      	add	r3, r2
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	3b02      	subs	r3, #2
 8008f2a:	b29a      	uxth	r2, r3
 8008f2c:	4b0c      	ldr	r3, [pc, #48]	; (8008f60 <tcp_parseopt+0xe8>)
 8008f2e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008f30:	4b0b      	ldr	r3, [pc, #44]	; (8008f60 <tcp_parseopt+0xe8>)
 8008f32:	881a      	ldrh	r2, [r3, #0]
 8008f34:	4b09      	ldr	r3, [pc, #36]	; (8008f5c <tcp_parseopt+0xe4>)
 8008f36:	881b      	ldrh	r3, [r3, #0]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d3b3      	bcc.n	8008ea4 <tcp_parseopt+0x2c>
 8008f3c:	e004      	b.n	8008f48 <tcp_parseopt+0xd0>
          return;
 8008f3e:	bf00      	nop
 8008f40:	e002      	b.n	8008f48 <tcp_parseopt+0xd0>
            return;
 8008f42:	bf00      	nop
 8008f44:	e000      	b.n	8008f48 <tcp_parseopt+0xd0>
            return;
 8008f46:	bf00      	nop
      }
    }
  }
}
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	0800ffc4 	.word	0x0800ffc4
 8008f54:	08010428 	.word	0x08010428
 8008f58:	08010010 	.word	0x08010010
 8008f5c:	200000e0 	.word	0x200000e0
 8008f60:	200000e8 	.word	0x200000e8

08008f64 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8008f64:	b480      	push	{r7}
 8008f66:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8008f68:	4b05      	ldr	r3, [pc, #20]	; (8008f80 <tcp_trigger_input_pcb_close+0x1c>)
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	f043 0310 	orr.w	r3, r3, #16
 8008f70:	b2da      	uxtb	r2, r3
 8008f72:	4b03      	ldr	r3, [pc, #12]	; (8008f80 <tcp_trigger_input_pcb_close+0x1c>)
 8008f74:	701a      	strb	r2, [r3, #0]
}
 8008f76:	bf00      	nop
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr
 8008f80:	200000f9 	.word	0x200000f9

08008f84 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00a      	beq.n	8008fac <tcp_route+0x28>
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	7a1b      	ldrb	r3, [r3, #8]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d006      	beq.n	8008fac <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	7a1b      	ldrb	r3, [r3, #8]
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7fb fabc 	bl	8004520 <netif_get_by_index>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	e003      	b.n	8008fb4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f003 fa37 	bl	800c420 <ip4_route>
 8008fb2:	4603      	mov	r3, r0
  }
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3710      	adds	r7, #16
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8008fbc:	b590      	push	{r4, r7, lr}
 8008fbe:	b087      	sub	sp, #28
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	603b      	str	r3, [r7, #0]
 8008fc8:	4613      	mov	r3, r2
 8008fca:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d105      	bne.n	8008fde <tcp_create_segment+0x22>
 8008fd2:	4b44      	ldr	r3, [pc, #272]	; (80090e4 <tcp_create_segment+0x128>)
 8008fd4:	22a3      	movs	r2, #163	; 0xa3
 8008fd6:	4944      	ldr	r1, [pc, #272]	; (80090e8 <tcp_create_segment+0x12c>)
 8008fd8:	4844      	ldr	r0, [pc, #272]	; (80090ec <tcp_create_segment+0x130>)
 8008fda:	f004 fcfb 	bl	800d9d4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d105      	bne.n	8008ff0 <tcp_create_segment+0x34>
 8008fe4:	4b3f      	ldr	r3, [pc, #252]	; (80090e4 <tcp_create_segment+0x128>)
 8008fe6:	22a4      	movs	r2, #164	; 0xa4
 8008fe8:	4941      	ldr	r1, [pc, #260]	; (80090f0 <tcp_create_segment+0x134>)
 8008fea:	4840      	ldr	r0, [pc, #256]	; (80090ec <tcp_create_segment+0x130>)
 8008fec:	f004 fcf2 	bl	800d9d4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8008ff0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	f003 0304 	and.w	r3, r3, #4
 8008ffc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8008ffe:	2003      	movs	r0, #3
 8009000:	f7fa ff90 	bl	8003f24 <memp_malloc>
 8009004:	6138      	str	r0, [r7, #16]
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d104      	bne.n	8009016 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800900c:	68b8      	ldr	r0, [r7, #8]
 800900e:	f7fb fde7 	bl	8004be0 <pbuf_free>
    return NULL;
 8009012:	2300      	movs	r3, #0
 8009014:	e061      	b.n	80090da <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800901c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	2200      	movs	r2, #0
 8009022:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	891a      	ldrh	r2, [r3, #8]
 800902e:	7dfb      	ldrb	r3, [r7, #23]
 8009030:	b29b      	uxth	r3, r3
 8009032:	429a      	cmp	r2, r3
 8009034:	d205      	bcs.n	8009042 <tcp_create_segment+0x86>
 8009036:	4b2b      	ldr	r3, [pc, #172]	; (80090e4 <tcp_create_segment+0x128>)
 8009038:	22b0      	movs	r2, #176	; 0xb0
 800903a:	492e      	ldr	r1, [pc, #184]	; (80090f4 <tcp_create_segment+0x138>)
 800903c:	482b      	ldr	r0, [pc, #172]	; (80090ec <tcp_create_segment+0x130>)
 800903e:	f004 fcc9 	bl	800d9d4 <iprintf>
  seg->len = p->tot_len - optlen;
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	891a      	ldrh	r2, [r3, #8]
 8009046:	7dfb      	ldrb	r3, [r7, #23]
 8009048:	b29b      	uxth	r3, r3
 800904a:	1ad3      	subs	r3, r2, r3
 800904c:	b29a      	uxth	r2, r3
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8009052:	2114      	movs	r1, #20
 8009054:	68b8      	ldr	r0, [r7, #8]
 8009056:	f7fb fd2d 	bl	8004ab4 <pbuf_add_header>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d004      	beq.n	800906a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009060:	6938      	ldr	r0, [r7, #16]
 8009062:	f7fd f8d2 	bl	800620a <tcp_seg_free>
    return NULL;
 8009066:	2300      	movs	r3, #0
 8009068:	e037      	b.n	80090da <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	685a      	ldr	r2, [r3, #4]
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	8ada      	ldrh	r2, [r3, #22]
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	68dc      	ldr	r4, [r3, #12]
 800907c:	4610      	mov	r0, r2
 800907e:	f7fa fafb 	bl	8003678 <lwip_htons>
 8009082:	4603      	mov	r3, r0
 8009084:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	8b1a      	ldrh	r2, [r3, #24]
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	68dc      	ldr	r4, [r3, #12]
 800908e:	4610      	mov	r0, r2
 8009090:	f7fa faf2 	bl	8003678 <lwip_htons>
 8009094:	4603      	mov	r3, r0
 8009096:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	68dc      	ldr	r4, [r3, #12]
 800909c:	6838      	ldr	r0, [r7, #0]
 800909e:	f7fa fb00 	bl	80036a2 <lwip_htonl>
 80090a2:	4603      	mov	r3, r0
 80090a4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80090a6:	7dfb      	ldrb	r3, [r7, #23]
 80090a8:	089b      	lsrs	r3, r3, #2
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	3305      	adds	r3, #5
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	031b      	lsls	r3, r3, #12
 80090b4:	b29a      	uxth	r2, r3
 80090b6:	79fb      	ldrb	r3, [r7, #7]
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	4313      	orrs	r3, r2
 80090bc:	b29a      	uxth	r2, r3
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	68dc      	ldr	r4, [r3, #12]
 80090c2:	4610      	mov	r0, r2
 80090c4:	f7fa fad8 	bl	8003678 <lwip_htons>
 80090c8:	4603      	mov	r3, r0
 80090ca:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	2200      	movs	r2, #0
 80090d2:	749a      	strb	r2, [r3, #18]
 80090d4:	2200      	movs	r2, #0
 80090d6:	74da      	strb	r2, [r3, #19]
  return seg;
 80090d8:	693b      	ldr	r3, [r7, #16]
}
 80090da:	4618      	mov	r0, r3
 80090dc:	371c      	adds	r7, #28
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd90      	pop	{r4, r7, pc}
 80090e2:	bf00      	nop
 80090e4:	08010444 	.word	0x08010444
 80090e8:	08010478 	.word	0x08010478
 80090ec:	08010498 	.word	0x08010498
 80090f0:	080104c0 	.word	0x080104c0
 80090f4:	080104e4 	.word	0x080104e4

080090f8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80090f8:	b590      	push	{r4, r7, lr}
 80090fa:	b08b      	sub	sp, #44	; 0x2c
 80090fc:	af02      	add	r7, sp, #8
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	460b      	mov	r3, r1
 8009102:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8009104:	2300      	movs	r3, #0
 8009106:	61fb      	str	r3, [r7, #28]
 8009108:	2300      	movs	r3, #0
 800910a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800910c:	2300      	movs	r3, #0
 800910e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d106      	bne.n	8009124 <tcp_split_unsent_seg+0x2c>
 8009116:	4b95      	ldr	r3, [pc, #596]	; (800936c <tcp_split_unsent_seg+0x274>)
 8009118:	f240 324b 	movw	r2, #843	; 0x34b
 800911c:	4994      	ldr	r1, [pc, #592]	; (8009370 <tcp_split_unsent_seg+0x278>)
 800911e:	4895      	ldr	r0, [pc, #596]	; (8009374 <tcp_split_unsent_seg+0x27c>)
 8009120:	f004 fc58 	bl	800d9d4 <iprintf>

  useg = pcb->unsent;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009128:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d102      	bne.n	8009136 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8009130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009134:	e116      	b.n	8009364 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8009136:	887b      	ldrh	r3, [r7, #2]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d109      	bne.n	8009150 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800913c:	4b8b      	ldr	r3, [pc, #556]	; (800936c <tcp_split_unsent_seg+0x274>)
 800913e:	f240 3253 	movw	r2, #851	; 0x353
 8009142:	498d      	ldr	r1, [pc, #564]	; (8009378 <tcp_split_unsent_seg+0x280>)
 8009144:	488b      	ldr	r0, [pc, #556]	; (8009374 <tcp_split_unsent_seg+0x27c>)
 8009146:	f004 fc45 	bl	800d9d4 <iprintf>
    return ERR_VAL;
 800914a:	f06f 0305 	mvn.w	r3, #5
 800914e:	e109      	b.n	8009364 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	891b      	ldrh	r3, [r3, #8]
 8009154:	887a      	ldrh	r2, [r7, #2]
 8009156:	429a      	cmp	r2, r3
 8009158:	d301      	bcc.n	800915e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800915a:	2300      	movs	r3, #0
 800915c:	e102      	b.n	8009364 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009162:	887a      	ldrh	r2, [r7, #2]
 8009164:	429a      	cmp	r2, r3
 8009166:	d906      	bls.n	8009176 <tcp_split_unsent_seg+0x7e>
 8009168:	4b80      	ldr	r3, [pc, #512]	; (800936c <tcp_split_unsent_seg+0x274>)
 800916a:	f240 325b 	movw	r2, #859	; 0x35b
 800916e:	4983      	ldr	r1, [pc, #524]	; (800937c <tcp_split_unsent_seg+0x284>)
 8009170:	4880      	ldr	r0, [pc, #512]	; (8009374 <tcp_split_unsent_seg+0x27c>)
 8009172:	f004 fc2f 	bl	800d9d4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	891b      	ldrh	r3, [r3, #8]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d106      	bne.n	800918c <tcp_split_unsent_seg+0x94>
 800917e:	4b7b      	ldr	r3, [pc, #492]	; (800936c <tcp_split_unsent_seg+0x274>)
 8009180:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8009184:	497e      	ldr	r1, [pc, #504]	; (8009380 <tcp_split_unsent_seg+0x288>)
 8009186:	487b      	ldr	r0, [pc, #492]	; (8009374 <tcp_split_unsent_seg+0x27c>)
 8009188:	f004 fc24 	bl	800d9d4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	7a9b      	ldrb	r3, [r3, #10]
 8009190:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009192:	7bfb      	ldrb	r3, [r7, #15]
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	b2db      	uxtb	r3, r3
 8009198:	f003 0304 	and.w	r3, r3, #4
 800919c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	891a      	ldrh	r2, [r3, #8]
 80091a2:	887b      	ldrh	r3, [r7, #2]
 80091a4:	1ad3      	subs	r3, r2, r3
 80091a6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80091a8:	7bbb      	ldrb	r3, [r7, #14]
 80091aa:	b29a      	uxth	r2, r3
 80091ac:	89bb      	ldrh	r3, [r7, #12]
 80091ae:	4413      	add	r3, r2
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80091b6:	4619      	mov	r1, r3
 80091b8:	2036      	movs	r0, #54	; 0x36
 80091ba:	f7fb fa2d 	bl	8004618 <pbuf_alloc>
 80091be:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f000 80b7 	beq.w	8009336 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	891a      	ldrh	r2, [r3, #8]
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	891b      	ldrh	r3, [r3, #8]
 80091d2:	1ad3      	subs	r3, r2, r3
 80091d4:	b29a      	uxth	r2, r3
 80091d6:	887b      	ldrh	r3, [r7, #2]
 80091d8:	4413      	add	r3, r2
 80091da:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	6858      	ldr	r0, [r3, #4]
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	685a      	ldr	r2, [r3, #4]
 80091e4:	7bbb      	ldrb	r3, [r7, #14]
 80091e6:	18d1      	adds	r1, r2, r3
 80091e8:	897b      	ldrh	r3, [r7, #10]
 80091ea:	89ba      	ldrh	r2, [r7, #12]
 80091ec:	f7fb fef2 	bl	8004fd4 <pbuf_copy_partial>
 80091f0:	4603      	mov	r3, r0
 80091f2:	461a      	mov	r2, r3
 80091f4:	89bb      	ldrh	r3, [r7, #12]
 80091f6:	4293      	cmp	r3, r2
 80091f8:	f040 809f 	bne.w	800933a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	899b      	ldrh	r3, [r3, #12]
 8009202:	b29b      	uxth	r3, r3
 8009204:	4618      	mov	r0, r3
 8009206:	f7fa fa37 	bl	8003678 <lwip_htons>
 800920a:	4603      	mov	r3, r0
 800920c:	b2db      	uxtb	r3, r3
 800920e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009212:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8009214:	2300      	movs	r3, #0
 8009216:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8009218:	7efb      	ldrb	r3, [r7, #27]
 800921a:	f003 0308 	and.w	r3, r3, #8
 800921e:	2b00      	cmp	r3, #0
 8009220:	d007      	beq.n	8009232 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8009222:	7efb      	ldrb	r3, [r7, #27]
 8009224:	f023 0308 	bic.w	r3, r3, #8
 8009228:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800922a:	7ebb      	ldrb	r3, [r7, #26]
 800922c:	f043 0308 	orr.w	r3, r3, #8
 8009230:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8009232:	7efb      	ldrb	r3, [r7, #27]
 8009234:	f003 0301 	and.w	r3, r3, #1
 8009238:	2b00      	cmp	r3, #0
 800923a:	d007      	beq.n	800924c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800923c:	7efb      	ldrb	r3, [r7, #27]
 800923e:	f023 0301 	bic.w	r3, r3, #1
 8009242:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8009244:	7ebb      	ldrb	r3, [r7, #26]
 8009246:	f043 0301 	orr.w	r3, r3, #1
 800924a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	4618      	mov	r0, r3
 8009254:	f7fa fa25 	bl	80036a2 <lwip_htonl>
 8009258:	4602      	mov	r2, r0
 800925a:	887b      	ldrh	r3, [r7, #2]
 800925c:	18d1      	adds	r1, r2, r3
 800925e:	7eba      	ldrb	r2, [r7, #26]
 8009260:	7bfb      	ldrb	r3, [r7, #15]
 8009262:	9300      	str	r3, [sp, #0]
 8009264:	460b      	mov	r3, r1
 8009266:	6939      	ldr	r1, [r7, #16]
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f7ff fea7 	bl	8008fbc <tcp_create_segment>
 800926e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d063      	beq.n	800933e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	4618      	mov	r0, r3
 800927c:	f7fb fd38 	bl	8004cf0 <pbuf_clen>
 8009280:	4603      	mov	r3, r0
 8009282:	461a      	mov	r2, r3
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800928a:	1a9b      	subs	r3, r3, r2
 800928c:	b29a      	uxth	r2, r3
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	6858      	ldr	r0, [r3, #4]
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	891a      	ldrh	r2, [r3, #8]
 800929e:	89bb      	ldrh	r3, [r7, #12]
 80092a0:	1ad3      	subs	r3, r2, r3
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	4619      	mov	r1, r3
 80092a6:	f7fb fb15 	bl	80048d4 <pbuf_realloc>
  useg->len -= remainder;
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	891a      	ldrh	r2, [r3, #8]
 80092ae:	89bb      	ldrh	r3, [r7, #12]
 80092b0:	1ad3      	subs	r3, r2, r3
 80092b2:	b29a      	uxth	r2, r3
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	899b      	ldrh	r3, [r3, #12]
 80092be:	b29c      	uxth	r4, r3
 80092c0:	7efb      	ldrb	r3, [r7, #27]
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7fa f9d7 	bl	8003678 <lwip_htons>
 80092ca:	4603      	mov	r3, r0
 80092cc:	461a      	mov	r2, r3
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	4322      	orrs	r2, r4
 80092d4:	b292      	uxth	r2, r2
 80092d6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	4618      	mov	r0, r3
 80092de:	f7fb fd07 	bl	8004cf0 <pbuf_clen>
 80092e2:	4603      	mov	r3, r0
 80092e4:	461a      	mov	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80092ec:	4413      	add	r3, r2
 80092ee:	b29a      	uxth	r2, r3
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7fb fcf8 	bl	8004cf0 <pbuf_clen>
 8009300:	4603      	mov	r3, r0
 8009302:	461a      	mov	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800930a:	4413      	add	r3, r2
 800930c:	b29a      	uxth	r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	69fa      	ldr	r2, [r7, #28]
 8009320:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d103      	bne.n	8009332 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8009332:	2300      	movs	r3, #0
 8009334:	e016      	b.n	8009364 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8009336:	bf00      	nop
 8009338:	e002      	b.n	8009340 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800933a:	bf00      	nop
 800933c:	e000      	b.n	8009340 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800933e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d006      	beq.n	8009354 <tcp_split_unsent_seg+0x25c>
 8009346:	4b09      	ldr	r3, [pc, #36]	; (800936c <tcp_split_unsent_seg+0x274>)
 8009348:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800934c:	490d      	ldr	r1, [pc, #52]	; (8009384 <tcp_split_unsent_seg+0x28c>)
 800934e:	4809      	ldr	r0, [pc, #36]	; (8009374 <tcp_split_unsent_seg+0x27c>)
 8009350:	f004 fb40 	bl	800d9d4 <iprintf>
  if (p != NULL) {
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d002      	beq.n	8009360 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800935a:	6938      	ldr	r0, [r7, #16]
 800935c:	f7fb fc40 	bl	8004be0 <pbuf_free>
  }

  return ERR_MEM;
 8009360:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009364:	4618      	mov	r0, r3
 8009366:	3724      	adds	r7, #36	; 0x24
 8009368:	46bd      	mov	sp, r7
 800936a:	bd90      	pop	{r4, r7, pc}
 800936c:	08010444 	.word	0x08010444
 8009370:	080107d8 	.word	0x080107d8
 8009374:	08010498 	.word	0x08010498
 8009378:	080107fc 	.word	0x080107fc
 800937c:	08010820 	.word	0x08010820
 8009380:	08010830 	.word	0x08010830
 8009384:	08010840 	.word	0x08010840

08009388 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8009388:	b590      	push	{r4, r7, lr}
 800938a:	b085      	sub	sp, #20
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d106      	bne.n	80093a4 <tcp_send_fin+0x1c>
 8009396:	4b21      	ldr	r3, [pc, #132]	; (800941c <tcp_send_fin+0x94>)
 8009398:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800939c:	4920      	ldr	r1, [pc, #128]	; (8009420 <tcp_send_fin+0x98>)
 800939e:	4821      	ldr	r0, [pc, #132]	; (8009424 <tcp_send_fin+0x9c>)
 80093a0:	f004 fb18 	bl	800d9d4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d02e      	beq.n	800940a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093b0:	60fb      	str	r3, [r7, #12]
 80093b2:	e002      	b.n	80093ba <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d1f8      	bne.n	80093b4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	899b      	ldrh	r3, [r3, #12]
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7fa f954 	bl	8003678 <lwip_htons>
 80093d0:	4603      	mov	r3, r0
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	f003 0307 	and.w	r3, r3, #7
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d116      	bne.n	800940a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	899b      	ldrh	r3, [r3, #12]
 80093e2:	b29c      	uxth	r4, r3
 80093e4:	2001      	movs	r0, #1
 80093e6:	f7fa f947 	bl	8003678 <lwip_htons>
 80093ea:	4603      	mov	r3, r0
 80093ec:	461a      	mov	r2, r3
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	4322      	orrs	r2, r4
 80093f4:	b292      	uxth	r2, r2
 80093f6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	8b5b      	ldrh	r3, [r3, #26]
 80093fc:	f043 0320 	orr.w	r3, r3, #32
 8009400:	b29a      	uxth	r2, r3
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8009406:	2300      	movs	r3, #0
 8009408:	e004      	b.n	8009414 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800940a:	2101      	movs	r1, #1
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 f80b 	bl	8009428 <tcp_enqueue_flags>
 8009412:	4603      	mov	r3, r0
}
 8009414:	4618      	mov	r0, r3
 8009416:	3714      	adds	r7, #20
 8009418:	46bd      	mov	sp, r7
 800941a:	bd90      	pop	{r4, r7, pc}
 800941c:	08010444 	.word	0x08010444
 8009420:	0801084c 	.word	0x0801084c
 8009424:	08010498 	.word	0x08010498

08009428 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b08a      	sub	sp, #40	; 0x28
 800942c:	af02      	add	r7, sp, #8
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	460b      	mov	r3, r1
 8009432:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8009434:	2300      	movs	r3, #0
 8009436:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8009438:	2300      	movs	r3, #0
 800943a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800943c:	78fb      	ldrb	r3, [r7, #3]
 800943e:	f003 0303 	and.w	r3, r3, #3
 8009442:	2b00      	cmp	r3, #0
 8009444:	d106      	bne.n	8009454 <tcp_enqueue_flags+0x2c>
 8009446:	4b67      	ldr	r3, [pc, #412]	; (80095e4 <tcp_enqueue_flags+0x1bc>)
 8009448:	f240 4211 	movw	r2, #1041	; 0x411
 800944c:	4966      	ldr	r1, [pc, #408]	; (80095e8 <tcp_enqueue_flags+0x1c0>)
 800944e:	4867      	ldr	r0, [pc, #412]	; (80095ec <tcp_enqueue_flags+0x1c4>)
 8009450:	f004 fac0 	bl	800d9d4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d106      	bne.n	8009468 <tcp_enqueue_flags+0x40>
 800945a:	4b62      	ldr	r3, [pc, #392]	; (80095e4 <tcp_enqueue_flags+0x1bc>)
 800945c:	f240 4213 	movw	r2, #1043	; 0x413
 8009460:	4963      	ldr	r1, [pc, #396]	; (80095f0 <tcp_enqueue_flags+0x1c8>)
 8009462:	4862      	ldr	r0, [pc, #392]	; (80095ec <tcp_enqueue_flags+0x1c4>)
 8009464:	f004 fab6 	bl	800d9d4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8009468:	78fb      	ldrb	r3, [r7, #3]
 800946a:	f003 0302 	and.w	r3, r3, #2
 800946e:	2b00      	cmp	r3, #0
 8009470:	d001      	beq.n	8009476 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8009472:	2301      	movs	r3, #1
 8009474:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009476:	7ffb      	ldrb	r3, [r7, #31]
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	b2db      	uxtb	r3, r3
 800947c:	f003 0304 	and.w	r3, r3, #4
 8009480:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009482:	7dfb      	ldrb	r3, [r7, #23]
 8009484:	b29b      	uxth	r3, r3
 8009486:	f44f 7220 	mov.w	r2, #640	; 0x280
 800948a:	4619      	mov	r1, r3
 800948c:	2036      	movs	r0, #54	; 0x36
 800948e:	f7fb f8c3 	bl	8004618 <pbuf_alloc>
 8009492:	6138      	str	r0, [r7, #16]
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d109      	bne.n	80094ae <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	8b5b      	ldrh	r3, [r3, #26]
 800949e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094a2:	b29a      	uxth	r2, r3
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80094a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094ac:	e095      	b.n	80095da <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	895a      	ldrh	r2, [r3, #10]
 80094b2:	7dfb      	ldrb	r3, [r7, #23]
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d206      	bcs.n	80094c8 <tcp_enqueue_flags+0xa0>
 80094ba:	4b4a      	ldr	r3, [pc, #296]	; (80095e4 <tcp_enqueue_flags+0x1bc>)
 80094bc:	f240 4239 	movw	r2, #1081	; 0x439
 80094c0:	494c      	ldr	r1, [pc, #304]	; (80095f4 <tcp_enqueue_flags+0x1cc>)
 80094c2:	484a      	ldr	r0, [pc, #296]	; (80095ec <tcp_enqueue_flags+0x1c4>)
 80094c4:	f004 fa86 	bl	800d9d4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80094cc:	78fa      	ldrb	r2, [r7, #3]
 80094ce:	7ffb      	ldrb	r3, [r7, #31]
 80094d0:	9300      	str	r3, [sp, #0]
 80094d2:	460b      	mov	r3, r1
 80094d4:	6939      	ldr	r1, [r7, #16]
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f7ff fd70 	bl	8008fbc <tcp_create_segment>
 80094dc:	60f8      	str	r0, [r7, #12]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d109      	bne.n	80094f8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	8b5b      	ldrh	r3, [r3, #26]
 80094e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094ec:	b29a      	uxth	r2, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80094f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094f6:	e070      	b.n	80095da <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	f003 0303 	and.w	r3, r3, #3
 8009500:	2b00      	cmp	r3, #0
 8009502:	d006      	beq.n	8009512 <tcp_enqueue_flags+0xea>
 8009504:	4b37      	ldr	r3, [pc, #220]	; (80095e4 <tcp_enqueue_flags+0x1bc>)
 8009506:	f240 4242 	movw	r2, #1090	; 0x442
 800950a:	493b      	ldr	r1, [pc, #236]	; (80095f8 <tcp_enqueue_flags+0x1d0>)
 800950c:	4837      	ldr	r0, [pc, #220]	; (80095ec <tcp_enqueue_flags+0x1c4>)
 800950e:	f004 fa61 	bl	800d9d4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	891b      	ldrh	r3, [r3, #8]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d006      	beq.n	8009528 <tcp_enqueue_flags+0x100>
 800951a:	4b32      	ldr	r3, [pc, #200]	; (80095e4 <tcp_enqueue_flags+0x1bc>)
 800951c:	f240 4243 	movw	r2, #1091	; 0x443
 8009520:	4936      	ldr	r1, [pc, #216]	; (80095fc <tcp_enqueue_flags+0x1d4>)
 8009522:	4832      	ldr	r0, [pc, #200]	; (80095ec <tcp_enqueue_flags+0x1c4>)
 8009524:	f004 fa56 	bl	800d9d4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800952c:	2b00      	cmp	r3, #0
 800952e:	d103      	bne.n	8009538 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	66da      	str	r2, [r3, #108]	; 0x6c
 8009536:	e00d      	b.n	8009554 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800953c:	61bb      	str	r3, [r7, #24]
 800953e:	e002      	b.n	8009546 <tcp_enqueue_flags+0x11e>
 8009540:	69bb      	ldr	r3, [r7, #24]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	61bb      	str	r3, [r7, #24]
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d1f8      	bne.n	8009540 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	68fa      	ldr	r2, [r7, #12]
 8009552:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800955c:	78fb      	ldrb	r3, [r7, #3]
 800955e:	f003 0302 	and.w	r3, r3, #2
 8009562:	2b00      	cmp	r3, #0
 8009564:	d104      	bne.n	8009570 <tcp_enqueue_flags+0x148>
 8009566:	78fb      	ldrb	r3, [r7, #3]
 8009568:	f003 0301 	and.w	r3, r3, #1
 800956c:	2b00      	cmp	r3, #0
 800956e:	d004      	beq.n	800957a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009574:	1c5a      	adds	r2, r3, #1
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800957a:	78fb      	ldrb	r3, [r7, #3]
 800957c:	f003 0301 	and.w	r3, r3, #1
 8009580:	2b00      	cmp	r3, #0
 8009582:	d006      	beq.n	8009592 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	8b5b      	ldrh	r3, [r3, #26]
 8009588:	f043 0320 	orr.w	r3, r3, #32
 800958c:	b29a      	uxth	r2, r3
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	4618      	mov	r0, r3
 8009598:	f7fb fbaa 	bl	8004cf0 <pbuf_clen>
 800959c:	4603      	mov	r3, r0
 800959e:	461a      	mov	r2, r3
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80095a6:	4413      	add	r3, r2
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d00e      	beq.n	80095d8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d10a      	bne.n	80095d8 <tcp_enqueue_flags+0x1b0>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d106      	bne.n	80095d8 <tcp_enqueue_flags+0x1b0>
 80095ca:	4b06      	ldr	r3, [pc, #24]	; (80095e4 <tcp_enqueue_flags+0x1bc>)
 80095cc:	f240 4265 	movw	r2, #1125	; 0x465
 80095d0:	490b      	ldr	r1, [pc, #44]	; (8009600 <tcp_enqueue_flags+0x1d8>)
 80095d2:	4806      	ldr	r0, [pc, #24]	; (80095ec <tcp_enqueue_flags+0x1c4>)
 80095d4:	f004 f9fe 	bl	800d9d4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3720      	adds	r7, #32
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	08010444 	.word	0x08010444
 80095e8:	08010868 	.word	0x08010868
 80095ec:	08010498 	.word	0x08010498
 80095f0:	080108c0 	.word	0x080108c0
 80095f4:	080108e0 	.word	0x080108e0
 80095f8:	0801091c 	.word	0x0801091c
 80095fc:	08010934 	.word	0x08010934
 8009600:	08010960 	.word	0x08010960

08009604 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8009604:	b5b0      	push	{r4, r5, r7, lr}
 8009606:	b08a      	sub	sp, #40	; 0x28
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d106      	bne.n	8009620 <tcp_output+0x1c>
 8009612:	4b9e      	ldr	r3, [pc, #632]	; (800988c <tcp_output+0x288>)
 8009614:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8009618:	499d      	ldr	r1, [pc, #628]	; (8009890 <tcp_output+0x28c>)
 800961a:	489e      	ldr	r0, [pc, #632]	; (8009894 <tcp_output+0x290>)
 800961c:	f004 f9da 	bl	800d9d4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	7d1b      	ldrb	r3, [r3, #20]
 8009624:	2b01      	cmp	r3, #1
 8009626:	d106      	bne.n	8009636 <tcp_output+0x32>
 8009628:	4b98      	ldr	r3, [pc, #608]	; (800988c <tcp_output+0x288>)
 800962a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800962e:	499a      	ldr	r1, [pc, #616]	; (8009898 <tcp_output+0x294>)
 8009630:	4898      	ldr	r0, [pc, #608]	; (8009894 <tcp_output+0x290>)
 8009632:	f004 f9cf 	bl	800d9d4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8009636:	4b99      	ldr	r3, [pc, #612]	; (800989c <tcp_output+0x298>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	429a      	cmp	r2, r3
 800963e:	d101      	bne.n	8009644 <tcp_output+0x40>
    return ERR_OK;
 8009640:	2300      	movs	r3, #0
 8009642:	e1ce      	b.n	80099e2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009650:	4293      	cmp	r3, r2
 8009652:	bf28      	it	cs
 8009654:	4613      	movcs	r3, r2
 8009656:	b29b      	uxth	r3, r3
 8009658:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800965e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8009660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009662:	2b00      	cmp	r3, #0
 8009664:	d10b      	bne.n	800967e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	8b5b      	ldrh	r3, [r3, #26]
 800966a:	f003 0302 	and.w	r3, r3, #2
 800966e:	2b00      	cmp	r3, #0
 8009670:	f000 81aa 	beq.w	80099c8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 fdcb 	bl	800a210 <tcp_send_empty_ack>
 800967a:	4603      	mov	r3, r0
 800967c:	e1b1      	b.n	80099e2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800967e:	6879      	ldr	r1, [r7, #4]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	3304      	adds	r3, #4
 8009684:	461a      	mov	r2, r3
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f7ff fc7c 	bl	8008f84 <tcp_route>
 800968c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d102      	bne.n	800969a <tcp_output+0x96>
    return ERR_RTE;
 8009694:	f06f 0303 	mvn.w	r3, #3
 8009698:	e1a3      	b.n	80099e2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d003      	beq.n	80096a8 <tcp_output+0xa4>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d111      	bne.n	80096cc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d002      	beq.n	80096b4 <tcp_output+0xb0>
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	3304      	adds	r3, #4
 80096b2:	e000      	b.n	80096b6 <tcp_output+0xb2>
 80096b4:	2300      	movs	r3, #0
 80096b6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d102      	bne.n	80096c4 <tcp_output+0xc0>
      return ERR_RTE;
 80096be:	f06f 0303 	mvn.w	r3, #3
 80096c2:	e18e      	b.n	80099e2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80096cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7f9 ffe5 	bl	80036a2 <lwip_htonl>
 80096d8:	4602      	mov	r2, r0
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096de:	1ad3      	subs	r3, r2, r3
 80096e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096e2:	8912      	ldrh	r2, [r2, #8]
 80096e4:	4413      	add	r3, r2
 80096e6:	69ba      	ldr	r2, [r7, #24]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d227      	bcs.n	800973c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80096f2:	461a      	mov	r2, r3
 80096f4:	69bb      	ldr	r3, [r7, #24]
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d114      	bne.n	8009724 <tcp_output+0x120>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d110      	bne.n	8009724 <tcp_output+0x120>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009708:	2b00      	cmp	r3, #0
 800970a:	d10b      	bne.n	8009724 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2201      	movs	r2, #1
 8009718:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	8b5b      	ldrh	r3, [r3, #26]
 8009728:	f003 0302 	and.w	r3, r3, #2
 800972c:	2b00      	cmp	r3, #0
 800972e:	f000 814d 	beq.w	80099cc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 fd6c 	bl	800a210 <tcp_send_empty_ack>
 8009738:	4603      	mov	r3, r0
 800973a:	e152      	b.n	80099e2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009748:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800974a:	6a3b      	ldr	r3, [r7, #32]
 800974c:	2b00      	cmp	r3, #0
 800974e:	f000 811c 	beq.w	800998a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8009752:	e002      	b.n	800975a <tcp_output+0x156>
 8009754:	6a3b      	ldr	r3, [r7, #32]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	623b      	str	r3, [r7, #32]
 800975a:	6a3b      	ldr	r3, [r7, #32]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1f8      	bne.n	8009754 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8009762:	e112      	b.n	800998a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8009764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	899b      	ldrh	r3, [r3, #12]
 800976a:	b29b      	uxth	r3, r3
 800976c:	4618      	mov	r0, r3
 800976e:	f7f9 ff83 	bl	8003678 <lwip_htons>
 8009772:	4603      	mov	r3, r0
 8009774:	b2db      	uxtb	r3, r3
 8009776:	f003 0304 	and.w	r3, r3, #4
 800977a:	2b00      	cmp	r3, #0
 800977c:	d006      	beq.n	800978c <tcp_output+0x188>
 800977e:	4b43      	ldr	r3, [pc, #268]	; (800988c <tcp_output+0x288>)
 8009780:	f240 5236 	movw	r2, #1334	; 0x536
 8009784:	4946      	ldr	r1, [pc, #280]	; (80098a0 <tcp_output+0x29c>)
 8009786:	4843      	ldr	r0, [pc, #268]	; (8009894 <tcp_output+0x290>)
 8009788:	f004 f924 	bl	800d9d4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009790:	2b00      	cmp	r3, #0
 8009792:	d01f      	beq.n	80097d4 <tcp_output+0x1d0>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	8b5b      	ldrh	r3, [r3, #26]
 8009798:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800979c:	2b00      	cmp	r3, #0
 800979e:	d119      	bne.n	80097d4 <tcp_output+0x1d0>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d00b      	beq.n	80097c0 <tcp_output+0x1bc>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d110      	bne.n	80097d4 <tcp_output+0x1d0>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097b6:	891a      	ldrh	r2, [r3, #8]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80097bc:	429a      	cmp	r2, r3
 80097be:	d209      	bcs.n	80097d4 <tcp_output+0x1d0>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d004      	beq.n	80097d4 <tcp_output+0x1d0>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80097d0:	2b08      	cmp	r3, #8
 80097d2:	d901      	bls.n	80097d8 <tcp_output+0x1d4>
 80097d4:	2301      	movs	r3, #1
 80097d6:	e000      	b.n	80097da <tcp_output+0x1d6>
 80097d8:	2300      	movs	r3, #0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d106      	bne.n	80097ec <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	8b5b      	ldrh	r3, [r3, #26]
 80097e2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	f000 80e4 	beq.w	80099b4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	7d1b      	ldrb	r3, [r3, #20]
 80097f0:	2b02      	cmp	r3, #2
 80097f2:	d00d      	beq.n	8009810 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80097f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	899b      	ldrh	r3, [r3, #12]
 80097fa:	b29c      	uxth	r4, r3
 80097fc:	2010      	movs	r0, #16
 80097fe:	f7f9 ff3b 	bl	8003678 <lwip_htons>
 8009802:	4603      	mov	r3, r0
 8009804:	461a      	mov	r2, r3
 8009806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009808:	68db      	ldr	r3, [r3, #12]
 800980a:	4322      	orrs	r2, r4
 800980c:	b292      	uxth	r2, r2
 800980e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8009810:	697a      	ldr	r2, [r7, #20]
 8009812:	6879      	ldr	r1, [r7, #4]
 8009814:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009816:	f000 f909 	bl	8009a2c <tcp_output_segment>
 800981a:	4603      	mov	r3, r0
 800981c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800981e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d009      	beq.n	800983a <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	8b5b      	ldrh	r3, [r3, #26]
 800982a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800982e:	b29a      	uxth	r2, r3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	835a      	strh	r2, [r3, #26]
      return err;
 8009834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009838:	e0d3      	b.n	80099e2 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800983a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	7d1b      	ldrb	r3, [r3, #20]
 8009846:	2b02      	cmp	r3, #2
 8009848:	d006      	beq.n	8009858 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	8b5b      	ldrh	r3, [r3, #26]
 800984e:	f023 0303 	bic.w	r3, r3, #3
 8009852:	b29a      	uxth	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985a:	68db      	ldr	r3, [r3, #12]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	4618      	mov	r0, r3
 8009860:	f7f9 ff1f 	bl	80036a2 <lwip_htonl>
 8009864:	4604      	mov	r4, r0
 8009866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009868:	891b      	ldrh	r3, [r3, #8]
 800986a:	461d      	mov	r5, r3
 800986c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	899b      	ldrh	r3, [r3, #12]
 8009872:	b29b      	uxth	r3, r3
 8009874:	4618      	mov	r0, r3
 8009876:	f7f9 feff 	bl	8003678 <lwip_htons>
 800987a:	4603      	mov	r3, r0
 800987c:	b2db      	uxtb	r3, r3
 800987e:	f003 0303 	and.w	r3, r3, #3
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00e      	beq.n	80098a4 <tcp_output+0x2a0>
 8009886:	2301      	movs	r3, #1
 8009888:	e00d      	b.n	80098a6 <tcp_output+0x2a2>
 800988a:	bf00      	nop
 800988c:	08010444 	.word	0x08010444
 8009890:	08010988 	.word	0x08010988
 8009894:	08010498 	.word	0x08010498
 8009898:	080109a0 	.word	0x080109a0
 800989c:	20008a70 	.word	0x20008a70
 80098a0:	080109c8 	.word	0x080109c8
 80098a4:	2300      	movs	r3, #0
 80098a6:	442b      	add	r3, r5
 80098a8:	4423      	add	r3, r4
 80098aa:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	1ad3      	subs	r3, r2, r3
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	da02      	bge.n	80098be <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	68ba      	ldr	r2, [r7, #8]
 80098bc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80098be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c0:	891b      	ldrh	r3, [r3, #8]
 80098c2:	461c      	mov	r4, r3
 80098c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	899b      	ldrh	r3, [r3, #12]
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7f9 fed3 	bl	8003678 <lwip_htons>
 80098d2:	4603      	mov	r3, r0
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	f003 0303 	and.w	r3, r3, #3
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d001      	beq.n	80098e2 <tcp_output+0x2de>
 80098de:	2301      	movs	r3, #1
 80098e0:	e000      	b.n	80098e4 <tcp_output+0x2e0>
 80098e2:	2300      	movs	r3, #0
 80098e4:	4423      	add	r3, r4
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d049      	beq.n	800997e <tcp_output+0x37a>
      seg->next = NULL;
 80098ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ec:	2200      	movs	r2, #0
 80098ee:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d105      	bne.n	8009904 <tcp_output+0x300>
        pcb->unacked = seg;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098fc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80098fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009900:	623b      	str	r3, [r7, #32]
 8009902:	e03f      	b.n	8009984 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8009904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	4618      	mov	r0, r3
 800990c:	f7f9 fec9 	bl	80036a2 <lwip_htonl>
 8009910:	4604      	mov	r4, r0
 8009912:	6a3b      	ldr	r3, [r7, #32]
 8009914:	68db      	ldr	r3, [r3, #12]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	4618      	mov	r0, r3
 800991a:	f7f9 fec2 	bl	80036a2 <lwip_htonl>
 800991e:	4603      	mov	r3, r0
 8009920:	1ae3      	subs	r3, r4, r3
 8009922:	2b00      	cmp	r3, #0
 8009924:	da24      	bge.n	8009970 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	3370      	adds	r3, #112	; 0x70
 800992a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800992c:	e002      	b.n	8009934 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009934:	69fb      	ldr	r3, [r7, #28]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d011      	beq.n	8009960 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	68db      	ldr	r3, [r3, #12]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	4618      	mov	r0, r3
 8009946:	f7f9 feac 	bl	80036a2 <lwip_htonl>
 800994a:	4604      	mov	r4, r0
 800994c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	4618      	mov	r0, r3
 8009954:	f7f9 fea5 	bl	80036a2 <lwip_htonl>
 8009958:	4603      	mov	r3, r0
 800995a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800995c:	2b00      	cmp	r3, #0
 800995e:	dbe6      	blt.n	800992e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009966:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8009968:	69fb      	ldr	r3, [r7, #28]
 800996a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800996c:	601a      	str	r2, [r3, #0]
 800996e:	e009      	b.n	8009984 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8009970:	6a3b      	ldr	r3, [r7, #32]
 8009972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009974:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8009976:	6a3b      	ldr	r3, [r7, #32]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	623b      	str	r3, [r7, #32]
 800997c:	e002      	b.n	8009984 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800997e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009980:	f7fc fc43 	bl	800620a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009988:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800998a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998c:	2b00      	cmp	r3, #0
 800998e:	d012      	beq.n	80099b6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8009990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	4618      	mov	r0, r3
 8009998:	f7f9 fe83 	bl	80036a2 <lwip_htonl>
 800999c:	4602      	mov	r2, r0
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099a2:	1ad3      	subs	r3, r2, r3
 80099a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099a6:	8912      	ldrh	r2, [r2, #8]
 80099a8:	4413      	add	r3, r2
  while (seg != NULL &&
 80099aa:	69ba      	ldr	r2, [r7, #24]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	f4bf aed9 	bcs.w	8009764 <tcp_output+0x160>
 80099b2:	e000      	b.n	80099b6 <tcp_output+0x3b2>
      break;
 80099b4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d108      	bne.n	80099d0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80099c6:	e004      	b.n	80099d2 <tcp_output+0x3ce>
    goto output_done;
 80099c8:	bf00      	nop
 80099ca:	e002      	b.n	80099d2 <tcp_output+0x3ce>
    goto output_done;
 80099cc:	bf00      	nop
 80099ce:	e000      	b.n	80099d2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80099d0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	8b5b      	ldrh	r3, [r3, #26]
 80099d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099da:	b29a      	uxth	r2, r3
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3728      	adds	r7, #40	; 0x28
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bdb0      	pop	{r4, r5, r7, pc}
 80099ea:	bf00      	nop

080099ec <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b082      	sub	sp, #8
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d106      	bne.n	8009a08 <tcp_output_segment_busy+0x1c>
 80099fa:	4b09      	ldr	r3, [pc, #36]	; (8009a20 <tcp_output_segment_busy+0x34>)
 80099fc:	f240 529a 	movw	r2, #1434	; 0x59a
 8009a00:	4908      	ldr	r1, [pc, #32]	; (8009a24 <tcp_output_segment_busy+0x38>)
 8009a02:	4809      	ldr	r0, [pc, #36]	; (8009a28 <tcp_output_segment_busy+0x3c>)
 8009a04:	f003 ffe6 	bl	800d9d4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	7b9b      	ldrb	r3, [r3, #14]
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d001      	beq.n	8009a16 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8009a12:	2301      	movs	r3, #1
 8009a14:	e000      	b.n	8009a18 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8009a16:	2300      	movs	r3, #0
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3708      	adds	r7, #8
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	08010444 	.word	0x08010444
 8009a24:	080109e0 	.word	0x080109e0
 8009a28:	08010498 	.word	0x08010498

08009a2c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8009a2c:	b5b0      	push	{r4, r5, r7, lr}
 8009a2e:	b08c      	sub	sp, #48	; 0x30
 8009a30:	af04      	add	r7, sp, #16
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d106      	bne.n	8009a4c <tcp_output_segment+0x20>
 8009a3e:	4b63      	ldr	r3, [pc, #396]	; (8009bcc <tcp_output_segment+0x1a0>)
 8009a40:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8009a44:	4962      	ldr	r1, [pc, #392]	; (8009bd0 <tcp_output_segment+0x1a4>)
 8009a46:	4863      	ldr	r0, [pc, #396]	; (8009bd4 <tcp_output_segment+0x1a8>)
 8009a48:	f003 ffc4 	bl	800d9d4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d106      	bne.n	8009a60 <tcp_output_segment+0x34>
 8009a52:	4b5e      	ldr	r3, [pc, #376]	; (8009bcc <tcp_output_segment+0x1a0>)
 8009a54:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8009a58:	495f      	ldr	r1, [pc, #380]	; (8009bd8 <tcp_output_segment+0x1ac>)
 8009a5a:	485e      	ldr	r0, [pc, #376]	; (8009bd4 <tcp_output_segment+0x1a8>)
 8009a5c:	f003 ffba 	bl	800d9d4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d106      	bne.n	8009a74 <tcp_output_segment+0x48>
 8009a66:	4b59      	ldr	r3, [pc, #356]	; (8009bcc <tcp_output_segment+0x1a0>)
 8009a68:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8009a6c:	495b      	ldr	r1, [pc, #364]	; (8009bdc <tcp_output_segment+0x1b0>)
 8009a6e:	4859      	ldr	r0, [pc, #356]	; (8009bd4 <tcp_output_segment+0x1a8>)
 8009a70:	f003 ffb0 	bl	800d9d4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8009a74:	68f8      	ldr	r0, [r7, #12]
 8009a76:	f7ff ffb9 	bl	80099ec <tcp_output_segment_busy>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d001      	beq.n	8009a84 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8009a80:	2300      	movs	r3, #0
 8009a82:	e09f      	b.n	8009bc4 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	68dc      	ldr	r4, [r3, #12]
 8009a8c:	4610      	mov	r0, r2
 8009a8e:	f7f9 fe08 	bl	80036a2 <lwip_htonl>
 8009a92:	4603      	mov	r3, r0
 8009a94:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	68dc      	ldr	r4, [r3, #12]
 8009a9e:	4610      	mov	r0, r2
 8009aa0:	f7f9 fdea 	bl	8003678 <lwip_htons>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aac:	68ba      	ldr	r2, [r7, #8]
 8009aae:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8009ab0:	441a      	add	r2, r3
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	3314      	adds	r3, #20
 8009abc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	7a9b      	ldrb	r3, [r3, #10]
 8009ac2:	f003 0301 	and.w	r3, r3, #1
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d015      	beq.n	8009af6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	3304      	adds	r3, #4
 8009ace:	461a      	mov	r2, r3
 8009ad0:	6879      	ldr	r1, [r7, #4]
 8009ad2:	f44f 7006 	mov.w	r0, #536	; 0x218
 8009ad6:	f7fc fe8f 	bl	80067f8 <tcp_eff_send_mss_netif>
 8009ada:	4603      	mov	r3, r0
 8009adc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8009ade:	8b7b      	ldrh	r3, [r7, #26]
 8009ae0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f7f9 fddc 	bl	80036a2 <lwip_htonl>
 8009aea:	4602      	mov	r2, r0
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	601a      	str	r2, [r3, #0]
    opts += 1;
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	3304      	adds	r3, #4
 8009af4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	da02      	bge.n	8009b06 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	2200      	movs	r2, #0
 8009b04:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d10c      	bne.n	8009b28 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8009b0e:	4b34      	ldr	r3, [pc, #208]	; (8009be0 <tcp_output_segment+0x1b4>)
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7f9 fdc0 	bl	80036a2 <lwip_htonl>
 8009b22:	4602      	mov	r2, r0
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	68da      	ldr	r2, [r3, #12]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	1ad3      	subs	r3, r2, r3
 8009b34:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	8959      	ldrh	r1, [r3, #10]
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	8b3a      	ldrh	r2, [r7, #24]
 8009b42:	1a8a      	subs	r2, r1, r2
 8009b44:	b292      	uxth	r2, r2
 8009b46:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	8919      	ldrh	r1, [r3, #8]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	8b3a      	ldrh	r2, [r7, #24]
 8009b54:	1a8a      	subs	r2, r1, r2
 8009b56:	b292      	uxth	r2, r2
 8009b58:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	68fa      	ldr	r2, [r7, #12]
 8009b60:	68d2      	ldr	r2, [r2, #12]
 8009b62:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	68db      	ldr	r3, [r3, #12]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	741a      	strb	r2, [r3, #16]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	f103 0214 	add.w	r2, r3, #20
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	7a9b      	ldrb	r3, [r3, #10]
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	f003 0304 	and.w	r3, r3, #4
 8009b82:	4413      	add	r3, r2
 8009b84:	69fa      	ldr	r2, [r7, #28]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d006      	beq.n	8009b98 <tcp_output_segment+0x16c>
 8009b8a:	4b10      	ldr	r3, [pc, #64]	; (8009bcc <tcp_output_segment+0x1a0>)
 8009b8c:	f240 621c 	movw	r2, #1564	; 0x61c
 8009b90:	4914      	ldr	r1, [pc, #80]	; (8009be4 <tcp_output_segment+0x1b8>)
 8009b92:	4810      	ldr	r0, [pc, #64]	; (8009bd4 <tcp_output_segment+0x1a8>)
 8009b94:	f003 ff1e 	bl	800d9d4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	6858      	ldr	r0, [r3, #4]
 8009b9c:	68b9      	ldr	r1, [r7, #8]
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	1d1c      	adds	r4, r3, #4
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	7add      	ldrb	r5, [r3, #11]
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	7a9b      	ldrb	r3, [r3, #10]
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	9202      	str	r2, [sp, #8]
 8009bae:	2206      	movs	r2, #6
 8009bb0:	9201      	str	r2, [sp, #4]
 8009bb2:	9300      	str	r3, [sp, #0]
 8009bb4:	462b      	mov	r3, r5
 8009bb6:	4622      	mov	r2, r4
 8009bb8:	f002 fdf0 	bl	800c79c <ip4_output_if>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8009bc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3720      	adds	r7, #32
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bdb0      	pop	{r4, r5, r7, pc}
 8009bcc:	08010444 	.word	0x08010444
 8009bd0:	08010a08 	.word	0x08010a08
 8009bd4:	08010498 	.word	0x08010498
 8009bd8:	08010a28 	.word	0x08010a28
 8009bdc:	08010a48 	.word	0x08010a48
 8009be0:	20008a60 	.word	0x20008a60
 8009be4:	08010a6c 	.word	0x08010a6c

08009be8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8009be8:	b5b0      	push	{r4, r5, r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d106      	bne.n	8009c04 <tcp_rexmit_rto_prepare+0x1c>
 8009bf6:	4b31      	ldr	r3, [pc, #196]	; (8009cbc <tcp_rexmit_rto_prepare+0xd4>)
 8009bf8:	f240 6263 	movw	r2, #1635	; 0x663
 8009bfc:	4930      	ldr	r1, [pc, #192]	; (8009cc0 <tcp_rexmit_rto_prepare+0xd8>)
 8009bfe:	4831      	ldr	r0, [pc, #196]	; (8009cc4 <tcp_rexmit_rto_prepare+0xdc>)
 8009c00:	f003 fee8 	bl	800d9d4 <iprintf>

  if (pcb->unacked == NULL) {
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d102      	bne.n	8009c12 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8009c0c:	f06f 0305 	mvn.w	r3, #5
 8009c10:	e050      	b.n	8009cb4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c16:	60fb      	str	r3, [r7, #12]
 8009c18:	e00b      	b.n	8009c32 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8009c1a:	68f8      	ldr	r0, [r7, #12]
 8009c1c:	f7ff fee6 	bl	80099ec <tcp_output_segment_busy>
 8009c20:	4603      	mov	r3, r0
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d002      	beq.n	8009c2c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8009c26:	f06f 0305 	mvn.w	r3, #5
 8009c2a:	e043      	b.n	8009cb4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	60fb      	str	r3, [r7, #12]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d1ef      	bne.n	8009c1a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8009c3a:	68f8      	ldr	r0, [r7, #12]
 8009c3c:	f7ff fed6 	bl	80099ec <tcp_output_segment_busy>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d002      	beq.n	8009c4c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8009c46:	f06f 0305 	mvn.w	r3, #5
 8009c4a:	e033      	b.n	8009cb4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	8b5b      	ldrh	r3, [r3, #26]
 8009c66:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009c6a:	b29a      	uxth	r2, r3
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	68db      	ldr	r3, [r3, #12]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7f9 fd13 	bl	80036a2 <lwip_htonl>
 8009c7c:	4604      	mov	r4, r0
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	891b      	ldrh	r3, [r3, #8]
 8009c82:	461d      	mov	r5, r3
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	899b      	ldrh	r3, [r3, #12]
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7f9 fcf3 	bl	8003678 <lwip_htons>
 8009c92:	4603      	mov	r3, r0
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	f003 0303 	and.w	r3, r3, #3
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d001      	beq.n	8009ca2 <tcp_rexmit_rto_prepare+0xba>
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e000      	b.n	8009ca4 <tcp_rexmit_rto_prepare+0xbc>
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	442b      	add	r3, r5
 8009ca6:	18e2      	adds	r2, r4, r3
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8009cb2:	2300      	movs	r3, #0
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3710      	adds	r7, #16
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bdb0      	pop	{r4, r5, r7, pc}
 8009cbc:	08010444 	.word	0x08010444
 8009cc0:	08010a80 	.word	0x08010a80
 8009cc4:	08010498 	.word	0x08010498

08009cc8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d106      	bne.n	8009ce4 <tcp_rexmit_rto_commit+0x1c>
 8009cd6:	4b0d      	ldr	r3, [pc, #52]	; (8009d0c <tcp_rexmit_rto_commit+0x44>)
 8009cd8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009cdc:	490c      	ldr	r1, [pc, #48]	; (8009d10 <tcp_rexmit_rto_commit+0x48>)
 8009cde:	480d      	ldr	r0, [pc, #52]	; (8009d14 <tcp_rexmit_rto_commit+0x4c>)
 8009ce0:	f003 fe78 	bl	800d9d4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009cea:	2bff      	cmp	r3, #255	; 0xff
 8009cec:	d007      	beq.n	8009cfe <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	b2da      	uxtb	r2, r3
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f7ff fc80 	bl	8009604 <tcp_output>
}
 8009d04:	bf00      	nop
 8009d06:	3708      	adds	r7, #8
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}
 8009d0c:	08010444 	.word	0x08010444
 8009d10:	08010aa4 	.word	0x08010aa4
 8009d14:	08010498 	.word	0x08010498

08009d18 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d106      	bne.n	8009d34 <tcp_rexmit_rto+0x1c>
 8009d26:	4b0a      	ldr	r3, [pc, #40]	; (8009d50 <tcp_rexmit_rto+0x38>)
 8009d28:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8009d2c:	4909      	ldr	r1, [pc, #36]	; (8009d54 <tcp_rexmit_rto+0x3c>)
 8009d2e:	480a      	ldr	r0, [pc, #40]	; (8009d58 <tcp_rexmit_rto+0x40>)
 8009d30:	f003 fe50 	bl	800d9d4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f7ff ff57 	bl	8009be8 <tcp_rexmit_rto_prepare>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d102      	bne.n	8009d46 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f7ff ffc1 	bl	8009cc8 <tcp_rexmit_rto_commit>
  }
}
 8009d46:	bf00      	nop
 8009d48:	3708      	adds	r7, #8
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	08010444 	.word	0x08010444
 8009d54:	08010ac8 	.word	0x08010ac8
 8009d58:	08010498 	.word	0x08010498

08009d5c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8009d5c:	b590      	push	{r4, r7, lr}
 8009d5e:	b085      	sub	sp, #20
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d106      	bne.n	8009d78 <tcp_rexmit+0x1c>
 8009d6a:	4b2f      	ldr	r3, [pc, #188]	; (8009e28 <tcp_rexmit+0xcc>)
 8009d6c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8009d70:	492e      	ldr	r1, [pc, #184]	; (8009e2c <tcp_rexmit+0xd0>)
 8009d72:	482f      	ldr	r0, [pc, #188]	; (8009e30 <tcp_rexmit+0xd4>)
 8009d74:	f003 fe2e 	bl	800d9d4 <iprintf>

  if (pcb->unacked == NULL) {
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d102      	bne.n	8009d86 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8009d80:	f06f 0305 	mvn.w	r3, #5
 8009d84:	e04c      	b.n	8009e20 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d8a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8009d8c:	68b8      	ldr	r0, [r7, #8]
 8009d8e:	f7ff fe2d 	bl	80099ec <tcp_output_segment_busy>
 8009d92:	4603      	mov	r3, r0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d002      	beq.n	8009d9e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8009d98:	f06f 0305 	mvn.w	r3, #5
 8009d9c:	e040      	b.n	8009e20 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	336c      	adds	r3, #108	; 0x6c
 8009daa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8009dac:	e002      	b.n	8009db4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d011      	beq.n	8009de0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f7f9 fc6c 	bl	80036a2 <lwip_htonl>
 8009dca:	4604      	mov	r4, r0
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	68db      	ldr	r3, [r3, #12]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f7f9 fc65 	bl	80036a2 <lwip_htonl>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	dbe6      	blt.n	8009dae <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	68ba      	ldr	r2, [r7, #8]
 8009dec:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d103      	bne.n	8009dfe <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009e04:	2bff      	cmp	r3, #255	; 0xff
 8009e06:	d007      	beq.n	8009e18 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009e0e:	3301      	adds	r3, #1
 8009e10:	b2da      	uxtb	r2, r3
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8009e1e:	2300      	movs	r3, #0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3714      	adds	r7, #20
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd90      	pop	{r4, r7, pc}
 8009e28:	08010444 	.word	0x08010444
 8009e2c:	08010ae4 	.word	0x08010ae4
 8009e30:	08010498 	.word	0x08010498

08009e34 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d106      	bne.n	8009e50 <tcp_rexmit_fast+0x1c>
 8009e42:	4b2a      	ldr	r3, [pc, #168]	; (8009eec <tcp_rexmit_fast+0xb8>)
 8009e44:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8009e48:	4929      	ldr	r1, [pc, #164]	; (8009ef0 <tcp_rexmit_fast+0xbc>)
 8009e4a:	482a      	ldr	r0, [pc, #168]	; (8009ef4 <tcp_rexmit_fast+0xc0>)
 8009e4c:	f003 fdc2 	bl	800d9d4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d044      	beq.n	8009ee2 <tcp_rexmit_fast+0xae>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	8b5b      	ldrh	r3, [r3, #26]
 8009e5c:	f003 0304 	and.w	r3, r3, #4
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d13e      	bne.n	8009ee2 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f7ff ff79 	bl	8009d5c <tcp_rexmit>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d138      	bne.n	8009ee2 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	bf28      	it	cs
 8009e80:	4613      	movcs	r3, r2
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	0fda      	lsrs	r2, r3, #31
 8009e86:	4413      	add	r3, r2
 8009e88:	105b      	asrs	r3, r3, #1
 8009e8a:	b29a      	uxth	r2, r3
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009e98:	461a      	mov	r2, r3
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009e9e:	005b      	lsls	r3, r3, #1
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d206      	bcs.n	8009eb2 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009ea8:	005b      	lsls	r3, r3, #1
 8009eaa:	b29a      	uxth	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	0049      	lsls	r1, r1, #1
 8009ec0:	440b      	add	r3, r1
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	4413      	add	r3, r2
 8009ec6:	b29a      	uxth	r2, r3
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	8b5b      	ldrh	r3, [r3, #26]
 8009ed2:	f043 0304 	orr.w	r3, r3, #4
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8009ee2:	bf00      	nop
 8009ee4:	3708      	adds	r7, #8
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	08010444 	.word	0x08010444
 8009ef0:	08010afc 	.word	0x08010afc
 8009ef4:	08010498 	.word	0x08010498

08009ef8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b086      	sub	sp, #24
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	607b      	str	r3, [r7, #4]
 8009f02:	460b      	mov	r3, r1
 8009f04:	817b      	strh	r3, [r7, #10]
 8009f06:	4613      	mov	r3, r2
 8009f08:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8009f0a:	897a      	ldrh	r2, [r7, #10]
 8009f0c:	893b      	ldrh	r3, [r7, #8]
 8009f0e:	4413      	add	r3, r2
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	3314      	adds	r3, #20
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	2022      	movs	r0, #34	; 0x22
 8009f1e:	f7fa fb7b 	bl	8004618 <pbuf_alloc>
 8009f22:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d04d      	beq.n	8009fc6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8009f2a:	897b      	ldrh	r3, [r7, #10]
 8009f2c:	3313      	adds	r3, #19
 8009f2e:	697a      	ldr	r2, [r7, #20]
 8009f30:	8952      	ldrh	r2, [r2, #10]
 8009f32:	4293      	cmp	r3, r2
 8009f34:	db06      	blt.n	8009f44 <tcp_output_alloc_header_common+0x4c>
 8009f36:	4b26      	ldr	r3, [pc, #152]	; (8009fd0 <tcp_output_alloc_header_common+0xd8>)
 8009f38:	f240 7223 	movw	r2, #1827	; 0x723
 8009f3c:	4925      	ldr	r1, [pc, #148]	; (8009fd4 <tcp_output_alloc_header_common+0xdc>)
 8009f3e:	4826      	ldr	r0, [pc, #152]	; (8009fd8 <tcp_output_alloc_header_common+0xe0>)
 8009f40:	f003 fd48 	bl	800d9d4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8009f4a:	8c3b      	ldrh	r3, [r7, #32]
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f7f9 fb93 	bl	8003678 <lwip_htons>
 8009f52:	4603      	mov	r3, r0
 8009f54:	461a      	mov	r2, r3
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8009f5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f7f9 fb8b 	bl	8003678 <lwip_htons>
 8009f62:	4603      	mov	r3, r0
 8009f64:	461a      	mov	r2, r3
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8009f70:	68f8      	ldr	r0, [r7, #12]
 8009f72:	f7f9 fb96 	bl	80036a2 <lwip_htonl>
 8009f76:	4602      	mov	r2, r0
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8009f7c:	897b      	ldrh	r3, [r7, #10]
 8009f7e:	089b      	lsrs	r3, r3, #2
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	3305      	adds	r3, #5
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	031b      	lsls	r3, r3, #12
 8009f88:	b29a      	uxth	r2, r3
 8009f8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	4313      	orrs	r3, r2
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	4618      	mov	r0, r3
 8009f96:	f7f9 fb6f 	bl	8003678 <lwip_htons>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8009fa2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f7f9 fb67 	bl	8003678 <lwip_htons>
 8009faa:	4603      	mov	r3, r0
 8009fac:	461a      	mov	r2, r3
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	741a      	strb	r2, [r3, #16]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	749a      	strb	r2, [r3, #18]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8009fc6:	697b      	ldr	r3, [r7, #20]
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3718      	adds	r7, #24
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}
 8009fd0:	08010444 	.word	0x08010444
 8009fd4:	08010b1c 	.word	0x08010b1c
 8009fd8:	08010498 	.word	0x08010498

08009fdc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8009fdc:	b5b0      	push	{r4, r5, r7, lr}
 8009fde:	b08a      	sub	sp, #40	; 0x28
 8009fe0:	af04      	add	r7, sp, #16
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	607b      	str	r3, [r7, #4]
 8009fe6:	460b      	mov	r3, r1
 8009fe8:	817b      	strh	r3, [r7, #10]
 8009fea:	4613      	mov	r3, r2
 8009fec:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d106      	bne.n	800a002 <tcp_output_alloc_header+0x26>
 8009ff4:	4b15      	ldr	r3, [pc, #84]	; (800a04c <tcp_output_alloc_header+0x70>)
 8009ff6:	f240 7242 	movw	r2, #1858	; 0x742
 8009ffa:	4915      	ldr	r1, [pc, #84]	; (800a050 <tcp_output_alloc_header+0x74>)
 8009ffc:	4815      	ldr	r0, [pc, #84]	; (800a054 <tcp_output_alloc_header+0x78>)
 8009ffe:	f003 fce9 	bl	800d9d4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	8adb      	ldrh	r3, [r3, #22]
 800a00a:	68fa      	ldr	r2, [r7, #12]
 800a00c:	8b12      	ldrh	r2, [r2, #24]
 800a00e:	68f9      	ldr	r1, [r7, #12]
 800a010:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800a012:	893d      	ldrh	r5, [r7, #8]
 800a014:	897c      	ldrh	r4, [r7, #10]
 800a016:	9103      	str	r1, [sp, #12]
 800a018:	2110      	movs	r1, #16
 800a01a:	9102      	str	r1, [sp, #8]
 800a01c:	9201      	str	r2, [sp, #4]
 800a01e:	9300      	str	r3, [sp, #0]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	462a      	mov	r2, r5
 800a024:	4621      	mov	r1, r4
 800a026:	f7ff ff67 	bl	8009ef8 <tcp_output_alloc_header_common>
 800a02a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d006      	beq.n	800a040 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a036:	68fa      	ldr	r2, [r7, #12]
 800a038:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a03a:	441a      	add	r2, r3
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800a040:	697b      	ldr	r3, [r7, #20]
}
 800a042:	4618      	mov	r0, r3
 800a044:	3718      	adds	r7, #24
 800a046:	46bd      	mov	sp, r7
 800a048:	bdb0      	pop	{r4, r5, r7, pc}
 800a04a:	bf00      	nop
 800a04c:	08010444 	.word	0x08010444
 800a050:	08010b4c 	.word	0x08010b4c
 800a054:	08010498 	.word	0x08010498

0800a058 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b088      	sub	sp, #32
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	4611      	mov	r1, r2
 800a064:	461a      	mov	r2, r3
 800a066:	460b      	mov	r3, r1
 800a068:	71fb      	strb	r3, [r7, #7]
 800a06a:	4613      	mov	r3, r2
 800a06c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800a06e:	2300      	movs	r3, #0
 800a070:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d106      	bne.n	800a086 <tcp_output_fill_options+0x2e>
 800a078:	4b13      	ldr	r3, [pc, #76]	; (800a0c8 <tcp_output_fill_options+0x70>)
 800a07a:	f240 7256 	movw	r2, #1878	; 0x756
 800a07e:	4913      	ldr	r1, [pc, #76]	; (800a0cc <tcp_output_fill_options+0x74>)
 800a080:	4813      	ldr	r0, [pc, #76]	; (800a0d0 <tcp_output_fill_options+0x78>)
 800a082:	f003 fca7 	bl	800d9d4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800a08c:	69bb      	ldr	r3, [r7, #24]
 800a08e:	3314      	adds	r3, #20
 800a090:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800a092:	69bb      	ldr	r3, [r7, #24]
 800a094:	f103 0214 	add.w	r2, r3, #20
 800a098:	8bfb      	ldrh	r3, [r7, #30]
 800a09a:	009b      	lsls	r3, r3, #2
 800a09c:	4619      	mov	r1, r3
 800a09e:	79fb      	ldrb	r3, [r7, #7]
 800a0a0:	009b      	lsls	r3, r3, #2
 800a0a2:	f003 0304 	and.w	r3, r3, #4
 800a0a6:	440b      	add	r3, r1
 800a0a8:	4413      	add	r3, r2
 800a0aa:	697a      	ldr	r2, [r7, #20]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d006      	beq.n	800a0be <tcp_output_fill_options+0x66>
 800a0b0:	4b05      	ldr	r3, [pc, #20]	; (800a0c8 <tcp_output_fill_options+0x70>)
 800a0b2:	f240 7275 	movw	r2, #1909	; 0x775
 800a0b6:	4907      	ldr	r1, [pc, #28]	; (800a0d4 <tcp_output_fill_options+0x7c>)
 800a0b8:	4805      	ldr	r0, [pc, #20]	; (800a0d0 <tcp_output_fill_options+0x78>)
 800a0ba:	f003 fc8b 	bl	800d9d4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800a0be:	bf00      	nop
 800a0c0:	3720      	adds	r7, #32
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	08010444 	.word	0x08010444
 800a0cc:	08010b74 	.word	0x08010b74
 800a0d0:	08010498 	.word	0x08010498
 800a0d4:	08010a6c 	.word	0x08010a6c

0800a0d8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b08a      	sub	sp, #40	; 0x28
 800a0dc:	af04      	add	r7, sp, #16
 800a0de:	60f8      	str	r0, [r7, #12]
 800a0e0:	60b9      	str	r1, [r7, #8]
 800a0e2:	607a      	str	r2, [r7, #4]
 800a0e4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d106      	bne.n	800a0fa <tcp_output_control_segment+0x22>
 800a0ec:	4b1c      	ldr	r3, [pc, #112]	; (800a160 <tcp_output_control_segment+0x88>)
 800a0ee:	f240 7287 	movw	r2, #1927	; 0x787
 800a0f2:	491c      	ldr	r1, [pc, #112]	; (800a164 <tcp_output_control_segment+0x8c>)
 800a0f4:	481c      	ldr	r0, [pc, #112]	; (800a168 <tcp_output_control_segment+0x90>)
 800a0f6:	f003 fc6d 	bl	800d9d4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800a0fa:	683a      	ldr	r2, [r7, #0]
 800a0fc:	6879      	ldr	r1, [r7, #4]
 800a0fe:	68f8      	ldr	r0, [r7, #12]
 800a100:	f7fe ff40 	bl	8008f84 <tcp_route>
 800a104:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d102      	bne.n	800a112 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800a10c:	23fc      	movs	r3, #252	; 0xfc
 800a10e:	75fb      	strb	r3, [r7, #23]
 800a110:	e01c      	b.n	800a14c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d006      	beq.n	800a126 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	7adb      	ldrb	r3, [r3, #11]
 800a11c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	7a9b      	ldrb	r3, [r3, #10]
 800a122:	757b      	strb	r3, [r7, #21]
 800a124:	e003      	b.n	800a12e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800a126:	23ff      	movs	r3, #255	; 0xff
 800a128:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800a12a:	2300      	movs	r3, #0
 800a12c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800a12e:	7dba      	ldrb	r2, [r7, #22]
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	9302      	str	r3, [sp, #8]
 800a134:	2306      	movs	r3, #6
 800a136:	9301      	str	r3, [sp, #4]
 800a138:	7d7b      	ldrb	r3, [r7, #21]
 800a13a:	9300      	str	r3, [sp, #0]
 800a13c:	4613      	mov	r3, r2
 800a13e:	683a      	ldr	r2, [r7, #0]
 800a140:	6879      	ldr	r1, [r7, #4]
 800a142:	68b8      	ldr	r0, [r7, #8]
 800a144:	f002 fb2a 	bl	800c79c <ip4_output_if>
 800a148:	4603      	mov	r3, r0
 800a14a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800a14c:	68b8      	ldr	r0, [r7, #8]
 800a14e:	f7fa fd47 	bl	8004be0 <pbuf_free>
  return err;
 800a152:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a156:	4618      	mov	r0, r3
 800a158:	3718      	adds	r7, #24
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop
 800a160:	08010444 	.word	0x08010444
 800a164:	08010b9c 	.word	0x08010b9c
 800a168:	08010498 	.word	0x08010498

0800a16c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800a16c:	b590      	push	{r4, r7, lr}
 800a16e:	b08b      	sub	sp, #44	; 0x2c
 800a170:	af04      	add	r7, sp, #16
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	607a      	str	r2, [r7, #4]
 800a178:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d106      	bne.n	800a18e <tcp_rst+0x22>
 800a180:	4b1f      	ldr	r3, [pc, #124]	; (800a200 <tcp_rst+0x94>)
 800a182:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800a186:	491f      	ldr	r1, [pc, #124]	; (800a204 <tcp_rst+0x98>)
 800a188:	481f      	ldr	r0, [pc, #124]	; (800a208 <tcp_rst+0x9c>)
 800a18a:	f003 fc23 	bl	800d9d4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800a18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a190:	2b00      	cmp	r3, #0
 800a192:	d106      	bne.n	800a1a2 <tcp_rst+0x36>
 800a194:	4b1a      	ldr	r3, [pc, #104]	; (800a200 <tcp_rst+0x94>)
 800a196:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800a19a:	491c      	ldr	r1, [pc, #112]	; (800a20c <tcp_rst+0xa0>)
 800a19c:	481a      	ldr	r0, [pc, #104]	; (800a208 <tcp_rst+0x9c>)
 800a19e:	f003 fc19 	bl	800d9d4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800a1a6:	f246 0308 	movw	r3, #24584	; 0x6008
 800a1aa:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800a1ac:	7dfb      	ldrb	r3, [r7, #23]
 800a1ae:	b29c      	uxth	r4, r3
 800a1b0:	68b8      	ldr	r0, [r7, #8]
 800a1b2:	f7f9 fa76 	bl	80036a2 <lwip_htonl>
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	8abb      	ldrh	r3, [r7, #20]
 800a1ba:	9303      	str	r3, [sp, #12]
 800a1bc:	2314      	movs	r3, #20
 800a1be:	9302      	str	r3, [sp, #8]
 800a1c0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a1c2:	9301      	str	r3, [sp, #4]
 800a1c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a1c6:	9300      	str	r3, [sp, #0]
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	4621      	mov	r1, r4
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f7ff fe92 	bl	8009ef8 <tcp_output_alloc_header_common>
 800a1d4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d00c      	beq.n	800a1f6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a1dc:	7dfb      	ldrb	r3, [r7, #23]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	6939      	ldr	r1, [r7, #16]
 800a1e2:	68f8      	ldr	r0, [r7, #12]
 800a1e4:	f7ff ff38 	bl	800a058 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800a1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ea:	683a      	ldr	r2, [r7, #0]
 800a1ec:	6939      	ldr	r1, [r7, #16]
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	f7ff ff72 	bl	800a0d8 <tcp_output_control_segment>
 800a1f4:	e000      	b.n	800a1f8 <tcp_rst+0x8c>
    return;
 800a1f6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800a1f8:	371c      	adds	r7, #28
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd90      	pop	{r4, r7, pc}
 800a1fe:	bf00      	nop
 800a200:	08010444 	.word	0x08010444
 800a204:	08010bc8 	.word	0x08010bc8
 800a208:	08010498 	.word	0x08010498
 800a20c:	08010be4 	.word	0x08010be4

0800a210 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800a210:	b590      	push	{r4, r7, lr}
 800a212:	b087      	sub	sp, #28
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800a218:	2300      	movs	r3, #0
 800a21a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800a21c:	2300      	movs	r3, #0
 800a21e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d106      	bne.n	800a234 <tcp_send_empty_ack+0x24>
 800a226:	4b28      	ldr	r3, [pc, #160]	; (800a2c8 <tcp_send_empty_ack+0xb8>)
 800a228:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800a22c:	4927      	ldr	r1, [pc, #156]	; (800a2cc <tcp_send_empty_ack+0xbc>)
 800a22e:	4828      	ldr	r0, [pc, #160]	; (800a2d0 <tcp_send_empty_ack+0xc0>)
 800a230:	f003 fbd0 	bl	800d9d4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a234:	7dfb      	ldrb	r3, [r7, #23]
 800a236:	009b      	lsls	r3, r3, #2
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	f003 0304 	and.w	r3, r3, #4
 800a23e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800a240:	7d7b      	ldrb	r3, [r7, #21]
 800a242:	b29c      	uxth	r4, r3
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a248:	4618      	mov	r0, r3
 800a24a:	f7f9 fa2a 	bl	80036a2 <lwip_htonl>
 800a24e:	4603      	mov	r3, r0
 800a250:	2200      	movs	r2, #0
 800a252:	4621      	mov	r1, r4
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f7ff fec1 	bl	8009fdc <tcp_output_alloc_header>
 800a25a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d109      	bne.n	800a276 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	8b5b      	ldrh	r3, [r3, #26]
 800a266:	f043 0303 	orr.w	r3, r3, #3
 800a26a:	b29a      	uxth	r2, r3
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800a270:	f06f 0301 	mvn.w	r3, #1
 800a274:	e023      	b.n	800a2be <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800a276:	7dbb      	ldrb	r3, [r7, #22]
 800a278:	7dfa      	ldrb	r2, [r7, #23]
 800a27a:	6939      	ldr	r1, [r7, #16]
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f7ff feeb 	bl	800a058 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	3304      	adds	r3, #4
 800a288:	6939      	ldr	r1, [r7, #16]
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f7ff ff24 	bl	800a0d8 <tcp_output_control_segment>
 800a290:	4603      	mov	r3, r0
 800a292:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800a294:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d007      	beq.n	800a2ac <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	8b5b      	ldrh	r3, [r3, #26]
 800a2a0:	f043 0303 	orr.w	r3, r3, #3
 800a2a4:	b29a      	uxth	r2, r3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	835a      	strh	r2, [r3, #26]
 800a2aa:	e006      	b.n	800a2ba <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	8b5b      	ldrh	r3, [r3, #26]
 800a2b0:	f023 0303 	bic.w	r3, r3, #3
 800a2b4:	b29a      	uxth	r2, r3
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800a2ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	371c      	adds	r7, #28
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd90      	pop	{r4, r7, pc}
 800a2c6:	bf00      	nop
 800a2c8:	08010444 	.word	0x08010444
 800a2cc:	08010c00 	.word	0x08010c00
 800a2d0:	08010498 	.word	0x08010498

0800a2d4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800a2d4:	b590      	push	{r4, r7, lr}
 800a2d6:	b087      	sub	sp, #28
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a2dc:	2300      	movs	r3, #0
 800a2de:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d106      	bne.n	800a2f4 <tcp_keepalive+0x20>
 800a2e6:	4b18      	ldr	r3, [pc, #96]	; (800a348 <tcp_keepalive+0x74>)
 800a2e8:	f640 0224 	movw	r2, #2084	; 0x824
 800a2ec:	4917      	ldr	r1, [pc, #92]	; (800a34c <tcp_keepalive+0x78>)
 800a2ee:	4818      	ldr	r0, [pc, #96]	; (800a350 <tcp_keepalive+0x7c>)
 800a2f0:	f003 fb70 	bl	800d9d4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800a2f4:	7dfb      	ldrb	r3, [r7, #23]
 800a2f6:	b29c      	uxth	r4, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	4618      	mov	r0, r3
 800a300:	f7f9 f9cf 	bl	80036a2 <lwip_htonl>
 800a304:	4603      	mov	r3, r0
 800a306:	2200      	movs	r2, #0
 800a308:	4621      	mov	r1, r4
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f7ff fe66 	bl	8009fdc <tcp_output_alloc_header>
 800a310:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d102      	bne.n	800a31e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800a318:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a31c:	e010      	b.n	800a340 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a31e:	7dfb      	ldrb	r3, [r7, #23]
 800a320:	2200      	movs	r2, #0
 800a322:	6939      	ldr	r1, [r7, #16]
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f7ff fe97 	bl	800a058 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	3304      	adds	r3, #4
 800a330:	6939      	ldr	r1, [r7, #16]
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f7ff fed0 	bl	800a0d8 <tcp_output_control_segment>
 800a338:	4603      	mov	r3, r0
 800a33a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a33c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a340:	4618      	mov	r0, r3
 800a342:	371c      	adds	r7, #28
 800a344:	46bd      	mov	sp, r7
 800a346:	bd90      	pop	{r4, r7, pc}
 800a348:	08010444 	.word	0x08010444
 800a34c:	08010c20 	.word	0x08010c20
 800a350:	08010498 	.word	0x08010498

0800a354 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800a354:	b590      	push	{r4, r7, lr}
 800a356:	b08b      	sub	sp, #44	; 0x2c
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a35c:	2300      	movs	r3, #0
 800a35e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d106      	bne.n	800a376 <tcp_zero_window_probe+0x22>
 800a368:	4b4c      	ldr	r3, [pc, #304]	; (800a49c <tcp_zero_window_probe+0x148>)
 800a36a:	f640 024f 	movw	r2, #2127	; 0x84f
 800a36e:	494c      	ldr	r1, [pc, #304]	; (800a4a0 <tcp_zero_window_probe+0x14c>)
 800a370:	484c      	ldr	r0, [pc, #304]	; (800a4a4 <tcp_zero_window_probe+0x150>)
 800a372:	f003 fb2f 	bl	800d9d4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a37a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800a37c:	6a3b      	ldr	r3, [r7, #32]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d101      	bne.n	800a386 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800a382:	2300      	movs	r3, #0
 800a384:	e086      	b.n	800a494 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a38c:	2bff      	cmp	r3, #255	; 0xff
 800a38e:	d007      	beq.n	800a3a0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a396:	3301      	adds	r3, #1
 800a398:	b2da      	uxtb	r2, r3
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a3a0:	6a3b      	ldr	r3, [r7, #32]
 800a3a2:	68db      	ldr	r3, [r3, #12]
 800a3a4:	899b      	ldrh	r3, [r3, #12]
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7f9 f965 	bl	8003678 <lwip_htons>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	f003 0301 	and.w	r3, r3, #1
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d005      	beq.n	800a3c6 <tcp_zero_window_probe+0x72>
 800a3ba:	6a3b      	ldr	r3, [r7, #32]
 800a3bc:	891b      	ldrh	r3, [r3, #8]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d101      	bne.n	800a3c6 <tcp_zero_window_probe+0x72>
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e000      	b.n	800a3c8 <tcp_zero_window_probe+0x74>
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800a3ca:	7ffb      	ldrb	r3, [r7, #31]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	bf0c      	ite	eq
 800a3d0:	2301      	moveq	r3, #1
 800a3d2:	2300      	movne	r3, #0
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800a3d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3dc:	b299      	uxth	r1, r3
 800a3de:	6a3b      	ldr	r3, [r7, #32]
 800a3e0:	68db      	ldr	r3, [r3, #12]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	8bba      	ldrh	r2, [r7, #28]
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f7ff fdf8 	bl	8009fdc <tcp_output_alloc_header>
 800a3ec:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800a3ee:	69bb      	ldr	r3, [r7, #24]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d102      	bne.n	800a3fa <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800a3f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a3f8:	e04c      	b.n	800a494 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800a3fa:	69bb      	ldr	r3, [r7, #24]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800a400:	7ffb      	ldrb	r3, [r7, #31]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d011      	beq.n	800a42a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	899b      	ldrh	r3, [r3, #12]
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	b21b      	sxth	r3, r3
 800a40e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a412:	b21c      	sxth	r4, r3
 800a414:	2011      	movs	r0, #17
 800a416:	f7f9 f92f 	bl	8003678 <lwip_htons>
 800a41a:	4603      	mov	r3, r0
 800a41c:	b21b      	sxth	r3, r3
 800a41e:	4323      	orrs	r3, r4
 800a420:	b21b      	sxth	r3, r3
 800a422:	b29a      	uxth	r2, r3
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	819a      	strh	r2, [r3, #12]
 800a428:	e010      	b.n	800a44c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800a42a:	69bb      	ldr	r3, [r7, #24]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	3314      	adds	r3, #20
 800a430:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800a432:	6a3b      	ldr	r3, [r7, #32]
 800a434:	6858      	ldr	r0, [r3, #4]
 800a436:	6a3b      	ldr	r3, [r7, #32]
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	891a      	ldrh	r2, [r3, #8]
 800a43c:	6a3b      	ldr	r3, [r7, #32]
 800a43e:	891b      	ldrh	r3, [r3, #8]
 800a440:	1ad3      	subs	r3, r2, r3
 800a442:	b29b      	uxth	r3, r3
 800a444:	2201      	movs	r2, #1
 800a446:	6939      	ldr	r1, [r7, #16]
 800a448:	f7fa fdc4 	bl	8004fd4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a44c:	6a3b      	ldr	r3, [r7, #32]
 800a44e:	68db      	ldr	r3, [r3, #12]
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	4618      	mov	r0, r3
 800a454:	f7f9 f925 	bl	80036a2 <lwip_htonl>
 800a458:	4603      	mov	r3, r0
 800a45a:	3301      	adds	r3, #1
 800a45c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	1ad3      	subs	r3, r2, r3
 800a466:	2b00      	cmp	r3, #0
 800a468:	da02      	bge.n	800a470 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	68fa      	ldr	r2, [r7, #12]
 800a46e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a470:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a474:	2200      	movs	r2, #0
 800a476:	69b9      	ldr	r1, [r7, #24]
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f7ff fded 	bl	800a058 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	3304      	adds	r3, #4
 800a484:	69b9      	ldr	r1, [r7, #24]
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f7ff fe26 	bl	800a0d8 <tcp_output_control_segment>
 800a48c:	4603      	mov	r3, r0
 800a48e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a490:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a494:	4618      	mov	r0, r3
 800a496:	372c      	adds	r7, #44	; 0x2c
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd90      	pop	{r4, r7, pc}
 800a49c:	08010444 	.word	0x08010444
 800a4a0:	08010c3c 	.word	0x08010c3c
 800a4a4:	08010498 	.word	0x08010498

0800a4a8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800a4b0:	f7fa ff10 	bl	80052d4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800a4b4:	4b0a      	ldr	r3, [pc, #40]	; (800a4e0 <tcpip_tcp_timer+0x38>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d103      	bne.n	800a4c4 <tcpip_tcp_timer+0x1c>
 800a4bc:	4b09      	ldr	r3, [pc, #36]	; (800a4e4 <tcpip_tcp_timer+0x3c>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d005      	beq.n	800a4d0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	4908      	ldr	r1, [pc, #32]	; (800a4e8 <tcpip_tcp_timer+0x40>)
 800a4c8:	20fa      	movs	r0, #250	; 0xfa
 800a4ca:	f000 f8f3 	bl	800a6b4 <sys_timeout>
 800a4ce:	e003      	b.n	800a4d8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800a4d0:	4b06      	ldr	r3, [pc, #24]	; (800a4ec <tcpip_tcp_timer+0x44>)
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	601a      	str	r2, [r3, #0]
  }
}
 800a4d6:	bf00      	nop
 800a4d8:	bf00      	nop
 800a4da:	3708      	adds	r7, #8
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	20008a5c 	.word	0x20008a5c
 800a4e4:	20008a6c 	.word	0x20008a6c
 800a4e8:	0800a4a9 	.word	0x0800a4a9
 800a4ec:	20000108 	.word	0x20000108

0800a4f0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800a4f4:	4b0a      	ldr	r3, [pc, #40]	; (800a520 <tcp_timer_needed+0x30>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d10f      	bne.n	800a51c <tcp_timer_needed+0x2c>
 800a4fc:	4b09      	ldr	r3, [pc, #36]	; (800a524 <tcp_timer_needed+0x34>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d103      	bne.n	800a50c <tcp_timer_needed+0x1c>
 800a504:	4b08      	ldr	r3, [pc, #32]	; (800a528 <tcp_timer_needed+0x38>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d007      	beq.n	800a51c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800a50c:	4b04      	ldr	r3, [pc, #16]	; (800a520 <tcp_timer_needed+0x30>)
 800a50e:	2201      	movs	r2, #1
 800a510:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a512:	2200      	movs	r2, #0
 800a514:	4905      	ldr	r1, [pc, #20]	; (800a52c <tcp_timer_needed+0x3c>)
 800a516:	20fa      	movs	r0, #250	; 0xfa
 800a518:	f000 f8cc 	bl	800a6b4 <sys_timeout>
  }
}
 800a51c:	bf00      	nop
 800a51e:	bd80      	pop	{r7, pc}
 800a520:	20000108 	.word	0x20000108
 800a524:	20008a5c 	.word	0x20008a5c
 800a528:	20008a6c 	.word	0x20008a6c
 800a52c:	0800a4a9 	.word	0x0800a4a9

0800a530 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b086      	sub	sp, #24
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	60b9      	str	r1, [r7, #8]
 800a53a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a53c:	2006      	movs	r0, #6
 800a53e:	f7f9 fcf1 	bl	8003f24 <memp_malloc>
 800a542:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d109      	bne.n	800a55e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d151      	bne.n	800a5f4 <sys_timeout_abs+0xc4>
 800a550:	4b2a      	ldr	r3, [pc, #168]	; (800a5fc <sys_timeout_abs+0xcc>)
 800a552:	22be      	movs	r2, #190	; 0xbe
 800a554:	492a      	ldr	r1, [pc, #168]	; (800a600 <sys_timeout_abs+0xd0>)
 800a556:	482b      	ldr	r0, [pc, #172]	; (800a604 <sys_timeout_abs+0xd4>)
 800a558:	f003 fa3c 	bl	800d9d4 <iprintf>
    return;
 800a55c:	e04a      	b.n	800a5f4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	2200      	movs	r2, #0
 800a562:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	68ba      	ldr	r2, [r7, #8]
 800a568:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	687a      	ldr	r2, [r7, #4]
 800a56e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	68fa      	ldr	r2, [r7, #12]
 800a574:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800a576:	4b24      	ldr	r3, [pc, #144]	; (800a608 <sys_timeout_abs+0xd8>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d103      	bne.n	800a586 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800a57e:	4a22      	ldr	r2, [pc, #136]	; (800a608 <sys_timeout_abs+0xd8>)
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	6013      	str	r3, [r2, #0]
    return;
 800a584:	e037      	b.n	800a5f6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	685a      	ldr	r2, [r3, #4]
 800a58a:	4b1f      	ldr	r3, [pc, #124]	; (800a608 <sys_timeout_abs+0xd8>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	1ad3      	subs	r3, r2, r3
 800a592:	0fdb      	lsrs	r3, r3, #31
 800a594:	f003 0301 	and.w	r3, r3, #1
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d007      	beq.n	800a5ae <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800a59e:	4b1a      	ldr	r3, [pc, #104]	; (800a608 <sys_timeout_abs+0xd8>)
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800a5a6:	4a18      	ldr	r2, [pc, #96]	; (800a608 <sys_timeout_abs+0xd8>)
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	6013      	str	r3, [r2, #0]
 800a5ac:	e023      	b.n	800a5f6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800a5ae:	4b16      	ldr	r3, [pc, #88]	; (800a608 <sys_timeout_abs+0xd8>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	617b      	str	r3, [r7, #20]
 800a5b4:	e01a      	b.n	800a5ec <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d00b      	beq.n	800a5d6 <sys_timeout_abs+0xa6>
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	685a      	ldr	r2, [r3, #4]
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	1ad3      	subs	r3, r2, r3
 800a5ca:	0fdb      	lsrs	r3, r3, #31
 800a5cc:	f003 0301 	and.w	r3, r3, #1
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d007      	beq.n	800a5e6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	693a      	ldr	r2, [r7, #16]
 800a5e2:	601a      	str	r2, [r3, #0]
        break;
 800a5e4:	e007      	b.n	800a5f6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	617b      	str	r3, [r7, #20]
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d1e1      	bne.n	800a5b6 <sys_timeout_abs+0x86>
 800a5f2:	e000      	b.n	800a5f6 <sys_timeout_abs+0xc6>
    return;
 800a5f4:	bf00      	nop
      }
    }
  }
}
 800a5f6:	3718      	adds	r7, #24
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}
 800a5fc:	08010c60 	.word	0x08010c60
 800a600:	08010c94 	.word	0x08010c94
 800a604:	08010cd4 	.word	0x08010cd4
 800a608:	20000100 	.word	0x20000100

0800a60c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b086      	sub	sp, #24
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	4798      	blx	r3

  now = sys_now();
 800a61e:	f7f8 ff9d 	bl	800355c <sys_now>
 800a622:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	681a      	ldr	r2, [r3, #0]
 800a628:	4b0f      	ldr	r3, [pc, #60]	; (800a668 <lwip_cyclic_timer+0x5c>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4413      	add	r3, r2
 800a62e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800a630:	68fa      	ldr	r2, [r7, #12]
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	1ad3      	subs	r3, r2, r3
 800a636:	0fdb      	lsrs	r3, r3, #31
 800a638:	f003 0301 	and.w	r3, r3, #1
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d009      	beq.n	800a656 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	681a      	ldr	r2, [r3, #0]
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	4413      	add	r3, r2
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	4907      	ldr	r1, [pc, #28]	; (800a66c <lwip_cyclic_timer+0x60>)
 800a64e:	4618      	mov	r0, r3
 800a650:	f7ff ff6e 	bl	800a530 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800a654:	e004      	b.n	800a660 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800a656:	687a      	ldr	r2, [r7, #4]
 800a658:	4904      	ldr	r1, [pc, #16]	; (800a66c <lwip_cyclic_timer+0x60>)
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	f7ff ff68 	bl	800a530 <sys_timeout_abs>
}
 800a660:	bf00      	nop
 800a662:	3718      	adds	r7, #24
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}
 800a668:	20000104 	.word	0x20000104
 800a66c:	0800a60d 	.word	0x0800a60d

0800a670 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a676:	2301      	movs	r3, #1
 800a678:	607b      	str	r3, [r7, #4]
 800a67a:	e00e      	b.n	800a69a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800a67c:	4a0b      	ldr	r2, [pc, #44]	; (800a6ac <sys_timeouts_init+0x3c>)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	00db      	lsls	r3, r3, #3
 800a688:	4a08      	ldr	r2, [pc, #32]	; (800a6ac <sys_timeouts_init+0x3c>)
 800a68a:	4413      	add	r3, r2
 800a68c:	461a      	mov	r2, r3
 800a68e:	4908      	ldr	r1, [pc, #32]	; (800a6b0 <sys_timeouts_init+0x40>)
 800a690:	f000 f810 	bl	800a6b4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	3301      	adds	r3, #1
 800a698:	607b      	str	r3, [r7, #4]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2b02      	cmp	r3, #2
 800a69e:	d9ed      	bls.n	800a67c <sys_timeouts_init+0xc>
  }
}
 800a6a0:	bf00      	nop
 800a6a2:	bf00      	nop
 800a6a4:	3708      	adds	r7, #8
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	08011838 	.word	0x08011838
 800a6b0:	0800a60d 	.word	0x0800a60d

0800a6b4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b086      	sub	sp, #24
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	60b9      	str	r1, [r7, #8]
 800a6be:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6c6:	d306      	bcc.n	800a6d6 <sys_timeout+0x22>
 800a6c8:	4b0a      	ldr	r3, [pc, #40]	; (800a6f4 <sys_timeout+0x40>)
 800a6ca:	f240 1229 	movw	r2, #297	; 0x129
 800a6ce:	490a      	ldr	r1, [pc, #40]	; (800a6f8 <sys_timeout+0x44>)
 800a6d0:	480a      	ldr	r0, [pc, #40]	; (800a6fc <sys_timeout+0x48>)
 800a6d2:	f003 f97f 	bl	800d9d4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800a6d6:	f7f8 ff41 	bl	800355c <sys_now>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	4413      	add	r3, r2
 800a6e0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	68b9      	ldr	r1, [r7, #8]
 800a6e6:	6978      	ldr	r0, [r7, #20]
 800a6e8:	f7ff ff22 	bl	800a530 <sys_timeout_abs>
#endif
}
 800a6ec:	bf00      	nop
 800a6ee:	3718      	adds	r7, #24
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}
 800a6f4:	08010c60 	.word	0x08010c60
 800a6f8:	08010cfc 	.word	0x08010cfc
 800a6fc:	08010cd4 	.word	0x08010cd4

0800a700 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800a706:	f7f8 ff29 	bl	800355c <sys_now>
 800a70a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800a70c:	4b1a      	ldr	r3, [pc, #104]	; (800a778 <sys_check_timeouts+0x78>)
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	b2db      	uxtb	r3, r3
 800a712:	2b00      	cmp	r3, #0
 800a714:	d001      	beq.n	800a71a <sys_check_timeouts+0x1a>
 800a716:	f7f9 ff29 	bl	800456c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800a71a:	4b18      	ldr	r3, [pc, #96]	; (800a77c <sys_check_timeouts+0x7c>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d022      	beq.n	800a76c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	68fa      	ldr	r2, [r7, #12]
 800a72c:	1ad3      	subs	r3, r2, r3
 800a72e:	0fdb      	lsrs	r3, r3, #31
 800a730:	f003 0301 	and.w	r3, r3, #1
 800a734:	b2db      	uxtb	r3, r3
 800a736:	2b00      	cmp	r3, #0
 800a738:	d11a      	bne.n	800a770 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a0f      	ldr	r2, [pc, #60]	; (800a77c <sys_check_timeouts+0x7c>)
 800a740:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	689b      	ldr	r3, [r3, #8]
 800a746:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	68db      	ldr	r3, [r3, #12]
 800a74c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	4a0b      	ldr	r2, [pc, #44]	; (800a780 <sys_check_timeouts+0x80>)
 800a754:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800a756:	68b9      	ldr	r1, [r7, #8]
 800a758:	2006      	movs	r0, #6
 800a75a:	f7f9 fc2f 	bl	8003fbc <memp_free>
    if (handler != NULL) {
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d0d3      	beq.n	800a70c <sys_check_timeouts+0xc>
      handler(arg);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6838      	ldr	r0, [r7, #0]
 800a768:	4798      	blx	r3
  do {
 800a76a:	e7cf      	b.n	800a70c <sys_check_timeouts+0xc>
      return;
 800a76c:	bf00      	nop
 800a76e:	e000      	b.n	800a772 <sys_check_timeouts+0x72>
      return;
 800a770:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800a772:	3710      	adds	r7, #16
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}
 800a778:	20008a54 	.word	0x20008a54
 800a77c:	20000100 	.word	0x20000100
 800a780:	20000104 	.word	0x20000104

0800a784 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a788:	f003 f93c 	bl	800da04 <rand>
 800a78c:	4603      	mov	r3, r0
 800a78e:	b29b      	uxth	r3, r3
 800a790:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a794:	b29b      	uxth	r3, r3
 800a796:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800a79a:	b29a      	uxth	r2, r3
 800a79c:	4b01      	ldr	r3, [pc, #4]	; (800a7a4 <udp_init+0x20>)
 800a79e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a7a0:	bf00      	nop
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	20000010 	.word	0x20000010

0800a7a8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800a7b2:	4b17      	ldr	r3, [pc, #92]	; (800a810 <udp_new_port+0x68>)
 800a7b4:	881b      	ldrh	r3, [r3, #0]
 800a7b6:	1c5a      	adds	r2, r3, #1
 800a7b8:	b291      	uxth	r1, r2
 800a7ba:	4a15      	ldr	r2, [pc, #84]	; (800a810 <udp_new_port+0x68>)
 800a7bc:	8011      	strh	r1, [r2, #0]
 800a7be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d103      	bne.n	800a7ce <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800a7c6:	4b12      	ldr	r3, [pc, #72]	; (800a810 <udp_new_port+0x68>)
 800a7c8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800a7cc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a7ce:	4b11      	ldr	r3, [pc, #68]	; (800a814 <udp_new_port+0x6c>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	603b      	str	r3, [r7, #0]
 800a7d4:	e011      	b.n	800a7fa <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	8a5a      	ldrh	r2, [r3, #18]
 800a7da:	4b0d      	ldr	r3, [pc, #52]	; (800a810 <udp_new_port+0x68>)
 800a7dc:	881b      	ldrh	r3, [r3, #0]
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d108      	bne.n	800a7f4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800a7e2:	88fb      	ldrh	r3, [r7, #6]
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	80fb      	strh	r3, [r7, #6]
 800a7e8:	88fb      	ldrh	r3, [r7, #6]
 800a7ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a7ee:	d3e0      	bcc.n	800a7b2 <udp_new_port+0xa>
        return 0;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	e007      	b.n	800a804 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	603b      	str	r3, [r7, #0]
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d1ea      	bne.n	800a7d6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800a800:	4b03      	ldr	r3, [pc, #12]	; (800a810 <udp_new_port+0x68>)
 800a802:	881b      	ldrh	r3, [r3, #0]
}
 800a804:	4618      	mov	r0, r3
 800a806:	370c      	adds	r7, #12
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr
 800a810:	20000010 	.word	0x20000010
 800a814:	20008a74 	.word	0x20008a74

0800a818 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	60f8      	str	r0, [r7, #12]
 800a820:	60b9      	str	r1, [r7, #8]
 800a822:	4613      	mov	r3, r2
 800a824:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d105      	bne.n	800a838 <udp_input_local_match+0x20>
 800a82c:	4b27      	ldr	r3, [pc, #156]	; (800a8cc <udp_input_local_match+0xb4>)
 800a82e:	2287      	movs	r2, #135	; 0x87
 800a830:	4927      	ldr	r1, [pc, #156]	; (800a8d0 <udp_input_local_match+0xb8>)
 800a832:	4828      	ldr	r0, [pc, #160]	; (800a8d4 <udp_input_local_match+0xbc>)
 800a834:	f003 f8ce 	bl	800d9d4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d105      	bne.n	800a84a <udp_input_local_match+0x32>
 800a83e:	4b23      	ldr	r3, [pc, #140]	; (800a8cc <udp_input_local_match+0xb4>)
 800a840:	2288      	movs	r2, #136	; 0x88
 800a842:	4925      	ldr	r1, [pc, #148]	; (800a8d8 <udp_input_local_match+0xc0>)
 800a844:	4823      	ldr	r0, [pc, #140]	; (800a8d4 <udp_input_local_match+0xbc>)
 800a846:	f003 f8c5 	bl	800d9d4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	7a1b      	ldrb	r3, [r3, #8]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d00b      	beq.n	800a86a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	7a1a      	ldrb	r2, [r3, #8]
 800a856:	4b21      	ldr	r3, [pc, #132]	; (800a8dc <udp_input_local_match+0xc4>)
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a85e:	3301      	adds	r3, #1
 800a860:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a862:	429a      	cmp	r2, r3
 800a864:	d001      	beq.n	800a86a <udp_input_local_match+0x52>
    return 0;
 800a866:	2300      	movs	r3, #0
 800a868:	e02b      	b.n	800a8c2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800a86a:	79fb      	ldrb	r3, [r7, #7]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d018      	beq.n	800a8a2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d013      	beq.n	800a89e <udp_input_local_match+0x86>
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d00f      	beq.n	800a89e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a87e:	4b17      	ldr	r3, [pc, #92]	; (800a8dc <udp_input_local_match+0xc4>)
 800a880:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a882:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a886:	d00a      	beq.n	800a89e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	4b13      	ldr	r3, [pc, #76]	; (800a8dc <udp_input_local_match+0xc4>)
 800a88e:	695b      	ldr	r3, [r3, #20]
 800a890:	405a      	eors	r2, r3
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	3308      	adds	r3, #8
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d110      	bne.n	800a8c0 <udp_input_local_match+0xa8>
          return 1;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	e00f      	b.n	800a8c2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d009      	beq.n	800a8bc <udp_input_local_match+0xa4>
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d005      	beq.n	800a8bc <udp_input_local_match+0xa4>
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	4b09      	ldr	r3, [pc, #36]	; (800a8dc <udp_input_local_match+0xc4>)
 800a8b6:	695b      	ldr	r3, [r3, #20]
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d101      	bne.n	800a8c0 <udp_input_local_match+0xa8>
        return 1;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	e000      	b.n	800a8c2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800a8c0:	2300      	movs	r3, #0
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3710      	adds	r7, #16
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	08010d48 	.word	0x08010d48
 800a8d0:	08010d78 	.word	0x08010d78
 800a8d4:	08010d9c 	.word	0x08010d9c
 800a8d8:	08010dc4 	.word	0x08010dc4
 800a8dc:	20003358 	.word	0x20003358

0800a8e0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800a8e0:	b590      	push	{r4, r7, lr}
 800a8e2:	b08d      	sub	sp, #52	; 0x34
 800a8e4:	af02      	add	r7, sp, #8
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d105      	bne.n	800a900 <udp_input+0x20>
 800a8f4:	4b7c      	ldr	r3, [pc, #496]	; (800aae8 <udp_input+0x208>)
 800a8f6:	22cf      	movs	r2, #207	; 0xcf
 800a8f8:	497c      	ldr	r1, [pc, #496]	; (800aaec <udp_input+0x20c>)
 800a8fa:	487d      	ldr	r0, [pc, #500]	; (800aaf0 <udp_input+0x210>)
 800a8fc:	f003 f86a 	bl	800d9d4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d105      	bne.n	800a912 <udp_input+0x32>
 800a906:	4b78      	ldr	r3, [pc, #480]	; (800aae8 <udp_input+0x208>)
 800a908:	22d0      	movs	r2, #208	; 0xd0
 800a90a:	497a      	ldr	r1, [pc, #488]	; (800aaf4 <udp_input+0x214>)
 800a90c:	4878      	ldr	r0, [pc, #480]	; (800aaf0 <udp_input+0x210>)
 800a90e:	f003 f861 	bl	800d9d4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	895b      	ldrh	r3, [r3, #10]
 800a916:	2b07      	cmp	r3, #7
 800a918:	d803      	bhi.n	800a922 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f7fa f960 	bl	8004be0 <pbuf_free>
    goto end;
 800a920:	e0de      	b.n	800aae0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800a928:	4b73      	ldr	r3, [pc, #460]	; (800aaf8 <udp_input+0x218>)
 800a92a:	695b      	ldr	r3, [r3, #20]
 800a92c:	4a72      	ldr	r2, [pc, #456]	; (800aaf8 <udp_input+0x218>)
 800a92e:	6812      	ldr	r2, [r2, #0]
 800a930:	4611      	mov	r1, r2
 800a932:	4618      	mov	r0, r3
 800a934:	f002 f80a 	bl	800c94c <ip4_addr_isbroadcast_u32>
 800a938:	4603      	mov	r3, r0
 800a93a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	881b      	ldrh	r3, [r3, #0]
 800a940:	b29b      	uxth	r3, r3
 800a942:	4618      	mov	r0, r3
 800a944:	f7f8 fe98 	bl	8003678 <lwip_htons>
 800a948:	4603      	mov	r3, r0
 800a94a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	885b      	ldrh	r3, [r3, #2]
 800a950:	b29b      	uxth	r3, r3
 800a952:	4618      	mov	r0, r3
 800a954:	f7f8 fe90 	bl	8003678 <lwip_htons>
 800a958:	4603      	mov	r3, r0
 800a95a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800a95c:	2300      	movs	r3, #0
 800a95e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800a960:	2300      	movs	r3, #0
 800a962:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800a964:	2300      	movs	r3, #0
 800a966:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a968:	4b64      	ldr	r3, [pc, #400]	; (800aafc <udp_input+0x21c>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	627b      	str	r3, [r7, #36]	; 0x24
 800a96e:	e054      	b.n	800aa1a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800a970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a972:	8a5b      	ldrh	r3, [r3, #18]
 800a974:	89fa      	ldrh	r2, [r7, #14]
 800a976:	429a      	cmp	r2, r3
 800a978:	d14a      	bne.n	800aa10 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800a97a:	7cfb      	ldrb	r3, [r7, #19]
 800a97c:	461a      	mov	r2, r3
 800a97e:	6839      	ldr	r1, [r7, #0]
 800a980:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a982:	f7ff ff49 	bl	800a818 <udp_input_local_match>
 800a986:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d041      	beq.n	800aa10 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800a98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a98e:	7c1b      	ldrb	r3, [r3, #16]
 800a990:	f003 0304 	and.w	r3, r3, #4
 800a994:	2b00      	cmp	r3, #0
 800a996:	d11d      	bne.n	800a9d4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800a998:	69fb      	ldr	r3, [r7, #28]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d102      	bne.n	800a9a4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800a99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a0:	61fb      	str	r3, [r7, #28]
 800a9a2:	e017      	b.n	800a9d4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800a9a4:	7cfb      	ldrb	r3, [r7, #19]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d014      	beq.n	800a9d4 <udp_input+0xf4>
 800a9aa:	4b53      	ldr	r3, [pc, #332]	; (800aaf8 <udp_input+0x218>)
 800a9ac:	695b      	ldr	r3, [r3, #20]
 800a9ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9b2:	d10f      	bne.n	800a9d4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800a9b4:	69fb      	ldr	r3, [r7, #28]
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	3304      	adds	r3, #4
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d008      	beq.n	800a9d4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800a9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c4:	681a      	ldr	r2, [r3, #0]
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	3304      	adds	r3, #4
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d101      	bne.n	800a9d4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800a9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800a9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d6:	8a9b      	ldrh	r3, [r3, #20]
 800a9d8:	8a3a      	ldrh	r2, [r7, #16]
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d118      	bne.n	800aa10 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800a9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d005      	beq.n	800a9f2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800a9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e8:	685a      	ldr	r2, [r3, #4]
 800a9ea:	4b43      	ldr	r3, [pc, #268]	; (800aaf8 <udp_input+0x218>)
 800a9ec:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d10e      	bne.n	800aa10 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800a9f2:	6a3b      	ldr	r3, [r7, #32]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d014      	beq.n	800aa22 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800a9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fa:	68da      	ldr	r2, [r3, #12]
 800a9fc:	6a3b      	ldr	r3, [r7, #32]
 800a9fe:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800aa00:	4b3e      	ldr	r3, [pc, #248]	; (800aafc <udp_input+0x21c>)
 800aa02:	681a      	ldr	r2, [r3, #0]
 800aa04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa06:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800aa08:	4a3c      	ldr	r2, [pc, #240]	; (800aafc <udp_input+0x21c>)
 800aa0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800aa0e:	e008      	b.n	800aa22 <udp_input+0x142>
      }
    }

    prev = pcb;
 800aa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa12:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa16:	68db      	ldr	r3, [r3, #12]
 800aa18:	627b      	str	r3, [r7, #36]	; 0x24
 800aa1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d1a7      	bne.n	800a970 <udp_input+0x90>
 800aa20:	e000      	b.n	800aa24 <udp_input+0x144>
        break;
 800aa22:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800aa24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d101      	bne.n	800aa2e <udp_input+0x14e>
    pcb = uncon_pcb;
 800aa2a:	69fb      	ldr	r3, [r7, #28]
 800aa2c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800aa2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d002      	beq.n	800aa3a <udp_input+0x15a>
    for_us = 1;
 800aa34:	2301      	movs	r3, #1
 800aa36:	76fb      	strb	r3, [r7, #27]
 800aa38:	e00a      	b.n	800aa50 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	3304      	adds	r3, #4
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	4b2d      	ldr	r3, [pc, #180]	; (800aaf8 <udp_input+0x218>)
 800aa42:	695b      	ldr	r3, [r3, #20]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	bf0c      	ite	eq
 800aa48:	2301      	moveq	r3, #1
 800aa4a:	2300      	movne	r3, #0
 800aa4c:	b2db      	uxtb	r3, r3
 800aa4e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800aa50:	7efb      	ldrb	r3, [r7, #27]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d041      	beq.n	800aada <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800aa56:	2108      	movs	r1, #8
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f7fa f83b 	bl	8004ad4 <pbuf_remove_header>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d00a      	beq.n	800aa7a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800aa64:	4b20      	ldr	r3, [pc, #128]	; (800aae8 <udp_input+0x208>)
 800aa66:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800aa6a:	4925      	ldr	r1, [pc, #148]	; (800ab00 <udp_input+0x220>)
 800aa6c:	4820      	ldr	r0, [pc, #128]	; (800aaf0 <udp_input+0x210>)
 800aa6e:	f002 ffb1 	bl	800d9d4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f7fa f8b4 	bl	8004be0 <pbuf_free>
      goto end;
 800aa78:	e032      	b.n	800aae0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800aa7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d012      	beq.n	800aaa6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800aa80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa82:	699b      	ldr	r3, [r3, #24]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d00a      	beq.n	800aa9e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800aa88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8a:	699c      	ldr	r4, [r3, #24]
 800aa8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8e:	69d8      	ldr	r0, [r3, #28]
 800aa90:	8a3b      	ldrh	r3, [r7, #16]
 800aa92:	9300      	str	r3, [sp, #0]
 800aa94:	4b1b      	ldr	r3, [pc, #108]	; (800ab04 <udp_input+0x224>)
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa9a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800aa9c:	e021      	b.n	800aae2 <udp_input+0x202>
        pbuf_free(p);
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f7fa f89e 	bl	8004be0 <pbuf_free>
        goto end;
 800aaa4:	e01c      	b.n	800aae0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800aaa6:	7cfb      	ldrb	r3, [r7, #19]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d112      	bne.n	800aad2 <udp_input+0x1f2>
 800aaac:	4b12      	ldr	r3, [pc, #72]	; (800aaf8 <udp_input+0x218>)
 800aaae:	695b      	ldr	r3, [r3, #20]
 800aab0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aab4:	2be0      	cmp	r3, #224	; 0xe0
 800aab6:	d00c      	beq.n	800aad2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800aab8:	4b0f      	ldr	r3, [pc, #60]	; (800aaf8 <udp_input+0x218>)
 800aaba:	899b      	ldrh	r3, [r3, #12]
 800aabc:	3308      	adds	r3, #8
 800aabe:	b29b      	uxth	r3, r3
 800aac0:	b21b      	sxth	r3, r3
 800aac2:	4619      	mov	r1, r3
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f7fa f878 	bl	8004bba <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800aaca:	2103      	movs	r1, #3
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f001 fc1d 	bl	800c30c <icmp_dest_unreach>
      pbuf_free(p);
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f7fa f884 	bl	8004be0 <pbuf_free>
  return;
 800aad8:	e003      	b.n	800aae2 <udp_input+0x202>
    pbuf_free(p);
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f7fa f880 	bl	8004be0 <pbuf_free>
  return;
 800aae0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800aae2:	372c      	adds	r7, #44	; 0x2c
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd90      	pop	{r4, r7, pc}
 800aae8:	08010d48 	.word	0x08010d48
 800aaec:	08010dec 	.word	0x08010dec
 800aaf0:	08010d9c 	.word	0x08010d9c
 800aaf4:	08010e04 	.word	0x08010e04
 800aaf8:	20003358 	.word	0x20003358
 800aafc:	20008a74 	.word	0x20008a74
 800ab00:	08010e20 	.word	0x08010e20
 800ab04:	20003368 	.word	0x20003368

0800ab08 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d109      	bne.n	800ab2c <udp_send+0x24>
 800ab18:	4b11      	ldr	r3, [pc, #68]	; (800ab60 <udp_send+0x58>)
 800ab1a:	f240 12d5 	movw	r2, #469	; 0x1d5
 800ab1e:	4911      	ldr	r1, [pc, #68]	; (800ab64 <udp_send+0x5c>)
 800ab20:	4811      	ldr	r0, [pc, #68]	; (800ab68 <udp_send+0x60>)
 800ab22:	f002 ff57 	bl	800d9d4 <iprintf>
 800ab26:	f06f 030f 	mvn.w	r3, #15
 800ab2a:	e015      	b.n	800ab58 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d109      	bne.n	800ab46 <udp_send+0x3e>
 800ab32:	4b0b      	ldr	r3, [pc, #44]	; (800ab60 <udp_send+0x58>)
 800ab34:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800ab38:	490c      	ldr	r1, [pc, #48]	; (800ab6c <udp_send+0x64>)
 800ab3a:	480b      	ldr	r0, [pc, #44]	; (800ab68 <udp_send+0x60>)
 800ab3c:	f002 ff4a 	bl	800d9d4 <iprintf>
 800ab40:	f06f 030f 	mvn.w	r3, #15
 800ab44:	e008      	b.n	800ab58 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	1d1a      	adds	r2, r3, #4
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	8a9b      	ldrh	r3, [r3, #20]
 800ab4e:	6839      	ldr	r1, [r7, #0]
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 f80d 	bl	800ab70 <udp_sendto>
 800ab56:	4603      	mov	r3, r0
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3708      	adds	r7, #8
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	08010d48 	.word	0x08010d48
 800ab64:	08010e3c 	.word	0x08010e3c
 800ab68:	08010d9c 	.word	0x08010d9c
 800ab6c:	08010e54 	.word	0x08010e54

0800ab70 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b088      	sub	sp, #32
 800ab74:	af02      	add	r7, sp, #8
 800ab76:	60f8      	str	r0, [r7, #12]
 800ab78:	60b9      	str	r1, [r7, #8]
 800ab7a:	607a      	str	r2, [r7, #4]
 800ab7c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d109      	bne.n	800ab98 <udp_sendto+0x28>
 800ab84:	4b23      	ldr	r3, [pc, #140]	; (800ac14 <udp_sendto+0xa4>)
 800ab86:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ab8a:	4923      	ldr	r1, [pc, #140]	; (800ac18 <udp_sendto+0xa8>)
 800ab8c:	4823      	ldr	r0, [pc, #140]	; (800ac1c <udp_sendto+0xac>)
 800ab8e:	f002 ff21 	bl	800d9d4 <iprintf>
 800ab92:	f06f 030f 	mvn.w	r3, #15
 800ab96:	e038      	b.n	800ac0a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d109      	bne.n	800abb2 <udp_sendto+0x42>
 800ab9e:	4b1d      	ldr	r3, [pc, #116]	; (800ac14 <udp_sendto+0xa4>)
 800aba0:	f240 2219 	movw	r2, #537	; 0x219
 800aba4:	491e      	ldr	r1, [pc, #120]	; (800ac20 <udp_sendto+0xb0>)
 800aba6:	481d      	ldr	r0, [pc, #116]	; (800ac1c <udp_sendto+0xac>)
 800aba8:	f002 ff14 	bl	800d9d4 <iprintf>
 800abac:	f06f 030f 	mvn.w	r3, #15
 800abb0:	e02b      	b.n	800ac0a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d109      	bne.n	800abcc <udp_sendto+0x5c>
 800abb8:	4b16      	ldr	r3, [pc, #88]	; (800ac14 <udp_sendto+0xa4>)
 800abba:	f240 221a 	movw	r2, #538	; 0x21a
 800abbe:	4919      	ldr	r1, [pc, #100]	; (800ac24 <udp_sendto+0xb4>)
 800abc0:	4816      	ldr	r0, [pc, #88]	; (800ac1c <udp_sendto+0xac>)
 800abc2:	f002 ff07 	bl	800d9d4 <iprintf>
 800abc6:	f06f 030f 	mvn.w	r3, #15
 800abca:	e01e      	b.n	800ac0a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	7a1b      	ldrb	r3, [r3, #8]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d006      	beq.n	800abe2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	7a1b      	ldrb	r3, [r3, #8]
 800abd8:	4618      	mov	r0, r3
 800abda:	f7f9 fca1 	bl	8004520 <netif_get_by_index>
 800abde:	6178      	str	r0, [r7, #20]
 800abe0:	e003      	b.n	800abea <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f001 fc1c 	bl	800c420 <ip4_route>
 800abe8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d102      	bne.n	800abf6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800abf0:	f06f 0303 	mvn.w	r3, #3
 800abf4:	e009      	b.n	800ac0a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800abf6:	887a      	ldrh	r2, [r7, #2]
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	9300      	str	r3, [sp, #0]
 800abfc:	4613      	mov	r3, r2
 800abfe:	687a      	ldr	r2, [r7, #4]
 800ac00:	68b9      	ldr	r1, [r7, #8]
 800ac02:	68f8      	ldr	r0, [r7, #12]
 800ac04:	f000 f810 	bl	800ac28 <udp_sendto_if>
 800ac08:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3718      	adds	r7, #24
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	08010d48 	.word	0x08010d48
 800ac18:	08010e6c 	.word	0x08010e6c
 800ac1c:	08010d9c 	.word	0x08010d9c
 800ac20:	08010e84 	.word	0x08010e84
 800ac24:	08010ea0 	.word	0x08010ea0

0800ac28 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b088      	sub	sp, #32
 800ac2c:	af02      	add	r7, sp, #8
 800ac2e:	60f8      	str	r0, [r7, #12]
 800ac30:	60b9      	str	r1, [r7, #8]
 800ac32:	607a      	str	r2, [r7, #4]
 800ac34:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d109      	bne.n	800ac50 <udp_sendto_if+0x28>
 800ac3c:	4b2e      	ldr	r3, [pc, #184]	; (800acf8 <udp_sendto_if+0xd0>)
 800ac3e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ac42:	492e      	ldr	r1, [pc, #184]	; (800acfc <udp_sendto_if+0xd4>)
 800ac44:	482e      	ldr	r0, [pc, #184]	; (800ad00 <udp_sendto_if+0xd8>)
 800ac46:	f002 fec5 	bl	800d9d4 <iprintf>
 800ac4a:	f06f 030f 	mvn.w	r3, #15
 800ac4e:	e04f      	b.n	800acf0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d109      	bne.n	800ac6a <udp_sendto_if+0x42>
 800ac56:	4b28      	ldr	r3, [pc, #160]	; (800acf8 <udp_sendto_if+0xd0>)
 800ac58:	f240 2281 	movw	r2, #641	; 0x281
 800ac5c:	4929      	ldr	r1, [pc, #164]	; (800ad04 <udp_sendto_if+0xdc>)
 800ac5e:	4828      	ldr	r0, [pc, #160]	; (800ad00 <udp_sendto_if+0xd8>)
 800ac60:	f002 feb8 	bl	800d9d4 <iprintf>
 800ac64:	f06f 030f 	mvn.w	r3, #15
 800ac68:	e042      	b.n	800acf0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d109      	bne.n	800ac84 <udp_sendto_if+0x5c>
 800ac70:	4b21      	ldr	r3, [pc, #132]	; (800acf8 <udp_sendto_if+0xd0>)
 800ac72:	f240 2282 	movw	r2, #642	; 0x282
 800ac76:	4924      	ldr	r1, [pc, #144]	; (800ad08 <udp_sendto_if+0xe0>)
 800ac78:	4821      	ldr	r0, [pc, #132]	; (800ad00 <udp_sendto_if+0xd8>)
 800ac7a:	f002 feab 	bl	800d9d4 <iprintf>
 800ac7e:	f06f 030f 	mvn.w	r3, #15
 800ac82:	e035      	b.n	800acf0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800ac84:	6a3b      	ldr	r3, [r7, #32]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d109      	bne.n	800ac9e <udp_sendto_if+0x76>
 800ac8a:	4b1b      	ldr	r3, [pc, #108]	; (800acf8 <udp_sendto_if+0xd0>)
 800ac8c:	f240 2283 	movw	r2, #643	; 0x283
 800ac90:	491e      	ldr	r1, [pc, #120]	; (800ad0c <udp_sendto_if+0xe4>)
 800ac92:	481b      	ldr	r0, [pc, #108]	; (800ad00 <udp_sendto_if+0xd8>)
 800ac94:	f002 fe9e 	bl	800d9d4 <iprintf>
 800ac98:	f06f 030f 	mvn.w	r3, #15
 800ac9c:	e028      	b.n	800acf0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d009      	beq.n	800acb8 <udp_sendto_if+0x90>
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d005      	beq.n	800acb8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800acb4:	2be0      	cmp	r3, #224	; 0xe0
 800acb6:	d103      	bne.n	800acc0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800acb8:	6a3b      	ldr	r3, [r7, #32]
 800acba:	3304      	adds	r3, #4
 800acbc:	617b      	str	r3, [r7, #20]
 800acbe:	e00b      	b.n	800acd8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681a      	ldr	r2, [r3, #0]
 800acc4:	6a3b      	ldr	r3, [r7, #32]
 800acc6:	3304      	adds	r3, #4
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	429a      	cmp	r2, r3
 800accc:	d002      	beq.n	800acd4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800acce:	f06f 0303 	mvn.w	r3, #3
 800acd2:	e00d      	b.n	800acf0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800acd8:	887a      	ldrh	r2, [r7, #2]
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	9301      	str	r3, [sp, #4]
 800acde:	6a3b      	ldr	r3, [r7, #32]
 800ace0:	9300      	str	r3, [sp, #0]
 800ace2:	4613      	mov	r3, r2
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	68b9      	ldr	r1, [r7, #8]
 800ace8:	68f8      	ldr	r0, [r7, #12]
 800acea:	f000 f811 	bl	800ad10 <udp_sendto_if_src>
 800acee:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3718      	adds	r7, #24
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	08010d48 	.word	0x08010d48
 800acfc:	08010ebc 	.word	0x08010ebc
 800ad00:	08010d9c 	.word	0x08010d9c
 800ad04:	08010ed8 	.word	0x08010ed8
 800ad08:	08010ef4 	.word	0x08010ef4
 800ad0c:	08010f14 	.word	0x08010f14

0800ad10 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b08c      	sub	sp, #48	; 0x30
 800ad14:	af04      	add	r7, sp, #16
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	60b9      	str	r1, [r7, #8]
 800ad1a:	607a      	str	r2, [r7, #4]
 800ad1c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d109      	bne.n	800ad38 <udp_sendto_if_src+0x28>
 800ad24:	4b65      	ldr	r3, [pc, #404]	; (800aebc <udp_sendto_if_src+0x1ac>)
 800ad26:	f240 22d1 	movw	r2, #721	; 0x2d1
 800ad2a:	4965      	ldr	r1, [pc, #404]	; (800aec0 <udp_sendto_if_src+0x1b0>)
 800ad2c:	4865      	ldr	r0, [pc, #404]	; (800aec4 <udp_sendto_if_src+0x1b4>)
 800ad2e:	f002 fe51 	bl	800d9d4 <iprintf>
 800ad32:	f06f 030f 	mvn.w	r3, #15
 800ad36:	e0bc      	b.n	800aeb2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d109      	bne.n	800ad52 <udp_sendto_if_src+0x42>
 800ad3e:	4b5f      	ldr	r3, [pc, #380]	; (800aebc <udp_sendto_if_src+0x1ac>)
 800ad40:	f240 22d2 	movw	r2, #722	; 0x2d2
 800ad44:	4960      	ldr	r1, [pc, #384]	; (800aec8 <udp_sendto_if_src+0x1b8>)
 800ad46:	485f      	ldr	r0, [pc, #380]	; (800aec4 <udp_sendto_if_src+0x1b4>)
 800ad48:	f002 fe44 	bl	800d9d4 <iprintf>
 800ad4c:	f06f 030f 	mvn.w	r3, #15
 800ad50:	e0af      	b.n	800aeb2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d109      	bne.n	800ad6c <udp_sendto_if_src+0x5c>
 800ad58:	4b58      	ldr	r3, [pc, #352]	; (800aebc <udp_sendto_if_src+0x1ac>)
 800ad5a:	f240 22d3 	movw	r2, #723	; 0x2d3
 800ad5e:	495b      	ldr	r1, [pc, #364]	; (800aecc <udp_sendto_if_src+0x1bc>)
 800ad60:	4858      	ldr	r0, [pc, #352]	; (800aec4 <udp_sendto_if_src+0x1b4>)
 800ad62:	f002 fe37 	bl	800d9d4 <iprintf>
 800ad66:	f06f 030f 	mvn.w	r3, #15
 800ad6a:	e0a2      	b.n	800aeb2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800ad6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d109      	bne.n	800ad86 <udp_sendto_if_src+0x76>
 800ad72:	4b52      	ldr	r3, [pc, #328]	; (800aebc <udp_sendto_if_src+0x1ac>)
 800ad74:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800ad78:	4955      	ldr	r1, [pc, #340]	; (800aed0 <udp_sendto_if_src+0x1c0>)
 800ad7a:	4852      	ldr	r0, [pc, #328]	; (800aec4 <udp_sendto_if_src+0x1b4>)
 800ad7c:	f002 fe2a 	bl	800d9d4 <iprintf>
 800ad80:	f06f 030f 	mvn.w	r3, #15
 800ad84:	e095      	b.n	800aeb2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800ad86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d109      	bne.n	800ada0 <udp_sendto_if_src+0x90>
 800ad8c:	4b4b      	ldr	r3, [pc, #300]	; (800aebc <udp_sendto_if_src+0x1ac>)
 800ad8e:	f240 22d5 	movw	r2, #725	; 0x2d5
 800ad92:	4950      	ldr	r1, [pc, #320]	; (800aed4 <udp_sendto_if_src+0x1c4>)
 800ad94:	484b      	ldr	r0, [pc, #300]	; (800aec4 <udp_sendto_if_src+0x1b4>)
 800ad96:	f002 fe1d 	bl	800d9d4 <iprintf>
 800ad9a:	f06f 030f 	mvn.w	r3, #15
 800ad9e:	e088      	b.n	800aeb2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	8a5b      	ldrh	r3, [r3, #18]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d10f      	bne.n	800adc8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ada8:	68f9      	ldr	r1, [r7, #12]
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	8a5b      	ldrh	r3, [r3, #18]
 800adae:	461a      	mov	r2, r3
 800adb0:	68f8      	ldr	r0, [r7, #12]
 800adb2:	f000 f893 	bl	800aedc <udp_bind>
 800adb6:	4603      	mov	r3, r0
 800adb8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800adba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d002      	beq.n	800adc8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800adc2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800adc6:	e074      	b.n	800aeb2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	891b      	ldrh	r3, [r3, #8]
 800adcc:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800add0:	4293      	cmp	r3, r2
 800add2:	d902      	bls.n	800adda <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800add4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800add8:	e06b      	b.n	800aeb2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800adda:	2108      	movs	r1, #8
 800addc:	68b8      	ldr	r0, [r7, #8]
 800adde:	f7f9 fe69 	bl	8004ab4 <pbuf_add_header>
 800ade2:	4603      	mov	r3, r0
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d015      	beq.n	800ae14 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800ade8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800adec:	2108      	movs	r1, #8
 800adee:	2022      	movs	r0, #34	; 0x22
 800adf0:	f7f9 fc12 	bl	8004618 <pbuf_alloc>
 800adf4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800adf6:	69fb      	ldr	r3, [r7, #28]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d102      	bne.n	800ae02 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800adfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae00:	e057      	b.n	800aeb2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	891b      	ldrh	r3, [r3, #8]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d006      	beq.n	800ae18 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800ae0a:	68b9      	ldr	r1, [r7, #8]
 800ae0c:	69f8      	ldr	r0, [r7, #28]
 800ae0e:	f7f9 ffff 	bl	8004e10 <pbuf_chain>
 800ae12:	e001      	b.n	800ae18 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	895b      	ldrh	r3, [r3, #10]
 800ae1c:	2b07      	cmp	r3, #7
 800ae1e:	d806      	bhi.n	800ae2e <udp_sendto_if_src+0x11e>
 800ae20:	4b26      	ldr	r3, [pc, #152]	; (800aebc <udp_sendto_if_src+0x1ac>)
 800ae22:	f240 320d 	movw	r2, #781	; 0x30d
 800ae26:	492c      	ldr	r1, [pc, #176]	; (800aed8 <udp_sendto_if_src+0x1c8>)
 800ae28:	4826      	ldr	r0, [pc, #152]	; (800aec4 <udp_sendto_if_src+0x1b4>)
 800ae2a:	f002 fdd3 	bl	800d9d4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800ae2e:	69fb      	ldr	r3, [r7, #28]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	8a5b      	ldrh	r3, [r3, #18]
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f7f8 fc1d 	bl	8003678 <lwip_htons>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	461a      	mov	r2, r3
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800ae46:	887b      	ldrh	r3, [r7, #2]
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f7f8 fc15 	bl	8003678 <lwip_htons>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	461a      	mov	r2, r3
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	719a      	strb	r2, [r3, #6]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800ae60:	69fb      	ldr	r3, [r7, #28]
 800ae62:	891b      	ldrh	r3, [r3, #8]
 800ae64:	4618      	mov	r0, r3
 800ae66:	f7f8 fc07 	bl	8003678 <lwip_htons>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800ae72:	2311      	movs	r3, #17
 800ae74:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	7adb      	ldrb	r3, [r3, #11]
 800ae7a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	7a9b      	ldrb	r3, [r3, #10]
 800ae80:	7cb9      	ldrb	r1, [r7, #18]
 800ae82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae84:	9202      	str	r2, [sp, #8]
 800ae86:	7cfa      	ldrb	r2, [r7, #19]
 800ae88:	9201      	str	r2, [sp, #4]
 800ae8a:	9300      	str	r3, [sp, #0]
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae92:	69f8      	ldr	r0, [r7, #28]
 800ae94:	f001 fcac 	bl	800c7f0 <ip4_output_if_src>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800ae9c:	69fa      	ldr	r2, [r7, #28]
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d004      	beq.n	800aeae <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800aea4:	69f8      	ldr	r0, [r7, #28]
 800aea6:	f7f9 fe9b 	bl	8004be0 <pbuf_free>
    q = NULL;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800aeae:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3720      	adds	r7, #32
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
 800aeba:	bf00      	nop
 800aebc:	08010d48 	.word	0x08010d48
 800aec0:	08010f34 	.word	0x08010f34
 800aec4:	08010d9c 	.word	0x08010d9c
 800aec8:	08010f54 	.word	0x08010f54
 800aecc:	08010f74 	.word	0x08010f74
 800aed0:	08010f98 	.word	0x08010f98
 800aed4:	08010fbc 	.word	0x08010fbc
 800aed8:	08010fe0 	.word	0x08010fe0

0800aedc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b086      	sub	sp, #24
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	4613      	mov	r3, r2
 800aee8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d101      	bne.n	800aef4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800aef0:	4b39      	ldr	r3, [pc, #228]	; (800afd8 <udp_bind+0xfc>)
 800aef2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d109      	bne.n	800af0e <udp_bind+0x32>
 800aefa:	4b38      	ldr	r3, [pc, #224]	; (800afdc <udp_bind+0x100>)
 800aefc:	f240 32b7 	movw	r2, #951	; 0x3b7
 800af00:	4937      	ldr	r1, [pc, #220]	; (800afe0 <udp_bind+0x104>)
 800af02:	4838      	ldr	r0, [pc, #224]	; (800afe4 <udp_bind+0x108>)
 800af04:	f002 fd66 	bl	800d9d4 <iprintf>
 800af08:	f06f 030f 	mvn.w	r3, #15
 800af0c:	e060      	b.n	800afd0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800af0e:	2300      	movs	r3, #0
 800af10:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800af12:	4b35      	ldr	r3, [pc, #212]	; (800afe8 <udp_bind+0x10c>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	617b      	str	r3, [r7, #20]
 800af18:	e009      	b.n	800af2e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800af1a:	68fa      	ldr	r2, [r7, #12]
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	429a      	cmp	r2, r3
 800af20:	d102      	bne.n	800af28 <udp_bind+0x4c>
      rebind = 1;
 800af22:	2301      	movs	r3, #1
 800af24:	74fb      	strb	r3, [r7, #19]
      break;
 800af26:	e005      	b.n	800af34 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	68db      	ldr	r3, [r3, #12]
 800af2c:	617b      	str	r3, [r7, #20]
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d1f2      	bne.n	800af1a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800af34:	88fb      	ldrh	r3, [r7, #6]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d109      	bne.n	800af4e <udp_bind+0x72>
    port = udp_new_port();
 800af3a:	f7ff fc35 	bl	800a7a8 <udp_new_port>
 800af3e:	4603      	mov	r3, r0
 800af40:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800af42:	88fb      	ldrh	r3, [r7, #6]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d12c      	bne.n	800afa2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800af48:	f06f 0307 	mvn.w	r3, #7
 800af4c:	e040      	b.n	800afd0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800af4e:	4b26      	ldr	r3, [pc, #152]	; (800afe8 <udp_bind+0x10c>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	617b      	str	r3, [r7, #20]
 800af54:	e022      	b.n	800af9c <udp_bind+0xc0>
      if (pcb != ipcb) {
 800af56:	68fa      	ldr	r2, [r7, #12]
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d01b      	beq.n	800af96 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	8a5b      	ldrh	r3, [r3, #18]
 800af62:	88fa      	ldrh	r2, [r7, #6]
 800af64:	429a      	cmp	r2, r3
 800af66:	d116      	bne.n	800af96 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	681a      	ldr	r2, [r3, #0]
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800af70:	429a      	cmp	r2, r3
 800af72:	d00d      	beq.n	800af90 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d00a      	beq.n	800af90 <udp_bind+0xb4>
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d006      	beq.n	800af90 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800af82:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800af84:	2b00      	cmp	r3, #0
 800af86:	d003      	beq.n	800af90 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d102      	bne.n	800af96 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800af90:	f06f 0307 	mvn.w	r3, #7
 800af94:	e01c      	b.n	800afd0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	68db      	ldr	r3, [r3, #12]
 800af9a:	617b      	str	r3, [r7, #20]
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d1d9      	bne.n	800af56 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d002      	beq.n	800afae <udp_bind+0xd2>
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	e000      	b.n	800afb0 <udp_bind+0xd4>
 800afae:	2300      	movs	r3, #0
 800afb0:	68fa      	ldr	r2, [r7, #12]
 800afb2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	88fa      	ldrh	r2, [r7, #6]
 800afb8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800afba:	7cfb      	ldrb	r3, [r7, #19]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d106      	bne.n	800afce <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800afc0:	4b09      	ldr	r3, [pc, #36]	; (800afe8 <udp_bind+0x10c>)
 800afc2:	681a      	ldr	r2, [r3, #0]
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800afc8:	4a07      	ldr	r2, [pc, #28]	; (800afe8 <udp_bind+0x10c>)
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800afce:	2300      	movs	r3, #0
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3718      	adds	r7, #24
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	08011850 	.word	0x08011850
 800afdc:	08010d48 	.word	0x08010d48
 800afe0:	08011010 	.word	0x08011010
 800afe4:	08010d9c 	.word	0x08010d9c
 800afe8:	20008a74 	.word	0x20008a74

0800afec <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b086      	sub	sp, #24
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	4613      	mov	r3, r2
 800aff8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d109      	bne.n	800b014 <udp_connect+0x28>
 800b000:	4b2c      	ldr	r3, [pc, #176]	; (800b0b4 <udp_connect+0xc8>)
 800b002:	f240 4235 	movw	r2, #1077	; 0x435
 800b006:	492c      	ldr	r1, [pc, #176]	; (800b0b8 <udp_connect+0xcc>)
 800b008:	482c      	ldr	r0, [pc, #176]	; (800b0bc <udp_connect+0xd0>)
 800b00a:	f002 fce3 	bl	800d9d4 <iprintf>
 800b00e:	f06f 030f 	mvn.w	r3, #15
 800b012:	e04b      	b.n	800b0ac <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d109      	bne.n	800b02e <udp_connect+0x42>
 800b01a:	4b26      	ldr	r3, [pc, #152]	; (800b0b4 <udp_connect+0xc8>)
 800b01c:	f240 4236 	movw	r2, #1078	; 0x436
 800b020:	4927      	ldr	r1, [pc, #156]	; (800b0c0 <udp_connect+0xd4>)
 800b022:	4826      	ldr	r0, [pc, #152]	; (800b0bc <udp_connect+0xd0>)
 800b024:	f002 fcd6 	bl	800d9d4 <iprintf>
 800b028:	f06f 030f 	mvn.w	r3, #15
 800b02c:	e03e      	b.n	800b0ac <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	8a5b      	ldrh	r3, [r3, #18]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d10f      	bne.n	800b056 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b036:	68f9      	ldr	r1, [r7, #12]
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	8a5b      	ldrh	r3, [r3, #18]
 800b03c:	461a      	mov	r2, r3
 800b03e:	68f8      	ldr	r0, [r7, #12]
 800b040:	f7ff ff4c 	bl	800aedc <udp_bind>
 800b044:	4603      	mov	r3, r0
 800b046:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800b048:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d002      	beq.n	800b056 <udp_connect+0x6a>
      return err;
 800b050:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b054:	e02a      	b.n	800b0ac <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d002      	beq.n	800b062 <udp_connect+0x76>
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	e000      	b.n	800b064 <udp_connect+0x78>
 800b062:	2300      	movs	r3, #0
 800b064:	68fa      	ldr	r2, [r7, #12]
 800b066:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	88fa      	ldrh	r2, [r7, #6]
 800b06c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	7c1b      	ldrb	r3, [r3, #16]
 800b072:	f043 0304 	orr.w	r3, r3, #4
 800b076:	b2da      	uxtb	r2, r3
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b07c:	4b11      	ldr	r3, [pc, #68]	; (800b0c4 <udp_connect+0xd8>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	617b      	str	r3, [r7, #20]
 800b082:	e008      	b.n	800b096 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800b084:	68fa      	ldr	r2, [r7, #12]
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	429a      	cmp	r2, r3
 800b08a:	d101      	bne.n	800b090 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800b08c:	2300      	movs	r3, #0
 800b08e:	e00d      	b.n	800b0ac <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	68db      	ldr	r3, [r3, #12]
 800b094:	617b      	str	r3, [r7, #20]
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d1f3      	bne.n	800b084 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800b09c:	4b09      	ldr	r3, [pc, #36]	; (800b0c4 <udp_connect+0xd8>)
 800b09e:	681a      	ldr	r2, [r3, #0]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800b0a4:	4a07      	ldr	r2, [pc, #28]	; (800b0c4 <udp_connect+0xd8>)
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800b0aa:	2300      	movs	r3, #0
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3718      	adds	r7, #24
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	08010d48 	.word	0x08010d48
 800b0b8:	08011028 	.word	0x08011028
 800b0bc:	08010d9c 	.word	0x08010d9c
 800b0c0:	08011044 	.word	0x08011044
 800b0c4:	20008a74 	.word	0x20008a74

0800b0c8 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d107      	bne.n	800b0e6 <udp_disconnect+0x1e>
 800b0d6:	4b0d      	ldr	r3, [pc, #52]	; (800b10c <udp_disconnect+0x44>)
 800b0d8:	f240 426a 	movw	r2, #1130	; 0x46a
 800b0dc:	490c      	ldr	r1, [pc, #48]	; (800b110 <udp_disconnect+0x48>)
 800b0de:	480d      	ldr	r0, [pc, #52]	; (800b114 <udp_disconnect+0x4c>)
 800b0e0:	f002 fc78 	bl	800d9d4 <iprintf>
 800b0e4:	e00f      	b.n	800b106 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	7c1b      	ldrb	r3, [r3, #16]
 800b0fc:	f023 0304 	bic.w	r3, r3, #4
 800b100:	b2da      	uxtb	r2, r3
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	741a      	strb	r2, [r3, #16]
}
 800b106:	3708      	adds	r7, #8
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}
 800b10c:	08010d48 	.word	0x08010d48
 800b110:	08011060 	.word	0x08011060
 800b114:	08010d9c 	.word	0x08010d9c

0800b118 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b084      	sub	sp, #16
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	60f8      	str	r0, [r7, #12]
 800b120:	60b9      	str	r1, [r7, #8]
 800b122:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d107      	bne.n	800b13a <udp_recv+0x22>
 800b12a:	4b08      	ldr	r3, [pc, #32]	; (800b14c <udp_recv+0x34>)
 800b12c:	f240 428a 	movw	r2, #1162	; 0x48a
 800b130:	4907      	ldr	r1, [pc, #28]	; (800b150 <udp_recv+0x38>)
 800b132:	4808      	ldr	r0, [pc, #32]	; (800b154 <udp_recv+0x3c>)
 800b134:	f002 fc4e 	bl	800d9d4 <iprintf>
 800b138:	e005      	b.n	800b146 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	68ba      	ldr	r2, [r7, #8]
 800b13e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	61da      	str	r2, [r3, #28]
}
 800b146:	3710      	adds	r7, #16
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}
 800b14c:	08010d48 	.word	0x08010d48
 800b150:	0801107c 	.word	0x0801107c
 800b154:	08010d9c 	.word	0x08010d9c

0800b158 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b084      	sub	sp, #16
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d107      	bne.n	800b176 <udp_remove+0x1e>
 800b166:	4b19      	ldr	r3, [pc, #100]	; (800b1cc <udp_remove+0x74>)
 800b168:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800b16c:	4918      	ldr	r1, [pc, #96]	; (800b1d0 <udp_remove+0x78>)
 800b16e:	4819      	ldr	r0, [pc, #100]	; (800b1d4 <udp_remove+0x7c>)
 800b170:	f002 fc30 	bl	800d9d4 <iprintf>
 800b174:	e026      	b.n	800b1c4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800b176:	4b18      	ldr	r3, [pc, #96]	; (800b1d8 <udp_remove+0x80>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d105      	bne.n	800b18c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800b180:	4b15      	ldr	r3, [pc, #84]	; (800b1d8 <udp_remove+0x80>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	68db      	ldr	r3, [r3, #12]
 800b186:	4a14      	ldr	r2, [pc, #80]	; (800b1d8 <udp_remove+0x80>)
 800b188:	6013      	str	r3, [r2, #0]
 800b18a:	e017      	b.n	800b1bc <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800b18c:	4b12      	ldr	r3, [pc, #72]	; (800b1d8 <udp_remove+0x80>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	60fb      	str	r3, [r7, #12]
 800b192:	e010      	b.n	800b1b6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	68db      	ldr	r3, [r3, #12]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d009      	beq.n	800b1b0 <udp_remove+0x58>
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	68db      	ldr	r3, [r3, #12]
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d104      	bne.n	800b1b0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	68da      	ldr	r2, [r3, #12]
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	60da      	str	r2, [r3, #12]
        break;
 800b1ae:	e005      	b.n	800b1bc <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	68db      	ldr	r3, [r3, #12]
 800b1b4:	60fb      	str	r3, [r7, #12]
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d1eb      	bne.n	800b194 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800b1bc:	6879      	ldr	r1, [r7, #4]
 800b1be:	2000      	movs	r0, #0
 800b1c0:	f7f8 fefc 	bl	8003fbc <memp_free>
}
 800b1c4:	3710      	adds	r7, #16
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	08010d48 	.word	0x08010d48
 800b1d0:	08011094 	.word	0x08011094
 800b1d4:	08010d9c 	.word	0x08010d9c
 800b1d8:	20008a74 	.word	0x20008a74

0800b1dc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b082      	sub	sp, #8
 800b1e0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800b1e2:	2000      	movs	r0, #0
 800b1e4:	f7f8 fe9e 	bl	8003f24 <memp_malloc>
 800b1e8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d007      	beq.n	800b200 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800b1f0:	2220      	movs	r2, #32
 800b1f2:	2100      	movs	r1, #0
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f002 fbe5 	bl	800d9c4 <memset>
    pcb->ttl = UDP_TTL;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	22ff      	movs	r2, #255	; 0xff
 800b1fe:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800b200:	687b      	ldr	r3, [r7, #4]
}
 800b202:	4618      	mov	r0, r3
 800b204:	3708      	adds	r7, #8
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}
	...

0800b20c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b085      	sub	sp, #20
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d01e      	beq.n	800b25a <udp_netif_ip_addr_changed+0x4e>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d01a      	beq.n	800b25a <udp_netif_ip_addr_changed+0x4e>
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d017      	beq.n	800b25a <udp_netif_ip_addr_changed+0x4e>
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d013      	beq.n	800b25a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b232:	4b0d      	ldr	r3, [pc, #52]	; (800b268 <udp_netif_ip_addr_changed+0x5c>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	60fb      	str	r3, [r7, #12]
 800b238:	e00c      	b.n	800b254 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	429a      	cmp	r2, r3
 800b244:	d103      	bne.n	800b24e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	681a      	ldr	r2, [r3, #0]
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	60fb      	str	r3, [r7, #12]
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d1ef      	bne.n	800b23a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800b25a:	bf00      	nop
 800b25c:	3714      	adds	r7, #20
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop
 800b268:	20008a74 	.word	0x20008a74

0800b26c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800b274:	4915      	ldr	r1, [pc, #84]	; (800b2cc <etharp_free_entry+0x60>)
 800b276:	687a      	ldr	r2, [r7, #4]
 800b278:	4613      	mov	r3, r2
 800b27a:	005b      	lsls	r3, r3, #1
 800b27c:	4413      	add	r3, r2
 800b27e:	00db      	lsls	r3, r3, #3
 800b280:	440b      	add	r3, r1
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d013      	beq.n	800b2b0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800b288:	4910      	ldr	r1, [pc, #64]	; (800b2cc <etharp_free_entry+0x60>)
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	4613      	mov	r3, r2
 800b28e:	005b      	lsls	r3, r3, #1
 800b290:	4413      	add	r3, r2
 800b292:	00db      	lsls	r3, r3, #3
 800b294:	440b      	add	r3, r1
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	4618      	mov	r0, r3
 800b29a:	f7f9 fca1 	bl	8004be0 <pbuf_free>
    arp_table[i].q = NULL;
 800b29e:	490b      	ldr	r1, [pc, #44]	; (800b2cc <etharp_free_entry+0x60>)
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	4613      	mov	r3, r2
 800b2a4:	005b      	lsls	r3, r3, #1
 800b2a6:	4413      	add	r3, r2
 800b2a8:	00db      	lsls	r3, r3, #3
 800b2aa:	440b      	add	r3, r1
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800b2b0:	4906      	ldr	r1, [pc, #24]	; (800b2cc <etharp_free_entry+0x60>)
 800b2b2:	687a      	ldr	r2, [r7, #4]
 800b2b4:	4613      	mov	r3, r2
 800b2b6:	005b      	lsls	r3, r3, #1
 800b2b8:	4413      	add	r3, r2
 800b2ba:	00db      	lsls	r3, r3, #3
 800b2bc:	440b      	add	r3, r1
 800b2be:	3314      	adds	r3, #20
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800b2c4:	bf00      	nop
 800b2c6:	3708      	adds	r7, #8
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}
 800b2cc:	2000010c 	.word	0x2000010c

0800b2d0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b082      	sub	sp, #8
 800b2d4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	607b      	str	r3, [r7, #4]
 800b2da:	e096      	b.n	800b40a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800b2dc:	494f      	ldr	r1, [pc, #316]	; (800b41c <etharp_tmr+0x14c>)
 800b2de:	687a      	ldr	r2, [r7, #4]
 800b2e0:	4613      	mov	r3, r2
 800b2e2:	005b      	lsls	r3, r3, #1
 800b2e4:	4413      	add	r3, r2
 800b2e6:	00db      	lsls	r3, r3, #3
 800b2e8:	440b      	add	r3, r1
 800b2ea:	3314      	adds	r3, #20
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800b2f0:	78fb      	ldrb	r3, [r7, #3]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	f000 8086 	beq.w	800b404 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800b2f8:	4948      	ldr	r1, [pc, #288]	; (800b41c <etharp_tmr+0x14c>)
 800b2fa:	687a      	ldr	r2, [r7, #4]
 800b2fc:	4613      	mov	r3, r2
 800b2fe:	005b      	lsls	r3, r3, #1
 800b300:	4413      	add	r3, r2
 800b302:	00db      	lsls	r3, r3, #3
 800b304:	440b      	add	r3, r1
 800b306:	3312      	adds	r3, #18
 800b308:	881b      	ldrh	r3, [r3, #0]
 800b30a:	3301      	adds	r3, #1
 800b30c:	b298      	uxth	r0, r3
 800b30e:	4943      	ldr	r1, [pc, #268]	; (800b41c <etharp_tmr+0x14c>)
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	4613      	mov	r3, r2
 800b314:	005b      	lsls	r3, r3, #1
 800b316:	4413      	add	r3, r2
 800b318:	00db      	lsls	r3, r3, #3
 800b31a:	440b      	add	r3, r1
 800b31c:	3312      	adds	r3, #18
 800b31e:	4602      	mov	r2, r0
 800b320:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b322:	493e      	ldr	r1, [pc, #248]	; (800b41c <etharp_tmr+0x14c>)
 800b324:	687a      	ldr	r2, [r7, #4]
 800b326:	4613      	mov	r3, r2
 800b328:	005b      	lsls	r3, r3, #1
 800b32a:	4413      	add	r3, r2
 800b32c:	00db      	lsls	r3, r3, #3
 800b32e:	440b      	add	r3, r1
 800b330:	3312      	adds	r3, #18
 800b332:	881b      	ldrh	r3, [r3, #0]
 800b334:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800b338:	d215      	bcs.n	800b366 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b33a:	4938      	ldr	r1, [pc, #224]	; (800b41c <etharp_tmr+0x14c>)
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	4613      	mov	r3, r2
 800b340:	005b      	lsls	r3, r3, #1
 800b342:	4413      	add	r3, r2
 800b344:	00db      	lsls	r3, r3, #3
 800b346:	440b      	add	r3, r1
 800b348:	3314      	adds	r3, #20
 800b34a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d10e      	bne.n	800b36e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800b350:	4932      	ldr	r1, [pc, #200]	; (800b41c <etharp_tmr+0x14c>)
 800b352:	687a      	ldr	r2, [r7, #4]
 800b354:	4613      	mov	r3, r2
 800b356:	005b      	lsls	r3, r3, #1
 800b358:	4413      	add	r3, r2
 800b35a:	00db      	lsls	r3, r3, #3
 800b35c:	440b      	add	r3, r1
 800b35e:	3312      	adds	r3, #18
 800b360:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b362:	2b04      	cmp	r3, #4
 800b364:	d903      	bls.n	800b36e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f7ff ff80 	bl	800b26c <etharp_free_entry>
 800b36c:	e04a      	b.n	800b404 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800b36e:	492b      	ldr	r1, [pc, #172]	; (800b41c <etharp_tmr+0x14c>)
 800b370:	687a      	ldr	r2, [r7, #4]
 800b372:	4613      	mov	r3, r2
 800b374:	005b      	lsls	r3, r3, #1
 800b376:	4413      	add	r3, r2
 800b378:	00db      	lsls	r3, r3, #3
 800b37a:	440b      	add	r3, r1
 800b37c:	3314      	adds	r3, #20
 800b37e:	781b      	ldrb	r3, [r3, #0]
 800b380:	2b03      	cmp	r3, #3
 800b382:	d10a      	bne.n	800b39a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800b384:	4925      	ldr	r1, [pc, #148]	; (800b41c <etharp_tmr+0x14c>)
 800b386:	687a      	ldr	r2, [r7, #4]
 800b388:	4613      	mov	r3, r2
 800b38a:	005b      	lsls	r3, r3, #1
 800b38c:	4413      	add	r3, r2
 800b38e:	00db      	lsls	r3, r3, #3
 800b390:	440b      	add	r3, r1
 800b392:	3314      	adds	r3, #20
 800b394:	2204      	movs	r2, #4
 800b396:	701a      	strb	r2, [r3, #0]
 800b398:	e034      	b.n	800b404 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800b39a:	4920      	ldr	r1, [pc, #128]	; (800b41c <etharp_tmr+0x14c>)
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	4613      	mov	r3, r2
 800b3a0:	005b      	lsls	r3, r3, #1
 800b3a2:	4413      	add	r3, r2
 800b3a4:	00db      	lsls	r3, r3, #3
 800b3a6:	440b      	add	r3, r1
 800b3a8:	3314      	adds	r3, #20
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	2b04      	cmp	r3, #4
 800b3ae:	d10a      	bne.n	800b3c6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800b3b0:	491a      	ldr	r1, [pc, #104]	; (800b41c <etharp_tmr+0x14c>)
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	4613      	mov	r3, r2
 800b3b6:	005b      	lsls	r3, r3, #1
 800b3b8:	4413      	add	r3, r2
 800b3ba:	00db      	lsls	r3, r3, #3
 800b3bc:	440b      	add	r3, r1
 800b3be:	3314      	adds	r3, #20
 800b3c0:	2202      	movs	r2, #2
 800b3c2:	701a      	strb	r2, [r3, #0]
 800b3c4:	e01e      	b.n	800b404 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b3c6:	4915      	ldr	r1, [pc, #84]	; (800b41c <etharp_tmr+0x14c>)
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	4613      	mov	r3, r2
 800b3cc:	005b      	lsls	r3, r3, #1
 800b3ce:	4413      	add	r3, r2
 800b3d0:	00db      	lsls	r3, r3, #3
 800b3d2:	440b      	add	r3, r1
 800b3d4:	3314      	adds	r3, #20
 800b3d6:	781b      	ldrb	r3, [r3, #0]
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	d113      	bne.n	800b404 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800b3dc:	490f      	ldr	r1, [pc, #60]	; (800b41c <etharp_tmr+0x14c>)
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	4613      	mov	r3, r2
 800b3e2:	005b      	lsls	r3, r3, #1
 800b3e4:	4413      	add	r3, r2
 800b3e6:	00db      	lsls	r3, r3, #3
 800b3e8:	440b      	add	r3, r1
 800b3ea:	3308      	adds	r3, #8
 800b3ec:	6818      	ldr	r0, [r3, #0]
 800b3ee:	687a      	ldr	r2, [r7, #4]
 800b3f0:	4613      	mov	r3, r2
 800b3f2:	005b      	lsls	r3, r3, #1
 800b3f4:	4413      	add	r3, r2
 800b3f6:	00db      	lsls	r3, r3, #3
 800b3f8:	4a08      	ldr	r2, [pc, #32]	; (800b41c <etharp_tmr+0x14c>)
 800b3fa:	4413      	add	r3, r2
 800b3fc:	3304      	adds	r3, #4
 800b3fe:	4619      	mov	r1, r3
 800b400:	f000 fe6e 	bl	800c0e0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	3301      	adds	r3, #1
 800b408:	607b      	str	r3, [r7, #4]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2b09      	cmp	r3, #9
 800b40e:	f77f af65 	ble.w	800b2dc <etharp_tmr+0xc>
      }
    }
  }
}
 800b412:	bf00      	nop
 800b414:	bf00      	nop
 800b416:	3708      	adds	r7, #8
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	2000010c 	.word	0x2000010c

0800b420 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b08a      	sub	sp, #40	; 0x28
 800b424:	af00      	add	r7, sp, #0
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	460b      	mov	r3, r1
 800b42a:	607a      	str	r2, [r7, #4]
 800b42c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800b42e:	230a      	movs	r3, #10
 800b430:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b432:	230a      	movs	r3, #10
 800b434:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800b436:	230a      	movs	r3, #10
 800b438:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800b43a:	2300      	movs	r3, #0
 800b43c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800b43e:	230a      	movs	r3, #10
 800b440:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800b442:	2300      	movs	r3, #0
 800b444:	83bb      	strh	r3, [r7, #28]
 800b446:	2300      	movs	r3, #0
 800b448:	837b      	strh	r3, [r7, #26]
 800b44a:	2300      	movs	r3, #0
 800b44c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b44e:	2300      	movs	r3, #0
 800b450:	843b      	strh	r3, [r7, #32]
 800b452:	e0ae      	b.n	800b5b2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800b454:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b458:	49a6      	ldr	r1, [pc, #664]	; (800b6f4 <etharp_find_entry+0x2d4>)
 800b45a:	4613      	mov	r3, r2
 800b45c:	005b      	lsls	r3, r3, #1
 800b45e:	4413      	add	r3, r2
 800b460:	00db      	lsls	r3, r3, #3
 800b462:	440b      	add	r3, r1
 800b464:	3314      	adds	r3, #20
 800b466:	781b      	ldrb	r3, [r3, #0]
 800b468:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800b46a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b46e:	2b0a      	cmp	r3, #10
 800b470:	d105      	bne.n	800b47e <etharp_find_entry+0x5e>
 800b472:	7dfb      	ldrb	r3, [r7, #23]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d102      	bne.n	800b47e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800b478:	8c3b      	ldrh	r3, [r7, #32]
 800b47a:	847b      	strh	r3, [r7, #34]	; 0x22
 800b47c:	e095      	b.n	800b5aa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800b47e:	7dfb      	ldrb	r3, [r7, #23]
 800b480:	2b00      	cmp	r3, #0
 800b482:	f000 8092 	beq.w	800b5aa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800b486:	7dfb      	ldrb	r3, [r7, #23]
 800b488:	2b01      	cmp	r3, #1
 800b48a:	d009      	beq.n	800b4a0 <etharp_find_entry+0x80>
 800b48c:	7dfb      	ldrb	r3, [r7, #23]
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d806      	bhi.n	800b4a0 <etharp_find_entry+0x80>
 800b492:	4b99      	ldr	r3, [pc, #612]	; (800b6f8 <etharp_find_entry+0x2d8>)
 800b494:	f240 1223 	movw	r2, #291	; 0x123
 800b498:	4998      	ldr	r1, [pc, #608]	; (800b6fc <etharp_find_entry+0x2dc>)
 800b49a:	4899      	ldr	r0, [pc, #612]	; (800b700 <etharp_find_entry+0x2e0>)
 800b49c:	f002 fa9a 	bl	800d9d4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d020      	beq.n	800b4e8 <etharp_find_entry+0xc8>
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	6819      	ldr	r1, [r3, #0]
 800b4aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b4ae:	4891      	ldr	r0, [pc, #580]	; (800b6f4 <etharp_find_entry+0x2d4>)
 800b4b0:	4613      	mov	r3, r2
 800b4b2:	005b      	lsls	r3, r3, #1
 800b4b4:	4413      	add	r3, r2
 800b4b6:	00db      	lsls	r3, r3, #3
 800b4b8:	4403      	add	r3, r0
 800b4ba:	3304      	adds	r3, #4
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	4299      	cmp	r1, r3
 800b4c0:	d112      	bne.n	800b4e8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d00c      	beq.n	800b4e2 <etharp_find_entry+0xc2>
 800b4c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b4cc:	4989      	ldr	r1, [pc, #548]	; (800b6f4 <etharp_find_entry+0x2d4>)
 800b4ce:	4613      	mov	r3, r2
 800b4d0:	005b      	lsls	r3, r3, #1
 800b4d2:	4413      	add	r3, r2
 800b4d4:	00db      	lsls	r3, r3, #3
 800b4d6:	440b      	add	r3, r1
 800b4d8:	3308      	adds	r3, #8
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	687a      	ldr	r2, [r7, #4]
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d102      	bne.n	800b4e8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800b4e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b4e6:	e100      	b.n	800b6ea <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800b4e8:	7dfb      	ldrb	r3, [r7, #23]
 800b4ea:	2b01      	cmp	r3, #1
 800b4ec:	d140      	bne.n	800b570 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800b4ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b4f2:	4980      	ldr	r1, [pc, #512]	; (800b6f4 <etharp_find_entry+0x2d4>)
 800b4f4:	4613      	mov	r3, r2
 800b4f6:	005b      	lsls	r3, r3, #1
 800b4f8:	4413      	add	r3, r2
 800b4fa:	00db      	lsls	r3, r3, #3
 800b4fc:	440b      	add	r3, r1
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d01a      	beq.n	800b53a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800b504:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b508:	497a      	ldr	r1, [pc, #488]	; (800b6f4 <etharp_find_entry+0x2d4>)
 800b50a:	4613      	mov	r3, r2
 800b50c:	005b      	lsls	r3, r3, #1
 800b50e:	4413      	add	r3, r2
 800b510:	00db      	lsls	r3, r3, #3
 800b512:	440b      	add	r3, r1
 800b514:	3312      	adds	r3, #18
 800b516:	881b      	ldrh	r3, [r3, #0]
 800b518:	8bba      	ldrh	r2, [r7, #28]
 800b51a:	429a      	cmp	r2, r3
 800b51c:	d845      	bhi.n	800b5aa <etharp_find_entry+0x18a>
            old_queue = i;
 800b51e:	8c3b      	ldrh	r3, [r7, #32]
 800b520:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800b522:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b526:	4973      	ldr	r1, [pc, #460]	; (800b6f4 <etharp_find_entry+0x2d4>)
 800b528:	4613      	mov	r3, r2
 800b52a:	005b      	lsls	r3, r3, #1
 800b52c:	4413      	add	r3, r2
 800b52e:	00db      	lsls	r3, r3, #3
 800b530:	440b      	add	r3, r1
 800b532:	3312      	adds	r3, #18
 800b534:	881b      	ldrh	r3, [r3, #0]
 800b536:	83bb      	strh	r3, [r7, #28]
 800b538:	e037      	b.n	800b5aa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800b53a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b53e:	496d      	ldr	r1, [pc, #436]	; (800b6f4 <etharp_find_entry+0x2d4>)
 800b540:	4613      	mov	r3, r2
 800b542:	005b      	lsls	r3, r3, #1
 800b544:	4413      	add	r3, r2
 800b546:	00db      	lsls	r3, r3, #3
 800b548:	440b      	add	r3, r1
 800b54a:	3312      	adds	r3, #18
 800b54c:	881b      	ldrh	r3, [r3, #0]
 800b54e:	8b7a      	ldrh	r2, [r7, #26]
 800b550:	429a      	cmp	r2, r3
 800b552:	d82a      	bhi.n	800b5aa <etharp_find_entry+0x18a>
            old_pending = i;
 800b554:	8c3b      	ldrh	r3, [r7, #32]
 800b556:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800b558:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b55c:	4965      	ldr	r1, [pc, #404]	; (800b6f4 <etharp_find_entry+0x2d4>)
 800b55e:	4613      	mov	r3, r2
 800b560:	005b      	lsls	r3, r3, #1
 800b562:	4413      	add	r3, r2
 800b564:	00db      	lsls	r3, r3, #3
 800b566:	440b      	add	r3, r1
 800b568:	3312      	adds	r3, #18
 800b56a:	881b      	ldrh	r3, [r3, #0]
 800b56c:	837b      	strh	r3, [r7, #26]
 800b56e:	e01c      	b.n	800b5aa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800b570:	7dfb      	ldrb	r3, [r7, #23]
 800b572:	2b01      	cmp	r3, #1
 800b574:	d919      	bls.n	800b5aa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800b576:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b57a:	495e      	ldr	r1, [pc, #376]	; (800b6f4 <etharp_find_entry+0x2d4>)
 800b57c:	4613      	mov	r3, r2
 800b57e:	005b      	lsls	r3, r3, #1
 800b580:	4413      	add	r3, r2
 800b582:	00db      	lsls	r3, r3, #3
 800b584:	440b      	add	r3, r1
 800b586:	3312      	adds	r3, #18
 800b588:	881b      	ldrh	r3, [r3, #0]
 800b58a:	8b3a      	ldrh	r2, [r7, #24]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d80c      	bhi.n	800b5aa <etharp_find_entry+0x18a>
            old_stable = i;
 800b590:	8c3b      	ldrh	r3, [r7, #32]
 800b592:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800b594:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b598:	4956      	ldr	r1, [pc, #344]	; (800b6f4 <etharp_find_entry+0x2d4>)
 800b59a:	4613      	mov	r3, r2
 800b59c:	005b      	lsls	r3, r3, #1
 800b59e:	4413      	add	r3, r2
 800b5a0:	00db      	lsls	r3, r3, #3
 800b5a2:	440b      	add	r3, r1
 800b5a4:	3312      	adds	r3, #18
 800b5a6:	881b      	ldrh	r3, [r3, #0]
 800b5a8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b5aa:	8c3b      	ldrh	r3, [r7, #32]
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	843b      	strh	r3, [r7, #32]
 800b5b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b5b6:	2b09      	cmp	r3, #9
 800b5b8:	f77f af4c 	ble.w	800b454 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800b5bc:	7afb      	ldrb	r3, [r7, #11]
 800b5be:	f003 0302 	and.w	r3, r3, #2
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d108      	bne.n	800b5d8 <etharp_find_entry+0x1b8>
 800b5c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b5ca:	2b0a      	cmp	r3, #10
 800b5cc:	d107      	bne.n	800b5de <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800b5ce:	7afb      	ldrb	r3, [r7, #11]
 800b5d0:	f003 0301 	and.w	r3, r3, #1
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d102      	bne.n	800b5de <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800b5d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b5dc:	e085      	b.n	800b6ea <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800b5de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b5e2:	2b09      	cmp	r3, #9
 800b5e4:	dc02      	bgt.n	800b5ec <etharp_find_entry+0x1cc>
    i = empty;
 800b5e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b5e8:	843b      	strh	r3, [r7, #32]
 800b5ea:	e039      	b.n	800b660 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800b5ec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800b5f0:	2b09      	cmp	r3, #9
 800b5f2:	dc14      	bgt.n	800b61e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800b5f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b5f6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800b5f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b5fc:	493d      	ldr	r1, [pc, #244]	; (800b6f4 <etharp_find_entry+0x2d4>)
 800b5fe:	4613      	mov	r3, r2
 800b600:	005b      	lsls	r3, r3, #1
 800b602:	4413      	add	r3, r2
 800b604:	00db      	lsls	r3, r3, #3
 800b606:	440b      	add	r3, r1
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d018      	beq.n	800b640 <etharp_find_entry+0x220>
 800b60e:	4b3a      	ldr	r3, [pc, #232]	; (800b6f8 <etharp_find_entry+0x2d8>)
 800b610:	f240 126d 	movw	r2, #365	; 0x16d
 800b614:	493b      	ldr	r1, [pc, #236]	; (800b704 <etharp_find_entry+0x2e4>)
 800b616:	483a      	ldr	r0, [pc, #232]	; (800b700 <etharp_find_entry+0x2e0>)
 800b618:	f002 f9dc 	bl	800d9d4 <iprintf>
 800b61c:	e010      	b.n	800b640 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800b61e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800b622:	2b09      	cmp	r3, #9
 800b624:	dc02      	bgt.n	800b62c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800b626:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b628:	843b      	strh	r3, [r7, #32]
 800b62a:	e009      	b.n	800b640 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800b62c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b630:	2b09      	cmp	r3, #9
 800b632:	dc02      	bgt.n	800b63a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800b634:	8bfb      	ldrh	r3, [r7, #30]
 800b636:	843b      	strh	r3, [r7, #32]
 800b638:	e002      	b.n	800b640 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800b63a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b63e:	e054      	b.n	800b6ea <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b640:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b644:	2b09      	cmp	r3, #9
 800b646:	dd06      	ble.n	800b656 <etharp_find_entry+0x236>
 800b648:	4b2b      	ldr	r3, [pc, #172]	; (800b6f8 <etharp_find_entry+0x2d8>)
 800b64a:	f240 127f 	movw	r2, #383	; 0x17f
 800b64e:	492e      	ldr	r1, [pc, #184]	; (800b708 <etharp_find_entry+0x2e8>)
 800b650:	482b      	ldr	r0, [pc, #172]	; (800b700 <etharp_find_entry+0x2e0>)
 800b652:	f002 f9bf 	bl	800d9d4 <iprintf>
    etharp_free_entry(i);
 800b656:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b65a:	4618      	mov	r0, r3
 800b65c:	f7ff fe06 	bl	800b26c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b660:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b664:	2b09      	cmp	r3, #9
 800b666:	dd06      	ble.n	800b676 <etharp_find_entry+0x256>
 800b668:	4b23      	ldr	r3, [pc, #140]	; (800b6f8 <etharp_find_entry+0x2d8>)
 800b66a:	f240 1283 	movw	r2, #387	; 0x183
 800b66e:	4926      	ldr	r1, [pc, #152]	; (800b708 <etharp_find_entry+0x2e8>)
 800b670:	4823      	ldr	r0, [pc, #140]	; (800b700 <etharp_find_entry+0x2e0>)
 800b672:	f002 f9af 	bl	800d9d4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800b676:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b67a:	491e      	ldr	r1, [pc, #120]	; (800b6f4 <etharp_find_entry+0x2d4>)
 800b67c:	4613      	mov	r3, r2
 800b67e:	005b      	lsls	r3, r3, #1
 800b680:	4413      	add	r3, r2
 800b682:	00db      	lsls	r3, r3, #3
 800b684:	440b      	add	r3, r1
 800b686:	3314      	adds	r3, #20
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d006      	beq.n	800b69c <etharp_find_entry+0x27c>
 800b68e:	4b1a      	ldr	r3, [pc, #104]	; (800b6f8 <etharp_find_entry+0x2d8>)
 800b690:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800b694:	491d      	ldr	r1, [pc, #116]	; (800b70c <etharp_find_entry+0x2ec>)
 800b696:	481a      	ldr	r0, [pc, #104]	; (800b700 <etharp_find_entry+0x2e0>)
 800b698:	f002 f99c 	bl	800d9d4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d00b      	beq.n	800b6ba <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800b6a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	6819      	ldr	r1, [r3, #0]
 800b6aa:	4812      	ldr	r0, [pc, #72]	; (800b6f4 <etharp_find_entry+0x2d4>)
 800b6ac:	4613      	mov	r3, r2
 800b6ae:	005b      	lsls	r3, r3, #1
 800b6b0:	4413      	add	r3, r2
 800b6b2:	00db      	lsls	r3, r3, #3
 800b6b4:	4403      	add	r3, r0
 800b6b6:	3304      	adds	r3, #4
 800b6b8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800b6ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b6be:	490d      	ldr	r1, [pc, #52]	; (800b6f4 <etharp_find_entry+0x2d4>)
 800b6c0:	4613      	mov	r3, r2
 800b6c2:	005b      	lsls	r3, r3, #1
 800b6c4:	4413      	add	r3, r2
 800b6c6:	00db      	lsls	r3, r3, #3
 800b6c8:	440b      	add	r3, r1
 800b6ca:	3312      	adds	r3, #18
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800b6d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b6d4:	4907      	ldr	r1, [pc, #28]	; (800b6f4 <etharp_find_entry+0x2d4>)
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	005b      	lsls	r3, r3, #1
 800b6da:	4413      	add	r3, r2
 800b6dc:	00db      	lsls	r3, r3, #3
 800b6de:	440b      	add	r3, r1
 800b6e0:	3308      	adds	r3, #8
 800b6e2:	687a      	ldr	r2, [r7, #4]
 800b6e4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800b6e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3728      	adds	r7, #40	; 0x28
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	2000010c 	.word	0x2000010c
 800b6f8:	080110ac 	.word	0x080110ac
 800b6fc:	080110e4 	.word	0x080110e4
 800b700:	08011124 	.word	0x08011124
 800b704:	0801114c 	.word	0x0801114c
 800b708:	08011164 	.word	0x08011164
 800b70c:	08011178 	.word	0x08011178

0800b710 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b088      	sub	sp, #32
 800b714:	af02      	add	r7, sp, #8
 800b716:	60f8      	str	r0, [r7, #12]
 800b718:	60b9      	str	r1, [r7, #8]
 800b71a:	607a      	str	r2, [r7, #4]
 800b71c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b724:	2b06      	cmp	r3, #6
 800b726:	d006      	beq.n	800b736 <etharp_update_arp_entry+0x26>
 800b728:	4b48      	ldr	r3, [pc, #288]	; (800b84c <etharp_update_arp_entry+0x13c>)
 800b72a:	f240 12a9 	movw	r2, #425	; 0x1a9
 800b72e:	4948      	ldr	r1, [pc, #288]	; (800b850 <etharp_update_arp_entry+0x140>)
 800b730:	4848      	ldr	r0, [pc, #288]	; (800b854 <etharp_update_arp_entry+0x144>)
 800b732:	f002 f94f 	bl	800d9d4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d012      	beq.n	800b762 <etharp_update_arp_entry+0x52>
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d00e      	beq.n	800b762 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	68f9      	ldr	r1, [r7, #12]
 800b74a:	4618      	mov	r0, r3
 800b74c:	f001 f8fe 	bl	800c94c <ip4_addr_isbroadcast_u32>
 800b750:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800b752:	2b00      	cmp	r3, #0
 800b754:	d105      	bne.n	800b762 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b75e:	2be0      	cmp	r3, #224	; 0xe0
 800b760:	d102      	bne.n	800b768 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b762:	f06f 030f 	mvn.w	r3, #15
 800b766:	e06c      	b.n	800b842 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800b768:	78fb      	ldrb	r3, [r7, #3]
 800b76a:	68fa      	ldr	r2, [r7, #12]
 800b76c:	4619      	mov	r1, r3
 800b76e:	68b8      	ldr	r0, [r7, #8]
 800b770:	f7ff fe56 	bl	800b420 <etharp_find_entry>
 800b774:	4603      	mov	r3, r0
 800b776:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800b778:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	da02      	bge.n	800b786 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800b780:	8afb      	ldrh	r3, [r7, #22]
 800b782:	b25b      	sxtb	r3, r3
 800b784:	e05d      	b.n	800b842 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800b786:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b78a:	4933      	ldr	r1, [pc, #204]	; (800b858 <etharp_update_arp_entry+0x148>)
 800b78c:	4613      	mov	r3, r2
 800b78e:	005b      	lsls	r3, r3, #1
 800b790:	4413      	add	r3, r2
 800b792:	00db      	lsls	r3, r3, #3
 800b794:	440b      	add	r3, r1
 800b796:	3314      	adds	r3, #20
 800b798:	2202      	movs	r2, #2
 800b79a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800b79c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b7a0:	492d      	ldr	r1, [pc, #180]	; (800b858 <etharp_update_arp_entry+0x148>)
 800b7a2:	4613      	mov	r3, r2
 800b7a4:	005b      	lsls	r3, r3, #1
 800b7a6:	4413      	add	r3, r2
 800b7a8:	00db      	lsls	r3, r3, #3
 800b7aa:	440b      	add	r3, r1
 800b7ac:	3308      	adds	r3, #8
 800b7ae:	68fa      	ldr	r2, [r7, #12]
 800b7b0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800b7b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b7b6:	4613      	mov	r3, r2
 800b7b8:	005b      	lsls	r3, r3, #1
 800b7ba:	4413      	add	r3, r2
 800b7bc:	00db      	lsls	r3, r3, #3
 800b7be:	3308      	adds	r3, #8
 800b7c0:	4a25      	ldr	r2, [pc, #148]	; (800b858 <etharp_update_arp_entry+0x148>)
 800b7c2:	4413      	add	r3, r2
 800b7c4:	3304      	adds	r3, #4
 800b7c6:	2206      	movs	r2, #6
 800b7c8:	6879      	ldr	r1, [r7, #4]
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f002 f8d2 	bl	800d974 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800b7d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b7d4:	4920      	ldr	r1, [pc, #128]	; (800b858 <etharp_update_arp_entry+0x148>)
 800b7d6:	4613      	mov	r3, r2
 800b7d8:	005b      	lsls	r3, r3, #1
 800b7da:	4413      	add	r3, r2
 800b7dc:	00db      	lsls	r3, r3, #3
 800b7de:	440b      	add	r3, r1
 800b7e0:	3312      	adds	r3, #18
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800b7e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b7ea:	491b      	ldr	r1, [pc, #108]	; (800b858 <etharp_update_arp_entry+0x148>)
 800b7ec:	4613      	mov	r3, r2
 800b7ee:	005b      	lsls	r3, r3, #1
 800b7f0:	4413      	add	r3, r2
 800b7f2:	00db      	lsls	r3, r3, #3
 800b7f4:	440b      	add	r3, r1
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d021      	beq.n	800b840 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800b7fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b800:	4915      	ldr	r1, [pc, #84]	; (800b858 <etharp_update_arp_entry+0x148>)
 800b802:	4613      	mov	r3, r2
 800b804:	005b      	lsls	r3, r3, #1
 800b806:	4413      	add	r3, r2
 800b808:	00db      	lsls	r3, r3, #3
 800b80a:	440b      	add	r3, r1
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800b810:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b814:	4910      	ldr	r1, [pc, #64]	; (800b858 <etharp_update_arp_entry+0x148>)
 800b816:	4613      	mov	r3, r2
 800b818:	005b      	lsls	r3, r3, #1
 800b81a:	4413      	add	r3, r2
 800b81c:	00db      	lsls	r3, r3, #3
 800b81e:	440b      	add	r3, r1
 800b820:	2200      	movs	r2, #0
 800b822:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800b82a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b82e:	9300      	str	r3, [sp, #0]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6939      	ldr	r1, [r7, #16]
 800b834:	68f8      	ldr	r0, [r7, #12]
 800b836:	f002 f823 	bl	800d880 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800b83a:	6938      	ldr	r0, [r7, #16]
 800b83c:	f7f9 f9d0 	bl	8004be0 <pbuf_free>
  }
  return ERR_OK;
 800b840:	2300      	movs	r3, #0
}
 800b842:	4618      	mov	r0, r3
 800b844:	3718      	adds	r7, #24
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
 800b84a:	bf00      	nop
 800b84c:	080110ac 	.word	0x080110ac
 800b850:	080111a4 	.word	0x080111a4
 800b854:	08011124 	.word	0x08011124
 800b858:	2000010c 	.word	0x2000010c

0800b85c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b084      	sub	sp, #16
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b864:	2300      	movs	r3, #0
 800b866:	60fb      	str	r3, [r7, #12]
 800b868:	e01e      	b.n	800b8a8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800b86a:	4913      	ldr	r1, [pc, #76]	; (800b8b8 <etharp_cleanup_netif+0x5c>)
 800b86c:	68fa      	ldr	r2, [r7, #12]
 800b86e:	4613      	mov	r3, r2
 800b870:	005b      	lsls	r3, r3, #1
 800b872:	4413      	add	r3, r2
 800b874:	00db      	lsls	r3, r3, #3
 800b876:	440b      	add	r3, r1
 800b878:	3314      	adds	r3, #20
 800b87a:	781b      	ldrb	r3, [r3, #0]
 800b87c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800b87e:	7afb      	ldrb	r3, [r7, #11]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d00e      	beq.n	800b8a2 <etharp_cleanup_netif+0x46>
 800b884:	490c      	ldr	r1, [pc, #48]	; (800b8b8 <etharp_cleanup_netif+0x5c>)
 800b886:	68fa      	ldr	r2, [r7, #12]
 800b888:	4613      	mov	r3, r2
 800b88a:	005b      	lsls	r3, r3, #1
 800b88c:	4413      	add	r3, r2
 800b88e:	00db      	lsls	r3, r3, #3
 800b890:	440b      	add	r3, r1
 800b892:	3308      	adds	r3, #8
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	687a      	ldr	r2, [r7, #4]
 800b898:	429a      	cmp	r2, r3
 800b89a:	d102      	bne.n	800b8a2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800b89c:	68f8      	ldr	r0, [r7, #12]
 800b89e:	f7ff fce5 	bl	800b26c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	60fb      	str	r3, [r7, #12]
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2b09      	cmp	r3, #9
 800b8ac:	dddd      	ble.n	800b86a <etharp_cleanup_netif+0xe>
    }
  }
}
 800b8ae:	bf00      	nop
 800b8b0:	bf00      	nop
 800b8b2:	3710      	adds	r7, #16
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}
 800b8b8:	2000010c 	.word	0x2000010c

0800b8bc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800b8bc:	b5b0      	push	{r4, r5, r7, lr}
 800b8be:	b08a      	sub	sp, #40	; 0x28
 800b8c0:	af04      	add	r7, sp, #16
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d107      	bne.n	800b8dc <etharp_input+0x20>
 800b8cc:	4b3d      	ldr	r3, [pc, #244]	; (800b9c4 <etharp_input+0x108>)
 800b8ce:	f240 228a 	movw	r2, #650	; 0x28a
 800b8d2:	493d      	ldr	r1, [pc, #244]	; (800b9c8 <etharp_input+0x10c>)
 800b8d4:	483d      	ldr	r0, [pc, #244]	; (800b9cc <etharp_input+0x110>)
 800b8d6:	f002 f87d 	bl	800d9d4 <iprintf>
 800b8da:	e06f      	b.n	800b9bc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	881b      	ldrh	r3, [r3, #0]
 800b8e6:	b29b      	uxth	r3, r3
 800b8e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8ec:	d10c      	bne.n	800b908 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800b8f2:	2b06      	cmp	r3, #6
 800b8f4:	d108      	bne.n	800b908 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b8fa:	2b04      	cmp	r3, #4
 800b8fc:	d104      	bne.n	800b908 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	885b      	ldrh	r3, [r3, #2]
 800b902:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b904:	2b08      	cmp	r3, #8
 800b906:	d003      	beq.n	800b910 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f7f9 f969 	bl	8004be0 <pbuf_free>
    return;
 800b90e:	e055      	b.n	800b9bc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	330e      	adds	r3, #14
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	3318      	adds	r3, #24
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	3304      	adds	r3, #4
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d102      	bne.n	800b930 <etharp_input+0x74>
    for_us = 0;
 800b92a:	2300      	movs	r3, #0
 800b92c:	75fb      	strb	r3, [r7, #23]
 800b92e:	e009      	b.n	800b944 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800b930:	68ba      	ldr	r2, [r7, #8]
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	3304      	adds	r3, #4
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	429a      	cmp	r2, r3
 800b93a:	bf0c      	ite	eq
 800b93c:	2301      	moveq	r3, #1
 800b93e:	2300      	movne	r3, #0
 800b940:	b2db      	uxtb	r3, r3
 800b942:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	f103 0208 	add.w	r2, r3, #8
 800b94a:	7dfb      	ldrb	r3, [r7, #23]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d001      	beq.n	800b954 <etharp_input+0x98>
 800b950:	2301      	movs	r3, #1
 800b952:	e000      	b.n	800b956 <etharp_input+0x9a>
 800b954:	2302      	movs	r3, #2
 800b956:	f107 010c 	add.w	r1, r7, #12
 800b95a:	6838      	ldr	r0, [r7, #0]
 800b95c:	f7ff fed8 	bl	800b710 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	88db      	ldrh	r3, [r3, #6]
 800b964:	b29b      	uxth	r3, r3
 800b966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b96a:	d003      	beq.n	800b974 <etharp_input+0xb8>
 800b96c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b970:	d01e      	beq.n	800b9b0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800b972:	e020      	b.n	800b9b6 <etharp_input+0xfa>
      if (for_us) {
 800b974:	7dfb      	ldrb	r3, [r7, #23]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d01c      	beq.n	800b9b4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800b990:	693a      	ldr	r2, [r7, #16]
 800b992:	3208      	adds	r2, #8
        etharp_raw(netif,
 800b994:	2102      	movs	r1, #2
 800b996:	9103      	str	r1, [sp, #12]
 800b998:	f107 010c 	add.w	r1, r7, #12
 800b99c:	9102      	str	r1, [sp, #8]
 800b99e:	9201      	str	r2, [sp, #4]
 800b9a0:	9300      	str	r3, [sp, #0]
 800b9a2:	462b      	mov	r3, r5
 800b9a4:	4622      	mov	r2, r4
 800b9a6:	4601      	mov	r1, r0
 800b9a8:	6838      	ldr	r0, [r7, #0]
 800b9aa:	f000 faeb 	bl	800bf84 <etharp_raw>
      break;
 800b9ae:	e001      	b.n	800b9b4 <etharp_input+0xf8>
      break;
 800b9b0:	bf00      	nop
 800b9b2:	e000      	b.n	800b9b6 <etharp_input+0xfa>
      break;
 800b9b4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f7f9 f912 	bl	8004be0 <pbuf_free>
}
 800b9bc:	3718      	adds	r7, #24
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bdb0      	pop	{r4, r5, r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	080110ac 	.word	0x080110ac
 800b9c8:	080111fc 	.word	0x080111fc
 800b9cc:	08011124 	.word	0x08011124

0800b9d0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b086      	sub	sp, #24
 800b9d4:	af02      	add	r7, sp, #8
 800b9d6:	60f8      	str	r0, [r7, #12]
 800b9d8:	60b9      	str	r1, [r7, #8]
 800b9da:	4613      	mov	r3, r2
 800b9dc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800b9de:	79fa      	ldrb	r2, [r7, #7]
 800b9e0:	4944      	ldr	r1, [pc, #272]	; (800baf4 <etharp_output_to_arp_index+0x124>)
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	005b      	lsls	r3, r3, #1
 800b9e6:	4413      	add	r3, r2
 800b9e8:	00db      	lsls	r3, r3, #3
 800b9ea:	440b      	add	r3, r1
 800b9ec:	3314      	adds	r3, #20
 800b9ee:	781b      	ldrb	r3, [r3, #0]
 800b9f0:	2b01      	cmp	r3, #1
 800b9f2:	d806      	bhi.n	800ba02 <etharp_output_to_arp_index+0x32>
 800b9f4:	4b40      	ldr	r3, [pc, #256]	; (800baf8 <etharp_output_to_arp_index+0x128>)
 800b9f6:	f240 22ee 	movw	r2, #750	; 0x2ee
 800b9fa:	4940      	ldr	r1, [pc, #256]	; (800bafc <etharp_output_to_arp_index+0x12c>)
 800b9fc:	4840      	ldr	r0, [pc, #256]	; (800bb00 <etharp_output_to_arp_index+0x130>)
 800b9fe:	f001 ffe9 	bl	800d9d4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800ba02:	79fa      	ldrb	r2, [r7, #7]
 800ba04:	493b      	ldr	r1, [pc, #236]	; (800baf4 <etharp_output_to_arp_index+0x124>)
 800ba06:	4613      	mov	r3, r2
 800ba08:	005b      	lsls	r3, r3, #1
 800ba0a:	4413      	add	r3, r2
 800ba0c:	00db      	lsls	r3, r3, #3
 800ba0e:	440b      	add	r3, r1
 800ba10:	3314      	adds	r3, #20
 800ba12:	781b      	ldrb	r3, [r3, #0]
 800ba14:	2b02      	cmp	r3, #2
 800ba16:	d153      	bne.n	800bac0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800ba18:	79fa      	ldrb	r2, [r7, #7]
 800ba1a:	4936      	ldr	r1, [pc, #216]	; (800baf4 <etharp_output_to_arp_index+0x124>)
 800ba1c:	4613      	mov	r3, r2
 800ba1e:	005b      	lsls	r3, r3, #1
 800ba20:	4413      	add	r3, r2
 800ba22:	00db      	lsls	r3, r3, #3
 800ba24:	440b      	add	r3, r1
 800ba26:	3312      	adds	r3, #18
 800ba28:	881b      	ldrh	r3, [r3, #0]
 800ba2a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800ba2e:	d919      	bls.n	800ba64 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800ba30:	79fa      	ldrb	r2, [r7, #7]
 800ba32:	4613      	mov	r3, r2
 800ba34:	005b      	lsls	r3, r3, #1
 800ba36:	4413      	add	r3, r2
 800ba38:	00db      	lsls	r3, r3, #3
 800ba3a:	4a2e      	ldr	r2, [pc, #184]	; (800baf4 <etharp_output_to_arp_index+0x124>)
 800ba3c:	4413      	add	r3, r2
 800ba3e:	3304      	adds	r3, #4
 800ba40:	4619      	mov	r1, r3
 800ba42:	68f8      	ldr	r0, [r7, #12]
 800ba44:	f000 fb4c 	bl	800c0e0 <etharp_request>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d138      	bne.n	800bac0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ba4e:	79fa      	ldrb	r2, [r7, #7]
 800ba50:	4928      	ldr	r1, [pc, #160]	; (800baf4 <etharp_output_to_arp_index+0x124>)
 800ba52:	4613      	mov	r3, r2
 800ba54:	005b      	lsls	r3, r3, #1
 800ba56:	4413      	add	r3, r2
 800ba58:	00db      	lsls	r3, r3, #3
 800ba5a:	440b      	add	r3, r1
 800ba5c:	3314      	adds	r3, #20
 800ba5e:	2203      	movs	r2, #3
 800ba60:	701a      	strb	r2, [r3, #0]
 800ba62:	e02d      	b.n	800bac0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800ba64:	79fa      	ldrb	r2, [r7, #7]
 800ba66:	4923      	ldr	r1, [pc, #140]	; (800baf4 <etharp_output_to_arp_index+0x124>)
 800ba68:	4613      	mov	r3, r2
 800ba6a:	005b      	lsls	r3, r3, #1
 800ba6c:	4413      	add	r3, r2
 800ba6e:	00db      	lsls	r3, r3, #3
 800ba70:	440b      	add	r3, r1
 800ba72:	3312      	adds	r3, #18
 800ba74:	881b      	ldrh	r3, [r3, #0]
 800ba76:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800ba7a:	d321      	bcc.n	800bac0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800ba7c:	79fa      	ldrb	r2, [r7, #7]
 800ba7e:	4613      	mov	r3, r2
 800ba80:	005b      	lsls	r3, r3, #1
 800ba82:	4413      	add	r3, r2
 800ba84:	00db      	lsls	r3, r3, #3
 800ba86:	4a1b      	ldr	r2, [pc, #108]	; (800baf4 <etharp_output_to_arp_index+0x124>)
 800ba88:	4413      	add	r3, r2
 800ba8a:	1d19      	adds	r1, r3, #4
 800ba8c:	79fa      	ldrb	r2, [r7, #7]
 800ba8e:	4613      	mov	r3, r2
 800ba90:	005b      	lsls	r3, r3, #1
 800ba92:	4413      	add	r3, r2
 800ba94:	00db      	lsls	r3, r3, #3
 800ba96:	3308      	adds	r3, #8
 800ba98:	4a16      	ldr	r2, [pc, #88]	; (800baf4 <etharp_output_to_arp_index+0x124>)
 800ba9a:	4413      	add	r3, r2
 800ba9c:	3304      	adds	r3, #4
 800ba9e:	461a      	mov	r2, r3
 800baa0:	68f8      	ldr	r0, [r7, #12]
 800baa2:	f000 fafb 	bl	800c09c <etharp_request_dst>
 800baa6:	4603      	mov	r3, r0
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d109      	bne.n	800bac0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800baac:	79fa      	ldrb	r2, [r7, #7]
 800baae:	4911      	ldr	r1, [pc, #68]	; (800baf4 <etharp_output_to_arp_index+0x124>)
 800bab0:	4613      	mov	r3, r2
 800bab2:	005b      	lsls	r3, r3, #1
 800bab4:	4413      	add	r3, r2
 800bab6:	00db      	lsls	r3, r3, #3
 800bab8:	440b      	add	r3, r1
 800baba:	3314      	adds	r3, #20
 800babc:	2203      	movs	r2, #3
 800babe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800bac6:	79fa      	ldrb	r2, [r7, #7]
 800bac8:	4613      	mov	r3, r2
 800baca:	005b      	lsls	r3, r3, #1
 800bacc:	4413      	add	r3, r2
 800bace:	00db      	lsls	r3, r3, #3
 800bad0:	3308      	adds	r3, #8
 800bad2:	4a08      	ldr	r2, [pc, #32]	; (800baf4 <etharp_output_to_arp_index+0x124>)
 800bad4:	4413      	add	r3, r2
 800bad6:	3304      	adds	r3, #4
 800bad8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800badc:	9200      	str	r2, [sp, #0]
 800bade:	460a      	mov	r2, r1
 800bae0:	68b9      	ldr	r1, [r7, #8]
 800bae2:	68f8      	ldr	r0, [r7, #12]
 800bae4:	f001 fecc 	bl	800d880 <ethernet_output>
 800bae8:	4603      	mov	r3, r0
}
 800baea:	4618      	mov	r0, r3
 800baec:	3710      	adds	r7, #16
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}
 800baf2:	bf00      	nop
 800baf4:	2000010c 	.word	0x2000010c
 800baf8:	080110ac 	.word	0x080110ac
 800bafc:	0801121c 	.word	0x0801121c
 800bb00:	08011124 	.word	0x08011124

0800bb04 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b08a      	sub	sp, #40	; 0x28
 800bb08:	af02      	add	r7, sp, #8
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	60b9      	str	r1, [r7, #8]
 800bb0e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d106      	bne.n	800bb28 <etharp_output+0x24>
 800bb1a:	4b73      	ldr	r3, [pc, #460]	; (800bce8 <etharp_output+0x1e4>)
 800bb1c:	f240 321e 	movw	r2, #798	; 0x31e
 800bb20:	4972      	ldr	r1, [pc, #456]	; (800bcec <etharp_output+0x1e8>)
 800bb22:	4873      	ldr	r0, [pc, #460]	; (800bcf0 <etharp_output+0x1ec>)
 800bb24:	f001 ff56 	bl	800d9d4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d106      	bne.n	800bb3c <etharp_output+0x38>
 800bb2e:	4b6e      	ldr	r3, [pc, #440]	; (800bce8 <etharp_output+0x1e4>)
 800bb30:	f240 321f 	movw	r2, #799	; 0x31f
 800bb34:	496f      	ldr	r1, [pc, #444]	; (800bcf4 <etharp_output+0x1f0>)
 800bb36:	486e      	ldr	r0, [pc, #440]	; (800bcf0 <etharp_output+0x1ec>)
 800bb38:	f001 ff4c 	bl	800d9d4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d106      	bne.n	800bb50 <etharp_output+0x4c>
 800bb42:	4b69      	ldr	r3, [pc, #420]	; (800bce8 <etharp_output+0x1e4>)
 800bb44:	f44f 7248 	mov.w	r2, #800	; 0x320
 800bb48:	496b      	ldr	r1, [pc, #428]	; (800bcf8 <etharp_output+0x1f4>)
 800bb4a:	4869      	ldr	r0, [pc, #420]	; (800bcf0 <etharp_output+0x1ec>)
 800bb4c:	f001 ff42 	bl	800d9d4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	68f9      	ldr	r1, [r7, #12]
 800bb56:	4618      	mov	r0, r3
 800bb58:	f000 fef8 	bl	800c94c <ip4_addr_isbroadcast_u32>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d002      	beq.n	800bb68 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800bb62:	4b66      	ldr	r3, [pc, #408]	; (800bcfc <etharp_output+0x1f8>)
 800bb64:	61fb      	str	r3, [r7, #28]
 800bb66:	e0af      	b.n	800bcc8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb70:	2be0      	cmp	r3, #224	; 0xe0
 800bb72:	d118      	bne.n	800bba6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800bb74:	2301      	movs	r3, #1
 800bb76:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800bb7c:	235e      	movs	r3, #94	; 0x5e
 800bb7e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	3301      	adds	r3, #1
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb8a:	b2db      	uxtb	r3, r3
 800bb8c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	3302      	adds	r3, #2
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	3303      	adds	r3, #3
 800bb9a:	781b      	ldrb	r3, [r3, #0]
 800bb9c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800bb9e:	f107 0310 	add.w	r3, r7, #16
 800bba2:	61fb      	str	r3, [r7, #28]
 800bba4:	e090      	b.n	800bcc8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681a      	ldr	r2, [r3, #0]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	3304      	adds	r3, #4
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	405a      	eors	r2, r3
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	3308      	adds	r3, #8
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	4013      	ands	r3, r2
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d012      	beq.n	800bbe4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800bbc4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d00b      	beq.n	800bbe4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	330c      	adds	r3, #12
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d003      	beq.n	800bbde <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	330c      	adds	r3, #12
 800bbda:	61bb      	str	r3, [r7, #24]
 800bbdc:	e002      	b.n	800bbe4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800bbde:	f06f 0303 	mvn.w	r3, #3
 800bbe2:	e07d      	b.n	800bce0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800bbe4:	4b46      	ldr	r3, [pc, #280]	; (800bd00 <etharp_output+0x1fc>)
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	4619      	mov	r1, r3
 800bbea:	4a46      	ldr	r2, [pc, #280]	; (800bd04 <etharp_output+0x200>)
 800bbec:	460b      	mov	r3, r1
 800bbee:	005b      	lsls	r3, r3, #1
 800bbf0:	440b      	add	r3, r1
 800bbf2:	00db      	lsls	r3, r3, #3
 800bbf4:	4413      	add	r3, r2
 800bbf6:	3314      	adds	r3, #20
 800bbf8:	781b      	ldrb	r3, [r3, #0]
 800bbfa:	2b01      	cmp	r3, #1
 800bbfc:	d925      	bls.n	800bc4a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800bbfe:	4b40      	ldr	r3, [pc, #256]	; (800bd00 <etharp_output+0x1fc>)
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	4619      	mov	r1, r3
 800bc04:	4a3f      	ldr	r2, [pc, #252]	; (800bd04 <etharp_output+0x200>)
 800bc06:	460b      	mov	r3, r1
 800bc08:	005b      	lsls	r3, r3, #1
 800bc0a:	440b      	add	r3, r1
 800bc0c:	00db      	lsls	r3, r3, #3
 800bc0e:	4413      	add	r3, r2
 800bc10:	3308      	adds	r3, #8
 800bc12:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800bc14:	68fa      	ldr	r2, [r7, #12]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d117      	bne.n	800bc4a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800bc1a:	69bb      	ldr	r3, [r7, #24]
 800bc1c:	681a      	ldr	r2, [r3, #0]
 800bc1e:	4b38      	ldr	r3, [pc, #224]	; (800bd00 <etharp_output+0x1fc>)
 800bc20:	781b      	ldrb	r3, [r3, #0]
 800bc22:	4618      	mov	r0, r3
 800bc24:	4937      	ldr	r1, [pc, #220]	; (800bd04 <etharp_output+0x200>)
 800bc26:	4603      	mov	r3, r0
 800bc28:	005b      	lsls	r3, r3, #1
 800bc2a:	4403      	add	r3, r0
 800bc2c:	00db      	lsls	r3, r3, #3
 800bc2e:	440b      	add	r3, r1
 800bc30:	3304      	adds	r3, #4
 800bc32:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d108      	bne.n	800bc4a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800bc38:	4b31      	ldr	r3, [pc, #196]	; (800bd00 <etharp_output+0x1fc>)
 800bc3a:	781b      	ldrb	r3, [r3, #0]
 800bc3c:	461a      	mov	r2, r3
 800bc3e:	68b9      	ldr	r1, [r7, #8]
 800bc40:	68f8      	ldr	r0, [r7, #12]
 800bc42:	f7ff fec5 	bl	800b9d0 <etharp_output_to_arp_index>
 800bc46:	4603      	mov	r3, r0
 800bc48:	e04a      	b.n	800bce0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	75fb      	strb	r3, [r7, #23]
 800bc4e:	e031      	b.n	800bcb4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800bc50:	7dfa      	ldrb	r2, [r7, #23]
 800bc52:	492c      	ldr	r1, [pc, #176]	; (800bd04 <etharp_output+0x200>)
 800bc54:	4613      	mov	r3, r2
 800bc56:	005b      	lsls	r3, r3, #1
 800bc58:	4413      	add	r3, r2
 800bc5a:	00db      	lsls	r3, r3, #3
 800bc5c:	440b      	add	r3, r1
 800bc5e:	3314      	adds	r3, #20
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d923      	bls.n	800bcae <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800bc66:	7dfa      	ldrb	r2, [r7, #23]
 800bc68:	4926      	ldr	r1, [pc, #152]	; (800bd04 <etharp_output+0x200>)
 800bc6a:	4613      	mov	r3, r2
 800bc6c:	005b      	lsls	r3, r3, #1
 800bc6e:	4413      	add	r3, r2
 800bc70:	00db      	lsls	r3, r3, #3
 800bc72:	440b      	add	r3, r1
 800bc74:	3308      	adds	r3, #8
 800bc76:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800bc78:	68fa      	ldr	r2, [r7, #12]
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d117      	bne.n	800bcae <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	6819      	ldr	r1, [r3, #0]
 800bc82:	7dfa      	ldrb	r2, [r7, #23]
 800bc84:	481f      	ldr	r0, [pc, #124]	; (800bd04 <etharp_output+0x200>)
 800bc86:	4613      	mov	r3, r2
 800bc88:	005b      	lsls	r3, r3, #1
 800bc8a:	4413      	add	r3, r2
 800bc8c:	00db      	lsls	r3, r3, #3
 800bc8e:	4403      	add	r3, r0
 800bc90:	3304      	adds	r3, #4
 800bc92:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800bc94:	4299      	cmp	r1, r3
 800bc96:	d10a      	bne.n	800bcae <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800bc98:	4a19      	ldr	r2, [pc, #100]	; (800bd00 <etharp_output+0x1fc>)
 800bc9a:	7dfb      	ldrb	r3, [r7, #23]
 800bc9c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800bc9e:	7dfb      	ldrb	r3, [r7, #23]
 800bca0:	461a      	mov	r2, r3
 800bca2:	68b9      	ldr	r1, [r7, #8]
 800bca4:	68f8      	ldr	r0, [r7, #12]
 800bca6:	f7ff fe93 	bl	800b9d0 <etharp_output_to_arp_index>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	e018      	b.n	800bce0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800bcae:	7dfb      	ldrb	r3, [r7, #23]
 800bcb0:	3301      	adds	r3, #1
 800bcb2:	75fb      	strb	r3, [r7, #23]
 800bcb4:	7dfb      	ldrb	r3, [r7, #23]
 800bcb6:	2b09      	cmp	r3, #9
 800bcb8:	d9ca      	bls.n	800bc50 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800bcba:	68ba      	ldr	r2, [r7, #8]
 800bcbc:	69b9      	ldr	r1, [r7, #24]
 800bcbe:	68f8      	ldr	r0, [r7, #12]
 800bcc0:	f000 f822 	bl	800bd08 <etharp_query>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	e00b      	b.n	800bce0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800bcce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bcd2:	9300      	str	r3, [sp, #0]
 800bcd4:	69fb      	ldr	r3, [r7, #28]
 800bcd6:	68b9      	ldr	r1, [r7, #8]
 800bcd8:	68f8      	ldr	r0, [r7, #12]
 800bcda:	f001 fdd1 	bl	800d880 <ethernet_output>
 800bcde:	4603      	mov	r3, r0
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3720      	adds	r7, #32
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	080110ac 	.word	0x080110ac
 800bcec:	080111fc 	.word	0x080111fc
 800bcf0:	08011124 	.word	0x08011124
 800bcf4:	0801124c 	.word	0x0801124c
 800bcf8:	080111ec 	.word	0x080111ec
 800bcfc:	08011854 	.word	0x08011854
 800bd00:	200001fc 	.word	0x200001fc
 800bd04:	2000010c 	.word	0x2000010c

0800bd08 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b08c      	sub	sp, #48	; 0x30
 800bd0c:	af02      	add	r7, sp, #8
 800bd0e:	60f8      	str	r0, [r7, #12]
 800bd10:	60b9      	str	r1, [r7, #8]
 800bd12:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	3326      	adds	r3, #38	; 0x26
 800bd18:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800bd1a:	23ff      	movs	r3, #255	; 0xff
 800bd1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800bd20:	2300      	movs	r3, #0
 800bd22:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	68f9      	ldr	r1, [r7, #12]
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f000 fe0e 	bl	800c94c <ip4_addr_isbroadcast_u32>
 800bd30:	4603      	mov	r3, r0
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d10c      	bne.n	800bd50 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800bd3e:	2be0      	cmp	r3, #224	; 0xe0
 800bd40:	d006      	beq.n	800bd50 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d003      	beq.n	800bd50 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d102      	bne.n	800bd56 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800bd50:	f06f 030f 	mvn.w	r3, #15
 800bd54:	e101      	b.n	800bf5a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800bd56:	68fa      	ldr	r2, [r7, #12]
 800bd58:	2101      	movs	r1, #1
 800bd5a:	68b8      	ldr	r0, [r7, #8]
 800bd5c:	f7ff fb60 	bl	800b420 <etharp_find_entry>
 800bd60:	4603      	mov	r3, r0
 800bd62:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800bd64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	da02      	bge.n	800bd72 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800bd6c:	8a7b      	ldrh	r3, [r7, #18]
 800bd6e:	b25b      	sxtb	r3, r3
 800bd70:	e0f3      	b.n	800bf5a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800bd72:	8a7b      	ldrh	r3, [r7, #18]
 800bd74:	2b7e      	cmp	r3, #126	; 0x7e
 800bd76:	d906      	bls.n	800bd86 <etharp_query+0x7e>
 800bd78:	4b7a      	ldr	r3, [pc, #488]	; (800bf64 <etharp_query+0x25c>)
 800bd7a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800bd7e:	497a      	ldr	r1, [pc, #488]	; (800bf68 <etharp_query+0x260>)
 800bd80:	487a      	ldr	r0, [pc, #488]	; (800bf6c <etharp_query+0x264>)
 800bd82:	f001 fe27 	bl	800d9d4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800bd86:	8a7b      	ldrh	r3, [r7, #18]
 800bd88:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800bd8a:	7c7a      	ldrb	r2, [r7, #17]
 800bd8c:	4978      	ldr	r1, [pc, #480]	; (800bf70 <etharp_query+0x268>)
 800bd8e:	4613      	mov	r3, r2
 800bd90:	005b      	lsls	r3, r3, #1
 800bd92:	4413      	add	r3, r2
 800bd94:	00db      	lsls	r3, r3, #3
 800bd96:	440b      	add	r3, r1
 800bd98:	3314      	adds	r3, #20
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d115      	bne.n	800bdcc <etharp_query+0xc4>
    is_new_entry = 1;
 800bda0:	2301      	movs	r3, #1
 800bda2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800bda4:	7c7a      	ldrb	r2, [r7, #17]
 800bda6:	4972      	ldr	r1, [pc, #456]	; (800bf70 <etharp_query+0x268>)
 800bda8:	4613      	mov	r3, r2
 800bdaa:	005b      	lsls	r3, r3, #1
 800bdac:	4413      	add	r3, r2
 800bdae:	00db      	lsls	r3, r3, #3
 800bdb0:	440b      	add	r3, r1
 800bdb2:	3314      	adds	r3, #20
 800bdb4:	2201      	movs	r2, #1
 800bdb6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800bdb8:	7c7a      	ldrb	r2, [r7, #17]
 800bdba:	496d      	ldr	r1, [pc, #436]	; (800bf70 <etharp_query+0x268>)
 800bdbc:	4613      	mov	r3, r2
 800bdbe:	005b      	lsls	r3, r3, #1
 800bdc0:	4413      	add	r3, r2
 800bdc2:	00db      	lsls	r3, r3, #3
 800bdc4:	440b      	add	r3, r1
 800bdc6:	3308      	adds	r3, #8
 800bdc8:	68fa      	ldr	r2, [r7, #12]
 800bdca:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800bdcc:	7c7a      	ldrb	r2, [r7, #17]
 800bdce:	4968      	ldr	r1, [pc, #416]	; (800bf70 <etharp_query+0x268>)
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	005b      	lsls	r3, r3, #1
 800bdd4:	4413      	add	r3, r2
 800bdd6:	00db      	lsls	r3, r3, #3
 800bdd8:	440b      	add	r3, r1
 800bdda:	3314      	adds	r3, #20
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	2b01      	cmp	r3, #1
 800bde0:	d011      	beq.n	800be06 <etharp_query+0xfe>
 800bde2:	7c7a      	ldrb	r2, [r7, #17]
 800bde4:	4962      	ldr	r1, [pc, #392]	; (800bf70 <etharp_query+0x268>)
 800bde6:	4613      	mov	r3, r2
 800bde8:	005b      	lsls	r3, r3, #1
 800bdea:	4413      	add	r3, r2
 800bdec:	00db      	lsls	r3, r3, #3
 800bdee:	440b      	add	r3, r1
 800bdf0:	3314      	adds	r3, #20
 800bdf2:	781b      	ldrb	r3, [r3, #0]
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	d806      	bhi.n	800be06 <etharp_query+0xfe>
 800bdf8:	4b5a      	ldr	r3, [pc, #360]	; (800bf64 <etharp_query+0x25c>)
 800bdfa:	f240 32cd 	movw	r2, #973	; 0x3cd
 800bdfe:	495d      	ldr	r1, [pc, #372]	; (800bf74 <etharp_query+0x26c>)
 800be00:	485a      	ldr	r0, [pc, #360]	; (800bf6c <etharp_query+0x264>)
 800be02:	f001 fde7 	bl	800d9d4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800be06:	6a3b      	ldr	r3, [r7, #32]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d102      	bne.n	800be12 <etharp_query+0x10a>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d10c      	bne.n	800be2c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800be12:	68b9      	ldr	r1, [r7, #8]
 800be14:	68f8      	ldr	r0, [r7, #12]
 800be16:	f000 f963 	bl	800c0e0 <etharp_request>
 800be1a:	4603      	mov	r3, r0
 800be1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d102      	bne.n	800be2c <etharp_query+0x124>
      return result;
 800be26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800be2a:	e096      	b.n	800bf5a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d106      	bne.n	800be40 <etharp_query+0x138>
 800be32:	4b4c      	ldr	r3, [pc, #304]	; (800bf64 <etharp_query+0x25c>)
 800be34:	f240 32e1 	movw	r2, #993	; 0x3e1
 800be38:	494f      	ldr	r1, [pc, #316]	; (800bf78 <etharp_query+0x270>)
 800be3a:	484c      	ldr	r0, [pc, #304]	; (800bf6c <etharp_query+0x264>)
 800be3c:	f001 fdca 	bl	800d9d4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800be40:	7c7a      	ldrb	r2, [r7, #17]
 800be42:	494b      	ldr	r1, [pc, #300]	; (800bf70 <etharp_query+0x268>)
 800be44:	4613      	mov	r3, r2
 800be46:	005b      	lsls	r3, r3, #1
 800be48:	4413      	add	r3, r2
 800be4a:	00db      	lsls	r3, r3, #3
 800be4c:	440b      	add	r3, r1
 800be4e:	3314      	adds	r3, #20
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	2b01      	cmp	r3, #1
 800be54:	d917      	bls.n	800be86 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800be56:	4a49      	ldr	r2, [pc, #292]	; (800bf7c <etharp_query+0x274>)
 800be58:	7c7b      	ldrb	r3, [r7, #17]
 800be5a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800be5c:	7c7a      	ldrb	r2, [r7, #17]
 800be5e:	4613      	mov	r3, r2
 800be60:	005b      	lsls	r3, r3, #1
 800be62:	4413      	add	r3, r2
 800be64:	00db      	lsls	r3, r3, #3
 800be66:	3308      	adds	r3, #8
 800be68:	4a41      	ldr	r2, [pc, #260]	; (800bf70 <etharp_query+0x268>)
 800be6a:	4413      	add	r3, r2
 800be6c:	3304      	adds	r3, #4
 800be6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800be72:	9200      	str	r2, [sp, #0]
 800be74:	697a      	ldr	r2, [r7, #20]
 800be76:	6879      	ldr	r1, [r7, #4]
 800be78:	68f8      	ldr	r0, [r7, #12]
 800be7a:	f001 fd01 	bl	800d880 <ethernet_output>
 800be7e:	4603      	mov	r3, r0
 800be80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800be84:	e067      	b.n	800bf56 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800be86:	7c7a      	ldrb	r2, [r7, #17]
 800be88:	4939      	ldr	r1, [pc, #228]	; (800bf70 <etharp_query+0x268>)
 800be8a:	4613      	mov	r3, r2
 800be8c:	005b      	lsls	r3, r3, #1
 800be8e:	4413      	add	r3, r2
 800be90:	00db      	lsls	r3, r3, #3
 800be92:	440b      	add	r3, r1
 800be94:	3314      	adds	r3, #20
 800be96:	781b      	ldrb	r3, [r3, #0]
 800be98:	2b01      	cmp	r3, #1
 800be9a:	d15c      	bne.n	800bf56 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800be9c:	2300      	movs	r3, #0
 800be9e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800bea4:	e01c      	b.n	800bee0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800bea6:	69fb      	ldr	r3, [r7, #28]
 800bea8:	895a      	ldrh	r2, [r3, #10]
 800beaa:	69fb      	ldr	r3, [r7, #28]
 800beac:	891b      	ldrh	r3, [r3, #8]
 800beae:	429a      	cmp	r2, r3
 800beb0:	d10a      	bne.n	800bec8 <etharp_query+0x1c0>
 800beb2:	69fb      	ldr	r3, [r7, #28]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d006      	beq.n	800bec8 <etharp_query+0x1c0>
 800beba:	4b2a      	ldr	r3, [pc, #168]	; (800bf64 <etharp_query+0x25c>)
 800bebc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800bec0:	492f      	ldr	r1, [pc, #188]	; (800bf80 <etharp_query+0x278>)
 800bec2:	482a      	ldr	r0, [pc, #168]	; (800bf6c <etharp_query+0x264>)
 800bec4:	f001 fd86 	bl	800d9d4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800bec8:	69fb      	ldr	r3, [r7, #28]
 800beca:	7b1b      	ldrb	r3, [r3, #12]
 800becc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d002      	beq.n	800beda <etharp_query+0x1d2>
        copy_needed = 1;
 800bed4:	2301      	movs	r3, #1
 800bed6:	61bb      	str	r3, [r7, #24]
        break;
 800bed8:	e005      	b.n	800bee6 <etharp_query+0x1de>
      }
      p = p->next;
 800beda:	69fb      	ldr	r3, [r7, #28]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	61fb      	str	r3, [r7, #28]
    while (p) {
 800bee0:	69fb      	ldr	r3, [r7, #28]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d1df      	bne.n	800bea6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d007      	beq.n	800befc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	f44f 7120 	mov.w	r1, #640	; 0x280
 800bef2:	200e      	movs	r0, #14
 800bef4:	f7f9 f972 	bl	80051dc <pbuf_clone>
 800bef8:	61f8      	str	r0, [r7, #28]
 800befa:	e004      	b.n	800bf06 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800bf00:	69f8      	ldr	r0, [r7, #28]
 800bf02:	f7f8 ff0d 	bl	8004d20 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800bf06:	69fb      	ldr	r3, [r7, #28]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d021      	beq.n	800bf50 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800bf0c:	7c7a      	ldrb	r2, [r7, #17]
 800bf0e:	4918      	ldr	r1, [pc, #96]	; (800bf70 <etharp_query+0x268>)
 800bf10:	4613      	mov	r3, r2
 800bf12:	005b      	lsls	r3, r3, #1
 800bf14:	4413      	add	r3, r2
 800bf16:	00db      	lsls	r3, r3, #3
 800bf18:	440b      	add	r3, r1
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d00a      	beq.n	800bf36 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800bf20:	7c7a      	ldrb	r2, [r7, #17]
 800bf22:	4913      	ldr	r1, [pc, #76]	; (800bf70 <etharp_query+0x268>)
 800bf24:	4613      	mov	r3, r2
 800bf26:	005b      	lsls	r3, r3, #1
 800bf28:	4413      	add	r3, r2
 800bf2a:	00db      	lsls	r3, r3, #3
 800bf2c:	440b      	add	r3, r1
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	4618      	mov	r0, r3
 800bf32:	f7f8 fe55 	bl	8004be0 <pbuf_free>
      }
      arp_table[i].q = p;
 800bf36:	7c7a      	ldrb	r2, [r7, #17]
 800bf38:	490d      	ldr	r1, [pc, #52]	; (800bf70 <etharp_query+0x268>)
 800bf3a:	4613      	mov	r3, r2
 800bf3c:	005b      	lsls	r3, r3, #1
 800bf3e:	4413      	add	r3, r2
 800bf40:	00db      	lsls	r3, r3, #3
 800bf42:	440b      	add	r3, r1
 800bf44:	69fa      	ldr	r2, [r7, #28]
 800bf46:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bf4e:	e002      	b.n	800bf56 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800bf50:	23ff      	movs	r3, #255	; 0xff
 800bf52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800bf56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3728      	adds	r7, #40	; 0x28
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
 800bf62:	bf00      	nop
 800bf64:	080110ac 	.word	0x080110ac
 800bf68:	08011258 	.word	0x08011258
 800bf6c:	08011124 	.word	0x08011124
 800bf70:	2000010c 	.word	0x2000010c
 800bf74:	08011268 	.word	0x08011268
 800bf78:	0801124c 	.word	0x0801124c
 800bf7c:	200001fc 	.word	0x200001fc
 800bf80:	08011290 	.word	0x08011290

0800bf84 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b08a      	sub	sp, #40	; 0x28
 800bf88:	af02      	add	r7, sp, #8
 800bf8a:	60f8      	str	r0, [r7, #12]
 800bf8c:	60b9      	str	r1, [r7, #8]
 800bf8e:	607a      	str	r2, [r7, #4]
 800bf90:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800bf92:	2300      	movs	r3, #0
 800bf94:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d106      	bne.n	800bfaa <etharp_raw+0x26>
 800bf9c:	4b3a      	ldr	r3, [pc, #232]	; (800c088 <etharp_raw+0x104>)
 800bf9e:	f240 4257 	movw	r2, #1111	; 0x457
 800bfa2:	493a      	ldr	r1, [pc, #232]	; (800c08c <etharp_raw+0x108>)
 800bfa4:	483a      	ldr	r0, [pc, #232]	; (800c090 <etharp_raw+0x10c>)
 800bfa6:	f001 fd15 	bl	800d9d4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800bfaa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bfae:	211c      	movs	r1, #28
 800bfb0:	200e      	movs	r0, #14
 800bfb2:	f7f8 fb31 	bl	8004618 <pbuf_alloc>
 800bfb6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800bfb8:	69bb      	ldr	r3, [r7, #24]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d102      	bne.n	800bfc4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800bfbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bfc2:	e05d      	b.n	800c080 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800bfc4:	69bb      	ldr	r3, [r7, #24]
 800bfc6:	895b      	ldrh	r3, [r3, #10]
 800bfc8:	2b1b      	cmp	r3, #27
 800bfca:	d806      	bhi.n	800bfda <etharp_raw+0x56>
 800bfcc:	4b2e      	ldr	r3, [pc, #184]	; (800c088 <etharp_raw+0x104>)
 800bfce:	f240 4262 	movw	r2, #1122	; 0x462
 800bfd2:	4930      	ldr	r1, [pc, #192]	; (800c094 <etharp_raw+0x110>)
 800bfd4:	482e      	ldr	r0, [pc, #184]	; (800c090 <etharp_raw+0x10c>)
 800bfd6:	f001 fcfd 	bl	800d9d4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800bfda:	69bb      	ldr	r3, [r7, #24]
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800bfe0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f7f7 fb48 	bl	8003678 <lwip_htons>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	461a      	mov	r2, r3
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bff6:	2b06      	cmp	r3, #6
 800bff8:	d006      	beq.n	800c008 <etharp_raw+0x84>
 800bffa:	4b23      	ldr	r3, [pc, #140]	; (800c088 <etharp_raw+0x104>)
 800bffc:	f240 4269 	movw	r2, #1129	; 0x469
 800c000:	4925      	ldr	r1, [pc, #148]	; (800c098 <etharp_raw+0x114>)
 800c002:	4823      	ldr	r0, [pc, #140]	; (800c090 <etharp_raw+0x10c>)
 800c004:	f001 fce6 	bl	800d9d4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	3308      	adds	r3, #8
 800c00c:	2206      	movs	r2, #6
 800c00e:	6839      	ldr	r1, [r7, #0]
 800c010:	4618      	mov	r0, r3
 800c012:	f001 fcaf 	bl	800d974 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	3312      	adds	r3, #18
 800c01a:	2206      	movs	r2, #6
 800c01c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c01e:	4618      	mov	r0, r3
 800c020:	f001 fca8 	bl	800d974 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	330e      	adds	r3, #14
 800c028:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c02a:	6812      	ldr	r2, [r2, #0]
 800c02c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	3318      	adds	r3, #24
 800c032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c034:	6812      	ldr	r2, [r2, #0]
 800c036:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	2200      	movs	r2, #0
 800c03c:	701a      	strb	r2, [r3, #0]
 800c03e:	2200      	movs	r2, #0
 800c040:	f042 0201 	orr.w	r2, r2, #1
 800c044:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	2200      	movs	r2, #0
 800c04a:	f042 0208 	orr.w	r2, r2, #8
 800c04e:	709a      	strb	r2, [r3, #2]
 800c050:	2200      	movs	r2, #0
 800c052:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	2206      	movs	r2, #6
 800c058:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	2204      	movs	r2, #4
 800c05e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c060:	f640 0306 	movw	r3, #2054	; 0x806
 800c064:	9300      	str	r3, [sp, #0]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	68ba      	ldr	r2, [r7, #8]
 800c06a:	69b9      	ldr	r1, [r7, #24]
 800c06c:	68f8      	ldr	r0, [r7, #12]
 800c06e:	f001 fc07 	bl	800d880 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800c072:	69b8      	ldr	r0, [r7, #24]
 800c074:	f7f8 fdb4 	bl	8004be0 <pbuf_free>
  p = NULL;
 800c078:	2300      	movs	r3, #0
 800c07a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800c07c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c080:	4618      	mov	r0, r3
 800c082:	3720      	adds	r7, #32
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}
 800c088:	080110ac 	.word	0x080110ac
 800c08c:	080111fc 	.word	0x080111fc
 800c090:	08011124 	.word	0x08011124
 800c094:	080112ac 	.word	0x080112ac
 800c098:	080112e0 	.word	0x080112e0

0800c09c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b088      	sub	sp, #32
 800c0a0:	af04      	add	r7, sp, #16
 800c0a2:	60f8      	str	r0, [r7, #12]
 800c0a4:	60b9      	str	r1, [r7, #8]
 800c0a6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	9203      	str	r2, [sp, #12]
 800c0bc:	68ba      	ldr	r2, [r7, #8]
 800c0be:	9202      	str	r2, [sp, #8]
 800c0c0:	4a06      	ldr	r2, [pc, #24]	; (800c0dc <etharp_request_dst+0x40>)
 800c0c2:	9201      	str	r2, [sp, #4]
 800c0c4:	9300      	str	r3, [sp, #0]
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	687a      	ldr	r2, [r7, #4]
 800c0ca:	68f8      	ldr	r0, [r7, #12]
 800c0cc:	f7ff ff5a 	bl	800bf84 <etharp_raw>
 800c0d0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3710      	adds	r7, #16
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	0801185c 	.word	0x0801185c

0800c0e0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b082      	sub	sp, #8
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
 800c0e8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800c0ea:	4a05      	ldr	r2, [pc, #20]	; (800c100 <etharp_request+0x20>)
 800c0ec:	6839      	ldr	r1, [r7, #0]
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f7ff ffd4 	bl	800c09c <etharp_request_dst>
 800c0f4:	4603      	mov	r3, r0
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	3708      	adds	r7, #8
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}
 800c0fe:	bf00      	nop
 800c100:	08011854 	.word	0x08011854

0800c104 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b08e      	sub	sp, #56	; 0x38
 800c108:	af04      	add	r7, sp, #16
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800c10e:	4b79      	ldr	r3, [pc, #484]	; (800c2f4 <icmp_input+0x1f0>)
 800c110:	689b      	ldr	r3, [r3, #8]
 800c112:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800c114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	f003 030f 	and.w	r3, r3, #15
 800c11c:	b2db      	uxtb	r3, r3
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	b2db      	uxtb	r3, r3
 800c122:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800c124:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c126:	2b13      	cmp	r3, #19
 800c128:	f240 80cd 	bls.w	800c2c6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	895b      	ldrh	r3, [r3, #10]
 800c130:	2b03      	cmp	r3, #3
 800c132:	f240 80ca 	bls.w	800c2ca <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	685b      	ldr	r3, [r3, #4]
 800c13a:	781b      	ldrb	r3, [r3, #0]
 800c13c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800c140:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800c144:	2b00      	cmp	r3, #0
 800c146:	f000 80b7 	beq.w	800c2b8 <icmp_input+0x1b4>
 800c14a:	2b08      	cmp	r3, #8
 800c14c:	f040 80b7 	bne.w	800c2be <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800c150:	4b69      	ldr	r3, [pc, #420]	; (800c2f8 <icmp_input+0x1f4>)
 800c152:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c154:	4b67      	ldr	r3, [pc, #412]	; (800c2f4 <icmp_input+0x1f0>)
 800c156:	695b      	ldr	r3, [r3, #20]
 800c158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c15c:	2be0      	cmp	r3, #224	; 0xe0
 800c15e:	f000 80bb 	beq.w	800c2d8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800c162:	4b64      	ldr	r3, [pc, #400]	; (800c2f4 <icmp_input+0x1f0>)
 800c164:	695b      	ldr	r3, [r3, #20]
 800c166:	4a63      	ldr	r2, [pc, #396]	; (800c2f4 <icmp_input+0x1f0>)
 800c168:	6812      	ldr	r2, [r2, #0]
 800c16a:	4611      	mov	r1, r2
 800c16c:	4618      	mov	r0, r3
 800c16e:	f000 fbed 	bl	800c94c <ip4_addr_isbroadcast_u32>
 800c172:	4603      	mov	r3, r0
 800c174:	2b00      	cmp	r3, #0
 800c176:	f040 80b1 	bne.w	800c2dc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	891b      	ldrh	r3, [r3, #8]
 800c17e:	2b07      	cmp	r3, #7
 800c180:	f240 80a5 	bls.w	800c2ce <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800c184:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c186:	330e      	adds	r3, #14
 800c188:	4619      	mov	r1, r3
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f7f8 fc92 	bl	8004ab4 <pbuf_add_header>
 800c190:	4603      	mov	r3, r0
 800c192:	2b00      	cmp	r3, #0
 800c194:	d04b      	beq.n	800c22e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	891a      	ldrh	r2, [r3, #8]
 800c19a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c19c:	4413      	add	r3, r2
 800c19e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	891b      	ldrh	r3, [r3, #8]
 800c1a4:	8b7a      	ldrh	r2, [r7, #26]
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	f0c0 809a 	bcc.w	800c2e0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800c1ac:	8b7b      	ldrh	r3, [r7, #26]
 800c1ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c1b2:	4619      	mov	r1, r3
 800c1b4:	200e      	movs	r0, #14
 800c1b6:	f7f8 fa2f 	bl	8004618 <pbuf_alloc>
 800c1ba:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	f000 8090 	beq.w	800c2e4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	895b      	ldrh	r3, [r3, #10]
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c1cc:	3308      	adds	r3, #8
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d203      	bcs.n	800c1da <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800c1d2:	6978      	ldr	r0, [r7, #20]
 800c1d4:	f7f8 fd04 	bl	8004be0 <pbuf_free>
          goto icmperr;
 800c1d8:	e085      	b.n	800c2e6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c1e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f001 fbc6 	bl	800d974 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800c1e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c1ea:	4619      	mov	r1, r3
 800c1ec:	6978      	ldr	r0, [r7, #20]
 800c1ee:	f7f8 fc71 	bl	8004ad4 <pbuf_remove_header>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d009      	beq.n	800c20c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800c1f8:	4b40      	ldr	r3, [pc, #256]	; (800c2fc <icmp_input+0x1f8>)
 800c1fa:	22b6      	movs	r2, #182	; 0xb6
 800c1fc:	4940      	ldr	r1, [pc, #256]	; (800c300 <icmp_input+0x1fc>)
 800c1fe:	4841      	ldr	r0, [pc, #260]	; (800c304 <icmp_input+0x200>)
 800c200:	f001 fbe8 	bl	800d9d4 <iprintf>
          pbuf_free(r);
 800c204:	6978      	ldr	r0, [r7, #20]
 800c206:	f7f8 fceb 	bl	8004be0 <pbuf_free>
          goto icmperr;
 800c20a:	e06c      	b.n	800c2e6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800c20c:	6879      	ldr	r1, [r7, #4]
 800c20e:	6978      	ldr	r0, [r7, #20]
 800c210:	f7f8 fe0e 	bl	8004e30 <pbuf_copy>
 800c214:	4603      	mov	r3, r0
 800c216:	2b00      	cmp	r3, #0
 800c218:	d003      	beq.n	800c222 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800c21a:	6978      	ldr	r0, [r7, #20]
 800c21c:	f7f8 fce0 	bl	8004be0 <pbuf_free>
          goto icmperr;
 800c220:	e061      	b.n	800c2e6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f7f8 fcdc 	bl	8004be0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	607b      	str	r3, [r7, #4]
 800c22c:	e00f      	b.n	800c24e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800c22e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c230:	330e      	adds	r3, #14
 800c232:	4619      	mov	r1, r3
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f7f8 fc4d 	bl	8004ad4 <pbuf_remove_header>
 800c23a:	4603      	mov	r3, r0
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d006      	beq.n	800c24e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800c240:	4b2e      	ldr	r3, [pc, #184]	; (800c2fc <icmp_input+0x1f8>)
 800c242:	22c7      	movs	r2, #199	; 0xc7
 800c244:	4930      	ldr	r1, [pc, #192]	; (800c308 <icmp_input+0x204>)
 800c246:	482f      	ldr	r0, [pc, #188]	; (800c304 <icmp_input+0x200>)
 800c248:	f001 fbc4 	bl	800d9d4 <iprintf>
          goto icmperr;
 800c24c:	e04b      	b.n	800c2e6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	685b      	ldr	r3, [r3, #4]
 800c252:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800c254:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c256:	4619      	mov	r1, r3
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f7f8 fc2b 	bl	8004ab4 <pbuf_add_header>
 800c25e:	4603      	mov	r3, r0
 800c260:	2b00      	cmp	r3, #0
 800c262:	d12b      	bne.n	800c2bc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	685b      	ldr	r3, [r3, #4]
 800c268:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800c26a:	69fb      	ldr	r3, [r7, #28]
 800c26c:	681a      	ldr	r2, [r3, #0]
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800c272:	4b20      	ldr	r3, [pc, #128]	; (800c2f4 <icmp_input+0x1f0>)
 800c274:	691a      	ldr	r2, [r3, #16]
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	2200      	movs	r2, #0
 800c27e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	2200      	movs	r2, #0
 800c284:	709a      	strb	r2, [r3, #2]
 800c286:	2200      	movs	r2, #0
 800c288:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	22ff      	movs	r2, #255	; 0xff
 800c28e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	2200      	movs	r2, #0
 800c294:	729a      	strb	r2, [r3, #10]
 800c296:	2200      	movs	r2, #0
 800c298:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	9302      	str	r3, [sp, #8]
 800c29e:	2301      	movs	r3, #1
 800c2a0:	9301      	str	r3, [sp, #4]
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	9300      	str	r3, [sp, #0]
 800c2a6:	23ff      	movs	r3, #255	; 0xff
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	69f9      	ldr	r1, [r7, #28]
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f000 fa75 	bl	800c79c <ip4_output_if>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800c2b6:	e001      	b.n	800c2bc <icmp_input+0x1b8>
      break;
 800c2b8:	bf00      	nop
 800c2ba:	e000      	b.n	800c2be <icmp_input+0x1ba>
      break;
 800c2bc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f7f8 fc8e 	bl	8004be0 <pbuf_free>
  return;
 800c2c4:	e013      	b.n	800c2ee <icmp_input+0x1ea>
    goto lenerr;
 800c2c6:	bf00      	nop
 800c2c8:	e002      	b.n	800c2d0 <icmp_input+0x1cc>
    goto lenerr;
 800c2ca:	bf00      	nop
 800c2cc:	e000      	b.n	800c2d0 <icmp_input+0x1cc>
        goto lenerr;
 800c2ce:	bf00      	nop
lenerr:
  pbuf_free(p);
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f7f8 fc85 	bl	8004be0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c2d6:	e00a      	b.n	800c2ee <icmp_input+0x1ea>
        goto icmperr;
 800c2d8:	bf00      	nop
 800c2da:	e004      	b.n	800c2e6 <icmp_input+0x1e2>
        goto icmperr;
 800c2dc:	bf00      	nop
 800c2de:	e002      	b.n	800c2e6 <icmp_input+0x1e2>
          goto icmperr;
 800c2e0:	bf00      	nop
 800c2e2:	e000      	b.n	800c2e6 <icmp_input+0x1e2>
          goto icmperr;
 800c2e4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f7f8 fc7a 	bl	8004be0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c2ec:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800c2ee:	3728      	adds	r7, #40	; 0x28
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}
 800c2f4:	20003358 	.word	0x20003358
 800c2f8:	2000336c 	.word	0x2000336c
 800c2fc:	08011324 	.word	0x08011324
 800c300:	0801135c 	.word	0x0801135c
 800c304:	08011394 	.word	0x08011394
 800c308:	080113bc 	.word	0x080113bc

0800c30c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b082      	sub	sp, #8
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	460b      	mov	r3, r1
 800c316:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800c318:	78fb      	ldrb	r3, [r7, #3]
 800c31a:	461a      	mov	r2, r3
 800c31c:	2103      	movs	r1, #3
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f000 f814 	bl	800c34c <icmp_send_response>
}
 800c324:	bf00      	nop
 800c326:	3708      	adds	r7, #8
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	460b      	mov	r3, r1
 800c336:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800c338:	78fb      	ldrb	r3, [r7, #3]
 800c33a:	461a      	mov	r2, r3
 800c33c:	210b      	movs	r1, #11
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f000 f804 	bl	800c34c <icmp_send_response>
}
 800c344:	bf00      	nop
 800c346:	3708      	adds	r7, #8
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}

0800c34c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b08c      	sub	sp, #48	; 0x30
 800c350:	af04      	add	r7, sp, #16
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	460b      	mov	r3, r1
 800c356:	70fb      	strb	r3, [r7, #3]
 800c358:	4613      	mov	r3, r2
 800c35a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800c35c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c360:	2124      	movs	r1, #36	; 0x24
 800c362:	2022      	movs	r0, #34	; 0x22
 800c364:	f7f8 f958 	bl	8004618 <pbuf_alloc>
 800c368:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800c36a:	69fb      	ldr	r3, [r7, #28]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d04c      	beq.n	800c40a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800c370:	69fb      	ldr	r3, [r7, #28]
 800c372:	895b      	ldrh	r3, [r3, #10]
 800c374:	2b23      	cmp	r3, #35	; 0x23
 800c376:	d806      	bhi.n	800c386 <icmp_send_response+0x3a>
 800c378:	4b26      	ldr	r3, [pc, #152]	; (800c414 <icmp_send_response+0xc8>)
 800c37a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c37e:	4926      	ldr	r1, [pc, #152]	; (800c418 <icmp_send_response+0xcc>)
 800c380:	4826      	ldr	r0, [pc, #152]	; (800c41c <icmp_send_response+0xd0>)
 800c382:	f001 fb27 	bl	800d9d4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800c38c:	69fb      	ldr	r3, [r7, #28]
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	78fa      	ldrb	r2, [r7, #3]
 800c396:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	78ba      	ldrb	r2, [r7, #2]
 800c39c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	711a      	strb	r2, [r3, #4]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	719a      	strb	r2, [r3, #6]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800c3b2:	69fb      	ldr	r3, [r7, #28]
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	f103 0008 	add.w	r0, r3, #8
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	685b      	ldr	r3, [r3, #4]
 800c3be:	221c      	movs	r2, #28
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	f001 fad7 	bl	800d974 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800c3c6:	69bb      	ldr	r3, [r7, #24]
 800c3c8:	68db      	ldr	r3, [r3, #12]
 800c3ca:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800c3cc:	f107 030c 	add.w	r3, r7, #12
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f000 f825 	bl	800c420 <ip4_route>
 800c3d6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d011      	beq.n	800c402 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	709a      	strb	r2, [r3, #2]
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800c3e8:	f107 020c 	add.w	r2, r7, #12
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	9302      	str	r3, [sp, #8]
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	9301      	str	r3, [sp, #4]
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	9300      	str	r3, [sp, #0]
 800c3f8:	23ff      	movs	r3, #255	; 0xff
 800c3fa:	2100      	movs	r1, #0
 800c3fc:	69f8      	ldr	r0, [r7, #28]
 800c3fe:	f000 f9cd 	bl	800c79c <ip4_output_if>
  }
  pbuf_free(q);
 800c402:	69f8      	ldr	r0, [r7, #28]
 800c404:	f7f8 fbec 	bl	8004be0 <pbuf_free>
 800c408:	e000      	b.n	800c40c <icmp_send_response+0xc0>
    return;
 800c40a:	bf00      	nop
}
 800c40c:	3720      	adds	r7, #32
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
 800c412:	bf00      	nop
 800c414:	08011324 	.word	0x08011324
 800c418:	080113f0 	.word	0x080113f0
 800c41c:	08011394 	.word	0x08011394

0800c420 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800c420:	b480      	push	{r7}
 800c422:	b085      	sub	sp, #20
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800c428:	4b33      	ldr	r3, [pc, #204]	; (800c4f8 <ip4_route+0xd8>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	60fb      	str	r3, [r7, #12]
 800c42e:	e036      	b.n	800c49e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c436:	f003 0301 	and.w	r3, r3, #1
 800c43a:	b2db      	uxtb	r3, r3
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d02b      	beq.n	800c498 <ip4_route+0x78>
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c446:	089b      	lsrs	r3, r3, #2
 800c448:	f003 0301 	and.w	r3, r3, #1
 800c44c:	b2db      	uxtb	r3, r3
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d022      	beq.n	800c498 <ip4_route+0x78>
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	3304      	adds	r3, #4
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d01d      	beq.n	800c498 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681a      	ldr	r2, [r3, #0]
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	3304      	adds	r3, #4
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	405a      	eors	r2, r3
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	3308      	adds	r3, #8
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	4013      	ands	r3, r2
 800c470:	2b00      	cmp	r3, #0
 800c472:	d101      	bne.n	800c478 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	e038      	b.n	800c4ea <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c47e:	f003 0302 	and.w	r3, r3, #2
 800c482:	2b00      	cmp	r3, #0
 800c484:	d108      	bne.n	800c498 <ip4_route+0x78>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681a      	ldr	r2, [r3, #0]
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	330c      	adds	r3, #12
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	429a      	cmp	r2, r3
 800c492:	d101      	bne.n	800c498 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	e028      	b.n	800c4ea <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	60fb      	str	r3, [r7, #12]
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d1c5      	bne.n	800c430 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c4a4:	4b15      	ldr	r3, [pc, #84]	; (800c4fc <ip4_route+0xdc>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d01a      	beq.n	800c4e2 <ip4_route+0xc2>
 800c4ac:	4b13      	ldr	r3, [pc, #76]	; (800c4fc <ip4_route+0xdc>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c4b4:	f003 0301 	and.w	r3, r3, #1
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d012      	beq.n	800c4e2 <ip4_route+0xc2>
 800c4bc:	4b0f      	ldr	r3, [pc, #60]	; (800c4fc <ip4_route+0xdc>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c4c4:	f003 0304 	and.w	r3, r3, #4
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d00a      	beq.n	800c4e2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800c4cc:	4b0b      	ldr	r3, [pc, #44]	; (800c4fc <ip4_route+0xdc>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	3304      	adds	r3, #4
 800c4d2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d004      	beq.n	800c4e2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	2b7f      	cmp	r3, #127	; 0x7f
 800c4e0:	d101      	bne.n	800c4e6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	e001      	b.n	800c4ea <ip4_route+0xca>
  }

  return netif_default;
 800c4e6:	4b05      	ldr	r3, [pc, #20]	; (800c4fc <ip4_route+0xdc>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3714      	adds	r7, #20
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr
 800c4f6:	bf00      	nop
 800c4f8:	20008a4c 	.word	0x20008a4c
 800c4fc:	20008a50 	.word	0x20008a50

0800c500 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b082      	sub	sp, #8
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c50e:	f003 0301 	and.w	r3, r3, #1
 800c512:	b2db      	uxtb	r3, r3
 800c514:	2b00      	cmp	r3, #0
 800c516:	d016      	beq.n	800c546 <ip4_input_accept+0x46>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	3304      	adds	r3, #4
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d011      	beq.n	800c546 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c522:	4b0b      	ldr	r3, [pc, #44]	; (800c550 <ip4_input_accept+0x50>)
 800c524:	695a      	ldr	r2, [r3, #20]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	3304      	adds	r3, #4
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d008      	beq.n	800c542 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800c530:	4b07      	ldr	r3, [pc, #28]	; (800c550 <ip4_input_accept+0x50>)
 800c532:	695b      	ldr	r3, [r3, #20]
 800c534:	6879      	ldr	r1, [r7, #4]
 800c536:	4618      	mov	r0, r3
 800c538:	f000 fa08 	bl	800c94c <ip4_addr_isbroadcast_u32>
 800c53c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d001      	beq.n	800c546 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800c542:	2301      	movs	r3, #1
 800c544:	e000      	b.n	800c548 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800c546:	2300      	movs	r3, #0
}
 800c548:	4618      	mov	r0, r3
 800c54a:	3708      	adds	r7, #8
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}
 800c550:	20003358 	.word	0x20003358

0800c554 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b086      	sub	sp, #24
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	685b      	ldr	r3, [r3, #4]
 800c562:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	091b      	lsrs	r3, r3, #4
 800c56a:	b2db      	uxtb	r3, r3
 800c56c:	2b04      	cmp	r3, #4
 800c56e:	d004      	beq.n	800c57a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f7f8 fb35 	bl	8004be0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800c576:	2300      	movs	r3, #0
 800c578:	e107      	b.n	800c78a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	f003 030f 	and.w	r3, r3, #15
 800c582:	b2db      	uxtb	r3, r3
 800c584:	009b      	lsls	r3, r3, #2
 800c586:	b2db      	uxtb	r3, r3
 800c588:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800c58a:	697b      	ldr	r3, [r7, #20]
 800c58c:	885b      	ldrh	r3, [r3, #2]
 800c58e:	b29b      	uxth	r3, r3
 800c590:	4618      	mov	r0, r3
 800c592:	f7f7 f871 	bl	8003678 <lwip_htons>
 800c596:	4603      	mov	r3, r0
 800c598:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	891b      	ldrh	r3, [r3, #8]
 800c59e:	89ba      	ldrh	r2, [r7, #12]
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d204      	bcs.n	800c5ae <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800c5a4:	89bb      	ldrh	r3, [r7, #12]
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f7f8 f993 	bl	80048d4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	895b      	ldrh	r3, [r3, #10]
 800c5b2:	89fa      	ldrh	r2, [r7, #14]
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d807      	bhi.n	800c5c8 <ip4_input+0x74>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	891b      	ldrh	r3, [r3, #8]
 800c5bc:	89ba      	ldrh	r2, [r7, #12]
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	d802      	bhi.n	800c5c8 <ip4_input+0x74>
 800c5c2:	89fb      	ldrh	r3, [r7, #14]
 800c5c4:	2b13      	cmp	r3, #19
 800c5c6:	d804      	bhi.n	800c5d2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f7f8 fb09 	bl	8004be0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	e0db      	b.n	800c78a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	691b      	ldr	r3, [r3, #16]
 800c5d6:	4a6f      	ldr	r2, [pc, #444]	; (800c794 <ip4_input+0x240>)
 800c5d8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	68db      	ldr	r3, [r3, #12]
 800c5de:	4a6d      	ldr	r2, [pc, #436]	; (800c794 <ip4_input+0x240>)
 800c5e0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c5e2:	4b6c      	ldr	r3, [pc, #432]	; (800c794 <ip4_input+0x240>)
 800c5e4:	695b      	ldr	r3, [r3, #20]
 800c5e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c5ea:	2be0      	cmp	r3, #224	; 0xe0
 800c5ec:	d112      	bne.n	800c614 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c5f4:	f003 0301 	and.w	r3, r3, #1
 800c5f8:	b2db      	uxtb	r3, r3
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d007      	beq.n	800c60e <ip4_input+0xba>
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	3304      	adds	r3, #4
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d002      	beq.n	800c60e <ip4_input+0xba>
      netif = inp;
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	613b      	str	r3, [r7, #16]
 800c60c:	e02a      	b.n	800c664 <ip4_input+0x110>
    } else {
      netif = NULL;
 800c60e:	2300      	movs	r3, #0
 800c610:	613b      	str	r3, [r7, #16]
 800c612:	e027      	b.n	800c664 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800c614:	6838      	ldr	r0, [r7, #0]
 800c616:	f7ff ff73 	bl	800c500 <ip4_input_accept>
 800c61a:	4603      	mov	r3, r0
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d002      	beq.n	800c626 <ip4_input+0xd2>
      netif = inp;
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	613b      	str	r3, [r7, #16]
 800c624:	e01e      	b.n	800c664 <ip4_input+0x110>
    } else {
      netif = NULL;
 800c626:	2300      	movs	r3, #0
 800c628:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800c62a:	4b5a      	ldr	r3, [pc, #360]	; (800c794 <ip4_input+0x240>)
 800c62c:	695b      	ldr	r3, [r3, #20]
 800c62e:	b2db      	uxtb	r3, r3
 800c630:	2b7f      	cmp	r3, #127	; 0x7f
 800c632:	d017      	beq.n	800c664 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800c634:	4b58      	ldr	r3, [pc, #352]	; (800c798 <ip4_input+0x244>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	613b      	str	r3, [r7, #16]
 800c63a:	e00e      	b.n	800c65a <ip4_input+0x106>
          if (netif == inp) {
 800c63c:	693a      	ldr	r2, [r7, #16]
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	429a      	cmp	r2, r3
 800c642:	d006      	beq.n	800c652 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800c644:	6938      	ldr	r0, [r7, #16]
 800c646:	f7ff ff5b 	bl	800c500 <ip4_input_accept>
 800c64a:	4603      	mov	r3, r0
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d108      	bne.n	800c662 <ip4_input+0x10e>
 800c650:	e000      	b.n	800c654 <ip4_input+0x100>
            continue;
 800c652:	bf00      	nop
        NETIF_FOREACH(netif) {
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	613b      	str	r3, [r7, #16]
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d1ed      	bne.n	800c63c <ip4_input+0xe8>
 800c660:	e000      	b.n	800c664 <ip4_input+0x110>
            break;
 800c662:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c664:	4b4b      	ldr	r3, [pc, #300]	; (800c794 <ip4_input+0x240>)
 800c666:	691b      	ldr	r3, [r3, #16]
 800c668:	6839      	ldr	r1, [r7, #0]
 800c66a:	4618      	mov	r0, r3
 800c66c:	f000 f96e 	bl	800c94c <ip4_addr_isbroadcast_u32>
 800c670:	4603      	mov	r3, r0
 800c672:	2b00      	cmp	r3, #0
 800c674:	d105      	bne.n	800c682 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800c676:	4b47      	ldr	r3, [pc, #284]	; (800c794 <ip4_input+0x240>)
 800c678:	691b      	ldr	r3, [r3, #16]
 800c67a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c67e:	2be0      	cmp	r3, #224	; 0xe0
 800c680:	d104      	bne.n	800c68c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f7f8 faac 	bl	8004be0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800c688:	2300      	movs	r3, #0
 800c68a:	e07e      	b.n	800c78a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d104      	bne.n	800c69c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f7f8 faa4 	bl	8004be0 <pbuf_free>
    return ERR_OK;
 800c698:	2300      	movs	r3, #0
 800c69a:	e076      	b.n	800c78a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	88db      	ldrh	r3, [r3, #6]
 800c6a0:	b29b      	uxth	r3, r3
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800c6a8:	4013      	ands	r3, r2
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d00b      	beq.n	800c6c6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f000 fd24 	bl	800d0fc <ip4_reass>
 800c6b4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d101      	bne.n	800c6c0 <ip4_input+0x16c>
      return ERR_OK;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	e064      	b.n	800c78a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800c6c6:	4a33      	ldr	r2, [pc, #204]	; (800c794 <ip4_input+0x240>)
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800c6cc:	4a31      	ldr	r2, [pc, #196]	; (800c794 <ip4_input+0x240>)
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800c6d2:	4a30      	ldr	r2, [pc, #192]	; (800c794 <ip4_input+0x240>)
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	f003 030f 	and.w	r3, r3, #15
 800c6e0:	b2db      	uxtb	r3, r3
 800c6e2:	009b      	lsls	r3, r3, #2
 800c6e4:	b2db      	uxtb	r3, r3
 800c6e6:	b29a      	uxth	r2, r3
 800c6e8:	4b2a      	ldr	r3, [pc, #168]	; (800c794 <ip4_input+0x240>)
 800c6ea:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800c6ec:	89fb      	ldrh	r3, [r7, #14]
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f7f8 f9ef 	bl	8004ad4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	7a5b      	ldrb	r3, [r3, #9]
 800c6fa:	2b11      	cmp	r3, #17
 800c6fc:	d006      	beq.n	800c70c <ip4_input+0x1b8>
 800c6fe:	2b11      	cmp	r3, #17
 800c700:	dc13      	bgt.n	800c72a <ip4_input+0x1d6>
 800c702:	2b01      	cmp	r3, #1
 800c704:	d00c      	beq.n	800c720 <ip4_input+0x1cc>
 800c706:	2b06      	cmp	r3, #6
 800c708:	d005      	beq.n	800c716 <ip4_input+0x1c2>
 800c70a:	e00e      	b.n	800c72a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800c70c:	6839      	ldr	r1, [r7, #0]
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f7fe f8e6 	bl	800a8e0 <udp_input>
        break;
 800c714:	e026      	b.n	800c764 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800c716:	6839      	ldr	r1, [r7, #0]
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f7fa f92b 	bl	8006974 <tcp_input>
        break;
 800c71e:	e021      	b.n	800c764 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800c720:	6839      	ldr	r1, [r7, #0]
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f7ff fcee 	bl	800c104 <icmp_input>
        break;
 800c728:	e01c      	b.n	800c764 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c72a:	4b1a      	ldr	r3, [pc, #104]	; (800c794 <ip4_input+0x240>)
 800c72c:	695b      	ldr	r3, [r3, #20]
 800c72e:	6939      	ldr	r1, [r7, #16]
 800c730:	4618      	mov	r0, r3
 800c732:	f000 f90b 	bl	800c94c <ip4_addr_isbroadcast_u32>
 800c736:	4603      	mov	r3, r0
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d10f      	bne.n	800c75c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c73c:	4b15      	ldr	r3, [pc, #84]	; (800c794 <ip4_input+0x240>)
 800c73e:	695b      	ldr	r3, [r3, #20]
 800c740:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c744:	2be0      	cmp	r3, #224	; 0xe0
 800c746:	d009      	beq.n	800c75c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800c748:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c74c:	4619      	mov	r1, r3
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f7f8 fa33 	bl	8004bba <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800c754:	2102      	movs	r1, #2
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f7ff fdd8 	bl	800c30c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f7f8 fa3f 	bl	8004be0 <pbuf_free>
        break;
 800c762:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800c764:	4b0b      	ldr	r3, [pc, #44]	; (800c794 <ip4_input+0x240>)
 800c766:	2200      	movs	r2, #0
 800c768:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800c76a:	4b0a      	ldr	r3, [pc, #40]	; (800c794 <ip4_input+0x240>)
 800c76c:	2200      	movs	r2, #0
 800c76e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800c770:	4b08      	ldr	r3, [pc, #32]	; (800c794 <ip4_input+0x240>)
 800c772:	2200      	movs	r2, #0
 800c774:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800c776:	4b07      	ldr	r3, [pc, #28]	; (800c794 <ip4_input+0x240>)
 800c778:	2200      	movs	r2, #0
 800c77a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800c77c:	4b05      	ldr	r3, [pc, #20]	; (800c794 <ip4_input+0x240>)
 800c77e:	2200      	movs	r2, #0
 800c780:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800c782:	4b04      	ldr	r3, [pc, #16]	; (800c794 <ip4_input+0x240>)
 800c784:	2200      	movs	r2, #0
 800c786:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800c788:	2300      	movs	r3, #0
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	3718      	adds	r7, #24
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}
 800c792:	bf00      	nop
 800c794:	20003358 	.word	0x20003358
 800c798:	20008a4c 	.word	0x20008a4c

0800c79c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b08a      	sub	sp, #40	; 0x28
 800c7a0:	af04      	add	r7, sp, #16
 800c7a2:	60f8      	str	r0, [r7, #12]
 800c7a4:	60b9      	str	r1, [r7, #8]
 800c7a6:	607a      	str	r2, [r7, #4]
 800c7a8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d009      	beq.n	800c7c8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d003      	beq.n	800c7c2 <ip4_output_if+0x26>
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d102      	bne.n	800c7c8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800c7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c4:	3304      	adds	r3, #4
 800c7c6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800c7c8:	78fa      	ldrb	r2, [r7, #3]
 800c7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7cc:	9302      	str	r3, [sp, #8]
 800c7ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c7d2:	9301      	str	r3, [sp, #4]
 800c7d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c7d8:	9300      	str	r3, [sp, #0]
 800c7da:	4613      	mov	r3, r2
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	6979      	ldr	r1, [r7, #20]
 800c7e0:	68f8      	ldr	r0, [r7, #12]
 800c7e2:	f000 f805 	bl	800c7f0 <ip4_output_if_src>
 800c7e6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3718      	adds	r7, #24
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b088      	sub	sp, #32
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	60f8      	str	r0, [r7, #12]
 800c7f8:	60b9      	str	r1, [r7, #8]
 800c7fa:	607a      	str	r2, [r7, #4]
 800c7fc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	7b9b      	ldrb	r3, [r3, #14]
 800c802:	2b01      	cmp	r3, #1
 800c804:	d006      	beq.n	800c814 <ip4_output_if_src+0x24>
 800c806:	4b4b      	ldr	r3, [pc, #300]	; (800c934 <ip4_output_if_src+0x144>)
 800c808:	f44f 7255 	mov.w	r2, #852	; 0x354
 800c80c:	494a      	ldr	r1, [pc, #296]	; (800c938 <ip4_output_if_src+0x148>)
 800c80e:	484b      	ldr	r0, [pc, #300]	; (800c93c <ip4_output_if_src+0x14c>)
 800c810:	f001 f8e0 	bl	800d9d4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d060      	beq.n	800c8dc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800c81a:	2314      	movs	r3, #20
 800c81c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800c81e:	2114      	movs	r1, #20
 800c820:	68f8      	ldr	r0, [r7, #12]
 800c822:	f7f8 f947 	bl	8004ab4 <pbuf_add_header>
 800c826:	4603      	mov	r3, r0
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d002      	beq.n	800c832 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800c82c:	f06f 0301 	mvn.w	r3, #1
 800c830:	e07c      	b.n	800c92c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	685b      	ldr	r3, [r3, #4]
 800c836:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	895b      	ldrh	r3, [r3, #10]
 800c83c:	2b13      	cmp	r3, #19
 800c83e:	d806      	bhi.n	800c84e <ip4_output_if_src+0x5e>
 800c840:	4b3c      	ldr	r3, [pc, #240]	; (800c934 <ip4_output_if_src+0x144>)
 800c842:	f44f 7262 	mov.w	r2, #904	; 0x388
 800c846:	493e      	ldr	r1, [pc, #248]	; (800c940 <ip4_output_if_src+0x150>)
 800c848:	483c      	ldr	r0, [pc, #240]	; (800c93c <ip4_output_if_src+0x14c>)
 800c84a:	f001 f8c3 	bl	800d9d4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800c84e:	69fb      	ldr	r3, [r7, #28]
 800c850:	78fa      	ldrb	r2, [r7, #3]
 800c852:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800c854:	69fb      	ldr	r3, [r7, #28]
 800c856:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800c85a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681a      	ldr	r2, [r3, #0]
 800c860:	69fb      	ldr	r3, [r7, #28]
 800c862:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800c864:	8b7b      	ldrh	r3, [r7, #26]
 800c866:	089b      	lsrs	r3, r3, #2
 800c868:	b29b      	uxth	r3, r3
 800c86a:	b2db      	uxtb	r3, r3
 800c86c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c870:	b2da      	uxtb	r2, r3
 800c872:	69fb      	ldr	r3, [r7, #28]
 800c874:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800c876:	69fb      	ldr	r3, [r7, #28]
 800c878:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c87c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	891b      	ldrh	r3, [r3, #8]
 800c882:	4618      	mov	r0, r3
 800c884:	f7f6 fef8 	bl	8003678 <lwip_htons>
 800c888:	4603      	mov	r3, r0
 800c88a:	461a      	mov	r2, r3
 800c88c:	69fb      	ldr	r3, [r7, #28]
 800c88e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800c890:	69fb      	ldr	r3, [r7, #28]
 800c892:	2200      	movs	r2, #0
 800c894:	719a      	strb	r2, [r3, #6]
 800c896:	2200      	movs	r2, #0
 800c898:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800c89a:	4b2a      	ldr	r3, [pc, #168]	; (800c944 <ip4_output_if_src+0x154>)
 800c89c:	881b      	ldrh	r3, [r3, #0]
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7f6 feea 	bl	8003678 <lwip_htons>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	69fb      	ldr	r3, [r7, #28]
 800c8aa:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800c8ac:	4b25      	ldr	r3, [pc, #148]	; (800c944 <ip4_output_if_src+0x154>)
 800c8ae:	881b      	ldrh	r3, [r3, #0]
 800c8b0:	3301      	adds	r3, #1
 800c8b2:	b29a      	uxth	r2, r3
 800c8b4:	4b23      	ldr	r3, [pc, #140]	; (800c944 <ip4_output_if_src+0x154>)
 800c8b6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d104      	bne.n	800c8c8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800c8be:	4b22      	ldr	r3, [pc, #136]	; (800c948 <ip4_output_if_src+0x158>)
 800c8c0:	681a      	ldr	r2, [r3, #0]
 800c8c2:	69fb      	ldr	r3, [r7, #28]
 800c8c4:	60da      	str	r2, [r3, #12]
 800c8c6:	e003      	b.n	800c8d0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	681a      	ldr	r2, [r3, #0]
 800c8cc:	69fb      	ldr	r3, [r7, #28]
 800c8ce:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800c8d0:	69fb      	ldr	r3, [r7, #28]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	729a      	strb	r2, [r3, #10]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	72da      	strb	r2, [r3, #11]
 800c8da:	e00f      	b.n	800c8fc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	895b      	ldrh	r3, [r3, #10]
 800c8e0:	2b13      	cmp	r3, #19
 800c8e2:	d802      	bhi.n	800c8ea <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800c8e4:	f06f 0301 	mvn.w	r3, #1
 800c8e8:	e020      	b.n	800c92c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800c8f0:	69fb      	ldr	r3, [r7, #28]
 800c8f2:	691b      	ldr	r3, [r3, #16]
 800c8f4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800c8f6:	f107 0314 	add.w	r3, r7, #20
 800c8fa:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800c8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c900:	2b00      	cmp	r3, #0
 800c902:	d00c      	beq.n	800c91e <ip4_output_if_src+0x12e>
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	891a      	ldrh	r2, [r3, #8]
 800c908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c90a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d906      	bls.n	800c91e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800c910:	687a      	ldr	r2, [r7, #4]
 800c912:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c914:	68f8      	ldr	r0, [r7, #12]
 800c916:	f000 fddf 	bl	800d4d8 <ip4_frag>
 800c91a:	4603      	mov	r3, r0
 800c91c:	e006      	b.n	800c92c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800c91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c920:	695b      	ldr	r3, [r3, #20]
 800c922:	687a      	ldr	r2, [r7, #4]
 800c924:	68f9      	ldr	r1, [r7, #12]
 800c926:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c928:	4798      	blx	r3
 800c92a:	4603      	mov	r3, r0
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	3720      	adds	r7, #32
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}
 800c934:	0801141c 	.word	0x0801141c
 800c938:	08011450 	.word	0x08011450
 800c93c:	0801145c 	.word	0x0801145c
 800c940:	08011484 	.word	0x08011484
 800c944:	200001fe 	.word	0x200001fe
 800c948:	08011850 	.word	0x08011850

0800c94c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b085      	sub	sp, #20
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c960:	d002      	beq.n	800c968 <ip4_addr_isbroadcast_u32+0x1c>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d101      	bne.n	800c96c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800c968:	2301      	movs	r3, #1
 800c96a:	e02a      	b.n	800c9c2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c972:	f003 0302 	and.w	r3, r3, #2
 800c976:	2b00      	cmp	r3, #0
 800c978:	d101      	bne.n	800c97e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800c97a:	2300      	movs	r3, #0
 800c97c:	e021      	b.n	800c9c2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	3304      	adds	r3, #4
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	687a      	ldr	r2, [r7, #4]
 800c986:	429a      	cmp	r2, r3
 800c988:	d101      	bne.n	800c98e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800c98a:	2300      	movs	r3, #0
 800c98c:	e019      	b.n	800c9c2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800c98e:	68fa      	ldr	r2, [r7, #12]
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	3304      	adds	r3, #4
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	405a      	eors	r2, r3
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	3308      	adds	r3, #8
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	4013      	ands	r3, r2
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d10d      	bne.n	800c9c0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	3308      	adds	r3, #8
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	43da      	mvns	r2, r3
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	3308      	adds	r3, #8
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d101      	bne.n	800c9c0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800c9bc:	2301      	movs	r3, #1
 800c9be:	e000      	b.n	800c9c2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800c9c0:	2300      	movs	r3, #0
  }
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3714      	adds	r7, #20
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9cc:	4770      	bx	lr
	...

0800c9d0 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b082      	sub	sp, #8
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800c9d8:	2210      	movs	r2, #16
 800c9da:	4904      	ldr	r1, [pc, #16]	; (800c9ec <ip4addr_ntoa+0x1c>)
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f000 f807 	bl	800c9f0 <ip4addr_ntoa_r>
 800c9e2:	4603      	mov	r3, r0
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3708      	adds	r7, #8
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}
 800c9ec:	20000200 	.word	0x20000200

0800c9f0 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b08d      	sub	sp, #52	; 0x34
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	60f8      	str	r0, [r7, #12]
 800c9f8:	60b9      	str	r1, [r7, #8]
 800c9fa:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 800ca0a:	f107 0318 	add.w	r3, r7, #24
 800ca0e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800ca10:	2300      	movs	r3, #0
 800ca12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca16:	e059      	b.n	800cacc <ip4addr_ntoa_r+0xdc>
    i = 0;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 800ca1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca20:	781a      	ldrb	r2, [r3, #0]
 800ca22:	4b33      	ldr	r3, [pc, #204]	; (800caf0 <ip4addr_ntoa_r+0x100>)
 800ca24:	fba3 1302 	umull	r1, r3, r3, r2
 800ca28:	08d9      	lsrs	r1, r3, #3
 800ca2a:	460b      	mov	r3, r1
 800ca2c:	009b      	lsls	r3, r3, #2
 800ca2e:	440b      	add	r3, r1
 800ca30:	005b      	lsls	r3, r3, #1
 800ca32:	1ad3      	subs	r3, r2, r3
 800ca34:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800ca36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca38:	781b      	ldrb	r3, [r3, #0]
 800ca3a:	4a2d      	ldr	r2, [pc, #180]	; (800caf0 <ip4addr_ntoa_r+0x100>)
 800ca3c:	fba2 2303 	umull	r2, r3, r2, r3
 800ca40:	08db      	lsrs	r3, r3, #3
 800ca42:	b2da      	uxtb	r2, r3
 800ca44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca46:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800ca48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ca4c:	1c5a      	adds	r2, r3, #1
 800ca4e:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800ca52:	4619      	mov	r1, r3
 800ca54:	7ffb      	ldrb	r3, [r7, #31]
 800ca56:	3330      	adds	r3, #48	; 0x30
 800ca58:	b2da      	uxtb	r2, r3
 800ca5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ca5e:	440b      	add	r3, r1
 800ca60:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800ca64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d1d8      	bne.n	800ca1e <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800ca6c:	e012      	b.n	800ca94 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 800ca6e:	6a3b      	ldr	r3, [r7, #32]
 800ca70:	1c5a      	adds	r2, r3, #1
 800ca72:	623a      	str	r2, [r7, #32]
 800ca74:	687a      	ldr	r2, [r7, #4]
 800ca76:	429a      	cmp	r2, r3
 800ca78:	dc01      	bgt.n	800ca7e <ip4addr_ntoa_r+0x8e>
        return NULL;
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	e031      	b.n	800cae2 <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 800ca7e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ca82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca84:	1c59      	adds	r1, r3, #1
 800ca86:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ca88:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800ca8c:	440a      	add	r2, r1
 800ca8e:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800ca92:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800ca94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ca98:	1e5a      	subs	r2, r3, #1
 800ca9a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d1e5      	bne.n	800ca6e <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800caa2:	6a3b      	ldr	r3, [r7, #32]
 800caa4:	1c5a      	adds	r2, r3, #1
 800caa6:	623a      	str	r2, [r7, #32]
 800caa8:	687a      	ldr	r2, [r7, #4]
 800caaa:	429a      	cmp	r2, r3
 800caac:	dc01      	bgt.n	800cab2 <ip4addr_ntoa_r+0xc2>
      return NULL;
 800caae:	2300      	movs	r3, #0
 800cab0:	e017      	b.n	800cae2 <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 800cab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab4:	1c5a      	adds	r2, r3, #1
 800cab6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cab8:	222e      	movs	r2, #46	; 0x2e
 800caba:	701a      	strb	r2, [r3, #0]
    ap++;
 800cabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cabe:	3301      	adds	r3, #1
 800cac0:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800cac2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cac6:	3301      	adds	r3, #1
 800cac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cacc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cad0:	2b03      	cmp	r3, #3
 800cad2:	d9a1      	bls.n	800ca18 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800cad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad6:	3b01      	subs	r3, #1
 800cad8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cadc:	2200      	movs	r2, #0
 800cade:	701a      	strb	r2, [r3, #0]
  return buf;
 800cae0:	68bb      	ldr	r3, [r7, #8]
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3734      	adds	r7, #52	; 0x34
 800cae6:	46bd      	mov	sp, r7
 800cae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caec:	4770      	bx	lr
 800caee:	bf00      	nop
 800caf0:	cccccccd 	.word	0xcccccccd

0800caf4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800cafa:	2300      	movs	r3, #0
 800cafc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800cafe:	4b12      	ldr	r3, [pc, #72]	; (800cb48 <ip_reass_tmr+0x54>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800cb04:	e018      	b.n	800cb38 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	7fdb      	ldrb	r3, [r3, #31]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d00b      	beq.n	800cb26 <ip_reass_tmr+0x32>
      r->timer--;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	7fdb      	ldrb	r3, [r3, #31]
 800cb12:	3b01      	subs	r3, #1
 800cb14:	b2da      	uxtb	r2, r3
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	60fb      	str	r3, [r7, #12]
 800cb24:	e008      	b.n	800cb38 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800cb30:	68b9      	ldr	r1, [r7, #8]
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f000 f80a 	bl	800cb4c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d1e3      	bne.n	800cb06 <ip_reass_tmr+0x12>
    }
  }
}
 800cb3e:	bf00      	nop
 800cb40:	bf00      	nop
 800cb42:	3710      	adds	r7, #16
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}
 800cb48:	20000210 	.word	0x20000210

0800cb4c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b088      	sub	sp, #32
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800cb56:	2300      	movs	r3, #0
 800cb58:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800cb5a:	683a      	ldr	r2, [r7, #0]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d105      	bne.n	800cb6e <ip_reass_free_complete_datagram+0x22>
 800cb62:	4b45      	ldr	r3, [pc, #276]	; (800cc78 <ip_reass_free_complete_datagram+0x12c>)
 800cb64:	22ab      	movs	r2, #171	; 0xab
 800cb66:	4945      	ldr	r1, [pc, #276]	; (800cc7c <ip_reass_free_complete_datagram+0x130>)
 800cb68:	4845      	ldr	r0, [pc, #276]	; (800cc80 <ip_reass_free_complete_datagram+0x134>)
 800cb6a:	f000 ff33 	bl	800d9d4 <iprintf>
  if (prev != NULL) {
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d00a      	beq.n	800cb8a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	687a      	ldr	r2, [r7, #4]
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d005      	beq.n	800cb8a <ip_reass_free_complete_datagram+0x3e>
 800cb7e:	4b3e      	ldr	r3, [pc, #248]	; (800cc78 <ip_reass_free_complete_datagram+0x12c>)
 800cb80:	22ad      	movs	r2, #173	; 0xad
 800cb82:	4940      	ldr	r1, [pc, #256]	; (800cc84 <ip_reass_free_complete_datagram+0x138>)
 800cb84:	483e      	ldr	r0, [pc, #248]	; (800cc80 <ip_reass_free_complete_datagram+0x134>)
 800cb86:	f000 ff25 	bl	800d9d4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	685b      	ldr	r3, [r3, #4]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	889b      	ldrh	r3, [r3, #4]
 800cb96:	b29b      	uxth	r3, r3
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d12a      	bne.n	800cbf2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	685b      	ldr	r3, [r3, #4]
 800cba0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	681a      	ldr	r2, [r3, #0]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800cbaa:	69bb      	ldr	r3, [r7, #24]
 800cbac:	6858      	ldr	r0, [r3, #4]
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	3308      	adds	r3, #8
 800cbb2:	2214      	movs	r2, #20
 800cbb4:	4619      	mov	r1, r3
 800cbb6:	f000 fedd 	bl	800d974 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800cbba:	2101      	movs	r1, #1
 800cbbc:	69b8      	ldr	r0, [r7, #24]
 800cbbe:	f7ff fbb5 	bl	800c32c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800cbc2:	69b8      	ldr	r0, [r7, #24]
 800cbc4:	f7f8 f894 	bl	8004cf0 <pbuf_clen>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800cbcc:	8bfa      	ldrh	r2, [r7, #30]
 800cbce:	8a7b      	ldrh	r3, [r7, #18]
 800cbd0:	4413      	add	r3, r2
 800cbd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbd6:	db05      	blt.n	800cbe4 <ip_reass_free_complete_datagram+0x98>
 800cbd8:	4b27      	ldr	r3, [pc, #156]	; (800cc78 <ip_reass_free_complete_datagram+0x12c>)
 800cbda:	22bc      	movs	r2, #188	; 0xbc
 800cbdc:	492a      	ldr	r1, [pc, #168]	; (800cc88 <ip_reass_free_complete_datagram+0x13c>)
 800cbde:	4828      	ldr	r0, [pc, #160]	; (800cc80 <ip_reass_free_complete_datagram+0x134>)
 800cbe0:	f000 fef8 	bl	800d9d4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800cbe4:	8bfa      	ldrh	r2, [r7, #30]
 800cbe6:	8a7b      	ldrh	r3, [r7, #18]
 800cbe8:	4413      	add	r3, r2
 800cbea:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800cbec:	69b8      	ldr	r0, [r7, #24]
 800cbee:	f7f7 fff7 	bl	8004be0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	685b      	ldr	r3, [r3, #4]
 800cbf6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800cbf8:	e01f      	b.n	800cc3a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800cbfa:	69bb      	ldr	r3, [r7, #24]
 800cbfc:	685b      	ldr	r3, [r3, #4]
 800cbfe:	617b      	str	r3, [r7, #20]
    pcur = p;
 800cc00:	69bb      	ldr	r3, [r7, #24]
 800cc02:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800cc0a:	68f8      	ldr	r0, [r7, #12]
 800cc0c:	f7f8 f870 	bl	8004cf0 <pbuf_clen>
 800cc10:	4603      	mov	r3, r0
 800cc12:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800cc14:	8bfa      	ldrh	r2, [r7, #30]
 800cc16:	8a7b      	ldrh	r3, [r7, #18]
 800cc18:	4413      	add	r3, r2
 800cc1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc1e:	db05      	blt.n	800cc2c <ip_reass_free_complete_datagram+0xe0>
 800cc20:	4b15      	ldr	r3, [pc, #84]	; (800cc78 <ip_reass_free_complete_datagram+0x12c>)
 800cc22:	22cc      	movs	r2, #204	; 0xcc
 800cc24:	4918      	ldr	r1, [pc, #96]	; (800cc88 <ip_reass_free_complete_datagram+0x13c>)
 800cc26:	4816      	ldr	r0, [pc, #88]	; (800cc80 <ip_reass_free_complete_datagram+0x134>)
 800cc28:	f000 fed4 	bl	800d9d4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800cc2c:	8bfa      	ldrh	r2, [r7, #30]
 800cc2e:	8a7b      	ldrh	r3, [r7, #18]
 800cc30:	4413      	add	r3, r2
 800cc32:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800cc34:	68f8      	ldr	r0, [r7, #12]
 800cc36:	f7f7 ffd3 	bl	8004be0 <pbuf_free>
  while (p != NULL) {
 800cc3a:	69bb      	ldr	r3, [r7, #24]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d1dc      	bne.n	800cbfa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800cc40:	6839      	ldr	r1, [r7, #0]
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f000 f8c2 	bl	800cdcc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800cc48:	4b10      	ldr	r3, [pc, #64]	; (800cc8c <ip_reass_free_complete_datagram+0x140>)
 800cc4a:	881b      	ldrh	r3, [r3, #0]
 800cc4c:	8bfa      	ldrh	r2, [r7, #30]
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d905      	bls.n	800cc5e <ip_reass_free_complete_datagram+0x112>
 800cc52:	4b09      	ldr	r3, [pc, #36]	; (800cc78 <ip_reass_free_complete_datagram+0x12c>)
 800cc54:	22d2      	movs	r2, #210	; 0xd2
 800cc56:	490e      	ldr	r1, [pc, #56]	; (800cc90 <ip_reass_free_complete_datagram+0x144>)
 800cc58:	4809      	ldr	r0, [pc, #36]	; (800cc80 <ip_reass_free_complete_datagram+0x134>)
 800cc5a:	f000 febb 	bl	800d9d4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800cc5e:	4b0b      	ldr	r3, [pc, #44]	; (800cc8c <ip_reass_free_complete_datagram+0x140>)
 800cc60:	881a      	ldrh	r2, [r3, #0]
 800cc62:	8bfb      	ldrh	r3, [r7, #30]
 800cc64:	1ad3      	subs	r3, r2, r3
 800cc66:	b29a      	uxth	r2, r3
 800cc68:	4b08      	ldr	r3, [pc, #32]	; (800cc8c <ip_reass_free_complete_datagram+0x140>)
 800cc6a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800cc6c:	8bfb      	ldrh	r3, [r7, #30]
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3720      	adds	r7, #32
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
 800cc76:	bf00      	nop
 800cc78:	080114b4 	.word	0x080114b4
 800cc7c:	080114f0 	.word	0x080114f0
 800cc80:	080114fc 	.word	0x080114fc
 800cc84:	08011524 	.word	0x08011524
 800cc88:	08011538 	.word	0x08011538
 800cc8c:	20000214 	.word	0x20000214
 800cc90:	08011558 	.word	0x08011558

0800cc94 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b08a      	sub	sp, #40	; 0x28
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800cca2:	2300      	movs	r3, #0
 800cca4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800cca6:	2300      	movs	r3, #0
 800cca8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800ccb2:	4b28      	ldr	r3, [pc, #160]	; (800cd54 <ip_reass_remove_oldest_datagram+0xc0>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ccb8:	e030      	b.n	800cd1c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800ccba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccbc:	695a      	ldr	r2, [r3, #20]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	68db      	ldr	r3, [r3, #12]
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d10c      	bne.n	800cce0 <ip_reass_remove_oldest_datagram+0x4c>
 800ccc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc8:	699a      	ldr	r2, [r3, #24]
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	691b      	ldr	r3, [r3, #16]
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d106      	bne.n	800cce0 <ip_reass_remove_oldest_datagram+0x4c>
 800ccd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd4:	899a      	ldrh	r2, [r3, #12]
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	889b      	ldrh	r3, [r3, #4]
 800ccda:	b29b      	uxth	r3, r3
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d014      	beq.n	800cd0a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800cce0:	693b      	ldr	r3, [r7, #16]
 800cce2:	3301      	adds	r3, #1
 800cce4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800cce6:	6a3b      	ldr	r3, [r7, #32]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d104      	bne.n	800ccf6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800ccec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccee:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ccf0:	69fb      	ldr	r3, [r7, #28]
 800ccf2:	61bb      	str	r3, [r7, #24]
 800ccf4:	e009      	b.n	800cd0a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800ccf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccf8:	7fda      	ldrb	r2, [r3, #31]
 800ccfa:	6a3b      	ldr	r3, [r7, #32]
 800ccfc:	7fdb      	ldrb	r3, [r3, #31]
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d803      	bhi.n	800cd0a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800cd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd04:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800cd06:	69fb      	ldr	r3, [r7, #28]
 800cd08:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800cd0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d001      	beq.n	800cd16 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800cd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd14:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800cd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800cd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d1cb      	bne.n	800ccba <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800cd22:	6a3b      	ldr	r3, [r7, #32]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d008      	beq.n	800cd3a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800cd28:	69b9      	ldr	r1, [r7, #24]
 800cd2a:	6a38      	ldr	r0, [r7, #32]
 800cd2c:	f7ff ff0e 	bl	800cb4c <ip_reass_free_complete_datagram>
 800cd30:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800cd32:	697a      	ldr	r2, [r7, #20]
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	4413      	add	r3, r2
 800cd38:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800cd3a:	697a      	ldr	r2, [r7, #20]
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	da02      	bge.n	800cd48 <ip_reass_remove_oldest_datagram+0xb4>
 800cd42:	693b      	ldr	r3, [r7, #16]
 800cd44:	2b01      	cmp	r3, #1
 800cd46:	dcac      	bgt.n	800cca2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800cd48:	697b      	ldr	r3, [r7, #20]
}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3728      	adds	r7, #40	; 0x28
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}
 800cd52:	bf00      	nop
 800cd54:	20000210 	.word	0x20000210

0800cd58 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800cd62:	2004      	movs	r0, #4
 800cd64:	f7f7 f8de 	bl	8003f24 <memp_malloc>
 800cd68:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d110      	bne.n	800cd92 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800cd70:	6839      	ldr	r1, [r7, #0]
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f7ff ff8e 	bl	800cc94 <ip_reass_remove_oldest_datagram>
 800cd78:	4602      	mov	r2, r0
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	4293      	cmp	r3, r2
 800cd7e:	dc03      	bgt.n	800cd88 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800cd80:	2004      	movs	r0, #4
 800cd82:	f7f7 f8cf 	bl	8003f24 <memp_malloc>
 800cd86:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d101      	bne.n	800cd92 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	e016      	b.n	800cdc0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800cd92:	2220      	movs	r2, #32
 800cd94:	2100      	movs	r1, #0
 800cd96:	68f8      	ldr	r0, [r7, #12]
 800cd98:	f000 fe14 	bl	800d9c4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	220f      	movs	r2, #15
 800cda0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800cda2:	4b09      	ldr	r3, [pc, #36]	; (800cdc8 <ip_reass_enqueue_new_datagram+0x70>)
 800cda4:	681a      	ldr	r2, [r3, #0]
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800cdaa:	4a07      	ldr	r2, [pc, #28]	; (800cdc8 <ip_reass_enqueue_new_datagram+0x70>)
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	3308      	adds	r3, #8
 800cdb4:	2214      	movs	r2, #20
 800cdb6:	6879      	ldr	r1, [r7, #4]
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f000 fddb 	bl	800d974 <memcpy>
  return ipr;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3710      	adds	r7, #16
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}
 800cdc8:	20000210 	.word	0x20000210

0800cdcc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b082      	sub	sp, #8
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800cdd6:	4b10      	ldr	r3, [pc, #64]	; (800ce18 <ip_reass_dequeue_datagram+0x4c>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	687a      	ldr	r2, [r7, #4]
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d104      	bne.n	800cdea <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	4a0c      	ldr	r2, [pc, #48]	; (800ce18 <ip_reass_dequeue_datagram+0x4c>)
 800cde6:	6013      	str	r3, [r2, #0]
 800cde8:	e00d      	b.n	800ce06 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d106      	bne.n	800cdfe <ip_reass_dequeue_datagram+0x32>
 800cdf0:	4b0a      	ldr	r3, [pc, #40]	; (800ce1c <ip_reass_dequeue_datagram+0x50>)
 800cdf2:	f240 1245 	movw	r2, #325	; 0x145
 800cdf6:	490a      	ldr	r1, [pc, #40]	; (800ce20 <ip_reass_dequeue_datagram+0x54>)
 800cdf8:	480a      	ldr	r0, [pc, #40]	; (800ce24 <ip_reass_dequeue_datagram+0x58>)
 800cdfa:	f000 fdeb 	bl	800d9d4 <iprintf>
    prev->next = ipr->next;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681a      	ldr	r2, [r3, #0]
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800ce06:	6879      	ldr	r1, [r7, #4]
 800ce08:	2004      	movs	r0, #4
 800ce0a:	f7f7 f8d7 	bl	8003fbc <memp_free>
}
 800ce0e:	bf00      	nop
 800ce10:	3708      	adds	r7, #8
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}
 800ce16:	bf00      	nop
 800ce18:	20000210 	.word	0x20000210
 800ce1c:	080114b4 	.word	0x080114b4
 800ce20:	0801157c 	.word	0x0801157c
 800ce24:	080114fc 	.word	0x080114fc

0800ce28 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b08c      	sub	sp, #48	; 0x30
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	60f8      	str	r0, [r7, #12]
 800ce30:	60b9      	str	r1, [r7, #8]
 800ce32:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800ce34:	2300      	movs	r3, #0
 800ce36:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800ce38:	2301      	movs	r3, #1
 800ce3a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	685b      	ldr	r3, [r3, #4]
 800ce40:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ce42:	69fb      	ldr	r3, [r7, #28]
 800ce44:	885b      	ldrh	r3, [r3, #2]
 800ce46:	b29b      	uxth	r3, r3
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f7f6 fc15 	bl	8003678 <lwip_htons>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800ce52:	69fb      	ldr	r3, [r7, #28]
 800ce54:	781b      	ldrb	r3, [r3, #0]
 800ce56:	f003 030f 	and.w	r3, r3, #15
 800ce5a:	b2db      	uxtb	r3, r3
 800ce5c:	009b      	lsls	r3, r3, #2
 800ce5e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800ce60:	7e7b      	ldrb	r3, [r7, #25]
 800ce62:	b29b      	uxth	r3, r3
 800ce64:	8b7a      	ldrh	r2, [r7, #26]
 800ce66:	429a      	cmp	r2, r3
 800ce68:	d202      	bcs.n	800ce70 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ce6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce6e:	e135      	b.n	800d0dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800ce70:	7e7b      	ldrb	r3, [r7, #25]
 800ce72:	b29b      	uxth	r3, r3
 800ce74:	8b7a      	ldrh	r2, [r7, #26]
 800ce76:	1ad3      	subs	r3, r2, r3
 800ce78:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800ce7a:	69fb      	ldr	r3, [r7, #28]
 800ce7c:	88db      	ldrh	r3, [r3, #6]
 800ce7e:	b29b      	uxth	r3, r3
 800ce80:	4618      	mov	r0, r3
 800ce82:	f7f6 fbf9 	bl	8003678 <lwip_htons>
 800ce86:	4603      	mov	r3, r0
 800ce88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ce8c:	b29b      	uxth	r3, r3
 800ce8e:	00db      	lsls	r3, r3, #3
 800ce90:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	685b      	ldr	r3, [r3, #4]
 800ce96:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800ce98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	701a      	strb	r2, [r3, #0]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	705a      	strb	r2, [r3, #1]
 800cea2:	2200      	movs	r2, #0
 800cea4:	709a      	strb	r2, [r3, #2]
 800cea6:	2200      	movs	r2, #0
 800cea8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800ceaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceac:	8afa      	ldrh	r2, [r7, #22]
 800ceae:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800ceb0:	8afa      	ldrh	r2, [r7, #22]
 800ceb2:	8b7b      	ldrh	r3, [r7, #26]
 800ceb4:	4413      	add	r3, r2
 800ceb6:	b29a      	uxth	r2, r3
 800ceb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceba:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800cebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cebe:	88db      	ldrh	r3, [r3, #6]
 800cec0:	b29b      	uxth	r3, r3
 800cec2:	8afa      	ldrh	r2, [r7, #22]
 800cec4:	429a      	cmp	r2, r3
 800cec6:	d902      	bls.n	800cece <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800cec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cecc:	e106      	b.n	800d0dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	685b      	ldr	r3, [r3, #4]
 800ced2:	627b      	str	r3, [r7, #36]	; 0x24
 800ced4:	e068      	b.n	800cfa8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800ced6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced8:	685b      	ldr	r3, [r3, #4]
 800ceda:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800cedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cede:	889b      	ldrh	r3, [r3, #4]
 800cee0:	b29a      	uxth	r2, r3
 800cee2:	693b      	ldr	r3, [r7, #16]
 800cee4:	889b      	ldrh	r3, [r3, #4]
 800cee6:	b29b      	uxth	r3, r3
 800cee8:	429a      	cmp	r2, r3
 800ceea:	d235      	bcs.n	800cf58 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800ceec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cef0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800cef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d020      	beq.n	800cf3a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800cef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cefa:	889b      	ldrh	r3, [r3, #4]
 800cefc:	b29a      	uxth	r2, r3
 800cefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf00:	88db      	ldrh	r3, [r3, #6]
 800cf02:	b29b      	uxth	r3, r3
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d307      	bcc.n	800cf18 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800cf08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0a:	88db      	ldrh	r3, [r3, #6]
 800cf0c:	b29a      	uxth	r2, r3
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	889b      	ldrh	r3, [r3, #4]
 800cf12:	b29b      	uxth	r3, r3
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d902      	bls.n	800cf1e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800cf18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf1c:	e0de      	b.n	800d0dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800cf1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf20:	68ba      	ldr	r2, [r7, #8]
 800cf22:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800cf24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf26:	88db      	ldrh	r3, [r3, #6]
 800cf28:	b29a      	uxth	r2, r3
 800cf2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf2c:	889b      	ldrh	r3, [r3, #4]
 800cf2e:	b29b      	uxth	r3, r3
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d03d      	beq.n	800cfb0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800cf34:	2300      	movs	r3, #0
 800cf36:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800cf38:	e03a      	b.n	800cfb0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800cf3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf3c:	88db      	ldrh	r3, [r3, #6]
 800cf3e:	b29a      	uxth	r2, r3
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	889b      	ldrh	r3, [r3, #4]
 800cf44:	b29b      	uxth	r3, r3
 800cf46:	429a      	cmp	r2, r3
 800cf48:	d902      	bls.n	800cf50 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800cf4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf4e:	e0c5      	b.n	800d0dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	68ba      	ldr	r2, [r7, #8]
 800cf54:	605a      	str	r2, [r3, #4]
      break;
 800cf56:	e02b      	b.n	800cfb0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800cf58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf5a:	889b      	ldrh	r3, [r3, #4]
 800cf5c:	b29a      	uxth	r2, r3
 800cf5e:	693b      	ldr	r3, [r7, #16]
 800cf60:	889b      	ldrh	r3, [r3, #4]
 800cf62:	b29b      	uxth	r3, r3
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d102      	bne.n	800cf6e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800cf68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf6c:	e0b6      	b.n	800d0dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800cf6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf70:	889b      	ldrh	r3, [r3, #4]
 800cf72:	b29a      	uxth	r2, r3
 800cf74:	693b      	ldr	r3, [r7, #16]
 800cf76:	88db      	ldrh	r3, [r3, #6]
 800cf78:	b29b      	uxth	r3, r3
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d202      	bcs.n	800cf84 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800cf7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf82:	e0ab      	b.n	800d0dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800cf84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d009      	beq.n	800cf9e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800cf8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf8c:	88db      	ldrh	r3, [r3, #6]
 800cf8e:	b29a      	uxth	r2, r3
 800cf90:	693b      	ldr	r3, [r7, #16]
 800cf92:	889b      	ldrh	r3, [r3, #4]
 800cf94:	b29b      	uxth	r3, r3
 800cf96:	429a      	cmp	r2, r3
 800cf98:	d001      	beq.n	800cf9e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800cfa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d193      	bne.n	800ced6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800cfae:	e000      	b.n	800cfb2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800cfb0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800cfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d12d      	bne.n	800d014 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800cfb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d01c      	beq.n	800cff8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800cfbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc0:	88db      	ldrh	r3, [r3, #6]
 800cfc2:	b29a      	uxth	r2, r3
 800cfc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc6:	889b      	ldrh	r3, [r3, #4]
 800cfc8:	b29b      	uxth	r3, r3
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d906      	bls.n	800cfdc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800cfce:	4b45      	ldr	r3, [pc, #276]	; (800d0e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800cfd0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800cfd4:	4944      	ldr	r1, [pc, #272]	; (800d0e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800cfd6:	4845      	ldr	r0, [pc, #276]	; (800d0ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800cfd8:	f000 fcfc 	bl	800d9d4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800cfdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfde:	68ba      	ldr	r2, [r7, #8]
 800cfe0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800cfe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe4:	88db      	ldrh	r3, [r3, #6]
 800cfe6:	b29a      	uxth	r2, r3
 800cfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfea:	889b      	ldrh	r3, [r3, #4]
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	429a      	cmp	r2, r3
 800cff0:	d010      	beq.n	800d014 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800cff2:	2300      	movs	r3, #0
 800cff4:	623b      	str	r3, [r7, #32]
 800cff6:	e00d      	b.n	800d014 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d006      	beq.n	800d00e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800d000:	4b38      	ldr	r3, [pc, #224]	; (800d0e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d002:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800d006:	493a      	ldr	r1, [pc, #232]	; (800d0f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d008:	4838      	ldr	r0, [pc, #224]	; (800d0ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d00a:	f000 fce3 	bl	800d9d4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	68ba      	ldr	r2, [r7, #8]
 800d012:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d105      	bne.n	800d026 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	7f9b      	ldrb	r3, [r3, #30]
 800d01e:	f003 0301 	and.w	r3, r3, #1
 800d022:	2b00      	cmp	r3, #0
 800d024:	d059      	beq.n	800d0da <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800d026:	6a3b      	ldr	r3, [r7, #32]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d04f      	beq.n	800d0cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	685b      	ldr	r3, [r3, #4]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d006      	beq.n	800d042 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	685b      	ldr	r3, [r3, #4]
 800d038:	685b      	ldr	r3, [r3, #4]
 800d03a:	889b      	ldrh	r3, [r3, #4]
 800d03c:	b29b      	uxth	r3, r3
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d002      	beq.n	800d048 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800d042:	2300      	movs	r3, #0
 800d044:	623b      	str	r3, [r7, #32]
 800d046:	e041      	b.n	800d0cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800d048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d04a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800d04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d052:	e012      	b.n	800d07a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800d054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d056:	685b      	ldr	r3, [r3, #4]
 800d058:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800d05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d05c:	88db      	ldrh	r3, [r3, #6]
 800d05e:	b29a      	uxth	r2, r3
 800d060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d062:	889b      	ldrh	r3, [r3, #4]
 800d064:	b29b      	uxth	r3, r3
 800d066:	429a      	cmp	r2, r3
 800d068:	d002      	beq.n	800d070 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800d06a:	2300      	movs	r3, #0
 800d06c:	623b      	str	r3, [r7, #32]
            break;
 800d06e:	e007      	b.n	800d080 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800d070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d072:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800d074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d1e9      	bne.n	800d054 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800d080:	6a3b      	ldr	r3, [r7, #32]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d022      	beq.n	800d0cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	685b      	ldr	r3, [r3, #4]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d106      	bne.n	800d09c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800d08e:	4b15      	ldr	r3, [pc, #84]	; (800d0e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d090:	f240 12df 	movw	r2, #479	; 0x1df
 800d094:	4917      	ldr	r1, [pc, #92]	; (800d0f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d096:	4815      	ldr	r0, [pc, #84]	; (800d0ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d098:	f000 fc9c 	bl	800d9d4 <iprintf>
          LWIP_ASSERT("sanity check",
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	685b      	ldr	r3, [r3, #4]
 800d0a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	d106      	bne.n	800d0b6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800d0a8:	4b0e      	ldr	r3, [pc, #56]	; (800d0e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d0aa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d0ae:	4911      	ldr	r1, [pc, #68]	; (800d0f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d0b0:	480e      	ldr	r0, [pc, #56]	; (800d0ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d0b2:	f000 fc8f 	bl	800d9d4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800d0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d006      	beq.n	800d0cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800d0be:	4b09      	ldr	r3, [pc, #36]	; (800d0e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d0c0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800d0c4:	490c      	ldr	r1, [pc, #48]	; (800d0f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d0c6:	4809      	ldr	r0, [pc, #36]	; (800d0ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d0c8:	f000 fc84 	bl	800d9d4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800d0cc:	6a3b      	ldr	r3, [r7, #32]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	bf14      	ite	ne
 800d0d2:	2301      	movne	r3, #1
 800d0d4:	2300      	moveq	r3, #0
 800d0d6:	b2db      	uxtb	r3, r3
 800d0d8:	e000      	b.n	800d0dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800d0da:	2300      	movs	r3, #0
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	3730      	adds	r7, #48	; 0x30
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}
 800d0e4:	080114b4 	.word	0x080114b4
 800d0e8:	08011598 	.word	0x08011598
 800d0ec:	080114fc 	.word	0x080114fc
 800d0f0:	080115b8 	.word	0x080115b8
 800d0f4:	080115f0 	.word	0x080115f0
 800d0f8:	08011600 	.word	0x08011600

0800d0fc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b08e      	sub	sp, #56	; 0x38
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	685b      	ldr	r3, [r3, #4]
 800d108:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800d10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	f003 030f 	and.w	r3, r3, #15
 800d112:	b2db      	uxtb	r3, r3
 800d114:	009b      	lsls	r3, r3, #2
 800d116:	b2db      	uxtb	r3, r3
 800d118:	2b14      	cmp	r3, #20
 800d11a:	f040 8167 	bne.w	800d3ec <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800d11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d120:	88db      	ldrh	r3, [r3, #6]
 800d122:	b29b      	uxth	r3, r3
 800d124:	4618      	mov	r0, r3
 800d126:	f7f6 faa7 	bl	8003678 <lwip_htons>
 800d12a:	4603      	mov	r3, r0
 800d12c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d130:	b29b      	uxth	r3, r3
 800d132:	00db      	lsls	r3, r3, #3
 800d134:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d138:	885b      	ldrh	r3, [r3, #2]
 800d13a:	b29b      	uxth	r3, r3
 800d13c:	4618      	mov	r0, r3
 800d13e:	f7f6 fa9b 	bl	8003678 <lwip_htons>
 800d142:	4603      	mov	r3, r0
 800d144:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800d146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d148:	781b      	ldrb	r3, [r3, #0]
 800d14a:	f003 030f 	and.w	r3, r3, #15
 800d14e:	b2db      	uxtb	r3, r3
 800d150:	009b      	lsls	r3, r3, #2
 800d152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800d156:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d15a:	b29b      	uxth	r3, r3
 800d15c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d15e:	429a      	cmp	r2, r3
 800d160:	f0c0 8146 	bcc.w	800d3f0 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800d164:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d168:	b29b      	uxth	r3, r3
 800d16a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d16c:	1ad3      	subs	r3, r2, r3
 800d16e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f7f7 fdbd 	bl	8004cf0 <pbuf_clen>
 800d176:	4603      	mov	r3, r0
 800d178:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d17a:	4b9f      	ldr	r3, [pc, #636]	; (800d3f8 <ip4_reass+0x2fc>)
 800d17c:	881b      	ldrh	r3, [r3, #0]
 800d17e:	461a      	mov	r2, r3
 800d180:	8c3b      	ldrh	r3, [r7, #32]
 800d182:	4413      	add	r3, r2
 800d184:	2b0a      	cmp	r3, #10
 800d186:	dd10      	ble.n	800d1aa <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d188:	8c3b      	ldrh	r3, [r7, #32]
 800d18a:	4619      	mov	r1, r3
 800d18c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d18e:	f7ff fd81 	bl	800cc94 <ip_reass_remove_oldest_datagram>
 800d192:	4603      	mov	r3, r0
 800d194:	2b00      	cmp	r3, #0
 800d196:	f000 812d 	beq.w	800d3f4 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800d19a:	4b97      	ldr	r3, [pc, #604]	; (800d3f8 <ip4_reass+0x2fc>)
 800d19c:	881b      	ldrh	r3, [r3, #0]
 800d19e:	461a      	mov	r2, r3
 800d1a0:	8c3b      	ldrh	r3, [r7, #32]
 800d1a2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d1a4:	2b0a      	cmp	r3, #10
 800d1a6:	f300 8125 	bgt.w	800d3f4 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d1aa:	4b94      	ldr	r3, [pc, #592]	; (800d3fc <ip4_reass+0x300>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	633b      	str	r3, [r7, #48]	; 0x30
 800d1b0:	e015      	b.n	800d1de <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b4:	695a      	ldr	r2, [r3, #20]
 800d1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b8:	68db      	ldr	r3, [r3, #12]
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d10c      	bne.n	800d1d8 <ip4_reass+0xdc>
 800d1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c0:	699a      	ldr	r2, [r3, #24]
 800d1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c4:	691b      	ldr	r3, [r3, #16]
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d106      	bne.n	800d1d8 <ip4_reass+0xdc>
 800d1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1cc:	899a      	ldrh	r2, [r3, #12]
 800d1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d0:	889b      	ldrh	r3, [r3, #4]
 800d1d2:	b29b      	uxth	r3, r3
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	d006      	beq.n	800d1e6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	633b      	str	r3, [r7, #48]	; 0x30
 800d1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d1e6      	bne.n	800d1b2 <ip4_reass+0xb6>
 800d1e4:	e000      	b.n	800d1e8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800d1e6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800d1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d109      	bne.n	800d202 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800d1ee:	8c3b      	ldrh	r3, [r7, #32]
 800d1f0:	4619      	mov	r1, r3
 800d1f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1f4:	f7ff fdb0 	bl	800cd58 <ip_reass_enqueue_new_datagram>
 800d1f8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800d1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d11c      	bne.n	800d23a <ip4_reass+0x13e>
      goto nullreturn;
 800d200:	e109      	b.n	800d416 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d204:	88db      	ldrh	r3, [r3, #6]
 800d206:	b29b      	uxth	r3, r3
 800d208:	4618      	mov	r0, r3
 800d20a:	f7f6 fa35 	bl	8003678 <lwip_htons>
 800d20e:	4603      	mov	r3, r0
 800d210:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d214:	2b00      	cmp	r3, #0
 800d216:	d110      	bne.n	800d23a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800d218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d21a:	89db      	ldrh	r3, [r3, #14]
 800d21c:	4618      	mov	r0, r3
 800d21e:	f7f6 fa2b 	bl	8003678 <lwip_htons>
 800d222:	4603      	mov	r3, r0
 800d224:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d006      	beq.n	800d23a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800d22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d22e:	3308      	adds	r3, #8
 800d230:	2214      	movs	r2, #20
 800d232:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d234:	4618      	mov	r0, r3
 800d236:	f000 fb9d 	bl	800d974 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800d23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d23c:	88db      	ldrh	r3, [r3, #6]
 800d23e:	b29b      	uxth	r3, r3
 800d240:	f003 0320 	and.w	r3, r3, #32
 800d244:	2b00      	cmp	r3, #0
 800d246:	bf0c      	ite	eq
 800d248:	2301      	moveq	r3, #1
 800d24a:	2300      	movne	r3, #0
 800d24c:	b2db      	uxtb	r3, r3
 800d24e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800d250:	69fb      	ldr	r3, [r7, #28]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d00e      	beq.n	800d274 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800d256:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d258:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d25a:	4413      	add	r3, r2
 800d25c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800d25e:	8b7a      	ldrh	r2, [r7, #26]
 800d260:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d262:	429a      	cmp	r2, r3
 800d264:	f0c0 80a0 	bcc.w	800d3a8 <ip4_reass+0x2ac>
 800d268:	8b7b      	ldrh	r3, [r7, #26]
 800d26a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800d26e:	4293      	cmp	r3, r2
 800d270:	f200 809a 	bhi.w	800d3a8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800d274:	69fa      	ldr	r2, [r7, #28]
 800d276:	6879      	ldr	r1, [r7, #4]
 800d278:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d27a:	f7ff fdd5 	bl	800ce28 <ip_reass_chain_frag_into_datagram_and_validate>
 800d27e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d286:	f000 8091 	beq.w	800d3ac <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d28a:	4b5b      	ldr	r3, [pc, #364]	; (800d3f8 <ip4_reass+0x2fc>)
 800d28c:	881a      	ldrh	r2, [r3, #0]
 800d28e:	8c3b      	ldrh	r3, [r7, #32]
 800d290:	4413      	add	r3, r2
 800d292:	b29a      	uxth	r2, r3
 800d294:	4b58      	ldr	r3, [pc, #352]	; (800d3f8 <ip4_reass+0x2fc>)
 800d296:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800d298:	69fb      	ldr	r3, [r7, #28]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d00d      	beq.n	800d2ba <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800d29e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d2a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2a2:	4413      	add	r3, r2
 800d2a4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800d2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a8:	8a7a      	ldrh	r2, [r7, #18]
 800d2aa:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ae:	7f9b      	ldrb	r3, [r3, #30]
 800d2b0:	f043 0301 	orr.w	r3, r3, #1
 800d2b4:	b2da      	uxtb	r2, r3
 800d2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	2b01      	cmp	r3, #1
 800d2be:	d171      	bne.n	800d3a4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800d2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c2:	8b9b      	ldrh	r3, [r3, #28]
 800d2c4:	3314      	adds	r3, #20
 800d2c6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800d2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ca:	685b      	ldr	r3, [r3, #4]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800d2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d4:	685b      	ldr	r3, [r3, #4]
 800d2d6:	685b      	ldr	r3, [r3, #4]
 800d2d8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2dc:	3308      	adds	r3, #8
 800d2de:	2214      	movs	r2, #20
 800d2e0:	4619      	mov	r1, r3
 800d2e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2e4:	f000 fb46 	bl	800d974 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800d2e8:	8a3b      	ldrh	r3, [r7, #16]
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f7f6 f9c4 	bl	8003678 <lwip_htons>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	461a      	mov	r2, r3
 800d2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800d2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	719a      	strb	r2, [r3, #6]
 800d2fe:	2200      	movs	r2, #0
 800d300:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800d302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d304:	2200      	movs	r2, #0
 800d306:	729a      	strb	r2, [r3, #10]
 800d308:	2200      	movs	r2, #0
 800d30a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800d30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d30e:	685b      	ldr	r3, [r3, #4]
 800d310:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800d312:	e00d      	b.n	800d330 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800d314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d316:	685b      	ldr	r3, [r3, #4]
 800d318:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800d31a:	2114      	movs	r1, #20
 800d31c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d31e:	f7f7 fbd9 	bl	8004ad4 <pbuf_remove_header>
      pbuf_cat(p, r);
 800d322:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f7f7 fd1d 	bl	8004d64 <pbuf_cat>
      r = iprh->next_pbuf;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800d330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d332:	2b00      	cmp	r3, #0
 800d334:	d1ee      	bne.n	800d314 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800d336:	4b31      	ldr	r3, [pc, #196]	; (800d3fc <ip4_reass+0x300>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d102      	bne.n	800d346 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800d340:	2300      	movs	r3, #0
 800d342:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d344:	e010      	b.n	800d368 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d346:	4b2d      	ldr	r3, [pc, #180]	; (800d3fc <ip4_reass+0x300>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d34c:	e007      	b.n	800d35e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800d34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d354:	429a      	cmp	r2, r3
 800d356:	d006      	beq.n	800d366 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d360:	2b00      	cmp	r3, #0
 800d362:	d1f4      	bne.n	800d34e <ip4_reass+0x252>
 800d364:	e000      	b.n	800d368 <ip4_reass+0x26c>
          break;
 800d366:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800d368:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d36a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d36c:	f7ff fd2e 	bl	800cdcc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	f7f7 fcbd 	bl	8004cf0 <pbuf_clen>
 800d376:	4603      	mov	r3, r0
 800d378:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800d37a:	4b1f      	ldr	r3, [pc, #124]	; (800d3f8 <ip4_reass+0x2fc>)
 800d37c:	881b      	ldrh	r3, [r3, #0]
 800d37e:	8c3a      	ldrh	r2, [r7, #32]
 800d380:	429a      	cmp	r2, r3
 800d382:	d906      	bls.n	800d392 <ip4_reass+0x296>
 800d384:	4b1e      	ldr	r3, [pc, #120]	; (800d400 <ip4_reass+0x304>)
 800d386:	f240 229b 	movw	r2, #667	; 0x29b
 800d38a:	491e      	ldr	r1, [pc, #120]	; (800d404 <ip4_reass+0x308>)
 800d38c:	481e      	ldr	r0, [pc, #120]	; (800d408 <ip4_reass+0x30c>)
 800d38e:	f000 fb21 	bl	800d9d4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800d392:	4b19      	ldr	r3, [pc, #100]	; (800d3f8 <ip4_reass+0x2fc>)
 800d394:	881a      	ldrh	r2, [r3, #0]
 800d396:	8c3b      	ldrh	r3, [r7, #32]
 800d398:	1ad3      	subs	r3, r2, r3
 800d39a:	b29a      	uxth	r2, r3
 800d39c:	4b16      	ldr	r3, [pc, #88]	; (800d3f8 <ip4_reass+0x2fc>)
 800d39e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	e03c      	b.n	800d41e <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	e03a      	b.n	800d41e <ip4_reass+0x322>
      goto nullreturn_ipr;
 800d3a8:	bf00      	nop
 800d3aa:	e000      	b.n	800d3ae <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800d3ac:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800d3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d106      	bne.n	800d3c2 <ip4_reass+0x2c6>
 800d3b4:	4b12      	ldr	r3, [pc, #72]	; (800d400 <ip4_reass+0x304>)
 800d3b6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800d3ba:	4914      	ldr	r1, [pc, #80]	; (800d40c <ip4_reass+0x310>)
 800d3bc:	4812      	ldr	r0, [pc, #72]	; (800d408 <ip4_reass+0x30c>)
 800d3be:	f000 fb09 	bl	800d9d4 <iprintf>
  if (ipr->p == NULL) {
 800d3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c4:	685b      	ldr	r3, [r3, #4]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d124      	bne.n	800d414 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800d3ca:	4b0c      	ldr	r3, [pc, #48]	; (800d3fc <ip4_reass+0x300>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d006      	beq.n	800d3e2 <ip4_reass+0x2e6>
 800d3d4:	4b0a      	ldr	r3, [pc, #40]	; (800d400 <ip4_reass+0x304>)
 800d3d6:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d3da:	490d      	ldr	r1, [pc, #52]	; (800d410 <ip4_reass+0x314>)
 800d3dc:	480a      	ldr	r0, [pc, #40]	; (800d408 <ip4_reass+0x30c>)
 800d3de:	f000 faf9 	bl	800d9d4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800d3e2:	2100      	movs	r1, #0
 800d3e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3e6:	f7ff fcf1 	bl	800cdcc <ip_reass_dequeue_datagram>
 800d3ea:	e014      	b.n	800d416 <ip4_reass+0x31a>
    goto nullreturn;
 800d3ec:	bf00      	nop
 800d3ee:	e012      	b.n	800d416 <ip4_reass+0x31a>
    goto nullreturn;
 800d3f0:	bf00      	nop
 800d3f2:	e010      	b.n	800d416 <ip4_reass+0x31a>
      goto nullreturn;
 800d3f4:	bf00      	nop
 800d3f6:	e00e      	b.n	800d416 <ip4_reass+0x31a>
 800d3f8:	20000214 	.word	0x20000214
 800d3fc:	20000210 	.word	0x20000210
 800d400:	080114b4 	.word	0x080114b4
 800d404:	08011624 	.word	0x08011624
 800d408:	080114fc 	.word	0x080114fc
 800d40c:	08011640 	.word	0x08011640
 800d410:	0801164c 	.word	0x0801164c
  }

nullreturn:
 800d414:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	f7f7 fbe2 	bl	8004be0 <pbuf_free>
  return NULL;
 800d41c:	2300      	movs	r3, #0
}
 800d41e:	4618      	mov	r0, r3
 800d420:	3738      	adds	r7, #56	; 0x38
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}
 800d426:	bf00      	nop

0800d428 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800d42c:	2005      	movs	r0, #5
 800d42e:	f7f6 fd79 	bl	8003f24 <memp_malloc>
 800d432:	4603      	mov	r3, r0
}
 800d434:	4618      	mov	r0, r3
 800d436:	bd80      	pop	{r7, pc}

0800d438 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b082      	sub	sp, #8
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d106      	bne.n	800d454 <ip_frag_free_pbuf_custom_ref+0x1c>
 800d446:	4b07      	ldr	r3, [pc, #28]	; (800d464 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800d448:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800d44c:	4906      	ldr	r1, [pc, #24]	; (800d468 <ip_frag_free_pbuf_custom_ref+0x30>)
 800d44e:	4807      	ldr	r0, [pc, #28]	; (800d46c <ip_frag_free_pbuf_custom_ref+0x34>)
 800d450:	f000 fac0 	bl	800d9d4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800d454:	6879      	ldr	r1, [r7, #4]
 800d456:	2005      	movs	r0, #5
 800d458:	f7f6 fdb0 	bl	8003fbc <memp_free>
}
 800d45c:	bf00      	nop
 800d45e:	3708      	adds	r7, #8
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}
 800d464:	080114b4 	.word	0x080114b4
 800d468:	0801166c 	.word	0x0801166c
 800d46c:	080114fc 	.word	0x080114fc

0800d470 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b084      	sub	sp, #16
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d106      	bne.n	800d490 <ipfrag_free_pbuf_custom+0x20>
 800d482:	4b11      	ldr	r3, [pc, #68]	; (800d4c8 <ipfrag_free_pbuf_custom+0x58>)
 800d484:	f240 22ce 	movw	r2, #718	; 0x2ce
 800d488:	4910      	ldr	r1, [pc, #64]	; (800d4cc <ipfrag_free_pbuf_custom+0x5c>)
 800d48a:	4811      	ldr	r0, [pc, #68]	; (800d4d0 <ipfrag_free_pbuf_custom+0x60>)
 800d48c:	f000 faa2 	bl	800d9d4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800d490:	68fa      	ldr	r2, [r7, #12]
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	429a      	cmp	r2, r3
 800d496:	d006      	beq.n	800d4a6 <ipfrag_free_pbuf_custom+0x36>
 800d498:	4b0b      	ldr	r3, [pc, #44]	; (800d4c8 <ipfrag_free_pbuf_custom+0x58>)
 800d49a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800d49e:	490d      	ldr	r1, [pc, #52]	; (800d4d4 <ipfrag_free_pbuf_custom+0x64>)
 800d4a0:	480b      	ldr	r0, [pc, #44]	; (800d4d0 <ipfrag_free_pbuf_custom+0x60>)
 800d4a2:	f000 fa97 	bl	800d9d4 <iprintf>
  if (pcr->original != NULL) {
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	695b      	ldr	r3, [r3, #20]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d004      	beq.n	800d4b8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	695b      	ldr	r3, [r3, #20]
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f7f7 fb94 	bl	8004be0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800d4b8:	68f8      	ldr	r0, [r7, #12]
 800d4ba:	f7ff ffbd 	bl	800d438 <ip_frag_free_pbuf_custom_ref>
}
 800d4be:	bf00      	nop
 800d4c0:	3710      	adds	r7, #16
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}
 800d4c6:	bf00      	nop
 800d4c8:	080114b4 	.word	0x080114b4
 800d4cc:	08011678 	.word	0x08011678
 800d4d0:	080114fc 	.word	0x080114fc
 800d4d4:	08011684 	.word	0x08011684

0800d4d8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b094      	sub	sp, #80	; 0x50
 800d4dc:	af02      	add	r7, sp, #8
 800d4de:	60f8      	str	r0, [r7, #12]
 800d4e0:	60b9      	str	r1, [r7, #8]
 800d4e2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d4ee:	3b14      	subs	r3, #20
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	da00      	bge.n	800d4f6 <ip4_frag+0x1e>
 800d4f4:	3307      	adds	r3, #7
 800d4f6:	10db      	asrs	r3, r3, #3
 800d4f8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800d4fa:	2314      	movs	r3, #20
 800d4fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	685b      	ldr	r3, [r3, #4]
 800d502:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800d504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d506:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800d508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d50a:	781b      	ldrb	r3, [r3, #0]
 800d50c:	f003 030f 	and.w	r3, r3, #15
 800d510:	b2db      	uxtb	r3, r3
 800d512:	009b      	lsls	r3, r3, #2
 800d514:	b2db      	uxtb	r3, r3
 800d516:	2b14      	cmp	r3, #20
 800d518:	d002      	beq.n	800d520 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800d51a:	f06f 0305 	mvn.w	r3, #5
 800d51e:	e110      	b.n	800d742 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	895b      	ldrh	r3, [r3, #10]
 800d524:	2b13      	cmp	r3, #19
 800d526:	d809      	bhi.n	800d53c <ip4_frag+0x64>
 800d528:	4b88      	ldr	r3, [pc, #544]	; (800d74c <ip4_frag+0x274>)
 800d52a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800d52e:	4988      	ldr	r1, [pc, #544]	; (800d750 <ip4_frag+0x278>)
 800d530:	4888      	ldr	r0, [pc, #544]	; (800d754 <ip4_frag+0x27c>)
 800d532:	f000 fa4f 	bl	800d9d4 <iprintf>
 800d536:	f06f 0305 	mvn.w	r3, #5
 800d53a:	e102      	b.n	800d742 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800d53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d53e:	88db      	ldrh	r3, [r3, #6]
 800d540:	b29b      	uxth	r3, r3
 800d542:	4618      	mov	r0, r3
 800d544:	f7f6 f898 	bl	8003678 <lwip_htons>
 800d548:	4603      	mov	r3, r0
 800d54a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800d54c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d54e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d552:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800d556:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d558:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d55c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	891b      	ldrh	r3, [r3, #8]
 800d562:	3b14      	subs	r3, #20
 800d564:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800d568:	e0e1      	b.n	800d72e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800d56a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d56c:	00db      	lsls	r3, r3, #3
 800d56e:	b29b      	uxth	r3, r3
 800d570:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d574:	4293      	cmp	r3, r2
 800d576:	bf28      	it	cs
 800d578:	4613      	movcs	r3, r2
 800d57a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800d57c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d580:	2114      	movs	r1, #20
 800d582:	200e      	movs	r0, #14
 800d584:	f7f7 f848 	bl	8004618 <pbuf_alloc>
 800d588:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800d58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	f000 80d5 	beq.w	800d73c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800d592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d594:	895b      	ldrh	r3, [r3, #10]
 800d596:	2b13      	cmp	r3, #19
 800d598:	d806      	bhi.n	800d5a8 <ip4_frag+0xd0>
 800d59a:	4b6c      	ldr	r3, [pc, #432]	; (800d74c <ip4_frag+0x274>)
 800d59c:	f44f 7249 	mov.w	r2, #804	; 0x324
 800d5a0:	496d      	ldr	r1, [pc, #436]	; (800d758 <ip4_frag+0x280>)
 800d5a2:	486c      	ldr	r0, [pc, #432]	; (800d754 <ip4_frag+0x27c>)
 800d5a4:	f000 fa16 	bl	800d9d4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800d5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5aa:	685b      	ldr	r3, [r3, #4]
 800d5ac:	2214      	movs	r2, #20
 800d5ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f000 f9df 	bl	800d974 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800d5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800d5bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d5be:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800d5c2:	e064      	b.n	800d68e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	895a      	ldrh	r2, [r3, #10]
 800d5c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d5ca:	1ad3      	subs	r3, r2, r3
 800d5cc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	895b      	ldrh	r3, [r3, #10]
 800d5d2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d906      	bls.n	800d5e6 <ip4_frag+0x10e>
 800d5d8:	4b5c      	ldr	r3, [pc, #368]	; (800d74c <ip4_frag+0x274>)
 800d5da:	f240 322d 	movw	r2, #813	; 0x32d
 800d5de:	495f      	ldr	r1, [pc, #380]	; (800d75c <ip4_frag+0x284>)
 800d5e0:	485c      	ldr	r0, [pc, #368]	; (800d754 <ip4_frag+0x27c>)
 800d5e2:	f000 f9f7 	bl	800d9d4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800d5e6:	8bfa      	ldrh	r2, [r7, #30]
 800d5e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d5ec:	4293      	cmp	r3, r2
 800d5ee:	bf28      	it	cs
 800d5f0:	4613      	movcs	r3, r2
 800d5f2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800d5f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d105      	bne.n	800d60a <ip4_frag+0x132>
        poff = 0;
 800d5fe:	2300      	movs	r3, #0
 800d600:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	60fb      	str	r3, [r7, #12]
        continue;
 800d608:	e041      	b.n	800d68e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800d60a:	f7ff ff0d 	bl	800d428 <ip_frag_alloc_pbuf_custom_ref>
 800d60e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800d610:	69bb      	ldr	r3, [r7, #24]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d103      	bne.n	800d61e <ip4_frag+0x146>
        pbuf_free(rambuf);
 800d616:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d618:	f7f7 fae2 	bl	8004be0 <pbuf_free>
        goto memerr;
 800d61c:	e08f      	b.n	800d73e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d61e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d624:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d626:	4413      	add	r3, r2
 800d628:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800d62c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800d630:	9201      	str	r2, [sp, #4]
 800d632:	9300      	str	r3, [sp, #0]
 800d634:	4603      	mov	r3, r0
 800d636:	2241      	movs	r2, #65	; 0x41
 800d638:	2000      	movs	r0, #0
 800d63a:	f7f7 f917 	bl	800486c <pbuf_alloced_custom>
 800d63e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d106      	bne.n	800d654 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800d646:	69b8      	ldr	r0, [r7, #24]
 800d648:	f7ff fef6 	bl	800d438 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800d64c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d64e:	f7f7 fac7 	bl	8004be0 <pbuf_free>
        goto memerr;
 800d652:	e074      	b.n	800d73e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800d654:	68f8      	ldr	r0, [r7, #12]
 800d656:	f7f7 fb63 	bl	8004d20 <pbuf_ref>
      pcr->original = p;
 800d65a:	69bb      	ldr	r3, [r7, #24]
 800d65c:	68fa      	ldr	r2, [r7, #12]
 800d65e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800d660:	69bb      	ldr	r3, [r7, #24]
 800d662:	4a3f      	ldr	r2, [pc, #252]	; (800d760 <ip4_frag+0x288>)
 800d664:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800d666:	6979      	ldr	r1, [r7, #20]
 800d668:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d66a:	f7f7 fb7b 	bl	8004d64 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800d66e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800d672:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d676:	1ad3      	subs	r3, r2, r3
 800d678:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800d67c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d680:	2b00      	cmp	r3, #0
 800d682:	d004      	beq.n	800d68e <ip4_frag+0x1b6>
        poff = 0;
 800d684:	2300      	movs	r3, #0
 800d686:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800d68e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d692:	2b00      	cmp	r3, #0
 800d694:	d196      	bne.n	800d5c4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800d696:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800d698:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d69c:	4413      	add	r3, r2
 800d69e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d6a4:	f1a3 0213 	sub.w	r2, r3, #19
 800d6a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d6ac:	429a      	cmp	r2, r3
 800d6ae:	bfcc      	ite	gt
 800d6b0:	2301      	movgt	r3, #1
 800d6b2:	2300      	movle	r3, #0
 800d6b4:	b2db      	uxtb	r3, r3
 800d6b6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800d6b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d6bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d6c0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800d6c2:	6a3b      	ldr	r3, [r7, #32]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d002      	beq.n	800d6ce <ip4_frag+0x1f6>
 800d6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d003      	beq.n	800d6d6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800d6ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d6d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d6d4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800d6d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f7f5 ffcd 	bl	8003678 <lwip_htons>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	461a      	mov	r2, r3
 800d6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800d6e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d6e8:	3314      	adds	r3, #20
 800d6ea:	b29b      	uxth	r3, r3
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f7f5 ffc3 	bl	8003678 <lwip_htons>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	461a      	mov	r2, r3
 800d6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6f8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800d6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	729a      	strb	r2, [r3, #10]
 800d700:	2200      	movs	r2, #0
 800d702:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	695b      	ldr	r3, [r3, #20]
 800d708:	687a      	ldr	r2, [r7, #4]
 800d70a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d70c:	68b8      	ldr	r0, [r7, #8]
 800d70e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800d710:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d712:	f7f7 fa65 	bl	8004be0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800d716:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d71a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d71c:	1ad3      	subs	r3, r2, r3
 800d71e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800d722:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800d726:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d728:	4413      	add	r3, r2
 800d72a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800d72e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d732:	2b00      	cmp	r3, #0
 800d734:	f47f af19 	bne.w	800d56a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800d738:	2300      	movs	r3, #0
 800d73a:	e002      	b.n	800d742 <ip4_frag+0x26a>
      goto memerr;
 800d73c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800d73e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800d742:	4618      	mov	r0, r3
 800d744:	3748      	adds	r7, #72	; 0x48
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	080114b4 	.word	0x080114b4
 800d750:	08011690 	.word	0x08011690
 800d754:	080114fc 	.word	0x080114fc
 800d758:	080116ac 	.word	0x080116ac
 800d75c:	080116cc 	.word	0x080116cc
 800d760:	0800d471 	.word	0x0800d471

0800d764 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b086      	sub	sp, #24
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
 800d76c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800d76e:	230e      	movs	r3, #14
 800d770:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	895b      	ldrh	r3, [r3, #10]
 800d776:	2b0e      	cmp	r3, #14
 800d778:	d96e      	bls.n	800d858 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	7bdb      	ldrb	r3, [r3, #15]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d106      	bne.n	800d790 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d788:	3301      	adds	r3, #1
 800d78a:	b2da      	uxtb	r2, r3
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	685b      	ldr	r3, [r3, #4]
 800d794:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	7b1a      	ldrb	r2, [r3, #12]
 800d79a:	7b5b      	ldrb	r3, [r3, #13]
 800d79c:	021b      	lsls	r3, r3, #8
 800d79e:	4313      	orrs	r3, r2
 800d7a0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800d7a2:	693b      	ldr	r3, [r7, #16]
 800d7a4:	781b      	ldrb	r3, [r3, #0]
 800d7a6:	f003 0301 	and.w	r3, r3, #1
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d023      	beq.n	800d7f6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800d7ae:	693b      	ldr	r3, [r7, #16]
 800d7b0:	781b      	ldrb	r3, [r3, #0]
 800d7b2:	2b01      	cmp	r3, #1
 800d7b4:	d10f      	bne.n	800d7d6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	785b      	ldrb	r3, [r3, #1]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d11b      	bne.n	800d7f6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800d7be:	693b      	ldr	r3, [r7, #16]
 800d7c0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d7c2:	2b5e      	cmp	r3, #94	; 0x5e
 800d7c4:	d117      	bne.n	800d7f6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	7b5b      	ldrb	r3, [r3, #13]
 800d7ca:	f043 0310 	orr.w	r3, r3, #16
 800d7ce:	b2da      	uxtb	r2, r3
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	735a      	strb	r2, [r3, #13]
 800d7d4:	e00f      	b.n	800d7f6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800d7d6:	693b      	ldr	r3, [r7, #16]
 800d7d8:	2206      	movs	r2, #6
 800d7da:	4928      	ldr	r1, [pc, #160]	; (800d87c <ethernet_input+0x118>)
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f000 f8bb 	bl	800d958 <memcmp>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d106      	bne.n	800d7f6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	7b5b      	ldrb	r3, [r3, #13]
 800d7ec:	f043 0308 	orr.w	r3, r3, #8
 800d7f0:	b2da      	uxtb	r2, r3
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800d7f6:	89fb      	ldrh	r3, [r7, #14]
 800d7f8:	2b08      	cmp	r3, #8
 800d7fa:	d003      	beq.n	800d804 <ethernet_input+0xa0>
 800d7fc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800d800:	d014      	beq.n	800d82c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800d802:	e032      	b.n	800d86a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d80a:	f003 0308 	and.w	r3, r3, #8
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d024      	beq.n	800d85c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d812:	8afb      	ldrh	r3, [r7, #22]
 800d814:	4619      	mov	r1, r3
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f7f7 f95c 	bl	8004ad4 <pbuf_remove_header>
 800d81c:	4603      	mov	r3, r0
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d11e      	bne.n	800d860 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800d822:	6839      	ldr	r1, [r7, #0]
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	f7fe fe95 	bl	800c554 <ip4_input>
      break;
 800d82a:	e013      	b.n	800d854 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d832:	f003 0308 	and.w	r3, r3, #8
 800d836:	2b00      	cmp	r3, #0
 800d838:	d014      	beq.n	800d864 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d83a:	8afb      	ldrh	r3, [r7, #22]
 800d83c:	4619      	mov	r1, r3
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f7f7 f948 	bl	8004ad4 <pbuf_remove_header>
 800d844:	4603      	mov	r3, r0
 800d846:	2b00      	cmp	r3, #0
 800d848:	d10e      	bne.n	800d868 <ethernet_input+0x104>
        etharp_input(p, netif);
 800d84a:	6839      	ldr	r1, [r7, #0]
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	f7fe f835 	bl	800b8bc <etharp_input>
      break;
 800d852:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800d854:	2300      	movs	r3, #0
 800d856:	e00c      	b.n	800d872 <ethernet_input+0x10e>
    goto free_and_return;
 800d858:	bf00      	nop
 800d85a:	e006      	b.n	800d86a <ethernet_input+0x106>
        goto free_and_return;
 800d85c:	bf00      	nop
 800d85e:	e004      	b.n	800d86a <ethernet_input+0x106>
        goto free_and_return;
 800d860:	bf00      	nop
 800d862:	e002      	b.n	800d86a <ethernet_input+0x106>
        goto free_and_return;
 800d864:	bf00      	nop
 800d866:	e000      	b.n	800d86a <ethernet_input+0x106>
        goto free_and_return;
 800d868:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f7f7 f9b8 	bl	8004be0 <pbuf_free>
  return ERR_OK;
 800d870:	2300      	movs	r3, #0
}
 800d872:	4618      	mov	r0, r3
 800d874:	3718      	adds	r7, #24
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}
 800d87a:	bf00      	nop
 800d87c:	08011854 	.word	0x08011854

0800d880 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800d880:	b580      	push	{r7, lr}
 800d882:	b086      	sub	sp, #24
 800d884:	af00      	add	r7, sp, #0
 800d886:	60f8      	str	r0, [r7, #12]
 800d888:	60b9      	str	r1, [r7, #8]
 800d88a:	607a      	str	r2, [r7, #4]
 800d88c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800d88e:	8c3b      	ldrh	r3, [r7, #32]
 800d890:	4618      	mov	r0, r3
 800d892:	f7f5 fef1 	bl	8003678 <lwip_htons>
 800d896:	4603      	mov	r3, r0
 800d898:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800d89a:	210e      	movs	r1, #14
 800d89c:	68b8      	ldr	r0, [r7, #8]
 800d89e:	f7f7 f909 	bl	8004ab4 <pbuf_add_header>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d125      	bne.n	800d8f4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	685b      	ldr	r3, [r3, #4]
 800d8ac:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800d8ae:	693b      	ldr	r3, [r7, #16]
 800d8b0:	8afa      	ldrh	r2, [r7, #22]
 800d8b2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	2206      	movs	r2, #6
 800d8b8:	6839      	ldr	r1, [r7, #0]
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f000 f85a 	bl	800d974 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800d8c0:	693b      	ldr	r3, [r7, #16]
 800d8c2:	3306      	adds	r3, #6
 800d8c4:	2206      	movs	r2, #6
 800d8c6:	6879      	ldr	r1, [r7, #4]
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f000 f853 	bl	800d974 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d8d4:	2b06      	cmp	r3, #6
 800d8d6:	d006      	beq.n	800d8e6 <ethernet_output+0x66>
 800d8d8:	4b0a      	ldr	r3, [pc, #40]	; (800d904 <ethernet_output+0x84>)
 800d8da:	f44f 7299 	mov.w	r2, #306	; 0x132
 800d8de:	490a      	ldr	r1, [pc, #40]	; (800d908 <ethernet_output+0x88>)
 800d8e0:	480a      	ldr	r0, [pc, #40]	; (800d90c <ethernet_output+0x8c>)
 800d8e2:	f000 f877 	bl	800d9d4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	699b      	ldr	r3, [r3, #24]
 800d8ea:	68b9      	ldr	r1, [r7, #8]
 800d8ec:	68f8      	ldr	r0, [r7, #12]
 800d8ee:	4798      	blx	r3
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	e002      	b.n	800d8fa <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800d8f4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800d8f6:	f06f 0301 	mvn.w	r3, #1
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3718      	adds	r7, #24
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
 800d902:	bf00      	nop
 800d904:	080116dc 	.word	0x080116dc
 800d908:	08011714 	.word	0x08011714
 800d90c:	08011748 	.word	0x08011748

0800d910 <__libc_init_array>:
 800d910:	b570      	push	{r4, r5, r6, lr}
 800d912:	4d0d      	ldr	r5, [pc, #52]	; (800d948 <__libc_init_array+0x38>)
 800d914:	4c0d      	ldr	r4, [pc, #52]	; (800d94c <__libc_init_array+0x3c>)
 800d916:	1b64      	subs	r4, r4, r5
 800d918:	10a4      	asrs	r4, r4, #2
 800d91a:	2600      	movs	r6, #0
 800d91c:	42a6      	cmp	r6, r4
 800d91e:	d109      	bne.n	800d934 <__libc_init_array+0x24>
 800d920:	4d0b      	ldr	r5, [pc, #44]	; (800d950 <__libc_init_array+0x40>)
 800d922:	4c0c      	ldr	r4, [pc, #48]	; (800d954 <__libc_init_array+0x44>)
 800d924:	f001 fa1a 	bl	800ed5c <_init>
 800d928:	1b64      	subs	r4, r4, r5
 800d92a:	10a4      	asrs	r4, r4, #2
 800d92c:	2600      	movs	r6, #0
 800d92e:	42a6      	cmp	r6, r4
 800d930:	d105      	bne.n	800d93e <__libc_init_array+0x2e>
 800d932:	bd70      	pop	{r4, r5, r6, pc}
 800d934:	f855 3b04 	ldr.w	r3, [r5], #4
 800d938:	4798      	blx	r3
 800d93a:	3601      	adds	r6, #1
 800d93c:	e7ee      	b.n	800d91c <__libc_init_array+0xc>
 800d93e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d942:	4798      	blx	r3
 800d944:	3601      	adds	r6, #1
 800d946:	e7f2      	b.n	800d92e <__libc_init_array+0x1e>
 800d948:	080119b8 	.word	0x080119b8
 800d94c:	080119b8 	.word	0x080119b8
 800d950:	080119b8 	.word	0x080119b8
 800d954:	080119bc 	.word	0x080119bc

0800d958 <memcmp>:
 800d958:	b530      	push	{r4, r5, lr}
 800d95a:	3901      	subs	r1, #1
 800d95c:	2400      	movs	r4, #0
 800d95e:	42a2      	cmp	r2, r4
 800d960:	d101      	bne.n	800d966 <memcmp+0xe>
 800d962:	2000      	movs	r0, #0
 800d964:	e005      	b.n	800d972 <memcmp+0x1a>
 800d966:	5d03      	ldrb	r3, [r0, r4]
 800d968:	3401      	adds	r4, #1
 800d96a:	5d0d      	ldrb	r5, [r1, r4]
 800d96c:	42ab      	cmp	r3, r5
 800d96e:	d0f6      	beq.n	800d95e <memcmp+0x6>
 800d970:	1b58      	subs	r0, r3, r5
 800d972:	bd30      	pop	{r4, r5, pc}

0800d974 <memcpy>:
 800d974:	440a      	add	r2, r1
 800d976:	4291      	cmp	r1, r2
 800d978:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d97c:	d100      	bne.n	800d980 <memcpy+0xc>
 800d97e:	4770      	bx	lr
 800d980:	b510      	push	{r4, lr}
 800d982:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d986:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d98a:	4291      	cmp	r1, r2
 800d98c:	d1f9      	bne.n	800d982 <memcpy+0xe>
 800d98e:	bd10      	pop	{r4, pc}

0800d990 <memmove>:
 800d990:	4288      	cmp	r0, r1
 800d992:	b510      	push	{r4, lr}
 800d994:	eb01 0402 	add.w	r4, r1, r2
 800d998:	d902      	bls.n	800d9a0 <memmove+0x10>
 800d99a:	4284      	cmp	r4, r0
 800d99c:	4623      	mov	r3, r4
 800d99e:	d807      	bhi.n	800d9b0 <memmove+0x20>
 800d9a0:	1e43      	subs	r3, r0, #1
 800d9a2:	42a1      	cmp	r1, r4
 800d9a4:	d008      	beq.n	800d9b8 <memmove+0x28>
 800d9a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d9aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d9ae:	e7f8      	b.n	800d9a2 <memmove+0x12>
 800d9b0:	4402      	add	r2, r0
 800d9b2:	4601      	mov	r1, r0
 800d9b4:	428a      	cmp	r2, r1
 800d9b6:	d100      	bne.n	800d9ba <memmove+0x2a>
 800d9b8:	bd10      	pop	{r4, pc}
 800d9ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d9be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d9c2:	e7f7      	b.n	800d9b4 <memmove+0x24>

0800d9c4 <memset>:
 800d9c4:	4402      	add	r2, r0
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	4293      	cmp	r3, r2
 800d9ca:	d100      	bne.n	800d9ce <memset+0xa>
 800d9cc:	4770      	bx	lr
 800d9ce:	f803 1b01 	strb.w	r1, [r3], #1
 800d9d2:	e7f9      	b.n	800d9c8 <memset+0x4>

0800d9d4 <iprintf>:
 800d9d4:	b40f      	push	{r0, r1, r2, r3}
 800d9d6:	4b0a      	ldr	r3, [pc, #40]	; (800da00 <iprintf+0x2c>)
 800d9d8:	b513      	push	{r0, r1, r4, lr}
 800d9da:	681c      	ldr	r4, [r3, #0]
 800d9dc:	b124      	cbz	r4, 800d9e8 <iprintf+0x14>
 800d9de:	69a3      	ldr	r3, [r4, #24]
 800d9e0:	b913      	cbnz	r3, 800d9e8 <iprintf+0x14>
 800d9e2:	4620      	mov	r0, r4
 800d9e4:	f000 f8e4 	bl	800dbb0 <__sinit>
 800d9e8:	ab05      	add	r3, sp, #20
 800d9ea:	9a04      	ldr	r2, [sp, #16]
 800d9ec:	68a1      	ldr	r1, [r4, #8]
 800d9ee:	9301      	str	r3, [sp, #4]
 800d9f0:	4620      	mov	r0, r4
 800d9f2:	f000 fbc7 	bl	800e184 <_vfiprintf_r>
 800d9f6:	b002      	add	sp, #8
 800d9f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9fc:	b004      	add	sp, #16
 800d9fe:	4770      	bx	lr
 800da00:	20000014 	.word	0x20000014

0800da04 <rand>:
 800da04:	4b17      	ldr	r3, [pc, #92]	; (800da64 <rand+0x60>)
 800da06:	b510      	push	{r4, lr}
 800da08:	681c      	ldr	r4, [r3, #0]
 800da0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800da0c:	b9b3      	cbnz	r3, 800da3c <rand+0x38>
 800da0e:	2018      	movs	r0, #24
 800da10:	f000 f980 	bl	800dd14 <malloc>
 800da14:	63a0      	str	r0, [r4, #56]	; 0x38
 800da16:	b928      	cbnz	r0, 800da24 <rand+0x20>
 800da18:	4602      	mov	r2, r0
 800da1a:	4b13      	ldr	r3, [pc, #76]	; (800da68 <rand+0x64>)
 800da1c:	4813      	ldr	r0, [pc, #76]	; (800da6c <rand+0x68>)
 800da1e:	214e      	movs	r1, #78	; 0x4e
 800da20:	f000 f850 	bl	800dac4 <__assert_func>
 800da24:	4a12      	ldr	r2, [pc, #72]	; (800da70 <rand+0x6c>)
 800da26:	4b13      	ldr	r3, [pc, #76]	; (800da74 <rand+0x70>)
 800da28:	e9c0 2300 	strd	r2, r3, [r0]
 800da2c:	4b12      	ldr	r3, [pc, #72]	; (800da78 <rand+0x74>)
 800da2e:	6083      	str	r3, [r0, #8]
 800da30:	230b      	movs	r3, #11
 800da32:	8183      	strh	r3, [r0, #12]
 800da34:	2201      	movs	r2, #1
 800da36:	2300      	movs	r3, #0
 800da38:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800da3c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800da3e:	480f      	ldr	r0, [pc, #60]	; (800da7c <rand+0x78>)
 800da40:	690a      	ldr	r2, [r1, #16]
 800da42:	694b      	ldr	r3, [r1, #20]
 800da44:	4c0e      	ldr	r4, [pc, #56]	; (800da80 <rand+0x7c>)
 800da46:	4350      	muls	r0, r2
 800da48:	fb04 0003 	mla	r0, r4, r3, r0
 800da4c:	fba2 3404 	umull	r3, r4, r2, r4
 800da50:	1c5a      	adds	r2, r3, #1
 800da52:	4404      	add	r4, r0
 800da54:	f144 0000 	adc.w	r0, r4, #0
 800da58:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800da5c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800da60:	bd10      	pop	{r4, pc}
 800da62:	bf00      	nop
 800da64:	20000014 	.word	0x20000014
 800da68:	08011868 	.word	0x08011868
 800da6c:	0801187f 	.word	0x0801187f
 800da70:	abcd330e 	.word	0xabcd330e
 800da74:	e66d1234 	.word	0xe66d1234
 800da78:	0005deec 	.word	0x0005deec
 800da7c:	5851f42d 	.word	0x5851f42d
 800da80:	4c957f2d 	.word	0x4c957f2d

0800da84 <siprintf>:
 800da84:	b40e      	push	{r1, r2, r3}
 800da86:	b500      	push	{lr}
 800da88:	b09c      	sub	sp, #112	; 0x70
 800da8a:	ab1d      	add	r3, sp, #116	; 0x74
 800da8c:	9002      	str	r0, [sp, #8]
 800da8e:	9006      	str	r0, [sp, #24]
 800da90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800da94:	4809      	ldr	r0, [pc, #36]	; (800dabc <siprintf+0x38>)
 800da96:	9107      	str	r1, [sp, #28]
 800da98:	9104      	str	r1, [sp, #16]
 800da9a:	4909      	ldr	r1, [pc, #36]	; (800dac0 <siprintf+0x3c>)
 800da9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800daa0:	9105      	str	r1, [sp, #20]
 800daa2:	6800      	ldr	r0, [r0, #0]
 800daa4:	9301      	str	r3, [sp, #4]
 800daa6:	a902      	add	r1, sp, #8
 800daa8:	f000 fa42 	bl	800df30 <_svfiprintf_r>
 800daac:	9b02      	ldr	r3, [sp, #8]
 800daae:	2200      	movs	r2, #0
 800dab0:	701a      	strb	r2, [r3, #0]
 800dab2:	b01c      	add	sp, #112	; 0x70
 800dab4:	f85d eb04 	ldr.w	lr, [sp], #4
 800dab8:	b003      	add	sp, #12
 800daba:	4770      	bx	lr
 800dabc:	20000014 	.word	0x20000014
 800dac0:	ffff0208 	.word	0xffff0208

0800dac4 <__assert_func>:
 800dac4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dac6:	4614      	mov	r4, r2
 800dac8:	461a      	mov	r2, r3
 800daca:	4b09      	ldr	r3, [pc, #36]	; (800daf0 <__assert_func+0x2c>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	4605      	mov	r5, r0
 800dad0:	68d8      	ldr	r0, [r3, #12]
 800dad2:	b14c      	cbz	r4, 800dae8 <__assert_func+0x24>
 800dad4:	4b07      	ldr	r3, [pc, #28]	; (800daf4 <__assert_func+0x30>)
 800dad6:	9100      	str	r1, [sp, #0]
 800dad8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dadc:	4906      	ldr	r1, [pc, #24]	; (800daf8 <__assert_func+0x34>)
 800dade:	462b      	mov	r3, r5
 800dae0:	f000 f8e4 	bl	800dcac <fiprintf>
 800dae4:	f000 ff38 	bl	800e958 <abort>
 800dae8:	4b04      	ldr	r3, [pc, #16]	; (800dafc <__assert_func+0x38>)
 800daea:	461c      	mov	r4, r3
 800daec:	e7f3      	b.n	800dad6 <__assert_func+0x12>
 800daee:	bf00      	nop
 800daf0:	20000014 	.word	0x20000014
 800daf4:	080118de 	.word	0x080118de
 800daf8:	080118eb 	.word	0x080118eb
 800dafc:	08011919 	.word	0x08011919

0800db00 <std>:
 800db00:	2300      	movs	r3, #0
 800db02:	b510      	push	{r4, lr}
 800db04:	4604      	mov	r4, r0
 800db06:	e9c0 3300 	strd	r3, r3, [r0]
 800db0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800db0e:	6083      	str	r3, [r0, #8]
 800db10:	8181      	strh	r1, [r0, #12]
 800db12:	6643      	str	r3, [r0, #100]	; 0x64
 800db14:	81c2      	strh	r2, [r0, #14]
 800db16:	6183      	str	r3, [r0, #24]
 800db18:	4619      	mov	r1, r3
 800db1a:	2208      	movs	r2, #8
 800db1c:	305c      	adds	r0, #92	; 0x5c
 800db1e:	f7ff ff51 	bl	800d9c4 <memset>
 800db22:	4b05      	ldr	r3, [pc, #20]	; (800db38 <std+0x38>)
 800db24:	6263      	str	r3, [r4, #36]	; 0x24
 800db26:	4b05      	ldr	r3, [pc, #20]	; (800db3c <std+0x3c>)
 800db28:	62a3      	str	r3, [r4, #40]	; 0x28
 800db2a:	4b05      	ldr	r3, [pc, #20]	; (800db40 <std+0x40>)
 800db2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800db2e:	4b05      	ldr	r3, [pc, #20]	; (800db44 <std+0x44>)
 800db30:	6224      	str	r4, [r4, #32]
 800db32:	6323      	str	r3, [r4, #48]	; 0x30
 800db34:	bd10      	pop	{r4, pc}
 800db36:	bf00      	nop
 800db38:	0800e72d 	.word	0x0800e72d
 800db3c:	0800e74f 	.word	0x0800e74f
 800db40:	0800e787 	.word	0x0800e787
 800db44:	0800e7ab 	.word	0x0800e7ab

0800db48 <_cleanup_r>:
 800db48:	4901      	ldr	r1, [pc, #4]	; (800db50 <_cleanup_r+0x8>)
 800db4a:	f000 b8c1 	b.w	800dcd0 <_fwalk_reent>
 800db4e:	bf00      	nop
 800db50:	0800ea95 	.word	0x0800ea95

0800db54 <__sfmoreglue>:
 800db54:	b570      	push	{r4, r5, r6, lr}
 800db56:	1e4a      	subs	r2, r1, #1
 800db58:	2568      	movs	r5, #104	; 0x68
 800db5a:	4355      	muls	r5, r2
 800db5c:	460e      	mov	r6, r1
 800db5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800db62:	f000 f92f 	bl	800ddc4 <_malloc_r>
 800db66:	4604      	mov	r4, r0
 800db68:	b140      	cbz	r0, 800db7c <__sfmoreglue+0x28>
 800db6a:	2100      	movs	r1, #0
 800db6c:	e9c0 1600 	strd	r1, r6, [r0]
 800db70:	300c      	adds	r0, #12
 800db72:	60a0      	str	r0, [r4, #8]
 800db74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800db78:	f7ff ff24 	bl	800d9c4 <memset>
 800db7c:	4620      	mov	r0, r4
 800db7e:	bd70      	pop	{r4, r5, r6, pc}

0800db80 <__sfp_lock_acquire>:
 800db80:	4801      	ldr	r0, [pc, #4]	; (800db88 <__sfp_lock_acquire+0x8>)
 800db82:	f000 b8c5 	b.w	800dd10 <__retarget_lock_acquire_recursive>
 800db86:	bf00      	nop
 800db88:	20008a84 	.word	0x20008a84

0800db8c <__sfp_lock_release>:
 800db8c:	4801      	ldr	r0, [pc, #4]	; (800db94 <__sfp_lock_release+0x8>)
 800db8e:	f000 b8c0 	b.w	800dd12 <__retarget_lock_release_recursive>
 800db92:	bf00      	nop
 800db94:	20008a84 	.word	0x20008a84

0800db98 <__sinit_lock_acquire>:
 800db98:	4801      	ldr	r0, [pc, #4]	; (800dba0 <__sinit_lock_acquire+0x8>)
 800db9a:	f000 b8b9 	b.w	800dd10 <__retarget_lock_acquire_recursive>
 800db9e:	bf00      	nop
 800dba0:	20008a7f 	.word	0x20008a7f

0800dba4 <__sinit_lock_release>:
 800dba4:	4801      	ldr	r0, [pc, #4]	; (800dbac <__sinit_lock_release+0x8>)
 800dba6:	f000 b8b4 	b.w	800dd12 <__retarget_lock_release_recursive>
 800dbaa:	bf00      	nop
 800dbac:	20008a7f 	.word	0x20008a7f

0800dbb0 <__sinit>:
 800dbb0:	b510      	push	{r4, lr}
 800dbb2:	4604      	mov	r4, r0
 800dbb4:	f7ff fff0 	bl	800db98 <__sinit_lock_acquire>
 800dbb8:	69a3      	ldr	r3, [r4, #24]
 800dbba:	b11b      	cbz	r3, 800dbc4 <__sinit+0x14>
 800dbbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbc0:	f7ff bff0 	b.w	800dba4 <__sinit_lock_release>
 800dbc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dbc8:	6523      	str	r3, [r4, #80]	; 0x50
 800dbca:	4b13      	ldr	r3, [pc, #76]	; (800dc18 <__sinit+0x68>)
 800dbcc:	4a13      	ldr	r2, [pc, #76]	; (800dc1c <__sinit+0x6c>)
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	62a2      	str	r2, [r4, #40]	; 0x28
 800dbd2:	42a3      	cmp	r3, r4
 800dbd4:	bf04      	itt	eq
 800dbd6:	2301      	moveq	r3, #1
 800dbd8:	61a3      	streq	r3, [r4, #24]
 800dbda:	4620      	mov	r0, r4
 800dbdc:	f000 f820 	bl	800dc20 <__sfp>
 800dbe0:	6060      	str	r0, [r4, #4]
 800dbe2:	4620      	mov	r0, r4
 800dbe4:	f000 f81c 	bl	800dc20 <__sfp>
 800dbe8:	60a0      	str	r0, [r4, #8]
 800dbea:	4620      	mov	r0, r4
 800dbec:	f000 f818 	bl	800dc20 <__sfp>
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	60e0      	str	r0, [r4, #12]
 800dbf4:	2104      	movs	r1, #4
 800dbf6:	6860      	ldr	r0, [r4, #4]
 800dbf8:	f7ff ff82 	bl	800db00 <std>
 800dbfc:	68a0      	ldr	r0, [r4, #8]
 800dbfe:	2201      	movs	r2, #1
 800dc00:	2109      	movs	r1, #9
 800dc02:	f7ff ff7d 	bl	800db00 <std>
 800dc06:	68e0      	ldr	r0, [r4, #12]
 800dc08:	2202      	movs	r2, #2
 800dc0a:	2112      	movs	r1, #18
 800dc0c:	f7ff ff78 	bl	800db00 <std>
 800dc10:	2301      	movs	r3, #1
 800dc12:	61a3      	str	r3, [r4, #24]
 800dc14:	e7d2      	b.n	800dbbc <__sinit+0xc>
 800dc16:	bf00      	nop
 800dc18:	08011864 	.word	0x08011864
 800dc1c:	0800db49 	.word	0x0800db49

0800dc20 <__sfp>:
 800dc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc22:	4607      	mov	r7, r0
 800dc24:	f7ff ffac 	bl	800db80 <__sfp_lock_acquire>
 800dc28:	4b1e      	ldr	r3, [pc, #120]	; (800dca4 <__sfp+0x84>)
 800dc2a:	681e      	ldr	r6, [r3, #0]
 800dc2c:	69b3      	ldr	r3, [r6, #24]
 800dc2e:	b913      	cbnz	r3, 800dc36 <__sfp+0x16>
 800dc30:	4630      	mov	r0, r6
 800dc32:	f7ff ffbd 	bl	800dbb0 <__sinit>
 800dc36:	3648      	adds	r6, #72	; 0x48
 800dc38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dc3c:	3b01      	subs	r3, #1
 800dc3e:	d503      	bpl.n	800dc48 <__sfp+0x28>
 800dc40:	6833      	ldr	r3, [r6, #0]
 800dc42:	b30b      	cbz	r3, 800dc88 <__sfp+0x68>
 800dc44:	6836      	ldr	r6, [r6, #0]
 800dc46:	e7f7      	b.n	800dc38 <__sfp+0x18>
 800dc48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dc4c:	b9d5      	cbnz	r5, 800dc84 <__sfp+0x64>
 800dc4e:	4b16      	ldr	r3, [pc, #88]	; (800dca8 <__sfp+0x88>)
 800dc50:	60e3      	str	r3, [r4, #12]
 800dc52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dc56:	6665      	str	r5, [r4, #100]	; 0x64
 800dc58:	f000 f859 	bl	800dd0e <__retarget_lock_init_recursive>
 800dc5c:	f7ff ff96 	bl	800db8c <__sfp_lock_release>
 800dc60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dc64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dc68:	6025      	str	r5, [r4, #0]
 800dc6a:	61a5      	str	r5, [r4, #24]
 800dc6c:	2208      	movs	r2, #8
 800dc6e:	4629      	mov	r1, r5
 800dc70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dc74:	f7ff fea6 	bl	800d9c4 <memset>
 800dc78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dc7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dc80:	4620      	mov	r0, r4
 800dc82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc84:	3468      	adds	r4, #104	; 0x68
 800dc86:	e7d9      	b.n	800dc3c <__sfp+0x1c>
 800dc88:	2104      	movs	r1, #4
 800dc8a:	4638      	mov	r0, r7
 800dc8c:	f7ff ff62 	bl	800db54 <__sfmoreglue>
 800dc90:	4604      	mov	r4, r0
 800dc92:	6030      	str	r0, [r6, #0]
 800dc94:	2800      	cmp	r0, #0
 800dc96:	d1d5      	bne.n	800dc44 <__sfp+0x24>
 800dc98:	f7ff ff78 	bl	800db8c <__sfp_lock_release>
 800dc9c:	230c      	movs	r3, #12
 800dc9e:	603b      	str	r3, [r7, #0]
 800dca0:	e7ee      	b.n	800dc80 <__sfp+0x60>
 800dca2:	bf00      	nop
 800dca4:	08011864 	.word	0x08011864
 800dca8:	ffff0001 	.word	0xffff0001

0800dcac <fiprintf>:
 800dcac:	b40e      	push	{r1, r2, r3}
 800dcae:	b503      	push	{r0, r1, lr}
 800dcb0:	4601      	mov	r1, r0
 800dcb2:	ab03      	add	r3, sp, #12
 800dcb4:	4805      	ldr	r0, [pc, #20]	; (800dccc <fiprintf+0x20>)
 800dcb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcba:	6800      	ldr	r0, [r0, #0]
 800dcbc:	9301      	str	r3, [sp, #4]
 800dcbe:	f000 fa61 	bl	800e184 <_vfiprintf_r>
 800dcc2:	b002      	add	sp, #8
 800dcc4:	f85d eb04 	ldr.w	lr, [sp], #4
 800dcc8:	b003      	add	sp, #12
 800dcca:	4770      	bx	lr
 800dccc:	20000014 	.word	0x20000014

0800dcd0 <_fwalk_reent>:
 800dcd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcd4:	4606      	mov	r6, r0
 800dcd6:	4688      	mov	r8, r1
 800dcd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dcdc:	2700      	movs	r7, #0
 800dcde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dce2:	f1b9 0901 	subs.w	r9, r9, #1
 800dce6:	d505      	bpl.n	800dcf4 <_fwalk_reent+0x24>
 800dce8:	6824      	ldr	r4, [r4, #0]
 800dcea:	2c00      	cmp	r4, #0
 800dcec:	d1f7      	bne.n	800dcde <_fwalk_reent+0xe>
 800dcee:	4638      	mov	r0, r7
 800dcf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcf4:	89ab      	ldrh	r3, [r5, #12]
 800dcf6:	2b01      	cmp	r3, #1
 800dcf8:	d907      	bls.n	800dd0a <_fwalk_reent+0x3a>
 800dcfa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dcfe:	3301      	adds	r3, #1
 800dd00:	d003      	beq.n	800dd0a <_fwalk_reent+0x3a>
 800dd02:	4629      	mov	r1, r5
 800dd04:	4630      	mov	r0, r6
 800dd06:	47c0      	blx	r8
 800dd08:	4307      	orrs	r7, r0
 800dd0a:	3568      	adds	r5, #104	; 0x68
 800dd0c:	e7e9      	b.n	800dce2 <_fwalk_reent+0x12>

0800dd0e <__retarget_lock_init_recursive>:
 800dd0e:	4770      	bx	lr

0800dd10 <__retarget_lock_acquire_recursive>:
 800dd10:	4770      	bx	lr

0800dd12 <__retarget_lock_release_recursive>:
 800dd12:	4770      	bx	lr

0800dd14 <malloc>:
 800dd14:	4b02      	ldr	r3, [pc, #8]	; (800dd20 <malloc+0xc>)
 800dd16:	4601      	mov	r1, r0
 800dd18:	6818      	ldr	r0, [r3, #0]
 800dd1a:	f000 b853 	b.w	800ddc4 <_malloc_r>
 800dd1e:	bf00      	nop
 800dd20:	20000014 	.word	0x20000014

0800dd24 <_free_r>:
 800dd24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dd26:	2900      	cmp	r1, #0
 800dd28:	d048      	beq.n	800ddbc <_free_r+0x98>
 800dd2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd2e:	9001      	str	r0, [sp, #4]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	f1a1 0404 	sub.w	r4, r1, #4
 800dd36:	bfb8      	it	lt
 800dd38:	18e4      	addlt	r4, r4, r3
 800dd3a:	f000 ff5d 	bl	800ebf8 <__malloc_lock>
 800dd3e:	4a20      	ldr	r2, [pc, #128]	; (800ddc0 <_free_r+0x9c>)
 800dd40:	9801      	ldr	r0, [sp, #4]
 800dd42:	6813      	ldr	r3, [r2, #0]
 800dd44:	4615      	mov	r5, r2
 800dd46:	b933      	cbnz	r3, 800dd56 <_free_r+0x32>
 800dd48:	6063      	str	r3, [r4, #4]
 800dd4a:	6014      	str	r4, [r2, #0]
 800dd4c:	b003      	add	sp, #12
 800dd4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dd52:	f000 bf57 	b.w	800ec04 <__malloc_unlock>
 800dd56:	42a3      	cmp	r3, r4
 800dd58:	d90b      	bls.n	800dd72 <_free_r+0x4e>
 800dd5a:	6821      	ldr	r1, [r4, #0]
 800dd5c:	1862      	adds	r2, r4, r1
 800dd5e:	4293      	cmp	r3, r2
 800dd60:	bf04      	itt	eq
 800dd62:	681a      	ldreq	r2, [r3, #0]
 800dd64:	685b      	ldreq	r3, [r3, #4]
 800dd66:	6063      	str	r3, [r4, #4]
 800dd68:	bf04      	itt	eq
 800dd6a:	1852      	addeq	r2, r2, r1
 800dd6c:	6022      	streq	r2, [r4, #0]
 800dd6e:	602c      	str	r4, [r5, #0]
 800dd70:	e7ec      	b.n	800dd4c <_free_r+0x28>
 800dd72:	461a      	mov	r2, r3
 800dd74:	685b      	ldr	r3, [r3, #4]
 800dd76:	b10b      	cbz	r3, 800dd7c <_free_r+0x58>
 800dd78:	42a3      	cmp	r3, r4
 800dd7a:	d9fa      	bls.n	800dd72 <_free_r+0x4e>
 800dd7c:	6811      	ldr	r1, [r2, #0]
 800dd7e:	1855      	adds	r5, r2, r1
 800dd80:	42a5      	cmp	r5, r4
 800dd82:	d10b      	bne.n	800dd9c <_free_r+0x78>
 800dd84:	6824      	ldr	r4, [r4, #0]
 800dd86:	4421      	add	r1, r4
 800dd88:	1854      	adds	r4, r2, r1
 800dd8a:	42a3      	cmp	r3, r4
 800dd8c:	6011      	str	r1, [r2, #0]
 800dd8e:	d1dd      	bne.n	800dd4c <_free_r+0x28>
 800dd90:	681c      	ldr	r4, [r3, #0]
 800dd92:	685b      	ldr	r3, [r3, #4]
 800dd94:	6053      	str	r3, [r2, #4]
 800dd96:	4421      	add	r1, r4
 800dd98:	6011      	str	r1, [r2, #0]
 800dd9a:	e7d7      	b.n	800dd4c <_free_r+0x28>
 800dd9c:	d902      	bls.n	800dda4 <_free_r+0x80>
 800dd9e:	230c      	movs	r3, #12
 800dda0:	6003      	str	r3, [r0, #0]
 800dda2:	e7d3      	b.n	800dd4c <_free_r+0x28>
 800dda4:	6825      	ldr	r5, [r4, #0]
 800dda6:	1961      	adds	r1, r4, r5
 800dda8:	428b      	cmp	r3, r1
 800ddaa:	bf04      	itt	eq
 800ddac:	6819      	ldreq	r1, [r3, #0]
 800ddae:	685b      	ldreq	r3, [r3, #4]
 800ddb0:	6063      	str	r3, [r4, #4]
 800ddb2:	bf04      	itt	eq
 800ddb4:	1949      	addeq	r1, r1, r5
 800ddb6:	6021      	streq	r1, [r4, #0]
 800ddb8:	6054      	str	r4, [r2, #4]
 800ddba:	e7c7      	b.n	800dd4c <_free_r+0x28>
 800ddbc:	b003      	add	sp, #12
 800ddbe:	bd30      	pop	{r4, r5, pc}
 800ddc0:	20000218 	.word	0x20000218

0800ddc4 <_malloc_r>:
 800ddc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddc6:	1ccd      	adds	r5, r1, #3
 800ddc8:	f025 0503 	bic.w	r5, r5, #3
 800ddcc:	3508      	adds	r5, #8
 800ddce:	2d0c      	cmp	r5, #12
 800ddd0:	bf38      	it	cc
 800ddd2:	250c      	movcc	r5, #12
 800ddd4:	2d00      	cmp	r5, #0
 800ddd6:	4606      	mov	r6, r0
 800ddd8:	db01      	blt.n	800ddde <_malloc_r+0x1a>
 800ddda:	42a9      	cmp	r1, r5
 800dddc:	d903      	bls.n	800dde6 <_malloc_r+0x22>
 800ddde:	230c      	movs	r3, #12
 800dde0:	6033      	str	r3, [r6, #0]
 800dde2:	2000      	movs	r0, #0
 800dde4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dde6:	f000 ff07 	bl	800ebf8 <__malloc_lock>
 800ddea:	4921      	ldr	r1, [pc, #132]	; (800de70 <_malloc_r+0xac>)
 800ddec:	680a      	ldr	r2, [r1, #0]
 800ddee:	4614      	mov	r4, r2
 800ddf0:	b99c      	cbnz	r4, 800de1a <_malloc_r+0x56>
 800ddf2:	4f20      	ldr	r7, [pc, #128]	; (800de74 <_malloc_r+0xb0>)
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	b923      	cbnz	r3, 800de02 <_malloc_r+0x3e>
 800ddf8:	4621      	mov	r1, r4
 800ddfa:	4630      	mov	r0, r6
 800ddfc:	f000 fc86 	bl	800e70c <_sbrk_r>
 800de00:	6038      	str	r0, [r7, #0]
 800de02:	4629      	mov	r1, r5
 800de04:	4630      	mov	r0, r6
 800de06:	f000 fc81 	bl	800e70c <_sbrk_r>
 800de0a:	1c43      	adds	r3, r0, #1
 800de0c:	d123      	bne.n	800de56 <_malloc_r+0x92>
 800de0e:	230c      	movs	r3, #12
 800de10:	6033      	str	r3, [r6, #0]
 800de12:	4630      	mov	r0, r6
 800de14:	f000 fef6 	bl	800ec04 <__malloc_unlock>
 800de18:	e7e3      	b.n	800dde2 <_malloc_r+0x1e>
 800de1a:	6823      	ldr	r3, [r4, #0]
 800de1c:	1b5b      	subs	r3, r3, r5
 800de1e:	d417      	bmi.n	800de50 <_malloc_r+0x8c>
 800de20:	2b0b      	cmp	r3, #11
 800de22:	d903      	bls.n	800de2c <_malloc_r+0x68>
 800de24:	6023      	str	r3, [r4, #0]
 800de26:	441c      	add	r4, r3
 800de28:	6025      	str	r5, [r4, #0]
 800de2a:	e004      	b.n	800de36 <_malloc_r+0x72>
 800de2c:	6863      	ldr	r3, [r4, #4]
 800de2e:	42a2      	cmp	r2, r4
 800de30:	bf0c      	ite	eq
 800de32:	600b      	streq	r3, [r1, #0]
 800de34:	6053      	strne	r3, [r2, #4]
 800de36:	4630      	mov	r0, r6
 800de38:	f000 fee4 	bl	800ec04 <__malloc_unlock>
 800de3c:	f104 000b 	add.w	r0, r4, #11
 800de40:	1d23      	adds	r3, r4, #4
 800de42:	f020 0007 	bic.w	r0, r0, #7
 800de46:	1ac2      	subs	r2, r0, r3
 800de48:	d0cc      	beq.n	800dde4 <_malloc_r+0x20>
 800de4a:	1a1b      	subs	r3, r3, r0
 800de4c:	50a3      	str	r3, [r4, r2]
 800de4e:	e7c9      	b.n	800dde4 <_malloc_r+0x20>
 800de50:	4622      	mov	r2, r4
 800de52:	6864      	ldr	r4, [r4, #4]
 800de54:	e7cc      	b.n	800ddf0 <_malloc_r+0x2c>
 800de56:	1cc4      	adds	r4, r0, #3
 800de58:	f024 0403 	bic.w	r4, r4, #3
 800de5c:	42a0      	cmp	r0, r4
 800de5e:	d0e3      	beq.n	800de28 <_malloc_r+0x64>
 800de60:	1a21      	subs	r1, r4, r0
 800de62:	4630      	mov	r0, r6
 800de64:	f000 fc52 	bl	800e70c <_sbrk_r>
 800de68:	3001      	adds	r0, #1
 800de6a:	d1dd      	bne.n	800de28 <_malloc_r+0x64>
 800de6c:	e7cf      	b.n	800de0e <_malloc_r+0x4a>
 800de6e:	bf00      	nop
 800de70:	20000218 	.word	0x20000218
 800de74:	2000021c 	.word	0x2000021c

0800de78 <__ssputs_r>:
 800de78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de7c:	688e      	ldr	r6, [r1, #8]
 800de7e:	429e      	cmp	r6, r3
 800de80:	4682      	mov	sl, r0
 800de82:	460c      	mov	r4, r1
 800de84:	4690      	mov	r8, r2
 800de86:	461f      	mov	r7, r3
 800de88:	d838      	bhi.n	800defc <__ssputs_r+0x84>
 800de8a:	898a      	ldrh	r2, [r1, #12]
 800de8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800de90:	d032      	beq.n	800def8 <__ssputs_r+0x80>
 800de92:	6825      	ldr	r5, [r4, #0]
 800de94:	6909      	ldr	r1, [r1, #16]
 800de96:	eba5 0901 	sub.w	r9, r5, r1
 800de9a:	6965      	ldr	r5, [r4, #20]
 800de9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dea0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dea4:	3301      	adds	r3, #1
 800dea6:	444b      	add	r3, r9
 800dea8:	106d      	asrs	r5, r5, #1
 800deaa:	429d      	cmp	r5, r3
 800deac:	bf38      	it	cc
 800deae:	461d      	movcc	r5, r3
 800deb0:	0553      	lsls	r3, r2, #21
 800deb2:	d531      	bpl.n	800df18 <__ssputs_r+0xa0>
 800deb4:	4629      	mov	r1, r5
 800deb6:	f7ff ff85 	bl	800ddc4 <_malloc_r>
 800deba:	4606      	mov	r6, r0
 800debc:	b950      	cbnz	r0, 800ded4 <__ssputs_r+0x5c>
 800debe:	230c      	movs	r3, #12
 800dec0:	f8ca 3000 	str.w	r3, [sl]
 800dec4:	89a3      	ldrh	r3, [r4, #12]
 800dec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800deca:	81a3      	strh	r3, [r4, #12]
 800decc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ded0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ded4:	6921      	ldr	r1, [r4, #16]
 800ded6:	464a      	mov	r2, r9
 800ded8:	f7ff fd4c 	bl	800d974 <memcpy>
 800dedc:	89a3      	ldrh	r3, [r4, #12]
 800dede:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dee6:	81a3      	strh	r3, [r4, #12]
 800dee8:	6126      	str	r6, [r4, #16]
 800deea:	6165      	str	r5, [r4, #20]
 800deec:	444e      	add	r6, r9
 800deee:	eba5 0509 	sub.w	r5, r5, r9
 800def2:	6026      	str	r6, [r4, #0]
 800def4:	60a5      	str	r5, [r4, #8]
 800def6:	463e      	mov	r6, r7
 800def8:	42be      	cmp	r6, r7
 800defa:	d900      	bls.n	800defe <__ssputs_r+0x86>
 800defc:	463e      	mov	r6, r7
 800defe:	4632      	mov	r2, r6
 800df00:	6820      	ldr	r0, [r4, #0]
 800df02:	4641      	mov	r1, r8
 800df04:	f7ff fd44 	bl	800d990 <memmove>
 800df08:	68a3      	ldr	r3, [r4, #8]
 800df0a:	6822      	ldr	r2, [r4, #0]
 800df0c:	1b9b      	subs	r3, r3, r6
 800df0e:	4432      	add	r2, r6
 800df10:	60a3      	str	r3, [r4, #8]
 800df12:	6022      	str	r2, [r4, #0]
 800df14:	2000      	movs	r0, #0
 800df16:	e7db      	b.n	800ded0 <__ssputs_r+0x58>
 800df18:	462a      	mov	r2, r5
 800df1a:	f000 fe79 	bl	800ec10 <_realloc_r>
 800df1e:	4606      	mov	r6, r0
 800df20:	2800      	cmp	r0, #0
 800df22:	d1e1      	bne.n	800dee8 <__ssputs_r+0x70>
 800df24:	6921      	ldr	r1, [r4, #16]
 800df26:	4650      	mov	r0, sl
 800df28:	f7ff fefc 	bl	800dd24 <_free_r>
 800df2c:	e7c7      	b.n	800debe <__ssputs_r+0x46>
	...

0800df30 <_svfiprintf_r>:
 800df30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df34:	4698      	mov	r8, r3
 800df36:	898b      	ldrh	r3, [r1, #12]
 800df38:	061b      	lsls	r3, r3, #24
 800df3a:	b09d      	sub	sp, #116	; 0x74
 800df3c:	4607      	mov	r7, r0
 800df3e:	460d      	mov	r5, r1
 800df40:	4614      	mov	r4, r2
 800df42:	d50e      	bpl.n	800df62 <_svfiprintf_r+0x32>
 800df44:	690b      	ldr	r3, [r1, #16]
 800df46:	b963      	cbnz	r3, 800df62 <_svfiprintf_r+0x32>
 800df48:	2140      	movs	r1, #64	; 0x40
 800df4a:	f7ff ff3b 	bl	800ddc4 <_malloc_r>
 800df4e:	6028      	str	r0, [r5, #0]
 800df50:	6128      	str	r0, [r5, #16]
 800df52:	b920      	cbnz	r0, 800df5e <_svfiprintf_r+0x2e>
 800df54:	230c      	movs	r3, #12
 800df56:	603b      	str	r3, [r7, #0]
 800df58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df5c:	e0d1      	b.n	800e102 <_svfiprintf_r+0x1d2>
 800df5e:	2340      	movs	r3, #64	; 0x40
 800df60:	616b      	str	r3, [r5, #20]
 800df62:	2300      	movs	r3, #0
 800df64:	9309      	str	r3, [sp, #36]	; 0x24
 800df66:	2320      	movs	r3, #32
 800df68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800df6c:	f8cd 800c 	str.w	r8, [sp, #12]
 800df70:	2330      	movs	r3, #48	; 0x30
 800df72:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e11c <_svfiprintf_r+0x1ec>
 800df76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800df7a:	f04f 0901 	mov.w	r9, #1
 800df7e:	4623      	mov	r3, r4
 800df80:	469a      	mov	sl, r3
 800df82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df86:	b10a      	cbz	r2, 800df8c <_svfiprintf_r+0x5c>
 800df88:	2a25      	cmp	r2, #37	; 0x25
 800df8a:	d1f9      	bne.n	800df80 <_svfiprintf_r+0x50>
 800df8c:	ebba 0b04 	subs.w	fp, sl, r4
 800df90:	d00b      	beq.n	800dfaa <_svfiprintf_r+0x7a>
 800df92:	465b      	mov	r3, fp
 800df94:	4622      	mov	r2, r4
 800df96:	4629      	mov	r1, r5
 800df98:	4638      	mov	r0, r7
 800df9a:	f7ff ff6d 	bl	800de78 <__ssputs_r>
 800df9e:	3001      	adds	r0, #1
 800dfa0:	f000 80aa 	beq.w	800e0f8 <_svfiprintf_r+0x1c8>
 800dfa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dfa6:	445a      	add	r2, fp
 800dfa8:	9209      	str	r2, [sp, #36]	; 0x24
 800dfaa:	f89a 3000 	ldrb.w	r3, [sl]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	f000 80a2 	beq.w	800e0f8 <_svfiprintf_r+0x1c8>
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dfba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dfbe:	f10a 0a01 	add.w	sl, sl, #1
 800dfc2:	9304      	str	r3, [sp, #16]
 800dfc4:	9307      	str	r3, [sp, #28]
 800dfc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dfca:	931a      	str	r3, [sp, #104]	; 0x68
 800dfcc:	4654      	mov	r4, sl
 800dfce:	2205      	movs	r2, #5
 800dfd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfd4:	4851      	ldr	r0, [pc, #324]	; (800e11c <_svfiprintf_r+0x1ec>)
 800dfd6:	f7f2 f8fb 	bl	80001d0 <memchr>
 800dfda:	9a04      	ldr	r2, [sp, #16]
 800dfdc:	b9d8      	cbnz	r0, 800e016 <_svfiprintf_r+0xe6>
 800dfde:	06d0      	lsls	r0, r2, #27
 800dfe0:	bf44      	itt	mi
 800dfe2:	2320      	movmi	r3, #32
 800dfe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dfe8:	0711      	lsls	r1, r2, #28
 800dfea:	bf44      	itt	mi
 800dfec:	232b      	movmi	r3, #43	; 0x2b
 800dfee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dff2:	f89a 3000 	ldrb.w	r3, [sl]
 800dff6:	2b2a      	cmp	r3, #42	; 0x2a
 800dff8:	d015      	beq.n	800e026 <_svfiprintf_r+0xf6>
 800dffa:	9a07      	ldr	r2, [sp, #28]
 800dffc:	4654      	mov	r4, sl
 800dffe:	2000      	movs	r0, #0
 800e000:	f04f 0c0a 	mov.w	ip, #10
 800e004:	4621      	mov	r1, r4
 800e006:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e00a:	3b30      	subs	r3, #48	; 0x30
 800e00c:	2b09      	cmp	r3, #9
 800e00e:	d94e      	bls.n	800e0ae <_svfiprintf_r+0x17e>
 800e010:	b1b0      	cbz	r0, 800e040 <_svfiprintf_r+0x110>
 800e012:	9207      	str	r2, [sp, #28]
 800e014:	e014      	b.n	800e040 <_svfiprintf_r+0x110>
 800e016:	eba0 0308 	sub.w	r3, r0, r8
 800e01a:	fa09 f303 	lsl.w	r3, r9, r3
 800e01e:	4313      	orrs	r3, r2
 800e020:	9304      	str	r3, [sp, #16]
 800e022:	46a2      	mov	sl, r4
 800e024:	e7d2      	b.n	800dfcc <_svfiprintf_r+0x9c>
 800e026:	9b03      	ldr	r3, [sp, #12]
 800e028:	1d19      	adds	r1, r3, #4
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	9103      	str	r1, [sp, #12]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	bfbb      	ittet	lt
 800e032:	425b      	neglt	r3, r3
 800e034:	f042 0202 	orrlt.w	r2, r2, #2
 800e038:	9307      	strge	r3, [sp, #28]
 800e03a:	9307      	strlt	r3, [sp, #28]
 800e03c:	bfb8      	it	lt
 800e03e:	9204      	strlt	r2, [sp, #16]
 800e040:	7823      	ldrb	r3, [r4, #0]
 800e042:	2b2e      	cmp	r3, #46	; 0x2e
 800e044:	d10c      	bne.n	800e060 <_svfiprintf_r+0x130>
 800e046:	7863      	ldrb	r3, [r4, #1]
 800e048:	2b2a      	cmp	r3, #42	; 0x2a
 800e04a:	d135      	bne.n	800e0b8 <_svfiprintf_r+0x188>
 800e04c:	9b03      	ldr	r3, [sp, #12]
 800e04e:	1d1a      	adds	r2, r3, #4
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	9203      	str	r2, [sp, #12]
 800e054:	2b00      	cmp	r3, #0
 800e056:	bfb8      	it	lt
 800e058:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e05c:	3402      	adds	r4, #2
 800e05e:	9305      	str	r3, [sp, #20]
 800e060:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e12c <_svfiprintf_r+0x1fc>
 800e064:	7821      	ldrb	r1, [r4, #0]
 800e066:	2203      	movs	r2, #3
 800e068:	4650      	mov	r0, sl
 800e06a:	f7f2 f8b1 	bl	80001d0 <memchr>
 800e06e:	b140      	cbz	r0, 800e082 <_svfiprintf_r+0x152>
 800e070:	2340      	movs	r3, #64	; 0x40
 800e072:	eba0 000a 	sub.w	r0, r0, sl
 800e076:	fa03 f000 	lsl.w	r0, r3, r0
 800e07a:	9b04      	ldr	r3, [sp, #16]
 800e07c:	4303      	orrs	r3, r0
 800e07e:	3401      	adds	r4, #1
 800e080:	9304      	str	r3, [sp, #16]
 800e082:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e086:	4826      	ldr	r0, [pc, #152]	; (800e120 <_svfiprintf_r+0x1f0>)
 800e088:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e08c:	2206      	movs	r2, #6
 800e08e:	f7f2 f89f 	bl	80001d0 <memchr>
 800e092:	2800      	cmp	r0, #0
 800e094:	d038      	beq.n	800e108 <_svfiprintf_r+0x1d8>
 800e096:	4b23      	ldr	r3, [pc, #140]	; (800e124 <_svfiprintf_r+0x1f4>)
 800e098:	bb1b      	cbnz	r3, 800e0e2 <_svfiprintf_r+0x1b2>
 800e09a:	9b03      	ldr	r3, [sp, #12]
 800e09c:	3307      	adds	r3, #7
 800e09e:	f023 0307 	bic.w	r3, r3, #7
 800e0a2:	3308      	adds	r3, #8
 800e0a4:	9303      	str	r3, [sp, #12]
 800e0a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0a8:	4433      	add	r3, r6
 800e0aa:	9309      	str	r3, [sp, #36]	; 0x24
 800e0ac:	e767      	b.n	800df7e <_svfiprintf_r+0x4e>
 800e0ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800e0b2:	460c      	mov	r4, r1
 800e0b4:	2001      	movs	r0, #1
 800e0b6:	e7a5      	b.n	800e004 <_svfiprintf_r+0xd4>
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	3401      	adds	r4, #1
 800e0bc:	9305      	str	r3, [sp, #20]
 800e0be:	4619      	mov	r1, r3
 800e0c0:	f04f 0c0a 	mov.w	ip, #10
 800e0c4:	4620      	mov	r0, r4
 800e0c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0ca:	3a30      	subs	r2, #48	; 0x30
 800e0cc:	2a09      	cmp	r2, #9
 800e0ce:	d903      	bls.n	800e0d8 <_svfiprintf_r+0x1a8>
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d0c5      	beq.n	800e060 <_svfiprintf_r+0x130>
 800e0d4:	9105      	str	r1, [sp, #20]
 800e0d6:	e7c3      	b.n	800e060 <_svfiprintf_r+0x130>
 800e0d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e0dc:	4604      	mov	r4, r0
 800e0de:	2301      	movs	r3, #1
 800e0e0:	e7f0      	b.n	800e0c4 <_svfiprintf_r+0x194>
 800e0e2:	ab03      	add	r3, sp, #12
 800e0e4:	9300      	str	r3, [sp, #0]
 800e0e6:	462a      	mov	r2, r5
 800e0e8:	4b0f      	ldr	r3, [pc, #60]	; (800e128 <_svfiprintf_r+0x1f8>)
 800e0ea:	a904      	add	r1, sp, #16
 800e0ec:	4638      	mov	r0, r7
 800e0ee:	f3af 8000 	nop.w
 800e0f2:	1c42      	adds	r2, r0, #1
 800e0f4:	4606      	mov	r6, r0
 800e0f6:	d1d6      	bne.n	800e0a6 <_svfiprintf_r+0x176>
 800e0f8:	89ab      	ldrh	r3, [r5, #12]
 800e0fa:	065b      	lsls	r3, r3, #25
 800e0fc:	f53f af2c 	bmi.w	800df58 <_svfiprintf_r+0x28>
 800e100:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e102:	b01d      	add	sp, #116	; 0x74
 800e104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e108:	ab03      	add	r3, sp, #12
 800e10a:	9300      	str	r3, [sp, #0]
 800e10c:	462a      	mov	r2, r5
 800e10e:	4b06      	ldr	r3, [pc, #24]	; (800e128 <_svfiprintf_r+0x1f8>)
 800e110:	a904      	add	r1, sp, #16
 800e112:	4638      	mov	r0, r7
 800e114:	f000 f9d4 	bl	800e4c0 <_printf_i>
 800e118:	e7eb      	b.n	800e0f2 <_svfiprintf_r+0x1c2>
 800e11a:	bf00      	nop
 800e11c:	0801197c 	.word	0x0801197c
 800e120:	08011986 	.word	0x08011986
 800e124:	00000000 	.word	0x00000000
 800e128:	0800de79 	.word	0x0800de79
 800e12c:	08011982 	.word	0x08011982

0800e130 <__sfputc_r>:
 800e130:	6893      	ldr	r3, [r2, #8]
 800e132:	3b01      	subs	r3, #1
 800e134:	2b00      	cmp	r3, #0
 800e136:	b410      	push	{r4}
 800e138:	6093      	str	r3, [r2, #8]
 800e13a:	da08      	bge.n	800e14e <__sfputc_r+0x1e>
 800e13c:	6994      	ldr	r4, [r2, #24]
 800e13e:	42a3      	cmp	r3, r4
 800e140:	db01      	blt.n	800e146 <__sfputc_r+0x16>
 800e142:	290a      	cmp	r1, #10
 800e144:	d103      	bne.n	800e14e <__sfputc_r+0x1e>
 800e146:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e14a:	f000 bb33 	b.w	800e7b4 <__swbuf_r>
 800e14e:	6813      	ldr	r3, [r2, #0]
 800e150:	1c58      	adds	r0, r3, #1
 800e152:	6010      	str	r0, [r2, #0]
 800e154:	7019      	strb	r1, [r3, #0]
 800e156:	4608      	mov	r0, r1
 800e158:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e15c:	4770      	bx	lr

0800e15e <__sfputs_r>:
 800e15e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e160:	4606      	mov	r6, r0
 800e162:	460f      	mov	r7, r1
 800e164:	4614      	mov	r4, r2
 800e166:	18d5      	adds	r5, r2, r3
 800e168:	42ac      	cmp	r4, r5
 800e16a:	d101      	bne.n	800e170 <__sfputs_r+0x12>
 800e16c:	2000      	movs	r0, #0
 800e16e:	e007      	b.n	800e180 <__sfputs_r+0x22>
 800e170:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e174:	463a      	mov	r2, r7
 800e176:	4630      	mov	r0, r6
 800e178:	f7ff ffda 	bl	800e130 <__sfputc_r>
 800e17c:	1c43      	adds	r3, r0, #1
 800e17e:	d1f3      	bne.n	800e168 <__sfputs_r+0xa>
 800e180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e184 <_vfiprintf_r>:
 800e184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e188:	460d      	mov	r5, r1
 800e18a:	b09d      	sub	sp, #116	; 0x74
 800e18c:	4614      	mov	r4, r2
 800e18e:	4698      	mov	r8, r3
 800e190:	4606      	mov	r6, r0
 800e192:	b118      	cbz	r0, 800e19c <_vfiprintf_r+0x18>
 800e194:	6983      	ldr	r3, [r0, #24]
 800e196:	b90b      	cbnz	r3, 800e19c <_vfiprintf_r+0x18>
 800e198:	f7ff fd0a 	bl	800dbb0 <__sinit>
 800e19c:	4b89      	ldr	r3, [pc, #548]	; (800e3c4 <_vfiprintf_r+0x240>)
 800e19e:	429d      	cmp	r5, r3
 800e1a0:	d11b      	bne.n	800e1da <_vfiprintf_r+0x56>
 800e1a2:	6875      	ldr	r5, [r6, #4]
 800e1a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e1a6:	07d9      	lsls	r1, r3, #31
 800e1a8:	d405      	bmi.n	800e1b6 <_vfiprintf_r+0x32>
 800e1aa:	89ab      	ldrh	r3, [r5, #12]
 800e1ac:	059a      	lsls	r2, r3, #22
 800e1ae:	d402      	bmi.n	800e1b6 <_vfiprintf_r+0x32>
 800e1b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e1b2:	f7ff fdad 	bl	800dd10 <__retarget_lock_acquire_recursive>
 800e1b6:	89ab      	ldrh	r3, [r5, #12]
 800e1b8:	071b      	lsls	r3, r3, #28
 800e1ba:	d501      	bpl.n	800e1c0 <_vfiprintf_r+0x3c>
 800e1bc:	692b      	ldr	r3, [r5, #16]
 800e1be:	b9eb      	cbnz	r3, 800e1fc <_vfiprintf_r+0x78>
 800e1c0:	4629      	mov	r1, r5
 800e1c2:	4630      	mov	r0, r6
 800e1c4:	f000 fb5a 	bl	800e87c <__swsetup_r>
 800e1c8:	b1c0      	cbz	r0, 800e1fc <_vfiprintf_r+0x78>
 800e1ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e1cc:	07dc      	lsls	r4, r3, #31
 800e1ce:	d50e      	bpl.n	800e1ee <_vfiprintf_r+0x6a>
 800e1d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e1d4:	b01d      	add	sp, #116	; 0x74
 800e1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1da:	4b7b      	ldr	r3, [pc, #492]	; (800e3c8 <_vfiprintf_r+0x244>)
 800e1dc:	429d      	cmp	r5, r3
 800e1de:	d101      	bne.n	800e1e4 <_vfiprintf_r+0x60>
 800e1e0:	68b5      	ldr	r5, [r6, #8]
 800e1e2:	e7df      	b.n	800e1a4 <_vfiprintf_r+0x20>
 800e1e4:	4b79      	ldr	r3, [pc, #484]	; (800e3cc <_vfiprintf_r+0x248>)
 800e1e6:	429d      	cmp	r5, r3
 800e1e8:	bf08      	it	eq
 800e1ea:	68f5      	ldreq	r5, [r6, #12]
 800e1ec:	e7da      	b.n	800e1a4 <_vfiprintf_r+0x20>
 800e1ee:	89ab      	ldrh	r3, [r5, #12]
 800e1f0:	0598      	lsls	r0, r3, #22
 800e1f2:	d4ed      	bmi.n	800e1d0 <_vfiprintf_r+0x4c>
 800e1f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e1f6:	f7ff fd8c 	bl	800dd12 <__retarget_lock_release_recursive>
 800e1fa:	e7e9      	b.n	800e1d0 <_vfiprintf_r+0x4c>
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	9309      	str	r3, [sp, #36]	; 0x24
 800e200:	2320      	movs	r3, #32
 800e202:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e206:	f8cd 800c 	str.w	r8, [sp, #12]
 800e20a:	2330      	movs	r3, #48	; 0x30
 800e20c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e3d0 <_vfiprintf_r+0x24c>
 800e210:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e214:	f04f 0901 	mov.w	r9, #1
 800e218:	4623      	mov	r3, r4
 800e21a:	469a      	mov	sl, r3
 800e21c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e220:	b10a      	cbz	r2, 800e226 <_vfiprintf_r+0xa2>
 800e222:	2a25      	cmp	r2, #37	; 0x25
 800e224:	d1f9      	bne.n	800e21a <_vfiprintf_r+0x96>
 800e226:	ebba 0b04 	subs.w	fp, sl, r4
 800e22a:	d00b      	beq.n	800e244 <_vfiprintf_r+0xc0>
 800e22c:	465b      	mov	r3, fp
 800e22e:	4622      	mov	r2, r4
 800e230:	4629      	mov	r1, r5
 800e232:	4630      	mov	r0, r6
 800e234:	f7ff ff93 	bl	800e15e <__sfputs_r>
 800e238:	3001      	adds	r0, #1
 800e23a:	f000 80aa 	beq.w	800e392 <_vfiprintf_r+0x20e>
 800e23e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e240:	445a      	add	r2, fp
 800e242:	9209      	str	r2, [sp, #36]	; 0x24
 800e244:	f89a 3000 	ldrb.w	r3, [sl]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	f000 80a2 	beq.w	800e392 <_vfiprintf_r+0x20e>
 800e24e:	2300      	movs	r3, #0
 800e250:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e254:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e258:	f10a 0a01 	add.w	sl, sl, #1
 800e25c:	9304      	str	r3, [sp, #16]
 800e25e:	9307      	str	r3, [sp, #28]
 800e260:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e264:	931a      	str	r3, [sp, #104]	; 0x68
 800e266:	4654      	mov	r4, sl
 800e268:	2205      	movs	r2, #5
 800e26a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e26e:	4858      	ldr	r0, [pc, #352]	; (800e3d0 <_vfiprintf_r+0x24c>)
 800e270:	f7f1 ffae 	bl	80001d0 <memchr>
 800e274:	9a04      	ldr	r2, [sp, #16]
 800e276:	b9d8      	cbnz	r0, 800e2b0 <_vfiprintf_r+0x12c>
 800e278:	06d1      	lsls	r1, r2, #27
 800e27a:	bf44      	itt	mi
 800e27c:	2320      	movmi	r3, #32
 800e27e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e282:	0713      	lsls	r3, r2, #28
 800e284:	bf44      	itt	mi
 800e286:	232b      	movmi	r3, #43	; 0x2b
 800e288:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e28c:	f89a 3000 	ldrb.w	r3, [sl]
 800e290:	2b2a      	cmp	r3, #42	; 0x2a
 800e292:	d015      	beq.n	800e2c0 <_vfiprintf_r+0x13c>
 800e294:	9a07      	ldr	r2, [sp, #28]
 800e296:	4654      	mov	r4, sl
 800e298:	2000      	movs	r0, #0
 800e29a:	f04f 0c0a 	mov.w	ip, #10
 800e29e:	4621      	mov	r1, r4
 800e2a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e2a4:	3b30      	subs	r3, #48	; 0x30
 800e2a6:	2b09      	cmp	r3, #9
 800e2a8:	d94e      	bls.n	800e348 <_vfiprintf_r+0x1c4>
 800e2aa:	b1b0      	cbz	r0, 800e2da <_vfiprintf_r+0x156>
 800e2ac:	9207      	str	r2, [sp, #28]
 800e2ae:	e014      	b.n	800e2da <_vfiprintf_r+0x156>
 800e2b0:	eba0 0308 	sub.w	r3, r0, r8
 800e2b4:	fa09 f303 	lsl.w	r3, r9, r3
 800e2b8:	4313      	orrs	r3, r2
 800e2ba:	9304      	str	r3, [sp, #16]
 800e2bc:	46a2      	mov	sl, r4
 800e2be:	e7d2      	b.n	800e266 <_vfiprintf_r+0xe2>
 800e2c0:	9b03      	ldr	r3, [sp, #12]
 800e2c2:	1d19      	adds	r1, r3, #4
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	9103      	str	r1, [sp, #12]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	bfbb      	ittet	lt
 800e2cc:	425b      	neglt	r3, r3
 800e2ce:	f042 0202 	orrlt.w	r2, r2, #2
 800e2d2:	9307      	strge	r3, [sp, #28]
 800e2d4:	9307      	strlt	r3, [sp, #28]
 800e2d6:	bfb8      	it	lt
 800e2d8:	9204      	strlt	r2, [sp, #16]
 800e2da:	7823      	ldrb	r3, [r4, #0]
 800e2dc:	2b2e      	cmp	r3, #46	; 0x2e
 800e2de:	d10c      	bne.n	800e2fa <_vfiprintf_r+0x176>
 800e2e0:	7863      	ldrb	r3, [r4, #1]
 800e2e2:	2b2a      	cmp	r3, #42	; 0x2a
 800e2e4:	d135      	bne.n	800e352 <_vfiprintf_r+0x1ce>
 800e2e6:	9b03      	ldr	r3, [sp, #12]
 800e2e8:	1d1a      	adds	r2, r3, #4
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	9203      	str	r2, [sp, #12]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	bfb8      	it	lt
 800e2f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e2f6:	3402      	adds	r4, #2
 800e2f8:	9305      	str	r3, [sp, #20]
 800e2fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e3e0 <_vfiprintf_r+0x25c>
 800e2fe:	7821      	ldrb	r1, [r4, #0]
 800e300:	2203      	movs	r2, #3
 800e302:	4650      	mov	r0, sl
 800e304:	f7f1 ff64 	bl	80001d0 <memchr>
 800e308:	b140      	cbz	r0, 800e31c <_vfiprintf_r+0x198>
 800e30a:	2340      	movs	r3, #64	; 0x40
 800e30c:	eba0 000a 	sub.w	r0, r0, sl
 800e310:	fa03 f000 	lsl.w	r0, r3, r0
 800e314:	9b04      	ldr	r3, [sp, #16]
 800e316:	4303      	orrs	r3, r0
 800e318:	3401      	adds	r4, #1
 800e31a:	9304      	str	r3, [sp, #16]
 800e31c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e320:	482c      	ldr	r0, [pc, #176]	; (800e3d4 <_vfiprintf_r+0x250>)
 800e322:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e326:	2206      	movs	r2, #6
 800e328:	f7f1 ff52 	bl	80001d0 <memchr>
 800e32c:	2800      	cmp	r0, #0
 800e32e:	d03f      	beq.n	800e3b0 <_vfiprintf_r+0x22c>
 800e330:	4b29      	ldr	r3, [pc, #164]	; (800e3d8 <_vfiprintf_r+0x254>)
 800e332:	bb1b      	cbnz	r3, 800e37c <_vfiprintf_r+0x1f8>
 800e334:	9b03      	ldr	r3, [sp, #12]
 800e336:	3307      	adds	r3, #7
 800e338:	f023 0307 	bic.w	r3, r3, #7
 800e33c:	3308      	adds	r3, #8
 800e33e:	9303      	str	r3, [sp, #12]
 800e340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e342:	443b      	add	r3, r7
 800e344:	9309      	str	r3, [sp, #36]	; 0x24
 800e346:	e767      	b.n	800e218 <_vfiprintf_r+0x94>
 800e348:	fb0c 3202 	mla	r2, ip, r2, r3
 800e34c:	460c      	mov	r4, r1
 800e34e:	2001      	movs	r0, #1
 800e350:	e7a5      	b.n	800e29e <_vfiprintf_r+0x11a>
 800e352:	2300      	movs	r3, #0
 800e354:	3401      	adds	r4, #1
 800e356:	9305      	str	r3, [sp, #20]
 800e358:	4619      	mov	r1, r3
 800e35a:	f04f 0c0a 	mov.w	ip, #10
 800e35e:	4620      	mov	r0, r4
 800e360:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e364:	3a30      	subs	r2, #48	; 0x30
 800e366:	2a09      	cmp	r2, #9
 800e368:	d903      	bls.n	800e372 <_vfiprintf_r+0x1ee>
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d0c5      	beq.n	800e2fa <_vfiprintf_r+0x176>
 800e36e:	9105      	str	r1, [sp, #20]
 800e370:	e7c3      	b.n	800e2fa <_vfiprintf_r+0x176>
 800e372:	fb0c 2101 	mla	r1, ip, r1, r2
 800e376:	4604      	mov	r4, r0
 800e378:	2301      	movs	r3, #1
 800e37a:	e7f0      	b.n	800e35e <_vfiprintf_r+0x1da>
 800e37c:	ab03      	add	r3, sp, #12
 800e37e:	9300      	str	r3, [sp, #0]
 800e380:	462a      	mov	r2, r5
 800e382:	4b16      	ldr	r3, [pc, #88]	; (800e3dc <_vfiprintf_r+0x258>)
 800e384:	a904      	add	r1, sp, #16
 800e386:	4630      	mov	r0, r6
 800e388:	f3af 8000 	nop.w
 800e38c:	4607      	mov	r7, r0
 800e38e:	1c78      	adds	r0, r7, #1
 800e390:	d1d6      	bne.n	800e340 <_vfiprintf_r+0x1bc>
 800e392:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e394:	07d9      	lsls	r1, r3, #31
 800e396:	d405      	bmi.n	800e3a4 <_vfiprintf_r+0x220>
 800e398:	89ab      	ldrh	r3, [r5, #12]
 800e39a:	059a      	lsls	r2, r3, #22
 800e39c:	d402      	bmi.n	800e3a4 <_vfiprintf_r+0x220>
 800e39e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e3a0:	f7ff fcb7 	bl	800dd12 <__retarget_lock_release_recursive>
 800e3a4:	89ab      	ldrh	r3, [r5, #12]
 800e3a6:	065b      	lsls	r3, r3, #25
 800e3a8:	f53f af12 	bmi.w	800e1d0 <_vfiprintf_r+0x4c>
 800e3ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e3ae:	e711      	b.n	800e1d4 <_vfiprintf_r+0x50>
 800e3b0:	ab03      	add	r3, sp, #12
 800e3b2:	9300      	str	r3, [sp, #0]
 800e3b4:	462a      	mov	r2, r5
 800e3b6:	4b09      	ldr	r3, [pc, #36]	; (800e3dc <_vfiprintf_r+0x258>)
 800e3b8:	a904      	add	r1, sp, #16
 800e3ba:	4630      	mov	r0, r6
 800e3bc:	f000 f880 	bl	800e4c0 <_printf_i>
 800e3c0:	e7e4      	b.n	800e38c <_vfiprintf_r+0x208>
 800e3c2:	bf00      	nop
 800e3c4:	0801193c 	.word	0x0801193c
 800e3c8:	0801195c 	.word	0x0801195c
 800e3cc:	0801191c 	.word	0x0801191c
 800e3d0:	0801197c 	.word	0x0801197c
 800e3d4:	08011986 	.word	0x08011986
 800e3d8:	00000000 	.word	0x00000000
 800e3dc:	0800e15f 	.word	0x0800e15f
 800e3e0:	08011982 	.word	0x08011982

0800e3e4 <_printf_common>:
 800e3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3e8:	4616      	mov	r6, r2
 800e3ea:	4699      	mov	r9, r3
 800e3ec:	688a      	ldr	r2, [r1, #8]
 800e3ee:	690b      	ldr	r3, [r1, #16]
 800e3f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e3f4:	4293      	cmp	r3, r2
 800e3f6:	bfb8      	it	lt
 800e3f8:	4613      	movlt	r3, r2
 800e3fa:	6033      	str	r3, [r6, #0]
 800e3fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e400:	4607      	mov	r7, r0
 800e402:	460c      	mov	r4, r1
 800e404:	b10a      	cbz	r2, 800e40a <_printf_common+0x26>
 800e406:	3301      	adds	r3, #1
 800e408:	6033      	str	r3, [r6, #0]
 800e40a:	6823      	ldr	r3, [r4, #0]
 800e40c:	0699      	lsls	r1, r3, #26
 800e40e:	bf42      	ittt	mi
 800e410:	6833      	ldrmi	r3, [r6, #0]
 800e412:	3302      	addmi	r3, #2
 800e414:	6033      	strmi	r3, [r6, #0]
 800e416:	6825      	ldr	r5, [r4, #0]
 800e418:	f015 0506 	ands.w	r5, r5, #6
 800e41c:	d106      	bne.n	800e42c <_printf_common+0x48>
 800e41e:	f104 0a19 	add.w	sl, r4, #25
 800e422:	68e3      	ldr	r3, [r4, #12]
 800e424:	6832      	ldr	r2, [r6, #0]
 800e426:	1a9b      	subs	r3, r3, r2
 800e428:	42ab      	cmp	r3, r5
 800e42a:	dc26      	bgt.n	800e47a <_printf_common+0x96>
 800e42c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e430:	1e13      	subs	r3, r2, #0
 800e432:	6822      	ldr	r2, [r4, #0]
 800e434:	bf18      	it	ne
 800e436:	2301      	movne	r3, #1
 800e438:	0692      	lsls	r2, r2, #26
 800e43a:	d42b      	bmi.n	800e494 <_printf_common+0xb0>
 800e43c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e440:	4649      	mov	r1, r9
 800e442:	4638      	mov	r0, r7
 800e444:	47c0      	blx	r8
 800e446:	3001      	adds	r0, #1
 800e448:	d01e      	beq.n	800e488 <_printf_common+0xa4>
 800e44a:	6823      	ldr	r3, [r4, #0]
 800e44c:	68e5      	ldr	r5, [r4, #12]
 800e44e:	6832      	ldr	r2, [r6, #0]
 800e450:	f003 0306 	and.w	r3, r3, #6
 800e454:	2b04      	cmp	r3, #4
 800e456:	bf08      	it	eq
 800e458:	1aad      	subeq	r5, r5, r2
 800e45a:	68a3      	ldr	r3, [r4, #8]
 800e45c:	6922      	ldr	r2, [r4, #16]
 800e45e:	bf0c      	ite	eq
 800e460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e464:	2500      	movne	r5, #0
 800e466:	4293      	cmp	r3, r2
 800e468:	bfc4      	itt	gt
 800e46a:	1a9b      	subgt	r3, r3, r2
 800e46c:	18ed      	addgt	r5, r5, r3
 800e46e:	2600      	movs	r6, #0
 800e470:	341a      	adds	r4, #26
 800e472:	42b5      	cmp	r5, r6
 800e474:	d11a      	bne.n	800e4ac <_printf_common+0xc8>
 800e476:	2000      	movs	r0, #0
 800e478:	e008      	b.n	800e48c <_printf_common+0xa8>
 800e47a:	2301      	movs	r3, #1
 800e47c:	4652      	mov	r2, sl
 800e47e:	4649      	mov	r1, r9
 800e480:	4638      	mov	r0, r7
 800e482:	47c0      	blx	r8
 800e484:	3001      	adds	r0, #1
 800e486:	d103      	bne.n	800e490 <_printf_common+0xac>
 800e488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e48c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e490:	3501      	adds	r5, #1
 800e492:	e7c6      	b.n	800e422 <_printf_common+0x3e>
 800e494:	18e1      	adds	r1, r4, r3
 800e496:	1c5a      	adds	r2, r3, #1
 800e498:	2030      	movs	r0, #48	; 0x30
 800e49a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e49e:	4422      	add	r2, r4
 800e4a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e4a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e4a8:	3302      	adds	r3, #2
 800e4aa:	e7c7      	b.n	800e43c <_printf_common+0x58>
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	4622      	mov	r2, r4
 800e4b0:	4649      	mov	r1, r9
 800e4b2:	4638      	mov	r0, r7
 800e4b4:	47c0      	blx	r8
 800e4b6:	3001      	adds	r0, #1
 800e4b8:	d0e6      	beq.n	800e488 <_printf_common+0xa4>
 800e4ba:	3601      	adds	r6, #1
 800e4bc:	e7d9      	b.n	800e472 <_printf_common+0x8e>
	...

0800e4c0 <_printf_i>:
 800e4c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e4c4:	460c      	mov	r4, r1
 800e4c6:	4691      	mov	r9, r2
 800e4c8:	7e27      	ldrb	r7, [r4, #24]
 800e4ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e4cc:	2f78      	cmp	r7, #120	; 0x78
 800e4ce:	4680      	mov	r8, r0
 800e4d0:	469a      	mov	sl, r3
 800e4d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e4d6:	d807      	bhi.n	800e4e8 <_printf_i+0x28>
 800e4d8:	2f62      	cmp	r7, #98	; 0x62
 800e4da:	d80a      	bhi.n	800e4f2 <_printf_i+0x32>
 800e4dc:	2f00      	cmp	r7, #0
 800e4de:	f000 80d8 	beq.w	800e692 <_printf_i+0x1d2>
 800e4e2:	2f58      	cmp	r7, #88	; 0x58
 800e4e4:	f000 80a3 	beq.w	800e62e <_printf_i+0x16e>
 800e4e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e4ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e4f0:	e03a      	b.n	800e568 <_printf_i+0xa8>
 800e4f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e4f6:	2b15      	cmp	r3, #21
 800e4f8:	d8f6      	bhi.n	800e4e8 <_printf_i+0x28>
 800e4fa:	a001      	add	r0, pc, #4	; (adr r0, 800e500 <_printf_i+0x40>)
 800e4fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e500:	0800e559 	.word	0x0800e559
 800e504:	0800e56d 	.word	0x0800e56d
 800e508:	0800e4e9 	.word	0x0800e4e9
 800e50c:	0800e4e9 	.word	0x0800e4e9
 800e510:	0800e4e9 	.word	0x0800e4e9
 800e514:	0800e4e9 	.word	0x0800e4e9
 800e518:	0800e56d 	.word	0x0800e56d
 800e51c:	0800e4e9 	.word	0x0800e4e9
 800e520:	0800e4e9 	.word	0x0800e4e9
 800e524:	0800e4e9 	.word	0x0800e4e9
 800e528:	0800e4e9 	.word	0x0800e4e9
 800e52c:	0800e679 	.word	0x0800e679
 800e530:	0800e59d 	.word	0x0800e59d
 800e534:	0800e65b 	.word	0x0800e65b
 800e538:	0800e4e9 	.word	0x0800e4e9
 800e53c:	0800e4e9 	.word	0x0800e4e9
 800e540:	0800e69b 	.word	0x0800e69b
 800e544:	0800e4e9 	.word	0x0800e4e9
 800e548:	0800e59d 	.word	0x0800e59d
 800e54c:	0800e4e9 	.word	0x0800e4e9
 800e550:	0800e4e9 	.word	0x0800e4e9
 800e554:	0800e663 	.word	0x0800e663
 800e558:	680b      	ldr	r3, [r1, #0]
 800e55a:	1d1a      	adds	r2, r3, #4
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	600a      	str	r2, [r1, #0]
 800e560:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e564:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e568:	2301      	movs	r3, #1
 800e56a:	e0a3      	b.n	800e6b4 <_printf_i+0x1f4>
 800e56c:	6825      	ldr	r5, [r4, #0]
 800e56e:	6808      	ldr	r0, [r1, #0]
 800e570:	062e      	lsls	r6, r5, #24
 800e572:	f100 0304 	add.w	r3, r0, #4
 800e576:	d50a      	bpl.n	800e58e <_printf_i+0xce>
 800e578:	6805      	ldr	r5, [r0, #0]
 800e57a:	600b      	str	r3, [r1, #0]
 800e57c:	2d00      	cmp	r5, #0
 800e57e:	da03      	bge.n	800e588 <_printf_i+0xc8>
 800e580:	232d      	movs	r3, #45	; 0x2d
 800e582:	426d      	negs	r5, r5
 800e584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e588:	485e      	ldr	r0, [pc, #376]	; (800e704 <_printf_i+0x244>)
 800e58a:	230a      	movs	r3, #10
 800e58c:	e019      	b.n	800e5c2 <_printf_i+0x102>
 800e58e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e592:	6805      	ldr	r5, [r0, #0]
 800e594:	600b      	str	r3, [r1, #0]
 800e596:	bf18      	it	ne
 800e598:	b22d      	sxthne	r5, r5
 800e59a:	e7ef      	b.n	800e57c <_printf_i+0xbc>
 800e59c:	680b      	ldr	r3, [r1, #0]
 800e59e:	6825      	ldr	r5, [r4, #0]
 800e5a0:	1d18      	adds	r0, r3, #4
 800e5a2:	6008      	str	r0, [r1, #0]
 800e5a4:	0628      	lsls	r0, r5, #24
 800e5a6:	d501      	bpl.n	800e5ac <_printf_i+0xec>
 800e5a8:	681d      	ldr	r5, [r3, #0]
 800e5aa:	e002      	b.n	800e5b2 <_printf_i+0xf2>
 800e5ac:	0669      	lsls	r1, r5, #25
 800e5ae:	d5fb      	bpl.n	800e5a8 <_printf_i+0xe8>
 800e5b0:	881d      	ldrh	r5, [r3, #0]
 800e5b2:	4854      	ldr	r0, [pc, #336]	; (800e704 <_printf_i+0x244>)
 800e5b4:	2f6f      	cmp	r7, #111	; 0x6f
 800e5b6:	bf0c      	ite	eq
 800e5b8:	2308      	moveq	r3, #8
 800e5ba:	230a      	movne	r3, #10
 800e5bc:	2100      	movs	r1, #0
 800e5be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e5c2:	6866      	ldr	r6, [r4, #4]
 800e5c4:	60a6      	str	r6, [r4, #8]
 800e5c6:	2e00      	cmp	r6, #0
 800e5c8:	bfa2      	ittt	ge
 800e5ca:	6821      	ldrge	r1, [r4, #0]
 800e5cc:	f021 0104 	bicge.w	r1, r1, #4
 800e5d0:	6021      	strge	r1, [r4, #0]
 800e5d2:	b90d      	cbnz	r5, 800e5d8 <_printf_i+0x118>
 800e5d4:	2e00      	cmp	r6, #0
 800e5d6:	d04d      	beq.n	800e674 <_printf_i+0x1b4>
 800e5d8:	4616      	mov	r6, r2
 800e5da:	fbb5 f1f3 	udiv	r1, r5, r3
 800e5de:	fb03 5711 	mls	r7, r3, r1, r5
 800e5e2:	5dc7      	ldrb	r7, [r0, r7]
 800e5e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e5e8:	462f      	mov	r7, r5
 800e5ea:	42bb      	cmp	r3, r7
 800e5ec:	460d      	mov	r5, r1
 800e5ee:	d9f4      	bls.n	800e5da <_printf_i+0x11a>
 800e5f0:	2b08      	cmp	r3, #8
 800e5f2:	d10b      	bne.n	800e60c <_printf_i+0x14c>
 800e5f4:	6823      	ldr	r3, [r4, #0]
 800e5f6:	07df      	lsls	r7, r3, #31
 800e5f8:	d508      	bpl.n	800e60c <_printf_i+0x14c>
 800e5fa:	6923      	ldr	r3, [r4, #16]
 800e5fc:	6861      	ldr	r1, [r4, #4]
 800e5fe:	4299      	cmp	r1, r3
 800e600:	bfde      	ittt	le
 800e602:	2330      	movle	r3, #48	; 0x30
 800e604:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e608:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800e60c:	1b92      	subs	r2, r2, r6
 800e60e:	6122      	str	r2, [r4, #16]
 800e610:	f8cd a000 	str.w	sl, [sp]
 800e614:	464b      	mov	r3, r9
 800e616:	aa03      	add	r2, sp, #12
 800e618:	4621      	mov	r1, r4
 800e61a:	4640      	mov	r0, r8
 800e61c:	f7ff fee2 	bl	800e3e4 <_printf_common>
 800e620:	3001      	adds	r0, #1
 800e622:	d14c      	bne.n	800e6be <_printf_i+0x1fe>
 800e624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e628:	b004      	add	sp, #16
 800e62a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e62e:	4835      	ldr	r0, [pc, #212]	; (800e704 <_printf_i+0x244>)
 800e630:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e634:	6823      	ldr	r3, [r4, #0]
 800e636:	680e      	ldr	r6, [r1, #0]
 800e638:	061f      	lsls	r7, r3, #24
 800e63a:	f856 5b04 	ldr.w	r5, [r6], #4
 800e63e:	600e      	str	r6, [r1, #0]
 800e640:	d514      	bpl.n	800e66c <_printf_i+0x1ac>
 800e642:	07d9      	lsls	r1, r3, #31
 800e644:	bf44      	itt	mi
 800e646:	f043 0320 	orrmi.w	r3, r3, #32
 800e64a:	6023      	strmi	r3, [r4, #0]
 800e64c:	b91d      	cbnz	r5, 800e656 <_printf_i+0x196>
 800e64e:	6823      	ldr	r3, [r4, #0]
 800e650:	f023 0320 	bic.w	r3, r3, #32
 800e654:	6023      	str	r3, [r4, #0]
 800e656:	2310      	movs	r3, #16
 800e658:	e7b0      	b.n	800e5bc <_printf_i+0xfc>
 800e65a:	6823      	ldr	r3, [r4, #0]
 800e65c:	f043 0320 	orr.w	r3, r3, #32
 800e660:	6023      	str	r3, [r4, #0]
 800e662:	2378      	movs	r3, #120	; 0x78
 800e664:	4828      	ldr	r0, [pc, #160]	; (800e708 <_printf_i+0x248>)
 800e666:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e66a:	e7e3      	b.n	800e634 <_printf_i+0x174>
 800e66c:	065e      	lsls	r6, r3, #25
 800e66e:	bf48      	it	mi
 800e670:	b2ad      	uxthmi	r5, r5
 800e672:	e7e6      	b.n	800e642 <_printf_i+0x182>
 800e674:	4616      	mov	r6, r2
 800e676:	e7bb      	b.n	800e5f0 <_printf_i+0x130>
 800e678:	680b      	ldr	r3, [r1, #0]
 800e67a:	6826      	ldr	r6, [r4, #0]
 800e67c:	6960      	ldr	r0, [r4, #20]
 800e67e:	1d1d      	adds	r5, r3, #4
 800e680:	600d      	str	r5, [r1, #0]
 800e682:	0635      	lsls	r5, r6, #24
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	d501      	bpl.n	800e68c <_printf_i+0x1cc>
 800e688:	6018      	str	r0, [r3, #0]
 800e68a:	e002      	b.n	800e692 <_printf_i+0x1d2>
 800e68c:	0671      	lsls	r1, r6, #25
 800e68e:	d5fb      	bpl.n	800e688 <_printf_i+0x1c8>
 800e690:	8018      	strh	r0, [r3, #0]
 800e692:	2300      	movs	r3, #0
 800e694:	6123      	str	r3, [r4, #16]
 800e696:	4616      	mov	r6, r2
 800e698:	e7ba      	b.n	800e610 <_printf_i+0x150>
 800e69a:	680b      	ldr	r3, [r1, #0]
 800e69c:	1d1a      	adds	r2, r3, #4
 800e69e:	600a      	str	r2, [r1, #0]
 800e6a0:	681e      	ldr	r6, [r3, #0]
 800e6a2:	6862      	ldr	r2, [r4, #4]
 800e6a4:	2100      	movs	r1, #0
 800e6a6:	4630      	mov	r0, r6
 800e6a8:	f7f1 fd92 	bl	80001d0 <memchr>
 800e6ac:	b108      	cbz	r0, 800e6b2 <_printf_i+0x1f2>
 800e6ae:	1b80      	subs	r0, r0, r6
 800e6b0:	6060      	str	r0, [r4, #4]
 800e6b2:	6863      	ldr	r3, [r4, #4]
 800e6b4:	6123      	str	r3, [r4, #16]
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e6bc:	e7a8      	b.n	800e610 <_printf_i+0x150>
 800e6be:	6923      	ldr	r3, [r4, #16]
 800e6c0:	4632      	mov	r2, r6
 800e6c2:	4649      	mov	r1, r9
 800e6c4:	4640      	mov	r0, r8
 800e6c6:	47d0      	blx	sl
 800e6c8:	3001      	adds	r0, #1
 800e6ca:	d0ab      	beq.n	800e624 <_printf_i+0x164>
 800e6cc:	6823      	ldr	r3, [r4, #0]
 800e6ce:	079b      	lsls	r3, r3, #30
 800e6d0:	d413      	bmi.n	800e6fa <_printf_i+0x23a>
 800e6d2:	68e0      	ldr	r0, [r4, #12]
 800e6d4:	9b03      	ldr	r3, [sp, #12]
 800e6d6:	4298      	cmp	r0, r3
 800e6d8:	bfb8      	it	lt
 800e6da:	4618      	movlt	r0, r3
 800e6dc:	e7a4      	b.n	800e628 <_printf_i+0x168>
 800e6de:	2301      	movs	r3, #1
 800e6e0:	4632      	mov	r2, r6
 800e6e2:	4649      	mov	r1, r9
 800e6e4:	4640      	mov	r0, r8
 800e6e6:	47d0      	blx	sl
 800e6e8:	3001      	adds	r0, #1
 800e6ea:	d09b      	beq.n	800e624 <_printf_i+0x164>
 800e6ec:	3501      	adds	r5, #1
 800e6ee:	68e3      	ldr	r3, [r4, #12]
 800e6f0:	9903      	ldr	r1, [sp, #12]
 800e6f2:	1a5b      	subs	r3, r3, r1
 800e6f4:	42ab      	cmp	r3, r5
 800e6f6:	dcf2      	bgt.n	800e6de <_printf_i+0x21e>
 800e6f8:	e7eb      	b.n	800e6d2 <_printf_i+0x212>
 800e6fa:	2500      	movs	r5, #0
 800e6fc:	f104 0619 	add.w	r6, r4, #25
 800e700:	e7f5      	b.n	800e6ee <_printf_i+0x22e>
 800e702:	bf00      	nop
 800e704:	0801198d 	.word	0x0801198d
 800e708:	0801199e 	.word	0x0801199e

0800e70c <_sbrk_r>:
 800e70c:	b538      	push	{r3, r4, r5, lr}
 800e70e:	4d06      	ldr	r5, [pc, #24]	; (800e728 <_sbrk_r+0x1c>)
 800e710:	2300      	movs	r3, #0
 800e712:	4604      	mov	r4, r0
 800e714:	4608      	mov	r0, r1
 800e716:	602b      	str	r3, [r5, #0]
 800e718:	f7f2 f8dc 	bl	80008d4 <_sbrk>
 800e71c:	1c43      	adds	r3, r0, #1
 800e71e:	d102      	bne.n	800e726 <_sbrk_r+0x1a>
 800e720:	682b      	ldr	r3, [r5, #0]
 800e722:	b103      	cbz	r3, 800e726 <_sbrk_r+0x1a>
 800e724:	6023      	str	r3, [r4, #0]
 800e726:	bd38      	pop	{r3, r4, r5, pc}
 800e728:	20008a78 	.word	0x20008a78

0800e72c <__sread>:
 800e72c:	b510      	push	{r4, lr}
 800e72e:	460c      	mov	r4, r1
 800e730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e734:	f000 fa92 	bl	800ec5c <_read_r>
 800e738:	2800      	cmp	r0, #0
 800e73a:	bfab      	itete	ge
 800e73c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e73e:	89a3      	ldrhlt	r3, [r4, #12]
 800e740:	181b      	addge	r3, r3, r0
 800e742:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e746:	bfac      	ite	ge
 800e748:	6563      	strge	r3, [r4, #84]	; 0x54
 800e74a:	81a3      	strhlt	r3, [r4, #12]
 800e74c:	bd10      	pop	{r4, pc}

0800e74e <__swrite>:
 800e74e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e752:	461f      	mov	r7, r3
 800e754:	898b      	ldrh	r3, [r1, #12]
 800e756:	05db      	lsls	r3, r3, #23
 800e758:	4605      	mov	r5, r0
 800e75a:	460c      	mov	r4, r1
 800e75c:	4616      	mov	r6, r2
 800e75e:	d505      	bpl.n	800e76c <__swrite+0x1e>
 800e760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e764:	2302      	movs	r3, #2
 800e766:	2200      	movs	r2, #0
 800e768:	f000 f9d0 	bl	800eb0c <_lseek_r>
 800e76c:	89a3      	ldrh	r3, [r4, #12]
 800e76e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e772:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e776:	81a3      	strh	r3, [r4, #12]
 800e778:	4632      	mov	r2, r6
 800e77a:	463b      	mov	r3, r7
 800e77c:	4628      	mov	r0, r5
 800e77e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e782:	f000 b869 	b.w	800e858 <_write_r>

0800e786 <__sseek>:
 800e786:	b510      	push	{r4, lr}
 800e788:	460c      	mov	r4, r1
 800e78a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e78e:	f000 f9bd 	bl	800eb0c <_lseek_r>
 800e792:	1c43      	adds	r3, r0, #1
 800e794:	89a3      	ldrh	r3, [r4, #12]
 800e796:	bf15      	itete	ne
 800e798:	6560      	strne	r0, [r4, #84]	; 0x54
 800e79a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e79e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e7a2:	81a3      	strheq	r3, [r4, #12]
 800e7a4:	bf18      	it	ne
 800e7a6:	81a3      	strhne	r3, [r4, #12]
 800e7a8:	bd10      	pop	{r4, pc}

0800e7aa <__sclose>:
 800e7aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7ae:	f000 b8db 	b.w	800e968 <_close_r>
	...

0800e7b4 <__swbuf_r>:
 800e7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7b6:	460e      	mov	r6, r1
 800e7b8:	4614      	mov	r4, r2
 800e7ba:	4605      	mov	r5, r0
 800e7bc:	b118      	cbz	r0, 800e7c6 <__swbuf_r+0x12>
 800e7be:	6983      	ldr	r3, [r0, #24]
 800e7c0:	b90b      	cbnz	r3, 800e7c6 <__swbuf_r+0x12>
 800e7c2:	f7ff f9f5 	bl	800dbb0 <__sinit>
 800e7c6:	4b21      	ldr	r3, [pc, #132]	; (800e84c <__swbuf_r+0x98>)
 800e7c8:	429c      	cmp	r4, r3
 800e7ca:	d12b      	bne.n	800e824 <__swbuf_r+0x70>
 800e7cc:	686c      	ldr	r4, [r5, #4]
 800e7ce:	69a3      	ldr	r3, [r4, #24]
 800e7d0:	60a3      	str	r3, [r4, #8]
 800e7d2:	89a3      	ldrh	r3, [r4, #12]
 800e7d4:	071a      	lsls	r2, r3, #28
 800e7d6:	d52f      	bpl.n	800e838 <__swbuf_r+0x84>
 800e7d8:	6923      	ldr	r3, [r4, #16]
 800e7da:	b36b      	cbz	r3, 800e838 <__swbuf_r+0x84>
 800e7dc:	6923      	ldr	r3, [r4, #16]
 800e7de:	6820      	ldr	r0, [r4, #0]
 800e7e0:	1ac0      	subs	r0, r0, r3
 800e7e2:	6963      	ldr	r3, [r4, #20]
 800e7e4:	b2f6      	uxtb	r6, r6
 800e7e6:	4283      	cmp	r3, r0
 800e7e8:	4637      	mov	r7, r6
 800e7ea:	dc04      	bgt.n	800e7f6 <__swbuf_r+0x42>
 800e7ec:	4621      	mov	r1, r4
 800e7ee:	4628      	mov	r0, r5
 800e7f0:	f000 f950 	bl	800ea94 <_fflush_r>
 800e7f4:	bb30      	cbnz	r0, 800e844 <__swbuf_r+0x90>
 800e7f6:	68a3      	ldr	r3, [r4, #8]
 800e7f8:	3b01      	subs	r3, #1
 800e7fa:	60a3      	str	r3, [r4, #8]
 800e7fc:	6823      	ldr	r3, [r4, #0]
 800e7fe:	1c5a      	adds	r2, r3, #1
 800e800:	6022      	str	r2, [r4, #0]
 800e802:	701e      	strb	r6, [r3, #0]
 800e804:	6963      	ldr	r3, [r4, #20]
 800e806:	3001      	adds	r0, #1
 800e808:	4283      	cmp	r3, r0
 800e80a:	d004      	beq.n	800e816 <__swbuf_r+0x62>
 800e80c:	89a3      	ldrh	r3, [r4, #12]
 800e80e:	07db      	lsls	r3, r3, #31
 800e810:	d506      	bpl.n	800e820 <__swbuf_r+0x6c>
 800e812:	2e0a      	cmp	r6, #10
 800e814:	d104      	bne.n	800e820 <__swbuf_r+0x6c>
 800e816:	4621      	mov	r1, r4
 800e818:	4628      	mov	r0, r5
 800e81a:	f000 f93b 	bl	800ea94 <_fflush_r>
 800e81e:	b988      	cbnz	r0, 800e844 <__swbuf_r+0x90>
 800e820:	4638      	mov	r0, r7
 800e822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e824:	4b0a      	ldr	r3, [pc, #40]	; (800e850 <__swbuf_r+0x9c>)
 800e826:	429c      	cmp	r4, r3
 800e828:	d101      	bne.n	800e82e <__swbuf_r+0x7a>
 800e82a:	68ac      	ldr	r4, [r5, #8]
 800e82c:	e7cf      	b.n	800e7ce <__swbuf_r+0x1a>
 800e82e:	4b09      	ldr	r3, [pc, #36]	; (800e854 <__swbuf_r+0xa0>)
 800e830:	429c      	cmp	r4, r3
 800e832:	bf08      	it	eq
 800e834:	68ec      	ldreq	r4, [r5, #12]
 800e836:	e7ca      	b.n	800e7ce <__swbuf_r+0x1a>
 800e838:	4621      	mov	r1, r4
 800e83a:	4628      	mov	r0, r5
 800e83c:	f000 f81e 	bl	800e87c <__swsetup_r>
 800e840:	2800      	cmp	r0, #0
 800e842:	d0cb      	beq.n	800e7dc <__swbuf_r+0x28>
 800e844:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e848:	e7ea      	b.n	800e820 <__swbuf_r+0x6c>
 800e84a:	bf00      	nop
 800e84c:	0801193c 	.word	0x0801193c
 800e850:	0801195c 	.word	0x0801195c
 800e854:	0801191c 	.word	0x0801191c

0800e858 <_write_r>:
 800e858:	b538      	push	{r3, r4, r5, lr}
 800e85a:	4d07      	ldr	r5, [pc, #28]	; (800e878 <_write_r+0x20>)
 800e85c:	4604      	mov	r4, r0
 800e85e:	4608      	mov	r0, r1
 800e860:	4611      	mov	r1, r2
 800e862:	2200      	movs	r2, #0
 800e864:	602a      	str	r2, [r5, #0]
 800e866:	461a      	mov	r2, r3
 800e868:	f7f1 ffe3 	bl	8000832 <_write>
 800e86c:	1c43      	adds	r3, r0, #1
 800e86e:	d102      	bne.n	800e876 <_write_r+0x1e>
 800e870:	682b      	ldr	r3, [r5, #0]
 800e872:	b103      	cbz	r3, 800e876 <_write_r+0x1e>
 800e874:	6023      	str	r3, [r4, #0]
 800e876:	bd38      	pop	{r3, r4, r5, pc}
 800e878:	20008a78 	.word	0x20008a78

0800e87c <__swsetup_r>:
 800e87c:	4b32      	ldr	r3, [pc, #200]	; (800e948 <__swsetup_r+0xcc>)
 800e87e:	b570      	push	{r4, r5, r6, lr}
 800e880:	681d      	ldr	r5, [r3, #0]
 800e882:	4606      	mov	r6, r0
 800e884:	460c      	mov	r4, r1
 800e886:	b125      	cbz	r5, 800e892 <__swsetup_r+0x16>
 800e888:	69ab      	ldr	r3, [r5, #24]
 800e88a:	b913      	cbnz	r3, 800e892 <__swsetup_r+0x16>
 800e88c:	4628      	mov	r0, r5
 800e88e:	f7ff f98f 	bl	800dbb0 <__sinit>
 800e892:	4b2e      	ldr	r3, [pc, #184]	; (800e94c <__swsetup_r+0xd0>)
 800e894:	429c      	cmp	r4, r3
 800e896:	d10f      	bne.n	800e8b8 <__swsetup_r+0x3c>
 800e898:	686c      	ldr	r4, [r5, #4]
 800e89a:	89a3      	ldrh	r3, [r4, #12]
 800e89c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e8a0:	0719      	lsls	r1, r3, #28
 800e8a2:	d42c      	bmi.n	800e8fe <__swsetup_r+0x82>
 800e8a4:	06dd      	lsls	r5, r3, #27
 800e8a6:	d411      	bmi.n	800e8cc <__swsetup_r+0x50>
 800e8a8:	2309      	movs	r3, #9
 800e8aa:	6033      	str	r3, [r6, #0]
 800e8ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e8b0:	81a3      	strh	r3, [r4, #12]
 800e8b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e8b6:	e03e      	b.n	800e936 <__swsetup_r+0xba>
 800e8b8:	4b25      	ldr	r3, [pc, #148]	; (800e950 <__swsetup_r+0xd4>)
 800e8ba:	429c      	cmp	r4, r3
 800e8bc:	d101      	bne.n	800e8c2 <__swsetup_r+0x46>
 800e8be:	68ac      	ldr	r4, [r5, #8]
 800e8c0:	e7eb      	b.n	800e89a <__swsetup_r+0x1e>
 800e8c2:	4b24      	ldr	r3, [pc, #144]	; (800e954 <__swsetup_r+0xd8>)
 800e8c4:	429c      	cmp	r4, r3
 800e8c6:	bf08      	it	eq
 800e8c8:	68ec      	ldreq	r4, [r5, #12]
 800e8ca:	e7e6      	b.n	800e89a <__swsetup_r+0x1e>
 800e8cc:	0758      	lsls	r0, r3, #29
 800e8ce:	d512      	bpl.n	800e8f6 <__swsetup_r+0x7a>
 800e8d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e8d2:	b141      	cbz	r1, 800e8e6 <__swsetup_r+0x6a>
 800e8d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e8d8:	4299      	cmp	r1, r3
 800e8da:	d002      	beq.n	800e8e2 <__swsetup_r+0x66>
 800e8dc:	4630      	mov	r0, r6
 800e8de:	f7ff fa21 	bl	800dd24 <_free_r>
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	6363      	str	r3, [r4, #52]	; 0x34
 800e8e6:	89a3      	ldrh	r3, [r4, #12]
 800e8e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e8ec:	81a3      	strh	r3, [r4, #12]
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	6063      	str	r3, [r4, #4]
 800e8f2:	6923      	ldr	r3, [r4, #16]
 800e8f4:	6023      	str	r3, [r4, #0]
 800e8f6:	89a3      	ldrh	r3, [r4, #12]
 800e8f8:	f043 0308 	orr.w	r3, r3, #8
 800e8fc:	81a3      	strh	r3, [r4, #12]
 800e8fe:	6923      	ldr	r3, [r4, #16]
 800e900:	b94b      	cbnz	r3, 800e916 <__swsetup_r+0x9a>
 800e902:	89a3      	ldrh	r3, [r4, #12]
 800e904:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e90c:	d003      	beq.n	800e916 <__swsetup_r+0x9a>
 800e90e:	4621      	mov	r1, r4
 800e910:	4630      	mov	r0, r6
 800e912:	f000 f931 	bl	800eb78 <__smakebuf_r>
 800e916:	89a0      	ldrh	r0, [r4, #12]
 800e918:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e91c:	f010 0301 	ands.w	r3, r0, #1
 800e920:	d00a      	beq.n	800e938 <__swsetup_r+0xbc>
 800e922:	2300      	movs	r3, #0
 800e924:	60a3      	str	r3, [r4, #8]
 800e926:	6963      	ldr	r3, [r4, #20]
 800e928:	425b      	negs	r3, r3
 800e92a:	61a3      	str	r3, [r4, #24]
 800e92c:	6923      	ldr	r3, [r4, #16]
 800e92e:	b943      	cbnz	r3, 800e942 <__swsetup_r+0xc6>
 800e930:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e934:	d1ba      	bne.n	800e8ac <__swsetup_r+0x30>
 800e936:	bd70      	pop	{r4, r5, r6, pc}
 800e938:	0781      	lsls	r1, r0, #30
 800e93a:	bf58      	it	pl
 800e93c:	6963      	ldrpl	r3, [r4, #20]
 800e93e:	60a3      	str	r3, [r4, #8]
 800e940:	e7f4      	b.n	800e92c <__swsetup_r+0xb0>
 800e942:	2000      	movs	r0, #0
 800e944:	e7f7      	b.n	800e936 <__swsetup_r+0xba>
 800e946:	bf00      	nop
 800e948:	20000014 	.word	0x20000014
 800e94c:	0801193c 	.word	0x0801193c
 800e950:	0801195c 	.word	0x0801195c
 800e954:	0801191c 	.word	0x0801191c

0800e958 <abort>:
 800e958:	b508      	push	{r3, lr}
 800e95a:	2006      	movs	r0, #6
 800e95c:	f000 f9b8 	bl	800ecd0 <raise>
 800e960:	2001      	movs	r0, #1
 800e962:	f7f1 ff3f 	bl	80007e4 <_exit>
	...

0800e968 <_close_r>:
 800e968:	b538      	push	{r3, r4, r5, lr}
 800e96a:	4d06      	ldr	r5, [pc, #24]	; (800e984 <_close_r+0x1c>)
 800e96c:	2300      	movs	r3, #0
 800e96e:	4604      	mov	r4, r0
 800e970:	4608      	mov	r0, r1
 800e972:	602b      	str	r3, [r5, #0]
 800e974:	f7f1 ff79 	bl	800086a <_close>
 800e978:	1c43      	adds	r3, r0, #1
 800e97a:	d102      	bne.n	800e982 <_close_r+0x1a>
 800e97c:	682b      	ldr	r3, [r5, #0]
 800e97e:	b103      	cbz	r3, 800e982 <_close_r+0x1a>
 800e980:	6023      	str	r3, [r4, #0]
 800e982:	bd38      	pop	{r3, r4, r5, pc}
 800e984:	20008a78 	.word	0x20008a78

0800e988 <__sflush_r>:
 800e988:	898a      	ldrh	r2, [r1, #12]
 800e98a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e98e:	4605      	mov	r5, r0
 800e990:	0710      	lsls	r0, r2, #28
 800e992:	460c      	mov	r4, r1
 800e994:	d458      	bmi.n	800ea48 <__sflush_r+0xc0>
 800e996:	684b      	ldr	r3, [r1, #4]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	dc05      	bgt.n	800e9a8 <__sflush_r+0x20>
 800e99c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	dc02      	bgt.n	800e9a8 <__sflush_r+0x20>
 800e9a2:	2000      	movs	r0, #0
 800e9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e9aa:	2e00      	cmp	r6, #0
 800e9ac:	d0f9      	beq.n	800e9a2 <__sflush_r+0x1a>
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e9b4:	682f      	ldr	r7, [r5, #0]
 800e9b6:	602b      	str	r3, [r5, #0]
 800e9b8:	d032      	beq.n	800ea20 <__sflush_r+0x98>
 800e9ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e9bc:	89a3      	ldrh	r3, [r4, #12]
 800e9be:	075a      	lsls	r2, r3, #29
 800e9c0:	d505      	bpl.n	800e9ce <__sflush_r+0x46>
 800e9c2:	6863      	ldr	r3, [r4, #4]
 800e9c4:	1ac0      	subs	r0, r0, r3
 800e9c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e9c8:	b10b      	cbz	r3, 800e9ce <__sflush_r+0x46>
 800e9ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e9cc:	1ac0      	subs	r0, r0, r3
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	4602      	mov	r2, r0
 800e9d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e9d4:	6a21      	ldr	r1, [r4, #32]
 800e9d6:	4628      	mov	r0, r5
 800e9d8:	47b0      	blx	r6
 800e9da:	1c43      	adds	r3, r0, #1
 800e9dc:	89a3      	ldrh	r3, [r4, #12]
 800e9de:	d106      	bne.n	800e9ee <__sflush_r+0x66>
 800e9e0:	6829      	ldr	r1, [r5, #0]
 800e9e2:	291d      	cmp	r1, #29
 800e9e4:	d82c      	bhi.n	800ea40 <__sflush_r+0xb8>
 800e9e6:	4a2a      	ldr	r2, [pc, #168]	; (800ea90 <__sflush_r+0x108>)
 800e9e8:	40ca      	lsrs	r2, r1
 800e9ea:	07d6      	lsls	r6, r2, #31
 800e9ec:	d528      	bpl.n	800ea40 <__sflush_r+0xb8>
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	6062      	str	r2, [r4, #4]
 800e9f2:	04d9      	lsls	r1, r3, #19
 800e9f4:	6922      	ldr	r2, [r4, #16]
 800e9f6:	6022      	str	r2, [r4, #0]
 800e9f8:	d504      	bpl.n	800ea04 <__sflush_r+0x7c>
 800e9fa:	1c42      	adds	r2, r0, #1
 800e9fc:	d101      	bne.n	800ea02 <__sflush_r+0x7a>
 800e9fe:	682b      	ldr	r3, [r5, #0]
 800ea00:	b903      	cbnz	r3, 800ea04 <__sflush_r+0x7c>
 800ea02:	6560      	str	r0, [r4, #84]	; 0x54
 800ea04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea06:	602f      	str	r7, [r5, #0]
 800ea08:	2900      	cmp	r1, #0
 800ea0a:	d0ca      	beq.n	800e9a2 <__sflush_r+0x1a>
 800ea0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea10:	4299      	cmp	r1, r3
 800ea12:	d002      	beq.n	800ea1a <__sflush_r+0x92>
 800ea14:	4628      	mov	r0, r5
 800ea16:	f7ff f985 	bl	800dd24 <_free_r>
 800ea1a:	2000      	movs	r0, #0
 800ea1c:	6360      	str	r0, [r4, #52]	; 0x34
 800ea1e:	e7c1      	b.n	800e9a4 <__sflush_r+0x1c>
 800ea20:	6a21      	ldr	r1, [r4, #32]
 800ea22:	2301      	movs	r3, #1
 800ea24:	4628      	mov	r0, r5
 800ea26:	47b0      	blx	r6
 800ea28:	1c41      	adds	r1, r0, #1
 800ea2a:	d1c7      	bne.n	800e9bc <__sflush_r+0x34>
 800ea2c:	682b      	ldr	r3, [r5, #0]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d0c4      	beq.n	800e9bc <__sflush_r+0x34>
 800ea32:	2b1d      	cmp	r3, #29
 800ea34:	d001      	beq.n	800ea3a <__sflush_r+0xb2>
 800ea36:	2b16      	cmp	r3, #22
 800ea38:	d101      	bne.n	800ea3e <__sflush_r+0xb6>
 800ea3a:	602f      	str	r7, [r5, #0]
 800ea3c:	e7b1      	b.n	800e9a2 <__sflush_r+0x1a>
 800ea3e:	89a3      	ldrh	r3, [r4, #12]
 800ea40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea44:	81a3      	strh	r3, [r4, #12]
 800ea46:	e7ad      	b.n	800e9a4 <__sflush_r+0x1c>
 800ea48:	690f      	ldr	r7, [r1, #16]
 800ea4a:	2f00      	cmp	r7, #0
 800ea4c:	d0a9      	beq.n	800e9a2 <__sflush_r+0x1a>
 800ea4e:	0793      	lsls	r3, r2, #30
 800ea50:	680e      	ldr	r6, [r1, #0]
 800ea52:	bf08      	it	eq
 800ea54:	694b      	ldreq	r3, [r1, #20]
 800ea56:	600f      	str	r7, [r1, #0]
 800ea58:	bf18      	it	ne
 800ea5a:	2300      	movne	r3, #0
 800ea5c:	eba6 0807 	sub.w	r8, r6, r7
 800ea60:	608b      	str	r3, [r1, #8]
 800ea62:	f1b8 0f00 	cmp.w	r8, #0
 800ea66:	dd9c      	ble.n	800e9a2 <__sflush_r+0x1a>
 800ea68:	6a21      	ldr	r1, [r4, #32]
 800ea6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ea6c:	4643      	mov	r3, r8
 800ea6e:	463a      	mov	r2, r7
 800ea70:	4628      	mov	r0, r5
 800ea72:	47b0      	blx	r6
 800ea74:	2800      	cmp	r0, #0
 800ea76:	dc06      	bgt.n	800ea86 <__sflush_r+0xfe>
 800ea78:	89a3      	ldrh	r3, [r4, #12]
 800ea7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea7e:	81a3      	strh	r3, [r4, #12]
 800ea80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea84:	e78e      	b.n	800e9a4 <__sflush_r+0x1c>
 800ea86:	4407      	add	r7, r0
 800ea88:	eba8 0800 	sub.w	r8, r8, r0
 800ea8c:	e7e9      	b.n	800ea62 <__sflush_r+0xda>
 800ea8e:	bf00      	nop
 800ea90:	20400001 	.word	0x20400001

0800ea94 <_fflush_r>:
 800ea94:	b538      	push	{r3, r4, r5, lr}
 800ea96:	690b      	ldr	r3, [r1, #16]
 800ea98:	4605      	mov	r5, r0
 800ea9a:	460c      	mov	r4, r1
 800ea9c:	b913      	cbnz	r3, 800eaa4 <_fflush_r+0x10>
 800ea9e:	2500      	movs	r5, #0
 800eaa0:	4628      	mov	r0, r5
 800eaa2:	bd38      	pop	{r3, r4, r5, pc}
 800eaa4:	b118      	cbz	r0, 800eaae <_fflush_r+0x1a>
 800eaa6:	6983      	ldr	r3, [r0, #24]
 800eaa8:	b90b      	cbnz	r3, 800eaae <_fflush_r+0x1a>
 800eaaa:	f7ff f881 	bl	800dbb0 <__sinit>
 800eaae:	4b14      	ldr	r3, [pc, #80]	; (800eb00 <_fflush_r+0x6c>)
 800eab0:	429c      	cmp	r4, r3
 800eab2:	d11b      	bne.n	800eaec <_fflush_r+0x58>
 800eab4:	686c      	ldr	r4, [r5, #4]
 800eab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d0ef      	beq.n	800ea9e <_fflush_r+0xa>
 800eabe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eac0:	07d0      	lsls	r0, r2, #31
 800eac2:	d404      	bmi.n	800eace <_fflush_r+0x3a>
 800eac4:	0599      	lsls	r1, r3, #22
 800eac6:	d402      	bmi.n	800eace <_fflush_r+0x3a>
 800eac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eaca:	f7ff f921 	bl	800dd10 <__retarget_lock_acquire_recursive>
 800eace:	4628      	mov	r0, r5
 800ead0:	4621      	mov	r1, r4
 800ead2:	f7ff ff59 	bl	800e988 <__sflush_r>
 800ead6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ead8:	07da      	lsls	r2, r3, #31
 800eada:	4605      	mov	r5, r0
 800eadc:	d4e0      	bmi.n	800eaa0 <_fflush_r+0xc>
 800eade:	89a3      	ldrh	r3, [r4, #12]
 800eae0:	059b      	lsls	r3, r3, #22
 800eae2:	d4dd      	bmi.n	800eaa0 <_fflush_r+0xc>
 800eae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eae6:	f7ff f914 	bl	800dd12 <__retarget_lock_release_recursive>
 800eaea:	e7d9      	b.n	800eaa0 <_fflush_r+0xc>
 800eaec:	4b05      	ldr	r3, [pc, #20]	; (800eb04 <_fflush_r+0x70>)
 800eaee:	429c      	cmp	r4, r3
 800eaf0:	d101      	bne.n	800eaf6 <_fflush_r+0x62>
 800eaf2:	68ac      	ldr	r4, [r5, #8]
 800eaf4:	e7df      	b.n	800eab6 <_fflush_r+0x22>
 800eaf6:	4b04      	ldr	r3, [pc, #16]	; (800eb08 <_fflush_r+0x74>)
 800eaf8:	429c      	cmp	r4, r3
 800eafa:	bf08      	it	eq
 800eafc:	68ec      	ldreq	r4, [r5, #12]
 800eafe:	e7da      	b.n	800eab6 <_fflush_r+0x22>
 800eb00:	0801193c 	.word	0x0801193c
 800eb04:	0801195c 	.word	0x0801195c
 800eb08:	0801191c 	.word	0x0801191c

0800eb0c <_lseek_r>:
 800eb0c:	b538      	push	{r3, r4, r5, lr}
 800eb0e:	4d07      	ldr	r5, [pc, #28]	; (800eb2c <_lseek_r+0x20>)
 800eb10:	4604      	mov	r4, r0
 800eb12:	4608      	mov	r0, r1
 800eb14:	4611      	mov	r1, r2
 800eb16:	2200      	movs	r2, #0
 800eb18:	602a      	str	r2, [r5, #0]
 800eb1a:	461a      	mov	r2, r3
 800eb1c:	f7f1 fecc 	bl	80008b8 <_lseek>
 800eb20:	1c43      	adds	r3, r0, #1
 800eb22:	d102      	bne.n	800eb2a <_lseek_r+0x1e>
 800eb24:	682b      	ldr	r3, [r5, #0]
 800eb26:	b103      	cbz	r3, 800eb2a <_lseek_r+0x1e>
 800eb28:	6023      	str	r3, [r4, #0]
 800eb2a:	bd38      	pop	{r3, r4, r5, pc}
 800eb2c:	20008a78 	.word	0x20008a78

0800eb30 <__swhatbuf_r>:
 800eb30:	b570      	push	{r4, r5, r6, lr}
 800eb32:	460e      	mov	r6, r1
 800eb34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb38:	2900      	cmp	r1, #0
 800eb3a:	b096      	sub	sp, #88	; 0x58
 800eb3c:	4614      	mov	r4, r2
 800eb3e:	461d      	mov	r5, r3
 800eb40:	da07      	bge.n	800eb52 <__swhatbuf_r+0x22>
 800eb42:	2300      	movs	r3, #0
 800eb44:	602b      	str	r3, [r5, #0]
 800eb46:	89b3      	ldrh	r3, [r6, #12]
 800eb48:	061a      	lsls	r2, r3, #24
 800eb4a:	d410      	bmi.n	800eb6e <__swhatbuf_r+0x3e>
 800eb4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb50:	e00e      	b.n	800eb70 <__swhatbuf_r+0x40>
 800eb52:	466a      	mov	r2, sp
 800eb54:	f000 f8d8 	bl	800ed08 <_fstat_r>
 800eb58:	2800      	cmp	r0, #0
 800eb5a:	dbf2      	blt.n	800eb42 <__swhatbuf_r+0x12>
 800eb5c:	9a01      	ldr	r2, [sp, #4]
 800eb5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eb62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800eb66:	425a      	negs	r2, r3
 800eb68:	415a      	adcs	r2, r3
 800eb6a:	602a      	str	r2, [r5, #0]
 800eb6c:	e7ee      	b.n	800eb4c <__swhatbuf_r+0x1c>
 800eb6e:	2340      	movs	r3, #64	; 0x40
 800eb70:	2000      	movs	r0, #0
 800eb72:	6023      	str	r3, [r4, #0]
 800eb74:	b016      	add	sp, #88	; 0x58
 800eb76:	bd70      	pop	{r4, r5, r6, pc}

0800eb78 <__smakebuf_r>:
 800eb78:	898b      	ldrh	r3, [r1, #12]
 800eb7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eb7c:	079d      	lsls	r5, r3, #30
 800eb7e:	4606      	mov	r6, r0
 800eb80:	460c      	mov	r4, r1
 800eb82:	d507      	bpl.n	800eb94 <__smakebuf_r+0x1c>
 800eb84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eb88:	6023      	str	r3, [r4, #0]
 800eb8a:	6123      	str	r3, [r4, #16]
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	6163      	str	r3, [r4, #20]
 800eb90:	b002      	add	sp, #8
 800eb92:	bd70      	pop	{r4, r5, r6, pc}
 800eb94:	ab01      	add	r3, sp, #4
 800eb96:	466a      	mov	r2, sp
 800eb98:	f7ff ffca 	bl	800eb30 <__swhatbuf_r>
 800eb9c:	9900      	ldr	r1, [sp, #0]
 800eb9e:	4605      	mov	r5, r0
 800eba0:	4630      	mov	r0, r6
 800eba2:	f7ff f90f 	bl	800ddc4 <_malloc_r>
 800eba6:	b948      	cbnz	r0, 800ebbc <__smakebuf_r+0x44>
 800eba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebac:	059a      	lsls	r2, r3, #22
 800ebae:	d4ef      	bmi.n	800eb90 <__smakebuf_r+0x18>
 800ebb0:	f023 0303 	bic.w	r3, r3, #3
 800ebb4:	f043 0302 	orr.w	r3, r3, #2
 800ebb8:	81a3      	strh	r3, [r4, #12]
 800ebba:	e7e3      	b.n	800eb84 <__smakebuf_r+0xc>
 800ebbc:	4b0d      	ldr	r3, [pc, #52]	; (800ebf4 <__smakebuf_r+0x7c>)
 800ebbe:	62b3      	str	r3, [r6, #40]	; 0x28
 800ebc0:	89a3      	ldrh	r3, [r4, #12]
 800ebc2:	6020      	str	r0, [r4, #0]
 800ebc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebc8:	81a3      	strh	r3, [r4, #12]
 800ebca:	9b00      	ldr	r3, [sp, #0]
 800ebcc:	6163      	str	r3, [r4, #20]
 800ebce:	9b01      	ldr	r3, [sp, #4]
 800ebd0:	6120      	str	r0, [r4, #16]
 800ebd2:	b15b      	cbz	r3, 800ebec <__smakebuf_r+0x74>
 800ebd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ebd8:	4630      	mov	r0, r6
 800ebda:	f000 f8a7 	bl	800ed2c <_isatty_r>
 800ebde:	b128      	cbz	r0, 800ebec <__smakebuf_r+0x74>
 800ebe0:	89a3      	ldrh	r3, [r4, #12]
 800ebe2:	f023 0303 	bic.w	r3, r3, #3
 800ebe6:	f043 0301 	orr.w	r3, r3, #1
 800ebea:	81a3      	strh	r3, [r4, #12]
 800ebec:	89a0      	ldrh	r0, [r4, #12]
 800ebee:	4305      	orrs	r5, r0
 800ebf0:	81a5      	strh	r5, [r4, #12]
 800ebf2:	e7cd      	b.n	800eb90 <__smakebuf_r+0x18>
 800ebf4:	0800db49 	.word	0x0800db49

0800ebf8 <__malloc_lock>:
 800ebf8:	4801      	ldr	r0, [pc, #4]	; (800ec00 <__malloc_lock+0x8>)
 800ebfa:	f7ff b889 	b.w	800dd10 <__retarget_lock_acquire_recursive>
 800ebfe:	bf00      	nop
 800ec00:	20008a80 	.word	0x20008a80

0800ec04 <__malloc_unlock>:
 800ec04:	4801      	ldr	r0, [pc, #4]	; (800ec0c <__malloc_unlock+0x8>)
 800ec06:	f7ff b884 	b.w	800dd12 <__retarget_lock_release_recursive>
 800ec0a:	bf00      	nop
 800ec0c:	20008a80 	.word	0x20008a80

0800ec10 <_realloc_r>:
 800ec10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec12:	4607      	mov	r7, r0
 800ec14:	4614      	mov	r4, r2
 800ec16:	460e      	mov	r6, r1
 800ec18:	b921      	cbnz	r1, 800ec24 <_realloc_r+0x14>
 800ec1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ec1e:	4611      	mov	r1, r2
 800ec20:	f7ff b8d0 	b.w	800ddc4 <_malloc_r>
 800ec24:	b922      	cbnz	r2, 800ec30 <_realloc_r+0x20>
 800ec26:	f7ff f87d 	bl	800dd24 <_free_r>
 800ec2a:	4625      	mov	r5, r4
 800ec2c:	4628      	mov	r0, r5
 800ec2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec30:	f000 f88c 	bl	800ed4c <_malloc_usable_size_r>
 800ec34:	42a0      	cmp	r0, r4
 800ec36:	d20f      	bcs.n	800ec58 <_realloc_r+0x48>
 800ec38:	4621      	mov	r1, r4
 800ec3a:	4638      	mov	r0, r7
 800ec3c:	f7ff f8c2 	bl	800ddc4 <_malloc_r>
 800ec40:	4605      	mov	r5, r0
 800ec42:	2800      	cmp	r0, #0
 800ec44:	d0f2      	beq.n	800ec2c <_realloc_r+0x1c>
 800ec46:	4631      	mov	r1, r6
 800ec48:	4622      	mov	r2, r4
 800ec4a:	f7fe fe93 	bl	800d974 <memcpy>
 800ec4e:	4631      	mov	r1, r6
 800ec50:	4638      	mov	r0, r7
 800ec52:	f7ff f867 	bl	800dd24 <_free_r>
 800ec56:	e7e9      	b.n	800ec2c <_realloc_r+0x1c>
 800ec58:	4635      	mov	r5, r6
 800ec5a:	e7e7      	b.n	800ec2c <_realloc_r+0x1c>

0800ec5c <_read_r>:
 800ec5c:	b538      	push	{r3, r4, r5, lr}
 800ec5e:	4d07      	ldr	r5, [pc, #28]	; (800ec7c <_read_r+0x20>)
 800ec60:	4604      	mov	r4, r0
 800ec62:	4608      	mov	r0, r1
 800ec64:	4611      	mov	r1, r2
 800ec66:	2200      	movs	r2, #0
 800ec68:	602a      	str	r2, [r5, #0]
 800ec6a:	461a      	mov	r2, r3
 800ec6c:	f7f1 fdc4 	bl	80007f8 <_read>
 800ec70:	1c43      	adds	r3, r0, #1
 800ec72:	d102      	bne.n	800ec7a <_read_r+0x1e>
 800ec74:	682b      	ldr	r3, [r5, #0]
 800ec76:	b103      	cbz	r3, 800ec7a <_read_r+0x1e>
 800ec78:	6023      	str	r3, [r4, #0]
 800ec7a:	bd38      	pop	{r3, r4, r5, pc}
 800ec7c:	20008a78 	.word	0x20008a78

0800ec80 <_raise_r>:
 800ec80:	291f      	cmp	r1, #31
 800ec82:	b538      	push	{r3, r4, r5, lr}
 800ec84:	4604      	mov	r4, r0
 800ec86:	460d      	mov	r5, r1
 800ec88:	d904      	bls.n	800ec94 <_raise_r+0x14>
 800ec8a:	2316      	movs	r3, #22
 800ec8c:	6003      	str	r3, [r0, #0]
 800ec8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ec92:	bd38      	pop	{r3, r4, r5, pc}
 800ec94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ec96:	b112      	cbz	r2, 800ec9e <_raise_r+0x1e>
 800ec98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ec9c:	b94b      	cbnz	r3, 800ecb2 <_raise_r+0x32>
 800ec9e:	4620      	mov	r0, r4
 800eca0:	f000 f830 	bl	800ed04 <_getpid_r>
 800eca4:	462a      	mov	r2, r5
 800eca6:	4601      	mov	r1, r0
 800eca8:	4620      	mov	r0, r4
 800ecaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ecae:	f000 b817 	b.w	800ece0 <_kill_r>
 800ecb2:	2b01      	cmp	r3, #1
 800ecb4:	d00a      	beq.n	800eccc <_raise_r+0x4c>
 800ecb6:	1c59      	adds	r1, r3, #1
 800ecb8:	d103      	bne.n	800ecc2 <_raise_r+0x42>
 800ecba:	2316      	movs	r3, #22
 800ecbc:	6003      	str	r3, [r0, #0]
 800ecbe:	2001      	movs	r0, #1
 800ecc0:	e7e7      	b.n	800ec92 <_raise_r+0x12>
 800ecc2:	2400      	movs	r4, #0
 800ecc4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ecc8:	4628      	mov	r0, r5
 800ecca:	4798      	blx	r3
 800eccc:	2000      	movs	r0, #0
 800ecce:	e7e0      	b.n	800ec92 <_raise_r+0x12>

0800ecd0 <raise>:
 800ecd0:	4b02      	ldr	r3, [pc, #8]	; (800ecdc <raise+0xc>)
 800ecd2:	4601      	mov	r1, r0
 800ecd4:	6818      	ldr	r0, [r3, #0]
 800ecd6:	f7ff bfd3 	b.w	800ec80 <_raise_r>
 800ecda:	bf00      	nop
 800ecdc:	20000014 	.word	0x20000014

0800ece0 <_kill_r>:
 800ece0:	b538      	push	{r3, r4, r5, lr}
 800ece2:	4d07      	ldr	r5, [pc, #28]	; (800ed00 <_kill_r+0x20>)
 800ece4:	2300      	movs	r3, #0
 800ece6:	4604      	mov	r4, r0
 800ece8:	4608      	mov	r0, r1
 800ecea:	4611      	mov	r1, r2
 800ecec:	602b      	str	r3, [r5, #0]
 800ecee:	f7f1 fd67 	bl	80007c0 <_kill>
 800ecf2:	1c43      	adds	r3, r0, #1
 800ecf4:	d102      	bne.n	800ecfc <_kill_r+0x1c>
 800ecf6:	682b      	ldr	r3, [r5, #0]
 800ecf8:	b103      	cbz	r3, 800ecfc <_kill_r+0x1c>
 800ecfa:	6023      	str	r3, [r4, #0]
 800ecfc:	bd38      	pop	{r3, r4, r5, pc}
 800ecfe:	bf00      	nop
 800ed00:	20008a78 	.word	0x20008a78

0800ed04 <_getpid_r>:
 800ed04:	f7f1 bd54 	b.w	80007b0 <_getpid>

0800ed08 <_fstat_r>:
 800ed08:	b538      	push	{r3, r4, r5, lr}
 800ed0a:	4d07      	ldr	r5, [pc, #28]	; (800ed28 <_fstat_r+0x20>)
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	4604      	mov	r4, r0
 800ed10:	4608      	mov	r0, r1
 800ed12:	4611      	mov	r1, r2
 800ed14:	602b      	str	r3, [r5, #0]
 800ed16:	f7f1 fdb4 	bl	8000882 <_fstat>
 800ed1a:	1c43      	adds	r3, r0, #1
 800ed1c:	d102      	bne.n	800ed24 <_fstat_r+0x1c>
 800ed1e:	682b      	ldr	r3, [r5, #0]
 800ed20:	b103      	cbz	r3, 800ed24 <_fstat_r+0x1c>
 800ed22:	6023      	str	r3, [r4, #0]
 800ed24:	bd38      	pop	{r3, r4, r5, pc}
 800ed26:	bf00      	nop
 800ed28:	20008a78 	.word	0x20008a78

0800ed2c <_isatty_r>:
 800ed2c:	b538      	push	{r3, r4, r5, lr}
 800ed2e:	4d06      	ldr	r5, [pc, #24]	; (800ed48 <_isatty_r+0x1c>)
 800ed30:	2300      	movs	r3, #0
 800ed32:	4604      	mov	r4, r0
 800ed34:	4608      	mov	r0, r1
 800ed36:	602b      	str	r3, [r5, #0]
 800ed38:	f7f1 fdb3 	bl	80008a2 <_isatty>
 800ed3c:	1c43      	adds	r3, r0, #1
 800ed3e:	d102      	bne.n	800ed46 <_isatty_r+0x1a>
 800ed40:	682b      	ldr	r3, [r5, #0]
 800ed42:	b103      	cbz	r3, 800ed46 <_isatty_r+0x1a>
 800ed44:	6023      	str	r3, [r4, #0]
 800ed46:	bd38      	pop	{r3, r4, r5, pc}
 800ed48:	20008a78 	.word	0x20008a78

0800ed4c <_malloc_usable_size_r>:
 800ed4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed50:	1f18      	subs	r0, r3, #4
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	bfbc      	itt	lt
 800ed56:	580b      	ldrlt	r3, [r1, r0]
 800ed58:	18c0      	addlt	r0, r0, r3
 800ed5a:	4770      	bx	lr

0800ed5c <_init>:
 800ed5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed5e:	bf00      	nop
 800ed60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed62:	bc08      	pop	{r3}
 800ed64:	469e      	mov	lr, r3
 800ed66:	4770      	bx	lr

0800ed68 <_fini>:
 800ed68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed6a:	bf00      	nop
 800ed6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed6e:	bc08      	pop	{r3}
 800ed70:	469e      	mov	lr, r3
 800ed72:	4770      	bx	lr
