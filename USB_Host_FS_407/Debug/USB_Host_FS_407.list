
USB_Host_FS_407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a780  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  0800a908  0800a908  0001a908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa2c  0800aa2c  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa2c  0800aa2c  0001aa2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa34  0800aa34  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa34  0800aa34  0001aa34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa38  0800aa38  0001aa38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800aa3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00000bf8  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000c04  20000c8c  20000c8c  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a74e  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004085  00000000  00000000  0003a812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001360  00000000  00000000  0003e898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001188  00000000  00000000  0003fbf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026161  00000000  00000000  00040d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b7f5  00000000  00000000  00066ee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf156  00000000  00000000  000826d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015182c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000051b4  00000000  00000000  0015187c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000094 	.word	0x20000094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a8f0 	.word	0x0800a8f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000098 	.word	0x20000098
 80001c4:	0800a8f0 	.word	0x0800a8f0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fa5a 	bl	8000988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f80a 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f872 	bl	80005c0 <MX_GPIO_Init>
  MX_FATFS_Init();
 80004dc:	f004 f8a6 	bl	800462c <MX_FATFS_Init>
  MX_USB_HOST_Init();
 80004e0:	f009 fd8e 	bl	800a000 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004e4:	f009 fdb2 	bl	800a04c <MX_USB_HOST_Process>
 80004e8:	e7fc      	b.n	80004e4 <main+0x18>
	...

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b094      	sub	sp, #80	; 0x50
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 0320 	add.w	r3, r7, #32
 80004f6:	2230      	movs	r2, #48	; 0x30
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f00a f8f2 	bl	800a6e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	f107 030c 	add.w	r3, r7, #12
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000510:	2300      	movs	r3, #0
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	4b28      	ldr	r3, [pc, #160]	; (80005b8 <SystemClock_Config+0xcc>)
 8000516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000518:	4a27      	ldr	r2, [pc, #156]	; (80005b8 <SystemClock_Config+0xcc>)
 800051a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800051e:	6413      	str	r3, [r2, #64]	; 0x40
 8000520:	4b25      	ldr	r3, [pc, #148]	; (80005b8 <SystemClock_Config+0xcc>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800052c:	2300      	movs	r3, #0
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	4b22      	ldr	r3, [pc, #136]	; (80005bc <SystemClock_Config+0xd0>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a21      	ldr	r2, [pc, #132]	; (80005bc <SystemClock_Config+0xd0>)
 8000536:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800053a:	6013      	str	r3, [r2, #0]
 800053c:	4b1f      	ldr	r3, [pc, #124]	; (80005bc <SystemClock_Config+0xd0>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000548:	2301      	movs	r3, #1
 800054a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800054c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000550:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000552:	2302      	movs	r3, #2
 8000554:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000556:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800055a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800055c:	2304      	movs	r3, #4
 800055e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000560:	23a8      	movs	r3, #168	; 0xa8
 8000562:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000564:	2302      	movs	r3, #2
 8000566:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000568:	2307      	movs	r3, #7
 800056a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056c:	f107 0320 	add.w	r3, r7, #32
 8000570:	4618      	mov	r0, r3
 8000572:	f002 f911 	bl	8002798 <HAL_RCC_OscConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800057c:	f000 f8a8 	bl	80006d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000580:	230f      	movs	r3, #15
 8000582:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000584:	2302      	movs	r3, #2
 8000586:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800058c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000590:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000592:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000596:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2105      	movs	r1, #5
 800059e:	4618      	mov	r0, r3
 80005a0:	f002 fb72 	bl	8002c88 <HAL_RCC_ClockConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005aa:	f000 f891 	bl	80006d0 <Error_Handler>
  }
}
 80005ae:	bf00      	nop
 80005b0:	3750      	adds	r7, #80	; 0x50
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40023800 	.word	0x40023800
 80005bc:	40007000 	.word	0x40007000

080005c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08a      	sub	sp, #40	; 0x28
 80005c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
 80005da:	4b31      	ldr	r3, [pc, #196]	; (80006a0 <MX_GPIO_Init+0xe0>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a30      	ldr	r2, [pc, #192]	; (80006a0 <MX_GPIO_Init+0xe0>)
 80005e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <MX_GPIO_Init+0xe0>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ee:	613b      	str	r3, [r7, #16]
 80005f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	4b2a      	ldr	r3, [pc, #168]	; (80006a0 <MX_GPIO_Init+0xe0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a29      	ldr	r2, [pc, #164]	; (80006a0 <MX_GPIO_Init+0xe0>)
 80005fc:	f043 0304 	orr.w	r3, r3, #4
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b27      	ldr	r3, [pc, #156]	; (80006a0 <MX_GPIO_Init+0xe0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0304 	and.w	r3, r3, #4
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	4b23      	ldr	r3, [pc, #140]	; (80006a0 <MX_GPIO_Init+0xe0>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a22      	ldr	r2, [pc, #136]	; (80006a0 <MX_GPIO_Init+0xe0>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <MX_GPIO_Init+0xe0>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <MX_GPIO_Init+0xe0>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a1b      	ldr	r2, [pc, #108]	; (80006a0 <MX_GPIO_Init+0xe0>)
 8000634:	f043 0308 	orr.w	r3, r3, #8
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <MX_GPIO_Init+0xe0>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0308 	and.w	r3, r3, #8
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 7100 	mov.w	r1, #512	; 0x200
 800064c:	4815      	ldr	r0, [pc, #84]	; (80006a4 <MX_GPIO_Init+0xe4>)
 800064e:	f000 fc7f 	bl	8000f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD5_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2130      	movs	r1, #48	; 0x30
 8000656:	4814      	ldr	r0, [pc, #80]	; (80006a8 <MX_GPIO_Init+0xe8>)
 8000658:	f000 fc7a 	bl	8000f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800065c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000662:	2301      	movs	r3, #1
 8000664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066a:	2300      	movs	r3, #0
 800066c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4619      	mov	r1, r3
 8000674:	480b      	ldr	r0, [pc, #44]	; (80006a4 <MX_GPIO_Init+0xe4>)
 8000676:	f000 facf 	bl	8000c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD5_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD5_Pin;
 800067a:	2330      	movs	r3, #48	; 0x30
 800067c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067e:	2301      	movs	r3, #1
 8000680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000686:	2300      	movs	r3, #0
 8000688:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4619      	mov	r1, r3
 8000690:	4805      	ldr	r0, [pc, #20]	; (80006a8 <MX_GPIO_Init+0xe8>)
 8000692:	f000 fac1 	bl	8000c18 <HAL_GPIO_Init>

}
 8000696:	bf00      	nop
 8000698:	3728      	adds	r7, #40	; 0x28
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40020800 	.word	0x40020800
 80006a8:	40020c00 	.word	0x40020c00

080006ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a04      	ldr	r2, [pc, #16]	; (80006cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d101      	bne.n	80006c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006be:	f000 f985 	bl	80009cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40002000 	.word	0x40002000

080006d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d4:	b672      	cpsid	i
}
 80006d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <Error_Handler+0x8>
	...

080006dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <HAL_MspInit+0x4c>)
 80006e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ea:	4a0f      	ldr	r2, [pc, #60]	; (8000728 <HAL_MspInit+0x4c>)
 80006ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f0:	6453      	str	r3, [r2, #68]	; 0x44
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <HAL_MspInit+0x4c>)
 80006f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <HAL_MspInit+0x4c>)
 8000704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000706:	4a08      	ldr	r2, [pc, #32]	; (8000728 <HAL_MspInit+0x4c>)
 8000708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070c:	6413      	str	r3, [r2, #64]	; 0x40
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_MspInit+0x4c>)
 8000710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800

0800072c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08e      	sub	sp, #56	; 0x38
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000734:	2300      	movs	r3, #0
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000738:	2300      	movs	r3, #0
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800073c:	2300      	movs	r3, #0
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	4b33      	ldr	r3, [pc, #204]	; (8000810 <HAL_InitTick+0xe4>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	4a32      	ldr	r2, [pc, #200]	; (8000810 <HAL_InitTick+0xe4>)
 8000746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800074a:	6413      	str	r3, [r2, #64]	; 0x40
 800074c:	4b30      	ldr	r3, [pc, #192]	; (8000810 <HAL_InitTick+0xe4>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000758:	f107 0210 	add.w	r2, r7, #16
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	4611      	mov	r1, r2
 8000762:	4618      	mov	r0, r3
 8000764:	f002 fc9c 	bl	80030a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000768:	6a3b      	ldr	r3, [r7, #32]
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800076c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800076e:	2b00      	cmp	r3, #0
 8000770:	d103      	bne.n	800077a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000772:	f002 fc81 	bl	8003078 <HAL_RCC_GetPCLK1Freq>
 8000776:	6378      	str	r0, [r7, #52]	; 0x34
 8000778:	e004      	b.n	8000784 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800077a:	f002 fc7d 	bl	8003078 <HAL_RCC_GetPCLK1Freq>
 800077e:	4603      	mov	r3, r0
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000786:	4a23      	ldr	r2, [pc, #140]	; (8000814 <HAL_InitTick+0xe8>)
 8000788:	fba2 2303 	umull	r2, r3, r2, r3
 800078c:	0c9b      	lsrs	r3, r3, #18
 800078e:	3b01      	subs	r3, #1
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000792:	4b21      	ldr	r3, [pc, #132]	; (8000818 <HAL_InitTick+0xec>)
 8000794:	4a21      	ldr	r2, [pc, #132]	; (800081c <HAL_InitTick+0xf0>)
 8000796:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000798:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <HAL_InitTick+0xec>)
 800079a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800079e:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80007a0:	4a1d      	ldr	r2, [pc, #116]	; (8000818 <HAL_InitTick+0xec>)
 80007a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007a4:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <HAL_InitTick+0xec>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <HAL_InitTick+0xec>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <HAL_InitTick+0xec>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80007b8:	4817      	ldr	r0, [pc, #92]	; (8000818 <HAL_InitTick+0xec>)
 80007ba:	f002 fca3 	bl	8003104 <HAL_TIM_Base_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80007c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d11b      	bne.n	8000804 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80007cc:	4812      	ldr	r0, [pc, #72]	; (8000818 <HAL_InitTick+0xec>)
 80007ce:	f002 fcf3 	bl	80031b8 <HAL_TIM_Base_Start_IT>
 80007d2:	4603      	mov	r3, r0
 80007d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80007d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d111      	bne.n	8000804 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80007e0:	202d      	movs	r0, #45	; 0x2d
 80007e2:	f000 fa0b 	bl	8000bfc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2b0f      	cmp	r3, #15
 80007ea:	d808      	bhi.n	80007fe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 80007ec:	2200      	movs	r2, #0
 80007ee:	6879      	ldr	r1, [r7, #4]
 80007f0:	202d      	movs	r0, #45	; 0x2d
 80007f2:	f000 f9e7 	bl	8000bc4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007f6:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <HAL_InitTick+0xf4>)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	e002      	b.n	8000804 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
 8000800:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000804:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000808:	4618      	mov	r0, r3
 800080a:	3738      	adds	r7, #56	; 0x38
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40023800 	.word	0x40023800
 8000814:	431bde83 	.word	0x431bde83
 8000818:	200000b0 	.word	0x200000b0
 800081c:	40002000 	.word	0x40002000
 8000820:	20000004 	.word	0x20000004

08000824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <NMI_Handler+0x4>

0800082a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <HardFault_Handler+0x4>

08000830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <MemManage_Handler+0x4>

08000836 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800083a:	e7fe      	b.n	800083a <BusFault_Handler+0x4>

0800083c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <UsageFault_Handler+0x4>

08000842 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
	...

0800087c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000880:	4802      	ldr	r0, [pc, #8]	; (800088c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000882:	f002 fd09 	bl	8003298 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200000b0 	.word	0x200000b0

08000890 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000894:	4802      	ldr	r0, [pc, #8]	; (80008a0 <OTG_FS_IRQHandler+0x10>)
 8000896:	f000 fddf 	bl	8001458 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000978 	.word	0x20000978

080008a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008ac:	4a14      	ldr	r2, [pc, #80]	; (8000900 <_sbrk+0x5c>)
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <_sbrk+0x60>)
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b8:	4b13      	ldr	r3, [pc, #76]	; (8000908 <_sbrk+0x64>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d102      	bne.n	80008c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <_sbrk+0x64>)
 80008c2:	4a12      	ldr	r2, [pc, #72]	; (800090c <_sbrk+0x68>)
 80008c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <_sbrk+0x64>)
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4413      	add	r3, r2
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d207      	bcs.n	80008e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008d4:	f009 febe 	bl	800a654 <__errno>
 80008d8:	4603      	mov	r3, r0
 80008da:	220c      	movs	r2, #12
 80008dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008e2:	e009      	b.n	80008f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <_sbrk+0x64>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ea:	4b07      	ldr	r3, [pc, #28]	; (8000908 <_sbrk+0x64>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4413      	add	r3, r2
 80008f2:	4a05      	ldr	r2, [pc, #20]	; (8000908 <_sbrk+0x64>)
 80008f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008f6:	68fb      	ldr	r3, [r7, #12]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3718      	adds	r7, #24
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20020000 	.word	0x20020000
 8000904:	00000800 	.word	0x00000800
 8000908:	200000f8 	.word	0x200000f8
 800090c:	20000c90 	.word	0x20000c90

08000910 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <SystemInit+0x20>)
 8000916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800091a:	4a05      	ldr	r2, [pc, #20]	; (8000930 <SystemInit+0x20>)
 800091c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000934:	f8df d034 	ldr.w	sp, [pc, #52]	; 800096c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000938:	480d      	ldr	r0, [pc, #52]	; (8000970 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800093a:	490e      	ldr	r1, [pc, #56]	; (8000974 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800093c:	4a0e      	ldr	r2, [pc, #56]	; (8000978 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000940:	e002      	b.n	8000948 <LoopCopyDataInit>

08000942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000946:	3304      	adds	r3, #4

08000948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800094c:	d3f9      	bcc.n	8000942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094e:	4a0b      	ldr	r2, [pc, #44]	; (800097c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000950:	4c0b      	ldr	r4, [pc, #44]	; (8000980 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000954:	e001      	b.n	800095a <LoopFillZerobss>

08000956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000958:	3204      	adds	r2, #4

0800095a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800095c:	d3fb      	bcc.n	8000956 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800095e:	f7ff ffd7 	bl	8000910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000962:	f009 fe7d 	bl	800a660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000966:	f7ff fdb1 	bl	80004cc <main>
  bx  lr    
 800096a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800096c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000974:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000978:	0800aa3c 	.word	0x0800aa3c
  ldr r2, =_sbss
 800097c:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8000980:	20000c8c 	.word	0x20000c8c

08000984 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000984:	e7fe      	b.n	8000984 <ADC_IRQHandler>
	...

08000988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800098c:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <HAL_Init+0x40>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a0d      	ldr	r2, [pc, #52]	; (80009c8 <HAL_Init+0x40>)
 8000992:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000996:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <HAL_Init+0x40>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <HAL_Init+0x40>)
 800099e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <HAL_Init+0x40>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a07      	ldr	r2, [pc, #28]	; (80009c8 <HAL_Init+0x40>)
 80009aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b0:	2003      	movs	r0, #3
 80009b2:	f000 f8fc 	bl	8000bae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009b6:	200f      	movs	r0, #15
 80009b8:	f7ff feb8 	bl	800072c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009bc:	f7ff fe8e 	bl	80006dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023c00 	.word	0x40023c00

080009cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_IncTick+0x20>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_IncTick+0x24>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4413      	add	r3, r2
 80009dc:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <HAL_IncTick+0x24>)
 80009de:	6013      	str	r3, [r2, #0]
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	20000008 	.word	0x20000008
 80009f0:	200000fc 	.word	0x200000fc

080009f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return uwTick;
 80009f8:	4b03      	ldr	r3, [pc, #12]	; (8000a08 <HAL_GetTick+0x14>)
 80009fa:	681b      	ldr	r3, [r3, #0]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	200000fc 	.word	0x200000fc

08000a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a14:	f7ff ffee 	bl	80009f4 <HAL_GetTick>
 8000a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a24:	d005      	beq.n	8000a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a26:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <HAL_Delay+0x44>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	4413      	add	r3, r2
 8000a30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a32:	bf00      	nop
 8000a34:	f7ff ffde 	bl	80009f4 <HAL_GetTick>
 8000a38:	4602      	mov	r2, r0
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d8f7      	bhi.n	8000a34 <HAL_Delay+0x28>
  {
  }
}
 8000a44:	bf00      	nop
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000008 	.word	0x20000008

08000a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f003 0307 	and.w	r3, r3, #7
 8000a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <__NVIC_SetPriorityGrouping+0x44>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a6a:	68ba      	ldr	r2, [r7, #8]
 8000a6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a70:	4013      	ands	r3, r2
 8000a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a86:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <__NVIC_SetPriorityGrouping+0x44>)
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	60d3      	str	r3, [r2, #12]
}
 8000a8c:	bf00      	nop
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	0a1b      	lsrs	r3, r3, #8
 8000aa6:	f003 0307 	and.w	r3, r3, #7
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	db0b      	blt.n	8000ae2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	f003 021f 	and.w	r2, r3, #31
 8000ad0:	4907      	ldr	r1, [pc, #28]	; (8000af0 <__NVIC_EnableIRQ+0x38>)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	095b      	lsrs	r3, r3, #5
 8000ad8:	2001      	movs	r0, #1
 8000ada:	fa00 f202 	lsl.w	r2, r0, r2
 8000ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000e100 	.word	0xe000e100

08000af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	6039      	str	r1, [r7, #0]
 8000afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	db0a      	blt.n	8000b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	490c      	ldr	r1, [pc, #48]	; (8000b40 <__NVIC_SetPriority+0x4c>)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	0112      	lsls	r2, r2, #4
 8000b14:	b2d2      	uxtb	r2, r2
 8000b16:	440b      	add	r3, r1
 8000b18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b1c:	e00a      	b.n	8000b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4908      	ldr	r1, [pc, #32]	; (8000b44 <__NVIC_SetPriority+0x50>)
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	f003 030f 	and.w	r3, r3, #15
 8000b2a:	3b04      	subs	r3, #4
 8000b2c:	0112      	lsls	r2, r2, #4
 8000b2e:	b2d2      	uxtb	r2, r2
 8000b30:	440b      	add	r3, r1
 8000b32:	761a      	strb	r2, [r3, #24]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000e100 	.word	0xe000e100
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b089      	sub	sp, #36	; 0x24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	f1c3 0307 	rsb	r3, r3, #7
 8000b62:	2b04      	cmp	r3, #4
 8000b64:	bf28      	it	cs
 8000b66:	2304      	movcs	r3, #4
 8000b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	3304      	adds	r3, #4
 8000b6e:	2b06      	cmp	r3, #6
 8000b70:	d902      	bls.n	8000b78 <NVIC_EncodePriority+0x30>
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	3b03      	subs	r3, #3
 8000b76:	e000      	b.n	8000b7a <NVIC_EncodePriority+0x32>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43da      	mvns	r2, r3
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9a:	43d9      	mvns	r1, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	4313      	orrs	r3, r2
         );
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3724      	adds	r7, #36	; 0x24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff ff4c 	bl	8000a54 <__NVIC_SetPriorityGrouping>
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
 8000bd0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd6:	f7ff ff61 	bl	8000a9c <__NVIC_GetPriorityGrouping>
 8000bda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	68b9      	ldr	r1, [r7, #8]
 8000be0:	6978      	ldr	r0, [r7, #20]
 8000be2:	f7ff ffb1 	bl	8000b48 <NVIC_EncodePriority>
 8000be6:	4602      	mov	r2, r0
 8000be8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bec:	4611      	mov	r1, r2
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff ff80 	bl	8000af4 <__NVIC_SetPriority>
}
 8000bf4:	bf00      	nop
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff ff54 	bl	8000ab8 <__NVIC_EnableIRQ>
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b089      	sub	sp, #36	; 0x24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
 8000c32:	e16b      	b.n	8000f0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c34:	2201      	movs	r2, #1
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	697a      	ldr	r2, [r7, #20]
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	f040 815a 	bne.w	8000f06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f003 0303 	and.w	r3, r3, #3
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d005      	beq.n	8000c6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d130      	bne.n	8000ccc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	2203      	movs	r2, #3
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	68da      	ldr	r2, [r3, #12]
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	69ba      	ldr	r2, [r7, #24]
 8000c98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	4013      	ands	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	091b      	lsrs	r3, r3, #4
 8000cb6:	f003 0201 	and.w	r2, r3, #1
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f003 0303 	and.w	r3, r3, #3
 8000cd4:	2b03      	cmp	r3, #3
 8000cd6:	d017      	beq.n	8000d08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	4013      	ands	r3, r2
 8000cee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 0303 	and.w	r3, r3, #3
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d123      	bne.n	8000d5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	08da      	lsrs	r2, r3, #3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3208      	adds	r2, #8
 8000d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	f003 0307 	and.w	r3, r3, #7
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	220f      	movs	r2, #15
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	691a      	ldr	r2, [r3, #16]
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	08da      	lsrs	r2, r3, #3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	3208      	adds	r2, #8
 8000d56:	69b9      	ldr	r1, [r7, #24]
 8000d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	2203      	movs	r2, #3
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0203 	and.w	r2, r3, #3
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	f000 80b4 	beq.w	8000f06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	4b60      	ldr	r3, [pc, #384]	; (8000f24 <HAL_GPIO_Init+0x30c>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	4a5f      	ldr	r2, [pc, #380]	; (8000f24 <HAL_GPIO_Init+0x30c>)
 8000da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dac:	6453      	str	r3, [r2, #68]	; 0x44
 8000dae:	4b5d      	ldr	r3, [pc, #372]	; (8000f24 <HAL_GPIO_Init+0x30c>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dba:	4a5b      	ldr	r2, [pc, #364]	; (8000f28 <HAL_GPIO_Init+0x310>)
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	089b      	lsrs	r3, r3, #2
 8000dc0:	3302      	adds	r3, #2
 8000dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f003 0303 	and.w	r3, r3, #3
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	220f      	movs	r2, #15
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a52      	ldr	r2, [pc, #328]	; (8000f2c <HAL_GPIO_Init+0x314>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d02b      	beq.n	8000e3e <HAL_GPIO_Init+0x226>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a51      	ldr	r2, [pc, #324]	; (8000f30 <HAL_GPIO_Init+0x318>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d025      	beq.n	8000e3a <HAL_GPIO_Init+0x222>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a50      	ldr	r2, [pc, #320]	; (8000f34 <HAL_GPIO_Init+0x31c>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d01f      	beq.n	8000e36 <HAL_GPIO_Init+0x21e>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a4f      	ldr	r2, [pc, #316]	; (8000f38 <HAL_GPIO_Init+0x320>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d019      	beq.n	8000e32 <HAL_GPIO_Init+0x21a>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a4e      	ldr	r2, [pc, #312]	; (8000f3c <HAL_GPIO_Init+0x324>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d013      	beq.n	8000e2e <HAL_GPIO_Init+0x216>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a4d      	ldr	r2, [pc, #308]	; (8000f40 <HAL_GPIO_Init+0x328>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d00d      	beq.n	8000e2a <HAL_GPIO_Init+0x212>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a4c      	ldr	r2, [pc, #304]	; (8000f44 <HAL_GPIO_Init+0x32c>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d007      	beq.n	8000e26 <HAL_GPIO_Init+0x20e>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a4b      	ldr	r2, [pc, #300]	; (8000f48 <HAL_GPIO_Init+0x330>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d101      	bne.n	8000e22 <HAL_GPIO_Init+0x20a>
 8000e1e:	2307      	movs	r3, #7
 8000e20:	e00e      	b.n	8000e40 <HAL_GPIO_Init+0x228>
 8000e22:	2308      	movs	r3, #8
 8000e24:	e00c      	b.n	8000e40 <HAL_GPIO_Init+0x228>
 8000e26:	2306      	movs	r3, #6
 8000e28:	e00a      	b.n	8000e40 <HAL_GPIO_Init+0x228>
 8000e2a:	2305      	movs	r3, #5
 8000e2c:	e008      	b.n	8000e40 <HAL_GPIO_Init+0x228>
 8000e2e:	2304      	movs	r3, #4
 8000e30:	e006      	b.n	8000e40 <HAL_GPIO_Init+0x228>
 8000e32:	2303      	movs	r3, #3
 8000e34:	e004      	b.n	8000e40 <HAL_GPIO_Init+0x228>
 8000e36:	2302      	movs	r3, #2
 8000e38:	e002      	b.n	8000e40 <HAL_GPIO_Init+0x228>
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e000      	b.n	8000e40 <HAL_GPIO_Init+0x228>
 8000e3e:	2300      	movs	r3, #0
 8000e40:	69fa      	ldr	r2, [r7, #28]
 8000e42:	f002 0203 	and.w	r2, r2, #3
 8000e46:	0092      	lsls	r2, r2, #2
 8000e48:	4093      	lsls	r3, r2
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e50:	4935      	ldr	r1, [pc, #212]	; (8000f28 <HAL_GPIO_Init+0x310>)
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	089b      	lsrs	r3, r3, #2
 8000e56:	3302      	adds	r3, #2
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e5e:	4b3b      	ldr	r3, [pc, #236]	; (8000f4c <HAL_GPIO_Init+0x334>)
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	43db      	mvns	r3, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d003      	beq.n	8000e82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e82:	4a32      	ldr	r2, [pc, #200]	; (8000f4c <HAL_GPIO_Init+0x334>)
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e88:	4b30      	ldr	r3, [pc, #192]	; (8000f4c <HAL_GPIO_Init+0x334>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d003      	beq.n	8000eac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000eac:	4a27      	ldr	r2, [pc, #156]	; (8000f4c <HAL_GPIO_Init+0x334>)
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eb2:	4b26      	ldr	r3, [pc, #152]	; (8000f4c <HAL_GPIO_Init+0x334>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ed6:	4a1d      	ldr	r2, [pc, #116]	; (8000f4c <HAL_GPIO_Init+0x334>)
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000edc:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <HAL_GPIO_Init+0x334>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d003      	beq.n	8000f00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f00:	4a12      	ldr	r2, [pc, #72]	; (8000f4c <HAL_GPIO_Init+0x334>)
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	61fb      	str	r3, [r7, #28]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	2b0f      	cmp	r3, #15
 8000f10:	f67f ae90 	bls.w	8000c34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3724      	adds	r7, #36	; 0x24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40013800 	.word	0x40013800
 8000f2c:	40020000 	.word	0x40020000
 8000f30:	40020400 	.word	0x40020400
 8000f34:	40020800 	.word	0x40020800
 8000f38:	40020c00 	.word	0x40020c00
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40021400 	.word	0x40021400
 8000f44:	40021800 	.word	0x40021800
 8000f48:	40021c00 	.word	0x40021c00
 8000f4c:	40013c00 	.word	0x40013c00

08000f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	807b      	strh	r3, [r7, #2]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f60:	787b      	ldrb	r3, [r7, #1]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f66:	887a      	ldrh	r2, [r7, #2]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f6c:	e003      	b.n	8000f76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f6e:	887b      	ldrh	r3, [r7, #2]
 8000f70:	041a      	lsls	r2, r3, #16
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	619a      	str	r2, [r3, #24]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000f82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f84:	b08f      	sub	sp, #60	; 0x3c
 8000f86:	af0a      	add	r7, sp, #40	; 0x28
 8000f88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e054      	b.n	800103e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d106      	bne.n	8000fb4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f009 f884 	bl	800a0bc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d102      	bne.n	8000fce <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f002 fbb6 	bl	8003744 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	603b      	str	r3, [r7, #0]
 8000fde:	687e      	ldr	r6, [r7, #4]
 8000fe0:	466d      	mov	r5, sp
 8000fe2:	f106 0410 	add.w	r4, r6, #16
 8000fe6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fe8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ff2:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ff6:	1d33      	adds	r3, r6, #4
 8000ff8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ffa:	6838      	ldr	r0, [r7, #0]
 8000ffc:	f002 fb30 	bl	8003660 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2101      	movs	r1, #1
 8001006:	4618      	mov	r0, r3
 8001008:	f002 fbad 	bl	8003766 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	603b      	str	r3, [r7, #0]
 8001012:	687e      	ldr	r6, [r7, #4]
 8001014:	466d      	mov	r5, sp
 8001016:	f106 0410 	add.w	r4, r6, #16
 800101a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800101c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800101e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001020:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001022:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001026:	e885 0003 	stmia.w	r5, {r0, r1}
 800102a:	1d33      	adds	r3, r6, #4
 800102c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800102e:	6838      	ldr	r0, [r7, #0]
 8001030:	f002 fd36 	bl	8003aa0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2201      	movs	r2, #1
 8001038:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001046 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001046:	b590      	push	{r4, r7, lr}
 8001048:	b089      	sub	sp, #36	; 0x24
 800104a:	af04      	add	r7, sp, #16
 800104c:	6078      	str	r0, [r7, #4]
 800104e:	4608      	mov	r0, r1
 8001050:	4611      	mov	r1, r2
 8001052:	461a      	mov	r2, r3
 8001054:	4603      	mov	r3, r0
 8001056:	70fb      	strb	r3, [r7, #3]
 8001058:	460b      	mov	r3, r1
 800105a:	70bb      	strb	r3, [r7, #2]
 800105c:	4613      	mov	r3, r2
 800105e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001066:	2b01      	cmp	r3, #1
 8001068:	d101      	bne.n	800106e <HAL_HCD_HC_Init+0x28>
 800106a:	2302      	movs	r3, #2
 800106c:	e076      	b.n	800115c <HAL_HCD_HC_Init+0x116>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2201      	movs	r2, #1
 8001072:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001076:	78fb      	ldrb	r3, [r7, #3]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	212c      	movs	r1, #44	; 0x2c
 800107c:	fb01 f303 	mul.w	r3, r1, r3
 8001080:	4413      	add	r3, r2
 8001082:	333d      	adds	r3, #61	; 0x3d
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001088:	78fb      	ldrb	r3, [r7, #3]
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	212c      	movs	r1, #44	; 0x2c
 800108e:	fb01 f303 	mul.w	r3, r1, r3
 8001092:	4413      	add	r3, r2
 8001094:	3338      	adds	r3, #56	; 0x38
 8001096:	787a      	ldrb	r2, [r7, #1]
 8001098:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800109a:	78fb      	ldrb	r3, [r7, #3]
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	212c      	movs	r1, #44	; 0x2c
 80010a0:	fb01 f303 	mul.w	r3, r1, r3
 80010a4:	4413      	add	r3, r2
 80010a6:	3340      	adds	r3, #64	; 0x40
 80010a8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80010aa:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80010ac:	78fb      	ldrb	r3, [r7, #3]
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	212c      	movs	r1, #44	; 0x2c
 80010b2:	fb01 f303 	mul.w	r3, r1, r3
 80010b6:	4413      	add	r3, r2
 80010b8:	3339      	adds	r3, #57	; 0x39
 80010ba:	78fa      	ldrb	r2, [r7, #3]
 80010bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80010be:	78fb      	ldrb	r3, [r7, #3]
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	212c      	movs	r1, #44	; 0x2c
 80010c4:	fb01 f303 	mul.w	r3, r1, r3
 80010c8:	4413      	add	r3, r2
 80010ca:	333f      	adds	r3, #63	; 0x3f
 80010cc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80010d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80010d2:	78fb      	ldrb	r3, [r7, #3]
 80010d4:	78ba      	ldrb	r2, [r7, #2]
 80010d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010da:	b2d0      	uxtb	r0, r2
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	212c      	movs	r1, #44	; 0x2c
 80010e0:	fb01 f303 	mul.w	r3, r1, r3
 80010e4:	4413      	add	r3, r2
 80010e6:	333a      	adds	r3, #58	; 0x3a
 80010e8:	4602      	mov	r2, r0
 80010ea:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80010ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	da09      	bge.n	8001108 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80010f4:	78fb      	ldrb	r3, [r7, #3]
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	212c      	movs	r1, #44	; 0x2c
 80010fa:	fb01 f303 	mul.w	r3, r1, r3
 80010fe:	4413      	add	r3, r2
 8001100:	333b      	adds	r3, #59	; 0x3b
 8001102:	2201      	movs	r2, #1
 8001104:	701a      	strb	r2, [r3, #0]
 8001106:	e008      	b.n	800111a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001108:	78fb      	ldrb	r3, [r7, #3]
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	212c      	movs	r1, #44	; 0x2c
 800110e:	fb01 f303 	mul.w	r3, r1, r3
 8001112:	4413      	add	r3, r2
 8001114:	333b      	adds	r3, #59	; 0x3b
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800111a:	78fb      	ldrb	r3, [r7, #3]
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	212c      	movs	r1, #44	; 0x2c
 8001120:	fb01 f303 	mul.w	r3, r1, r3
 8001124:	4413      	add	r3, r2
 8001126:	333c      	adds	r3, #60	; 0x3c
 8001128:	f897 2020 	ldrb.w	r2, [r7, #32]
 800112c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6818      	ldr	r0, [r3, #0]
 8001132:	787c      	ldrb	r4, [r7, #1]
 8001134:	78ba      	ldrb	r2, [r7, #2]
 8001136:	78f9      	ldrb	r1, [r7, #3]
 8001138:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800113a:	9302      	str	r3, [sp, #8]
 800113c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001140:	9301      	str	r3, [sp, #4]
 8001142:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	4623      	mov	r3, r4
 800114a:	f002 fe2f 	bl	8003dac <USB_HC_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800115a:	7bfb      	ldrb	r3, [r7, #15]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	bd90      	pop	{r4, r7, pc}

08001164 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001170:	2300      	movs	r3, #0
 8001172:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800117a:	2b01      	cmp	r3, #1
 800117c:	d101      	bne.n	8001182 <HAL_HCD_HC_Halt+0x1e>
 800117e:	2302      	movs	r3, #2
 8001180:	e00f      	b.n	80011a2 <HAL_HCD_HC_Halt+0x3e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2201      	movs	r2, #1
 8001186:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	78fa      	ldrb	r2, [r7, #3]
 8001190:	4611      	mov	r1, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f003 f87f 	bl	8004296 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	4608      	mov	r0, r1
 80011b6:	4611      	mov	r1, r2
 80011b8:	461a      	mov	r2, r3
 80011ba:	4603      	mov	r3, r0
 80011bc:	70fb      	strb	r3, [r7, #3]
 80011be:	460b      	mov	r3, r1
 80011c0:	70bb      	strb	r3, [r7, #2]
 80011c2:	4613      	mov	r3, r2
 80011c4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80011c6:	78fb      	ldrb	r3, [r7, #3]
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	212c      	movs	r1, #44	; 0x2c
 80011cc:	fb01 f303 	mul.w	r3, r1, r3
 80011d0:	4413      	add	r3, r2
 80011d2:	333b      	adds	r3, #59	; 0x3b
 80011d4:	78ba      	ldrb	r2, [r7, #2]
 80011d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80011d8:	78fb      	ldrb	r3, [r7, #3]
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	212c      	movs	r1, #44	; 0x2c
 80011de:	fb01 f303 	mul.w	r3, r1, r3
 80011e2:	4413      	add	r3, r2
 80011e4:	333f      	adds	r3, #63	; 0x3f
 80011e6:	787a      	ldrb	r2, [r7, #1]
 80011e8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80011ea:	7c3b      	ldrb	r3, [r7, #16]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d112      	bne.n	8001216 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80011f0:	78fb      	ldrb	r3, [r7, #3]
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	212c      	movs	r1, #44	; 0x2c
 80011f6:	fb01 f303 	mul.w	r3, r1, r3
 80011fa:	4413      	add	r3, r2
 80011fc:	3342      	adds	r3, #66	; 0x42
 80011fe:	2203      	movs	r2, #3
 8001200:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001202:	78fb      	ldrb	r3, [r7, #3]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	212c      	movs	r1, #44	; 0x2c
 8001208:	fb01 f303 	mul.w	r3, r1, r3
 800120c:	4413      	add	r3, r2
 800120e:	333d      	adds	r3, #61	; 0x3d
 8001210:	7f3a      	ldrb	r2, [r7, #28]
 8001212:	701a      	strb	r2, [r3, #0]
 8001214:	e008      	b.n	8001228 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001216:	78fb      	ldrb	r3, [r7, #3]
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	212c      	movs	r1, #44	; 0x2c
 800121c:	fb01 f303 	mul.w	r3, r1, r3
 8001220:	4413      	add	r3, r2
 8001222:	3342      	adds	r3, #66	; 0x42
 8001224:	2202      	movs	r2, #2
 8001226:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001228:	787b      	ldrb	r3, [r7, #1]
 800122a:	2b03      	cmp	r3, #3
 800122c:	f200 80c6 	bhi.w	80013bc <HAL_HCD_HC_SubmitRequest+0x210>
 8001230:	a201      	add	r2, pc, #4	; (adr r2, 8001238 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001236:	bf00      	nop
 8001238:	08001249 	.word	0x08001249
 800123c:	080013a9 	.word	0x080013a9
 8001240:	080012ad 	.word	0x080012ad
 8001244:	0800132b 	.word	0x0800132b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001248:	7c3b      	ldrb	r3, [r7, #16]
 800124a:	2b01      	cmp	r3, #1
 800124c:	f040 80b8 	bne.w	80013c0 <HAL_HCD_HC_SubmitRequest+0x214>
 8001250:	78bb      	ldrb	r3, [r7, #2]
 8001252:	2b00      	cmp	r3, #0
 8001254:	f040 80b4 	bne.w	80013c0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001258:	8b3b      	ldrh	r3, [r7, #24]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d108      	bne.n	8001270 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800125e:	78fb      	ldrb	r3, [r7, #3]
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	212c      	movs	r1, #44	; 0x2c
 8001264:	fb01 f303 	mul.w	r3, r1, r3
 8001268:	4413      	add	r3, r2
 800126a:	3355      	adds	r3, #85	; 0x55
 800126c:	2201      	movs	r2, #1
 800126e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001270:	78fb      	ldrb	r3, [r7, #3]
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	212c      	movs	r1, #44	; 0x2c
 8001276:	fb01 f303 	mul.w	r3, r1, r3
 800127a:	4413      	add	r3, r2
 800127c:	3355      	adds	r3, #85	; 0x55
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d109      	bne.n	8001298 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001284:	78fb      	ldrb	r3, [r7, #3]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	212c      	movs	r1, #44	; 0x2c
 800128a:	fb01 f303 	mul.w	r3, r1, r3
 800128e:	4413      	add	r3, r2
 8001290:	3342      	adds	r3, #66	; 0x42
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001296:	e093      	b.n	80013c0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001298:	78fb      	ldrb	r3, [r7, #3]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	212c      	movs	r1, #44	; 0x2c
 800129e:	fb01 f303 	mul.w	r3, r1, r3
 80012a2:	4413      	add	r3, r2
 80012a4:	3342      	adds	r3, #66	; 0x42
 80012a6:	2202      	movs	r2, #2
 80012a8:	701a      	strb	r2, [r3, #0]
      break;
 80012aa:	e089      	b.n	80013c0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80012ac:	78bb      	ldrb	r3, [r7, #2]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d11d      	bne.n	80012ee <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80012b2:	78fb      	ldrb	r3, [r7, #3]
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	212c      	movs	r1, #44	; 0x2c
 80012b8:	fb01 f303 	mul.w	r3, r1, r3
 80012bc:	4413      	add	r3, r2
 80012be:	3355      	adds	r3, #85	; 0x55
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d109      	bne.n	80012da <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80012c6:	78fb      	ldrb	r3, [r7, #3]
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	212c      	movs	r1, #44	; 0x2c
 80012cc:	fb01 f303 	mul.w	r3, r1, r3
 80012d0:	4413      	add	r3, r2
 80012d2:	3342      	adds	r3, #66	; 0x42
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80012d8:	e073      	b.n	80013c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80012da:	78fb      	ldrb	r3, [r7, #3]
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	212c      	movs	r1, #44	; 0x2c
 80012e0:	fb01 f303 	mul.w	r3, r1, r3
 80012e4:	4413      	add	r3, r2
 80012e6:	3342      	adds	r3, #66	; 0x42
 80012e8:	2202      	movs	r2, #2
 80012ea:	701a      	strb	r2, [r3, #0]
      break;
 80012ec:	e069      	b.n	80013c2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80012ee:	78fb      	ldrb	r3, [r7, #3]
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	212c      	movs	r1, #44	; 0x2c
 80012f4:	fb01 f303 	mul.w	r3, r1, r3
 80012f8:	4413      	add	r3, r2
 80012fa:	3354      	adds	r3, #84	; 0x54
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d109      	bne.n	8001316 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001302:	78fb      	ldrb	r3, [r7, #3]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	212c      	movs	r1, #44	; 0x2c
 8001308:	fb01 f303 	mul.w	r3, r1, r3
 800130c:	4413      	add	r3, r2
 800130e:	3342      	adds	r3, #66	; 0x42
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
      break;
 8001314:	e055      	b.n	80013c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001316:	78fb      	ldrb	r3, [r7, #3]
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	212c      	movs	r1, #44	; 0x2c
 800131c:	fb01 f303 	mul.w	r3, r1, r3
 8001320:	4413      	add	r3, r2
 8001322:	3342      	adds	r3, #66	; 0x42
 8001324:	2202      	movs	r2, #2
 8001326:	701a      	strb	r2, [r3, #0]
      break;
 8001328:	e04b      	b.n	80013c2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800132a:	78bb      	ldrb	r3, [r7, #2]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d11d      	bne.n	800136c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001330:	78fb      	ldrb	r3, [r7, #3]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	212c      	movs	r1, #44	; 0x2c
 8001336:	fb01 f303 	mul.w	r3, r1, r3
 800133a:	4413      	add	r3, r2
 800133c:	3355      	adds	r3, #85	; 0x55
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d109      	bne.n	8001358 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001344:	78fb      	ldrb	r3, [r7, #3]
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	212c      	movs	r1, #44	; 0x2c
 800134a:	fb01 f303 	mul.w	r3, r1, r3
 800134e:	4413      	add	r3, r2
 8001350:	3342      	adds	r3, #66	; 0x42
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001356:	e034      	b.n	80013c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001358:	78fb      	ldrb	r3, [r7, #3]
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	212c      	movs	r1, #44	; 0x2c
 800135e:	fb01 f303 	mul.w	r3, r1, r3
 8001362:	4413      	add	r3, r2
 8001364:	3342      	adds	r3, #66	; 0x42
 8001366:	2202      	movs	r2, #2
 8001368:	701a      	strb	r2, [r3, #0]
      break;
 800136a:	e02a      	b.n	80013c2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800136c:	78fb      	ldrb	r3, [r7, #3]
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	212c      	movs	r1, #44	; 0x2c
 8001372:	fb01 f303 	mul.w	r3, r1, r3
 8001376:	4413      	add	r3, r2
 8001378:	3354      	adds	r3, #84	; 0x54
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d109      	bne.n	8001394 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001380:	78fb      	ldrb	r3, [r7, #3]
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	212c      	movs	r1, #44	; 0x2c
 8001386:	fb01 f303 	mul.w	r3, r1, r3
 800138a:	4413      	add	r3, r2
 800138c:	3342      	adds	r3, #66	; 0x42
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
      break;
 8001392:	e016      	b.n	80013c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001394:	78fb      	ldrb	r3, [r7, #3]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	212c      	movs	r1, #44	; 0x2c
 800139a:	fb01 f303 	mul.w	r3, r1, r3
 800139e:	4413      	add	r3, r2
 80013a0:	3342      	adds	r3, #66	; 0x42
 80013a2:	2202      	movs	r2, #2
 80013a4:	701a      	strb	r2, [r3, #0]
      break;
 80013a6:	e00c      	b.n	80013c2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80013a8:	78fb      	ldrb	r3, [r7, #3]
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	212c      	movs	r1, #44	; 0x2c
 80013ae:	fb01 f303 	mul.w	r3, r1, r3
 80013b2:	4413      	add	r3, r2
 80013b4:	3342      	adds	r3, #66	; 0x42
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
      break;
 80013ba:	e002      	b.n	80013c2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80013bc:	bf00      	nop
 80013be:	e000      	b.n	80013c2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80013c0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80013c2:	78fb      	ldrb	r3, [r7, #3]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	212c      	movs	r1, #44	; 0x2c
 80013c8:	fb01 f303 	mul.w	r3, r1, r3
 80013cc:	4413      	add	r3, r2
 80013ce:	3344      	adds	r3, #68	; 0x44
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80013d4:	78fb      	ldrb	r3, [r7, #3]
 80013d6:	8b3a      	ldrh	r2, [r7, #24]
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	202c      	movs	r0, #44	; 0x2c
 80013dc:	fb00 f303 	mul.w	r3, r0, r3
 80013e0:	440b      	add	r3, r1
 80013e2:	334c      	adds	r3, #76	; 0x4c
 80013e4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80013e6:	78fb      	ldrb	r3, [r7, #3]
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	212c      	movs	r1, #44	; 0x2c
 80013ec:	fb01 f303 	mul.w	r3, r1, r3
 80013f0:	4413      	add	r3, r2
 80013f2:	3360      	adds	r3, #96	; 0x60
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80013f8:	78fb      	ldrb	r3, [r7, #3]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	212c      	movs	r1, #44	; 0x2c
 80013fe:	fb01 f303 	mul.w	r3, r1, r3
 8001402:	4413      	add	r3, r2
 8001404:	3350      	adds	r3, #80	; 0x50
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800140a:	78fb      	ldrb	r3, [r7, #3]
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	212c      	movs	r1, #44	; 0x2c
 8001410:	fb01 f303 	mul.w	r3, r1, r3
 8001414:	4413      	add	r3, r2
 8001416:	3339      	adds	r3, #57	; 0x39
 8001418:	78fa      	ldrb	r2, [r7, #3]
 800141a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800141c:	78fb      	ldrb	r3, [r7, #3]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	212c      	movs	r1, #44	; 0x2c
 8001422:	fb01 f303 	mul.w	r3, r1, r3
 8001426:	4413      	add	r3, r2
 8001428:	3361      	adds	r3, #97	; 0x61
 800142a:	2200      	movs	r2, #0
 800142c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6818      	ldr	r0, [r3, #0]
 8001432:	78fb      	ldrb	r3, [r7, #3]
 8001434:	222c      	movs	r2, #44	; 0x2c
 8001436:	fb02 f303 	mul.w	r3, r2, r3
 800143a:	3338      	adds	r3, #56	; 0x38
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	18d1      	adds	r1, r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	461a      	mov	r2, r3
 8001448:	f002 fdd2 	bl	8003ff0 <USB_HC_StartXfer>
 800144c:	4603      	mov	r3, r0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop

08001458 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f002 fad3 	bl	8003a1a <USB_GetMode>
 8001474:	4603      	mov	r3, r0
 8001476:	2b01      	cmp	r3, #1
 8001478:	f040 80f6 	bne.w	8001668 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f002 fab7 	bl	80039f4 <USB_ReadInterrupts>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 80ec 	beq.w	8001666 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f002 faae 	bl	80039f4 <USB_ReadInterrupts>
 8001498:	4603      	mov	r3, r0
 800149a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800149e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80014a2:	d104      	bne.n	80014ae <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80014ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f002 fa9e 	bl	80039f4 <USB_ReadInterrupts>
 80014b8:	4603      	mov	r3, r0
 80014ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014c2:	d104      	bne.n	80014ce <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f002 fa8e 	bl	80039f4 <USB_ReadInterrupts>
 80014d8:	4603      	mov	r3, r0
 80014da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80014e2:	d104      	bne.n	80014ee <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f002 fa7e 	bl	80039f4 <USB_ReadInterrupts>
 80014f8:	4603      	mov	r3, r0
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d103      	bne.n	800150a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2202      	movs	r2, #2
 8001508:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f002 fa70 	bl	80039f4 <USB_ReadInterrupts>
 8001514:	4603      	mov	r3, r0
 8001516:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800151a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800151e:	d11c      	bne.n	800155a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001528:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d10f      	bne.n	800155a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800153a:	2110      	movs	r1, #16
 800153c:	6938      	ldr	r0, [r7, #16]
 800153e:	f002 f95f 	bl	8003800 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001542:	6938      	ldr	r0, [r7, #16]
 8001544:	f002 f990 	bl	8003868 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2101      	movs	r1, #1
 800154e:	4618      	mov	r0, r3
 8001550:	f002 fb66 	bl	8003c20 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f008 fe21 	bl	800a19c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f002 fa48 	bl	80039f4 <USB_ReadInterrupts>
 8001564:	4603      	mov	r3, r0
 8001566:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800156a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800156e:	d102      	bne.n	8001576 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f001 f89e 	bl	80026b2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f002 fa3a 	bl	80039f4 <USB_ReadInterrupts>
 8001580:	4603      	mov	r3, r0
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	2b08      	cmp	r3, #8
 8001588:	d106      	bne.n	8001598 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f008 fdea 	bl	800a164 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2208      	movs	r2, #8
 8001596:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f002 fa29 	bl	80039f4 <USB_ReadInterrupts>
 80015a2:	4603      	mov	r3, r0
 80015a4:	f003 0310 	and.w	r3, r3, #16
 80015a8:	2b10      	cmp	r3, #16
 80015aa:	d101      	bne.n	80015b0 <HAL_HCD_IRQHandler+0x158>
 80015ac:	2301      	movs	r3, #1
 80015ae:	e000      	b.n	80015b2 <HAL_HCD_IRQHandler+0x15a>
 80015b0:	2300      	movs	r3, #0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d012      	beq.n	80015dc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	699a      	ldr	r2, [r3, #24]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 0210 	bic.w	r2, r2, #16
 80015c4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 ffa1 	bl	800250e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	699a      	ldr	r2, [r3, #24]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f042 0210 	orr.w	r2, r2, #16
 80015da:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f002 fa07 	bl	80039f4 <USB_ReadInterrupts>
 80015e6:	4603      	mov	r3, r0
 80015e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80015f0:	d13a      	bne.n	8001668 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f002 fe3c 	bl	8004274 <USB_HC_ReadInterrupt>
 80015fc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	e025      	b.n	8001650 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	fa22 f303 	lsr.w	r3, r2, r3
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b00      	cmp	r3, #0
 8001616:	d018      	beq.n	800164a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	015a      	lsls	r2, r3, #5
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4413      	add	r3, r2
 8001620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800162a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800162e:	d106      	bne.n	800163e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	b2db      	uxtb	r3, r3
 8001634:	4619      	mov	r1, r3
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 f8ab 	bl	8001792 <HCD_HC_IN_IRQHandler>
 800163c:	e005      	b.n	800164a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	4619      	mov	r1, r3
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 fbf9 	bl	8001e3c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	3301      	adds	r3, #1
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	429a      	cmp	r2, r3
 8001658:	d3d4      	bcc.n	8001604 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001662:	615a      	str	r2, [r3, #20]
 8001664:	e000      	b.n	8001668 <HAL_HCD_IRQHandler+0x210>
      return;
 8001666:	bf00      	nop
    }
  }
}
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800167c:	2b01      	cmp	r3, #1
 800167e:	d101      	bne.n	8001684 <HAL_HCD_Start+0x16>
 8001680:	2302      	movs	r3, #2
 8001682:	e013      	b.n	80016ac <HAL_HCD_Start+0x3e>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2101      	movs	r1, #1
 8001692:	4618      	mov	r0, r3
 8001694:	f002 fb28 	bl	8003ce8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f002 f840 	bl	8003722 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d101      	bne.n	80016ca <HAL_HCD_Stop+0x16>
 80016c6:	2302      	movs	r3, #2
 80016c8:	e00d      	b.n	80016e6 <HAL_HCD_Stop+0x32>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2201      	movs	r2, #1
 80016ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f002 ff16 	bl	8004508 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f002 faca 	bl	8003c94 <USB_ResetPort>
 8001700:	4603      	mov	r3, r0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	460b      	mov	r3, r1
 8001714:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001716:	78fb      	ldrb	r3, [r7, #3]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	212c      	movs	r1, #44	; 0x2c
 800171c:	fb01 f303 	mul.w	r3, r1, r3
 8001720:	4413      	add	r3, r2
 8001722:	3360      	adds	r3, #96	; 0x60
 8001724:	781b      	ldrb	r3, [r3, #0]
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	460b      	mov	r3, r1
 800173c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800173e:	78fb      	ldrb	r3, [r7, #3]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	212c      	movs	r1, #44	; 0x2c
 8001744:	fb01 f303 	mul.w	r3, r1, r3
 8001748:	4413      	add	r3, r2
 800174a:	3350      	adds	r3, #80	; 0x50
 800174c:	681b      	ldr	r3, [r3, #0]
}
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f002 fb0e 	bl	8003d88 <USB_GetCurrentFrame>
 800176c:	4603      	mov	r3, r0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f002 fae9 	bl	8003d5a <USB_GetHostSpeed>
 8001788:	4603      	mov	r3, r0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b086      	sub	sp, #24
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	460b      	mov	r3, r1
 800179c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80017a8:	78fb      	ldrb	r3, [r7, #3]
 80017aa:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	015a      	lsls	r2, r3, #5
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	4413      	add	r3, r2
 80017b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	2b04      	cmp	r3, #4
 80017c0:	d11a      	bne.n	80017f8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	015a      	lsls	r2, r3, #5
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	4413      	add	r3, r2
 80017ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017ce:	461a      	mov	r2, r3
 80017d0:	2304      	movs	r3, #4
 80017d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	212c      	movs	r1, #44	; 0x2c
 80017da:	fb01 f303 	mul.w	r3, r1, r3
 80017de:	4413      	add	r3, r2
 80017e0:	3361      	adds	r3, #97	; 0x61
 80017e2:	2206      	movs	r2, #6
 80017e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	4611      	mov	r1, r2
 80017f0:	4618      	mov	r0, r3
 80017f2:	f002 fd50 	bl	8004296 <USB_HC_Halt>
 80017f6:	e0af      	b.n	8001958 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	015a      	lsls	r2, r3, #5
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	4413      	add	r3, r2
 8001800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800180e:	d11b      	bne.n	8001848 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	015a      	lsls	r2, r3, #5
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	4413      	add	r3, r2
 8001818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800181c:	461a      	mov	r2, r3
 800181e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001822:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	212c      	movs	r1, #44	; 0x2c
 800182a:	fb01 f303 	mul.w	r3, r1, r3
 800182e:	4413      	add	r3, r2
 8001830:	3361      	adds	r3, #97	; 0x61
 8001832:	2207      	movs	r2, #7
 8001834:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	4611      	mov	r1, r2
 8001840:	4618      	mov	r0, r3
 8001842:	f002 fd28 	bl	8004296 <USB_HC_Halt>
 8001846:	e087      	b.n	8001958 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	015a      	lsls	r2, r3, #5
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	4413      	add	r3, r2
 8001850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 0320 	and.w	r3, r3, #32
 800185a:	2b20      	cmp	r3, #32
 800185c:	d109      	bne.n	8001872 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	015a      	lsls	r2, r3, #5
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	4413      	add	r3, r2
 8001866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800186a:	461a      	mov	r2, r3
 800186c:	2320      	movs	r3, #32
 800186e:	6093      	str	r3, [r2, #8]
 8001870:	e072      	b.n	8001958 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	015a      	lsls	r2, r3, #5
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	4413      	add	r3, r2
 800187a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	2b08      	cmp	r3, #8
 8001886:	d11a      	bne.n	80018be <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	015a      	lsls	r2, r3, #5
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	4413      	add	r3, r2
 8001890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001894:	461a      	mov	r2, r3
 8001896:	2308      	movs	r3, #8
 8001898:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	212c      	movs	r1, #44	; 0x2c
 80018a0:	fb01 f303 	mul.w	r3, r1, r3
 80018a4:	4413      	add	r3, r2
 80018a6:	3361      	adds	r3, #97	; 0x61
 80018a8:	2205      	movs	r2, #5
 80018aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	4611      	mov	r1, r2
 80018b6:	4618      	mov	r0, r3
 80018b8:	f002 fced 	bl	8004296 <USB_HC_Halt>
 80018bc:	e04c      	b.n	8001958 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	015a      	lsls	r2, r3, #5
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	4413      	add	r3, r2
 80018c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d4:	d11b      	bne.n	800190e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	015a      	lsls	r2, r3, #5
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	4413      	add	r3, r2
 80018de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018e2:	461a      	mov	r2, r3
 80018e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	212c      	movs	r1, #44	; 0x2c
 80018f0:	fb01 f303 	mul.w	r3, r1, r3
 80018f4:	4413      	add	r3, r2
 80018f6:	3361      	adds	r3, #97	; 0x61
 80018f8:	2208      	movs	r2, #8
 80018fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	4611      	mov	r1, r2
 8001906:	4618      	mov	r0, r3
 8001908:	f002 fcc5 	bl	8004296 <USB_HC_Halt>
 800190c:	e024      	b.n	8001958 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	015a      	lsls	r2, r3, #5
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	4413      	add	r3, r2
 8001916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001920:	2b80      	cmp	r3, #128	; 0x80
 8001922:	d119      	bne.n	8001958 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	015a      	lsls	r2, r3, #5
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	4413      	add	r3, r2
 800192c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001930:	461a      	mov	r2, r3
 8001932:	2380      	movs	r3, #128	; 0x80
 8001934:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	212c      	movs	r1, #44	; 0x2c
 800193c:	fb01 f303 	mul.w	r3, r1, r3
 8001940:	4413      	add	r3, r2
 8001942:	3361      	adds	r3, #97	; 0x61
 8001944:	2206      	movs	r2, #6
 8001946:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	4611      	mov	r1, r2
 8001952:	4618      	mov	r0, r3
 8001954:	f002 fc9f 	bl	8004296 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	015a      	lsls	r2, r3, #5
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	4413      	add	r3, r2
 8001960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800196a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800196e:	d112      	bne.n	8001996 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	4611      	mov	r1, r2
 800197a:	4618      	mov	r0, r3
 800197c:	f002 fc8b 	bl	8004296 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	015a      	lsls	r2, r3, #5
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	4413      	add	r3, r2
 8001988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800198c:	461a      	mov	r2, r3
 800198e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001992:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001994:	e24e      	b.n	8001e34 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	015a      	lsls	r2, r3, #5
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	4413      	add	r3, r2
 800199e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	f040 80df 	bne.w	8001b6c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d019      	beq.n	80019ea <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	212c      	movs	r1, #44	; 0x2c
 80019bc:	fb01 f303 	mul.w	r3, r1, r3
 80019c0:	4413      	add	r3, r2
 80019c2:	3348      	adds	r3, #72	; 0x48
 80019c4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	0159      	lsls	r1, r3, #5
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	440b      	add	r3, r1
 80019ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80019d8:	1ad2      	subs	r2, r2, r3
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	202c      	movs	r0, #44	; 0x2c
 80019e0:	fb00 f303 	mul.w	r3, r0, r3
 80019e4:	440b      	add	r3, r1
 80019e6:	3350      	adds	r3, #80	; 0x50
 80019e8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	212c      	movs	r1, #44	; 0x2c
 80019f0:	fb01 f303 	mul.w	r3, r1, r3
 80019f4:	4413      	add	r3, r2
 80019f6:	3361      	adds	r3, #97	; 0x61
 80019f8:	2201      	movs	r2, #1
 80019fa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	212c      	movs	r1, #44	; 0x2c
 8001a02:	fb01 f303 	mul.w	r3, r1, r3
 8001a06:	4413      	add	r3, r2
 8001a08:	335c      	adds	r3, #92	; 0x5c
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	015a      	lsls	r2, r3, #5
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	4413      	add	r3, r2
 8001a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	212c      	movs	r1, #44	; 0x2c
 8001a26:	fb01 f303 	mul.w	r3, r1, r3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	333f      	adds	r3, #63	; 0x3f
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d009      	beq.n	8001a48 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	212c      	movs	r1, #44	; 0x2c
 8001a3a:	fb01 f303 	mul.w	r3, r1, r3
 8001a3e:	4413      	add	r3, r2
 8001a40:	333f      	adds	r3, #63	; 0x3f
 8001a42:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d111      	bne.n	8001a6c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	4611      	mov	r1, r2
 8001a52:	4618      	mov	r0, r3
 8001a54:	f002 fc1f 	bl	8004296 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	015a      	lsls	r2, r3, #5
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	4413      	add	r3, r2
 8001a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a64:	461a      	mov	r2, r3
 8001a66:	2310      	movs	r3, #16
 8001a68:	6093      	str	r3, [r2, #8]
 8001a6a:	e03a      	b.n	8001ae2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	212c      	movs	r1, #44	; 0x2c
 8001a72:	fb01 f303 	mul.w	r3, r1, r3
 8001a76:	4413      	add	r3, r2
 8001a78:	333f      	adds	r3, #63	; 0x3f
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b03      	cmp	r3, #3
 8001a7e:	d009      	beq.n	8001a94 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	212c      	movs	r1, #44	; 0x2c
 8001a86:	fb01 f303 	mul.w	r3, r1, r3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	333f      	adds	r3, #63	; 0x3f
 8001a8e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d126      	bne.n	8001ae2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	015a      	lsls	r2, r3, #5
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	0151      	lsls	r1, r2, #5
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	440a      	add	r2, r1
 8001aaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001aae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ab2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	212c      	movs	r1, #44	; 0x2c
 8001aba:	fb01 f303 	mul.w	r3, r1, r3
 8001abe:	4413      	add	r3, r2
 8001ac0:	3360      	adds	r3, #96	; 0x60
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	b2d9      	uxtb	r1, r3
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	202c      	movs	r0, #44	; 0x2c
 8001ad0:	fb00 f303 	mul.w	r3, r0, r3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	3360      	adds	r3, #96	; 0x60
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f008 fb6b 	bl	800a1b8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d12b      	bne.n	8001b42 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	212c      	movs	r1, #44	; 0x2c
 8001af0:	fb01 f303 	mul.w	r3, r1, r3
 8001af4:	4413      	add	r3, r2
 8001af6:	3348      	adds	r3, #72	; 0x48
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	202c      	movs	r0, #44	; 0x2c
 8001b00:	fb00 f202 	mul.w	r2, r0, r2
 8001b04:	440a      	add	r2, r1
 8001b06:	3240      	adds	r2, #64	; 0x40
 8001b08:	8812      	ldrh	r2, [r2, #0]
 8001b0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 818e 	beq.w	8001e34 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	212c      	movs	r1, #44	; 0x2c
 8001b1e:	fb01 f303 	mul.w	r3, r1, r3
 8001b22:	4413      	add	r3, r2
 8001b24:	3354      	adds	r3, #84	; 0x54
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	f083 0301 	eor.w	r3, r3, #1
 8001b2c:	b2d8      	uxtb	r0, r3
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	212c      	movs	r1, #44	; 0x2c
 8001b34:	fb01 f303 	mul.w	r3, r1, r3
 8001b38:	4413      	add	r3, r2
 8001b3a:	3354      	adds	r3, #84	; 0x54
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	701a      	strb	r2, [r3, #0]
}
 8001b40:	e178      	b.n	8001e34 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	212c      	movs	r1, #44	; 0x2c
 8001b48:	fb01 f303 	mul.w	r3, r1, r3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3354      	adds	r3, #84	; 0x54
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	f083 0301 	eor.w	r3, r3, #1
 8001b56:	b2d8      	uxtb	r0, r3
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	212c      	movs	r1, #44	; 0x2c
 8001b5e:	fb01 f303 	mul.w	r3, r1, r3
 8001b62:	4413      	add	r3, r2
 8001b64:	3354      	adds	r3, #84	; 0x54
 8001b66:	4602      	mov	r2, r0
 8001b68:	701a      	strb	r2, [r3, #0]
}
 8001b6a:	e163      	b.n	8001e34 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	015a      	lsls	r2, r3, #5
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	4413      	add	r3, r2
 8001b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	f040 80f6 	bne.w	8001d70 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	212c      	movs	r1, #44	; 0x2c
 8001b8a:	fb01 f303 	mul.w	r3, r1, r3
 8001b8e:	4413      	add	r3, r2
 8001b90:	3361      	adds	r3, #97	; 0x61
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d109      	bne.n	8001bac <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	212c      	movs	r1, #44	; 0x2c
 8001b9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3360      	adds	r3, #96	; 0x60
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	701a      	strb	r2, [r3, #0]
 8001baa:	e0c9      	b.n	8001d40 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	212c      	movs	r1, #44	; 0x2c
 8001bb2:	fb01 f303 	mul.w	r3, r1, r3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	3361      	adds	r3, #97	; 0x61
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b05      	cmp	r3, #5
 8001bbe:	d109      	bne.n	8001bd4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	212c      	movs	r1, #44	; 0x2c
 8001bc6:	fb01 f303 	mul.w	r3, r1, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	3360      	adds	r3, #96	; 0x60
 8001bce:	2205      	movs	r2, #5
 8001bd0:	701a      	strb	r2, [r3, #0]
 8001bd2:	e0b5      	b.n	8001d40 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	212c      	movs	r1, #44	; 0x2c
 8001bda:	fb01 f303 	mul.w	r3, r1, r3
 8001bde:	4413      	add	r3, r2
 8001be0:	3361      	adds	r3, #97	; 0x61
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b06      	cmp	r3, #6
 8001be6:	d009      	beq.n	8001bfc <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	212c      	movs	r1, #44	; 0x2c
 8001bee:	fb01 f303 	mul.w	r3, r1, r3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3361      	adds	r3, #97	; 0x61
 8001bf6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d150      	bne.n	8001c9e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	212c      	movs	r1, #44	; 0x2c
 8001c02:	fb01 f303 	mul.w	r3, r1, r3
 8001c06:	4413      	add	r3, r2
 8001c08:	335c      	adds	r3, #92	; 0x5c
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	1c5a      	adds	r2, r3, #1
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	202c      	movs	r0, #44	; 0x2c
 8001c14:	fb00 f303 	mul.w	r3, r0, r3
 8001c18:	440b      	add	r3, r1
 8001c1a:	335c      	adds	r3, #92	; 0x5c
 8001c1c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	212c      	movs	r1, #44	; 0x2c
 8001c24:	fb01 f303 	mul.w	r3, r1, r3
 8001c28:	4413      	add	r3, r2
 8001c2a:	335c      	adds	r3, #92	; 0x5c
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d912      	bls.n	8001c58 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	212c      	movs	r1, #44	; 0x2c
 8001c38:	fb01 f303 	mul.w	r3, r1, r3
 8001c3c:	4413      	add	r3, r2
 8001c3e:	335c      	adds	r3, #92	; 0x5c
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	212c      	movs	r1, #44	; 0x2c
 8001c4a:	fb01 f303 	mul.w	r3, r1, r3
 8001c4e:	4413      	add	r3, r2
 8001c50:	3360      	adds	r3, #96	; 0x60
 8001c52:	2204      	movs	r2, #4
 8001c54:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001c56:	e073      	b.n	8001d40 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	212c      	movs	r1, #44	; 0x2c
 8001c5e:	fb01 f303 	mul.w	r3, r1, r3
 8001c62:	4413      	add	r3, r2
 8001c64:	3360      	adds	r3, #96	; 0x60
 8001c66:	2202      	movs	r2, #2
 8001c68:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	015a      	lsls	r2, r3, #5
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4413      	add	r3, r2
 8001c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001c80:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c88:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	015a      	lsls	r2, r3, #5
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4413      	add	r3, r2
 8001c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c96:	461a      	mov	r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001c9c:	e050      	b.n	8001d40 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	212c      	movs	r1, #44	; 0x2c
 8001ca4:	fb01 f303 	mul.w	r3, r1, r3
 8001ca8:	4413      	add	r3, r2
 8001caa:	3361      	adds	r3, #97	; 0x61
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b03      	cmp	r3, #3
 8001cb0:	d122      	bne.n	8001cf8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	212c      	movs	r1, #44	; 0x2c
 8001cb8:	fb01 f303 	mul.w	r3, r1, r3
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3360      	adds	r3, #96	; 0x60
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	015a      	lsls	r2, r3, #5
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4413      	add	r3, r2
 8001ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001cda:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ce2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	015a      	lsls	r2, r3, #5
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	4413      	add	r3, r2
 8001cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	e023      	b.n	8001d40 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	212c      	movs	r1, #44	; 0x2c
 8001cfe:	fb01 f303 	mul.w	r3, r1, r3
 8001d02:	4413      	add	r3, r2
 8001d04:	3361      	adds	r3, #97	; 0x61
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b07      	cmp	r3, #7
 8001d0a:	d119      	bne.n	8001d40 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	212c      	movs	r1, #44	; 0x2c
 8001d12:	fb01 f303 	mul.w	r3, r1, r3
 8001d16:	4413      	add	r3, r2
 8001d18:	335c      	adds	r3, #92	; 0x5c
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	1c5a      	adds	r2, r3, #1
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	202c      	movs	r0, #44	; 0x2c
 8001d24:	fb00 f303 	mul.w	r3, r0, r3
 8001d28:	440b      	add	r3, r1
 8001d2a:	335c      	adds	r3, #92	; 0x5c
 8001d2c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	212c      	movs	r1, #44	; 0x2c
 8001d34:	fb01 f303 	mul.w	r3, r1, r3
 8001d38:	4413      	add	r3, r2
 8001d3a:	3360      	adds	r3, #96	; 0x60
 8001d3c:	2204      	movs	r2, #4
 8001d3e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	015a      	lsls	r2, r3, #5
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4413      	add	r3, r2
 8001d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	2302      	movs	r3, #2
 8001d50:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	b2d9      	uxtb	r1, r3
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	202c      	movs	r0, #44	; 0x2c
 8001d5c:	fb00 f303 	mul.w	r3, r0, r3
 8001d60:	4413      	add	r3, r2
 8001d62:	3360      	adds	r3, #96	; 0x60
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	461a      	mov	r2, r3
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f008 fa25 	bl	800a1b8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001d6e:	e061      	b.n	8001e34 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	015a      	lsls	r2, r3, #5
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4413      	add	r3, r2
 8001d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 0310 	and.w	r3, r3, #16
 8001d82:	2b10      	cmp	r3, #16
 8001d84:	d156      	bne.n	8001e34 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	212c      	movs	r1, #44	; 0x2c
 8001d8c:	fb01 f303 	mul.w	r3, r1, r3
 8001d90:	4413      	add	r3, r2
 8001d92:	333f      	adds	r3, #63	; 0x3f
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b03      	cmp	r3, #3
 8001d98:	d111      	bne.n	8001dbe <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	212c      	movs	r1, #44	; 0x2c
 8001da0:	fb01 f303 	mul.w	r3, r1, r3
 8001da4:	4413      	add	r3, r2
 8001da6:	335c      	adds	r3, #92	; 0x5c
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	4611      	mov	r1, r2
 8001db6:	4618      	mov	r0, r3
 8001db8:	f002 fa6d 	bl	8004296 <USB_HC_Halt>
 8001dbc:	e031      	b.n	8001e22 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	212c      	movs	r1, #44	; 0x2c
 8001dc4:	fb01 f303 	mul.w	r3, r1, r3
 8001dc8:	4413      	add	r3, r2
 8001dca:	333f      	adds	r3, #63	; 0x3f
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d009      	beq.n	8001de6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	212c      	movs	r1, #44	; 0x2c
 8001dd8:	fb01 f303 	mul.w	r3, r1, r3
 8001ddc:	4413      	add	r3, r2
 8001dde:	333f      	adds	r3, #63	; 0x3f
 8001de0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d11d      	bne.n	8001e22 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	212c      	movs	r1, #44	; 0x2c
 8001dec:	fb01 f303 	mul.w	r3, r1, r3
 8001df0:	4413      	add	r3, r2
 8001df2:	335c      	adds	r3, #92	; 0x5c
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d110      	bne.n	8001e22 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	212c      	movs	r1, #44	; 0x2c
 8001e06:	fb01 f303 	mul.w	r3, r1, r3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3361      	adds	r3, #97	; 0x61
 8001e0e:	2203      	movs	r2, #3
 8001e10:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f002 fa3a 	bl	8004296 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	015a      	lsls	r2, r3, #5
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4413      	add	r3, r2
 8001e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e2e:	461a      	mov	r2, r3
 8001e30:	2310      	movs	r3, #16
 8001e32:	6093      	str	r3, [r2, #8]
}
 8001e34:	bf00      	nop
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	015a      	lsls	r2, r3, #5
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b04      	cmp	r3, #4
 8001e6a:	d11a      	bne.n	8001ea2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	015a      	lsls	r2, r3, #5
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	4413      	add	r3, r2
 8001e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e78:	461a      	mov	r2, r3
 8001e7a:	2304      	movs	r3, #4
 8001e7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	212c      	movs	r1, #44	; 0x2c
 8001e84:	fb01 f303 	mul.w	r3, r1, r3
 8001e88:	4413      	add	r3, r2
 8001e8a:	3361      	adds	r3, #97	; 0x61
 8001e8c:	2206      	movs	r2, #6
 8001e8e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	4611      	mov	r1, r2
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f002 f9fb 	bl	8004296 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8001ea0:	e331      	b.n	8002506 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	015a      	lsls	r2, r3, #5
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 0320 	and.w	r3, r3, #32
 8001eb4:	2b20      	cmp	r3, #32
 8001eb6:	d12e      	bne.n	8001f16 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	015a      	lsls	r2, r3, #5
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	2320      	movs	r3, #32
 8001ec8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	212c      	movs	r1, #44	; 0x2c
 8001ed0:	fb01 f303 	mul.w	r3, r1, r3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	333d      	adds	r3, #61	; 0x3d
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	f040 8313 	bne.w	8002506 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	212c      	movs	r1, #44	; 0x2c
 8001ee6:	fb01 f303 	mul.w	r3, r1, r3
 8001eea:	4413      	add	r3, r2
 8001eec:	333d      	adds	r3, #61	; 0x3d
 8001eee:	2200      	movs	r2, #0
 8001ef0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	212c      	movs	r1, #44	; 0x2c
 8001ef8:	fb01 f303 	mul.w	r3, r1, r3
 8001efc:	4413      	add	r3, r2
 8001efe:	3360      	adds	r3, #96	; 0x60
 8001f00:	2202      	movs	r2, #2
 8001f02:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f002 f9c1 	bl	8004296 <USB_HC_Halt>
}
 8001f14:	e2f7      	b.n	8002506 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	015a      	lsls	r2, r3, #5
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f2c:	d112      	bne.n	8001f54 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	015a      	lsls	r2, r3, #5
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	4413      	add	r3, r2
 8001f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f40:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f002 f9a2 	bl	8004296 <USB_HC_Halt>
}
 8001f52:	e2d8      	b.n	8002506 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	015a      	lsls	r2, r3, #5
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d140      	bne.n	8001fec <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	212c      	movs	r1, #44	; 0x2c
 8001f70:	fb01 f303 	mul.w	r3, r1, r3
 8001f74:	4413      	add	r3, r2
 8001f76:	335c      	adds	r3, #92	; 0x5c
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	015a      	lsls	r2, r3, #5
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	4413      	add	r3, r2
 8001f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8e:	2b40      	cmp	r3, #64	; 0x40
 8001f90:	d111      	bne.n	8001fb6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	212c      	movs	r1, #44	; 0x2c
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	333d      	adds	r3, #61	; 0x3d
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	015a      	lsls	r2, r3, #5
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	4413      	add	r3, r2
 8001fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	2340      	movs	r3, #64	; 0x40
 8001fb4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	015a      	lsls	r2, r3, #5
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	212c      	movs	r1, #44	; 0x2c
 8001fce:	fb01 f303 	mul.w	r3, r1, r3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3361      	adds	r3, #97	; 0x61
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f002 f956 	bl	8004296 <USB_HC_Halt>
}
 8001fea:	e28c      	b.n	8002506 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	015a      	lsls	r2, r3, #5
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffe:	2b40      	cmp	r3, #64	; 0x40
 8002000:	d12c      	bne.n	800205c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	212c      	movs	r1, #44	; 0x2c
 8002008:	fb01 f303 	mul.w	r3, r1, r3
 800200c:	4413      	add	r3, r2
 800200e:	3361      	adds	r3, #97	; 0x61
 8002010:	2204      	movs	r2, #4
 8002012:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	212c      	movs	r1, #44	; 0x2c
 800201a:	fb01 f303 	mul.w	r3, r1, r3
 800201e:	4413      	add	r3, r2
 8002020:	333d      	adds	r3, #61	; 0x3d
 8002022:	2201      	movs	r2, #1
 8002024:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	212c      	movs	r1, #44	; 0x2c
 800202c:	fb01 f303 	mul.w	r3, r1, r3
 8002030:	4413      	add	r3, r2
 8002032:	335c      	adds	r3, #92	; 0x5c
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	4611      	mov	r1, r2
 8002042:	4618      	mov	r0, r3
 8002044:	f002 f927 	bl	8004296 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	015a      	lsls	r2, r3, #5
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	4413      	add	r3, r2
 8002050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002054:	461a      	mov	r2, r3
 8002056:	2340      	movs	r3, #64	; 0x40
 8002058:	6093      	str	r3, [r2, #8]
}
 800205a:	e254      	b.n	8002506 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	015a      	lsls	r2, r3, #5
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	4413      	add	r3, r2
 8002064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b08      	cmp	r3, #8
 8002070:	d11a      	bne.n	80020a8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	015a      	lsls	r2, r3, #5
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	4413      	add	r3, r2
 800207a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800207e:	461a      	mov	r2, r3
 8002080:	2308      	movs	r3, #8
 8002082:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	212c      	movs	r1, #44	; 0x2c
 800208a:	fb01 f303 	mul.w	r3, r1, r3
 800208e:	4413      	add	r3, r2
 8002090:	3361      	adds	r3, #97	; 0x61
 8002092:	2205      	movs	r2, #5
 8002094:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	4611      	mov	r1, r2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f002 f8f8 	bl	8004296 <USB_HC_Halt>
}
 80020a6:	e22e      	b.n	8002506 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	015a      	lsls	r2, r3, #5
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	4413      	add	r3, r2
 80020b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 0310 	and.w	r3, r3, #16
 80020ba:	2b10      	cmp	r3, #16
 80020bc:	d140      	bne.n	8002140 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	212c      	movs	r1, #44	; 0x2c
 80020c4:	fb01 f303 	mul.w	r3, r1, r3
 80020c8:	4413      	add	r3, r2
 80020ca:	335c      	adds	r3, #92	; 0x5c
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	212c      	movs	r1, #44	; 0x2c
 80020d6:	fb01 f303 	mul.w	r3, r1, r3
 80020da:	4413      	add	r3, r2
 80020dc:	3361      	adds	r3, #97	; 0x61
 80020de:	2203      	movs	r2, #3
 80020e0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	212c      	movs	r1, #44	; 0x2c
 80020e8:	fb01 f303 	mul.w	r3, r1, r3
 80020ec:	4413      	add	r3, r2
 80020ee:	333d      	adds	r3, #61	; 0x3d
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d112      	bne.n	800211c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	212c      	movs	r1, #44	; 0x2c
 80020fc:	fb01 f303 	mul.w	r3, r1, r3
 8002100:	4413      	add	r3, r2
 8002102:	333c      	adds	r3, #60	; 0x3c
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d108      	bne.n	800211c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	212c      	movs	r1, #44	; 0x2c
 8002110:	fb01 f303 	mul.w	r3, r1, r3
 8002114:	4413      	add	r3, r2
 8002116:	333d      	adds	r3, #61	; 0x3d
 8002118:	2201      	movs	r2, #1
 800211a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	4611      	mov	r1, r2
 8002126:	4618      	mov	r0, r3
 8002128:	f002 f8b5 	bl	8004296 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	015a      	lsls	r2, r3, #5
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	4413      	add	r3, r2
 8002134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002138:	461a      	mov	r2, r3
 800213a:	2310      	movs	r3, #16
 800213c:	6093      	str	r3, [r2, #8]
}
 800213e:	e1e2      	b.n	8002506 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	015a      	lsls	r2, r3, #5
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	4413      	add	r3, r2
 8002148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002152:	2b80      	cmp	r3, #128	; 0x80
 8002154:	d164      	bne.n	8002220 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d111      	bne.n	8002182 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	212c      	movs	r1, #44	; 0x2c
 8002164:	fb01 f303 	mul.w	r3, r1, r3
 8002168:	4413      	add	r3, r2
 800216a:	3361      	adds	r3, #97	; 0x61
 800216c:	2206      	movs	r2, #6
 800216e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	4611      	mov	r1, r2
 800217a:	4618      	mov	r0, r3
 800217c:	f002 f88b 	bl	8004296 <USB_HC_Halt>
 8002180:	e044      	b.n	800220c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	212c      	movs	r1, #44	; 0x2c
 8002188:	fb01 f303 	mul.w	r3, r1, r3
 800218c:	4413      	add	r3, r2
 800218e:	335c      	adds	r3, #92	; 0x5c
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	202c      	movs	r0, #44	; 0x2c
 800219a:	fb00 f303 	mul.w	r3, r0, r3
 800219e:	440b      	add	r3, r1
 80021a0:	335c      	adds	r3, #92	; 0x5c
 80021a2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	212c      	movs	r1, #44	; 0x2c
 80021aa:	fb01 f303 	mul.w	r3, r1, r3
 80021ae:	4413      	add	r3, r2
 80021b0:	335c      	adds	r3, #92	; 0x5c
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d920      	bls.n	80021fa <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	212c      	movs	r1, #44	; 0x2c
 80021be:	fb01 f303 	mul.w	r3, r1, r3
 80021c2:	4413      	add	r3, r2
 80021c4:	335c      	adds	r3, #92	; 0x5c
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	212c      	movs	r1, #44	; 0x2c
 80021d0:	fb01 f303 	mul.w	r3, r1, r3
 80021d4:	4413      	add	r3, r2
 80021d6:	3360      	adds	r3, #96	; 0x60
 80021d8:	2204      	movs	r2, #4
 80021da:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	b2d9      	uxtb	r1, r3
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	202c      	movs	r0, #44	; 0x2c
 80021e6:	fb00 f303 	mul.w	r3, r0, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	3360      	adds	r3, #96	; 0x60
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	461a      	mov	r2, r3
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f007 ffe0 	bl	800a1b8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80021f8:	e008      	b.n	800220c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	212c      	movs	r1, #44	; 0x2c
 8002200:	fb01 f303 	mul.w	r3, r1, r3
 8002204:	4413      	add	r3, r2
 8002206:	3360      	adds	r3, #96	; 0x60
 8002208:	2202      	movs	r2, #2
 800220a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	015a      	lsls	r2, r3, #5
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	4413      	add	r3, r2
 8002214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002218:	461a      	mov	r2, r3
 800221a:	2380      	movs	r3, #128	; 0x80
 800221c:	6093      	str	r3, [r2, #8]
}
 800221e:	e172      	b.n	8002506 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	015a      	lsls	r2, r3, #5
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	4413      	add	r3, r2
 8002228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002236:	d11b      	bne.n	8002270 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	212c      	movs	r1, #44	; 0x2c
 800223e:	fb01 f303 	mul.w	r3, r1, r3
 8002242:	4413      	add	r3, r2
 8002244:	3361      	adds	r3, #97	; 0x61
 8002246:	2208      	movs	r2, #8
 8002248:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	4611      	mov	r1, r2
 8002254:	4618      	mov	r0, r3
 8002256:	f002 f81e 	bl	8004296 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	015a      	lsls	r2, r3, #5
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	4413      	add	r3, r2
 8002262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002266:	461a      	mov	r2, r3
 8002268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800226c:	6093      	str	r3, [r2, #8]
}
 800226e:	e14a      	b.n	8002506 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	015a      	lsls	r2, r3, #5
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	4413      	add	r3, r2
 8002278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b02      	cmp	r3, #2
 8002284:	f040 813f 	bne.w	8002506 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	212c      	movs	r1, #44	; 0x2c
 800228e:	fb01 f303 	mul.w	r3, r1, r3
 8002292:	4413      	add	r3, r2
 8002294:	3361      	adds	r3, #97	; 0x61
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d17d      	bne.n	8002398 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	212c      	movs	r1, #44	; 0x2c
 80022a2:	fb01 f303 	mul.w	r3, r1, r3
 80022a6:	4413      	add	r3, r2
 80022a8:	3360      	adds	r3, #96	; 0x60
 80022aa:	2201      	movs	r2, #1
 80022ac:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	212c      	movs	r1, #44	; 0x2c
 80022b4:	fb01 f303 	mul.w	r3, r1, r3
 80022b8:	4413      	add	r3, r2
 80022ba:	333f      	adds	r3, #63	; 0x3f
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d00a      	beq.n	80022d8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	212c      	movs	r1, #44	; 0x2c
 80022c8:	fb01 f303 	mul.w	r3, r1, r3
 80022cc:	4413      	add	r3, r2
 80022ce:	333f      	adds	r3, #63	; 0x3f
 80022d0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	f040 8100 	bne.w	80024d8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d113      	bne.n	8002308 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	212c      	movs	r1, #44	; 0x2c
 80022e6:	fb01 f303 	mul.w	r3, r1, r3
 80022ea:	4413      	add	r3, r2
 80022ec:	3355      	adds	r3, #85	; 0x55
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	f083 0301 	eor.w	r3, r3, #1
 80022f4:	b2d8      	uxtb	r0, r3
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	212c      	movs	r1, #44	; 0x2c
 80022fc:	fb01 f303 	mul.w	r3, r1, r3
 8002300:	4413      	add	r3, r2
 8002302:	3355      	adds	r3, #85	; 0x55
 8002304:	4602      	mov	r2, r0
 8002306:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	2b01      	cmp	r3, #1
 800230e:	f040 80e3 	bne.w	80024d8 <HCD_HC_OUT_IRQHandler+0x69c>
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	212c      	movs	r1, #44	; 0x2c
 8002318:	fb01 f303 	mul.w	r3, r1, r3
 800231c:	4413      	add	r3, r2
 800231e:	334c      	adds	r3, #76	; 0x4c
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 80d8 	beq.w	80024d8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	212c      	movs	r1, #44	; 0x2c
 800232e:	fb01 f303 	mul.w	r3, r1, r3
 8002332:	4413      	add	r3, r2
 8002334:	334c      	adds	r3, #76	; 0x4c
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	202c      	movs	r0, #44	; 0x2c
 800233e:	fb00 f202 	mul.w	r2, r0, r2
 8002342:	440a      	add	r2, r1
 8002344:	3240      	adds	r2, #64	; 0x40
 8002346:	8812      	ldrh	r2, [r2, #0]
 8002348:	4413      	add	r3, r2
 800234a:	3b01      	subs	r3, #1
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	202c      	movs	r0, #44	; 0x2c
 8002352:	fb00 f202 	mul.w	r2, r0, r2
 8002356:	440a      	add	r2, r1
 8002358:	3240      	adds	r2, #64	; 0x40
 800235a:	8812      	ldrh	r2, [r2, #0]
 800235c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002360:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 80b5 	beq.w	80024d8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	212c      	movs	r1, #44	; 0x2c
 8002374:	fb01 f303 	mul.w	r3, r1, r3
 8002378:	4413      	add	r3, r2
 800237a:	3355      	adds	r3, #85	; 0x55
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	f083 0301 	eor.w	r3, r3, #1
 8002382:	b2d8      	uxtb	r0, r3
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	212c      	movs	r1, #44	; 0x2c
 800238a:	fb01 f303 	mul.w	r3, r1, r3
 800238e:	4413      	add	r3, r2
 8002390:	3355      	adds	r3, #85	; 0x55
 8002392:	4602      	mov	r2, r0
 8002394:	701a      	strb	r2, [r3, #0]
 8002396:	e09f      	b.n	80024d8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	212c      	movs	r1, #44	; 0x2c
 800239e:	fb01 f303 	mul.w	r3, r1, r3
 80023a2:	4413      	add	r3, r2
 80023a4:	3361      	adds	r3, #97	; 0x61
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	d109      	bne.n	80023c0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	212c      	movs	r1, #44	; 0x2c
 80023b2:	fb01 f303 	mul.w	r3, r1, r3
 80023b6:	4413      	add	r3, r2
 80023b8:	3360      	adds	r3, #96	; 0x60
 80023ba:	2202      	movs	r2, #2
 80023bc:	701a      	strb	r2, [r3, #0]
 80023be:	e08b      	b.n	80024d8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	212c      	movs	r1, #44	; 0x2c
 80023c6:	fb01 f303 	mul.w	r3, r1, r3
 80023ca:	4413      	add	r3, r2
 80023cc:	3361      	adds	r3, #97	; 0x61
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b04      	cmp	r3, #4
 80023d2:	d109      	bne.n	80023e8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	212c      	movs	r1, #44	; 0x2c
 80023da:	fb01 f303 	mul.w	r3, r1, r3
 80023de:	4413      	add	r3, r2
 80023e0:	3360      	adds	r3, #96	; 0x60
 80023e2:	2202      	movs	r2, #2
 80023e4:	701a      	strb	r2, [r3, #0]
 80023e6:	e077      	b.n	80024d8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	212c      	movs	r1, #44	; 0x2c
 80023ee:	fb01 f303 	mul.w	r3, r1, r3
 80023f2:	4413      	add	r3, r2
 80023f4:	3361      	adds	r3, #97	; 0x61
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b05      	cmp	r3, #5
 80023fa:	d109      	bne.n	8002410 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	212c      	movs	r1, #44	; 0x2c
 8002402:	fb01 f303 	mul.w	r3, r1, r3
 8002406:	4413      	add	r3, r2
 8002408:	3360      	adds	r3, #96	; 0x60
 800240a:	2205      	movs	r2, #5
 800240c:	701a      	strb	r2, [r3, #0]
 800240e:	e063      	b.n	80024d8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	212c      	movs	r1, #44	; 0x2c
 8002416:	fb01 f303 	mul.w	r3, r1, r3
 800241a:	4413      	add	r3, r2
 800241c:	3361      	adds	r3, #97	; 0x61
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b06      	cmp	r3, #6
 8002422:	d009      	beq.n	8002438 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	212c      	movs	r1, #44	; 0x2c
 800242a:	fb01 f303 	mul.w	r3, r1, r3
 800242e:	4413      	add	r3, r2
 8002430:	3361      	adds	r3, #97	; 0x61
 8002432:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002434:	2b08      	cmp	r3, #8
 8002436:	d14f      	bne.n	80024d8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	212c      	movs	r1, #44	; 0x2c
 800243e:	fb01 f303 	mul.w	r3, r1, r3
 8002442:	4413      	add	r3, r2
 8002444:	335c      	adds	r3, #92	; 0x5c
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	202c      	movs	r0, #44	; 0x2c
 8002450:	fb00 f303 	mul.w	r3, r0, r3
 8002454:	440b      	add	r3, r1
 8002456:	335c      	adds	r3, #92	; 0x5c
 8002458:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	212c      	movs	r1, #44	; 0x2c
 8002460:	fb01 f303 	mul.w	r3, r1, r3
 8002464:	4413      	add	r3, r2
 8002466:	335c      	adds	r3, #92	; 0x5c
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b02      	cmp	r3, #2
 800246c:	d912      	bls.n	8002494 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	212c      	movs	r1, #44	; 0x2c
 8002474:	fb01 f303 	mul.w	r3, r1, r3
 8002478:	4413      	add	r3, r2
 800247a:	335c      	adds	r3, #92	; 0x5c
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	212c      	movs	r1, #44	; 0x2c
 8002486:	fb01 f303 	mul.w	r3, r1, r3
 800248a:	4413      	add	r3, r2
 800248c:	3360      	adds	r3, #96	; 0x60
 800248e:	2204      	movs	r2, #4
 8002490:	701a      	strb	r2, [r3, #0]
 8002492:	e021      	b.n	80024d8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	212c      	movs	r1, #44	; 0x2c
 800249a:	fb01 f303 	mul.w	r3, r1, r3
 800249e:	4413      	add	r3, r2
 80024a0:	3360      	adds	r3, #96	; 0x60
 80024a2:	2202      	movs	r2, #2
 80024a4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	015a      	lsls	r2, r3, #5
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024bc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024c4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	015a      	lsls	r2, r3, #5
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	4413      	add	r3, r2
 80024ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d2:	461a      	mov	r2, r3
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e4:	461a      	mov	r2, r3
 80024e6:	2302      	movs	r3, #2
 80024e8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	b2d9      	uxtb	r1, r3
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	202c      	movs	r0, #44	; 0x2c
 80024f4:	fb00 f303 	mul.w	r3, r0, r3
 80024f8:	4413      	add	r3, r2
 80024fa:	3360      	adds	r3, #96	; 0x60
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f007 fe59 	bl	800a1b8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002506:	bf00      	nop
 8002508:	3720      	adds	r7, #32
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b08a      	sub	sp, #40	; 0x28
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	0c5b      	lsrs	r3, r3, #17
 8002534:	f003 030f 	and.w	r3, r3, #15
 8002538:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	091b      	lsrs	r3, r3, #4
 800253e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002542:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	2b02      	cmp	r3, #2
 8002548:	d004      	beq.n	8002554 <HCD_RXQLVL_IRQHandler+0x46>
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	2b05      	cmp	r3, #5
 800254e:	f000 80a9 	beq.w	80026a4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002552:	e0aa      	b.n	80026aa <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 80a6 	beq.w	80026a8 <HCD_RXQLVL_IRQHandler+0x19a>
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	212c      	movs	r1, #44	; 0x2c
 8002562:	fb01 f303 	mul.w	r3, r1, r3
 8002566:	4413      	add	r3, r2
 8002568:	3344      	adds	r3, #68	; 0x44
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 809b 	beq.w	80026a8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	212c      	movs	r1, #44	; 0x2c
 8002578:	fb01 f303 	mul.w	r3, r1, r3
 800257c:	4413      	add	r3, r2
 800257e:	3350      	adds	r3, #80	; 0x50
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	441a      	add	r2, r3
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	202c      	movs	r0, #44	; 0x2c
 800258c:	fb00 f303 	mul.w	r3, r0, r3
 8002590:	440b      	add	r3, r1
 8002592:	334c      	adds	r3, #76	; 0x4c
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d87a      	bhi.n	8002690 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6818      	ldr	r0, [r3, #0]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	212c      	movs	r1, #44	; 0x2c
 80025a4:	fb01 f303 	mul.w	r3, r1, r3
 80025a8:	4413      	add	r3, r2
 80025aa:	3344      	adds	r3, #68	; 0x44
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	b292      	uxth	r2, r2
 80025b2:	4619      	mov	r1, r3
 80025b4:	f001 f9c6 	bl	8003944 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	212c      	movs	r1, #44	; 0x2c
 80025be:	fb01 f303 	mul.w	r3, r1, r3
 80025c2:	4413      	add	r3, r2
 80025c4:	3344      	adds	r3, #68	; 0x44
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	441a      	add	r2, r3
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	202c      	movs	r0, #44	; 0x2c
 80025d2:	fb00 f303 	mul.w	r3, r0, r3
 80025d6:	440b      	add	r3, r1
 80025d8:	3344      	adds	r3, #68	; 0x44
 80025da:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	212c      	movs	r1, #44	; 0x2c
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	4413      	add	r3, r2
 80025e8:	3350      	adds	r3, #80	; 0x50
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	441a      	add	r2, r3
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	202c      	movs	r0, #44	; 0x2c
 80025f6:	fb00 f303 	mul.w	r3, r0, r3
 80025fa:	440b      	add	r3, r1
 80025fc:	3350      	adds	r3, #80	; 0x50
 80025fe:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	015a      	lsls	r2, r3, #5
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	4413      	add	r3, r2
 8002608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	0cdb      	lsrs	r3, r3, #19
 8002610:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002614:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	212c      	movs	r1, #44	; 0x2c
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	4413      	add	r3, r2
 8002622:	3340      	adds	r3, #64	; 0x40
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4293      	cmp	r3, r2
 800262c:	d13c      	bne.n	80026a8 <HCD_RXQLVL_IRQHandler+0x19a>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d039      	beq.n	80026a8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	015a      	lsls	r2, r3, #5
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	4413      	add	r3, r2
 800263c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800264a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002652:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	015a      	lsls	r2, r3, #5
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	4413      	add	r3, r2
 800265c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002660:	461a      	mov	r2, r3
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	212c      	movs	r1, #44	; 0x2c
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	4413      	add	r3, r2
 8002672:	3354      	adds	r3, #84	; 0x54
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	f083 0301 	eor.w	r3, r3, #1
 800267a:	b2d8      	uxtb	r0, r3
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	212c      	movs	r1, #44	; 0x2c
 8002682:	fb01 f303 	mul.w	r3, r1, r3
 8002686:	4413      	add	r3, r2
 8002688:	3354      	adds	r3, #84	; 0x54
 800268a:	4602      	mov	r2, r0
 800268c:	701a      	strb	r2, [r3, #0]
      break;
 800268e:	e00b      	b.n	80026a8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	212c      	movs	r1, #44	; 0x2c
 8002696:	fb01 f303 	mul.w	r3, r1, r3
 800269a:	4413      	add	r3, r2
 800269c:	3360      	adds	r3, #96	; 0x60
 800269e:	2204      	movs	r2, #4
 80026a0:	701a      	strb	r2, [r3, #0]
      break;
 80026a2:	e001      	b.n	80026a8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80026a4:	bf00      	nop
 80026a6:	e000      	b.n	80026aa <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80026a8:	bf00      	nop
  }
}
 80026aa:	bf00      	nop
 80026ac:	3728      	adds	r7, #40	; 0x28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b086      	sub	sp, #24
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80026de:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d10b      	bne.n	8002702 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d102      	bne.n	80026fa <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f007 fd43 	bl	800a180 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	f043 0302 	orr.w	r3, r3, #2
 8002700:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f003 0308 	and.w	r3, r3, #8
 8002708:	2b08      	cmp	r3, #8
 800270a:	d132      	bne.n	8002772 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	f043 0308 	orr.w	r3, r3, #8
 8002712:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	2b04      	cmp	r3, #4
 800271c:	d126      	bne.n	800276c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d113      	bne.n	800274e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800272c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002730:	d106      	bne.n	8002740 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2102      	movs	r1, #2
 8002738:	4618      	mov	r0, r3
 800273a:	f001 fa71 	bl	8003c20 <USB_InitFSLSPClkSel>
 800273e:	e011      	b.n	8002764 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2101      	movs	r1, #1
 8002746:	4618      	mov	r0, r3
 8002748:	f001 fa6a 	bl	8003c20 <USB_InitFSLSPClkSel>
 800274c:	e00a      	b.n	8002764 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d106      	bne.n	8002764 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800275c:	461a      	mov	r2, r3
 800275e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002762:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f007 fd35 	bl	800a1d4 <HAL_HCD_PortEnabled_Callback>
 800276a:	e002      	b.n	8002772 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f007 fd3f 	bl	800a1f0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f003 0320 	and.w	r3, r3, #32
 8002778:	2b20      	cmp	r3, #32
 800277a:	d103      	bne.n	8002784 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f043 0320 	orr.w	r3, r3, #32
 8002782:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800278a:	461a      	mov	r2, r3
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	6013      	str	r3, [r2, #0]
}
 8002790:	bf00      	nop
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e267      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d075      	beq.n	80028a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027b6:	4b88      	ldr	r3, [pc, #544]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d00c      	beq.n	80027dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027c2:	4b85      	ldr	r3, [pc, #532]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d112      	bne.n	80027f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ce:	4b82      	ldr	r3, [pc, #520]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027da:	d10b      	bne.n	80027f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027dc:	4b7e      	ldr	r3, [pc, #504]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d05b      	beq.n	80028a0 <HAL_RCC_OscConfig+0x108>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d157      	bne.n	80028a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e242      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027fc:	d106      	bne.n	800280c <HAL_RCC_OscConfig+0x74>
 80027fe:	4b76      	ldr	r3, [pc, #472]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a75      	ldr	r2, [pc, #468]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 8002804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	e01d      	b.n	8002848 <HAL_RCC_OscConfig+0xb0>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002814:	d10c      	bne.n	8002830 <HAL_RCC_OscConfig+0x98>
 8002816:	4b70      	ldr	r3, [pc, #448]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a6f      	ldr	r2, [pc, #444]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 800281c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	4b6d      	ldr	r3, [pc, #436]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a6c      	ldr	r2, [pc, #432]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 8002828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	e00b      	b.n	8002848 <HAL_RCC_OscConfig+0xb0>
 8002830:	4b69      	ldr	r3, [pc, #420]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a68      	ldr	r2, [pc, #416]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 8002836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800283a:	6013      	str	r3, [r2, #0]
 800283c:	4b66      	ldr	r3, [pc, #408]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a65      	ldr	r2, [pc, #404]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 8002842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002846:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d013      	beq.n	8002878 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002850:	f7fe f8d0 	bl	80009f4 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002858:	f7fe f8cc 	bl	80009f4 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b64      	cmp	r3, #100	; 0x64
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e207      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286a:	4b5b      	ldr	r3, [pc, #364]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0f0      	beq.n	8002858 <HAL_RCC_OscConfig+0xc0>
 8002876:	e014      	b.n	80028a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002878:	f7fe f8bc 	bl	80009f4 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002880:	f7fe f8b8 	bl	80009f4 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b64      	cmp	r3, #100	; 0x64
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e1f3      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002892:	4b51      	ldr	r3, [pc, #324]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f0      	bne.n	8002880 <HAL_RCC_OscConfig+0xe8>
 800289e:	e000      	b.n	80028a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d063      	beq.n	8002976 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028ae:	4b4a      	ldr	r3, [pc, #296]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 030c 	and.w	r3, r3, #12
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00b      	beq.n	80028d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ba:	4b47      	ldr	r3, [pc, #284]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d11c      	bne.n	8002900 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028c6:	4b44      	ldr	r3, [pc, #272]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d116      	bne.n	8002900 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d2:	4b41      	ldr	r3, [pc, #260]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d005      	beq.n	80028ea <HAL_RCC_OscConfig+0x152>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d001      	beq.n	80028ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e1c7      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ea:	4b3b      	ldr	r3, [pc, #236]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	4937      	ldr	r1, [pc, #220]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028fe:	e03a      	b.n	8002976 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d020      	beq.n	800294a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002908:	4b34      	ldr	r3, [pc, #208]	; (80029dc <HAL_RCC_OscConfig+0x244>)
 800290a:	2201      	movs	r2, #1
 800290c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290e:	f7fe f871 	bl	80009f4 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002916:	f7fe f86d 	bl	80009f4 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e1a8      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002928:	4b2b      	ldr	r3, [pc, #172]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0f0      	beq.n	8002916 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002934:	4b28      	ldr	r3, [pc, #160]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	4925      	ldr	r1, [pc, #148]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 8002944:	4313      	orrs	r3, r2
 8002946:	600b      	str	r3, [r1, #0]
 8002948:	e015      	b.n	8002976 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800294a:	4b24      	ldr	r3, [pc, #144]	; (80029dc <HAL_RCC_OscConfig+0x244>)
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002950:	f7fe f850 	bl	80009f4 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002958:	f7fe f84c 	bl	80009f4 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e187      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800296a:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1f0      	bne.n	8002958 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	2b00      	cmp	r3, #0
 8002980:	d036      	beq.n	80029f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d016      	beq.n	80029b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800298a:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <HAL_RCC_OscConfig+0x248>)
 800298c:	2201      	movs	r2, #1
 800298e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002990:	f7fe f830 	bl	80009f4 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002998:	f7fe f82c 	bl	80009f4 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e167      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029aa:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <HAL_RCC_OscConfig+0x240>)
 80029ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0f0      	beq.n	8002998 <HAL_RCC_OscConfig+0x200>
 80029b6:	e01b      	b.n	80029f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029b8:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <HAL_RCC_OscConfig+0x248>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029be:	f7fe f819 	bl	80009f4 <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c4:	e00e      	b.n	80029e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029c6:	f7fe f815 	bl	80009f4 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d907      	bls.n	80029e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e150      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
 80029d8:	40023800 	.word	0x40023800
 80029dc:	42470000 	.word	0x42470000
 80029e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e4:	4b88      	ldr	r3, [pc, #544]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 80029e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1ea      	bne.n	80029c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 8097 	beq.w	8002b2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029fe:	2300      	movs	r3, #0
 8002a00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a02:	4b81      	ldr	r3, [pc, #516]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10f      	bne.n	8002a2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	4b7d      	ldr	r3, [pc, #500]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	4a7c      	ldr	r2, [pc, #496]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a1e:	4b7a      	ldr	r3, [pc, #488]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a26:	60bb      	str	r3, [r7, #8]
 8002a28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2e:	4b77      	ldr	r3, [pc, #476]	; (8002c0c <HAL_RCC_OscConfig+0x474>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d118      	bne.n	8002a6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a3a:	4b74      	ldr	r3, [pc, #464]	; (8002c0c <HAL_RCC_OscConfig+0x474>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a73      	ldr	r2, [pc, #460]	; (8002c0c <HAL_RCC_OscConfig+0x474>)
 8002a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a46:	f7fd ffd5 	bl	80009f4 <HAL_GetTick>
 8002a4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4c:	e008      	b.n	8002a60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a4e:	f7fd ffd1 	bl	80009f4 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e10c      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a60:	4b6a      	ldr	r3, [pc, #424]	; (8002c0c <HAL_RCC_OscConfig+0x474>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0f0      	beq.n	8002a4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d106      	bne.n	8002a82 <HAL_RCC_OscConfig+0x2ea>
 8002a74:	4b64      	ldr	r3, [pc, #400]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a78:	4a63      	ldr	r2, [pc, #396]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002a7a:	f043 0301 	orr.w	r3, r3, #1
 8002a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a80:	e01c      	b.n	8002abc <HAL_RCC_OscConfig+0x324>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	2b05      	cmp	r3, #5
 8002a88:	d10c      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x30c>
 8002a8a:	4b5f      	ldr	r3, [pc, #380]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8e:	4a5e      	ldr	r2, [pc, #376]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002a90:	f043 0304 	orr.w	r3, r3, #4
 8002a94:	6713      	str	r3, [r2, #112]	; 0x70
 8002a96:	4b5c      	ldr	r3, [pc, #368]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9a:	4a5b      	ldr	r2, [pc, #364]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa2:	e00b      	b.n	8002abc <HAL_RCC_OscConfig+0x324>
 8002aa4:	4b58      	ldr	r3, [pc, #352]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa8:	4a57      	ldr	r2, [pc, #348]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002aaa:	f023 0301 	bic.w	r3, r3, #1
 8002aae:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab0:	4b55      	ldr	r3, [pc, #340]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab4:	4a54      	ldr	r2, [pc, #336]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002ab6:	f023 0304 	bic.w	r3, r3, #4
 8002aba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d015      	beq.n	8002af0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac4:	f7fd ff96 	bl	80009f4 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aca:	e00a      	b.n	8002ae2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002acc:	f7fd ff92 	bl	80009f4 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e0cb      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae2:	4b49      	ldr	r3, [pc, #292]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0ee      	beq.n	8002acc <HAL_RCC_OscConfig+0x334>
 8002aee:	e014      	b.n	8002b1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af0:	f7fd ff80 	bl	80009f4 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af6:	e00a      	b.n	8002b0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002af8:	f7fd ff7c 	bl	80009f4 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e0b5      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b0e:	4b3e      	ldr	r3, [pc, #248]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1ee      	bne.n	8002af8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b1a:	7dfb      	ldrb	r3, [r7, #23]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d105      	bne.n	8002b2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b20:	4b39      	ldr	r3, [pc, #228]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	4a38      	ldr	r2, [pc, #224]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002b26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 80a1 	beq.w	8002c78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b36:	4b34      	ldr	r3, [pc, #208]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 030c 	and.w	r3, r3, #12
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d05c      	beq.n	8002bfc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d141      	bne.n	8002bce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4a:	4b31      	ldr	r3, [pc, #196]	; (8002c10 <HAL_RCC_OscConfig+0x478>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b50:	f7fd ff50 	bl	80009f4 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b58:	f7fd ff4c 	bl	80009f4 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e087      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b6a:	4b27      	ldr	r3, [pc, #156]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69da      	ldr	r2, [r3, #28]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	019b      	lsls	r3, r3, #6
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8c:	085b      	lsrs	r3, r3, #1
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	041b      	lsls	r3, r3, #16
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	061b      	lsls	r3, r3, #24
 8002b9a:	491b      	ldr	r1, [pc, #108]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ba0:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <HAL_RCC_OscConfig+0x478>)
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba6:	f7fd ff25 	bl	80009f4 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bae:	f7fd ff21 	bl	80009f4 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e05c      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc0:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0f0      	beq.n	8002bae <HAL_RCC_OscConfig+0x416>
 8002bcc:	e054      	b.n	8002c78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bce:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <HAL_RCC_OscConfig+0x478>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd4:	f7fd ff0e 	bl	80009f4 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bdc:	f7fd ff0a 	bl	80009f4 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e045      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bee:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0x444>
 8002bfa:	e03d      	b.n	8002c78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d107      	bne.n	8002c14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e038      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	40007000 	.word	0x40007000
 8002c10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c14:	4b1b      	ldr	r3, [pc, #108]	; (8002c84 <HAL_RCC_OscConfig+0x4ec>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d028      	beq.n	8002c74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d121      	bne.n	8002c74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d11a      	bne.n	8002c74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c44:	4013      	ands	r3, r2
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d111      	bne.n	8002c74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5a:	085b      	lsrs	r3, r3, #1
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d107      	bne.n	8002c74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d001      	beq.n	8002c78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e000      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40023800 	.word	0x40023800

08002c88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0cc      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c9c:	4b68      	ldr	r3, [pc, #416]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d90c      	bls.n	8002cc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002caa:	4b65      	ldr	r3, [pc, #404]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb2:	4b63      	ldr	r3, [pc, #396]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e0b8      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d020      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cdc:	4b59      	ldr	r3, [pc, #356]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	4a58      	ldr	r2, [pc, #352]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ce6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cf4:	4b53      	ldr	r3, [pc, #332]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	4a52      	ldr	r2, [pc, #328]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d00:	4b50      	ldr	r3, [pc, #320]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	494d      	ldr	r1, [pc, #308]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d044      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d107      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d26:	4b47      	ldr	r3, [pc, #284]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d119      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e07f      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d003      	beq.n	8002d46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	d107      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d46:	4b3f      	ldr	r3, [pc, #252]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d109      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e06f      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d56:	4b3b      	ldr	r3, [pc, #236]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e067      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d66:	4b37      	ldr	r3, [pc, #220]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f023 0203 	bic.w	r2, r3, #3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	4934      	ldr	r1, [pc, #208]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d78:	f7fd fe3c 	bl	80009f4 <HAL_GetTick>
 8002d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7e:	e00a      	b.n	8002d96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d80:	f7fd fe38 	bl	80009f4 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e04f      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d96:	4b2b      	ldr	r3, [pc, #172]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 020c 	and.w	r2, r3, #12
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d1eb      	bne.n	8002d80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002da8:	4b25      	ldr	r3, [pc, #148]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d20c      	bcs.n	8002dd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db6:	4b22      	ldr	r3, [pc, #136]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dbe:	4b20      	ldr	r3, [pc, #128]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d001      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e032      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ddc:	4b19      	ldr	r3, [pc, #100]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	4916      	ldr	r1, [pc, #88]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d009      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dfa:	4b12      	ldr	r3, [pc, #72]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	490e      	ldr	r1, [pc, #56]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e0e:	f000 f821 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 8002e12:	4602      	mov	r2, r0
 8002e14:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	091b      	lsrs	r3, r3, #4
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	490a      	ldr	r1, [pc, #40]	; (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002e20:	5ccb      	ldrb	r3, [r1, r3]
 8002e22:	fa22 f303 	lsr.w	r3, r2, r3
 8002e26:	4a09      	ldr	r2, [pc, #36]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e2a:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <HAL_RCC_ClockConfig+0x1c8>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fd fc7c 	bl	800072c <HAL_InitTick>

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40023c00 	.word	0x40023c00
 8002e44:	40023800 	.word	0x40023800
 8002e48:	0800a980 	.word	0x0800a980
 8002e4c:	20000000 	.word	0x20000000
 8002e50:	20000004 	.word	0x20000004

08002e54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e58:	b094      	sub	sp, #80	; 0x50
 8002e5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	647b      	str	r3, [r7, #68]	; 0x44
 8002e60:	2300      	movs	r3, #0
 8002e62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e64:	2300      	movs	r3, #0
 8002e66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e6c:	4b79      	ldr	r3, [pc, #484]	; (8003054 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 030c 	and.w	r3, r3, #12
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d00d      	beq.n	8002e94 <HAL_RCC_GetSysClockFreq+0x40>
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	f200 80e1 	bhi.w	8003040 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <HAL_RCC_GetSysClockFreq+0x34>
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d003      	beq.n	8002e8e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e86:	e0db      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e88:	4b73      	ldr	r3, [pc, #460]	; (8003058 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e8a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e8c:	e0db      	b.n	8003046 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e8e:	4b73      	ldr	r3, [pc, #460]	; (800305c <HAL_RCC_GetSysClockFreq+0x208>)
 8002e90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e92:	e0d8      	b.n	8003046 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e94:	4b6f      	ldr	r3, [pc, #444]	; (8003054 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e9c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e9e:	4b6d      	ldr	r3, [pc, #436]	; (8003054 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d063      	beq.n	8002f72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eaa:	4b6a      	ldr	r3, [pc, #424]	; (8003054 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	099b      	lsrs	r3, r3, #6
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002eb4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ebc:	633b      	str	r3, [r7, #48]	; 0x30
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ec2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ec6:	4622      	mov	r2, r4
 8002ec8:	462b      	mov	r3, r5
 8002eca:	f04f 0000 	mov.w	r0, #0
 8002ece:	f04f 0100 	mov.w	r1, #0
 8002ed2:	0159      	lsls	r1, r3, #5
 8002ed4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ed8:	0150      	lsls	r0, r2, #5
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	4621      	mov	r1, r4
 8002ee0:	1a51      	subs	r1, r2, r1
 8002ee2:	6139      	str	r1, [r7, #16]
 8002ee4:	4629      	mov	r1, r5
 8002ee6:	eb63 0301 	sbc.w	r3, r3, r1
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ef8:	4659      	mov	r1, fp
 8002efa:	018b      	lsls	r3, r1, #6
 8002efc:	4651      	mov	r1, sl
 8002efe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f02:	4651      	mov	r1, sl
 8002f04:	018a      	lsls	r2, r1, #6
 8002f06:	4651      	mov	r1, sl
 8002f08:	ebb2 0801 	subs.w	r8, r2, r1
 8002f0c:	4659      	mov	r1, fp
 8002f0e:	eb63 0901 	sbc.w	r9, r3, r1
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f26:	4690      	mov	r8, r2
 8002f28:	4699      	mov	r9, r3
 8002f2a:	4623      	mov	r3, r4
 8002f2c:	eb18 0303 	adds.w	r3, r8, r3
 8002f30:	60bb      	str	r3, [r7, #8]
 8002f32:	462b      	mov	r3, r5
 8002f34:	eb49 0303 	adc.w	r3, r9, r3
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f46:	4629      	mov	r1, r5
 8002f48:	024b      	lsls	r3, r1, #9
 8002f4a:	4621      	mov	r1, r4
 8002f4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f50:	4621      	mov	r1, r4
 8002f52:	024a      	lsls	r2, r1, #9
 8002f54:	4610      	mov	r0, r2
 8002f56:	4619      	mov	r1, r3
 8002f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f64:	f7fd f930 	bl	80001c8 <__aeabi_uldivmod>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f70:	e058      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f72:	4b38      	ldr	r3, [pc, #224]	; (8003054 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	099b      	lsrs	r3, r3, #6
 8002f78:	2200      	movs	r2, #0
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f82:	623b      	str	r3, [r7, #32]
 8002f84:	2300      	movs	r3, #0
 8002f86:	627b      	str	r3, [r7, #36]	; 0x24
 8002f88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f8c:	4642      	mov	r2, r8
 8002f8e:	464b      	mov	r3, r9
 8002f90:	f04f 0000 	mov.w	r0, #0
 8002f94:	f04f 0100 	mov.w	r1, #0
 8002f98:	0159      	lsls	r1, r3, #5
 8002f9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f9e:	0150      	lsls	r0, r2, #5
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4641      	mov	r1, r8
 8002fa6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002faa:	4649      	mov	r1, r9
 8002fac:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fc4:	ebb2 040a 	subs.w	r4, r2, sl
 8002fc8:	eb63 050b 	sbc.w	r5, r3, fp
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	00eb      	lsls	r3, r5, #3
 8002fd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fda:	00e2      	lsls	r2, r4, #3
 8002fdc:	4614      	mov	r4, r2
 8002fde:	461d      	mov	r5, r3
 8002fe0:	4643      	mov	r3, r8
 8002fe2:	18e3      	adds	r3, r4, r3
 8002fe4:	603b      	str	r3, [r7, #0]
 8002fe6:	464b      	mov	r3, r9
 8002fe8:	eb45 0303 	adc.w	r3, r5, r3
 8002fec:	607b      	str	r3, [r7, #4]
 8002fee:	f04f 0200 	mov.w	r2, #0
 8002ff2:	f04f 0300 	mov.w	r3, #0
 8002ff6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ffa:	4629      	mov	r1, r5
 8002ffc:	028b      	lsls	r3, r1, #10
 8002ffe:	4621      	mov	r1, r4
 8003000:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003004:	4621      	mov	r1, r4
 8003006:	028a      	lsls	r2, r1, #10
 8003008:	4610      	mov	r0, r2
 800300a:	4619      	mov	r1, r3
 800300c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800300e:	2200      	movs	r2, #0
 8003010:	61bb      	str	r3, [r7, #24]
 8003012:	61fa      	str	r2, [r7, #28]
 8003014:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003018:	f7fd f8d6 	bl	80001c8 <__aeabi_uldivmod>
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	4613      	mov	r3, r2
 8003022:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003024:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <HAL_RCC_GetSysClockFreq+0x200>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	0c1b      	lsrs	r3, r3, #16
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	3301      	adds	r3, #1
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003034:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003038:	fbb2 f3f3 	udiv	r3, r2, r3
 800303c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800303e:	e002      	b.n	8003046 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003040:	4b05      	ldr	r3, [pc, #20]	; (8003058 <HAL_RCC_GetSysClockFreq+0x204>)
 8003042:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003044:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003048:	4618      	mov	r0, r3
 800304a:	3750      	adds	r7, #80	; 0x50
 800304c:	46bd      	mov	sp, r7
 800304e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003052:	bf00      	nop
 8003054:	40023800 	.word	0x40023800
 8003058:	00f42400 	.word	0x00f42400
 800305c:	007a1200 	.word	0x007a1200

08003060 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003064:	4b03      	ldr	r3, [pc, #12]	; (8003074 <HAL_RCC_GetHCLKFreq+0x14>)
 8003066:	681b      	ldr	r3, [r3, #0]
}
 8003068:	4618      	mov	r0, r3
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	20000000 	.word	0x20000000

08003078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800307c:	f7ff fff0 	bl	8003060 <HAL_RCC_GetHCLKFreq>
 8003080:	4602      	mov	r2, r0
 8003082:	4b05      	ldr	r3, [pc, #20]	; (8003098 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	0a9b      	lsrs	r3, r3, #10
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	4903      	ldr	r1, [pc, #12]	; (800309c <HAL_RCC_GetPCLK1Freq+0x24>)
 800308e:	5ccb      	ldrb	r3, [r1, r3]
 8003090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003094:	4618      	mov	r0, r3
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40023800 	.word	0x40023800
 800309c:	0800a990 	.word	0x0800a990

080030a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	220f      	movs	r2, #15
 80030ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030b0:	4b12      	ldr	r3, [pc, #72]	; (80030fc <HAL_RCC_GetClockConfig+0x5c>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 0203 	and.w	r2, r3, #3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030bc:	4b0f      	ldr	r3, [pc, #60]	; (80030fc <HAL_RCC_GetClockConfig+0x5c>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030c8:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <HAL_RCC_GetClockConfig+0x5c>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80030d4:	4b09      	ldr	r3, [pc, #36]	; (80030fc <HAL_RCC_GetClockConfig+0x5c>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	08db      	lsrs	r3, r3, #3
 80030da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030e2:	4b07      	ldr	r3, [pc, #28]	; (8003100 <HAL_RCC_GetClockConfig+0x60>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0207 	and.w	r2, r3, #7
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	601a      	str	r2, [r3, #0]
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	40023800 	.word	0x40023800
 8003100:	40023c00 	.word	0x40023c00

08003104 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e041      	b.n	800319a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d106      	bne.n	8003130 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f839 	bl	80031a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3304      	adds	r3, #4
 8003140:	4619      	mov	r1, r3
 8003142:	4610      	mov	r0, r2
 8003144:	f000 f9d8 	bl	80034f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
	...

080031b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d001      	beq.n	80031d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e04e      	b.n	800326e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
 80031e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a23      	ldr	r2, [pc, #140]	; (800327c <HAL_TIM_Base_Start_IT+0xc4>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d022      	beq.n	8003238 <HAL_TIM_Base_Start_IT+0x80>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031fa:	d01d      	beq.n	8003238 <HAL_TIM_Base_Start_IT+0x80>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a1f      	ldr	r2, [pc, #124]	; (8003280 <HAL_TIM_Base_Start_IT+0xc8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d018      	beq.n	8003238 <HAL_TIM_Base_Start_IT+0x80>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a1e      	ldr	r2, [pc, #120]	; (8003284 <HAL_TIM_Base_Start_IT+0xcc>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d013      	beq.n	8003238 <HAL_TIM_Base_Start_IT+0x80>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a1c      	ldr	r2, [pc, #112]	; (8003288 <HAL_TIM_Base_Start_IT+0xd0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d00e      	beq.n	8003238 <HAL_TIM_Base_Start_IT+0x80>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a1b      	ldr	r2, [pc, #108]	; (800328c <HAL_TIM_Base_Start_IT+0xd4>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d009      	beq.n	8003238 <HAL_TIM_Base_Start_IT+0x80>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a19      	ldr	r2, [pc, #100]	; (8003290 <HAL_TIM_Base_Start_IT+0xd8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d004      	beq.n	8003238 <HAL_TIM_Base_Start_IT+0x80>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a18      	ldr	r2, [pc, #96]	; (8003294 <HAL_TIM_Base_Start_IT+0xdc>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d111      	bne.n	800325c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2b06      	cmp	r3, #6
 8003248:	d010      	beq.n	800326c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f042 0201 	orr.w	r2, r2, #1
 8003258:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800325a:	e007      	b.n	800326c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0201 	orr.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40010000 	.word	0x40010000
 8003280:	40000400 	.word	0x40000400
 8003284:	40000800 	.word	0x40000800
 8003288:	40000c00 	.word	0x40000c00
 800328c:	40010400 	.word	0x40010400
 8003290:	40014000 	.word	0x40014000
 8003294:	40001800 	.word	0x40001800

08003298 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d122      	bne.n	80032f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d11b      	bne.n	80032f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f06f 0202 	mvn.w	r2, #2
 80032c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f8ee 	bl	80034bc <HAL_TIM_IC_CaptureCallback>
 80032e0:	e005      	b.n	80032ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f8e0 	bl	80034a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f8f1 	bl	80034d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d122      	bne.n	8003348 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b04      	cmp	r3, #4
 800330e:	d11b      	bne.n	8003348 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f06f 0204 	mvn.w	r2, #4
 8003318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2202      	movs	r2, #2
 800331e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f8c4 	bl	80034bc <HAL_TIM_IC_CaptureCallback>
 8003334:	e005      	b.n	8003342 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f8b6 	bl	80034a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 f8c7 	bl	80034d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b08      	cmp	r3, #8
 8003354:	d122      	bne.n	800339c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f003 0308 	and.w	r3, r3, #8
 8003360:	2b08      	cmp	r3, #8
 8003362:	d11b      	bne.n	800339c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f06f 0208 	mvn.w	r2, #8
 800336c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2204      	movs	r2, #4
 8003372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f89a 	bl	80034bc <HAL_TIM_IC_CaptureCallback>
 8003388:	e005      	b.n	8003396 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f88c 	bl	80034a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f89d 	bl	80034d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	f003 0310 	and.w	r3, r3, #16
 80033a6:	2b10      	cmp	r3, #16
 80033a8:	d122      	bne.n	80033f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f003 0310 	and.w	r3, r3, #16
 80033b4:	2b10      	cmp	r3, #16
 80033b6:	d11b      	bne.n	80033f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f06f 0210 	mvn.w	r2, #16
 80033c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2208      	movs	r2, #8
 80033c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f870 	bl	80034bc <HAL_TIM_IC_CaptureCallback>
 80033dc:	e005      	b.n	80033ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f862 	bl	80034a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f873 	bl	80034d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d10e      	bne.n	800341c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b01      	cmp	r3, #1
 800340a:	d107      	bne.n	800341c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f06f 0201 	mvn.w	r2, #1
 8003414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fd f948 	bl	80006ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003426:	2b80      	cmp	r3, #128	; 0x80
 8003428:	d10e      	bne.n	8003448 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003434:	2b80      	cmp	r3, #128	; 0x80
 8003436:	d107      	bne.n	8003448 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f902 	bl	800364c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003452:	2b40      	cmp	r3, #64	; 0x40
 8003454:	d10e      	bne.n	8003474 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003460:	2b40      	cmp	r3, #64	; 0x40
 8003462:	d107      	bne.n	8003474 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800346c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f838 	bl	80034e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	f003 0320 	and.w	r3, r3, #32
 800347e:	2b20      	cmp	r3, #32
 8003480:	d10e      	bne.n	80034a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f003 0320 	and.w	r3, r3, #32
 800348c:	2b20      	cmp	r3, #32
 800348e:	d107      	bne.n	80034a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f06f 0220 	mvn.w	r2, #32
 8003498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f8cc 	bl	8003638 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034a0:	bf00      	nop
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a40      	ldr	r2, [pc, #256]	; (800360c <TIM_Base_SetConfig+0x114>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d013      	beq.n	8003538 <TIM_Base_SetConfig+0x40>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003516:	d00f      	beq.n	8003538 <TIM_Base_SetConfig+0x40>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a3d      	ldr	r2, [pc, #244]	; (8003610 <TIM_Base_SetConfig+0x118>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d00b      	beq.n	8003538 <TIM_Base_SetConfig+0x40>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a3c      	ldr	r2, [pc, #240]	; (8003614 <TIM_Base_SetConfig+0x11c>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d007      	beq.n	8003538 <TIM_Base_SetConfig+0x40>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a3b      	ldr	r2, [pc, #236]	; (8003618 <TIM_Base_SetConfig+0x120>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d003      	beq.n	8003538 <TIM_Base_SetConfig+0x40>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a3a      	ldr	r2, [pc, #232]	; (800361c <TIM_Base_SetConfig+0x124>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d108      	bne.n	800354a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	4313      	orrs	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a2f      	ldr	r2, [pc, #188]	; (800360c <TIM_Base_SetConfig+0x114>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d02b      	beq.n	80035aa <TIM_Base_SetConfig+0xb2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003558:	d027      	beq.n	80035aa <TIM_Base_SetConfig+0xb2>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a2c      	ldr	r2, [pc, #176]	; (8003610 <TIM_Base_SetConfig+0x118>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d023      	beq.n	80035aa <TIM_Base_SetConfig+0xb2>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a2b      	ldr	r2, [pc, #172]	; (8003614 <TIM_Base_SetConfig+0x11c>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d01f      	beq.n	80035aa <TIM_Base_SetConfig+0xb2>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a2a      	ldr	r2, [pc, #168]	; (8003618 <TIM_Base_SetConfig+0x120>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d01b      	beq.n	80035aa <TIM_Base_SetConfig+0xb2>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a29      	ldr	r2, [pc, #164]	; (800361c <TIM_Base_SetConfig+0x124>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d017      	beq.n	80035aa <TIM_Base_SetConfig+0xb2>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a28      	ldr	r2, [pc, #160]	; (8003620 <TIM_Base_SetConfig+0x128>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d013      	beq.n	80035aa <TIM_Base_SetConfig+0xb2>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a27      	ldr	r2, [pc, #156]	; (8003624 <TIM_Base_SetConfig+0x12c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d00f      	beq.n	80035aa <TIM_Base_SetConfig+0xb2>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a26      	ldr	r2, [pc, #152]	; (8003628 <TIM_Base_SetConfig+0x130>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d00b      	beq.n	80035aa <TIM_Base_SetConfig+0xb2>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a25      	ldr	r2, [pc, #148]	; (800362c <TIM_Base_SetConfig+0x134>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d007      	beq.n	80035aa <TIM_Base_SetConfig+0xb2>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a24      	ldr	r2, [pc, #144]	; (8003630 <TIM_Base_SetConfig+0x138>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d003      	beq.n	80035aa <TIM_Base_SetConfig+0xb2>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a23      	ldr	r2, [pc, #140]	; (8003634 <TIM_Base_SetConfig+0x13c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d108      	bne.n	80035bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a0a      	ldr	r2, [pc, #40]	; (800360c <TIM_Base_SetConfig+0x114>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d003      	beq.n	80035f0 <TIM_Base_SetConfig+0xf8>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a0c      	ldr	r2, [pc, #48]	; (800361c <TIM_Base_SetConfig+0x124>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d103      	bne.n	80035f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	691a      	ldr	r2, [r3, #16]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	615a      	str	r2, [r3, #20]
}
 80035fe:	bf00      	nop
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	40010000 	.word	0x40010000
 8003610:	40000400 	.word	0x40000400
 8003614:	40000800 	.word	0x40000800
 8003618:	40000c00 	.word	0x40000c00
 800361c:	40010400 	.word	0x40010400
 8003620:	40014000 	.word	0x40014000
 8003624:	40014400 	.word	0x40014400
 8003628:	40014800 	.word	0x40014800
 800362c:	40001800 	.word	0x40001800
 8003630:	40001c00 	.word	0x40001c00
 8003634:	40002000 	.word	0x40002000

08003638 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003660:	b084      	sub	sp, #16
 8003662:	b580      	push	{r7, lr}
 8003664:	b084      	sub	sp, #16
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
 800366a:	f107 001c 	add.w	r0, r7, #28
 800366e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003674:	2b01      	cmp	r3, #1
 8003676:	d122      	bne.n	80036be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800368c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80036a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d105      	bne.n	80036b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f9c0 	bl	8003a38 <USB_CoreReset>
 80036b8:	4603      	mov	r3, r0
 80036ba:	73fb      	strb	r3, [r7, #15]
 80036bc:	e01a      	b.n	80036f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f9b4 	bl	8003a38 <USB_CoreReset>
 80036d0:	4603      	mov	r3, r0
 80036d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80036d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d106      	bne.n	80036e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	639a      	str	r2, [r3, #56]	; 0x38
 80036e6:	e005      	b.n	80036f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80036f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d10b      	bne.n	8003712 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f043 0206 	orr.w	r2, r3, #6
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f043 0220 	orr.w	r2, r3, #32
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003712:	7bfb      	ldrb	r3, [r7, #15]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800371e:	b004      	add	sp, #16
 8003720:	4770      	bx	lr

08003722 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003722:	b480      	push	{r7}
 8003724:	b083      	sub	sp, #12
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f043 0201 	orr.w	r2, r3, #1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f023 0201 	bic.w	r2, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b084      	sub	sp, #16
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
 800376e:	460b      	mov	r3, r1
 8003770:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003772:	2300      	movs	r3, #0
 8003774:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003782:	78fb      	ldrb	r3, [r7, #3]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d115      	bne.n	80037b4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003794:	2001      	movs	r0, #1
 8003796:	f7fd f939 	bl	8000a0c <HAL_Delay>
      ms++;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	3301      	adds	r3, #1
 800379e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f93a 	bl	8003a1a <USB_GetMode>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d01e      	beq.n	80037ea <USB_SetCurrentMode+0x84>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2b31      	cmp	r3, #49	; 0x31
 80037b0:	d9f0      	bls.n	8003794 <USB_SetCurrentMode+0x2e>
 80037b2:	e01a      	b.n	80037ea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80037b4:	78fb      	ldrb	r3, [r7, #3]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d115      	bne.n	80037e6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80037c6:	2001      	movs	r0, #1
 80037c8:	f7fd f920 	bl	8000a0c <HAL_Delay>
      ms++;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	3301      	adds	r3, #1
 80037d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f921 	bl	8003a1a <USB_GetMode>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d005      	beq.n	80037ea <USB_SetCurrentMode+0x84>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2b31      	cmp	r3, #49	; 0x31
 80037e2:	d9f0      	bls.n	80037c6 <USB_SetCurrentMode+0x60>
 80037e4:	e001      	b.n	80037ea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e005      	b.n	80037f6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2b32      	cmp	r3, #50	; 0x32
 80037ee:	d101      	bne.n	80037f4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e000      	b.n	80037f6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	3301      	adds	r3, #1
 8003812:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4a13      	ldr	r2, [pc, #76]	; (8003864 <USB_FlushTxFifo+0x64>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d901      	bls.n	8003820 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e01b      	b.n	8003858 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	2b00      	cmp	r3, #0
 8003826:	daf2      	bge.n	800380e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003828:	2300      	movs	r3, #0
 800382a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	019b      	lsls	r3, r3, #6
 8003830:	f043 0220 	orr.w	r2, r3, #32
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	3301      	adds	r3, #1
 800383c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	4a08      	ldr	r2, [pc, #32]	; (8003864 <USB_FlushTxFifo+0x64>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d901      	bls.n	800384a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e006      	b.n	8003858 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f003 0320 	and.w	r3, r3, #32
 8003852:	2b20      	cmp	r3, #32
 8003854:	d0f0      	beq.n	8003838 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	00030d40 	.word	0x00030d40

08003868 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3301      	adds	r3, #1
 8003878:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4a11      	ldr	r2, [pc, #68]	; (80038c4 <USB_FlushRxFifo+0x5c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d901      	bls.n	8003886 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e018      	b.n	80038b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	2b00      	cmp	r3, #0
 800388c:	daf2      	bge.n	8003874 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2210      	movs	r2, #16
 8003896:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	3301      	adds	r3, #1
 800389c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4a08      	ldr	r2, [pc, #32]	; (80038c4 <USB_FlushRxFifo+0x5c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d901      	bls.n	80038aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e006      	b.n	80038b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	f003 0310 	and.w	r3, r3, #16
 80038b2:	2b10      	cmp	r3, #16
 80038b4:	d0f0      	beq.n	8003898 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	00030d40 	.word	0x00030d40

080038c8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b089      	sub	sp, #36	; 0x24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	4611      	mov	r1, r2
 80038d4:	461a      	mov	r2, r3
 80038d6:	460b      	mov	r3, r1
 80038d8:	71fb      	strb	r3, [r7, #7]
 80038da:	4613      	mov	r3, r2
 80038dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80038e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d123      	bne.n	8003936 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80038ee:	88bb      	ldrh	r3, [r7, #4]
 80038f0:	3303      	adds	r3, #3
 80038f2:	089b      	lsrs	r3, r3, #2
 80038f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80038f6:	2300      	movs	r3, #0
 80038f8:	61bb      	str	r3, [r7, #24]
 80038fa:	e018      	b.n	800392e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80038fc:	79fb      	ldrb	r3, [r7, #7]
 80038fe:	031a      	lsls	r2, r3, #12
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	4413      	add	r3, r2
 8003904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003908:	461a      	mov	r2, r3
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	3301      	adds	r3, #1
 8003914:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	3301      	adds	r3, #1
 800391a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	3301      	adds	r3, #1
 8003920:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	3301      	adds	r3, #1
 8003926:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	3301      	adds	r3, #1
 800392c:	61bb      	str	r3, [r7, #24]
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	429a      	cmp	r2, r3
 8003934:	d3e2      	bcc.n	80038fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3724      	adds	r7, #36	; 0x24
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003944:	b480      	push	{r7}
 8003946:	b08b      	sub	sp, #44	; 0x2c
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	4613      	mov	r3, r2
 8003950:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800395a:	88fb      	ldrh	r3, [r7, #6]
 800395c:	089b      	lsrs	r3, r3, #2
 800395e:	b29b      	uxth	r3, r3
 8003960:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003962:	88fb      	ldrh	r3, [r7, #6]
 8003964:	f003 0303 	and.w	r3, r3, #3
 8003968:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800396a:	2300      	movs	r3, #0
 800396c:	623b      	str	r3, [r7, #32]
 800396e:	e014      	b.n	800399a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	601a      	str	r2, [r3, #0]
    pDest++;
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	3301      	adds	r3, #1
 8003980:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	3301      	adds	r3, #1
 8003986:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	3301      	adds	r3, #1
 800398c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	3301      	adds	r3, #1
 8003992:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003994:	6a3b      	ldr	r3, [r7, #32]
 8003996:	3301      	adds	r3, #1
 8003998:	623b      	str	r3, [r7, #32]
 800399a:	6a3a      	ldr	r2, [r7, #32]
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d3e6      	bcc.n	8003970 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80039a2:	8bfb      	ldrh	r3, [r7, #30]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d01e      	beq.n	80039e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039b2:	461a      	mov	r2, r3
 80039b4:	f107 0310 	add.w	r3, r7, #16
 80039b8:	6812      	ldr	r2, [r2, #0]
 80039ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	fa22 f303 	lsr.w	r3, r2, r3
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	701a      	strb	r2, [r3, #0]
      i++;
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	3301      	adds	r3, #1
 80039d2:	623b      	str	r3, [r7, #32]
      pDest++;
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	3301      	adds	r3, #1
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80039da:	8bfb      	ldrh	r3, [r7, #30]
 80039dc:	3b01      	subs	r3, #1
 80039de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80039e0:	8bfb      	ldrh	r3, [r7, #30]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1ea      	bne.n	80039bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	372c      	adds	r7, #44	; 0x2c
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	f003 0301 	and.w	r3, r3, #1
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
	...

08003a38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	3301      	adds	r3, #1
 8003a48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4a13      	ldr	r2, [pc, #76]	; (8003a9c <USB_CoreReset+0x64>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d901      	bls.n	8003a56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e01b      	b.n	8003a8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	daf2      	bge.n	8003a44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	f043 0201 	orr.w	r2, r3, #1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	3301      	adds	r3, #1
 8003a72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4a09      	ldr	r2, [pc, #36]	; (8003a9c <USB_CoreReset+0x64>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d901      	bls.n	8003a80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e006      	b.n	8003a8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d0f0      	beq.n	8003a6e <USB_CoreReset+0x36>

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	00030d40 	.word	0x00030d40

08003aa0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003aa0:	b084      	sub	sp, #16
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b086      	sub	sp, #24
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003aae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d018      	beq.n	8003b28 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8003af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d10a      	bne.n	8003b12 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b0a:	f043 0304 	orr.w	r3, r3, #4
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	e014      	b.n	8003b3c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b20:	f023 0304 	bic.w	r3, r3, #4
 8003b24:	6013      	str	r3, [r2, #0]
 8003b26:	e009      	b.n	8003b3c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b36:	f023 0304 	bic.w	r3, r3, #4
 8003b3a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b3c:	2110      	movs	r1, #16
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7ff fe5e 	bl	8003800 <USB_FlushTxFifo>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7ff fe8a 	bl	8003868 <USB_FlushRxFifo>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003b5e:	2300      	movs	r3, #0
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	e015      	b.n	8003b90 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b70:	461a      	mov	r2, r3
 8003b72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b76:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	015a      	lsls	r2, r3, #5
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4413      	add	r3, r2
 8003b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b84:	461a      	mov	r2, r3
 8003b86:	2300      	movs	r3, #0
 8003b88:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	613b      	str	r3, [r7, #16]
 8003b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d3e5      	bcc.n	8003b64 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ba4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00b      	beq.n	8003bca <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bb8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a13      	ldr	r2, [pc, #76]	; (8003c0c <USB_HostInit+0x16c>)
 8003bbe:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a13      	ldr	r2, [pc, #76]	; (8003c10 <USB_HostInit+0x170>)
 8003bc4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003bc8:	e009      	b.n	8003bde <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2280      	movs	r2, #128	; 0x80
 8003bce:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a10      	ldr	r2, [pc, #64]	; (8003c14 <USB_HostInit+0x174>)
 8003bd4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a0f      	ldr	r2, [pc, #60]	; (8003c18 <USB_HostInit+0x178>)
 8003bda:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d105      	bne.n	8003bf0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	f043 0210 	orr.w	r2, r3, #16
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	699a      	ldr	r2, [r3, #24]
 8003bf4:	4b09      	ldr	r3, [pc, #36]	; (8003c1c <USB_HostInit+0x17c>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8003bfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c08:	b004      	add	sp, #16
 8003c0a:	4770      	bx	lr
 8003c0c:	01000200 	.word	0x01000200
 8003c10:	00e00300 	.word	0x00e00300
 8003c14:	00600080 	.word	0x00600080
 8003c18:	004000e0 	.word	0x004000e0
 8003c1c:	a3200008 	.word	0xa3200008

08003c20 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c3e:	f023 0303 	bic.w	r3, r3, #3
 8003c42:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	78fb      	ldrb	r3, [r7, #3]
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	68f9      	ldr	r1, [r7, #12]
 8003c54:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8003c5c:	78fb      	ldrb	r3, [r7, #3]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d107      	bne.n	8003c72 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c68:	461a      	mov	r2, r3
 8003c6a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003c6e:	6053      	str	r3, [r2, #4]
 8003c70:	e009      	b.n	8003c86 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8003c72:	78fb      	ldrb	r3, [r7, #3]
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d106      	bne.n	8003c86 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c7e:	461a      	mov	r2, r3
 8003c80:	f241 7370 	movw	r3, #6000	; 0x1770
 8003c84:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003cb4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8003cc4:	2064      	movs	r0, #100	; 0x64
 8003cc6:	f7fc fea1 	bl	8000a0c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003cd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cd6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8003cd8:	200a      	movs	r0, #10
 8003cda:	f7fc fe97 	bl	8000a0c <HAL_Delay>

  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003d0c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d109      	bne.n	8003d2c <USB_DriveVbus+0x44>
 8003d18:	78fb      	ldrb	r3, [r7, #3]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d106      	bne.n	8003d2c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003d26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d2a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d36:	d109      	bne.n	8003d4c <USB_DriveVbus+0x64>
 8003d38:	78fb      	ldrb	r3, [r7, #3]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d106      	bne.n	8003d4c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003d46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d4a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b085      	sub	sp, #20
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	0c5b      	lsrs	r3, r3, #17
 8003d78:	f003 0303 	and.w	r3, r3, #3
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	b29b      	uxth	r3, r3
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
	...

08003dac <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b088      	sub	sp, #32
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	4608      	mov	r0, r1
 8003db6:	4611      	mov	r1, r2
 8003db8:	461a      	mov	r2, r3
 8003dba:	4603      	mov	r3, r0
 8003dbc:	70fb      	strb	r3, [r7, #3]
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	70bb      	strb	r3, [r7, #2]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8003dce:	78fb      	ldrb	r3, [r7, #3]
 8003dd0:	015a      	lsls	r2, r3, #5
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dda:	461a      	mov	r2, r3
 8003ddc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003de0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8003de2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003de6:	2b03      	cmp	r3, #3
 8003de8:	d87e      	bhi.n	8003ee8 <USB_HC_Init+0x13c>
 8003dea:	a201      	add	r2, pc, #4	; (adr r2, 8003df0 <USB_HC_Init+0x44>)
 8003dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df0:	08003e01 	.word	0x08003e01
 8003df4:	08003eab 	.word	0x08003eab
 8003df8:	08003e01 	.word	0x08003e01
 8003dfc:	08003e6d 	.word	0x08003e6d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003e00:	78fb      	ldrb	r3, [r7, #3]
 8003e02:	015a      	lsls	r2, r3, #5
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	f240 439d 	movw	r3, #1181	; 0x49d
 8003e12:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8003e14:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	da10      	bge.n	8003e3e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003e1c:	78fb      	ldrb	r3, [r7, #3]
 8003e1e:	015a      	lsls	r2, r3, #5
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	78fa      	ldrb	r2, [r7, #3]
 8003e2c:	0151      	lsls	r1, r2, #5
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	440a      	add	r2, r1
 8003e32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e3a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8003e3c:	e057      	b.n	8003eee <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d051      	beq.n	8003eee <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8003e4a:	78fb      	ldrb	r3, [r7, #3]
 8003e4c:	015a      	lsls	r2, r3, #5
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	78fa      	ldrb	r2, [r7, #3]
 8003e5a:	0151      	lsls	r1, r2, #5
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	440a      	add	r2, r1
 8003e60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e64:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003e68:	60d3      	str	r3, [r2, #12]
      break;
 8003e6a:	e040      	b.n	8003eee <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003e6c:	78fb      	ldrb	r3, [r7, #3]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e78:	461a      	mov	r2, r3
 8003e7a:	f240 639d 	movw	r3, #1693	; 0x69d
 8003e7e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8003e80:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	da34      	bge.n	8003ef2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003e88:	78fb      	ldrb	r3, [r7, #3]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	78fa      	ldrb	r2, [r7, #3]
 8003e98:	0151      	lsls	r1, r2, #5
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	440a      	add	r2, r1
 8003e9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8003ea8:	e023      	b.n	8003ef2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003eaa:	78fb      	ldrb	r3, [r7, #3]
 8003eac:	015a      	lsls	r2, r3, #5
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	f240 2325 	movw	r3, #549	; 0x225
 8003ebc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8003ebe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	da17      	bge.n	8003ef6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8003ec6:	78fb      	ldrb	r3, [r7, #3]
 8003ec8:	015a      	lsls	r2, r3, #5
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	78fa      	ldrb	r2, [r7, #3]
 8003ed6:	0151      	lsls	r1, r2, #5
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	440a      	add	r2, r1
 8003edc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ee0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8003ee4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8003ee6:	e006      	b.n	8003ef6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	77fb      	strb	r3, [r7, #31]
      break;
 8003eec:	e004      	b.n	8003ef8 <USB_HC_Init+0x14c>
      break;
 8003eee:	bf00      	nop
 8003ef0:	e002      	b.n	8003ef8 <USB_HC_Init+0x14c>
      break;
 8003ef2:	bf00      	nop
 8003ef4:	e000      	b.n	8003ef8 <USB_HC_Init+0x14c>
      break;
 8003ef6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8003ef8:	78fb      	ldrb	r3, [r7, #3]
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	78fa      	ldrb	r2, [r7, #3]
 8003f08:	0151      	lsls	r1, r2, #5
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	440a      	add	r2, r1
 8003f0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f12:	f043 0302 	orr.w	r3, r3, #2
 8003f16:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f1e:	699a      	ldr	r2, [r3, #24]
 8003f20:	78fb      	ldrb	r3, [r7, #3]
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	2101      	movs	r1, #1
 8003f28:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2c:	6939      	ldr	r1, [r7, #16]
 8003f2e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003f32:	4313      	orrs	r3, r2
 8003f34:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8003f42:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	da03      	bge.n	8003f52 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8003f4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f4e:	61bb      	str	r3, [r7, #24]
 8003f50:	e001      	b.n	8003f56 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7ff feff 	bl	8003d5a <USB_GetHostSpeed>
 8003f5c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8003f5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d106      	bne.n	8003f74 <USB_HC_Init+0x1c8>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d003      	beq.n	8003f74 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8003f6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f70:	617b      	str	r3, [r7, #20]
 8003f72:	e001      	b.n	8003f78 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003f78:	787b      	ldrb	r3, [r7, #1]
 8003f7a:	059b      	lsls	r3, r3, #22
 8003f7c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8003f80:	78bb      	ldrb	r3, [r7, #2]
 8003f82:	02db      	lsls	r3, r3, #11
 8003f84:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003f88:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8003f8a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003f8e:	049b      	lsls	r3, r3, #18
 8003f90:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8003f94:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003f96:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003f98:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8003f9c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003fa2:	78fb      	ldrb	r3, [r7, #3]
 8003fa4:	0159      	lsls	r1, r3, #5
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	440b      	add	r3, r1
 8003faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fae:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003fb4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8003fb6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003fba:	2b03      	cmp	r3, #3
 8003fbc:	d003      	beq.n	8003fc6 <USB_HC_Init+0x21a>
 8003fbe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d10f      	bne.n	8003fe6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003fc6:	78fb      	ldrb	r3, [r7, #3]
 8003fc8:	015a      	lsls	r2, r3, #5
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	78fa      	ldrb	r2, [r7, #3]
 8003fd6:	0151      	lsls	r1, r2, #5
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	440a      	add	r2, r1
 8003fdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fe0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003fe4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8003fe6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3720      	adds	r7, #32
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08c      	sub	sp, #48	; 0x30
 8003ff4:	af02      	add	r7, sp, #8
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	785b      	ldrb	r3, [r3, #1]
 8004006:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004008:	f44f 7380 	mov.w	r3, #256	; 0x100
 800400c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004016:	2b00      	cmp	r3, #0
 8004018:	d02d      	beq.n	8004076 <USB_HC_StartXfer+0x86>
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	791b      	ldrb	r3, [r3, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d129      	bne.n	8004076 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004022:	79fb      	ldrb	r3, [r7, #7]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d117      	bne.n	8004058 <USB_HC_StartXfer+0x68>
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	79db      	ldrb	r3, [r3, #7]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <USB_HC_StartXfer+0x48>
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	79db      	ldrb	r3, [r3, #7]
 8004034:	2b02      	cmp	r3, #2
 8004036:	d10f      	bne.n	8004058 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	4413      	add	r3, r2
 8004040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	69fa      	ldr	r2, [r7, #28]
 8004048:	0151      	lsls	r1, r2, #5
 800404a:	6a3a      	ldr	r2, [r7, #32]
 800404c:	440a      	add	r2, r1
 800404e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004056:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004058:	79fb      	ldrb	r3, [r7, #7]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10b      	bne.n	8004076 <USB_HC_StartXfer+0x86>
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	795b      	ldrb	r3, [r3, #5]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d107      	bne.n	8004076 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	785b      	ldrb	r3, [r3, #1]
 800406a:	4619      	mov	r1, r3
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 fa0f 	bl	8004490 <USB_DoPing>
      return HAL_OK;
 8004072:	2300      	movs	r3, #0
 8004074:	e0f8      	b.n	8004268 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d018      	beq.n	80040b0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	8912      	ldrh	r2, [r2, #8]
 8004086:	4413      	add	r3, r2
 8004088:	3b01      	subs	r3, #1
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	8912      	ldrh	r2, [r2, #8]
 800408e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004092:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004094:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004096:	8b7b      	ldrh	r3, [r7, #26]
 8004098:	429a      	cmp	r2, r3
 800409a:	d90b      	bls.n	80040b4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800409c:	8b7b      	ldrh	r3, [r7, #26]
 800409e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80040a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	8912      	ldrh	r2, [r2, #8]
 80040a6:	fb03 f202 	mul.w	r2, r3, r2
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	611a      	str	r2, [r3, #16]
 80040ae:	e001      	b.n	80040b4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80040b0:	2301      	movs	r3, #1
 80040b2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	78db      	ldrb	r3, [r3, #3]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d007      	beq.n	80040cc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80040bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	8912      	ldrh	r2, [r2, #8]
 80040c2:	fb03 f202 	mul.w	r2, r3, r2
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	611a      	str	r2, [r3, #16]
 80040ca:	e003      	b.n	80040d4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	695a      	ldr	r2, [r3, #20]
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80040dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80040de:	04d9      	lsls	r1, r3, #19
 80040e0:	4b63      	ldr	r3, [pc, #396]	; (8004270 <USB_HC_StartXfer+0x280>)
 80040e2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80040e4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	7a9b      	ldrb	r3, [r3, #10]
 80040ea:	075b      	lsls	r3, r3, #29
 80040ec:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80040f0:	69f9      	ldr	r1, [r7, #28]
 80040f2:	0148      	lsls	r0, r1, #5
 80040f4:	6a39      	ldr	r1, [r7, #32]
 80040f6:	4401      	add	r1, r0
 80040f8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80040fc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80040fe:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004100:	79fb      	ldrb	r3, [r7, #7]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d009      	beq.n	800411a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	68d9      	ldr	r1, [r3, #12]
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	015a      	lsls	r2, r3, #5
 800410e:	6a3b      	ldr	r3, [r7, #32]
 8004110:	4413      	add	r3, r2
 8004112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004116:	460a      	mov	r2, r1
 8004118:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	bf0c      	ite	eq
 800412a:	2301      	moveq	r3, #1
 800412c:	2300      	movne	r3, #0
 800412e:	b2db      	uxtb	r3, r3
 8004130:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	015a      	lsls	r2, r3, #5
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	4413      	add	r3, r2
 800413a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	69fa      	ldr	r2, [r7, #28]
 8004142:	0151      	lsls	r1, r2, #5
 8004144:	6a3a      	ldr	r2, [r7, #32]
 8004146:	440a      	add	r2, r1
 8004148:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800414c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004150:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	4413      	add	r3, r2
 800415a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	7e7b      	ldrb	r3, [r7, #25]
 8004162:	075b      	lsls	r3, r3, #29
 8004164:	69f9      	ldr	r1, [r7, #28]
 8004166:	0148      	lsls	r0, r1, #5
 8004168:	6a39      	ldr	r1, [r7, #32]
 800416a:	4401      	add	r1, r0
 800416c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004170:	4313      	orrs	r3, r2
 8004172:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	4413      	add	r3, r2
 800417c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800418a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	78db      	ldrb	r3, [r3, #3]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d004      	beq.n	800419e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800419a:	613b      	str	r3, [r7, #16]
 800419c:	e003      	b.n	80041a6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80041a4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80041ac:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	015a      	lsls	r2, r3, #5
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ba:	461a      	mov	r2, r3
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80041c0:	79fb      	ldrb	r3, [r7, #7]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80041c6:	2300      	movs	r3, #0
 80041c8:	e04e      	b.n	8004268 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	78db      	ldrb	r3, [r3, #3]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d149      	bne.n	8004266 <USB_HC_StartXfer+0x276>
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d045      	beq.n	8004266 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	79db      	ldrb	r3, [r3, #7]
 80041de:	2b03      	cmp	r3, #3
 80041e0:	d830      	bhi.n	8004244 <USB_HC_StartXfer+0x254>
 80041e2:	a201      	add	r2, pc, #4	; (adr r2, 80041e8 <USB_HC_StartXfer+0x1f8>)
 80041e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e8:	080041f9 	.word	0x080041f9
 80041ec:	0800421d 	.word	0x0800421d
 80041f0:	080041f9 	.word	0x080041f9
 80041f4:	0800421d 	.word	0x0800421d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	3303      	adds	r3, #3
 80041fe:	089b      	lsrs	r3, r3, #2
 8004200:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004202:	8afa      	ldrh	r2, [r7, #22]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004208:	b29b      	uxth	r3, r3
 800420a:	429a      	cmp	r2, r3
 800420c:	d91c      	bls.n	8004248 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	f043 0220 	orr.w	r2, r3, #32
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	619a      	str	r2, [r3, #24]
        }
        break;
 800421a:	e015      	b.n	8004248 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	3303      	adds	r3, #3
 8004222:	089b      	lsrs	r3, r3, #2
 8004224:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004226:	8afa      	ldrh	r2, [r7, #22]
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	b29b      	uxth	r3, r3
 8004232:	429a      	cmp	r2, r3
 8004234:	d90a      	bls.n	800424c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	619a      	str	r2, [r3, #24]
        }
        break;
 8004242:	e003      	b.n	800424c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8004244:	bf00      	nop
 8004246:	e002      	b.n	800424e <USB_HC_StartXfer+0x25e>
        break;
 8004248:	bf00      	nop
 800424a:	e000      	b.n	800424e <USB_HC_StartXfer+0x25e>
        break;
 800424c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	68d9      	ldr	r1, [r3, #12]
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	785a      	ldrb	r2, [r3, #1]
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	b29b      	uxth	r3, r3
 800425c:	2000      	movs	r0, #0
 800425e:	9000      	str	r0, [sp, #0]
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f7ff fb31 	bl	80038c8 <USB_WritePacket>
  }

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3728      	adds	r7, #40	; 0x28
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	1ff80000 	.word	0x1ff80000

08004274 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	b29b      	uxth	r3, r3
}
 800428a:	4618      	mov	r0, r3
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004296:	b480      	push	{r7}
 8004298:	b089      	sub	sp, #36	; 0x24
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
 800429e:	460b      	mov	r3, r1
 80042a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80042a6:	78fb      	ldrb	r3, [r7, #3]
 80042a8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80042aa:	2300      	movs	r3, #0
 80042ac:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	0c9b      	lsrs	r3, r3, #18
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	015a      	lsls	r2, r3, #5
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	0fdb      	lsrs	r3, r3, #31
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 0320 	and.w	r3, r3, #32
 80042e2:	2b20      	cmp	r3, #32
 80042e4:	d104      	bne.n	80042f0 <USB_HC_Halt+0x5a>
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d101      	bne.n	80042f0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80042ec:	2300      	movs	r3, #0
 80042ee:	e0c8      	b.n	8004482 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d002      	beq.n	80042fc <USB_HC_Halt+0x66>
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d163      	bne.n	80043c4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	4413      	add	r3, r2
 8004304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	0151      	lsls	r1, r2, #5
 800430e:	69fa      	ldr	r2, [r7, #28]
 8004310:	440a      	add	r2, r1
 8004312:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004316:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800431a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f003 0320 	and.w	r3, r3, #32
 8004324:	2b00      	cmp	r3, #0
 8004326:	f040 80ab 	bne.w	8004480 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d133      	bne.n	800439e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	015a      	lsls	r2, r3, #5
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	4413      	add	r3, r2
 800433e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	0151      	lsls	r1, r2, #5
 8004348:	69fa      	ldr	r2, [r7, #28]
 800434a:	440a      	add	r2, r1
 800434c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004350:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004354:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	4413      	add	r3, r2
 800435e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	0151      	lsls	r1, r2, #5
 8004368:	69fa      	ldr	r2, [r7, #28]
 800436a:	440a      	add	r2, r1
 800436c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004370:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004374:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	3301      	adds	r3, #1
 800437a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004382:	d81d      	bhi.n	80043c0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	4413      	add	r3, r2
 800438c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004396:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800439a:	d0ec      	beq.n	8004376 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800439c:	e070      	b.n	8004480 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	0151      	lsls	r1, r2, #5
 80043b0:	69fa      	ldr	r2, [r7, #28]
 80043b2:	440a      	add	r2, r1
 80043b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043bc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80043be:	e05f      	b.n	8004480 <USB_HC_Halt+0x1ea>
            break;
 80043c0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80043c2:	e05d      	b.n	8004480 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	0151      	lsls	r1, r2, #5
 80043d6:	69fa      	ldr	r2, [r7, #28]
 80043d8:	440a      	add	r2, r1
 80043da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043e2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d133      	bne.n	800445c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	015a      	lsls	r2, r3, #5
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	0151      	lsls	r1, r2, #5
 8004406:	69fa      	ldr	r2, [r7, #28]
 8004408:	440a      	add	r2, r1
 800440a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800440e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004412:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	4413      	add	r3, r2
 800441c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	0151      	lsls	r1, r2, #5
 8004426:	69fa      	ldr	r2, [r7, #28]
 8004428:	440a      	add	r2, r1
 800442a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800442e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004432:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	3301      	adds	r3, #1
 8004438:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004440:	d81d      	bhi.n	800447e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	015a      	lsls	r2, r3, #5
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	4413      	add	r3, r2
 800444a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004454:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004458:	d0ec      	beq.n	8004434 <USB_HC_Halt+0x19e>
 800445a:	e011      	b.n	8004480 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	4413      	add	r3, r2
 8004464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	0151      	lsls	r1, r2, #5
 800446e:	69fa      	ldr	r2, [r7, #28]
 8004470:	440a      	add	r2, r1
 8004472:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004476:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800447a:	6013      	str	r3, [r2, #0]
 800447c:	e000      	b.n	8004480 <USB_HC_Halt+0x1ea>
          break;
 800447e:	bf00      	nop
    }
  }

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3724      	adds	r7, #36	; 0x24
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
	...

08004490 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	460b      	mov	r3, r1
 800449a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80044a0:	78fb      	ldrb	r3, [r7, #3]
 80044a2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80044a4:	2301      	movs	r3, #1
 80044a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	04da      	lsls	r2, r3, #19
 80044ac:	4b15      	ldr	r3, [pc, #84]	; (8004504 <USB_DoPing+0x74>)
 80044ae:	4013      	ands	r3, r2
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	0151      	lsls	r1, r2, #5
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	440a      	add	r2, r1
 80044b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80044c0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80044d8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80044e0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	015a      	lsls	r2, r3, #5
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	4413      	add	r3, r2
 80044ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ee:	461a      	mov	r2, r3
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	371c      	adds	r7, #28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	1ff80000 	.word	0x1ff80000

08004508 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b088      	sub	sp, #32
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004510:	2300      	movs	r3, #0
 8004512:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f7ff f911 	bl	8003744 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004522:	2110      	movs	r1, #16
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f7ff f96b 	bl	8003800 <USB_FlushTxFifo>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f7ff f997 	bl	8003868 <USB_FlushRxFifo>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004544:	2300      	movs	r3, #0
 8004546:	61bb      	str	r3, [r7, #24]
 8004548:	e01f      	b.n	800458a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	4413      	add	r3, r2
 8004552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004560:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004568:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004570:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	4413      	add	r3, r2
 800457a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800457e:	461a      	mov	r2, r3
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	3301      	adds	r3, #1
 8004588:	61bb      	str	r3, [r7, #24]
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	2b0f      	cmp	r3, #15
 800458e:	d9dc      	bls.n	800454a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004590:	2300      	movs	r3, #0
 8004592:	61bb      	str	r3, [r7, #24]
 8004594:	e034      	b.n	8004600 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	015a      	lsls	r2, r3, #5
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	4413      	add	r3, r2
 800459e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045ac:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045b4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045bc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ca:	461a      	mov	r2, r3
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	3301      	adds	r3, #1
 80045d4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045dc:	d80c      	bhi.n	80045f8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	015a      	lsls	r2, r3, #5
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045f4:	d0ec      	beq.n	80045d0 <USB_StopHost+0xc8>
 80045f6:	e000      	b.n	80045fa <USB_StopHost+0xf2>
        break;
 80045f8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	3301      	adds	r3, #1
 80045fe:	61bb      	str	r3, [r7, #24]
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	2b0f      	cmp	r3, #15
 8004604:	d9c7      	bls.n	8004596 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800460c:	461a      	mov	r2, r3
 800460e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004612:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800461a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7ff f880 	bl	8003722 <USB_EnableGlobalInt>

  return ret;
 8004622:	7ffb      	ldrb	r3, [r7, #31]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3720      	adds	r7, #32
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8004630:	4904      	ldr	r1, [pc, #16]	; (8004644 <MX_FATFS_Init+0x18>)
 8004632:	4805      	ldr	r0, [pc, #20]	; (8004648 <MX_FATFS_Init+0x1c>)
 8004634:	f005 fc04 	bl	8009e40 <FATFS_LinkDriver>
 8004638:	4603      	mov	r3, r0
 800463a:	461a      	mov	r2, r3
 800463c:	4b03      	ldr	r3, [pc, #12]	; (800464c <MX_FATFS_Init+0x20>)
 800463e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004640:	bf00      	nop
 8004642:	bd80      	pop	{r7, pc}
 8004644:	20000104 	.word	0x20000104
 8004648:	0800a998 	.word	0x0800a998
 800464c:	20000100 	.word	0x20000100

08004650 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004654:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004656:	4618      	mov	r0, r3
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	4603      	mov	r3, r0
 8004668:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	4603      	mov	r3, r0
 8004680:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8004686:	79fb      	ldrb	r3, [r7, #7]
 8004688:	4619      	mov	r1, r3
 800468a:	4808      	ldr	r0, [pc, #32]	; (80046ac <USBH_status+0x34>)
 800468c:	f000 fe32 	bl	80052f4 <USBH_MSC_UnitIsReady>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <USBH_status+0x24>
  {
    res = RES_OK;
 8004696:	2300      	movs	r3, #0
 8004698:	73fb      	strb	r3, [r7, #15]
 800469a:	e001      	b.n	80046a0 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	2000013c 	.word	0x2000013c

080046b0 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b094      	sub	sp, #80	; 0x50
 80046b4:	af02      	add	r7, sp, #8
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	607a      	str	r2, [r7, #4]
 80046ba:	603b      	str	r3, [r7, #0]
 80046bc:	4603      	mov	r3, r0
 80046be:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80046c6:	7bf9      	ldrb	r1, [r7, #15]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	4813      	ldr	r0, [pc, #76]	; (8004720 <USBH_read+0x70>)
 80046d2:	f000 fe59 	bl	8005388 <USBH_MSC_Read>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d103      	bne.n	80046e4 <USBH_read+0x34>
  {
    res = RES_OK;
 80046dc:	2300      	movs	r3, #0
 80046de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80046e2:	e017      	b.n	8004714 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80046e4:	f107 0210 	add.w	r2, r7, #16
 80046e8:	7bfb      	ldrb	r3, [r7, #15]
 80046ea:	4619      	mov	r1, r3
 80046ec:	480c      	ldr	r0, [pc, #48]	; (8004720 <USBH_read+0x70>)
 80046ee:	f000 fe27 	bl	8005340 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80046f2:	7f7b      	ldrb	r3, [r7, #29]
 80046f4:	2b3a      	cmp	r3, #58	; 0x3a
 80046f6:	d005      	beq.n	8004704 <USBH_read+0x54>
 80046f8:	2b3a      	cmp	r3, #58	; 0x3a
 80046fa:	dc07      	bgt.n	800470c <USBH_read+0x5c>
 80046fc:	2b04      	cmp	r3, #4
 80046fe:	d001      	beq.n	8004704 <USBH_read+0x54>
 8004700:	2b28      	cmp	r3, #40	; 0x28
 8004702:	d103      	bne.n	800470c <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8004704:	2303      	movs	r3, #3
 8004706:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800470a:	e003      	b.n	8004714 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8004712:	bf00      	nop
    }
  }

  return res;
 8004714:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8004718:	4618      	mov	r0, r3
 800471a:	3748      	adds	r7, #72	; 0x48
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	2000013c 	.word	0x2000013c

08004724 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b094      	sub	sp, #80	; 0x50
 8004728:	af02      	add	r7, sp, #8
 800472a:	60b9      	str	r1, [r7, #8]
 800472c:	607a      	str	r2, [r7, #4]
 800472e:	603b      	str	r3, [r7, #0]
 8004730:	4603      	mov	r3, r0
 8004732:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800473a:	7bf9      	ldrb	r1, [r7, #15]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	4817      	ldr	r0, [pc, #92]	; (80047a4 <USBH_write+0x80>)
 8004746:	f000 fe88 	bl	800545a <USBH_MSC_Write>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d103      	bne.n	8004758 <USBH_write+0x34>
  {
    res = RES_OK;
 8004750:	2300      	movs	r3, #0
 8004752:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004756:	e01f      	b.n	8004798 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8004758:	f107 0210 	add.w	r2, r7, #16
 800475c:	7bfb      	ldrb	r3, [r7, #15]
 800475e:	4619      	mov	r1, r3
 8004760:	4810      	ldr	r0, [pc, #64]	; (80047a4 <USBH_write+0x80>)
 8004762:	f000 fded 	bl	8005340 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8004766:	7f7b      	ldrb	r3, [r7, #29]
 8004768:	2b3a      	cmp	r3, #58	; 0x3a
 800476a:	d00d      	beq.n	8004788 <USBH_write+0x64>
 800476c:	2b3a      	cmp	r3, #58	; 0x3a
 800476e:	dc0f      	bgt.n	8004790 <USBH_write+0x6c>
 8004770:	2b28      	cmp	r3, #40	; 0x28
 8004772:	d009      	beq.n	8004788 <USBH_write+0x64>
 8004774:	2b28      	cmp	r3, #40	; 0x28
 8004776:	dc0b      	bgt.n	8004790 <USBH_write+0x6c>
 8004778:	2b04      	cmp	r3, #4
 800477a:	d005      	beq.n	8004788 <USBH_write+0x64>
 800477c:	2b27      	cmp	r3, #39	; 0x27
 800477e:	d107      	bne.n	8004790 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8004780:	2302      	movs	r3, #2
 8004782:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8004786:	e007      	b.n	8004798 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8004788:	2303      	movs	r3, #3
 800478a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800478e:	e003      	b.n	8004798 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8004796:	bf00      	nop
    }
  }

  return res;
 8004798:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800479c:	4618      	mov	r0, r3
 800479e:	3748      	adds	r7, #72	; 0x48
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	2000013c 	.word	0x2000013c

080047a8 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b090      	sub	sp, #64	; 0x40
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	4603      	mov	r3, r0
 80047b0:	603a      	str	r2, [r7, #0]
 80047b2:	71fb      	strb	r3, [r7, #7]
 80047b4:	460b      	mov	r3, r1
 80047b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 80047be:	79bb      	ldrb	r3, [r7, #6]
 80047c0:	2b03      	cmp	r3, #3
 80047c2:	d852      	bhi.n	800486a <USBH_ioctl+0xc2>
 80047c4:	a201      	add	r2, pc, #4	; (adr r2, 80047cc <USBH_ioctl+0x24>)
 80047c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ca:	bf00      	nop
 80047cc:	080047dd 	.word	0x080047dd
 80047d0:	080047e5 	.word	0x080047e5
 80047d4:	0800480f 	.word	0x0800480f
 80047d8:	0800483b 	.word	0x0800483b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 80047dc:	2300      	movs	r3, #0
 80047de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80047e2:	e045      	b.n	8004870 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80047e4:	f107 0208 	add.w	r2, r7, #8
 80047e8:	79fb      	ldrb	r3, [r7, #7]
 80047ea:	4619      	mov	r1, r3
 80047ec:	4823      	ldr	r0, [pc, #140]	; (800487c <USBH_ioctl+0xd4>)
 80047ee:	f000 fda7 	bl	8005340 <USBH_MSC_GetLUNInfo>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d106      	bne.n	8004806 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80047fe:	2300      	movs	r3, #0
 8004800:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8004804:	e034      	b.n	8004870 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800480c:	e030      	b.n	8004870 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800480e:	f107 0208 	add.w	r2, r7, #8
 8004812:	79fb      	ldrb	r3, [r7, #7]
 8004814:	4619      	mov	r1, r3
 8004816:	4819      	ldr	r0, [pc, #100]	; (800487c <USBH_ioctl+0xd4>)
 8004818:	f000 fd92 	bl	8005340 <USBH_MSC_GetLUNInfo>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d107      	bne.n	8004832 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8004822:	8a3b      	ldrh	r3, [r7, #16]
 8004824:	461a      	mov	r2, r3
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800482a:	2300      	movs	r3, #0
 800482c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8004830:	e01e      	b.n	8004870 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8004838:	e01a      	b.n	8004870 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800483a:	f107 0208 	add.w	r2, r7, #8
 800483e:	79fb      	ldrb	r3, [r7, #7]
 8004840:	4619      	mov	r1, r3
 8004842:	480e      	ldr	r0, [pc, #56]	; (800487c <USBH_ioctl+0xd4>)
 8004844:	f000 fd7c 	bl	8005340 <USBH_MSC_GetLUNInfo>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d109      	bne.n	8004862 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800484e:	8a3b      	ldrh	r3, [r7, #16]
 8004850:	0a5b      	lsrs	r3, r3, #9
 8004852:	b29b      	uxth	r3, r3
 8004854:	461a      	mov	r2, r3
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8004860:	e006      	b.n	8004870 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8004868:	e002      	b.n	8004870 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800486a:	2304      	movs	r3, #4
 800486c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8004870:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8004874:	4618      	mov	r0, r3
 8004876:	3740      	adds	r7, #64	; 0x40
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	2000013c 	.word	0x2000013c

08004880 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8004880:	b590      	push	{r4, r7, lr}
 8004882:	b089      	sub	sp, #36	; 0x24
 8004884:	af04      	add	r7, sp, #16
 8004886:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800488e:	7919      	ldrb	r1, [r3, #4]
 8004890:	2350      	movs	r3, #80	; 0x50
 8004892:	2206      	movs	r2, #6
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f001 fc6b 	bl	8006170 <USBH_FindInterface>
 800489a:	4603      	mov	r3, r0
 800489c:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800489e:	7bfb      	ldrb	r3, [r7, #15]
 80048a0:	2bff      	cmp	r3, #255	; 0xff
 80048a2:	d002      	beq.n	80048aa <USBH_MSC_InterfaceInit+0x2a>
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d901      	bls.n	80048ae <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80048aa:	2302      	movs	r3, #2
 80048ac:	e106      	b.n	8004abc <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 80048ae:	7bfb      	ldrb	r3, [r7, #15]
 80048b0:	4619      	mov	r1, r3
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f001 fc40 	bl	8006138 <USBH_SelectInterface>
 80048b8:	4603      	mov	r3, r0
 80048ba:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80048bc:	7bbb      	ldrb	r3, [r7, #14]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 80048c2:	2302      	movs	r3, #2
 80048c4:	e0fa      	b.n	8004abc <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80048cc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80048d0:	f005 feea 	bl	800a6a8 <malloc>
 80048d4:	4603      	mov	r3, r0
 80048d6:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80048de:	69db      	ldr	r3, [r3, #28]
 80048e0:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 80048e8:	2302      	movs	r3, #2
 80048ea:	e0e7      	b.n	8004abc <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80048ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048f0:	2100      	movs	r1, #0
 80048f2:	68b8      	ldr	r0, [r7, #8]
 80048f4:	f005 fef6 	bl	800a6e4 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	211a      	movs	r1, #26
 80048fe:	fb01 f303 	mul.w	r3, r1, r3
 8004902:	4413      	add	r3, r2
 8004904:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	b25b      	sxtb	r3, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	da16      	bge.n	800493e <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8004910:	7bfb      	ldrb	r3, [r7, #15]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	211a      	movs	r1, #26
 8004916:	fb01 f303 	mul.w	r3, r1, r3
 800491a:	4413      	add	r3, r2
 800491c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004920:	781a      	ldrb	r2, [r3, #0]
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004926:	7bfb      	ldrb	r3, [r7, #15]
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	211a      	movs	r1, #26
 800492c:	fb01 f303 	mul.w	r3, r1, r3
 8004930:	4413      	add	r3, r2
 8004932:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004936:	881a      	ldrh	r2, [r3, #0]
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	815a      	strh	r2, [r3, #10]
 800493c:	e015      	b.n	800496a <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800493e:	7bfb      	ldrb	r3, [r7, #15]
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	211a      	movs	r1, #26
 8004944:	fb01 f303 	mul.w	r3, r1, r3
 8004948:	4413      	add	r3, r2
 800494a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800494e:	781a      	ldrb	r2, [r3, #0]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004954:	7bfb      	ldrb	r3, [r7, #15]
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	211a      	movs	r1, #26
 800495a:	fb01 f303 	mul.w	r3, r1, r3
 800495e:	4413      	add	r3, r2
 8004960:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004964:	881a      	ldrh	r2, [r3, #0]
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800496a:	7bfb      	ldrb	r3, [r7, #15]
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	211a      	movs	r1, #26
 8004970:	fb01 f303 	mul.w	r3, r1, r3
 8004974:	4413      	add	r3, r2
 8004976:	f203 3356 	addw	r3, r3, #854	; 0x356
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	b25b      	sxtb	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	da16      	bge.n	80049b0 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8004982:	7bfb      	ldrb	r3, [r7, #15]
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	211a      	movs	r1, #26
 8004988:	fb01 f303 	mul.w	r3, r1, r3
 800498c:	4413      	add	r3, r2
 800498e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004992:	781a      	ldrb	r2, [r3, #0]
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004998:	7bfb      	ldrb	r3, [r7, #15]
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	211a      	movs	r1, #26
 800499e:	fb01 f303 	mul.w	r3, r1, r3
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80049a8:	881a      	ldrh	r2, [r3, #0]
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	815a      	strh	r2, [r3, #10]
 80049ae:	e015      	b.n	80049dc <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80049b0:	7bfb      	ldrb	r3, [r7, #15]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	211a      	movs	r1, #26
 80049b6:	fb01 f303 	mul.w	r3, r1, r3
 80049ba:	4413      	add	r3, r2
 80049bc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80049c0:	781a      	ldrb	r2, [r3, #0]
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	211a      	movs	r1, #26
 80049cc:	fb01 f303 	mul.w	r3, r1, r3
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80049d6:	881a      	ldrh	r2, [r3, #0]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	2200      	movs	r2, #0
 80049e0:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2200      	movs	r2, #0
 80049e6:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2200      	movs	r2, #0
 80049ec:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	799b      	ldrb	r3, [r3, #6]
 80049f2:	4619      	mov	r1, r3
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f002 fed6 	bl	80077a6 <USBH_AllocPipe>
 80049fa:	4603      	mov	r3, r0
 80049fc:	461a      	mov	r2, r3
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	79db      	ldrb	r3, [r3, #7]
 8004a06:	4619      	mov	r1, r3
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f002 fecc 	bl	80077a6 <USBH_AllocPipe>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	461a      	mov	r2, r3
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 fdc4 	bl	80055a4 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	799b      	ldrb	r3, [r3, #6]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d01e      	beq.n	8004a62 <USBH_MSC_InterfaceInit+0x1e2>
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	891b      	ldrh	r3, [r3, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d01a      	beq.n	8004a62 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	7959      	ldrb	r1, [r3, #5]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	7998      	ldrb	r0, [r3, #6]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	8912      	ldrh	r2, [r2, #8]
 8004a44:	9202      	str	r2, [sp, #8]
 8004a46:	2202      	movs	r2, #2
 8004a48:	9201      	str	r2, [sp, #4]
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	4623      	mov	r3, r4
 8004a4e:	4602      	mov	r2, r0
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f002 fe79 	bl	8007748 <USBH_OpenPipe>
 8004a56:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	79db      	ldrb	r3, [r3, #7]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d02c      	beq.n	8004aba <USBH_MSC_InterfaceInit+0x23a>
 8004a60:	e001      	b.n	8004a66 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e02a      	b.n	8004abc <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	895b      	ldrh	r3, [r3, #10]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d025      	beq.n	8004aba <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	7919      	ldrb	r1, [r3, #4]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	79d8      	ldrb	r0, [r3, #7]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	8952      	ldrh	r2, [r2, #10]
 8004a86:	9202      	str	r2, [sp, #8]
 8004a88:	2202      	movs	r2, #2
 8004a8a:	9201      	str	r2, [sp, #4]
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	4623      	mov	r3, r4
 8004a90:	4602      	mov	r2, r0
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f002 fe58 	bl	8007748 <USBH_OpenPipe>
 8004a98:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	791b      	ldrb	r3, [r3, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f005 fd22 	bl	800a4ec <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	795b      	ldrb	r3, [r3, #5]
 8004aac:	2200      	movs	r2, #0
 8004aae:	4619      	mov	r1, r3
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f005 fd1b 	bl	800a4ec <USBH_LL_SetToggle>

  return USBH_OK;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	e000      	b.n	8004abc <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 8004aba:	2303      	movs	r3, #3
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd90      	pop	{r4, r7, pc}

08004ac4 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004ad2:	69db      	ldr	r3, [r3, #28]
 8004ad4:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	795b      	ldrb	r3, [r3, #5]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00e      	beq.n	8004afc <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	795b      	ldrb	r3, [r3, #5]
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f002 fe4e 	bl	8007786 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	795b      	ldrb	r3, [r3, #5]
 8004aee:	4619      	mov	r1, r3
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f002 fe79 	bl	80077e8 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	791b      	ldrb	r3, [r3, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00e      	beq.n	8004b22 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	791b      	ldrb	r3, [r3, #4]
 8004b08:	4619      	mov	r1, r3
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f002 fe3b 	bl	8007786 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	791b      	ldrb	r3, [r3, #4]
 8004b14:	4619      	mov	r1, r3
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f002 fe66 	bl	80077e8 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00b      	beq.n	8004b46 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f005 fdbe 	bl	800a6b8 <free>
    phost->pActiveClass->pData = 0U;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004b42:	2200      	movs	r2, #0
 8004b44:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004b62:	2301      	movs	r3, #1
 8004b64:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	7b9b      	ldrb	r3, [r3, #14]
 8004b6a:	2b03      	cmp	r3, #3
 8004b6c:	d041      	beq.n	8004bf2 <USBH_MSC_ClassRequest+0xa2>
 8004b6e:	2b03      	cmp	r3, #3
 8004b70:	dc4b      	bgt.n	8004c0a <USBH_MSC_ClassRequest+0xba>
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <USBH_MSC_ClassRequest+0x2a>
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d147      	bne.n	8004c0a <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 fcf1 	bl	8005566 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8004b84:	4603      	mov	r3, r0
 8004b86:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8004b88:	7bfb      	ldrb	r3, [r7, #15]
 8004b8a:	2b03      	cmp	r3, #3
 8004b8c:	d104      	bne.n	8004b98 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2200      	movs	r2, #0
 8004b92:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8004b94:	2300      	movs	r3, #0
 8004b96:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8004b98:	7bfb      	ldrb	r3, [r7, #15]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d137      	bne.n	8004c0e <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d804      	bhi.n	8004bb0 <USBH_MSC_ClassRequest+0x60>
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	3301      	adds	r3, #1
 8004bac:	b2da      	uxtb	r2, r3
 8004bae:	e000      	b.n	8004bb2 <USBH_MSC_ClassRequest+0x62>
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	73bb      	strb	r3, [r7, #14]
 8004bba:	e014      	b.n	8004be6 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8004bbc:	7bbb      	ldrb	r3, [r7, #14]
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	2134      	movs	r1, #52	; 0x34
 8004bc2:	fb01 f303 	mul.w	r3, r1, r3
 8004bc6:	4413      	add	r3, r2
 8004bc8:	3392      	adds	r3, #146	; 0x92
 8004bca:	2202      	movs	r2, #2
 8004bcc:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8004bce:	7bbb      	ldrb	r3, [r7, #14]
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	2134      	movs	r1, #52	; 0x34
 8004bd4:	fb01 f303 	mul.w	r3, r1, r3
 8004bd8:	4413      	add	r3, r2
 8004bda:	33c1      	adds	r3, #193	; 0xc1
 8004bdc:	2200      	movs	r2, #0
 8004bde:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8004be0:	7bbb      	ldrb	r3, [r7, #14]
 8004be2:	3301      	adds	r3, #1
 8004be4:	73bb      	strb	r3, [r7, #14]
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	7bba      	ldrb	r2, [r7, #14]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d3e5      	bcc.n	8004bbc <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8004bf0:	e00d      	b.n	8004c0e <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f002 f888 	bl	8006d0a <USBH_ClrFeature>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d108      	bne.n	8004c12 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	7bda      	ldrb	r2, [r3, #15]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	739a      	strb	r2, [r3, #14]
      }
      break;
 8004c08:	e003      	b.n	8004c12 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8004c0a:	bf00      	nop
 8004c0c:	e002      	b.n	8004c14 <USBH_MSC_ClassRequest+0xc4>
      break;
 8004c0e:	bf00      	nop
 8004c10:	e000      	b.n	8004c14 <USBH_MSC_ClassRequest+0xc4>
      break;
 8004c12:	bf00      	nop
  }

  return status;
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
	...

08004c20 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8004c32:	2301      	movs	r3, #1
 8004c34:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8004c36:	2301      	movs	r3, #1
 8004c38:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	7b1b      	ldrb	r3, [r3, #12]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <USBH_MSC_Process+0x2e>
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	f000 8271 	beq.w	800512e <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8004c4c:	e272      	b.n	8005134 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	f080 824f 	bcs.w	80050fe <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004c66:	4619      	mov	r1, r3
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	2334      	movs	r3, #52	; 0x34
 8004c6c:	fb01 f303 	mul.w	r3, r1, r3
 8004c70:	4413      	add	r3, r2
 8004c72:	3391      	adds	r3, #145	; 0x91
 8004c74:	2201      	movs	r2, #1
 8004c76:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004c7e:	4619      	mov	r1, r3
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	2334      	movs	r3, #52	; 0x34
 8004c84:	fb01 f303 	mul.w	r3, r1, r3
 8004c88:	4413      	add	r3, r2
 8004c8a:	3390      	adds	r3, #144	; 0x90
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b08      	cmp	r3, #8
 8004c90:	f200 8243 	bhi.w	800511a <USBH_MSC_Process+0x4fa>
 8004c94:	a201      	add	r2, pc, #4	; (adr r2, 8004c9c <USBH_MSC_Process+0x7c>)
 8004c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9a:	bf00      	nop
 8004c9c:	08004cc1 	.word	0x08004cc1
 8004ca0:	0800511b 	.word	0x0800511b
 8004ca4:	08004d89 	.word	0x08004d89
 8004ca8:	08004f0d 	.word	0x08004f0d
 8004cac:	08004ce7 	.word	0x08004ce7
 8004cb0:	08004fd9 	.word	0x08004fd9
 8004cb4:	0800511b 	.word	0x0800511b
 8004cb8:	0800511b 	.word	0x0800511b
 8004cbc:	080050ed 	.word	0x080050ed
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	2334      	movs	r3, #52	; 0x34
 8004ccc:	fb01 f303 	mul.w	r3, r1, r3
 8004cd0:	4413      	add	r3, r2
 8004cd2:	3390      	adds	r3, #144	; 0x90
 8004cd4:	2204      	movs	r2, #4
 8004cd6:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8004ce4:	e222      	b.n	800512c <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004cec:	b2d9      	uxtb	r1, r3
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	2334      	movs	r3, #52	; 0x34
 8004cf8:	fb02 f303 	mul.w	r3, r2, r3
 8004cfc:	3398      	adds	r3, #152	; 0x98
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	4413      	add	r3, r2
 8004d02:	3307      	adds	r3, #7
 8004d04:	461a      	mov	r2, r3
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 ff6a 	bl	8005be0 <USBH_MSC_SCSI_Inquiry>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8004d10:	7bfb      	ldrb	r3, [r7, #15]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10b      	bne.n	8004d2e <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	2334      	movs	r3, #52	; 0x34
 8004d22:	fb01 f303 	mul.w	r3, r1, r3
 8004d26:	4413      	add	r3, r2
 8004d28:	3390      	adds	r3, #144	; 0x90
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8004d2e:	7bfb      	ldrb	r3, [r7, #15]
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d10c      	bne.n	8004d4e <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	2334      	movs	r3, #52	; 0x34
 8004d40:	fb01 f303 	mul.w	r3, r1, r3
 8004d44:	4413      	add	r3, r2
 8004d46:	3390      	adds	r3, #144	; 0x90
 8004d48:	2205      	movs	r2, #5
 8004d4a:	701a      	strb	r2, [r3, #0]
            break;
 8004d4c:	e1e7      	b.n	800511e <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8004d4e:	7bfb      	ldrb	r3, [r7, #15]
 8004d50:	2b04      	cmp	r3, #4
 8004d52:	f040 81e4 	bne.w	800511e <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	2334      	movs	r3, #52	; 0x34
 8004d62:	fb01 f303 	mul.w	r3, r1, r3
 8004d66:	4413      	add	r3, r2
 8004d68:	3390      	adds	r3, #144	; 0x90
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004d74:	4619      	mov	r1, r3
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	2334      	movs	r3, #52	; 0x34
 8004d7a:	fb01 f303 	mul.w	r3, r1, r3
 8004d7e:	4413      	add	r3, r2
 8004d80:	3391      	adds	r3, #145	; 0x91
 8004d82:	2202      	movs	r2, #2
 8004d84:	701a      	strb	r2, [r3, #0]
            break;
 8004d86:	e1ca      	b.n	800511e <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	4619      	mov	r1, r3
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 fe66 	bl	8005a64 <USBH_MSC_SCSI_TestUnitReady>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8004d9c:	7bbb      	ldrb	r3, [r7, #14]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d149      	bne.n	8004e36 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004da8:	4619      	mov	r1, r3
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	2334      	movs	r3, #52	; 0x34
 8004dae:	fb01 f303 	mul.w	r3, r1, r3
 8004db2:	4413      	add	r3, r2
 8004db4:	3392      	adds	r3, #146	; 0x92
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00c      	beq.n	8004dd6 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	2334      	movs	r3, #52	; 0x34
 8004dc8:	fb01 f303 	mul.w	r3, r1, r3
 8004dcc:	4413      	add	r3, r2
 8004dce:	33c1      	adds	r3, #193	; 0xc1
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	701a      	strb	r2, [r3, #0]
 8004dd4:	e00b      	b.n	8004dee <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004ddc:	4619      	mov	r1, r3
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	2334      	movs	r3, #52	; 0x34
 8004de2:	fb01 f303 	mul.w	r3, r1, r3
 8004de6:	4413      	add	r3, r2
 8004de8:	33c1      	adds	r3, #193	; 0xc1
 8004dea:	2200      	movs	r2, #0
 8004dec:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004df4:	4619      	mov	r1, r3
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	2334      	movs	r3, #52	; 0x34
 8004dfa:	fb01 f303 	mul.w	r3, r1, r3
 8004dfe:	4413      	add	r3, r2
 8004e00:	3390      	adds	r3, #144	; 0x90
 8004e02:	2203      	movs	r2, #3
 8004e04:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	2334      	movs	r3, #52	; 0x34
 8004e12:	fb01 f303 	mul.w	r3, r1, r3
 8004e16:	4413      	add	r3, r2
 8004e18:	3391      	adds	r3, #145	; 0x91
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004e24:	4619      	mov	r1, r3
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	2334      	movs	r3, #52	; 0x34
 8004e2a:	fb01 f303 	mul.w	r3, r1, r3
 8004e2e:	4413      	add	r3, r2
 8004e30:	3392      	adds	r3, #146	; 0x92
 8004e32:	2200      	movs	r2, #0
 8004e34:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8004e36:	7bbb      	ldrb	r3, [r7, #14]
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d14a      	bne.n	8004ed2 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004e42:	4619      	mov	r1, r3
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	2334      	movs	r3, #52	; 0x34
 8004e48:	fb01 f303 	mul.w	r3, r1, r3
 8004e4c:	4413      	add	r3, r2
 8004e4e:	3392      	adds	r3, #146	; 0x92
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d00c      	beq.n	8004e70 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	2334      	movs	r3, #52	; 0x34
 8004e62:	fb01 f303 	mul.w	r3, r1, r3
 8004e66:	4413      	add	r3, r2
 8004e68:	33c1      	adds	r3, #193	; 0xc1
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	701a      	strb	r2, [r3, #0]
 8004e6e:	e00b      	b.n	8004e88 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004e76:	4619      	mov	r1, r3
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	2334      	movs	r3, #52	; 0x34
 8004e7c:	fb01 f303 	mul.w	r3, r1, r3
 8004e80:	4413      	add	r3, r2
 8004e82:	33c1      	adds	r3, #193	; 0xc1
 8004e84:	2200      	movs	r2, #0
 8004e86:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004e8e:	4619      	mov	r1, r3
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	2334      	movs	r3, #52	; 0x34
 8004e94:	fb01 f303 	mul.w	r3, r1, r3
 8004e98:	4413      	add	r3, r2
 8004e9a:	3390      	adds	r3, #144	; 0x90
 8004e9c:	2205      	movs	r2, #5
 8004e9e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	2334      	movs	r3, #52	; 0x34
 8004eac:	fb01 f303 	mul.w	r3, r1, r3
 8004eb0:	4413      	add	r3, r2
 8004eb2:	3391      	adds	r3, #145	; 0x91
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	2334      	movs	r3, #52	; 0x34
 8004ec4:	fb01 f303 	mul.w	r3, r1, r3
 8004ec8:	4413      	add	r3, r2
 8004eca:	3392      	adds	r3, #146	; 0x92
 8004ecc:	2202      	movs	r2, #2
 8004ece:	701a      	strb	r2, [r3, #0]
            break;
 8004ed0:	e127      	b.n	8005122 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8004ed2:	7bbb      	ldrb	r3, [r7, #14]
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	f040 8124 	bne.w	8005122 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	2334      	movs	r3, #52	; 0x34
 8004ee6:	fb01 f303 	mul.w	r3, r1, r3
 8004eea:	4413      	add	r3, r2
 8004eec:	3390      	adds	r3, #144	; 0x90
 8004eee:	2201      	movs	r2, #1
 8004ef0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004ef8:	4619      	mov	r1, r3
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	2334      	movs	r3, #52	; 0x34
 8004efe:	fb01 f303 	mul.w	r3, r1, r3
 8004f02:	4413      	add	r3, r2
 8004f04:	3391      	adds	r3, #145	; 0x91
 8004f06:	2202      	movs	r2, #2
 8004f08:	701a      	strb	r2, [r3, #0]
            break;
 8004f0a:	e10a      	b.n	8005122 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004f12:	b2d9      	uxtb	r1, r3
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	2334      	movs	r3, #52	; 0x34
 8004f1e:	fb02 f303 	mul.w	r3, r2, r3
 8004f22:	3390      	adds	r3, #144	; 0x90
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	4413      	add	r3, r2
 8004f28:	3304      	adds	r3, #4
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 fddc 	bl	8005aea <USBH_MSC_SCSI_ReadCapacity>
 8004f32:	4603      	mov	r3, r0
 8004f34:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8004f36:	7bfb      	ldrb	r3, [r7, #15]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d120      	bne.n	8004f7e <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004f42:	4619      	mov	r1, r3
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	2334      	movs	r3, #52	; 0x34
 8004f48:	fb01 f303 	mul.w	r3, r1, r3
 8004f4c:	4413      	add	r3, r2
 8004f4e:	3390      	adds	r3, #144	; 0x90
 8004f50:	2201      	movs	r2, #1
 8004f52:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	2334      	movs	r3, #52	; 0x34
 8004f60:	fb01 f303 	mul.w	r3, r1, r3
 8004f64:	4413      	add	r3, r2
 8004f66:	3391      	adds	r3, #145	; 0x91
 8004f68:	2200      	movs	r2, #0
 8004f6a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004f72:	3301      	adds	r3, #1
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8004f7c:	e0d3      	b.n	8005126 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8004f7e:	7bfb      	ldrb	r3, [r7, #15]
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d10c      	bne.n	8004f9e <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	2334      	movs	r3, #52	; 0x34
 8004f90:	fb01 f303 	mul.w	r3, r1, r3
 8004f94:	4413      	add	r3, r2
 8004f96:	3390      	adds	r3, #144	; 0x90
 8004f98:	2205      	movs	r2, #5
 8004f9a:	701a      	strb	r2, [r3, #0]
            break;
 8004f9c:	e0c3      	b.n	8005126 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8004f9e:	7bfb      	ldrb	r3, [r7, #15]
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	f040 80c0 	bne.w	8005126 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004fac:	4619      	mov	r1, r3
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	2334      	movs	r3, #52	; 0x34
 8004fb2:	fb01 f303 	mul.w	r3, r1, r3
 8004fb6:	4413      	add	r3, r2
 8004fb8:	3390      	adds	r3, #144	; 0x90
 8004fba:	2201      	movs	r2, #1
 8004fbc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	2334      	movs	r3, #52	; 0x34
 8004fca:	fb01 f303 	mul.w	r3, r1, r3
 8004fce:	4413      	add	r3, r2
 8004fd0:	3391      	adds	r3, #145	; 0x91
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	701a      	strb	r2, [r3, #0]
            break;
 8004fd6:	e0a6      	b.n	8005126 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004fde:	b2d9      	uxtb	r1, r3
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	2334      	movs	r3, #52	; 0x34
 8004fea:	fb02 f303 	mul.w	r3, r2, r3
 8004fee:	3398      	adds	r3, #152	; 0x98
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 fe96 	bl	8005d2a <USBH_MSC_SCSI_RequestSense>
 8004ffe:	4603      	mov	r3, r0
 8005000:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8005002:	7bfb      	ldrb	r3, [r7, #15]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d145      	bne.n	8005094 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800500e:	4619      	mov	r1, r3
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	2334      	movs	r3, #52	; 0x34
 8005014:	fb01 f303 	mul.w	r3, r1, r3
 8005018:	4413      	add	r3, r2
 800501a:	339c      	adds	r3, #156	; 0x9c
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	2b06      	cmp	r3, #6
 8005020:	d00c      	beq.n	800503c <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005028:	4619      	mov	r1, r3
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	2334      	movs	r3, #52	; 0x34
 800502e:	fb01 f303 	mul.w	r3, r1, r3
 8005032:	4413      	add	r3, r2
 8005034:	339c      	adds	r3, #156	; 0x9c
 8005036:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8005038:	2b02      	cmp	r3, #2
 800503a:	d117      	bne.n	800506c <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	f242 720f 	movw	r2, #9999	; 0x270f
 800504e:	4293      	cmp	r3, r2
 8005050:	d80c      	bhi.n	800506c <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005058:	4619      	mov	r1, r3
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	2334      	movs	r3, #52	; 0x34
 800505e:	fb01 f303 	mul.w	r3, r1, r3
 8005062:	4413      	add	r3, r2
 8005064:	3390      	adds	r3, #144	; 0x90
 8005066:	2202      	movs	r2, #2
 8005068:	701a      	strb	r2, [r3, #0]
                  break;
 800506a:	e05f      	b.n	800512c <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005072:	4619      	mov	r1, r3
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	2334      	movs	r3, #52	; 0x34
 8005078:	fb01 f303 	mul.w	r3, r1, r3
 800507c:	4413      	add	r3, r2
 800507e:	3390      	adds	r3, #144	; 0x90
 8005080:	2201      	movs	r2, #1
 8005082:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800508a:	3301      	adds	r3, #1
 800508c:	b29a      	uxth	r2, r3
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8005094:	7bfb      	ldrb	r3, [r7, #15]
 8005096:	2b02      	cmp	r3, #2
 8005098:	d10c      	bne.n	80050b4 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80050a0:	4619      	mov	r1, r3
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	2334      	movs	r3, #52	; 0x34
 80050a6:	fb01 f303 	mul.w	r3, r1, r3
 80050aa:	4413      	add	r3, r2
 80050ac:	3390      	adds	r3, #144	; 0x90
 80050ae:	2208      	movs	r2, #8
 80050b0:	701a      	strb	r2, [r3, #0]
            break;
 80050b2:	e03a      	b.n	800512a <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80050b4:	7bfb      	ldrb	r3, [r7, #15]
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	d137      	bne.n	800512a <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80050c0:	4619      	mov	r1, r3
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	2334      	movs	r3, #52	; 0x34
 80050c6:	fb01 f303 	mul.w	r3, r1, r3
 80050ca:	4413      	add	r3, r2
 80050cc:	3390      	adds	r3, #144	; 0x90
 80050ce:	2201      	movs	r2, #1
 80050d0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80050d8:	4619      	mov	r1, r3
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	2334      	movs	r3, #52	; 0x34
 80050de:	fb01 f303 	mul.w	r3, r1, r3
 80050e2:	4413      	add	r3, r2
 80050e4:	3391      	adds	r3, #145	; 0x91
 80050e6:	2202      	movs	r2, #2
 80050e8:	701a      	strb	r2, [r3, #0]
            break;
 80050ea:	e01e      	b.n	800512a <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80050f2:	3301      	adds	r3, #1
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80050fc:	e016      	b.n	800512c <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	2200      	movs	r2, #0
 8005102:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	2201      	movs	r2, #1
 800510a:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005112:	2102      	movs	r1, #2
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	4798      	blx	r3
      break;
 8005118:	e00c      	b.n	8005134 <USBH_MSC_Process+0x514>
            break;
 800511a:	bf00      	nop
 800511c:	e00a      	b.n	8005134 <USBH_MSC_Process+0x514>
            break;
 800511e:	bf00      	nop
 8005120:	e008      	b.n	8005134 <USBH_MSC_Process+0x514>
            break;
 8005122:	bf00      	nop
 8005124:	e006      	b.n	8005134 <USBH_MSC_Process+0x514>
            break;
 8005126:	bf00      	nop
 8005128:	e004      	b.n	8005134 <USBH_MSC_Process+0x514>
            break;
 800512a:	bf00      	nop
      break;
 800512c:	e002      	b.n	8005134 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800512e:	2300      	movs	r3, #0
 8005130:	75fb      	strb	r3, [r7, #23]
      break;
 8005132:	bf00      	nop
  }
  return error;
 8005134:	7dfb      	ldrb	r3, [r7, #23]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3718      	adds	r7, #24
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop

08005140 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b088      	sub	sp, #32
 800515a:	af02      	add	r7, sp, #8
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	460b      	mov	r3, r1
 8005160:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800516c:	2301      	movs	r3, #1
 800516e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8005170:	2301      	movs	r3, #1
 8005172:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8005174:	78fb      	ldrb	r3, [r7, #3]
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	2134      	movs	r1, #52	; 0x34
 800517a:	fb01 f303 	mul.w	r3, r1, r3
 800517e:	4413      	add	r3, r2
 8005180:	3390      	adds	r3, #144	; 0x90
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2b07      	cmp	r3, #7
 8005186:	d03c      	beq.n	8005202 <USBH_MSC_RdWrProcess+0xac>
 8005188:	2b07      	cmp	r3, #7
 800518a:	f300 80a7 	bgt.w	80052dc <USBH_MSC_RdWrProcess+0x186>
 800518e:	2b05      	cmp	r3, #5
 8005190:	d06c      	beq.n	800526c <USBH_MSC_RdWrProcess+0x116>
 8005192:	2b06      	cmp	r3, #6
 8005194:	f040 80a2 	bne.w	80052dc <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8005198:	78f9      	ldrb	r1, [r7, #3]
 800519a:	2300      	movs	r3, #0
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	2300      	movs	r3, #0
 80051a0:	2200      	movs	r2, #0
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fea5 	bl	8005ef2 <USBH_MSC_SCSI_Read>
 80051a8:	4603      	mov	r3, r0
 80051aa:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10b      	bne.n	80051ca <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80051b2:	78fb      	ldrb	r3, [r7, #3]
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	2134      	movs	r1, #52	; 0x34
 80051b8:	fb01 f303 	mul.w	r3, r1, r3
 80051bc:	4413      	add	r3, r2
 80051be:	3390      	adds	r3, #144	; 0x90
 80051c0:	2201      	movs	r2, #1
 80051c2:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80051c4:	2300      	movs	r3, #0
 80051c6:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80051c8:	e08a      	b.n	80052e0 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 80051ca:	7bfb      	ldrb	r3, [r7, #15]
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d109      	bne.n	80051e4 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80051d0:	78fb      	ldrb	r3, [r7, #3]
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	2134      	movs	r1, #52	; 0x34
 80051d6:	fb01 f303 	mul.w	r3, r1, r3
 80051da:	4413      	add	r3, r2
 80051dc:	3390      	adds	r3, #144	; 0x90
 80051de:	2205      	movs	r2, #5
 80051e0:	701a      	strb	r2, [r3, #0]
      break;
 80051e2:	e07d      	b.n	80052e0 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80051e4:	7bfb      	ldrb	r3, [r7, #15]
 80051e6:	2b04      	cmp	r3, #4
 80051e8:	d17a      	bne.n	80052e0 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80051ea:	78fb      	ldrb	r3, [r7, #3]
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	2134      	movs	r1, #52	; 0x34
 80051f0:	fb01 f303 	mul.w	r3, r1, r3
 80051f4:	4413      	add	r3, r2
 80051f6:	3390      	adds	r3, #144	; 0x90
 80051f8:	2208      	movs	r2, #8
 80051fa:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80051fc:	2302      	movs	r3, #2
 80051fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005200:	e06e      	b.n	80052e0 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8005202:	78f9      	ldrb	r1, [r7, #3]
 8005204:	2300      	movs	r3, #0
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	2300      	movs	r3, #0
 800520a:	2200      	movs	r2, #0
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 fe05 	bl	8005e1c <USBH_MSC_SCSI_Write>
 8005212:	4603      	mov	r3, r0
 8005214:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8005216:	7bfb      	ldrb	r3, [r7, #15]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10b      	bne.n	8005234 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800521c:	78fb      	ldrb	r3, [r7, #3]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	2134      	movs	r1, #52	; 0x34
 8005222:	fb01 f303 	mul.w	r3, r1, r3
 8005226:	4413      	add	r3, r2
 8005228:	3390      	adds	r3, #144	; 0x90
 800522a:	2201      	movs	r2, #1
 800522c:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800522e:	2300      	movs	r3, #0
 8005230:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005232:	e057      	b.n	80052e4 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8005234:	7bfb      	ldrb	r3, [r7, #15]
 8005236:	2b02      	cmp	r3, #2
 8005238:	d109      	bne.n	800524e <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800523a:	78fb      	ldrb	r3, [r7, #3]
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	2134      	movs	r1, #52	; 0x34
 8005240:	fb01 f303 	mul.w	r3, r1, r3
 8005244:	4413      	add	r3, r2
 8005246:	3390      	adds	r3, #144	; 0x90
 8005248:	2205      	movs	r2, #5
 800524a:	701a      	strb	r2, [r3, #0]
      break;
 800524c:	e04a      	b.n	80052e4 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800524e:	7bfb      	ldrb	r3, [r7, #15]
 8005250:	2b04      	cmp	r3, #4
 8005252:	d147      	bne.n	80052e4 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8005254:	78fb      	ldrb	r3, [r7, #3]
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	2134      	movs	r1, #52	; 0x34
 800525a:	fb01 f303 	mul.w	r3, r1, r3
 800525e:	4413      	add	r3, r2
 8005260:	3390      	adds	r3, #144	; 0x90
 8005262:	2208      	movs	r2, #8
 8005264:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8005266:	2302      	movs	r3, #2
 8005268:	75fb      	strb	r3, [r7, #23]
      break;
 800526a:	e03b      	b.n	80052e4 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800526c:	78fb      	ldrb	r3, [r7, #3]
 800526e:	2234      	movs	r2, #52	; 0x34
 8005270:	fb02 f303 	mul.w	r3, r2, r3
 8005274:	3398      	adds	r3, #152	; 0x98
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	4413      	add	r3, r2
 800527a:	1d1a      	adds	r2, r3, #4
 800527c:	78fb      	ldrb	r3, [r7, #3]
 800527e:	4619      	mov	r1, r3
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 fd52 	bl	8005d2a <USBH_MSC_SCSI_RequestSense>
 8005286:	4603      	mov	r3, r0
 8005288:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800528a:	7bfb      	ldrb	r3, [r7, #15]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d113      	bne.n	80052b8 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8005290:	78fb      	ldrb	r3, [r7, #3]
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	2134      	movs	r1, #52	; 0x34
 8005296:	fb01 f303 	mul.w	r3, r1, r3
 800529a:	4413      	add	r3, r2
 800529c:	3390      	adds	r3, #144	; 0x90
 800529e:	2201      	movs	r2, #1
 80052a0:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80052a2:	78fb      	ldrb	r3, [r7, #3]
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	2134      	movs	r1, #52	; 0x34
 80052a8:	fb01 f303 	mul.w	r3, r1, r3
 80052ac:	4413      	add	r3, r2
 80052ae:	3391      	adds	r3, #145	; 0x91
 80052b0:	2202      	movs	r2, #2
 80052b2:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 80052b4:	2302      	movs	r3, #2
 80052b6:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d014      	beq.n	80052e8 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80052be:	7bfb      	ldrb	r3, [r7, #15]
 80052c0:	2b04      	cmp	r3, #4
 80052c2:	d111      	bne.n	80052e8 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80052c4:	78fb      	ldrb	r3, [r7, #3]
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	2134      	movs	r1, #52	; 0x34
 80052ca:	fb01 f303 	mul.w	r3, r1, r3
 80052ce:	4413      	add	r3, r2
 80052d0:	3390      	adds	r3, #144	; 0x90
 80052d2:	2208      	movs	r2, #8
 80052d4:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80052d6:	2302      	movs	r3, #2
 80052d8:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80052da:	e005      	b.n	80052e8 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 80052dc:	bf00      	nop
 80052de:	e004      	b.n	80052ea <USBH_MSC_RdWrProcess+0x194>
      break;
 80052e0:	bf00      	nop
 80052e2:	e002      	b.n	80052ea <USBH_MSC_RdWrProcess+0x194>
      break;
 80052e4:	bf00      	nop
 80052e6:	e000      	b.n	80052ea <USBH_MSC_RdWrProcess+0x194>
      break;
 80052e8:	bf00      	nop

  }
  return error;
 80052ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3718      	adds	r7, #24
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	460b      	mov	r3, r1
 80052fe:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005306:	69db      	ldr	r3, [r3, #28]
 8005308:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b0b      	cmp	r3, #11
 8005312:	d10c      	bne.n	800532e <USBH_MSC_UnitIsReady+0x3a>
 8005314:	78fb      	ldrb	r3, [r7, #3]
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	2134      	movs	r1, #52	; 0x34
 800531a:	fb01 f303 	mul.w	r3, r1, r3
 800531e:	4413      	add	r3, r2
 8005320:	3391      	adds	r3, #145	; 0x91
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d102      	bne.n	800532e <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8005328:	2301      	movs	r3, #1
 800532a:	73fb      	strb	r3, [r7, #15]
 800532c:	e001      	b.n	8005332 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800532e:	2300      	movs	r3, #0
 8005330:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8005332:	7bfb      	ldrb	r3, [r7, #15]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	460b      	mov	r3, r1
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005354:	69db      	ldr	r3, [r3, #28]
 8005356:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b0b      	cmp	r3, #11
 8005360:	d10d      	bne.n	800537e <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8005362:	7afb      	ldrb	r3, [r7, #11]
 8005364:	2234      	movs	r2, #52	; 0x34
 8005366:	fb02 f303 	mul.w	r3, r2, r3
 800536a:	3390      	adds	r3, #144	; 0x90
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	4413      	add	r3, r2
 8005370:	2234      	movs	r2, #52	; 0x34
 8005372:	4619      	mov	r1, r3
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f005 f9a7 	bl	800a6c8 <memcpy>
    return USBH_OK;
 800537a:	2300      	movs	r3, #0
 800537c:	e000      	b.n	8005380 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800537e:	2302      	movs	r3, #2
  }
}
 8005380:	4618      	mov	r0, r3
 8005382:	3718      	adds	r7, #24
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b088      	sub	sp, #32
 800538c:	af02      	add	r7, sp, #8
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	607a      	str	r2, [r7, #4]
 8005392:	603b      	str	r3, [r7, #0]
 8005394:	460b      	mov	r3, r1
 8005396:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800539e:	69db      	ldr	r3, [r3, #28]
 80053a0:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00e      	beq.n	80053cc <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80053b4:	2b0b      	cmp	r3, #11
 80053b6:	d109      	bne.n	80053cc <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80053b8:	7afb      	ldrb	r3, [r7, #11]
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	2134      	movs	r1, #52	; 0x34
 80053be:	fb01 f303 	mul.w	r3, r1, r3
 80053c2:	4413      	add	r3, r2
 80053c4:	3390      	adds	r3, #144	; 0x90
 80053c6:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d001      	beq.n	80053d0 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 80053cc:	2302      	movs	r3, #2
 80053ce:	e040      	b.n	8005452 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	2206      	movs	r2, #6
 80053d4:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 80053d6:	7afb      	ldrb	r3, [r7, #11]
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	2134      	movs	r1, #52	; 0x34
 80053dc:	fb01 f303 	mul.w	r3, r1, r3
 80053e0:	4413      	add	r3, r2
 80053e2:	3390      	adds	r3, #144	; 0x90
 80053e4:	2206      	movs	r2, #6
 80053e6:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80053e8:	7afb      	ldrb	r3, [r7, #11]
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 80053f2:	7af9      	ldrb	r1, [r7, #11]
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f000 fd78 	bl	8005ef2 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005408:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800540a:	e016      	b.n	800543a <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	1ad2      	subs	r2, r2, r3
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	f242 7110 	movw	r1, #10000	; 0x2710
 800541c:	fb01 f303 	mul.w	r3, r1, r3
 8005420:	429a      	cmp	r2, r3
 8005422:	d805      	bhi.n	8005430 <USBH_MSC_Read+0xa8>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d104      	bne.n	800543a <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	2201      	movs	r2, #1
 8005434:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8005436:	2302      	movs	r3, #2
 8005438:	e00b      	b.n	8005452 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800543a:	7afb      	ldrb	r3, [r7, #11]
 800543c:	4619      	mov	r1, r3
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f7ff fe89 	bl	8005156 <USBH_MSC_RdWrProcess>
 8005444:	4603      	mov	r3, r0
 8005446:	2b01      	cmp	r3, #1
 8005448:	d0e0      	beq.n	800540c <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	2201      	movs	r2, #1
 800544e:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3718      	adds	r7, #24
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b088      	sub	sp, #32
 800545e:	af02      	add	r7, sp, #8
 8005460:	60f8      	str	r0, [r7, #12]
 8005462:	607a      	str	r2, [r7, #4]
 8005464:	603b      	str	r3, [r7, #0]
 8005466:	460b      	mov	r3, r1
 8005468:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00e      	beq.n	800549e <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8005486:	2b0b      	cmp	r3, #11
 8005488:	d109      	bne.n	800549e <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800548a:	7afb      	ldrb	r3, [r7, #11]
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	2134      	movs	r1, #52	; 0x34
 8005490:	fb01 f303 	mul.w	r3, r1, r3
 8005494:	4413      	add	r3, r2
 8005496:	3390      	adds	r3, #144	; 0x90
 8005498:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800549a:	2b01      	cmp	r3, #1
 800549c:	d001      	beq.n	80054a2 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800549e:	2302      	movs	r3, #2
 80054a0:	e040      	b.n	8005524 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	2207      	movs	r2, #7
 80054a6:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80054a8:	7afb      	ldrb	r3, [r7, #11]
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	2134      	movs	r1, #52	; 0x34
 80054ae:	fb01 f303 	mul.w	r3, r1, r3
 80054b2:	4413      	add	r3, r2
 80054b4:	3390      	adds	r3, #144	; 0x90
 80054b6:	2207      	movs	r2, #7
 80054b8:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80054ba:	7afb      	ldrb	r3, [r7, #11]
 80054bc:	b29a      	uxth	r2, r3
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80054c4:	7af9      	ldrb	r1, [r7, #11]
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 fca4 	bl	8005e1c <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80054da:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80054dc:	e016      	b.n	800550c <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	1ad2      	subs	r2, r2, r3
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	f242 7110 	movw	r1, #10000	; 0x2710
 80054ee:	fb01 f303 	mul.w	r3, r1, r3
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d805      	bhi.n	8005502 <USBH_MSC_Write+0xa8>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d104      	bne.n	800550c <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	2201      	movs	r2, #1
 8005506:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8005508:	2302      	movs	r3, #2
 800550a:	e00b      	b.n	8005524 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800550c:	7afb      	ldrb	r3, [r7, #11]
 800550e:	4619      	mov	r1, r3
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f7ff fe20 	bl	8005156 <USBH_MSC_RdWrProcess>
 8005516:	4603      	mov	r3, r0
 8005518:	2b01      	cmp	r3, #1
 800551a:	d0e0      	beq.n	80054de <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	2201      	movs	r2, #1
 8005520:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3718      	adds	r7, #24
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2221      	movs	r2, #33	; 0x21
 8005538:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	22ff      	movs	r2, #255	; 0xff
 800553e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8005552:	2200      	movs	r2, #0
 8005554:	2100      	movs	r1, #0
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f001 fea4 	bl	80072a4 <USBH_CtlReq>
 800555c:	4603      	mov	r3, r0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b082      	sub	sp, #8
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	22a1      	movs	r2, #161	; 0xa1
 8005574:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	22fe      	movs	r2, #254	; 0xfe
 800557a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800558e:	2201      	movs	r2, #1
 8005590:	6839      	ldr	r1, [r7, #0]
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f001 fe86 	bl	80072a4 <USBH_CtlReq>
 8005598:	4603      	mov	r3, r0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
	...

080055a4 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	4a09      	ldr	r2, [pc, #36]	; (80055e0 <USBH_MSC_BOT_Init+0x3c>)
 80055ba:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4a09      	ldr	r2, [pc, #36]	; (80055e4 <USBH_MSC_BOT_Init+0x40>)
 80055c0:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	43425355 	.word	0x43425355
 80055e4:	20304050 	.word	0x20304050

080055e8 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b088      	sub	sp, #32
 80055ec:	af02      	add	r7, sp, #8
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	460b      	mov	r3, r1
 80055f2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80055f4:	2301      	movs	r3, #1
 80055f6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 80055f8:	2301      	movs	r3, #1
 80055fa:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 80055fc:	2301      	movs	r3, #1
 80055fe:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005600:	2300      	movs	r3, #0
 8005602:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800560a:	69db      	ldr	r3, [r3, #28]
 800560c:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005618:	3b01      	subs	r3, #1
 800561a:	2b0a      	cmp	r3, #10
 800561c:	f200 819e 	bhi.w	800595c <USBH_MSC_BOT_Process+0x374>
 8005620:	a201      	add	r2, pc, #4	; (adr r2, 8005628 <USBH_MSC_BOT_Process+0x40>)
 8005622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005626:	bf00      	nop
 8005628:	08005655 	.word	0x08005655
 800562c:	0800567d 	.word	0x0800567d
 8005630:	080056e7 	.word	0x080056e7
 8005634:	08005705 	.word	0x08005705
 8005638:	08005789 	.word	0x08005789
 800563c:	080057ab 	.word	0x080057ab
 8005640:	08005843 	.word	0x08005843
 8005644:	0800585f 	.word	0x0800585f
 8005648:	080058b1 	.word	0x080058b1
 800564c:	080058e1 	.word	0x080058e1
 8005650:	08005943 	.word	0x08005943
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	78fa      	ldrb	r2, [r7, #3]
 8005658:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	2202      	movs	r2, #2
 8005660:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	795b      	ldrb	r3, [r3, #5]
 800566e:	2201      	movs	r2, #1
 8005670:	9200      	str	r2, [sp, #0]
 8005672:	221f      	movs	r2, #31
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f002 f824 	bl	80076c2 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800567a:	e17e      	b.n	800597a <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	795b      	ldrb	r3, [r3, #5]
 8005680:	4619      	mov	r1, r3
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f004 ff08 	bl	800a498 <USBH_LL_GetURBState>
 8005688:	4603      	mov	r3, r0
 800568a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800568c:	7d3b      	ldrb	r3, [r7, #20]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d118      	bne.n	80056c4 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00f      	beq.n	80056ba <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80056a0:	b25b      	sxtb	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	da04      	bge.n	80056b0 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	2203      	movs	r2, #3
 80056aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80056ae:	e157      	b.n	8005960 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	2205      	movs	r2, #5
 80056b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80056b8:	e152      	b.n	8005960 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	2207      	movs	r2, #7
 80056be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80056c2:	e14d      	b.n	8005960 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 80056c4:	7d3b      	ldrb	r3, [r7, #20]
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d104      	bne.n	80056d4 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80056d2:	e145      	b.n	8005960 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 80056d4:	7d3b      	ldrb	r3, [r7, #20]
 80056d6:	2b05      	cmp	r3, #5
 80056d8:	f040 8142 	bne.w	8005960 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	220a      	movs	r2, #10
 80056e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80056e4:	e13c      	b.n	8005960 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	895a      	ldrh	r2, [r3, #10]
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	791b      	ldrb	r3, [r3, #4]
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f002 f809 	bl	800770c <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	2204      	movs	r2, #4
 80056fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8005702:	e13a      	b.n	800597a <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	791b      	ldrb	r3, [r3, #4]
 8005708:	4619      	mov	r1, r3
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f004 fec4 	bl	800a498 <USBH_LL_GetURBState>
 8005710:	4603      	mov	r3, r0
 8005712:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8005714:	7d3b      	ldrb	r3, [r7, #20]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d12d      	bne.n	8005776 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	8952      	ldrh	r2, [r2, #10]
 8005722:	4293      	cmp	r3, r2
 8005724:	d910      	bls.n	8005748 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	8952      	ldrh	r2, [r2, #10]
 8005730:	441a      	add	r2, r3
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	8952      	ldrh	r2, [r2, #10]
 8005740:	1a9a      	subs	r2, r3, r2
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	65da      	str	r2, [r3, #92]	; 0x5c
 8005746:	e002      	b.n	800574e <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	2200      	movs	r2, #0
 800574c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00a      	beq.n	800576c <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	895a      	ldrh	r2, [r3, #10]
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	791b      	ldrb	r3, [r3, #4]
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f001 ffd1 	bl	800770c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800576a:	e0fb      	b.n	8005964 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	2207      	movs	r2, #7
 8005770:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005774:	e0f6      	b.n	8005964 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8005776:	7d3b      	ldrb	r3, [r7, #20]
 8005778:	2b05      	cmp	r3, #5
 800577a:	f040 80f3 	bne.w	8005964 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	2209      	movs	r2, #9
 8005782:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005786:	e0ed      	b.n	8005964 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	891a      	ldrh	r2, [r3, #8]
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	795b      	ldrb	r3, [r3, #5]
 8005796:	2001      	movs	r0, #1
 8005798:	9000      	str	r0, [sp, #0]
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f001 ff91 	bl	80076c2 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	2206      	movs	r2, #6
 80057a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80057a8:	e0e7      	b.n	800597a <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	795b      	ldrb	r3, [r3, #5]
 80057ae:	4619      	mov	r1, r3
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f004 fe71 	bl	800a498 <USBH_LL_GetURBState>
 80057b6:	4603      	mov	r3, r0
 80057b8:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80057ba:	7d3b      	ldrb	r3, [r7, #20]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d12f      	bne.n	8005820 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	8912      	ldrh	r2, [r2, #8]
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d910      	bls.n	80057ee <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	8912      	ldrh	r2, [r2, #8]
 80057d6:	441a      	add	r2, r3
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	8912      	ldrh	r2, [r2, #8]
 80057e6:	1a9a      	subs	r2, r3, r2
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80057ec:	e002      	b.n	80057f4 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	2200      	movs	r2, #0
 80057f2:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00c      	beq.n	8005816 <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	891a      	ldrh	r2, [r3, #8]
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	795b      	ldrb	r3, [r3, #5]
 800580a:	2001      	movs	r0, #1
 800580c:	9000      	str	r0, [sp, #0]
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f001 ff57 	bl	80076c2 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8005814:	e0a8      	b.n	8005968 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	2207      	movs	r2, #7
 800581a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800581e:	e0a3      	b.n	8005968 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8005820:	7d3b      	ldrb	r3, [r7, #20]
 8005822:	2b02      	cmp	r3, #2
 8005824:	d104      	bne.n	8005830 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	2205      	movs	r2, #5
 800582a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800582e:	e09b      	b.n	8005968 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8005830:	7d3b      	ldrb	r3, [r7, #20]
 8005832:	2b05      	cmp	r3, #5
 8005834:	f040 8098 	bne.w	8005968 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	220a      	movs	r2, #10
 800583c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005840:	e092      	b.n	8005968 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	791b      	ldrb	r3, [r3, #4]
 800584c:	220d      	movs	r2, #13
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f001 ff5c 	bl	800770c <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	2208      	movs	r2, #8
 8005858:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800585c:	e08d      	b.n	800597a <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	791b      	ldrb	r3, [r3, #4]
 8005862:	4619      	mov	r1, r3
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f004 fe17 	bl	800a498 <USBH_LL_GetURBState>
 800586a:	4603      	mov	r3, r0
 800586c:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800586e:	7d3b      	ldrb	r3, [r7, #20]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d115      	bne.n	80058a0 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f8a9 	bl	80059dc <USBH_MSC_DecodeCSW>
 800588a:	4603      	mov	r3, r0
 800588c:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800588e:	7d7b      	ldrb	r3, [r7, #21]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d102      	bne.n	800589a <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8005894:	2300      	movs	r3, #0
 8005896:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8005898:	e068      	b.n	800596c <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800589a:	2302      	movs	r3, #2
 800589c:	75fb      	strb	r3, [r7, #23]
      break;
 800589e:	e065      	b.n	800596c <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 80058a0:	7d3b      	ldrb	r3, [r7, #20]
 80058a2:	2b05      	cmp	r3, #5
 80058a4:	d162      	bne.n	800596c <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	2209      	movs	r2, #9
 80058aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80058ae:	e05d      	b.n	800596c <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 80058b0:	78fb      	ldrb	r3, [r7, #3]
 80058b2:	2200      	movs	r2, #0
 80058b4:	4619      	mov	r1, r3
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f864 	bl	8005984 <USBH_MSC_BOT_Abort>
 80058bc:	4603      	mov	r3, r0
 80058be:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80058c0:	7dbb      	ldrb	r3, [r7, #22]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d104      	bne.n	80058d0 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	2207      	movs	r2, #7
 80058ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 80058ce:	e04f      	b.n	8005970 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 80058d0:	7dbb      	ldrb	r3, [r7, #22]
 80058d2:	2b04      	cmp	r3, #4
 80058d4:	d14c      	bne.n	8005970 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	220b      	movs	r2, #11
 80058da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80058de:	e047      	b.n	8005970 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 80058e0:	78fb      	ldrb	r3, [r7, #3]
 80058e2:	2201      	movs	r2, #1
 80058e4:	4619      	mov	r1, r3
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f84c 	bl	8005984 <USBH_MSC_BOT_Abort>
 80058ec:	4603      	mov	r3, r0
 80058ee:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80058f0:	7dbb      	ldrb	r3, [r7, #22]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d11d      	bne.n	8005932 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	795b      	ldrb	r3, [r3, #5]
 80058fa:	4619      	mov	r1, r3
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f004 fe25 	bl	800a54c <USBH_LL_GetToggle>
 8005902:	4603      	mov	r3, r0
 8005904:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	7959      	ldrb	r1, [r3, #5]
 800590a:	7bfb      	ldrb	r3, [r7, #15]
 800590c:	f1c3 0301 	rsb	r3, r3, #1
 8005910:	b2db      	uxtb	r3, r3
 8005912:	461a      	mov	r2, r3
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f004 fde9 	bl	800a4ec <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	791b      	ldrb	r3, [r3, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	4619      	mov	r1, r3
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f004 fde2 	bl	800a4ec <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	2209      	movs	r2, #9
 800592c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8005930:	e020      	b.n	8005974 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8005932:	7dbb      	ldrb	r3, [r7, #22]
 8005934:	2b04      	cmp	r3, #4
 8005936:	d11d      	bne.n	8005974 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	220b      	movs	r2, #11
 800593c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005940:	e018      	b.n	8005974 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7ff fdf2 	bl	800552c <USBH_MSC_BOT_REQ_Reset>
 8005948:	4603      	mov	r3, r0
 800594a:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800594c:	7dfb      	ldrb	r3, [r7, #23]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d112      	bne.n	8005978 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800595a:	e00d      	b.n	8005978 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800595c:	bf00      	nop
 800595e:	e00c      	b.n	800597a <USBH_MSC_BOT_Process+0x392>
      break;
 8005960:	bf00      	nop
 8005962:	e00a      	b.n	800597a <USBH_MSC_BOT_Process+0x392>
      break;
 8005964:	bf00      	nop
 8005966:	e008      	b.n	800597a <USBH_MSC_BOT_Process+0x392>
      break;
 8005968:	bf00      	nop
 800596a:	e006      	b.n	800597a <USBH_MSC_BOT_Process+0x392>
      break;
 800596c:	bf00      	nop
 800596e:	e004      	b.n	800597a <USBH_MSC_BOT_Process+0x392>
      break;
 8005970:	bf00      	nop
 8005972:	e002      	b.n	800597a <USBH_MSC_BOT_Process+0x392>
      break;
 8005974:	bf00      	nop
 8005976:	e000      	b.n	800597a <USBH_MSC_BOT_Process+0x392>
      break;
 8005978:	bf00      	nop
  }
  return status;
 800597a:	7dfb      	ldrb	r3, [r7, #23]
}
 800597c:	4618      	mov	r0, r3
 800597e:	3718      	adds	r7, #24
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	70fb      	strb	r3, [r7, #3]
 8005990:	4613      	mov	r3, r2
 8005992:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8005994:	2302      	movs	r3, #2
 8005996:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800599e:	69db      	ldr	r3, [r3, #28]
 80059a0:	60bb      	str	r3, [r7, #8]

  switch (dir)
 80059a2:	78bb      	ldrb	r3, [r7, #2]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d002      	beq.n	80059ae <USBH_MSC_BOT_Abort+0x2a>
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d009      	beq.n	80059c0 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 80059ac:	e011      	b.n	80059d2 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	79db      	ldrb	r3, [r3, #7]
 80059b2:	4619      	mov	r1, r3
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f001 f9a8 	bl	8006d0a <USBH_ClrFeature>
 80059ba:	4603      	mov	r3, r0
 80059bc:	73fb      	strb	r3, [r7, #15]
      break;
 80059be:	e008      	b.n	80059d2 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	799b      	ldrb	r3, [r3, #6]
 80059c4:	4619      	mov	r1, r3
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f001 f99f 	bl	8006d0a <USBH_ClrFeature>
 80059cc:	4603      	mov	r3, r0
 80059ce:	73fb      	strb	r3, [r7, #15]
      break;
 80059d0:	bf00      	nop
  }
  return status;
 80059d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059ea:	69db      	ldr	r3, [r3, #28]
 80059ec:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 80059ee:	2301      	movs	r3, #1
 80059f0:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	791b      	ldrb	r3, [r3, #4]
 80059f6:	4619      	mov	r1, r3
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f004 fcbb 	bl	800a374 <USBH_LL_GetLastXferSize>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b0d      	cmp	r3, #13
 8005a02:	d002      	beq.n	8005a0a <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8005a04:	2302      	movs	r3, #2
 8005a06:	73fb      	strb	r3, [r7, #15]
 8005a08:	e024      	b.n	8005a54 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a0e:	4a14      	ldr	r2, [pc, #80]	; (8005a60 <USBH_MSC_DecodeCSW+0x84>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d11d      	bne.n	8005a50 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d119      	bne.n	8005a54 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d102      	bne.n	8005a30 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	73fb      	strb	r3, [r7, #15]
 8005a2e:	e011      	b.n	8005a54 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d102      	bne.n	8005a40 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	73fb      	strb	r3, [r7, #15]
 8005a3e:	e009      	b.n	8005a54 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d104      	bne.n	8005a54 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	73fb      	strb	r3, [r7, #15]
 8005a4e:	e001      	b.n	8005a54 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8005a50:	2302      	movs	r3, #2
 8005a52:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8005a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	53425355 	.word	0x53425355

08005a64 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8005a70:	2302      	movs	r3, #2
 8005a72:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a7a:	69db      	ldr	r3, [r3, #28]
 8005a7c:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d002      	beq.n	8005a8e <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d021      	beq.n	8005ad0 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8005a8c:	e028      	b.n	8005ae0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	2200      	movs	r2, #0
 8005a92:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	220a      	movs	r2, #10
 8005aa0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	3363      	adds	r3, #99	; 0x63
 8005aa8:	2210      	movs	r2, #16
 8005aaa:	2100      	movs	r1, #0
 8005aac:	4618      	mov	r0, r3
 8005aae:	f004 fe19 	bl	800a6e4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	2202      	movs	r2, #2
 8005ac6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8005aca:	2301      	movs	r3, #1
 8005acc:	73fb      	strb	r3, [r7, #15]
      break;
 8005ace:	e007      	b.n	8005ae0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005ad0:	78fb      	ldrb	r3, [r7, #3]
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7ff fd87 	bl	80055e8 <USBH_MSC_BOT_Process>
 8005ada:	4603      	mov	r3, r0
 8005adc:	73fb      	strb	r3, [r7, #15]
      break;
 8005ade:	bf00      	nop
  }

  return error;
 8005ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b086      	sub	sp, #24
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	60f8      	str	r0, [r7, #12]
 8005af2:	460b      	mov	r3, r1
 8005af4:	607a      	str	r2, [r7, #4]
 8005af6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8005af8:	2301      	movs	r3, #1
 8005afa:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b02:	69db      	ldr	r3, [r3, #28]
 8005b04:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d002      	beq.n	8005b16 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d027      	beq.n	8005b64 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8005b14:	e05f      	b.n	8005bd6 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	2208      	movs	r2, #8
 8005b1a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	2280      	movs	r2, #128	; 0x80
 8005b20:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	220a      	movs	r2, #10
 8005b28:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	3363      	adds	r3, #99	; 0x63
 8005b30:	2210      	movs	r2, #16
 8005b32:	2100      	movs	r1, #0
 8005b34:	4618      	mov	r0, r3
 8005b36:	f004 fdd5 	bl	800a6e4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	2225      	movs	r2, #37	; 0x25
 8005b3e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	f103 0210 	add.w	r2, r3, #16
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	75fb      	strb	r3, [r7, #23]
      break;
 8005b62:	e038      	b.n	8005bd6 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005b64:	7afb      	ldrb	r3, [r7, #11]
 8005b66:	4619      	mov	r1, r3
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f7ff fd3d 	bl	80055e8 <USBH_MSC_BOT_Process>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8005b72:	7dfb      	ldrb	r3, [r7, #23]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d12d      	bne.n	8005bd4 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b7e:	3303      	adds	r3, #3
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	461a      	mov	r2, r3
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b8a:	3302      	adds	r3, #2
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	021b      	lsls	r3, r3, #8
 8005b90:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b98:	3301      	adds	r3, #1
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8005b9e:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	061b      	lsls	r3, r3, #24
 8005baa:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bb6:	3307      	adds	r3, #7
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bc2:	3306      	adds	r3, #6
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	021b      	lsls	r3, r3, #8
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	809a      	strh	r2, [r3, #4]
      break;
 8005bd4:	bf00      	nop
  }

  return error;
 8005bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	460b      	mov	r3, r1
 8005bea:	607a      	str	r2, [r7, #4]
 8005bec:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8005bee:	2302      	movs	r3, #2
 8005bf0:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005bf8:	69db      	ldr	r3, [r3, #28]
 8005bfa:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d002      	beq.n	8005c0c <USBH_MSC_SCSI_Inquiry+0x2c>
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d03d      	beq.n	8005c86 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8005c0a:	e089      	b.n	8005d20 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	2224      	movs	r2, #36	; 0x24
 8005c10:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	2280      	movs	r2, #128	; 0x80
 8005c16:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	220a      	movs	r2, #10
 8005c1e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	3363      	adds	r3, #99	; 0x63
 8005c26:	220a      	movs	r2, #10
 8005c28:	2100      	movs	r1, #0
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f004 fd5a 	bl	800a6e4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	2212      	movs	r2, #18
 8005c34:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8005c38:	7afb      	ldrb	r3, [r7, #11]
 8005c3a:	015b      	lsls	r3, r3, #5
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	2224      	movs	r2, #36	; 0x24
 8005c58:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f103 0210 	add.w	r2, r3, #16
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8005c80:	2301      	movs	r3, #1
 8005c82:	75fb      	strb	r3, [r7, #23]
      break;
 8005c84:	e04c      	b.n	8005d20 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005c86:	7afb      	ldrb	r3, [r7, #11]
 8005c88:	4619      	mov	r1, r3
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f7ff fcac 	bl	80055e8 <USBH_MSC_BOT_Process>
 8005c90:	4603      	mov	r3, r0
 8005c92:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8005c94:	7dfb      	ldrb	r3, [r7, #23]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d141      	bne.n	8005d1e <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8005c9a:	2222      	movs	r2, #34	; 0x22
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f004 fd20 	bl	800a6e4 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	f003 031f 	and.w	r3, r3, #31
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	095b      	lsrs	r3, r3, #5
 8005cc0:	b2da      	uxtb	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ccc:	3301      	adds	r3, #1
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	b25b      	sxtb	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	da03      	bge.n	8005cde <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	709a      	strb	r2, [r3, #2]
 8005cdc:	e002      	b.n	8005ce4 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	1cd8      	adds	r0, r3, #3
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cee:	3308      	adds	r3, #8
 8005cf0:	2208      	movs	r2, #8
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	f004 fce8 	bl	800a6c8 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f103 000c 	add.w	r0, r3, #12
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d04:	3310      	adds	r3, #16
 8005d06:	2210      	movs	r2, #16
 8005d08:	4619      	mov	r1, r3
 8005d0a:	f004 fcdd 	bl	800a6c8 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	331d      	adds	r3, #29
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8005d18:	3220      	adds	r2, #32
 8005d1a:	6812      	ldr	r2, [r2, #0]
 8005d1c:	601a      	str	r2, [r3, #0]
      break;
 8005d1e:	bf00      	nop
  }

  return error;
 8005d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3718      	adds	r7, #24
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b086      	sub	sp, #24
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	60f8      	str	r0, [r7, #12]
 8005d32:	460b      	mov	r3, r1
 8005d34:	607a      	str	r2, [r7, #4]
 8005d36:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8005d38:	2302      	movs	r3, #2
 8005d3a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d42:	69db      	ldr	r3, [r3, #28]
 8005d44:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d002      	beq.n	8005d56 <USBH_MSC_SCSI_RequestSense+0x2c>
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d03d      	beq.n	8005dd0 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8005d54:	e05d      	b.n	8005e12 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	220e      	movs	r2, #14
 8005d5a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	2280      	movs	r2, #128	; 0x80
 8005d60:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	220a      	movs	r2, #10
 8005d68:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	3363      	adds	r3, #99	; 0x63
 8005d70:	2210      	movs	r2, #16
 8005d72:	2100      	movs	r1, #0
 8005d74:	4618      	mov	r0, r3
 8005d76:	f004 fcb5 	bl	800a6e4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	2203      	movs	r2, #3
 8005d7e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8005d82:	7afb      	ldrb	r3, [r7, #11]
 8005d84:	015b      	lsls	r3, r3, #5
 8005d86:	b2da      	uxtb	r2, r3
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	220e      	movs	r2, #14
 8005da2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	2202      	movs	r2, #2
 8005dba:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	f103 0210 	add.w	r2, r3, #16
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	75fb      	strb	r3, [r7, #23]
      break;
 8005dce:	e020      	b.n	8005e12 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005dd0:	7afb      	ldrb	r3, [r7, #11]
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f7ff fc07 	bl	80055e8 <USBH_MSC_BOT_Process>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8005dde:	7dfb      	ldrb	r3, [r7, #23]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d115      	bne.n	8005e10 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dea:	3302      	adds	r3, #2
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	f003 030f 	and.w	r3, r3, #15
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dfe:	7b1a      	ldrb	r2, [r3, #12]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e0a:	7b5a      	ldrb	r2, [r3, #13]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	709a      	strb	r2, [r3, #2]
      break;
 8005e10:	bf00      	nop
  }

  return error;
 8005e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3718      	adds	r7, #24
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	607a      	str	r2, [r7, #4]
 8005e26:	603b      	str	r3, [r7, #0]
 8005e28:	460b      	mov	r3, r1
 8005e2a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e36:	69db      	ldr	r3, [r3, #28]
 8005e38:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d002      	beq.n	8005e4a <USBH_MSC_SCSI_Write+0x2e>
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d047      	beq.n	8005ed8 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8005e48:	e04e      	b.n	8005ee8 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8005e50:	461a      	mov	r2, r3
 8005e52:	6a3b      	ldr	r3, [r7, #32]
 8005e54:	fb03 f202 	mul.w	r2, r3, r2
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	220a      	movs	r2, #10
 8005e68:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	3363      	adds	r3, #99	; 0x63
 8005e70:	2210      	movs	r2, #16
 8005e72:	2100      	movs	r1, #0
 8005e74:	4618      	mov	r0, r3
 8005e76:	f004 fc35 	bl	800a6e4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	222a      	movs	r2, #42	; 0x2a
 8005e7e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8005e82:	79fa      	ldrb	r2, [r7, #7]
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8005e8a:	79ba      	ldrb	r2, [r7, #6]
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8005e92:	797a      	ldrb	r2, [r7, #5]
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8005e9a:	1d3b      	adds	r3, r7, #4
 8005e9c:	781a      	ldrb	r2, [r3, #0]
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8005ea4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8005eae:	f107 0320 	add.w	r3, r7, #32
 8005eb2:	781a      	ldrb	r2, [r3, #0]
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	2202      	movs	r2, #2
 8005ec6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ed6:	e007      	b.n	8005ee8 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005ed8:	7afb      	ldrb	r3, [r7, #11]
 8005eda:	4619      	mov	r1, r3
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f7ff fb83 	bl	80055e8 <USBH_MSC_BOT_Process>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ee6:	bf00      	nop
  }

  return error;
 8005ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3718      	adds	r7, #24
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b086      	sub	sp, #24
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	60f8      	str	r0, [r7, #12]
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	603b      	str	r3, [r7, #0]
 8005efe:	460b      	mov	r3, r1
 8005f00:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8005f02:	2302      	movs	r3, #2
 8005f04:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f0c:	69db      	ldr	r3, [r3, #28]
 8005f0e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d002      	beq.n	8005f20 <USBH_MSC_SCSI_Read+0x2e>
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d047      	beq.n	8005fae <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8005f1e:	e04e      	b.n	8005fbe <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8005f26:	461a      	mov	r2, r3
 8005f28:	6a3b      	ldr	r3, [r7, #32]
 8005f2a:	fb03 f202 	mul.w	r2, r3, r2
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	2280      	movs	r2, #128	; 0x80
 8005f36:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	220a      	movs	r2, #10
 8005f3e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	3363      	adds	r3, #99	; 0x63
 8005f46:	2210      	movs	r2, #16
 8005f48:	2100      	movs	r1, #0
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f004 fbca 	bl	800a6e4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	2228      	movs	r2, #40	; 0x28
 8005f54:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8005f58:	79fa      	ldrb	r2, [r7, #7]
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8005f60:	79ba      	ldrb	r2, [r7, #6]
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8005f68:	797a      	ldrb	r2, [r7, #5]
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8005f70:	1d3b      	adds	r3, r7, #4
 8005f72:	781a      	ldrb	r2, [r3, #0]
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8005f7a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8005f84:	f107 0320 	add.w	r3, r7, #32
 8005f88:	781a      	ldrb	r2, [r3, #0]
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	75fb      	strb	r3, [r7, #23]
      break;
 8005fac:	e007      	b.n	8005fbe <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005fae:	7afb      	ldrb	r3, [r7, #11]
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f7ff fb18 	bl	80055e8 <USBH_MSC_BOT_Process>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	75fb      	strb	r3, [r7, #23]
      break;
 8005fbc:	bf00      	nop
  }

  return error;
 8005fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3718      	adds	r7, #24
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d101      	bne.n	8005fe0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005fdc:	2302      	movs	r3, #2
 8005fde:	e029      	b.n	8006034 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	79fa      	ldrb	r2, [r7, #7]
 8005fe4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f000 f81f 	bl	800603c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d003      	beq.n	800602c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f004 f8ed 	bl	800a20c <USBH_LL_Init>

  return USBH_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006048:	2300      	movs	r3, #0
 800604a:	60fb      	str	r3, [r7, #12]
 800604c:	e009      	b.n	8006062 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	33e0      	adds	r3, #224	; 0xe0
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	2200      	movs	r2, #0
 800605a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	3301      	adds	r3, #1
 8006060:	60fb      	str	r3, [r7, #12]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2b0f      	cmp	r3, #15
 8006066:	d9f2      	bls.n	800604e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006068:	2300      	movs	r3, #0
 800606a:	60fb      	str	r3, [r7, #12]
 800606c:	e009      	b.n	8006082 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4413      	add	r3, r2
 8006074:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006078:	2200      	movs	r2, #0
 800607a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	3301      	adds	r3, #1
 8006080:	60fb      	str	r3, [r7, #12]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006088:	d3f1      	bcc.n	800606e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2240      	movs	r2, #64	; 0x40
 80060ae:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3714      	adds	r7, #20
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80060ee:	2300      	movs	r3, #0
 80060f0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d016      	beq.n	8006126 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10e      	bne.n	8006120 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006108:	1c59      	adds	r1, r3, #1
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	33de      	adds	r3, #222	; 0xde
 8006114:	6839      	ldr	r1, [r7, #0]
 8006116:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800611a:	2300      	movs	r3, #0
 800611c:	73fb      	strb	r3, [r7, #15]
 800611e:	e004      	b.n	800612a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006120:	2302      	movs	r3, #2
 8006122:	73fb      	strb	r3, [r7, #15]
 8006124:	e001      	b.n	800612a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006126:	2302      	movs	r3, #2
 8006128:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800612a:	7bfb      	ldrb	r3, [r7, #15]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3714      	adds	r7, #20
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	460b      	mov	r3, r1
 8006142:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006144:	2300      	movs	r3, #0
 8006146:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800614e:	78fa      	ldrb	r2, [r7, #3]
 8006150:	429a      	cmp	r2, r3
 8006152:	d204      	bcs.n	800615e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	78fa      	ldrb	r2, [r7, #3]
 8006158:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800615c:	e001      	b.n	8006162 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800615e:	2302      	movs	r3, #2
 8006160:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006162:	7bfb      	ldrb	r3, [r7, #15]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006170:	b480      	push	{r7}
 8006172:	b087      	sub	sp, #28
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	4608      	mov	r0, r1
 800617a:	4611      	mov	r1, r2
 800617c:	461a      	mov	r2, r3
 800617e:	4603      	mov	r3, r0
 8006180:	70fb      	strb	r3, [r7, #3]
 8006182:	460b      	mov	r3, r1
 8006184:	70bb      	strb	r3, [r7, #2]
 8006186:	4613      	mov	r3, r2
 8006188:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800618a:	2300      	movs	r3, #0
 800618c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800618e:	2300      	movs	r3, #0
 8006190:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006198:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800619a:	e025      	b.n	80061e8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800619c:	7dfb      	ldrb	r3, [r7, #23]
 800619e:	221a      	movs	r2, #26
 80061a0:	fb02 f303 	mul.w	r3, r2, r3
 80061a4:	3308      	adds	r3, #8
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	4413      	add	r3, r2
 80061aa:	3302      	adds	r3, #2
 80061ac:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	795b      	ldrb	r3, [r3, #5]
 80061b2:	78fa      	ldrb	r2, [r7, #3]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d002      	beq.n	80061be <USBH_FindInterface+0x4e>
 80061b8:	78fb      	ldrb	r3, [r7, #3]
 80061ba:	2bff      	cmp	r3, #255	; 0xff
 80061bc:	d111      	bne.n	80061e2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80061c2:	78ba      	ldrb	r2, [r7, #2]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d002      	beq.n	80061ce <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80061c8:	78bb      	ldrb	r3, [r7, #2]
 80061ca:	2bff      	cmp	r3, #255	; 0xff
 80061cc:	d109      	bne.n	80061e2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80061d2:	787a      	ldrb	r2, [r7, #1]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d002      	beq.n	80061de <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80061d8:	787b      	ldrb	r3, [r7, #1]
 80061da:	2bff      	cmp	r3, #255	; 0xff
 80061dc:	d101      	bne.n	80061e2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80061de:	7dfb      	ldrb	r3, [r7, #23]
 80061e0:	e006      	b.n	80061f0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80061e2:	7dfb      	ldrb	r3, [r7, #23]
 80061e4:	3301      	adds	r3, #1
 80061e6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80061e8:	7dfb      	ldrb	r3, [r7, #23]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d9d6      	bls.n	800619c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80061ee:	23ff      	movs	r3, #255	; 0xff
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	371c      	adds	r7, #28
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f004 f83d 	bl	800a284 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800620a:	2101      	movs	r1, #1
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f004 f956 	bl	800a4be <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b088      	sub	sp, #32
 8006220:	af04      	add	r7, sp, #16
 8006222:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006224:	2302      	movs	r3, #2
 8006226:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006228:	2300      	movs	r3, #0
 800622a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006232:	b2db      	uxtb	r3, r3
 8006234:	2b01      	cmp	r3, #1
 8006236:	d102      	bne.n	800623e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2203      	movs	r2, #3
 800623c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	b2db      	uxtb	r3, r3
 8006244:	2b0b      	cmp	r3, #11
 8006246:	f200 81be 	bhi.w	80065c6 <USBH_Process+0x3aa>
 800624a:	a201      	add	r2, pc, #4	; (adr r2, 8006250 <USBH_Process+0x34>)
 800624c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006250:	08006281 	.word	0x08006281
 8006254:	080062b3 	.word	0x080062b3
 8006258:	0800631b 	.word	0x0800631b
 800625c:	08006561 	.word	0x08006561
 8006260:	080065c7 	.word	0x080065c7
 8006264:	080063bf 	.word	0x080063bf
 8006268:	08006507 	.word	0x08006507
 800626c:	080063f5 	.word	0x080063f5
 8006270:	08006415 	.word	0x08006415
 8006274:	08006435 	.word	0x08006435
 8006278:	08006479 	.word	0x08006479
 800627c:	08006549 	.word	0x08006549
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 819e 	beq.w	80065ca <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006294:	20c8      	movs	r0, #200	; 0xc8
 8006296:	f004 f989 	bl	800a5ac <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f004 f84f 	bl	800a33e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80062b0:	e18b      	b.n	80065ca <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d107      	bne.n	80062cc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2202      	movs	r2, #2
 80062c8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80062ca:	e18d      	b.n	80065e8 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80062d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062d6:	d914      	bls.n	8006302 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80062de:	3301      	adds	r3, #1
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80062ee:	2b03      	cmp	r3, #3
 80062f0:	d903      	bls.n	80062fa <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	220d      	movs	r2, #13
 80062f6:	701a      	strb	r2, [r3, #0]
      break;
 80062f8:	e176      	b.n	80065e8 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	701a      	strb	r2, [r3, #0]
      break;
 8006300:	e172      	b.n	80065e8 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006308:	f103 020a 	add.w	r2, r3, #10
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006312:	200a      	movs	r0, #10
 8006314:	f004 f94a 	bl	800a5ac <USBH_Delay>
      break;
 8006318:	e166      	b.n	80065e8 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006320:	2b00      	cmp	r3, #0
 8006322:	d005      	beq.n	8006330 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800632a:	2104      	movs	r1, #4
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006330:	2064      	movs	r0, #100	; 0x64
 8006332:	f004 f93b 	bl	800a5ac <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f003 ffda 	bl	800a2f0 <USBH_LL_GetSpeed>
 800633c:	4603      	mov	r3, r0
 800633e:	461a      	mov	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2205      	movs	r2, #5
 800634a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800634c:	2100      	movs	r1, #0
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f001 fa29 	bl	80077a6 <USBH_AllocPipe>
 8006354:	4603      	mov	r3, r0
 8006356:	461a      	mov	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800635c:	2180      	movs	r1, #128	; 0x80
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f001 fa21 	bl	80077a6 <USBH_AllocPipe>
 8006364:	4603      	mov	r3, r0
 8006366:	461a      	mov	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	7919      	ldrb	r1, [r3, #4]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006380:	b292      	uxth	r2, r2
 8006382:	9202      	str	r2, [sp, #8]
 8006384:	2200      	movs	r2, #0
 8006386:	9201      	str	r2, [sp, #4]
 8006388:	9300      	str	r3, [sp, #0]
 800638a:	4603      	mov	r3, r0
 800638c:	2280      	movs	r2, #128	; 0x80
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f001 f9da 	bl	8007748 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	7959      	ldrb	r1, [r3, #5]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80063a8:	b292      	uxth	r2, r2
 80063aa:	9202      	str	r2, [sp, #8]
 80063ac:	2200      	movs	r2, #0
 80063ae:	9201      	str	r2, [sp, #4]
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	4603      	mov	r3, r0
 80063b4:	2200      	movs	r2, #0
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f001 f9c6 	bl	8007748 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80063bc:	e114      	b.n	80065e8 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f918 	bl	80065f4 <USBH_HandleEnum>
 80063c4:	4603      	mov	r3, r0
 80063c6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80063c8:	7bbb      	ldrb	r3, [r7, #14]
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f040 80fe 	bne.w	80065ce <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d103      	bne.n	80063ec <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2208      	movs	r2, #8
 80063e8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80063ea:	e0f0      	b.n	80065ce <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2207      	movs	r2, #7
 80063f0:	701a      	strb	r2, [r3, #0]
      break;
 80063f2:	e0ec      	b.n	80065ce <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f000 80e9 	beq.w	80065d2 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006406:	2101      	movs	r1, #1
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2208      	movs	r2, #8
 8006410:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006412:	e0de      	b.n	80065d2 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800641a:	b29b      	uxth	r3, r3
 800641c:	4619      	mov	r1, r3
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fc2c 	bl	8006c7c <USBH_SetCfg>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	f040 80d5 	bne.w	80065d6 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2209      	movs	r2, #9
 8006430:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006432:	e0d0      	b.n	80065d6 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800643a:	f003 0320 	and.w	r3, r3, #32
 800643e:	2b00      	cmp	r3, #0
 8006440:	d016      	beq.n	8006470 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006442:	2101      	movs	r1, #1
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 fc3c 	bl	8006cc2 <USBH_SetFeature>
 800644a:	4603      	mov	r3, r0
 800644c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800644e:	7bbb      	ldrb	r3, [r7, #14]
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d103      	bne.n	800645e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	220a      	movs	r2, #10
 800645a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800645c:	e0bd      	b.n	80065da <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800645e:	7bbb      	ldrb	r3, [r7, #14]
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b03      	cmp	r3, #3
 8006464:	f040 80b9 	bne.w	80065da <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	220a      	movs	r2, #10
 800646c:	701a      	strb	r2, [r3, #0]
      break;
 800646e:	e0b4      	b.n	80065da <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	220a      	movs	r2, #10
 8006474:	701a      	strb	r2, [r3, #0]
      break;
 8006476:	e0b0      	b.n	80065da <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800647e:	2b00      	cmp	r3, #0
 8006480:	f000 80ad 	beq.w	80065de <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800648c:	2300      	movs	r3, #0
 800648e:	73fb      	strb	r3, [r7, #15]
 8006490:	e016      	b.n	80064c0 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006492:	7bfa      	ldrb	r2, [r7, #15]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	32de      	adds	r2, #222	; 0xde
 8006498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800649c:	791a      	ldrb	r2, [r3, #4]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d108      	bne.n	80064ba <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80064a8:	7bfa      	ldrb	r2, [r7, #15]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	32de      	adds	r2, #222	; 0xde
 80064ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80064b8:	e005      	b.n	80064c6 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80064ba:	7bfb      	ldrb	r3, [r7, #15]
 80064bc:	3301      	adds	r3, #1
 80064be:	73fb      	strb	r3, [r7, #15]
 80064c0:	7bfb      	ldrb	r3, [r7, #15]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d0e5      	beq.n	8006492 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d016      	beq.n	80064fe <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	4798      	blx	r3
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d109      	bne.n	80064f6 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2206      	movs	r2, #6
 80064e6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80064ee:	2103      	movs	r1, #3
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80064f4:	e073      	b.n	80065de <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	220d      	movs	r2, #13
 80064fa:	701a      	strb	r2, [r3, #0]
      break;
 80064fc:	e06f      	b.n	80065de <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	220d      	movs	r2, #13
 8006502:	701a      	strb	r2, [r3, #0]
      break;
 8006504:	e06b      	b.n	80065de <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800650c:	2b00      	cmp	r3, #0
 800650e:	d017      	beq.n	8006540 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	4798      	blx	r3
 800651c:	4603      	mov	r3, r0
 800651e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006520:	7bbb      	ldrb	r3, [r7, #14]
 8006522:	b2db      	uxtb	r3, r3
 8006524:	2b00      	cmp	r3, #0
 8006526:	d103      	bne.n	8006530 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	220b      	movs	r2, #11
 800652c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800652e:	e058      	b.n	80065e2 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006530:	7bbb      	ldrb	r3, [r7, #14]
 8006532:	b2db      	uxtb	r3, r3
 8006534:	2b02      	cmp	r3, #2
 8006536:	d154      	bne.n	80065e2 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	220d      	movs	r2, #13
 800653c:	701a      	strb	r2, [r3, #0]
      break;
 800653e:	e050      	b.n	80065e2 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	220d      	movs	r2, #13
 8006544:	701a      	strb	r2, [r3, #0]
      break;
 8006546:	e04c      	b.n	80065e2 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800654e:	2b00      	cmp	r3, #0
 8006550:	d049      	beq.n	80065e6 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	4798      	blx	r3
      }
      break;
 800655e:	e042      	b.n	80065e6 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f7ff fd67 	bl	800603c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006574:	2b00      	cmp	r3, #0
 8006576:	d009      	beq.n	800658c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006592:	2b00      	cmp	r3, #0
 8006594:	d005      	beq.n	80065a2 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800659c:	2105      	movs	r1, #5
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d107      	bne.n	80065be <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7ff fe20 	bl	80061fc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80065bc:	e014      	b.n	80065e8 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f003 fe60 	bl	800a284 <USBH_LL_Start>
      break;
 80065c4:	e010      	b.n	80065e8 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80065c6:	bf00      	nop
 80065c8:	e00e      	b.n	80065e8 <USBH_Process+0x3cc>
      break;
 80065ca:	bf00      	nop
 80065cc:	e00c      	b.n	80065e8 <USBH_Process+0x3cc>
      break;
 80065ce:	bf00      	nop
 80065d0:	e00a      	b.n	80065e8 <USBH_Process+0x3cc>
    break;
 80065d2:	bf00      	nop
 80065d4:	e008      	b.n	80065e8 <USBH_Process+0x3cc>
      break;
 80065d6:	bf00      	nop
 80065d8:	e006      	b.n	80065e8 <USBH_Process+0x3cc>
      break;
 80065da:	bf00      	nop
 80065dc:	e004      	b.n	80065e8 <USBH_Process+0x3cc>
      break;
 80065de:	bf00      	nop
 80065e0:	e002      	b.n	80065e8 <USBH_Process+0x3cc>
      break;
 80065e2:	bf00      	nop
 80065e4:	e000      	b.n	80065e8 <USBH_Process+0x3cc>
      break;
 80065e6:	bf00      	nop
  }
  return USBH_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop

080065f4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b088      	sub	sp, #32
 80065f8:	af04      	add	r7, sp, #16
 80065fa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80065fc:	2301      	movs	r3, #1
 80065fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006600:	2301      	movs	r3, #1
 8006602:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	785b      	ldrb	r3, [r3, #1]
 8006608:	2b07      	cmp	r3, #7
 800660a:	f200 81c1 	bhi.w	8006990 <USBH_HandleEnum+0x39c>
 800660e:	a201      	add	r2, pc, #4	; (adr r2, 8006614 <USBH_HandleEnum+0x20>)
 8006610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006614:	08006635 	.word	0x08006635
 8006618:	080066f3 	.word	0x080066f3
 800661c:	0800675d 	.word	0x0800675d
 8006620:	080067eb 	.word	0x080067eb
 8006624:	08006855 	.word	0x08006855
 8006628:	080068c5 	.word	0x080068c5
 800662c:	0800690b 	.word	0x0800690b
 8006630:	08006951 	.word	0x08006951
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006634:	2108      	movs	r1, #8
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 fa50 	bl	8006adc <USBH_Get_DevDesc>
 800663c:	4603      	mov	r3, r0
 800663e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006640:	7bbb      	ldrb	r3, [r7, #14]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d130      	bne.n	80066a8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	7919      	ldrb	r1, [r3, #4]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800666a:	b292      	uxth	r2, r2
 800666c:	9202      	str	r2, [sp, #8]
 800666e:	2200      	movs	r2, #0
 8006670:	9201      	str	r2, [sp, #4]
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	4603      	mov	r3, r0
 8006676:	2280      	movs	r2, #128	; 0x80
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f001 f865 	bl	8007748 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	7959      	ldrb	r1, [r3, #5]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006692:	b292      	uxth	r2, r2
 8006694:	9202      	str	r2, [sp, #8]
 8006696:	2200      	movs	r2, #0
 8006698:	9201      	str	r2, [sp, #4]
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	4603      	mov	r3, r0
 800669e:	2200      	movs	r2, #0
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f001 f851 	bl	8007748 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80066a6:	e175      	b.n	8006994 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80066a8:	7bbb      	ldrb	r3, [r7, #14]
 80066aa:	2b03      	cmp	r3, #3
 80066ac:	f040 8172 	bne.w	8006994 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80066b6:	3301      	adds	r3, #1
 80066b8:	b2da      	uxtb	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80066c6:	2b03      	cmp	r3, #3
 80066c8:	d903      	bls.n	80066d2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	220d      	movs	r2, #13
 80066ce:	701a      	strb	r2, [r3, #0]
      break;
 80066d0:	e160      	b.n	8006994 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	795b      	ldrb	r3, [r3, #5]
 80066d6:	4619      	mov	r1, r3
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f001 f885 	bl	80077e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	791b      	ldrb	r3, [r3, #4]
 80066e2:	4619      	mov	r1, r3
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f001 f87f 	bl	80077e8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	701a      	strb	r2, [r3, #0]
      break;
 80066f0:	e150      	b.n	8006994 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80066f2:	2112      	movs	r1, #18
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 f9f1 	bl	8006adc <USBH_Get_DevDesc>
 80066fa:	4603      	mov	r3, r0
 80066fc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80066fe:	7bbb      	ldrb	r3, [r7, #14]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d103      	bne.n	800670c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2202      	movs	r2, #2
 8006708:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800670a:	e145      	b.n	8006998 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800670c:	7bbb      	ldrb	r3, [r7, #14]
 800670e:	2b03      	cmp	r3, #3
 8006710:	f040 8142 	bne.w	8006998 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800671a:	3301      	adds	r3, #1
 800671c:	b2da      	uxtb	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800672a:	2b03      	cmp	r3, #3
 800672c:	d903      	bls.n	8006736 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	220d      	movs	r2, #13
 8006732:	701a      	strb	r2, [r3, #0]
      break;
 8006734:	e130      	b.n	8006998 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	795b      	ldrb	r3, [r3, #5]
 800673a:	4619      	mov	r1, r3
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f001 f853 	bl	80077e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	791b      	ldrb	r3, [r3, #4]
 8006746:	4619      	mov	r1, r3
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f001 f84d 	bl	80077e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	701a      	strb	r2, [r3, #0]
      break;
 800675a:	e11d      	b.n	8006998 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800675c:	2101      	movs	r1, #1
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fa68 	bl	8006c34 <USBH_SetAddress>
 8006764:	4603      	mov	r3, r0
 8006766:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006768:	7bbb      	ldrb	r3, [r7, #14]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d132      	bne.n	80067d4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800676e:	2002      	movs	r0, #2
 8006770:	f003 ff1c 	bl	800a5ac <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2203      	movs	r2, #3
 8006780:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	7919      	ldrb	r1, [r3, #4]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006796:	b292      	uxth	r2, r2
 8006798:	9202      	str	r2, [sp, #8]
 800679a:	2200      	movs	r2, #0
 800679c:	9201      	str	r2, [sp, #4]
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	4603      	mov	r3, r0
 80067a2:	2280      	movs	r2, #128	; 0x80
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 ffcf 	bl	8007748 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	7959      	ldrb	r1, [r3, #5]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80067be:	b292      	uxth	r2, r2
 80067c0:	9202      	str	r2, [sp, #8]
 80067c2:	2200      	movs	r2, #0
 80067c4:	9201      	str	r2, [sp, #4]
 80067c6:	9300      	str	r3, [sp, #0]
 80067c8:	4603      	mov	r3, r0
 80067ca:	2200      	movs	r2, #0
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 ffbb 	bl	8007748 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80067d2:	e0e3      	b.n	800699c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80067d4:	7bbb      	ldrb	r3, [r7, #14]
 80067d6:	2b03      	cmp	r3, #3
 80067d8:	f040 80e0 	bne.w	800699c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	220d      	movs	r2, #13
 80067e0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	705a      	strb	r2, [r3, #1]
      break;
 80067e8:	e0d8      	b.n	800699c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80067ea:	2109      	movs	r1, #9
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 f99d 	bl	8006b2c <USBH_Get_CfgDesc>
 80067f2:	4603      	mov	r3, r0
 80067f4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80067f6:	7bbb      	ldrb	r3, [r7, #14]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d103      	bne.n	8006804 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2204      	movs	r2, #4
 8006800:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006802:	e0cd      	b.n	80069a0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006804:	7bbb      	ldrb	r3, [r7, #14]
 8006806:	2b03      	cmp	r3, #3
 8006808:	f040 80ca 	bne.w	80069a0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006812:	3301      	adds	r3, #1
 8006814:	b2da      	uxtb	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006822:	2b03      	cmp	r3, #3
 8006824:	d903      	bls.n	800682e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	220d      	movs	r2, #13
 800682a:	701a      	strb	r2, [r3, #0]
      break;
 800682c:	e0b8      	b.n	80069a0 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	795b      	ldrb	r3, [r3, #5]
 8006832:	4619      	mov	r1, r3
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 ffd7 	bl	80077e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	791b      	ldrb	r3, [r3, #4]
 800683e:	4619      	mov	r1, r3
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 ffd1 	bl	80077e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	701a      	strb	r2, [r3, #0]
      break;
 8006852:	e0a5      	b.n	80069a0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800685a:	4619      	mov	r1, r3
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 f965 	bl	8006b2c <USBH_Get_CfgDesc>
 8006862:	4603      	mov	r3, r0
 8006864:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006866:	7bbb      	ldrb	r3, [r7, #14]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d103      	bne.n	8006874 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2205      	movs	r2, #5
 8006870:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006872:	e097      	b.n	80069a4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006874:	7bbb      	ldrb	r3, [r7, #14]
 8006876:	2b03      	cmp	r3, #3
 8006878:	f040 8094 	bne.w	80069a4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006882:	3301      	adds	r3, #1
 8006884:	b2da      	uxtb	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006892:	2b03      	cmp	r3, #3
 8006894:	d903      	bls.n	800689e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	220d      	movs	r2, #13
 800689a:	701a      	strb	r2, [r3, #0]
      break;
 800689c:	e082      	b.n	80069a4 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	795b      	ldrb	r3, [r3, #5]
 80068a2:	4619      	mov	r1, r3
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 ff9f 	bl	80077e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	791b      	ldrb	r3, [r3, #4]
 80068ae:	4619      	mov	r1, r3
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 ff99 	bl	80077e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	701a      	strb	r2, [r3, #0]
      break;
 80068c2:	e06f      	b.n	80069a4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d019      	beq.n	8006902 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80068da:	23ff      	movs	r3, #255	; 0xff
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f949 	bl	8006b74 <USBH_Get_StringDesc>
 80068e2:	4603      	mov	r3, r0
 80068e4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80068e6:	7bbb      	ldrb	r3, [r7, #14]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d103      	bne.n	80068f4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2206      	movs	r2, #6
 80068f0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80068f2:	e059      	b.n	80069a8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80068f4:	7bbb      	ldrb	r3, [r7, #14]
 80068f6:	2b03      	cmp	r3, #3
 80068f8:	d156      	bne.n	80069a8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2206      	movs	r2, #6
 80068fe:	705a      	strb	r2, [r3, #1]
      break;
 8006900:	e052      	b.n	80069a8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2206      	movs	r2, #6
 8006906:	705a      	strb	r2, [r3, #1]
      break;
 8006908:	e04e      	b.n	80069a8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006910:	2b00      	cmp	r3, #0
 8006912:	d019      	beq.n	8006948 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006920:	23ff      	movs	r3, #255	; 0xff
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f926 	bl	8006b74 <USBH_Get_StringDesc>
 8006928:	4603      	mov	r3, r0
 800692a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800692c:	7bbb      	ldrb	r3, [r7, #14]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d103      	bne.n	800693a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2207      	movs	r2, #7
 8006936:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006938:	e038      	b.n	80069ac <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800693a:	7bbb      	ldrb	r3, [r7, #14]
 800693c:	2b03      	cmp	r3, #3
 800693e:	d135      	bne.n	80069ac <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2207      	movs	r2, #7
 8006944:	705a      	strb	r2, [r3, #1]
      break;
 8006946:	e031      	b.n	80069ac <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2207      	movs	r2, #7
 800694c:	705a      	strb	r2, [r3, #1]
      break;
 800694e:	e02d      	b.n	80069ac <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006956:	2b00      	cmp	r3, #0
 8006958:	d017      	beq.n	800698a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006966:	23ff      	movs	r3, #255	; 0xff
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 f903 	bl	8006b74 <USBH_Get_StringDesc>
 800696e:	4603      	mov	r3, r0
 8006970:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006972:	7bbb      	ldrb	r3, [r7, #14]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d102      	bne.n	800697e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006978:	2300      	movs	r3, #0
 800697a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800697c:	e018      	b.n	80069b0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800697e:	7bbb      	ldrb	r3, [r7, #14]
 8006980:	2b03      	cmp	r3, #3
 8006982:	d115      	bne.n	80069b0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006984:	2300      	movs	r3, #0
 8006986:	73fb      	strb	r3, [r7, #15]
      break;
 8006988:	e012      	b.n	80069b0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800698a:	2300      	movs	r3, #0
 800698c:	73fb      	strb	r3, [r7, #15]
      break;
 800698e:	e00f      	b.n	80069b0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006990:	bf00      	nop
 8006992:	e00e      	b.n	80069b2 <USBH_HandleEnum+0x3be>
      break;
 8006994:	bf00      	nop
 8006996:	e00c      	b.n	80069b2 <USBH_HandleEnum+0x3be>
      break;
 8006998:	bf00      	nop
 800699a:	e00a      	b.n	80069b2 <USBH_HandleEnum+0x3be>
      break;
 800699c:	bf00      	nop
 800699e:	e008      	b.n	80069b2 <USBH_HandleEnum+0x3be>
      break;
 80069a0:	bf00      	nop
 80069a2:	e006      	b.n	80069b2 <USBH_HandleEnum+0x3be>
      break;
 80069a4:	bf00      	nop
 80069a6:	e004      	b.n	80069b2 <USBH_HandleEnum+0x3be>
      break;
 80069a8:	bf00      	nop
 80069aa:	e002      	b.n	80069b2 <USBH_HandleEnum+0x3be>
      break;
 80069ac:	bf00      	nop
 80069ae:	e000      	b.n	80069b2 <USBH_HandleEnum+0x3be>
      break;
 80069b0:	bf00      	nop
  }
  return Status;
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	683a      	ldr	r2, [r7, #0]
 80069ca:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80069ce:	bf00      	nop
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b082      	sub	sp, #8
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80069e8:	1c5a      	adds	r2, r3, #1
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f804 	bl	80069fe <USBH_HandleSof>
}
 80069f6:	bf00      	nop
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b082      	sub	sp, #8
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b0b      	cmp	r3, #11
 8006a0e:	d10a      	bne.n	8006a26 <USBH_HandleSof+0x28>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d005      	beq.n	8006a26 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	4798      	blx	r3
  }
}
 8006a26:	bf00      	nop
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b083      	sub	sp, #12
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006a3e:	bf00      	nop
}
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b083      	sub	sp, #12
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006a5a:	bf00      	nop
}
 8006a5c:	370c      	adds	r7, #12
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr

08006a66 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006a66:	b480      	push	{r7}
 8006a68:	b083      	sub	sp, #12
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f003 fc00 	bl	800a2ba <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	791b      	ldrb	r3, [r3, #4]
 8006abe:	4619      	mov	r1, r3
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 fe91 	bl	80077e8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	795b      	ldrb	r3, [r3, #5]
 8006aca:	4619      	mov	r1, r3
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fe8b 	bl	80077e8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3708      	adds	r7, #8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af02      	add	r7, sp, #8
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006aee:	78fb      	ldrb	r3, [r7, #3]
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	4613      	mov	r3, r2
 8006af6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006afa:	2100      	movs	r1, #0
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 f864 	bl	8006bca <USBH_GetDescriptor>
 8006b02:	4603      	mov	r3, r0
 8006b04:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10a      	bne.n	8006b22 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006b18:	78fa      	ldrb	r2, [r7, #3]
 8006b1a:	b292      	uxth	r2, r2
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	f000 f918 	bl	8006d52 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af02      	add	r7, sp, #8
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	460b      	mov	r3, r1
 8006b36:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	331c      	adds	r3, #28
 8006b3c:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006b3e:	887b      	ldrh	r3, [r7, #2]
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b48:	2100      	movs	r1, #0
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f83d 	bl	8006bca <USBH_GetDescriptor>
 8006b50:	4603      	mov	r3, r0
 8006b52:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d107      	bne.n	8006b6a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8006b5a:	887b      	ldrh	r3, [r7, #2]
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	68b9      	ldr	r1, [r7, #8]
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 f987 	bl	8006e74 <USBH_ParseCfgDesc>
 8006b66:	4603      	mov	r3, r0
 8006b68:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b088      	sub	sp, #32
 8006b78:	af02      	add	r7, sp, #8
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	607a      	str	r2, [r7, #4]
 8006b7e:	461a      	mov	r2, r3
 8006b80:	460b      	mov	r3, r1
 8006b82:	72fb      	strb	r3, [r7, #11]
 8006b84:	4613      	mov	r3, r2
 8006b86:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8006b88:	7afb      	ldrb	r3, [r7, #11]
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006b90:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006b98:	893b      	ldrh	r3, [r7, #8]
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	2100      	movs	r1, #0
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 f812 	bl	8006bca <USBH_GetDescriptor>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006baa:	7dfb      	ldrb	r3, [r7, #23]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d107      	bne.n	8006bc0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006bb6:	893a      	ldrh	r2, [r7, #8]
 8006bb8:	6879      	ldr	r1, [r7, #4]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f000 fb24 	bl	8007208 <USBH_ParseStringDesc>
  }

  return status;
 8006bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3718      	adds	r7, #24
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b084      	sub	sp, #16
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	60f8      	str	r0, [r7, #12]
 8006bd2:	607b      	str	r3, [r7, #4]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	72fb      	strb	r3, [r7, #11]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	789b      	ldrb	r3, [r3, #2]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d11c      	bne.n	8006c1e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006be4:	7afb      	ldrb	r3, [r7, #11]
 8006be6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006bea:	b2da      	uxtb	r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2206      	movs	r2, #6
 8006bf4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	893a      	ldrh	r2, [r7, #8]
 8006bfa:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006bfc:	893b      	ldrh	r3, [r7, #8]
 8006bfe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006c02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c06:	d104      	bne.n	8006c12 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f240 4209 	movw	r2, #1033	; 0x409
 8006c0e:	829a      	strh	r2, [r3, #20]
 8006c10:	e002      	b.n	8006c18 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	8b3a      	ldrh	r2, [r7, #24]
 8006c1c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006c1e:	8b3b      	ldrh	r3, [r7, #24]
 8006c20:	461a      	mov	r2, r3
 8006c22:	6879      	ldr	r1, [r7, #4]
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 fb3d 	bl	80072a4 <USBH_CtlReq>
 8006c2a:	4603      	mov	r3, r0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	789b      	ldrb	r3, [r3, #2]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d10f      	bne.n	8006c68 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2205      	movs	r2, #5
 8006c52:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006c54:	78fb      	ldrb	r3, [r7, #3]
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006c68:	2200      	movs	r2, #0
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 fb19 	bl	80072a4 <USBH_CtlReq>
 8006c72:	4603      	mov	r3, r0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3708      	adds	r7, #8
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	460b      	mov	r3, r1
 8006c86:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	789b      	ldrb	r3, [r3, #2]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d10e      	bne.n	8006cae <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2209      	movs	r2, #9
 8006c9a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	887a      	ldrh	r2, [r7, #2]
 8006ca0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006cae:	2200      	movs	r2, #0
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 faf6 	bl	80072a4 <USBH_CtlReq>
 8006cb8:	4603      	mov	r3, r0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3708      	adds	r7, #8
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b082      	sub	sp, #8
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	460b      	mov	r3, r1
 8006ccc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	789b      	ldrb	r3, [r3, #2]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d10f      	bne.n	8006cf6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2203      	movs	r2, #3
 8006ce0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006ce2:	78fb      	ldrb	r3, [r7, #3]
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 fad2 	bl	80072a4 <USBH_CtlReq>
 8006d00:	4603      	mov	r3, r0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3708      	adds	r7, #8
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b082      	sub	sp, #8
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
 8006d12:	460b      	mov	r3, r1
 8006d14:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	789b      	ldrb	r3, [r3, #2]
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d10f      	bne.n	8006d3e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2202      	movs	r2, #2
 8006d22:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006d30:	78fb      	ldrb	r3, [r7, #3]
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8006d3e:	2200      	movs	r2, #0
 8006d40:	2100      	movs	r1, #0
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 faae 	bl	80072a4 <USBH_CtlReq>
 8006d48:	4603      	mov	r3, r0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3708      	adds	r7, #8
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006d52:	b480      	push	{r7}
 8006d54:	b085      	sub	sp, #20
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	60f8      	str	r0, [r7, #12]
 8006d5a:	60b9      	str	r1, [r7, #8]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	781a      	ldrb	r2, [r3, #0]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	785a      	ldrb	r2, [r3, #1]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	3302      	adds	r3, #2
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	3303      	adds	r3, #3
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	021b      	lsls	r3, r3, #8
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	4313      	orrs	r3, r2
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	791a      	ldrb	r2, [r3, #4]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	795a      	ldrb	r2, [r3, #5]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	799a      	ldrb	r2, [r3, #6]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	79da      	ldrb	r2, [r3, #7]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	79db      	ldrb	r3, [r3, #7]
 8006db0:	2b20      	cmp	r3, #32
 8006db2:	dc11      	bgt.n	8006dd8 <USBH_ParseDevDesc+0x86>
 8006db4:	2b08      	cmp	r3, #8
 8006db6:	db16      	blt.n	8006de6 <USBH_ParseDevDesc+0x94>
 8006db8:	3b08      	subs	r3, #8
 8006dba:	2201      	movs	r2, #1
 8006dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc0:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8006dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	bf14      	ite	ne
 8006dcc:	2301      	movne	r3, #1
 8006dce:	2300      	moveq	r3, #0
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d102      	bne.n	8006ddc <USBH_ParseDevDesc+0x8a>
 8006dd6:	e006      	b.n	8006de6 <USBH_ParseDevDesc+0x94>
 8006dd8:	2b40      	cmp	r3, #64	; 0x40
 8006dda:	d104      	bne.n	8006de6 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	79da      	ldrb	r2, [r3, #7]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	71da      	strb	r2, [r3, #7]
      break;
 8006de4:	e003      	b.n	8006dee <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2240      	movs	r2, #64	; 0x40
 8006dea:	71da      	strb	r2, [r3, #7]
      break;
 8006dec:	bf00      	nop
  }

  if (length > 8U)
 8006dee:	88fb      	ldrh	r3, [r7, #6]
 8006df0:	2b08      	cmp	r3, #8
 8006df2:	d939      	bls.n	8006e68 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	3308      	adds	r3, #8
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	b29a      	uxth	r2, r3
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	3309      	adds	r3, #9
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	021b      	lsls	r3, r3, #8
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	330a      	adds	r3, #10
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	330b      	adds	r3, #11
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	021b      	lsls	r3, r3, #8
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	4313      	orrs	r3, r2
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	330c      	adds	r3, #12
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	330d      	adds	r3, #13
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	021b      	lsls	r3, r3, #8
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	4313      	orrs	r3, r2
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	7b9a      	ldrb	r2, [r3, #14]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	7bda      	ldrb	r2, [r3, #15]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	7c1a      	ldrb	r2, [r3, #16]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	7c5a      	ldrb	r2, [r3, #17]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	745a      	strb	r2, [r3, #17]
  }
}
 8006e68:	bf00      	nop
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b08c      	sub	sp, #48	; 0x30
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006e88:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006e94:	2300      	movs	r3, #0
 8006e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	781a      	ldrb	r2, [r3, #0]
 8006ea8:	6a3b      	ldr	r3, [r7, #32]
 8006eaa:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	785a      	ldrb	r2, [r3, #1]
 8006eb0:	6a3b      	ldr	r3, [r7, #32]
 8006eb2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	3302      	adds	r3, #2
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	3303      	adds	r3, #3
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	021b      	lsls	r3, r3, #8
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ed0:	bf28      	it	cs
 8006ed2:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	6a3b      	ldr	r3, [r7, #32]
 8006eda:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	791a      	ldrb	r2, [r3, #4]
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	795a      	ldrb	r2, [r3, #5]
 8006ee8:	6a3b      	ldr	r3, [r7, #32]
 8006eea:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	799a      	ldrb	r2, [r3, #6]
 8006ef0:	6a3b      	ldr	r3, [r7, #32]
 8006ef2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	79da      	ldrb	r2, [r3, #7]
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	7a1a      	ldrb	r2, [r3, #8]
 8006f00:	6a3b      	ldr	r3, [r7, #32]
 8006f02:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8006f04:	6a3b      	ldr	r3, [r7, #32]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	2b09      	cmp	r3, #9
 8006f0a:	d002      	beq.n	8006f12 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8006f0c:	6a3b      	ldr	r3, [r7, #32]
 8006f0e:	2209      	movs	r2, #9
 8006f10:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006f12:	88fb      	ldrh	r3, [r7, #6]
 8006f14:	2b09      	cmp	r3, #9
 8006f16:	f240 809d 	bls.w	8007054 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8006f1a:	2309      	movs	r3, #9
 8006f1c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006f22:	e081      	b.n	8007028 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006f24:	f107 0316 	add.w	r3, r7, #22
 8006f28:	4619      	mov	r1, r3
 8006f2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f2c:	f000 f99f 	bl	800726e <USBH_GetNextDesc>
 8006f30:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8006f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f34:	785b      	ldrb	r3, [r3, #1]
 8006f36:	2b04      	cmp	r3, #4
 8006f38:	d176      	bne.n	8007028 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8006f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	2b09      	cmp	r3, #9
 8006f40:	d002      	beq.n	8006f48 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8006f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f44:	2209      	movs	r2, #9
 8006f46:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8006f48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f4c:	221a      	movs	r2, #26
 8006f4e:	fb02 f303 	mul.w	r3, r2, r3
 8006f52:	3308      	adds	r3, #8
 8006f54:	6a3a      	ldr	r2, [r7, #32]
 8006f56:	4413      	add	r3, r2
 8006f58:	3302      	adds	r3, #2
 8006f5a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006f5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f5e:	69f8      	ldr	r0, [r7, #28]
 8006f60:	f000 f87e 	bl	8007060 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006f64:	2300      	movs	r3, #0
 8006f66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006f6e:	e043      	b.n	8006ff8 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006f70:	f107 0316 	add.w	r3, r7, #22
 8006f74:	4619      	mov	r1, r3
 8006f76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f78:	f000 f979 	bl	800726e <USBH_GetNextDesc>
 8006f7c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f80:	785b      	ldrb	r3, [r3, #1]
 8006f82:	2b05      	cmp	r3, #5
 8006f84:	d138      	bne.n	8006ff8 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	795b      	ldrb	r3, [r3, #5]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d10f      	bne.n	8006fae <USBH_ParseCfgDesc+0x13a>
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	799b      	ldrb	r3, [r3, #6]
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d10b      	bne.n	8006fae <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	79db      	ldrb	r3, [r3, #7]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d10f      	bne.n	8006fbe <USBH_ParseCfgDesc+0x14a>
 8006f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	2b09      	cmp	r3, #9
 8006fa4:	d00b      	beq.n	8006fbe <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8006fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa8:	2209      	movs	r2, #9
 8006faa:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006fac:	e007      	b.n	8006fbe <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8006fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	2b07      	cmp	r3, #7
 8006fb4:	d004      	beq.n	8006fc0 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8006fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb8:	2207      	movs	r2, #7
 8006fba:	701a      	strb	r2, [r3, #0]
 8006fbc:	e000      	b.n	8006fc0 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006fbe:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fc4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006fc8:	3201      	adds	r2, #1
 8006fca:	00d2      	lsls	r2, r2, #3
 8006fcc:	211a      	movs	r1, #26
 8006fce:	fb01 f303 	mul.w	r3, r1, r3
 8006fd2:	4413      	add	r3, r2
 8006fd4:	3308      	adds	r3, #8
 8006fd6:	6a3a      	ldr	r2, [r7, #32]
 8006fd8:	4413      	add	r3, r2
 8006fda:	3304      	adds	r3, #4
 8006fdc:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8006fde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fe0:	69b9      	ldr	r1, [r7, #24]
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f000 f86b 	bl	80070be <USBH_ParseEPDesc>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8006fee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	791b      	ldrb	r3, [r3, #4]
 8006ffc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007000:	429a      	cmp	r2, r3
 8007002:	d204      	bcs.n	800700e <USBH_ParseCfgDesc+0x19a>
 8007004:	6a3b      	ldr	r3, [r7, #32]
 8007006:	885a      	ldrh	r2, [r3, #2]
 8007008:	8afb      	ldrh	r3, [r7, #22]
 800700a:	429a      	cmp	r2, r3
 800700c:	d8b0      	bhi.n	8006f70 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	791b      	ldrb	r3, [r3, #4]
 8007012:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007016:	429a      	cmp	r2, r3
 8007018:	d201      	bcs.n	800701e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800701a:	2303      	movs	r3, #3
 800701c:	e01c      	b.n	8007058 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800701e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007022:	3301      	adds	r3, #1
 8007024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800702c:	2b01      	cmp	r3, #1
 800702e:	d805      	bhi.n	800703c <USBH_ParseCfgDesc+0x1c8>
 8007030:	6a3b      	ldr	r3, [r7, #32]
 8007032:	885a      	ldrh	r2, [r3, #2]
 8007034:	8afb      	ldrh	r3, [r7, #22]
 8007036:	429a      	cmp	r2, r3
 8007038:	f63f af74 	bhi.w	8006f24 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800703c:	6a3b      	ldr	r3, [r7, #32]
 800703e:	791b      	ldrb	r3, [r3, #4]
 8007040:	2b02      	cmp	r3, #2
 8007042:	bf28      	it	cs
 8007044:	2302      	movcs	r3, #2
 8007046:	b2db      	uxtb	r3, r3
 8007048:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800704c:	429a      	cmp	r2, r3
 800704e:	d201      	bcs.n	8007054 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007050:	2303      	movs	r3, #3
 8007052:	e001      	b.n	8007058 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007054:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007058:	4618      	mov	r0, r3
 800705a:	3730      	adds	r7, #48	; 0x30
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	781a      	ldrb	r2, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	785a      	ldrb	r2, [r3, #1]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	789a      	ldrb	r2, [r3, #2]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	78da      	ldrb	r2, [r3, #3]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	791a      	ldrb	r2, [r3, #4]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	795a      	ldrb	r2, [r3, #5]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	799a      	ldrb	r2, [r3, #6]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	79da      	ldrb	r2, [r3, #7]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	7a1a      	ldrb	r2, [r3, #8]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	721a      	strb	r2, [r3, #8]
}
 80070b2:	bf00      	nop
 80070b4:	370c      	adds	r7, #12
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80070be:	b480      	push	{r7}
 80070c0:	b087      	sub	sp, #28
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	60f8      	str	r0, [r7, #12]
 80070c6:	60b9      	str	r1, [r7, #8]
 80070c8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	781a      	ldrb	r2, [r3, #0]
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	785a      	ldrb	r2, [r3, #1]
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	789a      	ldrb	r2, [r3, #2]
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	78da      	ldrb	r2, [r3, #3]
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	3304      	adds	r3, #4
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	b29a      	uxth	r2, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	3305      	adds	r3, #5
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	021b      	lsls	r3, r3, #8
 8007100:	b29b      	uxth	r3, r3
 8007102:	4313      	orrs	r3, r2
 8007104:	b29a      	uxth	r2, r3
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	799a      	ldrb	r2, [r3, #6]
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	889b      	ldrh	r3, [r3, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d102      	bne.n	8007120 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800711a:	2303      	movs	r3, #3
 800711c:	75fb      	strb	r3, [r7, #23]
 800711e:	e033      	b.n	8007188 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	889b      	ldrh	r3, [r3, #4]
 8007124:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007128:	f023 0307 	bic.w	r3, r3, #7
 800712c:	b29a      	uxth	r2, r3
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	889b      	ldrh	r3, [r3, #4]
 8007136:	b21a      	sxth	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	3304      	adds	r3, #4
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	b299      	uxth	r1, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	3305      	adds	r3, #5
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	b29b      	uxth	r3, r3
 8007148:	021b      	lsls	r3, r3, #8
 800714a:	b29b      	uxth	r3, r3
 800714c:	430b      	orrs	r3, r1
 800714e:	b29b      	uxth	r3, r3
 8007150:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007154:	2b00      	cmp	r3, #0
 8007156:	d110      	bne.n	800717a <USBH_ParseEPDesc+0xbc>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	3304      	adds	r3, #4
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	b299      	uxth	r1, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	3305      	adds	r3, #5
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	b29b      	uxth	r3, r3
 8007168:	021b      	lsls	r3, r3, #8
 800716a:	b29b      	uxth	r3, r3
 800716c:	430b      	orrs	r3, r1
 800716e:	b29b      	uxth	r3, r3
 8007170:	b21b      	sxth	r3, r3
 8007172:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007176:	b21b      	sxth	r3, r3
 8007178:	e001      	b.n	800717e <USBH_ParseEPDesc+0xc0>
 800717a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800717e:	4313      	orrs	r3, r2
 8007180:	b21b      	sxth	r3, r3
 8007182:	b29a      	uxth	r2, r3
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800718e:	2b00      	cmp	r3, #0
 8007190:	d116      	bne.n	80071c0 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	78db      	ldrb	r3, [r3, #3]
 8007196:	f003 0303 	and.w	r3, r3, #3
 800719a:	2b01      	cmp	r3, #1
 800719c:	d005      	beq.n	80071aa <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	78db      	ldrb	r3, [r3, #3]
 80071a2:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	d127      	bne.n	80071fa <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	799b      	ldrb	r3, [r3, #6]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <USBH_ParseEPDesc+0xfc>
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	799b      	ldrb	r3, [r3, #6]
 80071b6:	2b10      	cmp	r3, #16
 80071b8:	d91f      	bls.n	80071fa <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80071ba:	2303      	movs	r3, #3
 80071bc:	75fb      	strb	r3, [r7, #23]
 80071be:	e01c      	b.n	80071fa <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	78db      	ldrb	r3, [r3, #3]
 80071c4:	f003 0303 	and.w	r3, r3, #3
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d10a      	bne.n	80071e2 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	799b      	ldrb	r3, [r3, #6]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d003      	beq.n	80071dc <USBH_ParseEPDesc+0x11e>
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	799b      	ldrb	r3, [r3, #6]
 80071d8:	2b10      	cmp	r3, #16
 80071da:	d90e      	bls.n	80071fa <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80071dc:	2303      	movs	r3, #3
 80071de:	75fb      	strb	r3, [r7, #23]
 80071e0:	e00b      	b.n	80071fa <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	78db      	ldrb	r3, [r3, #3]
 80071e6:	f003 0303 	and.w	r3, r3, #3
 80071ea:	2b03      	cmp	r3, #3
 80071ec:	d105      	bne.n	80071fa <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	799b      	ldrb	r3, [r3, #6]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d101      	bne.n	80071fa <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80071f6:	2303      	movs	r3, #3
 80071f8:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80071fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	371c      	adds	r7, #28
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007208:	b480      	push	{r7}
 800720a:	b087      	sub	sp, #28
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	4613      	mov	r3, r2
 8007214:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	3301      	adds	r3, #1
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	2b03      	cmp	r3, #3
 800721e:	d120      	bne.n	8007262 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	1e9a      	subs	r2, r3, #2
 8007226:	88fb      	ldrh	r3, [r7, #6]
 8007228:	4293      	cmp	r3, r2
 800722a:	bf28      	it	cs
 800722c:	4613      	movcs	r3, r2
 800722e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	3302      	adds	r3, #2
 8007234:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007236:	2300      	movs	r3, #0
 8007238:	82fb      	strh	r3, [r7, #22]
 800723a:	e00b      	b.n	8007254 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800723c:	8afb      	ldrh	r3, [r7, #22]
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	4413      	add	r3, r2
 8007242:	781a      	ldrb	r2, [r3, #0]
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	3301      	adds	r3, #1
 800724c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800724e:	8afb      	ldrh	r3, [r7, #22]
 8007250:	3302      	adds	r3, #2
 8007252:	82fb      	strh	r3, [r7, #22]
 8007254:	8afa      	ldrh	r2, [r7, #22]
 8007256:	8abb      	ldrh	r3, [r7, #20]
 8007258:	429a      	cmp	r2, r3
 800725a:	d3ef      	bcc.n	800723c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	2200      	movs	r2, #0
 8007260:	701a      	strb	r2, [r3, #0]
  }
}
 8007262:	bf00      	nop
 8007264:	371c      	adds	r7, #28
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800726e:	b480      	push	{r7}
 8007270:	b085      	sub	sp, #20
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	881a      	ldrh	r2, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	b29b      	uxth	r3, r3
 8007282:	4413      	add	r3, r2
 8007284:	b29a      	uxth	r2, r3
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4413      	add	r3, r2
 8007294:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007296:	68fb      	ldr	r3, [r7, #12]
}
 8007298:	4618      	mov	r0, r3
 800729a:	3714      	adds	r7, #20
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b086      	sub	sp, #24
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	4613      	mov	r3, r2
 80072b0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80072b2:	2301      	movs	r3, #1
 80072b4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	789b      	ldrb	r3, [r3, #2]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d002      	beq.n	80072c4 <USBH_CtlReq+0x20>
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d00f      	beq.n	80072e2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80072c2:	e027      	b.n	8007314 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	88fa      	ldrh	r2, [r7, #6]
 80072ce:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2201      	movs	r2, #1
 80072d4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2202      	movs	r2, #2
 80072da:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80072dc:	2301      	movs	r3, #1
 80072de:	75fb      	strb	r3, [r7, #23]
      break;
 80072e0:	e018      	b.n	8007314 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f000 f81c 	bl	8007320 <USBH_HandleControl>
 80072e8:	4603      	mov	r3, r0
 80072ea:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80072ec:	7dfb      	ldrb	r3, [r7, #23]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d002      	beq.n	80072f8 <USBH_CtlReq+0x54>
 80072f2:	7dfb      	ldrb	r3, [r7, #23]
 80072f4:	2b03      	cmp	r3, #3
 80072f6:	d106      	bne.n	8007306 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2201      	movs	r2, #1
 80072fc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	761a      	strb	r2, [r3, #24]
      break;
 8007304:	e005      	b.n	8007312 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007306:	7dfb      	ldrb	r3, [r7, #23]
 8007308:	2b02      	cmp	r3, #2
 800730a:	d102      	bne.n	8007312 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2201      	movs	r2, #1
 8007310:	709a      	strb	r2, [r3, #2]
      break;
 8007312:	bf00      	nop
  }
  return status;
 8007314:	7dfb      	ldrb	r3, [r7, #23]
}
 8007316:	4618      	mov	r0, r3
 8007318:	3718      	adds	r7, #24
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
	...

08007320 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af02      	add	r7, sp, #8
 8007326:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007328:	2301      	movs	r3, #1
 800732a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800732c:	2300      	movs	r3, #0
 800732e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	7e1b      	ldrb	r3, [r3, #24]
 8007334:	3b01      	subs	r3, #1
 8007336:	2b0a      	cmp	r3, #10
 8007338:	f200 8156 	bhi.w	80075e8 <USBH_HandleControl+0x2c8>
 800733c:	a201      	add	r2, pc, #4	; (adr r2, 8007344 <USBH_HandleControl+0x24>)
 800733e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007342:	bf00      	nop
 8007344:	08007371 	.word	0x08007371
 8007348:	0800738b 	.word	0x0800738b
 800734c:	080073f5 	.word	0x080073f5
 8007350:	0800741b 	.word	0x0800741b
 8007354:	08007453 	.word	0x08007453
 8007358:	0800747d 	.word	0x0800747d
 800735c:	080074cf 	.word	0x080074cf
 8007360:	080074f1 	.word	0x080074f1
 8007364:	0800752d 	.word	0x0800752d
 8007368:	08007553 	.word	0x08007553
 800736c:	08007591 	.word	0x08007591
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f103 0110 	add.w	r1, r3, #16
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	795b      	ldrb	r3, [r3, #5]
 800737a:	461a      	mov	r2, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 f943 	bl	8007608 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2202      	movs	r2, #2
 8007386:	761a      	strb	r2, [r3, #24]
      break;
 8007388:	e139      	b.n	80075fe <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	795b      	ldrb	r3, [r3, #5]
 800738e:	4619      	mov	r1, r3
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f003 f881 	bl	800a498 <USBH_LL_GetURBState>
 8007396:	4603      	mov	r3, r0
 8007398:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800739a:	7bbb      	ldrb	r3, [r7, #14]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d11e      	bne.n	80073de <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	7c1b      	ldrb	r3, [r3, #16]
 80073a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80073a8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	8adb      	ldrh	r3, [r3, #22]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00a      	beq.n	80073c8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80073b2:	7b7b      	ldrb	r3, [r7, #13]
 80073b4:	2b80      	cmp	r3, #128	; 0x80
 80073b6:	d103      	bne.n	80073c0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2203      	movs	r2, #3
 80073bc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80073be:	e115      	b.n	80075ec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2205      	movs	r2, #5
 80073c4:	761a      	strb	r2, [r3, #24]
      break;
 80073c6:	e111      	b.n	80075ec <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80073c8:	7b7b      	ldrb	r3, [r7, #13]
 80073ca:	2b80      	cmp	r3, #128	; 0x80
 80073cc:	d103      	bne.n	80073d6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2209      	movs	r2, #9
 80073d2:	761a      	strb	r2, [r3, #24]
      break;
 80073d4:	e10a      	b.n	80075ec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2207      	movs	r2, #7
 80073da:	761a      	strb	r2, [r3, #24]
      break;
 80073dc:	e106      	b.n	80075ec <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80073de:	7bbb      	ldrb	r3, [r7, #14]
 80073e0:	2b04      	cmp	r3, #4
 80073e2:	d003      	beq.n	80073ec <USBH_HandleControl+0xcc>
 80073e4:	7bbb      	ldrb	r3, [r7, #14]
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	f040 8100 	bne.w	80075ec <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	220b      	movs	r2, #11
 80073f0:	761a      	strb	r2, [r3, #24]
      break;
 80073f2:	e0fb      	b.n	80075ec <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6899      	ldr	r1, [r3, #8]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	899a      	ldrh	r2, [r3, #12]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	791b      	ldrb	r3, [r3, #4]
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f93a 	bl	8007686 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2204      	movs	r2, #4
 8007416:	761a      	strb	r2, [r3, #24]
      break;
 8007418:	e0f1      	b.n	80075fe <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	791b      	ldrb	r3, [r3, #4]
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f003 f839 	bl	800a498 <USBH_LL_GetURBState>
 8007426:	4603      	mov	r3, r0
 8007428:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800742a:	7bbb      	ldrb	r3, [r7, #14]
 800742c:	2b01      	cmp	r3, #1
 800742e:	d102      	bne.n	8007436 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2209      	movs	r2, #9
 8007434:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007436:	7bbb      	ldrb	r3, [r7, #14]
 8007438:	2b05      	cmp	r3, #5
 800743a:	d102      	bne.n	8007442 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800743c:	2303      	movs	r3, #3
 800743e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007440:	e0d6      	b.n	80075f0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007442:	7bbb      	ldrb	r3, [r7, #14]
 8007444:	2b04      	cmp	r3, #4
 8007446:	f040 80d3 	bne.w	80075f0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	220b      	movs	r2, #11
 800744e:	761a      	strb	r2, [r3, #24]
      break;
 8007450:	e0ce      	b.n	80075f0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6899      	ldr	r1, [r3, #8]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	899a      	ldrh	r2, [r3, #12]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	795b      	ldrb	r3, [r3, #5]
 800745e:	2001      	movs	r0, #1
 8007460:	9000      	str	r0, [sp, #0]
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f8ea 	bl	800763c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800746e:	b29a      	uxth	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2206      	movs	r2, #6
 8007478:	761a      	strb	r2, [r3, #24]
      break;
 800747a:	e0c0      	b.n	80075fe <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	795b      	ldrb	r3, [r3, #5]
 8007480:	4619      	mov	r1, r3
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f003 f808 	bl	800a498 <USBH_LL_GetURBState>
 8007488:	4603      	mov	r3, r0
 800748a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800748c:	7bbb      	ldrb	r3, [r7, #14]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d103      	bne.n	800749a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2207      	movs	r2, #7
 8007496:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007498:	e0ac      	b.n	80075f4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800749a:	7bbb      	ldrb	r3, [r7, #14]
 800749c:	2b05      	cmp	r3, #5
 800749e:	d105      	bne.n	80074ac <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	220c      	movs	r2, #12
 80074a4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80074a6:	2303      	movs	r3, #3
 80074a8:	73fb      	strb	r3, [r7, #15]
      break;
 80074aa:	e0a3      	b.n	80075f4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80074ac:	7bbb      	ldrb	r3, [r7, #14]
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d103      	bne.n	80074ba <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2205      	movs	r2, #5
 80074b6:	761a      	strb	r2, [r3, #24]
      break;
 80074b8:	e09c      	b.n	80075f4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80074ba:	7bbb      	ldrb	r3, [r7, #14]
 80074bc:	2b04      	cmp	r3, #4
 80074be:	f040 8099 	bne.w	80075f4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	220b      	movs	r2, #11
 80074c6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80074c8:	2302      	movs	r3, #2
 80074ca:	73fb      	strb	r3, [r7, #15]
      break;
 80074cc:	e092      	b.n	80075f4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	791b      	ldrb	r3, [r3, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	2100      	movs	r1, #0
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 f8d5 	bl	8007686 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2208      	movs	r2, #8
 80074ec:	761a      	strb	r2, [r3, #24]

      break;
 80074ee:	e086      	b.n	80075fe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	791b      	ldrb	r3, [r3, #4]
 80074f4:	4619      	mov	r1, r3
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f002 ffce 	bl	800a498 <USBH_LL_GetURBState>
 80074fc:	4603      	mov	r3, r0
 80074fe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007500:	7bbb      	ldrb	r3, [r7, #14]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d105      	bne.n	8007512 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	220d      	movs	r2, #13
 800750a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800750c:	2300      	movs	r3, #0
 800750e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007510:	e072      	b.n	80075f8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007512:	7bbb      	ldrb	r3, [r7, #14]
 8007514:	2b04      	cmp	r3, #4
 8007516:	d103      	bne.n	8007520 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	220b      	movs	r2, #11
 800751c:	761a      	strb	r2, [r3, #24]
      break;
 800751e:	e06b      	b.n	80075f8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007520:	7bbb      	ldrb	r3, [r7, #14]
 8007522:	2b05      	cmp	r3, #5
 8007524:	d168      	bne.n	80075f8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007526:	2303      	movs	r3, #3
 8007528:	73fb      	strb	r3, [r7, #15]
      break;
 800752a:	e065      	b.n	80075f8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	795b      	ldrb	r3, [r3, #5]
 8007530:	2201      	movs	r2, #1
 8007532:	9200      	str	r2, [sp, #0]
 8007534:	2200      	movs	r2, #0
 8007536:	2100      	movs	r1, #0
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f87f 	bl	800763c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007544:	b29a      	uxth	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	220a      	movs	r2, #10
 800754e:	761a      	strb	r2, [r3, #24]
      break;
 8007550:	e055      	b.n	80075fe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	795b      	ldrb	r3, [r3, #5]
 8007556:	4619      	mov	r1, r3
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f002 ff9d 	bl	800a498 <USBH_LL_GetURBState>
 800755e:	4603      	mov	r3, r0
 8007560:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007562:	7bbb      	ldrb	r3, [r7, #14]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d105      	bne.n	8007574 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007568:	2300      	movs	r3, #0
 800756a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	220d      	movs	r2, #13
 8007570:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007572:	e043      	b.n	80075fc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007574:	7bbb      	ldrb	r3, [r7, #14]
 8007576:	2b02      	cmp	r3, #2
 8007578:	d103      	bne.n	8007582 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2209      	movs	r2, #9
 800757e:	761a      	strb	r2, [r3, #24]
      break;
 8007580:	e03c      	b.n	80075fc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007582:	7bbb      	ldrb	r3, [r7, #14]
 8007584:	2b04      	cmp	r3, #4
 8007586:	d139      	bne.n	80075fc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	220b      	movs	r2, #11
 800758c:	761a      	strb	r2, [r3, #24]
      break;
 800758e:	e035      	b.n	80075fc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	7e5b      	ldrb	r3, [r3, #25]
 8007594:	3301      	adds	r3, #1
 8007596:	b2da      	uxtb	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	765a      	strb	r2, [r3, #25]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	7e5b      	ldrb	r3, [r3, #25]
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d806      	bhi.n	80075b2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2201      	movs	r2, #1
 80075ae:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80075b0:	e025      	b.n	80075fe <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075b8:	2106      	movs	r1, #6
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	795b      	ldrb	r3, [r3, #5]
 80075c8:	4619      	mov	r1, r3
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f90c 	bl	80077e8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	791b      	ldrb	r3, [r3, #4]
 80075d4:	4619      	mov	r1, r3
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 f906 	bl	80077e8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80075e2:	2302      	movs	r3, #2
 80075e4:	73fb      	strb	r3, [r7, #15]
      break;
 80075e6:	e00a      	b.n	80075fe <USBH_HandleControl+0x2de>

    default:
      break;
 80075e8:	bf00      	nop
 80075ea:	e008      	b.n	80075fe <USBH_HandleControl+0x2de>
      break;
 80075ec:	bf00      	nop
 80075ee:	e006      	b.n	80075fe <USBH_HandleControl+0x2de>
      break;
 80075f0:	bf00      	nop
 80075f2:	e004      	b.n	80075fe <USBH_HandleControl+0x2de>
      break;
 80075f4:	bf00      	nop
 80075f6:	e002      	b.n	80075fe <USBH_HandleControl+0x2de>
      break;
 80075f8:	bf00      	nop
 80075fa:	e000      	b.n	80075fe <USBH_HandleControl+0x2de>
      break;
 80075fc:	bf00      	nop
  }

  return status;
 80075fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007600:	4618      	mov	r0, r3
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b088      	sub	sp, #32
 800760c:	af04      	add	r7, sp, #16
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	4613      	mov	r3, r2
 8007614:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007616:	79f9      	ldrb	r1, [r7, #7]
 8007618:	2300      	movs	r3, #0
 800761a:	9303      	str	r3, [sp, #12]
 800761c:	2308      	movs	r3, #8
 800761e:	9302      	str	r3, [sp, #8]
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	9301      	str	r3, [sp, #4]
 8007624:	2300      	movs	r3, #0
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	2300      	movs	r3, #0
 800762a:	2200      	movs	r2, #0
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f002 ff02 	bl	800a436 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b088      	sub	sp, #32
 8007640:	af04      	add	r7, sp, #16
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	4611      	mov	r1, r2
 8007648:	461a      	mov	r2, r3
 800764a:	460b      	mov	r3, r1
 800764c:	80fb      	strh	r3, [r7, #6]
 800764e:	4613      	mov	r3, r2
 8007650:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007658:	2b00      	cmp	r3, #0
 800765a:	d001      	beq.n	8007660 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800765c:	2300      	movs	r3, #0
 800765e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007660:	7979      	ldrb	r1, [r7, #5]
 8007662:	7e3b      	ldrb	r3, [r7, #24]
 8007664:	9303      	str	r3, [sp, #12]
 8007666:	88fb      	ldrh	r3, [r7, #6]
 8007668:	9302      	str	r3, [sp, #8]
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	9301      	str	r3, [sp, #4]
 800766e:	2301      	movs	r3, #1
 8007670:	9300      	str	r3, [sp, #0]
 8007672:	2300      	movs	r3, #0
 8007674:	2200      	movs	r2, #0
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f002 fedd 	bl	800a436 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b088      	sub	sp, #32
 800768a:	af04      	add	r7, sp, #16
 800768c:	60f8      	str	r0, [r7, #12]
 800768e:	60b9      	str	r1, [r7, #8]
 8007690:	4611      	mov	r1, r2
 8007692:	461a      	mov	r2, r3
 8007694:	460b      	mov	r3, r1
 8007696:	80fb      	strh	r3, [r7, #6]
 8007698:	4613      	mov	r3, r2
 800769a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800769c:	7979      	ldrb	r1, [r7, #5]
 800769e:	2300      	movs	r3, #0
 80076a0:	9303      	str	r3, [sp, #12]
 80076a2:	88fb      	ldrh	r3, [r7, #6]
 80076a4:	9302      	str	r3, [sp, #8]
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	9301      	str	r3, [sp, #4]
 80076aa:	2301      	movs	r3, #1
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	2300      	movs	r3, #0
 80076b0:	2201      	movs	r2, #1
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f002 febf 	bl	800a436 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80076b8:	2300      	movs	r3, #0

}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b088      	sub	sp, #32
 80076c6:	af04      	add	r7, sp, #16
 80076c8:	60f8      	str	r0, [r7, #12]
 80076ca:	60b9      	str	r1, [r7, #8]
 80076cc:	4611      	mov	r1, r2
 80076ce:	461a      	mov	r2, r3
 80076d0:	460b      	mov	r3, r1
 80076d2:	80fb      	strh	r3, [r7, #6]
 80076d4:	4613      	mov	r3, r2
 80076d6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d001      	beq.n	80076e6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80076e2:	2300      	movs	r3, #0
 80076e4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80076e6:	7979      	ldrb	r1, [r7, #5]
 80076e8:	7e3b      	ldrb	r3, [r7, #24]
 80076ea:	9303      	str	r3, [sp, #12]
 80076ec:	88fb      	ldrh	r3, [r7, #6]
 80076ee:	9302      	str	r3, [sp, #8]
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	9301      	str	r3, [sp, #4]
 80076f4:	2301      	movs	r3, #1
 80076f6:	9300      	str	r3, [sp, #0]
 80076f8:	2302      	movs	r3, #2
 80076fa:	2200      	movs	r2, #0
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f002 fe9a 	bl	800a436 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b088      	sub	sp, #32
 8007710:	af04      	add	r7, sp, #16
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	4611      	mov	r1, r2
 8007718:	461a      	mov	r2, r3
 800771a:	460b      	mov	r3, r1
 800771c:	80fb      	strh	r3, [r7, #6]
 800771e:	4613      	mov	r3, r2
 8007720:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007722:	7979      	ldrb	r1, [r7, #5]
 8007724:	2300      	movs	r3, #0
 8007726:	9303      	str	r3, [sp, #12]
 8007728:	88fb      	ldrh	r3, [r7, #6]
 800772a:	9302      	str	r3, [sp, #8]
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	9301      	str	r3, [sp, #4]
 8007730:	2301      	movs	r3, #1
 8007732:	9300      	str	r3, [sp, #0]
 8007734:	2302      	movs	r3, #2
 8007736:	2201      	movs	r2, #1
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f002 fe7c 	bl	800a436 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b086      	sub	sp, #24
 800774c:	af04      	add	r7, sp, #16
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	4608      	mov	r0, r1
 8007752:	4611      	mov	r1, r2
 8007754:	461a      	mov	r2, r3
 8007756:	4603      	mov	r3, r0
 8007758:	70fb      	strb	r3, [r7, #3]
 800775a:	460b      	mov	r3, r1
 800775c:	70bb      	strb	r3, [r7, #2]
 800775e:	4613      	mov	r3, r2
 8007760:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007762:	7878      	ldrb	r0, [r7, #1]
 8007764:	78ba      	ldrb	r2, [r7, #2]
 8007766:	78f9      	ldrb	r1, [r7, #3]
 8007768:	8b3b      	ldrh	r3, [r7, #24]
 800776a:	9302      	str	r3, [sp, #8]
 800776c:	7d3b      	ldrb	r3, [r7, #20]
 800776e:	9301      	str	r3, [sp, #4]
 8007770:	7c3b      	ldrb	r3, [r7, #16]
 8007772:	9300      	str	r3, [sp, #0]
 8007774:	4603      	mov	r3, r0
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f002 fe0f 	bl	800a39a <USBH_LL_OpenPipe>

  return USBH_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3708      	adds	r7, #8
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b082      	sub	sp, #8
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	460b      	mov	r3, r1
 8007790:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007792:	78fb      	ldrb	r3, [r7, #3]
 8007794:	4619      	mov	r1, r3
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f002 fe2e 	bl	800a3f8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b084      	sub	sp, #16
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
 80077ae:	460b      	mov	r3, r1
 80077b0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f836 	bl	8007824 <USBH_GetFreePipe>
 80077b8:	4603      	mov	r3, r0
 80077ba:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80077bc:	89fb      	ldrh	r3, [r7, #14]
 80077be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d00a      	beq.n	80077dc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80077c6:	78fa      	ldrb	r2, [r7, #3]
 80077c8:	89fb      	ldrh	r3, [r7, #14]
 80077ca:	f003 030f 	and.w	r3, r3, #15
 80077ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077d2:	6879      	ldr	r1, [r7, #4]
 80077d4:	33e0      	adds	r3, #224	; 0xe0
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	440b      	add	r3, r1
 80077da:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80077dc:	89fb      	ldrh	r3, [r7, #14]
 80077de:	b2db      	uxtb	r3, r3
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3710      	adds	r7, #16
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	460b      	mov	r3, r1
 80077f2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80077f4:	78fb      	ldrb	r3, [r7, #3]
 80077f6:	2b0f      	cmp	r3, #15
 80077f8:	d80d      	bhi.n	8007816 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80077fa:	78fb      	ldrb	r3, [r7, #3]
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	33e0      	adds	r3, #224	; 0xe0
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	4413      	add	r3, r2
 8007804:	685a      	ldr	r2, [r3, #4]
 8007806:	78fb      	ldrb	r3, [r7, #3]
 8007808:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800780c:	6879      	ldr	r1, [r7, #4]
 800780e:	33e0      	adds	r3, #224	; 0xe0
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	440b      	add	r3, r1
 8007814:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800782c:	2300      	movs	r3, #0
 800782e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007830:	2300      	movs	r3, #0
 8007832:	73fb      	strb	r3, [r7, #15]
 8007834:	e00f      	b.n	8007856 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007836:	7bfb      	ldrb	r3, [r7, #15]
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	33e0      	adds	r3, #224	; 0xe0
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4413      	add	r3, r2
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d102      	bne.n	8007850 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800784a:	7bfb      	ldrb	r3, [r7, #15]
 800784c:	b29b      	uxth	r3, r3
 800784e:	e007      	b.n	8007860 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007850:	7bfb      	ldrb	r3, [r7, #15]
 8007852:	3301      	adds	r3, #1
 8007854:	73fb      	strb	r3, [r7, #15]
 8007856:	7bfb      	ldrb	r3, [r7, #15]
 8007858:	2b0f      	cmp	r3, #15
 800785a:	d9ec      	bls.n	8007836 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800785c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007860:	4618      	mov	r0, r3
 8007862:	3714      	adds	r7, #20
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	4603      	mov	r3, r0
 8007874:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007876:	79fb      	ldrb	r3, [r7, #7]
 8007878:	4a08      	ldr	r2, [pc, #32]	; (800789c <disk_status+0x30>)
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	4413      	add	r3, r2
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	79fa      	ldrb	r2, [r7, #7]
 8007884:	4905      	ldr	r1, [pc, #20]	; (800789c <disk_status+0x30>)
 8007886:	440a      	add	r2, r1
 8007888:	7a12      	ldrb	r2, [r2, #8]
 800788a:	4610      	mov	r0, r2
 800788c:	4798      	blx	r3
 800788e:	4603      	mov	r3, r0
 8007890:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007892:	7bfb      	ldrb	r3, [r7, #15]
}
 8007894:	4618      	mov	r0, r3
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	20000130 	.word	0x20000130

080078a0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	4603      	mov	r3, r0
 80078a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80078aa:	2300      	movs	r3, #0
 80078ac:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80078ae:	79fb      	ldrb	r3, [r7, #7]
 80078b0:	4a0d      	ldr	r2, [pc, #52]	; (80078e8 <disk_initialize+0x48>)
 80078b2:	5cd3      	ldrb	r3, [r2, r3]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d111      	bne.n	80078dc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80078b8:	79fb      	ldrb	r3, [r7, #7]
 80078ba:	4a0b      	ldr	r2, [pc, #44]	; (80078e8 <disk_initialize+0x48>)
 80078bc:	2101      	movs	r1, #1
 80078be:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80078c0:	79fb      	ldrb	r3, [r7, #7]
 80078c2:	4a09      	ldr	r2, [pc, #36]	; (80078e8 <disk_initialize+0x48>)
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	4413      	add	r3, r2
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	79fa      	ldrb	r2, [r7, #7]
 80078ce:	4906      	ldr	r1, [pc, #24]	; (80078e8 <disk_initialize+0x48>)
 80078d0:	440a      	add	r2, r1
 80078d2:	7a12      	ldrb	r2, [r2, #8]
 80078d4:	4610      	mov	r0, r2
 80078d6:	4798      	blx	r3
 80078d8:	4603      	mov	r3, r0
 80078da:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80078dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3710      	adds	r7, #16
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	20000130 	.word	0x20000130

080078ec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80078ec:	b590      	push	{r4, r7, lr}
 80078ee:	b087      	sub	sp, #28
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60b9      	str	r1, [r7, #8]
 80078f4:	607a      	str	r2, [r7, #4]
 80078f6:	603b      	str	r3, [r7, #0]
 80078f8:	4603      	mov	r3, r0
 80078fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
 80078fe:	4a0a      	ldr	r2, [pc, #40]	; (8007928 <disk_read+0x3c>)
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4413      	add	r3, r2
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	689c      	ldr	r4, [r3, #8]
 8007908:	7bfb      	ldrb	r3, [r7, #15]
 800790a:	4a07      	ldr	r2, [pc, #28]	; (8007928 <disk_read+0x3c>)
 800790c:	4413      	add	r3, r2
 800790e:	7a18      	ldrb	r0, [r3, #8]
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	68b9      	ldr	r1, [r7, #8]
 8007916:	47a0      	blx	r4
 8007918:	4603      	mov	r3, r0
 800791a:	75fb      	strb	r3, [r7, #23]
  return res;
 800791c:	7dfb      	ldrb	r3, [r7, #23]
}
 800791e:	4618      	mov	r0, r3
 8007920:	371c      	adds	r7, #28
 8007922:	46bd      	mov	sp, r7
 8007924:	bd90      	pop	{r4, r7, pc}
 8007926:	bf00      	nop
 8007928:	20000130 	.word	0x20000130

0800792c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800792c:	b590      	push	{r4, r7, lr}
 800792e:	b087      	sub	sp, #28
 8007930:	af00      	add	r7, sp, #0
 8007932:	60b9      	str	r1, [r7, #8]
 8007934:	607a      	str	r2, [r7, #4]
 8007936:	603b      	str	r3, [r7, #0]
 8007938:	4603      	mov	r3, r0
 800793a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800793c:	7bfb      	ldrb	r3, [r7, #15]
 800793e:	4a0a      	ldr	r2, [pc, #40]	; (8007968 <disk_write+0x3c>)
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	4413      	add	r3, r2
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	68dc      	ldr	r4, [r3, #12]
 8007948:	7bfb      	ldrb	r3, [r7, #15]
 800794a:	4a07      	ldr	r2, [pc, #28]	; (8007968 <disk_write+0x3c>)
 800794c:	4413      	add	r3, r2
 800794e:	7a18      	ldrb	r0, [r3, #8]
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	68b9      	ldr	r1, [r7, #8]
 8007956:	47a0      	blx	r4
 8007958:	4603      	mov	r3, r0
 800795a:	75fb      	strb	r3, [r7, #23]
  return res;
 800795c:	7dfb      	ldrb	r3, [r7, #23]
}
 800795e:	4618      	mov	r0, r3
 8007960:	371c      	adds	r7, #28
 8007962:	46bd      	mov	sp, r7
 8007964:	bd90      	pop	{r4, r7, pc}
 8007966:	bf00      	nop
 8007968:	20000130 	.word	0x20000130

0800796c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	4603      	mov	r3, r0
 8007974:	603a      	str	r2, [r7, #0]
 8007976:	71fb      	strb	r3, [r7, #7]
 8007978:	460b      	mov	r3, r1
 800797a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800797c:	79fb      	ldrb	r3, [r7, #7]
 800797e:	4a09      	ldr	r2, [pc, #36]	; (80079a4 <disk_ioctl+0x38>)
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4413      	add	r3, r2
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	79fa      	ldrb	r2, [r7, #7]
 800798a:	4906      	ldr	r1, [pc, #24]	; (80079a4 <disk_ioctl+0x38>)
 800798c:	440a      	add	r2, r1
 800798e:	7a10      	ldrb	r0, [r2, #8]
 8007990:	79b9      	ldrb	r1, [r7, #6]
 8007992:	683a      	ldr	r2, [r7, #0]
 8007994:	4798      	blx	r3
 8007996:	4603      	mov	r3, r0
 8007998:	73fb      	strb	r3, [r7, #15]
  return res;
 800799a:	7bfb      	ldrb	r3, [r7, #15]
}
 800799c:	4618      	mov	r0, r3
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	20000130 	.word	0x20000130

080079a8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	3301      	adds	r3, #1
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80079b8:	89fb      	ldrh	r3, [r7, #14]
 80079ba:	021b      	lsls	r3, r3, #8
 80079bc:	b21a      	sxth	r2, r3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	b21b      	sxth	r3, r3
 80079c4:	4313      	orrs	r3, r2
 80079c6:	b21b      	sxth	r3, r3
 80079c8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80079ca:	89fb      	ldrh	r3, [r7, #14]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3714      	adds	r7, #20
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	3303      	adds	r3, #3
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	021b      	lsls	r3, r3, #8
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	3202      	adds	r2, #2
 80079f0:	7812      	ldrb	r2, [r2, #0]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	021b      	lsls	r3, r3, #8
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	3201      	adds	r2, #1
 80079fe:	7812      	ldrb	r2, [r2, #0]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	021b      	lsls	r3, r3, #8
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	7812      	ldrb	r2, [r2, #0]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	60fb      	str	r3, [r7, #12]
	return rv;
 8007a10:	68fb      	ldr	r3, [r7, #12]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3714      	adds	r7, #20
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr

08007a1e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007a1e:	b480      	push	{r7}
 8007a20:	b083      	sub	sp, #12
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
 8007a26:	460b      	mov	r3, r1
 8007a28:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	1c5a      	adds	r2, r3, #1
 8007a2e:	607a      	str	r2, [r7, #4]
 8007a30:	887a      	ldrh	r2, [r7, #2]
 8007a32:	b2d2      	uxtb	r2, r2
 8007a34:	701a      	strb	r2, [r3, #0]
 8007a36:	887b      	ldrh	r3, [r7, #2]
 8007a38:	0a1b      	lsrs	r3, r3, #8
 8007a3a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	1c5a      	adds	r2, r3, #1
 8007a40:	607a      	str	r2, [r7, #4]
 8007a42:	887a      	ldrh	r2, [r7, #2]
 8007a44:	b2d2      	uxtb	r2, r2
 8007a46:	701a      	strb	r2, [r3, #0]
}
 8007a48:	bf00      	nop
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	1c5a      	adds	r2, r3, #1
 8007a62:	607a      	str	r2, [r7, #4]
 8007a64:	683a      	ldr	r2, [r7, #0]
 8007a66:	b2d2      	uxtb	r2, r2
 8007a68:	701a      	strb	r2, [r3, #0]
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	0a1b      	lsrs	r3, r3, #8
 8007a6e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	1c5a      	adds	r2, r3, #1
 8007a74:	607a      	str	r2, [r7, #4]
 8007a76:	683a      	ldr	r2, [r7, #0]
 8007a78:	b2d2      	uxtb	r2, r2
 8007a7a:	701a      	strb	r2, [r3, #0]
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	0a1b      	lsrs	r3, r3, #8
 8007a80:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	1c5a      	adds	r2, r3, #1
 8007a86:	607a      	str	r2, [r7, #4]
 8007a88:	683a      	ldr	r2, [r7, #0]
 8007a8a:	b2d2      	uxtb	r2, r2
 8007a8c:	701a      	strb	r2, [r3, #0]
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	0a1b      	lsrs	r3, r3, #8
 8007a92:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	1c5a      	adds	r2, r3, #1
 8007a98:	607a      	str	r2, [r7, #4]
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	b2d2      	uxtb	r2, r2
 8007a9e:	701a      	strb	r2, [r3, #0]
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007aac:	b480      	push	{r7}
 8007aae:	b087      	sub	sp, #28
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00d      	beq.n	8007ae2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007ac6:	693a      	ldr	r2, [r7, #16]
 8007ac8:	1c53      	adds	r3, r2, #1
 8007aca:	613b      	str	r3, [r7, #16]
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	1c59      	adds	r1, r3, #1
 8007ad0:	6179      	str	r1, [r7, #20]
 8007ad2:	7812      	ldrb	r2, [r2, #0]
 8007ad4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	607b      	str	r3, [r7, #4]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1f1      	bne.n	8007ac6 <mem_cpy+0x1a>
	}
}
 8007ae2:	bf00      	nop
 8007ae4:	371c      	adds	r7, #28
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr

08007aee <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007aee:	b480      	push	{r7}
 8007af0:	b087      	sub	sp, #28
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	60f8      	str	r0, [r7, #12]
 8007af6:	60b9      	str	r1, [r7, #8]
 8007af8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	1c5a      	adds	r2, r3, #1
 8007b02:	617a      	str	r2, [r7, #20]
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	b2d2      	uxtb	r2, r2
 8007b08:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	607b      	str	r3, [r7, #4]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1f3      	bne.n	8007afe <mem_set+0x10>
}
 8007b16:	bf00      	nop
 8007b18:	bf00      	nop
 8007b1a:	371c      	adds	r7, #28
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007b24:	b480      	push	{r7}
 8007b26:	b089      	sub	sp, #36	; 0x24
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	61fb      	str	r3, [r7, #28]
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	1c5a      	adds	r2, r3, #1
 8007b40:	61fa      	str	r2, [r7, #28]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	4619      	mov	r1, r3
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	1c5a      	adds	r2, r3, #1
 8007b4a:	61ba      	str	r2, [r7, #24]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	1acb      	subs	r3, r1, r3
 8007b50:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	3b01      	subs	r3, #1
 8007b56:	607b      	str	r3, [r7, #4]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d002      	beq.n	8007b64 <mem_cmp+0x40>
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d0eb      	beq.n	8007b3c <mem_cmp+0x18>

	return r;
 8007b64:	697b      	ldr	r3, [r7, #20]
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3724      	adds	r7, #36	; 0x24
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr

08007b72 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007b72:	b480      	push	{r7}
 8007b74:	b083      	sub	sp, #12
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
 8007b7a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007b7c:	e002      	b.n	8007b84 <chk_chr+0x12>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	3301      	adds	r3, #1
 8007b82:	607b      	str	r3, [r7, #4]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d005      	beq.n	8007b98 <chk_chr+0x26>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	461a      	mov	r2, r3
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d1f2      	bne.n	8007b7e <chk_chr+0xc>
	return *str;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	781b      	ldrb	r3, [r3, #0]
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	60bb      	str	r3, [r7, #8]
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	60fb      	str	r3, [r7, #12]
 8007bba:	e029      	b.n	8007c10 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007bbc:	4a27      	ldr	r2, [pc, #156]	; (8007c5c <chk_lock+0xb4>)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	011b      	lsls	r3, r3, #4
 8007bc2:	4413      	add	r3, r2
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d01d      	beq.n	8007c06 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007bca:	4a24      	ldr	r2, [pc, #144]	; (8007c5c <chk_lock+0xb4>)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	011b      	lsls	r3, r3, #4
 8007bd0:	4413      	add	r3, r2
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d116      	bne.n	8007c0a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007bdc:	4a1f      	ldr	r2, [pc, #124]	; (8007c5c <chk_lock+0xb4>)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	011b      	lsls	r3, r3, #4
 8007be2:	4413      	add	r3, r2
 8007be4:	3304      	adds	r3, #4
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d10c      	bne.n	8007c0a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007bf0:	4a1a      	ldr	r2, [pc, #104]	; (8007c5c <chk_lock+0xb4>)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	011b      	lsls	r3, r3, #4
 8007bf6:	4413      	add	r3, r2
 8007bf8:	3308      	adds	r3, #8
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d102      	bne.n	8007c0a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007c04:	e007      	b.n	8007c16 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007c06:	2301      	movs	r3, #1
 8007c08:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	60fb      	str	r3, [r7, #12]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d9d2      	bls.n	8007bbc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	d109      	bne.n	8007c30 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d102      	bne.n	8007c28 <chk_lock+0x80>
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	d101      	bne.n	8007c2c <chk_lock+0x84>
 8007c28:	2300      	movs	r3, #0
 8007c2a:	e010      	b.n	8007c4e <chk_lock+0xa6>
 8007c2c:	2312      	movs	r3, #18
 8007c2e:	e00e      	b.n	8007c4e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d108      	bne.n	8007c48 <chk_lock+0xa0>
 8007c36:	4a09      	ldr	r2, [pc, #36]	; (8007c5c <chk_lock+0xb4>)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	011b      	lsls	r3, r3, #4
 8007c3c:	4413      	add	r3, r2
 8007c3e:	330c      	adds	r3, #12
 8007c40:	881b      	ldrh	r3, [r3, #0]
 8007c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c46:	d101      	bne.n	8007c4c <chk_lock+0xa4>
 8007c48:	2310      	movs	r3, #16
 8007c4a:	e000      	b.n	8007c4e <chk_lock+0xa6>
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3714      	adds	r7, #20
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	20000110 	.word	0x20000110

08007c60 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007c66:	2300      	movs	r3, #0
 8007c68:	607b      	str	r3, [r7, #4]
 8007c6a:	e002      	b.n	8007c72 <enq_lock+0x12>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	607b      	str	r3, [r7, #4]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d806      	bhi.n	8007c86 <enq_lock+0x26>
 8007c78:	4a09      	ldr	r2, [pc, #36]	; (8007ca0 <enq_lock+0x40>)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	011b      	lsls	r3, r3, #4
 8007c7e:	4413      	add	r3, r2
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1f2      	bne.n	8007c6c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	bf14      	ite	ne
 8007c8c:	2301      	movne	r3, #1
 8007c8e:	2300      	moveq	r3, #0
 8007c90:	b2db      	uxtb	r3, r3
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	370c      	adds	r7, #12
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	20000110 	.word	0x20000110

08007ca4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b085      	sub	sp, #20
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007cae:	2300      	movs	r3, #0
 8007cb0:	60fb      	str	r3, [r7, #12]
 8007cb2:	e01f      	b.n	8007cf4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007cb4:	4a41      	ldr	r2, [pc, #260]	; (8007dbc <inc_lock+0x118>)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	011b      	lsls	r3, r3, #4
 8007cba:	4413      	add	r3, r2
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d113      	bne.n	8007cee <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007cc6:	4a3d      	ldr	r2, [pc, #244]	; (8007dbc <inc_lock+0x118>)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	011b      	lsls	r3, r3, #4
 8007ccc:	4413      	add	r3, r2
 8007cce:	3304      	adds	r3, #4
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d109      	bne.n	8007cee <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007cda:	4a38      	ldr	r2, [pc, #224]	; (8007dbc <inc_lock+0x118>)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	011b      	lsls	r3, r3, #4
 8007ce0:	4413      	add	r3, r2
 8007ce2:	3308      	adds	r3, #8
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d006      	beq.n	8007cfc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	60fb      	str	r3, [r7, #12]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d9dc      	bls.n	8007cb4 <inc_lock+0x10>
 8007cfa:	e000      	b.n	8007cfe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007cfc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d132      	bne.n	8007d6a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007d04:	2300      	movs	r3, #0
 8007d06:	60fb      	str	r3, [r7, #12]
 8007d08:	e002      	b.n	8007d10 <inc_lock+0x6c>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	60fb      	str	r3, [r7, #12]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d806      	bhi.n	8007d24 <inc_lock+0x80>
 8007d16:	4a29      	ldr	r2, [pc, #164]	; (8007dbc <inc_lock+0x118>)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	011b      	lsls	r3, r3, #4
 8007d1c:	4413      	add	r3, r2
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1f2      	bne.n	8007d0a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	d101      	bne.n	8007d2e <inc_lock+0x8a>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	e040      	b.n	8007db0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	4922      	ldr	r1, [pc, #136]	; (8007dbc <inc_lock+0x118>)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	011b      	lsls	r3, r3, #4
 8007d38:	440b      	add	r3, r1
 8007d3a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	689a      	ldr	r2, [r3, #8]
 8007d40:	491e      	ldr	r1, [pc, #120]	; (8007dbc <inc_lock+0x118>)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	011b      	lsls	r3, r3, #4
 8007d46:	440b      	add	r3, r1
 8007d48:	3304      	adds	r3, #4
 8007d4a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	695a      	ldr	r2, [r3, #20]
 8007d50:	491a      	ldr	r1, [pc, #104]	; (8007dbc <inc_lock+0x118>)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	011b      	lsls	r3, r3, #4
 8007d56:	440b      	add	r3, r1
 8007d58:	3308      	adds	r3, #8
 8007d5a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007d5c:	4a17      	ldr	r2, [pc, #92]	; (8007dbc <inc_lock+0x118>)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	011b      	lsls	r3, r3, #4
 8007d62:	4413      	add	r3, r2
 8007d64:	330c      	adds	r3, #12
 8007d66:	2200      	movs	r2, #0
 8007d68:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d009      	beq.n	8007d84 <inc_lock+0xe0>
 8007d70:	4a12      	ldr	r2, [pc, #72]	; (8007dbc <inc_lock+0x118>)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	011b      	lsls	r3, r3, #4
 8007d76:	4413      	add	r3, r2
 8007d78:	330c      	adds	r3, #12
 8007d7a:	881b      	ldrh	r3, [r3, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d001      	beq.n	8007d84 <inc_lock+0xe0>
 8007d80:	2300      	movs	r3, #0
 8007d82:	e015      	b.n	8007db0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d108      	bne.n	8007d9c <inc_lock+0xf8>
 8007d8a:	4a0c      	ldr	r2, [pc, #48]	; (8007dbc <inc_lock+0x118>)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	011b      	lsls	r3, r3, #4
 8007d90:	4413      	add	r3, r2
 8007d92:	330c      	adds	r3, #12
 8007d94:	881b      	ldrh	r3, [r3, #0]
 8007d96:	3301      	adds	r3, #1
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	e001      	b.n	8007da0 <inc_lock+0xfc>
 8007d9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007da0:	4906      	ldr	r1, [pc, #24]	; (8007dbc <inc_lock+0x118>)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	011b      	lsls	r3, r3, #4
 8007da6:	440b      	add	r3, r1
 8007da8:	330c      	adds	r3, #12
 8007daa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	3301      	adds	r3, #1
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3714      	adds	r7, #20
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr
 8007dbc:	20000110 	.word	0x20000110

08007dc0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	607b      	str	r3, [r7, #4]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d825      	bhi.n	8007e20 <dec_lock+0x60>
		n = Files[i].ctr;
 8007dd4:	4a17      	ldr	r2, [pc, #92]	; (8007e34 <dec_lock+0x74>)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	011b      	lsls	r3, r3, #4
 8007dda:	4413      	add	r3, r2
 8007ddc:	330c      	adds	r3, #12
 8007dde:	881b      	ldrh	r3, [r3, #0]
 8007de0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007de2:	89fb      	ldrh	r3, [r7, #14]
 8007de4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007de8:	d101      	bne.n	8007dee <dec_lock+0x2e>
 8007dea:	2300      	movs	r3, #0
 8007dec:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007dee:	89fb      	ldrh	r3, [r7, #14]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d002      	beq.n	8007dfa <dec_lock+0x3a>
 8007df4:	89fb      	ldrh	r3, [r7, #14]
 8007df6:	3b01      	subs	r3, #1
 8007df8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007dfa:	4a0e      	ldr	r2, [pc, #56]	; (8007e34 <dec_lock+0x74>)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	011b      	lsls	r3, r3, #4
 8007e00:	4413      	add	r3, r2
 8007e02:	330c      	adds	r3, #12
 8007e04:	89fa      	ldrh	r2, [r7, #14]
 8007e06:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007e08:	89fb      	ldrh	r3, [r7, #14]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d105      	bne.n	8007e1a <dec_lock+0x5a>
 8007e0e:	4a09      	ldr	r2, [pc, #36]	; (8007e34 <dec_lock+0x74>)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	011b      	lsls	r3, r3, #4
 8007e14:	4413      	add	r3, r2
 8007e16:	2200      	movs	r2, #0
 8007e18:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	737b      	strb	r3, [r7, #13]
 8007e1e:	e001      	b.n	8007e24 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007e20:	2302      	movs	r3, #2
 8007e22:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007e24:	7b7b      	ldrb	r3, [r7, #13]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3714      	adds	r7, #20
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	20000110 	.word	0x20000110

08007e38 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007e40:	2300      	movs	r3, #0
 8007e42:	60fb      	str	r3, [r7, #12]
 8007e44:	e010      	b.n	8007e68 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007e46:	4a0d      	ldr	r2, [pc, #52]	; (8007e7c <clear_lock+0x44>)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	011b      	lsls	r3, r3, #4
 8007e4c:	4413      	add	r3, r2
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d105      	bne.n	8007e62 <clear_lock+0x2a>
 8007e56:	4a09      	ldr	r2, [pc, #36]	; (8007e7c <clear_lock+0x44>)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	011b      	lsls	r3, r3, #4
 8007e5c:	4413      	add	r3, r2
 8007e5e:	2200      	movs	r2, #0
 8007e60:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	3301      	adds	r3, #1
 8007e66:	60fb      	str	r3, [r7, #12]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d9eb      	bls.n	8007e46 <clear_lock+0xe>
	}
}
 8007e6e:	bf00      	nop
 8007e70:	bf00      	nop
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr
 8007e7c:	20000110 	.word	0x20000110

08007e80 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b086      	sub	sp, #24
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	78db      	ldrb	r3, [r3, #3]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d034      	beq.n	8007efe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e98:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	7858      	ldrb	r0, [r3, #1]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	697a      	ldr	r2, [r7, #20]
 8007ea8:	f7ff fd40 	bl	800792c <disk_write>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d002      	beq.n	8007eb8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	73fb      	strb	r3, [r7, #15]
 8007eb6:	e022      	b.n	8007efe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	697a      	ldr	r2, [r7, #20]
 8007ec4:	1ad2      	subs	r2, r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	699b      	ldr	r3, [r3, #24]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d217      	bcs.n	8007efe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	789b      	ldrb	r3, [r3, #2]
 8007ed2:	613b      	str	r3, [r7, #16]
 8007ed4:	e010      	b.n	8007ef8 <sync_window+0x78>
					wsect += fs->fsize;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	699b      	ldr	r3, [r3, #24]
 8007eda:	697a      	ldr	r2, [r7, #20]
 8007edc:	4413      	add	r3, r2
 8007ede:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	7858      	ldrb	r0, [r3, #1]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007eea:	2301      	movs	r3, #1
 8007eec:	697a      	ldr	r2, [r7, #20]
 8007eee:	f7ff fd1d 	bl	800792c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	613b      	str	r3, [r7, #16]
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d8eb      	bhi.n	8007ed6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3718      	adds	r7, #24
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007f12:	2300      	movs	r3, #0
 8007f14:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d01b      	beq.n	8007f58 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f7ff ffad 	bl	8007e80 <sync_window>
 8007f26:	4603      	mov	r3, r0
 8007f28:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007f2a:	7bfb      	ldrb	r3, [r7, #15]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d113      	bne.n	8007f58 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	7858      	ldrb	r0, [r3, #1]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	683a      	ldr	r2, [r7, #0]
 8007f3e:	f7ff fcd5 	bl	80078ec <disk_read>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d004      	beq.n	8007f52 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007f48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f4c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	683a      	ldr	r2, [r7, #0]
 8007f56:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
	...

08007f64 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f7ff ff87 	bl	8007e80 <sync_window>
 8007f72:	4603      	mov	r3, r0
 8007f74:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007f76:	7bfb      	ldrb	r3, [r7, #15]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d158      	bne.n	800802e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	2b03      	cmp	r3, #3
 8007f82:	d148      	bne.n	8008016 <sync_fs+0xb2>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	791b      	ldrb	r3, [r3, #4]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d144      	bne.n	8008016 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	3330      	adds	r3, #48	; 0x30
 8007f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f94:	2100      	movs	r1, #0
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7ff fda9 	bl	8007aee <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	3330      	adds	r3, #48	; 0x30
 8007fa0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007fa4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7ff fd38 	bl	8007a1e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	3330      	adds	r3, #48	; 0x30
 8007fb2:	4921      	ldr	r1, [pc, #132]	; (8008038 <sync_fs+0xd4>)
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7ff fd4d 	bl	8007a54 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	3330      	adds	r3, #48	; 0x30
 8007fbe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007fc2:	491e      	ldr	r1, [pc, #120]	; (800803c <sync_fs+0xd8>)
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7ff fd45 	bl	8007a54 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	3330      	adds	r3, #48	; 0x30
 8007fce:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	4610      	mov	r0, r2
 8007fda:	f7ff fd3b 	bl	8007a54 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	3330      	adds	r3, #48	; 0x30
 8007fe2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	4619      	mov	r1, r3
 8007fec:	4610      	mov	r0, r2
 8007fee:	f7ff fd31 	bl	8007a54 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	69db      	ldr	r3, [r3, #28]
 8007ff6:	1c5a      	adds	r2, r3, #1
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	7858      	ldrb	r0, [r3, #1]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800800a:	2301      	movs	r3, #1
 800800c:	f7ff fc8e 	bl	800792c <disk_write>
			fs->fsi_flag = 0;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	785b      	ldrb	r3, [r3, #1]
 800801a:	2200      	movs	r2, #0
 800801c:	2100      	movs	r1, #0
 800801e:	4618      	mov	r0, r3
 8008020:	f7ff fca4 	bl	800796c <disk_ioctl>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d001      	beq.n	800802e <sync_fs+0xca>
 800802a:	2301      	movs	r3, #1
 800802c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800802e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008030:	4618      	mov	r0, r3
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	41615252 	.word	0x41615252
 800803c:	61417272 	.word	0x61417272

08008040 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	3b02      	subs	r3, #2
 800804e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	695b      	ldr	r3, [r3, #20]
 8008054:	3b02      	subs	r3, #2
 8008056:	683a      	ldr	r2, [r7, #0]
 8008058:	429a      	cmp	r2, r3
 800805a:	d301      	bcc.n	8008060 <clust2sect+0x20>
 800805c:	2300      	movs	r3, #0
 800805e:	e008      	b.n	8008072 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	895b      	ldrh	r3, [r3, #10]
 8008064:	461a      	mov	r2, r3
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	fb03 f202 	mul.w	r2, r3, r2
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008070:	4413      	add	r3, r2
}
 8008072:	4618      	mov	r0, r3
 8008074:	370c      	adds	r7, #12
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b086      	sub	sp, #24
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
 8008086:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d904      	bls.n	800809e <get_fat+0x20>
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	695b      	ldr	r3, [r3, #20]
 8008098:	683a      	ldr	r2, [r7, #0]
 800809a:	429a      	cmp	r2, r3
 800809c:	d302      	bcc.n	80080a4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800809e:	2301      	movs	r3, #1
 80080a0:	617b      	str	r3, [r7, #20]
 80080a2:	e08f      	b.n	80081c4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80080a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080a8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	2b03      	cmp	r3, #3
 80080b0:	d062      	beq.n	8008178 <get_fat+0xfa>
 80080b2:	2b03      	cmp	r3, #3
 80080b4:	dc7c      	bgt.n	80081b0 <get_fat+0x132>
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d002      	beq.n	80080c0 <get_fat+0x42>
 80080ba:	2b02      	cmp	r3, #2
 80080bc:	d042      	beq.n	8008144 <get_fat+0xc6>
 80080be:	e077      	b.n	80081b0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	60fb      	str	r3, [r7, #12]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	085b      	lsrs	r3, r3, #1
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	4413      	add	r3, r2
 80080cc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	6a1a      	ldr	r2, [r3, #32]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	0a5b      	lsrs	r3, r3, #9
 80080d6:	4413      	add	r3, r2
 80080d8:	4619      	mov	r1, r3
 80080da:	6938      	ldr	r0, [r7, #16]
 80080dc:	f7ff ff14 	bl	8007f08 <move_window>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d167      	bne.n	80081b6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	1c5a      	adds	r2, r3, #1
 80080ea:	60fa      	str	r2, [r7, #12]
 80080ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080f0:	693a      	ldr	r2, [r7, #16]
 80080f2:	4413      	add	r3, r2
 80080f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80080f8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	6a1a      	ldr	r2, [r3, #32]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	0a5b      	lsrs	r3, r3, #9
 8008102:	4413      	add	r3, r2
 8008104:	4619      	mov	r1, r3
 8008106:	6938      	ldr	r0, [r7, #16]
 8008108:	f7ff fefe 	bl	8007f08 <move_window>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d153      	bne.n	80081ba <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008118:	693a      	ldr	r2, [r7, #16]
 800811a:	4413      	add	r3, r2
 800811c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008120:	021b      	lsls	r3, r3, #8
 8008122:	461a      	mov	r2, r3
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	4313      	orrs	r3, r2
 8008128:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	f003 0301 	and.w	r3, r3, #1
 8008130:	2b00      	cmp	r3, #0
 8008132:	d002      	beq.n	800813a <get_fat+0xbc>
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	091b      	lsrs	r3, r3, #4
 8008138:	e002      	b.n	8008140 <get_fat+0xc2>
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008140:	617b      	str	r3, [r7, #20]
			break;
 8008142:	e03f      	b.n	80081c4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	6a1a      	ldr	r2, [r3, #32]
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	0a1b      	lsrs	r3, r3, #8
 800814c:	4413      	add	r3, r2
 800814e:	4619      	mov	r1, r3
 8008150:	6938      	ldr	r0, [r7, #16]
 8008152:	f7ff fed9 	bl	8007f08 <move_window>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d130      	bne.n	80081be <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	005b      	lsls	r3, r3, #1
 8008166:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800816a:	4413      	add	r3, r2
 800816c:	4618      	mov	r0, r3
 800816e:	f7ff fc1b 	bl	80079a8 <ld_word>
 8008172:	4603      	mov	r3, r0
 8008174:	617b      	str	r3, [r7, #20]
			break;
 8008176:	e025      	b.n	80081c4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	6a1a      	ldr	r2, [r3, #32]
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	09db      	lsrs	r3, r3, #7
 8008180:	4413      	add	r3, r2
 8008182:	4619      	mov	r1, r3
 8008184:	6938      	ldr	r0, [r7, #16]
 8008186:	f7ff febf 	bl	8007f08 <move_window>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d118      	bne.n	80081c2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800819e:	4413      	add	r3, r2
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7ff fc19 	bl	80079d8 <ld_dword>
 80081a6:	4603      	mov	r3, r0
 80081a8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80081ac:	617b      	str	r3, [r7, #20]
			break;
 80081ae:	e009      	b.n	80081c4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80081b0:	2301      	movs	r3, #1
 80081b2:	617b      	str	r3, [r7, #20]
 80081b4:	e006      	b.n	80081c4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80081b6:	bf00      	nop
 80081b8:	e004      	b.n	80081c4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80081ba:	bf00      	nop
 80081bc:	e002      	b.n	80081c4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80081be:	bf00      	nop
 80081c0:	e000      	b.n	80081c4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80081c2:	bf00      	nop
		}
	}

	return val;
 80081c4:	697b      	ldr	r3, [r7, #20]
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3718      	adds	r7, #24
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80081ce:	b590      	push	{r4, r7, lr}
 80081d0:	b089      	sub	sp, #36	; 0x24
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	60f8      	str	r0, [r7, #12]
 80081d6:	60b9      	str	r1, [r7, #8]
 80081d8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80081da:	2302      	movs	r3, #2
 80081dc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	f240 80d2 	bls.w	800838a <put_fat+0x1bc>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	695b      	ldr	r3, [r3, #20]
 80081ea:	68ba      	ldr	r2, [r7, #8]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	f080 80cc 	bcs.w	800838a <put_fat+0x1bc>
		switch (fs->fs_type) {
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	2b03      	cmp	r3, #3
 80081f8:	f000 8096 	beq.w	8008328 <put_fat+0x15a>
 80081fc:	2b03      	cmp	r3, #3
 80081fe:	f300 80cd 	bgt.w	800839c <put_fat+0x1ce>
 8008202:	2b01      	cmp	r3, #1
 8008204:	d002      	beq.n	800820c <put_fat+0x3e>
 8008206:	2b02      	cmp	r3, #2
 8008208:	d06e      	beq.n	80082e8 <put_fat+0x11a>
 800820a:	e0c7      	b.n	800839c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	61bb      	str	r3, [r7, #24]
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	085b      	lsrs	r3, r3, #1
 8008214:	69ba      	ldr	r2, [r7, #24]
 8008216:	4413      	add	r3, r2
 8008218:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6a1a      	ldr	r2, [r3, #32]
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	0a5b      	lsrs	r3, r3, #9
 8008222:	4413      	add	r3, r2
 8008224:	4619      	mov	r1, r3
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f7ff fe6e 	bl	8007f08 <move_window>
 800822c:	4603      	mov	r3, r0
 800822e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008230:	7ffb      	ldrb	r3, [r7, #31]
 8008232:	2b00      	cmp	r3, #0
 8008234:	f040 80ab 	bne.w	800838e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800823e:	69bb      	ldr	r3, [r7, #24]
 8008240:	1c59      	adds	r1, r3, #1
 8008242:	61b9      	str	r1, [r7, #24]
 8008244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008248:	4413      	add	r3, r2
 800824a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	f003 0301 	and.w	r3, r3, #1
 8008252:	2b00      	cmp	r3, #0
 8008254:	d00d      	beq.n	8008272 <put_fat+0xa4>
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	b25b      	sxtb	r3, r3
 800825c:	f003 030f 	and.w	r3, r3, #15
 8008260:	b25a      	sxtb	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	b2db      	uxtb	r3, r3
 8008266:	011b      	lsls	r3, r3, #4
 8008268:	b25b      	sxtb	r3, r3
 800826a:	4313      	orrs	r3, r2
 800826c:	b25b      	sxtb	r3, r3
 800826e:	b2db      	uxtb	r3, r3
 8008270:	e001      	b.n	8008276 <put_fat+0xa8>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	b2db      	uxtb	r3, r3
 8008276:	697a      	ldr	r2, [r7, #20]
 8008278:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2201      	movs	r2, #1
 800827e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6a1a      	ldr	r2, [r3, #32]
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	0a5b      	lsrs	r3, r3, #9
 8008288:	4413      	add	r3, r2
 800828a:	4619      	mov	r1, r3
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f7ff fe3b 	bl	8007f08 <move_window>
 8008292:	4603      	mov	r3, r0
 8008294:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008296:	7ffb      	ldrb	r3, [r7, #31]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d17a      	bne.n	8008392 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082a8:	4413      	add	r3, r2
 80082aa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	f003 0301 	and.w	r3, r3, #1
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d003      	beq.n	80082be <put_fat+0xf0>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	091b      	lsrs	r3, r3, #4
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	e00e      	b.n	80082dc <put_fat+0x10e>
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	b25b      	sxtb	r3, r3
 80082c4:	f023 030f 	bic.w	r3, r3, #15
 80082c8:	b25a      	sxtb	r2, r3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	0a1b      	lsrs	r3, r3, #8
 80082ce:	b25b      	sxtb	r3, r3
 80082d0:	f003 030f 	and.w	r3, r3, #15
 80082d4:	b25b      	sxtb	r3, r3
 80082d6:	4313      	orrs	r3, r2
 80082d8:	b25b      	sxtb	r3, r3
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	697a      	ldr	r2, [r7, #20]
 80082de:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2201      	movs	r2, #1
 80082e4:	70da      	strb	r2, [r3, #3]
			break;
 80082e6:	e059      	b.n	800839c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6a1a      	ldr	r2, [r3, #32]
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	0a1b      	lsrs	r3, r3, #8
 80082f0:	4413      	add	r3, r2
 80082f2:	4619      	mov	r1, r3
 80082f4:	68f8      	ldr	r0, [r7, #12]
 80082f6:	f7ff fe07 	bl	8007f08 <move_window>
 80082fa:	4603      	mov	r3, r0
 80082fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80082fe:	7ffb      	ldrb	r3, [r7, #31]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d148      	bne.n	8008396 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	005b      	lsls	r3, r3, #1
 800830e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008312:	4413      	add	r3, r2
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	b292      	uxth	r2, r2
 8008318:	4611      	mov	r1, r2
 800831a:	4618      	mov	r0, r3
 800831c:	f7ff fb7f 	bl	8007a1e <st_word>
			fs->wflag = 1;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2201      	movs	r2, #1
 8008324:	70da      	strb	r2, [r3, #3]
			break;
 8008326:	e039      	b.n	800839c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6a1a      	ldr	r2, [r3, #32]
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	09db      	lsrs	r3, r3, #7
 8008330:	4413      	add	r3, r2
 8008332:	4619      	mov	r1, r3
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f7ff fde7 	bl	8007f08 <move_window>
 800833a:	4603      	mov	r3, r0
 800833c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800833e:	7ffb      	ldrb	r3, [r7, #31]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d12a      	bne.n	800839a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008358:	4413      	add	r3, r2
 800835a:	4618      	mov	r0, r3
 800835c:	f7ff fb3c 	bl	80079d8 <ld_dword>
 8008360:	4603      	mov	r3, r0
 8008362:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008366:	4323      	orrs	r3, r4
 8008368:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008378:	4413      	add	r3, r2
 800837a:	6879      	ldr	r1, [r7, #4]
 800837c:	4618      	mov	r0, r3
 800837e:	f7ff fb69 	bl	8007a54 <st_dword>
			fs->wflag = 1;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2201      	movs	r2, #1
 8008386:	70da      	strb	r2, [r3, #3]
			break;
 8008388:	e008      	b.n	800839c <put_fat+0x1ce>
		}
	}
 800838a:	bf00      	nop
 800838c:	e006      	b.n	800839c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800838e:	bf00      	nop
 8008390:	e004      	b.n	800839c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008392:	bf00      	nop
 8008394:	e002      	b.n	800839c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008396:	bf00      	nop
 8008398:	e000      	b.n	800839c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800839a:	bf00      	nop
	return res;
 800839c:	7ffb      	ldrb	r3, [r7, #31]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3724      	adds	r7, #36	; 0x24
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd90      	pop	{r4, r7, pc}

080083a6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b088      	sub	sp, #32
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	60f8      	str	r0, [r7, #12]
 80083ae:	60b9      	str	r1, [r7, #8]
 80083b0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80083b2:	2300      	movs	r3, #0
 80083b4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d904      	bls.n	80083cc <remove_chain+0x26>
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	695b      	ldr	r3, [r3, #20]
 80083c6:	68ba      	ldr	r2, [r7, #8]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d301      	bcc.n	80083d0 <remove_chain+0x2a>
 80083cc:	2302      	movs	r3, #2
 80083ce:	e04b      	b.n	8008468 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d00c      	beq.n	80083f0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80083d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083da:	6879      	ldr	r1, [r7, #4]
 80083dc:	69b8      	ldr	r0, [r7, #24]
 80083de:	f7ff fef6 	bl	80081ce <put_fat>
 80083e2:	4603      	mov	r3, r0
 80083e4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80083e6:	7ffb      	ldrb	r3, [r7, #31]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d001      	beq.n	80083f0 <remove_chain+0x4a>
 80083ec:	7ffb      	ldrb	r3, [r7, #31]
 80083ee:	e03b      	b.n	8008468 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80083f0:	68b9      	ldr	r1, [r7, #8]
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f7ff fe43 	bl	800807e <get_fat>
 80083f8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d031      	beq.n	8008464 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	2b01      	cmp	r3, #1
 8008404:	d101      	bne.n	800840a <remove_chain+0x64>
 8008406:	2302      	movs	r3, #2
 8008408:	e02e      	b.n	8008468 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008410:	d101      	bne.n	8008416 <remove_chain+0x70>
 8008412:	2301      	movs	r3, #1
 8008414:	e028      	b.n	8008468 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008416:	2200      	movs	r2, #0
 8008418:	68b9      	ldr	r1, [r7, #8]
 800841a:	69b8      	ldr	r0, [r7, #24]
 800841c:	f7ff fed7 	bl	80081ce <put_fat>
 8008420:	4603      	mov	r3, r0
 8008422:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008424:	7ffb      	ldrb	r3, [r7, #31]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d001      	beq.n	800842e <remove_chain+0x88>
 800842a:	7ffb      	ldrb	r3, [r7, #31]
 800842c:	e01c      	b.n	8008468 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	691a      	ldr	r2, [r3, #16]
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	3b02      	subs	r3, #2
 8008438:	429a      	cmp	r2, r3
 800843a:	d20b      	bcs.n	8008454 <remove_chain+0xae>
			fs->free_clst++;
 800843c:	69bb      	ldr	r3, [r7, #24]
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	1c5a      	adds	r2, r3, #1
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	791b      	ldrb	r3, [r3, #4]
 800844a:	f043 0301 	orr.w	r3, r3, #1
 800844e:	b2da      	uxtb	r2, r3
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	695b      	ldr	r3, [r3, #20]
 800845c:	68ba      	ldr	r2, [r7, #8]
 800845e:	429a      	cmp	r2, r3
 8008460:	d3c6      	bcc.n	80083f0 <remove_chain+0x4a>
 8008462:	e000      	b.n	8008466 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008464:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3720      	adds	r7, #32
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b088      	sub	sp, #32
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d10d      	bne.n	80084a2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d004      	beq.n	800849c <create_chain+0x2c>
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	695b      	ldr	r3, [r3, #20]
 8008496:	69ba      	ldr	r2, [r7, #24]
 8008498:	429a      	cmp	r2, r3
 800849a:	d31b      	bcc.n	80084d4 <create_chain+0x64>
 800849c:	2301      	movs	r3, #1
 800849e:	61bb      	str	r3, [r7, #24]
 80084a0:	e018      	b.n	80084d4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80084a2:	6839      	ldr	r1, [r7, #0]
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f7ff fdea 	bl	800807e <get_fat>
 80084aa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d801      	bhi.n	80084b6 <create_chain+0x46>
 80084b2:	2301      	movs	r3, #1
 80084b4:	e070      	b.n	8008598 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084bc:	d101      	bne.n	80084c2 <create_chain+0x52>
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	e06a      	b.n	8008598 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	695b      	ldr	r3, [r3, #20]
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d201      	bcs.n	80084d0 <create_chain+0x60>
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	e063      	b.n	8008598 <create_chain+0x128>
		scl = clst;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	3301      	adds	r3, #1
 80084dc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	695b      	ldr	r3, [r3, #20]
 80084e2:	69fa      	ldr	r2, [r7, #28]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d307      	bcc.n	80084f8 <create_chain+0x88>
				ncl = 2;
 80084e8:	2302      	movs	r3, #2
 80084ea:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80084ec:	69fa      	ldr	r2, [r7, #28]
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d901      	bls.n	80084f8 <create_chain+0x88>
 80084f4:	2300      	movs	r3, #0
 80084f6:	e04f      	b.n	8008598 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80084f8:	69f9      	ldr	r1, [r7, #28]
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f7ff fdbf 	bl	800807e <get_fat>
 8008500:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00e      	beq.n	8008526 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2b01      	cmp	r3, #1
 800850c:	d003      	beq.n	8008516 <create_chain+0xa6>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008514:	d101      	bne.n	800851a <create_chain+0xaa>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	e03e      	b.n	8008598 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800851a:	69fa      	ldr	r2, [r7, #28]
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	429a      	cmp	r2, r3
 8008520:	d1da      	bne.n	80084d8 <create_chain+0x68>
 8008522:	2300      	movs	r3, #0
 8008524:	e038      	b.n	8008598 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008526:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008528:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800852c:	69f9      	ldr	r1, [r7, #28]
 800852e:	6938      	ldr	r0, [r7, #16]
 8008530:	f7ff fe4d 	bl	80081ce <put_fat>
 8008534:	4603      	mov	r3, r0
 8008536:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008538:	7dfb      	ldrb	r3, [r7, #23]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d109      	bne.n	8008552 <create_chain+0xe2>
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d006      	beq.n	8008552 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008544:	69fa      	ldr	r2, [r7, #28]
 8008546:	6839      	ldr	r1, [r7, #0]
 8008548:	6938      	ldr	r0, [r7, #16]
 800854a:	f7ff fe40 	bl	80081ce <put_fat>
 800854e:	4603      	mov	r3, r0
 8008550:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008552:	7dfb      	ldrb	r3, [r7, #23]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d116      	bne.n	8008586 <create_chain+0x116>
		fs->last_clst = ncl;
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	69fa      	ldr	r2, [r7, #28]
 800855c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	691a      	ldr	r2, [r3, #16]
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	695b      	ldr	r3, [r3, #20]
 8008566:	3b02      	subs	r3, #2
 8008568:	429a      	cmp	r2, r3
 800856a:	d804      	bhi.n	8008576 <create_chain+0x106>
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	1e5a      	subs	r2, r3, #1
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	791b      	ldrb	r3, [r3, #4]
 800857a:	f043 0301 	orr.w	r3, r3, #1
 800857e:	b2da      	uxtb	r2, r3
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	711a      	strb	r2, [r3, #4]
 8008584:	e007      	b.n	8008596 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008586:	7dfb      	ldrb	r3, [r7, #23]
 8008588:	2b01      	cmp	r3, #1
 800858a:	d102      	bne.n	8008592 <create_chain+0x122>
 800858c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008590:	e000      	b.n	8008594 <create_chain+0x124>
 8008592:	2301      	movs	r3, #1
 8008594:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008596:	69fb      	ldr	r3, [r7, #28]
}
 8008598:	4618      	mov	r0, r3
 800859a:	3720      	adds	r7, #32
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b087      	sub	sp, #28
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b4:	3304      	adds	r3, #4
 80085b6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	0a5b      	lsrs	r3, r3, #9
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	8952      	ldrh	r2, [r2, #10]
 80085c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80085c4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	1d1a      	adds	r2, r3, #4
 80085ca:	613a      	str	r2, [r7, #16]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d101      	bne.n	80085da <clmt_clust+0x3a>
 80085d6:	2300      	movs	r3, #0
 80085d8:	e010      	b.n	80085fc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80085da:	697a      	ldr	r2, [r7, #20]
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d307      	bcc.n	80085f2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80085e2:	697a      	ldr	r2, [r7, #20]
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	1ad3      	subs	r3, r2, r3
 80085e8:	617b      	str	r3, [r7, #20]
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	3304      	adds	r3, #4
 80085ee:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80085f0:	e7e9      	b.n	80085c6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80085f2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	4413      	add	r3, r2
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	371c      	adds	r7, #28
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800861e:	d204      	bcs.n	800862a <dir_sdi+0x22>
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	f003 031f 	and.w	r3, r3, #31
 8008626:	2b00      	cmp	r3, #0
 8008628:	d001      	beq.n	800862e <dir_sdi+0x26>
		return FR_INT_ERR;
 800862a:	2302      	movs	r3, #2
 800862c:	e063      	b.n	80086f6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	683a      	ldr	r2, [r7, #0]
 8008632:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d106      	bne.n	800864e <dir_sdi+0x46>
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	2b02      	cmp	r3, #2
 8008646:	d902      	bls.n	800864e <dir_sdi+0x46>
		clst = fs->dirbase;
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d10c      	bne.n	800866e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	095b      	lsrs	r3, r3, #5
 8008658:	693a      	ldr	r2, [r7, #16]
 800865a:	8912      	ldrh	r2, [r2, #8]
 800865c:	4293      	cmp	r3, r2
 800865e:	d301      	bcc.n	8008664 <dir_sdi+0x5c>
 8008660:	2302      	movs	r3, #2
 8008662:	e048      	b.n	80086f6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	61da      	str	r2, [r3, #28]
 800866c:	e029      	b.n	80086c2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	895b      	ldrh	r3, [r3, #10]
 8008672:	025b      	lsls	r3, r3, #9
 8008674:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008676:	e019      	b.n	80086ac <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6979      	ldr	r1, [r7, #20]
 800867c:	4618      	mov	r0, r3
 800867e:	f7ff fcfe 	bl	800807e <get_fat>
 8008682:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800868a:	d101      	bne.n	8008690 <dir_sdi+0x88>
 800868c:	2301      	movs	r3, #1
 800868e:	e032      	b.n	80086f6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	2b01      	cmp	r3, #1
 8008694:	d904      	bls.n	80086a0 <dir_sdi+0x98>
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	695b      	ldr	r3, [r3, #20]
 800869a:	697a      	ldr	r2, [r7, #20]
 800869c:	429a      	cmp	r2, r3
 800869e:	d301      	bcc.n	80086a4 <dir_sdi+0x9c>
 80086a0:	2302      	movs	r3, #2
 80086a2:	e028      	b.n	80086f6 <dir_sdi+0xee>
			ofs -= csz;
 80086a4:	683a      	ldr	r2, [r7, #0]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	1ad3      	subs	r3, r2, r3
 80086aa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80086ac:	683a      	ldr	r2, [r7, #0]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d2e1      	bcs.n	8008678 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80086b4:	6979      	ldr	r1, [r7, #20]
 80086b6:	6938      	ldr	r0, [r7, #16]
 80086b8:	f7ff fcc2 	bl	8008040 <clust2sect>
 80086bc:	4602      	mov	r2, r0
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	697a      	ldr	r2, [r7, #20]
 80086c6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	69db      	ldr	r3, [r3, #28]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d101      	bne.n	80086d4 <dir_sdi+0xcc>
 80086d0:	2302      	movs	r3, #2
 80086d2:	e010      	b.n	80086f6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	69da      	ldr	r2, [r3, #28]
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	0a5b      	lsrs	r3, r3, #9
 80086dc:	441a      	add	r2, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ee:	441a      	add	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3718      	adds	r7, #24
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b086      	sub	sp, #24
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
 8008706:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	695b      	ldr	r3, [r3, #20]
 8008712:	3320      	adds	r3, #32
 8008714:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	69db      	ldr	r3, [r3, #28]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d003      	beq.n	8008726 <dir_next+0x28>
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008724:	d301      	bcc.n	800872a <dir_next+0x2c>
 8008726:	2304      	movs	r3, #4
 8008728:	e0aa      	b.n	8008880 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008730:	2b00      	cmp	r3, #0
 8008732:	f040 8098 	bne.w	8008866 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	69db      	ldr	r3, [r3, #28]
 800873a:	1c5a      	adds	r2, r3, #1
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	699b      	ldr	r3, [r3, #24]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d10b      	bne.n	8008760 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	095b      	lsrs	r3, r3, #5
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	8912      	ldrh	r2, [r2, #8]
 8008750:	4293      	cmp	r3, r2
 8008752:	f0c0 8088 	bcc.w	8008866 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	61da      	str	r2, [r3, #28]
 800875c:	2304      	movs	r3, #4
 800875e:	e08f      	b.n	8008880 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	0a5b      	lsrs	r3, r3, #9
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	8952      	ldrh	r2, [r2, #10]
 8008768:	3a01      	subs	r2, #1
 800876a:	4013      	ands	r3, r2
 800876c:	2b00      	cmp	r3, #0
 800876e:	d17a      	bne.n	8008866 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	699b      	ldr	r3, [r3, #24]
 8008776:	4619      	mov	r1, r3
 8008778:	4610      	mov	r0, r2
 800877a:	f7ff fc80 	bl	800807e <get_fat>
 800877e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	2b01      	cmp	r3, #1
 8008784:	d801      	bhi.n	800878a <dir_next+0x8c>
 8008786:	2302      	movs	r3, #2
 8008788:	e07a      	b.n	8008880 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008790:	d101      	bne.n	8008796 <dir_next+0x98>
 8008792:	2301      	movs	r3, #1
 8008794:	e074      	b.n	8008880 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	697a      	ldr	r2, [r7, #20]
 800879c:	429a      	cmp	r2, r3
 800879e:	d358      	bcc.n	8008852 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d104      	bne.n	80087b0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	61da      	str	r2, [r3, #28]
 80087ac:	2304      	movs	r3, #4
 80087ae:	e067      	b.n	8008880 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	699b      	ldr	r3, [r3, #24]
 80087b6:	4619      	mov	r1, r3
 80087b8:	4610      	mov	r0, r2
 80087ba:	f7ff fe59 	bl	8008470 <create_chain>
 80087be:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d101      	bne.n	80087ca <dir_next+0xcc>
 80087c6:	2307      	movs	r3, #7
 80087c8:	e05a      	b.n	8008880 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d101      	bne.n	80087d4 <dir_next+0xd6>
 80087d0:	2302      	movs	r3, #2
 80087d2:	e055      	b.n	8008880 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087da:	d101      	bne.n	80087e0 <dir_next+0xe2>
 80087dc:	2301      	movs	r3, #1
 80087de:	e04f      	b.n	8008880 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80087e0:	68f8      	ldr	r0, [r7, #12]
 80087e2:	f7ff fb4d 	bl	8007e80 <sync_window>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d001      	beq.n	80087f0 <dir_next+0xf2>
 80087ec:	2301      	movs	r3, #1
 80087ee:	e047      	b.n	8008880 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	3330      	adds	r3, #48	; 0x30
 80087f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087f8:	2100      	movs	r1, #0
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7ff f977 	bl	8007aee <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008800:	2300      	movs	r3, #0
 8008802:	613b      	str	r3, [r7, #16]
 8008804:	6979      	ldr	r1, [r7, #20]
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f7ff fc1a 	bl	8008040 <clust2sect>
 800880c:	4602      	mov	r2, r0
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	62da      	str	r2, [r3, #44]	; 0x2c
 8008812:	e012      	b.n	800883a <dir_next+0x13c>
						fs->wflag = 1;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2201      	movs	r2, #1
 8008818:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f7ff fb30 	bl	8007e80 <sync_window>
 8008820:	4603      	mov	r3, r0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d001      	beq.n	800882a <dir_next+0x12c>
 8008826:	2301      	movs	r3, #1
 8008828:	e02a      	b.n	8008880 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	3301      	adds	r3, #1
 800882e:	613b      	str	r3, [r7, #16]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008834:	1c5a      	adds	r2, r3, #1
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	62da      	str	r2, [r3, #44]	; 0x2c
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	895b      	ldrh	r3, [r3, #10]
 800883e:	461a      	mov	r2, r3
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	4293      	cmp	r3, r2
 8008844:	d3e6      	bcc.n	8008814 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	1ad2      	subs	r2, r2, r3
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	697a      	ldr	r2, [r7, #20]
 8008856:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008858:	6979      	ldr	r1, [r7, #20]
 800885a:	68f8      	ldr	r0, [r7, #12]
 800885c:	f7ff fbf0 	bl	8008040 <clust2sect>
 8008860:	4602      	mov	r2, r0
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	68ba      	ldr	r2, [r7, #8]
 800886a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008878:	441a      	add	r2, r3
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3718      	adds	r7, #24
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b086      	sub	sp, #24
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008898:	2100      	movs	r1, #0
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f7ff feb4 	bl	8008608 <dir_sdi>
 80088a0:	4603      	mov	r3, r0
 80088a2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80088a4:	7dfb      	ldrb	r3, [r7, #23]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d12b      	bne.n	8008902 <dir_alloc+0x7a>
		n = 0;
 80088aa:	2300      	movs	r3, #0
 80088ac:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	69db      	ldr	r3, [r3, #28]
 80088b2:	4619      	mov	r1, r3
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f7ff fb27 	bl	8007f08 <move_window>
 80088ba:	4603      	mov	r3, r0
 80088bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80088be:	7dfb      	ldrb	r3, [r7, #23]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d11d      	bne.n	8008900 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6a1b      	ldr	r3, [r3, #32]
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	2be5      	cmp	r3, #229	; 0xe5
 80088cc:	d004      	beq.n	80088d8 <dir_alloc+0x50>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6a1b      	ldr	r3, [r3, #32]
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d107      	bne.n	80088e8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	3301      	adds	r3, #1
 80088dc:	613b      	str	r3, [r7, #16]
 80088de:	693a      	ldr	r2, [r7, #16]
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d102      	bne.n	80088ec <dir_alloc+0x64>
 80088e6:	e00c      	b.n	8008902 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80088e8:	2300      	movs	r3, #0
 80088ea:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80088ec:	2101      	movs	r1, #1
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f7ff ff05 	bl	80086fe <dir_next>
 80088f4:	4603      	mov	r3, r0
 80088f6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80088f8:	7dfb      	ldrb	r3, [r7, #23]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d0d7      	beq.n	80088ae <dir_alloc+0x26>
 80088fe:	e000      	b.n	8008902 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008900:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008902:	7dfb      	ldrb	r3, [r7, #23]
 8008904:	2b04      	cmp	r3, #4
 8008906:	d101      	bne.n	800890c <dir_alloc+0x84>
 8008908:	2307      	movs	r3, #7
 800890a:	75fb      	strb	r3, [r7, #23]
	return res;
 800890c:	7dfb      	ldrb	r3, [r7, #23]
}
 800890e:	4618      	mov	r0, r3
 8008910:	3718      	adds	r7, #24
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b084      	sub	sp, #16
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
 800891e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	331a      	adds	r3, #26
 8008924:	4618      	mov	r0, r3
 8008926:	f7ff f83f 	bl	80079a8 <ld_word>
 800892a:	4603      	mov	r3, r0
 800892c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	2b03      	cmp	r3, #3
 8008934:	d109      	bne.n	800894a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	3314      	adds	r3, #20
 800893a:	4618      	mov	r0, r3
 800893c:	f7ff f834 	bl	80079a8 <ld_word>
 8008940:	4603      	mov	r3, r0
 8008942:	041b      	lsls	r3, r3, #16
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	4313      	orrs	r3, r2
 8008948:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800894a:	68fb      	ldr	r3, [r7, #12]
}
 800894c:	4618      	mov	r0, r3
 800894e:	3710      	adds	r7, #16
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	331a      	adds	r3, #26
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	b292      	uxth	r2, r2
 8008968:	4611      	mov	r1, r2
 800896a:	4618      	mov	r0, r3
 800896c:	f7ff f857 	bl	8007a1e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	2b03      	cmp	r3, #3
 8008976:	d109      	bne.n	800898c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	f103 0214 	add.w	r2, r3, #20
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	0c1b      	lsrs	r3, r3, #16
 8008982:	b29b      	uxth	r3, r3
 8008984:	4619      	mov	r1, r3
 8008986:	4610      	mov	r0, r2
 8008988:	f7ff f849 	bl	8007a1e <st_word>
	}
}
 800898c:	bf00      	nop
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b086      	sub	sp, #24
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80089a2:	2100      	movs	r1, #0
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f7ff fe2f 	bl	8008608 <dir_sdi>
 80089aa:	4603      	mov	r3, r0
 80089ac:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80089ae:	7dfb      	ldrb	r3, [r7, #23]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d001      	beq.n	80089b8 <dir_find+0x24>
 80089b4:	7dfb      	ldrb	r3, [r7, #23]
 80089b6:	e03e      	b.n	8008a36 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	69db      	ldr	r3, [r3, #28]
 80089bc:	4619      	mov	r1, r3
 80089be:	6938      	ldr	r0, [r7, #16]
 80089c0:	f7ff faa2 	bl	8007f08 <move_window>
 80089c4:	4603      	mov	r3, r0
 80089c6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80089c8:	7dfb      	ldrb	r3, [r7, #23]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d12f      	bne.n	8008a2e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a1b      	ldr	r3, [r3, #32]
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80089d6:	7bfb      	ldrb	r3, [r7, #15]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d102      	bne.n	80089e2 <dir_find+0x4e>
 80089dc:	2304      	movs	r3, #4
 80089de:	75fb      	strb	r3, [r7, #23]
 80089e0:	e028      	b.n	8008a34 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a1b      	ldr	r3, [r3, #32]
 80089e6:	330b      	adds	r3, #11
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089ee:	b2da      	uxtb	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6a1b      	ldr	r3, [r3, #32]
 80089f8:	330b      	adds	r3, #11
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	f003 0308 	and.w	r3, r3, #8
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d10a      	bne.n	8008a1a <dir_find+0x86>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6a18      	ldr	r0, [r3, #32]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	3324      	adds	r3, #36	; 0x24
 8008a0c:	220b      	movs	r2, #11
 8008a0e:	4619      	mov	r1, r3
 8008a10:	f7ff f888 	bl	8007b24 <mem_cmp>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00b      	beq.n	8008a32 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f7ff fe6e 	bl	80086fe <dir_next>
 8008a22:	4603      	mov	r3, r0
 8008a24:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008a26:	7dfb      	ldrb	r3, [r7, #23]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d0c5      	beq.n	80089b8 <dir_find+0x24>
 8008a2c:	e002      	b.n	8008a34 <dir_find+0xa0>
		if (res != FR_OK) break;
 8008a2e:	bf00      	nop
 8008a30:	e000      	b.n	8008a34 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008a32:	bf00      	nop

	return res;
 8008a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3718      	adds	r7, #24
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b084      	sub	sp, #16
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008a4c:	2101      	movs	r1, #1
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f7ff ff1a 	bl	8008888 <dir_alloc>
 8008a54:	4603      	mov	r3, r0
 8008a56:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008a58:	7bfb      	ldrb	r3, [r7, #15]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d11c      	bne.n	8008a98 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	69db      	ldr	r3, [r3, #28]
 8008a62:	4619      	mov	r1, r3
 8008a64:	68b8      	ldr	r0, [r7, #8]
 8008a66:	f7ff fa4f 	bl	8007f08 <move_window>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008a6e:	7bfb      	ldrb	r3, [r7, #15]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d111      	bne.n	8008a98 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6a1b      	ldr	r3, [r3, #32]
 8008a78:	2220      	movs	r2, #32
 8008a7a:	2100      	movs	r1, #0
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7ff f836 	bl	8007aee <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6a18      	ldr	r0, [r3, #32]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	3324      	adds	r3, #36	; 0x24
 8008a8a:	220b      	movs	r2, #11
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	f7ff f80d 	bl	8007aac <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	2201      	movs	r2, #1
 8008a96:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
	...

08008aa4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b088      	sub	sp, #32
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	60fb      	str	r3, [r7, #12]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	3324      	adds	r3, #36	; 0x24
 8008ab8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008aba:	220b      	movs	r2, #11
 8008abc:	2120      	movs	r1, #32
 8008abe:	68b8      	ldr	r0, [r7, #8]
 8008ac0:	f7ff f815 	bl	8007aee <mem_set>
	si = i = 0; ni = 8;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	613b      	str	r3, [r7, #16]
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	61fb      	str	r3, [r7, #28]
 8008acc:	2308      	movs	r3, #8
 8008ace:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	1c5a      	adds	r2, r3, #1
 8008ad4:	61fa      	str	r2, [r7, #28]
 8008ad6:	68fa      	ldr	r2, [r7, #12]
 8008ad8:	4413      	add	r3, r2
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008ade:	7efb      	ldrb	r3, [r7, #27]
 8008ae0:	2b20      	cmp	r3, #32
 8008ae2:	d94e      	bls.n	8008b82 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008ae4:	7efb      	ldrb	r3, [r7, #27]
 8008ae6:	2b2f      	cmp	r3, #47	; 0x2f
 8008ae8:	d006      	beq.n	8008af8 <create_name+0x54>
 8008aea:	7efb      	ldrb	r3, [r7, #27]
 8008aec:	2b5c      	cmp	r3, #92	; 0x5c
 8008aee:	d110      	bne.n	8008b12 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008af0:	e002      	b.n	8008af8 <create_name+0x54>
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	3301      	adds	r3, #1
 8008af6:	61fb      	str	r3, [r7, #28]
 8008af8:	68fa      	ldr	r2, [r7, #12]
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	4413      	add	r3, r2
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	2b2f      	cmp	r3, #47	; 0x2f
 8008b02:	d0f6      	beq.n	8008af2 <create_name+0x4e>
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	4413      	add	r3, r2
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	2b5c      	cmp	r3, #92	; 0x5c
 8008b0e:	d0f0      	beq.n	8008af2 <create_name+0x4e>
			break;
 8008b10:	e038      	b.n	8008b84 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008b12:	7efb      	ldrb	r3, [r7, #27]
 8008b14:	2b2e      	cmp	r3, #46	; 0x2e
 8008b16:	d003      	beq.n	8008b20 <create_name+0x7c>
 8008b18:	693a      	ldr	r2, [r7, #16]
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d30c      	bcc.n	8008b3a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	2b0b      	cmp	r3, #11
 8008b24:	d002      	beq.n	8008b2c <create_name+0x88>
 8008b26:	7efb      	ldrb	r3, [r7, #27]
 8008b28:	2b2e      	cmp	r3, #46	; 0x2e
 8008b2a:	d001      	beq.n	8008b30 <create_name+0x8c>
 8008b2c:	2306      	movs	r3, #6
 8008b2e:	e044      	b.n	8008bba <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008b30:	2308      	movs	r3, #8
 8008b32:	613b      	str	r3, [r7, #16]
 8008b34:	230b      	movs	r3, #11
 8008b36:	617b      	str	r3, [r7, #20]
			continue;
 8008b38:	e022      	b.n	8008b80 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008b3a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	da04      	bge.n	8008b4c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008b42:	7efb      	ldrb	r3, [r7, #27]
 8008b44:	3b80      	subs	r3, #128	; 0x80
 8008b46:	4a1f      	ldr	r2, [pc, #124]	; (8008bc4 <create_name+0x120>)
 8008b48:	5cd3      	ldrb	r3, [r2, r3]
 8008b4a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008b4c:	7efb      	ldrb	r3, [r7, #27]
 8008b4e:	4619      	mov	r1, r3
 8008b50:	481d      	ldr	r0, [pc, #116]	; (8008bc8 <create_name+0x124>)
 8008b52:	f7ff f80e 	bl	8007b72 <chk_chr>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d001      	beq.n	8008b60 <create_name+0xbc>
 8008b5c:	2306      	movs	r3, #6
 8008b5e:	e02c      	b.n	8008bba <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008b60:	7efb      	ldrb	r3, [r7, #27]
 8008b62:	2b60      	cmp	r3, #96	; 0x60
 8008b64:	d905      	bls.n	8008b72 <create_name+0xce>
 8008b66:	7efb      	ldrb	r3, [r7, #27]
 8008b68:	2b7a      	cmp	r3, #122	; 0x7a
 8008b6a:	d802      	bhi.n	8008b72 <create_name+0xce>
 8008b6c:	7efb      	ldrb	r3, [r7, #27]
 8008b6e:	3b20      	subs	r3, #32
 8008b70:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	1c5a      	adds	r2, r3, #1
 8008b76:	613a      	str	r2, [r7, #16]
 8008b78:	68ba      	ldr	r2, [r7, #8]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	7efa      	ldrb	r2, [r7, #27]
 8008b7e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008b80:	e7a6      	b.n	8008ad0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008b82:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	69fb      	ldr	r3, [r7, #28]
 8008b88:	441a      	add	r2, r3
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d101      	bne.n	8008b98 <create_name+0xf4>
 8008b94:	2306      	movs	r3, #6
 8008b96:	e010      	b.n	8008bba <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	2be5      	cmp	r3, #229	; 0xe5
 8008b9e:	d102      	bne.n	8008ba6 <create_name+0x102>
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	2205      	movs	r2, #5
 8008ba4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008ba6:	7efb      	ldrb	r3, [r7, #27]
 8008ba8:	2b20      	cmp	r3, #32
 8008baa:	d801      	bhi.n	8008bb0 <create_name+0x10c>
 8008bac:	2204      	movs	r2, #4
 8008bae:	e000      	b.n	8008bb2 <create_name+0x10e>
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	330b      	adds	r3, #11
 8008bb6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008bb8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3720      	adds	r7, #32
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	0800a9ac 	.word	0x0800a9ac
 8008bc8:	0800a90c 	.word	0x0800a90c

08008bcc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b086      	sub	sp, #24
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008be0:	e002      	b.n	8008be8 <follow_path+0x1c>
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	3301      	adds	r3, #1
 8008be6:	603b      	str	r3, [r7, #0]
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	2b2f      	cmp	r3, #47	; 0x2f
 8008bee:	d0f8      	beq.n	8008be2 <follow_path+0x16>
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	2b5c      	cmp	r3, #92	; 0x5c
 8008bf6:	d0f4      	beq.n	8008be2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	2b1f      	cmp	r3, #31
 8008c04:	d80a      	bhi.n	8008c1c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2280      	movs	r2, #128	; 0x80
 8008c0a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008c0e:	2100      	movs	r1, #0
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f7ff fcf9 	bl	8008608 <dir_sdi>
 8008c16:	4603      	mov	r3, r0
 8008c18:	75fb      	strb	r3, [r7, #23]
 8008c1a:	e043      	b.n	8008ca4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008c1c:	463b      	mov	r3, r7
 8008c1e:	4619      	mov	r1, r3
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f7ff ff3f 	bl	8008aa4 <create_name>
 8008c26:	4603      	mov	r3, r0
 8008c28:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008c2a:	7dfb      	ldrb	r3, [r7, #23]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d134      	bne.n	8008c9a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f7ff feaf 	bl	8008994 <dir_find>
 8008c36:	4603      	mov	r3, r0
 8008c38:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008c40:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008c42:	7dfb      	ldrb	r3, [r7, #23]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d00a      	beq.n	8008c5e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008c48:	7dfb      	ldrb	r3, [r7, #23]
 8008c4a:	2b04      	cmp	r3, #4
 8008c4c:	d127      	bne.n	8008c9e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008c4e:	7afb      	ldrb	r3, [r7, #11]
 8008c50:	f003 0304 	and.w	r3, r3, #4
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d122      	bne.n	8008c9e <follow_path+0xd2>
 8008c58:	2305      	movs	r3, #5
 8008c5a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008c5c:	e01f      	b.n	8008c9e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008c5e:	7afb      	ldrb	r3, [r7, #11]
 8008c60:	f003 0304 	and.w	r3, r3, #4
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d11c      	bne.n	8008ca2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	799b      	ldrb	r3, [r3, #6]
 8008c6c:	f003 0310 	and.w	r3, r3, #16
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d102      	bne.n	8008c7a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008c74:	2305      	movs	r3, #5
 8008c76:	75fb      	strb	r3, [r7, #23]
 8008c78:	e014      	b.n	8008ca4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	695b      	ldr	r3, [r3, #20]
 8008c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c88:	4413      	add	r3, r2
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	68f8      	ldr	r0, [r7, #12]
 8008c8e:	f7ff fe42 	bl	8008916 <ld_clust>
 8008c92:	4602      	mov	r2, r0
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008c98:	e7c0      	b.n	8008c1c <follow_path+0x50>
			if (res != FR_OK) break;
 8008c9a:	bf00      	nop
 8008c9c:	e002      	b.n	8008ca4 <follow_path+0xd8>
				break;
 8008c9e:	bf00      	nop
 8008ca0:	e000      	b.n	8008ca4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008ca2:	bf00      	nop
			}
		}
	}

	return res;
 8008ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3718      	adds	r7, #24
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008cae:	b480      	push	{r7}
 8008cb0:	b087      	sub	sp, #28
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008cb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cba:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d031      	beq.n	8008d28 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	617b      	str	r3, [r7, #20]
 8008cca:	e002      	b.n	8008cd2 <get_ldnumber+0x24>
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	3301      	adds	r3, #1
 8008cd0:	617b      	str	r3, [r7, #20]
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	2b20      	cmp	r3, #32
 8008cd8:	d903      	bls.n	8008ce2 <get_ldnumber+0x34>
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	2b3a      	cmp	r3, #58	; 0x3a
 8008ce0:	d1f4      	bne.n	8008ccc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	2b3a      	cmp	r3, #58	; 0x3a
 8008ce8:	d11c      	bne.n	8008d24 <get_ldnumber+0x76>
			tp = *path;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	1c5a      	adds	r2, r3, #1
 8008cf4:	60fa      	str	r2, [r7, #12]
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	3b30      	subs	r3, #48	; 0x30
 8008cfa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	2b09      	cmp	r3, #9
 8008d00:	d80e      	bhi.n	8008d20 <get_ldnumber+0x72>
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d10a      	bne.n	8008d20 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d107      	bne.n	8008d20 <get_ldnumber+0x72>
					vol = (int)i;
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	3301      	adds	r3, #1
 8008d18:	617b      	str	r3, [r7, #20]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	697a      	ldr	r2, [r7, #20]
 8008d1e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	e002      	b.n	8008d2a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008d24:	2300      	movs	r3, #0
 8008d26:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008d28:	693b      	ldr	r3, [r7, #16]
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	371c      	adds	r7, #28
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr
	...

08008d38 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	70da      	strb	r2, [r3, #3]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d4e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008d50:	6839      	ldr	r1, [r7, #0]
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f7ff f8d8 	bl	8007f08 <move_window>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d001      	beq.n	8008d62 <check_fs+0x2a>
 8008d5e:	2304      	movs	r3, #4
 8008d60:	e038      	b.n	8008dd4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	3330      	adds	r3, #48	; 0x30
 8008d66:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7fe fe1c 	bl	80079a8 <ld_word>
 8008d70:	4603      	mov	r3, r0
 8008d72:	461a      	mov	r2, r3
 8008d74:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d001      	beq.n	8008d80 <check_fs+0x48>
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e029      	b.n	8008dd4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008d86:	2be9      	cmp	r3, #233	; 0xe9
 8008d88:	d009      	beq.n	8008d9e <check_fs+0x66>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008d90:	2beb      	cmp	r3, #235	; 0xeb
 8008d92:	d11e      	bne.n	8008dd2 <check_fs+0x9a>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008d9a:	2b90      	cmp	r3, #144	; 0x90
 8008d9c:	d119      	bne.n	8008dd2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	3330      	adds	r3, #48	; 0x30
 8008da2:	3336      	adds	r3, #54	; 0x36
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7fe fe17 	bl	80079d8 <ld_dword>
 8008daa:	4603      	mov	r3, r0
 8008dac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008db0:	4a0a      	ldr	r2, [pc, #40]	; (8008ddc <check_fs+0xa4>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d101      	bne.n	8008dba <check_fs+0x82>
 8008db6:	2300      	movs	r3, #0
 8008db8:	e00c      	b.n	8008dd4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	3330      	adds	r3, #48	; 0x30
 8008dbe:	3352      	adds	r3, #82	; 0x52
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7fe fe09 	bl	80079d8 <ld_dword>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	4a05      	ldr	r2, [pc, #20]	; (8008de0 <check_fs+0xa8>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d101      	bne.n	8008dd2 <check_fs+0x9a>
 8008dce:	2300      	movs	r3, #0
 8008dd0:	e000      	b.n	8008dd4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008dd2:	2302      	movs	r3, #2
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3708      	adds	r7, #8
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}
 8008ddc:	00544146 	.word	0x00544146
 8008de0:	33544146 	.word	0x33544146

08008de4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b096      	sub	sp, #88	; 0x58
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	4613      	mov	r3, r2
 8008df0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	2200      	movs	r2, #0
 8008df6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008df8:	68f8      	ldr	r0, [r7, #12]
 8008dfa:	f7ff ff58 	bl	8008cae <get_ldnumber>
 8008dfe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	da01      	bge.n	8008e0a <find_volume+0x26>
 8008e06:	230b      	movs	r3, #11
 8008e08:	e22d      	b.n	8009266 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008e0a:	4aa1      	ldr	r2, [pc, #644]	; (8009090 <find_volume+0x2ac>)
 8008e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e12:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d101      	bne.n	8008e1e <find_volume+0x3a>
 8008e1a:	230c      	movs	r3, #12
 8008e1c:	e223      	b.n	8009266 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e22:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008e24:	79fb      	ldrb	r3, [r7, #7]
 8008e26:	f023 0301 	bic.w	r3, r3, #1
 8008e2a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d01a      	beq.n	8008e6a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e36:	785b      	ldrb	r3, [r3, #1]
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f7fe fd17 	bl	800786c <disk_status>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008e44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e48:	f003 0301 	and.w	r3, r3, #1
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d10c      	bne.n	8008e6a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008e50:	79fb      	ldrb	r3, [r7, #7]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d007      	beq.n	8008e66 <find_volume+0x82>
 8008e56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e5a:	f003 0304 	and.w	r3, r3, #4
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d001      	beq.n	8008e66 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008e62:	230a      	movs	r3, #10
 8008e64:	e1ff      	b.n	8009266 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8008e66:	2300      	movs	r3, #0
 8008e68:	e1fd      	b.n	8009266 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e72:	b2da      	uxtb	r2, r3
 8008e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e76:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7a:	785b      	ldrb	r3, [r3, #1]
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7fe fd0f 	bl	80078a0 <disk_initialize>
 8008e82:	4603      	mov	r3, r0
 8008e84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008e88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e8c:	f003 0301 	and.w	r3, r3, #1
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d001      	beq.n	8008e98 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008e94:	2303      	movs	r3, #3
 8008e96:	e1e6      	b.n	8009266 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008e98:	79fb      	ldrb	r3, [r7, #7]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d007      	beq.n	8008eae <find_volume+0xca>
 8008e9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008ea2:	f003 0304 	and.w	r3, r3, #4
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d001      	beq.n	8008eae <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008eaa:	230a      	movs	r3, #10
 8008eac:	e1db      	b.n	8009266 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008eb2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008eb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008eb6:	f7ff ff3f 	bl	8008d38 <check_fs>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008ec0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ec4:	2b02      	cmp	r3, #2
 8008ec6:	d149      	bne.n	8008f5c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008ec8:	2300      	movs	r3, #0
 8008eca:	643b      	str	r3, [r7, #64]	; 0x40
 8008ecc:	e01e      	b.n	8008f0c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ed6:	011b      	lsls	r3, r3, #4
 8008ed8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008edc:	4413      	add	r3, r2
 8008ede:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee2:	3304      	adds	r3, #4
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d006      	beq.n	8008ef8 <find_volume+0x114>
 8008eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eec:	3308      	adds	r3, #8
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7fe fd72 	bl	80079d8 <ld_dword>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	e000      	b.n	8008efa <find_volume+0x116>
 8008ef8:	2200      	movs	r2, #0
 8008efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	3358      	adds	r3, #88	; 0x58
 8008f00:	443b      	add	r3, r7
 8008f02:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f08:	3301      	adds	r3, #1
 8008f0a:	643b      	str	r3, [r7, #64]	; 0x40
 8008f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f0e:	2b03      	cmp	r3, #3
 8008f10:	d9dd      	bls.n	8008ece <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008f12:	2300      	movs	r3, #0
 8008f14:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d002      	beq.n	8008f22 <find_volume+0x13e>
 8008f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	3358      	adds	r3, #88	; 0x58
 8008f28:	443b      	add	r3, r7
 8008f2a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008f2e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d005      	beq.n	8008f42 <find_volume+0x15e>
 8008f36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008f38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008f3a:	f7ff fefd 	bl	8008d38 <check_fs>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	e000      	b.n	8008f44 <find_volume+0x160>
 8008f42:	2303      	movs	r3, #3
 8008f44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008f48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d905      	bls.n	8008f5c <find_volume+0x178>
 8008f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f52:	3301      	adds	r3, #1
 8008f54:	643b      	str	r3, [r7, #64]	; 0x40
 8008f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f58:	2b03      	cmp	r3, #3
 8008f5a:	d9e2      	bls.n	8008f22 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008f5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f60:	2b04      	cmp	r3, #4
 8008f62:	d101      	bne.n	8008f68 <find_volume+0x184>
 8008f64:	2301      	movs	r3, #1
 8008f66:	e17e      	b.n	8009266 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008f68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d901      	bls.n	8008f74 <find_volume+0x190>
 8008f70:	230d      	movs	r3, #13
 8008f72:	e178      	b.n	8009266 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f76:	3330      	adds	r3, #48	; 0x30
 8008f78:	330b      	adds	r3, #11
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7fe fd14 	bl	80079a8 <ld_word>
 8008f80:	4603      	mov	r3, r0
 8008f82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f86:	d001      	beq.n	8008f8c <find_volume+0x1a8>
 8008f88:	230d      	movs	r3, #13
 8008f8a:	e16c      	b.n	8009266 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f8e:	3330      	adds	r3, #48	; 0x30
 8008f90:	3316      	adds	r3, #22
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7fe fd08 	bl	80079a8 <ld_word>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d106      	bne.n	8008fb0 <find_volume+0x1cc>
 8008fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa4:	3330      	adds	r3, #48	; 0x30
 8008fa6:	3324      	adds	r3, #36	; 0x24
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7fe fd15 	bl	80079d8 <ld_dword>
 8008fae:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008fb4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fbe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc2:	789b      	ldrb	r3, [r3, #2]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d005      	beq.n	8008fd4 <find_volume+0x1f0>
 8008fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fca:	789b      	ldrb	r3, [r3, #2]
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d001      	beq.n	8008fd4 <find_volume+0x1f0>
 8008fd0:	230d      	movs	r3, #13
 8008fd2:	e148      	b.n	8009266 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd6:	789b      	ldrb	r3, [r3, #2]
 8008fd8:	461a      	mov	r2, r3
 8008fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fdc:	fb02 f303 	mul.w	r3, r2, r3
 8008fe0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fe8:	b29a      	uxth	r2, r3
 8008fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff0:	895b      	ldrh	r3, [r3, #10]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d008      	beq.n	8009008 <find_volume+0x224>
 8008ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff8:	895b      	ldrh	r3, [r3, #10]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ffe:	895b      	ldrh	r3, [r3, #10]
 8009000:	3b01      	subs	r3, #1
 8009002:	4013      	ands	r3, r2
 8009004:	2b00      	cmp	r3, #0
 8009006:	d001      	beq.n	800900c <find_volume+0x228>
 8009008:	230d      	movs	r3, #13
 800900a:	e12c      	b.n	8009266 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800900c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900e:	3330      	adds	r3, #48	; 0x30
 8009010:	3311      	adds	r3, #17
 8009012:	4618      	mov	r0, r3
 8009014:	f7fe fcc8 	bl	80079a8 <ld_word>
 8009018:	4603      	mov	r3, r0
 800901a:	461a      	mov	r2, r3
 800901c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800901e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009022:	891b      	ldrh	r3, [r3, #8]
 8009024:	f003 030f 	and.w	r3, r3, #15
 8009028:	b29b      	uxth	r3, r3
 800902a:	2b00      	cmp	r3, #0
 800902c:	d001      	beq.n	8009032 <find_volume+0x24e>
 800902e:	230d      	movs	r3, #13
 8009030:	e119      	b.n	8009266 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009034:	3330      	adds	r3, #48	; 0x30
 8009036:	3313      	adds	r3, #19
 8009038:	4618      	mov	r0, r3
 800903a:	f7fe fcb5 	bl	80079a8 <ld_word>
 800903e:	4603      	mov	r3, r0
 8009040:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009044:	2b00      	cmp	r3, #0
 8009046:	d106      	bne.n	8009056 <find_volume+0x272>
 8009048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904a:	3330      	adds	r3, #48	; 0x30
 800904c:	3320      	adds	r3, #32
 800904e:	4618      	mov	r0, r3
 8009050:	f7fe fcc2 	bl	80079d8 <ld_dword>
 8009054:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009058:	3330      	adds	r3, #48	; 0x30
 800905a:	330e      	adds	r3, #14
 800905c:	4618      	mov	r0, r3
 800905e:	f7fe fca3 	bl	80079a8 <ld_word>
 8009062:	4603      	mov	r3, r0
 8009064:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009066:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009068:	2b00      	cmp	r3, #0
 800906a:	d101      	bne.n	8009070 <find_volume+0x28c>
 800906c:	230d      	movs	r3, #13
 800906e:	e0fa      	b.n	8009266 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009070:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009074:	4413      	add	r3, r2
 8009076:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009078:	8912      	ldrh	r2, [r2, #8]
 800907a:	0912      	lsrs	r2, r2, #4
 800907c:	b292      	uxth	r2, r2
 800907e:	4413      	add	r3, r2
 8009080:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009082:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009086:	429a      	cmp	r2, r3
 8009088:	d204      	bcs.n	8009094 <find_volume+0x2b0>
 800908a:	230d      	movs	r3, #13
 800908c:	e0eb      	b.n	8009266 <find_volume+0x482>
 800908e:	bf00      	nop
 8009090:	20000108 	.word	0x20000108
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009094:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009098:	1ad3      	subs	r3, r2, r3
 800909a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800909c:	8952      	ldrh	r2, [r2, #10]
 800909e:	fbb3 f3f2 	udiv	r3, r3, r2
 80090a2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80090a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d101      	bne.n	80090ae <find_volume+0x2ca>
 80090aa:	230d      	movs	r3, #13
 80090ac:	e0db      	b.n	8009266 <find_volume+0x482>
		fmt = FS_FAT32;
 80090ae:	2303      	movs	r3, #3
 80090b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80090b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d802      	bhi.n	80090c4 <find_volume+0x2e0>
 80090be:	2302      	movs	r3, #2
 80090c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80090c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c6:	f640 72f5 	movw	r2, #4085	; 0xff5
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d802      	bhi.n	80090d4 <find_volume+0x2f0>
 80090ce:	2301      	movs	r3, #1
 80090d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80090d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d6:	1c9a      	adds	r2, r3, #2
 80090d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090da:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80090dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80090e0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80090e2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80090e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090e6:	441a      	add	r2, r3
 80090e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ea:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80090ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80090ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f0:	441a      	add	r2, r3
 80090f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f4:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80090f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80090fa:	2b03      	cmp	r3, #3
 80090fc:	d11e      	bne.n	800913c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80090fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009100:	3330      	adds	r3, #48	; 0x30
 8009102:	332a      	adds	r3, #42	; 0x2a
 8009104:	4618      	mov	r0, r3
 8009106:	f7fe fc4f 	bl	80079a8 <ld_word>
 800910a:	4603      	mov	r3, r0
 800910c:	2b00      	cmp	r3, #0
 800910e:	d001      	beq.n	8009114 <find_volume+0x330>
 8009110:	230d      	movs	r3, #13
 8009112:	e0a8      	b.n	8009266 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009116:	891b      	ldrh	r3, [r3, #8]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d001      	beq.n	8009120 <find_volume+0x33c>
 800911c:	230d      	movs	r3, #13
 800911e:	e0a2      	b.n	8009266 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009122:	3330      	adds	r3, #48	; 0x30
 8009124:	332c      	adds	r3, #44	; 0x2c
 8009126:	4618      	mov	r0, r3
 8009128:	f7fe fc56 	bl	80079d8 <ld_dword>
 800912c:	4602      	mov	r2, r0
 800912e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009130:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009134:	695b      	ldr	r3, [r3, #20]
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	647b      	str	r3, [r7, #68]	; 0x44
 800913a:	e01f      	b.n	800917c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800913c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913e:	891b      	ldrh	r3, [r3, #8]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d101      	bne.n	8009148 <find_volume+0x364>
 8009144:	230d      	movs	r3, #13
 8009146:	e08e      	b.n	8009266 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800914a:	6a1a      	ldr	r2, [r3, #32]
 800914c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800914e:	441a      	add	r2, r3
 8009150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009152:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009154:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009158:	2b02      	cmp	r3, #2
 800915a:	d103      	bne.n	8009164 <find_volume+0x380>
 800915c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800915e:	695b      	ldr	r3, [r3, #20]
 8009160:	005b      	lsls	r3, r3, #1
 8009162:	e00a      	b.n	800917a <find_volume+0x396>
 8009164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009166:	695a      	ldr	r2, [r3, #20]
 8009168:	4613      	mov	r3, r2
 800916a:	005b      	lsls	r3, r3, #1
 800916c:	4413      	add	r3, r2
 800916e:	085a      	lsrs	r2, r3, #1
 8009170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009172:	695b      	ldr	r3, [r3, #20]
 8009174:	f003 0301 	and.w	r3, r3, #1
 8009178:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800917a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800917c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917e:	699a      	ldr	r2, [r3, #24]
 8009180:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009182:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009186:	0a5b      	lsrs	r3, r3, #9
 8009188:	429a      	cmp	r2, r3
 800918a:	d201      	bcs.n	8009190 <find_volume+0x3ac>
 800918c:	230d      	movs	r3, #13
 800918e:	e06a      	b.n	8009266 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009192:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009196:	611a      	str	r2, [r3, #16]
 8009198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800919a:	691a      	ldr	r2, [r3, #16]
 800919c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800919e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80091a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a2:	2280      	movs	r2, #128	; 0x80
 80091a4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80091a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091aa:	2b03      	cmp	r3, #3
 80091ac:	d149      	bne.n	8009242 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80091ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b0:	3330      	adds	r3, #48	; 0x30
 80091b2:	3330      	adds	r3, #48	; 0x30
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7fe fbf7 	bl	80079a8 <ld_word>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d140      	bne.n	8009242 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80091c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091c2:	3301      	adds	r3, #1
 80091c4:	4619      	mov	r1, r3
 80091c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80091c8:	f7fe fe9e 	bl	8007f08 <move_window>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d137      	bne.n	8009242 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80091d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d4:	2200      	movs	r2, #0
 80091d6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80091d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091da:	3330      	adds	r3, #48	; 0x30
 80091dc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7fe fbe1 	bl	80079a8 <ld_word>
 80091e6:	4603      	mov	r3, r0
 80091e8:	461a      	mov	r2, r3
 80091ea:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d127      	bne.n	8009242 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80091f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f4:	3330      	adds	r3, #48	; 0x30
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fe fbee 	bl	80079d8 <ld_dword>
 80091fc:	4603      	mov	r3, r0
 80091fe:	4a1c      	ldr	r2, [pc, #112]	; (8009270 <find_volume+0x48c>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d11e      	bne.n	8009242 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009206:	3330      	adds	r3, #48	; 0x30
 8009208:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800920c:	4618      	mov	r0, r3
 800920e:	f7fe fbe3 	bl	80079d8 <ld_dword>
 8009212:	4603      	mov	r3, r0
 8009214:	4a17      	ldr	r2, [pc, #92]	; (8009274 <find_volume+0x490>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d113      	bne.n	8009242 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800921a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921c:	3330      	adds	r3, #48	; 0x30
 800921e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009222:	4618      	mov	r0, r3
 8009224:	f7fe fbd8 	bl	80079d8 <ld_dword>
 8009228:	4602      	mov	r2, r0
 800922a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800922c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800922e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009230:	3330      	adds	r3, #48	; 0x30
 8009232:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009236:	4618      	mov	r0, r3
 8009238:	f7fe fbce 	bl	80079d8 <ld_dword>
 800923c:	4602      	mov	r2, r0
 800923e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009240:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009244:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009248:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800924a:	4b0b      	ldr	r3, [pc, #44]	; (8009278 <find_volume+0x494>)
 800924c:	881b      	ldrh	r3, [r3, #0]
 800924e:	3301      	adds	r3, #1
 8009250:	b29a      	uxth	r2, r3
 8009252:	4b09      	ldr	r3, [pc, #36]	; (8009278 <find_volume+0x494>)
 8009254:	801a      	strh	r2, [r3, #0]
 8009256:	4b08      	ldr	r3, [pc, #32]	; (8009278 <find_volume+0x494>)
 8009258:	881a      	ldrh	r2, [r3, #0]
 800925a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800925c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800925e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009260:	f7fe fdea 	bl	8007e38 <clear_lock>
#endif
	return FR_OK;
 8009264:	2300      	movs	r3, #0
}
 8009266:	4618      	mov	r0, r3
 8009268:	3758      	adds	r7, #88	; 0x58
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	41615252 	.word	0x41615252
 8009274:	61417272 	.word	0x61417272
 8009278:	2000010c 	.word	0x2000010c

0800927c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009286:	2309      	movs	r3, #9
 8009288:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d01c      	beq.n	80092ca <validate+0x4e>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d018      	beq.n	80092ca <validate+0x4e>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d013      	beq.n	80092ca <validate+0x4e>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	889a      	ldrh	r2, [r3, #4]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	88db      	ldrh	r3, [r3, #6]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d10c      	bne.n	80092ca <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	785b      	ldrb	r3, [r3, #1]
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7fe fad8 	bl	800786c <disk_status>
 80092bc:	4603      	mov	r3, r0
 80092be:	f003 0301 	and.w	r3, r3, #1
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d101      	bne.n	80092ca <validate+0x4e>
			res = FR_OK;
 80092c6:	2300      	movs	r3, #0
 80092c8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80092ca:	7bfb      	ldrb	r3, [r7, #15]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d102      	bne.n	80092d6 <validate+0x5a>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	e000      	b.n	80092d8 <validate+0x5c>
 80092d6:	2300      	movs	r3, #0
 80092d8:	683a      	ldr	r2, [r7, #0]
 80092da:	6013      	str	r3, [r2, #0]
	return res;
 80092dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
	...

080092e8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b088      	sub	sp, #32
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	4613      	mov	r3, r2
 80092f4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80092fa:	f107 0310 	add.w	r3, r7, #16
 80092fe:	4618      	mov	r0, r3
 8009300:	f7ff fcd5 	bl	8008cae <get_ldnumber>
 8009304:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009306:	69fb      	ldr	r3, [r7, #28]
 8009308:	2b00      	cmp	r3, #0
 800930a:	da01      	bge.n	8009310 <f_mount+0x28>
 800930c:	230b      	movs	r3, #11
 800930e:	e02b      	b.n	8009368 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009310:	4a17      	ldr	r2, [pc, #92]	; (8009370 <f_mount+0x88>)
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009318:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d005      	beq.n	800932c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009320:	69b8      	ldr	r0, [r7, #24]
 8009322:	f7fe fd89 	bl	8007e38 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	2200      	movs	r2, #0
 800932a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d002      	beq.n	8009338 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2200      	movs	r2, #0
 8009336:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	490d      	ldr	r1, [pc, #52]	; (8009370 <f_mount+0x88>)
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d002      	beq.n	800934e <f_mount+0x66>
 8009348:	79fb      	ldrb	r3, [r7, #7]
 800934a:	2b01      	cmp	r3, #1
 800934c:	d001      	beq.n	8009352 <f_mount+0x6a>
 800934e:	2300      	movs	r3, #0
 8009350:	e00a      	b.n	8009368 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009352:	f107 010c 	add.w	r1, r7, #12
 8009356:	f107 0308 	add.w	r3, r7, #8
 800935a:	2200      	movs	r2, #0
 800935c:	4618      	mov	r0, r3
 800935e:	f7ff fd41 	bl	8008de4 <find_volume>
 8009362:	4603      	mov	r3, r0
 8009364:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009366:	7dfb      	ldrb	r3, [r7, #23]
}
 8009368:	4618      	mov	r0, r3
 800936a:	3720      	adds	r7, #32
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	20000108 	.word	0x20000108

08009374 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b098      	sub	sp, #96	; 0x60
 8009378:	af00      	add	r7, sp, #0
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	4613      	mov	r3, r2
 8009380:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d101      	bne.n	800938c <f_open+0x18>
 8009388:	2309      	movs	r3, #9
 800938a:	e1ad      	b.n	80096e8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800938c:	79fb      	ldrb	r3, [r7, #7]
 800938e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009392:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009394:	79fa      	ldrb	r2, [r7, #7]
 8009396:	f107 0110 	add.w	r1, r7, #16
 800939a:	f107 0308 	add.w	r3, r7, #8
 800939e:	4618      	mov	r0, r3
 80093a0:	f7ff fd20 	bl	8008de4 <find_volume>
 80093a4:	4603      	mov	r3, r0
 80093a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80093aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	f040 8191 	bne.w	80096d6 <f_open+0x362>
		dj.obj.fs = fs;
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80093b8:	68ba      	ldr	r2, [r7, #8]
 80093ba:	f107 0314 	add.w	r3, r7, #20
 80093be:	4611      	mov	r1, r2
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7ff fc03 	bl	8008bcc <follow_path>
 80093c6:	4603      	mov	r3, r0
 80093c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80093cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d11a      	bne.n	800940a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80093d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80093d8:	b25b      	sxtb	r3, r3
 80093da:	2b00      	cmp	r3, #0
 80093dc:	da03      	bge.n	80093e6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80093de:	2306      	movs	r3, #6
 80093e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80093e4:	e011      	b.n	800940a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80093e6:	79fb      	ldrb	r3, [r7, #7]
 80093e8:	f023 0301 	bic.w	r3, r3, #1
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	bf14      	ite	ne
 80093f0:	2301      	movne	r3, #1
 80093f2:	2300      	moveq	r3, #0
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	461a      	mov	r2, r3
 80093f8:	f107 0314 	add.w	r3, r7, #20
 80093fc:	4611      	mov	r1, r2
 80093fe:	4618      	mov	r0, r3
 8009400:	f7fe fbd2 	bl	8007ba8 <chk_lock>
 8009404:	4603      	mov	r3, r0
 8009406:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800940a:	79fb      	ldrb	r3, [r7, #7]
 800940c:	f003 031c 	and.w	r3, r3, #28
 8009410:	2b00      	cmp	r3, #0
 8009412:	d07f      	beq.n	8009514 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009414:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009418:	2b00      	cmp	r3, #0
 800941a:	d017      	beq.n	800944c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800941c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009420:	2b04      	cmp	r3, #4
 8009422:	d10e      	bne.n	8009442 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009424:	f7fe fc1c 	bl	8007c60 <enq_lock>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d006      	beq.n	800943c <f_open+0xc8>
 800942e:	f107 0314 	add.w	r3, r7, #20
 8009432:	4618      	mov	r0, r3
 8009434:	f7ff fb03 	bl	8008a3e <dir_register>
 8009438:	4603      	mov	r3, r0
 800943a:	e000      	b.n	800943e <f_open+0xca>
 800943c:	2312      	movs	r3, #18
 800943e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009442:	79fb      	ldrb	r3, [r7, #7]
 8009444:	f043 0308 	orr.w	r3, r3, #8
 8009448:	71fb      	strb	r3, [r7, #7]
 800944a:	e010      	b.n	800946e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800944c:	7ebb      	ldrb	r3, [r7, #26]
 800944e:	f003 0311 	and.w	r3, r3, #17
 8009452:	2b00      	cmp	r3, #0
 8009454:	d003      	beq.n	800945e <f_open+0xea>
					res = FR_DENIED;
 8009456:	2307      	movs	r3, #7
 8009458:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800945c:	e007      	b.n	800946e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800945e:	79fb      	ldrb	r3, [r7, #7]
 8009460:	f003 0304 	and.w	r3, r3, #4
 8009464:	2b00      	cmp	r3, #0
 8009466:	d002      	beq.n	800946e <f_open+0xfa>
 8009468:	2308      	movs	r3, #8
 800946a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800946e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009472:	2b00      	cmp	r3, #0
 8009474:	d168      	bne.n	8009548 <f_open+0x1d4>
 8009476:	79fb      	ldrb	r3, [r7, #7]
 8009478:	f003 0308 	and.w	r3, r3, #8
 800947c:	2b00      	cmp	r3, #0
 800947e:	d063      	beq.n	8009548 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009480:	f7fb f8e6 	bl	8004650 <get_fattime>
 8009484:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009488:	330e      	adds	r3, #14
 800948a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800948c:	4618      	mov	r0, r3
 800948e:	f7fe fae1 	bl	8007a54 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009494:	3316      	adds	r3, #22
 8009496:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009498:	4618      	mov	r0, r3
 800949a:	f7fe fadb 	bl	8007a54 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800949e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094a0:	330b      	adds	r3, #11
 80094a2:	2220      	movs	r2, #32
 80094a4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094aa:	4611      	mov	r1, r2
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7ff fa32 	bl	8008916 <ld_clust>
 80094b2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80094b8:	2200      	movs	r2, #0
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7ff fa4a 	bl	8008954 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80094c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c2:	331c      	adds	r3, #28
 80094c4:	2100      	movs	r1, #0
 80094c6:	4618      	mov	r0, r3
 80094c8:	f7fe fac4 	bl	8007a54 <st_dword>
					fs->wflag = 1;
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	2201      	movs	r2, #1
 80094d0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80094d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d037      	beq.n	8009548 <f_open+0x1d4>
						dw = fs->winsect;
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094dc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80094de:	f107 0314 	add.w	r3, r7, #20
 80094e2:	2200      	movs	r2, #0
 80094e4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7fe ff5d 	bl	80083a6 <remove_chain>
 80094ec:	4603      	mov	r3, r0
 80094ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80094f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d126      	bne.n	8009548 <f_open+0x1d4>
							res = move_window(fs, dw);
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80094fe:	4618      	mov	r0, r3
 8009500:	f7fe fd02 	bl	8007f08 <move_window>
 8009504:	4603      	mov	r3, r0
 8009506:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800950e:	3a01      	subs	r2, #1
 8009510:	60da      	str	r2, [r3, #12]
 8009512:	e019      	b.n	8009548 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009514:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009518:	2b00      	cmp	r3, #0
 800951a:	d115      	bne.n	8009548 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800951c:	7ebb      	ldrb	r3, [r7, #26]
 800951e:	f003 0310 	and.w	r3, r3, #16
 8009522:	2b00      	cmp	r3, #0
 8009524:	d003      	beq.n	800952e <f_open+0x1ba>
					res = FR_NO_FILE;
 8009526:	2304      	movs	r3, #4
 8009528:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800952c:	e00c      	b.n	8009548 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800952e:	79fb      	ldrb	r3, [r7, #7]
 8009530:	f003 0302 	and.w	r3, r3, #2
 8009534:	2b00      	cmp	r3, #0
 8009536:	d007      	beq.n	8009548 <f_open+0x1d4>
 8009538:	7ebb      	ldrb	r3, [r7, #26]
 800953a:	f003 0301 	and.w	r3, r3, #1
 800953e:	2b00      	cmp	r3, #0
 8009540:	d002      	beq.n	8009548 <f_open+0x1d4>
						res = FR_DENIED;
 8009542:	2307      	movs	r3, #7
 8009544:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009548:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800954c:	2b00      	cmp	r3, #0
 800954e:	d128      	bne.n	80095a2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009550:	79fb      	ldrb	r3, [r7, #7]
 8009552:	f003 0308 	and.w	r3, r3, #8
 8009556:	2b00      	cmp	r3, #0
 8009558:	d003      	beq.n	8009562 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800955a:	79fb      	ldrb	r3, [r7, #7]
 800955c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009560:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800956a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009570:	79fb      	ldrb	r3, [r7, #7]
 8009572:	f023 0301 	bic.w	r3, r3, #1
 8009576:	2b00      	cmp	r3, #0
 8009578:	bf14      	ite	ne
 800957a:	2301      	movne	r3, #1
 800957c:	2300      	moveq	r3, #0
 800957e:	b2db      	uxtb	r3, r3
 8009580:	461a      	mov	r2, r3
 8009582:	f107 0314 	add.w	r3, r7, #20
 8009586:	4611      	mov	r1, r2
 8009588:	4618      	mov	r0, r3
 800958a:	f7fe fb8b 	bl	8007ca4 <inc_lock>
 800958e:	4602      	mov	r2, r0
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	691b      	ldr	r3, [r3, #16]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d102      	bne.n	80095a2 <f_open+0x22e>
 800959c:	2302      	movs	r3, #2
 800959e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80095a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	f040 8095 	bne.w	80096d6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095b0:	4611      	mov	r1, r2
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7ff f9af 	bl	8008916 <ld_clust>
 80095b8:	4602      	mov	r2, r0
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80095be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c0:	331c      	adds	r3, #28
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7fe fa08 	bl	80079d8 <ld_dword>
 80095c8:	4602      	mov	r2, r0
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2200      	movs	r2, #0
 80095d2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80095d4:	693a      	ldr	r2, [r7, #16]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	88da      	ldrh	r2, [r3, #6]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	79fa      	ldrb	r2, [r7, #7]
 80095e6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2200      	movs	r2, #0
 80095ec:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2200      	movs	r2, #0
 80095f2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2200      	movs	r2, #0
 80095f8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	3330      	adds	r3, #48	; 0x30
 80095fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009602:	2100      	movs	r1, #0
 8009604:	4618      	mov	r0, r3
 8009606:	f7fe fa72 	bl	8007aee <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800960a:	79fb      	ldrb	r3, [r7, #7]
 800960c:	f003 0320 	and.w	r3, r3, #32
 8009610:	2b00      	cmp	r3, #0
 8009612:	d060      	beq.n	80096d6 <f_open+0x362>
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d05c      	beq.n	80096d6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	68da      	ldr	r2, [r3, #12]
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	895b      	ldrh	r3, [r3, #10]
 8009628:	025b      	lsls	r3, r3, #9
 800962a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	657b      	str	r3, [r7, #84]	; 0x54
 8009638:	e016      	b.n	8009668 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800963e:	4618      	mov	r0, r3
 8009640:	f7fe fd1d 	bl	800807e <get_fat>
 8009644:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009646:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009648:	2b01      	cmp	r3, #1
 800964a:	d802      	bhi.n	8009652 <f_open+0x2de>
 800964c:	2302      	movs	r3, #2
 800964e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009652:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009654:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009658:	d102      	bne.n	8009660 <f_open+0x2ec>
 800965a:	2301      	movs	r3, #1
 800965c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009660:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009664:	1ad3      	subs	r3, r2, r3
 8009666:	657b      	str	r3, [r7, #84]	; 0x54
 8009668:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800966c:	2b00      	cmp	r3, #0
 800966e:	d103      	bne.n	8009678 <f_open+0x304>
 8009670:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009674:	429a      	cmp	r2, r3
 8009676:	d8e0      	bhi.n	800963a <f_open+0x2c6>
				}
				fp->clust = clst;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800967c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800967e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009682:	2b00      	cmp	r3, #0
 8009684:	d127      	bne.n	80096d6 <f_open+0x362>
 8009686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800968c:	2b00      	cmp	r3, #0
 800968e:	d022      	beq.n	80096d6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009694:	4618      	mov	r0, r3
 8009696:	f7fe fcd3 	bl	8008040 <clust2sect>
 800969a:	6478      	str	r0, [r7, #68]	; 0x44
 800969c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d103      	bne.n	80096aa <f_open+0x336>
						res = FR_INT_ERR;
 80096a2:	2302      	movs	r3, #2
 80096a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80096a8:	e015      	b.n	80096d6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80096aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096ac:	0a5a      	lsrs	r2, r3, #9
 80096ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096b0:	441a      	add	r2, r3
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	7858      	ldrb	r0, [r3, #1]
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	6a1a      	ldr	r2, [r3, #32]
 80096c4:	2301      	movs	r3, #1
 80096c6:	f7fe f911 	bl	80078ec <disk_read>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d002      	beq.n	80096d6 <f_open+0x362>
 80096d0:	2301      	movs	r3, #1
 80096d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80096d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d002      	beq.n	80096e4 <f_open+0x370>
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2200      	movs	r2, #0
 80096e2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80096e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3760      	adds	r7, #96	; 0x60
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b08e      	sub	sp, #56	; 0x38
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	607a      	str	r2, [r7, #4]
 80096fc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	2200      	movs	r2, #0
 8009706:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f107 0214 	add.w	r2, r7, #20
 800970e:	4611      	mov	r1, r2
 8009710:	4618      	mov	r0, r3
 8009712:	f7ff fdb3 	bl	800927c <validate>
 8009716:	4603      	mov	r3, r0
 8009718:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800971c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009720:	2b00      	cmp	r3, #0
 8009722:	d107      	bne.n	8009734 <f_read+0x44>
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	7d5b      	ldrb	r3, [r3, #21]
 8009728:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800972c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009730:	2b00      	cmp	r3, #0
 8009732:	d002      	beq.n	800973a <f_read+0x4a>
 8009734:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009738:	e115      	b.n	8009966 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	7d1b      	ldrb	r3, [r3, #20]
 800973e:	f003 0301 	and.w	r3, r3, #1
 8009742:	2b00      	cmp	r3, #0
 8009744:	d101      	bne.n	800974a <f_read+0x5a>
 8009746:	2307      	movs	r3, #7
 8009748:	e10d      	b.n	8009966 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	68da      	ldr	r2, [r3, #12]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	699b      	ldr	r3, [r3, #24]
 8009752:	1ad3      	subs	r3, r2, r3
 8009754:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	6a3b      	ldr	r3, [r7, #32]
 800975a:	429a      	cmp	r2, r3
 800975c:	f240 80fe 	bls.w	800995c <f_read+0x26c>
 8009760:	6a3b      	ldr	r3, [r7, #32]
 8009762:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009764:	e0fa      	b.n	800995c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	699b      	ldr	r3, [r3, #24]
 800976a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800976e:	2b00      	cmp	r3, #0
 8009770:	f040 80c6 	bne.w	8009900 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	699b      	ldr	r3, [r3, #24]
 8009778:	0a5b      	lsrs	r3, r3, #9
 800977a:	697a      	ldr	r2, [r7, #20]
 800977c:	8952      	ldrh	r2, [r2, #10]
 800977e:	3a01      	subs	r2, #1
 8009780:	4013      	ands	r3, r2
 8009782:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d12f      	bne.n	80097ea <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	699b      	ldr	r3, [r3, #24]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d103      	bne.n	800979a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	633b      	str	r3, [r7, #48]	; 0x30
 8009798:	e013      	b.n	80097c2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d007      	beq.n	80097b2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	699b      	ldr	r3, [r3, #24]
 80097a6:	4619      	mov	r1, r3
 80097a8:	68f8      	ldr	r0, [r7, #12]
 80097aa:	f7fe fef9 	bl	80085a0 <clmt_clust>
 80097ae:	6338      	str	r0, [r7, #48]	; 0x30
 80097b0:	e007      	b.n	80097c2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80097b2:	68fa      	ldr	r2, [r7, #12]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	69db      	ldr	r3, [r3, #28]
 80097b8:	4619      	mov	r1, r3
 80097ba:	4610      	mov	r0, r2
 80097bc:	f7fe fc5f 	bl	800807e <get_fat>
 80097c0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80097c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d804      	bhi.n	80097d2 <f_read+0xe2>
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2202      	movs	r2, #2
 80097cc:	755a      	strb	r2, [r3, #21]
 80097ce:	2302      	movs	r3, #2
 80097d0:	e0c9      	b.n	8009966 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80097d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097d8:	d104      	bne.n	80097e4 <f_read+0xf4>
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2201      	movs	r2, #1
 80097de:	755a      	strb	r2, [r3, #21]
 80097e0:	2301      	movs	r3, #1
 80097e2:	e0c0      	b.n	8009966 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097e8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80097ea:	697a      	ldr	r2, [r7, #20]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	69db      	ldr	r3, [r3, #28]
 80097f0:	4619      	mov	r1, r3
 80097f2:	4610      	mov	r0, r2
 80097f4:	f7fe fc24 	bl	8008040 <clust2sect>
 80097f8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d104      	bne.n	800980a <f_read+0x11a>
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2202      	movs	r2, #2
 8009804:	755a      	strb	r2, [r3, #21]
 8009806:	2302      	movs	r3, #2
 8009808:	e0ad      	b.n	8009966 <f_read+0x276>
			sect += csect;
 800980a:	69ba      	ldr	r2, [r7, #24]
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	4413      	add	r3, r2
 8009810:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	0a5b      	lsrs	r3, r3, #9
 8009816:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981a:	2b00      	cmp	r3, #0
 800981c:	d039      	beq.n	8009892 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800981e:	69fa      	ldr	r2, [r7, #28]
 8009820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009822:	4413      	add	r3, r2
 8009824:	697a      	ldr	r2, [r7, #20]
 8009826:	8952      	ldrh	r2, [r2, #10]
 8009828:	4293      	cmp	r3, r2
 800982a:	d905      	bls.n	8009838 <f_read+0x148>
					cc = fs->csize - csect;
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	895b      	ldrh	r3, [r3, #10]
 8009830:	461a      	mov	r2, r3
 8009832:	69fb      	ldr	r3, [r7, #28]
 8009834:	1ad3      	subs	r3, r2, r3
 8009836:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	7858      	ldrb	r0, [r3, #1]
 800983c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983e:	69ba      	ldr	r2, [r7, #24]
 8009840:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009842:	f7fe f853 	bl	80078ec <disk_read>
 8009846:	4603      	mov	r3, r0
 8009848:	2b00      	cmp	r3, #0
 800984a:	d004      	beq.n	8009856 <f_read+0x166>
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2201      	movs	r2, #1
 8009850:	755a      	strb	r2, [r3, #21]
 8009852:	2301      	movs	r3, #1
 8009854:	e087      	b.n	8009966 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	7d1b      	ldrb	r3, [r3, #20]
 800985a:	b25b      	sxtb	r3, r3
 800985c:	2b00      	cmp	r3, #0
 800985e:	da14      	bge.n	800988a <f_read+0x19a>
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	6a1a      	ldr	r2, [r3, #32]
 8009864:	69bb      	ldr	r3, [r7, #24]
 8009866:	1ad3      	subs	r3, r2, r3
 8009868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800986a:	429a      	cmp	r2, r3
 800986c:	d90d      	bls.n	800988a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6a1a      	ldr	r2, [r3, #32]
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	1ad3      	subs	r3, r2, r3
 8009876:	025b      	lsls	r3, r3, #9
 8009878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800987a:	18d0      	adds	r0, r2, r3
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	3330      	adds	r3, #48	; 0x30
 8009880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009884:	4619      	mov	r1, r3
 8009886:	f7fe f911 	bl	8007aac <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800988a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800988c:	025b      	lsls	r3, r3, #9
 800988e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8009890:	e050      	b.n	8009934 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6a1b      	ldr	r3, [r3, #32]
 8009896:	69ba      	ldr	r2, [r7, #24]
 8009898:	429a      	cmp	r2, r3
 800989a:	d02e      	beq.n	80098fa <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	7d1b      	ldrb	r3, [r3, #20]
 80098a0:	b25b      	sxtb	r3, r3
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	da18      	bge.n	80098d8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	7858      	ldrb	r0, [r3, #1]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6a1a      	ldr	r2, [r3, #32]
 80098b4:	2301      	movs	r3, #1
 80098b6:	f7fe f839 	bl	800792c <disk_write>
 80098ba:	4603      	mov	r3, r0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d004      	beq.n	80098ca <f_read+0x1da>
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2201      	movs	r2, #1
 80098c4:	755a      	strb	r2, [r3, #21]
 80098c6:	2301      	movs	r3, #1
 80098c8:	e04d      	b.n	8009966 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	7d1b      	ldrb	r3, [r3, #20]
 80098ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098d2:	b2da      	uxtb	r2, r3
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	7858      	ldrb	r0, [r3, #1]
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80098e2:	2301      	movs	r3, #1
 80098e4:	69ba      	ldr	r2, [r7, #24]
 80098e6:	f7fe f801 	bl	80078ec <disk_read>
 80098ea:	4603      	mov	r3, r0
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d004      	beq.n	80098fa <f_read+0x20a>
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2201      	movs	r2, #1
 80098f4:	755a      	strb	r2, [r3, #21]
 80098f6:	2301      	movs	r3, #1
 80098f8:	e035      	b.n	8009966 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	69ba      	ldr	r2, [r7, #24]
 80098fe:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	699b      	ldr	r3, [r3, #24]
 8009904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009908:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800990c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800990e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	429a      	cmp	r2, r3
 8009914:	d901      	bls.n	800991a <f_read+0x22a>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	699b      	ldr	r3, [r3, #24]
 8009924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009928:	4413      	add	r3, r2
 800992a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800992c:	4619      	mov	r1, r3
 800992e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009930:	f7fe f8bc 	bl	8007aac <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009938:	4413      	add	r3, r2
 800993a:	627b      	str	r3, [r7, #36]	; 0x24
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	699a      	ldr	r2, [r3, #24]
 8009940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009942:	441a      	add	r2, r3
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	619a      	str	r2, [r3, #24]
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994e:	441a      	add	r2, r3
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	601a      	str	r2, [r3, #0]
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009958:	1ad3      	subs	r3, r2, r3
 800995a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2b00      	cmp	r3, #0
 8009960:	f47f af01 	bne.w	8009766 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3738      	adds	r7, #56	; 0x38
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b08c      	sub	sp, #48	; 0x30
 8009972:	af00      	add	r7, sp, #0
 8009974:	60f8      	str	r0, [r7, #12]
 8009976:	60b9      	str	r1, [r7, #8]
 8009978:	607a      	str	r2, [r7, #4]
 800997a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	2200      	movs	r2, #0
 8009984:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f107 0210 	add.w	r2, r7, #16
 800998c:	4611      	mov	r1, r2
 800998e:	4618      	mov	r0, r3
 8009990:	f7ff fc74 	bl	800927c <validate>
 8009994:	4603      	mov	r3, r0
 8009996:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800999a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d107      	bne.n	80099b2 <f_write+0x44>
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	7d5b      	ldrb	r3, [r3, #21]
 80099a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80099aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d002      	beq.n	80099b8 <f_write+0x4a>
 80099b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099b6:	e14b      	b.n	8009c50 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	7d1b      	ldrb	r3, [r3, #20]
 80099bc:	f003 0302 	and.w	r3, r3, #2
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d101      	bne.n	80099c8 <f_write+0x5a>
 80099c4:	2307      	movs	r3, #7
 80099c6:	e143      	b.n	8009c50 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	699a      	ldr	r2, [r3, #24]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	441a      	add	r2, r3
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	699b      	ldr	r3, [r3, #24]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	f080 812d 	bcs.w	8009c34 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	699b      	ldr	r3, [r3, #24]
 80099de:	43db      	mvns	r3, r3
 80099e0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80099e2:	e127      	b.n	8009c34 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	699b      	ldr	r3, [r3, #24]
 80099e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	f040 80e3 	bne.w	8009bb8 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	699b      	ldr	r3, [r3, #24]
 80099f6:	0a5b      	lsrs	r3, r3, #9
 80099f8:	693a      	ldr	r2, [r7, #16]
 80099fa:	8952      	ldrh	r2, [r2, #10]
 80099fc:	3a01      	subs	r2, #1
 80099fe:	4013      	ands	r3, r2
 8009a00:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009a02:	69bb      	ldr	r3, [r7, #24]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d143      	bne.n	8009a90 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	699b      	ldr	r3, [r3, #24]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d10c      	bne.n	8009a2a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d11a      	bne.n	8009a52 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2100      	movs	r1, #0
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7fe fd25 	bl	8008470 <create_chain>
 8009a26:	62b8      	str	r0, [r7, #40]	; 0x28
 8009a28:	e013      	b.n	8009a52 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d007      	beq.n	8009a42 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	699b      	ldr	r3, [r3, #24]
 8009a36:	4619      	mov	r1, r3
 8009a38:	68f8      	ldr	r0, [r7, #12]
 8009a3a:	f7fe fdb1 	bl	80085a0 <clmt_clust>
 8009a3e:	62b8      	str	r0, [r7, #40]	; 0x28
 8009a40:	e007      	b.n	8009a52 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009a42:	68fa      	ldr	r2, [r7, #12]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	69db      	ldr	r3, [r3, #28]
 8009a48:	4619      	mov	r1, r3
 8009a4a:	4610      	mov	r0, r2
 8009a4c:	f7fe fd10 	bl	8008470 <create_chain>
 8009a50:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	f000 80f2 	beq.w	8009c3e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d104      	bne.n	8009a6a <f_write+0xfc>
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2202      	movs	r2, #2
 8009a64:	755a      	strb	r2, [r3, #21]
 8009a66:	2302      	movs	r3, #2
 8009a68:	e0f2      	b.n	8009c50 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a70:	d104      	bne.n	8009a7c <f_write+0x10e>
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2201      	movs	r2, #1
 8009a76:	755a      	strb	r2, [r3, #21]
 8009a78:	2301      	movs	r3, #1
 8009a7a:	e0e9      	b.n	8009c50 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a80:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d102      	bne.n	8009a90 <f_write+0x122>
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a8e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	7d1b      	ldrb	r3, [r3, #20]
 8009a94:	b25b      	sxtb	r3, r3
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	da18      	bge.n	8009acc <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	7858      	ldrb	r0, [r3, #1]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	6a1a      	ldr	r2, [r3, #32]
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	f7fd ff3f 	bl	800792c <disk_write>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d004      	beq.n	8009abe <f_write+0x150>
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	755a      	strb	r2, [r3, #21]
 8009aba:	2301      	movs	r3, #1
 8009abc:	e0c8      	b.n	8009c50 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	7d1b      	ldrb	r3, [r3, #20]
 8009ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ac6:	b2da      	uxtb	r2, r3
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009acc:	693a      	ldr	r2, [r7, #16]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	69db      	ldr	r3, [r3, #28]
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	4610      	mov	r0, r2
 8009ad6:	f7fe fab3 	bl	8008040 <clust2sect>
 8009ada:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d104      	bne.n	8009aec <f_write+0x17e>
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2202      	movs	r2, #2
 8009ae6:	755a      	strb	r2, [r3, #21]
 8009ae8:	2302      	movs	r3, #2
 8009aea:	e0b1      	b.n	8009c50 <f_write+0x2e2>
			sect += csect;
 8009aec:	697a      	ldr	r2, [r7, #20]
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	4413      	add	r3, r2
 8009af2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	0a5b      	lsrs	r3, r3, #9
 8009af8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009afa:	6a3b      	ldr	r3, [r7, #32]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d03c      	beq.n	8009b7a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009b00:	69ba      	ldr	r2, [r7, #24]
 8009b02:	6a3b      	ldr	r3, [r7, #32]
 8009b04:	4413      	add	r3, r2
 8009b06:	693a      	ldr	r2, [r7, #16]
 8009b08:	8952      	ldrh	r2, [r2, #10]
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d905      	bls.n	8009b1a <f_write+0x1ac>
					cc = fs->csize - csect;
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	895b      	ldrh	r3, [r3, #10]
 8009b12:	461a      	mov	r2, r3
 8009b14:	69bb      	ldr	r3, [r7, #24]
 8009b16:	1ad3      	subs	r3, r2, r3
 8009b18:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	7858      	ldrb	r0, [r3, #1]
 8009b1e:	6a3b      	ldr	r3, [r7, #32]
 8009b20:	697a      	ldr	r2, [r7, #20]
 8009b22:	69f9      	ldr	r1, [r7, #28]
 8009b24:	f7fd ff02 	bl	800792c <disk_write>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d004      	beq.n	8009b38 <f_write+0x1ca>
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2201      	movs	r2, #1
 8009b32:	755a      	strb	r2, [r3, #21]
 8009b34:	2301      	movs	r3, #1
 8009b36:	e08b      	b.n	8009c50 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	6a1a      	ldr	r2, [r3, #32]
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	1ad3      	subs	r3, r2, r3
 8009b40:	6a3a      	ldr	r2, [r7, #32]
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d915      	bls.n	8009b72 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	6a1a      	ldr	r2, [r3, #32]
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	1ad3      	subs	r3, r2, r3
 8009b54:	025b      	lsls	r3, r3, #9
 8009b56:	69fa      	ldr	r2, [r7, #28]
 8009b58:	4413      	add	r3, r2
 8009b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b5e:	4619      	mov	r1, r3
 8009b60:	f7fd ffa4 	bl	8007aac <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	7d1b      	ldrb	r3, [r3, #20]
 8009b68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b6c:	b2da      	uxtb	r2, r3
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009b72:	6a3b      	ldr	r3, [r7, #32]
 8009b74:	025b      	lsls	r3, r3, #9
 8009b76:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009b78:	e03f      	b.n	8009bfa <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	6a1b      	ldr	r3, [r3, #32]
 8009b7e:	697a      	ldr	r2, [r7, #20]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d016      	beq.n	8009bb2 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	699a      	ldr	r2, [r3, #24]
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d210      	bcs.n	8009bb2 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	7858      	ldrb	r0, [r3, #1]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	697a      	ldr	r2, [r7, #20]
 8009b9e:	f7fd fea5 	bl	80078ec <disk_read>
 8009ba2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d004      	beq.n	8009bb2 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2201      	movs	r2, #1
 8009bac:	755a      	strb	r2, [r3, #21]
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e04e      	b.n	8009c50 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	697a      	ldr	r2, [r7, #20]
 8009bb6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	699b      	ldr	r3, [r3, #24]
 8009bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bc0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009bc4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d901      	bls.n	8009bd2 <f_write+0x264>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	699b      	ldr	r3, [r3, #24]
 8009bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009be0:	4413      	add	r3, r2
 8009be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009be4:	69f9      	ldr	r1, [r7, #28]
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7fd ff60 	bl	8007aac <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	7d1b      	ldrb	r3, [r3, #20]
 8009bf0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009bf4:	b2da      	uxtb	r2, r3
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009bfa:	69fa      	ldr	r2, [r7, #28]
 8009bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfe:	4413      	add	r3, r2
 8009c00:	61fb      	str	r3, [r7, #28]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	699a      	ldr	r2, [r3, #24]
 8009c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c08:	441a      	add	r2, r3
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	619a      	str	r2, [r3, #24]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	68da      	ldr	r2, [r3, #12]
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	699b      	ldr	r3, [r3, #24]
 8009c16:	429a      	cmp	r2, r3
 8009c18:	bf38      	it	cc
 8009c1a:	461a      	movcc	r2, r3
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	60da      	str	r2, [r3, #12]
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c26:	441a      	add	r2, r3
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	601a      	str	r2, [r3, #0]
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c30:	1ad3      	subs	r3, r2, r3
 8009c32:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	f47f aed4 	bne.w	80099e4 <f_write+0x76>
 8009c3c:	e000      	b.n	8009c40 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009c3e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	7d1b      	ldrb	r3, [r3, #20]
 8009c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c48:	b2da      	uxtb	r2, r3
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3730      	adds	r7, #48	; 0x30
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b086      	sub	sp, #24
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f107 0208 	add.w	r2, r7, #8
 8009c66:	4611      	mov	r1, r2
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7ff fb07 	bl	800927c <validate>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009c72:	7dfb      	ldrb	r3, [r7, #23]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d168      	bne.n	8009d4a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	7d1b      	ldrb	r3, [r3, #20]
 8009c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d062      	beq.n	8009d4a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	7d1b      	ldrb	r3, [r3, #20]
 8009c88:	b25b      	sxtb	r3, r3
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	da15      	bge.n	8009cba <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	7858      	ldrb	r0, [r3, #1]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6a1a      	ldr	r2, [r3, #32]
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	f7fd fe45 	bl	800792c <disk_write>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d001      	beq.n	8009cac <f_sync+0x54>
 8009ca8:	2301      	movs	r3, #1
 8009caa:	e04f      	b.n	8009d4c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	7d1b      	ldrb	r3, [r3, #20]
 8009cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cb4:	b2da      	uxtb	r2, r3
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009cba:	f7fa fcc9 	bl	8004650 <get_fattime>
 8009cbe:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009cc0:	68ba      	ldr	r2, [r7, #8]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	4610      	mov	r0, r2
 8009cca:	f7fe f91d 	bl	8007f08 <move_window>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009cd2:	7dfb      	ldrb	r3, [r7, #23]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d138      	bne.n	8009d4a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cdc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	330b      	adds	r3, #11
 8009ce2:	781a      	ldrb	r2, [r3, #0]
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	330b      	adds	r3, #11
 8009ce8:	f042 0220 	orr.w	r2, r2, #32
 8009cec:	b2d2      	uxtb	r2, r2
 8009cee:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6818      	ldr	r0, [r3, #0]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	68f9      	ldr	r1, [r7, #12]
 8009cfc:	f7fe fe2a 	bl	8008954 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f103 021c 	add.w	r2, r3, #28
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	68db      	ldr	r3, [r3, #12]
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	4610      	mov	r0, r2
 8009d0e:	f7fd fea1 	bl	8007a54 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	3316      	adds	r3, #22
 8009d16:	6939      	ldr	r1, [r7, #16]
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7fd fe9b 	bl	8007a54 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	3312      	adds	r3, #18
 8009d22:	2100      	movs	r1, #0
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7fd fe7a 	bl	8007a1e <st_word>
					fs->wflag = 1;
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	4618      	mov	r0, r3
 8009d34:	f7fe f916 	bl	8007f64 <sync_fs>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	7d1b      	ldrb	r3, [r3, #20]
 8009d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d44:	b2da      	uxtb	r2, r3
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3718      	adds	r7, #24
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f7ff ff7b 	bl	8009c58 <f_sync>
 8009d62:	4603      	mov	r3, r0
 8009d64:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009d66:	7bfb      	ldrb	r3, [r7, #15]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d118      	bne.n	8009d9e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f107 0208 	add.w	r2, r7, #8
 8009d72:	4611      	mov	r1, r2
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7ff fa81 	bl	800927c <validate>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009d7e:	7bfb      	ldrb	r3, [r7, #15]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d10c      	bne.n	8009d9e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	691b      	ldr	r3, [r3, #16]
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f7fe f819 	bl	8007dc0 <dec_lock>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009d92:	7bfb      	ldrb	r3, [r7, #15]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d102      	bne.n	8009d9e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3710      	adds	r7, #16
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b087      	sub	sp, #28
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	60b9      	str	r1, [r7, #8]
 8009db2:	4613      	mov	r3, r2
 8009db4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009db6:	2301      	movs	r3, #1
 8009db8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009dbe:	4b1f      	ldr	r3, [pc, #124]	; (8009e3c <FATFS_LinkDriverEx+0x94>)
 8009dc0:	7a5b      	ldrb	r3, [r3, #9]
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d131      	bne.n	8009e2c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009dc8:	4b1c      	ldr	r3, [pc, #112]	; (8009e3c <FATFS_LinkDriverEx+0x94>)
 8009dca:	7a5b      	ldrb	r3, [r3, #9]
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	461a      	mov	r2, r3
 8009dd0:	4b1a      	ldr	r3, [pc, #104]	; (8009e3c <FATFS_LinkDriverEx+0x94>)
 8009dd2:	2100      	movs	r1, #0
 8009dd4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009dd6:	4b19      	ldr	r3, [pc, #100]	; (8009e3c <FATFS_LinkDriverEx+0x94>)
 8009dd8:	7a5b      	ldrb	r3, [r3, #9]
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	4a17      	ldr	r2, [pc, #92]	; (8009e3c <FATFS_LinkDriverEx+0x94>)
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4413      	add	r3, r2
 8009de2:	68fa      	ldr	r2, [r7, #12]
 8009de4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009de6:	4b15      	ldr	r3, [pc, #84]	; (8009e3c <FATFS_LinkDriverEx+0x94>)
 8009de8:	7a5b      	ldrb	r3, [r3, #9]
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	461a      	mov	r2, r3
 8009dee:	4b13      	ldr	r3, [pc, #76]	; (8009e3c <FATFS_LinkDriverEx+0x94>)
 8009df0:	4413      	add	r3, r2
 8009df2:	79fa      	ldrb	r2, [r7, #7]
 8009df4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009df6:	4b11      	ldr	r3, [pc, #68]	; (8009e3c <FATFS_LinkDriverEx+0x94>)
 8009df8:	7a5b      	ldrb	r3, [r3, #9]
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	1c5a      	adds	r2, r3, #1
 8009dfe:	b2d1      	uxtb	r1, r2
 8009e00:	4a0e      	ldr	r2, [pc, #56]	; (8009e3c <FATFS_LinkDriverEx+0x94>)
 8009e02:	7251      	strb	r1, [r2, #9]
 8009e04:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009e06:	7dbb      	ldrb	r3, [r7, #22]
 8009e08:	3330      	adds	r3, #48	; 0x30
 8009e0a:	b2da      	uxtb	r2, r3
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	3301      	adds	r3, #1
 8009e14:	223a      	movs	r2, #58	; 0x3a
 8009e16:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	3302      	adds	r3, #2
 8009e1c:	222f      	movs	r2, #47	; 0x2f
 8009e1e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	3303      	adds	r3, #3
 8009e24:	2200      	movs	r2, #0
 8009e26:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	371c      	adds	r7, #28
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop
 8009e3c:	20000130 	.word	0x20000130

08009e40 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	6839      	ldr	r1, [r7, #0]
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f7ff ffaa 	bl	8009da8 <FATFS_LinkDriverEx>
 8009e54:	4603      	mov	r3, r0
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3708      	adds	r7, #8
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
	...

08009e60 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b085      	sub	sp, #20
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	460b      	mov	r3, r1
 8009e6a:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 8009e70:	2301      	movs	r3, #1
 8009e72:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 8009e74:	4b15      	ldr	r3, [pc, #84]	; (8009ecc <FATFS_UnLinkDriverEx+0x6c>)
 8009e76:	7a5b      	ldrb	r3, [r3, #9]
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d01e      	beq.n	8009ebc <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	3b30      	subs	r3, #48	; 0x30
 8009e84:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 8009e86:	7bbb      	ldrb	r3, [r7, #14]
 8009e88:	4a10      	ldr	r2, [pc, #64]	; (8009ecc <FATFS_UnLinkDriverEx+0x6c>)
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	4413      	add	r3, r2
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d013      	beq.n	8009ebc <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 8009e94:	7bbb      	ldrb	r3, [r7, #14]
 8009e96:	4a0d      	ldr	r2, [pc, #52]	; (8009ecc <FATFS_UnLinkDriverEx+0x6c>)
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	4413      	add	r3, r2
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8009ea0:	7bbb      	ldrb	r3, [r7, #14]
 8009ea2:	4a0a      	ldr	r2, [pc, #40]	; (8009ecc <FATFS_UnLinkDriverEx+0x6c>)
 8009ea4:	4413      	add	r3, r2
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 8009eaa:	4b08      	ldr	r3, [pc, #32]	; (8009ecc <FATFS_UnLinkDriverEx+0x6c>)
 8009eac:	7a5b      	ldrb	r3, [r3, #9]
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	3b01      	subs	r3, #1
 8009eb2:	b2da      	uxtb	r2, r3
 8009eb4:	4b05      	ldr	r3, [pc, #20]	; (8009ecc <FATFS_UnLinkDriverEx+0x6c>)
 8009eb6:	725a      	strb	r2, [r3, #9]
      ret = 0;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3714      	adds	r7, #20
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr
 8009eca:	bf00      	nop
 8009ecc:	20000130 	.word	0x20000130

08009ed0 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8009ed8:	2100      	movs	r1, #0
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f7ff ffc0 	bl	8009e60 <FATFS_UnLinkDriverEx>
 8009ee0:	4603      	mov	r3, r0
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3708      	adds	r7, #8
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
	...

08009eec <USB_Error_Handler>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void USB_Error_Handler(void)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
 HAL_GPIO_WritePin(LD5_GPIO_Port,LD5_Pin,GPIO_PIN_SET);
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	2120      	movs	r1, #32
 8009ef4:	4801      	ldr	r0, [pc, #4]	; (8009efc <USB_Error_Handler+0x10>)
 8009ef6:	f7f7 f82b 	bl	8000f50 <HAL_GPIO_WritePin>
  while(1)
 8009efa:	e7fe      	b.n	8009efa <USB_Error_Handler+0xe>
 8009efc:	40020c00 	.word	0x40020c00

08009f00 <MSC_Application>:
  }
  /* USER CODE END USB_Error_Handler */
}

static void MSC_Application(void)
{
 8009f00:	b5b0      	push	{r4, r5, r7, lr}
 8009f02:	b0a6      	sub	sp, #152	; 0x98
 8009f04:	af00      	add	r7, sp, #0
  FRESULT res;                                          /* FatFs function common result code */
  uint32_t byteswritten, bytesread;                     /* File write/read counts */
  uint8_t wtext[] = "This is STM32 working with FatFs"; /* File write buffer */
 8009f06:	4b38      	ldr	r3, [pc, #224]	; (8009fe8 <MSC_Application+0xe8>)
 8009f08:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8009f0c:	461d      	mov	r5, r3
 8009f0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f16:	682b      	ldr	r3, [r5, #0]
 8009f18:	7023      	strb	r3, [r4, #0]
  uint8_t rtext[100];                                   /* File read buffer */

  /* Register the file system object to the FatFs module */
  if(f_mount(&USBDISKFatFs, (TCHAR const*)USBDISKPath, 0) != FR_OK)
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	4933      	ldr	r1, [pc, #204]	; (8009fec <MSC_Application+0xec>)
 8009f1e:	4834      	ldr	r0, [pc, #208]	; (8009ff0 <MSC_Application+0xf0>)
 8009f20:	f7ff f9e2 	bl	80092e8 <f_mount>
 8009f24:	4603      	mov	r3, r0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d002      	beq.n	8009f30 <MSC_Application+0x30>
  {
    /* FatFs Initialization Error */
    USB_Error_Handler();
 8009f2a:	f7ff ffdf 	bl	8009eec <USB_Error_Handler>
 8009f2e:	e054      	b.n	8009fda <MSC_Application+0xda>
  }
  else
  {
      /* Create and Open a new text file object with write access */
      if(f_open(&MyFile, "Even.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8009f30:	220a      	movs	r2, #10
 8009f32:	4930      	ldr	r1, [pc, #192]	; (8009ff4 <MSC_Application+0xf4>)
 8009f34:	4830      	ldr	r0, [pc, #192]	; (8009ff8 <MSC_Application+0xf8>)
 8009f36:	f7ff fa1d 	bl	8009374 <f_open>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d002      	beq.n	8009f46 <MSC_Application+0x46>
      {
        /* 'STM32.TXT' file Open for write Error */
        USB_Error_Handler();
 8009f40:	f7ff ffd4 	bl	8009eec <USB_Error_Handler>
 8009f44:	e049      	b.n	8009fda <MSC_Application+0xda>
      }
      else
      {
        /* Write data to the text file */
        res = f_write(&MyFile, wtext, sizeof(wtext), (void *)&byteswritten);
 8009f46:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8009f4a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8009f4e:	2221      	movs	r2, #33	; 0x21
 8009f50:	4829      	ldr	r0, [pc, #164]	; (8009ff8 <MSC_Application+0xf8>)
 8009f52:	f7ff fd0c 	bl	800996e <f_write>
 8009f56:	4603      	mov	r3, r0
 8009f58:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

        if((byteswritten == 0) || (res != FR_OK))
 8009f5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d003      	beq.n	8009f6c <MSC_Application+0x6c>
 8009f64:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d002      	beq.n	8009f72 <MSC_Application+0x72>
        {
          /* 'STM32.TXT' file Write or EOF Error */
          USB_Error_Handler();
 8009f6c:	f7ff ffbe 	bl	8009eec <USB_Error_Handler>
 8009f70:	e033      	b.n	8009fda <MSC_Application+0xda>
        }
        else
        {
          /* Close the open text file */
          f_close(&MyFile);
 8009f72:	4821      	ldr	r0, [pc, #132]	; (8009ff8 <MSC_Application+0xf8>)
 8009f74:	f7ff feee 	bl	8009d54 <f_close>

        /* Open the text file object with read access */
        if(f_open(&MyFile, "Even.TXT", FA_READ) != FR_OK)
 8009f78:	2201      	movs	r2, #1
 8009f7a:	491e      	ldr	r1, [pc, #120]	; (8009ff4 <MSC_Application+0xf4>)
 8009f7c:	481e      	ldr	r0, [pc, #120]	; (8009ff8 <MSC_Application+0xf8>)
 8009f7e:	f7ff f9f9 	bl	8009374 <f_open>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d002      	beq.n	8009f8e <MSC_Application+0x8e>
        {
          /* 'STM32.TXT' file Open for read Error */
          USB_Error_Handler();
 8009f88:	f7ff ffb0 	bl	8009eec <USB_Error_Handler>
 8009f8c:	e025      	b.n	8009fda <MSC_Application+0xda>
        }
        else
        {
          /* Read data from the text file */
          res = f_read(&MyFile, rtext, sizeof(rtext), (void *)&bytesread);
 8009f8e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009f92:	1d39      	adds	r1, r7, #4
 8009f94:	2264      	movs	r2, #100	; 0x64
 8009f96:	4818      	ldr	r0, [pc, #96]	; (8009ff8 <MSC_Application+0xf8>)
 8009f98:	f7ff fbaa 	bl	80096f0 <f_read>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

          if((bytesread == 0) || (res != FR_OK))
 8009fa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d003      	beq.n	8009fb2 <MSC_Application+0xb2>
 8009faa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d002      	beq.n	8009fb8 <MSC_Application+0xb8>
          {
            /* 'STM32.TXT' file Read or EOF Error */
            USB_Error_Handler();
 8009fb2:	f7ff ff9b 	bl	8009eec <USB_Error_Handler>
 8009fb6:	e010      	b.n	8009fda <MSC_Application+0xda>
          }
          else
          {
            /* Close the open text file */
            f_close(&MyFile);
 8009fb8:	480f      	ldr	r0, [pc, #60]	; (8009ff8 <MSC_Application+0xf8>)
 8009fba:	f7ff fecb 	bl	8009d54 <f_close>

            /* Compare read data with the expected data */
            if((bytesread != byteswritten))
 8009fbe:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009fc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d002      	beq.n	8009fd0 <MSC_Application+0xd0>
            {
              /* Read data is different from the expected data */
              USB_Error_Handler();
 8009fca:	f7ff ff8f 	bl	8009eec <USB_Error_Handler>
 8009fce:	e004      	b.n	8009fda <MSC_Application+0xda>
            }
            else
            {
          /* Success of the demo: no error occurrence */
              //BSP_LED_On(LED4);
              HAL_GPIO_WritePin(LD4_GPIO_Port,LD4_Pin,GPIO_PIN_SET);
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	2110      	movs	r1, #16
 8009fd4:	4809      	ldr	r0, [pc, #36]	; (8009ffc <MSC_Application+0xfc>)
 8009fd6:	f7f6 ffbb 	bl	8000f50 <HAL_GPIO_WritePin>
      }
    }
  }

  /* Unlink the USB disk I/O driver */
  FATFS_UnLinkDriver(USBDISKPath);
 8009fda:	4804      	ldr	r0, [pc, #16]	; (8009fec <MSC_Application+0xec>)
 8009fdc:	f7ff ff78 	bl	8009ed0 <FATFS_UnLinkDriver>
}
 8009fe0:	bf00      	nop
 8009fe2:	3798      	adds	r7, #152	; 0x98
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bdb0      	pop	{r4, r5, r7, pc}
 8009fe8:	0800a95c 	.word	0x0800a95c
 8009fec:	2000002c 	.word	0x2000002c
 8009ff0:	20000518 	.word	0x20000518
 8009ff4:	0800a950 	.word	0x0800a950
 8009ff8:	20000748 	.word	0x20000748
 8009ffc:	40020c00 	.word	0x40020c00

0800a000 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a004:	2201      	movs	r2, #1
 800a006:	490e      	ldr	r1, [pc, #56]	; (800a040 <MX_USB_HOST_Init+0x40>)
 800a008:	480e      	ldr	r0, [pc, #56]	; (800a044 <MX_USB_HOST_Init+0x44>)
 800a00a:	f7fb ffdd 	bl	8005fc8 <USBH_Init>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b00      	cmp	r3, #0
 800a012:	d001      	beq.n	800a018 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a014:	f7f6 fb5c 	bl	80006d0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800a018:	490b      	ldr	r1, [pc, #44]	; (800a048 <MX_USB_HOST_Init+0x48>)
 800a01a:	480a      	ldr	r0, [pc, #40]	; (800a044 <MX_USB_HOST_Init+0x44>)
 800a01c:	f7fc f862 	bl	80060e4 <USBH_RegisterClass>
 800a020:	4603      	mov	r3, r0
 800a022:	2b00      	cmp	r3, #0
 800a024:	d001      	beq.n	800a02a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a026:	f7f6 fb53 	bl	80006d0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a02a:	4806      	ldr	r0, [pc, #24]	; (800a044 <MX_USB_HOST_Init+0x44>)
 800a02c:	f7fc f8e6 	bl	80061fc <USBH_Start>
 800a030:	4603      	mov	r3, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	d001      	beq.n	800a03a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a036:	f7f6 fb4b 	bl	80006d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a03a:	bf00      	nop
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	0800a061 	.word	0x0800a061
 800a044:	2000013c 	.word	0x2000013c
 800a048:	2000000c 	.word	0x2000000c

0800a04c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a050:	4802      	ldr	r0, [pc, #8]	; (800a05c <MX_USB_HOST_Process+0x10>)
 800a052:	f7fc f8e3 	bl	800621c <USBH_Process>
}
 800a056:	bf00      	nop
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	2000013c 	.word	0x2000013c

0800a060 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	460b      	mov	r3, r1
 800a06a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a06c:	78fb      	ldrb	r3, [r7, #3]
 800a06e:	3b01      	subs	r3, #1
 800a070:	2b04      	cmp	r3, #4
 800a072:	d81b      	bhi.n	800a0ac <USBH_UserProcess+0x4c>
 800a074:	a201      	add	r2, pc, #4	; (adr r2, 800a07c <USBH_UserProcess+0x1c>)
 800a076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a07a:	bf00      	nop
 800a07c:	0800a0ad 	.word	0x0800a0ad
 800a080:	0800a099 	.word	0x0800a099
 800a084:	0800a0ad 	.word	0x0800a0ad
 800a088:	0800a0a5 	.word	0x0800a0a5
 800a08c:	0800a091 	.word	0x0800a091
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a090:	4b09      	ldr	r3, [pc, #36]	; (800a0b8 <USBH_UserProcess+0x58>)
 800a092:	2203      	movs	r2, #3
 800a094:	701a      	strb	r2, [r3, #0]
  break;
 800a096:	e00a      	b.n	800a0ae <USBH_UserProcess+0x4e>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a098:	4b07      	ldr	r3, [pc, #28]	; (800a0b8 <USBH_UserProcess+0x58>)
 800a09a:	2202      	movs	r2, #2
 800a09c:	701a      	strb	r2, [r3, #0]
  MSC_Application();
 800a09e:	f7ff ff2f 	bl	8009f00 <MSC_Application>
  break;
 800a0a2:	e004      	b.n	800a0ae <USBH_UserProcess+0x4e>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a0a4:	4b04      	ldr	r3, [pc, #16]	; (800a0b8 <USBH_UserProcess+0x58>)
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	701a      	strb	r2, [r3, #0]
  break;
 800a0aa:	e000      	b.n	800a0ae <USBH_UserProcess+0x4e>

  default:
  break;
 800a0ac:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a0ae:	bf00      	nop
 800a0b0:	3708      	adds	r7, #8
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	20000514 	.word	0x20000514

0800a0bc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b08a      	sub	sp, #40	; 0x28
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a0c4:	f107 0314 	add.w	r3, r7, #20
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	601a      	str	r2, [r3, #0]
 800a0cc:	605a      	str	r2, [r3, #4]
 800a0ce:	609a      	str	r2, [r3, #8]
 800a0d0:	60da      	str	r2, [r3, #12]
 800a0d2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0dc:	d13a      	bne.n	800a154 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a0de:	2300      	movs	r3, #0
 800a0e0:	613b      	str	r3, [r7, #16]
 800a0e2:	4b1e      	ldr	r3, [pc, #120]	; (800a15c <HAL_HCD_MspInit+0xa0>)
 800a0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0e6:	4a1d      	ldr	r2, [pc, #116]	; (800a15c <HAL_HCD_MspInit+0xa0>)
 800a0e8:	f043 0301 	orr.w	r3, r3, #1
 800a0ec:	6313      	str	r3, [r2, #48]	; 0x30
 800a0ee:	4b1b      	ldr	r3, [pc, #108]	; (800a15c <HAL_HCD_MspInit+0xa0>)
 800a0f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0f2:	f003 0301 	and.w	r3, r3, #1
 800a0f6:	613b      	str	r3, [r7, #16]
 800a0f8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a0fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a0fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a100:	2302      	movs	r3, #2
 800a102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a104:	2300      	movs	r3, #0
 800a106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a108:	2303      	movs	r3, #3
 800a10a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a10c:	230a      	movs	r3, #10
 800a10e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a110:	f107 0314 	add.w	r3, r7, #20
 800a114:	4619      	mov	r1, r3
 800a116:	4812      	ldr	r0, [pc, #72]	; (800a160 <HAL_HCD_MspInit+0xa4>)
 800a118:	f7f6 fd7e 	bl	8000c18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a11c:	4b0f      	ldr	r3, [pc, #60]	; (800a15c <HAL_HCD_MspInit+0xa0>)
 800a11e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a120:	4a0e      	ldr	r2, [pc, #56]	; (800a15c <HAL_HCD_MspInit+0xa0>)
 800a122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a126:	6353      	str	r3, [r2, #52]	; 0x34
 800a128:	2300      	movs	r3, #0
 800a12a:	60fb      	str	r3, [r7, #12]
 800a12c:	4b0b      	ldr	r3, [pc, #44]	; (800a15c <HAL_HCD_MspInit+0xa0>)
 800a12e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a130:	4a0a      	ldr	r2, [pc, #40]	; (800a15c <HAL_HCD_MspInit+0xa0>)
 800a132:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a136:	6453      	str	r3, [r2, #68]	; 0x44
 800a138:	4b08      	ldr	r3, [pc, #32]	; (800a15c <HAL_HCD_MspInit+0xa0>)
 800a13a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a13c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a140:	60fb      	str	r3, [r7, #12]
 800a142:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a144:	2200      	movs	r2, #0
 800a146:	2100      	movs	r1, #0
 800a148:	2043      	movs	r0, #67	; 0x43
 800a14a:	f7f6 fd3b 	bl	8000bc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a14e:	2043      	movs	r0, #67	; 0x43
 800a150:	f7f6 fd54 	bl	8000bfc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a154:	bf00      	nop
 800a156:	3728      	adds	r7, #40	; 0x28
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	40023800 	.word	0x40023800
 800a160:	40020000 	.word	0x40020000

0800a164 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b082      	sub	sp, #8
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a172:	4618      	mov	r0, r3
 800a174:	f7fc fc31 	bl	80069da <USBH_LL_IncTimer>
}
 800a178:	bf00      	nop
 800a17a:	3708      	adds	r7, #8
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b082      	sub	sp, #8
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a18e:	4618      	mov	r0, r3
 800a190:	f7fc fc69 	bl	8006a66 <USBH_LL_Connect>
}
 800a194:	bf00      	nop
 800a196:	3708      	adds	r7, #8
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7fc fc72 	bl	8006a94 <USBH_LL_Disconnect>
}
 800a1b0:	bf00      	nop
 800a1b2:	3708      	adds	r7, #8
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	70fb      	strb	r3, [r7, #3]
 800a1c4:	4613      	mov	r3, r2
 800a1c6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a1c8:	bf00      	nop
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7fc fc23 	bl	8006a2e <USBH_LL_PortEnabled>
}
 800a1e8:	bf00      	nop
 800a1ea:	3708      	adds	r7, #8
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a1fe:	4618      	mov	r0, r3
 800a200:	f7fc fc23 	bl	8006a4a <USBH_LL_PortDisabled>
}
 800a204:	bf00      	nop
 800a206:	3708      	adds	r7, #8
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d12a      	bne.n	800a274 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a21e:	4a18      	ldr	r2, [pc, #96]	; (800a280 <USBH_LL_Init+0x74>)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	4a15      	ldr	r2, [pc, #84]	; (800a280 <USBH_LL_Init+0x74>)
 800a22a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a22e:	4b14      	ldr	r3, [pc, #80]	; (800a280 <USBH_LL_Init+0x74>)
 800a230:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a234:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a236:	4b12      	ldr	r3, [pc, #72]	; (800a280 <USBH_LL_Init+0x74>)
 800a238:	2208      	movs	r2, #8
 800a23a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a23c:	4b10      	ldr	r3, [pc, #64]	; (800a280 <USBH_LL_Init+0x74>)
 800a23e:	2201      	movs	r2, #1
 800a240:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a242:	4b0f      	ldr	r3, [pc, #60]	; (800a280 <USBH_LL_Init+0x74>)
 800a244:	2200      	movs	r2, #0
 800a246:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a248:	4b0d      	ldr	r3, [pc, #52]	; (800a280 <USBH_LL_Init+0x74>)
 800a24a:	2202      	movs	r2, #2
 800a24c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a24e:	4b0c      	ldr	r3, [pc, #48]	; (800a280 <USBH_LL_Init+0x74>)
 800a250:	2200      	movs	r2, #0
 800a252:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a254:	480a      	ldr	r0, [pc, #40]	; (800a280 <USBH_LL_Init+0x74>)
 800a256:	f7f6 fe94 	bl	8000f82 <HAL_HCD_Init>
 800a25a:	4603      	mov	r3, r0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d001      	beq.n	800a264 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a260:	f7f6 fa36 	bl	80006d0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a264:	4806      	ldr	r0, [pc, #24]	; (800a280 <USBH_LL_Init+0x74>)
 800a266:	f7f7 fa78 	bl	800175a <HAL_HCD_GetCurrentFrame>
 800a26a:	4603      	mov	r3, r0
 800a26c:	4619      	mov	r1, r3
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f7fc fba4 	bl	80069bc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a274:	2300      	movs	r3, #0
}
 800a276:	4618      	mov	r0, r3
 800a278:	3708      	adds	r7, #8
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	20000978 	.word	0x20000978

0800a284 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a28c:	2300      	movs	r3, #0
 800a28e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a290:	2300      	movs	r3, #0
 800a292:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7f7 f9e7 	bl	800166e <HAL_HCD_Start>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a2a4:	7bfb      	ldrb	r3, [r7, #15]
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f000 f98c 	bl	800a5c4 <USBH_Get_USB_Status>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3710      	adds	r7, #16
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}

0800a2ba <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a2ba:	b580      	push	{r7, lr}
 800a2bc:	b084      	sub	sp, #16
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f7f7 f9ef 	bl	80016b4 <HAL_HCD_Stop>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a2da:	7bfb      	ldrb	r3, [r7, #15]
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f000 f971 	bl	800a5c4 <USBH_Get_USB_Status>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3710      	adds	r7, #16
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b084      	sub	sp, #16
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a302:	4618      	mov	r0, r3
 800a304:	f7f7 fa37 	bl	8001776 <HAL_HCD_GetCurrentSpeed>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d00c      	beq.n	800a328 <USBH_LL_GetSpeed+0x38>
 800a30e:	2b02      	cmp	r3, #2
 800a310:	d80d      	bhi.n	800a32e <USBH_LL_GetSpeed+0x3e>
 800a312:	2b00      	cmp	r3, #0
 800a314:	d002      	beq.n	800a31c <USBH_LL_GetSpeed+0x2c>
 800a316:	2b01      	cmp	r3, #1
 800a318:	d003      	beq.n	800a322 <USBH_LL_GetSpeed+0x32>
 800a31a:	e008      	b.n	800a32e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a31c:	2300      	movs	r3, #0
 800a31e:	73fb      	strb	r3, [r7, #15]
    break;
 800a320:	e008      	b.n	800a334 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a322:	2301      	movs	r3, #1
 800a324:	73fb      	strb	r3, [r7, #15]
    break;
 800a326:	e005      	b.n	800a334 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a328:	2302      	movs	r3, #2
 800a32a:	73fb      	strb	r3, [r7, #15]
    break;
 800a32c:	e002      	b.n	800a334 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a32e:	2301      	movs	r3, #1
 800a330:	73fb      	strb	r3, [r7, #15]
    break;
 800a332:	bf00      	nop
  }
  return  speed;
 800a334:	7bfb      	ldrb	r3, [r7, #15]
}
 800a336:	4618      	mov	r0, r3
 800a338:	3710      	adds	r7, #16
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b084      	sub	sp, #16
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a346:	2300      	movs	r3, #0
 800a348:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a34a:	2300      	movs	r3, #0
 800a34c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a354:	4618      	mov	r0, r3
 800a356:	f7f7 f9ca 	bl	80016ee <HAL_HCD_ResetPort>
 800a35a:	4603      	mov	r3, r0
 800a35c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a35e:	7bfb      	ldrb	r3, [r7, #15]
 800a360:	4618      	mov	r0, r3
 800a362:	f000 f92f 	bl	800a5c4 <USBH_Get_USB_Status>
 800a366:	4603      	mov	r3, r0
 800a368:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a36a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3710      	adds	r7, #16
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b082      	sub	sp, #8
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	460b      	mov	r3, r1
 800a37e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a386:	78fa      	ldrb	r2, [r7, #3]
 800a388:	4611      	mov	r1, r2
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7f7 f9d1 	bl	8001732 <HAL_HCD_HC_GetXferCount>
 800a390:	4603      	mov	r3, r0
}
 800a392:	4618      	mov	r0, r3
 800a394:	3708      	adds	r7, #8
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}

0800a39a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a39a:	b590      	push	{r4, r7, lr}
 800a39c:	b089      	sub	sp, #36	; 0x24
 800a39e:	af04      	add	r7, sp, #16
 800a3a0:	6078      	str	r0, [r7, #4]
 800a3a2:	4608      	mov	r0, r1
 800a3a4:	4611      	mov	r1, r2
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	70fb      	strb	r3, [r7, #3]
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	70bb      	strb	r3, [r7, #2]
 800a3b0:	4613      	mov	r3, r2
 800a3b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a3c2:	787c      	ldrb	r4, [r7, #1]
 800a3c4:	78ba      	ldrb	r2, [r7, #2]
 800a3c6:	78f9      	ldrb	r1, [r7, #3]
 800a3c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a3ca:	9302      	str	r3, [sp, #8]
 800a3cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a3d0:	9301      	str	r3, [sp, #4]
 800a3d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a3d6:	9300      	str	r3, [sp, #0]
 800a3d8:	4623      	mov	r3, r4
 800a3da:	f7f6 fe34 	bl	8001046 <HAL_HCD_HC_Init>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a3e2:	7bfb      	ldrb	r3, [r7, #15]
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f000 f8ed 	bl	800a5c4 <USBH_Get_USB_Status>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3714      	adds	r7, #20
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd90      	pop	{r4, r7, pc}

0800a3f8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	460b      	mov	r3, r1
 800a402:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a404:	2300      	movs	r3, #0
 800a406:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a408:	2300      	movs	r3, #0
 800a40a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a412:	78fa      	ldrb	r2, [r7, #3]
 800a414:	4611      	mov	r1, r2
 800a416:	4618      	mov	r0, r3
 800a418:	f7f6 fea4 	bl	8001164 <HAL_HCD_HC_Halt>
 800a41c:	4603      	mov	r3, r0
 800a41e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a420:	7bfb      	ldrb	r3, [r7, #15]
 800a422:	4618      	mov	r0, r3
 800a424:	f000 f8ce 	bl	800a5c4 <USBH_Get_USB_Status>
 800a428:	4603      	mov	r3, r0
 800a42a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a42c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3710      	adds	r7, #16
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}

0800a436 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a436:	b590      	push	{r4, r7, lr}
 800a438:	b089      	sub	sp, #36	; 0x24
 800a43a:	af04      	add	r7, sp, #16
 800a43c:	6078      	str	r0, [r7, #4]
 800a43e:	4608      	mov	r0, r1
 800a440:	4611      	mov	r1, r2
 800a442:	461a      	mov	r2, r3
 800a444:	4603      	mov	r3, r0
 800a446:	70fb      	strb	r3, [r7, #3]
 800a448:	460b      	mov	r3, r1
 800a44a:	70bb      	strb	r3, [r7, #2]
 800a44c:	4613      	mov	r3, r2
 800a44e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a450:	2300      	movs	r3, #0
 800a452:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a454:	2300      	movs	r3, #0
 800a456:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a45e:	787c      	ldrb	r4, [r7, #1]
 800a460:	78ba      	ldrb	r2, [r7, #2]
 800a462:	78f9      	ldrb	r1, [r7, #3]
 800a464:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a468:	9303      	str	r3, [sp, #12]
 800a46a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a46c:	9302      	str	r3, [sp, #8]
 800a46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a470:	9301      	str	r3, [sp, #4]
 800a472:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a476:	9300      	str	r3, [sp, #0]
 800a478:	4623      	mov	r3, r4
 800a47a:	f7f6 fe97 	bl	80011ac <HAL_HCD_HC_SubmitRequest>
 800a47e:	4603      	mov	r3, r0
 800a480:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a482:	7bfb      	ldrb	r3, [r7, #15]
 800a484:	4618      	mov	r0, r3
 800a486:	f000 f89d 	bl	800a5c4 <USBH_Get_USB_Status>
 800a48a:	4603      	mov	r3, r0
 800a48c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a48e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a490:	4618      	mov	r0, r3
 800a492:	3714      	adds	r7, #20
 800a494:	46bd      	mov	sp, r7
 800a496:	bd90      	pop	{r4, r7, pc}

0800a498 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a4aa:	78fa      	ldrb	r2, [r7, #3]
 800a4ac:	4611      	mov	r1, r2
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7f7 f92b 	bl	800170a <HAL_HCD_HC_GetURBState>
 800a4b4:	4603      	mov	r3, r0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3708      	adds	r7, #8
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}

0800a4be <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b082      	sub	sp, #8
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d103      	bne.n	800a4dc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a4d4:	78fb      	ldrb	r3, [r7, #3]
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f000 f8a0 	bl	800a61c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a4dc:	20c8      	movs	r0, #200	; 0xc8
 800a4de:	f7f6 fa95 	bl	8000a0c <HAL_Delay>
  return USBH_OK;
 800a4e2:	2300      	movs	r3, #0
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3708      	adds	r7, #8
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b085      	sub	sp, #20
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	70fb      	strb	r3, [r7, #3]
 800a4f8:	4613      	mov	r3, r2
 800a4fa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a502:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a504:	78fb      	ldrb	r3, [r7, #3]
 800a506:	68fa      	ldr	r2, [r7, #12]
 800a508:	212c      	movs	r1, #44	; 0x2c
 800a50a:	fb01 f303 	mul.w	r3, r1, r3
 800a50e:	4413      	add	r3, r2
 800a510:	333b      	adds	r3, #59	; 0x3b
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d009      	beq.n	800a52c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a518:	78fb      	ldrb	r3, [r7, #3]
 800a51a:	68fa      	ldr	r2, [r7, #12]
 800a51c:	212c      	movs	r1, #44	; 0x2c
 800a51e:	fb01 f303 	mul.w	r3, r1, r3
 800a522:	4413      	add	r3, r2
 800a524:	3354      	adds	r3, #84	; 0x54
 800a526:	78ba      	ldrb	r2, [r7, #2]
 800a528:	701a      	strb	r2, [r3, #0]
 800a52a:	e008      	b.n	800a53e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a52c:	78fb      	ldrb	r3, [r7, #3]
 800a52e:	68fa      	ldr	r2, [r7, #12]
 800a530:	212c      	movs	r1, #44	; 0x2c
 800a532:	fb01 f303 	mul.w	r3, r1, r3
 800a536:	4413      	add	r3, r2
 800a538:	3355      	adds	r3, #85	; 0x55
 800a53a:	78ba      	ldrb	r2, [r7, #2]
 800a53c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a53e:	2300      	movs	r3, #0
}
 800a540:	4618      	mov	r0, r3
 800a542:	3714      	adds	r7, #20
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b085      	sub	sp, #20
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	460b      	mov	r3, r1
 800a556:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800a558:	2300      	movs	r3, #0
 800a55a:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a562:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800a564:	78fb      	ldrb	r3, [r7, #3]
 800a566:	68ba      	ldr	r2, [r7, #8]
 800a568:	212c      	movs	r1, #44	; 0x2c
 800a56a:	fb01 f303 	mul.w	r3, r1, r3
 800a56e:	4413      	add	r3, r2
 800a570:	333b      	adds	r3, #59	; 0x3b
 800a572:	781b      	ldrb	r3, [r3, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d009      	beq.n	800a58c <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800a578:	78fb      	ldrb	r3, [r7, #3]
 800a57a:	68ba      	ldr	r2, [r7, #8]
 800a57c:	212c      	movs	r1, #44	; 0x2c
 800a57e:	fb01 f303 	mul.w	r3, r1, r3
 800a582:	4413      	add	r3, r2
 800a584:	3354      	adds	r3, #84	; 0x54
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	73fb      	strb	r3, [r7, #15]
 800a58a:	e008      	b.n	800a59e <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800a58c:	78fb      	ldrb	r3, [r7, #3]
 800a58e:	68ba      	ldr	r2, [r7, #8]
 800a590:	212c      	movs	r1, #44	; 0x2c
 800a592:	fb01 f303 	mul.w	r3, r1, r3
 800a596:	4413      	add	r3, r2
 800a598:	3355      	adds	r3, #85	; 0x55
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800a59e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3714      	adds	r7, #20
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b082      	sub	sp, #8
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f7f6 fa29 	bl	8000a0c <HAL_Delay>
}
 800a5ba:	bf00      	nop
 800a5bc:	3708      	adds	r7, #8
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
	...

0800a5c4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b085      	sub	sp, #20
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a5d2:	79fb      	ldrb	r3, [r7, #7]
 800a5d4:	2b03      	cmp	r3, #3
 800a5d6:	d817      	bhi.n	800a608 <USBH_Get_USB_Status+0x44>
 800a5d8:	a201      	add	r2, pc, #4	; (adr r2, 800a5e0 <USBH_Get_USB_Status+0x1c>)
 800a5da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5de:	bf00      	nop
 800a5e0:	0800a5f1 	.word	0x0800a5f1
 800a5e4:	0800a5f7 	.word	0x0800a5f7
 800a5e8:	0800a5fd 	.word	0x0800a5fd
 800a5ec:	0800a603 	.word	0x0800a603
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	73fb      	strb	r3, [r7, #15]
    break;
 800a5f4:	e00b      	b.n	800a60e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a5f6:	2302      	movs	r3, #2
 800a5f8:	73fb      	strb	r3, [r7, #15]
    break;
 800a5fa:	e008      	b.n	800a60e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	73fb      	strb	r3, [r7, #15]
    break;
 800a600:	e005      	b.n	800a60e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a602:	2302      	movs	r3, #2
 800a604:	73fb      	strb	r3, [r7, #15]
    break;
 800a606:	e002      	b.n	800a60e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a608:	2302      	movs	r3, #2
 800a60a:	73fb      	strb	r3, [r7, #15]
    break;
 800a60c:	bf00      	nop
  }
  return usb_status;
 800a60e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a610:	4618      	mov	r0, r3
 800a612:	3714      	adds	r7, #20
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b084      	sub	sp, #16
 800a620:	af00      	add	r7, sp, #0
 800a622:	4603      	mov	r3, r0
 800a624:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a626:	79fb      	ldrb	r3, [r7, #7]
 800a628:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a62a:	79fb      	ldrb	r3, [r7, #7]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d102      	bne.n	800a636 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a630:	2300      	movs	r3, #0
 800a632:	73fb      	strb	r3, [r7, #15]
 800a634:	e001      	b.n	800a63a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a636:	2301      	movs	r3, #1
 800a638:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 800a63a:	7bfb      	ldrb	r3, [r7, #15]
 800a63c:	461a      	mov	r2, r3
 800a63e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a642:	4803      	ldr	r0, [pc, #12]	; (800a650 <MX_DriverVbusFS+0x34>)
 800a644:	f7f6 fc84 	bl	8000f50 <HAL_GPIO_WritePin>
}
 800a648:	bf00      	nop
 800a64a:	3710      	adds	r7, #16
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	40020800 	.word	0x40020800

0800a654 <__errno>:
 800a654:	4b01      	ldr	r3, [pc, #4]	; (800a65c <__errno+0x8>)
 800a656:	6818      	ldr	r0, [r3, #0]
 800a658:	4770      	bx	lr
 800a65a:	bf00      	nop
 800a65c:	20000030 	.word	0x20000030

0800a660 <__libc_init_array>:
 800a660:	b570      	push	{r4, r5, r6, lr}
 800a662:	4d0d      	ldr	r5, [pc, #52]	; (800a698 <__libc_init_array+0x38>)
 800a664:	4c0d      	ldr	r4, [pc, #52]	; (800a69c <__libc_init_array+0x3c>)
 800a666:	1b64      	subs	r4, r4, r5
 800a668:	10a4      	asrs	r4, r4, #2
 800a66a:	2600      	movs	r6, #0
 800a66c:	42a6      	cmp	r6, r4
 800a66e:	d109      	bne.n	800a684 <__libc_init_array+0x24>
 800a670:	4d0b      	ldr	r5, [pc, #44]	; (800a6a0 <__libc_init_array+0x40>)
 800a672:	4c0c      	ldr	r4, [pc, #48]	; (800a6a4 <__libc_init_array+0x44>)
 800a674:	f000 f93c 	bl	800a8f0 <_init>
 800a678:	1b64      	subs	r4, r4, r5
 800a67a:	10a4      	asrs	r4, r4, #2
 800a67c:	2600      	movs	r6, #0
 800a67e:	42a6      	cmp	r6, r4
 800a680:	d105      	bne.n	800a68e <__libc_init_array+0x2e>
 800a682:	bd70      	pop	{r4, r5, r6, pc}
 800a684:	f855 3b04 	ldr.w	r3, [r5], #4
 800a688:	4798      	blx	r3
 800a68a:	3601      	adds	r6, #1
 800a68c:	e7ee      	b.n	800a66c <__libc_init_array+0xc>
 800a68e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a692:	4798      	blx	r3
 800a694:	3601      	adds	r6, #1
 800a696:	e7f2      	b.n	800a67e <__libc_init_array+0x1e>
 800a698:	0800aa34 	.word	0x0800aa34
 800a69c:	0800aa34 	.word	0x0800aa34
 800a6a0:	0800aa34 	.word	0x0800aa34
 800a6a4:	0800aa38 	.word	0x0800aa38

0800a6a8 <malloc>:
 800a6a8:	4b02      	ldr	r3, [pc, #8]	; (800a6b4 <malloc+0xc>)
 800a6aa:	4601      	mov	r1, r0
 800a6ac:	6818      	ldr	r0, [r3, #0]
 800a6ae:	f000 b88d 	b.w	800a7cc <_malloc_r>
 800a6b2:	bf00      	nop
 800a6b4:	20000030 	.word	0x20000030

0800a6b8 <free>:
 800a6b8:	4b02      	ldr	r3, [pc, #8]	; (800a6c4 <free+0xc>)
 800a6ba:	4601      	mov	r1, r0
 800a6bc:	6818      	ldr	r0, [r3, #0]
 800a6be:	f000 b819 	b.w	800a6f4 <_free_r>
 800a6c2:	bf00      	nop
 800a6c4:	20000030 	.word	0x20000030

0800a6c8 <memcpy>:
 800a6c8:	440a      	add	r2, r1
 800a6ca:	4291      	cmp	r1, r2
 800a6cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a6d0:	d100      	bne.n	800a6d4 <memcpy+0xc>
 800a6d2:	4770      	bx	lr
 800a6d4:	b510      	push	{r4, lr}
 800a6d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6de:	4291      	cmp	r1, r2
 800a6e0:	d1f9      	bne.n	800a6d6 <memcpy+0xe>
 800a6e2:	bd10      	pop	{r4, pc}

0800a6e4 <memset>:
 800a6e4:	4402      	add	r2, r0
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d100      	bne.n	800a6ee <memset+0xa>
 800a6ec:	4770      	bx	lr
 800a6ee:	f803 1b01 	strb.w	r1, [r3], #1
 800a6f2:	e7f9      	b.n	800a6e8 <memset+0x4>

0800a6f4 <_free_r>:
 800a6f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a6f6:	2900      	cmp	r1, #0
 800a6f8:	d044      	beq.n	800a784 <_free_r+0x90>
 800a6fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6fe:	9001      	str	r0, [sp, #4]
 800a700:	2b00      	cmp	r3, #0
 800a702:	f1a1 0404 	sub.w	r4, r1, #4
 800a706:	bfb8      	it	lt
 800a708:	18e4      	addlt	r4, r4, r3
 800a70a:	f000 f8e3 	bl	800a8d4 <__malloc_lock>
 800a70e:	4a1e      	ldr	r2, [pc, #120]	; (800a788 <_free_r+0x94>)
 800a710:	9801      	ldr	r0, [sp, #4]
 800a712:	6813      	ldr	r3, [r2, #0]
 800a714:	b933      	cbnz	r3, 800a724 <_free_r+0x30>
 800a716:	6063      	str	r3, [r4, #4]
 800a718:	6014      	str	r4, [r2, #0]
 800a71a:	b003      	add	sp, #12
 800a71c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a720:	f000 b8de 	b.w	800a8e0 <__malloc_unlock>
 800a724:	42a3      	cmp	r3, r4
 800a726:	d908      	bls.n	800a73a <_free_r+0x46>
 800a728:	6825      	ldr	r5, [r4, #0]
 800a72a:	1961      	adds	r1, r4, r5
 800a72c:	428b      	cmp	r3, r1
 800a72e:	bf01      	itttt	eq
 800a730:	6819      	ldreq	r1, [r3, #0]
 800a732:	685b      	ldreq	r3, [r3, #4]
 800a734:	1949      	addeq	r1, r1, r5
 800a736:	6021      	streq	r1, [r4, #0]
 800a738:	e7ed      	b.n	800a716 <_free_r+0x22>
 800a73a:	461a      	mov	r2, r3
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	b10b      	cbz	r3, 800a744 <_free_r+0x50>
 800a740:	42a3      	cmp	r3, r4
 800a742:	d9fa      	bls.n	800a73a <_free_r+0x46>
 800a744:	6811      	ldr	r1, [r2, #0]
 800a746:	1855      	adds	r5, r2, r1
 800a748:	42a5      	cmp	r5, r4
 800a74a:	d10b      	bne.n	800a764 <_free_r+0x70>
 800a74c:	6824      	ldr	r4, [r4, #0]
 800a74e:	4421      	add	r1, r4
 800a750:	1854      	adds	r4, r2, r1
 800a752:	42a3      	cmp	r3, r4
 800a754:	6011      	str	r1, [r2, #0]
 800a756:	d1e0      	bne.n	800a71a <_free_r+0x26>
 800a758:	681c      	ldr	r4, [r3, #0]
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	6053      	str	r3, [r2, #4]
 800a75e:	4421      	add	r1, r4
 800a760:	6011      	str	r1, [r2, #0]
 800a762:	e7da      	b.n	800a71a <_free_r+0x26>
 800a764:	d902      	bls.n	800a76c <_free_r+0x78>
 800a766:	230c      	movs	r3, #12
 800a768:	6003      	str	r3, [r0, #0]
 800a76a:	e7d6      	b.n	800a71a <_free_r+0x26>
 800a76c:	6825      	ldr	r5, [r4, #0]
 800a76e:	1961      	adds	r1, r4, r5
 800a770:	428b      	cmp	r3, r1
 800a772:	bf04      	itt	eq
 800a774:	6819      	ldreq	r1, [r3, #0]
 800a776:	685b      	ldreq	r3, [r3, #4]
 800a778:	6063      	str	r3, [r4, #4]
 800a77a:	bf04      	itt	eq
 800a77c:	1949      	addeq	r1, r1, r5
 800a77e:	6021      	streq	r1, [r4, #0]
 800a780:	6054      	str	r4, [r2, #4]
 800a782:	e7ca      	b.n	800a71a <_free_r+0x26>
 800a784:	b003      	add	sp, #12
 800a786:	bd30      	pop	{r4, r5, pc}
 800a788:	20000c7c 	.word	0x20000c7c

0800a78c <sbrk_aligned>:
 800a78c:	b570      	push	{r4, r5, r6, lr}
 800a78e:	4e0e      	ldr	r6, [pc, #56]	; (800a7c8 <sbrk_aligned+0x3c>)
 800a790:	460c      	mov	r4, r1
 800a792:	6831      	ldr	r1, [r6, #0]
 800a794:	4605      	mov	r5, r0
 800a796:	b911      	cbnz	r1, 800a79e <sbrk_aligned+0x12>
 800a798:	f000 f88c 	bl	800a8b4 <_sbrk_r>
 800a79c:	6030      	str	r0, [r6, #0]
 800a79e:	4621      	mov	r1, r4
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	f000 f887 	bl	800a8b4 <_sbrk_r>
 800a7a6:	1c43      	adds	r3, r0, #1
 800a7a8:	d00a      	beq.n	800a7c0 <sbrk_aligned+0x34>
 800a7aa:	1cc4      	adds	r4, r0, #3
 800a7ac:	f024 0403 	bic.w	r4, r4, #3
 800a7b0:	42a0      	cmp	r0, r4
 800a7b2:	d007      	beq.n	800a7c4 <sbrk_aligned+0x38>
 800a7b4:	1a21      	subs	r1, r4, r0
 800a7b6:	4628      	mov	r0, r5
 800a7b8:	f000 f87c 	bl	800a8b4 <_sbrk_r>
 800a7bc:	3001      	adds	r0, #1
 800a7be:	d101      	bne.n	800a7c4 <sbrk_aligned+0x38>
 800a7c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	bd70      	pop	{r4, r5, r6, pc}
 800a7c8:	20000c80 	.word	0x20000c80

0800a7cc <_malloc_r>:
 800a7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7d0:	1ccd      	adds	r5, r1, #3
 800a7d2:	f025 0503 	bic.w	r5, r5, #3
 800a7d6:	3508      	adds	r5, #8
 800a7d8:	2d0c      	cmp	r5, #12
 800a7da:	bf38      	it	cc
 800a7dc:	250c      	movcc	r5, #12
 800a7de:	2d00      	cmp	r5, #0
 800a7e0:	4607      	mov	r7, r0
 800a7e2:	db01      	blt.n	800a7e8 <_malloc_r+0x1c>
 800a7e4:	42a9      	cmp	r1, r5
 800a7e6:	d905      	bls.n	800a7f4 <_malloc_r+0x28>
 800a7e8:	230c      	movs	r3, #12
 800a7ea:	603b      	str	r3, [r7, #0]
 800a7ec:	2600      	movs	r6, #0
 800a7ee:	4630      	mov	r0, r6
 800a7f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7f4:	4e2e      	ldr	r6, [pc, #184]	; (800a8b0 <_malloc_r+0xe4>)
 800a7f6:	f000 f86d 	bl	800a8d4 <__malloc_lock>
 800a7fa:	6833      	ldr	r3, [r6, #0]
 800a7fc:	461c      	mov	r4, r3
 800a7fe:	bb34      	cbnz	r4, 800a84e <_malloc_r+0x82>
 800a800:	4629      	mov	r1, r5
 800a802:	4638      	mov	r0, r7
 800a804:	f7ff ffc2 	bl	800a78c <sbrk_aligned>
 800a808:	1c43      	adds	r3, r0, #1
 800a80a:	4604      	mov	r4, r0
 800a80c:	d14d      	bne.n	800a8aa <_malloc_r+0xde>
 800a80e:	6834      	ldr	r4, [r6, #0]
 800a810:	4626      	mov	r6, r4
 800a812:	2e00      	cmp	r6, #0
 800a814:	d140      	bne.n	800a898 <_malloc_r+0xcc>
 800a816:	6823      	ldr	r3, [r4, #0]
 800a818:	4631      	mov	r1, r6
 800a81a:	4638      	mov	r0, r7
 800a81c:	eb04 0803 	add.w	r8, r4, r3
 800a820:	f000 f848 	bl	800a8b4 <_sbrk_r>
 800a824:	4580      	cmp	r8, r0
 800a826:	d13a      	bne.n	800a89e <_malloc_r+0xd2>
 800a828:	6821      	ldr	r1, [r4, #0]
 800a82a:	3503      	adds	r5, #3
 800a82c:	1a6d      	subs	r5, r5, r1
 800a82e:	f025 0503 	bic.w	r5, r5, #3
 800a832:	3508      	adds	r5, #8
 800a834:	2d0c      	cmp	r5, #12
 800a836:	bf38      	it	cc
 800a838:	250c      	movcc	r5, #12
 800a83a:	4629      	mov	r1, r5
 800a83c:	4638      	mov	r0, r7
 800a83e:	f7ff ffa5 	bl	800a78c <sbrk_aligned>
 800a842:	3001      	adds	r0, #1
 800a844:	d02b      	beq.n	800a89e <_malloc_r+0xd2>
 800a846:	6823      	ldr	r3, [r4, #0]
 800a848:	442b      	add	r3, r5
 800a84a:	6023      	str	r3, [r4, #0]
 800a84c:	e00e      	b.n	800a86c <_malloc_r+0xa0>
 800a84e:	6822      	ldr	r2, [r4, #0]
 800a850:	1b52      	subs	r2, r2, r5
 800a852:	d41e      	bmi.n	800a892 <_malloc_r+0xc6>
 800a854:	2a0b      	cmp	r2, #11
 800a856:	d916      	bls.n	800a886 <_malloc_r+0xba>
 800a858:	1961      	adds	r1, r4, r5
 800a85a:	42a3      	cmp	r3, r4
 800a85c:	6025      	str	r5, [r4, #0]
 800a85e:	bf18      	it	ne
 800a860:	6059      	strne	r1, [r3, #4]
 800a862:	6863      	ldr	r3, [r4, #4]
 800a864:	bf08      	it	eq
 800a866:	6031      	streq	r1, [r6, #0]
 800a868:	5162      	str	r2, [r4, r5]
 800a86a:	604b      	str	r3, [r1, #4]
 800a86c:	4638      	mov	r0, r7
 800a86e:	f104 060b 	add.w	r6, r4, #11
 800a872:	f000 f835 	bl	800a8e0 <__malloc_unlock>
 800a876:	f026 0607 	bic.w	r6, r6, #7
 800a87a:	1d23      	adds	r3, r4, #4
 800a87c:	1af2      	subs	r2, r6, r3
 800a87e:	d0b6      	beq.n	800a7ee <_malloc_r+0x22>
 800a880:	1b9b      	subs	r3, r3, r6
 800a882:	50a3      	str	r3, [r4, r2]
 800a884:	e7b3      	b.n	800a7ee <_malloc_r+0x22>
 800a886:	6862      	ldr	r2, [r4, #4]
 800a888:	42a3      	cmp	r3, r4
 800a88a:	bf0c      	ite	eq
 800a88c:	6032      	streq	r2, [r6, #0]
 800a88e:	605a      	strne	r2, [r3, #4]
 800a890:	e7ec      	b.n	800a86c <_malloc_r+0xa0>
 800a892:	4623      	mov	r3, r4
 800a894:	6864      	ldr	r4, [r4, #4]
 800a896:	e7b2      	b.n	800a7fe <_malloc_r+0x32>
 800a898:	4634      	mov	r4, r6
 800a89a:	6876      	ldr	r6, [r6, #4]
 800a89c:	e7b9      	b.n	800a812 <_malloc_r+0x46>
 800a89e:	230c      	movs	r3, #12
 800a8a0:	603b      	str	r3, [r7, #0]
 800a8a2:	4638      	mov	r0, r7
 800a8a4:	f000 f81c 	bl	800a8e0 <__malloc_unlock>
 800a8a8:	e7a1      	b.n	800a7ee <_malloc_r+0x22>
 800a8aa:	6025      	str	r5, [r4, #0]
 800a8ac:	e7de      	b.n	800a86c <_malloc_r+0xa0>
 800a8ae:	bf00      	nop
 800a8b0:	20000c7c 	.word	0x20000c7c

0800a8b4 <_sbrk_r>:
 800a8b4:	b538      	push	{r3, r4, r5, lr}
 800a8b6:	4d06      	ldr	r5, [pc, #24]	; (800a8d0 <_sbrk_r+0x1c>)
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	4604      	mov	r4, r0
 800a8bc:	4608      	mov	r0, r1
 800a8be:	602b      	str	r3, [r5, #0]
 800a8c0:	f7f5 fff0 	bl	80008a4 <_sbrk>
 800a8c4:	1c43      	adds	r3, r0, #1
 800a8c6:	d102      	bne.n	800a8ce <_sbrk_r+0x1a>
 800a8c8:	682b      	ldr	r3, [r5, #0]
 800a8ca:	b103      	cbz	r3, 800a8ce <_sbrk_r+0x1a>
 800a8cc:	6023      	str	r3, [r4, #0]
 800a8ce:	bd38      	pop	{r3, r4, r5, pc}
 800a8d0:	20000c84 	.word	0x20000c84

0800a8d4 <__malloc_lock>:
 800a8d4:	4801      	ldr	r0, [pc, #4]	; (800a8dc <__malloc_lock+0x8>)
 800a8d6:	f000 b809 	b.w	800a8ec <__retarget_lock_acquire_recursive>
 800a8da:	bf00      	nop
 800a8dc:	20000c88 	.word	0x20000c88

0800a8e0 <__malloc_unlock>:
 800a8e0:	4801      	ldr	r0, [pc, #4]	; (800a8e8 <__malloc_unlock+0x8>)
 800a8e2:	f000 b804 	b.w	800a8ee <__retarget_lock_release_recursive>
 800a8e6:	bf00      	nop
 800a8e8:	20000c88 	.word	0x20000c88

0800a8ec <__retarget_lock_acquire_recursive>:
 800a8ec:	4770      	bx	lr

0800a8ee <__retarget_lock_release_recursive>:
 800a8ee:	4770      	bx	lr

0800a8f0 <_init>:
 800a8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8f2:	bf00      	nop
 800a8f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8f6:	bc08      	pop	{r3}
 800a8f8:	469e      	mov	lr, r3
 800a8fa:	4770      	bx	lr

0800a8fc <_fini>:
 800a8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8fe:	bf00      	nop
 800a900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a902:	bc08      	pop	{r3}
 800a904:	469e      	mov	lr, r3
 800a906:	4770      	bx	lr
