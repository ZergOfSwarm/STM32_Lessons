
USB_767.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6c0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000794  0800d8c0  0800d8c0  0001d8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e054  0800e054  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800e054  0800e054  0001e054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e05c  0800e05c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e05c  0800e05c  0001e05c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e060  0800e060  0001e060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800e064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028c0  20000090  0800e0f4  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002950  0800e0f4  00022950  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030443  00000000  00000000  000200be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005856  00000000  00000000  00050501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d0  00000000  00000000  00055d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015f8  00000000  00000000  00057528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e8ac  00000000  00000000  00058b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000229bd  00000000  00000000  000873cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010319e  00000000  00000000  000a9d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001acf27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ae0  00000000  00000000  001acf7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000090 	.word	0x20000090
 800021c:	00000000 	.word	0x00000000
 8000220:	0800d8a8 	.word	0x0800d8a8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000094 	.word	0x20000094
 800023c:	0800d8a8 	.word	0x0800d8a8

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f7ff fe1f 	bl	8000254 <strlen>
 8000616:	4603      	mov	r3, r0
 8000618:	b29a      	uxth	r2, r3
 800061a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800061e:	6879      	ldr	r1, [r7, #4]
 8000620:	4803      	ldr	r0, [pc, #12]	; (8000630 <Send_Uart+0x28>)
 8000622:	f004 faa5 	bl	8004b70 <HAL_UART_Transmit>
}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000124 	.word	0x20000124

08000634 <Mount_USB>:



void Mount_USB (void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000638:	2201      	movs	r2, #1
 800063a:	490a      	ldr	r1, [pc, #40]	; (8000664 <Mount_USB+0x30>)
 800063c:	480a      	ldr	r0, [pc, #40]	; (8000668 <Mount_USB+0x34>)
 800063e:	f00a fdc5 	bl	800b1cc <f_mount>
 8000642:	4603      	mov	r3, r0
 8000644:	461a      	mov	r2, r3
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <Mount_USB+0x38>)
 8000648:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting USB ...\n\n");
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <Mount_USB+0x38>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d003      	beq.n	800065a <Mount_USB+0x26>
 8000652:	4807      	ldr	r0, [pc, #28]	; (8000670 <Mount_USB+0x3c>)
 8000654:	f7ff ffd8 	bl	8000608 <Send_Uart>
	else Send_Uart("USB mounted successfully...\n");
}
 8000658:	e002      	b.n	8000660 <Mount_USB+0x2c>
	else Send_Uart("USB mounted successfully...\n");
 800065a:	4806      	ldr	r0, [pc, #24]	; (8000674 <Mount_USB+0x40>)
 800065c:	f7ff ffd4 	bl	8000608 <Send_Uart>
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	200001f8 	.word	0x200001f8
 8000668:	2000122c 	.word	0x2000122c
 800066c:	20000104 	.word	0x20000104
 8000670:	0800d8c0 	.word	0x0800d8c0
 8000674:	0800d8e0 	.word	0x0800d8e0

08000678 <Scan_USB>:
	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
}

/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_USB (char* pat)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b092      	sub	sp, #72	; 0x48
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
    DIR dir;
    UINT i;
    char *path = malloc(20*sizeof (char));
 8000680:	2014      	movs	r0, #20
 8000682:	f00c f8cd 	bl	800c820 <malloc>
 8000686:	4603      	mov	r3, r0
 8000688:	647b      	str	r3, [r7, #68]	; 0x44
    sprintf (path, "%s",pat);
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	4944      	ldr	r1, [pc, #272]	; (80007a0 <Scan_USB+0x128>)
 800068e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000690:	f00c fa1c 	bl	800cacc <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800069a:	4618      	mov	r0, r3
 800069c:	f00b f9e4 	bl	800ba68 <f_opendir>
 80006a0:	4603      	mov	r3, r0
 80006a2:	461a      	mov	r2, r3
 80006a4:	4b3f      	ldr	r3, [pc, #252]	; (80007a4 <Scan_USB+0x12c>)
 80006a6:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80006a8:	4b3e      	ldr	r3, [pc, #248]	; (80007a4 <Scan_USB+0x12c>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d16e      	bne.n	800078e <Scan_USB+0x116>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 80006b0:	f107 0308 	add.w	r3, r7, #8
 80006b4:	493c      	ldr	r1, [pc, #240]	; (80007a8 <Scan_USB+0x130>)
 80006b6:	4618      	mov	r0, r3
 80006b8:	f00b fa6f 	bl	800bb9a <f_readdir>
 80006bc:	4603      	mov	r3, r0
 80006be:	461a      	mov	r2, r3
 80006c0:	4b38      	ldr	r3, [pc, #224]	; (80007a4 <Scan_USB+0x12c>)
 80006c2:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || USBHfno.fname[0] == 0) break;  /* Break on error or end of dir */
 80006c4:	4b37      	ldr	r3, [pc, #220]	; (80007a4 <Scan_USB+0x12c>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d15b      	bne.n	8000784 <Scan_USB+0x10c>
 80006cc:	4b36      	ldr	r3, [pc, #216]	; (80007a8 <Scan_USB+0x130>)
 80006ce:	7a5b      	ldrb	r3, [r3, #9]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d057      	beq.n	8000784 <Scan_USB+0x10c>
            if (USBHfno.fattrib & AM_DIR)     /* It is a directory */
 80006d4:	4b34      	ldr	r3, [pc, #208]	; (80007a8 <Scan_USB+0x130>)
 80006d6:	7a1b      	ldrb	r3, [r3, #8]
 80006d8:	f003 0310 	and.w	r3, r3, #16
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d03a      	beq.n	8000756 <Scan_USB+0xde>
            {
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 80006e0:	4932      	ldr	r1, [pc, #200]	; (80007ac <Scan_USB+0x134>)
 80006e2:	4833      	ldr	r0, [pc, #204]	; (80007b0 <Scan_USB+0x138>)
 80006e4:	f7ff fdac 	bl	8000240 <strcmp>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d045      	beq.n	800077a <Scan_USB+0x102>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 80006ee:	492f      	ldr	r1, [pc, #188]	; (80007ac <Scan_USB+0x134>)
 80006f0:	4830      	ldr	r0, [pc, #192]	; (80007b4 <Scan_USB+0x13c>)
 80006f2:	f7ff fda5 	bl	8000240 <strcmp>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d040      	beq.n	800077e <Scan_USB+0x106>
            	char *buf = malloc(30*sizeof(char));
 80006fc:	201e      	movs	r0, #30
 80006fe:	f00c f88f 	bl	800c820 <malloc>
 8000702:	4603      	mov	r3, r0
 8000704:	63fb      	str	r3, [r7, #60]	; 0x3c
            	sprintf (buf, "Dir: %s\r\n", USBHfno.fname);
 8000706:	4a29      	ldr	r2, [pc, #164]	; (80007ac <Scan_USB+0x134>)
 8000708:	492b      	ldr	r1, [pc, #172]	; (80007b8 <Scan_USB+0x140>)
 800070a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800070c:	f00c f9de 	bl	800cacc <siprintf>
            	Send_Uart(buf);
 8000710:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000712:	f7ff ff79 	bl	8000608 <Send_Uart>
            	free(buf);
 8000716:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000718:	f00c f88a 	bl	800c830 <free>
                i = strlen(path);
 800071c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800071e:	f7ff fd99 	bl	8000254 <strlen>
 8000722:	63b8      	str	r0, [r7, #56]	; 0x38
                sprintf(&path[i], "/%s", USBHfno.fname);
 8000724:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000728:	4413      	add	r3, r2
 800072a:	4a20      	ldr	r2, [pc, #128]	; (80007ac <Scan_USB+0x134>)
 800072c:	4923      	ldr	r1, [pc, #140]	; (80007bc <Scan_USB+0x144>)
 800072e:	4618      	mov	r0, r3
 8000730:	f00c f9cc 	bl	800cacc <siprintf>
                fresult = Scan_USB(path);                     /* Enter the directory */
 8000734:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000736:	f7ff ff9f 	bl	8000678 <Scan_USB>
 800073a:	4603      	mov	r3, r0
 800073c:	461a      	mov	r2, r3
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <Scan_USB+0x12c>)
 8000740:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK) break;
 8000742:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <Scan_USB+0x12c>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d11b      	bne.n	8000782 <Scan_USB+0x10a>
                path[i] = 0;
 800074a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800074c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800074e:	4413      	add	r3, r2
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
 8000754:	e7ac      	b.n	80006b0 <Scan_USB+0x38>
            }
            else
            {   /* It is a file. */
           	   char *buf = malloc(30*sizeof(char));
 8000756:	201e      	movs	r0, #30
 8000758:	f00c f862 	bl	800c820 <malloc>
 800075c:	4603      	mov	r3, r0
 800075e:	643b      	str	r3, [r7, #64]	; 0x40
               sprintf(buf,"File: %s/%s\n", path, USBHfno.fname);
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <Scan_USB+0x134>)
 8000762:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000764:	4916      	ldr	r1, [pc, #88]	; (80007c0 <Scan_USB+0x148>)
 8000766:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000768:	f00c f9b0 	bl	800cacc <siprintf>
               Send_Uart(buf);
 800076c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800076e:	f7ff ff4b 	bl	8000608 <Send_Uart>
               free(buf);
 8000772:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000774:	f00c f85c 	bl	800c830 <free>
 8000778:	e79a      	b.n	80006b0 <Scan_USB+0x38>
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 800077a:	bf00      	nop
 800077c:	e798      	b.n	80006b0 <Scan_USB+0x38>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 800077e:	bf00      	nop
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 8000780:	e796      	b.n	80006b0 <Scan_USB+0x38>
                if (fresult != FR_OK) break;
 8000782:	bf00      	nop
            }
        }
        f_closedir(&dir);
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	4618      	mov	r0, r3
 800078a:	f00b f9e0 	bl	800bb4e <f_closedir>
    }
    free(path);
 800078e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000790:	f00c f84e 	bl	800c830 <free>
    return fresult;
 8000794:	4b03      	ldr	r3, [pc, #12]	; (80007a4 <Scan_USB+0x12c>)
 8000796:	781b      	ldrb	r3, [r3, #0]
}
 8000798:	4618      	mov	r0, r3
 800079a:	3748      	adds	r7, #72	; 0x48
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	0800d944 	.word	0x0800d944
 80007a4:	20000104 	.word	0x20000104
 80007a8:	20000108 	.word	0x20000108
 80007ac:	20000111 	.word	0x20000111
 80007b0:	0800d948 	.word	0x0800d948
 80007b4:	0800d954 	.word	0x0800d954
 80007b8:	0800d970 	.word	0x0800d970
 80007bc:	0800d97c 	.word	0x0800d97c
 80007c0:	0800d980 	.word	0x0800d980

080007c4 <Write_File>:




FRESULT Write_File (char *name, char *data)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b088      	sub	sp, #32
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]

	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 80007ce:	4955      	ldr	r1, [pc, #340]	; (8000924 <Write_File+0x160>)
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f00b fa1f 	bl	800bc14 <f_stat>
 80007d6:	4603      	mov	r3, r0
 80007d8:	461a      	mov	r2, r3
 80007da:	4b53      	ldr	r3, [pc, #332]	; (8000928 <Write_File+0x164>)
 80007dc:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80007de:	4b52      	ldr	r3, [pc, #328]	; (8000928 <Write_File+0x164>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d012      	beq.n	800080c <Write_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 80007e6:	2064      	movs	r0, #100	; 0x64
 80007e8:	f00c f81a 	bl	800c820 <malloc>
 80007ec:	4603      	mov	r3, r0
 80007ee:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 80007f0:	687a      	ldr	r2, [r7, #4]
 80007f2:	494e      	ldr	r1, [pc, #312]	; (800092c <Write_File+0x168>)
 80007f4:	68b8      	ldr	r0, [r7, #8]
 80007f6:	f00c f969 	bl	800cacc <siprintf>
		Send_Uart (buf);
 80007fa:	68b8      	ldr	r0, [r7, #8]
 80007fc:	f7ff ff04 	bl	8000608 <Send_Uart>
	    free(buf);
 8000800:	68b8      	ldr	r0, [r7, #8]
 8000802:	f00c f815 	bl	800c830 <free>
	    return fresult;
 8000806:	4b48      	ldr	r3, [pc, #288]	; (8000928 <Write_File+0x164>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	e087      	b.n	800091c <Write_File+0x158>
	}

	else
	{
	    /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_EXISTING | FA_WRITE);
 800080c:	2202      	movs	r2, #2
 800080e:	6879      	ldr	r1, [r7, #4]
 8000810:	4847      	ldr	r0, [pc, #284]	; (8000930 <Write_File+0x16c>)
 8000812:	f00a fd21 	bl	800b258 <f_open>
 8000816:	4603      	mov	r3, r0
 8000818:	461a      	mov	r2, r3
 800081a:	4b43      	ldr	r3, [pc, #268]	; (8000928 <Write_File+0x164>)
 800081c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800081e:	4b42      	ldr	r3, [pc, #264]	; (8000928 <Write_File+0x164>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d015      	beq.n	8000852 <Write_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000826:	2064      	movs	r0, #100	; 0x64
 8000828:	f00b fffa 	bl	800c820 <malloc>
 800082c:	4603      	mov	r3, r0
 800082e:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000830:	4b3d      	ldr	r3, [pc, #244]	; (8000928 <Write_File+0x164>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	493e      	ldr	r1, [pc, #248]	; (8000934 <Write_File+0x170>)
 800083a:	68f8      	ldr	r0, [r7, #12]
 800083c:	f00c f946 	bl	800cacc <siprintf>
	    	Send_Uart(buf);
 8000840:	68f8      	ldr	r0, [r7, #12]
 8000842:	f7ff fee1 	bl	8000608 <Send_Uart>
	        free(buf);
 8000846:	68f8      	ldr	r0, [r7, #12]
 8000848:	f00b fff2 	bl	800c830 <free>
	        return fresult;
 800084c:	4b36      	ldr	r3, [pc, #216]	; (8000928 <Write_File+0x164>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	e064      	b.n	800091c <Write_File+0x158>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000852:	2064      	movs	r0, #100	; 0x64
 8000854:	f00b ffe4 	bl	800c820 <malloc>
 8000858:	4603      	mov	r3, r0
 800085a:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "Opening file-->  *%s*  To WRITE data in it\n", name);
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	4936      	ldr	r1, [pc, #216]	; (8000938 <Write_File+0x174>)
 8000860:	69f8      	ldr	r0, [r7, #28]
 8000862:	f00c f933 	bl	800cacc <siprintf>
	    	Send_Uart(buf);
 8000866:	69f8      	ldr	r0, [r7, #28]
 8000868:	f7ff fece 	bl	8000608 <Send_Uart>
	        free(buf);
 800086c:	69f8      	ldr	r0, [r7, #28]
 800086e:	f00b ffdf 	bl	800c830 <free>

	    	fresult = f_write(&USBHFile, data, strlen(data), &bw);
 8000872:	6838      	ldr	r0, [r7, #0]
 8000874:	f7ff fcee 	bl	8000254 <strlen>
 8000878:	4602      	mov	r2, r0
 800087a:	4b30      	ldr	r3, [pc, #192]	; (800093c <Write_File+0x178>)
 800087c:	6839      	ldr	r1, [r7, #0]
 800087e:	482c      	ldr	r0, [pc, #176]	; (8000930 <Write_File+0x16c>)
 8000880:	f00a feb6 	bl	800b5f0 <f_write>
 8000884:	4603      	mov	r3, r0
 8000886:	461a      	mov	r2, r3
 8000888:	4b27      	ldr	r3, [pc, #156]	; (8000928 <Write_File+0x164>)
 800088a:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 800088c:	4b26      	ldr	r3, [pc, #152]	; (8000928 <Write_File+0x164>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d012      	beq.n	80008ba <Write_File+0xf6>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000894:	2064      	movs	r0, #100	; 0x64
 8000896:	f00b ffc3 	bl	800c820 <malloc>
 800089a:	4603      	mov	r3, r0
 800089c:	61bb      	str	r3, [r7, #24]
	    		sprintf (buf, "ERROR!!! No. %d while writing to the FILE *%s*\n\n", fresult, name);
 800089e:	4b22      	ldr	r3, [pc, #136]	; (8000928 <Write_File+0x164>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	461a      	mov	r2, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4926      	ldr	r1, [pc, #152]	; (8000940 <Write_File+0x17c>)
 80008a8:	69b8      	ldr	r0, [r7, #24]
 80008aa:	f00c f90f 	bl	800cacc <siprintf>
	    		Send_Uart(buf);
 80008ae:	69b8      	ldr	r0, [r7, #24]
 80008b0:	f7ff feaa 	bl	8000608 <Send_Uart>
	    		free(buf);
 80008b4:	69b8      	ldr	r0, [r7, #24]
 80008b6:	f00b ffbb 	bl	800c830 <free>
	    	}

	    	/* Close file */
	    	fresult = f_close(&USBHFile);
 80008ba:	481d      	ldr	r0, [pc, #116]	; (8000930 <Write_File+0x16c>)
 80008bc:	f00b f8aa 	bl	800ba14 <f_close>
 80008c0:	4603      	mov	r3, r0
 80008c2:	461a      	mov	r2, r3
 80008c4:	4b18      	ldr	r3, [pc, #96]	; (8000928 <Write_File+0x164>)
 80008c6:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <Write_File+0x164>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d013      	beq.n	80008f8 <Write_File+0x134>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 80008d0:	2064      	movs	r0, #100	; 0x64
 80008d2:	f00b ffa5 	bl	800c820 <malloc>
 80008d6:	4603      	mov	r3, r0
 80008d8:	613b      	str	r3, [r7, #16]
	    		sprintf (buf, "ERROR!!! No. %d in closing file *%s* after writing it\n\n", fresult, name);
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <Write_File+0x164>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	461a      	mov	r2, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4918      	ldr	r1, [pc, #96]	; (8000944 <Write_File+0x180>)
 80008e4:	6938      	ldr	r0, [r7, #16]
 80008e6:	f00c f8f1 	bl	800cacc <siprintf>
	    		Send_Uart(buf);
 80008ea:	6938      	ldr	r0, [r7, #16]
 80008ec:	f7ff fe8c 	bl	8000608 <Send_Uart>
	    		free(buf);
 80008f0:	6938      	ldr	r0, [r7, #16]
 80008f2:	f00b ff9d 	bl	800c830 <free>
 80008f6:	e00f      	b.n	8000918 <Write_File+0x154>
	    	}
	    	else
	    	{
	    		char *buf = malloc(100*sizeof(char));
 80008f8:	2064      	movs	r0, #100	; 0x64
 80008fa:	f00b ff91 	bl	800c820 <malloc>
 80008fe:	4603      	mov	r3, r0
 8000900:	617b      	str	r3, [r7, #20]
	    		sprintf (buf, "File *%s* is WRITTEN and CLOSED successfully\n\n", name);
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	4910      	ldr	r1, [pc, #64]	; (8000948 <Write_File+0x184>)
 8000906:	6978      	ldr	r0, [r7, #20]
 8000908:	f00c f8e0 	bl	800cacc <siprintf>
	    		Send_Uart(buf);
 800090c:	6978      	ldr	r0, [r7, #20]
 800090e:	f7ff fe7b 	bl	8000608 <Send_Uart>
	    		free(buf);
 8000912:	6978      	ldr	r0, [r7, #20]
 8000914:	f00b ff8c 	bl	800c830 <free>
	    	}
	    }
	    return fresult;
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <Write_File+0x164>)
 800091a:	781b      	ldrb	r3, [r3, #0]
	}
}
 800091c:	4618      	mov	r0, r3
 800091e:	3720      	adds	r7, #32
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000108 	.word	0x20000108
 8000928:	20000104 	.word	0x20000104
 800092c:	0800d994 	.word	0x0800d994
 8000930:	200001fc 	.word	0x200001fc
 8000934:	0800d9b4 	.word	0x0800d9b4
 8000938:	0800d9dc 	.word	0x0800d9dc
 800093c:	20000100 	.word	0x20000100
 8000940:	0800da08 	.word	0x0800da08
 8000944:	0800da3c 	.word	0x0800da3c
 8000948:	0800da74 	.word	0x0800da74

0800094c <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b088      	sub	sp, #32
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &USBHfno);
 8000954:	4943      	ldr	r1, [pc, #268]	; (8000a64 <Create_File+0x118>)
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f00b f95c 	bl	800bc14 <f_stat>
 800095c:	4603      	mov	r3, r0
 800095e:	461a      	mov	r2, r3
 8000960:	4b41      	ldr	r3, [pc, #260]	; (8000a68 <Create_File+0x11c>)
 8000962:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000964:	4b40      	ldr	r3, [pc, #256]	; (8000a68 <Create_File+0x11c>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d112      	bne.n	8000992 <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 800096c:	2064      	movs	r0, #100	; 0x64
 800096e:	f00b ff57 	bl	800c820 <malloc>
 8000972:	4603      	mov	r3, r0
 8000974:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	493c      	ldr	r1, [pc, #240]	; (8000a6c <Create_File+0x120>)
 800097a:	68f8      	ldr	r0, [r7, #12]
 800097c:	f00c f8a6 	bl	800cacc <siprintf>
		Send_Uart(buf);
 8000980:	68f8      	ldr	r0, [r7, #12]
 8000982:	f7ff fe41 	bl	8000608 <Send_Uart>
		free(buf);
 8000986:	68f8      	ldr	r0, [r7, #12]
 8000988:	f00b ff52 	bl	800c830 <free>
	    return fresult;
 800098c:	4b36      	ldr	r3, [pc, #216]	; (8000a68 <Create_File+0x11c>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	e063      	b.n	8000a5a <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&USBHFile, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8000992:	220b      	movs	r2, #11
 8000994:	6879      	ldr	r1, [r7, #4]
 8000996:	4836      	ldr	r0, [pc, #216]	; (8000a70 <Create_File+0x124>)
 8000998:	f00a fc5e 	bl	800b258 <f_open>
 800099c:	4603      	mov	r3, r0
 800099e:	461a      	mov	r2, r3
 80009a0:	4b31      	ldr	r3, [pc, #196]	; (8000a68 <Create_File+0x11c>)
 80009a2:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80009a4:	4b30      	ldr	r3, [pc, #192]	; (8000a68 <Create_File+0x11c>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d015      	beq.n	80009d8 <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 80009ac:	2064      	movs	r0, #100	; 0x64
 80009ae:	f00b ff37 	bl	800c820 <malloc>
 80009b2:	4603      	mov	r3, r0
 80009b4:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 80009b6:	4b2c      	ldr	r3, [pc, #176]	; (8000a68 <Create_File+0x11c>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	461a      	mov	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	492d      	ldr	r1, [pc, #180]	; (8000a74 <Create_File+0x128>)
 80009c0:	6938      	ldr	r0, [r7, #16]
 80009c2:	f00c f883 	bl	800cacc <siprintf>
			Send_Uart(buf);
 80009c6:	6938      	ldr	r0, [r7, #16]
 80009c8:	f7ff fe1e 	bl	8000608 <Send_Uart>
			free(buf);
 80009cc:	6938      	ldr	r0, [r7, #16]
 80009ce:	f00b ff2f 	bl	800c830 <free>
		    return fresult;
 80009d2:	4b25      	ldr	r3, [pc, #148]	; (8000a68 <Create_File+0x11c>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	e040      	b.n	8000a5a <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 80009d8:	2064      	movs	r0, #100	; 0x64
 80009da:	f00b ff21 	bl	800c820 <malloc>
 80009de:	4603      	mov	r3, r0
 80009e0:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	4924      	ldr	r1, [pc, #144]	; (8000a78 <Create_File+0x12c>)
 80009e6:	69f8      	ldr	r0, [r7, #28]
 80009e8:	f00c f870 	bl	800cacc <siprintf>
			Send_Uart(buf);
 80009ec:	69f8      	ldr	r0, [r7, #28]
 80009ee:	f7ff fe0b 	bl	8000608 <Send_Uart>
			free(buf);
 80009f2:	69f8      	ldr	r0, [r7, #28]
 80009f4:	f00b ff1c 	bl	800c830 <free>
		}

		fresult = f_close(&USBHFile);
 80009f8:	481d      	ldr	r0, [pc, #116]	; (8000a70 <Create_File+0x124>)
 80009fa:	f00b f80b 	bl	800ba14 <f_close>
 80009fe:	4603      	mov	r3, r0
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <Create_File+0x11c>)
 8000a04:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000a06:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <Create_File+0x11c>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d013      	beq.n	8000a36 <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 8000a0e:	2064      	movs	r0, #100	; 0x64
 8000a10:	f00b ff06 	bl	800c820 <malloc>
 8000a14:	4603      	mov	r3, r0
 8000a16:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8000a18:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <Create_File+0x11c>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4916      	ldr	r1, [pc, #88]	; (8000a7c <Create_File+0x130>)
 8000a22:	6978      	ldr	r0, [r7, #20]
 8000a24:	f00c f852 	bl	800cacc <siprintf>
			Send_Uart(buf);
 8000a28:	6978      	ldr	r0, [r7, #20]
 8000a2a:	f7ff fded 	bl	8000608 <Send_Uart>
			free(buf);
 8000a2e:	6978      	ldr	r0, [r7, #20]
 8000a30:	f00b fefe 	bl	800c830 <free>
 8000a34:	e00f      	b.n	8000a56 <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000a36:	2064      	movs	r0, #100	; 0x64
 8000a38:	f00b fef2 	bl	800c820 <malloc>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	490f      	ldr	r1, [pc, #60]	; (8000a80 <Create_File+0x134>)
 8000a44:	69b8      	ldr	r0, [r7, #24]
 8000a46:	f00c f841 	bl	800cacc <siprintf>
			Send_Uart(buf);
 8000a4a:	69b8      	ldr	r0, [r7, #24]
 8000a4c:	f7ff fddc 	bl	8000608 <Send_Uart>
			free(buf);
 8000a50:	69b8      	ldr	r0, [r7, #24]
 8000a52:	f00b feed 	bl	800c830 <free>
		}
	}
    return fresult;
 8000a56:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <Create_File+0x11c>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3720      	adds	r7, #32
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000108 	.word	0x20000108
 8000a68:	20000104 	.word	0x20000104
 8000a6c:	0800db68 	.word	0x0800db68
 8000a70:	200001fc 	.word	0x200001fc
 8000a74:	0800dba0 	.word	0x0800dba0
 8000a78:	0800dbc8 	.word	0x0800dbc8
 8000a7c:	0800dc08 	.word	0x0800dc08
 8000a80:	0800db48 	.word	0x0800db48

08000a84 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	; 0x28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 8000a8e:	495e      	ldr	r1, [pc, #376]	; (8000c08 <Update_File+0x184>)
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f00b f8bf 	bl	800bc14 <f_stat>
 8000a96:	4603      	mov	r3, r0
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b5c      	ldr	r3, [pc, #368]	; (8000c0c <Update_File+0x188>)
 8000a9c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000a9e:	4b5b      	ldr	r3, [pc, #364]	; (8000c0c <Update_File+0x188>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d012      	beq.n	8000acc <Update_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 8000aa6:	2064      	movs	r0, #100	; 0x64
 8000aa8:	f00b feba 	bl	800c820 <malloc>
 8000aac:	4603      	mov	r3, r0
 8000aae:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	4957      	ldr	r1, [pc, #348]	; (8000c10 <Update_File+0x18c>)
 8000ab4:	68f8      	ldr	r0, [r7, #12]
 8000ab6:	f00c f809 	bl	800cacc <siprintf>
		Send_Uart (buf);
 8000aba:	68f8      	ldr	r0, [r7, #12]
 8000abc:	f7ff fda4 	bl	8000608 <Send_Uart>
		free(buf);
 8000ac0:	68f8      	ldr	r0, [r7, #12]
 8000ac2:	f00b feb5 	bl	800c830 <free>
	    return fresult;
 8000ac6:	4b51      	ldr	r3, [pc, #324]	; (8000c0c <Update_File+0x188>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	e098      	b.n	8000bfe <Update_File+0x17a>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_APPEND | FA_WRITE);
 8000acc:	2232      	movs	r2, #50	; 0x32
 8000ace:	6879      	ldr	r1, [r7, #4]
 8000ad0:	4850      	ldr	r0, [pc, #320]	; (8000c14 <Update_File+0x190>)
 8000ad2:	f00a fbc1 	bl	800b258 <f_open>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b4c      	ldr	r3, [pc, #304]	; (8000c0c <Update_File+0x188>)
 8000adc:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000ade:	4b4b      	ldr	r3, [pc, #300]	; (8000c0c <Update_File+0x188>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d015      	beq.n	8000b12 <Update_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000ae6:	2064      	movs	r0, #100	; 0x64
 8000ae8:	f00b fe9a 	bl	800c820 <malloc>
 8000aec:	4603      	mov	r3, r0
 8000aee:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000af0:	4b46      	ldr	r3, [pc, #280]	; (8000c0c <Update_File+0x188>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4947      	ldr	r1, [pc, #284]	; (8000c18 <Update_File+0x194>)
 8000afa:	6938      	ldr	r0, [r7, #16]
 8000afc:	f00b ffe6 	bl	800cacc <siprintf>
	    	Send_Uart(buf);
 8000b00:	6938      	ldr	r0, [r7, #16]
 8000b02:	f7ff fd81 	bl	8000608 <Send_Uart>
	        free(buf);
 8000b06:	6938      	ldr	r0, [r7, #16]
 8000b08:	f00b fe92 	bl	800c830 <free>
	        return fresult;
 8000b0c:	4b3f      	ldr	r3, [pc, #252]	; (8000c0c <Update_File+0x188>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	e075      	b.n	8000bfe <Update_File+0x17a>
	    }

    	char *buf = malloc(100*sizeof(char));
 8000b12:	2064      	movs	r0, #100	; 0x64
 8000b14:	f00b fe84 	bl	800c820 <malloc>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
    	sprintf (buf, "Opening file-->  *%s*  To UPDATE data in it\n", name);
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	493f      	ldr	r1, [pc, #252]	; (8000c1c <Update_File+0x198>)
 8000b20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000b22:	f00b ffd3 	bl	800cacc <siprintf>
    	Send_Uart(buf);
 8000b26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000b28:	f7ff fd6e 	bl	8000608 <Send_Uart>
        free(buf);
 8000b2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000b2e:	f00b fe7f 	bl	800c830 <free>

	    /* Writing text */
	    fresult = f_write(&USBHFile, data, strlen (data), &bw);
 8000b32:	6838      	ldr	r0, [r7, #0]
 8000b34:	f7ff fb8e 	bl	8000254 <strlen>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	4b39      	ldr	r3, [pc, #228]	; (8000c20 <Update_File+0x19c>)
 8000b3c:	6839      	ldr	r1, [r7, #0]
 8000b3e:	4835      	ldr	r0, [pc, #212]	; (8000c14 <Update_File+0x190>)
 8000b40:	f00a fd56 	bl	800b5f0 <f_write>
 8000b44:	4603      	mov	r3, r0
 8000b46:	461a      	mov	r2, r3
 8000b48:	4b30      	ldr	r3, [pc, #192]	; (8000c0c <Update_File+0x188>)
 8000b4a:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000b4c:	4b2f      	ldr	r3, [pc, #188]	; (8000c0c <Update_File+0x188>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d013      	beq.n	8000b7c <Update_File+0xf8>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000b54:	2064      	movs	r0, #100	; 0x64
 8000b56:	f00b fe63 	bl	800c820 <malloc>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 8000b5e:	4b2b      	ldr	r3, [pc, #172]	; (8000c0c <Update_File+0x188>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	492f      	ldr	r1, [pc, #188]	; (8000c24 <Update_File+0x1a0>)
 8000b68:	69f8      	ldr	r0, [r7, #28]
 8000b6a:	f00b ffaf 	bl	800cacc <siprintf>
	    	Send_Uart(buf);
 8000b6e:	69f8      	ldr	r0, [r7, #28]
 8000b70:	f7ff fd4a 	bl	8000608 <Send_Uart>
	    	free(buf);
 8000b74:	69f8      	ldr	r0, [r7, #28]
 8000b76:	f00b fe5b 	bl	800c830 <free>
 8000b7a:	e00f      	b.n	8000b9c <Update_File+0x118>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000b7c:	2064      	movs	r0, #100	; 0x64
 8000b7e:	f00b fe4f 	bl	800c820 <malloc>
 8000b82:	4603      	mov	r3, r0
 8000b84:	623b      	str	r3, [r7, #32]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	4927      	ldr	r1, [pc, #156]	; (8000c28 <Update_File+0x1a4>)
 8000b8a:	6a38      	ldr	r0, [r7, #32]
 8000b8c:	f00b ff9e 	bl	800cacc <siprintf>
	    	Send_Uart(buf);
 8000b90:	6a38      	ldr	r0, [r7, #32]
 8000b92:	f7ff fd39 	bl	8000608 <Send_Uart>
	    	free(buf);
 8000b96:	6a38      	ldr	r0, [r7, #32]
 8000b98:	f00b fe4a 	bl	800c830 <free>
	    }

	    /* Close file */
	    fresult = f_close(&USBHFile);
 8000b9c:	481d      	ldr	r0, [pc, #116]	; (8000c14 <Update_File+0x190>)
 8000b9e:	f00a ff39 	bl	800ba14 <f_close>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <Update_File+0x188>)
 8000ba8:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000baa:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <Update_File+0x188>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d013      	beq.n	8000bda <Update_File+0x156>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000bb2:	2064      	movs	r0, #100	; 0x64
 8000bb4:	f00b fe34 	bl	800c820 <malloc>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <Update_File+0x188>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4919      	ldr	r1, [pc, #100]	; (8000c2c <Update_File+0x1a8>)
 8000bc6:	6978      	ldr	r0, [r7, #20]
 8000bc8:	f00b ff80 	bl	800cacc <siprintf>
	    	Send_Uart(buf);
 8000bcc:	6978      	ldr	r0, [r7, #20]
 8000bce:	f7ff fd1b 	bl	8000608 <Send_Uart>
	    	free(buf);
 8000bd2:	6978      	ldr	r0, [r7, #20]
 8000bd4:	f00b fe2c 	bl	800c830 <free>
 8000bd8:	e00f      	b.n	8000bfa <Update_File+0x176>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000bda:	2064      	movs	r0, #100	; 0x64
 8000bdc:	f00b fe20 	bl	800c820 <malloc>
 8000be0:	4603      	mov	r3, r0
 8000be2:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	4912      	ldr	r1, [pc, #72]	; (8000c30 <Update_File+0x1ac>)
 8000be8:	69b8      	ldr	r0, [r7, #24]
 8000bea:	f00b ff6f 	bl	800cacc <siprintf>
	    	Send_Uart(buf);
 8000bee:	69b8      	ldr	r0, [r7, #24]
 8000bf0:	f7ff fd0a 	bl	8000608 <Send_Uart>
	    	free(buf);
 8000bf4:	69b8      	ldr	r0, [r7, #24]
 8000bf6:	f00b fe1b 	bl	800c830 <free>
	     }
	}
    return fresult;
 8000bfa:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <Update_File+0x188>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3728      	adds	r7, #40	; 0x28
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000108 	.word	0x20000108
 8000c0c:	20000104 	.word	0x20000104
 8000c10:	0800d994 	.word	0x0800d994
 8000c14:	200001fc 	.word	0x200001fc
 8000c18:	0800d9b4 	.word	0x0800d9b4
 8000c1c:	0800dc2c 	.word	0x0800dc2c
 8000c20:	20000100 	.word	0x20000100
 8000c24:	0800dc5c 	.word	0x0800dc5c
 8000c28:	0800dc84 	.word	0x0800dc84
 8000c2c:	0800db20 	.word	0x0800db20
 8000c30:	0800db48 	.word	0x0800db48

08000c34 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f00b f8d7 	bl	800bdf0 <f_mkdir>
 8000c42:	4603      	mov	r3, r0
 8000c44:	461a      	mov	r2, r3
 8000c46:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <Create_Dir+0x74>)
 8000c48:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8000c4a:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <Create_Dir+0x74>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d110      	bne.n	8000c74 <Create_Dir+0x40>
    {
    	char *buf = malloc(100*sizeof(char));
 8000c52:	2064      	movs	r0, #100	; 0x64
 8000c54:	f00b fde4 	bl	800c820 <malloc>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n\n", name);
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	4913      	ldr	r1, [pc, #76]	; (8000cac <Create_Dir+0x78>)
 8000c60:	68b8      	ldr	r0, [r7, #8]
 8000c62:	f00b ff33 	bl	800cacc <siprintf>
    	Send_Uart (buf);
 8000c66:	68b8      	ldr	r0, [r7, #8]
 8000c68:	f7ff fcce 	bl	8000608 <Send_Uart>
    	free(buf);
 8000c6c:	68b8      	ldr	r0, [r7, #8]
 8000c6e:	f00b fddf 	bl	800c830 <free>
 8000c72:	e012      	b.n	8000c9a <Create_Dir+0x66>
    }
    else
    {
    	char *buf = malloc(100*sizeof(char));
 8000c74:	2064      	movs	r0, #100	; 0x64
 8000c76:	f00b fdd3 	bl	800c820 <malloc>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <Create_Dir+0x74>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	461a      	mov	r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	490a      	ldr	r1, [pc, #40]	; (8000cb0 <Create_Dir+0x7c>)
 8000c88:	68f8      	ldr	r0, [r7, #12]
 8000c8a:	f00b ff1f 	bl	800cacc <siprintf>
    	Send_Uart(buf);
 8000c8e:	68f8      	ldr	r0, [r7, #12]
 8000c90:	f7ff fcba 	bl	8000608 <Send_Uart>
    	free(buf);
 8000c94:	68f8      	ldr	r0, [r7, #12]
 8000c96:	f00b fdcb 	bl	800c830 <free>
    }
    return fresult;
 8000c9a:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <Create_Dir+0x74>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000104 	.word	0x20000104
 8000cac:	0800dce8 	.word	0x0800dce8
 8000cb0:	0800dd10 	.word	0x0800dd10

08000cb4 <Check_USB_Details>:

void Check_USB_Details (void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pUSBHFatFS);
 8000cba:	4a2d      	ldr	r2, [pc, #180]	; (8000d70 <Check_USB_Details+0xbc>)
 8000cbc:	492d      	ldr	r1, [pc, #180]	; (8000d74 <Check_USB_Details+0xc0>)
 8000cbe:	482e      	ldr	r0, [pc, #184]	; (8000d78 <Check_USB_Details+0xc4>)
 8000cc0:	f00a ffe1 	bl	800bc86 <f_getfree>

    total = (uint32_t)((pUSBHFatFS->n_fatent - 2) * pUSBHFatFS->csize * 0.5);
 8000cc4:	4b2a      	ldr	r3, [pc, #168]	; (8000d70 <Check_USB_Details+0xbc>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	3b02      	subs	r3, #2
 8000ccc:	4a28      	ldr	r2, [pc, #160]	; (8000d70 <Check_USB_Details+0xbc>)
 8000cce:	6812      	ldr	r2, [r2, #0]
 8000cd0:	8952      	ldrh	r2, [r2, #10]
 8000cd2:	fb02 f303 	mul.w	r3, r2, r3
 8000cd6:	ee07 3a90 	vmov	s15, r3
 8000cda:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000cde:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000ce2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ce6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000cea:	ee17 2a90 	vmov	r2, s15
 8000cee:	4b23      	ldr	r3, [pc, #140]	; (8000d7c <Check_USB_Details+0xc8>)
 8000cf0:	601a      	str	r2, [r3, #0]
    char *buf = malloc(30*sizeof(char));
 8000cf2:	201e      	movs	r0, #30
 8000cf4:	f00b fd94 	bl	800c820 <malloc>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB  Total Size: \t%lu\n",total);
 8000cfc:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <Check_USB_Details+0xc8>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	491f      	ldr	r1, [pc, #124]	; (8000d80 <Check_USB_Details+0xcc>)
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f00b fee1 	bl	800cacc <siprintf>
    Send_Uart(buf);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff fc7c 	bl	8000608 <Send_Uart>
    free(buf);
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f00b fd8d 	bl	800c830 <free>
    free_space = (uint32_t)(fre_clust * pUSBHFatFS->csize * 0.5);
 8000d16:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <Check_USB_Details+0xbc>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	895b      	ldrh	r3, [r3, #10]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <Check_USB_Details+0xc0>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	fb03 f302 	mul.w	r3, r3, r2
 8000d26:	ee07 3a90 	vmov	s15, r3
 8000d2a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000d2e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000d32:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d36:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d3a:	ee17 2a90 	vmov	r2, s15
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <Check_USB_Details+0xd0>)
 8000d40:	601a      	str	r2, [r3, #0]
    buf = malloc(30*sizeof(char));
 8000d42:	201e      	movs	r0, #30
 8000d44:	f00b fd6c 	bl	800c820 <malloc>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB Free Space: \t%lu\n",free_space);
 8000d4c:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <Check_USB_Details+0xd0>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	490d      	ldr	r1, [pc, #52]	; (8000d88 <Check_USB_Details+0xd4>)
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f00b feb9 	bl	800cacc <siprintf>
    Send_Uart(buf);
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff fc54 	bl	8000608 <Send_Uart>
    free(buf);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f00b fd65 	bl	800c830 <free>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200000f8 	.word	0x200000f8
 8000d74:	200000f0 	.word	0x200000f0
 8000d78:	0800dd3c 	.word	0x0800dd3c
 8000d7c:	20000120 	.word	0x20000120
 8000d80:	0800dd40 	.word	0x0800dd40
 8000d84:	200000fc 	.word	0x200000fc
 8000d88:	0800dd58 	.word	0x0800dd58

08000d8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d90:	f000 fb37 	bl	8001402 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d94:	f000 f810 	bl	8000db8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d98:	f000 f8ac 	bl	8000ef4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000d9c:	f000 f87a 	bl	8000e94 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8000da0:	f005 fb50 	bl	8006444 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000da4:	f00b f98e 	bl	800c0c4 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello world! \r\n");
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <main+0x28>)
 8000daa:	f00b fe77 	bl	800ca9c <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000dae:	f00b f9af 	bl	800c110 <MX_USB_HOST_Process>
 8000db2:	e7fc      	b.n	8000dae <main+0x22>
 8000db4:	0800dd70 	.word	0x0800dd70

08000db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b094      	sub	sp, #80	; 0x50
 8000dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	2234      	movs	r2, #52	; 0x34
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f00b fd48 	bl	800c85c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dcc:	f107 0308 	add.w	r3, r7, #8
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ddc:	4b2b      	ldr	r3, [pc, #172]	; (8000e8c <SystemClock_Config+0xd4>)
 8000dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de0:	4a2a      	ldr	r2, [pc, #168]	; (8000e8c <SystemClock_Config+0xd4>)
 8000de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de6:	6413      	str	r3, [r2, #64]	; 0x40
 8000de8:	4b28      	ldr	r3, [pc, #160]	; (8000e8c <SystemClock_Config+0xd4>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000df4:	4b26      	ldr	r3, [pc, #152]	; (8000e90 <SystemClock_Config+0xd8>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a25      	ldr	r2, [pc, #148]	; (8000e90 <SystemClock_Config+0xd8>)
 8000dfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	4b23      	ldr	r3, [pc, #140]	; (8000e90 <SystemClock_Config+0xd8>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e08:	603b      	str	r3, [r7, #0]
 8000e0a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e14:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e16:	2302      	movs	r3, #2
 8000e18:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e20:	2304      	movs	r3, #4
 8000e22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000e24:	23d8      	movs	r3, #216	; 0xd8
 8000e26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000e2c:	2309      	movs	r3, #9
 8000e2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e30:	2302      	movs	r3, #2
 8000e32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e34:	f107 031c 	add.w	r3, r7, #28
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f002 fa61 	bl	8003300 <HAL_RCC_OscConfig>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000e44:	f000 f8dc 	bl	8001000 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e48:	f002 fa0a 	bl	8003260 <HAL_PWREx_EnableOverDrive>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e52:	f000 f8d5 	bl	8001000 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e56:	230f      	movs	r3, #15
 8000e58:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e62:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e6c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e6e:	f107 0308 	add.w	r3, r7, #8
 8000e72:	2107      	movs	r1, #7
 8000e74:	4618      	mov	r0, r3
 8000e76:	f002 fcf1 	bl	800385c <HAL_RCC_ClockConfig>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000e80:	f000 f8be 	bl	8001000 <Error_Handler>
  }
}
 8000e84:	bf00      	nop
 8000e86:	3750      	adds	r7, #80	; 0x50
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40007000 	.word	0x40007000

08000e94 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e98:	4b14      	ldr	r3, [pc, #80]	; (8000eec <MX_USART3_UART_Init+0x58>)
 8000e9a:	4a15      	ldr	r2, [pc, #84]	; (8000ef0 <MX_USART3_UART_Init+0x5c>)
 8000e9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e9e:	4b13      	ldr	r3, [pc, #76]	; (8000eec <MX_USART3_UART_Init+0x58>)
 8000ea0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ea4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <MX_USART3_UART_Init+0x58>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000eac:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <MX_USART3_UART_Init+0x58>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <MX_USART3_UART_Init+0x58>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <MX_USART3_UART_Init+0x58>)
 8000eba:	220c      	movs	r2, #12
 8000ebc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <MX_USART3_UART_Init+0x58>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <MX_USART3_UART_Init+0x58>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <MX_USART3_UART_Init+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <MX_USART3_UART_Init+0x58>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <MX_USART3_UART_Init+0x58>)
 8000ed8:	f003 fdfc 	bl	8004ad4 <HAL_UART_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ee2:	f000 f88d 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000124 	.word	0x20000124
 8000ef0:	40004800 	.word	0x40004800

08000ef4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
 8000f08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f0a:	4b29      	ldr	r3, [pc, #164]	; (8000fb0 <MX_GPIO_Init+0xbc>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a28      	ldr	r2, [pc, #160]	; (8000fb0 <MX_GPIO_Init+0xbc>)
 8000f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b26      	ldr	r3, [pc, #152]	; (8000fb0 <MX_GPIO_Init+0xbc>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f22:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <MX_GPIO_Init+0xbc>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a22      	ldr	r2, [pc, #136]	; (8000fb0 <MX_GPIO_Init+0xbc>)
 8000f28:	f043 0308 	orr.w	r3, r3, #8
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b20      	ldr	r3, [pc, #128]	; (8000fb0 <MX_GPIO_Init+0xbc>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0308 	and.w	r3, r3, #8
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f3a:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <MX_GPIO_Init+0xbc>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a1c      	ldr	r2, [pc, #112]	; (8000fb0 <MX_GPIO_Init+0xbc>)
 8000f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <MX_GPIO_Init+0xbc>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <MX_GPIO_Init+0xbc>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a16      	ldr	r2, [pc, #88]	; (8000fb0 <MX_GPIO_Init+0xbc>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_GPIO_Init+0xbc>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_GPIO_Init+0xbc>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a10      	ldr	r2, [pc, #64]	; (8000fb0 <MX_GPIO_Init+0xbc>)
 8000f70:	f043 0302 	orr.w	r3, r3, #2
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_GPIO_Init+0xbc>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2140      	movs	r1, #64	; 0x40
 8000f86:	480b      	ldr	r0, [pc, #44]	; (8000fb4 <MX_GPIO_Init+0xc0>)
 8000f88:	f000 fd1a 	bl	80019c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f8c:	2340      	movs	r3, #64	; 0x40
 8000f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f90:	2301      	movs	r3, #1
 8000f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <MX_GPIO_Init+0xc0>)
 8000fa4:	f000 fb60 	bl	8001668 <HAL_GPIO_Init>

}
 8000fa8:	bf00      	nop
 8000faa:	3728      	adds	r7, #40	; 0x28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40021800 	.word	0x40021800

08000fb8 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART2 and Loop until the end of transmission */
 HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000fc0:	1d39      	adds	r1, r7, #4
 8000fc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	4803      	ldr	r0, [pc, #12]	; (8000fd8 <__io_putchar+0x20>)
 8000fca:	f003 fdd1 	bl	8004b70 <HAL_UART_Transmit>

return ch;
 8000fce:	687b      	ldr	r3, [r7, #4]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000124 	.word	0x20000124

08000fdc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d101      	bne.n	8000ff2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fee:	f000 fa15 	bl	800141c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40002000 	.word	0x40002000

08001000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001004:	b672      	cpsid	i
}
 8001006:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001008:	e7fe      	b.n	8001008 <Error_Handler+0x8>
	...

0800100c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <HAL_MspInit+0x44>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <HAL_MspInit+0x44>)
 8001018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101c:	6413      	str	r3, [r2, #64]	; 0x40
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <HAL_MspInit+0x44>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <HAL_MspInit+0x44>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	4a08      	ldr	r2, [pc, #32]	; (8001050 <HAL_MspInit+0x44>)
 8001030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001034:	6453      	str	r3, [r2, #68]	; 0x44
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_MspInit+0x44>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800

08001054 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b0ae      	sub	sp, #184	; 0xb8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2290      	movs	r2, #144	; 0x90
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f00b fbf1 	bl	800c85c <memset>
  if(huart->Instance==USART3)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a22      	ldr	r2, [pc, #136]	; (8001108 <HAL_UART_MspInit+0xb4>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d13c      	bne.n	80010fe <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001084:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001088:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800108a:	2300      	movs	r3, #0
 800108c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4618      	mov	r0, r3
 8001094:	f002 fe16 	bl	8003cc4 <HAL_RCCEx_PeriphCLKConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800109e:	f7ff ffaf 	bl	8001000 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010a2:	4b1a      	ldr	r3, [pc, #104]	; (800110c <HAL_UART_MspInit+0xb8>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	4a19      	ldr	r2, [pc, #100]	; (800110c <HAL_UART_MspInit+0xb8>)
 80010a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ac:	6413      	str	r3, [r2, #64]	; 0x40
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <HAL_UART_MspInit+0xb8>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ba:	4b14      	ldr	r3, [pc, #80]	; (800110c <HAL_UART_MspInit+0xb8>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a13      	ldr	r2, [pc, #76]	; (800110c <HAL_UART_MspInit+0xb8>)
 80010c0:	f043 0308 	orr.w	r3, r3, #8
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <HAL_UART_MspInit+0xb8>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e6:	2303      	movs	r3, #3
 80010e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010ec:	2307      	movs	r3, #7
 80010ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010f6:	4619      	mov	r1, r3
 80010f8:	4805      	ldr	r0, [pc, #20]	; (8001110 <HAL_UART_MspInit+0xbc>)
 80010fa:	f000 fab5 	bl	8001668 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010fe:	bf00      	nop
 8001100:	37b8      	adds	r7, #184	; 0xb8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40004800 	.word	0x40004800
 800110c:	40023800 	.word	0x40023800
 8001110:	40020c00 	.word	0x40020c00

08001114 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08c      	sub	sp, #48	; 0x30
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8001124:	2200      	movs	r2, #0
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	202d      	movs	r0, #45	; 0x2d
 800112a:	f000 fa73 	bl	8001614 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800112e:	202d      	movs	r0, #45	; 0x2d
 8001130:	f000 fa8c 	bl	800164c <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001134:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <HAL_InitTick+0xa0>)
 8001136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001138:	4a1e      	ldr	r2, [pc, #120]	; (80011b4 <HAL_InitTick+0xa0>)
 800113a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800113e:	6413      	str	r3, [r2, #64]	; 0x40
 8001140:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <HAL_InitTick+0xa0>)
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800114c:	f107 0210 	add.w	r2, r7, #16
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4611      	mov	r1, r2
 8001156:	4618      	mov	r0, r3
 8001158:	f002 fd82 	bl	8003c60 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800115c:	f002 fd58 	bl	8003c10 <HAL_RCC_GetPCLK1Freq>
 8001160:	4603      	mov	r3, r0
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001168:	4a13      	ldr	r2, [pc, #76]	; (80011b8 <HAL_InitTick+0xa4>)
 800116a:	fba2 2303 	umull	r2, r3, r2, r3
 800116e:	0c9b      	lsrs	r3, r3, #18
 8001170:	3b01      	subs	r3, #1
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <HAL_InitTick+0xa8>)
 8001176:	4a12      	ldr	r2, [pc, #72]	; (80011c0 <HAL_InitTick+0xac>)
 8001178:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <HAL_InitTick+0xa8>)
 800117c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001180:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001182:	4a0e      	ldr	r2, [pc, #56]	; (80011bc <HAL_InitTick+0xa8>)
 8001184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001186:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <HAL_InitTick+0xa8>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <HAL_InitTick+0xa8>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8001194:	4809      	ldr	r0, [pc, #36]	; (80011bc <HAL_InitTick+0xa8>)
 8001196:	f003 f9bd 	bl	8004514 <HAL_TIM_Base_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d104      	bne.n	80011aa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 80011a0:	4806      	ldr	r0, [pc, #24]	; (80011bc <HAL_InitTick+0xa8>)
 80011a2:	f003 fa19 	bl	80045d8 <HAL_TIM_Base_Start_IT>
 80011a6:	4603      	mov	r3, r0
 80011a8:	e000      	b.n	80011ac <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3730      	adds	r7, #48	; 0x30
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40023800 	.word	0x40023800
 80011b8:	431bde83 	.word	0x431bde83
 80011bc:	200001a8 	.word	0x200001a8
 80011c0:	40002000 	.word	0x40002000

080011c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <NMI_Handler+0x4>

080011ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <HardFault_Handler+0x4>

080011d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <MemManage_Handler+0x4>

080011d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011da:	e7fe      	b.n	80011da <BusFault_Handler+0x4>

080011dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <UsageFault_Handler+0x4>

080011e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001220:	4802      	ldr	r0, [pc, #8]	; (800122c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001222:	f003 fa51 	bl	80046c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200001a8 	.word	0x200001a8

08001230 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001234:	4802      	ldr	r0, [pc, #8]	; (8001240 <OTG_FS_IRQHandler+0x10>)
 8001236:	f000 fe47 	bl	8001ec8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	2000263c 	.word	0x2000263c

08001244 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	e00a      	b.n	800126c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001256:	f3af 8000 	nop.w
 800125a:	4601      	mov	r1, r0
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	1c5a      	adds	r2, r3, #1
 8001260:	60ba      	str	r2, [r7, #8]
 8001262:	b2ca      	uxtb	r2, r1
 8001264:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	3301      	adds	r3, #1
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	429a      	cmp	r2, r3
 8001272:	dbf0      	blt.n	8001256 <_read+0x12>
	}

return len;
 8001274:	687b      	ldr	r3, [r7, #4]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b086      	sub	sp, #24
 8001282:	af00      	add	r7, sp, #0
 8001284:	60f8      	str	r0, [r7, #12]
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	e009      	b.n	80012a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	1c5a      	adds	r2, r3, #1
 8001294:	60ba      	str	r2, [r7, #8]
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fe8d 	bl	8000fb8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	3301      	adds	r3, #1
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	dbf1      	blt.n	8001290 <_write+0x12>
	}
	return len;
 80012ac:	687b      	ldr	r3, [r7, #4]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <_close>:

int _close(int file)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
	return -1;
 80012be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012de:	605a      	str	r2, [r3, #4]
	return 0;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <_isatty>:

int _isatty(int file)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
	return 1;
 80012f6:	2301      	movs	r3, #1
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
	return 0;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001328:	4a14      	ldr	r2, [pc, #80]	; (800137c <_sbrk+0x5c>)
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <_sbrk+0x60>)
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001334:	4b13      	ldr	r3, [pc, #76]	; (8001384 <_sbrk+0x64>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d102      	bne.n	8001342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <_sbrk+0x64>)
 800133e:	4a12      	ldr	r2, [pc, #72]	; (8001388 <_sbrk+0x68>)
 8001340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <_sbrk+0x64>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	429a      	cmp	r2, r3
 800134e:	d207      	bcs.n	8001360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001350:	f00b fa3c 	bl	800c7cc <__errno>
 8001354:	4603      	mov	r3, r0
 8001356:	220c      	movs	r2, #12
 8001358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800135a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800135e:	e009      	b.n	8001374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <_sbrk+0x64>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001366:	4b07      	ldr	r3, [pc, #28]	; (8001384 <_sbrk+0x64>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	4a05      	ldr	r2, [pc, #20]	; (8001384 <_sbrk+0x64>)
 8001370:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001372:	68fb      	ldr	r3, [r7, #12]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20080000 	.word	0x20080000
 8001380:	00000400 	.word	0x00000400
 8001384:	200000ac 	.word	0x200000ac
 8001388:	20002950 	.word	0x20002950

0800138c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <SystemInit+0x20>)
 8001392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001396:	4a05      	ldr	r2, [pc, #20]	; (80013ac <SystemInit+0x20>)
 8001398:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800139c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013b4:	480d      	ldr	r0, [pc, #52]	; (80013ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013b6:	490e      	ldr	r1, [pc, #56]	; (80013f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013b8:	4a0e      	ldr	r2, [pc, #56]	; (80013f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013bc:	e002      	b.n	80013c4 <LoopCopyDataInit>

080013be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c2:	3304      	adds	r3, #4

080013c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c8:	d3f9      	bcc.n	80013be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ca:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013cc:	4c0b      	ldr	r4, [pc, #44]	; (80013fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d0:	e001      	b.n	80013d6 <LoopFillZerobss>

080013d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d4:	3204      	adds	r2, #4

080013d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d8:	d3fb      	bcc.n	80013d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013da:	f7ff ffd7 	bl	800138c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013de:	f00b f9fb 	bl	800c7d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013e2:	f7ff fcd3 	bl	8000d8c <main>
  bx  lr    
 80013e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013e8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80013ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80013f4:	0800e064 	.word	0x0800e064
  ldr r2, =_sbss
 80013f8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80013fc:	20002950 	.word	0x20002950

08001400 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001400:	e7fe      	b.n	8001400 <ADC_IRQHandler>

08001402 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001406:	2003      	movs	r0, #3
 8001408:	f000 f8f9 	bl	80015fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800140c:	200f      	movs	r0, #15
 800140e:	f7ff fe81 	bl	8001114 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001412:	f7ff fdfb 	bl	800100c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	bd80      	pop	{r7, pc}

0800141c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_IncTick+0x20>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_IncTick+0x24>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4413      	add	r3, r2
 800142c:	4a04      	ldr	r2, [pc, #16]	; (8001440 <HAL_IncTick+0x24>)
 800142e:	6013      	str	r3, [r2, #0]
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	20000008 	.word	0x20000008
 8001440:	200001f4 	.word	0x200001f4

08001444 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return uwTick;
 8001448:	4b03      	ldr	r3, [pc, #12]	; (8001458 <HAL_GetTick+0x14>)
 800144a:	681b      	ldr	r3, [r3, #0]
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	200001f4 	.word	0x200001f4

0800145c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001464:	f7ff ffee 	bl	8001444 <HAL_GetTick>
 8001468:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001474:	d005      	beq.n	8001482 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001476:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <HAL_Delay+0x44>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	461a      	mov	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4413      	add	r3, r2
 8001480:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001482:	bf00      	nop
 8001484:	f7ff ffde 	bl	8001444 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	429a      	cmp	r2, r3
 8001492:	d8f7      	bhi.n	8001484 <HAL_Delay+0x28>
  {
  }
}
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000008 	.word	0x20000008

080014a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b4:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <__NVIC_SetPriorityGrouping+0x40>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c0:	4013      	ands	r3, r2
 80014c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d2:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <__NVIC_SetPriorityGrouping+0x40>)
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	60d3      	str	r3, [r2, #12]
}
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000ed00 	.word	0xe000ed00
 80014e8:	05fa0000 	.word	0x05fa0000

080014ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f0:	4b04      	ldr	r3, [pc, #16]	; (8001504 <__NVIC_GetPriorityGrouping+0x18>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	0a1b      	lsrs	r3, r3, #8
 80014f6:	f003 0307 	and.w	r3, r3, #7
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	2b00      	cmp	r3, #0
 8001518:	db0b      	blt.n	8001532 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	f003 021f 	and.w	r2, r3, #31
 8001520:	4907      	ldr	r1, [pc, #28]	; (8001540 <__NVIC_EnableIRQ+0x38>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	095b      	lsrs	r3, r3, #5
 8001528:	2001      	movs	r0, #1
 800152a:	fa00 f202 	lsl.w	r2, r0, r2
 800152e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000e100 	.word	0xe000e100

08001544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001554:	2b00      	cmp	r3, #0
 8001556:	db0a      	blt.n	800156e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	b2da      	uxtb	r2, r3
 800155c:	490c      	ldr	r1, [pc, #48]	; (8001590 <__NVIC_SetPriority+0x4c>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	0112      	lsls	r2, r2, #4
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	440b      	add	r3, r1
 8001568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800156c:	e00a      	b.n	8001584 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4908      	ldr	r1, [pc, #32]	; (8001594 <__NVIC_SetPriority+0x50>)
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	3b04      	subs	r3, #4
 800157c:	0112      	lsls	r2, r2, #4
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	440b      	add	r3, r1
 8001582:	761a      	strb	r2, [r3, #24]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000e100 	.word	0xe000e100
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001598:	b480      	push	{r7}
 800159a:	b089      	sub	sp, #36	; 0x24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f1c3 0307 	rsb	r3, r3, #7
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	bf28      	it	cs
 80015b6:	2304      	movcs	r3, #4
 80015b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3304      	adds	r3, #4
 80015be:	2b06      	cmp	r3, #6
 80015c0:	d902      	bls.n	80015c8 <NVIC_EncodePriority+0x30>
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3b03      	subs	r3, #3
 80015c6:	e000      	b.n	80015ca <NVIC_EncodePriority+0x32>
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43da      	mvns	r2, r3
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	401a      	ands	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ea:	43d9      	mvns	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	4313      	orrs	r3, r2
         );
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3724      	adds	r7, #36	; 0x24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ff4c 	bl	80014a4 <__NVIC_SetPriorityGrouping>
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
 8001620:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001626:	f7ff ff61 	bl	80014ec <__NVIC_GetPriorityGrouping>
 800162a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	68b9      	ldr	r1, [r7, #8]
 8001630:	6978      	ldr	r0, [r7, #20]
 8001632:	f7ff ffb1 	bl	8001598 <NVIC_EncodePriority>
 8001636:	4602      	mov	r2, r0
 8001638:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163c:	4611      	mov	r1, r2
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff ff80 	bl	8001544 <__NVIC_SetPriority>
}
 8001644:	bf00      	nop
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff ff54 	bl	8001508 <__NVIC_EnableIRQ>
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001668:	b480      	push	{r7}
 800166a:	b089      	sub	sp, #36	; 0x24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
 8001686:	e175      	b.n	8001974 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001688:	2201      	movs	r2, #1
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	4013      	ands	r3, r2
 800169a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	f040 8164 	bne.w	800196e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d005      	beq.n	80016be <HAL_GPIO_Init+0x56>
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d130      	bne.n	8001720 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	2203      	movs	r2, #3
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	68da      	ldr	r2, [r3, #12]
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016f4:	2201      	movs	r2, #1
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	091b      	lsrs	r3, r3, #4
 800170a:	f003 0201 	and.w	r2, r3, #1
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	2b03      	cmp	r3, #3
 800172a:	d017      	beq.n	800175c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	2203      	movs	r2, #3
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d123      	bne.n	80017b0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	08da      	lsrs	r2, r3, #3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3208      	adds	r2, #8
 8001770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	220f      	movs	r2, #15
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	691a      	ldr	r2, [r3, #16]
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4313      	orrs	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	08da      	lsrs	r2, r3, #3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3208      	adds	r2, #8
 80017aa:	69b9      	ldr	r1, [r7, #24]
 80017ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	2203      	movs	r2, #3
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0203 	and.w	r2, r3, #3
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 80be 	beq.w	800196e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f2:	4b66      	ldr	r3, [pc, #408]	; (800198c <HAL_GPIO_Init+0x324>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	4a65      	ldr	r2, [pc, #404]	; (800198c <HAL_GPIO_Init+0x324>)
 80017f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017fc:	6453      	str	r3, [r2, #68]	; 0x44
 80017fe:	4b63      	ldr	r3, [pc, #396]	; (800198c <HAL_GPIO_Init+0x324>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800180a:	4a61      	ldr	r2, [pc, #388]	; (8001990 <HAL_GPIO_Init+0x328>)
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	089b      	lsrs	r3, r3, #2
 8001810:	3302      	adds	r3, #2
 8001812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001816:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	220f      	movs	r2, #15
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43db      	mvns	r3, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4013      	ands	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a58      	ldr	r2, [pc, #352]	; (8001994 <HAL_GPIO_Init+0x32c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d037      	beq.n	80018a6 <HAL_GPIO_Init+0x23e>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a57      	ldr	r2, [pc, #348]	; (8001998 <HAL_GPIO_Init+0x330>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d031      	beq.n	80018a2 <HAL_GPIO_Init+0x23a>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a56      	ldr	r2, [pc, #344]	; (800199c <HAL_GPIO_Init+0x334>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d02b      	beq.n	800189e <HAL_GPIO_Init+0x236>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a55      	ldr	r2, [pc, #340]	; (80019a0 <HAL_GPIO_Init+0x338>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d025      	beq.n	800189a <HAL_GPIO_Init+0x232>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a54      	ldr	r2, [pc, #336]	; (80019a4 <HAL_GPIO_Init+0x33c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d01f      	beq.n	8001896 <HAL_GPIO_Init+0x22e>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a53      	ldr	r2, [pc, #332]	; (80019a8 <HAL_GPIO_Init+0x340>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d019      	beq.n	8001892 <HAL_GPIO_Init+0x22a>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a52      	ldr	r2, [pc, #328]	; (80019ac <HAL_GPIO_Init+0x344>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d013      	beq.n	800188e <HAL_GPIO_Init+0x226>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a51      	ldr	r2, [pc, #324]	; (80019b0 <HAL_GPIO_Init+0x348>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d00d      	beq.n	800188a <HAL_GPIO_Init+0x222>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a50      	ldr	r2, [pc, #320]	; (80019b4 <HAL_GPIO_Init+0x34c>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d007      	beq.n	8001886 <HAL_GPIO_Init+0x21e>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a4f      	ldr	r2, [pc, #316]	; (80019b8 <HAL_GPIO_Init+0x350>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d101      	bne.n	8001882 <HAL_GPIO_Init+0x21a>
 800187e:	2309      	movs	r3, #9
 8001880:	e012      	b.n	80018a8 <HAL_GPIO_Init+0x240>
 8001882:	230a      	movs	r3, #10
 8001884:	e010      	b.n	80018a8 <HAL_GPIO_Init+0x240>
 8001886:	2308      	movs	r3, #8
 8001888:	e00e      	b.n	80018a8 <HAL_GPIO_Init+0x240>
 800188a:	2307      	movs	r3, #7
 800188c:	e00c      	b.n	80018a8 <HAL_GPIO_Init+0x240>
 800188e:	2306      	movs	r3, #6
 8001890:	e00a      	b.n	80018a8 <HAL_GPIO_Init+0x240>
 8001892:	2305      	movs	r3, #5
 8001894:	e008      	b.n	80018a8 <HAL_GPIO_Init+0x240>
 8001896:	2304      	movs	r3, #4
 8001898:	e006      	b.n	80018a8 <HAL_GPIO_Init+0x240>
 800189a:	2303      	movs	r3, #3
 800189c:	e004      	b.n	80018a8 <HAL_GPIO_Init+0x240>
 800189e:	2302      	movs	r3, #2
 80018a0:	e002      	b.n	80018a8 <HAL_GPIO_Init+0x240>
 80018a2:	2301      	movs	r3, #1
 80018a4:	e000      	b.n	80018a8 <HAL_GPIO_Init+0x240>
 80018a6:	2300      	movs	r3, #0
 80018a8:	69fa      	ldr	r2, [r7, #28]
 80018aa:	f002 0203 	and.w	r2, r2, #3
 80018ae:	0092      	lsls	r2, r2, #2
 80018b0:	4093      	lsls	r3, r2
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80018b8:	4935      	ldr	r1, [pc, #212]	; (8001990 <HAL_GPIO_Init+0x328>)
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	089b      	lsrs	r3, r3, #2
 80018be:	3302      	adds	r3, #2
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018c6:	4b3d      	ldr	r3, [pc, #244]	; (80019bc <HAL_GPIO_Init+0x354>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	43db      	mvns	r3, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4013      	ands	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018ea:	4a34      	ldr	r2, [pc, #208]	; (80019bc <HAL_GPIO_Init+0x354>)
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018f0:	4b32      	ldr	r3, [pc, #200]	; (80019bc <HAL_GPIO_Init+0x354>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001914:	4a29      	ldr	r2, [pc, #164]	; (80019bc <HAL_GPIO_Init+0x354>)
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800191a:	4b28      	ldr	r3, [pc, #160]	; (80019bc <HAL_GPIO_Init+0x354>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	43db      	mvns	r3, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4013      	ands	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800193e:	4a1f      	ldr	r2, [pc, #124]	; (80019bc <HAL_GPIO_Init+0x354>)
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001944:	4b1d      	ldr	r3, [pc, #116]	; (80019bc <HAL_GPIO_Init+0x354>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	4313      	orrs	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001968:	4a14      	ldr	r2, [pc, #80]	; (80019bc <HAL_GPIO_Init+0x354>)
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3301      	adds	r3, #1
 8001972:	61fb      	str	r3, [r7, #28]
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	2b0f      	cmp	r3, #15
 8001978:	f67f ae86 	bls.w	8001688 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800197c:	bf00      	nop
 800197e:	bf00      	nop
 8001980:	3724      	adds	r7, #36	; 0x24
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800
 8001990:	40013800 	.word	0x40013800
 8001994:	40020000 	.word	0x40020000
 8001998:	40020400 	.word	0x40020400
 800199c:	40020800 	.word	0x40020800
 80019a0:	40020c00 	.word	0x40020c00
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40021400 	.word	0x40021400
 80019ac:	40021800 	.word	0x40021800
 80019b0:	40021c00 	.word	0x40021c00
 80019b4:	40022000 	.word	0x40022000
 80019b8:	40022400 	.word	0x40022400
 80019bc:	40013c00 	.word	0x40013c00

080019c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	807b      	strh	r3, [r7, #2]
 80019cc:	4613      	mov	r3, r2
 80019ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019d0:	787b      	ldrb	r3, [r7, #1]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019d6:	887a      	ldrh	r2, [r7, #2]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80019dc:	e003      	b.n	80019e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80019de:	887b      	ldrh	r3, [r7, #2]
 80019e0:	041a      	lsls	r2, r3, #16
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	619a      	str	r2, [r3, #24]
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80019f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019f4:	b08f      	sub	sp, #60	; 0x3c
 80019f6:	af0a      	add	r7, sp, #40	; 0x28
 80019f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e054      	b.n	8001aae <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d106      	bne.n	8001a24 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f00a fbea 	bl	800c1f8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2203      	movs	r2, #3
 8001a28:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d102      	bne.n	8001a3e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f003 fda3 	bl	800558e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	603b      	str	r3, [r7, #0]
 8001a4e:	687e      	ldr	r6, [r7, #4]
 8001a50:	466d      	mov	r5, sp
 8001a52:	f106 0410 	add.w	r4, r6, #16
 8001a56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a62:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a66:	1d33      	adds	r3, r6, #4
 8001a68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a6a:	6838      	ldr	r0, [r7, #0]
 8001a6c:	f003 fd26 	bl	80054bc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2101      	movs	r1, #1
 8001a76:	4618      	mov	r0, r3
 8001a78:	f003 fd9a 	bl	80055b0 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	603b      	str	r3, [r7, #0]
 8001a82:	687e      	ldr	r6, [r7, #4]
 8001a84:	466d      	mov	r5, sp
 8001a86:	f106 0410 	add.w	r4, r6, #16
 8001a8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a92:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a96:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a9a:	1d33      	adds	r3, r6, #4
 8001a9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a9e:	6838      	ldr	r0, [r7, #0]
 8001aa0:	f003 ff1c 	bl	80058dc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ab6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001ab6:	b590      	push	{r4, r7, lr}
 8001ab8:	b089      	sub	sp, #36	; 0x24
 8001aba:	af04      	add	r7, sp, #16
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	4608      	mov	r0, r1
 8001ac0:	4611      	mov	r1, r2
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	70fb      	strb	r3, [r7, #3]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	70bb      	strb	r3, [r7, #2]
 8001acc:	4613      	mov	r3, r2
 8001ace:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d101      	bne.n	8001ade <HAL_HCD_HC_Init+0x28>
 8001ada:	2302      	movs	r3, #2
 8001adc:	e076      	b.n	8001bcc <HAL_HCD_HC_Init+0x116>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001ae6:	78fb      	ldrb	r3, [r7, #3]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	212c      	movs	r1, #44	; 0x2c
 8001aec:	fb01 f303 	mul.w	r3, r1, r3
 8001af0:	4413      	add	r3, r2
 8001af2:	333d      	adds	r3, #61	; 0x3d
 8001af4:	2200      	movs	r2, #0
 8001af6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001af8:	78fb      	ldrb	r3, [r7, #3]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	212c      	movs	r1, #44	; 0x2c
 8001afe:	fb01 f303 	mul.w	r3, r1, r3
 8001b02:	4413      	add	r3, r2
 8001b04:	3338      	adds	r3, #56	; 0x38
 8001b06:	787a      	ldrb	r2, [r7, #1]
 8001b08:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001b0a:	78fb      	ldrb	r3, [r7, #3]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	212c      	movs	r1, #44	; 0x2c
 8001b10:	fb01 f303 	mul.w	r3, r1, r3
 8001b14:	4413      	add	r3, r2
 8001b16:	3340      	adds	r3, #64	; 0x40
 8001b18:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001b1a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b1c:	78fb      	ldrb	r3, [r7, #3]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	212c      	movs	r1, #44	; 0x2c
 8001b22:	fb01 f303 	mul.w	r3, r1, r3
 8001b26:	4413      	add	r3, r2
 8001b28:	3339      	adds	r3, #57	; 0x39
 8001b2a:	78fa      	ldrb	r2, [r7, #3]
 8001b2c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001b2e:	78fb      	ldrb	r3, [r7, #3]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	212c      	movs	r1, #44	; 0x2c
 8001b34:	fb01 f303 	mul.w	r3, r1, r3
 8001b38:	4413      	add	r3, r2
 8001b3a:	333f      	adds	r3, #63	; 0x3f
 8001b3c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001b40:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001b42:	78fb      	ldrb	r3, [r7, #3]
 8001b44:	78ba      	ldrb	r2, [r7, #2]
 8001b46:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b4a:	b2d0      	uxtb	r0, r2
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	212c      	movs	r1, #44	; 0x2c
 8001b50:	fb01 f303 	mul.w	r3, r1, r3
 8001b54:	4413      	add	r3, r2
 8001b56:	333a      	adds	r3, #58	; 0x3a
 8001b58:	4602      	mov	r2, r0
 8001b5a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001b5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	da09      	bge.n	8001b78 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	212c      	movs	r1, #44	; 0x2c
 8001b6a:	fb01 f303 	mul.w	r3, r1, r3
 8001b6e:	4413      	add	r3, r2
 8001b70:	333b      	adds	r3, #59	; 0x3b
 8001b72:	2201      	movs	r2, #1
 8001b74:	701a      	strb	r2, [r3, #0]
 8001b76:	e008      	b.n	8001b8a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001b78:	78fb      	ldrb	r3, [r7, #3]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	212c      	movs	r1, #44	; 0x2c
 8001b7e:	fb01 f303 	mul.w	r3, r1, r3
 8001b82:	4413      	add	r3, r2
 8001b84:	333b      	adds	r3, #59	; 0x3b
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001b8a:	78fb      	ldrb	r3, [r7, #3]
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	212c      	movs	r1, #44	; 0x2c
 8001b90:	fb01 f303 	mul.w	r3, r1, r3
 8001b94:	4413      	add	r3, r2
 8001b96:	333c      	adds	r3, #60	; 0x3c
 8001b98:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b9c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6818      	ldr	r0, [r3, #0]
 8001ba2:	787c      	ldrb	r4, [r7, #1]
 8001ba4:	78ba      	ldrb	r2, [r7, #2]
 8001ba6:	78f9      	ldrb	r1, [r7, #3]
 8001ba8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001baa:	9302      	str	r3, [sp, #8]
 8001bac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001bb0:	9301      	str	r3, [sp, #4]
 8001bb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	4623      	mov	r3, r4
 8001bba:	f004 f809 	bl	8005bd0 <USB_HC_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd90      	pop	{r4, r7, pc}

08001bd4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d101      	bne.n	8001bf2 <HAL_HCD_HC_Halt+0x1e>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e00f      	b.n	8001c12 <HAL_HCD_HC_Halt+0x3e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	78fa      	ldrb	r2, [r7, #3]
 8001c00:	4611      	mov	r1, r2
 8001c02:	4618      	mov	r0, r3
 8001c04:	f004 fa55 	bl	80060b2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	4608      	mov	r0, r1
 8001c26:	4611      	mov	r1, r2
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	70fb      	strb	r3, [r7, #3]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	70bb      	strb	r3, [r7, #2]
 8001c32:	4613      	mov	r3, r2
 8001c34:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	212c      	movs	r1, #44	; 0x2c
 8001c3c:	fb01 f303 	mul.w	r3, r1, r3
 8001c40:	4413      	add	r3, r2
 8001c42:	333b      	adds	r3, #59	; 0x3b
 8001c44:	78ba      	ldrb	r2, [r7, #2]
 8001c46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	212c      	movs	r1, #44	; 0x2c
 8001c4e:	fb01 f303 	mul.w	r3, r1, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	333f      	adds	r3, #63	; 0x3f
 8001c56:	787a      	ldrb	r2, [r7, #1]
 8001c58:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001c5a:	7c3b      	ldrb	r3, [r7, #16]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d112      	bne.n	8001c86 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	212c      	movs	r1, #44	; 0x2c
 8001c66:	fb01 f303 	mul.w	r3, r1, r3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3342      	adds	r3, #66	; 0x42
 8001c6e:	2203      	movs	r2, #3
 8001c70:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001c72:	78fb      	ldrb	r3, [r7, #3]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	212c      	movs	r1, #44	; 0x2c
 8001c78:	fb01 f303 	mul.w	r3, r1, r3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	333d      	adds	r3, #61	; 0x3d
 8001c80:	7f3a      	ldrb	r2, [r7, #28]
 8001c82:	701a      	strb	r2, [r3, #0]
 8001c84:	e008      	b.n	8001c98 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c86:	78fb      	ldrb	r3, [r7, #3]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	212c      	movs	r1, #44	; 0x2c
 8001c8c:	fb01 f303 	mul.w	r3, r1, r3
 8001c90:	4413      	add	r3, r2
 8001c92:	3342      	adds	r3, #66	; 0x42
 8001c94:	2202      	movs	r2, #2
 8001c96:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001c98:	787b      	ldrb	r3, [r7, #1]
 8001c9a:	2b03      	cmp	r3, #3
 8001c9c:	f200 80c6 	bhi.w	8001e2c <HAL_HCD_HC_SubmitRequest+0x210>
 8001ca0:	a201      	add	r2, pc, #4	; (adr r2, 8001ca8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca6:	bf00      	nop
 8001ca8:	08001cb9 	.word	0x08001cb9
 8001cac:	08001e19 	.word	0x08001e19
 8001cb0:	08001d1d 	.word	0x08001d1d
 8001cb4:	08001d9b 	.word	0x08001d9b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001cb8:	7c3b      	ldrb	r3, [r7, #16]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	f040 80b8 	bne.w	8001e30 <HAL_HCD_HC_SubmitRequest+0x214>
 8001cc0:	78bb      	ldrb	r3, [r7, #2]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f040 80b4 	bne.w	8001e30 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001cc8:	8b3b      	ldrh	r3, [r7, #24]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d108      	bne.n	8001ce0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001cce:	78fb      	ldrb	r3, [r7, #3]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	212c      	movs	r1, #44	; 0x2c
 8001cd4:	fb01 f303 	mul.w	r3, r1, r3
 8001cd8:	4413      	add	r3, r2
 8001cda:	3355      	adds	r3, #85	; 0x55
 8001cdc:	2201      	movs	r2, #1
 8001cde:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ce0:	78fb      	ldrb	r3, [r7, #3]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	212c      	movs	r1, #44	; 0x2c
 8001ce6:	fb01 f303 	mul.w	r3, r1, r3
 8001cea:	4413      	add	r3, r2
 8001cec:	3355      	adds	r3, #85	; 0x55
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d109      	bne.n	8001d08 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cf4:	78fb      	ldrb	r3, [r7, #3]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	212c      	movs	r1, #44	; 0x2c
 8001cfa:	fb01 f303 	mul.w	r3, r1, r3
 8001cfe:	4413      	add	r3, r2
 8001d00:	3342      	adds	r3, #66	; 0x42
 8001d02:	2200      	movs	r2, #0
 8001d04:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001d06:	e093      	b.n	8001e30 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d08:	78fb      	ldrb	r3, [r7, #3]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	212c      	movs	r1, #44	; 0x2c
 8001d0e:	fb01 f303 	mul.w	r3, r1, r3
 8001d12:	4413      	add	r3, r2
 8001d14:	3342      	adds	r3, #66	; 0x42
 8001d16:	2202      	movs	r2, #2
 8001d18:	701a      	strb	r2, [r3, #0]
      break;
 8001d1a:	e089      	b.n	8001e30 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001d1c:	78bb      	ldrb	r3, [r7, #2]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d11d      	bne.n	8001d5e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d22:	78fb      	ldrb	r3, [r7, #3]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	212c      	movs	r1, #44	; 0x2c
 8001d28:	fb01 f303 	mul.w	r3, r1, r3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	3355      	adds	r3, #85	; 0x55
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d109      	bne.n	8001d4a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d36:	78fb      	ldrb	r3, [r7, #3]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	212c      	movs	r1, #44	; 0x2c
 8001d3c:	fb01 f303 	mul.w	r3, r1, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	3342      	adds	r3, #66	; 0x42
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001d48:	e073      	b.n	8001e32 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	212c      	movs	r1, #44	; 0x2c
 8001d50:	fb01 f303 	mul.w	r3, r1, r3
 8001d54:	4413      	add	r3, r2
 8001d56:	3342      	adds	r3, #66	; 0x42
 8001d58:	2202      	movs	r2, #2
 8001d5a:	701a      	strb	r2, [r3, #0]
      break;
 8001d5c:	e069      	b.n	8001e32 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d5e:	78fb      	ldrb	r3, [r7, #3]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	212c      	movs	r1, #44	; 0x2c
 8001d64:	fb01 f303 	mul.w	r3, r1, r3
 8001d68:	4413      	add	r3, r2
 8001d6a:	3354      	adds	r3, #84	; 0x54
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d109      	bne.n	8001d86 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d72:	78fb      	ldrb	r3, [r7, #3]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	212c      	movs	r1, #44	; 0x2c
 8001d78:	fb01 f303 	mul.w	r3, r1, r3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	3342      	adds	r3, #66	; 0x42
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
      break;
 8001d84:	e055      	b.n	8001e32 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d86:	78fb      	ldrb	r3, [r7, #3]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	212c      	movs	r1, #44	; 0x2c
 8001d8c:	fb01 f303 	mul.w	r3, r1, r3
 8001d90:	4413      	add	r3, r2
 8001d92:	3342      	adds	r3, #66	; 0x42
 8001d94:	2202      	movs	r2, #2
 8001d96:	701a      	strb	r2, [r3, #0]
      break;
 8001d98:	e04b      	b.n	8001e32 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001d9a:	78bb      	ldrb	r3, [r7, #2]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d11d      	bne.n	8001ddc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	212c      	movs	r1, #44	; 0x2c
 8001da6:	fb01 f303 	mul.w	r3, r1, r3
 8001daa:	4413      	add	r3, r2
 8001dac:	3355      	adds	r3, #85	; 0x55
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d109      	bne.n	8001dc8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001db4:	78fb      	ldrb	r3, [r7, #3]
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	212c      	movs	r1, #44	; 0x2c
 8001dba:	fb01 f303 	mul.w	r3, r1, r3
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3342      	adds	r3, #66	; 0x42
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001dc6:	e034      	b.n	8001e32 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001dc8:	78fb      	ldrb	r3, [r7, #3]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	212c      	movs	r1, #44	; 0x2c
 8001dce:	fb01 f303 	mul.w	r3, r1, r3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3342      	adds	r3, #66	; 0x42
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	701a      	strb	r2, [r3, #0]
      break;
 8001dda:	e02a      	b.n	8001e32 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	212c      	movs	r1, #44	; 0x2c
 8001de2:	fb01 f303 	mul.w	r3, r1, r3
 8001de6:	4413      	add	r3, r2
 8001de8:	3354      	adds	r3, #84	; 0x54
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d109      	bne.n	8001e04 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001df0:	78fb      	ldrb	r3, [r7, #3]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	212c      	movs	r1, #44	; 0x2c
 8001df6:	fb01 f303 	mul.w	r3, r1, r3
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3342      	adds	r3, #66	; 0x42
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
      break;
 8001e02:	e016      	b.n	8001e32 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e04:	78fb      	ldrb	r3, [r7, #3]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	212c      	movs	r1, #44	; 0x2c
 8001e0a:	fb01 f303 	mul.w	r3, r1, r3
 8001e0e:	4413      	add	r3, r2
 8001e10:	3342      	adds	r3, #66	; 0x42
 8001e12:	2202      	movs	r2, #2
 8001e14:	701a      	strb	r2, [r3, #0]
      break;
 8001e16:	e00c      	b.n	8001e32 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e18:	78fb      	ldrb	r3, [r7, #3]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	212c      	movs	r1, #44	; 0x2c
 8001e1e:	fb01 f303 	mul.w	r3, r1, r3
 8001e22:	4413      	add	r3, r2
 8001e24:	3342      	adds	r3, #66	; 0x42
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]
      break;
 8001e2a:	e002      	b.n	8001e32 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001e2c:	bf00      	nop
 8001e2e:	e000      	b.n	8001e32 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001e30:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001e32:	78fb      	ldrb	r3, [r7, #3]
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	212c      	movs	r1, #44	; 0x2c
 8001e38:	fb01 f303 	mul.w	r3, r1, r3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3344      	adds	r3, #68	; 0x44
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	8b3a      	ldrh	r2, [r7, #24]
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	202c      	movs	r0, #44	; 0x2c
 8001e4c:	fb00 f303 	mul.w	r3, r0, r3
 8001e50:	440b      	add	r3, r1
 8001e52:	334c      	adds	r3, #76	; 0x4c
 8001e54:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001e56:	78fb      	ldrb	r3, [r7, #3]
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	212c      	movs	r1, #44	; 0x2c
 8001e5c:	fb01 f303 	mul.w	r3, r1, r3
 8001e60:	4413      	add	r3, r2
 8001e62:	3360      	adds	r3, #96	; 0x60
 8001e64:	2200      	movs	r2, #0
 8001e66:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	212c      	movs	r1, #44	; 0x2c
 8001e6e:	fb01 f303 	mul.w	r3, r1, r3
 8001e72:	4413      	add	r3, r2
 8001e74:	3350      	adds	r3, #80	; 0x50
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e7a:	78fb      	ldrb	r3, [r7, #3]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	212c      	movs	r1, #44	; 0x2c
 8001e80:	fb01 f303 	mul.w	r3, r1, r3
 8001e84:	4413      	add	r3, r2
 8001e86:	3339      	adds	r3, #57	; 0x39
 8001e88:	78fa      	ldrb	r2, [r7, #3]
 8001e8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	212c      	movs	r1, #44	; 0x2c
 8001e92:	fb01 f303 	mul.w	r3, r1, r3
 8001e96:	4413      	add	r3, r2
 8001e98:	3361      	adds	r3, #97	; 0x61
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6818      	ldr	r0, [r3, #0]
 8001ea2:	78fb      	ldrb	r3, [r7, #3]
 8001ea4:	222c      	movs	r2, #44	; 0x2c
 8001ea6:	fb02 f303 	mul.w	r3, r2, r3
 8001eaa:	3338      	adds	r3, #56	; 0x38
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	18d1      	adds	r1, r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	f003 ffa8 	bl	8005e0c <USB_HC_StartXfer>
 8001ebc:	4603      	mov	r3, r0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop

08001ec8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f003 fcbb 	bl	800585a <USB_GetMode>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	f040 80f6 	bne.w	80020d8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f003 fc9f 	bl	8005834 <USB_ReadInterrupts>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 80ec 	beq.w	80020d6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f003 fc96 	bl	8005834 <USB_ReadInterrupts>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f12:	d104      	bne.n	8001f1e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001f1c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f003 fc86 	bl	8005834 <USB_ReadInterrupts>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f32:	d104      	bne.n	8001f3e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f3c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f003 fc76 	bl	8005834 <USB_ReadInterrupts>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f52:	d104      	bne.n	8001f5e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f5c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f003 fc66 	bl	8005834 <USB_ReadInterrupts>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d103      	bne.n	8001f7a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2202      	movs	r2, #2
 8001f78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f003 fc58 	bl	8005834 <USB_ReadInterrupts>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f8e:	d11c      	bne.n	8001fca <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001f98:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10f      	bne.n	8001fca <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001faa:	2110      	movs	r1, #16
 8001fac:	6938      	ldr	r0, [r7, #16]
 8001fae:	f003 fb4b 	bl	8005648 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001fb2:	6938      	ldr	r0, [r7, #16]
 8001fb4:	f003 fb7a 	bl	80056ac <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f003 fd40 	bl	8005a44 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f00a f9a5 	bl	800c314 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f003 fc30 	bl	8005834 <USB_ReadInterrupts>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fda:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fde:	d102      	bne.n	8001fe6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f001 f8ca 	bl	800317a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f003 fc22 	bl	8005834 <USB_ReadInterrupts>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b08      	cmp	r3, #8
 8001ff8:	d106      	bne.n	8002008 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f00a f96e 	bl	800c2dc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2208      	movs	r2, #8
 8002006:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f003 fc11 	bl	8005834 <USB_ReadInterrupts>
 8002012:	4603      	mov	r3, r0
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	2b10      	cmp	r3, #16
 800201a:	d101      	bne.n	8002020 <HAL_HCD_IRQHandler+0x158>
 800201c:	2301      	movs	r3, #1
 800201e:	e000      	b.n	8002022 <HAL_HCD_IRQHandler+0x15a>
 8002020:	2300      	movs	r3, #0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d012      	beq.n	800204c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	699a      	ldr	r2, [r3, #24]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 0210 	bic.w	r2, r2, #16
 8002034:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 ffcd 	bl	8002fd6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	699a      	ldr	r2, [r3, #24]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 0210 	orr.w	r2, r2, #16
 800204a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f003 fbef 	bl	8005834 <USB_ReadInterrupts>
 8002056:	4603      	mov	r3, r0
 8002058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002060:	d13a      	bne.n	80020d8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f004 f812 	bl	8006090 <USB_HC_ReadInterrupt>
 800206c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
 8002072:	e025      	b.n	80020c0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	fa22 f303 	lsr.w	r3, r2, r3
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b00      	cmp	r3, #0
 8002086:	d018      	beq.n	80020ba <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	015a      	lsls	r2, r3, #5
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4413      	add	r3, r2
 8002090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800209a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800209e:	d106      	bne.n	80020ae <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	4619      	mov	r1, r3
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f8ab 	bl	8002202 <HCD_HC_IN_IRQHandler>
 80020ac:	e005      	b.n	80020ba <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	4619      	mov	r1, r3
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 fc25 	bl	8002904 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	3301      	adds	r3, #1
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d3d4      	bcc.n	8002074 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020d2:	615a      	str	r2, [r3, #20]
 80020d4:	e000      	b.n	80020d8 <HAL_HCD_IRQHandler+0x210>
      return;
 80020d6:	bf00      	nop
    }
  }
}
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <HAL_HCD_Start+0x16>
 80020f0:	2302      	movs	r3, #2
 80020f2:	e013      	b.n	800211c <HAL_HCD_Start+0x3e>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2101      	movs	r1, #1
 8002102:	4618      	mov	r0, r3
 8002104:	f003 fd02 	bl	8005b0c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f003 fa2d 	bl	800556c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002132:	2b01      	cmp	r3, #1
 8002134:	d101      	bne.n	800213a <HAL_HCD_Stop+0x16>
 8002136:	2302      	movs	r3, #2
 8002138:	e00d      	b.n	8002156 <HAL_HCD_Stop+0x32>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f004 f8ea 	bl	8006320 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f003 fca4 	bl	8005ab8 <USB_ResetPort>
 8002170:	4603      	mov	r3, r0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	460b      	mov	r3, r1
 8002184:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002186:	78fb      	ldrb	r3, [r7, #3]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	212c      	movs	r1, #44	; 0x2c
 800218c:	fb01 f303 	mul.w	r3, r1, r3
 8002190:	4413      	add	r3, r2
 8002192:	3360      	adds	r3, #96	; 0x60
 8002194:	781b      	ldrb	r3, [r3, #0]
}
 8002196:	4618      	mov	r0, r3
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	460b      	mov	r3, r1
 80021ac:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80021ae:	78fb      	ldrb	r3, [r7, #3]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	212c      	movs	r1, #44	; 0x2c
 80021b4:	fb01 f303 	mul.w	r3, r1, r3
 80021b8:	4413      	add	r3, r2
 80021ba:	3350      	adds	r3, #80	; 0x50
 80021bc:	681b      	ldr	r3, [r3, #0]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f003 fce8 	bl	8005bac <USB_GetCurrentFrame>
 80021dc:	4603      	mov	r3, r0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f003 fcc3 	bl	8005b7e <USB_GetHostSpeed>
 80021f8:	4603      	mov	r3, r0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b086      	sub	sp, #24
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	460b      	mov	r3, r1
 800220c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002218:	78fb      	ldrb	r3, [r7, #3]
 800221a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	015a      	lsls	r2, r3, #5
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4413      	add	r3, r2
 8002224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	2b04      	cmp	r3, #4
 8002230:	d11a      	bne.n	8002268 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	015a      	lsls	r2, r3, #5
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4413      	add	r3, r2
 800223a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223e:	461a      	mov	r2, r3
 8002240:	2304      	movs	r3, #4
 8002242:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	212c      	movs	r1, #44	; 0x2c
 800224a:	fb01 f303 	mul.w	r3, r1, r3
 800224e:	4413      	add	r3, r2
 8002250:	3361      	adds	r3, #97	; 0x61
 8002252:	2206      	movs	r2, #6
 8002254:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	b2d2      	uxtb	r2, r2
 800225e:	4611      	mov	r1, r2
 8002260:	4618      	mov	r0, r3
 8002262:	f003 ff26 	bl	80060b2 <USB_HC_Halt>
 8002266:	e0af      	b.n	80023c8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	015a      	lsls	r2, r3, #5
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4413      	add	r3, r2
 8002270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800227e:	d11b      	bne.n	80022b8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	015a      	lsls	r2, r3, #5
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4413      	add	r3, r2
 8002288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228c:	461a      	mov	r2, r3
 800228e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002292:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	212c      	movs	r1, #44	; 0x2c
 800229a:	fb01 f303 	mul.w	r3, r1, r3
 800229e:	4413      	add	r3, r2
 80022a0:	3361      	adds	r3, #97	; 0x61
 80022a2:	2207      	movs	r2, #7
 80022a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f003 fefe 	bl	80060b2 <USB_HC_Halt>
 80022b6:	e087      	b.n	80023c8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	015a      	lsls	r2, r3, #5
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4413      	add	r3, r2
 80022c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 0320 	and.w	r3, r3, #32
 80022ca:	2b20      	cmp	r3, #32
 80022cc:	d109      	bne.n	80022e2 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	015a      	lsls	r2, r3, #5
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022da:	461a      	mov	r2, r3
 80022dc:	2320      	movs	r3, #32
 80022de:	6093      	str	r3, [r2, #8]
 80022e0:	e072      	b.n	80023c8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 0308 	and.w	r3, r3, #8
 80022f4:	2b08      	cmp	r3, #8
 80022f6:	d11a      	bne.n	800232e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	015a      	lsls	r2, r3, #5
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4413      	add	r3, r2
 8002300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002304:	461a      	mov	r2, r3
 8002306:	2308      	movs	r3, #8
 8002308:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	212c      	movs	r1, #44	; 0x2c
 8002310:	fb01 f303 	mul.w	r3, r1, r3
 8002314:	4413      	add	r3, r2
 8002316:	3361      	adds	r3, #97	; 0x61
 8002318:	2205      	movs	r2, #5
 800231a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	4611      	mov	r1, r2
 8002326:	4618      	mov	r0, r3
 8002328:	f003 fec3 	bl	80060b2 <USB_HC_Halt>
 800232c:	e04c      	b.n	80023c8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	015a      	lsls	r2, r3, #5
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4413      	add	r3, r2
 8002336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002344:	d11b      	bne.n	800237e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	015a      	lsls	r2, r3, #5
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	4413      	add	r3, r2
 800234e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002352:	461a      	mov	r2, r3
 8002354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002358:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	212c      	movs	r1, #44	; 0x2c
 8002360:	fb01 f303 	mul.w	r3, r1, r3
 8002364:	4413      	add	r3, r2
 8002366:	3361      	adds	r3, #97	; 0x61
 8002368:	2208      	movs	r2, #8
 800236a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	4611      	mov	r1, r2
 8002376:	4618      	mov	r0, r3
 8002378:	f003 fe9b 	bl	80060b2 <USB_HC_Halt>
 800237c:	e024      	b.n	80023c8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	015a      	lsls	r2, r3, #5
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4413      	add	r3, r2
 8002386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002390:	2b80      	cmp	r3, #128	; 0x80
 8002392:	d119      	bne.n	80023c8 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	015a      	lsls	r2, r3, #5
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4413      	add	r3, r2
 800239c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a0:	461a      	mov	r2, r3
 80023a2:	2380      	movs	r3, #128	; 0x80
 80023a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	212c      	movs	r1, #44	; 0x2c
 80023ac:	fb01 f303 	mul.w	r3, r1, r3
 80023b0:	4413      	add	r3, r2
 80023b2:	3361      	adds	r3, #97	; 0x61
 80023b4:	2206      	movs	r2, #6
 80023b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	4611      	mov	r1, r2
 80023c2:	4618      	mov	r0, r3
 80023c4:	f003 fe75 	bl	80060b2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	015a      	lsls	r2, r3, #5
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4413      	add	r3, r2
 80023d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023de:	d112      	bne.n	8002406 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	4611      	mov	r1, r2
 80023ea:	4618      	mov	r0, r3
 80023ec:	f003 fe61 	bl	80060b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	015a      	lsls	r2, r3, #5
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4413      	add	r3, r2
 80023f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fc:	461a      	mov	r2, r3
 80023fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002402:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002404:	e27a      	b.n	80028fc <HCD_HC_IN_IRQHandler+0x6fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	015a      	lsls	r2, r3, #5
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	4413      	add	r3, r2
 800240e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b01      	cmp	r3, #1
 800241a:	f040 810b 	bne.w	8002634 <HCD_HC_IN_IRQHandler+0x432>
    if (hhcd->Init.dma_enable != 0U)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d019      	beq.n	800245a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	212c      	movs	r1, #44	; 0x2c
 800242c:	fb01 f303 	mul.w	r3, r1, r3
 8002430:	4413      	add	r3, r2
 8002432:	3348      	adds	r3, #72	; 0x48
 8002434:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	0159      	lsls	r1, r3, #5
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	440b      	add	r3, r1
 800243e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002448:	1ad2      	subs	r2, r2, r3
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	202c      	movs	r0, #44	; 0x2c
 8002450:	fb00 f303 	mul.w	r3, r0, r3
 8002454:	440b      	add	r3, r1
 8002456:	3350      	adds	r3, #80	; 0x50
 8002458:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	212c      	movs	r1, #44	; 0x2c
 8002460:	fb01 f303 	mul.w	r3, r1, r3
 8002464:	4413      	add	r3, r2
 8002466:	3361      	adds	r3, #97	; 0x61
 8002468:	2201      	movs	r2, #1
 800246a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	212c      	movs	r1, #44	; 0x2c
 8002472:	fb01 f303 	mul.w	r3, r1, r3
 8002476:	4413      	add	r3, r2
 8002478:	335c      	adds	r3, #92	; 0x5c
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	015a      	lsls	r2, r3, #5
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4413      	add	r3, r2
 8002486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248a:	461a      	mov	r2, r3
 800248c:	2301      	movs	r3, #1
 800248e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	212c      	movs	r1, #44	; 0x2c
 8002496:	fb01 f303 	mul.w	r3, r1, r3
 800249a:	4413      	add	r3, r2
 800249c:	333f      	adds	r3, #63	; 0x3f
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d009      	beq.n	80024b8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	212c      	movs	r1, #44	; 0x2c
 80024aa:	fb01 f303 	mul.w	r3, r1, r3
 80024ae:	4413      	add	r3, r2
 80024b0:	333f      	adds	r3, #63	; 0x3f
 80024b2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d111      	bne.n	80024dc <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	4611      	mov	r1, r2
 80024c2:	4618      	mov	r0, r3
 80024c4:	f003 fdf5 	bl	80060b2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	015a      	lsls	r2, r3, #5
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4413      	add	r3, r2
 80024d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d4:	461a      	mov	r2, r3
 80024d6:	2310      	movs	r3, #16
 80024d8:	6093      	str	r3, [r2, #8]
 80024da:	e066      	b.n	80025aa <HCD_HC_IN_IRQHandler+0x3a8>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	212c      	movs	r1, #44	; 0x2c
 80024e2:	fb01 f303 	mul.w	r3, r1, r3
 80024e6:	4413      	add	r3, r2
 80024e8:	333f      	adds	r3, #63	; 0x3f
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b03      	cmp	r3, #3
 80024ee:	d127      	bne.n	8002540 <HCD_HC_IN_IRQHandler+0x33e>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	0151      	lsls	r1, r2, #5
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	440a      	add	r2, r1
 8002506:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800250a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800250e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	212c      	movs	r1, #44	; 0x2c
 8002516:	fb01 f303 	mul.w	r3, r1, r3
 800251a:	4413      	add	r3, r2
 800251c:	3360      	adds	r3, #96	; 0x60
 800251e:	2201      	movs	r2, #1
 8002520:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	b2d9      	uxtb	r1, r3
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	202c      	movs	r0, #44	; 0x2c
 800252c:	fb00 f303 	mul.w	r3, r0, r3
 8002530:	4413      	add	r3, r2
 8002532:	3360      	adds	r3, #96	; 0x60
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f009 fef9 	bl	800c330 <HAL_HCD_HC_NotifyURBChange_Callback>
 800253e:	e034      	b.n	80025aa <HCD_HC_IN_IRQHandler+0x3a8>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	212c      	movs	r1, #44	; 0x2c
 8002546:	fb01 f303 	mul.w	r3, r1, r3
 800254a:	4413      	add	r3, r2
 800254c:	333f      	adds	r3, #63	; 0x3f
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d12a      	bne.n	80025aa <HCD_HC_IN_IRQHandler+0x3a8>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	212c      	movs	r1, #44	; 0x2c
 800255a:	fb01 f303 	mul.w	r3, r1, r3
 800255e:	4413      	add	r3, r2
 8002560:	3360      	adds	r3, #96	; 0x60
 8002562:	2201      	movs	r2, #1
 8002564:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	212c      	movs	r1, #44	; 0x2c
 800256c:	fb01 f303 	mul.w	r3, r1, r3
 8002570:	4413      	add	r3, r2
 8002572:	3354      	adds	r3, #84	; 0x54
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	f083 0301 	eor.w	r3, r3, #1
 800257a:	b2d8      	uxtb	r0, r3
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	212c      	movs	r1, #44	; 0x2c
 8002582:	fb01 f303 	mul.w	r3, r1, r3
 8002586:	4413      	add	r3, r2
 8002588:	3354      	adds	r3, #84	; 0x54
 800258a:	4602      	mov	r2, r0
 800258c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	b2d9      	uxtb	r1, r3
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	202c      	movs	r0, #44	; 0x2c
 8002598:	fb00 f303 	mul.w	r3, r0, r3
 800259c:	4413      	add	r3, r2
 800259e:	3360      	adds	r3, #96	; 0x60
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	461a      	mov	r2, r3
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f009 fec3 	bl	800c330 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d12b      	bne.n	800260a <HCD_HC_IN_IRQHandler+0x408>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	212c      	movs	r1, #44	; 0x2c
 80025b8:	fb01 f303 	mul.w	r3, r1, r3
 80025bc:	4413      	add	r3, r2
 80025be:	3348      	adds	r3, #72	; 0x48
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	202c      	movs	r0, #44	; 0x2c
 80025c8:	fb00 f202 	mul.w	r2, r0, r2
 80025cc:	440a      	add	r2, r1
 80025ce:	3240      	adds	r2, #64	; 0x40
 80025d0:	8812      	ldrh	r2, [r2, #0]
 80025d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 818e 	beq.w	80028fc <HCD_HC_IN_IRQHandler+0x6fa>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	212c      	movs	r1, #44	; 0x2c
 80025e6:	fb01 f303 	mul.w	r3, r1, r3
 80025ea:	4413      	add	r3, r2
 80025ec:	3354      	adds	r3, #84	; 0x54
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	f083 0301 	eor.w	r3, r3, #1
 80025f4:	b2d8      	uxtb	r0, r3
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	212c      	movs	r1, #44	; 0x2c
 80025fc:	fb01 f303 	mul.w	r3, r1, r3
 8002600:	4413      	add	r3, r2
 8002602:	3354      	adds	r3, #84	; 0x54
 8002604:	4602      	mov	r2, r0
 8002606:	701a      	strb	r2, [r3, #0]
}
 8002608:	e178      	b.n	80028fc <HCD_HC_IN_IRQHandler+0x6fa>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	212c      	movs	r1, #44	; 0x2c
 8002610:	fb01 f303 	mul.w	r3, r1, r3
 8002614:	4413      	add	r3, r2
 8002616:	3354      	adds	r3, #84	; 0x54
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	f083 0301 	eor.w	r3, r3, #1
 800261e:	b2d8      	uxtb	r0, r3
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	212c      	movs	r1, #44	; 0x2c
 8002626:	fb01 f303 	mul.w	r3, r1, r3
 800262a:	4413      	add	r3, r2
 800262c:	3354      	adds	r3, #84	; 0x54
 800262e:	4602      	mov	r2, r0
 8002630:	701a      	strb	r2, [r3, #0]
}
 8002632:	e163      	b.n	80028fc <HCD_HC_IN_IRQHandler+0x6fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	015a      	lsls	r2, r3, #5
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4413      	add	r3, r2
 800263c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b02      	cmp	r3, #2
 8002648:	f040 80f6 	bne.w	8002838 <HCD_HC_IN_IRQHandler+0x636>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	212c      	movs	r1, #44	; 0x2c
 8002652:	fb01 f303 	mul.w	r3, r1, r3
 8002656:	4413      	add	r3, r2
 8002658:	3361      	adds	r3, #97	; 0x61
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d109      	bne.n	8002674 <HCD_HC_IN_IRQHandler+0x472>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	212c      	movs	r1, #44	; 0x2c
 8002666:	fb01 f303 	mul.w	r3, r1, r3
 800266a:	4413      	add	r3, r2
 800266c:	3360      	adds	r3, #96	; 0x60
 800266e:	2201      	movs	r2, #1
 8002670:	701a      	strb	r2, [r3, #0]
 8002672:	e0c9      	b.n	8002808 <HCD_HC_IN_IRQHandler+0x606>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	212c      	movs	r1, #44	; 0x2c
 800267a:	fb01 f303 	mul.w	r3, r1, r3
 800267e:	4413      	add	r3, r2
 8002680:	3361      	adds	r3, #97	; 0x61
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b05      	cmp	r3, #5
 8002686:	d109      	bne.n	800269c <HCD_HC_IN_IRQHandler+0x49a>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	212c      	movs	r1, #44	; 0x2c
 800268e:	fb01 f303 	mul.w	r3, r1, r3
 8002692:	4413      	add	r3, r2
 8002694:	3360      	adds	r3, #96	; 0x60
 8002696:	2205      	movs	r2, #5
 8002698:	701a      	strb	r2, [r3, #0]
 800269a:	e0b5      	b.n	8002808 <HCD_HC_IN_IRQHandler+0x606>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	212c      	movs	r1, #44	; 0x2c
 80026a2:	fb01 f303 	mul.w	r3, r1, r3
 80026a6:	4413      	add	r3, r2
 80026a8:	3361      	adds	r3, #97	; 0x61
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b06      	cmp	r3, #6
 80026ae:	d009      	beq.n	80026c4 <HCD_HC_IN_IRQHandler+0x4c2>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	212c      	movs	r1, #44	; 0x2c
 80026b6:	fb01 f303 	mul.w	r3, r1, r3
 80026ba:	4413      	add	r3, r2
 80026bc:	3361      	adds	r3, #97	; 0x61
 80026be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d150      	bne.n	8002766 <HCD_HC_IN_IRQHandler+0x564>
      hhcd->hc[ch_num].ErrCnt++;
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	212c      	movs	r1, #44	; 0x2c
 80026ca:	fb01 f303 	mul.w	r3, r1, r3
 80026ce:	4413      	add	r3, r2
 80026d0:	335c      	adds	r3, #92	; 0x5c
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	202c      	movs	r0, #44	; 0x2c
 80026dc:	fb00 f303 	mul.w	r3, r0, r3
 80026e0:	440b      	add	r3, r1
 80026e2:	335c      	adds	r3, #92	; 0x5c
 80026e4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	212c      	movs	r1, #44	; 0x2c
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	4413      	add	r3, r2
 80026f2:	335c      	adds	r3, #92	; 0x5c
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d912      	bls.n	8002720 <HCD_HC_IN_IRQHandler+0x51e>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	212c      	movs	r1, #44	; 0x2c
 8002700:	fb01 f303 	mul.w	r3, r1, r3
 8002704:	4413      	add	r3, r2
 8002706:	335c      	adds	r3, #92	; 0x5c
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	212c      	movs	r1, #44	; 0x2c
 8002712:	fb01 f303 	mul.w	r3, r1, r3
 8002716:	4413      	add	r3, r2
 8002718:	3360      	adds	r3, #96	; 0x60
 800271a:	2204      	movs	r2, #4
 800271c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800271e:	e073      	b.n	8002808 <HCD_HC_IN_IRQHandler+0x606>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	212c      	movs	r1, #44	; 0x2c
 8002726:	fb01 f303 	mul.w	r3, r1, r3
 800272a:	4413      	add	r3, r2
 800272c:	3360      	adds	r3, #96	; 0x60
 800272e:	2202      	movs	r2, #2
 8002730:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	015a      	lsls	r2, r3, #5
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4413      	add	r3, r2
 800273a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002748:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002750:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	015a      	lsls	r2, r3, #5
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	4413      	add	r3, r2
 800275a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275e:	461a      	mov	r2, r3
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002764:	e050      	b.n	8002808 <HCD_HC_IN_IRQHandler+0x606>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	212c      	movs	r1, #44	; 0x2c
 800276c:	fb01 f303 	mul.w	r3, r1, r3
 8002770:	4413      	add	r3, r2
 8002772:	3361      	adds	r3, #97	; 0x61
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b03      	cmp	r3, #3
 8002778:	d122      	bne.n	80027c0 <HCD_HC_IN_IRQHandler+0x5be>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	212c      	movs	r1, #44	; 0x2c
 8002780:	fb01 f303 	mul.w	r3, r1, r3
 8002784:	4413      	add	r3, r2
 8002786:	3360      	adds	r3, #96	; 0x60
 8002788:	2202      	movs	r2, #2
 800278a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4413      	add	r3, r2
 8002794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80027a2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027aa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b8:	461a      	mov	r2, r3
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	e023      	b.n	8002808 <HCD_HC_IN_IRQHandler+0x606>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	212c      	movs	r1, #44	; 0x2c
 80027c6:	fb01 f303 	mul.w	r3, r1, r3
 80027ca:	4413      	add	r3, r2
 80027cc:	3361      	adds	r3, #97	; 0x61
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b07      	cmp	r3, #7
 80027d2:	d119      	bne.n	8002808 <HCD_HC_IN_IRQHandler+0x606>
      hhcd->hc[ch_num].ErrCnt++;
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	212c      	movs	r1, #44	; 0x2c
 80027da:	fb01 f303 	mul.w	r3, r1, r3
 80027de:	4413      	add	r3, r2
 80027e0:	335c      	adds	r3, #92	; 0x5c
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	202c      	movs	r0, #44	; 0x2c
 80027ec:	fb00 f303 	mul.w	r3, r0, r3
 80027f0:	440b      	add	r3, r1
 80027f2:	335c      	adds	r3, #92	; 0x5c
 80027f4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	212c      	movs	r1, #44	; 0x2c
 80027fc:	fb01 f303 	mul.w	r3, r1, r3
 8002800:	4413      	add	r3, r2
 8002802:	3360      	adds	r3, #96	; 0x60
 8002804:	2204      	movs	r2, #4
 8002806:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	015a      	lsls	r2, r3, #5
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4413      	add	r3, r2
 8002810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002814:	461a      	mov	r2, r3
 8002816:	2302      	movs	r3, #2
 8002818:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	b2d9      	uxtb	r1, r3
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	202c      	movs	r0, #44	; 0x2c
 8002824:	fb00 f303 	mul.w	r3, r0, r3
 8002828:	4413      	add	r3, r2
 800282a:	3360      	adds	r3, #96	; 0x60
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	461a      	mov	r2, r3
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f009 fd7d 	bl	800c330 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002836:	e061      	b.n	80028fc <HCD_HC_IN_IRQHandler+0x6fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	015a      	lsls	r2, r3, #5
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	4413      	add	r3, r2
 8002840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 0310 	and.w	r3, r3, #16
 800284a:	2b10      	cmp	r3, #16
 800284c:	d156      	bne.n	80028fc <HCD_HC_IN_IRQHandler+0x6fa>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	212c      	movs	r1, #44	; 0x2c
 8002854:	fb01 f303 	mul.w	r3, r1, r3
 8002858:	4413      	add	r3, r2
 800285a:	333f      	adds	r3, #63	; 0x3f
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b03      	cmp	r3, #3
 8002860:	d111      	bne.n	8002886 <HCD_HC_IN_IRQHandler+0x684>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	212c      	movs	r1, #44	; 0x2c
 8002868:	fb01 f303 	mul.w	r3, r1, r3
 800286c:	4413      	add	r3, r2
 800286e:	335c      	adds	r3, #92	; 0x5c
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	4611      	mov	r1, r2
 800287e:	4618      	mov	r0, r3
 8002880:	f003 fc17 	bl	80060b2 <USB_HC_Halt>
 8002884:	e031      	b.n	80028ea <HCD_HC_IN_IRQHandler+0x6e8>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	212c      	movs	r1, #44	; 0x2c
 800288c:	fb01 f303 	mul.w	r3, r1, r3
 8002890:	4413      	add	r3, r2
 8002892:	333f      	adds	r3, #63	; 0x3f
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d009      	beq.n	80028ae <HCD_HC_IN_IRQHandler+0x6ac>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	212c      	movs	r1, #44	; 0x2c
 80028a0:	fb01 f303 	mul.w	r3, r1, r3
 80028a4:	4413      	add	r3, r2
 80028a6:	333f      	adds	r3, #63	; 0x3f
 80028a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d11d      	bne.n	80028ea <HCD_HC_IN_IRQHandler+0x6e8>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	212c      	movs	r1, #44	; 0x2c
 80028b4:	fb01 f303 	mul.w	r3, r1, r3
 80028b8:	4413      	add	r3, r2
 80028ba:	335c      	adds	r3, #92	; 0x5c
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d110      	bne.n	80028ea <HCD_HC_IN_IRQHandler+0x6e8>
        hhcd->hc[ch_num].state = HC_NAK;
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	212c      	movs	r1, #44	; 0x2c
 80028ce:	fb01 f303 	mul.w	r3, r1, r3
 80028d2:	4413      	add	r3, r2
 80028d4:	3361      	adds	r3, #97	; 0x61
 80028d6:	2203      	movs	r2, #3
 80028d8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	4611      	mov	r1, r2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f003 fbe4 	bl	80060b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	015a      	lsls	r2, r3, #5
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4413      	add	r3, r2
 80028f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f6:	461a      	mov	r2, r3
 80028f8:	2310      	movs	r3, #16
 80028fa:	6093      	str	r3, [r2, #8]
}
 80028fc:	bf00      	nop
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b088      	sub	sp, #32
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800291a:	78fb      	ldrb	r3, [r7, #3]
 800291c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	015a      	lsls	r2, r3, #5
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	4413      	add	r3, r2
 8002926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b04      	cmp	r3, #4
 8002932:	d11a      	bne.n	800296a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	4413      	add	r3, r2
 800293c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002940:	461a      	mov	r2, r3
 8002942:	2304      	movs	r3, #4
 8002944:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	212c      	movs	r1, #44	; 0x2c
 800294c:	fb01 f303 	mul.w	r3, r1, r3
 8002950:	4413      	add	r3, r2
 8002952:	3361      	adds	r3, #97	; 0x61
 8002954:	2206      	movs	r2, #6
 8002956:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	4611      	mov	r1, r2
 8002962:	4618      	mov	r0, r3
 8002964:	f003 fba5 	bl	80060b2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002968:	e331      	b.n	8002fce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	015a      	lsls	r2, r3, #5
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	4413      	add	r3, r2
 8002972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f003 0320 	and.w	r3, r3, #32
 800297c:	2b20      	cmp	r3, #32
 800297e:	d12e      	bne.n	80029de <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	015a      	lsls	r2, r3, #5
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	4413      	add	r3, r2
 8002988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298c:	461a      	mov	r2, r3
 800298e:	2320      	movs	r3, #32
 8002990:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	212c      	movs	r1, #44	; 0x2c
 8002998:	fb01 f303 	mul.w	r3, r1, r3
 800299c:	4413      	add	r3, r2
 800299e:	333d      	adds	r3, #61	; 0x3d
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	f040 8313 	bne.w	8002fce <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	212c      	movs	r1, #44	; 0x2c
 80029ae:	fb01 f303 	mul.w	r3, r1, r3
 80029b2:	4413      	add	r3, r2
 80029b4:	333d      	adds	r3, #61	; 0x3d
 80029b6:	2200      	movs	r2, #0
 80029b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	212c      	movs	r1, #44	; 0x2c
 80029c0:	fb01 f303 	mul.w	r3, r1, r3
 80029c4:	4413      	add	r3, r2
 80029c6:	3360      	adds	r3, #96	; 0x60
 80029c8:	2202      	movs	r2, #2
 80029ca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	4611      	mov	r1, r2
 80029d6:	4618      	mov	r0, r3
 80029d8:	f003 fb6b 	bl	80060b2 <USB_HC_Halt>
}
 80029dc:	e2f7      	b.n	8002fce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	015a      	lsls	r2, r3, #5
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	4413      	add	r3, r2
 80029e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029f4:	d112      	bne.n	8002a1c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	015a      	lsls	r2, r3, #5
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	4413      	add	r3, r2
 80029fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a02:	461a      	mov	r2, r3
 8002a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a08:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	4611      	mov	r1, r2
 8002a14:	4618      	mov	r0, r3
 8002a16:	f003 fb4c 	bl	80060b2 <USB_HC_Halt>
}
 8002a1a:	e2d8      	b.n	8002fce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	015a      	lsls	r2, r3, #5
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d140      	bne.n	8002ab4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	212c      	movs	r1, #44	; 0x2c
 8002a38:	fb01 f303 	mul.w	r3, r1, r3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	335c      	adds	r3, #92	; 0x5c
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	015a      	lsls	r2, r3, #5
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a56:	2b40      	cmp	r3, #64	; 0x40
 8002a58:	d111      	bne.n	8002a7e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	212c      	movs	r1, #44	; 0x2c
 8002a60:	fb01 f303 	mul.w	r3, r1, r3
 8002a64:	4413      	add	r3, r2
 8002a66:	333d      	adds	r3, #61	; 0x3d
 8002a68:	2201      	movs	r2, #1
 8002a6a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a78:	461a      	mov	r2, r3
 8002a7a:	2340      	movs	r3, #64	; 0x40
 8002a7c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	015a      	lsls	r2, r3, #5
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	4413      	add	r3, r2
 8002a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	212c      	movs	r1, #44	; 0x2c
 8002a96:	fb01 f303 	mul.w	r3, r1, r3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3361      	adds	r3, #97	; 0x61
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f003 fb00 	bl	80060b2 <USB_HC_Halt>
}
 8002ab2:	e28c      	b.n	8002fce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	015a      	lsls	r2, r3, #5
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac6:	2b40      	cmp	r3, #64	; 0x40
 8002ac8:	d12c      	bne.n	8002b24 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	212c      	movs	r1, #44	; 0x2c
 8002ad0:	fb01 f303 	mul.w	r3, r1, r3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3361      	adds	r3, #97	; 0x61
 8002ad8:	2204      	movs	r2, #4
 8002ada:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	212c      	movs	r1, #44	; 0x2c
 8002ae2:	fb01 f303 	mul.w	r3, r1, r3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	333d      	adds	r3, #61	; 0x3d
 8002aea:	2201      	movs	r2, #1
 8002aec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	212c      	movs	r1, #44	; 0x2c
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
 8002af8:	4413      	add	r3, r2
 8002afa:	335c      	adds	r3, #92	; 0x5c
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	4611      	mov	r1, r2
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f003 fad1 	bl	80060b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	2340      	movs	r3, #64	; 0x40
 8002b20:	6093      	str	r3, [r2, #8]
}
 8002b22:	e254      	b.n	8002fce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	015a      	lsls	r2, r3, #5
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b08      	cmp	r3, #8
 8002b38:	d11a      	bne.n	8002b70 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b46:	461a      	mov	r2, r3
 8002b48:	2308      	movs	r3, #8
 8002b4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	212c      	movs	r1, #44	; 0x2c
 8002b52:	fb01 f303 	mul.w	r3, r1, r3
 8002b56:	4413      	add	r3, r2
 8002b58:	3361      	adds	r3, #97	; 0x61
 8002b5a:	2205      	movs	r2, #5
 8002b5c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	4611      	mov	r1, r2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f003 faa2 	bl	80060b2 <USB_HC_Halt>
}
 8002b6e:	e22e      	b.n	8002fce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	015a      	lsls	r2, r3, #5
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	4413      	add	r3, r2
 8002b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 0310 	and.w	r3, r3, #16
 8002b82:	2b10      	cmp	r3, #16
 8002b84:	d140      	bne.n	8002c08 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	212c      	movs	r1, #44	; 0x2c
 8002b8c:	fb01 f303 	mul.w	r3, r1, r3
 8002b90:	4413      	add	r3, r2
 8002b92:	335c      	adds	r3, #92	; 0x5c
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	212c      	movs	r1, #44	; 0x2c
 8002b9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3361      	adds	r3, #97	; 0x61
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	212c      	movs	r1, #44	; 0x2c
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	333d      	adds	r3, #61	; 0x3d
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d112      	bne.n	8002be4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	212c      	movs	r1, #44	; 0x2c
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	333c      	adds	r3, #60	; 0x3c
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d108      	bne.n	8002be4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	212c      	movs	r1, #44	; 0x2c
 8002bd8:	fb01 f303 	mul.w	r3, r1, r3
 8002bdc:	4413      	add	r3, r2
 8002bde:	333d      	adds	r3, #61	; 0x3d
 8002be0:	2201      	movs	r2, #1
 8002be2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	4611      	mov	r1, r2
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f003 fa5f 	bl	80060b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	015a      	lsls	r2, r3, #5
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c00:	461a      	mov	r2, r3
 8002c02:	2310      	movs	r3, #16
 8002c04:	6093      	str	r3, [r2, #8]
}
 8002c06:	e1e2      	b.n	8002fce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	015a      	lsls	r2, r3, #5
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1a:	2b80      	cmp	r3, #128	; 0x80
 8002c1c:	d164      	bne.n	8002ce8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d111      	bne.n	8002c4a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	212c      	movs	r1, #44	; 0x2c
 8002c2c:	fb01 f303 	mul.w	r3, r1, r3
 8002c30:	4413      	add	r3, r2
 8002c32:	3361      	adds	r3, #97	; 0x61
 8002c34:	2206      	movs	r2, #6
 8002c36:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	4611      	mov	r1, r2
 8002c42:	4618      	mov	r0, r3
 8002c44:	f003 fa35 	bl	80060b2 <USB_HC_Halt>
 8002c48:	e044      	b.n	8002cd4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	212c      	movs	r1, #44	; 0x2c
 8002c50:	fb01 f303 	mul.w	r3, r1, r3
 8002c54:	4413      	add	r3, r2
 8002c56:	335c      	adds	r3, #92	; 0x5c
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	202c      	movs	r0, #44	; 0x2c
 8002c62:	fb00 f303 	mul.w	r3, r0, r3
 8002c66:	440b      	add	r3, r1
 8002c68:	335c      	adds	r3, #92	; 0x5c
 8002c6a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	212c      	movs	r1, #44	; 0x2c
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	335c      	adds	r3, #92	; 0x5c
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d920      	bls.n	8002cc2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	212c      	movs	r1, #44	; 0x2c
 8002c86:	fb01 f303 	mul.w	r3, r1, r3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	335c      	adds	r3, #92	; 0x5c
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	212c      	movs	r1, #44	; 0x2c
 8002c98:	fb01 f303 	mul.w	r3, r1, r3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3360      	adds	r3, #96	; 0x60
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	b2d9      	uxtb	r1, r3
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	202c      	movs	r0, #44	; 0x2c
 8002cae:	fb00 f303 	mul.w	r3, r0, r3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3360      	adds	r3, #96	; 0x60
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f009 fb38 	bl	800c330 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002cc0:	e008      	b.n	8002cd4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	212c      	movs	r1, #44	; 0x2c
 8002cc8:	fb01 f303 	mul.w	r3, r1, r3
 8002ccc:	4413      	add	r3, r2
 8002cce:	3360      	adds	r3, #96	; 0x60
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	015a      	lsls	r2, r3, #5
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	4413      	add	r3, r2
 8002cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	2380      	movs	r3, #128	; 0x80
 8002ce4:	6093      	str	r3, [r2, #8]
}
 8002ce6:	e172      	b.n	8002fce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	015a      	lsls	r2, r3, #5
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	4413      	add	r3, r2
 8002cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cfe:	d11b      	bne.n	8002d38 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	212c      	movs	r1, #44	; 0x2c
 8002d06:	fb01 f303 	mul.w	r3, r1, r3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3361      	adds	r3, #97	; 0x61
 8002d0e:	2208      	movs	r2, #8
 8002d10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	b2d2      	uxtb	r2, r2
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f003 f9c8 	bl	80060b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	015a      	lsls	r2, r3, #5
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2e:	461a      	mov	r2, r3
 8002d30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d34:	6093      	str	r3, [r2, #8]
}
 8002d36:	e14a      	b.n	8002fce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	015a      	lsls	r2, r3, #5
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	f040 813f 	bne.w	8002fce <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	212c      	movs	r1, #44	; 0x2c
 8002d56:	fb01 f303 	mul.w	r3, r1, r3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3361      	adds	r3, #97	; 0x61
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d17d      	bne.n	8002e60 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	212c      	movs	r1, #44	; 0x2c
 8002d6a:	fb01 f303 	mul.w	r3, r1, r3
 8002d6e:	4413      	add	r3, r2
 8002d70:	3360      	adds	r3, #96	; 0x60
 8002d72:	2201      	movs	r2, #1
 8002d74:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	212c      	movs	r1, #44	; 0x2c
 8002d7c:	fb01 f303 	mul.w	r3, r1, r3
 8002d80:	4413      	add	r3, r2
 8002d82:	333f      	adds	r3, #63	; 0x3f
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d00a      	beq.n	8002da0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	212c      	movs	r1, #44	; 0x2c
 8002d90:	fb01 f303 	mul.w	r3, r1, r3
 8002d94:	4413      	add	r3, r2
 8002d96:	333f      	adds	r3, #63	; 0x3f
 8002d98:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d9a:	2b03      	cmp	r3, #3
 8002d9c:	f040 8100 	bne.w	8002fa0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d113      	bne.n	8002dd0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	212c      	movs	r1, #44	; 0x2c
 8002dae:	fb01 f303 	mul.w	r3, r1, r3
 8002db2:	4413      	add	r3, r2
 8002db4:	3355      	adds	r3, #85	; 0x55
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	f083 0301 	eor.w	r3, r3, #1
 8002dbc:	b2d8      	uxtb	r0, r3
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	212c      	movs	r1, #44	; 0x2c
 8002dc4:	fb01 f303 	mul.w	r3, r1, r3
 8002dc8:	4413      	add	r3, r2
 8002dca:	3355      	adds	r3, #85	; 0x55
 8002dcc:	4602      	mov	r2, r0
 8002dce:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	f040 80e3 	bne.w	8002fa0 <HCD_HC_OUT_IRQHandler+0x69c>
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	212c      	movs	r1, #44	; 0x2c
 8002de0:	fb01 f303 	mul.w	r3, r1, r3
 8002de4:	4413      	add	r3, r2
 8002de6:	334c      	adds	r3, #76	; 0x4c
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 80d8 	beq.w	8002fa0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	212c      	movs	r1, #44	; 0x2c
 8002df6:	fb01 f303 	mul.w	r3, r1, r3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	334c      	adds	r3, #76	; 0x4c
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	202c      	movs	r0, #44	; 0x2c
 8002e06:	fb00 f202 	mul.w	r2, r0, r2
 8002e0a:	440a      	add	r2, r1
 8002e0c:	3240      	adds	r2, #64	; 0x40
 8002e0e:	8812      	ldrh	r2, [r2, #0]
 8002e10:	4413      	add	r3, r2
 8002e12:	3b01      	subs	r3, #1
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	202c      	movs	r0, #44	; 0x2c
 8002e1a:	fb00 f202 	mul.w	r2, r0, r2
 8002e1e:	440a      	add	r2, r1
 8002e20:	3240      	adds	r2, #64	; 0x40
 8002e22:	8812      	ldrh	r2, [r2, #0]
 8002e24:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 80b5 	beq.w	8002fa0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	212c      	movs	r1, #44	; 0x2c
 8002e3c:	fb01 f303 	mul.w	r3, r1, r3
 8002e40:	4413      	add	r3, r2
 8002e42:	3355      	adds	r3, #85	; 0x55
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	f083 0301 	eor.w	r3, r3, #1
 8002e4a:	b2d8      	uxtb	r0, r3
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	212c      	movs	r1, #44	; 0x2c
 8002e52:	fb01 f303 	mul.w	r3, r1, r3
 8002e56:	4413      	add	r3, r2
 8002e58:	3355      	adds	r3, #85	; 0x55
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	701a      	strb	r2, [r3, #0]
 8002e5e:	e09f      	b.n	8002fa0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	212c      	movs	r1, #44	; 0x2c
 8002e66:	fb01 f303 	mul.w	r3, r1, r3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3361      	adds	r3, #97	; 0x61
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b03      	cmp	r3, #3
 8002e72:	d109      	bne.n	8002e88 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	212c      	movs	r1, #44	; 0x2c
 8002e7a:	fb01 f303 	mul.w	r3, r1, r3
 8002e7e:	4413      	add	r3, r2
 8002e80:	3360      	adds	r3, #96	; 0x60
 8002e82:	2202      	movs	r2, #2
 8002e84:	701a      	strb	r2, [r3, #0]
 8002e86:	e08b      	b.n	8002fa0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	212c      	movs	r1, #44	; 0x2c
 8002e8e:	fb01 f303 	mul.w	r3, r1, r3
 8002e92:	4413      	add	r3, r2
 8002e94:	3361      	adds	r3, #97	; 0x61
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d109      	bne.n	8002eb0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	212c      	movs	r1, #44	; 0x2c
 8002ea2:	fb01 f303 	mul.w	r3, r1, r3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3360      	adds	r3, #96	; 0x60
 8002eaa:	2202      	movs	r2, #2
 8002eac:	701a      	strb	r2, [r3, #0]
 8002eae:	e077      	b.n	8002fa0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	212c      	movs	r1, #44	; 0x2c
 8002eb6:	fb01 f303 	mul.w	r3, r1, r3
 8002eba:	4413      	add	r3, r2
 8002ebc:	3361      	adds	r3, #97	; 0x61
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2b05      	cmp	r3, #5
 8002ec2:	d109      	bne.n	8002ed8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	212c      	movs	r1, #44	; 0x2c
 8002eca:	fb01 f303 	mul.w	r3, r1, r3
 8002ece:	4413      	add	r3, r2
 8002ed0:	3360      	adds	r3, #96	; 0x60
 8002ed2:	2205      	movs	r2, #5
 8002ed4:	701a      	strb	r2, [r3, #0]
 8002ed6:	e063      	b.n	8002fa0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	212c      	movs	r1, #44	; 0x2c
 8002ede:	fb01 f303 	mul.w	r3, r1, r3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3361      	adds	r3, #97	; 0x61
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b06      	cmp	r3, #6
 8002eea:	d009      	beq.n	8002f00 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	212c      	movs	r1, #44	; 0x2c
 8002ef2:	fb01 f303 	mul.w	r3, r1, r3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3361      	adds	r3, #97	; 0x61
 8002efa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d14f      	bne.n	8002fa0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	212c      	movs	r1, #44	; 0x2c
 8002f06:	fb01 f303 	mul.w	r3, r1, r3
 8002f0a:	4413      	add	r3, r2
 8002f0c:	335c      	adds	r3, #92	; 0x5c
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	1c5a      	adds	r2, r3, #1
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	202c      	movs	r0, #44	; 0x2c
 8002f18:	fb00 f303 	mul.w	r3, r0, r3
 8002f1c:	440b      	add	r3, r1
 8002f1e:	335c      	adds	r3, #92	; 0x5c
 8002f20:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	212c      	movs	r1, #44	; 0x2c
 8002f28:	fb01 f303 	mul.w	r3, r1, r3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	335c      	adds	r3, #92	; 0x5c
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d912      	bls.n	8002f5c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	212c      	movs	r1, #44	; 0x2c
 8002f3c:	fb01 f303 	mul.w	r3, r1, r3
 8002f40:	4413      	add	r3, r2
 8002f42:	335c      	adds	r3, #92	; 0x5c
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	212c      	movs	r1, #44	; 0x2c
 8002f4e:	fb01 f303 	mul.w	r3, r1, r3
 8002f52:	4413      	add	r3, r2
 8002f54:	3360      	adds	r3, #96	; 0x60
 8002f56:	2204      	movs	r2, #4
 8002f58:	701a      	strb	r2, [r3, #0]
 8002f5a:	e021      	b.n	8002fa0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	212c      	movs	r1, #44	; 0x2c
 8002f62:	fb01 f303 	mul.w	r3, r1, r3
 8002f66:	4413      	add	r3, r2
 8002f68:	3360      	adds	r3, #96	; 0x60
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	015a      	lsls	r2, r3, #5
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	4413      	add	r3, r2
 8002f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f84:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f8c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	015a      	lsls	r2, r3, #5
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	4413      	add	r3, r2
 8002f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	015a      	lsls	r2, r3, #5
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fac:	461a      	mov	r2, r3
 8002fae:	2302      	movs	r3, #2
 8002fb0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	b2d9      	uxtb	r1, r3
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	202c      	movs	r0, #44	; 0x2c
 8002fbc:	fb00 f303 	mul.w	r3, r0, r3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3360      	adds	r3, #96	; 0x60
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f009 f9b1 	bl	800c330 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002fce:	bf00      	nop
 8002fd0:	3720      	adds	r7, #32
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b08a      	sub	sp, #40	; 0x28
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	0c5b      	lsrs	r3, r3, #17
 8002ffc:	f003 030f 	and.w	r3, r3, #15
 8003000:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	091b      	lsrs	r3, r3, #4
 8003006:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800300a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d004      	beq.n	800301c <HCD_RXQLVL_IRQHandler+0x46>
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2b05      	cmp	r3, #5
 8003016:	f000 80a9 	beq.w	800316c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800301a:	e0aa      	b.n	8003172 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 80a6 	beq.w	8003170 <HCD_RXQLVL_IRQHandler+0x19a>
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	212c      	movs	r1, #44	; 0x2c
 800302a:	fb01 f303 	mul.w	r3, r1, r3
 800302e:	4413      	add	r3, r2
 8003030:	3344      	adds	r3, #68	; 0x44
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 809b 	beq.w	8003170 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	212c      	movs	r1, #44	; 0x2c
 8003040:	fb01 f303 	mul.w	r3, r1, r3
 8003044:	4413      	add	r3, r2
 8003046:	3350      	adds	r3, #80	; 0x50
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	441a      	add	r2, r3
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	202c      	movs	r0, #44	; 0x2c
 8003054:	fb00 f303 	mul.w	r3, r0, r3
 8003058:	440b      	add	r3, r1
 800305a:	334c      	adds	r3, #76	; 0x4c
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d87a      	bhi.n	8003158 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6818      	ldr	r0, [r3, #0]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	212c      	movs	r1, #44	; 0x2c
 800306c:	fb01 f303 	mul.w	r3, r1, r3
 8003070:	4413      	add	r3, r2
 8003072:	3344      	adds	r3, #68	; 0x44
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	b292      	uxth	r2, r2
 800307a:	4619      	mov	r1, r3
 800307c:	f002 fb82 	bl	8005784 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	212c      	movs	r1, #44	; 0x2c
 8003086:	fb01 f303 	mul.w	r3, r1, r3
 800308a:	4413      	add	r3, r2
 800308c:	3344      	adds	r3, #68	; 0x44
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	441a      	add	r2, r3
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	202c      	movs	r0, #44	; 0x2c
 800309a:	fb00 f303 	mul.w	r3, r0, r3
 800309e:	440b      	add	r3, r1
 80030a0:	3344      	adds	r3, #68	; 0x44
 80030a2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	212c      	movs	r1, #44	; 0x2c
 80030aa:	fb01 f303 	mul.w	r3, r1, r3
 80030ae:	4413      	add	r3, r2
 80030b0:	3350      	adds	r3, #80	; 0x50
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	441a      	add	r2, r3
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	202c      	movs	r0, #44	; 0x2c
 80030be:	fb00 f303 	mul.w	r3, r0, r3
 80030c2:	440b      	add	r3, r1
 80030c4:	3350      	adds	r3, #80	; 0x50
 80030c6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	0cdb      	lsrs	r3, r3, #19
 80030d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030dc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	212c      	movs	r1, #44	; 0x2c
 80030e4:	fb01 f303 	mul.w	r3, r1, r3
 80030e8:	4413      	add	r3, r2
 80030ea:	3340      	adds	r3, #64	; 0x40
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d13c      	bne.n	8003170 <HCD_RXQLVL_IRQHandler+0x19a>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d039      	beq.n	8003170 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	015a      	lsls	r2, r3, #5
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	4413      	add	r3, r2
 8003104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003112:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800311a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	015a      	lsls	r2, r3, #5
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	4413      	add	r3, r2
 8003124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003128:	461a      	mov	r2, r3
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	212c      	movs	r1, #44	; 0x2c
 8003134:	fb01 f303 	mul.w	r3, r1, r3
 8003138:	4413      	add	r3, r2
 800313a:	3354      	adds	r3, #84	; 0x54
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	f083 0301 	eor.w	r3, r3, #1
 8003142:	b2d8      	uxtb	r0, r3
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	212c      	movs	r1, #44	; 0x2c
 800314a:	fb01 f303 	mul.w	r3, r1, r3
 800314e:	4413      	add	r3, r2
 8003150:	3354      	adds	r3, #84	; 0x54
 8003152:	4602      	mov	r2, r0
 8003154:	701a      	strb	r2, [r3, #0]
      break;
 8003156:	e00b      	b.n	8003170 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	212c      	movs	r1, #44	; 0x2c
 800315e:	fb01 f303 	mul.w	r3, r1, r3
 8003162:	4413      	add	r3, r2
 8003164:	3360      	adds	r3, #96	; 0x60
 8003166:	2204      	movs	r2, #4
 8003168:	701a      	strb	r2, [r3, #0]
      break;
 800316a:	e001      	b.n	8003170 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800316c:	bf00      	nop
 800316e:	e000      	b.n	8003172 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003170:	bf00      	nop
  }
}
 8003172:	bf00      	nop
 8003174:	3728      	adds	r7, #40	; 0x28
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b086      	sub	sp, #24
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80031a6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d10b      	bne.n	80031ca <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d102      	bne.n	80031c2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f009 f89b 	bl	800c2f8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	f043 0302 	orr.w	r3, r3, #2
 80031c8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f003 0308 	and.w	r3, r3, #8
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d132      	bne.n	800323a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f043 0308 	orr.w	r3, r3, #8
 80031da:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d126      	bne.n	8003234 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d113      	bne.n	8003216 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80031f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031f8:	d106      	bne.n	8003208 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2102      	movs	r1, #2
 8003200:	4618      	mov	r0, r3
 8003202:	f002 fc1f 	bl	8005a44 <USB_InitFSLSPClkSel>
 8003206:	e011      	b.n	800322c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2101      	movs	r1, #1
 800320e:	4618      	mov	r0, r3
 8003210:	f002 fc18 	bl	8005a44 <USB_InitFSLSPClkSel>
 8003214:	e00a      	b.n	800322c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d106      	bne.n	800322c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003224:	461a      	mov	r2, r3
 8003226:	f64e 2360 	movw	r3, #60000	; 0xea60
 800322a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f009 f88d 	bl	800c34c <HAL_HCD_PortEnabled_Callback>
 8003232:	e002      	b.n	800323a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f009 f897 	bl	800c368 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f003 0320 	and.w	r3, r3, #32
 8003240:	2b20      	cmp	r3, #32
 8003242:	d103      	bne.n	800324c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f043 0320 	orr.w	r3, r3, #32
 800324a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003252:	461a      	mov	r2, r3
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	6013      	str	r3, [r2, #0]
}
 8003258:	bf00      	nop
 800325a:	3718      	adds	r7, #24
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800326a:	4b23      	ldr	r3, [pc, #140]	; (80032f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	4a22      	ldr	r2, [pc, #136]	; (80032f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003274:	6413      	str	r3, [r2, #64]	; 0x40
 8003276:	4b20      	ldr	r3, [pc, #128]	; (80032f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003282:	4b1e      	ldr	r3, [pc, #120]	; (80032fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a1d      	ldr	r2, [pc, #116]	; (80032fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800328c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800328e:	f7fe f8d9 	bl	8001444 <HAL_GetTick>
 8003292:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003294:	e009      	b.n	80032aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003296:	f7fe f8d5 	bl	8001444 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032a4:	d901      	bls.n	80032aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e022      	b.n	80032f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032aa:	4b14      	ldr	r3, [pc, #80]	; (80032fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b6:	d1ee      	bne.n	8003296 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80032b8:	4b10      	ldr	r3, [pc, #64]	; (80032fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a0f      	ldr	r2, [pc, #60]	; (80032fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80032be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032c4:	f7fe f8be 	bl	8001444 <HAL_GetTick>
 80032c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032ca:	e009      	b.n	80032e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032cc:	f7fe f8ba 	bl	8001444 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032da:	d901      	bls.n	80032e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e007      	b.n	80032f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032e0:	4b06      	ldr	r3, [pc, #24]	; (80032fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032ec:	d1ee      	bne.n	80032cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40023800 	.word	0x40023800
 80032fc:	40007000 	.word	0x40007000

08003300 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003308:	2300      	movs	r3, #0
 800330a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e29b      	b.n	800384e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 8087 	beq.w	8003432 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003324:	4b96      	ldr	r3, [pc, #600]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 030c 	and.w	r3, r3, #12
 800332c:	2b04      	cmp	r3, #4
 800332e:	d00c      	beq.n	800334a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003330:	4b93      	ldr	r3, [pc, #588]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 030c 	and.w	r3, r3, #12
 8003338:	2b08      	cmp	r3, #8
 800333a:	d112      	bne.n	8003362 <HAL_RCC_OscConfig+0x62>
 800333c:	4b90      	ldr	r3, [pc, #576]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003344:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003348:	d10b      	bne.n	8003362 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800334a:	4b8d      	ldr	r3, [pc, #564]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d06c      	beq.n	8003430 <HAL_RCC_OscConfig+0x130>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d168      	bne.n	8003430 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e275      	b.n	800384e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336a:	d106      	bne.n	800337a <HAL_RCC_OscConfig+0x7a>
 800336c:	4b84      	ldr	r3, [pc, #528]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a83      	ldr	r2, [pc, #524]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 8003372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003376:	6013      	str	r3, [r2, #0]
 8003378:	e02e      	b.n	80033d8 <HAL_RCC_OscConfig+0xd8>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10c      	bne.n	800339c <HAL_RCC_OscConfig+0x9c>
 8003382:	4b7f      	ldr	r3, [pc, #508]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a7e      	ldr	r2, [pc, #504]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 8003388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	4b7c      	ldr	r3, [pc, #496]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a7b      	ldr	r2, [pc, #492]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 8003394:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	e01d      	b.n	80033d8 <HAL_RCC_OscConfig+0xd8>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033a4:	d10c      	bne.n	80033c0 <HAL_RCC_OscConfig+0xc0>
 80033a6:	4b76      	ldr	r3, [pc, #472]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a75      	ldr	r2, [pc, #468]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 80033ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	4b73      	ldr	r3, [pc, #460]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a72      	ldr	r2, [pc, #456]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 80033b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	e00b      	b.n	80033d8 <HAL_RCC_OscConfig+0xd8>
 80033c0:	4b6f      	ldr	r3, [pc, #444]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a6e      	ldr	r2, [pc, #440]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 80033c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ca:	6013      	str	r3, [r2, #0]
 80033cc:	4b6c      	ldr	r3, [pc, #432]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a6b      	ldr	r2, [pc, #428]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 80033d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d013      	beq.n	8003408 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e0:	f7fe f830 	bl	8001444 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e8:	f7fe f82c 	bl	8001444 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b64      	cmp	r3, #100	; 0x64
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e229      	b.n	800384e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fa:	4b61      	ldr	r3, [pc, #388]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0f0      	beq.n	80033e8 <HAL_RCC_OscConfig+0xe8>
 8003406:	e014      	b.n	8003432 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003408:	f7fe f81c 	bl	8001444 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003410:	f7fe f818 	bl	8001444 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b64      	cmp	r3, #100	; 0x64
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e215      	b.n	800384e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003422:	4b57      	ldr	r3, [pc, #348]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f0      	bne.n	8003410 <HAL_RCC_OscConfig+0x110>
 800342e:	e000      	b.n	8003432 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d069      	beq.n	8003512 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800343e:	4b50      	ldr	r3, [pc, #320]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 030c 	and.w	r3, r3, #12
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00b      	beq.n	8003462 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800344a:	4b4d      	ldr	r3, [pc, #308]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 030c 	and.w	r3, r3, #12
 8003452:	2b08      	cmp	r3, #8
 8003454:	d11c      	bne.n	8003490 <HAL_RCC_OscConfig+0x190>
 8003456:	4b4a      	ldr	r3, [pc, #296]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d116      	bne.n	8003490 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003462:	4b47      	ldr	r3, [pc, #284]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d005      	beq.n	800347a <HAL_RCC_OscConfig+0x17a>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d001      	beq.n	800347a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e1e9      	b.n	800384e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800347a:	4b41      	ldr	r3, [pc, #260]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	493d      	ldr	r1, [pc, #244]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 800348a:	4313      	orrs	r3, r2
 800348c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800348e:	e040      	b.n	8003512 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d023      	beq.n	80034e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003498:	4b39      	ldr	r3, [pc, #228]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a38      	ldr	r2, [pc, #224]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 800349e:	f043 0301 	orr.w	r3, r3, #1
 80034a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fd ffce 	bl	8001444 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ac:	f7fd ffca 	bl	8001444 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e1c7      	b.n	800384e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034be:	4b30      	ldr	r3, [pc, #192]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0f0      	beq.n	80034ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ca:	4b2d      	ldr	r3, [pc, #180]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4929      	ldr	r1, [pc, #164]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]
 80034de:	e018      	b.n	8003512 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034e0:	4b27      	ldr	r3, [pc, #156]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a26      	ldr	r2, [pc, #152]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 80034e6:	f023 0301 	bic.w	r3, r3, #1
 80034ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ec:	f7fd ffaa 	bl	8001444 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034f4:	f7fd ffa6 	bl	8001444 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e1a3      	b.n	800384e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003506:	4b1e      	ldr	r3, [pc, #120]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f0      	bne.n	80034f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	2b00      	cmp	r3, #0
 800351c:	d038      	beq.n	8003590 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d019      	beq.n	800355a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003526:	4b16      	ldr	r3, [pc, #88]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 8003528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800352a:	4a15      	ldr	r2, [pc, #84]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 800352c:	f043 0301 	orr.w	r3, r3, #1
 8003530:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003532:	f7fd ff87 	bl	8001444 <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003538:	e008      	b.n	800354c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800353a:	f7fd ff83 	bl	8001444 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e180      	b.n	800384e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800354c:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 800354e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0f0      	beq.n	800353a <HAL_RCC_OscConfig+0x23a>
 8003558:	e01a      	b.n	8003590 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800355a:	4b09      	ldr	r3, [pc, #36]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 800355c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355e:	4a08      	ldr	r2, [pc, #32]	; (8003580 <HAL_RCC_OscConfig+0x280>)
 8003560:	f023 0301 	bic.w	r3, r3, #1
 8003564:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003566:	f7fd ff6d 	bl	8001444 <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800356c:	e00a      	b.n	8003584 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800356e:	f7fd ff69 	bl	8001444 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d903      	bls.n	8003584 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e166      	b.n	800384e <HAL_RCC_OscConfig+0x54e>
 8003580:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003584:	4b92      	ldr	r3, [pc, #584]	; (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 8003586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1ee      	bne.n	800356e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 80a4 	beq.w	80036e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800359e:	4b8c      	ldr	r3, [pc, #560]	; (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10d      	bne.n	80035c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80035aa:	4b89      	ldr	r3, [pc, #548]	; (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	4a88      	ldr	r2, [pc, #544]	; (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 80035b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035b4:	6413      	str	r3, [r2, #64]	; 0x40
 80035b6:	4b86      	ldr	r3, [pc, #536]	; (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035be:	60bb      	str	r3, [r7, #8]
 80035c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035c2:	2301      	movs	r3, #1
 80035c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035c6:	4b83      	ldr	r3, [pc, #524]	; (80037d4 <HAL_RCC_OscConfig+0x4d4>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d118      	bne.n	8003604 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80035d2:	4b80      	ldr	r3, [pc, #512]	; (80037d4 <HAL_RCC_OscConfig+0x4d4>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a7f      	ldr	r2, [pc, #508]	; (80037d4 <HAL_RCC_OscConfig+0x4d4>)
 80035d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035de:	f7fd ff31 	bl	8001444 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e6:	f7fd ff2d 	bl	8001444 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b64      	cmp	r3, #100	; 0x64
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e12a      	b.n	800384e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035f8:	4b76      	ldr	r3, [pc, #472]	; (80037d4 <HAL_RCC_OscConfig+0x4d4>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0f0      	beq.n	80035e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d106      	bne.n	800361a <HAL_RCC_OscConfig+0x31a>
 800360c:	4b70      	ldr	r3, [pc, #448]	; (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 800360e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003610:	4a6f      	ldr	r2, [pc, #444]	; (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 8003612:	f043 0301 	orr.w	r3, r3, #1
 8003616:	6713      	str	r3, [r2, #112]	; 0x70
 8003618:	e02d      	b.n	8003676 <HAL_RCC_OscConfig+0x376>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10c      	bne.n	800363c <HAL_RCC_OscConfig+0x33c>
 8003622:	4b6b      	ldr	r3, [pc, #428]	; (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 8003624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003626:	4a6a      	ldr	r2, [pc, #424]	; (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	6713      	str	r3, [r2, #112]	; 0x70
 800362e:	4b68      	ldr	r3, [pc, #416]	; (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 8003630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003632:	4a67      	ldr	r2, [pc, #412]	; (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 8003634:	f023 0304 	bic.w	r3, r3, #4
 8003638:	6713      	str	r3, [r2, #112]	; 0x70
 800363a:	e01c      	b.n	8003676 <HAL_RCC_OscConfig+0x376>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2b05      	cmp	r3, #5
 8003642:	d10c      	bne.n	800365e <HAL_RCC_OscConfig+0x35e>
 8003644:	4b62      	ldr	r3, [pc, #392]	; (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 8003646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003648:	4a61      	ldr	r2, [pc, #388]	; (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 800364a:	f043 0304 	orr.w	r3, r3, #4
 800364e:	6713      	str	r3, [r2, #112]	; 0x70
 8003650:	4b5f      	ldr	r3, [pc, #380]	; (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 8003652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003654:	4a5e      	ldr	r2, [pc, #376]	; (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	6713      	str	r3, [r2, #112]	; 0x70
 800365c:	e00b      	b.n	8003676 <HAL_RCC_OscConfig+0x376>
 800365e:	4b5c      	ldr	r3, [pc, #368]	; (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 8003660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003662:	4a5b      	ldr	r2, [pc, #364]	; (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 8003664:	f023 0301 	bic.w	r3, r3, #1
 8003668:	6713      	str	r3, [r2, #112]	; 0x70
 800366a:	4b59      	ldr	r3, [pc, #356]	; (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 800366c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366e:	4a58      	ldr	r2, [pc, #352]	; (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 8003670:	f023 0304 	bic.w	r3, r3, #4
 8003674:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d015      	beq.n	80036aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367e:	f7fd fee1 	bl	8001444 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003684:	e00a      	b.n	800369c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003686:	f7fd fedd 	bl	8001444 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	f241 3288 	movw	r2, #5000	; 0x1388
 8003694:	4293      	cmp	r3, r2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e0d8      	b.n	800384e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369c:	4b4c      	ldr	r3, [pc, #304]	; (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 800369e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0ee      	beq.n	8003686 <HAL_RCC_OscConfig+0x386>
 80036a8:	e014      	b.n	80036d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036aa:	f7fd fecb 	bl	8001444 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b0:	e00a      	b.n	80036c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b2:	f7fd fec7 	bl	8001444 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e0c2      	b.n	800384e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c8:	4b41      	ldr	r3, [pc, #260]	; (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 80036ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1ee      	bne.n	80036b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d105      	bne.n	80036e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036da:	4b3d      	ldr	r3, [pc, #244]	; (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	4a3c      	ldr	r2, [pc, #240]	; (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 80036e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 80ae 	beq.w	800384c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036f0:	4b37      	ldr	r3, [pc, #220]	; (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 030c 	and.w	r3, r3, #12
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	d06d      	beq.n	80037d8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	2b02      	cmp	r3, #2
 8003702:	d14b      	bne.n	800379c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003704:	4b32      	ldr	r3, [pc, #200]	; (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a31      	ldr	r2, [pc, #196]	; (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 800370a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800370e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003710:	f7fd fe98 	bl	8001444 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003718:	f7fd fe94 	bl	8001444 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e091      	b.n	800384e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372a:	4b29      	ldr	r3, [pc, #164]	; (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1f0      	bne.n	8003718 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69da      	ldr	r2, [r3, #28]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	019b      	lsls	r3, r3, #6
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374c:	085b      	lsrs	r3, r3, #1
 800374e:	3b01      	subs	r3, #1
 8003750:	041b      	lsls	r3, r3, #16
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	061b      	lsls	r3, r3, #24
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003760:	071b      	lsls	r3, r3, #28
 8003762:	491b      	ldr	r1, [pc, #108]	; (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 8003764:	4313      	orrs	r3, r2
 8003766:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003768:	4b19      	ldr	r3, [pc, #100]	; (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a18      	ldr	r2, [pc, #96]	; (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 800376e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003774:	f7fd fe66 	bl	8001444 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800377c:	f7fd fe62 	bl	8001444 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e05f      	b.n	800384e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378e:	4b10      	ldr	r3, [pc, #64]	; (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x47c>
 800379a:	e057      	b.n	800384c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379c:	4b0c      	ldr	r3, [pc, #48]	; (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a0b      	ldr	r2, [pc, #44]	; (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 80037a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a8:	f7fd fe4c 	bl	8001444 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b0:	f7fd fe48 	bl	8001444 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e045      	b.n	800384e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c2:	4b03      	ldr	r3, [pc, #12]	; (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f0      	bne.n	80037b0 <HAL_RCC_OscConfig+0x4b0>
 80037ce:	e03d      	b.n	800384c <HAL_RCC_OscConfig+0x54c>
 80037d0:	40023800 	.word	0x40023800
 80037d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80037d8:	4b1f      	ldr	r3, [pc, #124]	; (8003858 <HAL_RCC_OscConfig+0x558>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d030      	beq.n	8003848 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d129      	bne.n	8003848 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fe:	429a      	cmp	r2, r3
 8003800:	d122      	bne.n	8003848 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003808:	4013      	ands	r3, r2
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800380e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003810:	4293      	cmp	r3, r2
 8003812:	d119      	bne.n	8003848 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381e:	085b      	lsrs	r3, r3, #1
 8003820:	3b01      	subs	r3, #1
 8003822:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003824:	429a      	cmp	r2, r3
 8003826:	d10f      	bne.n	8003848 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003832:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003834:	429a      	cmp	r2, r3
 8003836:	d107      	bne.n	8003848 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003844:	429a      	cmp	r2, r3
 8003846:	d001      	beq.n	800384c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e000      	b.n	800384e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40023800 	.word	0x40023800

0800385c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0d0      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003874:	4b6a      	ldr	r3, [pc, #424]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 030f 	and.w	r3, r3, #15
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d910      	bls.n	80038a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003882:	4b67      	ldr	r3, [pc, #412]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f023 020f 	bic.w	r2, r3, #15
 800388a:	4965      	ldr	r1, [pc, #404]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	4313      	orrs	r3, r2
 8003890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003892:	4b63      	ldr	r3, [pc, #396]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d001      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0b8      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d020      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038bc:	4b59      	ldr	r3, [pc, #356]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	4a58      	ldr	r2, [pc, #352]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80038c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038d4:	4b53      	ldr	r3, [pc, #332]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	4a52      	ldr	r2, [pc, #328]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80038da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e0:	4b50      	ldr	r3, [pc, #320]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	494d      	ldr	r1, [pc, #308]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d040      	beq.n	8003980 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d107      	bne.n	8003916 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003906:	4b47      	ldr	r3, [pc, #284]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d115      	bne.n	800393e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e07f      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b02      	cmp	r3, #2
 800391c:	d107      	bne.n	800392e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800391e:	4b41      	ldr	r3, [pc, #260]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e073      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800392e:	4b3d      	ldr	r3, [pc, #244]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e06b      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800393e:	4b39      	ldr	r3, [pc, #228]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f023 0203 	bic.w	r2, r3, #3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	4936      	ldr	r1, [pc, #216]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 800394c:	4313      	orrs	r3, r2
 800394e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003950:	f7fd fd78 	bl	8001444 <HAL_GetTick>
 8003954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003956:	e00a      	b.n	800396e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003958:	f7fd fd74 	bl	8001444 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f241 3288 	movw	r2, #5000	; 0x1388
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e053      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396e:	4b2d      	ldr	r3, [pc, #180]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 020c 	and.w	r2, r3, #12
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	429a      	cmp	r2, r3
 800397e:	d1eb      	bne.n	8003958 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003980:	4b27      	ldr	r3, [pc, #156]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 030f 	and.w	r3, r3, #15
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d210      	bcs.n	80039b0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398e:	4b24      	ldr	r3, [pc, #144]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f023 020f 	bic.w	r2, r3, #15
 8003996:	4922      	ldr	r1, [pc, #136]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	4313      	orrs	r3, r2
 800399c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800399e:	4b20      	ldr	r3, [pc, #128]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d001      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e032      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d008      	beq.n	80039ce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039bc:	4b19      	ldr	r3, [pc, #100]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	4916      	ldr	r1, [pc, #88]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d009      	beq.n	80039ee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039da:	4b12      	ldr	r3, [pc, #72]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	490e      	ldr	r1, [pc, #56]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039ee:	f000 f821 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 80039f2:	4602      	mov	r2, r0
 80039f4:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	490a      	ldr	r1, [pc, #40]	; (8003a28 <HAL_RCC_ClockConfig+0x1cc>)
 8003a00:	5ccb      	ldrb	r3, [r1, r3]
 8003a02:	fa22 f303 	lsr.w	r3, r2, r3
 8003a06:	4a09      	ldr	r2, [pc, #36]	; (8003a2c <HAL_RCC_ClockConfig+0x1d0>)
 8003a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a0a:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <HAL_RCC_ClockConfig+0x1d4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fd fb80 	bl	8001114 <HAL_InitTick>

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40023c00 	.word	0x40023c00
 8003a24:	40023800 	.word	0x40023800
 8003a28:	0800df10 	.word	0x0800df10
 8003a2c:	20000000 	.word	0x20000000
 8003a30:	20000004 	.word	0x20000004

08003a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a34:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003a38:	b084      	sub	sp, #16
 8003a3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	607b      	str	r3, [r7, #4]
 8003a40:	2300      	movs	r3, #0
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	2300      	movs	r3, #0
 8003a46:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a4c:	4b67      	ldr	r3, [pc, #412]	; (8003bec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 030c 	and.w	r3, r3, #12
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d00d      	beq.n	8003a74 <HAL_RCC_GetSysClockFreq+0x40>
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	f200 80bd 	bhi.w	8003bd8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <HAL_RCC_GetSysClockFreq+0x34>
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d003      	beq.n	8003a6e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a66:	e0b7      	b.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a68:	4b61      	ldr	r3, [pc, #388]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003a6a:	60bb      	str	r3, [r7, #8]
      break;
 8003a6c:	e0b7      	b.n	8003bde <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a6e:	4b61      	ldr	r3, [pc, #388]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003a70:	60bb      	str	r3, [r7, #8]
      break;
 8003a72:	e0b4      	b.n	8003bde <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a74:	4b5d      	ldr	r3, [pc, #372]	; (8003bec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a7c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a7e:	4b5b      	ldr	r3, [pc, #364]	; (8003bec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d04d      	beq.n	8003b26 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a8a:	4b58      	ldr	r3, [pc, #352]	; (8003bec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	099b      	lsrs	r3, r3, #6
 8003a90:	461a      	mov	r2, r3
 8003a92:	f04f 0300 	mov.w	r3, #0
 8003a96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a9a:	f04f 0100 	mov.w	r1, #0
 8003a9e:	ea02 0800 	and.w	r8, r2, r0
 8003aa2:	ea03 0901 	and.w	r9, r3, r1
 8003aa6:	4640      	mov	r0, r8
 8003aa8:	4649      	mov	r1, r9
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	f04f 0300 	mov.w	r3, #0
 8003ab2:	014b      	lsls	r3, r1, #5
 8003ab4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ab8:	0142      	lsls	r2, r0, #5
 8003aba:	4610      	mov	r0, r2
 8003abc:	4619      	mov	r1, r3
 8003abe:	ebb0 0008 	subs.w	r0, r0, r8
 8003ac2:	eb61 0109 	sbc.w	r1, r1, r9
 8003ac6:	f04f 0200 	mov.w	r2, #0
 8003aca:	f04f 0300 	mov.w	r3, #0
 8003ace:	018b      	lsls	r3, r1, #6
 8003ad0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ad4:	0182      	lsls	r2, r0, #6
 8003ad6:	1a12      	subs	r2, r2, r0
 8003ad8:	eb63 0301 	sbc.w	r3, r3, r1
 8003adc:	f04f 0000 	mov.w	r0, #0
 8003ae0:	f04f 0100 	mov.w	r1, #0
 8003ae4:	00d9      	lsls	r1, r3, #3
 8003ae6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003aea:	00d0      	lsls	r0, r2, #3
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	eb12 0208 	adds.w	r2, r2, r8
 8003af4:	eb43 0309 	adc.w	r3, r3, r9
 8003af8:	f04f 0000 	mov.w	r0, #0
 8003afc:	f04f 0100 	mov.w	r1, #0
 8003b00:	0259      	lsls	r1, r3, #9
 8003b02:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003b06:	0250      	lsls	r0, r2, #9
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	4619      	mov	r1, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	461a      	mov	r2, r3
 8003b14:	f04f 0300 	mov.w	r3, #0
 8003b18:	f7fc fbfa 	bl	8000310 <__aeabi_uldivmod>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	460b      	mov	r3, r1
 8003b20:	4613      	mov	r3, r2
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	e04a      	b.n	8003bbc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b26:	4b31      	ldr	r3, [pc, #196]	; (8003bec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	099b      	lsrs	r3, r3, #6
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	f04f 0300 	mov.w	r3, #0
 8003b32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b36:	f04f 0100 	mov.w	r1, #0
 8003b3a:	ea02 0400 	and.w	r4, r2, r0
 8003b3e:	ea03 0501 	and.w	r5, r3, r1
 8003b42:	4620      	mov	r0, r4
 8003b44:	4629      	mov	r1, r5
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	f04f 0300 	mov.w	r3, #0
 8003b4e:	014b      	lsls	r3, r1, #5
 8003b50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b54:	0142      	lsls	r2, r0, #5
 8003b56:	4610      	mov	r0, r2
 8003b58:	4619      	mov	r1, r3
 8003b5a:	1b00      	subs	r0, r0, r4
 8003b5c:	eb61 0105 	sbc.w	r1, r1, r5
 8003b60:	f04f 0200 	mov.w	r2, #0
 8003b64:	f04f 0300 	mov.w	r3, #0
 8003b68:	018b      	lsls	r3, r1, #6
 8003b6a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b6e:	0182      	lsls	r2, r0, #6
 8003b70:	1a12      	subs	r2, r2, r0
 8003b72:	eb63 0301 	sbc.w	r3, r3, r1
 8003b76:	f04f 0000 	mov.w	r0, #0
 8003b7a:	f04f 0100 	mov.w	r1, #0
 8003b7e:	00d9      	lsls	r1, r3, #3
 8003b80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b84:	00d0      	lsls	r0, r2, #3
 8003b86:	4602      	mov	r2, r0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	1912      	adds	r2, r2, r4
 8003b8c:	eb45 0303 	adc.w	r3, r5, r3
 8003b90:	f04f 0000 	mov.w	r0, #0
 8003b94:	f04f 0100 	mov.w	r1, #0
 8003b98:	0299      	lsls	r1, r3, #10
 8003b9a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003b9e:	0290      	lsls	r0, r2, #10
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	461a      	mov	r2, r3
 8003bac:	f04f 0300 	mov.w	r3, #0
 8003bb0:	f7fc fbae 	bl	8000310 <__aeabi_uldivmod>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	4613      	mov	r3, r2
 8003bba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003bbc:	4b0b      	ldr	r3, [pc, #44]	; (8003bec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	0c1b      	lsrs	r3, r3, #16
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd4:	60bb      	str	r3, [r7, #8]
      break;
 8003bd6:	e002      	b.n	8003bde <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bd8:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003bda:	60bb      	str	r3, [r7, #8]
      break;
 8003bdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bde:	68bb      	ldr	r3, [r7, #8]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003bea:	bf00      	nop
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	00f42400 	.word	0x00f42400
 8003bf4:	007a1200 	.word	0x007a1200

08003bf8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bfc:	4b03      	ldr	r3, [pc, #12]	; (8003c0c <HAL_RCC_GetHCLKFreq+0x14>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	20000000 	.word	0x20000000

08003c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c14:	f7ff fff0 	bl	8003bf8 <HAL_RCC_GetHCLKFreq>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	0a9b      	lsrs	r3, r3, #10
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	4903      	ldr	r1, [pc, #12]	; (8003c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c26:	5ccb      	ldrb	r3, [r1, r3]
 8003c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40023800 	.word	0x40023800
 8003c34:	0800df20 	.word	0x0800df20

08003c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c3c:	f7ff ffdc 	bl	8003bf8 <HAL_RCC_GetHCLKFreq>
 8003c40:	4602      	mov	r2, r0
 8003c42:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	0b5b      	lsrs	r3, r3, #13
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	4903      	ldr	r1, [pc, #12]	; (8003c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c4e:	5ccb      	ldrb	r3, [r1, r3]
 8003c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	0800df20 	.word	0x0800df20

08003c60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	220f      	movs	r2, #15
 8003c6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c70:	4b12      	ldr	r3, [pc, #72]	; (8003cbc <HAL_RCC_GetClockConfig+0x5c>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 0203 	and.w	r2, r3, #3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c7c:	4b0f      	ldr	r3, [pc, #60]	; (8003cbc <HAL_RCC_GetClockConfig+0x5c>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c88:	4b0c      	ldr	r3, [pc, #48]	; (8003cbc <HAL_RCC_GetClockConfig+0x5c>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003c94:	4b09      	ldr	r3, [pc, #36]	; (8003cbc <HAL_RCC_GetClockConfig+0x5c>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	08db      	lsrs	r3, r3, #3
 8003c9a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ca2:	4b07      	ldr	r3, [pc, #28]	; (8003cc0 <HAL_RCC_GetClockConfig+0x60>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 020f 	and.w	r2, r3, #15
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	601a      	str	r2, [r3, #0]
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	40023c00 	.word	0x40023c00

08003cc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b088      	sub	sp, #32
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d012      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cec:	4b69      	ldr	r3, [pc, #420]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	4a68      	ldr	r2, [pc, #416]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003cf6:	6093      	str	r3, [r2, #8]
 8003cf8:	4b66      	ldr	r3, [pc, #408]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d00:	4964      	ldr	r1, [pc, #400]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d017      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d1e:	4b5d      	ldr	r3, [pc, #372]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2c:	4959      	ldr	r1, [pc, #356]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d3c:	d101      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d017      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d5a:	4b4e      	ldr	r3, [pc, #312]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d68:	494a      	ldr	r1, [pc, #296]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d78:	d101      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003d86:	2301      	movs	r3, #1
 8003d88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003d96:	2301      	movs	r3, #1
 8003d98:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0320 	and.w	r3, r3, #32
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 808b 	beq.w	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003da8:	4b3a      	ldr	r3, [pc, #232]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	4a39      	ldr	r2, [pc, #228]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db2:	6413      	str	r3, [r2, #64]	; 0x40
 8003db4:	4b37      	ldr	r3, [pc, #220]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dbc:	60bb      	str	r3, [r7, #8]
 8003dbe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003dc0:	4b35      	ldr	r3, [pc, #212]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a34      	ldr	r2, [pc, #208]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dcc:	f7fd fb3a 	bl	8001444 <HAL_GetTick>
 8003dd0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd4:	f7fd fb36 	bl	8001444 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b64      	cmp	r3, #100	; 0x64
 8003de0:	d901      	bls.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e38f      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003de6:	4b2c      	ldr	r3, [pc, #176]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0f0      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003df2:	4b28      	ldr	r3, [pc, #160]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d035      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d02e      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e10:	4b20      	ldr	r3, [pc, #128]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e18:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e1a:	4b1e      	ldr	r3, [pc, #120]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1e:	4a1d      	ldr	r2, [pc, #116]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e24:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e26:	4b1b      	ldr	r3, [pc, #108]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2a:	4a1a      	ldr	r2, [pc, #104]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e30:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003e32:	4a18      	ldr	r2, [pc, #96]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e38:	4b16      	ldr	r3, [pc, #88]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d114      	bne.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e44:	f7fd fafe 	bl	8001444 <HAL_GetTick>
 8003e48:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e4a:	e00a      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e4c:	f7fd fafa 	bl	8001444 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e351      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e62:	4b0c      	ldr	r3, [pc, #48]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0ee      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e7a:	d111      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003e7c:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e88:	4b04      	ldr	r3, [pc, #16]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e8a:	400b      	ands	r3, r1
 8003e8c:	4901      	ldr	r1, [pc, #4]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	608b      	str	r3, [r1, #8]
 8003e92:	e00b      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003e94:	40023800 	.word	0x40023800
 8003e98:	40007000 	.word	0x40007000
 8003e9c:	0ffffcff 	.word	0x0ffffcff
 8003ea0:	4bb3      	ldr	r3, [pc, #716]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	4ab2      	ldr	r2, [pc, #712]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ea6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003eaa:	6093      	str	r3, [r2, #8]
 8003eac:	4bb0      	ldr	r3, [pc, #704]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb8:	49ad      	ldr	r1, [pc, #692]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0310 	and.w	r3, r3, #16
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d010      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003eca:	4ba9      	ldr	r3, [pc, #676]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ed0:	4aa7      	ldr	r2, [pc, #668]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ed2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ed6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003eda:	4ba5      	ldr	r3, [pc, #660]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003edc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee4:	49a2      	ldr	r1, [pc, #648]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00a      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ef8:	4b9d      	ldr	r3, [pc, #628]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f06:	499a      	ldr	r1, [pc, #616]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00a      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f1a:	4b95      	ldr	r3, [pc, #596]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f28:	4991      	ldr	r1, [pc, #580]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00a      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f3c:	4b8c      	ldr	r3, [pc, #560]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f4a:	4989      	ldr	r1, [pc, #548]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f5e:	4b84      	ldr	r3, [pc, #528]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6c:	4980      	ldr	r1, [pc, #512]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00a      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f80:	4b7b      	ldr	r3, [pc, #492]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f86:	f023 0203 	bic.w	r2, r3, #3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8e:	4978      	ldr	r1, [pc, #480]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00a      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fa2:	4b73      	ldr	r3, [pc, #460]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa8:	f023 020c 	bic.w	r2, r3, #12
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fb0:	496f      	ldr	r1, [pc, #444]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00a      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fc4:	4b6a      	ldr	r3, [pc, #424]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd2:	4967      	ldr	r1, [pc, #412]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00a      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fe6:	4b62      	ldr	r3, [pc, #392]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff4:	495e      	ldr	r1, [pc, #376]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00a      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004008:	4b59      	ldr	r3, [pc, #356]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800400a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004016:	4956      	ldr	r1, [pc, #344]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004018:	4313      	orrs	r3, r2
 800401a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800402a:	4b51      	ldr	r3, [pc, #324]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800402c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004030:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004038:	494d      	ldr	r1, [pc, #308]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00a      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800404c:	4b48      	ldr	r3, [pc, #288]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800404e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004052:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405a:	4945      	ldr	r1, [pc, #276]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00a      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800406e:	4b40      	ldr	r3, [pc, #256]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004074:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800407c:	493c      	ldr	r1, [pc, #240]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00a      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004090:	4b37      	ldr	r3, [pc, #220]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004096:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800409e:	4934      	ldr	r1, [pc, #208]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d011      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80040b2:	4b2f      	ldr	r3, [pc, #188]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040c0:	492b      	ldr	r1, [pc, #172]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040d0:	d101      	bne.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80040d2:	2301      	movs	r3, #1
 80040d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0308 	and.w	r3, r3, #8
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80040e2:	2301      	movs	r3, #1
 80040e4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00a      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040f2:	4b1f      	ldr	r3, [pc, #124]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004100:	491b      	ldr	r1, [pc, #108]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00b      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004114:	4b16      	ldr	r3, [pc, #88]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004124:	4912      	ldr	r1, [pc, #72]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00b      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004138:	4b0d      	ldr	r3, [pc, #52]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800413a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004148:	4909      	ldr	r1, [pc, #36]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00f      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800415c:	4b04      	ldr	r3, [pc, #16]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800415e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004162:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416c:	e002      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800416e:	bf00      	nop
 8004170:	40023800 	.word	0x40023800
 8004174:	4986      	ldr	r1, [pc, #536]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004176:	4313      	orrs	r3, r2
 8004178:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00b      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004188:	4b81      	ldr	r3, [pc, #516]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800418a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800418e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004198:	497d      	ldr	r1, [pc, #500]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800419a:	4313      	orrs	r3, r2
 800419c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d006      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 80d6 	beq.w	8004360 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041b4:	4b76      	ldr	r3, [pc, #472]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a75      	ldr	r2, [pc, #468]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041c0:	f7fd f940 	bl	8001444 <HAL_GetTick>
 80041c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041c6:	e008      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041c8:	f7fd f93c 	bl	8001444 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b64      	cmp	r3, #100	; 0x64
 80041d4:	d901      	bls.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e195      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041da:	4b6d      	ldr	r3, [pc, #436]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1f0      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d021      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d11d      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041fa:	4b65      	ldr	r3, [pc, #404]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004200:	0c1b      	lsrs	r3, r3, #16
 8004202:	f003 0303 	and.w	r3, r3, #3
 8004206:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004208:	4b61      	ldr	r3, [pc, #388]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800420a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800420e:	0e1b      	lsrs	r3, r3, #24
 8004210:	f003 030f 	and.w	r3, r3, #15
 8004214:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	019a      	lsls	r2, r3, #6
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	041b      	lsls	r3, r3, #16
 8004220:	431a      	orrs	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	061b      	lsls	r3, r3, #24
 8004226:	431a      	orrs	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	071b      	lsls	r3, r3, #28
 800422e:	4958      	ldr	r1, [pc, #352]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004230:	4313      	orrs	r3, r2
 8004232:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d004      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004246:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800424a:	d00a      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004254:	2b00      	cmp	r3, #0
 8004256:	d02e      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004260:	d129      	bne.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004262:	4b4b      	ldr	r3, [pc, #300]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004268:	0c1b      	lsrs	r3, r3, #16
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004270:	4b47      	ldr	r3, [pc, #284]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004276:	0f1b      	lsrs	r3, r3, #28
 8004278:	f003 0307 	and.w	r3, r3, #7
 800427c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	019a      	lsls	r2, r3, #6
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	041b      	lsls	r3, r3, #16
 8004288:	431a      	orrs	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	061b      	lsls	r3, r3, #24
 8004290:	431a      	orrs	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	071b      	lsls	r3, r3, #28
 8004296:	493e      	ldr	r1, [pc, #248]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004298:	4313      	orrs	r3, r2
 800429a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800429e:	4b3c      	ldr	r3, [pc, #240]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042a4:	f023 021f 	bic.w	r2, r3, #31
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	3b01      	subs	r3, #1
 80042ae:	4938      	ldr	r1, [pc, #224]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d01d      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042c2:	4b33      	ldr	r3, [pc, #204]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c8:	0e1b      	lsrs	r3, r3, #24
 80042ca:	f003 030f 	and.w	r3, r3, #15
 80042ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042d0:	4b2f      	ldr	r3, [pc, #188]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042d6:	0f1b      	lsrs	r3, r3, #28
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	019a      	lsls	r2, r3, #6
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	041b      	lsls	r3, r3, #16
 80042ea:	431a      	orrs	r2, r3
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	061b      	lsls	r3, r3, #24
 80042f0:	431a      	orrs	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	071b      	lsls	r3, r3, #28
 80042f6:	4926      	ldr	r1, [pc, #152]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d011      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	019a      	lsls	r2, r3, #6
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	041b      	lsls	r3, r3, #16
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	061b      	lsls	r3, r3, #24
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	071b      	lsls	r3, r3, #28
 8004326:	491a      	ldr	r1, [pc, #104]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004328:	4313      	orrs	r3, r2
 800432a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800432e:	4b18      	ldr	r3, [pc, #96]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a17      	ldr	r2, [pc, #92]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004334:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004338:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800433a:	f7fd f883 	bl	8001444 <HAL_GetTick>
 800433e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004340:	e008      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004342:	f7fd f87f 	bl	8001444 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b64      	cmp	r3, #100	; 0x64
 800434e:	d901      	bls.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e0d8      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004354:	4b0e      	ldr	r3, [pc, #56]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0f0      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	2b01      	cmp	r3, #1
 8004364:	f040 80ce 	bne.w	8004504 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004368:	4b09      	ldr	r3, [pc, #36]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a08      	ldr	r2, [pc, #32]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800436e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004372:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004374:	f7fd f866 	bl	8001444 <HAL_GetTick>
 8004378:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800437a:	e00b      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800437c:	f7fd f862 	bl	8001444 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b64      	cmp	r3, #100	; 0x64
 8004388:	d904      	bls.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e0bb      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800438e:	bf00      	nop
 8004390:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004394:	4b5e      	ldr	r3, [pc, #376]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800439c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043a0:	d0ec      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d009      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d02e      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d12a      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043ca:	4b51      	ldr	r3, [pc, #324]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d0:	0c1b      	lsrs	r3, r3, #16
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043d8:	4b4d      	ldr	r3, [pc, #308]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043de:	0f1b      	lsrs	r3, r3, #28
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	019a      	lsls	r2, r3, #6
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	041b      	lsls	r3, r3, #16
 80043f0:	431a      	orrs	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	061b      	lsls	r3, r3, #24
 80043f8:	431a      	orrs	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	071b      	lsls	r3, r3, #28
 80043fe:	4944      	ldr	r1, [pc, #272]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004400:	4313      	orrs	r3, r2
 8004402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004406:	4b42      	ldr	r3, [pc, #264]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800440c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004414:	3b01      	subs	r3, #1
 8004416:	021b      	lsls	r3, r3, #8
 8004418:	493d      	ldr	r1, [pc, #244]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d022      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004430:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004434:	d11d      	bne.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004436:	4b36      	ldr	r3, [pc, #216]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443c:	0e1b      	lsrs	r3, r3, #24
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004444:	4b32      	ldr	r3, [pc, #200]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444a:	0f1b      	lsrs	r3, r3, #28
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	019a      	lsls	r2, r3, #6
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	041b      	lsls	r3, r3, #16
 800445e:	431a      	orrs	r2, r3
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	061b      	lsls	r3, r3, #24
 8004464:	431a      	orrs	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	071b      	lsls	r3, r3, #28
 800446a:	4929      	ldr	r1, [pc, #164]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800446c:	4313      	orrs	r3, r2
 800446e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	2b00      	cmp	r3, #0
 800447c:	d028      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800447e:	4b24      	ldr	r3, [pc, #144]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004484:	0e1b      	lsrs	r3, r3, #24
 8004486:	f003 030f 	and.w	r3, r3, #15
 800448a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800448c:	4b20      	ldr	r3, [pc, #128]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800448e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004492:	0c1b      	lsrs	r3, r3, #16
 8004494:	f003 0303 	and.w	r3, r3, #3
 8004498:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	019a      	lsls	r2, r3, #6
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	041b      	lsls	r3, r3, #16
 80044a4:	431a      	orrs	r2, r3
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	061b      	lsls	r3, r3, #24
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	071b      	lsls	r3, r3, #28
 80044b2:	4917      	ldr	r1, [pc, #92]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80044ba:	4b15      	ldr	r3, [pc, #84]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c8:	4911      	ldr	r1, [pc, #68]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80044d0:	4b0f      	ldr	r3, [pc, #60]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a0e      	ldr	r2, [pc, #56]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044dc:	f7fc ffb2 	bl	8001444 <HAL_GetTick>
 80044e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044e4:	f7fc ffae 	bl	8001444 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b64      	cmp	r3, #100	; 0x64
 80044f0:	d901      	bls.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e007      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044f6:	4b06      	ldr	r3, [pc, #24]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004502:	d1ef      	bne.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3720      	adds	r7, #32
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	40023800 	.word	0x40023800

08004514 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e049      	b.n	80045ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d106      	bne.n	8004540 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f841 	bl	80045c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3304      	adds	r3, #4
 8004550:	4619      	mov	r1, r3
 8004552:	4610      	mov	r0, r2
 8004554:	f000 fa00 	bl	8004958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80045ca:	bf00      	nop
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
	...

080045d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d001      	beq.n	80045f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e054      	b.n	800469a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0201 	orr.w	r2, r2, #1
 8004606:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a26      	ldr	r2, [pc, #152]	; (80046a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d022      	beq.n	8004658 <HAL_TIM_Base_Start_IT+0x80>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800461a:	d01d      	beq.n	8004658 <HAL_TIM_Base_Start_IT+0x80>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a22      	ldr	r2, [pc, #136]	; (80046ac <HAL_TIM_Base_Start_IT+0xd4>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d018      	beq.n	8004658 <HAL_TIM_Base_Start_IT+0x80>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a21      	ldr	r2, [pc, #132]	; (80046b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d013      	beq.n	8004658 <HAL_TIM_Base_Start_IT+0x80>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a1f      	ldr	r2, [pc, #124]	; (80046b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d00e      	beq.n	8004658 <HAL_TIM_Base_Start_IT+0x80>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a1e      	ldr	r2, [pc, #120]	; (80046b8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d009      	beq.n	8004658 <HAL_TIM_Base_Start_IT+0x80>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a1c      	ldr	r2, [pc, #112]	; (80046bc <HAL_TIM_Base_Start_IT+0xe4>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d004      	beq.n	8004658 <HAL_TIM_Base_Start_IT+0x80>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a1b      	ldr	r2, [pc, #108]	; (80046c0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d115      	bne.n	8004684 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689a      	ldr	r2, [r3, #8]
 800465e:	4b19      	ldr	r3, [pc, #100]	; (80046c4 <HAL_TIM_Base_Start_IT+0xec>)
 8004660:	4013      	ands	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b06      	cmp	r3, #6
 8004668:	d015      	beq.n	8004696 <HAL_TIM_Base_Start_IT+0xbe>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004670:	d011      	beq.n	8004696 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f042 0201 	orr.w	r2, r2, #1
 8004680:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004682:	e008      	b.n	8004696 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0201 	orr.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	e000      	b.n	8004698 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004696:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	40010000 	.word	0x40010000
 80046ac:	40000400 	.word	0x40000400
 80046b0:	40000800 	.word	0x40000800
 80046b4:	40000c00 	.word	0x40000c00
 80046b8:	40010400 	.word	0x40010400
 80046bc:	40014000 	.word	0x40014000
 80046c0:	40001800 	.word	0x40001800
 80046c4:	00010007 	.word	0x00010007

080046c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d122      	bne.n	8004724 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d11b      	bne.n	8004724 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f06f 0202 	mvn.w	r2, #2
 80046f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f905 	bl	800491a <HAL_TIM_IC_CaptureCallback>
 8004710:	e005      	b.n	800471e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f8f7 	bl	8004906 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 f908 	bl	800492e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	f003 0304 	and.w	r3, r3, #4
 800472e:	2b04      	cmp	r3, #4
 8004730:	d122      	bne.n	8004778 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b04      	cmp	r3, #4
 800473e:	d11b      	bne.n	8004778 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f06f 0204 	mvn.w	r2, #4
 8004748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2202      	movs	r2, #2
 800474e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f8db 	bl	800491a <HAL_TIM_IC_CaptureCallback>
 8004764:	e005      	b.n	8004772 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f8cd 	bl	8004906 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f8de 	bl	800492e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	f003 0308 	and.w	r3, r3, #8
 8004782:	2b08      	cmp	r3, #8
 8004784:	d122      	bne.n	80047cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	2b08      	cmp	r3, #8
 8004792:	d11b      	bne.n	80047cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f06f 0208 	mvn.w	r2, #8
 800479c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2204      	movs	r2, #4
 80047a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f8b1 	bl	800491a <HAL_TIM_IC_CaptureCallback>
 80047b8:	e005      	b.n	80047c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f8a3 	bl	8004906 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f8b4 	bl	800492e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f003 0310 	and.w	r3, r3, #16
 80047d6:	2b10      	cmp	r3, #16
 80047d8:	d122      	bne.n	8004820 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f003 0310 	and.w	r3, r3, #16
 80047e4:	2b10      	cmp	r3, #16
 80047e6:	d11b      	bne.n	8004820 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f06f 0210 	mvn.w	r2, #16
 80047f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2208      	movs	r2, #8
 80047f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f887 	bl	800491a <HAL_TIM_IC_CaptureCallback>
 800480c:	e005      	b.n	800481a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f879 	bl	8004906 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f88a 	bl	800492e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b01      	cmp	r3, #1
 800482c:	d10e      	bne.n	800484c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b01      	cmp	r3, #1
 800483a:	d107      	bne.n	800484c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f06f 0201 	mvn.w	r2, #1
 8004844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7fc fbc8 	bl	8000fdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004856:	2b80      	cmp	r3, #128	; 0x80
 8004858:	d10e      	bne.n	8004878 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004864:	2b80      	cmp	r3, #128	; 0x80
 8004866:	d107      	bne.n	8004878 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f91a 	bl	8004aac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004886:	d10e      	bne.n	80048a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004892:	2b80      	cmp	r3, #128	; 0x80
 8004894:	d107      	bne.n	80048a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800489e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f90d 	bl	8004ac0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b0:	2b40      	cmp	r3, #64	; 0x40
 80048b2:	d10e      	bne.n	80048d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048be:	2b40      	cmp	r3, #64	; 0x40
 80048c0:	d107      	bne.n	80048d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f838 	bl	8004942 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	f003 0320 	and.w	r3, r3, #32
 80048dc:	2b20      	cmp	r3, #32
 80048de:	d10e      	bne.n	80048fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	f003 0320 	and.w	r3, r3, #32
 80048ea:	2b20      	cmp	r3, #32
 80048ec:	d107      	bne.n	80048fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f06f 0220 	mvn.w	r2, #32
 80048f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f8cd 	bl	8004a98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048fe:	bf00      	nop
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800490e:	bf00      	nop
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
	...

08004958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a40      	ldr	r2, [pc, #256]	; (8004a6c <TIM_Base_SetConfig+0x114>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d013      	beq.n	8004998 <TIM_Base_SetConfig+0x40>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004976:	d00f      	beq.n	8004998 <TIM_Base_SetConfig+0x40>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a3d      	ldr	r2, [pc, #244]	; (8004a70 <TIM_Base_SetConfig+0x118>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d00b      	beq.n	8004998 <TIM_Base_SetConfig+0x40>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a3c      	ldr	r2, [pc, #240]	; (8004a74 <TIM_Base_SetConfig+0x11c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d007      	beq.n	8004998 <TIM_Base_SetConfig+0x40>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a3b      	ldr	r2, [pc, #236]	; (8004a78 <TIM_Base_SetConfig+0x120>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d003      	beq.n	8004998 <TIM_Base_SetConfig+0x40>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a3a      	ldr	r2, [pc, #232]	; (8004a7c <TIM_Base_SetConfig+0x124>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d108      	bne.n	80049aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a2f      	ldr	r2, [pc, #188]	; (8004a6c <TIM_Base_SetConfig+0x114>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d02b      	beq.n	8004a0a <TIM_Base_SetConfig+0xb2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b8:	d027      	beq.n	8004a0a <TIM_Base_SetConfig+0xb2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a2c      	ldr	r2, [pc, #176]	; (8004a70 <TIM_Base_SetConfig+0x118>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d023      	beq.n	8004a0a <TIM_Base_SetConfig+0xb2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a2b      	ldr	r2, [pc, #172]	; (8004a74 <TIM_Base_SetConfig+0x11c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d01f      	beq.n	8004a0a <TIM_Base_SetConfig+0xb2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a2a      	ldr	r2, [pc, #168]	; (8004a78 <TIM_Base_SetConfig+0x120>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d01b      	beq.n	8004a0a <TIM_Base_SetConfig+0xb2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a29      	ldr	r2, [pc, #164]	; (8004a7c <TIM_Base_SetConfig+0x124>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d017      	beq.n	8004a0a <TIM_Base_SetConfig+0xb2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a28      	ldr	r2, [pc, #160]	; (8004a80 <TIM_Base_SetConfig+0x128>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d013      	beq.n	8004a0a <TIM_Base_SetConfig+0xb2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a27      	ldr	r2, [pc, #156]	; (8004a84 <TIM_Base_SetConfig+0x12c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d00f      	beq.n	8004a0a <TIM_Base_SetConfig+0xb2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a26      	ldr	r2, [pc, #152]	; (8004a88 <TIM_Base_SetConfig+0x130>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d00b      	beq.n	8004a0a <TIM_Base_SetConfig+0xb2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a25      	ldr	r2, [pc, #148]	; (8004a8c <TIM_Base_SetConfig+0x134>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d007      	beq.n	8004a0a <TIM_Base_SetConfig+0xb2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a24      	ldr	r2, [pc, #144]	; (8004a90 <TIM_Base_SetConfig+0x138>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d003      	beq.n	8004a0a <TIM_Base_SetConfig+0xb2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a23      	ldr	r2, [pc, #140]	; (8004a94 <TIM_Base_SetConfig+0x13c>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d108      	bne.n	8004a1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a0a      	ldr	r2, [pc, #40]	; (8004a6c <TIM_Base_SetConfig+0x114>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d003      	beq.n	8004a50 <TIM_Base_SetConfig+0xf8>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a0c      	ldr	r2, [pc, #48]	; (8004a7c <TIM_Base_SetConfig+0x124>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d103      	bne.n	8004a58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	691a      	ldr	r2, [r3, #16]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	615a      	str	r2, [r3, #20]
}
 8004a5e:	bf00      	nop
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	40010000 	.word	0x40010000
 8004a70:	40000400 	.word	0x40000400
 8004a74:	40000800 	.word	0x40000800
 8004a78:	40000c00 	.word	0x40000c00
 8004a7c:	40010400 	.word	0x40010400
 8004a80:	40014000 	.word	0x40014000
 8004a84:	40014400 	.word	0x40014400
 8004a88:	40014800 	.word	0x40014800
 8004a8c:	40001800 	.word	0x40001800
 8004a90:	40001c00 	.word	0x40001c00
 8004a94:	40002000 	.word	0x40002000

08004a98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e040      	b.n	8004b68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d106      	bne.n	8004afc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7fc faac 	bl	8001054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2224      	movs	r2, #36	; 0x24
 8004b00:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0201 	bic.w	r2, r2, #1
 8004b10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f8c0 	bl	8004c98 <UART_SetConfig>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d101      	bne.n	8004b22 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e022      	b.n	8004b68 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d002      	beq.n	8004b30 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 fb16 	bl	800515c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f042 0201 	orr.w	r2, r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 fb9d 	bl	80052a0 <UART_CheckIdleState>
 8004b66:	4603      	mov	r3, r0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b08a      	sub	sp, #40	; 0x28
 8004b74:	af02      	add	r7, sp, #8
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	603b      	str	r3, [r7, #0]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b84:	2b20      	cmp	r3, #32
 8004b86:	f040 8081 	bne.w	8004c8c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <HAL_UART_Transmit+0x26>
 8004b90:	88fb      	ldrh	r3, [r7, #6]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e079      	b.n	8004c8e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_UART_Transmit+0x38>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e072      	b.n	8004c8e <HAL_UART_Transmit+0x11e>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2221      	movs	r2, #33	; 0x21
 8004bbc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bbe:	f7fc fc41 	bl	8001444 <HAL_GetTick>
 8004bc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	88fa      	ldrh	r2, [r7, #6]
 8004bc8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	88fa      	ldrh	r2, [r7, #6]
 8004bd0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bdc:	d108      	bne.n	8004bf0 <HAL_UART_Transmit+0x80>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d104      	bne.n	8004bf0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004be6:	2300      	movs	r3, #0
 8004be8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	61bb      	str	r3, [r7, #24]
 8004bee:	e003      	b.n	8004bf8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004c00:	e02c      	b.n	8004c5c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	2180      	movs	r1, #128	; 0x80
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 fb90 	bl	8005332 <UART_WaitOnFlagUntilTimeout>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d001      	beq.n	8004c1c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e038      	b.n	8004c8e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10b      	bne.n	8004c3a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c30:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	3302      	adds	r3, #2
 8004c36:	61bb      	str	r3, [r7, #24]
 8004c38:	e007      	b.n	8004c4a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	781a      	ldrb	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	3301      	adds	r3, #1
 8004c48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1cc      	bne.n	8004c02 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	2140      	movs	r1, #64	; 0x40
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 fb5d 	bl	8005332 <UART_WaitOnFlagUntilTimeout>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e005      	b.n	8004c8e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2220      	movs	r2, #32
 8004c86:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	e000      	b.n	8004c8e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004c8c:	2302      	movs	r3, #2
  }
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3720      	adds	r7, #32
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
	...

08004c98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689a      	ldr	r2, [r3, #8]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	431a      	orrs	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	4ba7      	ldr	r3, [pc, #668]	; (8004f60 <UART_SetConfig+0x2c8>)
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6812      	ldr	r2, [r2, #0]
 8004cca:	6979      	ldr	r1, [r7, #20]
 8004ccc:	430b      	orrs	r3, r1
 8004cce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68da      	ldr	r2, [r3, #12]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a95      	ldr	r2, [pc, #596]	; (8004f64 <UART_SetConfig+0x2cc>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d120      	bne.n	8004d56 <UART_SetConfig+0xbe>
 8004d14:	4b94      	ldr	r3, [pc, #592]	; (8004f68 <UART_SetConfig+0x2d0>)
 8004d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1a:	f003 0303 	and.w	r3, r3, #3
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	d816      	bhi.n	8004d50 <UART_SetConfig+0xb8>
 8004d22:	a201      	add	r2, pc, #4	; (adr r2, 8004d28 <UART_SetConfig+0x90>)
 8004d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d28:	08004d39 	.word	0x08004d39
 8004d2c:	08004d45 	.word	0x08004d45
 8004d30:	08004d3f 	.word	0x08004d3f
 8004d34:	08004d4b 	.word	0x08004d4b
 8004d38:	2301      	movs	r3, #1
 8004d3a:	77fb      	strb	r3, [r7, #31]
 8004d3c:	e14f      	b.n	8004fde <UART_SetConfig+0x346>
 8004d3e:	2302      	movs	r3, #2
 8004d40:	77fb      	strb	r3, [r7, #31]
 8004d42:	e14c      	b.n	8004fde <UART_SetConfig+0x346>
 8004d44:	2304      	movs	r3, #4
 8004d46:	77fb      	strb	r3, [r7, #31]
 8004d48:	e149      	b.n	8004fde <UART_SetConfig+0x346>
 8004d4a:	2308      	movs	r3, #8
 8004d4c:	77fb      	strb	r3, [r7, #31]
 8004d4e:	e146      	b.n	8004fde <UART_SetConfig+0x346>
 8004d50:	2310      	movs	r3, #16
 8004d52:	77fb      	strb	r3, [r7, #31]
 8004d54:	e143      	b.n	8004fde <UART_SetConfig+0x346>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a84      	ldr	r2, [pc, #528]	; (8004f6c <UART_SetConfig+0x2d4>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d132      	bne.n	8004dc6 <UART_SetConfig+0x12e>
 8004d60:	4b81      	ldr	r3, [pc, #516]	; (8004f68 <UART_SetConfig+0x2d0>)
 8004d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d66:	f003 030c 	and.w	r3, r3, #12
 8004d6a:	2b0c      	cmp	r3, #12
 8004d6c:	d828      	bhi.n	8004dc0 <UART_SetConfig+0x128>
 8004d6e:	a201      	add	r2, pc, #4	; (adr r2, 8004d74 <UART_SetConfig+0xdc>)
 8004d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d74:	08004da9 	.word	0x08004da9
 8004d78:	08004dc1 	.word	0x08004dc1
 8004d7c:	08004dc1 	.word	0x08004dc1
 8004d80:	08004dc1 	.word	0x08004dc1
 8004d84:	08004db5 	.word	0x08004db5
 8004d88:	08004dc1 	.word	0x08004dc1
 8004d8c:	08004dc1 	.word	0x08004dc1
 8004d90:	08004dc1 	.word	0x08004dc1
 8004d94:	08004daf 	.word	0x08004daf
 8004d98:	08004dc1 	.word	0x08004dc1
 8004d9c:	08004dc1 	.word	0x08004dc1
 8004da0:	08004dc1 	.word	0x08004dc1
 8004da4:	08004dbb 	.word	0x08004dbb
 8004da8:	2300      	movs	r3, #0
 8004daa:	77fb      	strb	r3, [r7, #31]
 8004dac:	e117      	b.n	8004fde <UART_SetConfig+0x346>
 8004dae:	2302      	movs	r3, #2
 8004db0:	77fb      	strb	r3, [r7, #31]
 8004db2:	e114      	b.n	8004fde <UART_SetConfig+0x346>
 8004db4:	2304      	movs	r3, #4
 8004db6:	77fb      	strb	r3, [r7, #31]
 8004db8:	e111      	b.n	8004fde <UART_SetConfig+0x346>
 8004dba:	2308      	movs	r3, #8
 8004dbc:	77fb      	strb	r3, [r7, #31]
 8004dbe:	e10e      	b.n	8004fde <UART_SetConfig+0x346>
 8004dc0:	2310      	movs	r3, #16
 8004dc2:	77fb      	strb	r3, [r7, #31]
 8004dc4:	e10b      	b.n	8004fde <UART_SetConfig+0x346>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a69      	ldr	r2, [pc, #420]	; (8004f70 <UART_SetConfig+0x2d8>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d120      	bne.n	8004e12 <UART_SetConfig+0x17a>
 8004dd0:	4b65      	ldr	r3, [pc, #404]	; (8004f68 <UART_SetConfig+0x2d0>)
 8004dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004dda:	2b30      	cmp	r3, #48	; 0x30
 8004ddc:	d013      	beq.n	8004e06 <UART_SetConfig+0x16e>
 8004dde:	2b30      	cmp	r3, #48	; 0x30
 8004de0:	d814      	bhi.n	8004e0c <UART_SetConfig+0x174>
 8004de2:	2b20      	cmp	r3, #32
 8004de4:	d009      	beq.n	8004dfa <UART_SetConfig+0x162>
 8004de6:	2b20      	cmp	r3, #32
 8004de8:	d810      	bhi.n	8004e0c <UART_SetConfig+0x174>
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d002      	beq.n	8004df4 <UART_SetConfig+0x15c>
 8004dee:	2b10      	cmp	r3, #16
 8004df0:	d006      	beq.n	8004e00 <UART_SetConfig+0x168>
 8004df2:	e00b      	b.n	8004e0c <UART_SetConfig+0x174>
 8004df4:	2300      	movs	r3, #0
 8004df6:	77fb      	strb	r3, [r7, #31]
 8004df8:	e0f1      	b.n	8004fde <UART_SetConfig+0x346>
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	77fb      	strb	r3, [r7, #31]
 8004dfe:	e0ee      	b.n	8004fde <UART_SetConfig+0x346>
 8004e00:	2304      	movs	r3, #4
 8004e02:	77fb      	strb	r3, [r7, #31]
 8004e04:	e0eb      	b.n	8004fde <UART_SetConfig+0x346>
 8004e06:	2308      	movs	r3, #8
 8004e08:	77fb      	strb	r3, [r7, #31]
 8004e0a:	e0e8      	b.n	8004fde <UART_SetConfig+0x346>
 8004e0c:	2310      	movs	r3, #16
 8004e0e:	77fb      	strb	r3, [r7, #31]
 8004e10:	e0e5      	b.n	8004fde <UART_SetConfig+0x346>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a57      	ldr	r2, [pc, #348]	; (8004f74 <UART_SetConfig+0x2dc>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d120      	bne.n	8004e5e <UART_SetConfig+0x1c6>
 8004e1c:	4b52      	ldr	r3, [pc, #328]	; (8004f68 <UART_SetConfig+0x2d0>)
 8004e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e22:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e26:	2bc0      	cmp	r3, #192	; 0xc0
 8004e28:	d013      	beq.n	8004e52 <UART_SetConfig+0x1ba>
 8004e2a:	2bc0      	cmp	r3, #192	; 0xc0
 8004e2c:	d814      	bhi.n	8004e58 <UART_SetConfig+0x1c0>
 8004e2e:	2b80      	cmp	r3, #128	; 0x80
 8004e30:	d009      	beq.n	8004e46 <UART_SetConfig+0x1ae>
 8004e32:	2b80      	cmp	r3, #128	; 0x80
 8004e34:	d810      	bhi.n	8004e58 <UART_SetConfig+0x1c0>
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <UART_SetConfig+0x1a8>
 8004e3a:	2b40      	cmp	r3, #64	; 0x40
 8004e3c:	d006      	beq.n	8004e4c <UART_SetConfig+0x1b4>
 8004e3e:	e00b      	b.n	8004e58 <UART_SetConfig+0x1c0>
 8004e40:	2300      	movs	r3, #0
 8004e42:	77fb      	strb	r3, [r7, #31]
 8004e44:	e0cb      	b.n	8004fde <UART_SetConfig+0x346>
 8004e46:	2302      	movs	r3, #2
 8004e48:	77fb      	strb	r3, [r7, #31]
 8004e4a:	e0c8      	b.n	8004fde <UART_SetConfig+0x346>
 8004e4c:	2304      	movs	r3, #4
 8004e4e:	77fb      	strb	r3, [r7, #31]
 8004e50:	e0c5      	b.n	8004fde <UART_SetConfig+0x346>
 8004e52:	2308      	movs	r3, #8
 8004e54:	77fb      	strb	r3, [r7, #31]
 8004e56:	e0c2      	b.n	8004fde <UART_SetConfig+0x346>
 8004e58:	2310      	movs	r3, #16
 8004e5a:	77fb      	strb	r3, [r7, #31]
 8004e5c:	e0bf      	b.n	8004fde <UART_SetConfig+0x346>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a45      	ldr	r2, [pc, #276]	; (8004f78 <UART_SetConfig+0x2e0>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d125      	bne.n	8004eb4 <UART_SetConfig+0x21c>
 8004e68:	4b3f      	ldr	r3, [pc, #252]	; (8004f68 <UART_SetConfig+0x2d0>)
 8004e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e76:	d017      	beq.n	8004ea8 <UART_SetConfig+0x210>
 8004e78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e7c:	d817      	bhi.n	8004eae <UART_SetConfig+0x216>
 8004e7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e82:	d00b      	beq.n	8004e9c <UART_SetConfig+0x204>
 8004e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e88:	d811      	bhi.n	8004eae <UART_SetConfig+0x216>
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <UART_SetConfig+0x1fe>
 8004e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e92:	d006      	beq.n	8004ea2 <UART_SetConfig+0x20a>
 8004e94:	e00b      	b.n	8004eae <UART_SetConfig+0x216>
 8004e96:	2300      	movs	r3, #0
 8004e98:	77fb      	strb	r3, [r7, #31]
 8004e9a:	e0a0      	b.n	8004fde <UART_SetConfig+0x346>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	77fb      	strb	r3, [r7, #31]
 8004ea0:	e09d      	b.n	8004fde <UART_SetConfig+0x346>
 8004ea2:	2304      	movs	r3, #4
 8004ea4:	77fb      	strb	r3, [r7, #31]
 8004ea6:	e09a      	b.n	8004fde <UART_SetConfig+0x346>
 8004ea8:	2308      	movs	r3, #8
 8004eaa:	77fb      	strb	r3, [r7, #31]
 8004eac:	e097      	b.n	8004fde <UART_SetConfig+0x346>
 8004eae:	2310      	movs	r3, #16
 8004eb0:	77fb      	strb	r3, [r7, #31]
 8004eb2:	e094      	b.n	8004fde <UART_SetConfig+0x346>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a30      	ldr	r2, [pc, #192]	; (8004f7c <UART_SetConfig+0x2e4>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d125      	bne.n	8004f0a <UART_SetConfig+0x272>
 8004ebe:	4b2a      	ldr	r3, [pc, #168]	; (8004f68 <UART_SetConfig+0x2d0>)
 8004ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ec8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ecc:	d017      	beq.n	8004efe <UART_SetConfig+0x266>
 8004ece:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ed2:	d817      	bhi.n	8004f04 <UART_SetConfig+0x26c>
 8004ed4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ed8:	d00b      	beq.n	8004ef2 <UART_SetConfig+0x25a>
 8004eda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ede:	d811      	bhi.n	8004f04 <UART_SetConfig+0x26c>
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <UART_SetConfig+0x254>
 8004ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee8:	d006      	beq.n	8004ef8 <UART_SetConfig+0x260>
 8004eea:	e00b      	b.n	8004f04 <UART_SetConfig+0x26c>
 8004eec:	2301      	movs	r3, #1
 8004eee:	77fb      	strb	r3, [r7, #31]
 8004ef0:	e075      	b.n	8004fde <UART_SetConfig+0x346>
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	77fb      	strb	r3, [r7, #31]
 8004ef6:	e072      	b.n	8004fde <UART_SetConfig+0x346>
 8004ef8:	2304      	movs	r3, #4
 8004efa:	77fb      	strb	r3, [r7, #31]
 8004efc:	e06f      	b.n	8004fde <UART_SetConfig+0x346>
 8004efe:	2308      	movs	r3, #8
 8004f00:	77fb      	strb	r3, [r7, #31]
 8004f02:	e06c      	b.n	8004fde <UART_SetConfig+0x346>
 8004f04:	2310      	movs	r3, #16
 8004f06:	77fb      	strb	r3, [r7, #31]
 8004f08:	e069      	b.n	8004fde <UART_SetConfig+0x346>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a1c      	ldr	r2, [pc, #112]	; (8004f80 <UART_SetConfig+0x2e8>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d137      	bne.n	8004f84 <UART_SetConfig+0x2ec>
 8004f14:	4b14      	ldr	r3, [pc, #80]	; (8004f68 <UART_SetConfig+0x2d0>)
 8004f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004f1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f22:	d017      	beq.n	8004f54 <UART_SetConfig+0x2bc>
 8004f24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f28:	d817      	bhi.n	8004f5a <UART_SetConfig+0x2c2>
 8004f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f2e:	d00b      	beq.n	8004f48 <UART_SetConfig+0x2b0>
 8004f30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f34:	d811      	bhi.n	8004f5a <UART_SetConfig+0x2c2>
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <UART_SetConfig+0x2aa>
 8004f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f3e:	d006      	beq.n	8004f4e <UART_SetConfig+0x2b6>
 8004f40:	e00b      	b.n	8004f5a <UART_SetConfig+0x2c2>
 8004f42:	2300      	movs	r3, #0
 8004f44:	77fb      	strb	r3, [r7, #31]
 8004f46:	e04a      	b.n	8004fde <UART_SetConfig+0x346>
 8004f48:	2302      	movs	r3, #2
 8004f4a:	77fb      	strb	r3, [r7, #31]
 8004f4c:	e047      	b.n	8004fde <UART_SetConfig+0x346>
 8004f4e:	2304      	movs	r3, #4
 8004f50:	77fb      	strb	r3, [r7, #31]
 8004f52:	e044      	b.n	8004fde <UART_SetConfig+0x346>
 8004f54:	2308      	movs	r3, #8
 8004f56:	77fb      	strb	r3, [r7, #31]
 8004f58:	e041      	b.n	8004fde <UART_SetConfig+0x346>
 8004f5a:	2310      	movs	r3, #16
 8004f5c:	77fb      	strb	r3, [r7, #31]
 8004f5e:	e03e      	b.n	8004fde <UART_SetConfig+0x346>
 8004f60:	efff69f3 	.word	0xefff69f3
 8004f64:	40011000 	.word	0x40011000
 8004f68:	40023800 	.word	0x40023800
 8004f6c:	40004400 	.word	0x40004400
 8004f70:	40004800 	.word	0x40004800
 8004f74:	40004c00 	.word	0x40004c00
 8004f78:	40005000 	.word	0x40005000
 8004f7c:	40011400 	.word	0x40011400
 8004f80:	40007800 	.word	0x40007800
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a71      	ldr	r2, [pc, #452]	; (8005150 <UART_SetConfig+0x4b8>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d125      	bne.n	8004fda <UART_SetConfig+0x342>
 8004f8e:	4b71      	ldr	r3, [pc, #452]	; (8005154 <UART_SetConfig+0x4bc>)
 8004f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f98:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f9c:	d017      	beq.n	8004fce <UART_SetConfig+0x336>
 8004f9e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004fa2:	d817      	bhi.n	8004fd4 <UART_SetConfig+0x33c>
 8004fa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fa8:	d00b      	beq.n	8004fc2 <UART_SetConfig+0x32a>
 8004faa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fae:	d811      	bhi.n	8004fd4 <UART_SetConfig+0x33c>
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d003      	beq.n	8004fbc <UART_SetConfig+0x324>
 8004fb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fb8:	d006      	beq.n	8004fc8 <UART_SetConfig+0x330>
 8004fba:	e00b      	b.n	8004fd4 <UART_SetConfig+0x33c>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	77fb      	strb	r3, [r7, #31]
 8004fc0:	e00d      	b.n	8004fde <UART_SetConfig+0x346>
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	77fb      	strb	r3, [r7, #31]
 8004fc6:	e00a      	b.n	8004fde <UART_SetConfig+0x346>
 8004fc8:	2304      	movs	r3, #4
 8004fca:	77fb      	strb	r3, [r7, #31]
 8004fcc:	e007      	b.n	8004fde <UART_SetConfig+0x346>
 8004fce:	2308      	movs	r3, #8
 8004fd0:	77fb      	strb	r3, [r7, #31]
 8004fd2:	e004      	b.n	8004fde <UART_SetConfig+0x346>
 8004fd4:	2310      	movs	r3, #16
 8004fd6:	77fb      	strb	r3, [r7, #31]
 8004fd8:	e001      	b.n	8004fde <UART_SetConfig+0x346>
 8004fda:	2310      	movs	r3, #16
 8004fdc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fe6:	d15a      	bne.n	800509e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8004fe8:	7ffb      	ldrb	r3, [r7, #31]
 8004fea:	2b08      	cmp	r3, #8
 8004fec:	d827      	bhi.n	800503e <UART_SetConfig+0x3a6>
 8004fee:	a201      	add	r2, pc, #4	; (adr r2, 8004ff4 <UART_SetConfig+0x35c>)
 8004ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff4:	08005019 	.word	0x08005019
 8004ff8:	08005021 	.word	0x08005021
 8004ffc:	08005029 	.word	0x08005029
 8005000:	0800503f 	.word	0x0800503f
 8005004:	0800502f 	.word	0x0800502f
 8005008:	0800503f 	.word	0x0800503f
 800500c:	0800503f 	.word	0x0800503f
 8005010:	0800503f 	.word	0x0800503f
 8005014:	08005037 	.word	0x08005037
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005018:	f7fe fdfa 	bl	8003c10 <HAL_RCC_GetPCLK1Freq>
 800501c:	61b8      	str	r0, [r7, #24]
        break;
 800501e:	e013      	b.n	8005048 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005020:	f7fe fe0a 	bl	8003c38 <HAL_RCC_GetPCLK2Freq>
 8005024:	61b8      	str	r0, [r7, #24]
        break;
 8005026:	e00f      	b.n	8005048 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005028:	4b4b      	ldr	r3, [pc, #300]	; (8005158 <UART_SetConfig+0x4c0>)
 800502a:	61bb      	str	r3, [r7, #24]
        break;
 800502c:	e00c      	b.n	8005048 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800502e:	f7fe fd01 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 8005032:	61b8      	str	r0, [r7, #24]
        break;
 8005034:	e008      	b.n	8005048 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800503a:	61bb      	str	r3, [r7, #24]
        break;
 800503c:	e004      	b.n	8005048 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800503e:	2300      	movs	r3, #0
 8005040:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	77bb      	strb	r3, [r7, #30]
        break;
 8005046:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d074      	beq.n	8005138 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	005a      	lsls	r2, r3, #1
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	085b      	lsrs	r3, r3, #1
 8005058:	441a      	add	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005062:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	2b0f      	cmp	r3, #15
 8005068:	d916      	bls.n	8005098 <UART_SetConfig+0x400>
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005070:	d212      	bcs.n	8005098 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	b29b      	uxth	r3, r3
 8005076:	f023 030f 	bic.w	r3, r3, #15
 800507a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	085b      	lsrs	r3, r3, #1
 8005080:	b29b      	uxth	r3, r3
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	b29a      	uxth	r2, r3
 8005088:	89fb      	ldrh	r3, [r7, #14]
 800508a:	4313      	orrs	r3, r2
 800508c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	89fa      	ldrh	r2, [r7, #14]
 8005094:	60da      	str	r2, [r3, #12]
 8005096:	e04f      	b.n	8005138 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	77bb      	strb	r3, [r7, #30]
 800509c:	e04c      	b.n	8005138 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800509e:	7ffb      	ldrb	r3, [r7, #31]
 80050a0:	2b08      	cmp	r3, #8
 80050a2:	d828      	bhi.n	80050f6 <UART_SetConfig+0x45e>
 80050a4:	a201      	add	r2, pc, #4	; (adr r2, 80050ac <UART_SetConfig+0x414>)
 80050a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050aa:	bf00      	nop
 80050ac:	080050d1 	.word	0x080050d1
 80050b0:	080050d9 	.word	0x080050d9
 80050b4:	080050e1 	.word	0x080050e1
 80050b8:	080050f7 	.word	0x080050f7
 80050bc:	080050e7 	.word	0x080050e7
 80050c0:	080050f7 	.word	0x080050f7
 80050c4:	080050f7 	.word	0x080050f7
 80050c8:	080050f7 	.word	0x080050f7
 80050cc:	080050ef 	.word	0x080050ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050d0:	f7fe fd9e 	bl	8003c10 <HAL_RCC_GetPCLK1Freq>
 80050d4:	61b8      	str	r0, [r7, #24]
        break;
 80050d6:	e013      	b.n	8005100 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050d8:	f7fe fdae 	bl	8003c38 <HAL_RCC_GetPCLK2Freq>
 80050dc:	61b8      	str	r0, [r7, #24]
        break;
 80050de:	e00f      	b.n	8005100 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050e0:	4b1d      	ldr	r3, [pc, #116]	; (8005158 <UART_SetConfig+0x4c0>)
 80050e2:	61bb      	str	r3, [r7, #24]
        break;
 80050e4:	e00c      	b.n	8005100 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050e6:	f7fe fca5 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 80050ea:	61b8      	str	r0, [r7, #24]
        break;
 80050ec:	e008      	b.n	8005100 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050f2:	61bb      	str	r3, [r7, #24]
        break;
 80050f4:	e004      	b.n	8005100 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80050f6:	2300      	movs	r3, #0
 80050f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	77bb      	strb	r3, [r7, #30]
        break;
 80050fe:	bf00      	nop
    }

    if (pclk != 0U)
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d018      	beq.n	8005138 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	085a      	lsrs	r2, r3, #1
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	441a      	add	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	fbb2 f3f3 	udiv	r3, r2, r3
 8005118:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	2b0f      	cmp	r3, #15
 800511e:	d909      	bls.n	8005134 <UART_SetConfig+0x49c>
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005126:	d205      	bcs.n	8005134 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	b29a      	uxth	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	60da      	str	r2, [r3, #12]
 8005132:	e001      	b.n	8005138 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005144:	7fbb      	ldrb	r3, [r7, #30]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3720      	adds	r7, #32
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	40007c00 	.word	0x40007c00
 8005154:	40023800 	.word	0x40023800
 8005158:	00f42400 	.word	0x00f42400

0800515c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00a      	beq.n	8005186 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00a      	beq.n	80051ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	f003 0308 	and.w	r3, r3, #8
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00a      	beq.n	80051ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	430a      	orrs	r2, r1
 80051ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	f003 0310 	and.w	r3, r3, #16
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00a      	beq.n	800520e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	f003 0320 	and.w	r3, r3, #32
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005238:	2b00      	cmp	r3, #0
 800523a:	d01a      	beq.n	8005272 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005256:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800525a:	d10a      	bne.n	8005272 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00a      	beq.n	8005294 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	430a      	orrs	r2, r1
 8005292:	605a      	str	r2, [r3, #4]
  }
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af02      	add	r7, sp, #8
 80052a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052b0:	f7fc f8c8 	bl	8001444 <HAL_GetTick>
 80052b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0308 	and.w	r3, r3, #8
 80052c0:	2b08      	cmp	r3, #8
 80052c2:	d10e      	bne.n	80052e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f82d 	bl	8005332 <UART_WaitOnFlagUntilTimeout>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e023      	b.n	800532a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b04      	cmp	r3, #4
 80052ee:	d10e      	bne.n	800530e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f817 	bl	8005332 <UART_WaitOnFlagUntilTimeout>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e00d      	b.n	800532a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2220      	movs	r2, #32
 8005312:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2220      	movs	r2, #32
 8005318:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b09c      	sub	sp, #112	; 0x70
 8005336:	af00      	add	r7, sp, #0
 8005338:	60f8      	str	r0, [r7, #12]
 800533a:	60b9      	str	r1, [r7, #8]
 800533c:	603b      	str	r3, [r7, #0]
 800533e:	4613      	mov	r3, r2
 8005340:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005342:	e0a5      	b.n	8005490 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005344:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800534a:	f000 80a1 	beq.w	8005490 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800534e:	f7fc f879 	bl	8001444 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800535a:	429a      	cmp	r2, r3
 800535c:	d302      	bcc.n	8005364 <UART_WaitOnFlagUntilTimeout+0x32>
 800535e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005360:	2b00      	cmp	r3, #0
 8005362:	d13e      	bne.n	80053e2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800536c:	e853 3f00 	ldrex	r3, [r3]
 8005370:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005374:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005378:	667b      	str	r3, [r7, #100]	; 0x64
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	461a      	mov	r2, r3
 8005380:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005382:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005384:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005386:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005388:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800538a:	e841 2300 	strex	r3, r2, [r1]
 800538e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005390:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1e6      	bne.n	8005364 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	3308      	adds	r3, #8
 800539c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053a0:	e853 3f00 	ldrex	r3, [r3]
 80053a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a8:	f023 0301 	bic.w	r3, r3, #1
 80053ac:	663b      	str	r3, [r7, #96]	; 0x60
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	3308      	adds	r3, #8
 80053b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80053b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053be:	e841 2300 	strex	r3, r2, [r1]
 80053c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80053c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1e5      	bne.n	8005396 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2220      	movs	r2, #32
 80053ce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2220      	movs	r2, #32
 80053d4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e067      	b.n	80054b2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0304 	and.w	r3, r3, #4
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d04f      	beq.n	8005490 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	69db      	ldr	r3, [r3, #28]
 80053f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053fe:	d147      	bne.n	8005490 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005408:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005412:	e853 3f00 	ldrex	r3, [r3]
 8005416:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800541e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	461a      	mov	r2, r3
 8005426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005428:	637b      	str	r3, [r7, #52]	; 0x34
 800542a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800542e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005430:	e841 2300 	strex	r3, r2, [r1]
 8005434:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1e6      	bne.n	800540a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	3308      	adds	r3, #8
 8005442:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	e853 3f00 	ldrex	r3, [r3]
 800544a:	613b      	str	r3, [r7, #16]
   return(result);
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	f023 0301 	bic.w	r3, r3, #1
 8005452:	66bb      	str	r3, [r7, #104]	; 0x68
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	3308      	adds	r3, #8
 800545a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800545c:	623a      	str	r2, [r7, #32]
 800545e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005460:	69f9      	ldr	r1, [r7, #28]
 8005462:	6a3a      	ldr	r2, [r7, #32]
 8005464:	e841 2300 	strex	r3, r2, [r1]
 8005468:	61bb      	str	r3, [r7, #24]
   return(result);
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1e5      	bne.n	800543c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2220      	movs	r2, #32
 8005474:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2220      	movs	r2, #32
 800547a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2220      	movs	r2, #32
 8005480:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e010      	b.n	80054b2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	69da      	ldr	r2, [r3, #28]
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	4013      	ands	r3, r2
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	429a      	cmp	r2, r3
 800549e:	bf0c      	ite	eq
 80054a0:	2301      	moveq	r3, #1
 80054a2:	2300      	movne	r3, #0
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	461a      	mov	r2, r3
 80054a8:	79fb      	ldrb	r3, [r7, #7]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	f43f af4a 	beq.w	8005344 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3770      	adds	r7, #112	; 0x70
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
	...

080054bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054bc:	b084      	sub	sp, #16
 80054be:	b580      	push	{r7, lr}
 80054c0:	b084      	sub	sp, #16
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
 80054c6:	f107 001c 	add.w	r0, r7, #28
 80054ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d120      	bne.n	8005516 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	4b20      	ldr	r3, [pc, #128]	; (8005568 <USB_CoreInit+0xac>)
 80054e6:	4013      	ands	r3, r2
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80054f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d105      	bne.n	800550a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f9b4 	bl	8005878 <USB_CoreReset>
 8005510:	4603      	mov	r3, r0
 8005512:	73fb      	strb	r3, [r7, #15]
 8005514:	e010      	b.n	8005538 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f9a8 	bl	8005878 <USB_CoreReset>
 8005528:	4603      	mov	r3, r0
 800552a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005530:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553a:	2b01      	cmp	r3, #1
 800553c:	d10b      	bne.n	8005556 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f043 0206 	orr.w	r2, r3, #6
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f043 0220 	orr.w	r2, r3, #32
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005556:	7bfb      	ldrb	r3, [r7, #15]
}
 8005558:	4618      	mov	r0, r3
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005562:	b004      	add	sp, #16
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	ffbdffbf 	.word	0xffbdffbf

0800556c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f043 0201 	orr.w	r2, r3, #1
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800558e:	b480      	push	{r7}
 8005590:	b083      	sub	sp, #12
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f023 0201 	bic.w	r2, r3, #1
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	460b      	mov	r3, r1
 80055ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80055bc:	2300      	movs	r3, #0
 80055be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80055cc:	78fb      	ldrb	r3, [r7, #3]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d115      	bne.n	80055fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80055de:	2001      	movs	r0, #1
 80055e0:	f7fb ff3c 	bl	800145c <HAL_Delay>
      ms++;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	3301      	adds	r3, #1
 80055e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f935 	bl	800585a <USB_GetMode>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d01e      	beq.n	8005634 <USB_SetCurrentMode+0x84>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2b31      	cmp	r3, #49	; 0x31
 80055fa:	d9f0      	bls.n	80055de <USB_SetCurrentMode+0x2e>
 80055fc:	e01a      	b.n	8005634 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80055fe:	78fb      	ldrb	r3, [r7, #3]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d115      	bne.n	8005630 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005610:	2001      	movs	r0, #1
 8005612:	f7fb ff23 	bl	800145c <HAL_Delay>
      ms++;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	3301      	adds	r3, #1
 800561a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f91c 	bl	800585a <USB_GetMode>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d005      	beq.n	8005634 <USB_SetCurrentMode+0x84>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2b31      	cmp	r3, #49	; 0x31
 800562c:	d9f0      	bls.n	8005610 <USB_SetCurrentMode+0x60>
 800562e:	e001      	b.n	8005634 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e005      	b.n	8005640 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2b32      	cmp	r3, #50	; 0x32
 8005638:	d101      	bne.n	800563e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e000      	b.n	8005640 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005652:	2300      	movs	r3, #0
 8005654:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	3301      	adds	r3, #1
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	4a12      	ldr	r2, [pc, #72]	; (80056a8 <USB_FlushTxFifo+0x60>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d901      	bls.n	8005666 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e01a      	b.n	800569c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	2b00      	cmp	r3, #0
 800566c:	daf3      	bge.n	8005656 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800566e:	2300      	movs	r3, #0
 8005670:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	019b      	lsls	r3, r3, #6
 8005676:	f043 0220 	orr.w	r2, r3, #32
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	3301      	adds	r3, #1
 8005682:	60fb      	str	r3, [r7, #12]
 8005684:	4a08      	ldr	r2, [pc, #32]	; (80056a8 <USB_FlushTxFifo+0x60>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d901      	bls.n	800568e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e006      	b.n	800569c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	f003 0320 	and.w	r3, r3, #32
 8005696:	2b20      	cmp	r3, #32
 8005698:	d0f1      	beq.n	800567e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3714      	adds	r7, #20
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr
 80056a8:	00030d40 	.word	0x00030d40

080056ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056b4:	2300      	movs	r3, #0
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	3301      	adds	r3, #1
 80056bc:	60fb      	str	r3, [r7, #12]
 80056be:	4a11      	ldr	r2, [pc, #68]	; (8005704 <USB_FlushRxFifo+0x58>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d901      	bls.n	80056c8 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e017      	b.n	80056f8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	daf3      	bge.n	80056b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80056d0:	2300      	movs	r3, #0
 80056d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2210      	movs	r2, #16
 80056d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	3301      	adds	r3, #1
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	4a08      	ldr	r2, [pc, #32]	; (8005704 <USB_FlushRxFifo+0x58>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d901      	bls.n	80056ea <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e006      	b.n	80056f8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	f003 0310 	and.w	r3, r3, #16
 80056f2:	2b10      	cmp	r3, #16
 80056f4:	d0f1      	beq.n	80056da <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	00030d40 	.word	0x00030d40

08005708 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005708:	b480      	push	{r7}
 800570a:	b089      	sub	sp, #36	; 0x24
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	4611      	mov	r1, r2
 8005714:	461a      	mov	r2, r3
 8005716:	460b      	mov	r3, r1
 8005718:	71fb      	strb	r3, [r7, #7]
 800571a:	4613      	mov	r3, r2
 800571c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005726:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800572a:	2b00      	cmp	r3, #0
 800572c:	d123      	bne.n	8005776 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800572e:	88bb      	ldrh	r3, [r7, #4]
 8005730:	3303      	adds	r3, #3
 8005732:	089b      	lsrs	r3, r3, #2
 8005734:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005736:	2300      	movs	r3, #0
 8005738:	61bb      	str	r3, [r7, #24]
 800573a:	e018      	b.n	800576e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800573c:	79fb      	ldrb	r3, [r7, #7]
 800573e:	031a      	lsls	r2, r3, #12
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	4413      	add	r3, r2
 8005744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005748:	461a      	mov	r2, r3
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	3301      	adds	r3, #1
 8005754:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	3301      	adds	r3, #1
 800575a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	3301      	adds	r3, #1
 8005760:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	3301      	adds	r3, #1
 8005766:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	3301      	adds	r3, #1
 800576c:	61bb      	str	r3, [r7, #24]
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	429a      	cmp	r2, r3
 8005774:	d3e2      	bcc.n	800573c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3724      	adds	r7, #36	; 0x24
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005784:	b480      	push	{r7}
 8005786:	b08b      	sub	sp, #44	; 0x2c
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	4613      	mov	r3, r2
 8005790:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800579a:	88fb      	ldrh	r3, [r7, #6]
 800579c:	089b      	lsrs	r3, r3, #2
 800579e:	b29b      	uxth	r3, r3
 80057a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80057a2:	88fb      	ldrh	r3, [r7, #6]
 80057a4:	f003 0303 	and.w	r3, r3, #3
 80057a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80057aa:	2300      	movs	r3, #0
 80057ac:	623b      	str	r3, [r7, #32]
 80057ae:	e014      	b.n	80057da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	3301      	adds	r3, #1
 80057c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80057c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c4:	3301      	adds	r3, #1
 80057c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	3301      	adds	r3, #1
 80057cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80057ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d0:	3301      	adds	r3, #1
 80057d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	3301      	adds	r3, #1
 80057d8:	623b      	str	r3, [r7, #32]
 80057da:	6a3a      	ldr	r2, [r7, #32]
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d3e6      	bcc.n	80057b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80057e2:	8bfb      	ldrh	r3, [r7, #30]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d01e      	beq.n	8005826 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80057e8:	2300      	movs	r3, #0
 80057ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057f2:	461a      	mov	r2, r3
 80057f4:	f107 0310 	add.w	r3, r7, #16
 80057f8:	6812      	ldr	r2, [r2, #0]
 80057fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	b2db      	uxtb	r3, r3
 8005802:	00db      	lsls	r3, r3, #3
 8005804:	fa22 f303 	lsr.w	r3, r2, r3
 8005808:	b2da      	uxtb	r2, r3
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	701a      	strb	r2, [r3, #0]
      i++;
 800580e:	6a3b      	ldr	r3, [r7, #32]
 8005810:	3301      	adds	r3, #1
 8005812:	623b      	str	r3, [r7, #32]
      pDest++;
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	3301      	adds	r3, #1
 8005818:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800581a:	8bfb      	ldrh	r3, [r7, #30]
 800581c:	3b01      	subs	r3, #1
 800581e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005820:	8bfb      	ldrh	r3, [r7, #30]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1ea      	bne.n	80057fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005828:	4618      	mov	r0, r3
 800582a:	372c      	adds	r7, #44	; 0x2c
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	4013      	ands	r3, r2
 800584a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800584c:	68fb      	ldr	r3, [r7, #12]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3714      	adds	r7, #20
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800585a:	b480      	push	{r7}
 800585c:	b083      	sub	sp, #12
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	f003 0301 	and.w	r3, r3, #1
}
 800586a:	4618      	mov	r0, r3
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
	...

08005878 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005880:	2300      	movs	r3, #0
 8005882:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	3301      	adds	r3, #1
 8005888:	60fb      	str	r3, [r7, #12]
 800588a:	4a13      	ldr	r2, [pc, #76]	; (80058d8 <USB_CoreReset+0x60>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d901      	bls.n	8005894 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e01a      	b.n	80058ca <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	2b00      	cmp	r3, #0
 800589a:	daf3      	bge.n	8005884 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800589c:	2300      	movs	r3, #0
 800589e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	f043 0201 	orr.w	r2, r3, #1
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	3301      	adds	r3, #1
 80058b0:	60fb      	str	r3, [r7, #12]
 80058b2:	4a09      	ldr	r2, [pc, #36]	; (80058d8 <USB_CoreReset+0x60>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d901      	bls.n	80058bc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e006      	b.n	80058ca <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d0f1      	beq.n	80058ac <USB_CoreReset+0x34>

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3714      	adds	r7, #20
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	00030d40 	.word	0x00030d40

080058dc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058dc:	b084      	sub	sp, #16
 80058de:	b580      	push	{r7, lr}
 80058e0:	b086      	sub	sp, #24
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
 80058e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80058ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80058ee:	2300      	movs	r3, #0
 80058f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058fc:	461a      	mov	r2, r3
 80058fe:	2300      	movs	r3, #0
 8005900:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005906:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005916:	2b00      	cmp	r3, #0
 8005918:	d018      	beq.n	800594c <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800591a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591c:	2b01      	cmp	r3, #1
 800591e:	d10a      	bne.n	8005936 <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800592e:	f043 0304 	orr.w	r3, r3, #4
 8005932:	6013      	str	r3, [r2, #0]
 8005934:	e014      	b.n	8005960 <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005944:	f023 0304 	bic.w	r3, r3, #4
 8005948:	6013      	str	r3, [r2, #0]
 800594a:	e009      	b.n	8005960 <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800595a:	f023 0304 	bic.w	r3, r3, #4
 800595e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005960:	2110      	movs	r1, #16
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7ff fe70 	bl	8005648 <USB_FlushTxFifo>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7ff fe9a 	bl	80056ac <USB_FlushRxFifo>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d001      	beq.n	8005982 <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005982:	2300      	movs	r3, #0
 8005984:	613b      	str	r3, [r7, #16]
 8005986:	e015      	b.n	80059b4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4413      	add	r3, r2
 8005990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005994:	461a      	mov	r2, r3
 8005996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800599a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a8:	461a      	mov	r2, r3
 80059aa:	2300      	movs	r3, #0
 80059ac:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	3301      	adds	r3, #1
 80059b2:	613b      	str	r3, [r7, #16]
 80059b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d3e5      	bcc.n	8005988 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059c8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00b      	beq.n	80059ee <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059dc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a13      	ldr	r2, [pc, #76]	; (8005a30 <USB_HostInit+0x154>)
 80059e2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a13      	ldr	r2, [pc, #76]	; (8005a34 <USB_HostInit+0x158>)
 80059e8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80059ec:	e009      	b.n	8005a02 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2280      	movs	r2, #128	; 0x80
 80059f2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a10      	ldr	r2, [pc, #64]	; (8005a38 <USB_HostInit+0x15c>)
 80059f8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a0f      	ldr	r2, [pc, #60]	; (8005a3c <USB_HostInit+0x160>)
 80059fe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d105      	bne.n	8005a14 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	f043 0210 	orr.w	r2, r3, #16
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	699a      	ldr	r2, [r3, #24]
 8005a18:	4b09      	ldr	r3, [pc, #36]	; (8005a40 <USB_HostInit+0x164>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005a20:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3718      	adds	r7, #24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a2c:	b004      	add	sp, #16
 8005a2e:	4770      	bx	lr
 8005a30:	01000200 	.word	0x01000200
 8005a34:	00e00300 	.word	0x00e00300
 8005a38:	00600080 	.word	0x00600080
 8005a3c:	004000e0 	.word	0x004000e0
 8005a40:	a3200008 	.word	0xa3200008

08005a44 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a62:	f023 0303 	bic.w	r3, r3, #3
 8005a66:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	78fb      	ldrb	r3, [r7, #3]
 8005a72:	f003 0303 	and.w	r3, r3, #3
 8005a76:	68f9      	ldr	r1, [r7, #12]
 8005a78:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005a80:	78fb      	ldrb	r3, [r7, #3]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d107      	bne.n	8005a96 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005a92:	6053      	str	r3, [r2, #4]
 8005a94:	e009      	b.n	8005aaa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005a96:	78fb      	ldrb	r3, [r7, #3]
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d106      	bne.n	8005aaa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	f241 7370 	movw	r3, #6000	; 0x1770
 8005aa8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3714      	adds	r7, #20
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005ad8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ae6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005ae8:	2064      	movs	r0, #100	; 0x64
 8005aea:	f7fb fcb7 	bl	800145c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005af6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005afa:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005afc:	200a      	movs	r0, #10
 8005afe:	f7fb fcad 	bl	800145c <HAL_Delay>

  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	460b      	mov	r3, r1
 8005b16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005b30:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d109      	bne.n	8005b50 <USB_DriveVbus+0x44>
 8005b3c:	78fb      	ldrb	r3, [r7, #3]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d106      	bne.n	8005b50 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b4e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b5a:	d109      	bne.n	8005b70 <USB_DriveVbus+0x64>
 8005b5c:	78fb      	ldrb	r3, [r7, #3]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d106      	bne.n	8005b70 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b6e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b085      	sub	sp, #20
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	0c5b      	lsrs	r3, r3, #17
 8005b9c:	f003 0303 	and.w	r3, r3, #3
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	b29b      	uxth	r3, r3
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
	...

08005bd0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b088      	sub	sp, #32
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	4608      	mov	r0, r1
 8005bda:	4611      	mov	r1, r2
 8005bdc:	461a      	mov	r2, r3
 8005bde:	4603      	mov	r3, r0
 8005be0:	70fb      	strb	r3, [r7, #3]
 8005be2:	460b      	mov	r3, r1
 8005be4:	70bb      	strb	r3, [r7, #2]
 8005be6:	4613      	mov	r3, r2
 8005be8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005bea:	2300      	movs	r3, #0
 8005bec:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005bf2:	78fb      	ldrb	r3, [r7, #3]
 8005bf4:	015a      	lsls	r2, r3, #5
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bfe:	461a      	mov	r2, r3
 8005c00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c04:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005c06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005c0a:	2b03      	cmp	r3, #3
 8005c0c:	d87e      	bhi.n	8005d0c <USB_HC_Init+0x13c>
 8005c0e:	a201      	add	r2, pc, #4	; (adr r2, 8005c14 <USB_HC_Init+0x44>)
 8005c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c14:	08005c25 	.word	0x08005c25
 8005c18:	08005ccf 	.word	0x08005ccf
 8005c1c:	08005c25 	.word	0x08005c25
 8005c20:	08005c91 	.word	0x08005c91
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c24:	78fb      	ldrb	r3, [r7, #3]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c30:	461a      	mov	r2, r3
 8005c32:	f240 439d 	movw	r3, #1181	; 0x49d
 8005c36:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005c38:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	da10      	bge.n	8005c62 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005c40:	78fb      	ldrb	r3, [r7, #3]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	78fa      	ldrb	r2, [r7, #3]
 8005c50:	0151      	lsls	r1, r2, #5
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	440a      	add	r2, r1
 8005c56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c5e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005c60:	e057      	b.n	8005d12 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d051      	beq.n	8005d12 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005c6e:	78fb      	ldrb	r3, [r7, #3]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	78fa      	ldrb	r2, [r7, #3]
 8005c7e:	0151      	lsls	r1, r2, #5
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	440a      	add	r2, r1
 8005c84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c88:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005c8c:	60d3      	str	r3, [r2, #12]
      break;
 8005c8e:	e040      	b.n	8005d12 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c90:	78fb      	ldrb	r3, [r7, #3]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	f240 639d 	movw	r3, #1693	; 0x69d
 8005ca2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005ca4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	da34      	bge.n	8005d16 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005cac:	78fb      	ldrb	r3, [r7, #3]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	78fa      	ldrb	r2, [r7, #3]
 8005cbc:	0151      	lsls	r1, r2, #5
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	440a      	add	r2, r1
 8005cc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cca:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005ccc:	e023      	b.n	8005d16 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005cce:	78fb      	ldrb	r3, [r7, #3]
 8005cd0:	015a      	lsls	r2, r3, #5
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cda:	461a      	mov	r2, r3
 8005cdc:	f240 2325 	movw	r3, #549	; 0x225
 8005ce0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005ce2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	da17      	bge.n	8005d1a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005cea:	78fb      	ldrb	r3, [r7, #3]
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	78fa      	ldrb	r2, [r7, #3]
 8005cfa:	0151      	lsls	r1, r2, #5
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	440a      	add	r2, r1
 8005d00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d04:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005d08:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005d0a:	e006      	b.n	8005d1a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	77fb      	strb	r3, [r7, #31]
      break;
 8005d10:	e004      	b.n	8005d1c <USB_HC_Init+0x14c>
      break;
 8005d12:	bf00      	nop
 8005d14:	e002      	b.n	8005d1c <USB_HC_Init+0x14c>
      break;
 8005d16:	bf00      	nop
 8005d18:	e000      	b.n	8005d1c <USB_HC_Init+0x14c>
      break;
 8005d1a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005d1c:	78fb      	ldrb	r3, [r7, #3]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	78fa      	ldrb	r2, [r7, #3]
 8005d2c:	0151      	lsls	r1, r2, #5
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	440a      	add	r2, r1
 8005d32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d36:	f043 0302 	orr.w	r3, r3, #2
 8005d3a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d42:	699a      	ldr	r2, [r3, #24]
 8005d44:	78fb      	ldrb	r3, [r7, #3]
 8005d46:	f003 030f 	and.w	r3, r3, #15
 8005d4a:	2101      	movs	r1, #1
 8005d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d50:	6939      	ldr	r1, [r7, #16]
 8005d52:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d56:	4313      	orrs	r3, r2
 8005d58:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005d66:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	da03      	bge.n	8005d76 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d72:	61bb      	str	r3, [r7, #24]
 8005d74:	e001      	b.n	8005d7a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7ff feff 	bl	8005b7e <USB_GetHostSpeed>
 8005d80:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005d82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d106      	bne.n	8005d98 <USB_HC_Init+0x1c8>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d003      	beq.n	8005d98 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005d90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d94:	617b      	str	r3, [r7, #20]
 8005d96:	e001      	b.n	8005d9c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d9c:	787b      	ldrb	r3, [r7, #1]
 8005d9e:	059b      	lsls	r3, r3, #22
 8005da0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005da4:	78bb      	ldrb	r3, [r7, #2]
 8005da6:	02db      	lsls	r3, r3, #11
 8005da8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005dac:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005dae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005db2:	049b      	lsls	r3, r3, #18
 8005db4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005db8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005dba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005dbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005dc0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005dc6:	78fb      	ldrb	r3, [r7, #3]
 8005dc8:	0159      	lsls	r1, r3, #5
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	440b      	add	r3, r1
 8005dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dd2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005dd8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005dda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	d10f      	bne.n	8005e02 <USB_HC_Init+0x232>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005de2:	78fb      	ldrb	r3, [r7, #3]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	78fa      	ldrb	r2, [r7, #3]
 8005df2:	0151      	lsls	r1, r2, #5
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	440a      	add	r2, r1
 8005df8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e00:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005e02:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3720      	adds	r7, #32
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b08c      	sub	sp, #48	; 0x30
 8005e10:	af02      	add	r7, sp, #8
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	4613      	mov	r3, r2
 8005e18:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	785b      	ldrb	r3, [r3, #1]
 8005e22:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005e24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e28:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d02d      	beq.n	8005e92 <USB_HC_StartXfer+0x86>
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	791b      	ldrb	r3, [r3, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d129      	bne.n	8005e92 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005e3e:	79fb      	ldrb	r3, [r7, #7]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d117      	bne.n	8005e74 <USB_HC_StartXfer+0x68>
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	79db      	ldrb	r3, [r3, #7]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <USB_HC_StartXfer+0x48>
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	79db      	ldrb	r3, [r3, #7]
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d10f      	bne.n	8005e74 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	69fa      	ldr	r2, [r7, #28]
 8005e64:	0151      	lsls	r1, r2, #5
 8005e66:	6a3a      	ldr	r2, [r7, #32]
 8005e68:	440a      	add	r2, r1
 8005e6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e72:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005e74:	79fb      	ldrb	r3, [r7, #7]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10b      	bne.n	8005e92 <USB_HC_StartXfer+0x86>
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	795b      	ldrb	r3, [r3, #5]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d107      	bne.n	8005e92 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	785b      	ldrb	r3, [r3, #1]
 8005e86:	4619      	mov	r1, r3
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 fa0d 	bl	80062a8 <USB_DoPing>
      return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	e0f8      	b.n	8006084 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d018      	beq.n	8005ecc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	8912      	ldrh	r2, [r2, #8]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	8912      	ldrh	r2, [r2, #8]
 8005eaa:	fbb3 f3f2 	udiv	r3, r3, r2
 8005eae:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005eb0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005eb2:	8b7b      	ldrh	r3, [r7, #26]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d90b      	bls.n	8005ed0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005eb8:	8b7b      	ldrh	r3, [r7, #26]
 8005eba:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005ebc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	8912      	ldrh	r2, [r2, #8]
 8005ec2:	fb02 f203 	mul.w	r2, r2, r3
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	611a      	str	r2, [r3, #16]
 8005eca:	e001      	b.n	8005ed0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	78db      	ldrb	r3, [r3, #3]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d007      	beq.n	8005ee8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005ed8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	8912      	ldrh	r2, [r2, #8]
 8005ede:	fb02 f203 	mul.w	r2, r2, r3
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	611a      	str	r2, [r3, #16]
 8005ee6:	e003      	b.n	8005ef0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	695a      	ldr	r2, [r3, #20]
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005ef8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005efa:	04d9      	lsls	r1, r3, #19
 8005efc:	4b63      	ldr	r3, [pc, #396]	; (800608c <USB_HC_StartXfer+0x280>)
 8005efe:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f00:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	7a9b      	ldrb	r3, [r3, #10]
 8005f06:	075b      	lsls	r3, r3, #29
 8005f08:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f0c:	69f9      	ldr	r1, [r7, #28]
 8005f0e:	0148      	lsls	r0, r1, #5
 8005f10:	6a39      	ldr	r1, [r7, #32]
 8005f12:	4401      	add	r1, r0
 8005f14:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f18:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f1a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005f1c:	79fb      	ldrb	r3, [r7, #7]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d009      	beq.n	8005f36 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	68d9      	ldr	r1, [r3, #12]
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	015a      	lsls	r2, r3, #5
 8005f2a:	6a3b      	ldr	r3, [r7, #32]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f32:	460a      	mov	r2, r1
 8005f34:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005f36:	6a3b      	ldr	r3, [r7, #32]
 8005f38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	bf0c      	ite	eq
 8005f46:	2301      	moveq	r3, #1
 8005f48:	2300      	movne	r3, #0
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	6a3b      	ldr	r3, [r7, #32]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	69fa      	ldr	r2, [r7, #28]
 8005f5e:	0151      	lsls	r1, r2, #5
 8005f60:	6a3a      	ldr	r2, [r7, #32]
 8005f62:	440a      	add	r2, r1
 8005f64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f68:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005f6c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	7e7b      	ldrb	r3, [r7, #25]
 8005f7e:	075b      	lsls	r3, r3, #29
 8005f80:	69f9      	ldr	r1, [r7, #28]
 8005f82:	0148      	lsls	r0, r1, #5
 8005f84:	6a39      	ldr	r1, [r7, #32]
 8005f86:	4401      	add	r1, r0
 8005f88:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005fa6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	78db      	ldrb	r3, [r3, #3]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d004      	beq.n	8005fba <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fb6:	613b      	str	r3, [r7, #16]
 8005fb8:	e003      	b.n	8005fc2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005fc0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fc8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	015a      	lsls	r2, r3, #5
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005fdc:	79fb      	ldrb	r3, [r7, #7]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	e04e      	b.n	8006084 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	78db      	ldrb	r3, [r3, #3]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d149      	bne.n	8006082 <USB_HC_StartXfer+0x276>
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d045      	beq.n	8006082 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	79db      	ldrb	r3, [r3, #7]
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d830      	bhi.n	8006060 <USB_HC_StartXfer+0x254>
 8005ffe:	a201      	add	r2, pc, #4	; (adr r2, 8006004 <USB_HC_StartXfer+0x1f8>)
 8006000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006004:	08006015 	.word	0x08006015
 8006008:	08006039 	.word	0x08006039
 800600c:	08006015 	.word	0x08006015
 8006010:	08006039 	.word	0x08006039
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	3303      	adds	r3, #3
 800601a:	089b      	lsrs	r3, r3, #2
 800601c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800601e:	8afa      	ldrh	r2, [r7, #22]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006024:	b29b      	uxth	r3, r3
 8006026:	429a      	cmp	r2, r3
 8006028:	d91c      	bls.n	8006064 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	f043 0220 	orr.w	r2, r3, #32
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	619a      	str	r2, [r3, #24]
        }
        break;
 8006036:	e015      	b.n	8006064 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	695b      	ldr	r3, [r3, #20]
 800603c:	3303      	adds	r3, #3
 800603e:	089b      	lsrs	r3, r3, #2
 8006040:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006042:	8afa      	ldrh	r2, [r7, #22]
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	b29b      	uxth	r3, r3
 800604e:	429a      	cmp	r2, r3
 8006050:	d90a      	bls.n	8006068 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	619a      	str	r2, [r3, #24]
        }
        break;
 800605e:	e003      	b.n	8006068 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006060:	bf00      	nop
 8006062:	e002      	b.n	800606a <USB_HC_StartXfer+0x25e>
        break;
 8006064:	bf00      	nop
 8006066:	e000      	b.n	800606a <USB_HC_StartXfer+0x25e>
        break;
 8006068:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	68d9      	ldr	r1, [r3, #12]
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	785a      	ldrb	r2, [r3, #1]
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	b29b      	uxth	r3, r3
 8006078:	2000      	movs	r0, #0
 800607a:	9000      	str	r0, [sp, #0]
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f7ff fb43 	bl	8005708 <USB_WritePacket>
  }

  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3728      	adds	r7, #40	; 0x28
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	1ff80000 	.word	0x1ff80000

08006090 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	b29b      	uxth	r3, r3
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b089      	sub	sp, #36	; 0x24
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
 80060ba:	460b      	mov	r3, r1
 80060bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80060c2:	78fb      	ldrb	r3, [r7, #3]
 80060c4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80060c6:	2300      	movs	r3, #0
 80060c8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	0c9b      	lsrs	r3, r3, #18
 80060da:	f003 0303 	and.w	r3, r3, #3
 80060de:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	015a      	lsls	r2, r3, #5
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	0fdb      	lsrs	r3, r3, #31
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f003 0320 	and.w	r3, r3, #32
 80060fe:	2b20      	cmp	r3, #32
 8006100:	d104      	bne.n	800610c <USB_HC_Halt+0x5a>
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d101      	bne.n	800610c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	e0c6      	b.n	800629a <USB_HC_Halt+0x1e8>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <USB_HC_Halt+0x66>
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	2b02      	cmp	r3, #2
 8006116:	d162      	bne.n	80061de <USB_HC_Halt+0x12c>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	4413      	add	r3, r2
 8006120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	0151      	lsls	r1, r2, #5
 800612a:	69fa      	ldr	r2, [r7, #28]
 800612c:	440a      	add	r2, r1
 800612e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006132:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006136:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f003 0320 	and.w	r3, r3, #32
 8006140:	2b00      	cmp	r3, #0
 8006142:	f040 80a9 	bne.w	8006298 <USB_HC_Halt+0x1e6>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d132      	bne.n	80061b8 <USB_HC_Halt+0x106>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	4413      	add	r3, r2
 800615a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	0151      	lsls	r1, r2, #5
 8006164:	69fa      	ldr	r2, [r7, #28]
 8006166:	440a      	add	r2, r1
 8006168:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800616c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006170:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	015a      	lsls	r2, r3, #5
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	4413      	add	r3, r2
 800617a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	69ba      	ldr	r2, [r7, #24]
 8006182:	0151      	lsls	r1, r2, #5
 8006184:	69fa      	ldr	r2, [r7, #28]
 8006186:	440a      	add	r2, r1
 8006188:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800618c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006190:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	3301      	adds	r3, #1
 8006196:	60fb      	str	r3, [r7, #12]
 8006198:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800619c:	d81d      	bhi.n	80061da <USB_HC_Halt+0x128>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061b4:	d0ed      	beq.n	8006192 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80061b6:	e06f      	b.n	8006298 <USB_HC_Halt+0x1e6>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	0151      	lsls	r1, r2, #5
 80061ca:	69fa      	ldr	r2, [r7, #28]
 80061cc:	440a      	add	r2, r1
 80061ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061d6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80061d8:	e05e      	b.n	8006298 <USB_HC_Halt+0x1e6>
            break;
 80061da:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80061dc:	e05c      	b.n	8006298 <USB_HC_Halt+0x1e6>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	0151      	lsls	r1, r2, #5
 80061f0:	69fa      	ldr	r2, [r7, #28]
 80061f2:	440a      	add	r2, r1
 80061f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061fc:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d132      	bne.n	8006274 <USB_HC_Halt+0x1c2>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	4413      	add	r3, r2
 8006216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	69ba      	ldr	r2, [r7, #24]
 800621e:	0151      	lsls	r1, r2, #5
 8006220:	69fa      	ldr	r2, [r7, #28]
 8006222:	440a      	add	r2, r1
 8006224:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006228:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800622c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	015a      	lsls	r2, r3, #5
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	4413      	add	r3, r2
 8006236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	0151      	lsls	r1, r2, #5
 8006240:	69fa      	ldr	r2, [r7, #28]
 8006242:	440a      	add	r2, r1
 8006244:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006248:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800624c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	3301      	adds	r3, #1
 8006252:	60fb      	str	r3, [r7, #12]
 8006254:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006258:	d81d      	bhi.n	8006296 <USB_HC_Halt+0x1e4>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	4413      	add	r3, r2
 8006262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800626c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006270:	d0ed      	beq.n	800624e <USB_HC_Halt+0x19c>
 8006272:	e011      	b.n	8006298 <USB_HC_Halt+0x1e6>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	4413      	add	r3, r2
 800627c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	0151      	lsls	r1, r2, #5
 8006286:	69fa      	ldr	r2, [r7, #28]
 8006288:	440a      	add	r2, r1
 800628a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800628e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006292:	6013      	str	r3, [r2, #0]
 8006294:	e000      	b.n	8006298 <USB_HC_Halt+0x1e6>
          break;
 8006296:	bf00      	nop
    }
  }

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3724      	adds	r7, #36	; 0x24
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
	...

080062a8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b087      	sub	sp, #28
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	460b      	mov	r3, r1
 80062b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80062b8:	78fb      	ldrb	r3, [r7, #3]
 80062ba:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80062bc:	2301      	movs	r3, #1
 80062be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	04da      	lsls	r2, r3, #19
 80062c4:	4b15      	ldr	r3, [pc, #84]	; (800631c <USB_DoPing+0x74>)
 80062c6:	4013      	ands	r3, r2
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	0151      	lsls	r1, r2, #5
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	440a      	add	r2, r1
 80062d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062d8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	015a      	lsls	r2, r3, #5
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062f0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062f8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	4413      	add	r3, r2
 8006302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006306:	461a      	mov	r2, r3
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	371c      	adds	r7, #28
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	1ff80000 	.word	0x1ff80000

08006320 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b088      	sub	sp, #32
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006328:	2300      	movs	r3, #0
 800632a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006330:	2300      	movs	r3, #0
 8006332:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f7ff f92a 	bl	800558e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800633a:	2110      	movs	r1, #16
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f7ff f983 	bl	8005648 <USB_FlushTxFifo>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f7ff f9ad 	bl	80056ac <USB_FlushRxFifo>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800635c:	2300      	movs	r3, #0
 800635e:	61bb      	str	r3, [r7, #24]
 8006360:	e01f      	b.n	80063a2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	015a      	lsls	r2, r3, #5
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	4413      	add	r3, r2
 800636a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006378:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006380:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006388:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	4413      	add	r3, r2
 8006392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006396:	461a      	mov	r2, r3
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	3301      	adds	r3, #1
 80063a0:	61bb      	str	r3, [r7, #24]
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	2b0f      	cmp	r3, #15
 80063a6:	d9dc      	bls.n	8006362 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80063a8:	2300      	movs	r3, #0
 80063aa:	61bb      	str	r3, [r7, #24]
 80063ac:	e033      	b.n	8006416 <USB_StopHost+0xf6>
  {
    value = USBx_HC(i)->HCCHAR;
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	015a      	lsls	r2, r3, #5
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	4413      	add	r3, r2
 80063b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063c4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063cc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063d4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063e2:	461a      	mov	r2, r3
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	3301      	adds	r3, #1
 80063ec:	60fb      	str	r3, [r7, #12]
 80063ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063f2:	d80c      	bhi.n	800640e <USB_StopHost+0xee>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	015a      	lsls	r2, r3, #5
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	4413      	add	r3, r2
 80063fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006406:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800640a:	d0ed      	beq.n	80063e8 <USB_StopHost+0xc8>
 800640c:	e000      	b.n	8006410 <USB_StopHost+0xf0>
        break;
 800640e:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	3301      	adds	r3, #1
 8006414:	61bb      	str	r3, [r7, #24]
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	2b0f      	cmp	r3, #15
 800641a:	d9c8      	bls.n	80063ae <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006422:	461a      	mov	r2, r3
 8006424:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006428:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006430:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7ff f89a 	bl	800556c <USB_EnableGlobalInt>

  return ret;
 8006438:	7ffb      	ldrb	r3, [r7, #31]
}
 800643a:	4618      	mov	r0, r3
 800643c:	3720      	adds	r7, #32
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
	...

08006444 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8006448:	4904      	ldr	r1, [pc, #16]	; (800645c <MX_FATFS_Init+0x18>)
 800644a:	4805      	ldr	r0, [pc, #20]	; (8006460 <MX_FATFS_Init+0x1c>)
 800644c:	f005 fe2a 	bl	800c0a4 <FATFS_LinkDriver>
 8006450:	4603      	mov	r3, r0
 8006452:	461a      	mov	r2, r3
 8006454:	4b03      	ldr	r3, [pc, #12]	; (8006464 <MX_FATFS_Init+0x20>)
 8006456:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006458:	bf00      	nop
 800645a:	bd80      	pop	{r7, pc}
 800645c:	200001f8 	.word	0x200001f8
 8006460:	0800df28 	.word	0x0800df28
 8006464:	20002260 	.word	0x20002260

08006468 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006468:	b480      	push	{r7}
 800646a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800646c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800646e:	4618      	mov	r0, r3
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	4603      	mov	r3, r0
 8006480:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	4603      	mov	r3, r0
 8006498:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800649e:	79fb      	ldrb	r3, [r7, #7]
 80064a0:	4619      	mov	r1, r3
 80064a2:	4808      	ldr	r0, [pc, #32]	; (80064c4 <USBH_status+0x34>)
 80064a4:	f000 fe1a 	bl	80070dc <USBH_MSC_UnitIsReady>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d002      	beq.n	80064b4 <USBH_status+0x24>
  {
    res = RES_OK;
 80064ae:	2300      	movs	r3, #0
 80064b0:	73fb      	strb	r3, [r7, #15]
 80064b2:	e001      	b.n	80064b8 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	20002264 	.word	0x20002264

080064c8 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b094      	sub	sp, #80	; 0x50
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	60b9      	str	r1, [r7, #8]
 80064d0:	607a      	str	r2, [r7, #4]
 80064d2:	603b      	str	r3, [r7, #0]
 80064d4:	4603      	mov	r3, r0
 80064d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80064de:	7bf9      	ldrb	r1, [r7, #15]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	4813      	ldr	r0, [pc, #76]	; (8006538 <USBH_read+0x70>)
 80064ea:	f000 fe41 	bl	8007170 <USBH_MSC_Read>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d103      	bne.n	80064fc <USBH_read+0x34>
  {
    res = RES_OK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80064fa:	e017      	b.n	800652c <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80064fc:	f107 0210 	add.w	r2, r7, #16
 8006500:	7bfb      	ldrb	r3, [r7, #15]
 8006502:	4619      	mov	r1, r3
 8006504:	480c      	ldr	r0, [pc, #48]	; (8006538 <USBH_read+0x70>)
 8006506:	f000 fe0f 	bl	8007128 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800650a:	7f7b      	ldrb	r3, [r7, #29]
 800650c:	2b3a      	cmp	r3, #58	; 0x3a
 800650e:	d005      	beq.n	800651c <USBH_read+0x54>
 8006510:	2b3a      	cmp	r3, #58	; 0x3a
 8006512:	dc07      	bgt.n	8006524 <USBH_read+0x5c>
 8006514:	2b04      	cmp	r3, #4
 8006516:	d001      	beq.n	800651c <USBH_read+0x54>
 8006518:	2b28      	cmp	r3, #40	; 0x28
 800651a:	d103      	bne.n	8006524 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800651c:	2303      	movs	r3, #3
 800651e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006522:	e003      	b.n	800652c <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800652a:	bf00      	nop
    }
  }

  return res;
 800652c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006530:	4618      	mov	r0, r3
 8006532:	3748      	adds	r7, #72	; 0x48
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	20002264 	.word	0x20002264

0800653c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b094      	sub	sp, #80	; 0x50
 8006540:	af02      	add	r7, sp, #8
 8006542:	60b9      	str	r1, [r7, #8]
 8006544:	607a      	str	r2, [r7, #4]
 8006546:	603b      	str	r3, [r7, #0]
 8006548:	4603      	mov	r3, r0
 800654a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8006552:	7bf9      	ldrb	r1, [r7, #15]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	4817      	ldr	r0, [pc, #92]	; (80065bc <USBH_write+0x80>)
 800655e:	f000 fe70 	bl	8007242 <USBH_MSC_Write>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d103      	bne.n	8006570 <USBH_write+0x34>
  {
    res = RES_OK;
 8006568:	2300      	movs	r3, #0
 800656a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800656e:	e01f      	b.n	80065b0 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8006570:	f107 0210 	add.w	r2, r7, #16
 8006574:	7bfb      	ldrb	r3, [r7, #15]
 8006576:	4619      	mov	r1, r3
 8006578:	4810      	ldr	r0, [pc, #64]	; (80065bc <USBH_write+0x80>)
 800657a:	f000 fdd5 	bl	8007128 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800657e:	7f7b      	ldrb	r3, [r7, #29]
 8006580:	2b3a      	cmp	r3, #58	; 0x3a
 8006582:	d00d      	beq.n	80065a0 <USBH_write+0x64>
 8006584:	2b3a      	cmp	r3, #58	; 0x3a
 8006586:	dc0f      	bgt.n	80065a8 <USBH_write+0x6c>
 8006588:	2b28      	cmp	r3, #40	; 0x28
 800658a:	d009      	beq.n	80065a0 <USBH_write+0x64>
 800658c:	2b28      	cmp	r3, #40	; 0x28
 800658e:	dc0b      	bgt.n	80065a8 <USBH_write+0x6c>
 8006590:	2b04      	cmp	r3, #4
 8006592:	d005      	beq.n	80065a0 <USBH_write+0x64>
 8006594:	2b27      	cmp	r3, #39	; 0x27
 8006596:	d107      	bne.n	80065a8 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8006598:	2302      	movs	r3, #2
 800659a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800659e:	e007      	b.n	80065b0 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80065a0:	2303      	movs	r3, #3
 80065a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80065a6:	e003      	b.n	80065b0 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80065ae:	bf00      	nop
    }
  }

  return res;
 80065b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3748      	adds	r7, #72	; 0x48
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	20002264 	.word	0x20002264

080065c0 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b090      	sub	sp, #64	; 0x40
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	4603      	mov	r3, r0
 80065c8:	603a      	str	r2, [r7, #0]
 80065ca:	71fb      	strb	r3, [r7, #7]
 80065cc:	460b      	mov	r3, r1
 80065ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 80065d6:	79bb      	ldrb	r3, [r7, #6]
 80065d8:	2b03      	cmp	r3, #3
 80065da:	d852      	bhi.n	8006682 <USBH_ioctl+0xc2>
 80065dc:	a201      	add	r2, pc, #4	; (adr r2, 80065e4 <USBH_ioctl+0x24>)
 80065de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e2:	bf00      	nop
 80065e4:	080065f5 	.word	0x080065f5
 80065e8:	080065fd 	.word	0x080065fd
 80065ec:	08006627 	.word	0x08006627
 80065f0:	08006653 	.word	0x08006653
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80065fa:	e045      	b.n	8006688 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80065fc:	f107 0208 	add.w	r2, r7, #8
 8006600:	79fb      	ldrb	r3, [r7, #7]
 8006602:	4619      	mov	r1, r3
 8006604:	4823      	ldr	r0, [pc, #140]	; (8006694 <USBH_ioctl+0xd4>)
 8006606:	f000 fd8f 	bl	8007128 <USBH_MSC_GetLUNInfo>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d106      	bne.n	800661e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006616:	2300      	movs	r3, #0
 8006618:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800661c:	e034      	b.n	8006688 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006624:	e030      	b.n	8006688 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006626:	f107 0208 	add.w	r2, r7, #8
 800662a:	79fb      	ldrb	r3, [r7, #7]
 800662c:	4619      	mov	r1, r3
 800662e:	4819      	ldr	r0, [pc, #100]	; (8006694 <USBH_ioctl+0xd4>)
 8006630:	f000 fd7a 	bl	8007128 <USBH_MSC_GetLUNInfo>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d107      	bne.n	800664a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800663a:	8a3b      	ldrh	r3, [r7, #16]
 800663c:	461a      	mov	r2, r3
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006642:	2300      	movs	r3, #0
 8006644:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006648:	e01e      	b.n	8006688 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006650:	e01a      	b.n	8006688 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006652:	f107 0208 	add.w	r2, r7, #8
 8006656:	79fb      	ldrb	r3, [r7, #7]
 8006658:	4619      	mov	r1, r3
 800665a:	480e      	ldr	r0, [pc, #56]	; (8006694 <USBH_ioctl+0xd4>)
 800665c:	f000 fd64 	bl	8007128 <USBH_MSC_GetLUNInfo>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d109      	bne.n	800667a <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8006666:	8a3b      	ldrh	r3, [r7, #16]
 8006668:	0a5b      	lsrs	r3, r3, #9
 800666a:	b29b      	uxth	r3, r3
 800666c:	461a      	mov	r2, r3
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006672:	2300      	movs	r3, #0
 8006674:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006678:	e006      	b.n	8006688 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006680:	e002      	b.n	8006688 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8006682:	2304      	movs	r3, #4
 8006684:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8006688:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800668c:	4618      	mov	r0, r3
 800668e:	3740      	adds	r7, #64	; 0x40
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	20002264 	.word	0x20002264

08006698 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006698:	b590      	push	{r4, r7, lr}
 800669a:	b089      	sub	sp, #36	; 0x24
 800669c:	af04      	add	r7, sp, #16
 800669e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066a6:	7919      	ldrb	r1, [r3, #4]
 80066a8:	2350      	movs	r3, #80	; 0x50
 80066aa:	2206      	movs	r2, #6
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f001 fc53 	bl	8007f58 <USBH_FindInterface>
 80066b2:	4603      	mov	r3, r0
 80066b4:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80066b6:	7bfb      	ldrb	r3, [r7, #15]
 80066b8:	2bff      	cmp	r3, #255	; 0xff
 80066ba:	d002      	beq.n	80066c2 <USBH_MSC_InterfaceInit+0x2a>
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d901      	bls.n	80066c6 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80066c2:	2302      	movs	r3, #2
 80066c4:	e0ef      	b.n	80068a6 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 80066c6:	7bfb      	ldrb	r3, [r7, #15]
 80066c8:	4619      	mov	r1, r3
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f001 fc28 	bl	8007f20 <USBH_SelectInterface>
 80066d0:	4603      	mov	r3, r0
 80066d2:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80066d4:	7bbb      	ldrb	r3, [r7, #14]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 80066da:	2302      	movs	r3, #2
 80066dc:	e0e3      	b.n	80068a6 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80066e4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80066e8:	f006 f89a 	bl	800c820 <malloc>
 80066ec:	4603      	mov	r3, r0
 80066ee:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066f6:	69db      	ldr	r3, [r3, #28]
 80066f8:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d101      	bne.n	8006704 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8006700:	2302      	movs	r3, #2
 8006702:	e0d0      	b.n	80068a6 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8006704:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006708:	2100      	movs	r1, #0
 800670a:	68b8      	ldr	r0, [r7, #8]
 800670c:	f006 f8a6 	bl	800c85c <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006710:	7bfb      	ldrb	r3, [r7, #15]
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	211a      	movs	r1, #26
 8006716:	fb01 f303 	mul.w	r3, r1, r3
 800671a:	4413      	add	r3, r2
 800671c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	b25b      	sxtb	r3, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	da16      	bge.n	8006756 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8006728:	7bfb      	ldrb	r3, [r7, #15]
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	211a      	movs	r1, #26
 800672e:	fb01 f303 	mul.w	r3, r1, r3
 8006732:	4413      	add	r3, r2
 8006734:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006738:	781a      	ldrb	r2, [r3, #0]
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800673e:	7bfb      	ldrb	r3, [r7, #15]
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	211a      	movs	r1, #26
 8006744:	fb01 f303 	mul.w	r3, r1, r3
 8006748:	4413      	add	r3, r2
 800674a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800674e:	881a      	ldrh	r2, [r3, #0]
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	815a      	strh	r2, [r3, #10]
 8006754:	e015      	b.n	8006782 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8006756:	7bfb      	ldrb	r3, [r7, #15]
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	211a      	movs	r1, #26
 800675c:	fb01 f303 	mul.w	r3, r1, r3
 8006760:	4413      	add	r3, r2
 8006762:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006766:	781a      	ldrb	r2, [r3, #0]
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800676c:	7bfb      	ldrb	r3, [r7, #15]
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	211a      	movs	r1, #26
 8006772:	fb01 f303 	mul.w	r3, r1, r3
 8006776:	4413      	add	r3, r2
 8006778:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800677c:	881a      	ldrh	r2, [r3, #0]
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006782:	7bfb      	ldrb	r3, [r7, #15]
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	211a      	movs	r1, #26
 8006788:	fb01 f303 	mul.w	r3, r1, r3
 800678c:	4413      	add	r3, r2
 800678e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	b25b      	sxtb	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	da16      	bge.n	80067c8 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800679a:	7bfb      	ldrb	r3, [r7, #15]
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	211a      	movs	r1, #26
 80067a0:	fb01 f303 	mul.w	r3, r1, r3
 80067a4:	4413      	add	r3, r2
 80067a6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80067aa:	781a      	ldrb	r2, [r3, #0]
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80067b0:	7bfb      	ldrb	r3, [r7, #15]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	211a      	movs	r1, #26
 80067b6:	fb01 f303 	mul.w	r3, r1, r3
 80067ba:	4413      	add	r3, r2
 80067bc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80067c0:	881a      	ldrh	r2, [r3, #0]
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	815a      	strh	r2, [r3, #10]
 80067c6:	e015      	b.n	80067f4 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80067c8:	7bfb      	ldrb	r3, [r7, #15]
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	211a      	movs	r1, #26
 80067ce:	fb01 f303 	mul.w	r3, r1, r3
 80067d2:	4413      	add	r3, r2
 80067d4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80067d8:	781a      	ldrb	r2, [r3, #0]
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80067de:	7bfb      	ldrb	r3, [r7, #15]
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	211a      	movs	r1, #26
 80067e4:	fb01 f303 	mul.w	r3, r1, r3
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80067ee:	881a      	ldrh	r2, [r3, #0]
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	2200      	movs	r2, #0
 80067f8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	2200      	movs	r2, #0
 80067fe:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	2200      	movs	r2, #0
 8006804:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	799b      	ldrb	r3, [r3, #6]
 800680a:	4619      	mov	r1, r3
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f002 fdc4 	bl	800939a <USBH_AllocPipe>
 8006812:	4603      	mov	r3, r0
 8006814:	461a      	mov	r2, r3
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	79db      	ldrb	r3, [r3, #7]
 800681e:	4619      	mov	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f002 fdba 	bl	800939a <USBH_AllocPipe>
 8006826:	4603      	mov	r3, r0
 8006828:	461a      	mov	r2, r3
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fdac 	bl	800738c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	7959      	ldrb	r1, [r3, #5]
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	7998      	ldrb	r0, [r3, #6]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006848:	68ba      	ldr	r2, [r7, #8]
 800684a:	8912      	ldrh	r2, [r2, #8]
 800684c:	9202      	str	r2, [sp, #8]
 800684e:	2202      	movs	r2, #2
 8006850:	9201      	str	r2, [sp, #4]
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	4623      	mov	r3, r4
 8006856:	4602      	mov	r2, r0
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f002 fd6f 	bl	800933c <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	7919      	ldrb	r1, [r3, #4]
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	79d8      	ldrb	r0, [r3, #7]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	8952      	ldrh	r2, [r2, #10]
 8006876:	9202      	str	r2, [sp, #8]
 8006878:	2202      	movs	r2, #2
 800687a:	9201      	str	r2, [sp, #4]
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	4623      	mov	r3, r4
 8006880:	4602      	mov	r2, r0
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f002 fd5a 	bl	800933c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	791b      	ldrb	r3, [r3, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	4619      	mov	r1, r3
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f005 fee7 	bl	800c664 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	795b      	ldrb	r3, [r3, #5]
 800689a:	2200      	movs	r2, #0
 800689c:	4619      	mov	r1, r3
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f005 fee0 	bl	800c664 <USBH_LL_SetToggle>

  return USBH_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd90      	pop	{r4, r7, pc}

080068ae <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b084      	sub	sp, #16
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068bc:	69db      	ldr	r3, [r3, #28]
 80068be:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	795b      	ldrb	r3, [r3, #5]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00e      	beq.n	80068e6 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	795b      	ldrb	r3, [r3, #5]
 80068cc:	4619      	mov	r1, r3
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f002 fd53 	bl	800937a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	795b      	ldrb	r3, [r3, #5]
 80068d8:	4619      	mov	r1, r3
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f002 fd7e 	bl	80093dc <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	791b      	ldrb	r3, [r3, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00e      	beq.n	800690c <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	791b      	ldrb	r3, [r3, #4]
 80068f2:	4619      	mov	r1, r3
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f002 fd40 	bl	800937a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	791b      	ldrb	r3, [r3, #4]
 80068fe:	4619      	mov	r1, r3
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f002 fd6b 	bl	80093dc <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006912:	69db      	ldr	r3, [r3, #28]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00b      	beq.n	8006930 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800691e:	69db      	ldr	r3, [r3, #28]
 8006920:	4618      	mov	r0, r3
 8006922:	f005 ff85 	bl	800c830 <free>
    phost->pActiveClass->pData = 0U;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800692c:	2200      	movs	r2, #0
 800692e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b084      	sub	sp, #16
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800694c:	2301      	movs	r3, #1
 800694e:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	7b9b      	ldrb	r3, [r3, #14]
 8006954:	2b03      	cmp	r3, #3
 8006956:	d041      	beq.n	80069dc <USBH_MSC_ClassRequest+0xa2>
 8006958:	2b03      	cmp	r3, #3
 800695a:	dc4b      	bgt.n	80069f4 <USBH_MSC_ClassRequest+0xba>
 800695c:	2b00      	cmp	r3, #0
 800695e:	d001      	beq.n	8006964 <USBH_MSC_ClassRequest+0x2a>
 8006960:	2b02      	cmp	r3, #2
 8006962:	d147      	bne.n	80069f4 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	4619      	mov	r1, r3
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fcf0 	bl	800734e <USBH_MSC_BOT_REQ_GetMaxLUN>
 800696e:	4603      	mov	r3, r0
 8006970:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8006972:	7bfb      	ldrb	r3, [r7, #15]
 8006974:	2b03      	cmp	r3, #3
 8006976:	d104      	bne.n	8006982 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	2200      	movs	r2, #0
 800697c:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800697e:	2300      	movs	r3, #0
 8006980:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8006982:	7bfb      	ldrb	r3, [r7, #15]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d137      	bne.n	80069f8 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	2b02      	cmp	r3, #2
 800698e:	d804      	bhi.n	800699a <USBH_MSC_ClassRequest+0x60>
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	3301      	adds	r3, #1
 8006996:	b2da      	uxtb	r2, r3
 8006998:	e000      	b.n	800699c <USBH_MSC_ClassRequest+0x62>
 800699a:	2202      	movs	r2, #2
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80069a0:	2300      	movs	r3, #0
 80069a2:	73bb      	strb	r3, [r7, #14]
 80069a4:	e014      	b.n	80069d0 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80069a6:	7bbb      	ldrb	r3, [r7, #14]
 80069a8:	68ba      	ldr	r2, [r7, #8]
 80069aa:	2134      	movs	r1, #52	; 0x34
 80069ac:	fb01 f303 	mul.w	r3, r1, r3
 80069b0:	4413      	add	r3, r2
 80069b2:	3392      	adds	r3, #146	; 0x92
 80069b4:	2202      	movs	r2, #2
 80069b6:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 80069b8:	7bbb      	ldrb	r3, [r7, #14]
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	2134      	movs	r1, #52	; 0x34
 80069be:	fb01 f303 	mul.w	r3, r1, r3
 80069c2:	4413      	add	r3, r2
 80069c4:	33c1      	adds	r3, #193	; 0xc1
 80069c6:	2200      	movs	r2, #0
 80069c8:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80069ca:	7bbb      	ldrb	r3, [r7, #14]
 80069cc:	3301      	adds	r3, #1
 80069ce:	73bb      	strb	r3, [r7, #14]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	7bba      	ldrb	r2, [r7, #14]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d3e5      	bcc.n	80069a6 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 80069da:	e00d      	b.n	80069f8 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 80069dc:	2100      	movs	r1, #0
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f002 f87b 	bl	8008ada <USBH_ClrFeature>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d108      	bne.n	80069fc <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	7bda      	ldrb	r2, [r3, #15]
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	739a      	strb	r2, [r3, #14]
      }
      break;
 80069f2:	e003      	b.n	80069fc <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 80069f4:	bf00      	nop
 80069f6:	e002      	b.n	80069fe <USBH_MSC_ClassRequest+0xc4>
      break;
 80069f8:	bf00      	nop
 80069fa:	e000      	b.n	80069fe <USBH_MSC_ClassRequest+0xc4>
      break;
 80069fc:	bf00      	nop
  }

  return status;
 80069fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a16:	69db      	ldr	r3, [r3, #28]
 8006a18:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8006a22:	2301      	movs	r3, #1
 8006a24:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	7b1b      	ldrb	r3, [r3, #12]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d003      	beq.n	8006a36 <USBH_MSC_Process+0x2e>
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	f000 8271 	beq.w	8006f16 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8006a34:	e272      	b.n	8006f1c <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	429a      	cmp	r2, r3
 8006a44:	f080 824f 	bcs.w	8006ee6 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006a4e:	4619      	mov	r1, r3
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	2334      	movs	r3, #52	; 0x34
 8006a54:	fb03 f301 	mul.w	r3, r3, r1
 8006a58:	4413      	add	r3, r2
 8006a5a:	3391      	adds	r3, #145	; 0x91
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006a66:	4619      	mov	r1, r3
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	2334      	movs	r3, #52	; 0x34
 8006a6c:	fb03 f301 	mul.w	r3, r3, r1
 8006a70:	4413      	add	r3, r2
 8006a72:	3390      	adds	r3, #144	; 0x90
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	2b08      	cmp	r3, #8
 8006a78:	f200 8243 	bhi.w	8006f02 <USBH_MSC_Process+0x4fa>
 8006a7c:	a201      	add	r2, pc, #4	; (adr r2, 8006a84 <USBH_MSC_Process+0x7c>)
 8006a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a82:	bf00      	nop
 8006a84:	08006aa9 	.word	0x08006aa9
 8006a88:	08006f03 	.word	0x08006f03
 8006a8c:	08006b71 	.word	0x08006b71
 8006a90:	08006cf5 	.word	0x08006cf5
 8006a94:	08006acf 	.word	0x08006acf
 8006a98:	08006dc1 	.word	0x08006dc1
 8006a9c:	08006f03 	.word	0x08006f03
 8006aa0:	08006f03 	.word	0x08006f03
 8006aa4:	08006ed5 	.word	0x08006ed5
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006aae:	4619      	mov	r1, r3
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	2334      	movs	r3, #52	; 0x34
 8006ab4:	fb03 f301 	mul.w	r3, r3, r1
 8006ab8:	4413      	add	r3, r2
 8006aba:	3390      	adds	r3, #144	; 0x90
 8006abc:	2204      	movs	r2, #4
 8006abe:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8006acc:	e222      	b.n	8006f14 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006ad4:	b2d9      	uxtb	r1, r3
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006adc:	461a      	mov	r2, r3
 8006ade:	2334      	movs	r3, #52	; 0x34
 8006ae0:	fb03 f302 	mul.w	r3, r3, r2
 8006ae4:	3398      	adds	r3, #152	; 0x98
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	4413      	add	r3, r2
 8006aea:	3307      	adds	r3, #7
 8006aec:	461a      	mov	r2, r3
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 ff6a 	bl	80079c8 <USBH_MSC_SCSI_Inquiry>
 8006af4:	4603      	mov	r3, r0
 8006af6:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10b      	bne.n	8006b16 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006b04:	4619      	mov	r1, r3
 8006b06:	693a      	ldr	r2, [r7, #16]
 8006b08:	2334      	movs	r3, #52	; 0x34
 8006b0a:	fb03 f301 	mul.w	r3, r3, r1
 8006b0e:	4413      	add	r3, r2
 8006b10:	3390      	adds	r3, #144	; 0x90
 8006b12:	2202      	movs	r2, #2
 8006b14:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8006b16:	7bfb      	ldrb	r3, [r7, #15]
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d10c      	bne.n	8006b36 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006b22:	4619      	mov	r1, r3
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	2334      	movs	r3, #52	; 0x34
 8006b28:	fb03 f301 	mul.w	r3, r3, r1
 8006b2c:	4413      	add	r3, r2
 8006b2e:	3390      	adds	r3, #144	; 0x90
 8006b30:	2205      	movs	r2, #5
 8006b32:	701a      	strb	r2, [r3, #0]
            break;
 8006b34:	e1e7      	b.n	8006f06 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006b36:	7bfb      	ldrb	r3, [r7, #15]
 8006b38:	2b04      	cmp	r3, #4
 8006b3a:	f040 81e4 	bne.w	8006f06 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006b44:	4619      	mov	r1, r3
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	2334      	movs	r3, #52	; 0x34
 8006b4a:	fb03 f301 	mul.w	r3, r3, r1
 8006b4e:	4413      	add	r3, r2
 8006b50:	3390      	adds	r3, #144	; 0x90
 8006b52:	2201      	movs	r2, #1
 8006b54:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	2334      	movs	r3, #52	; 0x34
 8006b62:	fb03 f301 	mul.w	r3, r3, r1
 8006b66:	4413      	add	r3, r2
 8006b68:	3391      	adds	r3, #145	; 0x91
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	701a      	strb	r2, [r3, #0]
            break;
 8006b6e:	e1ca      	b.n	8006f06 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	4619      	mov	r1, r3
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fe66 	bl	800784c <USBH_MSC_SCSI_TestUnitReady>
 8006b80:	4603      	mov	r3, r0
 8006b82:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8006b84:	7bbb      	ldrb	r3, [r7, #14]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d149      	bne.n	8006c1e <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006b90:	4619      	mov	r1, r3
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	2334      	movs	r3, #52	; 0x34
 8006b96:	fb03 f301 	mul.w	r3, r3, r1
 8006b9a:	4413      	add	r3, r2
 8006b9c:	3392      	adds	r3, #146	; 0x92
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00c      	beq.n	8006bbe <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006baa:	4619      	mov	r1, r3
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	2334      	movs	r3, #52	; 0x34
 8006bb0:	fb03 f301 	mul.w	r3, r3, r1
 8006bb4:	4413      	add	r3, r2
 8006bb6:	33c1      	adds	r3, #193	; 0xc1
 8006bb8:	2201      	movs	r2, #1
 8006bba:	701a      	strb	r2, [r3, #0]
 8006bbc:	e00b      	b.n	8006bd6 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	2334      	movs	r3, #52	; 0x34
 8006bca:	fb03 f301 	mul.w	r3, r3, r1
 8006bce:	4413      	add	r3, r2
 8006bd0:	33c1      	adds	r3, #193	; 0xc1
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006bdc:	4619      	mov	r1, r3
 8006bde:	693a      	ldr	r2, [r7, #16]
 8006be0:	2334      	movs	r3, #52	; 0x34
 8006be2:	fb03 f301 	mul.w	r3, r3, r1
 8006be6:	4413      	add	r3, r2
 8006be8:	3390      	adds	r3, #144	; 0x90
 8006bea:	2203      	movs	r2, #3
 8006bec:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	2334      	movs	r3, #52	; 0x34
 8006bfa:	fb03 f301 	mul.w	r3, r3, r1
 8006bfe:	4413      	add	r3, r2
 8006c00:	3391      	adds	r3, #145	; 0x91
 8006c02:	2200      	movs	r2, #0
 8006c04:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	2334      	movs	r3, #52	; 0x34
 8006c12:	fb03 f301 	mul.w	r3, r3, r1
 8006c16:	4413      	add	r3, r2
 8006c18:	3392      	adds	r3, #146	; 0x92
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8006c1e:	7bbb      	ldrb	r3, [r7, #14]
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d14a      	bne.n	8006cba <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	2334      	movs	r3, #52	; 0x34
 8006c30:	fb03 f301 	mul.w	r3, r3, r1
 8006c34:	4413      	add	r3, r2
 8006c36:	3392      	adds	r3, #146	; 0x92
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d00c      	beq.n	8006c58 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006c44:	4619      	mov	r1, r3
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	2334      	movs	r3, #52	; 0x34
 8006c4a:	fb03 f301 	mul.w	r3, r3, r1
 8006c4e:	4413      	add	r3, r2
 8006c50:	33c1      	adds	r3, #193	; 0xc1
 8006c52:	2201      	movs	r2, #1
 8006c54:	701a      	strb	r2, [r3, #0]
 8006c56:	e00b      	b.n	8006c70 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006c5e:	4619      	mov	r1, r3
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	2334      	movs	r3, #52	; 0x34
 8006c64:	fb03 f301 	mul.w	r3, r3, r1
 8006c68:	4413      	add	r3, r2
 8006c6a:	33c1      	adds	r3, #193	; 0xc1
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006c76:	4619      	mov	r1, r3
 8006c78:	693a      	ldr	r2, [r7, #16]
 8006c7a:	2334      	movs	r3, #52	; 0x34
 8006c7c:	fb03 f301 	mul.w	r3, r3, r1
 8006c80:	4413      	add	r3, r2
 8006c82:	3390      	adds	r3, #144	; 0x90
 8006c84:	2205      	movs	r2, #5
 8006c86:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006c8e:	4619      	mov	r1, r3
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	2334      	movs	r3, #52	; 0x34
 8006c94:	fb03 f301 	mul.w	r3, r3, r1
 8006c98:	4413      	add	r3, r2
 8006c9a:	3391      	adds	r3, #145	; 0x91
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	2334      	movs	r3, #52	; 0x34
 8006cac:	fb03 f301 	mul.w	r3, r3, r1
 8006cb0:	4413      	add	r3, r2
 8006cb2:	3392      	adds	r3, #146	; 0x92
 8006cb4:	2202      	movs	r2, #2
 8006cb6:	701a      	strb	r2, [r3, #0]
            break;
 8006cb8:	e127      	b.n	8006f0a <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8006cba:	7bbb      	ldrb	r3, [r7, #14]
 8006cbc:	2b04      	cmp	r3, #4
 8006cbe:	f040 8124 	bne.w	8006f0a <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006cc8:	4619      	mov	r1, r3
 8006cca:	693a      	ldr	r2, [r7, #16]
 8006ccc:	2334      	movs	r3, #52	; 0x34
 8006cce:	fb03 f301 	mul.w	r3, r3, r1
 8006cd2:	4413      	add	r3, r2
 8006cd4:	3390      	adds	r3, #144	; 0x90
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	693a      	ldr	r2, [r7, #16]
 8006ce4:	2334      	movs	r3, #52	; 0x34
 8006ce6:	fb03 f301 	mul.w	r3, r3, r1
 8006cea:	4413      	add	r3, r2
 8006cec:	3391      	adds	r3, #145	; 0x91
 8006cee:	2202      	movs	r2, #2
 8006cf0:	701a      	strb	r2, [r3, #0]
            break;
 8006cf2:	e10a      	b.n	8006f0a <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006cfa:	b2d9      	uxtb	r1, r3
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006d02:	461a      	mov	r2, r3
 8006d04:	2334      	movs	r3, #52	; 0x34
 8006d06:	fb03 f302 	mul.w	r3, r3, r2
 8006d0a:	3390      	adds	r3, #144	; 0x90
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	4413      	add	r3, r2
 8006d10:	3304      	adds	r3, #4
 8006d12:	461a      	mov	r2, r3
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fddc 	bl	80078d2 <USBH_MSC_SCSI_ReadCapacity>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d120      	bne.n	8006d66 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	2334      	movs	r3, #52	; 0x34
 8006d30:	fb03 f301 	mul.w	r3, r3, r1
 8006d34:	4413      	add	r3, r2
 8006d36:	3390      	adds	r3, #144	; 0x90
 8006d38:	2201      	movs	r2, #1
 8006d3a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006d42:	4619      	mov	r1, r3
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	2334      	movs	r3, #52	; 0x34
 8006d48:	fb03 f301 	mul.w	r3, r3, r1
 8006d4c:	4413      	add	r3, r2
 8006d4e:	3391      	adds	r3, #145	; 0x91
 8006d50:	2200      	movs	r2, #0
 8006d52:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8006d64:	e0d3      	b.n	8006f0e <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8006d66:	7bfb      	ldrb	r3, [r7, #15]
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d10c      	bne.n	8006d86 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006d72:	4619      	mov	r1, r3
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	2334      	movs	r3, #52	; 0x34
 8006d78:	fb03 f301 	mul.w	r3, r3, r1
 8006d7c:	4413      	add	r3, r2
 8006d7e:	3390      	adds	r3, #144	; 0x90
 8006d80:	2205      	movs	r2, #5
 8006d82:	701a      	strb	r2, [r3, #0]
            break;
 8006d84:	e0c3      	b.n	8006f0e <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006d86:	7bfb      	ldrb	r3, [r7, #15]
 8006d88:	2b04      	cmp	r3, #4
 8006d8a:	f040 80c0 	bne.w	8006f0e <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006d94:	4619      	mov	r1, r3
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	2334      	movs	r3, #52	; 0x34
 8006d9a:	fb03 f301 	mul.w	r3, r3, r1
 8006d9e:	4413      	add	r3, r2
 8006da0:	3390      	adds	r3, #144	; 0x90
 8006da2:	2201      	movs	r2, #1
 8006da4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006dac:	4619      	mov	r1, r3
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	2334      	movs	r3, #52	; 0x34
 8006db2:	fb03 f301 	mul.w	r3, r3, r1
 8006db6:	4413      	add	r3, r2
 8006db8:	3391      	adds	r3, #145	; 0x91
 8006dba:	2202      	movs	r2, #2
 8006dbc:	701a      	strb	r2, [r3, #0]
            break;
 8006dbe:	e0a6      	b.n	8006f0e <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006dc6:	b2d9      	uxtb	r1, r3
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006dce:	461a      	mov	r2, r3
 8006dd0:	2334      	movs	r3, #52	; 0x34
 8006dd2:	fb03 f302 	mul.w	r3, r3, r2
 8006dd6:	3398      	adds	r3, #152	; 0x98
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	4413      	add	r3, r2
 8006ddc:	3304      	adds	r3, #4
 8006dde:	461a      	mov	r2, r3
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 fe96 	bl	8007b12 <USBH_MSC_SCSI_RequestSense>
 8006de6:	4603      	mov	r3, r0
 8006de8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006dea:	7bfb      	ldrb	r3, [r7, #15]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d145      	bne.n	8006e7c <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006df6:	4619      	mov	r1, r3
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	2334      	movs	r3, #52	; 0x34
 8006dfc:	fb03 f301 	mul.w	r3, r3, r1
 8006e00:	4413      	add	r3, r2
 8006e02:	339c      	adds	r3, #156	; 0x9c
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	2b06      	cmp	r3, #6
 8006e08:	d00c      	beq.n	8006e24 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006e10:	4619      	mov	r1, r3
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	2334      	movs	r3, #52	; 0x34
 8006e16:	fb03 f301 	mul.w	r3, r3, r1
 8006e1a:	4413      	add	r3, r2
 8006e1c:	339c      	adds	r3, #156	; 0x9c
 8006e1e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d117      	bne.n	8006e54 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	f242 720f 	movw	r2, #9999	; 0x270f
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d80c      	bhi.n	8006e54 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006e40:	4619      	mov	r1, r3
 8006e42:	693a      	ldr	r2, [r7, #16]
 8006e44:	2334      	movs	r3, #52	; 0x34
 8006e46:	fb03 f301 	mul.w	r3, r3, r1
 8006e4a:	4413      	add	r3, r2
 8006e4c:	3390      	adds	r3, #144	; 0x90
 8006e4e:	2202      	movs	r2, #2
 8006e50:	701a      	strb	r2, [r3, #0]
                  break;
 8006e52:	e05f      	b.n	8006f14 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	2334      	movs	r3, #52	; 0x34
 8006e60:	fb03 f301 	mul.w	r3, r3, r1
 8006e64:	4413      	add	r3, r2
 8006e66:	3390      	adds	r3, #144	; 0x90
 8006e68:	2201      	movs	r2, #1
 8006e6a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006e72:	3301      	adds	r3, #1
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d10c      	bne.n	8006e9c <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006e88:	4619      	mov	r1, r3
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	2334      	movs	r3, #52	; 0x34
 8006e8e:	fb03 f301 	mul.w	r3, r3, r1
 8006e92:	4413      	add	r3, r2
 8006e94:	3390      	adds	r3, #144	; 0x90
 8006e96:	2208      	movs	r2, #8
 8006e98:	701a      	strb	r2, [r3, #0]
            break;
 8006e9a:	e03a      	b.n	8006f12 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
 8006e9e:	2b04      	cmp	r3, #4
 8006ea0:	d137      	bne.n	8006f12 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	2334      	movs	r3, #52	; 0x34
 8006eae:	fb03 f301 	mul.w	r3, r3, r1
 8006eb2:	4413      	add	r3, r2
 8006eb4:	3390      	adds	r3, #144	; 0x90
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	693a      	ldr	r2, [r7, #16]
 8006ec4:	2334      	movs	r3, #52	; 0x34
 8006ec6:	fb03 f301 	mul.w	r3, r3, r1
 8006eca:	4413      	add	r3, r2
 8006ecc:	3391      	adds	r3, #145	; 0x91
 8006ece:	2202      	movs	r2, #2
 8006ed0:	701a      	strb	r2, [r3, #0]
            break;
 8006ed2:	e01e      	b.n	8006f12 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006eda:	3301      	adds	r3, #1
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8006ee4:	e016      	b.n	8006f14 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006efa:	2102      	movs	r1, #2
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	4798      	blx	r3
      break;
 8006f00:	e00c      	b.n	8006f1c <USBH_MSC_Process+0x514>
            break;
 8006f02:	bf00      	nop
 8006f04:	e00a      	b.n	8006f1c <USBH_MSC_Process+0x514>
            break;
 8006f06:	bf00      	nop
 8006f08:	e008      	b.n	8006f1c <USBH_MSC_Process+0x514>
            break;
 8006f0a:	bf00      	nop
 8006f0c:	e006      	b.n	8006f1c <USBH_MSC_Process+0x514>
            break;
 8006f0e:	bf00      	nop
 8006f10:	e004      	b.n	8006f1c <USBH_MSC_Process+0x514>
            break;
 8006f12:	bf00      	nop
      break;
 8006f14:	e002      	b.n	8006f1c <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	75fb      	strb	r3, [r7, #23]
      break;
 8006f1a:	bf00      	nop
  }
  return error;
 8006f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3718      	adds	r7, #24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop

08006f28 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b088      	sub	sp, #32
 8006f42:	af02      	add	r7, sp, #8
 8006f44:	6078      	str	r0, [r7, #4]
 8006f46:	460b      	mov	r3, r1
 8006f48:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f50:	69db      	ldr	r3, [r3, #28]
 8006f52:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8006f54:	2301      	movs	r3, #1
 8006f56:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8006f5c:	78fb      	ldrb	r3, [r7, #3]
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	2134      	movs	r1, #52	; 0x34
 8006f62:	fb01 f303 	mul.w	r3, r1, r3
 8006f66:	4413      	add	r3, r2
 8006f68:	3390      	adds	r3, #144	; 0x90
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	2b07      	cmp	r3, #7
 8006f6e:	d03c      	beq.n	8006fea <USBH_MSC_RdWrProcess+0xac>
 8006f70:	2b07      	cmp	r3, #7
 8006f72:	f300 80a7 	bgt.w	80070c4 <USBH_MSC_RdWrProcess+0x186>
 8006f76:	2b05      	cmp	r3, #5
 8006f78:	d06c      	beq.n	8007054 <USBH_MSC_RdWrProcess+0x116>
 8006f7a:	2b06      	cmp	r3, #6
 8006f7c:	f040 80a2 	bne.w	80070c4 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8006f80:	78f9      	ldrb	r1, [r7, #3]
 8006f82:	2300      	movs	r3, #0
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	2300      	movs	r3, #0
 8006f88:	2200      	movs	r2, #0
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fea5 	bl	8007cda <USBH_MSC_SCSI_Read>
 8006f90:	4603      	mov	r3, r0
 8006f92:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8006f94:	7bfb      	ldrb	r3, [r7, #15]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10b      	bne.n	8006fb2 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006f9a:	78fb      	ldrb	r3, [r7, #3]
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	2134      	movs	r1, #52	; 0x34
 8006fa0:	fb01 f303 	mul.w	r3, r1, r3
 8006fa4:	4413      	add	r3, r2
 8006fa6:	3390      	adds	r3, #144	; 0x90
 8006fa8:	2201      	movs	r2, #1
 8006faa:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8006fac:	2300      	movs	r3, #0
 8006fae:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006fb0:	e08a      	b.n	80070c8 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d109      	bne.n	8006fcc <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8006fb8:	78fb      	ldrb	r3, [r7, #3]
 8006fba:	693a      	ldr	r2, [r7, #16]
 8006fbc:	2134      	movs	r1, #52	; 0x34
 8006fbe:	fb01 f303 	mul.w	r3, r1, r3
 8006fc2:	4413      	add	r3, r2
 8006fc4:	3390      	adds	r3, #144	; 0x90
 8006fc6:	2205      	movs	r2, #5
 8006fc8:	701a      	strb	r2, [r3, #0]
      break;
 8006fca:	e07d      	b.n	80070c8 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006fcc:	7bfb      	ldrb	r3, [r7, #15]
 8006fce:	2b04      	cmp	r3, #4
 8006fd0:	d17a      	bne.n	80070c8 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006fd2:	78fb      	ldrb	r3, [r7, #3]
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	2134      	movs	r1, #52	; 0x34
 8006fd8:	fb01 f303 	mul.w	r3, r1, r3
 8006fdc:	4413      	add	r3, r2
 8006fde:	3390      	adds	r3, #144	; 0x90
 8006fe0:	2208      	movs	r2, #8
 8006fe2:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8006fe8:	e06e      	b.n	80070c8 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8006fea:	78f9      	ldrb	r1, [r7, #3]
 8006fec:	2300      	movs	r3, #0
 8006fee:	9300      	str	r3, [sp, #0]
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 fe05 	bl	8007c04 <USBH_MSC_SCSI_Write>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8006ffe:	7bfb      	ldrb	r3, [r7, #15]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d10b      	bne.n	800701c <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007004:	78fb      	ldrb	r3, [r7, #3]
 8007006:	693a      	ldr	r2, [r7, #16]
 8007008:	2134      	movs	r1, #52	; 0x34
 800700a:	fb01 f303 	mul.w	r3, r1, r3
 800700e:	4413      	add	r3, r2
 8007010:	3390      	adds	r3, #144	; 0x90
 8007012:	2201      	movs	r2, #1
 8007014:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8007016:	2300      	movs	r3, #0
 8007018:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800701a:	e057      	b.n	80070cc <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800701c:	7bfb      	ldrb	r3, [r7, #15]
 800701e:	2b02      	cmp	r3, #2
 8007020:	d109      	bne.n	8007036 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8007022:	78fb      	ldrb	r3, [r7, #3]
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	2134      	movs	r1, #52	; 0x34
 8007028:	fb01 f303 	mul.w	r3, r1, r3
 800702c:	4413      	add	r3, r2
 800702e:	3390      	adds	r3, #144	; 0x90
 8007030:	2205      	movs	r2, #5
 8007032:	701a      	strb	r2, [r3, #0]
      break;
 8007034:	e04a      	b.n	80070cc <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007036:	7bfb      	ldrb	r3, [r7, #15]
 8007038:	2b04      	cmp	r3, #4
 800703a:	d147      	bne.n	80070cc <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800703c:	78fb      	ldrb	r3, [r7, #3]
 800703e:	693a      	ldr	r2, [r7, #16]
 8007040:	2134      	movs	r1, #52	; 0x34
 8007042:	fb01 f303 	mul.w	r3, r1, r3
 8007046:	4413      	add	r3, r2
 8007048:	3390      	adds	r3, #144	; 0x90
 800704a:	2208      	movs	r2, #8
 800704c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800704e:	2302      	movs	r3, #2
 8007050:	75fb      	strb	r3, [r7, #23]
      break;
 8007052:	e03b      	b.n	80070cc <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8007054:	78fb      	ldrb	r3, [r7, #3]
 8007056:	2234      	movs	r2, #52	; 0x34
 8007058:	fb02 f303 	mul.w	r3, r2, r3
 800705c:	3398      	adds	r3, #152	; 0x98
 800705e:	693a      	ldr	r2, [r7, #16]
 8007060:	4413      	add	r3, r2
 8007062:	1d1a      	adds	r2, r3, #4
 8007064:	78fb      	ldrb	r3, [r7, #3]
 8007066:	4619      	mov	r1, r3
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fd52 	bl	8007b12 <USBH_MSC_SCSI_RequestSense>
 800706e:	4603      	mov	r3, r0
 8007070:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8007072:	7bfb      	ldrb	r3, [r7, #15]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d113      	bne.n	80070a0 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007078:	78fb      	ldrb	r3, [r7, #3]
 800707a:	693a      	ldr	r2, [r7, #16]
 800707c:	2134      	movs	r1, #52	; 0x34
 800707e:	fb01 f303 	mul.w	r3, r1, r3
 8007082:	4413      	add	r3, r2
 8007084:	3390      	adds	r3, #144	; 0x90
 8007086:	2201      	movs	r2, #1
 8007088:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800708a:	78fb      	ldrb	r3, [r7, #3]
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	2134      	movs	r1, #52	; 0x34
 8007090:	fb01 f303 	mul.w	r3, r1, r3
 8007094:	4413      	add	r3, r2
 8007096:	3391      	adds	r3, #145	; 0x91
 8007098:	2202      	movs	r2, #2
 800709a:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800709c:	2302      	movs	r3, #2
 800709e:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 80070a0:	7bfb      	ldrb	r3, [r7, #15]
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d014      	beq.n	80070d0 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80070a6:	7bfb      	ldrb	r3, [r7, #15]
 80070a8:	2b04      	cmp	r3, #4
 80070aa:	d111      	bne.n	80070d0 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80070ac:	78fb      	ldrb	r3, [r7, #3]
 80070ae:	693a      	ldr	r2, [r7, #16]
 80070b0:	2134      	movs	r1, #52	; 0x34
 80070b2:	fb01 f303 	mul.w	r3, r1, r3
 80070b6:	4413      	add	r3, r2
 80070b8:	3390      	adds	r3, #144	; 0x90
 80070ba:	2208      	movs	r2, #8
 80070bc:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80070be:	2302      	movs	r3, #2
 80070c0:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80070c2:	e005      	b.n	80070d0 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 80070c4:	bf00      	nop
 80070c6:	e004      	b.n	80070d2 <USBH_MSC_RdWrProcess+0x194>
      break;
 80070c8:	bf00      	nop
 80070ca:	e002      	b.n	80070d2 <USBH_MSC_RdWrProcess+0x194>
      break;
 80070cc:	bf00      	nop
 80070ce:	e000      	b.n	80070d2 <USBH_MSC_RdWrProcess+0x194>
      break;
 80070d0:	bf00      	nop

  }
  return error;
 80070d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3718      	adds	r7, #24
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	460b      	mov	r3, r1
 80070e6:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070ee:	69db      	ldr	r3, [r3, #28]
 80070f0:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b0b      	cmp	r3, #11
 80070fa:	d10c      	bne.n	8007116 <USBH_MSC_UnitIsReady+0x3a>
 80070fc:	78fb      	ldrb	r3, [r7, #3]
 80070fe:	68ba      	ldr	r2, [r7, #8]
 8007100:	2134      	movs	r1, #52	; 0x34
 8007102:	fb01 f303 	mul.w	r3, r1, r3
 8007106:	4413      	add	r3, r2
 8007108:	3391      	adds	r3, #145	; 0x91
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d102      	bne.n	8007116 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8007110:	2301      	movs	r3, #1
 8007112:	73fb      	strb	r3, [r7, #15]
 8007114:	e001      	b.n	800711a <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8007116:	2300      	movs	r3, #0
 8007118:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800711a:	7bfb      	ldrb	r3, [r7, #15]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3714      	adds	r7, #20
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	460b      	mov	r3, r1
 8007132:	607a      	str	r2, [r7, #4]
 8007134:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800713c:	69db      	ldr	r3, [r3, #28]
 800713e:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b0b      	cmp	r3, #11
 8007148:	d10d      	bne.n	8007166 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800714a:	7afb      	ldrb	r3, [r7, #11]
 800714c:	2234      	movs	r2, #52	; 0x34
 800714e:	fb02 f303 	mul.w	r3, r2, r3
 8007152:	3390      	adds	r3, #144	; 0x90
 8007154:	697a      	ldr	r2, [r7, #20]
 8007156:	4413      	add	r3, r2
 8007158:	2234      	movs	r2, #52	; 0x34
 800715a:	4619      	mov	r1, r3
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f005 fb6f 	bl	800c840 <memcpy>
    return USBH_OK;
 8007162:	2300      	movs	r3, #0
 8007164:	e000      	b.n	8007168 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8007166:	2302      	movs	r3, #2
  }
}
 8007168:	4618      	mov	r0, r3
 800716a:	3718      	adds	r7, #24
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b088      	sub	sp, #32
 8007174:	af02      	add	r7, sp, #8
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	607a      	str	r2, [r7, #4]
 800717a:	603b      	str	r3, [r7, #0]
 800717c:	460b      	mov	r3, r1
 800717e:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007186:	69db      	ldr	r3, [r3, #28]
 8007188:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00e      	beq.n	80071b4 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800719c:	2b0b      	cmp	r3, #11
 800719e:	d109      	bne.n	80071b4 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80071a0:	7afb      	ldrb	r3, [r7, #11]
 80071a2:	697a      	ldr	r2, [r7, #20]
 80071a4:	2134      	movs	r1, #52	; 0x34
 80071a6:	fb01 f303 	mul.w	r3, r1, r3
 80071aa:	4413      	add	r3, r2
 80071ac:	3390      	adds	r3, #144	; 0x90
 80071ae:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d001      	beq.n	80071b8 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 80071b4:	2302      	movs	r3, #2
 80071b6:	e040      	b.n	800723a <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	2206      	movs	r2, #6
 80071bc:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 80071be:	7afb      	ldrb	r3, [r7, #11]
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	2134      	movs	r1, #52	; 0x34
 80071c4:	fb01 f303 	mul.w	r3, r1, r3
 80071c8:	4413      	add	r3, r2
 80071ca:	3390      	adds	r3, #144	; 0x90
 80071cc:	2206      	movs	r2, #6
 80071ce:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80071d0:	7afb      	ldrb	r3, [r7, #11]
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 80071da:	7af9      	ldrb	r1, [r7, #11]
 80071dc:	6a3b      	ldr	r3, [r7, #32]
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f000 fd78 	bl	8007cda <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80071f0:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80071f2:	e016      	b.n	8007222 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	1ad2      	subs	r2, r2, r3
 80071fe:	6a3b      	ldr	r3, [r7, #32]
 8007200:	f242 7110 	movw	r1, #10000	; 0x2710
 8007204:	fb01 f303 	mul.w	r3, r1, r3
 8007208:	429a      	cmp	r2, r3
 800720a:	d805      	bhi.n	8007218 <USBH_MSC_Read+0xa8>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b00      	cmp	r3, #0
 8007216:	d104      	bne.n	8007222 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	2201      	movs	r2, #1
 800721c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800721e:	2302      	movs	r3, #2
 8007220:	e00b      	b.n	800723a <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007222:	7afb      	ldrb	r3, [r7, #11]
 8007224:	4619      	mov	r1, r3
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f7ff fe89 	bl	8006f3e <USBH_MSC_RdWrProcess>
 800722c:	4603      	mov	r3, r0
 800722e:	2b01      	cmp	r3, #1
 8007230:	d0e0      	beq.n	80071f4 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	2201      	movs	r2, #1
 8007236:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3718      	adds	r7, #24
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b088      	sub	sp, #32
 8007246:	af02      	add	r7, sp, #8
 8007248:	60f8      	str	r0, [r7, #12]
 800724a:	607a      	str	r2, [r7, #4]
 800724c:	603b      	str	r3, [r7, #0]
 800724e:	460b      	mov	r3, r1
 8007250:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007258:	69db      	ldr	r3, [r3, #28]
 800725a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00e      	beq.n	8007286 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800726e:	2b0b      	cmp	r3, #11
 8007270:	d109      	bne.n	8007286 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8007272:	7afb      	ldrb	r3, [r7, #11]
 8007274:	697a      	ldr	r2, [r7, #20]
 8007276:	2134      	movs	r1, #52	; 0x34
 8007278:	fb01 f303 	mul.w	r3, r1, r3
 800727c:	4413      	add	r3, r2
 800727e:	3390      	adds	r3, #144	; 0x90
 8007280:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8007282:	2b01      	cmp	r3, #1
 8007284:	d001      	beq.n	800728a <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8007286:	2302      	movs	r3, #2
 8007288:	e040      	b.n	800730c <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	2207      	movs	r2, #7
 800728e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8007290:	7afb      	ldrb	r3, [r7, #11]
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	2134      	movs	r1, #52	; 0x34
 8007296:	fb01 f303 	mul.w	r3, r1, r3
 800729a:	4413      	add	r3, r2
 800729c:	3390      	adds	r3, #144	; 0x90
 800729e:	2207      	movs	r2, #7
 80072a0:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80072a2:	7afb      	ldrb	r3, [r7, #11]
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80072ac:	7af9      	ldrb	r1, [r7, #11]
 80072ae:	6a3b      	ldr	r3, [r7, #32]
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f000 fca4 	bl	8007c04 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80072c2:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80072c4:	e016      	b.n	80072f4 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	1ad2      	subs	r2, r2, r3
 80072d0:	6a3b      	ldr	r3, [r7, #32]
 80072d2:	f242 7110 	movw	r1, #10000	; 0x2710
 80072d6:	fb01 f303 	mul.w	r3, r1, r3
 80072da:	429a      	cmp	r2, r3
 80072dc:	d805      	bhi.n	80072ea <USBH_MSC_Write+0xa8>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d104      	bne.n	80072f4 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	2201      	movs	r2, #1
 80072ee:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80072f0:	2302      	movs	r3, #2
 80072f2:	e00b      	b.n	800730c <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80072f4:	7afb      	ldrb	r3, [r7, #11]
 80072f6:	4619      	mov	r1, r3
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f7ff fe20 	bl	8006f3e <USBH_MSC_RdWrProcess>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b01      	cmp	r3, #1
 8007302:	d0e0      	beq.n	80072c6 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	2201      	movs	r2, #1
 8007308:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3718      	adds	r7, #24
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2221      	movs	r2, #33	; 0x21
 8007320:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	22ff      	movs	r2, #255	; 0xff
 8007326:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800733a:	2200      	movs	r2, #0
 800733c:	2100      	movs	r1, #0
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f001 fdab 	bl	8008e9a <USBH_CtlReq>
 8007344:	4603      	mov	r3, r0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3708      	adds	r7, #8
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b082      	sub	sp, #8
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
 8007356:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	22a1      	movs	r2, #161	; 0xa1
 800735c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	22fe      	movs	r2, #254	; 0xfe
 8007362:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8007376:	2201      	movs	r2, #1
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f001 fd8d 	bl	8008e9a <USBH_CtlReq>
 8007380:	4603      	mov	r3, r0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
	...

0800738c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800739a:	69db      	ldr	r3, [r3, #28]
 800739c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	4a09      	ldr	r2, [pc, #36]	; (80073c8 <USBH_MSC_BOT_Init+0x3c>)
 80073a2:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	4a09      	ldr	r2, [pc, #36]	; (80073cc <USBH_MSC_BOT_Init+0x40>)
 80073a8:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2201      	movs	r2, #1
 80073ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3714      	adds	r7, #20
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr
 80073c8:	43425355 	.word	0x43425355
 80073cc:	20304050 	.word	0x20304050

080073d0 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b088      	sub	sp, #32
 80073d4:	af02      	add	r7, sp, #8
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	460b      	mov	r3, r1
 80073da:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80073dc:	2301      	movs	r3, #1
 80073de:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 80073e0:	2301      	movs	r3, #1
 80073e2:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 80073e4:	2301      	movs	r3, #1
 80073e6:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80073e8:	2300      	movs	r3, #0
 80073ea:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073f2:	69db      	ldr	r3, [r3, #28]
 80073f4:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 80073f6:	2300      	movs	r3, #0
 80073f8:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007400:	3b01      	subs	r3, #1
 8007402:	2b0a      	cmp	r3, #10
 8007404:	f200 819e 	bhi.w	8007744 <USBH_MSC_BOT_Process+0x374>
 8007408:	a201      	add	r2, pc, #4	; (adr r2, 8007410 <USBH_MSC_BOT_Process+0x40>)
 800740a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740e:	bf00      	nop
 8007410:	0800743d 	.word	0x0800743d
 8007414:	08007465 	.word	0x08007465
 8007418:	080074cf 	.word	0x080074cf
 800741c:	080074ed 	.word	0x080074ed
 8007420:	08007571 	.word	0x08007571
 8007424:	08007593 	.word	0x08007593
 8007428:	0800762b 	.word	0x0800762b
 800742c:	08007647 	.word	0x08007647
 8007430:	08007699 	.word	0x08007699
 8007434:	080076c9 	.word	0x080076c9
 8007438:	0800772b 	.word	0x0800772b
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	78fa      	ldrb	r2, [r7, #3]
 8007440:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	2202      	movs	r2, #2
 8007448:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	795b      	ldrb	r3, [r3, #5]
 8007456:	2201      	movs	r2, #1
 8007458:	9200      	str	r2, [sp, #0]
 800745a:	221f      	movs	r2, #31
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f001 ff2a 	bl	80092b6 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8007462:	e17e      	b.n	8007762 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	795b      	ldrb	r3, [r3, #5]
 8007468:	4619      	mov	r1, r3
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f005 f8d0 	bl	800c610 <USBH_LL_GetURBState>
 8007470:	4603      	mov	r3, r0
 8007472:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007474:	7d3b      	ldrb	r3, [r7, #20]
 8007476:	2b01      	cmp	r3, #1
 8007478:	d118      	bne.n	80074ac <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00f      	beq.n	80074a2 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007488:	b25b      	sxtb	r3, r3
 800748a:	2b00      	cmp	r3, #0
 800748c:	da04      	bge.n	8007498 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	2203      	movs	r2, #3
 8007492:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007496:	e157      	b.n	8007748 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	2205      	movs	r2, #5
 800749c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80074a0:	e152      	b.n	8007748 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	2207      	movs	r2, #7
 80074a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80074aa:	e14d      	b.n	8007748 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 80074ac:	7d3b      	ldrb	r3, [r7, #20]
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d104      	bne.n	80074bc <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80074ba:	e145      	b.n	8007748 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 80074bc:	7d3b      	ldrb	r3, [r7, #20]
 80074be:	2b05      	cmp	r3, #5
 80074c0:	f040 8142 	bne.w	8007748 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	220a      	movs	r2, #10
 80074c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80074cc:	e13c      	b.n	8007748 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	895a      	ldrh	r2, [r3, #10]
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	791b      	ldrb	r3, [r3, #4]
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f001 ff0f 	bl	8009300 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	2204      	movs	r2, #4
 80074e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 80074ea:	e13a      	b.n	8007762 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	791b      	ldrb	r3, [r3, #4]
 80074f0:	4619      	mov	r1, r3
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f005 f88c 	bl	800c610 <USBH_LL_GetURBState>
 80074f8:	4603      	mov	r3, r0
 80074fa:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80074fc:	7d3b      	ldrb	r3, [r7, #20]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d12d      	bne.n	800755e <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007506:	693a      	ldr	r2, [r7, #16]
 8007508:	8952      	ldrh	r2, [r2, #10]
 800750a:	4293      	cmp	r3, r2
 800750c:	d910      	bls.n	8007530 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007514:	693a      	ldr	r2, [r7, #16]
 8007516:	8952      	ldrh	r2, [r2, #10]
 8007518:	441a      	add	r2, r3
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	8952      	ldrh	r2, [r2, #10]
 8007528:	1a9a      	subs	r2, r3, r2
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	65da      	str	r2, [r3, #92]	; 0x5c
 800752e:	e002      	b.n	8007536 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	2200      	movs	r2, #0
 8007534:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00a      	beq.n	8007554 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	895a      	ldrh	r2, [r3, #10]
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	791b      	ldrb	r3, [r3, #4]
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f001 fed7 	bl	8009300 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8007552:	e0fb      	b.n	800774c <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	2207      	movs	r2, #7
 8007558:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800755c:	e0f6      	b.n	800774c <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800755e:	7d3b      	ldrb	r3, [r7, #20]
 8007560:	2b05      	cmp	r3, #5
 8007562:	f040 80f3 	bne.w	800774c <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	2209      	movs	r2, #9
 800756a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800756e:	e0ed      	b.n	800774c <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	891a      	ldrh	r2, [r3, #8]
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	795b      	ldrb	r3, [r3, #5]
 800757e:	2001      	movs	r0, #1
 8007580:	9000      	str	r0, [sp, #0]
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f001 fe97 	bl	80092b6 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	2206      	movs	r2, #6
 800758c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007590:	e0e7      	b.n	8007762 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	795b      	ldrb	r3, [r3, #5]
 8007596:	4619      	mov	r1, r3
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f005 f839 	bl	800c610 <USBH_LL_GetURBState>
 800759e:	4603      	mov	r3, r0
 80075a0:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80075a2:	7d3b      	ldrb	r3, [r7, #20]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d12f      	bne.n	8007608 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	8912      	ldrh	r2, [r2, #8]
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d910      	bls.n	80075d6 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075ba:	693a      	ldr	r2, [r7, #16]
 80075bc:	8912      	ldrh	r2, [r2, #8]
 80075be:	441a      	add	r2, r3
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	8912      	ldrh	r2, [r2, #8]
 80075ce:	1a9a      	subs	r2, r3, r2
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80075d4:	e002      	b.n	80075dc <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	2200      	movs	r2, #0
 80075da:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d00c      	beq.n	80075fe <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	891a      	ldrh	r2, [r3, #8]
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	795b      	ldrb	r3, [r3, #5]
 80075f2:	2001      	movs	r0, #1
 80075f4:	9000      	str	r0, [sp, #0]
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f001 fe5d 	bl	80092b6 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 80075fc:	e0a8      	b.n	8007750 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	2207      	movs	r2, #7
 8007602:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007606:	e0a3      	b.n	8007750 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007608:	7d3b      	ldrb	r3, [r7, #20]
 800760a:	2b02      	cmp	r3, #2
 800760c:	d104      	bne.n	8007618 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	2205      	movs	r2, #5
 8007612:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007616:	e09b      	b.n	8007750 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8007618:	7d3b      	ldrb	r3, [r7, #20]
 800761a:	2b05      	cmp	r3, #5
 800761c:	f040 8098 	bne.w	8007750 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	220a      	movs	r2, #10
 8007624:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007628:	e092      	b.n	8007750 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	791b      	ldrb	r3, [r3, #4]
 8007634:	220d      	movs	r2, #13
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f001 fe62 	bl	8009300 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	2208      	movs	r2, #8
 8007640:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007644:	e08d      	b.n	8007762 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	791b      	ldrb	r3, [r3, #4]
 800764a:	4619      	mov	r1, r3
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f004 ffdf 	bl	800c610 <USBH_LL_GetURBState>
 8007652:	4603      	mov	r3, r0
 8007654:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8007656:	7d3b      	ldrb	r3, [r7, #20]
 8007658:	2b01      	cmp	r3, #1
 800765a:	d115      	bne.n	8007688 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 f8a9 	bl	80077c4 <USBH_MSC_DecodeCSW>
 8007672:	4603      	mov	r3, r0
 8007674:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8007676:	7d7b      	ldrb	r3, [r7, #21]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d102      	bne.n	8007682 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800767c:	2300      	movs	r3, #0
 800767e:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8007680:	e068      	b.n	8007754 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8007682:	2302      	movs	r3, #2
 8007684:	75fb      	strb	r3, [r7, #23]
      break;
 8007686:	e065      	b.n	8007754 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8007688:	7d3b      	ldrb	r3, [r7, #20]
 800768a:	2b05      	cmp	r3, #5
 800768c:	d162      	bne.n	8007754 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	2209      	movs	r2, #9
 8007692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007696:	e05d      	b.n	8007754 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8007698:	78fb      	ldrb	r3, [r7, #3]
 800769a:	2200      	movs	r2, #0
 800769c:	4619      	mov	r1, r3
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f864 	bl	800776c <USBH_MSC_BOT_Abort>
 80076a4:	4603      	mov	r3, r0
 80076a6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80076a8:	7dbb      	ldrb	r3, [r7, #22]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d104      	bne.n	80076b8 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	2207      	movs	r2, #7
 80076b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 80076b6:	e04f      	b.n	8007758 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 80076b8:	7dbb      	ldrb	r3, [r7, #22]
 80076ba:	2b04      	cmp	r3, #4
 80076bc:	d14c      	bne.n	8007758 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	220b      	movs	r2, #11
 80076c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80076c6:	e047      	b.n	8007758 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 80076c8:	78fb      	ldrb	r3, [r7, #3]
 80076ca:	2201      	movs	r2, #1
 80076cc:	4619      	mov	r1, r3
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f84c 	bl	800776c <USBH_MSC_BOT_Abort>
 80076d4:	4603      	mov	r3, r0
 80076d6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80076d8:	7dbb      	ldrb	r3, [r7, #22]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d11d      	bne.n	800771a <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	795b      	ldrb	r3, [r3, #5]
 80076e2:	4619      	mov	r1, r3
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f004 ffed 	bl	800c6c4 <USBH_LL_GetToggle>
 80076ea:	4603      	mov	r3, r0
 80076ec:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	7959      	ldrb	r1, [r3, #5]
 80076f2:	7bfb      	ldrb	r3, [r7, #15]
 80076f4:	f1c3 0301 	rsb	r3, r3, #1
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	461a      	mov	r2, r3
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f004 ffb1 	bl	800c664 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	791b      	ldrb	r3, [r3, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	4619      	mov	r1, r3
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f004 ffaa 	bl	800c664 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	2209      	movs	r2, #9
 8007714:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8007718:	e020      	b.n	800775c <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800771a:	7dbb      	ldrb	r3, [r7, #22]
 800771c:	2b04      	cmp	r3, #4
 800771e:	d11d      	bne.n	800775c <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	220b      	movs	r2, #11
 8007724:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007728:	e018      	b.n	800775c <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f7ff fdf2 	bl	8007314 <USBH_MSC_BOT_REQ_Reset>
 8007730:	4603      	mov	r3, r0
 8007732:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8007734:	7dfb      	ldrb	r3, [r7, #23]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d112      	bne.n	8007760 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	2201      	movs	r2, #1
 800773e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8007742:	e00d      	b.n	8007760 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8007744:	bf00      	nop
 8007746:	e00c      	b.n	8007762 <USBH_MSC_BOT_Process+0x392>
      break;
 8007748:	bf00      	nop
 800774a:	e00a      	b.n	8007762 <USBH_MSC_BOT_Process+0x392>
      break;
 800774c:	bf00      	nop
 800774e:	e008      	b.n	8007762 <USBH_MSC_BOT_Process+0x392>
      break;
 8007750:	bf00      	nop
 8007752:	e006      	b.n	8007762 <USBH_MSC_BOT_Process+0x392>
      break;
 8007754:	bf00      	nop
 8007756:	e004      	b.n	8007762 <USBH_MSC_BOT_Process+0x392>
      break;
 8007758:	bf00      	nop
 800775a:	e002      	b.n	8007762 <USBH_MSC_BOT_Process+0x392>
      break;
 800775c:	bf00      	nop
 800775e:	e000      	b.n	8007762 <USBH_MSC_BOT_Process+0x392>
      break;
 8007760:	bf00      	nop
  }
  return status;
 8007762:	7dfb      	ldrb	r3, [r7, #23]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3718      	adds	r7, #24
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	460b      	mov	r3, r1
 8007776:	70fb      	strb	r3, [r7, #3]
 8007778:	4613      	mov	r3, r2
 800777a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800777c:	2302      	movs	r3, #2
 800777e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007786:	69db      	ldr	r3, [r3, #28]
 8007788:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800778a:	78bb      	ldrb	r3, [r7, #2]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d002      	beq.n	8007796 <USBH_MSC_BOT_Abort+0x2a>
 8007790:	2b01      	cmp	r3, #1
 8007792:	d009      	beq.n	80077a8 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8007794:	e011      	b.n	80077ba <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	79db      	ldrb	r3, [r3, #7]
 800779a:	4619      	mov	r1, r3
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f001 f99c 	bl	8008ada <USBH_ClrFeature>
 80077a2:	4603      	mov	r3, r0
 80077a4:	73fb      	strb	r3, [r7, #15]
      break;
 80077a6:	e008      	b.n	80077ba <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	799b      	ldrb	r3, [r3, #6]
 80077ac:	4619      	mov	r1, r3
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f001 f993 	bl	8008ada <USBH_ClrFeature>
 80077b4:	4603      	mov	r3, r0
 80077b6:	73fb      	strb	r3, [r7, #15]
      break;
 80077b8:	bf00      	nop
  }
  return status;
 80077ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077d2:	69db      	ldr	r3, [r3, #28]
 80077d4:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 80077d6:	2301      	movs	r3, #1
 80077d8:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	791b      	ldrb	r3, [r3, #4]
 80077de:	4619      	mov	r1, r3
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f004 fe83 	bl	800c4ec <USBH_LL_GetLastXferSize>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b0d      	cmp	r3, #13
 80077ea:	d002      	beq.n	80077f2 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 80077ec:	2302      	movs	r3, #2
 80077ee:	73fb      	strb	r3, [r7, #15]
 80077f0:	e024      	b.n	800783c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077f6:	4a14      	ldr	r2, [pc, #80]	; (8007848 <USBH_MSC_DecodeCSW+0x84>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d11d      	bne.n	8007838 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007804:	429a      	cmp	r2, r3
 8007806:	d119      	bne.n	800783c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800780e:	2b00      	cmp	r3, #0
 8007810:	d102      	bne.n	8007818 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8007812:	2300      	movs	r3, #0
 8007814:	73fb      	strb	r3, [r7, #15]
 8007816:	e011      	b.n	800783c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800781e:	2b01      	cmp	r3, #1
 8007820:	d102      	bne.n	8007828 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8007822:	2301      	movs	r3, #1
 8007824:	73fb      	strb	r3, [r7, #15]
 8007826:	e009      	b.n	800783c <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800782e:	2b02      	cmp	r3, #2
 8007830:	d104      	bne.n	800783c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8007832:	2302      	movs	r3, #2
 8007834:	73fb      	strb	r3, [r7, #15]
 8007836:	e001      	b.n	800783c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8007838:	2302      	movs	r3, #2
 800783a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800783c:	7bfb      	ldrb	r3, [r7, #15]
}
 800783e:	4618      	mov	r0, r3
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	53425355 	.word	0x53425355

0800784c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	460b      	mov	r3, r1
 8007856:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007858:	2302      	movs	r3, #2
 800785a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007862:	69db      	ldr	r3, [r3, #28]
 8007864:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800786c:	2b01      	cmp	r3, #1
 800786e:	d002      	beq.n	8007876 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8007870:	2b02      	cmp	r3, #2
 8007872:	d021      	beq.n	80078b8 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007874:	e028      	b.n	80078c8 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	2200      	movs	r2, #0
 800787a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	220a      	movs	r2, #10
 8007888:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	3363      	adds	r3, #99	; 0x63
 8007890:	2210      	movs	r2, #16
 8007892:	2100      	movs	r1, #0
 8007894:	4618      	mov	r0, r3
 8007896:	f004 ffe1 	bl	800c85c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	2201      	movs	r2, #1
 80078a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	2202      	movs	r2, #2
 80078ae:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 80078b2:	2301      	movs	r3, #1
 80078b4:	73fb      	strb	r3, [r7, #15]
      break;
 80078b6:	e007      	b.n	80078c8 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 80078b8:	78fb      	ldrb	r3, [r7, #3]
 80078ba:	4619      	mov	r1, r3
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f7ff fd87 	bl	80073d0 <USBH_MSC_BOT_Process>
 80078c2:	4603      	mov	r3, r0
 80078c4:	73fb      	strb	r3, [r7, #15]
      break;
 80078c6:	bf00      	nop
  }

  return error;
 80078c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b086      	sub	sp, #24
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	60f8      	str	r0, [r7, #12]
 80078da:	460b      	mov	r3, r1
 80078dc:	607a      	str	r2, [r7, #4]
 80078de:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 80078e0:	2301      	movs	r3, #1
 80078e2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078ea:	69db      	ldr	r3, [r3, #28]
 80078ec:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d002      	beq.n	80078fe <USBH_MSC_SCSI_ReadCapacity+0x2c>
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d027      	beq.n	800794c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 80078fc:	e05f      	b.n	80079be <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	2208      	movs	r2, #8
 8007902:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	2280      	movs	r2, #128	; 0x80
 8007908:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	220a      	movs	r2, #10
 8007910:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	3363      	adds	r3, #99	; 0x63
 8007918:	2210      	movs	r2, #16
 800791a:	2100      	movs	r1, #0
 800791c:	4618      	mov	r0, r3
 800791e:	f004 ff9d 	bl	800c85c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	2225      	movs	r2, #37	; 0x25
 8007926:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	2201      	movs	r2, #1
 800792e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	2202      	movs	r2, #2
 8007936:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	f103 0210 	add.w	r2, r3, #16
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007946:	2301      	movs	r3, #1
 8007948:	75fb      	strb	r3, [r7, #23]
      break;
 800794a:	e038      	b.n	80079be <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800794c:	7afb      	ldrb	r3, [r7, #11]
 800794e:	4619      	mov	r1, r3
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f7ff fd3d 	bl	80073d0 <USBH_MSC_BOT_Process>
 8007956:	4603      	mov	r3, r0
 8007958:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800795a:	7dfb      	ldrb	r3, [r7, #23]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d12d      	bne.n	80079bc <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007966:	3303      	adds	r3, #3
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	461a      	mov	r2, r3
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007972:	3302      	adds	r3, #2
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	021b      	lsls	r3, r3, #8
 8007978:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007980:	3301      	adds	r3, #1
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007986:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	061b      	lsls	r3, r3, #24
 8007992:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800799e:	3307      	adds	r3, #7
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079aa:	3306      	adds	r3, #6
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	021b      	lsls	r3, r3, #8
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	4313      	orrs	r3, r2
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	809a      	strh	r2, [r3, #4]
      break;
 80079bc:	bf00      	nop
  }

  return error;
 80079be:	7dfb      	ldrb	r3, [r7, #23]
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3718      	adds	r7, #24
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	460b      	mov	r3, r1
 80079d2:	607a      	str	r2, [r7, #4]
 80079d4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 80079d6:	2302      	movs	r3, #2
 80079d8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079e0:	69db      	ldr	r3, [r3, #28]
 80079e2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d002      	beq.n	80079f4 <USBH_MSC_SCSI_Inquiry+0x2c>
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	d03d      	beq.n	8007a6e <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 80079f2:	e089      	b.n	8007b08 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	2224      	movs	r2, #36	; 0x24
 80079f8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	2280      	movs	r2, #128	; 0x80
 80079fe:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	220a      	movs	r2, #10
 8007a06:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	3363      	adds	r3, #99	; 0x63
 8007a0e:	220a      	movs	r2, #10
 8007a10:	2100      	movs	r1, #0
 8007a12:	4618      	mov	r0, r3
 8007a14:	f004 ff22 	bl	800c85c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	2212      	movs	r2, #18
 8007a1c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8007a20:	7afb      	ldrb	r3, [r7, #11]
 8007a22:	015b      	lsls	r3, r3, #5
 8007a24:	b2da      	uxtb	r2, r3
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	2224      	movs	r2, #36	; 0x24
 8007a40:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	2202      	movs	r2, #2
 8007a58:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	f103 0210 	add.w	r2, r3, #16
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a6c:	e04c      	b.n	8007b08 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007a6e:	7afb      	ldrb	r3, [r7, #11]
 8007a70:	4619      	mov	r1, r3
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f7ff fcac 	bl	80073d0 <USBH_MSC_BOT_Process>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007a7c:	7dfb      	ldrb	r3, [r7, #23]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d141      	bne.n	8007b06 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8007a82:	2222      	movs	r2, #34	; 0x22
 8007a84:	2100      	movs	r1, #0
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f004 fee8 	bl	800c85c <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	f003 031f 	and.w	r3, r3, #31
 8007a98:	b2da      	uxtb	r2, r3
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	095b      	lsrs	r3, r3, #5
 8007aa8:	b2da      	uxtb	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	b25b      	sxtb	r3, r3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	da03      	bge.n	8007ac6 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	709a      	strb	r2, [r3, #2]
 8007ac4:	e002      	b.n	8007acc <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	1cd8      	adds	r0, r3, #3
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ad6:	3308      	adds	r3, #8
 8007ad8:	2208      	movs	r2, #8
 8007ada:	4619      	mov	r1, r3
 8007adc:	f004 feb0 	bl	800c840 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f103 000c 	add.w	r0, r3, #12
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007aec:	3310      	adds	r3, #16
 8007aee:	2210      	movs	r2, #16
 8007af0:	4619      	mov	r1, r3
 8007af2:	f004 fea5 	bl	800c840 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	331d      	adds	r3, #29
 8007afa:	693a      	ldr	r2, [r7, #16]
 8007afc:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8007b00:	3220      	adds	r2, #32
 8007b02:	6812      	ldr	r2, [r2, #0]
 8007b04:	601a      	str	r2, [r3, #0]
      break;
 8007b06:	bf00      	nop
  }

  return error;
 8007b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3718      	adds	r7, #24
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b086      	sub	sp, #24
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	60f8      	str	r0, [r7, #12]
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	607a      	str	r2, [r7, #4]
 8007b1e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007b20:	2302      	movs	r3, #2
 8007b22:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b2a:	69db      	ldr	r3, [r3, #28]
 8007b2c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d002      	beq.n	8007b3e <USBH_MSC_SCSI_RequestSense+0x2c>
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d03d      	beq.n	8007bb8 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8007b3c:	e05d      	b.n	8007bfa <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	220e      	movs	r2, #14
 8007b42:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	2280      	movs	r2, #128	; 0x80
 8007b48:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	220a      	movs	r2, #10
 8007b50:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	3363      	adds	r3, #99	; 0x63
 8007b58:	2210      	movs	r2, #16
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f004 fe7d 	bl	800c85c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	2203      	movs	r2, #3
 8007b66:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8007b6a:	7afb      	ldrb	r3, [r7, #11]
 8007b6c:	015b      	lsls	r3, r3, #5
 8007b6e:	b2da      	uxtb	r2, r3
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	220e      	movs	r2, #14
 8007b8a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	2202      	movs	r2, #2
 8007ba2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	f103 0210 	add.w	r2, r3, #16
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	75fb      	strb	r3, [r7, #23]
      break;
 8007bb6:	e020      	b.n	8007bfa <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007bb8:	7afb      	ldrb	r3, [r7, #11]
 8007bba:	4619      	mov	r1, r3
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f7ff fc07 	bl	80073d0 <USBH_MSC_BOT_Process>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007bc6:	7dfb      	ldrb	r3, [r7, #23]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d115      	bne.n	8007bf8 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bd2:	3302      	adds	r3, #2
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	f003 030f 	and.w	r3, r3, #15
 8007bda:	b2da      	uxtb	r2, r3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007be6:	7b1a      	ldrb	r2, [r3, #12]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bf2:	7b5a      	ldrb	r2, [r3, #13]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	709a      	strb	r2, [r3, #2]
      break;
 8007bf8:	bf00      	nop
  }

  return error;
 8007bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3718      	adds	r7, #24
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b086      	sub	sp, #24
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	607a      	str	r2, [r7, #4]
 8007c0e:	603b      	str	r3, [r7, #0]
 8007c10:	460b      	mov	r3, r1
 8007c12:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007c14:	2302      	movs	r3, #2
 8007c16:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c1e:	69db      	ldr	r3, [r3, #28]
 8007c20:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d002      	beq.n	8007c32 <USBH_MSC_SCSI_Write+0x2e>
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d047      	beq.n	8007cc0 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007c30:	e04e      	b.n	8007cd0 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8007c38:	461a      	mov	r2, r3
 8007c3a:	6a3b      	ldr	r3, [r7, #32]
 8007c3c:	fb03 f202 	mul.w	r2, r3, r2
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	220a      	movs	r2, #10
 8007c50:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	3363      	adds	r3, #99	; 0x63
 8007c58:	2210      	movs	r2, #16
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f004 fdfd 	bl	800c85c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	222a      	movs	r2, #42	; 0x2a
 8007c66:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8007c6a:	79fa      	ldrb	r2, [r7, #7]
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8007c72:	79ba      	ldrb	r2, [r7, #6]
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8007c7a:	797a      	ldrb	r2, [r7, #5]
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8007c82:	1d3b      	adds	r3, r7, #4
 8007c84:	781a      	ldrb	r2, [r3, #0]
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8007c8c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8007c96:	f107 0320 	add.w	r3, r7, #32
 8007c9a:	781a      	ldrb	r2, [r3, #0]
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	2202      	movs	r2, #2
 8007cae:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	683a      	ldr	r2, [r7, #0]
 8007cb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	75fb      	strb	r3, [r7, #23]
      break;
 8007cbe:	e007      	b.n	8007cd0 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007cc0:	7afb      	ldrb	r3, [r7, #11]
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	f7ff fb83 	bl	80073d0 <USBH_MSC_BOT_Process>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	75fb      	strb	r3, [r7, #23]
      break;
 8007cce:	bf00      	nop
  }

  return error;
 8007cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3718      	adds	r7, #24
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b086      	sub	sp, #24
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	60f8      	str	r0, [r7, #12]
 8007ce2:	607a      	str	r2, [r7, #4]
 8007ce4:	603b      	str	r3, [r7, #0]
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007cea:	2302      	movs	r3, #2
 8007cec:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cf4:	69db      	ldr	r3, [r3, #28]
 8007cf6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d002      	beq.n	8007d08 <USBH_MSC_SCSI_Read+0x2e>
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d047      	beq.n	8007d96 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007d06:	e04e      	b.n	8007da6 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8007d0e:	461a      	mov	r2, r3
 8007d10:	6a3b      	ldr	r3, [r7, #32]
 8007d12:	fb03 f202 	mul.w	r2, r3, r2
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	2280      	movs	r2, #128	; 0x80
 8007d1e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	220a      	movs	r2, #10
 8007d26:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	3363      	adds	r3, #99	; 0x63
 8007d2e:	2210      	movs	r2, #16
 8007d30:	2100      	movs	r1, #0
 8007d32:	4618      	mov	r0, r3
 8007d34:	f004 fd92 	bl	800c85c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	2228      	movs	r2, #40	; 0x28
 8007d3c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8007d40:	79fa      	ldrb	r2, [r7, #7]
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8007d48:	79ba      	ldrb	r2, [r7, #6]
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8007d50:	797a      	ldrb	r2, [r7, #5]
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8007d58:	1d3b      	adds	r3, r7, #4
 8007d5a:	781a      	ldrb	r2, [r3, #0]
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8007d62:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8007d6c:	f107 0320 	add.w	r3, r7, #32
 8007d70:	781a      	ldrb	r2, [r3, #0]
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	2202      	movs	r2, #2
 8007d84:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	683a      	ldr	r2, [r7, #0]
 8007d8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007d90:	2301      	movs	r3, #1
 8007d92:	75fb      	strb	r3, [r7, #23]
      break;
 8007d94:	e007      	b.n	8007da6 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007d96:	7afb      	ldrb	r3, [r7, #11]
 8007d98:	4619      	mov	r1, r3
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	f7ff fb18 	bl	80073d0 <USBH_MSC_BOT_Process>
 8007da0:	4603      	mov	r3, r0
 8007da2:	75fb      	strb	r3, [r7, #23]
      break;
 8007da4:	bf00      	nop
  }

  return error;
 8007da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3718      	adds	r7, #24
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d101      	bne.n	8007dc8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	e029      	b.n	8007e1c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	79fa      	ldrb	r2, [r7, #7]
 8007dcc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007de0:	68f8      	ldr	r0, [r7, #12]
 8007de2:	f000 f81f 	bl	8007e24 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d003      	beq.n	8007e14 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f004 fab5 	bl	800c384 <USBH_LL_Init>

  return USBH_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007e30:	2300      	movs	r3, #0
 8007e32:	60fb      	str	r3, [r7, #12]
 8007e34:	e009      	b.n	8007e4a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	33e0      	adds	r3, #224	; 0xe0
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	4413      	add	r3, r2
 8007e40:	2200      	movs	r2, #0
 8007e42:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	3301      	adds	r3, #1
 8007e48:	60fb      	str	r3, [r7, #12]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2b0e      	cmp	r3, #14
 8007e4e:	d9f2      	bls.n	8007e36 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007e50:	2300      	movs	r3, #0
 8007e52:	60fb      	str	r3, [r7, #12]
 8007e54:	e009      	b.n	8007e6a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007e60:	2200      	movs	r2, #0
 8007e62:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	3301      	adds	r3, #1
 8007e68:	60fb      	str	r3, [r7, #12]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e70:	d3f1      	bcc.n	8007e56 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2240      	movs	r2, #64	; 0x40
 8007e96:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3714      	adds	r7, #20
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d016      	beq.n	8007f0e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d10e      	bne.n	8007f08 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007ef0:	1c59      	adds	r1, r3, #1
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	33de      	adds	r3, #222	; 0xde
 8007efc:	6839      	ldr	r1, [r7, #0]
 8007efe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007f02:	2300      	movs	r3, #0
 8007f04:	73fb      	strb	r3, [r7, #15]
 8007f06:	e004      	b.n	8007f12 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007f08:	2302      	movs	r3, #2
 8007f0a:	73fb      	strb	r3, [r7, #15]
 8007f0c:	e001      	b.n	8007f12 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007f0e:	2302      	movs	r3, #2
 8007f10:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3714      	adds	r7, #20
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b085      	sub	sp, #20
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	460b      	mov	r3, r1
 8007f2a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007f36:	78fa      	ldrb	r2, [r7, #3]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d204      	bcs.n	8007f46 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	78fa      	ldrb	r2, [r7, #3]
 8007f40:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007f44:	e001      	b.n	8007f4a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007f46:	2302      	movs	r3, #2
 8007f48:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3714      	adds	r7, #20
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b087      	sub	sp, #28
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	4608      	mov	r0, r1
 8007f62:	4611      	mov	r1, r2
 8007f64:	461a      	mov	r2, r3
 8007f66:	4603      	mov	r3, r0
 8007f68:	70fb      	strb	r3, [r7, #3]
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	70bb      	strb	r3, [r7, #2]
 8007f6e:	4613      	mov	r3, r2
 8007f70:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007f72:	2300      	movs	r3, #0
 8007f74:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007f76:	2300      	movs	r3, #0
 8007f78:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007f80:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007f82:	e025      	b.n	8007fd0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007f84:	7dfb      	ldrb	r3, [r7, #23]
 8007f86:	221a      	movs	r2, #26
 8007f88:	fb02 f303 	mul.w	r3, r2, r3
 8007f8c:	3308      	adds	r3, #8
 8007f8e:	68fa      	ldr	r2, [r7, #12]
 8007f90:	4413      	add	r3, r2
 8007f92:	3302      	adds	r3, #2
 8007f94:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	795b      	ldrb	r3, [r3, #5]
 8007f9a:	78fa      	ldrb	r2, [r7, #3]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d002      	beq.n	8007fa6 <USBH_FindInterface+0x4e>
 8007fa0:	78fb      	ldrb	r3, [r7, #3]
 8007fa2:	2bff      	cmp	r3, #255	; 0xff
 8007fa4:	d111      	bne.n	8007fca <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007faa:	78ba      	ldrb	r2, [r7, #2]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d002      	beq.n	8007fb6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007fb0:	78bb      	ldrb	r3, [r7, #2]
 8007fb2:	2bff      	cmp	r3, #255	; 0xff
 8007fb4:	d109      	bne.n	8007fca <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007fba:	787a      	ldrb	r2, [r7, #1]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d002      	beq.n	8007fc6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007fc0:	787b      	ldrb	r3, [r7, #1]
 8007fc2:	2bff      	cmp	r3, #255	; 0xff
 8007fc4:	d101      	bne.n	8007fca <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007fc6:	7dfb      	ldrb	r3, [r7, #23]
 8007fc8:	e006      	b.n	8007fd8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007fca:	7dfb      	ldrb	r3, [r7, #23]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007fd0:	7dfb      	ldrb	r3, [r7, #23]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d9d6      	bls.n	8007f84 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007fd6:	23ff      	movs	r3, #255	; 0xff
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	371c      	adds	r7, #28
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f004 fa05 	bl	800c3fc <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007ff2:	2101      	movs	r1, #1
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f004 fb1e 	bl	800c636 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007ffa:	2300      	movs	r3, #0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3708      	adds	r7, #8
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b088      	sub	sp, #32
 8008008:	af04      	add	r7, sp, #16
 800800a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800800c:	2302      	movs	r3, #2
 800800e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008010:	2300      	movs	r3, #0
 8008012:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800801a:	b2db      	uxtb	r3, r3
 800801c:	2b01      	cmp	r3, #1
 800801e:	d102      	bne.n	8008026 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2203      	movs	r2, #3
 8008024:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	b2db      	uxtb	r3, r3
 800802c:	2b0b      	cmp	r3, #11
 800802e:	f200 81b3 	bhi.w	8008398 <USBH_Process+0x394>
 8008032:	a201      	add	r2, pc, #4	; (adr r2, 8008038 <USBH_Process+0x34>)
 8008034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008038:	08008069 	.word	0x08008069
 800803c:	0800809b 	.word	0x0800809b
 8008040:	08008103 	.word	0x08008103
 8008044:	08008333 	.word	0x08008333
 8008048:	08008399 	.word	0x08008399
 800804c:	080081a7 	.word	0x080081a7
 8008050:	080082d9 	.word	0x080082d9
 8008054:	080081dd 	.word	0x080081dd
 8008058:	080081fd 	.word	0x080081fd
 800805c:	0800821d 	.word	0x0800821d
 8008060:	0800824b 	.word	0x0800824b
 8008064:	0800831b 	.word	0x0800831b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800806e:	b2db      	uxtb	r3, r3
 8008070:	2b00      	cmp	r3, #0
 8008072:	f000 8193 	beq.w	800839c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2201      	movs	r2, #1
 800807a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800807c:	20c8      	movs	r0, #200	; 0xc8
 800807e:	f004 fb51 	bl	800c724 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f004 fa17 	bl	800c4b6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008098:	e180      	b.n	800839c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d107      	bne.n	80080b4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2202      	movs	r2, #2
 80080b0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80080b2:	e182      	b.n	80083ba <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80080ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080be:	d914      	bls.n	80080ea <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80080c6:	3301      	adds	r3, #1
 80080c8:	b2da      	uxtb	r2, r3
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80080d6:	2b03      	cmp	r3, #3
 80080d8:	d903      	bls.n	80080e2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	220d      	movs	r2, #13
 80080de:	701a      	strb	r2, [r3, #0]
      break;
 80080e0:	e16b      	b.n	80083ba <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	701a      	strb	r2, [r3, #0]
      break;
 80080e8:	e167      	b.n	80083ba <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80080f0:	f103 020a 	add.w	r2, r3, #10
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80080fa:	200a      	movs	r0, #10
 80080fc:	f004 fb12 	bl	800c724 <USBH_Delay>
      break;
 8008100:	e15b      	b.n	80083ba <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008108:	2b00      	cmp	r3, #0
 800810a:	d005      	beq.n	8008118 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008112:	2104      	movs	r1, #4
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008118:	2064      	movs	r0, #100	; 0x64
 800811a:	f004 fb03 	bl	800c724 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f004 f9a2 	bl	800c468 <USBH_LL_GetSpeed>
 8008124:	4603      	mov	r3, r0
 8008126:	461a      	mov	r2, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2205      	movs	r2, #5
 8008132:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008134:	2100      	movs	r1, #0
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f001 f92f 	bl	800939a <USBH_AllocPipe>
 800813c:	4603      	mov	r3, r0
 800813e:	461a      	mov	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008144:	2180      	movs	r1, #128	; 0x80
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f001 f927 	bl	800939a <USBH_AllocPipe>
 800814c:	4603      	mov	r3, r0
 800814e:	461a      	mov	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	7919      	ldrb	r1, [r3, #4]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008168:	b292      	uxth	r2, r2
 800816a:	9202      	str	r2, [sp, #8]
 800816c:	2200      	movs	r2, #0
 800816e:	9201      	str	r2, [sp, #4]
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	4603      	mov	r3, r0
 8008174:	2280      	movs	r2, #128	; 0x80
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f001 f8e0 	bl	800933c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	7959      	ldrb	r1, [r3, #5]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008190:	b292      	uxth	r2, r2
 8008192:	9202      	str	r2, [sp, #8]
 8008194:	2200      	movs	r2, #0
 8008196:	9201      	str	r2, [sp, #4]
 8008198:	9300      	str	r3, [sp, #0]
 800819a:	4603      	mov	r3, r0
 800819c:	2200      	movs	r2, #0
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f001 f8cc 	bl	800933c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80081a4:	e109      	b.n	80083ba <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 f90c 	bl	80083c4 <USBH_HandleEnum>
 80081ac:	4603      	mov	r3, r0
 80081ae:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80081b0:	7bbb      	ldrb	r3, [r7, #14]
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f040 80f3 	bne.w	80083a0 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d103      	bne.n	80081d4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2208      	movs	r2, #8
 80081d0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80081d2:	e0e5      	b.n	80083a0 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2207      	movs	r2, #7
 80081d8:	701a      	strb	r2, [r3, #0]
      break;
 80081da:	e0e1      	b.n	80083a0 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f000 80de 	beq.w	80083a4 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081ee:	2101      	movs	r1, #1
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2208      	movs	r2, #8
 80081f8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80081fa:	e0d3      	b.n	80083a4 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008202:	b29b      	uxth	r3, r3
 8008204:	4619      	mov	r1, r3
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fc20 	bl	8008a4c <USBH_SetCfg>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	f040 80ca 	bne.w	80083a8 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2209      	movs	r2, #9
 8008218:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800821a:	e0c5      	b.n	80083a8 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008222:	f003 0320 	and.w	r3, r3, #32
 8008226:	2b00      	cmp	r3, #0
 8008228:	d00b      	beq.n	8008242 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800822a:	2101      	movs	r1, #1
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 fc30 	bl	8008a92 <USBH_SetFeature>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	f040 80b9 	bne.w	80083ac <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	220a      	movs	r2, #10
 800823e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008240:	e0b4      	b.n	80083ac <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	220a      	movs	r2, #10
 8008246:	701a      	strb	r2, [r3, #0]
      break;
 8008248:	e0b0      	b.n	80083ac <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 80ad 	beq.w	80083b0 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800825e:	2300      	movs	r3, #0
 8008260:	73fb      	strb	r3, [r7, #15]
 8008262:	e016      	b.n	8008292 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008264:	7bfa      	ldrb	r2, [r7, #15]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	32de      	adds	r2, #222	; 0xde
 800826a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800826e:	791a      	ldrb	r2, [r3, #4]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008276:	429a      	cmp	r2, r3
 8008278:	d108      	bne.n	800828c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800827a:	7bfa      	ldrb	r2, [r7, #15]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	32de      	adds	r2, #222	; 0xde
 8008280:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800828a:	e005      	b.n	8008298 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800828c:	7bfb      	ldrb	r3, [r7, #15]
 800828e:	3301      	adds	r3, #1
 8008290:	73fb      	strb	r3, [r7, #15]
 8008292:	7bfb      	ldrb	r3, [r7, #15]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d0e5      	beq.n	8008264 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d016      	beq.n	80082d0 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	4798      	blx	r3
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d109      	bne.n	80082c8 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2206      	movs	r2, #6
 80082b8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082c0:	2103      	movs	r1, #3
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80082c6:	e073      	b.n	80083b0 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	220d      	movs	r2, #13
 80082cc:	701a      	strb	r2, [r3, #0]
      break;
 80082ce:	e06f      	b.n	80083b0 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	220d      	movs	r2, #13
 80082d4:	701a      	strb	r2, [r3, #0]
      break;
 80082d6:	e06b      	b.n	80083b0 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d017      	beq.n	8008312 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	4798      	blx	r3
 80082ee:	4603      	mov	r3, r0
 80082f0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80082f2:	7bbb      	ldrb	r3, [r7, #14]
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d103      	bne.n	8008302 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	220b      	movs	r2, #11
 80082fe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008300:	e058      	b.n	80083b4 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8008302:	7bbb      	ldrb	r3, [r7, #14]
 8008304:	b2db      	uxtb	r3, r3
 8008306:	2b02      	cmp	r3, #2
 8008308:	d154      	bne.n	80083b4 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	220d      	movs	r2, #13
 800830e:	701a      	strb	r2, [r3, #0]
      break;
 8008310:	e050      	b.n	80083b4 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	220d      	movs	r2, #13
 8008316:	701a      	strb	r2, [r3, #0]
      break;
 8008318:	e04c      	b.n	80083b4 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008320:	2b00      	cmp	r3, #0
 8008322:	d049      	beq.n	80083b8 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800832a:	695b      	ldr	r3, [r3, #20]
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	4798      	blx	r3
      }
      break;
 8008330:	e042      	b.n	80083b8 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f7ff fd72 	bl	8007e24 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008346:	2b00      	cmp	r3, #0
 8008348:	d009      	beq.n	800835e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008364:	2b00      	cmp	r3, #0
 8008366:	d005      	beq.n	8008374 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800836e:	2105      	movs	r1, #5
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800837a:	b2db      	uxtb	r3, r3
 800837c:	2b01      	cmp	r3, #1
 800837e:	d107      	bne.n	8008390 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f7ff fe2b 	bl	8007fe4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800838e:	e014      	b.n	80083ba <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f004 f833 	bl	800c3fc <USBH_LL_Start>
      break;
 8008396:	e010      	b.n	80083ba <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008398:	bf00      	nop
 800839a:	e00e      	b.n	80083ba <USBH_Process+0x3b6>
      break;
 800839c:	bf00      	nop
 800839e:	e00c      	b.n	80083ba <USBH_Process+0x3b6>
      break;
 80083a0:	bf00      	nop
 80083a2:	e00a      	b.n	80083ba <USBH_Process+0x3b6>
    break;
 80083a4:	bf00      	nop
 80083a6:	e008      	b.n	80083ba <USBH_Process+0x3b6>
      break;
 80083a8:	bf00      	nop
 80083aa:	e006      	b.n	80083ba <USBH_Process+0x3b6>
      break;
 80083ac:	bf00      	nop
 80083ae:	e004      	b.n	80083ba <USBH_Process+0x3b6>
      break;
 80083b0:	bf00      	nop
 80083b2:	e002      	b.n	80083ba <USBH_Process+0x3b6>
      break;
 80083b4:	bf00      	nop
 80083b6:	e000      	b.n	80083ba <USBH_Process+0x3b6>
      break;
 80083b8:	bf00      	nop
  }
  return USBH_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3710      	adds	r7, #16
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b088      	sub	sp, #32
 80083c8:	af04      	add	r7, sp, #16
 80083ca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80083cc:	2301      	movs	r3, #1
 80083ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80083d0:	2301      	movs	r3, #1
 80083d2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	785b      	ldrb	r3, [r3, #1]
 80083d8:	2b07      	cmp	r3, #7
 80083da:	f200 81c1 	bhi.w	8008760 <USBH_HandleEnum+0x39c>
 80083de:	a201      	add	r2, pc, #4	; (adr r2, 80083e4 <USBH_HandleEnum+0x20>)
 80083e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e4:	08008405 	.word	0x08008405
 80083e8:	080084c3 	.word	0x080084c3
 80083ec:	0800852d 	.word	0x0800852d
 80083f0:	080085bb 	.word	0x080085bb
 80083f4:	08008625 	.word	0x08008625
 80083f8:	08008695 	.word	0x08008695
 80083fc:	080086db 	.word	0x080086db
 8008400:	08008721 	.word	0x08008721
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008404:	2108      	movs	r1, #8
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 fa50 	bl	80088ac <USBH_Get_DevDesc>
 800840c:	4603      	mov	r3, r0
 800840e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008410:	7bbb      	ldrb	r3, [r7, #14]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d130      	bne.n	8008478 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	7919      	ldrb	r1, [r3, #4]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800843a:	b292      	uxth	r2, r2
 800843c:	9202      	str	r2, [sp, #8]
 800843e:	2200      	movs	r2, #0
 8008440:	9201      	str	r2, [sp, #4]
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	4603      	mov	r3, r0
 8008446:	2280      	movs	r2, #128	; 0x80
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 ff77 	bl	800933c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	7959      	ldrb	r1, [r3, #5]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008462:	b292      	uxth	r2, r2
 8008464:	9202      	str	r2, [sp, #8]
 8008466:	2200      	movs	r2, #0
 8008468:	9201      	str	r2, [sp, #4]
 800846a:	9300      	str	r3, [sp, #0]
 800846c:	4603      	mov	r3, r0
 800846e:	2200      	movs	r2, #0
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 ff63 	bl	800933c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008476:	e175      	b.n	8008764 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008478:	7bbb      	ldrb	r3, [r7, #14]
 800847a:	2b03      	cmp	r3, #3
 800847c:	f040 8172 	bne.w	8008764 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008486:	3301      	adds	r3, #1
 8008488:	b2da      	uxtb	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008496:	2b03      	cmp	r3, #3
 8008498:	d903      	bls.n	80084a2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	220d      	movs	r2, #13
 800849e:	701a      	strb	r2, [r3, #0]
      break;
 80084a0:	e160      	b.n	8008764 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	795b      	ldrb	r3, [r3, #5]
 80084a6:	4619      	mov	r1, r3
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 ff97 	bl	80093dc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	791b      	ldrb	r3, [r3, #4]
 80084b2:	4619      	mov	r1, r3
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 ff91 	bl	80093dc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	701a      	strb	r2, [r3, #0]
      break;
 80084c0:	e150      	b.n	8008764 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80084c2:	2112      	movs	r1, #18
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 f9f1 	bl	80088ac <USBH_Get_DevDesc>
 80084ca:	4603      	mov	r3, r0
 80084cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80084ce:	7bbb      	ldrb	r3, [r7, #14]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d103      	bne.n	80084dc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2202      	movs	r2, #2
 80084d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80084da:	e145      	b.n	8008768 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084dc:	7bbb      	ldrb	r3, [r7, #14]
 80084de:	2b03      	cmp	r3, #3
 80084e0:	f040 8142 	bne.w	8008768 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80084ea:	3301      	adds	r3, #1
 80084ec:	b2da      	uxtb	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80084fa:	2b03      	cmp	r3, #3
 80084fc:	d903      	bls.n	8008506 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	220d      	movs	r2, #13
 8008502:	701a      	strb	r2, [r3, #0]
      break;
 8008504:	e130      	b.n	8008768 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	795b      	ldrb	r3, [r3, #5]
 800850a:	4619      	mov	r1, r3
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 ff65 	bl	80093dc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	791b      	ldrb	r3, [r3, #4]
 8008516:	4619      	mov	r1, r3
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 ff5f 	bl	80093dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	701a      	strb	r2, [r3, #0]
      break;
 800852a:	e11d      	b.n	8008768 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800852c:	2101      	movs	r1, #1
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fa68 	bl	8008a04 <USBH_SetAddress>
 8008534:	4603      	mov	r3, r0
 8008536:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008538:	7bbb      	ldrb	r3, [r7, #14]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d132      	bne.n	80085a4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800853e:	2002      	movs	r0, #2
 8008540:	f004 f8f0 	bl	800c724 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2203      	movs	r2, #3
 8008550:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	7919      	ldrb	r1, [r3, #4]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008566:	b292      	uxth	r2, r2
 8008568:	9202      	str	r2, [sp, #8]
 800856a:	2200      	movs	r2, #0
 800856c:	9201      	str	r2, [sp, #4]
 800856e:	9300      	str	r3, [sp, #0]
 8008570:	4603      	mov	r3, r0
 8008572:	2280      	movs	r2, #128	; 0x80
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 fee1 	bl	800933c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	7959      	ldrb	r1, [r3, #5]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800858e:	b292      	uxth	r2, r2
 8008590:	9202      	str	r2, [sp, #8]
 8008592:	2200      	movs	r2, #0
 8008594:	9201      	str	r2, [sp, #4]
 8008596:	9300      	str	r3, [sp, #0]
 8008598:	4603      	mov	r3, r0
 800859a:	2200      	movs	r2, #0
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 fecd 	bl	800933c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80085a2:	e0e3      	b.n	800876c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085a4:	7bbb      	ldrb	r3, [r7, #14]
 80085a6:	2b03      	cmp	r3, #3
 80085a8:	f040 80e0 	bne.w	800876c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	220d      	movs	r2, #13
 80085b0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	705a      	strb	r2, [r3, #1]
      break;
 80085b8:	e0d8      	b.n	800876c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80085ba:	2109      	movs	r1, #9
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 f99d 	bl	80088fc <USBH_Get_CfgDesc>
 80085c2:	4603      	mov	r3, r0
 80085c4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80085c6:	7bbb      	ldrb	r3, [r7, #14]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d103      	bne.n	80085d4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2204      	movs	r2, #4
 80085d0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80085d2:	e0cd      	b.n	8008770 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085d4:	7bbb      	ldrb	r3, [r7, #14]
 80085d6:	2b03      	cmp	r3, #3
 80085d8:	f040 80ca 	bne.w	8008770 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085e2:	3301      	adds	r3, #1
 80085e4:	b2da      	uxtb	r2, r3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085f2:	2b03      	cmp	r3, #3
 80085f4:	d903      	bls.n	80085fe <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	220d      	movs	r2, #13
 80085fa:	701a      	strb	r2, [r3, #0]
      break;
 80085fc:	e0b8      	b.n	8008770 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	795b      	ldrb	r3, [r3, #5]
 8008602:	4619      	mov	r1, r3
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fee9 	bl	80093dc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	791b      	ldrb	r3, [r3, #4]
 800860e:	4619      	mov	r1, r3
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 fee3 	bl	80093dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	701a      	strb	r2, [r3, #0]
      break;
 8008622:	e0a5      	b.n	8008770 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800862a:	4619      	mov	r1, r3
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 f965 	bl	80088fc <USBH_Get_CfgDesc>
 8008632:	4603      	mov	r3, r0
 8008634:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008636:	7bbb      	ldrb	r3, [r7, #14]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d103      	bne.n	8008644 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2205      	movs	r2, #5
 8008640:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008642:	e097      	b.n	8008774 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008644:	7bbb      	ldrb	r3, [r7, #14]
 8008646:	2b03      	cmp	r3, #3
 8008648:	f040 8094 	bne.w	8008774 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008652:	3301      	adds	r3, #1
 8008654:	b2da      	uxtb	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008662:	2b03      	cmp	r3, #3
 8008664:	d903      	bls.n	800866e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	220d      	movs	r2, #13
 800866a:	701a      	strb	r2, [r3, #0]
      break;
 800866c:	e082      	b.n	8008774 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	795b      	ldrb	r3, [r3, #5]
 8008672:	4619      	mov	r1, r3
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 feb1 	bl	80093dc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	791b      	ldrb	r3, [r3, #4]
 800867e:	4619      	mov	r1, r3
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 feab 	bl	80093dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	701a      	strb	r2, [r3, #0]
      break;
 8008692:	e06f      	b.n	8008774 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800869a:	2b00      	cmp	r3, #0
 800869c:	d019      	beq.n	80086d2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80086aa:	23ff      	movs	r3, #255	; 0xff
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 f949 	bl	8008944 <USBH_Get_StringDesc>
 80086b2:	4603      	mov	r3, r0
 80086b4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80086b6:	7bbb      	ldrb	r3, [r7, #14]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d103      	bne.n	80086c4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2206      	movs	r2, #6
 80086c0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80086c2:	e059      	b.n	8008778 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086c4:	7bbb      	ldrb	r3, [r7, #14]
 80086c6:	2b03      	cmp	r3, #3
 80086c8:	d156      	bne.n	8008778 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2206      	movs	r2, #6
 80086ce:	705a      	strb	r2, [r3, #1]
      break;
 80086d0:	e052      	b.n	8008778 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2206      	movs	r2, #6
 80086d6:	705a      	strb	r2, [r3, #1]
      break;
 80086d8:	e04e      	b.n	8008778 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d019      	beq.n	8008718 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80086f0:	23ff      	movs	r3, #255	; 0xff
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 f926 	bl	8008944 <USBH_Get_StringDesc>
 80086f8:	4603      	mov	r3, r0
 80086fa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80086fc:	7bbb      	ldrb	r3, [r7, #14]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d103      	bne.n	800870a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2207      	movs	r2, #7
 8008706:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008708:	e038      	b.n	800877c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800870a:	7bbb      	ldrb	r3, [r7, #14]
 800870c:	2b03      	cmp	r3, #3
 800870e:	d135      	bne.n	800877c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2207      	movs	r2, #7
 8008714:	705a      	strb	r2, [r3, #1]
      break;
 8008716:	e031      	b.n	800877c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2207      	movs	r2, #7
 800871c:	705a      	strb	r2, [r3, #1]
      break;
 800871e:	e02d      	b.n	800877c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008726:	2b00      	cmp	r3, #0
 8008728:	d017      	beq.n	800875a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008736:	23ff      	movs	r3, #255	; 0xff
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 f903 	bl	8008944 <USBH_Get_StringDesc>
 800873e:	4603      	mov	r3, r0
 8008740:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008742:	7bbb      	ldrb	r3, [r7, #14]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d102      	bne.n	800874e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008748:	2300      	movs	r3, #0
 800874a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800874c:	e018      	b.n	8008780 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800874e:	7bbb      	ldrb	r3, [r7, #14]
 8008750:	2b03      	cmp	r3, #3
 8008752:	d115      	bne.n	8008780 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008754:	2300      	movs	r3, #0
 8008756:	73fb      	strb	r3, [r7, #15]
      break;
 8008758:	e012      	b.n	8008780 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800875a:	2300      	movs	r3, #0
 800875c:	73fb      	strb	r3, [r7, #15]
      break;
 800875e:	e00f      	b.n	8008780 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008760:	bf00      	nop
 8008762:	e00e      	b.n	8008782 <USBH_HandleEnum+0x3be>
      break;
 8008764:	bf00      	nop
 8008766:	e00c      	b.n	8008782 <USBH_HandleEnum+0x3be>
      break;
 8008768:	bf00      	nop
 800876a:	e00a      	b.n	8008782 <USBH_HandleEnum+0x3be>
      break;
 800876c:	bf00      	nop
 800876e:	e008      	b.n	8008782 <USBH_HandleEnum+0x3be>
      break;
 8008770:	bf00      	nop
 8008772:	e006      	b.n	8008782 <USBH_HandleEnum+0x3be>
      break;
 8008774:	bf00      	nop
 8008776:	e004      	b.n	8008782 <USBH_HandleEnum+0x3be>
      break;
 8008778:	bf00      	nop
 800877a:	e002      	b.n	8008782 <USBH_HandleEnum+0x3be>
      break;
 800877c:	bf00      	nop
 800877e:	e000      	b.n	8008782 <USBH_HandleEnum+0x3be>
      break;
 8008780:	bf00      	nop
  }
  return Status;
 8008782:	7bfb      	ldrb	r3, [r7, #15]
}
 8008784:	4618      	mov	r0, r3
 8008786:	3710      	adds	r7, #16
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	683a      	ldr	r2, [r7, #0]
 800879a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800879e:	bf00      	nop
 80087a0:	370c      	adds	r7, #12
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr

080087aa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b082      	sub	sp, #8
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80087b8:	1c5a      	adds	r2, r3, #1
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 f804 	bl	80087ce <USBH_HandleSof>
}
 80087c6:	bf00      	nop
 80087c8:	3708      	adds	r7, #8
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b082      	sub	sp, #8
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	2b0b      	cmp	r3, #11
 80087de:	d10a      	bne.n	80087f6 <USBH_HandleSof+0x28>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d005      	beq.n	80087f6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087f0:	699b      	ldr	r3, [r3, #24]
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	4798      	blx	r3
  }
}
 80087f6:	bf00      	nop
 80087f8:	3708      	adds	r7, #8
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80087fe:	b480      	push	{r7}
 8008800:	b083      	sub	sp, #12
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2201      	movs	r2, #1
 800880a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800880e:	bf00      	nop
}
 8008810:	370c      	adds	r7, #12
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr

0800881a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800881a:	b480      	push	{r7}
 800881c:	b083      	sub	sp, #12
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800882a:	bf00      	nop
}
 800882c:	370c      	adds	r7, #12
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr

08008836 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008836:	b480      	push	{r7}
 8008838:	b083      	sub	sp, #12
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2201      	movs	r2, #1
 8008842:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	370c      	adds	r7, #12
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f003 fdd4 	bl	800c432 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	791b      	ldrb	r3, [r3, #4]
 800888e:	4619      	mov	r1, r3
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 fda3 	bl	80093dc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	795b      	ldrb	r3, [r3, #5]
 800889a:	4619      	mov	r1, r3
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 fd9d 	bl	80093dc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3708      	adds	r7, #8
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b086      	sub	sp, #24
 80088b0:	af02      	add	r7, sp, #8
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	460b      	mov	r3, r1
 80088b6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80088be:	78fb      	ldrb	r3, [r7, #3]
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	9300      	str	r3, [sp, #0]
 80088c4:	4613      	mov	r3, r2
 80088c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80088ca:	2100      	movs	r1, #0
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 f864 	bl	800899a <USBH_GetDescriptor>
 80088d2:	4603      	mov	r3, r0
 80088d4:	73fb      	strb	r3, [r7, #15]
 80088d6:	7bfb      	ldrb	r3, [r7, #15]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10a      	bne.n	80088f2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f203 3026 	addw	r0, r3, #806	; 0x326
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80088e8:	78fa      	ldrb	r2, [r7, #3]
 80088ea:	b292      	uxth	r2, r2
 80088ec:	4619      	mov	r1, r3
 80088ee:	f000 f918 	bl	8008b22 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80088f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3710      	adds	r7, #16
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b086      	sub	sp, #24
 8008900:	af02      	add	r7, sp, #8
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	460b      	mov	r3, r1
 8008906:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	331c      	adds	r3, #28
 800890c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800890e:	887b      	ldrh	r3, [r7, #2]
 8008910:	9300      	str	r3, [sp, #0]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008918:	2100      	movs	r1, #0
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 f83d 	bl	800899a <USBH_GetDescriptor>
 8008920:	4603      	mov	r3, r0
 8008922:	72fb      	strb	r3, [r7, #11]
 8008924:	7afb      	ldrb	r3, [r7, #11]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d107      	bne.n	800893a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008930:	887a      	ldrh	r2, [r7, #2]
 8008932:	68f9      	ldr	r1, [r7, #12]
 8008934:	4618      	mov	r0, r3
 8008936:	f000 f964 	bl	8008c02 <USBH_ParseCfgDesc>
  }

  return status;
 800893a:	7afb      	ldrb	r3, [r7, #11]
}
 800893c:	4618      	mov	r0, r3
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b088      	sub	sp, #32
 8008948:	af02      	add	r7, sp, #8
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	607a      	str	r2, [r7, #4]
 800894e:	461a      	mov	r2, r3
 8008950:	460b      	mov	r3, r1
 8008952:	72fb      	strb	r3, [r7, #11]
 8008954:	4613      	mov	r3, r2
 8008956:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008958:	7afb      	ldrb	r3, [r7, #11]
 800895a:	b29b      	uxth	r3, r3
 800895c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008960:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008968:	893b      	ldrh	r3, [r7, #8]
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	460b      	mov	r3, r1
 800896e:	2100      	movs	r1, #0
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	f000 f812 	bl	800899a <USBH_GetDescriptor>
 8008976:	4603      	mov	r3, r0
 8008978:	75fb      	strb	r3, [r7, #23]
 800897a:	7dfb      	ldrb	r3, [r7, #23]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d107      	bne.n	8008990 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008986:	893a      	ldrh	r2, [r7, #8]
 8008988:	6879      	ldr	r1, [r7, #4]
 800898a:	4618      	mov	r0, r3
 800898c:	f000 fa37 	bl	8008dfe <USBH_ParseStringDesc>
  }

  return status;
 8008990:	7dfb      	ldrb	r3, [r7, #23]
}
 8008992:	4618      	mov	r0, r3
 8008994:	3718      	adds	r7, #24
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b084      	sub	sp, #16
 800899e:	af00      	add	r7, sp, #0
 80089a0:	60f8      	str	r0, [r7, #12]
 80089a2:	607b      	str	r3, [r7, #4]
 80089a4:	460b      	mov	r3, r1
 80089a6:	72fb      	strb	r3, [r7, #11]
 80089a8:	4613      	mov	r3, r2
 80089aa:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	789b      	ldrb	r3, [r3, #2]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d11c      	bne.n	80089ee <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80089b4:	7afb      	ldrb	r3, [r7, #11]
 80089b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80089ba:	b2da      	uxtb	r2, r3
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2206      	movs	r2, #6
 80089c4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	893a      	ldrh	r2, [r7, #8]
 80089ca:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80089cc:	893b      	ldrh	r3, [r7, #8]
 80089ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80089d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089d6:	d104      	bne.n	80089e2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f240 4209 	movw	r2, #1033	; 0x409
 80089de:	829a      	strh	r2, [r3, #20]
 80089e0:	e002      	b.n	80089e8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2200      	movs	r2, #0
 80089e6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	8b3a      	ldrh	r2, [r7, #24]
 80089ec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80089ee:	8b3b      	ldrh	r3, [r7, #24]
 80089f0:	461a      	mov	r2, r3
 80089f2:	6879      	ldr	r1, [r7, #4]
 80089f4:	68f8      	ldr	r0, [r7, #12]
 80089f6:	f000 fa50 	bl	8008e9a <USBH_CtlReq>
 80089fa:	4603      	mov	r3, r0
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3710      	adds	r7, #16
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	789b      	ldrb	r3, [r3, #2]
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d10f      	bne.n	8008a38 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2205      	movs	r2, #5
 8008a22:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008a24:	78fb      	ldrb	r3, [r7, #3]
 8008a26:	b29a      	uxth	r2, r3
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008a38:	2200      	movs	r2, #0
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 fa2c 	bl	8008e9a <USBH_CtlReq>
 8008a42:	4603      	mov	r3, r0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3708      	adds	r7, #8
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	460b      	mov	r3, r1
 8008a56:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	789b      	ldrb	r3, [r3, #2]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d10e      	bne.n	8008a7e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2209      	movs	r2, #9
 8008a6a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	887a      	ldrh	r2, [r7, #2]
 8008a70:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008a7e:	2200      	movs	r2, #0
 8008a80:	2100      	movs	r1, #0
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 fa09 	bl	8008e9a <USBH_CtlReq>
 8008a88:	4603      	mov	r3, r0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b082      	sub	sp, #8
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	789b      	ldrb	r3, [r3, #2]
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d10f      	bne.n	8008ac6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2203      	movs	r2, #3
 8008ab0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008ab2:	78fb      	ldrb	r3, [r7, #3]
 8008ab4:	b29a      	uxth	r2, r3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	2100      	movs	r1, #0
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f9e5 	bl	8008e9a <USBH_CtlReq>
 8008ad0:	4603      	mov	r3, r0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3708      	adds	r7, #8
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b082      	sub	sp, #8
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	789b      	ldrb	r3, [r3, #2]
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d10f      	bne.n	8008b0e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2202      	movs	r2, #2
 8008af2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008b00:	78fb      	ldrb	r3, [r7, #3]
 8008b02:	b29a      	uxth	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008b0e:	2200      	movs	r2, #0
 8008b10:	2100      	movs	r1, #0
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f9c1 	bl	8008e9a <USBH_CtlReq>
 8008b18:	4603      	mov	r3, r0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3708      	adds	r7, #8
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008b22:	b480      	push	{r7}
 8008b24:	b085      	sub	sp, #20
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	60f8      	str	r0, [r7, #12]
 8008b2a:	60b9      	str	r1, [r7, #8]
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	781a      	ldrb	r2, [r3, #0]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	785a      	ldrb	r2, [r3, #1]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	3302      	adds	r3, #2
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	b29a      	uxth	r2, r3
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	3303      	adds	r3, #3
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	021b      	lsls	r3, r3, #8
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	4313      	orrs	r3, r2
 8008b56:	b29a      	uxth	r2, r3
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	791a      	ldrb	r2, [r3, #4]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	795a      	ldrb	r2, [r3, #5]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	799a      	ldrb	r2, [r3, #6]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	79da      	ldrb	r2, [r3, #7]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008b7c:	88fb      	ldrh	r3, [r7, #6]
 8008b7e:	2b08      	cmp	r3, #8
 8008b80:	d939      	bls.n	8008bf6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	3308      	adds	r3, #8
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	b29a      	uxth	r2, r3
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	3309      	adds	r3, #9
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	021b      	lsls	r3, r3, #8
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	4313      	orrs	r3, r2
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	330a      	adds	r3, #10
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	b29a      	uxth	r2, r3
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	330b      	adds	r3, #11
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	021b      	lsls	r3, r3, #8
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	b29a      	uxth	r2, r3
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	330c      	adds	r3, #12
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	330d      	adds	r3, #13
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	021b      	lsls	r3, r3, #8
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	b29a      	uxth	r2, r3
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	7b9a      	ldrb	r2, [r3, #14]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	7bda      	ldrb	r2, [r3, #15]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	7c1a      	ldrb	r2, [r3, #16]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	7c5a      	ldrb	r2, [r3, #17]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	745a      	strb	r2, [r3, #17]
  }
}
 8008bf6:	bf00      	nop
 8008bf8:	3714      	adds	r7, #20
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr

08008c02 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b08a      	sub	sp, #40	; 0x28
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	60f8      	str	r0, [r7, #12]
 8008c0a:	60b9      	str	r1, [r7, #8]
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008c14:	2300      	movs	r3, #0
 8008c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	781a      	ldrb	r2, [r3, #0]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	785a      	ldrb	r2, [r3, #1]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	3302      	adds	r3, #2
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	b29a      	uxth	r2, r3
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	3303      	adds	r3, #3
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	021b      	lsls	r3, r3, #8
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	b29a      	uxth	r2, r3
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	791a      	ldrb	r2, [r3, #4]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	795a      	ldrb	r2, [r3, #5]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	799a      	ldrb	r2, [r3, #6]
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	79da      	ldrb	r2, [r3, #7]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	7a1a      	ldrb	r2, [r3, #8]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008c78:	88fb      	ldrh	r3, [r7, #6]
 8008c7a:	2b09      	cmp	r3, #9
 8008c7c:	d95f      	bls.n	8008d3e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008c7e:	2309      	movs	r3, #9
 8008c80:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008c82:	2300      	movs	r3, #0
 8008c84:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008c86:	e051      	b.n	8008d2c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008c88:	f107 0316 	add.w	r3, r7, #22
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c90:	f000 f8e8 	bl	8008e64 <USBH_GetNextDesc>
 8008c94:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c98:	785b      	ldrb	r3, [r3, #1]
 8008c9a:	2b04      	cmp	r3, #4
 8008c9c:	d146      	bne.n	8008d2c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008c9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ca2:	221a      	movs	r2, #26
 8008ca4:	fb02 f303 	mul.w	r3, r2, r3
 8008ca8:	3308      	adds	r3, #8
 8008caa:	68fa      	ldr	r2, [r7, #12]
 8008cac:	4413      	add	r3, r2
 8008cae:	3302      	adds	r3, #2
 8008cb0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008cb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008cb4:	69f8      	ldr	r0, [r7, #28]
 8008cb6:	f000 f846 	bl	8008d46 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008cc4:	e022      	b.n	8008d0c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008cc6:	f107 0316 	add.w	r3, r7, #22
 8008cca:	4619      	mov	r1, r3
 8008ccc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008cce:	f000 f8c9 	bl	8008e64 <USBH_GetNextDesc>
 8008cd2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd6:	785b      	ldrb	r3, [r3, #1]
 8008cd8:	2b05      	cmp	r3, #5
 8008cda:	d117      	bne.n	8008d0c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008cdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ce0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008ce4:	3201      	adds	r2, #1
 8008ce6:	00d2      	lsls	r2, r2, #3
 8008ce8:	211a      	movs	r1, #26
 8008cea:	fb01 f303 	mul.w	r3, r1, r3
 8008cee:	4413      	add	r3, r2
 8008cf0:	3308      	adds	r3, #8
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	3304      	adds	r3, #4
 8008cf8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008cfa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008cfc:	69b8      	ldr	r0, [r7, #24]
 8008cfe:	f000 f851 	bl	8008da4 <USBH_ParseEPDesc>
            ep_ix++;
 8008d02:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008d06:	3301      	adds	r3, #1
 8008d08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	791b      	ldrb	r3, [r3, #4]
 8008d10:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d204      	bcs.n	8008d22 <USBH_ParseCfgDesc+0x120>
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	885a      	ldrh	r2, [r3, #2]
 8008d1c:	8afb      	ldrh	r3, [r7, #22]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d8d1      	bhi.n	8008cc6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008d22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d26:	3301      	adds	r3, #1
 8008d28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008d2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d804      	bhi.n	8008d3e <USBH_ParseCfgDesc+0x13c>
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	885a      	ldrh	r2, [r3, #2]
 8008d38:	8afb      	ldrh	r3, [r7, #22]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d8a4      	bhi.n	8008c88 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008d3e:	bf00      	nop
 8008d40:	3728      	adds	r7, #40	; 0x28
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008d46:	b480      	push	{r7}
 8008d48:	b083      	sub	sp, #12
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
 8008d4e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	781a      	ldrb	r2, [r3, #0]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	785a      	ldrb	r2, [r3, #1]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	789a      	ldrb	r2, [r3, #2]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	78da      	ldrb	r2, [r3, #3]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	791a      	ldrb	r2, [r3, #4]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	795a      	ldrb	r2, [r3, #5]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	799a      	ldrb	r2, [r3, #6]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	79da      	ldrb	r2, [r3, #7]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	7a1a      	ldrb	r2, [r3, #8]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	721a      	strb	r2, [r3, #8]
}
 8008d98:	bf00      	nop
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	781a      	ldrb	r2, [r3, #0]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	785a      	ldrb	r2, [r3, #1]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	789a      	ldrb	r2, [r3, #2]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	78da      	ldrb	r2, [r3, #3]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	3304      	adds	r3, #4
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	b29a      	uxth	r2, r3
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	3305      	adds	r3, #5
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	021b      	lsls	r3, r3, #8
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	4313      	orrs	r3, r2
 8008de4:	b29a      	uxth	r2, r3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	799a      	ldrb	r2, [r3, #6]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	719a      	strb	r2, [r3, #6]
}
 8008df2:	bf00      	nop
 8008df4:	370c      	adds	r7, #12
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr

08008dfe <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008dfe:	b480      	push	{r7}
 8008e00:	b087      	sub	sp, #28
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	60f8      	str	r0, [r7, #12]
 8008e06:	60b9      	str	r1, [r7, #8]
 8008e08:	4613      	mov	r3, r2
 8008e0a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	2b03      	cmp	r3, #3
 8008e14:	d120      	bne.n	8008e58 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	1e9a      	subs	r2, r3, #2
 8008e1c:	88fb      	ldrh	r3, [r7, #6]
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	bf28      	it	cs
 8008e22:	4613      	movcs	r3, r2
 8008e24:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	3302      	adds	r3, #2
 8008e2a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	82fb      	strh	r3, [r7, #22]
 8008e30:	e00b      	b.n	8008e4a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008e32:	8afb      	ldrh	r3, [r7, #22]
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	4413      	add	r3, r2
 8008e38:	781a      	ldrb	r2, [r3, #0]
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	3301      	adds	r3, #1
 8008e42:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008e44:	8afb      	ldrh	r3, [r7, #22]
 8008e46:	3302      	adds	r3, #2
 8008e48:	82fb      	strh	r3, [r7, #22]
 8008e4a:	8afa      	ldrh	r2, [r7, #22]
 8008e4c:	8abb      	ldrh	r3, [r7, #20]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d3ef      	bcc.n	8008e32 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	2200      	movs	r2, #0
 8008e56:	701a      	strb	r2, [r3, #0]
  }
}
 8008e58:	bf00      	nop
 8008e5a:	371c      	adds	r7, #28
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b085      	sub	sp, #20
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	881a      	ldrh	r2, [r3, #0]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	4413      	add	r3, r2
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4413      	add	r3, r2
 8008e8a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3714      	adds	r7, #20
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr

08008e9a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008e9a:	b580      	push	{r7, lr}
 8008e9c:	b086      	sub	sp, #24
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	60f8      	str	r0, [r7, #12]
 8008ea2:	60b9      	str	r1, [r7, #8]
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	789b      	ldrb	r3, [r3, #2]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d002      	beq.n	8008eba <USBH_CtlReq+0x20>
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	d00f      	beq.n	8008ed8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008eb8:	e027      	b.n	8008f0a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	68ba      	ldr	r2, [r7, #8]
 8008ebe:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	88fa      	ldrh	r2, [r7, #6]
 8008ec4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2202      	movs	r2, #2
 8008ed0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	75fb      	strb	r3, [r7, #23]
      break;
 8008ed6:	e018      	b.n	8008f0a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	f000 f81b 	bl	8008f14 <USBH_HandleControl>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008ee2:	7dfb      	ldrb	r3, [r7, #23]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d002      	beq.n	8008eee <USBH_CtlReq+0x54>
 8008ee8:	7dfb      	ldrb	r3, [r7, #23]
 8008eea:	2b03      	cmp	r3, #3
 8008eec:	d106      	bne.n	8008efc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	761a      	strb	r2, [r3, #24]
      break;
 8008efa:	e005      	b.n	8008f08 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008efc:	7dfb      	ldrb	r3, [r7, #23]
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d102      	bne.n	8008f08 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2201      	movs	r2, #1
 8008f06:	709a      	strb	r2, [r3, #2]
      break;
 8008f08:	bf00      	nop
  }
  return status;
 8008f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3718      	adds	r7, #24
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b086      	sub	sp, #24
 8008f18:	af02      	add	r7, sp, #8
 8008f1a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008f20:	2300      	movs	r3, #0
 8008f22:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	7e1b      	ldrb	r3, [r3, #24]
 8008f28:	3b01      	subs	r3, #1
 8008f2a:	2b0a      	cmp	r3, #10
 8008f2c:	f200 8156 	bhi.w	80091dc <USBH_HandleControl+0x2c8>
 8008f30:	a201      	add	r2, pc, #4	; (adr r2, 8008f38 <USBH_HandleControl+0x24>)
 8008f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f36:	bf00      	nop
 8008f38:	08008f65 	.word	0x08008f65
 8008f3c:	08008f7f 	.word	0x08008f7f
 8008f40:	08008fe9 	.word	0x08008fe9
 8008f44:	0800900f 	.word	0x0800900f
 8008f48:	08009047 	.word	0x08009047
 8008f4c:	08009071 	.word	0x08009071
 8008f50:	080090c3 	.word	0x080090c3
 8008f54:	080090e5 	.word	0x080090e5
 8008f58:	08009121 	.word	0x08009121
 8008f5c:	08009147 	.word	0x08009147
 8008f60:	08009185 	.word	0x08009185
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f103 0110 	add.w	r1, r3, #16
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	795b      	ldrb	r3, [r3, #5]
 8008f6e:	461a      	mov	r2, r3
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 f943 	bl	80091fc <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2202      	movs	r2, #2
 8008f7a:	761a      	strb	r2, [r3, #24]
      break;
 8008f7c:	e139      	b.n	80091f2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	795b      	ldrb	r3, [r3, #5]
 8008f82:	4619      	mov	r1, r3
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f003 fb43 	bl	800c610 <USBH_LL_GetURBState>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008f8e:	7bbb      	ldrb	r3, [r7, #14]
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d11e      	bne.n	8008fd2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	7c1b      	ldrb	r3, [r3, #16]
 8008f98:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008f9c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	8adb      	ldrh	r3, [r3, #22]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d00a      	beq.n	8008fbc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008fa6:	7b7b      	ldrb	r3, [r7, #13]
 8008fa8:	2b80      	cmp	r3, #128	; 0x80
 8008faa:	d103      	bne.n	8008fb4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2203      	movs	r2, #3
 8008fb0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008fb2:	e115      	b.n	80091e0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2205      	movs	r2, #5
 8008fb8:	761a      	strb	r2, [r3, #24]
      break;
 8008fba:	e111      	b.n	80091e0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008fbc:	7b7b      	ldrb	r3, [r7, #13]
 8008fbe:	2b80      	cmp	r3, #128	; 0x80
 8008fc0:	d103      	bne.n	8008fca <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2209      	movs	r2, #9
 8008fc6:	761a      	strb	r2, [r3, #24]
      break;
 8008fc8:	e10a      	b.n	80091e0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2207      	movs	r2, #7
 8008fce:	761a      	strb	r2, [r3, #24]
      break;
 8008fd0:	e106      	b.n	80091e0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008fd2:	7bbb      	ldrb	r3, [r7, #14]
 8008fd4:	2b04      	cmp	r3, #4
 8008fd6:	d003      	beq.n	8008fe0 <USBH_HandleControl+0xcc>
 8008fd8:	7bbb      	ldrb	r3, [r7, #14]
 8008fda:	2b02      	cmp	r3, #2
 8008fdc:	f040 8100 	bne.w	80091e0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	220b      	movs	r2, #11
 8008fe4:	761a      	strb	r2, [r3, #24]
      break;
 8008fe6:	e0fb      	b.n	80091e0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008fee:	b29a      	uxth	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6899      	ldr	r1, [r3, #8]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	899a      	ldrh	r2, [r3, #12]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	791b      	ldrb	r3, [r3, #4]
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 f93a 	bl	800927a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2204      	movs	r2, #4
 800900a:	761a      	strb	r2, [r3, #24]
      break;
 800900c:	e0f1      	b.n	80091f2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	791b      	ldrb	r3, [r3, #4]
 8009012:	4619      	mov	r1, r3
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f003 fafb 	bl	800c610 <USBH_LL_GetURBState>
 800901a:	4603      	mov	r3, r0
 800901c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800901e:	7bbb      	ldrb	r3, [r7, #14]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d102      	bne.n	800902a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2209      	movs	r2, #9
 8009028:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800902a:	7bbb      	ldrb	r3, [r7, #14]
 800902c:	2b05      	cmp	r3, #5
 800902e:	d102      	bne.n	8009036 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009030:	2303      	movs	r3, #3
 8009032:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009034:	e0d6      	b.n	80091e4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009036:	7bbb      	ldrb	r3, [r7, #14]
 8009038:	2b04      	cmp	r3, #4
 800903a:	f040 80d3 	bne.w	80091e4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	220b      	movs	r2, #11
 8009042:	761a      	strb	r2, [r3, #24]
      break;
 8009044:	e0ce      	b.n	80091e4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6899      	ldr	r1, [r3, #8]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	899a      	ldrh	r2, [r3, #12]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	795b      	ldrb	r3, [r3, #5]
 8009052:	2001      	movs	r0, #1
 8009054:	9000      	str	r0, [sp, #0]
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 f8ea 	bl	8009230 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009062:	b29a      	uxth	r2, r3
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2206      	movs	r2, #6
 800906c:	761a      	strb	r2, [r3, #24]
      break;
 800906e:	e0c0      	b.n	80091f2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	795b      	ldrb	r3, [r3, #5]
 8009074:	4619      	mov	r1, r3
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f003 faca 	bl	800c610 <USBH_LL_GetURBState>
 800907c:	4603      	mov	r3, r0
 800907e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009080:	7bbb      	ldrb	r3, [r7, #14]
 8009082:	2b01      	cmp	r3, #1
 8009084:	d103      	bne.n	800908e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2207      	movs	r2, #7
 800908a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800908c:	e0ac      	b.n	80091e8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800908e:	7bbb      	ldrb	r3, [r7, #14]
 8009090:	2b05      	cmp	r3, #5
 8009092:	d105      	bne.n	80090a0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	220c      	movs	r2, #12
 8009098:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800909a:	2303      	movs	r3, #3
 800909c:	73fb      	strb	r3, [r7, #15]
      break;
 800909e:	e0a3      	b.n	80091e8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80090a0:	7bbb      	ldrb	r3, [r7, #14]
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d103      	bne.n	80090ae <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2205      	movs	r2, #5
 80090aa:	761a      	strb	r2, [r3, #24]
      break;
 80090ac:	e09c      	b.n	80091e8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80090ae:	7bbb      	ldrb	r3, [r7, #14]
 80090b0:	2b04      	cmp	r3, #4
 80090b2:	f040 8099 	bne.w	80091e8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	220b      	movs	r2, #11
 80090ba:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80090bc:	2302      	movs	r3, #2
 80090be:	73fb      	strb	r3, [r7, #15]
      break;
 80090c0:	e092      	b.n	80091e8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	791b      	ldrb	r3, [r3, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	2100      	movs	r1, #0
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 f8d5 	bl	800927a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80090d6:	b29a      	uxth	r2, r3
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2208      	movs	r2, #8
 80090e0:	761a      	strb	r2, [r3, #24]

      break;
 80090e2:	e086      	b.n	80091f2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	791b      	ldrb	r3, [r3, #4]
 80090e8:	4619      	mov	r1, r3
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f003 fa90 	bl	800c610 <USBH_LL_GetURBState>
 80090f0:	4603      	mov	r3, r0
 80090f2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80090f4:	7bbb      	ldrb	r3, [r7, #14]
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d105      	bne.n	8009106 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	220d      	movs	r2, #13
 80090fe:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009100:	2300      	movs	r3, #0
 8009102:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009104:	e072      	b.n	80091ec <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009106:	7bbb      	ldrb	r3, [r7, #14]
 8009108:	2b04      	cmp	r3, #4
 800910a:	d103      	bne.n	8009114 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	220b      	movs	r2, #11
 8009110:	761a      	strb	r2, [r3, #24]
      break;
 8009112:	e06b      	b.n	80091ec <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009114:	7bbb      	ldrb	r3, [r7, #14]
 8009116:	2b05      	cmp	r3, #5
 8009118:	d168      	bne.n	80091ec <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800911a:	2303      	movs	r3, #3
 800911c:	73fb      	strb	r3, [r7, #15]
      break;
 800911e:	e065      	b.n	80091ec <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	795b      	ldrb	r3, [r3, #5]
 8009124:	2201      	movs	r2, #1
 8009126:	9200      	str	r2, [sp, #0]
 8009128:	2200      	movs	r2, #0
 800912a:	2100      	movs	r1, #0
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 f87f 	bl	8009230 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009138:	b29a      	uxth	r2, r3
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	220a      	movs	r2, #10
 8009142:	761a      	strb	r2, [r3, #24]
      break;
 8009144:	e055      	b.n	80091f2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	795b      	ldrb	r3, [r3, #5]
 800914a:	4619      	mov	r1, r3
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f003 fa5f 	bl	800c610 <USBH_LL_GetURBState>
 8009152:	4603      	mov	r3, r0
 8009154:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009156:	7bbb      	ldrb	r3, [r7, #14]
 8009158:	2b01      	cmp	r3, #1
 800915a:	d105      	bne.n	8009168 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800915c:	2300      	movs	r3, #0
 800915e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	220d      	movs	r2, #13
 8009164:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009166:	e043      	b.n	80091f0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009168:	7bbb      	ldrb	r3, [r7, #14]
 800916a:	2b02      	cmp	r3, #2
 800916c:	d103      	bne.n	8009176 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2209      	movs	r2, #9
 8009172:	761a      	strb	r2, [r3, #24]
      break;
 8009174:	e03c      	b.n	80091f0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009176:	7bbb      	ldrb	r3, [r7, #14]
 8009178:	2b04      	cmp	r3, #4
 800917a:	d139      	bne.n	80091f0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	220b      	movs	r2, #11
 8009180:	761a      	strb	r2, [r3, #24]
      break;
 8009182:	e035      	b.n	80091f0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	7e5b      	ldrb	r3, [r3, #25]
 8009188:	3301      	adds	r3, #1
 800918a:	b2da      	uxtb	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	765a      	strb	r2, [r3, #25]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	7e5b      	ldrb	r3, [r3, #25]
 8009194:	2b02      	cmp	r3, #2
 8009196:	d806      	bhi.n	80091a6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2201      	movs	r2, #1
 80091a2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80091a4:	e025      	b.n	80091f2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80091ac:	2106      	movs	r1, #6
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	795b      	ldrb	r3, [r3, #5]
 80091bc:	4619      	mov	r1, r3
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 f90c 	bl	80093dc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	791b      	ldrb	r3, [r3, #4]
 80091c8:	4619      	mov	r1, r3
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 f906 	bl	80093dc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80091d6:	2302      	movs	r3, #2
 80091d8:	73fb      	strb	r3, [r7, #15]
      break;
 80091da:	e00a      	b.n	80091f2 <USBH_HandleControl+0x2de>

    default:
      break;
 80091dc:	bf00      	nop
 80091de:	e008      	b.n	80091f2 <USBH_HandleControl+0x2de>
      break;
 80091e0:	bf00      	nop
 80091e2:	e006      	b.n	80091f2 <USBH_HandleControl+0x2de>
      break;
 80091e4:	bf00      	nop
 80091e6:	e004      	b.n	80091f2 <USBH_HandleControl+0x2de>
      break;
 80091e8:	bf00      	nop
 80091ea:	e002      	b.n	80091f2 <USBH_HandleControl+0x2de>
      break;
 80091ec:	bf00      	nop
 80091ee:	e000      	b.n	80091f2 <USBH_HandleControl+0x2de>
      break;
 80091f0:	bf00      	nop
  }

  return status;
 80091f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3710      	adds	r7, #16
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b088      	sub	sp, #32
 8009200:	af04      	add	r7, sp, #16
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	4613      	mov	r3, r2
 8009208:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800920a:	79f9      	ldrb	r1, [r7, #7]
 800920c:	2300      	movs	r3, #0
 800920e:	9303      	str	r3, [sp, #12]
 8009210:	2308      	movs	r3, #8
 8009212:	9302      	str	r3, [sp, #8]
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	9301      	str	r3, [sp, #4]
 8009218:	2300      	movs	r3, #0
 800921a:	9300      	str	r3, [sp, #0]
 800921c:	2300      	movs	r3, #0
 800921e:	2200      	movs	r2, #0
 8009220:	68f8      	ldr	r0, [r7, #12]
 8009222:	f003 f9c4 	bl	800c5ae <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b088      	sub	sp, #32
 8009234:	af04      	add	r7, sp, #16
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	4611      	mov	r1, r2
 800923c:	461a      	mov	r2, r3
 800923e:	460b      	mov	r3, r1
 8009240:	80fb      	strh	r3, [r7, #6]
 8009242:	4613      	mov	r3, r2
 8009244:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800924c:	2b00      	cmp	r3, #0
 800924e:	d001      	beq.n	8009254 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009250:	2300      	movs	r3, #0
 8009252:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009254:	7979      	ldrb	r1, [r7, #5]
 8009256:	7e3b      	ldrb	r3, [r7, #24]
 8009258:	9303      	str	r3, [sp, #12]
 800925a:	88fb      	ldrh	r3, [r7, #6]
 800925c:	9302      	str	r3, [sp, #8]
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	9301      	str	r3, [sp, #4]
 8009262:	2301      	movs	r3, #1
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	2300      	movs	r3, #0
 8009268:	2200      	movs	r2, #0
 800926a:	68f8      	ldr	r0, [r7, #12]
 800926c:	f003 f99f 	bl	800c5ae <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009270:	2300      	movs	r3, #0
}
 8009272:	4618      	mov	r0, r3
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b088      	sub	sp, #32
 800927e:	af04      	add	r7, sp, #16
 8009280:	60f8      	str	r0, [r7, #12]
 8009282:	60b9      	str	r1, [r7, #8]
 8009284:	4611      	mov	r1, r2
 8009286:	461a      	mov	r2, r3
 8009288:	460b      	mov	r3, r1
 800928a:	80fb      	strh	r3, [r7, #6]
 800928c:	4613      	mov	r3, r2
 800928e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009290:	7979      	ldrb	r1, [r7, #5]
 8009292:	2300      	movs	r3, #0
 8009294:	9303      	str	r3, [sp, #12]
 8009296:	88fb      	ldrh	r3, [r7, #6]
 8009298:	9302      	str	r3, [sp, #8]
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	9301      	str	r3, [sp, #4]
 800929e:	2301      	movs	r3, #1
 80092a0:	9300      	str	r3, [sp, #0]
 80092a2:	2300      	movs	r3, #0
 80092a4:	2201      	movs	r2, #1
 80092a6:	68f8      	ldr	r0, [r7, #12]
 80092a8:	f003 f981 	bl	800c5ae <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80092ac:	2300      	movs	r3, #0

}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b088      	sub	sp, #32
 80092ba:	af04      	add	r7, sp, #16
 80092bc:	60f8      	str	r0, [r7, #12]
 80092be:	60b9      	str	r1, [r7, #8]
 80092c0:	4611      	mov	r1, r2
 80092c2:	461a      	mov	r2, r3
 80092c4:	460b      	mov	r3, r1
 80092c6:	80fb      	strh	r3, [r7, #6]
 80092c8:	4613      	mov	r3, r2
 80092ca:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d001      	beq.n	80092da <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80092d6:	2300      	movs	r3, #0
 80092d8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80092da:	7979      	ldrb	r1, [r7, #5]
 80092dc:	7e3b      	ldrb	r3, [r7, #24]
 80092de:	9303      	str	r3, [sp, #12]
 80092e0:	88fb      	ldrh	r3, [r7, #6]
 80092e2:	9302      	str	r3, [sp, #8]
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	9301      	str	r3, [sp, #4]
 80092e8:	2301      	movs	r3, #1
 80092ea:	9300      	str	r3, [sp, #0]
 80092ec:	2302      	movs	r3, #2
 80092ee:	2200      	movs	r2, #0
 80092f0:	68f8      	ldr	r0, [r7, #12]
 80092f2:	f003 f95c 	bl	800c5ae <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3710      	adds	r7, #16
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b088      	sub	sp, #32
 8009304:	af04      	add	r7, sp, #16
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	4611      	mov	r1, r2
 800930c:	461a      	mov	r2, r3
 800930e:	460b      	mov	r3, r1
 8009310:	80fb      	strh	r3, [r7, #6]
 8009312:	4613      	mov	r3, r2
 8009314:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009316:	7979      	ldrb	r1, [r7, #5]
 8009318:	2300      	movs	r3, #0
 800931a:	9303      	str	r3, [sp, #12]
 800931c:	88fb      	ldrh	r3, [r7, #6]
 800931e:	9302      	str	r3, [sp, #8]
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	9301      	str	r3, [sp, #4]
 8009324:	2301      	movs	r3, #1
 8009326:	9300      	str	r3, [sp, #0]
 8009328:	2302      	movs	r3, #2
 800932a:	2201      	movs	r2, #1
 800932c:	68f8      	ldr	r0, [r7, #12]
 800932e:	f003 f93e 	bl	800c5ae <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	3710      	adds	r7, #16
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b086      	sub	sp, #24
 8009340:	af04      	add	r7, sp, #16
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	4608      	mov	r0, r1
 8009346:	4611      	mov	r1, r2
 8009348:	461a      	mov	r2, r3
 800934a:	4603      	mov	r3, r0
 800934c:	70fb      	strb	r3, [r7, #3]
 800934e:	460b      	mov	r3, r1
 8009350:	70bb      	strb	r3, [r7, #2]
 8009352:	4613      	mov	r3, r2
 8009354:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009356:	7878      	ldrb	r0, [r7, #1]
 8009358:	78ba      	ldrb	r2, [r7, #2]
 800935a:	78f9      	ldrb	r1, [r7, #3]
 800935c:	8b3b      	ldrh	r3, [r7, #24]
 800935e:	9302      	str	r3, [sp, #8]
 8009360:	7d3b      	ldrb	r3, [r7, #20]
 8009362:	9301      	str	r3, [sp, #4]
 8009364:	7c3b      	ldrb	r3, [r7, #16]
 8009366:	9300      	str	r3, [sp, #0]
 8009368:	4603      	mov	r3, r0
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f003 f8d1 	bl	800c512 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3708      	adds	r7, #8
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b082      	sub	sp, #8
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
 8009382:	460b      	mov	r3, r1
 8009384:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8009386:	78fb      	ldrb	r3, [r7, #3]
 8009388:	4619      	mov	r1, r3
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f003 f8f0 	bl	800c570 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3708      	adds	r7, #8
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b084      	sub	sp, #16
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
 80093a2:	460b      	mov	r3, r1
 80093a4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f836 	bl	8009418 <USBH_GetFreePipe>
 80093ac:	4603      	mov	r3, r0
 80093ae:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80093b0:	89fb      	ldrh	r3, [r7, #14]
 80093b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d00a      	beq.n	80093d0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80093ba:	78fa      	ldrb	r2, [r7, #3]
 80093bc:	89fb      	ldrh	r3, [r7, #14]
 80093be:	f003 030f 	and.w	r3, r3, #15
 80093c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093c6:	6879      	ldr	r1, [r7, #4]
 80093c8:	33e0      	adds	r3, #224	; 0xe0
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	440b      	add	r3, r1
 80093ce:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80093d0:	89fb      	ldrh	r3, [r7, #14]
 80093d2:	b2db      	uxtb	r3, r3
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	460b      	mov	r3, r1
 80093e6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80093e8:	78fb      	ldrb	r3, [r7, #3]
 80093ea:	2b0a      	cmp	r3, #10
 80093ec:	d80d      	bhi.n	800940a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80093ee:	78fb      	ldrb	r3, [r7, #3]
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	33e0      	adds	r3, #224	; 0xe0
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	4413      	add	r3, r2
 80093f8:	685a      	ldr	r2, [r3, #4]
 80093fa:	78fb      	ldrb	r3, [r7, #3]
 80093fc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009400:	6879      	ldr	r1, [r7, #4]
 8009402:	33e0      	adds	r3, #224	; 0xe0
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	440b      	add	r3, r1
 8009408:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009418:	b480      	push	{r7}
 800941a:	b085      	sub	sp, #20
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009420:	2300      	movs	r3, #0
 8009422:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009424:	2300      	movs	r3, #0
 8009426:	73fb      	strb	r3, [r7, #15]
 8009428:	e00f      	b.n	800944a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800942a:	7bfb      	ldrb	r3, [r7, #15]
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	33e0      	adds	r3, #224	; 0xe0
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	4413      	add	r3, r2
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800943a:	2b00      	cmp	r3, #0
 800943c:	d102      	bne.n	8009444 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800943e:	7bfb      	ldrb	r3, [r7, #15]
 8009440:	b29b      	uxth	r3, r3
 8009442:	e007      	b.n	8009454 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8009444:	7bfb      	ldrb	r3, [r7, #15]
 8009446:	3301      	adds	r3, #1
 8009448:	73fb      	strb	r3, [r7, #15]
 800944a:	7bfb      	ldrb	r3, [r7, #15]
 800944c:	2b0a      	cmp	r3, #10
 800944e:	d9ec      	bls.n	800942a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009450:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009454:	4618      	mov	r0, r3
 8009456:	3714      	adds	r7, #20
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
 8009466:	4603      	mov	r3, r0
 8009468:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800946a:	79fb      	ldrb	r3, [r7, #7]
 800946c:	4a08      	ldr	r2, [pc, #32]	; (8009490 <disk_status+0x30>)
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	4413      	add	r3, r2
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	79fa      	ldrb	r2, [r7, #7]
 8009478:	4905      	ldr	r1, [pc, #20]	; (8009490 <disk_status+0x30>)
 800947a:	440a      	add	r2, r1
 800947c:	7a12      	ldrb	r2, [r2, #8]
 800947e:	4610      	mov	r0, r2
 8009480:	4798      	blx	r3
 8009482:	4603      	mov	r3, r0
 8009484:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009486:	7bfb      	ldrb	r3, [r7, #15]
}
 8009488:	4618      	mov	r0, r3
 800948a:	3710      	adds	r7, #16
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}
 8009490:	200000d8 	.word	0x200000d8

08009494 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	4603      	mov	r3, r0
 800949c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800949e:	2300      	movs	r3, #0
 80094a0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80094a2:	79fb      	ldrb	r3, [r7, #7]
 80094a4:	4a0d      	ldr	r2, [pc, #52]	; (80094dc <disk_initialize+0x48>)
 80094a6:	5cd3      	ldrb	r3, [r2, r3]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d111      	bne.n	80094d0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80094ac:	79fb      	ldrb	r3, [r7, #7]
 80094ae:	4a0b      	ldr	r2, [pc, #44]	; (80094dc <disk_initialize+0x48>)
 80094b0:	2101      	movs	r1, #1
 80094b2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80094b4:	79fb      	ldrb	r3, [r7, #7]
 80094b6:	4a09      	ldr	r2, [pc, #36]	; (80094dc <disk_initialize+0x48>)
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	4413      	add	r3, r2
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	79fa      	ldrb	r2, [r7, #7]
 80094c2:	4906      	ldr	r1, [pc, #24]	; (80094dc <disk_initialize+0x48>)
 80094c4:	440a      	add	r2, r1
 80094c6:	7a12      	ldrb	r2, [r2, #8]
 80094c8:	4610      	mov	r0, r2
 80094ca:	4798      	blx	r3
 80094cc:	4603      	mov	r3, r0
 80094ce:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80094d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	200000d8 	.word	0x200000d8

080094e0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80094e0:	b590      	push	{r4, r7, lr}
 80094e2:	b087      	sub	sp, #28
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	60b9      	str	r1, [r7, #8]
 80094e8:	607a      	str	r2, [r7, #4]
 80094ea:	603b      	str	r3, [r7, #0]
 80094ec:	4603      	mov	r3, r0
 80094ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80094f0:	7bfb      	ldrb	r3, [r7, #15]
 80094f2:	4a0a      	ldr	r2, [pc, #40]	; (800951c <disk_read+0x3c>)
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	4413      	add	r3, r2
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	689c      	ldr	r4, [r3, #8]
 80094fc:	7bfb      	ldrb	r3, [r7, #15]
 80094fe:	4a07      	ldr	r2, [pc, #28]	; (800951c <disk_read+0x3c>)
 8009500:	4413      	add	r3, r2
 8009502:	7a18      	ldrb	r0, [r3, #8]
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	68b9      	ldr	r1, [r7, #8]
 800950a:	47a0      	blx	r4
 800950c:	4603      	mov	r3, r0
 800950e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009510:	7dfb      	ldrb	r3, [r7, #23]
}
 8009512:	4618      	mov	r0, r3
 8009514:	371c      	adds	r7, #28
 8009516:	46bd      	mov	sp, r7
 8009518:	bd90      	pop	{r4, r7, pc}
 800951a:	bf00      	nop
 800951c:	200000d8 	.word	0x200000d8

08009520 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009520:	b590      	push	{r4, r7, lr}
 8009522:	b087      	sub	sp, #28
 8009524:	af00      	add	r7, sp, #0
 8009526:	60b9      	str	r1, [r7, #8]
 8009528:	607a      	str	r2, [r7, #4]
 800952a:	603b      	str	r3, [r7, #0]
 800952c:	4603      	mov	r3, r0
 800952e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009530:	7bfb      	ldrb	r3, [r7, #15]
 8009532:	4a0a      	ldr	r2, [pc, #40]	; (800955c <disk_write+0x3c>)
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	4413      	add	r3, r2
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	68dc      	ldr	r4, [r3, #12]
 800953c:	7bfb      	ldrb	r3, [r7, #15]
 800953e:	4a07      	ldr	r2, [pc, #28]	; (800955c <disk_write+0x3c>)
 8009540:	4413      	add	r3, r2
 8009542:	7a18      	ldrb	r0, [r3, #8]
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	68b9      	ldr	r1, [r7, #8]
 800954a:	47a0      	blx	r4
 800954c:	4603      	mov	r3, r0
 800954e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009550:	7dfb      	ldrb	r3, [r7, #23]
}
 8009552:	4618      	mov	r0, r3
 8009554:	371c      	adds	r7, #28
 8009556:	46bd      	mov	sp, r7
 8009558:	bd90      	pop	{r4, r7, pc}
 800955a:	bf00      	nop
 800955c:	200000d8 	.word	0x200000d8

08009560 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	4603      	mov	r3, r0
 8009568:	603a      	str	r2, [r7, #0]
 800956a:	71fb      	strb	r3, [r7, #7]
 800956c:	460b      	mov	r3, r1
 800956e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009570:	79fb      	ldrb	r3, [r7, #7]
 8009572:	4a09      	ldr	r2, [pc, #36]	; (8009598 <disk_ioctl+0x38>)
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	4413      	add	r3, r2
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	691b      	ldr	r3, [r3, #16]
 800957c:	79fa      	ldrb	r2, [r7, #7]
 800957e:	4906      	ldr	r1, [pc, #24]	; (8009598 <disk_ioctl+0x38>)
 8009580:	440a      	add	r2, r1
 8009582:	7a10      	ldrb	r0, [r2, #8]
 8009584:	79b9      	ldrb	r1, [r7, #6]
 8009586:	683a      	ldr	r2, [r7, #0]
 8009588:	4798      	blx	r3
 800958a:	4603      	mov	r3, r0
 800958c:	73fb      	strb	r3, [r7, #15]
  return res;
 800958e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009590:	4618      	mov	r0, r3
 8009592:	3710      	adds	r7, #16
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	200000d8 	.word	0x200000d8

0800959c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800959c:	b480      	push	{r7}
 800959e:	b085      	sub	sp, #20
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	3301      	adds	r3, #1
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80095ac:	89fb      	ldrh	r3, [r7, #14]
 80095ae:	021b      	lsls	r3, r3, #8
 80095b0:	b21a      	sxth	r2, r3
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	b21b      	sxth	r3, r3
 80095b8:	4313      	orrs	r3, r2
 80095ba:	b21b      	sxth	r3, r3
 80095bc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80095be:	89fb      	ldrh	r3, [r7, #14]
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3714      	adds	r7, #20
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr

080095cc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80095cc:	b480      	push	{r7}
 80095ce:	b085      	sub	sp, #20
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	3303      	adds	r3, #3
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	021b      	lsls	r3, r3, #8
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	3202      	adds	r2, #2
 80095e4:	7812      	ldrb	r2, [r2, #0]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	021b      	lsls	r3, r3, #8
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	3201      	adds	r2, #1
 80095f2:	7812      	ldrb	r2, [r2, #0]
 80095f4:	4313      	orrs	r3, r2
 80095f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	021b      	lsls	r3, r3, #8
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	7812      	ldrb	r2, [r2, #0]
 8009600:	4313      	orrs	r3, r2
 8009602:	60fb      	str	r3, [r7, #12]
	return rv;
 8009604:	68fb      	ldr	r3, [r7, #12]
}
 8009606:	4618      	mov	r0, r3
 8009608:	3714      	adds	r7, #20
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr

08009612 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009612:	b480      	push	{r7}
 8009614:	b083      	sub	sp, #12
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
 800961a:	460b      	mov	r3, r1
 800961c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	1c5a      	adds	r2, r3, #1
 8009622:	607a      	str	r2, [r7, #4]
 8009624:	887a      	ldrh	r2, [r7, #2]
 8009626:	b2d2      	uxtb	r2, r2
 8009628:	701a      	strb	r2, [r3, #0]
 800962a:	887b      	ldrh	r3, [r7, #2]
 800962c:	0a1b      	lsrs	r3, r3, #8
 800962e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	1c5a      	adds	r2, r3, #1
 8009634:	607a      	str	r2, [r7, #4]
 8009636:	887a      	ldrh	r2, [r7, #2]
 8009638:	b2d2      	uxtb	r2, r2
 800963a:	701a      	strb	r2, [r3, #0]
}
 800963c:	bf00      	nop
 800963e:	370c      	adds	r7, #12
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr

08009648 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	1c5a      	adds	r2, r3, #1
 8009656:	607a      	str	r2, [r7, #4]
 8009658:	683a      	ldr	r2, [r7, #0]
 800965a:	b2d2      	uxtb	r2, r2
 800965c:	701a      	strb	r2, [r3, #0]
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	0a1b      	lsrs	r3, r3, #8
 8009662:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	1c5a      	adds	r2, r3, #1
 8009668:	607a      	str	r2, [r7, #4]
 800966a:	683a      	ldr	r2, [r7, #0]
 800966c:	b2d2      	uxtb	r2, r2
 800966e:	701a      	strb	r2, [r3, #0]
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	0a1b      	lsrs	r3, r3, #8
 8009674:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	1c5a      	adds	r2, r3, #1
 800967a:	607a      	str	r2, [r7, #4]
 800967c:	683a      	ldr	r2, [r7, #0]
 800967e:	b2d2      	uxtb	r2, r2
 8009680:	701a      	strb	r2, [r3, #0]
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	0a1b      	lsrs	r3, r3, #8
 8009686:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	1c5a      	adds	r2, r3, #1
 800968c:	607a      	str	r2, [r7, #4]
 800968e:	683a      	ldr	r2, [r7, #0]
 8009690:	b2d2      	uxtb	r2, r2
 8009692:	701a      	strb	r2, [r3, #0]
}
 8009694:	bf00      	nop
 8009696:	370c      	adds	r7, #12
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80096a0:	b480      	push	{r7}
 80096a2:	b087      	sub	sp, #28
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00d      	beq.n	80096d6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80096ba:	693a      	ldr	r2, [r7, #16]
 80096bc:	1c53      	adds	r3, r2, #1
 80096be:	613b      	str	r3, [r7, #16]
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	1c59      	adds	r1, r3, #1
 80096c4:	6179      	str	r1, [r7, #20]
 80096c6:	7812      	ldrb	r2, [r2, #0]
 80096c8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	3b01      	subs	r3, #1
 80096ce:	607b      	str	r3, [r7, #4]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1f1      	bne.n	80096ba <mem_cpy+0x1a>
	}
}
 80096d6:	bf00      	nop
 80096d8:	371c      	adds	r7, #28
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr

080096e2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80096e2:	b480      	push	{r7}
 80096e4:	b087      	sub	sp, #28
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	60f8      	str	r0, [r7, #12]
 80096ea:	60b9      	str	r1, [r7, #8]
 80096ec:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	1c5a      	adds	r2, r3, #1
 80096f6:	617a      	str	r2, [r7, #20]
 80096f8:	68ba      	ldr	r2, [r7, #8]
 80096fa:	b2d2      	uxtb	r2, r2
 80096fc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	3b01      	subs	r3, #1
 8009702:	607b      	str	r3, [r7, #4]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1f3      	bne.n	80096f2 <mem_set+0x10>
}
 800970a:	bf00      	nop
 800970c:	bf00      	nop
 800970e:	371c      	adds	r7, #28
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009718:	b480      	push	{r7}
 800971a:	b089      	sub	sp, #36	; 0x24
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	60b9      	str	r1, [r7, #8]
 8009722:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	61fb      	str	r3, [r7, #28]
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800972c:	2300      	movs	r3, #0
 800972e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	1c5a      	adds	r2, r3, #1
 8009734:	61fa      	str	r2, [r7, #28]
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	4619      	mov	r1, r3
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	1c5a      	adds	r2, r3, #1
 800973e:	61ba      	str	r2, [r7, #24]
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	1acb      	subs	r3, r1, r3
 8009744:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	3b01      	subs	r3, #1
 800974a:	607b      	str	r3, [r7, #4]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d002      	beq.n	8009758 <mem_cmp+0x40>
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d0eb      	beq.n	8009730 <mem_cmp+0x18>

	return r;
 8009758:	697b      	ldr	r3, [r7, #20]
}
 800975a:	4618      	mov	r0, r3
 800975c:	3724      	adds	r7, #36	; 0x24
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr

08009766 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009766:	b480      	push	{r7}
 8009768:	b083      	sub	sp, #12
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
 800976e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009770:	e002      	b.n	8009778 <chk_chr+0x12>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	3301      	adds	r3, #1
 8009776:	607b      	str	r3, [r7, #4]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d005      	beq.n	800978c <chk_chr+0x26>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	461a      	mov	r2, r3
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	4293      	cmp	r3, r2
 800978a:	d1f2      	bne.n	8009772 <chk_chr+0xc>
	return *str;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	781b      	ldrb	r3, [r3, #0]
}
 8009790:	4618      	mov	r0, r3
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800979c:	b480      	push	{r7}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80097a6:	2300      	movs	r3, #0
 80097a8:	60bb      	str	r3, [r7, #8]
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	60fb      	str	r3, [r7, #12]
 80097ae:	e029      	b.n	8009804 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80097b0:	4a27      	ldr	r2, [pc, #156]	; (8009850 <chk_lock+0xb4>)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	011b      	lsls	r3, r3, #4
 80097b6:	4413      	add	r3, r2
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d01d      	beq.n	80097fa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80097be:	4a24      	ldr	r2, [pc, #144]	; (8009850 <chk_lock+0xb4>)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	011b      	lsls	r3, r3, #4
 80097c4:	4413      	add	r3, r2
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d116      	bne.n	80097fe <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80097d0:	4a1f      	ldr	r2, [pc, #124]	; (8009850 <chk_lock+0xb4>)
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	011b      	lsls	r3, r3, #4
 80097d6:	4413      	add	r3, r2
 80097d8:	3304      	adds	r3, #4
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d10c      	bne.n	80097fe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80097e4:	4a1a      	ldr	r2, [pc, #104]	; (8009850 <chk_lock+0xb4>)
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	011b      	lsls	r3, r3, #4
 80097ea:	4413      	add	r3, r2
 80097ec:	3308      	adds	r3, #8
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d102      	bne.n	80097fe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80097f8:	e007      	b.n	800980a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80097fa:	2301      	movs	r3, #1
 80097fc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	3301      	adds	r3, #1
 8009802:	60fb      	str	r3, [r7, #12]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2b01      	cmp	r3, #1
 8009808:	d9d2      	bls.n	80097b0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2b02      	cmp	r3, #2
 800980e:	d109      	bne.n	8009824 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d102      	bne.n	800981c <chk_lock+0x80>
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	2b02      	cmp	r3, #2
 800981a:	d101      	bne.n	8009820 <chk_lock+0x84>
 800981c:	2300      	movs	r3, #0
 800981e:	e010      	b.n	8009842 <chk_lock+0xa6>
 8009820:	2312      	movs	r3, #18
 8009822:	e00e      	b.n	8009842 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d108      	bne.n	800983c <chk_lock+0xa0>
 800982a:	4a09      	ldr	r2, [pc, #36]	; (8009850 <chk_lock+0xb4>)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	011b      	lsls	r3, r3, #4
 8009830:	4413      	add	r3, r2
 8009832:	330c      	adds	r3, #12
 8009834:	881b      	ldrh	r3, [r3, #0]
 8009836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800983a:	d101      	bne.n	8009840 <chk_lock+0xa4>
 800983c:	2310      	movs	r3, #16
 800983e:	e000      	b.n	8009842 <chk_lock+0xa6>
 8009840:	2300      	movs	r3, #0
}
 8009842:	4618      	mov	r0, r3
 8009844:	3714      	adds	r7, #20
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr
 800984e:	bf00      	nop
 8009850:	200000b8 	.word	0x200000b8

08009854 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800985a:	2300      	movs	r3, #0
 800985c:	607b      	str	r3, [r7, #4]
 800985e:	e002      	b.n	8009866 <enq_lock+0x12>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	3301      	adds	r3, #1
 8009864:	607b      	str	r3, [r7, #4]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2b01      	cmp	r3, #1
 800986a:	d806      	bhi.n	800987a <enq_lock+0x26>
 800986c:	4a09      	ldr	r2, [pc, #36]	; (8009894 <enq_lock+0x40>)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	011b      	lsls	r3, r3, #4
 8009872:	4413      	add	r3, r2
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d1f2      	bne.n	8009860 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2b02      	cmp	r3, #2
 800987e:	bf14      	ite	ne
 8009880:	2301      	movne	r3, #1
 8009882:	2300      	moveq	r3, #0
 8009884:	b2db      	uxtb	r3, r3
}
 8009886:	4618      	mov	r0, r3
 8009888:	370c      	adds	r7, #12
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	200000b8 	.word	0x200000b8

08009898 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80098a2:	2300      	movs	r3, #0
 80098a4:	60fb      	str	r3, [r7, #12]
 80098a6:	e01f      	b.n	80098e8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80098a8:	4a41      	ldr	r2, [pc, #260]	; (80099b0 <inc_lock+0x118>)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	011b      	lsls	r3, r3, #4
 80098ae:	4413      	add	r3, r2
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d113      	bne.n	80098e2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80098ba:	4a3d      	ldr	r2, [pc, #244]	; (80099b0 <inc_lock+0x118>)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	011b      	lsls	r3, r3, #4
 80098c0:	4413      	add	r3, r2
 80098c2:	3304      	adds	r3, #4
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d109      	bne.n	80098e2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80098ce:	4a38      	ldr	r2, [pc, #224]	; (80099b0 <inc_lock+0x118>)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	011b      	lsls	r3, r3, #4
 80098d4:	4413      	add	r3, r2
 80098d6:	3308      	adds	r3, #8
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80098de:	429a      	cmp	r2, r3
 80098e0:	d006      	beq.n	80098f0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	3301      	adds	r3, #1
 80098e6:	60fb      	str	r3, [r7, #12]
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d9dc      	bls.n	80098a8 <inc_lock+0x10>
 80098ee:	e000      	b.n	80098f2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80098f0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d132      	bne.n	800995e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80098f8:	2300      	movs	r3, #0
 80098fa:	60fb      	str	r3, [r7, #12]
 80098fc:	e002      	b.n	8009904 <inc_lock+0x6c>
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	3301      	adds	r3, #1
 8009902:	60fb      	str	r3, [r7, #12]
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2b01      	cmp	r3, #1
 8009908:	d806      	bhi.n	8009918 <inc_lock+0x80>
 800990a:	4a29      	ldr	r2, [pc, #164]	; (80099b0 <inc_lock+0x118>)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	011b      	lsls	r3, r3, #4
 8009910:	4413      	add	r3, r2
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d1f2      	bne.n	80098fe <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2b02      	cmp	r3, #2
 800991c:	d101      	bne.n	8009922 <inc_lock+0x8a>
 800991e:	2300      	movs	r3, #0
 8009920:	e040      	b.n	80099a4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	4922      	ldr	r1, [pc, #136]	; (80099b0 <inc_lock+0x118>)
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	011b      	lsls	r3, r3, #4
 800992c:	440b      	add	r3, r1
 800992e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	689a      	ldr	r2, [r3, #8]
 8009934:	491e      	ldr	r1, [pc, #120]	; (80099b0 <inc_lock+0x118>)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	011b      	lsls	r3, r3, #4
 800993a:	440b      	add	r3, r1
 800993c:	3304      	adds	r3, #4
 800993e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	695a      	ldr	r2, [r3, #20]
 8009944:	491a      	ldr	r1, [pc, #104]	; (80099b0 <inc_lock+0x118>)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	011b      	lsls	r3, r3, #4
 800994a:	440b      	add	r3, r1
 800994c:	3308      	adds	r3, #8
 800994e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009950:	4a17      	ldr	r2, [pc, #92]	; (80099b0 <inc_lock+0x118>)
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	011b      	lsls	r3, r3, #4
 8009956:	4413      	add	r3, r2
 8009958:	330c      	adds	r3, #12
 800995a:	2200      	movs	r2, #0
 800995c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d009      	beq.n	8009978 <inc_lock+0xe0>
 8009964:	4a12      	ldr	r2, [pc, #72]	; (80099b0 <inc_lock+0x118>)
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	011b      	lsls	r3, r3, #4
 800996a:	4413      	add	r3, r2
 800996c:	330c      	adds	r3, #12
 800996e:	881b      	ldrh	r3, [r3, #0]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d001      	beq.n	8009978 <inc_lock+0xe0>
 8009974:	2300      	movs	r3, #0
 8009976:	e015      	b.n	80099a4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d108      	bne.n	8009990 <inc_lock+0xf8>
 800997e:	4a0c      	ldr	r2, [pc, #48]	; (80099b0 <inc_lock+0x118>)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	011b      	lsls	r3, r3, #4
 8009984:	4413      	add	r3, r2
 8009986:	330c      	adds	r3, #12
 8009988:	881b      	ldrh	r3, [r3, #0]
 800998a:	3301      	adds	r3, #1
 800998c:	b29a      	uxth	r2, r3
 800998e:	e001      	b.n	8009994 <inc_lock+0xfc>
 8009990:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009994:	4906      	ldr	r1, [pc, #24]	; (80099b0 <inc_lock+0x118>)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	011b      	lsls	r3, r3, #4
 800999a:	440b      	add	r3, r1
 800999c:	330c      	adds	r3, #12
 800999e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	3301      	adds	r3, #1
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3714      	adds	r7, #20
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr
 80099b0:	200000b8 	.word	0x200000b8

080099b4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b085      	sub	sp, #20
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	3b01      	subs	r3, #1
 80099c0:	607b      	str	r3, [r7, #4]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d825      	bhi.n	8009a14 <dec_lock+0x60>
		n = Files[i].ctr;
 80099c8:	4a17      	ldr	r2, [pc, #92]	; (8009a28 <dec_lock+0x74>)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	011b      	lsls	r3, r3, #4
 80099ce:	4413      	add	r3, r2
 80099d0:	330c      	adds	r3, #12
 80099d2:	881b      	ldrh	r3, [r3, #0]
 80099d4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80099d6:	89fb      	ldrh	r3, [r7, #14]
 80099d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099dc:	d101      	bne.n	80099e2 <dec_lock+0x2e>
 80099de:	2300      	movs	r3, #0
 80099e0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80099e2:	89fb      	ldrh	r3, [r7, #14]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d002      	beq.n	80099ee <dec_lock+0x3a>
 80099e8:	89fb      	ldrh	r3, [r7, #14]
 80099ea:	3b01      	subs	r3, #1
 80099ec:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80099ee:	4a0e      	ldr	r2, [pc, #56]	; (8009a28 <dec_lock+0x74>)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	011b      	lsls	r3, r3, #4
 80099f4:	4413      	add	r3, r2
 80099f6:	330c      	adds	r3, #12
 80099f8:	89fa      	ldrh	r2, [r7, #14]
 80099fa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80099fc:	89fb      	ldrh	r3, [r7, #14]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d105      	bne.n	8009a0e <dec_lock+0x5a>
 8009a02:	4a09      	ldr	r2, [pc, #36]	; (8009a28 <dec_lock+0x74>)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	011b      	lsls	r3, r3, #4
 8009a08:	4413      	add	r3, r2
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	737b      	strb	r3, [r7, #13]
 8009a12:	e001      	b.n	8009a18 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009a14:	2302      	movs	r3, #2
 8009a16:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009a18:	7b7b      	ldrb	r3, [r7, #13]
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3714      	adds	r7, #20
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr
 8009a26:	bf00      	nop
 8009a28:	200000b8 	.word	0x200000b8

08009a2c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b085      	sub	sp, #20
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009a34:	2300      	movs	r3, #0
 8009a36:	60fb      	str	r3, [r7, #12]
 8009a38:	e010      	b.n	8009a5c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009a3a:	4a0d      	ldr	r2, [pc, #52]	; (8009a70 <clear_lock+0x44>)
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	011b      	lsls	r3, r3, #4
 8009a40:	4413      	add	r3, r2
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d105      	bne.n	8009a56 <clear_lock+0x2a>
 8009a4a:	4a09      	ldr	r2, [pc, #36]	; (8009a70 <clear_lock+0x44>)
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	011b      	lsls	r3, r3, #4
 8009a50:	4413      	add	r3, r2
 8009a52:	2200      	movs	r2, #0
 8009a54:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	3301      	adds	r3, #1
 8009a5a:	60fb      	str	r3, [r7, #12]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d9eb      	bls.n	8009a3a <clear_lock+0xe>
	}
}
 8009a62:	bf00      	nop
 8009a64:	bf00      	nop
 8009a66:	3714      	adds	r7, #20
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr
 8009a70:	200000b8 	.word	0x200000b8

08009a74 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b086      	sub	sp, #24
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	78db      	ldrb	r3, [r3, #3]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d034      	beq.n	8009af2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a8c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	7858      	ldrb	r0, [r3, #1]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009a98:	2301      	movs	r3, #1
 8009a9a:	697a      	ldr	r2, [r7, #20]
 8009a9c:	f7ff fd40 	bl	8009520 <disk_write>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d002      	beq.n	8009aac <sync_window+0x38>
			res = FR_DISK_ERR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	73fb      	strb	r3, [r7, #15]
 8009aaa:	e022      	b.n	8009af2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab6:	697a      	ldr	r2, [r7, #20]
 8009ab8:	1ad2      	subs	r2, r2, r3
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	69db      	ldr	r3, [r3, #28]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d217      	bcs.n	8009af2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	789b      	ldrb	r3, [r3, #2]
 8009ac6:	613b      	str	r3, [r7, #16]
 8009ac8:	e010      	b.n	8009aec <sync_window+0x78>
					wsect += fs->fsize;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	69db      	ldr	r3, [r3, #28]
 8009ace:	697a      	ldr	r2, [r7, #20]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	7858      	ldrb	r0, [r3, #1]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009ade:	2301      	movs	r3, #1
 8009ae0:	697a      	ldr	r2, [r7, #20]
 8009ae2:	f7ff fd1d 	bl	8009520 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	613b      	str	r3, [r7, #16]
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d8eb      	bhi.n	8009aca <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3718      	adds	r7, #24
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009b06:	2300      	movs	r3, #0
 8009b08:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b0e:	683a      	ldr	r2, [r7, #0]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d01b      	beq.n	8009b4c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f7ff ffad 	bl	8009a74 <sync_window>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009b1e:	7bfb      	ldrb	r3, [r7, #15]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d113      	bne.n	8009b4c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	7858      	ldrb	r0, [r3, #1]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009b2e:	2301      	movs	r3, #1
 8009b30:	683a      	ldr	r2, [r7, #0]
 8009b32:	f7ff fcd5 	bl	80094e0 <disk_read>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d004      	beq.n	8009b46 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009b3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b40:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009b42:	2301      	movs	r3, #1
 8009b44:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	683a      	ldr	r2, [r7, #0]
 8009b4a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8009b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3710      	adds	r7, #16
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
	...

08009b58 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f7ff ff87 	bl	8009a74 <sync_window>
 8009b66:	4603      	mov	r3, r0
 8009b68:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009b6a:	7bfb      	ldrb	r3, [r7, #15]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d159      	bne.n	8009c24 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	2b03      	cmp	r3, #3
 8009b76:	d149      	bne.n	8009c0c <sync_fs+0xb4>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	791b      	ldrb	r3, [r3, #4]
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d145      	bne.n	8009c0c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	899b      	ldrh	r3, [r3, #12]
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	2100      	movs	r1, #0
 8009b8e:	f7ff fda8 	bl	80096e2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	3334      	adds	r3, #52	; 0x34
 8009b96:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009b9a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7ff fd37 	bl	8009612 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	3334      	adds	r3, #52	; 0x34
 8009ba8:	4921      	ldr	r1, [pc, #132]	; (8009c30 <sync_fs+0xd8>)
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7ff fd4c 	bl	8009648 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	3334      	adds	r3, #52	; 0x34
 8009bb4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009bb8:	491e      	ldr	r1, [pc, #120]	; (8009c34 <sync_fs+0xdc>)
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7ff fd44 	bl	8009648 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	3334      	adds	r3, #52	; 0x34
 8009bc4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	695b      	ldr	r3, [r3, #20]
 8009bcc:	4619      	mov	r1, r3
 8009bce:	4610      	mov	r0, r2
 8009bd0:	f7ff fd3a 	bl	8009648 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	3334      	adds	r3, #52	; 0x34
 8009bd8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	691b      	ldr	r3, [r3, #16]
 8009be0:	4619      	mov	r1, r3
 8009be2:	4610      	mov	r0, r2
 8009be4:	f7ff fd30 	bl	8009648 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6a1b      	ldr	r3, [r3, #32]
 8009bec:	1c5a      	adds	r2, r3, #1
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	7858      	ldrb	r0, [r3, #1]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c00:	2301      	movs	r3, #1
 8009c02:	f7ff fc8d 	bl	8009520 <disk_write>
			fs->fsi_flag = 0;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	785b      	ldrb	r3, [r3, #1]
 8009c10:	2200      	movs	r2, #0
 8009c12:	2100      	movs	r1, #0
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7ff fca3 	bl	8009560 <disk_ioctl>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d001      	beq.n	8009c24 <sync_fs+0xcc>
 8009c20:	2301      	movs	r3, #1
 8009c22:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	41615252 	.word	0x41615252
 8009c34:	61417272 	.word	0x61417272

08009c38 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	3b02      	subs	r3, #2
 8009c46:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	699b      	ldr	r3, [r3, #24]
 8009c4c:	3b02      	subs	r3, #2
 8009c4e:	683a      	ldr	r2, [r7, #0]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d301      	bcc.n	8009c58 <clust2sect+0x20>
 8009c54:	2300      	movs	r3, #0
 8009c56:	e008      	b.n	8009c6a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	895b      	ldrh	r3, [r3, #10]
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	fb03 f202 	mul.w	r2, r3, r2
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c68:	4413      	add	r3, r2
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	370c      	adds	r7, #12
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr

08009c76 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b086      	sub	sp, #24
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
 8009c7e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d904      	bls.n	8009c96 <get_fat+0x20>
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	699b      	ldr	r3, [r3, #24]
 8009c90:	683a      	ldr	r2, [r7, #0]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d302      	bcc.n	8009c9c <get_fat+0x26>
		val = 1;	/* Internal error */
 8009c96:	2301      	movs	r3, #1
 8009c98:	617b      	str	r3, [r7, #20]
 8009c9a:	e0bb      	b.n	8009e14 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009c9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ca0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	2b03      	cmp	r3, #3
 8009ca8:	f000 8083 	beq.w	8009db2 <get_fat+0x13c>
 8009cac:	2b03      	cmp	r3, #3
 8009cae:	f300 80a7 	bgt.w	8009e00 <get_fat+0x18a>
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d002      	beq.n	8009cbc <get_fat+0x46>
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d056      	beq.n	8009d68 <get_fat+0xf2>
 8009cba:	e0a1      	b.n	8009e00 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	60fb      	str	r3, [r7, #12]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	085b      	lsrs	r3, r3, #1
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	899b      	ldrh	r3, [r3, #12]
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8009cda:	4413      	add	r3, r2
 8009cdc:	4619      	mov	r1, r3
 8009cde:	6938      	ldr	r0, [r7, #16]
 8009ce0:	f7ff ff0c 	bl	8009afc <move_window>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	f040 808d 	bne.w	8009e06 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	1c5a      	adds	r2, r3, #1
 8009cf0:	60fa      	str	r2, [r7, #12]
 8009cf2:	693a      	ldr	r2, [r7, #16]
 8009cf4:	8992      	ldrh	r2, [r2, #12]
 8009cf6:	fbb3 f1f2 	udiv	r1, r3, r2
 8009cfa:	fb02 f201 	mul.w	r2, r2, r1
 8009cfe:	1a9b      	subs	r3, r3, r2
 8009d00:	693a      	ldr	r2, [r7, #16]
 8009d02:	4413      	add	r3, r2
 8009d04:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009d08:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	899b      	ldrh	r3, [r3, #12]
 8009d12:	4619      	mov	r1, r3
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d1a:	4413      	add	r3, r2
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	6938      	ldr	r0, [r7, #16]
 8009d20:	f7ff feec 	bl	8009afc <move_window>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d16f      	bne.n	8009e0a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	899b      	ldrh	r3, [r3, #12]
 8009d2e:	461a      	mov	r2, r3
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d36:	fb02 f201 	mul.w	r2, r2, r1
 8009d3a:	1a9b      	subs	r3, r3, r2
 8009d3c:	693a      	ldr	r2, [r7, #16]
 8009d3e:	4413      	add	r3, r2
 8009d40:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009d44:	021b      	lsls	r3, r3, #8
 8009d46:	461a      	mov	r2, r3
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	f003 0301 	and.w	r3, r3, #1
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d002      	beq.n	8009d5e <get_fat+0xe8>
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	091b      	lsrs	r3, r3, #4
 8009d5c:	e002      	b.n	8009d64 <get_fat+0xee>
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d64:	617b      	str	r3, [r7, #20]
			break;
 8009d66:	e055      	b.n	8009e14 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	899b      	ldrh	r3, [r3, #12]
 8009d70:	085b      	lsrs	r3, r3, #1
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	4619      	mov	r1, r3
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d7c:	4413      	add	r3, r2
 8009d7e:	4619      	mov	r1, r3
 8009d80:	6938      	ldr	r0, [r7, #16]
 8009d82:	f7ff febb 	bl	8009afc <move_window>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d140      	bne.n	8009e0e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	005b      	lsls	r3, r3, #1
 8009d96:	693a      	ldr	r2, [r7, #16]
 8009d98:	8992      	ldrh	r2, [r2, #12]
 8009d9a:	fbb3 f0f2 	udiv	r0, r3, r2
 8009d9e:	fb02 f200 	mul.w	r2, r2, r0
 8009da2:	1a9b      	subs	r3, r3, r2
 8009da4:	440b      	add	r3, r1
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7ff fbf8 	bl	800959c <ld_word>
 8009dac:	4603      	mov	r3, r0
 8009dae:	617b      	str	r3, [r7, #20]
			break;
 8009db0:	e030      	b.n	8009e14 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	899b      	ldrh	r3, [r3, #12]
 8009dba:	089b      	lsrs	r3, r3, #2
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8009dc6:	4413      	add	r3, r2
 8009dc8:	4619      	mov	r1, r3
 8009dca:	6938      	ldr	r0, [r7, #16]
 8009dcc:	f7ff fe96 	bl	8009afc <move_window>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d11d      	bne.n	8009e12 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	693a      	ldr	r2, [r7, #16]
 8009de2:	8992      	ldrh	r2, [r2, #12]
 8009de4:	fbb3 f0f2 	udiv	r0, r3, r2
 8009de8:	fb02 f200 	mul.w	r2, r2, r0
 8009dec:	1a9b      	subs	r3, r3, r2
 8009dee:	440b      	add	r3, r1
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7ff fbeb 	bl	80095cc <ld_dword>
 8009df6:	4603      	mov	r3, r0
 8009df8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009dfc:	617b      	str	r3, [r7, #20]
			break;
 8009dfe:	e009      	b.n	8009e14 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009e00:	2301      	movs	r3, #1
 8009e02:	617b      	str	r3, [r7, #20]
 8009e04:	e006      	b.n	8009e14 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009e06:	bf00      	nop
 8009e08:	e004      	b.n	8009e14 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009e0a:	bf00      	nop
 8009e0c:	e002      	b.n	8009e14 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009e0e:	bf00      	nop
 8009e10:	e000      	b.n	8009e14 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009e12:	bf00      	nop
		}
	}

	return val;
 8009e14:	697b      	ldr	r3, [r7, #20]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3718      	adds	r7, #24
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009e1e:	b590      	push	{r4, r7, lr}
 8009e20:	b089      	sub	sp, #36	; 0x24
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	60f8      	str	r0, [r7, #12]
 8009e26:	60b9      	str	r1, [r7, #8]
 8009e28:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009e2a:	2302      	movs	r3, #2
 8009e2c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	f240 8102 	bls.w	800a03a <put_fat+0x21c>
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	699b      	ldr	r3, [r3, #24]
 8009e3a:	68ba      	ldr	r2, [r7, #8]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	f080 80fc 	bcs.w	800a03a <put_fat+0x21c>
		switch (fs->fs_type) {
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	2b03      	cmp	r3, #3
 8009e48:	f000 80b6 	beq.w	8009fb8 <put_fat+0x19a>
 8009e4c:	2b03      	cmp	r3, #3
 8009e4e:	f300 80fd 	bgt.w	800a04c <put_fat+0x22e>
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d003      	beq.n	8009e5e <put_fat+0x40>
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	f000 8083 	beq.w	8009f62 <put_fat+0x144>
 8009e5c:	e0f6      	b.n	800a04c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	61bb      	str	r3, [r7, #24]
 8009e62:	69bb      	ldr	r3, [r7, #24]
 8009e64:	085b      	lsrs	r3, r3, #1
 8009e66:	69ba      	ldr	r2, [r7, #24]
 8009e68:	4413      	add	r3, r2
 8009e6a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	899b      	ldrh	r3, [r3, #12]
 8009e74:	4619      	mov	r1, r3
 8009e76:	69bb      	ldr	r3, [r7, #24]
 8009e78:	fbb3 f3f1 	udiv	r3, r3, r1
 8009e7c:	4413      	add	r3, r2
 8009e7e:	4619      	mov	r1, r3
 8009e80:	68f8      	ldr	r0, [r7, #12]
 8009e82:	f7ff fe3b 	bl	8009afc <move_window>
 8009e86:	4603      	mov	r3, r0
 8009e88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009e8a:	7ffb      	ldrb	r3, [r7, #31]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	f040 80d6 	bne.w	800a03e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009e98:	69bb      	ldr	r3, [r7, #24]
 8009e9a:	1c5a      	adds	r2, r3, #1
 8009e9c:	61ba      	str	r2, [r7, #24]
 8009e9e:	68fa      	ldr	r2, [r7, #12]
 8009ea0:	8992      	ldrh	r2, [r2, #12]
 8009ea2:	fbb3 f0f2 	udiv	r0, r3, r2
 8009ea6:	fb02 f200 	mul.w	r2, r2, r0
 8009eaa:	1a9b      	subs	r3, r3, r2
 8009eac:	440b      	add	r3, r1
 8009eae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	f003 0301 	and.w	r3, r3, #1
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d00d      	beq.n	8009ed6 <put_fat+0xb8>
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	b25b      	sxtb	r3, r3
 8009ec0:	f003 030f 	and.w	r3, r3, #15
 8009ec4:	b25a      	sxtb	r2, r3
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	011b      	lsls	r3, r3, #4
 8009ecc:	b25b      	sxtb	r3, r3
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	b25b      	sxtb	r3, r3
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	e001      	b.n	8009eda <put_fat+0xbc>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	b2db      	uxtb	r3, r3
 8009eda:	697a      	ldr	r2, [r7, #20]
 8009edc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	899b      	ldrh	r3, [r3, #12]
 8009eec:	4619      	mov	r1, r3
 8009eee:	69bb      	ldr	r3, [r7, #24]
 8009ef0:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ef4:	4413      	add	r3, r2
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	68f8      	ldr	r0, [r7, #12]
 8009efa:	f7ff fdff 	bl	8009afc <move_window>
 8009efe:	4603      	mov	r3, r0
 8009f00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009f02:	7ffb      	ldrb	r3, [r7, #31]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f040 809c 	bne.w	800a042 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	899b      	ldrh	r3, [r3, #12]
 8009f14:	461a      	mov	r2, r3
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	fbb3 f0f2 	udiv	r0, r3, r2
 8009f1c:	fb02 f200 	mul.w	r2, r2, r0
 8009f20:	1a9b      	subs	r3, r3, r2
 8009f22:	440b      	add	r3, r1
 8009f24:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	f003 0301 	and.w	r3, r3, #1
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d003      	beq.n	8009f38 <put_fat+0x11a>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	091b      	lsrs	r3, r3, #4
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	e00e      	b.n	8009f56 <put_fat+0x138>
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	b25b      	sxtb	r3, r3
 8009f3e:	f023 030f 	bic.w	r3, r3, #15
 8009f42:	b25a      	sxtb	r2, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	0a1b      	lsrs	r3, r3, #8
 8009f48:	b25b      	sxtb	r3, r3
 8009f4a:	f003 030f 	and.w	r3, r3, #15
 8009f4e:	b25b      	sxtb	r3, r3
 8009f50:	4313      	orrs	r3, r2
 8009f52:	b25b      	sxtb	r3, r3
 8009f54:	b2db      	uxtb	r3, r3
 8009f56:	697a      	ldr	r2, [r7, #20]
 8009f58:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	70da      	strb	r2, [r3, #3]
			break;
 8009f60:	e074      	b.n	800a04c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	899b      	ldrh	r3, [r3, #12]
 8009f6a:	085b      	lsrs	r3, r3, #1
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	4619      	mov	r1, r3
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f76:	4413      	add	r3, r2
 8009f78:	4619      	mov	r1, r3
 8009f7a:	68f8      	ldr	r0, [r7, #12]
 8009f7c:	f7ff fdbe 	bl	8009afc <move_window>
 8009f80:	4603      	mov	r3, r0
 8009f82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009f84:	7ffb      	ldrb	r3, [r7, #31]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d15d      	bne.n	800a046 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	005b      	lsls	r3, r3, #1
 8009f94:	68fa      	ldr	r2, [r7, #12]
 8009f96:	8992      	ldrh	r2, [r2, #12]
 8009f98:	fbb3 f0f2 	udiv	r0, r3, r2
 8009f9c:	fb02 f200 	mul.w	r2, r2, r0
 8009fa0:	1a9b      	subs	r3, r3, r2
 8009fa2:	440b      	add	r3, r1
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	b292      	uxth	r2, r2
 8009fa8:	4611      	mov	r1, r2
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7ff fb31 	bl	8009612 <st_word>
			fs->wflag = 1;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	70da      	strb	r2, [r3, #3]
			break;
 8009fb6:	e049      	b.n	800a04c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	899b      	ldrh	r3, [r3, #12]
 8009fc0:	089b      	lsrs	r3, r3, #2
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8009fcc:	4413      	add	r3, r2
 8009fce:	4619      	mov	r1, r3
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f7ff fd93 	bl	8009afc <move_window>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009fda:	7ffb      	ldrb	r3, [r7, #31]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d134      	bne.n	800a04a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	68fa      	ldr	r2, [r7, #12]
 8009ff2:	8992      	ldrh	r2, [r2, #12]
 8009ff4:	fbb3 f0f2 	udiv	r0, r3, r2
 8009ff8:	fb02 f200 	mul.w	r2, r2, r0
 8009ffc:	1a9b      	subs	r3, r3, r2
 8009ffe:	440b      	add	r3, r1
 800a000:	4618      	mov	r0, r3
 800a002:	f7ff fae3 	bl	80095cc <ld_dword>
 800a006:	4603      	mov	r3, r0
 800a008:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a00c:	4323      	orrs	r3, r4
 800a00e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	009b      	lsls	r3, r3, #2
 800a01a:	68fa      	ldr	r2, [r7, #12]
 800a01c:	8992      	ldrh	r2, [r2, #12]
 800a01e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a022:	fb02 f200 	mul.w	r2, r2, r0
 800a026:	1a9b      	subs	r3, r3, r2
 800a028:	440b      	add	r3, r1
 800a02a:	6879      	ldr	r1, [r7, #4]
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7ff fb0b 	bl	8009648 <st_dword>
			fs->wflag = 1;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2201      	movs	r2, #1
 800a036:	70da      	strb	r2, [r3, #3]
			break;
 800a038:	e008      	b.n	800a04c <put_fat+0x22e>
		}
	}
 800a03a:	bf00      	nop
 800a03c:	e006      	b.n	800a04c <put_fat+0x22e>
			if (res != FR_OK) break;
 800a03e:	bf00      	nop
 800a040:	e004      	b.n	800a04c <put_fat+0x22e>
			if (res != FR_OK) break;
 800a042:	bf00      	nop
 800a044:	e002      	b.n	800a04c <put_fat+0x22e>
			if (res != FR_OK) break;
 800a046:	bf00      	nop
 800a048:	e000      	b.n	800a04c <put_fat+0x22e>
			if (res != FR_OK) break;
 800a04a:	bf00      	nop
	return res;
 800a04c:	7ffb      	ldrb	r3, [r7, #31]
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3724      	adds	r7, #36	; 0x24
 800a052:	46bd      	mov	sp, r7
 800a054:	bd90      	pop	{r4, r7, pc}

0800a056 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a056:	b580      	push	{r7, lr}
 800a058:	b088      	sub	sp, #32
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	60f8      	str	r0, [r7, #12]
 800a05e:	60b9      	str	r1, [r7, #8]
 800a060:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a062:	2300      	movs	r3, #0
 800a064:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d904      	bls.n	800a07c <remove_chain+0x26>
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	699b      	ldr	r3, [r3, #24]
 800a076:	68ba      	ldr	r2, [r7, #8]
 800a078:	429a      	cmp	r2, r3
 800a07a:	d301      	bcc.n	800a080 <remove_chain+0x2a>
 800a07c:	2302      	movs	r3, #2
 800a07e:	e04b      	b.n	800a118 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d00c      	beq.n	800a0a0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a086:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a08a:	6879      	ldr	r1, [r7, #4]
 800a08c:	69b8      	ldr	r0, [r7, #24]
 800a08e:	f7ff fec6 	bl	8009e1e <put_fat>
 800a092:	4603      	mov	r3, r0
 800a094:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a096:	7ffb      	ldrb	r3, [r7, #31]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d001      	beq.n	800a0a0 <remove_chain+0x4a>
 800a09c:	7ffb      	ldrb	r3, [r7, #31]
 800a09e:	e03b      	b.n	800a118 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a0a0:	68b9      	ldr	r1, [r7, #8]
 800a0a2:	68f8      	ldr	r0, [r7, #12]
 800a0a4:	f7ff fde7 	bl	8009c76 <get_fat>
 800a0a8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d031      	beq.n	800a114 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d101      	bne.n	800a0ba <remove_chain+0x64>
 800a0b6:	2302      	movs	r3, #2
 800a0b8:	e02e      	b.n	800a118 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0c0:	d101      	bne.n	800a0c6 <remove_chain+0x70>
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e028      	b.n	800a118 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	68b9      	ldr	r1, [r7, #8]
 800a0ca:	69b8      	ldr	r0, [r7, #24]
 800a0cc:	f7ff fea7 	bl	8009e1e <put_fat>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a0d4:	7ffb      	ldrb	r3, [r7, #31]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d001      	beq.n	800a0de <remove_chain+0x88>
 800a0da:	7ffb      	ldrb	r3, [r7, #31]
 800a0dc:	e01c      	b.n	800a118 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a0de:	69bb      	ldr	r3, [r7, #24]
 800a0e0:	695a      	ldr	r2, [r3, #20]
 800a0e2:	69bb      	ldr	r3, [r7, #24]
 800a0e4:	699b      	ldr	r3, [r3, #24]
 800a0e6:	3b02      	subs	r3, #2
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d20b      	bcs.n	800a104 <remove_chain+0xae>
			fs->free_clst++;
 800a0ec:	69bb      	ldr	r3, [r7, #24]
 800a0ee:	695b      	ldr	r3, [r3, #20]
 800a0f0:	1c5a      	adds	r2, r3, #1
 800a0f2:	69bb      	ldr	r3, [r7, #24]
 800a0f4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800a0f6:	69bb      	ldr	r3, [r7, #24]
 800a0f8:	791b      	ldrb	r3, [r3, #4]
 800a0fa:	f043 0301 	orr.w	r3, r3, #1
 800a0fe:	b2da      	uxtb	r2, r3
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a108:	69bb      	ldr	r3, [r7, #24]
 800a10a:	699b      	ldr	r3, [r3, #24]
 800a10c:	68ba      	ldr	r2, [r7, #8]
 800a10e:	429a      	cmp	r2, r3
 800a110:	d3c6      	bcc.n	800a0a0 <remove_chain+0x4a>
 800a112:	e000      	b.n	800a116 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a114:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a116:	2300      	movs	r3, #0
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3720      	adds	r7, #32
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b088      	sub	sp, #32
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d10d      	bne.n	800a152 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	691b      	ldr	r3, [r3, #16]
 800a13a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a13c:	69bb      	ldr	r3, [r7, #24]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d004      	beq.n	800a14c <create_chain+0x2c>
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	699b      	ldr	r3, [r3, #24]
 800a146:	69ba      	ldr	r2, [r7, #24]
 800a148:	429a      	cmp	r2, r3
 800a14a:	d31b      	bcc.n	800a184 <create_chain+0x64>
 800a14c:	2301      	movs	r3, #1
 800a14e:	61bb      	str	r3, [r7, #24]
 800a150:	e018      	b.n	800a184 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a152:	6839      	ldr	r1, [r7, #0]
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f7ff fd8e 	bl	8009c76 <get_fat>
 800a15a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d801      	bhi.n	800a166 <create_chain+0x46>
 800a162:	2301      	movs	r3, #1
 800a164:	e070      	b.n	800a248 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a16c:	d101      	bne.n	800a172 <create_chain+0x52>
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	e06a      	b.n	800a248 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	699b      	ldr	r3, [r3, #24]
 800a176:	68fa      	ldr	r2, [r7, #12]
 800a178:	429a      	cmp	r2, r3
 800a17a:	d201      	bcs.n	800a180 <create_chain+0x60>
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	e063      	b.n	800a248 <create_chain+0x128>
		scl = clst;
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a184:	69bb      	ldr	r3, [r7, #24]
 800a186:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a188:	69fb      	ldr	r3, [r7, #28]
 800a18a:	3301      	adds	r3, #1
 800a18c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	699b      	ldr	r3, [r3, #24]
 800a192:	69fa      	ldr	r2, [r7, #28]
 800a194:	429a      	cmp	r2, r3
 800a196:	d307      	bcc.n	800a1a8 <create_chain+0x88>
				ncl = 2;
 800a198:	2302      	movs	r3, #2
 800a19a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a19c:	69fa      	ldr	r2, [r7, #28]
 800a19e:	69bb      	ldr	r3, [r7, #24]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d901      	bls.n	800a1a8 <create_chain+0x88>
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	e04f      	b.n	800a248 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a1a8:	69f9      	ldr	r1, [r7, #28]
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f7ff fd63 	bl	8009c76 <get_fat>
 800a1b0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d00e      	beq.n	800a1d6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d003      	beq.n	800a1c6 <create_chain+0xa6>
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1c4:	d101      	bne.n	800a1ca <create_chain+0xaa>
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	e03e      	b.n	800a248 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a1ca:	69fa      	ldr	r2, [r7, #28]
 800a1cc:	69bb      	ldr	r3, [r7, #24]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d1da      	bne.n	800a188 <create_chain+0x68>
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	e038      	b.n	800a248 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a1d6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a1d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1dc:	69f9      	ldr	r1, [r7, #28]
 800a1de:	6938      	ldr	r0, [r7, #16]
 800a1e0:	f7ff fe1d 	bl	8009e1e <put_fat>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a1e8:	7dfb      	ldrb	r3, [r7, #23]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d109      	bne.n	800a202 <create_chain+0xe2>
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d006      	beq.n	800a202 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a1f4:	69fa      	ldr	r2, [r7, #28]
 800a1f6:	6839      	ldr	r1, [r7, #0]
 800a1f8:	6938      	ldr	r0, [r7, #16]
 800a1fa:	f7ff fe10 	bl	8009e1e <put_fat>
 800a1fe:	4603      	mov	r3, r0
 800a200:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a202:	7dfb      	ldrb	r3, [r7, #23]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d116      	bne.n	800a236 <create_chain+0x116>
		fs->last_clst = ncl;
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	69fa      	ldr	r2, [r7, #28]
 800a20c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	695a      	ldr	r2, [r3, #20]
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	699b      	ldr	r3, [r3, #24]
 800a216:	3b02      	subs	r3, #2
 800a218:	429a      	cmp	r2, r3
 800a21a:	d804      	bhi.n	800a226 <create_chain+0x106>
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	695b      	ldr	r3, [r3, #20]
 800a220:	1e5a      	subs	r2, r3, #1
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	791b      	ldrb	r3, [r3, #4]
 800a22a:	f043 0301 	orr.w	r3, r3, #1
 800a22e:	b2da      	uxtb	r2, r3
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	711a      	strb	r2, [r3, #4]
 800a234:	e007      	b.n	800a246 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a236:	7dfb      	ldrb	r3, [r7, #23]
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d102      	bne.n	800a242 <create_chain+0x122>
 800a23c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a240:	e000      	b.n	800a244 <create_chain+0x124>
 800a242:	2301      	movs	r3, #1
 800a244:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a246:	69fb      	ldr	r3, [r7, #28]
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3720      	adds	r7, #32
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a250:	b480      	push	{r7}
 800a252:	b087      	sub	sp, #28
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a264:	3304      	adds	r3, #4
 800a266:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	899b      	ldrh	r3, [r3, #12]
 800a26c:	461a      	mov	r2, r3
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	fbb3 f3f2 	udiv	r3, r3, r2
 800a274:	68fa      	ldr	r2, [r7, #12]
 800a276:	8952      	ldrh	r2, [r2, #10]
 800a278:	fbb3 f3f2 	udiv	r3, r3, r2
 800a27c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	1d1a      	adds	r2, r3, #4
 800a282:	613a      	str	r2, [r7, #16]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d101      	bne.n	800a292 <clmt_clust+0x42>
 800a28e:	2300      	movs	r3, #0
 800a290:	e010      	b.n	800a2b4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800a292:	697a      	ldr	r2, [r7, #20]
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	429a      	cmp	r2, r3
 800a298:	d307      	bcc.n	800a2aa <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800a29a:	697a      	ldr	r2, [r7, #20]
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	1ad3      	subs	r3, r2, r3
 800a2a0:	617b      	str	r3, [r7, #20]
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	3304      	adds	r3, #4
 800a2a6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a2a8:	e7e9      	b.n	800a27e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800a2aa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	4413      	add	r3, r2
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	371c      	adds	r7, #28
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b086      	sub	sp, #24
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2d6:	d204      	bcs.n	800a2e2 <dir_sdi+0x22>
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	f003 031f 	and.w	r3, r3, #31
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d001      	beq.n	800a2e6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a2e2:	2302      	movs	r3, #2
 800a2e4:	e071      	b.n	800a3ca <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	683a      	ldr	r2, [r7, #0]
 800a2ea:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d106      	bne.n	800a306 <dir_sdi+0x46>
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	2b02      	cmp	r3, #2
 800a2fe:	d902      	bls.n	800a306 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a304:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d10c      	bne.n	800a326 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	095b      	lsrs	r3, r3, #5
 800a310:	693a      	ldr	r2, [r7, #16]
 800a312:	8912      	ldrh	r2, [r2, #8]
 800a314:	4293      	cmp	r3, r2
 800a316:	d301      	bcc.n	800a31c <dir_sdi+0x5c>
 800a318:	2302      	movs	r3, #2
 800a31a:	e056      	b.n	800a3ca <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	61da      	str	r2, [r3, #28]
 800a324:	e02d      	b.n	800a382 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	895b      	ldrh	r3, [r3, #10]
 800a32a:	461a      	mov	r2, r3
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	899b      	ldrh	r3, [r3, #12]
 800a330:	fb03 f302 	mul.w	r3, r3, r2
 800a334:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a336:	e019      	b.n	800a36c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6979      	ldr	r1, [r7, #20]
 800a33c:	4618      	mov	r0, r3
 800a33e:	f7ff fc9a 	bl	8009c76 <get_fat>
 800a342:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a34a:	d101      	bne.n	800a350 <dir_sdi+0x90>
 800a34c:	2301      	movs	r3, #1
 800a34e:	e03c      	b.n	800a3ca <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	2b01      	cmp	r3, #1
 800a354:	d904      	bls.n	800a360 <dir_sdi+0xa0>
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	699b      	ldr	r3, [r3, #24]
 800a35a:	697a      	ldr	r2, [r7, #20]
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d301      	bcc.n	800a364 <dir_sdi+0xa4>
 800a360:	2302      	movs	r3, #2
 800a362:	e032      	b.n	800a3ca <dir_sdi+0x10a>
			ofs -= csz;
 800a364:	683a      	ldr	r2, [r7, #0]
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	1ad3      	subs	r3, r2, r3
 800a36a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a36c:	683a      	ldr	r2, [r7, #0]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	429a      	cmp	r2, r3
 800a372:	d2e1      	bcs.n	800a338 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800a374:	6979      	ldr	r1, [r7, #20]
 800a376:	6938      	ldr	r0, [r7, #16]
 800a378:	f7ff fc5e 	bl	8009c38 <clust2sect>
 800a37c:	4602      	mov	r2, r0
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	697a      	ldr	r2, [r7, #20]
 800a386:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	69db      	ldr	r3, [r3, #28]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d101      	bne.n	800a394 <dir_sdi+0xd4>
 800a390:	2302      	movs	r3, #2
 800a392:	e01a      	b.n	800a3ca <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	69da      	ldr	r2, [r3, #28]
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	899b      	ldrh	r3, [r3, #12]
 800a39c:	4619      	mov	r1, r3
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	fbb3 f3f1 	udiv	r3, r3, r1
 800a3a4:	441a      	add	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	899b      	ldrh	r3, [r3, #12]
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	fbb3 f0f2 	udiv	r0, r3, r2
 800a3bc:	fb02 f200 	mul.w	r2, r2, r0
 800a3c0:	1a9b      	subs	r3, r3, r2
 800a3c2:	18ca      	adds	r2, r1, r3
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a3c8:	2300      	movs	r3, #0
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3718      	adds	r7, #24
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	b086      	sub	sp, #24
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
 800a3da:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	695b      	ldr	r3, [r3, #20]
 800a3e6:	3320      	adds	r3, #32
 800a3e8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	69db      	ldr	r3, [r3, #28]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d003      	beq.n	800a3fa <dir_next+0x28>
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a3f8:	d301      	bcc.n	800a3fe <dir_next+0x2c>
 800a3fa:	2304      	movs	r3, #4
 800a3fc:	e0bb      	b.n	800a576 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	899b      	ldrh	r3, [r3, #12]
 800a402:	461a      	mov	r2, r3
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	fbb3 f1f2 	udiv	r1, r3, r2
 800a40a:	fb02 f201 	mul.w	r2, r2, r1
 800a40e:	1a9b      	subs	r3, r3, r2
 800a410:	2b00      	cmp	r3, #0
 800a412:	f040 809d 	bne.w	800a550 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	69db      	ldr	r3, [r3, #28]
 800a41a:	1c5a      	adds	r2, r3, #1
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	699b      	ldr	r3, [r3, #24]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d10b      	bne.n	800a440 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	095b      	lsrs	r3, r3, #5
 800a42c:	68fa      	ldr	r2, [r7, #12]
 800a42e:	8912      	ldrh	r2, [r2, #8]
 800a430:	4293      	cmp	r3, r2
 800a432:	f0c0 808d 	bcc.w	800a550 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2200      	movs	r2, #0
 800a43a:	61da      	str	r2, [r3, #28]
 800a43c:	2304      	movs	r3, #4
 800a43e:	e09a      	b.n	800a576 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	899b      	ldrh	r3, [r3, #12]
 800a444:	461a      	mov	r2, r3
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	fbb3 f3f2 	udiv	r3, r3, r2
 800a44c:	68fa      	ldr	r2, [r7, #12]
 800a44e:	8952      	ldrh	r2, [r2, #10]
 800a450:	3a01      	subs	r2, #1
 800a452:	4013      	ands	r3, r2
 800a454:	2b00      	cmp	r3, #0
 800a456:	d17b      	bne.n	800a550 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	699b      	ldr	r3, [r3, #24]
 800a45e:	4619      	mov	r1, r3
 800a460:	4610      	mov	r0, r2
 800a462:	f7ff fc08 	bl	8009c76 <get_fat>
 800a466:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	2b01      	cmp	r3, #1
 800a46c:	d801      	bhi.n	800a472 <dir_next+0xa0>
 800a46e:	2302      	movs	r3, #2
 800a470:	e081      	b.n	800a576 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a478:	d101      	bne.n	800a47e <dir_next+0xac>
 800a47a:	2301      	movs	r3, #1
 800a47c:	e07b      	b.n	800a576 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	699b      	ldr	r3, [r3, #24]
 800a482:	697a      	ldr	r2, [r7, #20]
 800a484:	429a      	cmp	r2, r3
 800a486:	d359      	bcc.n	800a53c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d104      	bne.n	800a498 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	61da      	str	r2, [r3, #28]
 800a494:	2304      	movs	r3, #4
 800a496:	e06e      	b.n	800a576 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	699b      	ldr	r3, [r3, #24]
 800a49e:	4619      	mov	r1, r3
 800a4a0:	4610      	mov	r0, r2
 800a4a2:	f7ff fe3d 	bl	800a120 <create_chain>
 800a4a6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d101      	bne.n	800a4b2 <dir_next+0xe0>
 800a4ae:	2307      	movs	r3, #7
 800a4b0:	e061      	b.n	800a576 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d101      	bne.n	800a4bc <dir_next+0xea>
 800a4b8:	2302      	movs	r3, #2
 800a4ba:	e05c      	b.n	800a576 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4c2:	d101      	bne.n	800a4c8 <dir_next+0xf6>
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	e056      	b.n	800a576 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a4c8:	68f8      	ldr	r0, [r7, #12]
 800a4ca:	f7ff fad3 	bl	8009a74 <sync_window>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d001      	beq.n	800a4d8 <dir_next+0x106>
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e04e      	b.n	800a576 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	899b      	ldrh	r3, [r3, #12]
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	2100      	movs	r1, #0
 800a4e6:	f7ff f8fc 	bl	80096e2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	613b      	str	r3, [r7, #16]
 800a4ee:	6979      	ldr	r1, [r7, #20]
 800a4f0:	68f8      	ldr	r0, [r7, #12]
 800a4f2:	f7ff fba1 	bl	8009c38 <clust2sect>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	631a      	str	r2, [r3, #48]	; 0x30
 800a4fc:	e012      	b.n	800a524 <dir_next+0x152>
						fs->wflag = 1;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2201      	movs	r2, #1
 800a502:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a504:	68f8      	ldr	r0, [r7, #12]
 800a506:	f7ff fab5 	bl	8009a74 <sync_window>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d001      	beq.n	800a514 <dir_next+0x142>
 800a510:	2301      	movs	r3, #1
 800a512:	e030      	b.n	800a576 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	3301      	adds	r3, #1
 800a518:	613b      	str	r3, [r7, #16]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a51e:	1c5a      	adds	r2, r3, #1
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	631a      	str	r2, [r3, #48]	; 0x30
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	895b      	ldrh	r3, [r3, #10]
 800a528:	461a      	mov	r2, r3
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d3e6      	bcc.n	800a4fe <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	1ad2      	subs	r2, r2, r3
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	697a      	ldr	r2, [r7, #20]
 800a540:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a542:	6979      	ldr	r1, [r7, #20]
 800a544:	68f8      	ldr	r0, [r7, #12]
 800a546:	f7ff fb77 	bl	8009c38 <clust2sect>
 800a54a:	4602      	mov	r2, r0
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	68ba      	ldr	r2, [r7, #8]
 800a554:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	899b      	ldrh	r3, [r3, #12]
 800a560:	461a      	mov	r2, r3
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	fbb3 f0f2 	udiv	r0, r3, r2
 800a568:	fb02 f200 	mul.w	r2, r2, r0
 800a56c:	1a9b      	subs	r3, r3, r2
 800a56e:	18ca      	adds	r2, r1, r3
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a574:	2300      	movs	r3, #0
}
 800a576:	4618      	mov	r0, r3
 800a578:	3718      	adds	r7, #24
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b086      	sub	sp, #24
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
 800a586:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a58e:	2100      	movs	r1, #0
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f7ff fe95 	bl	800a2c0 <dir_sdi>
 800a596:	4603      	mov	r3, r0
 800a598:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a59a:	7dfb      	ldrb	r3, [r7, #23]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d12b      	bne.n	800a5f8 <dir_alloc+0x7a>
		n = 0;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	69db      	ldr	r3, [r3, #28]
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	68f8      	ldr	r0, [r7, #12]
 800a5ac:	f7ff faa6 	bl	8009afc <move_window>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a5b4:	7dfb      	ldrb	r3, [r7, #23]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d11d      	bne.n	800a5f6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6a1b      	ldr	r3, [r3, #32]
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	2be5      	cmp	r3, #229	; 0xe5
 800a5c2:	d004      	beq.n	800a5ce <dir_alloc+0x50>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6a1b      	ldr	r3, [r3, #32]
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d107      	bne.n	800a5de <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	613b      	str	r3, [r7, #16]
 800a5d4:	693a      	ldr	r2, [r7, #16]
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d102      	bne.n	800a5e2 <dir_alloc+0x64>
 800a5dc:	e00c      	b.n	800a5f8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a5de:	2300      	movs	r3, #0
 800a5e0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a5e2:	2101      	movs	r1, #1
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f7ff fef4 	bl	800a3d2 <dir_next>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a5ee:	7dfb      	ldrb	r3, [r7, #23]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d0d7      	beq.n	800a5a4 <dir_alloc+0x26>
 800a5f4:	e000      	b.n	800a5f8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a5f6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a5f8:	7dfb      	ldrb	r3, [r7, #23]
 800a5fa:	2b04      	cmp	r3, #4
 800a5fc:	d101      	bne.n	800a602 <dir_alloc+0x84>
 800a5fe:	2307      	movs	r3, #7
 800a600:	75fb      	strb	r3, [r7, #23]
	return res;
 800a602:	7dfb      	ldrb	r3, [r7, #23]
}
 800a604:	4618      	mov	r0, r3
 800a606:	3718      	adds	r7, #24
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	331a      	adds	r3, #26
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7fe ffbe 	bl	800959c <ld_word>
 800a620:	4603      	mov	r3, r0
 800a622:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	2b03      	cmp	r3, #3
 800a62a:	d109      	bne.n	800a640 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	3314      	adds	r3, #20
 800a630:	4618      	mov	r0, r3
 800a632:	f7fe ffb3 	bl	800959c <ld_word>
 800a636:	4603      	mov	r3, r0
 800a638:	041b      	lsls	r3, r3, #16
 800a63a:	68fa      	ldr	r2, [r7, #12]
 800a63c:	4313      	orrs	r3, r2
 800a63e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a640:	68fb      	ldr	r3, [r7, #12]
}
 800a642:	4618      	mov	r0, r3
 800a644:	3710      	adds	r7, #16
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}

0800a64a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a64a:	b580      	push	{r7, lr}
 800a64c:	b084      	sub	sp, #16
 800a64e:	af00      	add	r7, sp, #0
 800a650:	60f8      	str	r0, [r7, #12]
 800a652:	60b9      	str	r1, [r7, #8]
 800a654:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	331a      	adds	r3, #26
 800a65a:	687a      	ldr	r2, [r7, #4]
 800a65c:	b292      	uxth	r2, r2
 800a65e:	4611      	mov	r1, r2
 800a660:	4618      	mov	r0, r3
 800a662:	f7fe ffd6 	bl	8009612 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	781b      	ldrb	r3, [r3, #0]
 800a66a:	2b03      	cmp	r3, #3
 800a66c:	d109      	bne.n	800a682 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	f103 0214 	add.w	r2, r3, #20
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	0c1b      	lsrs	r3, r3, #16
 800a678:	b29b      	uxth	r3, r3
 800a67a:	4619      	mov	r1, r3
 800a67c:	4610      	mov	r0, r2
 800a67e:	f7fe ffc8 	bl	8009612 <st_word>
	}
}
 800a682:	bf00      	nop
 800a684:	3710      	adds	r7, #16
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}

0800a68a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800a68a:	b580      	push	{r7, lr}
 800a68c:	b086      	sub	sp, #24
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
 800a692:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800a694:	2304      	movs	r3, #4
 800a696:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800a69e:	e03c      	b.n	800a71a <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	69db      	ldr	r3, [r3, #28]
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	6938      	ldr	r0, [r7, #16]
 800a6a8:	f7ff fa28 	bl	8009afc <move_window>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a6b0:	7dfb      	ldrb	r3, [r7, #23]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d136      	bne.n	800a724 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6a1b      	ldr	r3, [r3, #32]
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800a6be:	7bfb      	ldrb	r3, [r7, #15]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d102      	bne.n	800a6ca <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800a6c4:	2304      	movs	r3, #4
 800a6c6:	75fb      	strb	r3, [r7, #23]
 800a6c8:	e031      	b.n	800a72e <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6a1b      	ldr	r3, [r3, #32]
 800a6ce:	330b      	adds	r3, #11
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6d6:	73bb      	strb	r3, [r7, #14]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	7bba      	ldrb	r2, [r7, #14]
 800a6dc:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800a6de:	7bfb      	ldrb	r3, [r7, #15]
 800a6e0:	2be5      	cmp	r3, #229	; 0xe5
 800a6e2:	d011      	beq.n	800a708 <dir_read+0x7e>
 800a6e4:	7bfb      	ldrb	r3, [r7, #15]
 800a6e6:	2b2e      	cmp	r3, #46	; 0x2e
 800a6e8:	d00e      	beq.n	800a708 <dir_read+0x7e>
 800a6ea:	7bbb      	ldrb	r3, [r7, #14]
 800a6ec:	2b0f      	cmp	r3, #15
 800a6ee:	d00b      	beq.n	800a708 <dir_read+0x7e>
 800a6f0:	7bbb      	ldrb	r3, [r7, #14]
 800a6f2:	f023 0320 	bic.w	r3, r3, #32
 800a6f6:	2b08      	cmp	r3, #8
 800a6f8:	bf0c      	ite	eq
 800a6fa:	2301      	moveq	r3, #1
 800a6fc:	2300      	movne	r3, #0
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	461a      	mov	r2, r3
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	4293      	cmp	r3, r2
 800a706:	d00f      	beq.n	800a728 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800a708:	2100      	movs	r1, #0
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f7ff fe61 	bl	800a3d2 <dir_next>
 800a710:	4603      	mov	r3, r0
 800a712:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a714:	7dfb      	ldrb	r3, [r7, #23]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d108      	bne.n	800a72c <dir_read+0xa2>
	while (dp->sect) {
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	69db      	ldr	r3, [r3, #28]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d1be      	bne.n	800a6a0 <dir_read+0x16>
 800a722:	e004      	b.n	800a72e <dir_read+0xa4>
		if (res != FR_OK) break;
 800a724:	bf00      	nop
 800a726:	e002      	b.n	800a72e <dir_read+0xa4>
				break;
 800a728:	bf00      	nop
 800a72a:	e000      	b.n	800a72e <dir_read+0xa4>
		if (res != FR_OK) break;
 800a72c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800a72e:	7dfb      	ldrb	r3, [r7, #23]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d002      	beq.n	800a73a <dir_read+0xb0>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2200      	movs	r2, #0
 800a738:	61da      	str	r2, [r3, #28]
	return res;
 800a73a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3718      	adds	r7, #24
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b086      	sub	sp, #24
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a752:	2100      	movs	r1, #0
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f7ff fdb3 	bl	800a2c0 <dir_sdi>
 800a75a:	4603      	mov	r3, r0
 800a75c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a75e:	7dfb      	ldrb	r3, [r7, #23]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d001      	beq.n	800a768 <dir_find+0x24>
 800a764:	7dfb      	ldrb	r3, [r7, #23]
 800a766:	e03e      	b.n	800a7e6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	69db      	ldr	r3, [r3, #28]
 800a76c:	4619      	mov	r1, r3
 800a76e:	6938      	ldr	r0, [r7, #16]
 800a770:	f7ff f9c4 	bl	8009afc <move_window>
 800a774:	4603      	mov	r3, r0
 800a776:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a778:	7dfb      	ldrb	r3, [r7, #23]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d12f      	bne.n	800a7de <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6a1b      	ldr	r3, [r3, #32]
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a786:	7bfb      	ldrb	r3, [r7, #15]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d102      	bne.n	800a792 <dir_find+0x4e>
 800a78c:	2304      	movs	r3, #4
 800a78e:	75fb      	strb	r3, [r7, #23]
 800a790:	e028      	b.n	800a7e4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6a1b      	ldr	r3, [r3, #32]
 800a796:	330b      	adds	r3, #11
 800a798:	781b      	ldrb	r3, [r3, #0]
 800a79a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a79e:	b2da      	uxtb	r2, r3
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6a1b      	ldr	r3, [r3, #32]
 800a7a8:	330b      	adds	r3, #11
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	f003 0308 	and.w	r3, r3, #8
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d10a      	bne.n	800a7ca <dir_find+0x86>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6a18      	ldr	r0, [r3, #32]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	3324      	adds	r3, #36	; 0x24
 800a7bc:	220b      	movs	r2, #11
 800a7be:	4619      	mov	r1, r3
 800a7c0:	f7fe ffaa 	bl	8009718 <mem_cmp>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d00b      	beq.n	800a7e2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a7ca:	2100      	movs	r1, #0
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f7ff fe00 	bl	800a3d2 <dir_next>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a7d6:	7dfb      	ldrb	r3, [r7, #23]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d0c5      	beq.n	800a768 <dir_find+0x24>
 800a7dc:	e002      	b.n	800a7e4 <dir_find+0xa0>
		if (res != FR_OK) break;
 800a7de:	bf00      	nop
 800a7e0:	e000      	b.n	800a7e4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a7e2:	bf00      	nop

	return res;
 800a7e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3718      	adds	r7, #24
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b084      	sub	sp, #16
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a7fc:	2101      	movs	r1, #1
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f7ff febd 	bl	800a57e <dir_alloc>
 800a804:	4603      	mov	r3, r0
 800a806:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a808:	7bfb      	ldrb	r3, [r7, #15]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d11c      	bne.n	800a848 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	69db      	ldr	r3, [r3, #28]
 800a812:	4619      	mov	r1, r3
 800a814:	68b8      	ldr	r0, [r7, #8]
 800a816:	f7ff f971 	bl	8009afc <move_window>
 800a81a:	4603      	mov	r3, r0
 800a81c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a81e:	7bfb      	ldrb	r3, [r7, #15]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d111      	bne.n	800a848 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6a1b      	ldr	r3, [r3, #32]
 800a828:	2220      	movs	r2, #32
 800a82a:	2100      	movs	r1, #0
 800a82c:	4618      	mov	r0, r3
 800a82e:	f7fe ff58 	bl	80096e2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6a18      	ldr	r0, [r3, #32]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	3324      	adds	r3, #36	; 0x24
 800a83a:	220b      	movs	r2, #11
 800a83c:	4619      	mov	r1, r3
 800a83e:	f7fe ff2f 	bl	80096a0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	2201      	movs	r2, #1
 800a846:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a848:	7bfb      	ldrb	r3, [r7, #15]
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3710      	adds	r7, #16
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}

0800a852 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800a852:	b580      	push	{r7, lr}
 800a854:	b086      	sub	sp, #24
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
 800a85a:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	2200      	movs	r2, #0
 800a860:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	69db      	ldr	r3, [r3, #28]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d04e      	beq.n	800a908 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800a86a:	2300      	movs	r3, #0
 800a86c:	613b      	str	r3, [r7, #16]
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800a872:	e021      	b.n	800a8b8 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6a1a      	ldr	r2, [r3, #32]
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	1c59      	adds	r1, r3, #1
 800a87c:	6179      	str	r1, [r7, #20]
 800a87e:	4413      	add	r3, r2
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800a884:	7bfb      	ldrb	r3, [r7, #15]
 800a886:	2b20      	cmp	r3, #32
 800a888:	d100      	bne.n	800a88c <get_fileinfo+0x3a>
 800a88a:	e015      	b.n	800a8b8 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800a88c:	7bfb      	ldrb	r3, [r7, #15]
 800a88e:	2b05      	cmp	r3, #5
 800a890:	d101      	bne.n	800a896 <get_fileinfo+0x44>
 800a892:	23e5      	movs	r3, #229	; 0xe5
 800a894:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	2b09      	cmp	r3, #9
 800a89a:	d106      	bne.n	800a8aa <get_fileinfo+0x58>
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	1c5a      	adds	r2, r3, #1
 800a8a0:	613a      	str	r2, [r7, #16]
 800a8a2:	683a      	ldr	r2, [r7, #0]
 800a8a4:	4413      	add	r3, r2
 800a8a6:	222e      	movs	r2, #46	; 0x2e
 800a8a8:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	1c5a      	adds	r2, r3, #1
 800a8ae:	613a      	str	r2, [r7, #16]
 800a8b0:	683a      	ldr	r2, [r7, #0]
 800a8b2:	4413      	add	r3, r2
 800a8b4:	7bfa      	ldrb	r2, [r7, #15]
 800a8b6:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	2b0a      	cmp	r3, #10
 800a8bc:	d9da      	bls.n	800a874 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800a8be:	683a      	ldr	r2, [r7, #0]
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	3309      	adds	r3, #9
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a1b      	ldr	r3, [r3, #32]
 800a8ce:	7ada      	ldrb	r2, [r3, #11]
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6a1b      	ldr	r3, [r3, #32]
 800a8d8:	331c      	adds	r3, #28
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7fe fe76 	bl	80095cc <ld_dword>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6a1b      	ldr	r3, [r3, #32]
 800a8ea:	3316      	adds	r3, #22
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f7fe fe6d 	bl	80095cc <ld_dword>
 800a8f2:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	b29a      	uxth	r2, r3
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	80da      	strh	r2, [r3, #6]
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	0c1b      	lsrs	r3, r3, #16
 800a900:	b29a      	uxth	r2, r3
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	809a      	strh	r2, [r3, #4]
 800a906:	e000      	b.n	800a90a <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a908:	bf00      	nop
}
 800a90a:	3718      	adds	r7, #24
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b088      	sub	sp, #32
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	60fb      	str	r3, [r7, #12]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	3324      	adds	r3, #36	; 0x24
 800a924:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a926:	220b      	movs	r2, #11
 800a928:	2120      	movs	r1, #32
 800a92a:	68b8      	ldr	r0, [r7, #8]
 800a92c:	f7fe fed9 	bl	80096e2 <mem_set>
	si = i = 0; ni = 8;
 800a930:	2300      	movs	r3, #0
 800a932:	613b      	str	r3, [r7, #16]
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	61fb      	str	r3, [r7, #28]
 800a938:	2308      	movs	r3, #8
 800a93a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a93c:	69fb      	ldr	r3, [r7, #28]
 800a93e:	1c5a      	adds	r2, r3, #1
 800a940:	61fa      	str	r2, [r7, #28]
 800a942:	68fa      	ldr	r2, [r7, #12]
 800a944:	4413      	add	r3, r2
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a94a:	7efb      	ldrb	r3, [r7, #27]
 800a94c:	2b20      	cmp	r3, #32
 800a94e:	d94e      	bls.n	800a9ee <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a950:	7efb      	ldrb	r3, [r7, #27]
 800a952:	2b2f      	cmp	r3, #47	; 0x2f
 800a954:	d006      	beq.n	800a964 <create_name+0x54>
 800a956:	7efb      	ldrb	r3, [r7, #27]
 800a958:	2b5c      	cmp	r3, #92	; 0x5c
 800a95a:	d110      	bne.n	800a97e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a95c:	e002      	b.n	800a964 <create_name+0x54>
 800a95e:	69fb      	ldr	r3, [r7, #28]
 800a960:	3301      	adds	r3, #1
 800a962:	61fb      	str	r3, [r7, #28]
 800a964:	68fa      	ldr	r2, [r7, #12]
 800a966:	69fb      	ldr	r3, [r7, #28]
 800a968:	4413      	add	r3, r2
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	2b2f      	cmp	r3, #47	; 0x2f
 800a96e:	d0f6      	beq.n	800a95e <create_name+0x4e>
 800a970:	68fa      	ldr	r2, [r7, #12]
 800a972:	69fb      	ldr	r3, [r7, #28]
 800a974:	4413      	add	r3, r2
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	2b5c      	cmp	r3, #92	; 0x5c
 800a97a:	d0f0      	beq.n	800a95e <create_name+0x4e>
			break;
 800a97c:	e038      	b.n	800a9f0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a97e:	7efb      	ldrb	r3, [r7, #27]
 800a980:	2b2e      	cmp	r3, #46	; 0x2e
 800a982:	d003      	beq.n	800a98c <create_name+0x7c>
 800a984:	693a      	ldr	r2, [r7, #16]
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	429a      	cmp	r2, r3
 800a98a:	d30c      	bcc.n	800a9a6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	2b0b      	cmp	r3, #11
 800a990:	d002      	beq.n	800a998 <create_name+0x88>
 800a992:	7efb      	ldrb	r3, [r7, #27]
 800a994:	2b2e      	cmp	r3, #46	; 0x2e
 800a996:	d001      	beq.n	800a99c <create_name+0x8c>
 800a998:	2306      	movs	r3, #6
 800a99a:	e044      	b.n	800aa26 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a99c:	2308      	movs	r3, #8
 800a99e:	613b      	str	r3, [r7, #16]
 800a9a0:	230b      	movs	r3, #11
 800a9a2:	617b      	str	r3, [r7, #20]
			continue;
 800a9a4:	e022      	b.n	800a9ec <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a9a6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	da04      	bge.n	800a9b8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a9ae:	7efb      	ldrb	r3, [r7, #27]
 800a9b0:	3b80      	subs	r3, #128	; 0x80
 800a9b2:	4a1f      	ldr	r2, [pc, #124]	; (800aa30 <create_name+0x120>)
 800a9b4:	5cd3      	ldrb	r3, [r2, r3]
 800a9b6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a9b8:	7efb      	ldrb	r3, [r7, #27]
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	481d      	ldr	r0, [pc, #116]	; (800aa34 <create_name+0x124>)
 800a9be:	f7fe fed2 	bl	8009766 <chk_chr>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d001      	beq.n	800a9cc <create_name+0xbc>
 800a9c8:	2306      	movs	r3, #6
 800a9ca:	e02c      	b.n	800aa26 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a9cc:	7efb      	ldrb	r3, [r7, #27]
 800a9ce:	2b60      	cmp	r3, #96	; 0x60
 800a9d0:	d905      	bls.n	800a9de <create_name+0xce>
 800a9d2:	7efb      	ldrb	r3, [r7, #27]
 800a9d4:	2b7a      	cmp	r3, #122	; 0x7a
 800a9d6:	d802      	bhi.n	800a9de <create_name+0xce>
 800a9d8:	7efb      	ldrb	r3, [r7, #27]
 800a9da:	3b20      	subs	r3, #32
 800a9dc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	1c5a      	adds	r2, r3, #1
 800a9e2:	613a      	str	r2, [r7, #16]
 800a9e4:	68ba      	ldr	r2, [r7, #8]
 800a9e6:	4413      	add	r3, r2
 800a9e8:	7efa      	ldrb	r2, [r7, #27]
 800a9ea:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a9ec:	e7a6      	b.n	800a93c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a9ee:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a9f0:	68fa      	ldr	r2, [r7, #12]
 800a9f2:	69fb      	ldr	r3, [r7, #28]
 800a9f4:	441a      	add	r2, r3
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d101      	bne.n	800aa04 <create_name+0xf4>
 800aa00:	2306      	movs	r3, #6
 800aa02:	e010      	b.n	800aa26 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	2be5      	cmp	r3, #229	; 0xe5
 800aa0a:	d102      	bne.n	800aa12 <create_name+0x102>
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	2205      	movs	r2, #5
 800aa10:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800aa12:	7efb      	ldrb	r3, [r7, #27]
 800aa14:	2b20      	cmp	r3, #32
 800aa16:	d801      	bhi.n	800aa1c <create_name+0x10c>
 800aa18:	2204      	movs	r2, #4
 800aa1a:	e000      	b.n	800aa1e <create_name+0x10e>
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	330b      	adds	r3, #11
 800aa22:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800aa24:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3720      	adds	r7, #32
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	0800df3c 	.word	0x0800df3c
 800aa34:	0800dd84 	.word	0x0800dd84

0800aa38 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b086      	sub	sp, #24
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800aa4c:	e002      	b.n	800aa54 <follow_path+0x1c>
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	3301      	adds	r3, #1
 800aa52:	603b      	str	r3, [r7, #0]
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	2b2f      	cmp	r3, #47	; 0x2f
 800aa5a:	d0f8      	beq.n	800aa4e <follow_path+0x16>
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	2b5c      	cmp	r3, #92	; 0x5c
 800aa62:	d0f4      	beq.n	800aa4e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	2200      	movs	r2, #0
 800aa68:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	2b1f      	cmp	r3, #31
 800aa70:	d80a      	bhi.n	800aa88 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2280      	movs	r2, #128	; 0x80
 800aa76:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800aa7a:	2100      	movs	r1, #0
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f7ff fc1f 	bl	800a2c0 <dir_sdi>
 800aa82:	4603      	mov	r3, r0
 800aa84:	75fb      	strb	r3, [r7, #23]
 800aa86:	e048      	b.n	800ab1a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aa88:	463b      	mov	r3, r7
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f7ff ff3f 	bl	800a910 <create_name>
 800aa92:	4603      	mov	r3, r0
 800aa94:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aa96:	7dfb      	ldrb	r3, [r7, #23]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d139      	bne.n	800ab10 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f7ff fe51 	bl	800a744 <dir_find>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800aaac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800aaae:	7dfb      	ldrb	r3, [r7, #23]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d00a      	beq.n	800aaca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800aab4:	7dfb      	ldrb	r3, [r7, #23]
 800aab6:	2b04      	cmp	r3, #4
 800aab8:	d12c      	bne.n	800ab14 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800aaba:	7afb      	ldrb	r3, [r7, #11]
 800aabc:	f003 0304 	and.w	r3, r3, #4
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d127      	bne.n	800ab14 <follow_path+0xdc>
 800aac4:	2305      	movs	r3, #5
 800aac6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800aac8:	e024      	b.n	800ab14 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800aaca:	7afb      	ldrb	r3, [r7, #11]
 800aacc:	f003 0304 	and.w	r3, r3, #4
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d121      	bne.n	800ab18 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	799b      	ldrb	r3, [r3, #6]
 800aad8:	f003 0310 	and.w	r3, r3, #16
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d102      	bne.n	800aae6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800aae0:	2305      	movs	r3, #5
 800aae2:	75fb      	strb	r3, [r7, #23]
 800aae4:	e019      	b.n	800ab1a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	695b      	ldr	r3, [r3, #20]
 800aaf0:	68fa      	ldr	r2, [r7, #12]
 800aaf2:	8992      	ldrh	r2, [r2, #12]
 800aaf4:	fbb3 f0f2 	udiv	r0, r3, r2
 800aaf8:	fb02 f200 	mul.w	r2, r2, r0
 800aafc:	1a9b      	subs	r3, r3, r2
 800aafe:	440b      	add	r3, r1
 800ab00:	4619      	mov	r1, r3
 800ab02:	68f8      	ldr	r0, [r7, #12]
 800ab04:	f7ff fd82 	bl	800a60c <ld_clust>
 800ab08:	4602      	mov	r2, r0
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ab0e:	e7bb      	b.n	800aa88 <follow_path+0x50>
			if (res != FR_OK) break;
 800ab10:	bf00      	nop
 800ab12:	e002      	b.n	800ab1a <follow_path+0xe2>
				break;
 800ab14:	bf00      	nop
 800ab16:	e000      	b.n	800ab1a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ab18:	bf00      	nop
			}
		}
	}

	return res;
 800ab1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3718      	adds	r7, #24
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b087      	sub	sp, #28
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ab2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab30:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d031      	beq.n	800ab9e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	617b      	str	r3, [r7, #20]
 800ab40:	e002      	b.n	800ab48 <get_ldnumber+0x24>
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	3301      	adds	r3, #1
 800ab46:	617b      	str	r3, [r7, #20]
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	2b20      	cmp	r3, #32
 800ab4e:	d903      	bls.n	800ab58 <get_ldnumber+0x34>
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	2b3a      	cmp	r3, #58	; 0x3a
 800ab56:	d1f4      	bne.n	800ab42 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	2b3a      	cmp	r3, #58	; 0x3a
 800ab5e:	d11c      	bne.n	800ab9a <get_ldnumber+0x76>
			tp = *path;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	1c5a      	adds	r2, r3, #1
 800ab6a:	60fa      	str	r2, [r7, #12]
 800ab6c:	781b      	ldrb	r3, [r3, #0]
 800ab6e:	3b30      	subs	r3, #48	; 0x30
 800ab70:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	2b09      	cmp	r3, #9
 800ab76:	d80e      	bhi.n	800ab96 <get_ldnumber+0x72>
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d10a      	bne.n	800ab96 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d107      	bne.n	800ab96 <get_ldnumber+0x72>
					vol = (int)i;
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	3301      	adds	r3, #1
 800ab8e:	617b      	str	r3, [r7, #20]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	697a      	ldr	r2, [r7, #20]
 800ab94:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	e002      	b.n	800aba0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ab9e:	693b      	ldr	r3, [r7, #16]
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	371c      	adds	r7, #28
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2200      	movs	r2, #0
 800abba:	70da      	strb	r2, [r3, #3]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800abc2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800abc4:	6839      	ldr	r1, [r7, #0]
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f7fe ff98 	bl	8009afc <move_window>
 800abcc:	4603      	mov	r3, r0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d001      	beq.n	800abd6 <check_fs+0x2a>
 800abd2:	2304      	movs	r3, #4
 800abd4:	e038      	b.n	800ac48 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	3334      	adds	r3, #52	; 0x34
 800abda:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800abde:	4618      	mov	r0, r3
 800abe0:	f7fe fcdc 	bl	800959c <ld_word>
 800abe4:	4603      	mov	r3, r0
 800abe6:	461a      	mov	r2, r3
 800abe8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800abec:	429a      	cmp	r2, r3
 800abee:	d001      	beq.n	800abf4 <check_fs+0x48>
 800abf0:	2303      	movs	r3, #3
 800abf2:	e029      	b.n	800ac48 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800abfa:	2be9      	cmp	r3, #233	; 0xe9
 800abfc:	d009      	beq.n	800ac12 <check_fs+0x66>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ac04:	2beb      	cmp	r3, #235	; 0xeb
 800ac06:	d11e      	bne.n	800ac46 <check_fs+0x9a>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800ac0e:	2b90      	cmp	r3, #144	; 0x90
 800ac10:	d119      	bne.n	800ac46 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	3334      	adds	r3, #52	; 0x34
 800ac16:	3336      	adds	r3, #54	; 0x36
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f7fe fcd7 	bl	80095cc <ld_dword>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ac24:	4a0a      	ldr	r2, [pc, #40]	; (800ac50 <check_fs+0xa4>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d101      	bne.n	800ac2e <check_fs+0x82>
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	e00c      	b.n	800ac48 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	3334      	adds	r3, #52	; 0x34
 800ac32:	3352      	adds	r3, #82	; 0x52
 800ac34:	4618      	mov	r0, r3
 800ac36:	f7fe fcc9 	bl	80095cc <ld_dword>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	4a05      	ldr	r2, [pc, #20]	; (800ac54 <check_fs+0xa8>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d101      	bne.n	800ac46 <check_fs+0x9a>
 800ac42:	2300      	movs	r3, #0
 800ac44:	e000      	b.n	800ac48 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ac46:	2302      	movs	r3, #2
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3708      	adds	r7, #8
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	00544146 	.word	0x00544146
 800ac54:	33544146 	.word	0x33544146

0800ac58 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b096      	sub	sp, #88	; 0x58
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	60b9      	str	r1, [r7, #8]
 800ac62:	4613      	mov	r3, r2
 800ac64:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ac6c:	68f8      	ldr	r0, [r7, #12]
 800ac6e:	f7ff ff59 	bl	800ab24 <get_ldnumber>
 800ac72:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ac74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	da01      	bge.n	800ac7e <find_volume+0x26>
 800ac7a:	230b      	movs	r3, #11
 800ac7c:	e265      	b.n	800b14a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ac7e:	4ab0      	ldr	r2, [pc, #704]	; (800af40 <find_volume+0x2e8>)
 800ac80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac86:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ac88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d101      	bne.n	800ac92 <find_volume+0x3a>
 800ac8e:	230c      	movs	r3, #12
 800ac90:	e25b      	b.n	800b14a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac96:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ac98:	79fb      	ldrb	r3, [r7, #7]
 800ac9a:	f023 0301 	bic.w	r3, r3, #1
 800ac9e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800aca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d01a      	beq.n	800acde <find_volume+0x86>
		stat = disk_status(fs->drv);
 800aca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acaa:	785b      	ldrb	r3, [r3, #1]
 800acac:	4618      	mov	r0, r3
 800acae:	f7fe fbd7 	bl	8009460 <disk_status>
 800acb2:	4603      	mov	r3, r0
 800acb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800acb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800acbc:	f003 0301 	and.w	r3, r3, #1
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d10c      	bne.n	800acde <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800acc4:	79fb      	ldrb	r3, [r7, #7]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d007      	beq.n	800acda <find_volume+0x82>
 800acca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800acce:	f003 0304 	and.w	r3, r3, #4
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d001      	beq.n	800acda <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800acd6:	230a      	movs	r3, #10
 800acd8:	e237      	b.n	800b14a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800acda:	2300      	movs	r3, #0
 800acdc:	e235      	b.n	800b14a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800acde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace0:	2200      	movs	r2, #0
 800ace2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ace4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ace6:	b2da      	uxtb	r2, r3
 800ace8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800acec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acee:	785b      	ldrb	r3, [r3, #1]
 800acf0:	4618      	mov	r0, r3
 800acf2:	f7fe fbcf 	bl	8009494 <disk_initialize>
 800acf6:	4603      	mov	r3, r0
 800acf8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800acfc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad00:	f003 0301 	and.w	r3, r3, #1
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d001      	beq.n	800ad0c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ad08:	2303      	movs	r3, #3
 800ad0a:	e21e      	b.n	800b14a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ad0c:	79fb      	ldrb	r3, [r7, #7]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d007      	beq.n	800ad22 <find_volume+0xca>
 800ad12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad16:	f003 0304 	and.w	r3, r3, #4
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d001      	beq.n	800ad22 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ad1e:	230a      	movs	r3, #10
 800ad20:	e213      	b.n	800b14a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800ad22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad24:	7858      	ldrb	r0, [r3, #1]
 800ad26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad28:	330c      	adds	r3, #12
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	2102      	movs	r1, #2
 800ad2e:	f7fe fc17 	bl	8009560 <disk_ioctl>
 800ad32:	4603      	mov	r3, r0
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d001      	beq.n	800ad3c <find_volume+0xe4>
 800ad38:	2301      	movs	r3, #1
 800ad3a:	e206      	b.n	800b14a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800ad3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3e:	899b      	ldrh	r3, [r3, #12]
 800ad40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad44:	d80d      	bhi.n	800ad62 <find_volume+0x10a>
 800ad46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad48:	899b      	ldrh	r3, [r3, #12]
 800ad4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad4e:	d308      	bcc.n	800ad62 <find_volume+0x10a>
 800ad50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad52:	899b      	ldrh	r3, [r3, #12]
 800ad54:	461a      	mov	r2, r3
 800ad56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad58:	899b      	ldrh	r3, [r3, #12]
 800ad5a:	3b01      	subs	r3, #1
 800ad5c:	4013      	ands	r3, r2
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d001      	beq.n	800ad66 <find_volume+0x10e>
 800ad62:	2301      	movs	r3, #1
 800ad64:	e1f1      	b.n	800b14a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ad66:	2300      	movs	r3, #0
 800ad68:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ad6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ad6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ad6e:	f7ff ff1d 	bl	800abac <check_fs>
 800ad72:	4603      	mov	r3, r0
 800ad74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ad78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ad7c:	2b02      	cmp	r3, #2
 800ad7e:	d14b      	bne.n	800ae18 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ad80:	2300      	movs	r3, #0
 800ad82:	643b      	str	r3, [r7, #64]	; 0x40
 800ad84:	e01f      	b.n	800adc6 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ad86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad88:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ad8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad8e:	011b      	lsls	r3, r3, #4
 800ad90:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ad94:	4413      	add	r3, r2
 800ad96:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ad98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9a:	3304      	adds	r3, #4
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d006      	beq.n	800adb0 <find_volume+0x158>
 800ada2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada4:	3308      	adds	r3, #8
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7fe fc10 	bl	80095cc <ld_dword>
 800adac:	4602      	mov	r2, r0
 800adae:	e000      	b.n	800adb2 <find_volume+0x15a>
 800adb0:	2200      	movs	r2, #0
 800adb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800adba:	440b      	add	r3, r1
 800adbc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800adc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adc2:	3301      	adds	r3, #1
 800adc4:	643b      	str	r3, [r7, #64]	; 0x40
 800adc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adc8:	2b03      	cmp	r3, #3
 800adca:	d9dc      	bls.n	800ad86 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800adcc:	2300      	movs	r3, #0
 800adce:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800add0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800add2:	2b00      	cmp	r3, #0
 800add4:	d002      	beq.n	800addc <find_volume+0x184>
 800add6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800add8:	3b01      	subs	r3, #1
 800adda:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800addc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ade4:	4413      	add	r3, r2
 800ade6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800adea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800adec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d005      	beq.n	800adfe <find_volume+0x1a6>
 800adf2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800adf4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800adf6:	f7ff fed9 	bl	800abac <check_fs>
 800adfa:	4603      	mov	r3, r0
 800adfc:	e000      	b.n	800ae00 <find_volume+0x1a8>
 800adfe:	2303      	movs	r3, #3
 800ae00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ae04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	d905      	bls.n	800ae18 <find_volume+0x1c0>
 800ae0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae0e:	3301      	adds	r3, #1
 800ae10:	643b      	str	r3, [r7, #64]	; 0x40
 800ae12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae14:	2b03      	cmp	r3, #3
 800ae16:	d9e1      	bls.n	800addc <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ae18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae1c:	2b04      	cmp	r3, #4
 800ae1e:	d101      	bne.n	800ae24 <find_volume+0x1cc>
 800ae20:	2301      	movs	r3, #1
 800ae22:	e192      	b.n	800b14a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ae24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae28:	2b01      	cmp	r3, #1
 800ae2a:	d901      	bls.n	800ae30 <find_volume+0x1d8>
 800ae2c:	230d      	movs	r3, #13
 800ae2e:	e18c      	b.n	800b14a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ae30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae32:	3334      	adds	r3, #52	; 0x34
 800ae34:	330b      	adds	r3, #11
 800ae36:	4618      	mov	r0, r3
 800ae38:	f7fe fbb0 	bl	800959c <ld_word>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	461a      	mov	r2, r3
 800ae40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae42:	899b      	ldrh	r3, [r3, #12]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d001      	beq.n	800ae4c <find_volume+0x1f4>
 800ae48:	230d      	movs	r3, #13
 800ae4a:	e17e      	b.n	800b14a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ae4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae4e:	3334      	adds	r3, #52	; 0x34
 800ae50:	3316      	adds	r3, #22
 800ae52:	4618      	mov	r0, r3
 800ae54:	f7fe fba2 	bl	800959c <ld_word>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ae5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d106      	bne.n	800ae70 <find_volume+0x218>
 800ae62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae64:	3334      	adds	r3, #52	; 0x34
 800ae66:	3324      	adds	r3, #36	; 0x24
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7fe fbaf 	bl	80095cc <ld_dword>
 800ae6e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ae70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ae74:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ae76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae78:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ae7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae7e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ae80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae82:	789b      	ldrb	r3, [r3, #2]
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d005      	beq.n	800ae94 <find_volume+0x23c>
 800ae88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae8a:	789b      	ldrb	r3, [r3, #2]
 800ae8c:	2b02      	cmp	r3, #2
 800ae8e:	d001      	beq.n	800ae94 <find_volume+0x23c>
 800ae90:	230d      	movs	r3, #13
 800ae92:	e15a      	b.n	800b14a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ae94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae96:	789b      	ldrb	r3, [r3, #2]
 800ae98:	461a      	mov	r2, r3
 800ae9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae9c:	fb02 f303 	mul.w	r3, r2, r3
 800aea0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800aea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aea8:	b29a      	uxth	r2, r3
 800aeaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800aeae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb0:	895b      	ldrh	r3, [r3, #10]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d008      	beq.n	800aec8 <find_volume+0x270>
 800aeb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb8:	895b      	ldrh	r3, [r3, #10]
 800aeba:	461a      	mov	r2, r3
 800aebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aebe:	895b      	ldrh	r3, [r3, #10]
 800aec0:	3b01      	subs	r3, #1
 800aec2:	4013      	ands	r3, r2
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d001      	beq.n	800aecc <find_volume+0x274>
 800aec8:	230d      	movs	r3, #13
 800aeca:	e13e      	b.n	800b14a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800aecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aece:	3334      	adds	r3, #52	; 0x34
 800aed0:	3311      	adds	r3, #17
 800aed2:	4618      	mov	r0, r3
 800aed4:	f7fe fb62 	bl	800959c <ld_word>
 800aed8:	4603      	mov	r3, r0
 800aeda:	461a      	mov	r2, r3
 800aedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aede:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800aee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee2:	891b      	ldrh	r3, [r3, #8]
 800aee4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aee6:	8992      	ldrh	r2, [r2, #12]
 800aee8:	0952      	lsrs	r2, r2, #5
 800aeea:	b292      	uxth	r2, r2
 800aeec:	fbb3 f1f2 	udiv	r1, r3, r2
 800aef0:	fb02 f201 	mul.w	r2, r2, r1
 800aef4:	1a9b      	subs	r3, r3, r2
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d001      	beq.n	800af00 <find_volume+0x2a8>
 800aefc:	230d      	movs	r3, #13
 800aefe:	e124      	b.n	800b14a <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800af00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af02:	3334      	adds	r3, #52	; 0x34
 800af04:	3313      	adds	r3, #19
 800af06:	4618      	mov	r0, r3
 800af08:	f7fe fb48 	bl	800959c <ld_word>
 800af0c:	4603      	mov	r3, r0
 800af0e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800af10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af12:	2b00      	cmp	r3, #0
 800af14:	d106      	bne.n	800af24 <find_volume+0x2cc>
 800af16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af18:	3334      	adds	r3, #52	; 0x34
 800af1a:	3320      	adds	r3, #32
 800af1c:	4618      	mov	r0, r3
 800af1e:	f7fe fb55 	bl	80095cc <ld_dword>
 800af22:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800af24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af26:	3334      	adds	r3, #52	; 0x34
 800af28:	330e      	adds	r3, #14
 800af2a:	4618      	mov	r0, r3
 800af2c:	f7fe fb36 	bl	800959c <ld_word>
 800af30:	4603      	mov	r3, r0
 800af32:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800af34:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800af36:	2b00      	cmp	r3, #0
 800af38:	d104      	bne.n	800af44 <find_volume+0x2ec>
 800af3a:	230d      	movs	r3, #13
 800af3c:	e105      	b.n	800b14a <find_volume+0x4f2>
 800af3e:	bf00      	nop
 800af40:	200000b0 	.word	0x200000b0

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800af44:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800af46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af48:	4413      	add	r3, r2
 800af4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af4c:	8911      	ldrh	r1, [r2, #8]
 800af4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af50:	8992      	ldrh	r2, [r2, #12]
 800af52:	0952      	lsrs	r2, r2, #5
 800af54:	b292      	uxth	r2, r2
 800af56:	fbb1 f2f2 	udiv	r2, r1, r2
 800af5a:	b292      	uxth	r2, r2
 800af5c:	4413      	add	r3, r2
 800af5e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800af60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af64:	429a      	cmp	r2, r3
 800af66:	d201      	bcs.n	800af6c <find_volume+0x314>
 800af68:	230d      	movs	r3, #13
 800af6a:	e0ee      	b.n	800b14a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800af6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af70:	1ad3      	subs	r3, r2, r3
 800af72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af74:	8952      	ldrh	r2, [r2, #10]
 800af76:	fbb3 f3f2 	udiv	r3, r3, r2
 800af7a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800af7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d101      	bne.n	800af86 <find_volume+0x32e>
 800af82:	230d      	movs	r3, #13
 800af84:	e0e1      	b.n	800b14a <find_volume+0x4f2>
		fmt = FS_FAT32;
 800af86:	2303      	movs	r3, #3
 800af88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800af8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800af92:	4293      	cmp	r3, r2
 800af94:	d802      	bhi.n	800af9c <find_volume+0x344>
 800af96:	2302      	movs	r3, #2
 800af98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800af9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d802      	bhi.n	800afac <find_volume+0x354>
 800afa6:	2301      	movs	r3, #1
 800afa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800afac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afae:	1c9a      	adds	r2, r3, #2
 800afb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800afb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800afb8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800afba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800afbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afbe:	441a      	add	r2, r3
 800afc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800afc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800afc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc8:	441a      	add	r2, r3
 800afca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afcc:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800afce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800afd2:	2b03      	cmp	r3, #3
 800afd4:	d11e      	bne.n	800b014 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800afd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd8:	3334      	adds	r3, #52	; 0x34
 800afda:	332a      	adds	r3, #42	; 0x2a
 800afdc:	4618      	mov	r0, r3
 800afde:	f7fe fadd 	bl	800959c <ld_word>
 800afe2:	4603      	mov	r3, r0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d001      	beq.n	800afec <find_volume+0x394>
 800afe8:	230d      	movs	r3, #13
 800afea:	e0ae      	b.n	800b14a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800afec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afee:	891b      	ldrh	r3, [r3, #8]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d001      	beq.n	800aff8 <find_volume+0x3a0>
 800aff4:	230d      	movs	r3, #13
 800aff6:	e0a8      	b.n	800b14a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800aff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affa:	3334      	adds	r3, #52	; 0x34
 800affc:	332c      	adds	r3, #44	; 0x2c
 800affe:	4618      	mov	r0, r3
 800b000:	f7fe fae4 	bl	80095cc <ld_dword>
 800b004:	4602      	mov	r2, r0
 800b006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b008:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00c:	699b      	ldr	r3, [r3, #24]
 800b00e:	009b      	lsls	r3, r3, #2
 800b010:	647b      	str	r3, [r7, #68]	; 0x44
 800b012:	e01f      	b.n	800b054 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b016:	891b      	ldrh	r3, [r3, #8]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d101      	bne.n	800b020 <find_volume+0x3c8>
 800b01c:	230d      	movs	r3, #13
 800b01e:	e094      	b.n	800b14a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b022:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b026:	441a      	add	r2, r3
 800b028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b02a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b02c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b030:	2b02      	cmp	r3, #2
 800b032:	d103      	bne.n	800b03c <find_volume+0x3e4>
 800b034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b036:	699b      	ldr	r3, [r3, #24]
 800b038:	005b      	lsls	r3, r3, #1
 800b03a:	e00a      	b.n	800b052 <find_volume+0x3fa>
 800b03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b03e:	699a      	ldr	r2, [r3, #24]
 800b040:	4613      	mov	r3, r2
 800b042:	005b      	lsls	r3, r3, #1
 800b044:	4413      	add	r3, r2
 800b046:	085a      	lsrs	r2, r3, #1
 800b048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b04a:	699b      	ldr	r3, [r3, #24]
 800b04c:	f003 0301 	and.w	r3, r3, #1
 800b050:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b052:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b056:	69da      	ldr	r2, [r3, #28]
 800b058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b05a:	899b      	ldrh	r3, [r3, #12]
 800b05c:	4619      	mov	r1, r3
 800b05e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b060:	440b      	add	r3, r1
 800b062:	3b01      	subs	r3, #1
 800b064:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b066:	8989      	ldrh	r1, [r1, #12]
 800b068:	fbb3 f3f1 	udiv	r3, r3, r1
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d201      	bcs.n	800b074 <find_volume+0x41c>
 800b070:	230d      	movs	r3, #13
 800b072:	e06a      	b.n	800b14a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b076:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b07a:	615a      	str	r2, [r3, #20]
 800b07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b07e:	695a      	ldr	r2, [r3, #20]
 800b080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b082:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800b084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b086:	2280      	movs	r2, #128	; 0x80
 800b088:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b08a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b08e:	2b03      	cmp	r3, #3
 800b090:	d149      	bne.n	800b126 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b094:	3334      	adds	r3, #52	; 0x34
 800b096:	3330      	adds	r3, #48	; 0x30
 800b098:	4618      	mov	r0, r3
 800b09a:	f7fe fa7f 	bl	800959c <ld_word>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d140      	bne.n	800b126 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b0a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b0ac:	f7fe fd26 	bl	8009afc <move_window>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d137      	bne.n	800b126 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800b0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0be:	3334      	adds	r3, #52	; 0x34
 800b0c0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f7fe fa69 	bl	800959c <ld_word>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	461a      	mov	r2, r3
 800b0ce:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d127      	bne.n	800b126 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d8:	3334      	adds	r3, #52	; 0x34
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f7fe fa76 	bl	80095cc <ld_dword>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	4a1c      	ldr	r2, [pc, #112]	; (800b154 <find_volume+0x4fc>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d11e      	bne.n	800b126 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ea:	3334      	adds	r3, #52	; 0x34
 800b0ec:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7fe fa6b 	bl	80095cc <ld_dword>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	4a17      	ldr	r2, [pc, #92]	; (800b158 <find_volume+0x500>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d113      	bne.n	800b126 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b100:	3334      	adds	r3, #52	; 0x34
 800b102:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b106:	4618      	mov	r0, r3
 800b108:	f7fe fa60 	bl	80095cc <ld_dword>
 800b10c:	4602      	mov	r2, r0
 800b10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b110:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b114:	3334      	adds	r3, #52	; 0x34
 800b116:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b11a:	4618      	mov	r0, r3
 800b11c:	f7fe fa56 	bl	80095cc <ld_dword>
 800b120:	4602      	mov	r2, r0
 800b122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b124:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b128:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b12c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b12e:	4b0b      	ldr	r3, [pc, #44]	; (800b15c <find_volume+0x504>)
 800b130:	881b      	ldrh	r3, [r3, #0]
 800b132:	3301      	adds	r3, #1
 800b134:	b29a      	uxth	r2, r3
 800b136:	4b09      	ldr	r3, [pc, #36]	; (800b15c <find_volume+0x504>)
 800b138:	801a      	strh	r2, [r3, #0]
 800b13a:	4b08      	ldr	r3, [pc, #32]	; (800b15c <find_volume+0x504>)
 800b13c:	881a      	ldrh	r2, [r3, #0]
 800b13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b140:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b142:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b144:	f7fe fc72 	bl	8009a2c <clear_lock>
#endif
	return FR_OK;
 800b148:	2300      	movs	r3, #0
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3758      	adds	r7, #88	; 0x58
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	41615252 	.word	0x41615252
 800b158:	61417272 	.word	0x61417272
 800b15c:	200000b4 	.word	0x200000b4

0800b160 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b16a:	2309      	movs	r3, #9
 800b16c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d01c      	beq.n	800b1ae <validate+0x4e>
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d018      	beq.n	800b1ae <validate+0x4e>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d013      	beq.n	800b1ae <validate+0x4e>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	889a      	ldrh	r2, [r3, #4]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	88db      	ldrh	r3, [r3, #6]
 800b190:	429a      	cmp	r2, r3
 800b192:	d10c      	bne.n	800b1ae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	785b      	ldrb	r3, [r3, #1]
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7fe f960 	bl	8009460 <disk_status>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	f003 0301 	and.w	r3, r3, #1
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d101      	bne.n	800b1ae <validate+0x4e>
			res = FR_OK;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b1ae:	7bfb      	ldrb	r3, [r7, #15]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d102      	bne.n	800b1ba <validate+0x5a>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	e000      	b.n	800b1bc <validate+0x5c>
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	683a      	ldr	r2, [r7, #0]
 800b1be:	6013      	str	r3, [r2, #0]
	return res;
 800b1c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3710      	adds	r7, #16
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
	...

0800b1cc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b088      	sub	sp, #32
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	60b9      	str	r1, [r7, #8]
 800b1d6:	4613      	mov	r3, r2
 800b1d8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b1de:	f107 0310 	add.w	r3, r7, #16
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7ff fc9e 	bl	800ab24 <get_ldnumber>
 800b1e8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b1ea:	69fb      	ldr	r3, [r7, #28]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	da01      	bge.n	800b1f4 <f_mount+0x28>
 800b1f0:	230b      	movs	r3, #11
 800b1f2:	e02b      	b.n	800b24c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b1f4:	4a17      	ldr	r2, [pc, #92]	; (800b254 <f_mount+0x88>)
 800b1f6:	69fb      	ldr	r3, [r7, #28]
 800b1f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1fc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b1fe:	69bb      	ldr	r3, [r7, #24]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d005      	beq.n	800b210 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b204:	69b8      	ldr	r0, [r7, #24]
 800b206:	f7fe fc11 	bl	8009a2c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b20a:	69bb      	ldr	r3, [r7, #24]
 800b20c:	2200      	movs	r2, #0
 800b20e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d002      	beq.n	800b21c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2200      	movs	r2, #0
 800b21a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b21c:	68fa      	ldr	r2, [r7, #12]
 800b21e:	490d      	ldr	r1, [pc, #52]	; (800b254 <f_mount+0x88>)
 800b220:	69fb      	ldr	r3, [r7, #28]
 800b222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d002      	beq.n	800b232 <f_mount+0x66>
 800b22c:	79fb      	ldrb	r3, [r7, #7]
 800b22e:	2b01      	cmp	r3, #1
 800b230:	d001      	beq.n	800b236 <f_mount+0x6a>
 800b232:	2300      	movs	r3, #0
 800b234:	e00a      	b.n	800b24c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b236:	f107 010c 	add.w	r1, r7, #12
 800b23a:	f107 0308 	add.w	r3, r7, #8
 800b23e:	2200      	movs	r2, #0
 800b240:	4618      	mov	r0, r3
 800b242:	f7ff fd09 	bl	800ac58 <find_volume>
 800b246:	4603      	mov	r3, r0
 800b248:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b24a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3720      	adds	r7, #32
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}
 800b254:	200000b0 	.word	0x200000b0

0800b258 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b098      	sub	sp, #96	; 0x60
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	60f8      	str	r0, [r7, #12]
 800b260:	60b9      	str	r1, [r7, #8]
 800b262:	4613      	mov	r3, r2
 800b264:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d101      	bne.n	800b270 <f_open+0x18>
 800b26c:	2309      	movs	r3, #9
 800b26e:	e1bb      	b.n	800b5e8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b270:	79fb      	ldrb	r3, [r7, #7]
 800b272:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b276:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b278:	79fa      	ldrb	r2, [r7, #7]
 800b27a:	f107 0110 	add.w	r1, r7, #16
 800b27e:	f107 0308 	add.w	r3, r7, #8
 800b282:	4618      	mov	r0, r3
 800b284:	f7ff fce8 	bl	800ac58 <find_volume>
 800b288:	4603      	mov	r3, r0
 800b28a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b28e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b292:	2b00      	cmp	r3, #0
 800b294:	f040 819f 	bne.w	800b5d6 <f_open+0x37e>
		dj.obj.fs = fs;
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b29c:	68ba      	ldr	r2, [r7, #8]
 800b29e:	f107 0314 	add.w	r3, r7, #20
 800b2a2:	4611      	mov	r1, r2
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f7ff fbc7 	bl	800aa38 <follow_path>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b2b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d11a      	bne.n	800b2ee <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b2b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b2bc:	b25b      	sxtb	r3, r3
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	da03      	bge.n	800b2ca <f_open+0x72>
				res = FR_INVALID_NAME;
 800b2c2:	2306      	movs	r3, #6
 800b2c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b2c8:	e011      	b.n	800b2ee <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b2ca:	79fb      	ldrb	r3, [r7, #7]
 800b2cc:	f023 0301 	bic.w	r3, r3, #1
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	bf14      	ite	ne
 800b2d4:	2301      	movne	r3, #1
 800b2d6:	2300      	moveq	r3, #0
 800b2d8:	b2db      	uxtb	r3, r3
 800b2da:	461a      	mov	r2, r3
 800b2dc:	f107 0314 	add.w	r3, r7, #20
 800b2e0:	4611      	mov	r1, r2
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f7fe fa5a 	bl	800979c <chk_lock>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b2ee:	79fb      	ldrb	r3, [r7, #7]
 800b2f0:	f003 031c 	and.w	r3, r3, #28
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d07f      	beq.n	800b3f8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b2f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d017      	beq.n	800b330 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b300:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b304:	2b04      	cmp	r3, #4
 800b306:	d10e      	bne.n	800b326 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b308:	f7fe faa4 	bl	8009854 <enq_lock>
 800b30c:	4603      	mov	r3, r0
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d006      	beq.n	800b320 <f_open+0xc8>
 800b312:	f107 0314 	add.w	r3, r7, #20
 800b316:	4618      	mov	r0, r3
 800b318:	f7ff fa69 	bl	800a7ee <dir_register>
 800b31c:	4603      	mov	r3, r0
 800b31e:	e000      	b.n	800b322 <f_open+0xca>
 800b320:	2312      	movs	r3, #18
 800b322:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b326:	79fb      	ldrb	r3, [r7, #7]
 800b328:	f043 0308 	orr.w	r3, r3, #8
 800b32c:	71fb      	strb	r3, [r7, #7]
 800b32e:	e010      	b.n	800b352 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b330:	7ebb      	ldrb	r3, [r7, #26]
 800b332:	f003 0311 	and.w	r3, r3, #17
 800b336:	2b00      	cmp	r3, #0
 800b338:	d003      	beq.n	800b342 <f_open+0xea>
					res = FR_DENIED;
 800b33a:	2307      	movs	r3, #7
 800b33c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b340:	e007      	b.n	800b352 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b342:	79fb      	ldrb	r3, [r7, #7]
 800b344:	f003 0304 	and.w	r3, r3, #4
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d002      	beq.n	800b352 <f_open+0xfa>
 800b34c:	2308      	movs	r3, #8
 800b34e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b352:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b356:	2b00      	cmp	r3, #0
 800b358:	d168      	bne.n	800b42c <f_open+0x1d4>
 800b35a:	79fb      	ldrb	r3, [r7, #7]
 800b35c:	f003 0308 	and.w	r3, r3, #8
 800b360:	2b00      	cmp	r3, #0
 800b362:	d063      	beq.n	800b42c <f_open+0x1d4>
				dw = GET_FATTIME();
 800b364:	f7fb f880 	bl	8006468 <get_fattime>
 800b368:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b36a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b36c:	330e      	adds	r3, #14
 800b36e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b370:	4618      	mov	r0, r3
 800b372:	f7fe f969 	bl	8009648 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b378:	3316      	adds	r3, #22
 800b37a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b37c:	4618      	mov	r0, r3
 800b37e:	f7fe f963 	bl	8009648 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b384:	330b      	adds	r3, #11
 800b386:	2220      	movs	r2, #32
 800b388:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b38e:	4611      	mov	r1, r2
 800b390:	4618      	mov	r0, r3
 800b392:	f7ff f93b 	bl	800a60c <ld_clust>
 800b396:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b39c:	2200      	movs	r2, #0
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f7ff f953 	bl	800a64a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b3a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3a6:	331c      	adds	r3, #28
 800b3a8:	2100      	movs	r1, #0
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7fe f94c 	bl	8009648 <st_dword>
					fs->wflag = 1;
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b3b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d037      	beq.n	800b42c <f_open+0x1d4>
						dw = fs->winsect;
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3c0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b3c2:	f107 0314 	add.w	r3, r7, #20
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7fe fe43 	bl	800a056 <remove_chain>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b3d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d126      	bne.n	800b42c <f_open+0x1d4>
							res = move_window(fs, dw);
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f7fe fb8a 	bl	8009afc <move_window>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b3f2:	3a01      	subs	r2, #1
 800b3f4:	611a      	str	r2, [r3, #16]
 800b3f6:	e019      	b.n	800b42c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b3f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d115      	bne.n	800b42c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b400:	7ebb      	ldrb	r3, [r7, #26]
 800b402:	f003 0310 	and.w	r3, r3, #16
 800b406:	2b00      	cmp	r3, #0
 800b408:	d003      	beq.n	800b412 <f_open+0x1ba>
					res = FR_NO_FILE;
 800b40a:	2304      	movs	r3, #4
 800b40c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b410:	e00c      	b.n	800b42c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b412:	79fb      	ldrb	r3, [r7, #7]
 800b414:	f003 0302 	and.w	r3, r3, #2
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d007      	beq.n	800b42c <f_open+0x1d4>
 800b41c:	7ebb      	ldrb	r3, [r7, #26]
 800b41e:	f003 0301 	and.w	r3, r3, #1
 800b422:	2b00      	cmp	r3, #0
 800b424:	d002      	beq.n	800b42c <f_open+0x1d4>
						res = FR_DENIED;
 800b426:	2307      	movs	r3, #7
 800b428:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b42c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b430:	2b00      	cmp	r3, #0
 800b432:	d128      	bne.n	800b486 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b434:	79fb      	ldrb	r3, [r7, #7]
 800b436:	f003 0308 	and.w	r3, r3, #8
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d003      	beq.n	800b446 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b43e:	79fb      	ldrb	r3, [r7, #7]
 800b440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b444:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b44e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b454:	79fb      	ldrb	r3, [r7, #7]
 800b456:	f023 0301 	bic.w	r3, r3, #1
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	bf14      	ite	ne
 800b45e:	2301      	movne	r3, #1
 800b460:	2300      	moveq	r3, #0
 800b462:	b2db      	uxtb	r3, r3
 800b464:	461a      	mov	r2, r3
 800b466:	f107 0314 	add.w	r3, r7, #20
 800b46a:	4611      	mov	r1, r2
 800b46c:	4618      	mov	r0, r3
 800b46e:	f7fe fa13 	bl	8009898 <inc_lock>
 800b472:	4602      	mov	r2, r0
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	691b      	ldr	r3, [r3, #16]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d102      	bne.n	800b486 <f_open+0x22e>
 800b480:	2302      	movs	r3, #2
 800b482:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b486:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	f040 80a3 	bne.w	800b5d6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b494:	4611      	mov	r1, r2
 800b496:	4618      	mov	r0, r3
 800b498:	f7ff f8b8 	bl	800a60c <ld_clust>
 800b49c:	4602      	mov	r2, r0
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b4a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4a4:	331c      	adds	r3, #28
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7fe f890 	bl	80095cc <ld_dword>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b4b8:	693a      	ldr	r2, [r7, #16]
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	88da      	ldrh	r2, [r3, #6]
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	79fa      	ldrb	r2, [r7, #7]
 800b4ca:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	3330      	adds	r3, #48	; 0x30
 800b4e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b4e6:	2100      	movs	r1, #0
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f7fe f8fa 	bl	80096e2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b4ee:	79fb      	ldrb	r3, [r7, #7]
 800b4f0:	f003 0320 	and.w	r3, r3, #32
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d06e      	beq.n	800b5d6 <f_open+0x37e>
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	68db      	ldr	r3, [r3, #12]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d06a      	beq.n	800b5d6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	68da      	ldr	r2, [r3, #12]
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	895b      	ldrh	r3, [r3, #10]
 800b50c:	461a      	mov	r2, r3
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	899b      	ldrh	r3, [r3, #12]
 800b512:	fb03 f302 	mul.w	r3, r3, r2
 800b516:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	689b      	ldr	r3, [r3, #8]
 800b51c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	68db      	ldr	r3, [r3, #12]
 800b522:	657b      	str	r3, [r7, #84]	; 0x54
 800b524:	e016      	b.n	800b554 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7fe fba3 	bl	8009c76 <get_fat>
 800b530:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b532:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b534:	2b01      	cmp	r3, #1
 800b536:	d802      	bhi.n	800b53e <f_open+0x2e6>
 800b538:	2302      	movs	r3, #2
 800b53a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b53e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b540:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b544:	d102      	bne.n	800b54c <f_open+0x2f4>
 800b546:	2301      	movs	r3, #1
 800b548:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b54c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b54e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b550:	1ad3      	subs	r3, r2, r3
 800b552:	657b      	str	r3, [r7, #84]	; 0x54
 800b554:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d103      	bne.n	800b564 <f_open+0x30c>
 800b55c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b55e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b560:	429a      	cmp	r2, r3
 800b562:	d8e0      	bhi.n	800b526 <f_open+0x2ce>
				}
				fp->clust = clst;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b568:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b56a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d131      	bne.n	800b5d6 <f_open+0x37e>
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	899b      	ldrh	r3, [r3, #12]
 800b576:	461a      	mov	r2, r3
 800b578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b57a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b57e:	fb02 f201 	mul.w	r2, r2, r1
 800b582:	1a9b      	subs	r3, r3, r2
 800b584:	2b00      	cmp	r3, #0
 800b586:	d026      	beq.n	800b5d6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b58c:	4618      	mov	r0, r3
 800b58e:	f7fe fb53 	bl	8009c38 <clust2sect>
 800b592:	6478      	str	r0, [r7, #68]	; 0x44
 800b594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b596:	2b00      	cmp	r3, #0
 800b598:	d103      	bne.n	800b5a2 <f_open+0x34a>
						res = FR_INT_ERR;
 800b59a:	2302      	movs	r3, #2
 800b59c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b5a0:	e019      	b.n	800b5d6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	899b      	ldrh	r3, [r3, #12]
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5aa:	fbb3 f2f2 	udiv	r2, r3, r2
 800b5ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5b0:	441a      	add	r2, r3
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	7858      	ldrb	r0, [r3, #1]
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	6a1a      	ldr	r2, [r3, #32]
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	f7fd ff8b 	bl	80094e0 <disk_read>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d002      	beq.n	800b5d6 <f_open+0x37e>
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b5d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d002      	beq.n	800b5e4 <f_open+0x38c>
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b5e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3760      	adds	r7, #96	; 0x60
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b08c      	sub	sp, #48	; 0x30
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	60f8      	str	r0, [r7, #12]
 800b5f8:	60b9      	str	r1, [r7, #8]
 800b5fa:	607a      	str	r2, [r7, #4]
 800b5fc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	2200      	movs	r2, #0
 800b606:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f107 0210 	add.w	r2, r7, #16
 800b60e:	4611      	mov	r1, r2
 800b610:	4618      	mov	r0, r3
 800b612:	f7ff fda5 	bl	800b160 <validate>
 800b616:	4603      	mov	r3, r0
 800b618:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b61c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b620:	2b00      	cmp	r3, #0
 800b622:	d107      	bne.n	800b634 <f_write+0x44>
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	7d5b      	ldrb	r3, [r3, #21]
 800b628:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b62c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b630:	2b00      	cmp	r3, #0
 800b632:	d002      	beq.n	800b63a <f_write+0x4a>
 800b634:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b638:	e16a      	b.n	800b910 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	7d1b      	ldrb	r3, [r3, #20]
 800b63e:	f003 0302 	and.w	r3, r3, #2
 800b642:	2b00      	cmp	r3, #0
 800b644:	d101      	bne.n	800b64a <f_write+0x5a>
 800b646:	2307      	movs	r3, #7
 800b648:	e162      	b.n	800b910 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	699a      	ldr	r2, [r3, #24]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	441a      	add	r2, r3
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	699b      	ldr	r3, [r3, #24]
 800b656:	429a      	cmp	r2, r3
 800b658:	f080 814c 	bcs.w	800b8f4 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	699b      	ldr	r3, [r3, #24]
 800b660:	43db      	mvns	r3, r3
 800b662:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b664:	e146      	b.n	800b8f4 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	699b      	ldr	r3, [r3, #24]
 800b66a:	693a      	ldr	r2, [r7, #16]
 800b66c:	8992      	ldrh	r2, [r2, #12]
 800b66e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b672:	fb02 f201 	mul.w	r2, r2, r1
 800b676:	1a9b      	subs	r3, r3, r2
 800b678:	2b00      	cmp	r3, #0
 800b67a:	f040 80f1 	bne.w	800b860 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	699b      	ldr	r3, [r3, #24]
 800b682:	693a      	ldr	r2, [r7, #16]
 800b684:	8992      	ldrh	r2, [r2, #12]
 800b686:	fbb3 f3f2 	udiv	r3, r3, r2
 800b68a:	693a      	ldr	r2, [r7, #16]
 800b68c:	8952      	ldrh	r2, [r2, #10]
 800b68e:	3a01      	subs	r2, #1
 800b690:	4013      	ands	r3, r2
 800b692:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b694:	69bb      	ldr	r3, [r7, #24]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d143      	bne.n	800b722 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	699b      	ldr	r3, [r3, #24]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d10c      	bne.n	800b6bc <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	689b      	ldr	r3, [r3, #8]
 800b6a6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d11a      	bne.n	800b6e4 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2100      	movs	r1, #0
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f7fe fd34 	bl	800a120 <create_chain>
 800b6b8:	62b8      	str	r0, [r7, #40]	; 0x28
 800b6ba:	e013      	b.n	800b6e4 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d007      	beq.n	800b6d4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	699b      	ldr	r3, [r3, #24]
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	68f8      	ldr	r0, [r7, #12]
 800b6cc:	f7fe fdc0 	bl	800a250 <clmt_clust>
 800b6d0:	62b8      	str	r0, [r7, #40]	; 0x28
 800b6d2:	e007      	b.n	800b6e4 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b6d4:	68fa      	ldr	r2, [r7, #12]
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	69db      	ldr	r3, [r3, #28]
 800b6da:	4619      	mov	r1, r3
 800b6dc:	4610      	mov	r0, r2
 800b6de:	f7fe fd1f 	bl	800a120 <create_chain>
 800b6e2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	f000 8109 	beq.w	800b8fe <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d104      	bne.n	800b6fc <f_write+0x10c>
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2202      	movs	r2, #2
 800b6f6:	755a      	strb	r2, [r3, #21]
 800b6f8:	2302      	movs	r3, #2
 800b6fa:	e109      	b.n	800b910 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b702:	d104      	bne.n	800b70e <f_write+0x11e>
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2201      	movs	r2, #1
 800b708:	755a      	strb	r2, [r3, #21]
 800b70a:	2301      	movs	r3, #1
 800b70c:	e100      	b.n	800b910 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b712:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	689b      	ldr	r3, [r3, #8]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d102      	bne.n	800b722 <f_write+0x132>
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b720:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	7d1b      	ldrb	r3, [r3, #20]
 800b726:	b25b      	sxtb	r3, r3
 800b728:	2b00      	cmp	r3, #0
 800b72a:	da18      	bge.n	800b75e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	7858      	ldrb	r0, [r3, #1]
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	6a1a      	ldr	r2, [r3, #32]
 800b73a:	2301      	movs	r3, #1
 800b73c:	f7fd fef0 	bl	8009520 <disk_write>
 800b740:	4603      	mov	r3, r0
 800b742:	2b00      	cmp	r3, #0
 800b744:	d004      	beq.n	800b750 <f_write+0x160>
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2201      	movs	r2, #1
 800b74a:	755a      	strb	r2, [r3, #21]
 800b74c:	2301      	movs	r3, #1
 800b74e:	e0df      	b.n	800b910 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	7d1b      	ldrb	r3, [r3, #20]
 800b754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b758:	b2da      	uxtb	r2, r3
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b75e:	693a      	ldr	r2, [r7, #16]
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	69db      	ldr	r3, [r3, #28]
 800b764:	4619      	mov	r1, r3
 800b766:	4610      	mov	r0, r2
 800b768:	f7fe fa66 	bl	8009c38 <clust2sect>
 800b76c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d104      	bne.n	800b77e <f_write+0x18e>
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2202      	movs	r2, #2
 800b778:	755a      	strb	r2, [r3, #21]
 800b77a:	2302      	movs	r3, #2
 800b77c:	e0c8      	b.n	800b910 <f_write+0x320>
			sect += csect;
 800b77e:	697a      	ldr	r2, [r7, #20]
 800b780:	69bb      	ldr	r3, [r7, #24]
 800b782:	4413      	add	r3, r2
 800b784:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	899b      	ldrh	r3, [r3, #12]
 800b78a:	461a      	mov	r2, r3
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b792:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b794:	6a3b      	ldr	r3, [r7, #32]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d043      	beq.n	800b822 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b79a:	69ba      	ldr	r2, [r7, #24]
 800b79c:	6a3b      	ldr	r3, [r7, #32]
 800b79e:	4413      	add	r3, r2
 800b7a0:	693a      	ldr	r2, [r7, #16]
 800b7a2:	8952      	ldrh	r2, [r2, #10]
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d905      	bls.n	800b7b4 <f_write+0x1c4>
					cc = fs->csize - csect;
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	895b      	ldrh	r3, [r3, #10]
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	69bb      	ldr	r3, [r7, #24]
 800b7b0:	1ad3      	subs	r3, r2, r3
 800b7b2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	7858      	ldrb	r0, [r3, #1]
 800b7b8:	6a3b      	ldr	r3, [r7, #32]
 800b7ba:	697a      	ldr	r2, [r7, #20]
 800b7bc:	69f9      	ldr	r1, [r7, #28]
 800b7be:	f7fd feaf 	bl	8009520 <disk_write>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d004      	beq.n	800b7d2 <f_write+0x1e2>
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	755a      	strb	r2, [r3, #21]
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	e09e      	b.n	800b910 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	6a1a      	ldr	r2, [r3, #32]
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	1ad3      	subs	r3, r2, r3
 800b7da:	6a3a      	ldr	r2, [r7, #32]
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	d918      	bls.n	800b812 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	6a1a      	ldr	r2, [r3, #32]
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	1ad3      	subs	r3, r2, r3
 800b7ee:	693a      	ldr	r2, [r7, #16]
 800b7f0:	8992      	ldrh	r2, [r2, #12]
 800b7f2:	fb02 f303 	mul.w	r3, r2, r3
 800b7f6:	69fa      	ldr	r2, [r7, #28]
 800b7f8:	18d1      	adds	r1, r2, r3
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	899b      	ldrh	r3, [r3, #12]
 800b7fe:	461a      	mov	r2, r3
 800b800:	f7fd ff4e 	bl	80096a0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	7d1b      	ldrb	r3, [r3, #20]
 800b808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b80c:	b2da      	uxtb	r2, r3
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	899b      	ldrh	r3, [r3, #12]
 800b816:	461a      	mov	r2, r3
 800b818:	6a3b      	ldr	r3, [r7, #32]
 800b81a:	fb02 f303 	mul.w	r3, r2, r3
 800b81e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b820:	e04b      	b.n	800b8ba <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	6a1b      	ldr	r3, [r3, #32]
 800b826:	697a      	ldr	r2, [r7, #20]
 800b828:	429a      	cmp	r2, r3
 800b82a:	d016      	beq.n	800b85a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	699a      	ldr	r2, [r3, #24]
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b834:	429a      	cmp	r2, r3
 800b836:	d210      	bcs.n	800b85a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	7858      	ldrb	r0, [r3, #1]
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b842:	2301      	movs	r3, #1
 800b844:	697a      	ldr	r2, [r7, #20]
 800b846:	f7fd fe4b 	bl	80094e0 <disk_read>
 800b84a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d004      	beq.n	800b85a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	2201      	movs	r2, #1
 800b854:	755a      	strb	r2, [r3, #21]
 800b856:	2301      	movs	r3, #1
 800b858:	e05a      	b.n	800b910 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	697a      	ldr	r2, [r7, #20]
 800b85e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	899b      	ldrh	r3, [r3, #12]
 800b864:	4618      	mov	r0, r3
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	699b      	ldr	r3, [r3, #24]
 800b86a:	693a      	ldr	r2, [r7, #16]
 800b86c:	8992      	ldrh	r2, [r2, #12]
 800b86e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b872:	fb02 f201 	mul.w	r2, r2, r1
 800b876:	1a9b      	subs	r3, r3, r2
 800b878:	1ac3      	subs	r3, r0, r3
 800b87a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b87c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	429a      	cmp	r2, r3
 800b882:	d901      	bls.n	800b888 <f_write+0x298>
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	699b      	ldr	r3, [r3, #24]
 800b892:	693a      	ldr	r2, [r7, #16]
 800b894:	8992      	ldrh	r2, [r2, #12]
 800b896:	fbb3 f0f2 	udiv	r0, r3, r2
 800b89a:	fb02 f200 	mul.w	r2, r2, r0
 800b89e:	1a9b      	subs	r3, r3, r2
 800b8a0:	440b      	add	r3, r1
 800b8a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8a4:	69f9      	ldr	r1, [r7, #28]
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7fd fefa 	bl	80096a0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	7d1b      	ldrb	r3, [r3, #20]
 800b8b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b8b4:	b2da      	uxtb	r2, r3
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b8ba:	69fa      	ldr	r2, [r7, #28]
 800b8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8be:	4413      	add	r3, r2
 800b8c0:	61fb      	str	r3, [r7, #28]
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	699a      	ldr	r2, [r3, #24]
 800b8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c8:	441a      	add	r2, r3
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	619a      	str	r2, [r3, #24]
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	68da      	ldr	r2, [r3, #12]
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	699b      	ldr	r3, [r3, #24]
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	bf38      	it	cc
 800b8da:	461a      	movcc	r2, r3
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	60da      	str	r2, [r3, #12]
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	681a      	ldr	r2, [r3, #0]
 800b8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e6:	441a      	add	r2, r3
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	601a      	str	r2, [r3, #0]
 800b8ec:	687a      	ldr	r2, [r7, #4]
 800b8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f0:	1ad3      	subs	r3, r2, r3
 800b8f2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	f47f aeb5 	bne.w	800b666 <f_write+0x76>
 800b8fc:	e000      	b.n	800b900 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b8fe:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	7d1b      	ldrb	r3, [r3, #20]
 800b904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b908:	b2da      	uxtb	r2, r3
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b90e:	2300      	movs	r3, #0
}
 800b910:	4618      	mov	r0, r3
 800b912:	3730      	adds	r7, #48	; 0x30
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}

0800b918 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b086      	sub	sp, #24
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f107 0208 	add.w	r2, r7, #8
 800b926:	4611      	mov	r1, r2
 800b928:	4618      	mov	r0, r3
 800b92a:	f7ff fc19 	bl	800b160 <validate>
 800b92e:	4603      	mov	r3, r0
 800b930:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b932:	7dfb      	ldrb	r3, [r7, #23]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d168      	bne.n	800ba0a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	7d1b      	ldrb	r3, [r3, #20]
 800b93c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b940:	2b00      	cmp	r3, #0
 800b942:	d062      	beq.n	800ba0a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	7d1b      	ldrb	r3, [r3, #20]
 800b948:	b25b      	sxtb	r3, r3
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	da15      	bge.n	800b97a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	7858      	ldrb	r0, [r3, #1]
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6a1a      	ldr	r2, [r3, #32]
 800b95c:	2301      	movs	r3, #1
 800b95e:	f7fd fddf 	bl	8009520 <disk_write>
 800b962:	4603      	mov	r3, r0
 800b964:	2b00      	cmp	r3, #0
 800b966:	d001      	beq.n	800b96c <f_sync+0x54>
 800b968:	2301      	movs	r3, #1
 800b96a:	e04f      	b.n	800ba0c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	7d1b      	ldrb	r3, [r3, #20]
 800b970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b974:	b2da      	uxtb	r2, r3
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b97a:	f7fa fd75 	bl	8006468 <get_fattime>
 800b97e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b980:	68ba      	ldr	r2, [r7, #8]
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b986:	4619      	mov	r1, r3
 800b988:	4610      	mov	r0, r2
 800b98a:	f7fe f8b7 	bl	8009afc <move_window>
 800b98e:	4603      	mov	r3, r0
 800b990:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b992:	7dfb      	ldrb	r3, [r7, #23]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d138      	bne.n	800ba0a <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b99c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	330b      	adds	r3, #11
 800b9a2:	781a      	ldrb	r2, [r3, #0]
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	330b      	adds	r3, #11
 800b9a8:	f042 0220 	orr.w	r2, r2, #32
 800b9ac:	b2d2      	uxtb	r2, r2
 800b9ae:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6818      	ldr	r0, [r3, #0]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	689b      	ldr	r3, [r3, #8]
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	68f9      	ldr	r1, [r7, #12]
 800b9bc:	f7fe fe45 	bl	800a64a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f103 021c 	add.w	r2, r3, #28
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	68db      	ldr	r3, [r3, #12]
 800b9ca:	4619      	mov	r1, r3
 800b9cc:	4610      	mov	r0, r2
 800b9ce:	f7fd fe3b 	bl	8009648 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	3316      	adds	r3, #22
 800b9d6:	6939      	ldr	r1, [r7, #16]
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f7fd fe35 	bl	8009648 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	3312      	adds	r3, #18
 800b9e2:	2100      	movs	r1, #0
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f7fd fe14 	bl	8009612 <st_word>
					fs->wflag = 1;
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f7fe f8b0 	bl	8009b58 <sync_fs>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	7d1b      	ldrb	r3, [r3, #20]
 800ba00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba04:	b2da      	uxtb	r2, r3
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ba0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	3718      	adds	r7, #24
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}

0800ba14 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f7ff ff7b 	bl	800b918 <f_sync>
 800ba22:	4603      	mov	r3, r0
 800ba24:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ba26:	7bfb      	ldrb	r3, [r7, #15]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d118      	bne.n	800ba5e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f107 0208 	add.w	r2, r7, #8
 800ba32:	4611      	mov	r1, r2
 800ba34:	4618      	mov	r0, r3
 800ba36:	f7ff fb93 	bl	800b160 <validate>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ba3e:	7bfb      	ldrb	r3, [r7, #15]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d10c      	bne.n	800ba5e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	691b      	ldr	r3, [r3, #16]
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f7fd ffb3 	bl	80099b4 <dec_lock>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ba52:	7bfb      	ldrb	r3, [r7, #15]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d102      	bne.n	800ba5e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ba5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3710      	adds	r7, #16
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b086      	sub	sp, #24
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d101      	bne.n	800ba7c <f_opendir+0x14>
 800ba78:	2309      	movs	r3, #9
 800ba7a:	e064      	b.n	800bb46 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800ba80:	f107 010c 	add.w	r1, r7, #12
 800ba84:	463b      	mov	r3, r7
 800ba86:	2200      	movs	r2, #0
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f7ff f8e5 	bl	800ac58 <find_volume>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ba92:	7dfb      	ldrb	r3, [r7, #23]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d14f      	bne.n	800bb38 <f_opendir+0xd0>
		obj->fs = fs;
 800ba98:	68fa      	ldr	r2, [r7, #12]
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	4619      	mov	r1, r3
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f7fe ffc8 	bl	800aa38 <follow_path>
 800baa8:	4603      	mov	r3, r0
 800baaa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800baac:	7dfb      	ldrb	r3, [r7, #23]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d13d      	bne.n	800bb2e <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bab8:	b25b      	sxtb	r3, r3
 800baba:	2b00      	cmp	r3, #0
 800babc:	db12      	blt.n	800bae4 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	799b      	ldrb	r3, [r3, #6]
 800bac2:	f003 0310 	and.w	r3, r3, #16
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d00a      	beq.n	800bae0 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800baca:	68fa      	ldr	r2, [r7, #12]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6a1b      	ldr	r3, [r3, #32]
 800bad0:	4619      	mov	r1, r3
 800bad2:	4610      	mov	r0, r2
 800bad4:	f7fe fd9a 	bl	800a60c <ld_clust>
 800bad8:	4602      	mov	r2, r0
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	609a      	str	r2, [r3, #8]
 800bade:	e001      	b.n	800bae4 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800bae0:	2305      	movs	r3, #5
 800bae2:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800bae4:	7dfb      	ldrb	r3, [r7, #23]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d121      	bne.n	800bb2e <f_opendir+0xc6>
				obj->id = fs->id;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	88da      	ldrh	r2, [r3, #6]
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800baf2:	2100      	movs	r1, #0
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f7fe fbe3 	bl	800a2c0 <dir_sdi>
 800bafa:	4603      	mov	r3, r0
 800bafc:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800bafe:	7dfb      	ldrb	r3, [r7, #23]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d114      	bne.n	800bb2e <f_opendir+0xc6>
					if (obj->sclust) {
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	689b      	ldr	r3, [r3, #8]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d00d      	beq.n	800bb28 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800bb0c:	2100      	movs	r1, #0
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f7fd fec2 	bl	8009898 <inc_lock>
 800bb14:	4602      	mov	r2, r0
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	691b      	ldr	r3, [r3, #16]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d105      	bne.n	800bb2e <f_opendir+0xc6>
 800bb22:	2312      	movs	r3, #18
 800bb24:	75fb      	strb	r3, [r7, #23]
 800bb26:	e002      	b.n	800bb2e <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800bb2e:	7dfb      	ldrb	r3, [r7, #23]
 800bb30:	2b04      	cmp	r3, #4
 800bb32:	d101      	bne.n	800bb38 <f_opendir+0xd0>
 800bb34:	2305      	movs	r3, #5
 800bb36:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800bb38:	7dfb      	ldrb	r3, [r7, #23]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d002      	beq.n	800bb44 <f_opendir+0xdc>
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	2200      	movs	r2, #0
 800bb42:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bb44:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3718      	adds	r7, #24
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}

0800bb4e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800bb4e:	b580      	push	{r7, lr}
 800bb50:	b084      	sub	sp, #16
 800bb52:	af00      	add	r7, sp, #0
 800bb54:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f107 0208 	add.w	r2, r7, #8
 800bb5c:	4611      	mov	r1, r2
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f7ff fafe 	bl	800b160 <validate>
 800bb64:	4603      	mov	r3, r0
 800bb66:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bb68:	7bfb      	ldrb	r3, [r7, #15]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d110      	bne.n	800bb90 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	691b      	ldr	r3, [r3, #16]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d006      	beq.n	800bb84 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	691b      	ldr	r3, [r3, #16]
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7fd ff1a 	bl	80099b4 <dec_lock>
 800bb80:	4603      	mov	r3, r0
 800bb82:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800bb84:	7bfb      	ldrb	r3, [r7, #15]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d102      	bne.n	800bb90 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800bb90:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3710      	adds	r7, #16
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}

0800bb9a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	b084      	sub	sp, #16
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
 800bba2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f107 0208 	add.w	r2, r7, #8
 800bbaa:	4611      	mov	r1, r2
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7ff fad7 	bl	800b160 <validate>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bbb6:	7bfb      	ldrb	r3, [r7, #15]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d126      	bne.n	800bc0a <f_readdir+0x70>
		if (!fno) {
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d106      	bne.n	800bbd0 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800bbc2:	2100      	movs	r1, #0
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f7fe fb7b 	bl	800a2c0 <dir_sdi>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	73fb      	strb	r3, [r7, #15]
 800bbce:	e01c      	b.n	800bc0a <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800bbd0:	2100      	movs	r1, #0
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f7fe fd59 	bl	800a68a <dir_read>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800bbdc:	7bfb      	ldrb	r3, [r7, #15]
 800bbde:	2b04      	cmp	r3, #4
 800bbe0:	d101      	bne.n	800bbe6 <f_readdir+0x4c>
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800bbe6:	7bfb      	ldrb	r3, [r7, #15]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d10e      	bne.n	800bc0a <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800bbec:	6839      	ldr	r1, [r7, #0]
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f7fe fe2f 	bl	800a852 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800bbf4:	2100      	movs	r1, #0
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f7fe fbeb 	bl	800a3d2 <dir_next>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800bc00:	7bfb      	ldrb	r3, [r7, #15]
 800bc02:	2b04      	cmp	r3, #4
 800bc04:	d101      	bne.n	800bc0a <f_readdir+0x70>
 800bc06:	2300      	movs	r3, #0
 800bc08:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800bc0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3710      	adds	r7, #16
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b090      	sub	sp, #64	; 0x40
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800bc1e:	f107 010c 	add.w	r1, r7, #12
 800bc22:	1d3b      	adds	r3, r7, #4
 800bc24:	2200      	movs	r2, #0
 800bc26:	4618      	mov	r0, r3
 800bc28:	f7ff f816 	bl	800ac58 <find_volume>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800bc32:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d11f      	bne.n	800bc7a <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	f107 030c 	add.w	r3, r7, #12
 800bc40:	4611      	mov	r1, r2
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7fe fef8 	bl	800aa38 <follow_path>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800bc4e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d111      	bne.n	800bc7a <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800bc56:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bc5a:	b25b      	sxtb	r3, r3
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	da03      	bge.n	800bc68 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800bc60:	2306      	movs	r3, #6
 800bc62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800bc66:	e008      	b.n	800bc7a <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d005      	beq.n	800bc7a <f_stat+0x66>
 800bc6e:	f107 030c 	add.w	r3, r7, #12
 800bc72:	6839      	ldr	r1, [r7, #0]
 800bc74:	4618      	mov	r0, r3
 800bc76:	f7fe fdec 	bl	800a852 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800bc7a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3740      	adds	r7, #64	; 0x40
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}

0800bc86 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800bc86:	b580      	push	{r7, lr}
 800bc88:	b092      	sub	sp, #72	; 0x48
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	60f8      	str	r0, [r7, #12]
 800bc8e:	60b9      	str	r1, [r7, #8]
 800bc90:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800bc92:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800bc96:	f107 030c 	add.w	r3, r7, #12
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f7fe ffdb 	bl	800ac58 <find_volume>
 800bca2:	4603      	mov	r3, r0
 800bca4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800bca8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	f040 8099 	bne.w	800bde4 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800bcb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800bcb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcba:	695a      	ldr	r2, [r3, #20]
 800bcbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcbe:	699b      	ldr	r3, [r3, #24]
 800bcc0:	3b02      	subs	r3, #2
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d804      	bhi.n	800bcd0 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800bcc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc8:	695a      	ldr	r2, [r3, #20]
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	601a      	str	r2, [r3, #0]
 800bcce:	e089      	b.n	800bde4 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800bcd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	d128      	bne.n	800bd2e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800bcdc:	2302      	movs	r3, #2
 800bcde:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce2:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800bce4:	f107 0314 	add.w	r3, r7, #20
 800bce8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7fd ffc3 	bl	8009c76 <get_fat>
 800bcf0:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800bcf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bcf8:	d103      	bne.n	800bd02 <f_getfree+0x7c>
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800bd00:	e063      	b.n	800bdca <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800bd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd04:	2b01      	cmp	r3, #1
 800bd06:	d103      	bne.n	800bd10 <f_getfree+0x8a>
 800bd08:	2302      	movs	r3, #2
 800bd0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800bd0e:	e05c      	b.n	800bdca <f_getfree+0x144>
					if (stat == 0) nfree++;
 800bd10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d102      	bne.n	800bd1c <f_getfree+0x96>
 800bd16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd18:	3301      	adds	r3, #1
 800bd1a:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800bd1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd1e:	3301      	adds	r3, #1
 800bd20:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd24:	699b      	ldr	r3, [r3, #24]
 800bd26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	d3db      	bcc.n	800bce4 <f_getfree+0x5e>
 800bd2c:	e04d      	b.n	800bdca <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800bd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd30:	699b      	ldr	r3, [r3, #24]
 800bd32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd38:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	637b      	str	r3, [r7, #52]	; 0x34
 800bd3e:	2300      	movs	r3, #0
 800bd40:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800bd42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d113      	bne.n	800bd70 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800bd48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd4c:	1c5a      	adds	r2, r3, #1
 800bd4e:	63ba      	str	r2, [r7, #56]	; 0x38
 800bd50:	4619      	mov	r1, r3
 800bd52:	f7fd fed3 	bl	8009afc <move_window>
 800bd56:	4603      	mov	r3, r0
 800bd58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800bd5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d131      	bne.n	800bdc8 <f_getfree+0x142>
							p = fs->win;
 800bd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd66:	3334      	adds	r3, #52	; 0x34
 800bd68:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800bd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6c:	899b      	ldrh	r3, [r3, #12]
 800bd6e:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800bd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd72:	781b      	ldrb	r3, [r3, #0]
 800bd74:	2b02      	cmp	r3, #2
 800bd76:	d10f      	bne.n	800bd98 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800bd78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd7a:	f7fd fc0f 	bl	800959c <ld_word>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d102      	bne.n	800bd8a <f_getfree+0x104>
 800bd84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd86:	3301      	adds	r3, #1
 800bd88:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800bd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd8c:	3302      	adds	r3, #2
 800bd8e:	633b      	str	r3, [r7, #48]	; 0x30
 800bd90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd92:	3b02      	subs	r3, #2
 800bd94:	637b      	str	r3, [r7, #52]	; 0x34
 800bd96:	e010      	b.n	800bdba <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800bd98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd9a:	f7fd fc17 	bl	80095cc <ld_dword>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d102      	bne.n	800bdae <f_getfree+0x128>
 800bda8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdaa:	3301      	adds	r3, #1
 800bdac:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800bdae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb0:	3304      	adds	r3, #4
 800bdb2:	633b      	str	r3, [r7, #48]	; 0x30
 800bdb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdb6:	3b04      	subs	r3, #4
 800bdb8:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800bdba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdbc:	3b01      	subs	r3, #1
 800bdbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d1bd      	bne.n	800bd42 <f_getfree+0xbc>
 800bdc6:	e000      	b.n	800bdca <f_getfree+0x144>
							if (res != FR_OK) break;
 800bdc8:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bdce:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800bdd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bdd4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800bdd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd8:	791a      	ldrb	r2, [r3, #4]
 800bdda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bddc:	f042 0201 	orr.w	r2, r2, #1
 800bde0:	b2d2      	uxtb	r2, r2
 800bde2:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800bde4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3748      	adds	r7, #72	; 0x48
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b096      	sub	sp, #88	; 0x58
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800bdf8:	f107 0108 	add.w	r1, r7, #8
 800bdfc:	1d3b      	adds	r3, r7, #4
 800bdfe:	2202      	movs	r2, #2
 800be00:	4618      	mov	r0, r3
 800be02:	f7fe ff29 	bl	800ac58 <find_volume>
 800be06:	4603      	mov	r3, r0
 800be08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800be10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be14:	2b00      	cmp	r3, #0
 800be16:	f040 80f2 	bne.w	800bffe <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	f107 030c 	add.w	r3, r7, #12
 800be20:	4611      	mov	r1, r2
 800be22:	4618      	mov	r0, r3
 800be24:	f7fe fe08 	bl	800aa38 <follow_path>
 800be28:	4603      	mov	r3, r0
 800be2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800be2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be32:	2b00      	cmp	r3, #0
 800be34:	d102      	bne.n	800be3c <f_mkdir+0x4c>
 800be36:	2308      	movs	r3, #8
 800be38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800be3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be40:	2b04      	cmp	r3, #4
 800be42:	f040 80dc 	bne.w	800bffe <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800be46:	f107 030c 	add.w	r3, r7, #12
 800be4a:	2100      	movs	r1, #0
 800be4c:	4618      	mov	r0, r3
 800be4e:	f7fe f967 	bl	800a120 <create_chain>
 800be52:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	895b      	ldrh	r3, [r3, #10]
 800be58:	461a      	mov	r2, r3
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	899b      	ldrh	r3, [r3, #12]
 800be5e:	fb03 f302 	mul.w	r3, r3, r2
 800be62:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800be64:	2300      	movs	r3, #0
 800be66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800be6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d102      	bne.n	800be76 <f_mkdir+0x86>
 800be70:	2307      	movs	r3, #7
 800be72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800be76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be78:	2b01      	cmp	r3, #1
 800be7a:	d102      	bne.n	800be82 <f_mkdir+0x92>
 800be7c:	2302      	movs	r3, #2
 800be7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800be82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be88:	d102      	bne.n	800be90 <f_mkdir+0xa0>
 800be8a:	2301      	movs	r3, #1
 800be8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800be90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be94:	2b00      	cmp	r3, #0
 800be96:	d106      	bne.n	800bea6 <f_mkdir+0xb6>
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	4618      	mov	r0, r3
 800be9c:	f7fd fdea 	bl	8009a74 <sync_window>
 800bea0:	4603      	mov	r3, r0
 800bea2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 800bea6:	f7fa fadf 	bl	8006468 <get_fattime>
 800beaa:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800beac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d16c      	bne.n	800bf8e <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800beb8:	4618      	mov	r0, r3
 800beba:	f7fd febd 	bl	8009c38 <clust2sect>
 800bebe:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	3334      	adds	r3, #52	; 0x34
 800bec4:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	899b      	ldrh	r3, [r3, #12]
 800beca:	461a      	mov	r2, r3
 800becc:	2100      	movs	r1, #0
 800bece:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bed0:	f7fd fc07 	bl	80096e2 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800bed4:	220b      	movs	r2, #11
 800bed6:	2120      	movs	r1, #32
 800bed8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800beda:	f7fd fc02 	bl	80096e2 <mem_set>
					dir[DIR_Name] = '.';
 800bede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bee0:	222e      	movs	r2, #46	; 0x2e
 800bee2:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800bee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bee6:	330b      	adds	r3, #11
 800bee8:	2210      	movs	r2, #16
 800beea:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800beec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beee:	3316      	adds	r3, #22
 800bef0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bef2:	4618      	mov	r0, r3
 800bef4:	f7fd fba8 	bl	8009648 <st_dword>
					st_clust(fs, dir, dcl);
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800befc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800befe:	4618      	mov	r0, r3
 800bf00:	f7fe fba3 	bl	800a64a <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800bf04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf06:	3320      	adds	r3, #32
 800bf08:	2220      	movs	r2, #32
 800bf0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f7fd fbc7 	bl	80096a0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800bf12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf14:	3321      	adds	r3, #33	; 0x21
 800bf16:	222e      	movs	r2, #46	; 0x2e
 800bf18:	701a      	strb	r2, [r3, #0]
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	781b      	ldrb	r3, [r3, #0]
 800bf22:	2b03      	cmp	r3, #3
 800bf24:	d106      	bne.n	800bf34 <f_mkdir+0x144>
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d101      	bne.n	800bf34 <f_mkdir+0x144>
 800bf30:	2300      	movs	r3, #0
 800bf32:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800bf34:	68b8      	ldr	r0, [r7, #8]
 800bf36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf38:	3320      	adds	r3, #32
 800bf3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	f7fe fb84 	bl	800a64a <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	895b      	ldrh	r3, [r3, #10]
 800bf46:	653b      	str	r3, [r7, #80]	; 0x50
 800bf48:	e01c      	b.n	800bf84 <f_mkdir+0x194>
					fs->winsect = dsc++;
 800bf4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf4c:	1c5a      	adds	r2, r3, #1
 800bf4e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800bf50:	68ba      	ldr	r2, [r7, #8]
 800bf52:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	2201      	movs	r2, #1
 800bf58:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f7fd fd89 	bl	8009a74 <sync_window>
 800bf62:	4603      	mov	r3, r0
 800bf64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 800bf68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d10d      	bne.n	800bf8c <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	899b      	ldrh	r3, [r3, #12]
 800bf74:	461a      	mov	r2, r3
 800bf76:	2100      	movs	r1, #0
 800bf78:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bf7a:	f7fd fbb2 	bl	80096e2 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800bf7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf80:	3b01      	subs	r3, #1
 800bf82:	653b      	str	r3, [r7, #80]	; 0x50
 800bf84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d1df      	bne.n	800bf4a <f_mkdir+0x15a>
 800bf8a:	e000      	b.n	800bf8e <f_mkdir+0x19e>
					if (res != FR_OK) break;
 800bf8c:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800bf8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d107      	bne.n	800bfa6 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800bf96:	f107 030c 	add.w	r3, r7, #12
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f7fe fc27 	bl	800a7ee <dir_register>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 800bfa6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d120      	bne.n	800bff0 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800bfae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb0:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800bfb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfb4:	3316      	adds	r3, #22
 800bfb6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f7fd fb45 	bl	8009648 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bfc2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f7fe fb40 	bl	800a64a <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800bfca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfcc:	330b      	adds	r3, #11
 800bfce:	2210      	movs	r2, #16
 800bfd0:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800bfd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d10e      	bne.n	800bffe <f_mkdir+0x20e>
					res = sync_fs(fs);
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f7fd fdb8 	bl	8009b58 <sync_fs>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800bfee:	e006      	b.n	800bffe <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800bff0:	f107 030c 	add.w	r3, r7, #12
 800bff4:	2200      	movs	r2, #0
 800bff6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bff8:	4618      	mov	r0, r3
 800bffa:	f7fe f82c 	bl	800a056 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800bffe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800c002:	4618      	mov	r0, r3
 800c004:	3758      	adds	r7, #88	; 0x58
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
	...

0800c00c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b087      	sub	sp, #28
 800c010:	af00      	add	r7, sp, #0
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	60b9      	str	r1, [r7, #8]
 800c016:	4613      	mov	r3, r2
 800c018:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c01a:	2301      	movs	r3, #1
 800c01c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c01e:	2300      	movs	r3, #0
 800c020:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c022:	4b1f      	ldr	r3, [pc, #124]	; (800c0a0 <FATFS_LinkDriverEx+0x94>)
 800c024:	7a5b      	ldrb	r3, [r3, #9]
 800c026:	b2db      	uxtb	r3, r3
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d131      	bne.n	800c090 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c02c:	4b1c      	ldr	r3, [pc, #112]	; (800c0a0 <FATFS_LinkDriverEx+0x94>)
 800c02e:	7a5b      	ldrb	r3, [r3, #9]
 800c030:	b2db      	uxtb	r3, r3
 800c032:	461a      	mov	r2, r3
 800c034:	4b1a      	ldr	r3, [pc, #104]	; (800c0a0 <FATFS_LinkDriverEx+0x94>)
 800c036:	2100      	movs	r1, #0
 800c038:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c03a:	4b19      	ldr	r3, [pc, #100]	; (800c0a0 <FATFS_LinkDriverEx+0x94>)
 800c03c:	7a5b      	ldrb	r3, [r3, #9]
 800c03e:	b2db      	uxtb	r3, r3
 800c040:	4a17      	ldr	r2, [pc, #92]	; (800c0a0 <FATFS_LinkDriverEx+0x94>)
 800c042:	009b      	lsls	r3, r3, #2
 800c044:	4413      	add	r3, r2
 800c046:	68fa      	ldr	r2, [r7, #12]
 800c048:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c04a:	4b15      	ldr	r3, [pc, #84]	; (800c0a0 <FATFS_LinkDriverEx+0x94>)
 800c04c:	7a5b      	ldrb	r3, [r3, #9]
 800c04e:	b2db      	uxtb	r3, r3
 800c050:	461a      	mov	r2, r3
 800c052:	4b13      	ldr	r3, [pc, #76]	; (800c0a0 <FATFS_LinkDriverEx+0x94>)
 800c054:	4413      	add	r3, r2
 800c056:	79fa      	ldrb	r2, [r7, #7]
 800c058:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c05a:	4b11      	ldr	r3, [pc, #68]	; (800c0a0 <FATFS_LinkDriverEx+0x94>)
 800c05c:	7a5b      	ldrb	r3, [r3, #9]
 800c05e:	b2db      	uxtb	r3, r3
 800c060:	1c5a      	adds	r2, r3, #1
 800c062:	b2d1      	uxtb	r1, r2
 800c064:	4a0e      	ldr	r2, [pc, #56]	; (800c0a0 <FATFS_LinkDriverEx+0x94>)
 800c066:	7251      	strb	r1, [r2, #9]
 800c068:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c06a:	7dbb      	ldrb	r3, [r7, #22]
 800c06c:	3330      	adds	r3, #48	; 0x30
 800c06e:	b2da      	uxtb	r2, r3
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	3301      	adds	r3, #1
 800c078:	223a      	movs	r2, #58	; 0x3a
 800c07a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	3302      	adds	r3, #2
 800c080:	222f      	movs	r2, #47	; 0x2f
 800c082:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	3303      	adds	r3, #3
 800c088:	2200      	movs	r2, #0
 800c08a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c08c:	2300      	movs	r3, #0
 800c08e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c090:	7dfb      	ldrb	r3, [r7, #23]
}
 800c092:	4618      	mov	r0, r3
 800c094:	371c      	adds	r7, #28
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr
 800c09e:	bf00      	nop
 800c0a0:	200000d8 	.word	0x200000d8

0800c0a4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b082      	sub	sp, #8
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	6839      	ldr	r1, [r7, #0]
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f7ff ffaa 	bl	800c00c <FATFS_LinkDriverEx>
 800c0b8:	4603      	mov	r3, r0
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3708      	adds	r7, #8
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}
	...

0800c0c4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	490e      	ldr	r1, [pc, #56]	; (800c104 <MX_USB_HOST_Init+0x40>)
 800c0cc:	480e      	ldr	r0, [pc, #56]	; (800c108 <MX_USB_HOST_Init+0x44>)
 800c0ce:	f7fb fe6f 	bl	8007db0 <USBH_Init>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d001      	beq.n	800c0dc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c0d8:	f7f4 ff92 	bl	8001000 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800c0dc:	490b      	ldr	r1, [pc, #44]	; (800c10c <MX_USB_HOST_Init+0x48>)
 800c0de:	480a      	ldr	r0, [pc, #40]	; (800c108 <MX_USB_HOST_Init+0x44>)
 800c0e0:	f7fb fef4 	bl	8007ecc <USBH_RegisterClass>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d001      	beq.n	800c0ee <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c0ea:	f7f4 ff89 	bl	8001000 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c0ee:	4806      	ldr	r0, [pc, #24]	; (800c108 <MX_USB_HOST_Init+0x44>)
 800c0f0:	f7fb ff78 	bl	8007fe4 <USBH_Start>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d001      	beq.n	800c0fe <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c0fa:	f7f4 ff81 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c0fe:	bf00      	nop
 800c100:	bd80      	pop	{r7, pc}
 800c102:	bf00      	nop
 800c104:	0800c125 	.word	0x0800c125
 800c108:	20002264 	.word	0x20002264
 800c10c:	2000000c 	.word	0x2000000c

0800c110 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c114:	4802      	ldr	r0, [pc, #8]	; (800c120 <MX_USB_HOST_Process+0x10>)
 800c116:	f7fb ff75 	bl	8008004 <USBH_Process>
}
 800c11a:	bf00      	nop
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	20002264 	.word	0x20002264

0800c124 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	460b      	mov	r3, r1
 800c12e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c130:	78fb      	ldrb	r3, [r7, #3]
 800c132:	3b01      	subs	r3, #1
 800c134:	2b04      	cmp	r3, #4
 800c136:	d842      	bhi.n	800c1be <USBH_UserProcess+0x9a>
 800c138:	a201      	add	r2, pc, #4	; (adr r2, 800c140 <USBH_UserProcess+0x1c>)
 800c13a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c13e:	bf00      	nop
 800c140:	0800c1bf 	.word	0x0800c1bf
 800c144:	0800c15d 	.word	0x0800c15d
 800c148:	0800c1bf 	.word	0x0800c1bf
 800c14c:	0800c1b7 	.word	0x0800c1b7
 800c150:	0800c155 	.word	0x0800c155
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c154:	4b1c      	ldr	r3, [pc, #112]	; (800c1c8 <USBH_UserProcess+0xa4>)
 800c156:	2203      	movs	r2, #3
 800c158:	701a      	strb	r2, [r3, #0]
  break;
 800c15a:	e031      	b.n	800c1c0 <USBH_UserProcess+0x9c>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c15c:	4b1a      	ldr	r3, [pc, #104]	; (800c1c8 <USBH_UserProcess+0xa4>)
 800c15e:	2202      	movs	r2, #2
 800c160:	701a      	strb	r2, [r3, #0]


  Mount_USB();
 800c162:	f7f4 fa67 	bl	8000634 <Mount_USB>

  Check_USB_Details();   // check space details
 800c166:	f7f4 fda5 	bl	8000cb4 <Check_USB_Details>

  Scan_USB("/");   // scan for files and directories
 800c16a:	4818      	ldr	r0, [pc, #96]	; (800c1cc <USBH_UserProcess+0xa8>)
 800c16c:	f7f4 fa84 	bl	8000678 <Scan_USB>

  Create_File("/ROOTFILE.txt");
 800c170:	4817      	ldr	r0, [pc, #92]	; (800c1d0 <USBH_UserProcess+0xac>)
 800c172:	f7f4 fbeb 	bl	800094c <Create_File>
  Write_File("/ROOTFILE.txt", "This data should be in root file\n");
 800c176:	4917      	ldr	r1, [pc, #92]	; (800c1d4 <USBH_UserProcess+0xb0>)
 800c178:	4815      	ldr	r0, [pc, #84]	; (800c1d0 <USBH_UserProcess+0xac>)
 800c17a:	f7f4 fb23 	bl	80007c4 <Write_File>

  Create_Dir("/DIR1");
 800c17e:	4816      	ldr	r0, [pc, #88]	; (800c1d8 <USBH_UserProcess+0xb4>)
 800c180:	f7f4 fd58 	bl	8000c34 <Create_Dir>
  Create_File("/DIR1/DIR1FILE.txt");
 800c184:	4815      	ldr	r0, [pc, #84]	; (800c1dc <USBH_UserProcess+0xb8>)
 800c186:	f7f4 fbe1 	bl	800094c <Create_File>
  Write_File("/DIR1/DIR1FILE.txt", "This data should be in DIR1 file\n");
 800c18a:	4915      	ldr	r1, [pc, #84]	; (800c1e0 <USBH_UserProcess+0xbc>)
 800c18c:	4813      	ldr	r0, [pc, #76]	; (800c1dc <USBH_UserProcess+0xb8>)
 800c18e:	f7f4 fb19 	bl	80007c4 <Write_File>

  Create_Dir("/DIR2");
 800c192:	4814      	ldr	r0, [pc, #80]	; (800c1e4 <USBH_UserProcess+0xc0>)
 800c194:	f7f4 fd4e 	bl	8000c34 <Create_Dir>
  Create_Dir("/DIR2/SUBDIR1");
 800c198:	4813      	ldr	r0, [pc, #76]	; (800c1e8 <USBH_UserProcess+0xc4>)
 800c19a:	f7f4 fd4b 	bl	8000c34 <Create_Dir>
  Create_File("/DIR2/SUBDIR1/DIR2FILE.txt");
 800c19e:	4813      	ldr	r0, [pc, #76]	; (800c1ec <USBH_UserProcess+0xc8>)
 800c1a0:	f7f4 fbd4 	bl	800094c <Create_File>
  Write_File("/DIR2/SUBDIR1/DIR2FILE.txt", "This data should be in DIR2/SUBDIR1 file\n as i have nothing better to write/n so i just wrote this\n");
 800c1a4:	4912      	ldr	r1, [pc, #72]	; (800c1f0 <USBH_UserProcess+0xcc>)
 800c1a6:	4811      	ldr	r0, [pc, #68]	; (800c1ec <USBH_UserProcess+0xc8>)
 800c1a8:	f7f4 fb0c 	bl	80007c4 <Write_File>

  Update_File("/ROOTFILE.txt", "This updated data must be in second line of Root File\n");
 800c1ac:	4911      	ldr	r1, [pc, #68]	; (800c1f4 <USBH_UserProcess+0xd0>)
 800c1ae:	4808      	ldr	r0, [pc, #32]	; (800c1d0 <USBH_UserProcess+0xac>)
 800c1b0:	f7f4 fc68 	bl	8000a84 <Update_File>


  break;
 800c1b4:	e004      	b.n	800c1c0 <USBH_UserProcess+0x9c>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c1b6:	4b04      	ldr	r3, [pc, #16]	; (800c1c8 <USBH_UserProcess+0xa4>)
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	701a      	strb	r2, [r3, #0]
  break;
 800c1bc:	e000      	b.n	800c1c0 <USBH_UserProcess+0x9c>

  default:
  break;
 800c1be:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c1c0:	bf00      	nop
 800c1c2:	3708      	adds	r7, #8
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}
 800c1c8:	200000e4 	.word	0x200000e4
 800c1cc:	0800ddc8 	.word	0x0800ddc8
 800c1d0:	0800ddcc 	.word	0x0800ddcc
 800c1d4:	0800dddc 	.word	0x0800dddc
 800c1d8:	0800de00 	.word	0x0800de00
 800c1dc:	0800de08 	.word	0x0800de08
 800c1e0:	0800de1c 	.word	0x0800de1c
 800c1e4:	0800de40 	.word	0x0800de40
 800c1e8:	0800de48 	.word	0x0800de48
 800c1ec:	0800de58 	.word	0x0800de58
 800c1f0:	0800de74 	.word	0x0800de74
 800c1f4:	0800ded8 	.word	0x0800ded8

0800c1f8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b0ae      	sub	sp, #184	; 0xb8
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c200:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800c204:	2200      	movs	r2, #0
 800c206:	601a      	str	r2, [r3, #0]
 800c208:	605a      	str	r2, [r3, #4]
 800c20a:	609a      	str	r2, [r3, #8]
 800c20c:	60da      	str	r2, [r3, #12]
 800c20e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c210:	f107 0314 	add.w	r3, r7, #20
 800c214:	2290      	movs	r2, #144	; 0x90
 800c216:	2100      	movs	r1, #0
 800c218:	4618      	mov	r0, r3
 800c21a:	f000 fb1f 	bl	800c85c <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c226:	d151      	bne.n	800c2cc <HAL_HCD_MspInit+0xd4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800c228:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c22c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800c22e:	2300      	movs	r3, #0
 800c230:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c234:	f107 0314 	add.w	r3, r7, #20
 800c238:	4618      	mov	r0, r3
 800c23a:	f7f7 fd43 	bl	8003cc4 <HAL_RCCEx_PeriphCLKConfig>
 800c23e:	4603      	mov	r3, r0
 800c240:	2b00      	cmp	r3, #0
 800c242:	d001      	beq.n	800c248 <HAL_HCD_MspInit+0x50>
    {
      Error_Handler();
 800c244:	f7f4 fedc 	bl	8001000 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c248:	4b22      	ldr	r3, [pc, #136]	; (800c2d4 <HAL_HCD_MspInit+0xdc>)
 800c24a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c24c:	4a21      	ldr	r2, [pc, #132]	; (800c2d4 <HAL_HCD_MspInit+0xdc>)
 800c24e:	f043 0301 	orr.w	r3, r3, #1
 800c252:	6313      	str	r3, [r2, #48]	; 0x30
 800c254:	4b1f      	ldr	r3, [pc, #124]	; (800c2d4 <HAL_HCD_MspInit+0xdc>)
 800c256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c258:	f003 0301 	and.w	r3, r3, #1
 800c25c:	613b      	str	r3, [r7, #16]
 800c25e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c260:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c264:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c268:	2302      	movs	r3, #2
 800c26a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c26e:	2300      	movs	r3, #0
 800c270:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c274:	2303      	movs	r3, #3
 800c276:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c27a:	230a      	movs	r3, #10
 800c27c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c280:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800c284:	4619      	mov	r1, r3
 800c286:	4814      	ldr	r0, [pc, #80]	; (800c2d8 <HAL_HCD_MspInit+0xe0>)
 800c288:	f7f5 f9ee 	bl	8001668 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c28c:	4b11      	ldr	r3, [pc, #68]	; (800c2d4 <HAL_HCD_MspInit+0xdc>)
 800c28e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c290:	4a10      	ldr	r2, [pc, #64]	; (800c2d4 <HAL_HCD_MspInit+0xdc>)
 800c292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c296:	6353      	str	r3, [r2, #52]	; 0x34
 800c298:	4b0e      	ldr	r3, [pc, #56]	; (800c2d4 <HAL_HCD_MspInit+0xdc>)
 800c29a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c29c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2a0:	60fb      	str	r3, [r7, #12]
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	4b0b      	ldr	r3, [pc, #44]	; (800c2d4 <HAL_HCD_MspInit+0xdc>)
 800c2a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2a8:	4a0a      	ldr	r2, [pc, #40]	; (800c2d4 <HAL_HCD_MspInit+0xdc>)
 800c2aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c2ae:	6453      	str	r3, [r2, #68]	; 0x44
 800c2b0:	4b08      	ldr	r3, [pc, #32]	; (800c2d4 <HAL_HCD_MspInit+0xdc>)
 800c2b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c2b8:	60bb      	str	r3, [r7, #8]
 800c2ba:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c2bc:	2200      	movs	r2, #0
 800c2be:	2100      	movs	r1, #0
 800c2c0:	2043      	movs	r0, #67	; 0x43
 800c2c2:	f7f5 f9a7 	bl	8001614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c2c6:	2043      	movs	r0, #67	; 0x43
 800c2c8:	f7f5 f9c0 	bl	800164c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c2cc:	bf00      	nop
 800c2ce:	37b8      	adds	r7, #184	; 0xb8
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}
 800c2d4:	40023800 	.word	0x40023800
 800c2d8:	40020000 	.word	0x40020000

0800c2dc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b082      	sub	sp, #8
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f7fc fa5d 	bl	80087aa <USBH_LL_IncTimer>
}
 800c2f0:	bf00      	nop
 800c2f2:	3708      	adds	r7, #8
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}

0800c2f8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c306:	4618      	mov	r0, r3
 800c308:	f7fc fa95 	bl	8008836 <USBH_LL_Connect>
}
 800c30c:	bf00      	nop
 800c30e:	3708      	adds	r7, #8
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}

0800c314 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b082      	sub	sp, #8
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c322:	4618      	mov	r0, r3
 800c324:	f7fc fa9e 	bl	8008864 <USBH_LL_Disconnect>
}
 800c328:	bf00      	nop
 800c32a:	3708      	adds	r7, #8
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}

0800c330 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c330:	b480      	push	{r7}
 800c332:	b083      	sub	sp, #12
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
 800c338:	460b      	mov	r3, r1
 800c33a:	70fb      	strb	r3, [r7, #3]
 800c33c:	4613      	mov	r3, r2
 800c33e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c340:	bf00      	nop
 800c342:	370c      	adds	r7, #12
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr

0800c34c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b082      	sub	sp, #8
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c35a:	4618      	mov	r0, r3
 800c35c:	f7fc fa4f 	bl	80087fe <USBH_LL_PortEnabled>
}
 800c360:	bf00      	nop
 800c362:	3708      	adds	r7, #8
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}

0800c368 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b082      	sub	sp, #8
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c376:	4618      	mov	r0, r3
 800c378:	f7fc fa4f 	bl	800881a <USBH_LL_PortDisabled>
}
 800c37c:	bf00      	nop
 800c37e:	3708      	adds	r7, #8
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b082      	sub	sp, #8
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c392:	2b01      	cmp	r3, #1
 800c394:	d12a      	bne.n	800c3ec <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c396:	4a18      	ldr	r2, [pc, #96]	; (800c3f8 <USBH_LL_Init+0x74>)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	4a15      	ldr	r2, [pc, #84]	; (800c3f8 <USBH_LL_Init+0x74>)
 800c3a2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c3a6:	4b14      	ldr	r3, [pc, #80]	; (800c3f8 <USBH_LL_Init+0x74>)
 800c3a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c3ac:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c3ae:	4b12      	ldr	r3, [pc, #72]	; (800c3f8 <USBH_LL_Init+0x74>)
 800c3b0:	2208      	movs	r2, #8
 800c3b2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c3b4:	4b10      	ldr	r3, [pc, #64]	; (800c3f8 <USBH_LL_Init+0x74>)
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c3ba:	4b0f      	ldr	r3, [pc, #60]	; (800c3f8 <USBH_LL_Init+0x74>)
 800c3bc:	2200      	movs	r2, #0
 800c3be:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c3c0:	4b0d      	ldr	r3, [pc, #52]	; (800c3f8 <USBH_LL_Init+0x74>)
 800c3c2:	2202      	movs	r2, #2
 800c3c4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c3c6:	4b0c      	ldr	r3, [pc, #48]	; (800c3f8 <USBH_LL_Init+0x74>)
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c3cc:	480a      	ldr	r0, [pc, #40]	; (800c3f8 <USBH_LL_Init+0x74>)
 800c3ce:	f7f5 fb10 	bl	80019f2 <HAL_HCD_Init>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d001      	beq.n	800c3dc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c3d8:	f7f4 fe12 	bl	8001000 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c3dc:	4806      	ldr	r0, [pc, #24]	; (800c3f8 <USBH_LL_Init+0x74>)
 800c3de:	f7f5 fef4 	bl	80021ca <HAL_HCD_GetCurrentFrame>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f7fc f9d0 	bl	800878c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c3ec:	2300      	movs	r3, #0
}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	3708      	adds	r7, #8
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}
 800c3f6:	bf00      	nop
 800c3f8:	2000263c 	.word	0x2000263c

0800c3fc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b084      	sub	sp, #16
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c404:	2300      	movs	r3, #0
 800c406:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c408:	2300      	movs	r3, #0
 800c40a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c412:	4618      	mov	r0, r3
 800c414:	f7f5 fe63 	bl	80020de <HAL_HCD_Start>
 800c418:	4603      	mov	r3, r0
 800c41a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c41c:	7bfb      	ldrb	r3, [r7, #15]
 800c41e:	4618      	mov	r0, r3
 800c420:	f000 f98c 	bl	800c73c <USBH_Get_USB_Status>
 800c424:	4603      	mov	r3, r0
 800c426:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c428:	7bbb      	ldrb	r3, [r7, #14]
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3710      	adds	r7, #16
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}

0800c432 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c432:	b580      	push	{r7, lr}
 800c434:	b084      	sub	sp, #16
 800c436:	af00      	add	r7, sp, #0
 800c438:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c43a:	2300      	movs	r3, #0
 800c43c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c43e:	2300      	movs	r3, #0
 800c440:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c448:	4618      	mov	r0, r3
 800c44a:	f7f5 fe6b 	bl	8002124 <HAL_HCD_Stop>
 800c44e:	4603      	mov	r3, r0
 800c450:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c452:	7bfb      	ldrb	r3, [r7, #15]
 800c454:	4618      	mov	r0, r3
 800c456:	f000 f971 	bl	800c73c <USBH_Get_USB_Status>
 800c45a:	4603      	mov	r3, r0
 800c45c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c45e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c460:	4618      	mov	r0, r3
 800c462:	3710      	adds	r7, #16
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}

0800c468 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b084      	sub	sp, #16
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c470:	2301      	movs	r3, #1
 800c472:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c47a:	4618      	mov	r0, r3
 800c47c:	f7f5 feb3 	bl	80021e6 <HAL_HCD_GetCurrentSpeed>
 800c480:	4603      	mov	r3, r0
 800c482:	2b02      	cmp	r3, #2
 800c484:	d00c      	beq.n	800c4a0 <USBH_LL_GetSpeed+0x38>
 800c486:	2b02      	cmp	r3, #2
 800c488:	d80d      	bhi.n	800c4a6 <USBH_LL_GetSpeed+0x3e>
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d002      	beq.n	800c494 <USBH_LL_GetSpeed+0x2c>
 800c48e:	2b01      	cmp	r3, #1
 800c490:	d003      	beq.n	800c49a <USBH_LL_GetSpeed+0x32>
 800c492:	e008      	b.n	800c4a6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c494:	2300      	movs	r3, #0
 800c496:	73fb      	strb	r3, [r7, #15]
    break;
 800c498:	e008      	b.n	800c4ac <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c49a:	2301      	movs	r3, #1
 800c49c:	73fb      	strb	r3, [r7, #15]
    break;
 800c49e:	e005      	b.n	800c4ac <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c4a0:	2302      	movs	r3, #2
 800c4a2:	73fb      	strb	r3, [r7, #15]
    break;
 800c4a4:	e002      	b.n	800c4ac <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	73fb      	strb	r3, [r7, #15]
    break;
 800c4aa:	bf00      	nop
  }
  return  speed;
 800c4ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3710      	adds	r7, #16
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}

0800c4b6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c4b6:	b580      	push	{r7, lr}
 800c4b8:	b084      	sub	sp, #16
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f7f5 fe46 	bl	800215e <HAL_HCD_ResetPort>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c4d6:	7bfb      	ldrb	r3, [r7, #15]
 800c4d8:	4618      	mov	r0, r3
 800c4da:	f000 f92f 	bl	800c73c <USBH_Get_USB_Status>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3710      	adds	r7, #16
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}

0800c4ec <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b082      	sub	sp, #8
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	460b      	mov	r3, r1
 800c4f6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c4fe:	78fa      	ldrb	r2, [r7, #3]
 800c500:	4611      	mov	r1, r2
 800c502:	4618      	mov	r0, r3
 800c504:	f7f5 fe4d 	bl	80021a2 <HAL_HCD_HC_GetXferCount>
 800c508:	4603      	mov	r3, r0
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3708      	adds	r7, #8
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}

0800c512 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c512:	b590      	push	{r4, r7, lr}
 800c514:	b089      	sub	sp, #36	; 0x24
 800c516:	af04      	add	r7, sp, #16
 800c518:	6078      	str	r0, [r7, #4]
 800c51a:	4608      	mov	r0, r1
 800c51c:	4611      	mov	r1, r2
 800c51e:	461a      	mov	r2, r3
 800c520:	4603      	mov	r3, r0
 800c522:	70fb      	strb	r3, [r7, #3]
 800c524:	460b      	mov	r3, r1
 800c526:	70bb      	strb	r3, [r7, #2]
 800c528:	4613      	mov	r3, r2
 800c52a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c52c:	2300      	movs	r3, #0
 800c52e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c530:	2300      	movs	r3, #0
 800c532:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c53a:	787c      	ldrb	r4, [r7, #1]
 800c53c:	78ba      	ldrb	r2, [r7, #2]
 800c53e:	78f9      	ldrb	r1, [r7, #3]
 800c540:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c542:	9302      	str	r3, [sp, #8]
 800c544:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c548:	9301      	str	r3, [sp, #4]
 800c54a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c54e:	9300      	str	r3, [sp, #0]
 800c550:	4623      	mov	r3, r4
 800c552:	f7f5 fab0 	bl	8001ab6 <HAL_HCD_HC_Init>
 800c556:	4603      	mov	r3, r0
 800c558:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c55a:	7bfb      	ldrb	r3, [r7, #15]
 800c55c:	4618      	mov	r0, r3
 800c55e:	f000 f8ed 	bl	800c73c <USBH_Get_USB_Status>
 800c562:	4603      	mov	r3, r0
 800c564:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c566:	7bbb      	ldrb	r3, [r7, #14]
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3714      	adds	r7, #20
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd90      	pop	{r4, r7, pc}

0800c570 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b084      	sub	sp, #16
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	460b      	mov	r3, r1
 800c57a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c57c:	2300      	movs	r3, #0
 800c57e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c580:	2300      	movs	r3, #0
 800c582:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c58a:	78fa      	ldrb	r2, [r7, #3]
 800c58c:	4611      	mov	r1, r2
 800c58e:	4618      	mov	r0, r3
 800c590:	f7f5 fb20 	bl	8001bd4 <HAL_HCD_HC_Halt>
 800c594:	4603      	mov	r3, r0
 800c596:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c598:	7bfb      	ldrb	r3, [r7, #15]
 800c59a:	4618      	mov	r0, r3
 800c59c:	f000 f8ce 	bl	800c73c <USBH_Get_USB_Status>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3710      	adds	r7, #16
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}

0800c5ae <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c5ae:	b590      	push	{r4, r7, lr}
 800c5b0:	b089      	sub	sp, #36	; 0x24
 800c5b2:	af04      	add	r7, sp, #16
 800c5b4:	6078      	str	r0, [r7, #4]
 800c5b6:	4608      	mov	r0, r1
 800c5b8:	4611      	mov	r1, r2
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	4603      	mov	r3, r0
 800c5be:	70fb      	strb	r3, [r7, #3]
 800c5c0:	460b      	mov	r3, r1
 800c5c2:	70bb      	strb	r3, [r7, #2]
 800c5c4:	4613      	mov	r3, r2
 800c5c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c5d6:	787c      	ldrb	r4, [r7, #1]
 800c5d8:	78ba      	ldrb	r2, [r7, #2]
 800c5da:	78f9      	ldrb	r1, [r7, #3]
 800c5dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c5e0:	9303      	str	r3, [sp, #12]
 800c5e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c5e4:	9302      	str	r3, [sp, #8]
 800c5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e8:	9301      	str	r3, [sp, #4]
 800c5ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c5ee:	9300      	str	r3, [sp, #0]
 800c5f0:	4623      	mov	r3, r4
 800c5f2:	f7f5 fb13 	bl	8001c1c <HAL_HCD_HC_SubmitRequest>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c5fa:	7bfb      	ldrb	r3, [r7, #15]
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f000 f89d 	bl	800c73c <USBH_Get_USB_Status>
 800c602:	4603      	mov	r3, r0
 800c604:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c606:	7bbb      	ldrb	r3, [r7, #14]
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3714      	adds	r7, #20
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd90      	pop	{r4, r7, pc}

0800c610 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	460b      	mov	r3, r1
 800c61a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c622:	78fa      	ldrb	r2, [r7, #3]
 800c624:	4611      	mov	r1, r2
 800c626:	4618      	mov	r0, r3
 800c628:	f7f5 fda7 	bl	800217a <HAL_HCD_HC_GetURBState>
 800c62c:	4603      	mov	r3, r0
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3708      	adds	r7, #8
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}

0800c636 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c636:	b580      	push	{r7, lr}
 800c638:	b082      	sub	sp, #8
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	6078      	str	r0, [r7, #4]
 800c63e:	460b      	mov	r3, r1
 800c640:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c648:	2b01      	cmp	r3, #1
 800c64a:	d103      	bne.n	800c654 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c64c:	78fb      	ldrb	r3, [r7, #3]
 800c64e:	4618      	mov	r0, r3
 800c650:	f000 f8a0 	bl	800c794 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c654:	20c8      	movs	r0, #200	; 0xc8
 800c656:	f7f4 ff01 	bl	800145c <HAL_Delay>
  return USBH_OK;
 800c65a:	2300      	movs	r3, #0
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3708      	adds	r7, #8
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c664:	b480      	push	{r7}
 800c666:	b085      	sub	sp, #20
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	460b      	mov	r3, r1
 800c66e:	70fb      	strb	r3, [r7, #3]
 800c670:	4613      	mov	r3, r2
 800c672:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c67a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c67c:	78fb      	ldrb	r3, [r7, #3]
 800c67e:	68fa      	ldr	r2, [r7, #12]
 800c680:	212c      	movs	r1, #44	; 0x2c
 800c682:	fb01 f303 	mul.w	r3, r1, r3
 800c686:	4413      	add	r3, r2
 800c688:	333b      	adds	r3, #59	; 0x3b
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d009      	beq.n	800c6a4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c690:	78fb      	ldrb	r3, [r7, #3]
 800c692:	68fa      	ldr	r2, [r7, #12]
 800c694:	212c      	movs	r1, #44	; 0x2c
 800c696:	fb01 f303 	mul.w	r3, r1, r3
 800c69a:	4413      	add	r3, r2
 800c69c:	3354      	adds	r3, #84	; 0x54
 800c69e:	78ba      	ldrb	r2, [r7, #2]
 800c6a0:	701a      	strb	r2, [r3, #0]
 800c6a2:	e008      	b.n	800c6b6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c6a4:	78fb      	ldrb	r3, [r7, #3]
 800c6a6:	68fa      	ldr	r2, [r7, #12]
 800c6a8:	212c      	movs	r1, #44	; 0x2c
 800c6aa:	fb01 f303 	mul.w	r3, r1, r3
 800c6ae:	4413      	add	r3, r2
 800c6b0:	3355      	adds	r3, #85	; 0x55
 800c6b2:	78ba      	ldrb	r2, [r7, #2]
 800c6b4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c6b6:	2300      	movs	r3, #0
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	3714      	adds	r7, #20
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr

0800c6c4 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b085      	sub	sp, #20
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	460b      	mov	r3, r1
 800c6ce:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c6da:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800c6dc:	78fb      	ldrb	r3, [r7, #3]
 800c6de:	68ba      	ldr	r2, [r7, #8]
 800c6e0:	212c      	movs	r1, #44	; 0x2c
 800c6e2:	fb01 f303 	mul.w	r3, r1, r3
 800c6e6:	4413      	add	r3, r2
 800c6e8:	333b      	adds	r3, #59	; 0x3b
 800c6ea:	781b      	ldrb	r3, [r3, #0]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d009      	beq.n	800c704 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800c6f0:	78fb      	ldrb	r3, [r7, #3]
 800c6f2:	68ba      	ldr	r2, [r7, #8]
 800c6f4:	212c      	movs	r1, #44	; 0x2c
 800c6f6:	fb01 f303 	mul.w	r3, r1, r3
 800c6fa:	4413      	add	r3, r2
 800c6fc:	3354      	adds	r3, #84	; 0x54
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	73fb      	strb	r3, [r7, #15]
 800c702:	e008      	b.n	800c716 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800c704:	78fb      	ldrb	r3, [r7, #3]
 800c706:	68ba      	ldr	r2, [r7, #8]
 800c708:	212c      	movs	r1, #44	; 0x2c
 800c70a:	fb01 f303 	mul.w	r3, r1, r3
 800c70e:	4413      	add	r3, r2
 800c710:	3355      	adds	r3, #85	; 0x55
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800c716:	7bfb      	ldrb	r3, [r7, #15]
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3714      	adds	r7, #20
 800c71c:	46bd      	mov	sp, r7
 800c71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c722:	4770      	bx	lr

0800c724 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b082      	sub	sp, #8
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f7f4 fe95 	bl	800145c <HAL_Delay>
}
 800c732:	bf00      	nop
 800c734:	3708      	adds	r7, #8
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}
	...

0800c73c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c73c:	b480      	push	{r7}
 800c73e:	b085      	sub	sp, #20
 800c740:	af00      	add	r7, sp, #0
 800c742:	4603      	mov	r3, r0
 800c744:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c746:	2300      	movs	r3, #0
 800c748:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c74a:	79fb      	ldrb	r3, [r7, #7]
 800c74c:	2b03      	cmp	r3, #3
 800c74e:	d817      	bhi.n	800c780 <USBH_Get_USB_Status+0x44>
 800c750:	a201      	add	r2, pc, #4	; (adr r2, 800c758 <USBH_Get_USB_Status+0x1c>)
 800c752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c756:	bf00      	nop
 800c758:	0800c769 	.word	0x0800c769
 800c75c:	0800c76f 	.word	0x0800c76f
 800c760:	0800c775 	.word	0x0800c775
 800c764:	0800c77b 	.word	0x0800c77b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c768:	2300      	movs	r3, #0
 800c76a:	73fb      	strb	r3, [r7, #15]
    break;
 800c76c:	e00b      	b.n	800c786 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c76e:	2302      	movs	r3, #2
 800c770:	73fb      	strb	r3, [r7, #15]
    break;
 800c772:	e008      	b.n	800c786 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c774:	2301      	movs	r3, #1
 800c776:	73fb      	strb	r3, [r7, #15]
    break;
 800c778:	e005      	b.n	800c786 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c77a:	2302      	movs	r3, #2
 800c77c:	73fb      	strb	r3, [r7, #15]
    break;
 800c77e:	e002      	b.n	800c786 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c780:	2302      	movs	r3, #2
 800c782:	73fb      	strb	r3, [r7, #15]
    break;
 800c784:	bf00      	nop
  }
  return usb_status;
 800c786:	7bfb      	ldrb	r3, [r7, #15]
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3714      	adds	r7, #20
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr

0800c794 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b084      	sub	sp, #16
 800c798:	af00      	add	r7, sp, #0
 800c79a:	4603      	mov	r3, r0
 800c79c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c79e:	79fb      	ldrb	r3, [r7, #7]
 800c7a0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c7a2:	79fb      	ldrb	r3, [r7, #7]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d102      	bne.n	800c7ae <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	73fb      	strb	r3, [r7, #15]
 800c7ac:	e001      	b.n	800c7b2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,(GPIO_PinState)data);
 800c7b2:	7bfb      	ldrb	r3, [r7, #15]
 800c7b4:	461a      	mov	r2, r3
 800c7b6:	2140      	movs	r1, #64	; 0x40
 800c7b8:	4803      	ldr	r0, [pc, #12]	; (800c7c8 <MX_DriverVbusFS+0x34>)
 800c7ba:	f7f5 f901 	bl	80019c0 <HAL_GPIO_WritePin>
}
 800c7be:	bf00      	nop
 800c7c0:	3710      	adds	r7, #16
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
 800c7c6:	bf00      	nop
 800c7c8:	40021800 	.word	0x40021800

0800c7cc <__errno>:
 800c7cc:	4b01      	ldr	r3, [pc, #4]	; (800c7d4 <__errno+0x8>)
 800c7ce:	6818      	ldr	r0, [r3, #0]
 800c7d0:	4770      	bx	lr
 800c7d2:	bf00      	nop
 800c7d4:	2000002c 	.word	0x2000002c

0800c7d8 <__libc_init_array>:
 800c7d8:	b570      	push	{r4, r5, r6, lr}
 800c7da:	4d0d      	ldr	r5, [pc, #52]	; (800c810 <__libc_init_array+0x38>)
 800c7dc:	4c0d      	ldr	r4, [pc, #52]	; (800c814 <__libc_init_array+0x3c>)
 800c7de:	1b64      	subs	r4, r4, r5
 800c7e0:	10a4      	asrs	r4, r4, #2
 800c7e2:	2600      	movs	r6, #0
 800c7e4:	42a6      	cmp	r6, r4
 800c7e6:	d109      	bne.n	800c7fc <__libc_init_array+0x24>
 800c7e8:	4d0b      	ldr	r5, [pc, #44]	; (800c818 <__libc_init_array+0x40>)
 800c7ea:	4c0c      	ldr	r4, [pc, #48]	; (800c81c <__libc_init_array+0x44>)
 800c7ec:	f001 f85c 	bl	800d8a8 <_init>
 800c7f0:	1b64      	subs	r4, r4, r5
 800c7f2:	10a4      	asrs	r4, r4, #2
 800c7f4:	2600      	movs	r6, #0
 800c7f6:	42a6      	cmp	r6, r4
 800c7f8:	d105      	bne.n	800c806 <__libc_init_array+0x2e>
 800c7fa:	bd70      	pop	{r4, r5, r6, pc}
 800c7fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c800:	4798      	blx	r3
 800c802:	3601      	adds	r6, #1
 800c804:	e7ee      	b.n	800c7e4 <__libc_init_array+0xc>
 800c806:	f855 3b04 	ldr.w	r3, [r5], #4
 800c80a:	4798      	blx	r3
 800c80c:	3601      	adds	r6, #1
 800c80e:	e7f2      	b.n	800c7f6 <__libc_init_array+0x1e>
 800c810:	0800e05c 	.word	0x0800e05c
 800c814:	0800e05c 	.word	0x0800e05c
 800c818:	0800e05c 	.word	0x0800e05c
 800c81c:	0800e060 	.word	0x0800e060

0800c820 <malloc>:
 800c820:	4b02      	ldr	r3, [pc, #8]	; (800c82c <malloc+0xc>)
 800c822:	4601      	mov	r1, r0
 800c824:	6818      	ldr	r0, [r3, #0]
 800c826:	f000 b871 	b.w	800c90c <_malloc_r>
 800c82a:	bf00      	nop
 800c82c:	2000002c 	.word	0x2000002c

0800c830 <free>:
 800c830:	4b02      	ldr	r3, [pc, #8]	; (800c83c <free+0xc>)
 800c832:	4601      	mov	r1, r0
 800c834:	6818      	ldr	r0, [r3, #0]
 800c836:	f000 b819 	b.w	800c86c <_free_r>
 800c83a:	bf00      	nop
 800c83c:	2000002c 	.word	0x2000002c

0800c840 <memcpy>:
 800c840:	440a      	add	r2, r1
 800c842:	4291      	cmp	r1, r2
 800c844:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c848:	d100      	bne.n	800c84c <memcpy+0xc>
 800c84a:	4770      	bx	lr
 800c84c:	b510      	push	{r4, lr}
 800c84e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c852:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c856:	4291      	cmp	r1, r2
 800c858:	d1f9      	bne.n	800c84e <memcpy+0xe>
 800c85a:	bd10      	pop	{r4, pc}

0800c85c <memset>:
 800c85c:	4402      	add	r2, r0
 800c85e:	4603      	mov	r3, r0
 800c860:	4293      	cmp	r3, r2
 800c862:	d100      	bne.n	800c866 <memset+0xa>
 800c864:	4770      	bx	lr
 800c866:	f803 1b01 	strb.w	r1, [r3], #1
 800c86a:	e7f9      	b.n	800c860 <memset+0x4>

0800c86c <_free_r>:
 800c86c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c86e:	2900      	cmp	r1, #0
 800c870:	d048      	beq.n	800c904 <_free_r+0x98>
 800c872:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c876:	9001      	str	r0, [sp, #4]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	f1a1 0404 	sub.w	r4, r1, #4
 800c87e:	bfb8      	it	lt
 800c880:	18e4      	addlt	r4, r4, r3
 800c882:	f000 fc21 	bl	800d0c8 <__malloc_lock>
 800c886:	4a20      	ldr	r2, [pc, #128]	; (800c908 <_free_r+0x9c>)
 800c888:	9801      	ldr	r0, [sp, #4]
 800c88a:	6813      	ldr	r3, [r2, #0]
 800c88c:	4615      	mov	r5, r2
 800c88e:	b933      	cbnz	r3, 800c89e <_free_r+0x32>
 800c890:	6063      	str	r3, [r4, #4]
 800c892:	6014      	str	r4, [r2, #0]
 800c894:	b003      	add	sp, #12
 800c896:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c89a:	f000 bc1b 	b.w	800d0d4 <__malloc_unlock>
 800c89e:	42a3      	cmp	r3, r4
 800c8a0:	d90b      	bls.n	800c8ba <_free_r+0x4e>
 800c8a2:	6821      	ldr	r1, [r4, #0]
 800c8a4:	1862      	adds	r2, r4, r1
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	bf04      	itt	eq
 800c8aa:	681a      	ldreq	r2, [r3, #0]
 800c8ac:	685b      	ldreq	r3, [r3, #4]
 800c8ae:	6063      	str	r3, [r4, #4]
 800c8b0:	bf04      	itt	eq
 800c8b2:	1852      	addeq	r2, r2, r1
 800c8b4:	6022      	streq	r2, [r4, #0]
 800c8b6:	602c      	str	r4, [r5, #0]
 800c8b8:	e7ec      	b.n	800c894 <_free_r+0x28>
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	685b      	ldr	r3, [r3, #4]
 800c8be:	b10b      	cbz	r3, 800c8c4 <_free_r+0x58>
 800c8c0:	42a3      	cmp	r3, r4
 800c8c2:	d9fa      	bls.n	800c8ba <_free_r+0x4e>
 800c8c4:	6811      	ldr	r1, [r2, #0]
 800c8c6:	1855      	adds	r5, r2, r1
 800c8c8:	42a5      	cmp	r5, r4
 800c8ca:	d10b      	bne.n	800c8e4 <_free_r+0x78>
 800c8cc:	6824      	ldr	r4, [r4, #0]
 800c8ce:	4421      	add	r1, r4
 800c8d0:	1854      	adds	r4, r2, r1
 800c8d2:	42a3      	cmp	r3, r4
 800c8d4:	6011      	str	r1, [r2, #0]
 800c8d6:	d1dd      	bne.n	800c894 <_free_r+0x28>
 800c8d8:	681c      	ldr	r4, [r3, #0]
 800c8da:	685b      	ldr	r3, [r3, #4]
 800c8dc:	6053      	str	r3, [r2, #4]
 800c8de:	4421      	add	r1, r4
 800c8e0:	6011      	str	r1, [r2, #0]
 800c8e2:	e7d7      	b.n	800c894 <_free_r+0x28>
 800c8e4:	d902      	bls.n	800c8ec <_free_r+0x80>
 800c8e6:	230c      	movs	r3, #12
 800c8e8:	6003      	str	r3, [r0, #0]
 800c8ea:	e7d3      	b.n	800c894 <_free_r+0x28>
 800c8ec:	6825      	ldr	r5, [r4, #0]
 800c8ee:	1961      	adds	r1, r4, r5
 800c8f0:	428b      	cmp	r3, r1
 800c8f2:	bf04      	itt	eq
 800c8f4:	6819      	ldreq	r1, [r3, #0]
 800c8f6:	685b      	ldreq	r3, [r3, #4]
 800c8f8:	6063      	str	r3, [r4, #4]
 800c8fa:	bf04      	itt	eq
 800c8fc:	1949      	addeq	r1, r1, r5
 800c8fe:	6021      	streq	r1, [r4, #0]
 800c900:	6054      	str	r4, [r2, #4]
 800c902:	e7c7      	b.n	800c894 <_free_r+0x28>
 800c904:	b003      	add	sp, #12
 800c906:	bd30      	pop	{r4, r5, pc}
 800c908:	200000e8 	.word	0x200000e8

0800c90c <_malloc_r>:
 800c90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c90e:	1ccd      	adds	r5, r1, #3
 800c910:	f025 0503 	bic.w	r5, r5, #3
 800c914:	3508      	adds	r5, #8
 800c916:	2d0c      	cmp	r5, #12
 800c918:	bf38      	it	cc
 800c91a:	250c      	movcc	r5, #12
 800c91c:	2d00      	cmp	r5, #0
 800c91e:	4606      	mov	r6, r0
 800c920:	db01      	blt.n	800c926 <_malloc_r+0x1a>
 800c922:	42a9      	cmp	r1, r5
 800c924:	d903      	bls.n	800c92e <_malloc_r+0x22>
 800c926:	230c      	movs	r3, #12
 800c928:	6033      	str	r3, [r6, #0]
 800c92a:	2000      	movs	r0, #0
 800c92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c92e:	f000 fbcb 	bl	800d0c8 <__malloc_lock>
 800c932:	4921      	ldr	r1, [pc, #132]	; (800c9b8 <_malloc_r+0xac>)
 800c934:	680a      	ldr	r2, [r1, #0]
 800c936:	4614      	mov	r4, r2
 800c938:	b99c      	cbnz	r4, 800c962 <_malloc_r+0x56>
 800c93a:	4f20      	ldr	r7, [pc, #128]	; (800c9bc <_malloc_r+0xb0>)
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	b923      	cbnz	r3, 800c94a <_malloc_r+0x3e>
 800c940:	4621      	mov	r1, r4
 800c942:	4630      	mov	r0, r6
 800c944:	f000 f8b2 	bl	800caac <_sbrk_r>
 800c948:	6038      	str	r0, [r7, #0]
 800c94a:	4629      	mov	r1, r5
 800c94c:	4630      	mov	r0, r6
 800c94e:	f000 f8ad 	bl	800caac <_sbrk_r>
 800c952:	1c43      	adds	r3, r0, #1
 800c954:	d123      	bne.n	800c99e <_malloc_r+0x92>
 800c956:	230c      	movs	r3, #12
 800c958:	6033      	str	r3, [r6, #0]
 800c95a:	4630      	mov	r0, r6
 800c95c:	f000 fbba 	bl	800d0d4 <__malloc_unlock>
 800c960:	e7e3      	b.n	800c92a <_malloc_r+0x1e>
 800c962:	6823      	ldr	r3, [r4, #0]
 800c964:	1b5b      	subs	r3, r3, r5
 800c966:	d417      	bmi.n	800c998 <_malloc_r+0x8c>
 800c968:	2b0b      	cmp	r3, #11
 800c96a:	d903      	bls.n	800c974 <_malloc_r+0x68>
 800c96c:	6023      	str	r3, [r4, #0]
 800c96e:	441c      	add	r4, r3
 800c970:	6025      	str	r5, [r4, #0]
 800c972:	e004      	b.n	800c97e <_malloc_r+0x72>
 800c974:	6863      	ldr	r3, [r4, #4]
 800c976:	42a2      	cmp	r2, r4
 800c978:	bf0c      	ite	eq
 800c97a:	600b      	streq	r3, [r1, #0]
 800c97c:	6053      	strne	r3, [r2, #4]
 800c97e:	4630      	mov	r0, r6
 800c980:	f000 fba8 	bl	800d0d4 <__malloc_unlock>
 800c984:	f104 000b 	add.w	r0, r4, #11
 800c988:	1d23      	adds	r3, r4, #4
 800c98a:	f020 0007 	bic.w	r0, r0, #7
 800c98e:	1ac2      	subs	r2, r0, r3
 800c990:	d0cc      	beq.n	800c92c <_malloc_r+0x20>
 800c992:	1a1b      	subs	r3, r3, r0
 800c994:	50a3      	str	r3, [r4, r2]
 800c996:	e7c9      	b.n	800c92c <_malloc_r+0x20>
 800c998:	4622      	mov	r2, r4
 800c99a:	6864      	ldr	r4, [r4, #4]
 800c99c:	e7cc      	b.n	800c938 <_malloc_r+0x2c>
 800c99e:	1cc4      	adds	r4, r0, #3
 800c9a0:	f024 0403 	bic.w	r4, r4, #3
 800c9a4:	42a0      	cmp	r0, r4
 800c9a6:	d0e3      	beq.n	800c970 <_malloc_r+0x64>
 800c9a8:	1a21      	subs	r1, r4, r0
 800c9aa:	4630      	mov	r0, r6
 800c9ac:	f000 f87e 	bl	800caac <_sbrk_r>
 800c9b0:	3001      	adds	r0, #1
 800c9b2:	d1dd      	bne.n	800c970 <_malloc_r+0x64>
 800c9b4:	e7cf      	b.n	800c956 <_malloc_r+0x4a>
 800c9b6:	bf00      	nop
 800c9b8:	200000e8 	.word	0x200000e8
 800c9bc:	200000ec 	.word	0x200000ec

0800c9c0 <_puts_r>:
 800c9c0:	b570      	push	{r4, r5, r6, lr}
 800c9c2:	460e      	mov	r6, r1
 800c9c4:	4605      	mov	r5, r0
 800c9c6:	b118      	cbz	r0, 800c9d0 <_puts_r+0x10>
 800c9c8:	6983      	ldr	r3, [r0, #24]
 800c9ca:	b90b      	cbnz	r3, 800c9d0 <_puts_r+0x10>
 800c9cc:	f000 fa78 	bl	800cec0 <__sinit>
 800c9d0:	69ab      	ldr	r3, [r5, #24]
 800c9d2:	68ac      	ldr	r4, [r5, #8]
 800c9d4:	b913      	cbnz	r3, 800c9dc <_puts_r+0x1c>
 800c9d6:	4628      	mov	r0, r5
 800c9d8:	f000 fa72 	bl	800cec0 <__sinit>
 800c9dc:	4b2c      	ldr	r3, [pc, #176]	; (800ca90 <_puts_r+0xd0>)
 800c9de:	429c      	cmp	r4, r3
 800c9e0:	d120      	bne.n	800ca24 <_puts_r+0x64>
 800c9e2:	686c      	ldr	r4, [r5, #4]
 800c9e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9e6:	07db      	lsls	r3, r3, #31
 800c9e8:	d405      	bmi.n	800c9f6 <_puts_r+0x36>
 800c9ea:	89a3      	ldrh	r3, [r4, #12]
 800c9ec:	0598      	lsls	r0, r3, #22
 800c9ee:	d402      	bmi.n	800c9f6 <_puts_r+0x36>
 800c9f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9f2:	f000 fb03 	bl	800cffc <__retarget_lock_acquire_recursive>
 800c9f6:	89a3      	ldrh	r3, [r4, #12]
 800c9f8:	0719      	lsls	r1, r3, #28
 800c9fa:	d51d      	bpl.n	800ca38 <_puts_r+0x78>
 800c9fc:	6923      	ldr	r3, [r4, #16]
 800c9fe:	b1db      	cbz	r3, 800ca38 <_puts_r+0x78>
 800ca00:	3e01      	subs	r6, #1
 800ca02:	68a3      	ldr	r3, [r4, #8]
 800ca04:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ca08:	3b01      	subs	r3, #1
 800ca0a:	60a3      	str	r3, [r4, #8]
 800ca0c:	bb39      	cbnz	r1, 800ca5e <_puts_r+0x9e>
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	da38      	bge.n	800ca84 <_puts_r+0xc4>
 800ca12:	4622      	mov	r2, r4
 800ca14:	210a      	movs	r1, #10
 800ca16:	4628      	mov	r0, r5
 800ca18:	f000 f878 	bl	800cb0c <__swbuf_r>
 800ca1c:	3001      	adds	r0, #1
 800ca1e:	d011      	beq.n	800ca44 <_puts_r+0x84>
 800ca20:	250a      	movs	r5, #10
 800ca22:	e011      	b.n	800ca48 <_puts_r+0x88>
 800ca24:	4b1b      	ldr	r3, [pc, #108]	; (800ca94 <_puts_r+0xd4>)
 800ca26:	429c      	cmp	r4, r3
 800ca28:	d101      	bne.n	800ca2e <_puts_r+0x6e>
 800ca2a:	68ac      	ldr	r4, [r5, #8]
 800ca2c:	e7da      	b.n	800c9e4 <_puts_r+0x24>
 800ca2e:	4b1a      	ldr	r3, [pc, #104]	; (800ca98 <_puts_r+0xd8>)
 800ca30:	429c      	cmp	r4, r3
 800ca32:	bf08      	it	eq
 800ca34:	68ec      	ldreq	r4, [r5, #12]
 800ca36:	e7d5      	b.n	800c9e4 <_puts_r+0x24>
 800ca38:	4621      	mov	r1, r4
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	f000 f8b8 	bl	800cbb0 <__swsetup_r>
 800ca40:	2800      	cmp	r0, #0
 800ca42:	d0dd      	beq.n	800ca00 <_puts_r+0x40>
 800ca44:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ca48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca4a:	07da      	lsls	r2, r3, #31
 800ca4c:	d405      	bmi.n	800ca5a <_puts_r+0x9a>
 800ca4e:	89a3      	ldrh	r3, [r4, #12]
 800ca50:	059b      	lsls	r3, r3, #22
 800ca52:	d402      	bmi.n	800ca5a <_puts_r+0x9a>
 800ca54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca56:	f000 fad2 	bl	800cffe <__retarget_lock_release_recursive>
 800ca5a:	4628      	mov	r0, r5
 800ca5c:	bd70      	pop	{r4, r5, r6, pc}
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	da04      	bge.n	800ca6c <_puts_r+0xac>
 800ca62:	69a2      	ldr	r2, [r4, #24]
 800ca64:	429a      	cmp	r2, r3
 800ca66:	dc06      	bgt.n	800ca76 <_puts_r+0xb6>
 800ca68:	290a      	cmp	r1, #10
 800ca6a:	d004      	beq.n	800ca76 <_puts_r+0xb6>
 800ca6c:	6823      	ldr	r3, [r4, #0]
 800ca6e:	1c5a      	adds	r2, r3, #1
 800ca70:	6022      	str	r2, [r4, #0]
 800ca72:	7019      	strb	r1, [r3, #0]
 800ca74:	e7c5      	b.n	800ca02 <_puts_r+0x42>
 800ca76:	4622      	mov	r2, r4
 800ca78:	4628      	mov	r0, r5
 800ca7a:	f000 f847 	bl	800cb0c <__swbuf_r>
 800ca7e:	3001      	adds	r0, #1
 800ca80:	d1bf      	bne.n	800ca02 <_puts_r+0x42>
 800ca82:	e7df      	b.n	800ca44 <_puts_r+0x84>
 800ca84:	6823      	ldr	r3, [r4, #0]
 800ca86:	250a      	movs	r5, #10
 800ca88:	1c5a      	adds	r2, r3, #1
 800ca8a:	6022      	str	r2, [r4, #0]
 800ca8c:	701d      	strb	r5, [r3, #0]
 800ca8e:	e7db      	b.n	800ca48 <_puts_r+0x88>
 800ca90:	0800dfe0 	.word	0x0800dfe0
 800ca94:	0800e000 	.word	0x0800e000
 800ca98:	0800dfc0 	.word	0x0800dfc0

0800ca9c <puts>:
 800ca9c:	4b02      	ldr	r3, [pc, #8]	; (800caa8 <puts+0xc>)
 800ca9e:	4601      	mov	r1, r0
 800caa0:	6818      	ldr	r0, [r3, #0]
 800caa2:	f7ff bf8d 	b.w	800c9c0 <_puts_r>
 800caa6:	bf00      	nop
 800caa8:	2000002c 	.word	0x2000002c

0800caac <_sbrk_r>:
 800caac:	b538      	push	{r3, r4, r5, lr}
 800caae:	4d06      	ldr	r5, [pc, #24]	; (800cac8 <_sbrk_r+0x1c>)
 800cab0:	2300      	movs	r3, #0
 800cab2:	4604      	mov	r4, r0
 800cab4:	4608      	mov	r0, r1
 800cab6:	602b      	str	r3, [r5, #0]
 800cab8:	f7f4 fc32 	bl	8001320 <_sbrk>
 800cabc:	1c43      	adds	r3, r0, #1
 800cabe:	d102      	bne.n	800cac6 <_sbrk_r+0x1a>
 800cac0:	682b      	ldr	r3, [r5, #0]
 800cac2:	b103      	cbz	r3, 800cac6 <_sbrk_r+0x1a>
 800cac4:	6023      	str	r3, [r4, #0]
 800cac6:	bd38      	pop	{r3, r4, r5, pc}
 800cac8:	2000294c 	.word	0x2000294c

0800cacc <siprintf>:
 800cacc:	b40e      	push	{r1, r2, r3}
 800cace:	b500      	push	{lr}
 800cad0:	b09c      	sub	sp, #112	; 0x70
 800cad2:	ab1d      	add	r3, sp, #116	; 0x74
 800cad4:	9002      	str	r0, [sp, #8]
 800cad6:	9006      	str	r0, [sp, #24]
 800cad8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cadc:	4809      	ldr	r0, [pc, #36]	; (800cb04 <siprintf+0x38>)
 800cade:	9107      	str	r1, [sp, #28]
 800cae0:	9104      	str	r1, [sp, #16]
 800cae2:	4909      	ldr	r1, [pc, #36]	; (800cb08 <siprintf+0x3c>)
 800cae4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cae8:	9105      	str	r1, [sp, #20]
 800caea:	6800      	ldr	r0, [r0, #0]
 800caec:	9301      	str	r3, [sp, #4]
 800caee:	a902      	add	r1, sp, #8
 800caf0:	f000 fb52 	bl	800d198 <_svfiprintf_r>
 800caf4:	9b02      	ldr	r3, [sp, #8]
 800caf6:	2200      	movs	r2, #0
 800caf8:	701a      	strb	r2, [r3, #0]
 800cafa:	b01c      	add	sp, #112	; 0x70
 800cafc:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb00:	b003      	add	sp, #12
 800cb02:	4770      	bx	lr
 800cb04:	2000002c 	.word	0x2000002c
 800cb08:	ffff0208 	.word	0xffff0208

0800cb0c <__swbuf_r>:
 800cb0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb0e:	460e      	mov	r6, r1
 800cb10:	4614      	mov	r4, r2
 800cb12:	4605      	mov	r5, r0
 800cb14:	b118      	cbz	r0, 800cb1e <__swbuf_r+0x12>
 800cb16:	6983      	ldr	r3, [r0, #24]
 800cb18:	b90b      	cbnz	r3, 800cb1e <__swbuf_r+0x12>
 800cb1a:	f000 f9d1 	bl	800cec0 <__sinit>
 800cb1e:	4b21      	ldr	r3, [pc, #132]	; (800cba4 <__swbuf_r+0x98>)
 800cb20:	429c      	cmp	r4, r3
 800cb22:	d12b      	bne.n	800cb7c <__swbuf_r+0x70>
 800cb24:	686c      	ldr	r4, [r5, #4]
 800cb26:	69a3      	ldr	r3, [r4, #24]
 800cb28:	60a3      	str	r3, [r4, #8]
 800cb2a:	89a3      	ldrh	r3, [r4, #12]
 800cb2c:	071a      	lsls	r2, r3, #28
 800cb2e:	d52f      	bpl.n	800cb90 <__swbuf_r+0x84>
 800cb30:	6923      	ldr	r3, [r4, #16]
 800cb32:	b36b      	cbz	r3, 800cb90 <__swbuf_r+0x84>
 800cb34:	6923      	ldr	r3, [r4, #16]
 800cb36:	6820      	ldr	r0, [r4, #0]
 800cb38:	1ac0      	subs	r0, r0, r3
 800cb3a:	6963      	ldr	r3, [r4, #20]
 800cb3c:	b2f6      	uxtb	r6, r6
 800cb3e:	4283      	cmp	r3, r0
 800cb40:	4637      	mov	r7, r6
 800cb42:	dc04      	bgt.n	800cb4e <__swbuf_r+0x42>
 800cb44:	4621      	mov	r1, r4
 800cb46:	4628      	mov	r0, r5
 800cb48:	f000 f926 	bl	800cd98 <_fflush_r>
 800cb4c:	bb30      	cbnz	r0, 800cb9c <__swbuf_r+0x90>
 800cb4e:	68a3      	ldr	r3, [r4, #8]
 800cb50:	3b01      	subs	r3, #1
 800cb52:	60a3      	str	r3, [r4, #8]
 800cb54:	6823      	ldr	r3, [r4, #0]
 800cb56:	1c5a      	adds	r2, r3, #1
 800cb58:	6022      	str	r2, [r4, #0]
 800cb5a:	701e      	strb	r6, [r3, #0]
 800cb5c:	6963      	ldr	r3, [r4, #20]
 800cb5e:	3001      	adds	r0, #1
 800cb60:	4283      	cmp	r3, r0
 800cb62:	d004      	beq.n	800cb6e <__swbuf_r+0x62>
 800cb64:	89a3      	ldrh	r3, [r4, #12]
 800cb66:	07db      	lsls	r3, r3, #31
 800cb68:	d506      	bpl.n	800cb78 <__swbuf_r+0x6c>
 800cb6a:	2e0a      	cmp	r6, #10
 800cb6c:	d104      	bne.n	800cb78 <__swbuf_r+0x6c>
 800cb6e:	4621      	mov	r1, r4
 800cb70:	4628      	mov	r0, r5
 800cb72:	f000 f911 	bl	800cd98 <_fflush_r>
 800cb76:	b988      	cbnz	r0, 800cb9c <__swbuf_r+0x90>
 800cb78:	4638      	mov	r0, r7
 800cb7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb7c:	4b0a      	ldr	r3, [pc, #40]	; (800cba8 <__swbuf_r+0x9c>)
 800cb7e:	429c      	cmp	r4, r3
 800cb80:	d101      	bne.n	800cb86 <__swbuf_r+0x7a>
 800cb82:	68ac      	ldr	r4, [r5, #8]
 800cb84:	e7cf      	b.n	800cb26 <__swbuf_r+0x1a>
 800cb86:	4b09      	ldr	r3, [pc, #36]	; (800cbac <__swbuf_r+0xa0>)
 800cb88:	429c      	cmp	r4, r3
 800cb8a:	bf08      	it	eq
 800cb8c:	68ec      	ldreq	r4, [r5, #12]
 800cb8e:	e7ca      	b.n	800cb26 <__swbuf_r+0x1a>
 800cb90:	4621      	mov	r1, r4
 800cb92:	4628      	mov	r0, r5
 800cb94:	f000 f80c 	bl	800cbb0 <__swsetup_r>
 800cb98:	2800      	cmp	r0, #0
 800cb9a:	d0cb      	beq.n	800cb34 <__swbuf_r+0x28>
 800cb9c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800cba0:	e7ea      	b.n	800cb78 <__swbuf_r+0x6c>
 800cba2:	bf00      	nop
 800cba4:	0800dfe0 	.word	0x0800dfe0
 800cba8:	0800e000 	.word	0x0800e000
 800cbac:	0800dfc0 	.word	0x0800dfc0

0800cbb0 <__swsetup_r>:
 800cbb0:	4b32      	ldr	r3, [pc, #200]	; (800cc7c <__swsetup_r+0xcc>)
 800cbb2:	b570      	push	{r4, r5, r6, lr}
 800cbb4:	681d      	ldr	r5, [r3, #0]
 800cbb6:	4606      	mov	r6, r0
 800cbb8:	460c      	mov	r4, r1
 800cbba:	b125      	cbz	r5, 800cbc6 <__swsetup_r+0x16>
 800cbbc:	69ab      	ldr	r3, [r5, #24]
 800cbbe:	b913      	cbnz	r3, 800cbc6 <__swsetup_r+0x16>
 800cbc0:	4628      	mov	r0, r5
 800cbc2:	f000 f97d 	bl	800cec0 <__sinit>
 800cbc6:	4b2e      	ldr	r3, [pc, #184]	; (800cc80 <__swsetup_r+0xd0>)
 800cbc8:	429c      	cmp	r4, r3
 800cbca:	d10f      	bne.n	800cbec <__swsetup_r+0x3c>
 800cbcc:	686c      	ldr	r4, [r5, #4]
 800cbce:	89a3      	ldrh	r3, [r4, #12]
 800cbd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cbd4:	0719      	lsls	r1, r3, #28
 800cbd6:	d42c      	bmi.n	800cc32 <__swsetup_r+0x82>
 800cbd8:	06dd      	lsls	r5, r3, #27
 800cbda:	d411      	bmi.n	800cc00 <__swsetup_r+0x50>
 800cbdc:	2309      	movs	r3, #9
 800cbde:	6033      	str	r3, [r6, #0]
 800cbe0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cbe4:	81a3      	strh	r3, [r4, #12]
 800cbe6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbea:	e03e      	b.n	800cc6a <__swsetup_r+0xba>
 800cbec:	4b25      	ldr	r3, [pc, #148]	; (800cc84 <__swsetup_r+0xd4>)
 800cbee:	429c      	cmp	r4, r3
 800cbf0:	d101      	bne.n	800cbf6 <__swsetup_r+0x46>
 800cbf2:	68ac      	ldr	r4, [r5, #8]
 800cbf4:	e7eb      	b.n	800cbce <__swsetup_r+0x1e>
 800cbf6:	4b24      	ldr	r3, [pc, #144]	; (800cc88 <__swsetup_r+0xd8>)
 800cbf8:	429c      	cmp	r4, r3
 800cbfa:	bf08      	it	eq
 800cbfc:	68ec      	ldreq	r4, [r5, #12]
 800cbfe:	e7e6      	b.n	800cbce <__swsetup_r+0x1e>
 800cc00:	0758      	lsls	r0, r3, #29
 800cc02:	d512      	bpl.n	800cc2a <__swsetup_r+0x7a>
 800cc04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc06:	b141      	cbz	r1, 800cc1a <__swsetup_r+0x6a>
 800cc08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc0c:	4299      	cmp	r1, r3
 800cc0e:	d002      	beq.n	800cc16 <__swsetup_r+0x66>
 800cc10:	4630      	mov	r0, r6
 800cc12:	f7ff fe2b 	bl	800c86c <_free_r>
 800cc16:	2300      	movs	r3, #0
 800cc18:	6363      	str	r3, [r4, #52]	; 0x34
 800cc1a:	89a3      	ldrh	r3, [r4, #12]
 800cc1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cc20:	81a3      	strh	r3, [r4, #12]
 800cc22:	2300      	movs	r3, #0
 800cc24:	6063      	str	r3, [r4, #4]
 800cc26:	6923      	ldr	r3, [r4, #16]
 800cc28:	6023      	str	r3, [r4, #0]
 800cc2a:	89a3      	ldrh	r3, [r4, #12]
 800cc2c:	f043 0308 	orr.w	r3, r3, #8
 800cc30:	81a3      	strh	r3, [r4, #12]
 800cc32:	6923      	ldr	r3, [r4, #16]
 800cc34:	b94b      	cbnz	r3, 800cc4a <__swsetup_r+0x9a>
 800cc36:	89a3      	ldrh	r3, [r4, #12]
 800cc38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cc3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc40:	d003      	beq.n	800cc4a <__swsetup_r+0x9a>
 800cc42:	4621      	mov	r1, r4
 800cc44:	4630      	mov	r0, r6
 800cc46:	f000 f9ff 	bl	800d048 <__smakebuf_r>
 800cc4a:	89a0      	ldrh	r0, [r4, #12]
 800cc4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc50:	f010 0301 	ands.w	r3, r0, #1
 800cc54:	d00a      	beq.n	800cc6c <__swsetup_r+0xbc>
 800cc56:	2300      	movs	r3, #0
 800cc58:	60a3      	str	r3, [r4, #8]
 800cc5a:	6963      	ldr	r3, [r4, #20]
 800cc5c:	425b      	negs	r3, r3
 800cc5e:	61a3      	str	r3, [r4, #24]
 800cc60:	6923      	ldr	r3, [r4, #16]
 800cc62:	b943      	cbnz	r3, 800cc76 <__swsetup_r+0xc6>
 800cc64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cc68:	d1ba      	bne.n	800cbe0 <__swsetup_r+0x30>
 800cc6a:	bd70      	pop	{r4, r5, r6, pc}
 800cc6c:	0781      	lsls	r1, r0, #30
 800cc6e:	bf58      	it	pl
 800cc70:	6963      	ldrpl	r3, [r4, #20]
 800cc72:	60a3      	str	r3, [r4, #8]
 800cc74:	e7f4      	b.n	800cc60 <__swsetup_r+0xb0>
 800cc76:	2000      	movs	r0, #0
 800cc78:	e7f7      	b.n	800cc6a <__swsetup_r+0xba>
 800cc7a:	bf00      	nop
 800cc7c:	2000002c 	.word	0x2000002c
 800cc80:	0800dfe0 	.word	0x0800dfe0
 800cc84:	0800e000 	.word	0x0800e000
 800cc88:	0800dfc0 	.word	0x0800dfc0

0800cc8c <__sflush_r>:
 800cc8c:	898a      	ldrh	r2, [r1, #12]
 800cc8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc92:	4605      	mov	r5, r0
 800cc94:	0710      	lsls	r0, r2, #28
 800cc96:	460c      	mov	r4, r1
 800cc98:	d458      	bmi.n	800cd4c <__sflush_r+0xc0>
 800cc9a:	684b      	ldr	r3, [r1, #4]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	dc05      	bgt.n	800ccac <__sflush_r+0x20>
 800cca0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	dc02      	bgt.n	800ccac <__sflush_r+0x20>
 800cca6:	2000      	movs	r0, #0
 800cca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ccae:	2e00      	cmp	r6, #0
 800ccb0:	d0f9      	beq.n	800cca6 <__sflush_r+0x1a>
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ccb8:	682f      	ldr	r7, [r5, #0]
 800ccba:	602b      	str	r3, [r5, #0]
 800ccbc:	d032      	beq.n	800cd24 <__sflush_r+0x98>
 800ccbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ccc0:	89a3      	ldrh	r3, [r4, #12]
 800ccc2:	075a      	lsls	r2, r3, #29
 800ccc4:	d505      	bpl.n	800ccd2 <__sflush_r+0x46>
 800ccc6:	6863      	ldr	r3, [r4, #4]
 800ccc8:	1ac0      	subs	r0, r0, r3
 800ccca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cccc:	b10b      	cbz	r3, 800ccd2 <__sflush_r+0x46>
 800ccce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ccd0:	1ac0      	subs	r0, r0, r3
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ccd8:	6a21      	ldr	r1, [r4, #32]
 800ccda:	4628      	mov	r0, r5
 800ccdc:	47b0      	blx	r6
 800ccde:	1c43      	adds	r3, r0, #1
 800cce0:	89a3      	ldrh	r3, [r4, #12]
 800cce2:	d106      	bne.n	800ccf2 <__sflush_r+0x66>
 800cce4:	6829      	ldr	r1, [r5, #0]
 800cce6:	291d      	cmp	r1, #29
 800cce8:	d82c      	bhi.n	800cd44 <__sflush_r+0xb8>
 800ccea:	4a2a      	ldr	r2, [pc, #168]	; (800cd94 <__sflush_r+0x108>)
 800ccec:	40ca      	lsrs	r2, r1
 800ccee:	07d6      	lsls	r6, r2, #31
 800ccf0:	d528      	bpl.n	800cd44 <__sflush_r+0xb8>
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	6062      	str	r2, [r4, #4]
 800ccf6:	04d9      	lsls	r1, r3, #19
 800ccf8:	6922      	ldr	r2, [r4, #16]
 800ccfa:	6022      	str	r2, [r4, #0]
 800ccfc:	d504      	bpl.n	800cd08 <__sflush_r+0x7c>
 800ccfe:	1c42      	adds	r2, r0, #1
 800cd00:	d101      	bne.n	800cd06 <__sflush_r+0x7a>
 800cd02:	682b      	ldr	r3, [r5, #0]
 800cd04:	b903      	cbnz	r3, 800cd08 <__sflush_r+0x7c>
 800cd06:	6560      	str	r0, [r4, #84]	; 0x54
 800cd08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd0a:	602f      	str	r7, [r5, #0]
 800cd0c:	2900      	cmp	r1, #0
 800cd0e:	d0ca      	beq.n	800cca6 <__sflush_r+0x1a>
 800cd10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd14:	4299      	cmp	r1, r3
 800cd16:	d002      	beq.n	800cd1e <__sflush_r+0x92>
 800cd18:	4628      	mov	r0, r5
 800cd1a:	f7ff fda7 	bl	800c86c <_free_r>
 800cd1e:	2000      	movs	r0, #0
 800cd20:	6360      	str	r0, [r4, #52]	; 0x34
 800cd22:	e7c1      	b.n	800cca8 <__sflush_r+0x1c>
 800cd24:	6a21      	ldr	r1, [r4, #32]
 800cd26:	2301      	movs	r3, #1
 800cd28:	4628      	mov	r0, r5
 800cd2a:	47b0      	blx	r6
 800cd2c:	1c41      	adds	r1, r0, #1
 800cd2e:	d1c7      	bne.n	800ccc0 <__sflush_r+0x34>
 800cd30:	682b      	ldr	r3, [r5, #0]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d0c4      	beq.n	800ccc0 <__sflush_r+0x34>
 800cd36:	2b1d      	cmp	r3, #29
 800cd38:	d001      	beq.n	800cd3e <__sflush_r+0xb2>
 800cd3a:	2b16      	cmp	r3, #22
 800cd3c:	d101      	bne.n	800cd42 <__sflush_r+0xb6>
 800cd3e:	602f      	str	r7, [r5, #0]
 800cd40:	e7b1      	b.n	800cca6 <__sflush_r+0x1a>
 800cd42:	89a3      	ldrh	r3, [r4, #12]
 800cd44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd48:	81a3      	strh	r3, [r4, #12]
 800cd4a:	e7ad      	b.n	800cca8 <__sflush_r+0x1c>
 800cd4c:	690f      	ldr	r7, [r1, #16]
 800cd4e:	2f00      	cmp	r7, #0
 800cd50:	d0a9      	beq.n	800cca6 <__sflush_r+0x1a>
 800cd52:	0793      	lsls	r3, r2, #30
 800cd54:	680e      	ldr	r6, [r1, #0]
 800cd56:	bf08      	it	eq
 800cd58:	694b      	ldreq	r3, [r1, #20]
 800cd5a:	600f      	str	r7, [r1, #0]
 800cd5c:	bf18      	it	ne
 800cd5e:	2300      	movne	r3, #0
 800cd60:	eba6 0807 	sub.w	r8, r6, r7
 800cd64:	608b      	str	r3, [r1, #8]
 800cd66:	f1b8 0f00 	cmp.w	r8, #0
 800cd6a:	dd9c      	ble.n	800cca6 <__sflush_r+0x1a>
 800cd6c:	6a21      	ldr	r1, [r4, #32]
 800cd6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cd70:	4643      	mov	r3, r8
 800cd72:	463a      	mov	r2, r7
 800cd74:	4628      	mov	r0, r5
 800cd76:	47b0      	blx	r6
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	dc06      	bgt.n	800cd8a <__sflush_r+0xfe>
 800cd7c:	89a3      	ldrh	r3, [r4, #12]
 800cd7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd82:	81a3      	strh	r3, [r4, #12]
 800cd84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd88:	e78e      	b.n	800cca8 <__sflush_r+0x1c>
 800cd8a:	4407      	add	r7, r0
 800cd8c:	eba8 0800 	sub.w	r8, r8, r0
 800cd90:	e7e9      	b.n	800cd66 <__sflush_r+0xda>
 800cd92:	bf00      	nop
 800cd94:	20400001 	.word	0x20400001

0800cd98 <_fflush_r>:
 800cd98:	b538      	push	{r3, r4, r5, lr}
 800cd9a:	690b      	ldr	r3, [r1, #16]
 800cd9c:	4605      	mov	r5, r0
 800cd9e:	460c      	mov	r4, r1
 800cda0:	b913      	cbnz	r3, 800cda8 <_fflush_r+0x10>
 800cda2:	2500      	movs	r5, #0
 800cda4:	4628      	mov	r0, r5
 800cda6:	bd38      	pop	{r3, r4, r5, pc}
 800cda8:	b118      	cbz	r0, 800cdb2 <_fflush_r+0x1a>
 800cdaa:	6983      	ldr	r3, [r0, #24]
 800cdac:	b90b      	cbnz	r3, 800cdb2 <_fflush_r+0x1a>
 800cdae:	f000 f887 	bl	800cec0 <__sinit>
 800cdb2:	4b14      	ldr	r3, [pc, #80]	; (800ce04 <_fflush_r+0x6c>)
 800cdb4:	429c      	cmp	r4, r3
 800cdb6:	d11b      	bne.n	800cdf0 <_fflush_r+0x58>
 800cdb8:	686c      	ldr	r4, [r5, #4]
 800cdba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d0ef      	beq.n	800cda2 <_fflush_r+0xa>
 800cdc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cdc4:	07d0      	lsls	r0, r2, #31
 800cdc6:	d404      	bmi.n	800cdd2 <_fflush_r+0x3a>
 800cdc8:	0599      	lsls	r1, r3, #22
 800cdca:	d402      	bmi.n	800cdd2 <_fflush_r+0x3a>
 800cdcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdce:	f000 f915 	bl	800cffc <__retarget_lock_acquire_recursive>
 800cdd2:	4628      	mov	r0, r5
 800cdd4:	4621      	mov	r1, r4
 800cdd6:	f7ff ff59 	bl	800cc8c <__sflush_r>
 800cdda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cddc:	07da      	lsls	r2, r3, #31
 800cdde:	4605      	mov	r5, r0
 800cde0:	d4e0      	bmi.n	800cda4 <_fflush_r+0xc>
 800cde2:	89a3      	ldrh	r3, [r4, #12]
 800cde4:	059b      	lsls	r3, r3, #22
 800cde6:	d4dd      	bmi.n	800cda4 <_fflush_r+0xc>
 800cde8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdea:	f000 f908 	bl	800cffe <__retarget_lock_release_recursive>
 800cdee:	e7d9      	b.n	800cda4 <_fflush_r+0xc>
 800cdf0:	4b05      	ldr	r3, [pc, #20]	; (800ce08 <_fflush_r+0x70>)
 800cdf2:	429c      	cmp	r4, r3
 800cdf4:	d101      	bne.n	800cdfa <_fflush_r+0x62>
 800cdf6:	68ac      	ldr	r4, [r5, #8]
 800cdf8:	e7df      	b.n	800cdba <_fflush_r+0x22>
 800cdfa:	4b04      	ldr	r3, [pc, #16]	; (800ce0c <_fflush_r+0x74>)
 800cdfc:	429c      	cmp	r4, r3
 800cdfe:	bf08      	it	eq
 800ce00:	68ec      	ldreq	r4, [r5, #12]
 800ce02:	e7da      	b.n	800cdba <_fflush_r+0x22>
 800ce04:	0800dfe0 	.word	0x0800dfe0
 800ce08:	0800e000 	.word	0x0800e000
 800ce0c:	0800dfc0 	.word	0x0800dfc0

0800ce10 <std>:
 800ce10:	2300      	movs	r3, #0
 800ce12:	b510      	push	{r4, lr}
 800ce14:	4604      	mov	r4, r0
 800ce16:	e9c0 3300 	strd	r3, r3, [r0]
 800ce1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce1e:	6083      	str	r3, [r0, #8]
 800ce20:	8181      	strh	r1, [r0, #12]
 800ce22:	6643      	str	r3, [r0, #100]	; 0x64
 800ce24:	81c2      	strh	r2, [r0, #14]
 800ce26:	6183      	str	r3, [r0, #24]
 800ce28:	4619      	mov	r1, r3
 800ce2a:	2208      	movs	r2, #8
 800ce2c:	305c      	adds	r0, #92	; 0x5c
 800ce2e:	f7ff fd15 	bl	800c85c <memset>
 800ce32:	4b05      	ldr	r3, [pc, #20]	; (800ce48 <std+0x38>)
 800ce34:	6263      	str	r3, [r4, #36]	; 0x24
 800ce36:	4b05      	ldr	r3, [pc, #20]	; (800ce4c <std+0x3c>)
 800ce38:	62a3      	str	r3, [r4, #40]	; 0x28
 800ce3a:	4b05      	ldr	r3, [pc, #20]	; (800ce50 <std+0x40>)
 800ce3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ce3e:	4b05      	ldr	r3, [pc, #20]	; (800ce54 <std+0x44>)
 800ce40:	6224      	str	r4, [r4, #32]
 800ce42:	6323      	str	r3, [r4, #48]	; 0x30
 800ce44:	bd10      	pop	{r4, pc}
 800ce46:	bf00      	nop
 800ce48:	0800d6c1 	.word	0x0800d6c1
 800ce4c:	0800d6e3 	.word	0x0800d6e3
 800ce50:	0800d71b 	.word	0x0800d71b
 800ce54:	0800d73f 	.word	0x0800d73f

0800ce58 <_cleanup_r>:
 800ce58:	4901      	ldr	r1, [pc, #4]	; (800ce60 <_cleanup_r+0x8>)
 800ce5a:	f000 b8af 	b.w	800cfbc <_fwalk_reent>
 800ce5e:	bf00      	nop
 800ce60:	0800cd99 	.word	0x0800cd99

0800ce64 <__sfmoreglue>:
 800ce64:	b570      	push	{r4, r5, r6, lr}
 800ce66:	1e4a      	subs	r2, r1, #1
 800ce68:	2568      	movs	r5, #104	; 0x68
 800ce6a:	4355      	muls	r5, r2
 800ce6c:	460e      	mov	r6, r1
 800ce6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ce72:	f7ff fd4b 	bl	800c90c <_malloc_r>
 800ce76:	4604      	mov	r4, r0
 800ce78:	b140      	cbz	r0, 800ce8c <__sfmoreglue+0x28>
 800ce7a:	2100      	movs	r1, #0
 800ce7c:	e9c0 1600 	strd	r1, r6, [r0]
 800ce80:	300c      	adds	r0, #12
 800ce82:	60a0      	str	r0, [r4, #8]
 800ce84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ce88:	f7ff fce8 	bl	800c85c <memset>
 800ce8c:	4620      	mov	r0, r4
 800ce8e:	bd70      	pop	{r4, r5, r6, pc}

0800ce90 <__sfp_lock_acquire>:
 800ce90:	4801      	ldr	r0, [pc, #4]	; (800ce98 <__sfp_lock_acquire+0x8>)
 800ce92:	f000 b8b3 	b.w	800cffc <__retarget_lock_acquire_recursive>
 800ce96:	bf00      	nop
 800ce98:	20002948 	.word	0x20002948

0800ce9c <__sfp_lock_release>:
 800ce9c:	4801      	ldr	r0, [pc, #4]	; (800cea4 <__sfp_lock_release+0x8>)
 800ce9e:	f000 b8ae 	b.w	800cffe <__retarget_lock_release_recursive>
 800cea2:	bf00      	nop
 800cea4:	20002948 	.word	0x20002948

0800cea8 <__sinit_lock_acquire>:
 800cea8:	4801      	ldr	r0, [pc, #4]	; (800ceb0 <__sinit_lock_acquire+0x8>)
 800ceaa:	f000 b8a7 	b.w	800cffc <__retarget_lock_acquire_recursive>
 800ceae:	bf00      	nop
 800ceb0:	20002943 	.word	0x20002943

0800ceb4 <__sinit_lock_release>:
 800ceb4:	4801      	ldr	r0, [pc, #4]	; (800cebc <__sinit_lock_release+0x8>)
 800ceb6:	f000 b8a2 	b.w	800cffe <__retarget_lock_release_recursive>
 800ceba:	bf00      	nop
 800cebc:	20002943 	.word	0x20002943

0800cec0 <__sinit>:
 800cec0:	b510      	push	{r4, lr}
 800cec2:	4604      	mov	r4, r0
 800cec4:	f7ff fff0 	bl	800cea8 <__sinit_lock_acquire>
 800cec8:	69a3      	ldr	r3, [r4, #24]
 800ceca:	b11b      	cbz	r3, 800ced4 <__sinit+0x14>
 800cecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ced0:	f7ff bff0 	b.w	800ceb4 <__sinit_lock_release>
 800ced4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ced8:	6523      	str	r3, [r4, #80]	; 0x50
 800ceda:	4b13      	ldr	r3, [pc, #76]	; (800cf28 <__sinit+0x68>)
 800cedc:	4a13      	ldr	r2, [pc, #76]	; (800cf2c <__sinit+0x6c>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	62a2      	str	r2, [r4, #40]	; 0x28
 800cee2:	42a3      	cmp	r3, r4
 800cee4:	bf04      	itt	eq
 800cee6:	2301      	moveq	r3, #1
 800cee8:	61a3      	streq	r3, [r4, #24]
 800ceea:	4620      	mov	r0, r4
 800ceec:	f000 f820 	bl	800cf30 <__sfp>
 800cef0:	6060      	str	r0, [r4, #4]
 800cef2:	4620      	mov	r0, r4
 800cef4:	f000 f81c 	bl	800cf30 <__sfp>
 800cef8:	60a0      	str	r0, [r4, #8]
 800cefa:	4620      	mov	r0, r4
 800cefc:	f000 f818 	bl	800cf30 <__sfp>
 800cf00:	2200      	movs	r2, #0
 800cf02:	60e0      	str	r0, [r4, #12]
 800cf04:	2104      	movs	r1, #4
 800cf06:	6860      	ldr	r0, [r4, #4]
 800cf08:	f7ff ff82 	bl	800ce10 <std>
 800cf0c:	68a0      	ldr	r0, [r4, #8]
 800cf0e:	2201      	movs	r2, #1
 800cf10:	2109      	movs	r1, #9
 800cf12:	f7ff ff7d 	bl	800ce10 <std>
 800cf16:	68e0      	ldr	r0, [r4, #12]
 800cf18:	2202      	movs	r2, #2
 800cf1a:	2112      	movs	r1, #18
 800cf1c:	f7ff ff78 	bl	800ce10 <std>
 800cf20:	2301      	movs	r3, #1
 800cf22:	61a3      	str	r3, [r4, #24]
 800cf24:	e7d2      	b.n	800cecc <__sinit+0xc>
 800cf26:	bf00      	nop
 800cf28:	0800dfbc 	.word	0x0800dfbc
 800cf2c:	0800ce59 	.word	0x0800ce59

0800cf30 <__sfp>:
 800cf30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf32:	4607      	mov	r7, r0
 800cf34:	f7ff ffac 	bl	800ce90 <__sfp_lock_acquire>
 800cf38:	4b1e      	ldr	r3, [pc, #120]	; (800cfb4 <__sfp+0x84>)
 800cf3a:	681e      	ldr	r6, [r3, #0]
 800cf3c:	69b3      	ldr	r3, [r6, #24]
 800cf3e:	b913      	cbnz	r3, 800cf46 <__sfp+0x16>
 800cf40:	4630      	mov	r0, r6
 800cf42:	f7ff ffbd 	bl	800cec0 <__sinit>
 800cf46:	3648      	adds	r6, #72	; 0x48
 800cf48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cf4c:	3b01      	subs	r3, #1
 800cf4e:	d503      	bpl.n	800cf58 <__sfp+0x28>
 800cf50:	6833      	ldr	r3, [r6, #0]
 800cf52:	b30b      	cbz	r3, 800cf98 <__sfp+0x68>
 800cf54:	6836      	ldr	r6, [r6, #0]
 800cf56:	e7f7      	b.n	800cf48 <__sfp+0x18>
 800cf58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cf5c:	b9d5      	cbnz	r5, 800cf94 <__sfp+0x64>
 800cf5e:	4b16      	ldr	r3, [pc, #88]	; (800cfb8 <__sfp+0x88>)
 800cf60:	60e3      	str	r3, [r4, #12]
 800cf62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cf66:	6665      	str	r5, [r4, #100]	; 0x64
 800cf68:	f000 f847 	bl	800cffa <__retarget_lock_init_recursive>
 800cf6c:	f7ff ff96 	bl	800ce9c <__sfp_lock_release>
 800cf70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cf74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cf78:	6025      	str	r5, [r4, #0]
 800cf7a:	61a5      	str	r5, [r4, #24]
 800cf7c:	2208      	movs	r2, #8
 800cf7e:	4629      	mov	r1, r5
 800cf80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cf84:	f7ff fc6a 	bl	800c85c <memset>
 800cf88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cf8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cf90:	4620      	mov	r0, r4
 800cf92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf94:	3468      	adds	r4, #104	; 0x68
 800cf96:	e7d9      	b.n	800cf4c <__sfp+0x1c>
 800cf98:	2104      	movs	r1, #4
 800cf9a:	4638      	mov	r0, r7
 800cf9c:	f7ff ff62 	bl	800ce64 <__sfmoreglue>
 800cfa0:	4604      	mov	r4, r0
 800cfa2:	6030      	str	r0, [r6, #0]
 800cfa4:	2800      	cmp	r0, #0
 800cfa6:	d1d5      	bne.n	800cf54 <__sfp+0x24>
 800cfa8:	f7ff ff78 	bl	800ce9c <__sfp_lock_release>
 800cfac:	230c      	movs	r3, #12
 800cfae:	603b      	str	r3, [r7, #0]
 800cfb0:	e7ee      	b.n	800cf90 <__sfp+0x60>
 800cfb2:	bf00      	nop
 800cfb4:	0800dfbc 	.word	0x0800dfbc
 800cfb8:	ffff0001 	.word	0xffff0001

0800cfbc <_fwalk_reent>:
 800cfbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfc0:	4606      	mov	r6, r0
 800cfc2:	4688      	mov	r8, r1
 800cfc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cfc8:	2700      	movs	r7, #0
 800cfca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cfce:	f1b9 0901 	subs.w	r9, r9, #1
 800cfd2:	d505      	bpl.n	800cfe0 <_fwalk_reent+0x24>
 800cfd4:	6824      	ldr	r4, [r4, #0]
 800cfd6:	2c00      	cmp	r4, #0
 800cfd8:	d1f7      	bne.n	800cfca <_fwalk_reent+0xe>
 800cfda:	4638      	mov	r0, r7
 800cfdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfe0:	89ab      	ldrh	r3, [r5, #12]
 800cfe2:	2b01      	cmp	r3, #1
 800cfe4:	d907      	bls.n	800cff6 <_fwalk_reent+0x3a>
 800cfe6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cfea:	3301      	adds	r3, #1
 800cfec:	d003      	beq.n	800cff6 <_fwalk_reent+0x3a>
 800cfee:	4629      	mov	r1, r5
 800cff0:	4630      	mov	r0, r6
 800cff2:	47c0      	blx	r8
 800cff4:	4307      	orrs	r7, r0
 800cff6:	3568      	adds	r5, #104	; 0x68
 800cff8:	e7e9      	b.n	800cfce <_fwalk_reent+0x12>

0800cffa <__retarget_lock_init_recursive>:
 800cffa:	4770      	bx	lr

0800cffc <__retarget_lock_acquire_recursive>:
 800cffc:	4770      	bx	lr

0800cffe <__retarget_lock_release_recursive>:
 800cffe:	4770      	bx	lr

0800d000 <__swhatbuf_r>:
 800d000:	b570      	push	{r4, r5, r6, lr}
 800d002:	460e      	mov	r6, r1
 800d004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d008:	2900      	cmp	r1, #0
 800d00a:	b096      	sub	sp, #88	; 0x58
 800d00c:	4614      	mov	r4, r2
 800d00e:	461d      	mov	r5, r3
 800d010:	da07      	bge.n	800d022 <__swhatbuf_r+0x22>
 800d012:	2300      	movs	r3, #0
 800d014:	602b      	str	r3, [r5, #0]
 800d016:	89b3      	ldrh	r3, [r6, #12]
 800d018:	061a      	lsls	r2, r3, #24
 800d01a:	d410      	bmi.n	800d03e <__swhatbuf_r+0x3e>
 800d01c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d020:	e00e      	b.n	800d040 <__swhatbuf_r+0x40>
 800d022:	466a      	mov	r2, sp
 800d024:	f000 fbb2 	bl	800d78c <_fstat_r>
 800d028:	2800      	cmp	r0, #0
 800d02a:	dbf2      	blt.n	800d012 <__swhatbuf_r+0x12>
 800d02c:	9a01      	ldr	r2, [sp, #4]
 800d02e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d032:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d036:	425a      	negs	r2, r3
 800d038:	415a      	adcs	r2, r3
 800d03a:	602a      	str	r2, [r5, #0]
 800d03c:	e7ee      	b.n	800d01c <__swhatbuf_r+0x1c>
 800d03e:	2340      	movs	r3, #64	; 0x40
 800d040:	2000      	movs	r0, #0
 800d042:	6023      	str	r3, [r4, #0]
 800d044:	b016      	add	sp, #88	; 0x58
 800d046:	bd70      	pop	{r4, r5, r6, pc}

0800d048 <__smakebuf_r>:
 800d048:	898b      	ldrh	r3, [r1, #12]
 800d04a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d04c:	079d      	lsls	r5, r3, #30
 800d04e:	4606      	mov	r6, r0
 800d050:	460c      	mov	r4, r1
 800d052:	d507      	bpl.n	800d064 <__smakebuf_r+0x1c>
 800d054:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d058:	6023      	str	r3, [r4, #0]
 800d05a:	6123      	str	r3, [r4, #16]
 800d05c:	2301      	movs	r3, #1
 800d05e:	6163      	str	r3, [r4, #20]
 800d060:	b002      	add	sp, #8
 800d062:	bd70      	pop	{r4, r5, r6, pc}
 800d064:	ab01      	add	r3, sp, #4
 800d066:	466a      	mov	r2, sp
 800d068:	f7ff ffca 	bl	800d000 <__swhatbuf_r>
 800d06c:	9900      	ldr	r1, [sp, #0]
 800d06e:	4605      	mov	r5, r0
 800d070:	4630      	mov	r0, r6
 800d072:	f7ff fc4b 	bl	800c90c <_malloc_r>
 800d076:	b948      	cbnz	r0, 800d08c <__smakebuf_r+0x44>
 800d078:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d07c:	059a      	lsls	r2, r3, #22
 800d07e:	d4ef      	bmi.n	800d060 <__smakebuf_r+0x18>
 800d080:	f023 0303 	bic.w	r3, r3, #3
 800d084:	f043 0302 	orr.w	r3, r3, #2
 800d088:	81a3      	strh	r3, [r4, #12]
 800d08a:	e7e3      	b.n	800d054 <__smakebuf_r+0xc>
 800d08c:	4b0d      	ldr	r3, [pc, #52]	; (800d0c4 <__smakebuf_r+0x7c>)
 800d08e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d090:	89a3      	ldrh	r3, [r4, #12]
 800d092:	6020      	str	r0, [r4, #0]
 800d094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d098:	81a3      	strh	r3, [r4, #12]
 800d09a:	9b00      	ldr	r3, [sp, #0]
 800d09c:	6163      	str	r3, [r4, #20]
 800d09e:	9b01      	ldr	r3, [sp, #4]
 800d0a0:	6120      	str	r0, [r4, #16]
 800d0a2:	b15b      	cbz	r3, 800d0bc <__smakebuf_r+0x74>
 800d0a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0a8:	4630      	mov	r0, r6
 800d0aa:	f000 fb81 	bl	800d7b0 <_isatty_r>
 800d0ae:	b128      	cbz	r0, 800d0bc <__smakebuf_r+0x74>
 800d0b0:	89a3      	ldrh	r3, [r4, #12]
 800d0b2:	f023 0303 	bic.w	r3, r3, #3
 800d0b6:	f043 0301 	orr.w	r3, r3, #1
 800d0ba:	81a3      	strh	r3, [r4, #12]
 800d0bc:	89a0      	ldrh	r0, [r4, #12]
 800d0be:	4305      	orrs	r5, r0
 800d0c0:	81a5      	strh	r5, [r4, #12]
 800d0c2:	e7cd      	b.n	800d060 <__smakebuf_r+0x18>
 800d0c4:	0800ce59 	.word	0x0800ce59

0800d0c8 <__malloc_lock>:
 800d0c8:	4801      	ldr	r0, [pc, #4]	; (800d0d0 <__malloc_lock+0x8>)
 800d0ca:	f7ff bf97 	b.w	800cffc <__retarget_lock_acquire_recursive>
 800d0ce:	bf00      	nop
 800d0d0:	20002944 	.word	0x20002944

0800d0d4 <__malloc_unlock>:
 800d0d4:	4801      	ldr	r0, [pc, #4]	; (800d0dc <__malloc_unlock+0x8>)
 800d0d6:	f7ff bf92 	b.w	800cffe <__retarget_lock_release_recursive>
 800d0da:	bf00      	nop
 800d0dc:	20002944 	.word	0x20002944

0800d0e0 <__ssputs_r>:
 800d0e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0e4:	688e      	ldr	r6, [r1, #8]
 800d0e6:	429e      	cmp	r6, r3
 800d0e8:	4682      	mov	sl, r0
 800d0ea:	460c      	mov	r4, r1
 800d0ec:	4690      	mov	r8, r2
 800d0ee:	461f      	mov	r7, r3
 800d0f0:	d838      	bhi.n	800d164 <__ssputs_r+0x84>
 800d0f2:	898a      	ldrh	r2, [r1, #12]
 800d0f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d0f8:	d032      	beq.n	800d160 <__ssputs_r+0x80>
 800d0fa:	6825      	ldr	r5, [r4, #0]
 800d0fc:	6909      	ldr	r1, [r1, #16]
 800d0fe:	eba5 0901 	sub.w	r9, r5, r1
 800d102:	6965      	ldr	r5, [r4, #20]
 800d104:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d108:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d10c:	3301      	adds	r3, #1
 800d10e:	444b      	add	r3, r9
 800d110:	106d      	asrs	r5, r5, #1
 800d112:	429d      	cmp	r5, r3
 800d114:	bf38      	it	cc
 800d116:	461d      	movcc	r5, r3
 800d118:	0553      	lsls	r3, r2, #21
 800d11a:	d531      	bpl.n	800d180 <__ssputs_r+0xa0>
 800d11c:	4629      	mov	r1, r5
 800d11e:	f7ff fbf5 	bl	800c90c <_malloc_r>
 800d122:	4606      	mov	r6, r0
 800d124:	b950      	cbnz	r0, 800d13c <__ssputs_r+0x5c>
 800d126:	230c      	movs	r3, #12
 800d128:	f8ca 3000 	str.w	r3, [sl]
 800d12c:	89a3      	ldrh	r3, [r4, #12]
 800d12e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d132:	81a3      	strh	r3, [r4, #12]
 800d134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d13c:	6921      	ldr	r1, [r4, #16]
 800d13e:	464a      	mov	r2, r9
 800d140:	f7ff fb7e 	bl	800c840 <memcpy>
 800d144:	89a3      	ldrh	r3, [r4, #12]
 800d146:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d14a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d14e:	81a3      	strh	r3, [r4, #12]
 800d150:	6126      	str	r6, [r4, #16]
 800d152:	6165      	str	r5, [r4, #20]
 800d154:	444e      	add	r6, r9
 800d156:	eba5 0509 	sub.w	r5, r5, r9
 800d15a:	6026      	str	r6, [r4, #0]
 800d15c:	60a5      	str	r5, [r4, #8]
 800d15e:	463e      	mov	r6, r7
 800d160:	42be      	cmp	r6, r7
 800d162:	d900      	bls.n	800d166 <__ssputs_r+0x86>
 800d164:	463e      	mov	r6, r7
 800d166:	4632      	mov	r2, r6
 800d168:	6820      	ldr	r0, [r4, #0]
 800d16a:	4641      	mov	r1, r8
 800d16c:	f000 fb42 	bl	800d7f4 <memmove>
 800d170:	68a3      	ldr	r3, [r4, #8]
 800d172:	6822      	ldr	r2, [r4, #0]
 800d174:	1b9b      	subs	r3, r3, r6
 800d176:	4432      	add	r2, r6
 800d178:	60a3      	str	r3, [r4, #8]
 800d17a:	6022      	str	r2, [r4, #0]
 800d17c:	2000      	movs	r0, #0
 800d17e:	e7db      	b.n	800d138 <__ssputs_r+0x58>
 800d180:	462a      	mov	r2, r5
 800d182:	f000 fb51 	bl	800d828 <_realloc_r>
 800d186:	4606      	mov	r6, r0
 800d188:	2800      	cmp	r0, #0
 800d18a:	d1e1      	bne.n	800d150 <__ssputs_r+0x70>
 800d18c:	6921      	ldr	r1, [r4, #16]
 800d18e:	4650      	mov	r0, sl
 800d190:	f7ff fb6c 	bl	800c86c <_free_r>
 800d194:	e7c7      	b.n	800d126 <__ssputs_r+0x46>
	...

0800d198 <_svfiprintf_r>:
 800d198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d19c:	4698      	mov	r8, r3
 800d19e:	898b      	ldrh	r3, [r1, #12]
 800d1a0:	061b      	lsls	r3, r3, #24
 800d1a2:	b09d      	sub	sp, #116	; 0x74
 800d1a4:	4607      	mov	r7, r0
 800d1a6:	460d      	mov	r5, r1
 800d1a8:	4614      	mov	r4, r2
 800d1aa:	d50e      	bpl.n	800d1ca <_svfiprintf_r+0x32>
 800d1ac:	690b      	ldr	r3, [r1, #16]
 800d1ae:	b963      	cbnz	r3, 800d1ca <_svfiprintf_r+0x32>
 800d1b0:	2140      	movs	r1, #64	; 0x40
 800d1b2:	f7ff fbab 	bl	800c90c <_malloc_r>
 800d1b6:	6028      	str	r0, [r5, #0]
 800d1b8:	6128      	str	r0, [r5, #16]
 800d1ba:	b920      	cbnz	r0, 800d1c6 <_svfiprintf_r+0x2e>
 800d1bc:	230c      	movs	r3, #12
 800d1be:	603b      	str	r3, [r7, #0]
 800d1c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d1c4:	e0d1      	b.n	800d36a <_svfiprintf_r+0x1d2>
 800d1c6:	2340      	movs	r3, #64	; 0x40
 800d1c8:	616b      	str	r3, [r5, #20]
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	9309      	str	r3, [sp, #36]	; 0x24
 800d1ce:	2320      	movs	r3, #32
 800d1d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1d8:	2330      	movs	r3, #48	; 0x30
 800d1da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d384 <_svfiprintf_r+0x1ec>
 800d1de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d1e2:	f04f 0901 	mov.w	r9, #1
 800d1e6:	4623      	mov	r3, r4
 800d1e8:	469a      	mov	sl, r3
 800d1ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1ee:	b10a      	cbz	r2, 800d1f4 <_svfiprintf_r+0x5c>
 800d1f0:	2a25      	cmp	r2, #37	; 0x25
 800d1f2:	d1f9      	bne.n	800d1e8 <_svfiprintf_r+0x50>
 800d1f4:	ebba 0b04 	subs.w	fp, sl, r4
 800d1f8:	d00b      	beq.n	800d212 <_svfiprintf_r+0x7a>
 800d1fa:	465b      	mov	r3, fp
 800d1fc:	4622      	mov	r2, r4
 800d1fe:	4629      	mov	r1, r5
 800d200:	4638      	mov	r0, r7
 800d202:	f7ff ff6d 	bl	800d0e0 <__ssputs_r>
 800d206:	3001      	adds	r0, #1
 800d208:	f000 80aa 	beq.w	800d360 <_svfiprintf_r+0x1c8>
 800d20c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d20e:	445a      	add	r2, fp
 800d210:	9209      	str	r2, [sp, #36]	; 0x24
 800d212:	f89a 3000 	ldrb.w	r3, [sl]
 800d216:	2b00      	cmp	r3, #0
 800d218:	f000 80a2 	beq.w	800d360 <_svfiprintf_r+0x1c8>
 800d21c:	2300      	movs	r3, #0
 800d21e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d222:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d226:	f10a 0a01 	add.w	sl, sl, #1
 800d22a:	9304      	str	r3, [sp, #16]
 800d22c:	9307      	str	r3, [sp, #28]
 800d22e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d232:	931a      	str	r3, [sp, #104]	; 0x68
 800d234:	4654      	mov	r4, sl
 800d236:	2205      	movs	r2, #5
 800d238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d23c:	4851      	ldr	r0, [pc, #324]	; (800d384 <_svfiprintf_r+0x1ec>)
 800d23e:	f7f3 f817 	bl	8000270 <memchr>
 800d242:	9a04      	ldr	r2, [sp, #16]
 800d244:	b9d8      	cbnz	r0, 800d27e <_svfiprintf_r+0xe6>
 800d246:	06d0      	lsls	r0, r2, #27
 800d248:	bf44      	itt	mi
 800d24a:	2320      	movmi	r3, #32
 800d24c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d250:	0711      	lsls	r1, r2, #28
 800d252:	bf44      	itt	mi
 800d254:	232b      	movmi	r3, #43	; 0x2b
 800d256:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d25a:	f89a 3000 	ldrb.w	r3, [sl]
 800d25e:	2b2a      	cmp	r3, #42	; 0x2a
 800d260:	d015      	beq.n	800d28e <_svfiprintf_r+0xf6>
 800d262:	9a07      	ldr	r2, [sp, #28]
 800d264:	4654      	mov	r4, sl
 800d266:	2000      	movs	r0, #0
 800d268:	f04f 0c0a 	mov.w	ip, #10
 800d26c:	4621      	mov	r1, r4
 800d26e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d272:	3b30      	subs	r3, #48	; 0x30
 800d274:	2b09      	cmp	r3, #9
 800d276:	d94e      	bls.n	800d316 <_svfiprintf_r+0x17e>
 800d278:	b1b0      	cbz	r0, 800d2a8 <_svfiprintf_r+0x110>
 800d27a:	9207      	str	r2, [sp, #28]
 800d27c:	e014      	b.n	800d2a8 <_svfiprintf_r+0x110>
 800d27e:	eba0 0308 	sub.w	r3, r0, r8
 800d282:	fa09 f303 	lsl.w	r3, r9, r3
 800d286:	4313      	orrs	r3, r2
 800d288:	9304      	str	r3, [sp, #16]
 800d28a:	46a2      	mov	sl, r4
 800d28c:	e7d2      	b.n	800d234 <_svfiprintf_r+0x9c>
 800d28e:	9b03      	ldr	r3, [sp, #12]
 800d290:	1d19      	adds	r1, r3, #4
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	9103      	str	r1, [sp, #12]
 800d296:	2b00      	cmp	r3, #0
 800d298:	bfbb      	ittet	lt
 800d29a:	425b      	neglt	r3, r3
 800d29c:	f042 0202 	orrlt.w	r2, r2, #2
 800d2a0:	9307      	strge	r3, [sp, #28]
 800d2a2:	9307      	strlt	r3, [sp, #28]
 800d2a4:	bfb8      	it	lt
 800d2a6:	9204      	strlt	r2, [sp, #16]
 800d2a8:	7823      	ldrb	r3, [r4, #0]
 800d2aa:	2b2e      	cmp	r3, #46	; 0x2e
 800d2ac:	d10c      	bne.n	800d2c8 <_svfiprintf_r+0x130>
 800d2ae:	7863      	ldrb	r3, [r4, #1]
 800d2b0:	2b2a      	cmp	r3, #42	; 0x2a
 800d2b2:	d135      	bne.n	800d320 <_svfiprintf_r+0x188>
 800d2b4:	9b03      	ldr	r3, [sp, #12]
 800d2b6:	1d1a      	adds	r2, r3, #4
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	9203      	str	r2, [sp, #12]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	bfb8      	it	lt
 800d2c0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d2c4:	3402      	adds	r4, #2
 800d2c6:	9305      	str	r3, [sp, #20]
 800d2c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d394 <_svfiprintf_r+0x1fc>
 800d2cc:	7821      	ldrb	r1, [r4, #0]
 800d2ce:	2203      	movs	r2, #3
 800d2d0:	4650      	mov	r0, sl
 800d2d2:	f7f2 ffcd 	bl	8000270 <memchr>
 800d2d6:	b140      	cbz	r0, 800d2ea <_svfiprintf_r+0x152>
 800d2d8:	2340      	movs	r3, #64	; 0x40
 800d2da:	eba0 000a 	sub.w	r0, r0, sl
 800d2de:	fa03 f000 	lsl.w	r0, r3, r0
 800d2e2:	9b04      	ldr	r3, [sp, #16]
 800d2e4:	4303      	orrs	r3, r0
 800d2e6:	3401      	adds	r4, #1
 800d2e8:	9304      	str	r3, [sp, #16]
 800d2ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2ee:	4826      	ldr	r0, [pc, #152]	; (800d388 <_svfiprintf_r+0x1f0>)
 800d2f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d2f4:	2206      	movs	r2, #6
 800d2f6:	f7f2 ffbb 	bl	8000270 <memchr>
 800d2fa:	2800      	cmp	r0, #0
 800d2fc:	d038      	beq.n	800d370 <_svfiprintf_r+0x1d8>
 800d2fe:	4b23      	ldr	r3, [pc, #140]	; (800d38c <_svfiprintf_r+0x1f4>)
 800d300:	bb1b      	cbnz	r3, 800d34a <_svfiprintf_r+0x1b2>
 800d302:	9b03      	ldr	r3, [sp, #12]
 800d304:	3307      	adds	r3, #7
 800d306:	f023 0307 	bic.w	r3, r3, #7
 800d30a:	3308      	adds	r3, #8
 800d30c:	9303      	str	r3, [sp, #12]
 800d30e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d310:	4433      	add	r3, r6
 800d312:	9309      	str	r3, [sp, #36]	; 0x24
 800d314:	e767      	b.n	800d1e6 <_svfiprintf_r+0x4e>
 800d316:	fb0c 3202 	mla	r2, ip, r2, r3
 800d31a:	460c      	mov	r4, r1
 800d31c:	2001      	movs	r0, #1
 800d31e:	e7a5      	b.n	800d26c <_svfiprintf_r+0xd4>
 800d320:	2300      	movs	r3, #0
 800d322:	3401      	adds	r4, #1
 800d324:	9305      	str	r3, [sp, #20]
 800d326:	4619      	mov	r1, r3
 800d328:	f04f 0c0a 	mov.w	ip, #10
 800d32c:	4620      	mov	r0, r4
 800d32e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d332:	3a30      	subs	r2, #48	; 0x30
 800d334:	2a09      	cmp	r2, #9
 800d336:	d903      	bls.n	800d340 <_svfiprintf_r+0x1a8>
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d0c5      	beq.n	800d2c8 <_svfiprintf_r+0x130>
 800d33c:	9105      	str	r1, [sp, #20]
 800d33e:	e7c3      	b.n	800d2c8 <_svfiprintf_r+0x130>
 800d340:	fb0c 2101 	mla	r1, ip, r1, r2
 800d344:	4604      	mov	r4, r0
 800d346:	2301      	movs	r3, #1
 800d348:	e7f0      	b.n	800d32c <_svfiprintf_r+0x194>
 800d34a:	ab03      	add	r3, sp, #12
 800d34c:	9300      	str	r3, [sp, #0]
 800d34e:	462a      	mov	r2, r5
 800d350:	4b0f      	ldr	r3, [pc, #60]	; (800d390 <_svfiprintf_r+0x1f8>)
 800d352:	a904      	add	r1, sp, #16
 800d354:	4638      	mov	r0, r7
 800d356:	f3af 8000 	nop.w
 800d35a:	1c42      	adds	r2, r0, #1
 800d35c:	4606      	mov	r6, r0
 800d35e:	d1d6      	bne.n	800d30e <_svfiprintf_r+0x176>
 800d360:	89ab      	ldrh	r3, [r5, #12]
 800d362:	065b      	lsls	r3, r3, #25
 800d364:	f53f af2c 	bmi.w	800d1c0 <_svfiprintf_r+0x28>
 800d368:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d36a:	b01d      	add	sp, #116	; 0x74
 800d36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d370:	ab03      	add	r3, sp, #12
 800d372:	9300      	str	r3, [sp, #0]
 800d374:	462a      	mov	r2, r5
 800d376:	4b06      	ldr	r3, [pc, #24]	; (800d390 <_svfiprintf_r+0x1f8>)
 800d378:	a904      	add	r1, sp, #16
 800d37a:	4638      	mov	r0, r7
 800d37c:	f000 f87a 	bl	800d474 <_printf_i>
 800d380:	e7eb      	b.n	800d35a <_svfiprintf_r+0x1c2>
 800d382:	bf00      	nop
 800d384:	0800e020 	.word	0x0800e020
 800d388:	0800e02a 	.word	0x0800e02a
 800d38c:	00000000 	.word	0x00000000
 800d390:	0800d0e1 	.word	0x0800d0e1
 800d394:	0800e026 	.word	0x0800e026

0800d398 <_printf_common>:
 800d398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d39c:	4616      	mov	r6, r2
 800d39e:	4699      	mov	r9, r3
 800d3a0:	688a      	ldr	r2, [r1, #8]
 800d3a2:	690b      	ldr	r3, [r1, #16]
 800d3a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d3a8:	4293      	cmp	r3, r2
 800d3aa:	bfb8      	it	lt
 800d3ac:	4613      	movlt	r3, r2
 800d3ae:	6033      	str	r3, [r6, #0]
 800d3b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d3b4:	4607      	mov	r7, r0
 800d3b6:	460c      	mov	r4, r1
 800d3b8:	b10a      	cbz	r2, 800d3be <_printf_common+0x26>
 800d3ba:	3301      	adds	r3, #1
 800d3bc:	6033      	str	r3, [r6, #0]
 800d3be:	6823      	ldr	r3, [r4, #0]
 800d3c0:	0699      	lsls	r1, r3, #26
 800d3c2:	bf42      	ittt	mi
 800d3c4:	6833      	ldrmi	r3, [r6, #0]
 800d3c6:	3302      	addmi	r3, #2
 800d3c8:	6033      	strmi	r3, [r6, #0]
 800d3ca:	6825      	ldr	r5, [r4, #0]
 800d3cc:	f015 0506 	ands.w	r5, r5, #6
 800d3d0:	d106      	bne.n	800d3e0 <_printf_common+0x48>
 800d3d2:	f104 0a19 	add.w	sl, r4, #25
 800d3d6:	68e3      	ldr	r3, [r4, #12]
 800d3d8:	6832      	ldr	r2, [r6, #0]
 800d3da:	1a9b      	subs	r3, r3, r2
 800d3dc:	42ab      	cmp	r3, r5
 800d3de:	dc26      	bgt.n	800d42e <_printf_common+0x96>
 800d3e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d3e4:	1e13      	subs	r3, r2, #0
 800d3e6:	6822      	ldr	r2, [r4, #0]
 800d3e8:	bf18      	it	ne
 800d3ea:	2301      	movne	r3, #1
 800d3ec:	0692      	lsls	r2, r2, #26
 800d3ee:	d42b      	bmi.n	800d448 <_printf_common+0xb0>
 800d3f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d3f4:	4649      	mov	r1, r9
 800d3f6:	4638      	mov	r0, r7
 800d3f8:	47c0      	blx	r8
 800d3fa:	3001      	adds	r0, #1
 800d3fc:	d01e      	beq.n	800d43c <_printf_common+0xa4>
 800d3fe:	6823      	ldr	r3, [r4, #0]
 800d400:	68e5      	ldr	r5, [r4, #12]
 800d402:	6832      	ldr	r2, [r6, #0]
 800d404:	f003 0306 	and.w	r3, r3, #6
 800d408:	2b04      	cmp	r3, #4
 800d40a:	bf08      	it	eq
 800d40c:	1aad      	subeq	r5, r5, r2
 800d40e:	68a3      	ldr	r3, [r4, #8]
 800d410:	6922      	ldr	r2, [r4, #16]
 800d412:	bf0c      	ite	eq
 800d414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d418:	2500      	movne	r5, #0
 800d41a:	4293      	cmp	r3, r2
 800d41c:	bfc4      	itt	gt
 800d41e:	1a9b      	subgt	r3, r3, r2
 800d420:	18ed      	addgt	r5, r5, r3
 800d422:	2600      	movs	r6, #0
 800d424:	341a      	adds	r4, #26
 800d426:	42b5      	cmp	r5, r6
 800d428:	d11a      	bne.n	800d460 <_printf_common+0xc8>
 800d42a:	2000      	movs	r0, #0
 800d42c:	e008      	b.n	800d440 <_printf_common+0xa8>
 800d42e:	2301      	movs	r3, #1
 800d430:	4652      	mov	r2, sl
 800d432:	4649      	mov	r1, r9
 800d434:	4638      	mov	r0, r7
 800d436:	47c0      	blx	r8
 800d438:	3001      	adds	r0, #1
 800d43a:	d103      	bne.n	800d444 <_printf_common+0xac>
 800d43c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d444:	3501      	adds	r5, #1
 800d446:	e7c6      	b.n	800d3d6 <_printf_common+0x3e>
 800d448:	18e1      	adds	r1, r4, r3
 800d44a:	1c5a      	adds	r2, r3, #1
 800d44c:	2030      	movs	r0, #48	; 0x30
 800d44e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d452:	4422      	add	r2, r4
 800d454:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d458:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d45c:	3302      	adds	r3, #2
 800d45e:	e7c7      	b.n	800d3f0 <_printf_common+0x58>
 800d460:	2301      	movs	r3, #1
 800d462:	4622      	mov	r2, r4
 800d464:	4649      	mov	r1, r9
 800d466:	4638      	mov	r0, r7
 800d468:	47c0      	blx	r8
 800d46a:	3001      	adds	r0, #1
 800d46c:	d0e6      	beq.n	800d43c <_printf_common+0xa4>
 800d46e:	3601      	adds	r6, #1
 800d470:	e7d9      	b.n	800d426 <_printf_common+0x8e>
	...

0800d474 <_printf_i>:
 800d474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d478:	460c      	mov	r4, r1
 800d47a:	4691      	mov	r9, r2
 800d47c:	7e27      	ldrb	r7, [r4, #24]
 800d47e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d480:	2f78      	cmp	r7, #120	; 0x78
 800d482:	4680      	mov	r8, r0
 800d484:	469a      	mov	sl, r3
 800d486:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d48a:	d807      	bhi.n	800d49c <_printf_i+0x28>
 800d48c:	2f62      	cmp	r7, #98	; 0x62
 800d48e:	d80a      	bhi.n	800d4a6 <_printf_i+0x32>
 800d490:	2f00      	cmp	r7, #0
 800d492:	f000 80d8 	beq.w	800d646 <_printf_i+0x1d2>
 800d496:	2f58      	cmp	r7, #88	; 0x58
 800d498:	f000 80a3 	beq.w	800d5e2 <_printf_i+0x16e>
 800d49c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d4a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d4a4:	e03a      	b.n	800d51c <_printf_i+0xa8>
 800d4a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d4aa:	2b15      	cmp	r3, #21
 800d4ac:	d8f6      	bhi.n	800d49c <_printf_i+0x28>
 800d4ae:	a001      	add	r0, pc, #4	; (adr r0, 800d4b4 <_printf_i+0x40>)
 800d4b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d4b4:	0800d50d 	.word	0x0800d50d
 800d4b8:	0800d521 	.word	0x0800d521
 800d4bc:	0800d49d 	.word	0x0800d49d
 800d4c0:	0800d49d 	.word	0x0800d49d
 800d4c4:	0800d49d 	.word	0x0800d49d
 800d4c8:	0800d49d 	.word	0x0800d49d
 800d4cc:	0800d521 	.word	0x0800d521
 800d4d0:	0800d49d 	.word	0x0800d49d
 800d4d4:	0800d49d 	.word	0x0800d49d
 800d4d8:	0800d49d 	.word	0x0800d49d
 800d4dc:	0800d49d 	.word	0x0800d49d
 800d4e0:	0800d62d 	.word	0x0800d62d
 800d4e4:	0800d551 	.word	0x0800d551
 800d4e8:	0800d60f 	.word	0x0800d60f
 800d4ec:	0800d49d 	.word	0x0800d49d
 800d4f0:	0800d49d 	.word	0x0800d49d
 800d4f4:	0800d64f 	.word	0x0800d64f
 800d4f8:	0800d49d 	.word	0x0800d49d
 800d4fc:	0800d551 	.word	0x0800d551
 800d500:	0800d49d 	.word	0x0800d49d
 800d504:	0800d49d 	.word	0x0800d49d
 800d508:	0800d617 	.word	0x0800d617
 800d50c:	680b      	ldr	r3, [r1, #0]
 800d50e:	1d1a      	adds	r2, r3, #4
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	600a      	str	r2, [r1, #0]
 800d514:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d518:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d51c:	2301      	movs	r3, #1
 800d51e:	e0a3      	b.n	800d668 <_printf_i+0x1f4>
 800d520:	6825      	ldr	r5, [r4, #0]
 800d522:	6808      	ldr	r0, [r1, #0]
 800d524:	062e      	lsls	r6, r5, #24
 800d526:	f100 0304 	add.w	r3, r0, #4
 800d52a:	d50a      	bpl.n	800d542 <_printf_i+0xce>
 800d52c:	6805      	ldr	r5, [r0, #0]
 800d52e:	600b      	str	r3, [r1, #0]
 800d530:	2d00      	cmp	r5, #0
 800d532:	da03      	bge.n	800d53c <_printf_i+0xc8>
 800d534:	232d      	movs	r3, #45	; 0x2d
 800d536:	426d      	negs	r5, r5
 800d538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d53c:	485e      	ldr	r0, [pc, #376]	; (800d6b8 <_printf_i+0x244>)
 800d53e:	230a      	movs	r3, #10
 800d540:	e019      	b.n	800d576 <_printf_i+0x102>
 800d542:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d546:	6805      	ldr	r5, [r0, #0]
 800d548:	600b      	str	r3, [r1, #0]
 800d54a:	bf18      	it	ne
 800d54c:	b22d      	sxthne	r5, r5
 800d54e:	e7ef      	b.n	800d530 <_printf_i+0xbc>
 800d550:	680b      	ldr	r3, [r1, #0]
 800d552:	6825      	ldr	r5, [r4, #0]
 800d554:	1d18      	adds	r0, r3, #4
 800d556:	6008      	str	r0, [r1, #0]
 800d558:	0628      	lsls	r0, r5, #24
 800d55a:	d501      	bpl.n	800d560 <_printf_i+0xec>
 800d55c:	681d      	ldr	r5, [r3, #0]
 800d55e:	e002      	b.n	800d566 <_printf_i+0xf2>
 800d560:	0669      	lsls	r1, r5, #25
 800d562:	d5fb      	bpl.n	800d55c <_printf_i+0xe8>
 800d564:	881d      	ldrh	r5, [r3, #0]
 800d566:	4854      	ldr	r0, [pc, #336]	; (800d6b8 <_printf_i+0x244>)
 800d568:	2f6f      	cmp	r7, #111	; 0x6f
 800d56a:	bf0c      	ite	eq
 800d56c:	2308      	moveq	r3, #8
 800d56e:	230a      	movne	r3, #10
 800d570:	2100      	movs	r1, #0
 800d572:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d576:	6866      	ldr	r6, [r4, #4]
 800d578:	60a6      	str	r6, [r4, #8]
 800d57a:	2e00      	cmp	r6, #0
 800d57c:	bfa2      	ittt	ge
 800d57e:	6821      	ldrge	r1, [r4, #0]
 800d580:	f021 0104 	bicge.w	r1, r1, #4
 800d584:	6021      	strge	r1, [r4, #0]
 800d586:	b90d      	cbnz	r5, 800d58c <_printf_i+0x118>
 800d588:	2e00      	cmp	r6, #0
 800d58a:	d04d      	beq.n	800d628 <_printf_i+0x1b4>
 800d58c:	4616      	mov	r6, r2
 800d58e:	fbb5 f1f3 	udiv	r1, r5, r3
 800d592:	fb03 5711 	mls	r7, r3, r1, r5
 800d596:	5dc7      	ldrb	r7, [r0, r7]
 800d598:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d59c:	462f      	mov	r7, r5
 800d59e:	42bb      	cmp	r3, r7
 800d5a0:	460d      	mov	r5, r1
 800d5a2:	d9f4      	bls.n	800d58e <_printf_i+0x11a>
 800d5a4:	2b08      	cmp	r3, #8
 800d5a6:	d10b      	bne.n	800d5c0 <_printf_i+0x14c>
 800d5a8:	6823      	ldr	r3, [r4, #0]
 800d5aa:	07df      	lsls	r7, r3, #31
 800d5ac:	d508      	bpl.n	800d5c0 <_printf_i+0x14c>
 800d5ae:	6923      	ldr	r3, [r4, #16]
 800d5b0:	6861      	ldr	r1, [r4, #4]
 800d5b2:	4299      	cmp	r1, r3
 800d5b4:	bfde      	ittt	le
 800d5b6:	2330      	movle	r3, #48	; 0x30
 800d5b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d5bc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800d5c0:	1b92      	subs	r2, r2, r6
 800d5c2:	6122      	str	r2, [r4, #16]
 800d5c4:	f8cd a000 	str.w	sl, [sp]
 800d5c8:	464b      	mov	r3, r9
 800d5ca:	aa03      	add	r2, sp, #12
 800d5cc:	4621      	mov	r1, r4
 800d5ce:	4640      	mov	r0, r8
 800d5d0:	f7ff fee2 	bl	800d398 <_printf_common>
 800d5d4:	3001      	adds	r0, #1
 800d5d6:	d14c      	bne.n	800d672 <_printf_i+0x1fe>
 800d5d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d5dc:	b004      	add	sp, #16
 800d5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5e2:	4835      	ldr	r0, [pc, #212]	; (800d6b8 <_printf_i+0x244>)
 800d5e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d5e8:	6823      	ldr	r3, [r4, #0]
 800d5ea:	680e      	ldr	r6, [r1, #0]
 800d5ec:	061f      	lsls	r7, r3, #24
 800d5ee:	f856 5b04 	ldr.w	r5, [r6], #4
 800d5f2:	600e      	str	r6, [r1, #0]
 800d5f4:	d514      	bpl.n	800d620 <_printf_i+0x1ac>
 800d5f6:	07d9      	lsls	r1, r3, #31
 800d5f8:	bf44      	itt	mi
 800d5fa:	f043 0320 	orrmi.w	r3, r3, #32
 800d5fe:	6023      	strmi	r3, [r4, #0]
 800d600:	b91d      	cbnz	r5, 800d60a <_printf_i+0x196>
 800d602:	6823      	ldr	r3, [r4, #0]
 800d604:	f023 0320 	bic.w	r3, r3, #32
 800d608:	6023      	str	r3, [r4, #0]
 800d60a:	2310      	movs	r3, #16
 800d60c:	e7b0      	b.n	800d570 <_printf_i+0xfc>
 800d60e:	6823      	ldr	r3, [r4, #0]
 800d610:	f043 0320 	orr.w	r3, r3, #32
 800d614:	6023      	str	r3, [r4, #0]
 800d616:	2378      	movs	r3, #120	; 0x78
 800d618:	4828      	ldr	r0, [pc, #160]	; (800d6bc <_printf_i+0x248>)
 800d61a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d61e:	e7e3      	b.n	800d5e8 <_printf_i+0x174>
 800d620:	065e      	lsls	r6, r3, #25
 800d622:	bf48      	it	mi
 800d624:	b2ad      	uxthmi	r5, r5
 800d626:	e7e6      	b.n	800d5f6 <_printf_i+0x182>
 800d628:	4616      	mov	r6, r2
 800d62a:	e7bb      	b.n	800d5a4 <_printf_i+0x130>
 800d62c:	680b      	ldr	r3, [r1, #0]
 800d62e:	6826      	ldr	r6, [r4, #0]
 800d630:	6960      	ldr	r0, [r4, #20]
 800d632:	1d1d      	adds	r5, r3, #4
 800d634:	600d      	str	r5, [r1, #0]
 800d636:	0635      	lsls	r5, r6, #24
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	d501      	bpl.n	800d640 <_printf_i+0x1cc>
 800d63c:	6018      	str	r0, [r3, #0]
 800d63e:	e002      	b.n	800d646 <_printf_i+0x1d2>
 800d640:	0671      	lsls	r1, r6, #25
 800d642:	d5fb      	bpl.n	800d63c <_printf_i+0x1c8>
 800d644:	8018      	strh	r0, [r3, #0]
 800d646:	2300      	movs	r3, #0
 800d648:	6123      	str	r3, [r4, #16]
 800d64a:	4616      	mov	r6, r2
 800d64c:	e7ba      	b.n	800d5c4 <_printf_i+0x150>
 800d64e:	680b      	ldr	r3, [r1, #0]
 800d650:	1d1a      	adds	r2, r3, #4
 800d652:	600a      	str	r2, [r1, #0]
 800d654:	681e      	ldr	r6, [r3, #0]
 800d656:	6862      	ldr	r2, [r4, #4]
 800d658:	2100      	movs	r1, #0
 800d65a:	4630      	mov	r0, r6
 800d65c:	f7f2 fe08 	bl	8000270 <memchr>
 800d660:	b108      	cbz	r0, 800d666 <_printf_i+0x1f2>
 800d662:	1b80      	subs	r0, r0, r6
 800d664:	6060      	str	r0, [r4, #4]
 800d666:	6863      	ldr	r3, [r4, #4]
 800d668:	6123      	str	r3, [r4, #16]
 800d66a:	2300      	movs	r3, #0
 800d66c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d670:	e7a8      	b.n	800d5c4 <_printf_i+0x150>
 800d672:	6923      	ldr	r3, [r4, #16]
 800d674:	4632      	mov	r2, r6
 800d676:	4649      	mov	r1, r9
 800d678:	4640      	mov	r0, r8
 800d67a:	47d0      	blx	sl
 800d67c:	3001      	adds	r0, #1
 800d67e:	d0ab      	beq.n	800d5d8 <_printf_i+0x164>
 800d680:	6823      	ldr	r3, [r4, #0]
 800d682:	079b      	lsls	r3, r3, #30
 800d684:	d413      	bmi.n	800d6ae <_printf_i+0x23a>
 800d686:	68e0      	ldr	r0, [r4, #12]
 800d688:	9b03      	ldr	r3, [sp, #12]
 800d68a:	4298      	cmp	r0, r3
 800d68c:	bfb8      	it	lt
 800d68e:	4618      	movlt	r0, r3
 800d690:	e7a4      	b.n	800d5dc <_printf_i+0x168>
 800d692:	2301      	movs	r3, #1
 800d694:	4632      	mov	r2, r6
 800d696:	4649      	mov	r1, r9
 800d698:	4640      	mov	r0, r8
 800d69a:	47d0      	blx	sl
 800d69c:	3001      	adds	r0, #1
 800d69e:	d09b      	beq.n	800d5d8 <_printf_i+0x164>
 800d6a0:	3501      	adds	r5, #1
 800d6a2:	68e3      	ldr	r3, [r4, #12]
 800d6a4:	9903      	ldr	r1, [sp, #12]
 800d6a6:	1a5b      	subs	r3, r3, r1
 800d6a8:	42ab      	cmp	r3, r5
 800d6aa:	dcf2      	bgt.n	800d692 <_printf_i+0x21e>
 800d6ac:	e7eb      	b.n	800d686 <_printf_i+0x212>
 800d6ae:	2500      	movs	r5, #0
 800d6b0:	f104 0619 	add.w	r6, r4, #25
 800d6b4:	e7f5      	b.n	800d6a2 <_printf_i+0x22e>
 800d6b6:	bf00      	nop
 800d6b8:	0800e031 	.word	0x0800e031
 800d6bc:	0800e042 	.word	0x0800e042

0800d6c0 <__sread>:
 800d6c0:	b510      	push	{r4, lr}
 800d6c2:	460c      	mov	r4, r1
 800d6c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6c8:	f000 f8d4 	bl	800d874 <_read_r>
 800d6cc:	2800      	cmp	r0, #0
 800d6ce:	bfab      	itete	ge
 800d6d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d6d2:	89a3      	ldrhlt	r3, [r4, #12]
 800d6d4:	181b      	addge	r3, r3, r0
 800d6d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d6da:	bfac      	ite	ge
 800d6dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800d6de:	81a3      	strhlt	r3, [r4, #12]
 800d6e0:	bd10      	pop	{r4, pc}

0800d6e2 <__swrite>:
 800d6e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6e6:	461f      	mov	r7, r3
 800d6e8:	898b      	ldrh	r3, [r1, #12]
 800d6ea:	05db      	lsls	r3, r3, #23
 800d6ec:	4605      	mov	r5, r0
 800d6ee:	460c      	mov	r4, r1
 800d6f0:	4616      	mov	r6, r2
 800d6f2:	d505      	bpl.n	800d700 <__swrite+0x1e>
 800d6f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6f8:	2302      	movs	r3, #2
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	f000 f868 	bl	800d7d0 <_lseek_r>
 800d700:	89a3      	ldrh	r3, [r4, #12]
 800d702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d706:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d70a:	81a3      	strh	r3, [r4, #12]
 800d70c:	4632      	mov	r2, r6
 800d70e:	463b      	mov	r3, r7
 800d710:	4628      	mov	r0, r5
 800d712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d716:	f000 b817 	b.w	800d748 <_write_r>

0800d71a <__sseek>:
 800d71a:	b510      	push	{r4, lr}
 800d71c:	460c      	mov	r4, r1
 800d71e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d722:	f000 f855 	bl	800d7d0 <_lseek_r>
 800d726:	1c43      	adds	r3, r0, #1
 800d728:	89a3      	ldrh	r3, [r4, #12]
 800d72a:	bf15      	itete	ne
 800d72c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d72e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d732:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d736:	81a3      	strheq	r3, [r4, #12]
 800d738:	bf18      	it	ne
 800d73a:	81a3      	strhne	r3, [r4, #12]
 800d73c:	bd10      	pop	{r4, pc}

0800d73e <__sclose>:
 800d73e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d742:	f000 b813 	b.w	800d76c <_close_r>
	...

0800d748 <_write_r>:
 800d748:	b538      	push	{r3, r4, r5, lr}
 800d74a:	4d07      	ldr	r5, [pc, #28]	; (800d768 <_write_r+0x20>)
 800d74c:	4604      	mov	r4, r0
 800d74e:	4608      	mov	r0, r1
 800d750:	4611      	mov	r1, r2
 800d752:	2200      	movs	r2, #0
 800d754:	602a      	str	r2, [r5, #0]
 800d756:	461a      	mov	r2, r3
 800d758:	f7f3 fd91 	bl	800127e <_write>
 800d75c:	1c43      	adds	r3, r0, #1
 800d75e:	d102      	bne.n	800d766 <_write_r+0x1e>
 800d760:	682b      	ldr	r3, [r5, #0]
 800d762:	b103      	cbz	r3, 800d766 <_write_r+0x1e>
 800d764:	6023      	str	r3, [r4, #0]
 800d766:	bd38      	pop	{r3, r4, r5, pc}
 800d768:	2000294c 	.word	0x2000294c

0800d76c <_close_r>:
 800d76c:	b538      	push	{r3, r4, r5, lr}
 800d76e:	4d06      	ldr	r5, [pc, #24]	; (800d788 <_close_r+0x1c>)
 800d770:	2300      	movs	r3, #0
 800d772:	4604      	mov	r4, r0
 800d774:	4608      	mov	r0, r1
 800d776:	602b      	str	r3, [r5, #0]
 800d778:	f7f3 fd9d 	bl	80012b6 <_close>
 800d77c:	1c43      	adds	r3, r0, #1
 800d77e:	d102      	bne.n	800d786 <_close_r+0x1a>
 800d780:	682b      	ldr	r3, [r5, #0]
 800d782:	b103      	cbz	r3, 800d786 <_close_r+0x1a>
 800d784:	6023      	str	r3, [r4, #0]
 800d786:	bd38      	pop	{r3, r4, r5, pc}
 800d788:	2000294c 	.word	0x2000294c

0800d78c <_fstat_r>:
 800d78c:	b538      	push	{r3, r4, r5, lr}
 800d78e:	4d07      	ldr	r5, [pc, #28]	; (800d7ac <_fstat_r+0x20>)
 800d790:	2300      	movs	r3, #0
 800d792:	4604      	mov	r4, r0
 800d794:	4608      	mov	r0, r1
 800d796:	4611      	mov	r1, r2
 800d798:	602b      	str	r3, [r5, #0]
 800d79a:	f7f3 fd98 	bl	80012ce <_fstat>
 800d79e:	1c43      	adds	r3, r0, #1
 800d7a0:	d102      	bne.n	800d7a8 <_fstat_r+0x1c>
 800d7a2:	682b      	ldr	r3, [r5, #0]
 800d7a4:	b103      	cbz	r3, 800d7a8 <_fstat_r+0x1c>
 800d7a6:	6023      	str	r3, [r4, #0]
 800d7a8:	bd38      	pop	{r3, r4, r5, pc}
 800d7aa:	bf00      	nop
 800d7ac:	2000294c 	.word	0x2000294c

0800d7b0 <_isatty_r>:
 800d7b0:	b538      	push	{r3, r4, r5, lr}
 800d7b2:	4d06      	ldr	r5, [pc, #24]	; (800d7cc <_isatty_r+0x1c>)
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	4604      	mov	r4, r0
 800d7b8:	4608      	mov	r0, r1
 800d7ba:	602b      	str	r3, [r5, #0]
 800d7bc:	f7f3 fd97 	bl	80012ee <_isatty>
 800d7c0:	1c43      	adds	r3, r0, #1
 800d7c2:	d102      	bne.n	800d7ca <_isatty_r+0x1a>
 800d7c4:	682b      	ldr	r3, [r5, #0]
 800d7c6:	b103      	cbz	r3, 800d7ca <_isatty_r+0x1a>
 800d7c8:	6023      	str	r3, [r4, #0]
 800d7ca:	bd38      	pop	{r3, r4, r5, pc}
 800d7cc:	2000294c 	.word	0x2000294c

0800d7d0 <_lseek_r>:
 800d7d0:	b538      	push	{r3, r4, r5, lr}
 800d7d2:	4d07      	ldr	r5, [pc, #28]	; (800d7f0 <_lseek_r+0x20>)
 800d7d4:	4604      	mov	r4, r0
 800d7d6:	4608      	mov	r0, r1
 800d7d8:	4611      	mov	r1, r2
 800d7da:	2200      	movs	r2, #0
 800d7dc:	602a      	str	r2, [r5, #0]
 800d7de:	461a      	mov	r2, r3
 800d7e0:	f7f3 fd90 	bl	8001304 <_lseek>
 800d7e4:	1c43      	adds	r3, r0, #1
 800d7e6:	d102      	bne.n	800d7ee <_lseek_r+0x1e>
 800d7e8:	682b      	ldr	r3, [r5, #0]
 800d7ea:	b103      	cbz	r3, 800d7ee <_lseek_r+0x1e>
 800d7ec:	6023      	str	r3, [r4, #0]
 800d7ee:	bd38      	pop	{r3, r4, r5, pc}
 800d7f0:	2000294c 	.word	0x2000294c

0800d7f4 <memmove>:
 800d7f4:	4288      	cmp	r0, r1
 800d7f6:	b510      	push	{r4, lr}
 800d7f8:	eb01 0402 	add.w	r4, r1, r2
 800d7fc:	d902      	bls.n	800d804 <memmove+0x10>
 800d7fe:	4284      	cmp	r4, r0
 800d800:	4623      	mov	r3, r4
 800d802:	d807      	bhi.n	800d814 <memmove+0x20>
 800d804:	1e43      	subs	r3, r0, #1
 800d806:	42a1      	cmp	r1, r4
 800d808:	d008      	beq.n	800d81c <memmove+0x28>
 800d80a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d80e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d812:	e7f8      	b.n	800d806 <memmove+0x12>
 800d814:	4402      	add	r2, r0
 800d816:	4601      	mov	r1, r0
 800d818:	428a      	cmp	r2, r1
 800d81a:	d100      	bne.n	800d81e <memmove+0x2a>
 800d81c:	bd10      	pop	{r4, pc}
 800d81e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d822:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d826:	e7f7      	b.n	800d818 <memmove+0x24>

0800d828 <_realloc_r>:
 800d828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d82a:	4607      	mov	r7, r0
 800d82c:	4614      	mov	r4, r2
 800d82e:	460e      	mov	r6, r1
 800d830:	b921      	cbnz	r1, 800d83c <_realloc_r+0x14>
 800d832:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d836:	4611      	mov	r1, r2
 800d838:	f7ff b868 	b.w	800c90c <_malloc_r>
 800d83c:	b922      	cbnz	r2, 800d848 <_realloc_r+0x20>
 800d83e:	f7ff f815 	bl	800c86c <_free_r>
 800d842:	4625      	mov	r5, r4
 800d844:	4628      	mov	r0, r5
 800d846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d848:	f000 f826 	bl	800d898 <_malloc_usable_size_r>
 800d84c:	42a0      	cmp	r0, r4
 800d84e:	d20f      	bcs.n	800d870 <_realloc_r+0x48>
 800d850:	4621      	mov	r1, r4
 800d852:	4638      	mov	r0, r7
 800d854:	f7ff f85a 	bl	800c90c <_malloc_r>
 800d858:	4605      	mov	r5, r0
 800d85a:	2800      	cmp	r0, #0
 800d85c:	d0f2      	beq.n	800d844 <_realloc_r+0x1c>
 800d85e:	4631      	mov	r1, r6
 800d860:	4622      	mov	r2, r4
 800d862:	f7fe ffed 	bl	800c840 <memcpy>
 800d866:	4631      	mov	r1, r6
 800d868:	4638      	mov	r0, r7
 800d86a:	f7fe ffff 	bl	800c86c <_free_r>
 800d86e:	e7e9      	b.n	800d844 <_realloc_r+0x1c>
 800d870:	4635      	mov	r5, r6
 800d872:	e7e7      	b.n	800d844 <_realloc_r+0x1c>

0800d874 <_read_r>:
 800d874:	b538      	push	{r3, r4, r5, lr}
 800d876:	4d07      	ldr	r5, [pc, #28]	; (800d894 <_read_r+0x20>)
 800d878:	4604      	mov	r4, r0
 800d87a:	4608      	mov	r0, r1
 800d87c:	4611      	mov	r1, r2
 800d87e:	2200      	movs	r2, #0
 800d880:	602a      	str	r2, [r5, #0]
 800d882:	461a      	mov	r2, r3
 800d884:	f7f3 fcde 	bl	8001244 <_read>
 800d888:	1c43      	adds	r3, r0, #1
 800d88a:	d102      	bne.n	800d892 <_read_r+0x1e>
 800d88c:	682b      	ldr	r3, [r5, #0]
 800d88e:	b103      	cbz	r3, 800d892 <_read_r+0x1e>
 800d890:	6023      	str	r3, [r4, #0]
 800d892:	bd38      	pop	{r3, r4, r5, pc}
 800d894:	2000294c 	.word	0x2000294c

0800d898 <_malloc_usable_size_r>:
 800d898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d89c:	1f18      	subs	r0, r3, #4
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	bfbc      	itt	lt
 800d8a2:	580b      	ldrlt	r3, [r1, r0]
 800d8a4:	18c0      	addlt	r0, r0, r3
 800d8a6:	4770      	bx	lr

0800d8a8 <_init>:
 800d8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8aa:	bf00      	nop
 800d8ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8ae:	bc08      	pop	{r3}
 800d8b0:	469e      	mov	lr, r3
 800d8b2:	4770      	bx	lr

0800d8b4 <_fini>:
 800d8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8b6:	bf00      	nop
 800d8b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8ba:	bc08      	pop	{r3}
 800d8bc:	469e      	mov	lr, r3
 800d8be:	4770      	bx	lr
