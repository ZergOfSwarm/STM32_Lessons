
RTC_and_UNIX_timestamp_407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008994  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006dc  08008b28  08008b28  00018b28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009204  08009204  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  08009204  08009204  00019204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800920c  0800920c  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800920c  0800920c  0001920c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009210  08009210  00019210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  08009214  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020244  2**0
                  CONTENTS
 10 .bss          00000264  20000248  20000248  00020248  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200004ac  200004ac  00020248  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010e03  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002329  00000000  00000000  00031077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee0  00000000  00000000  000333a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000df8  00000000  00000000  00034280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022afc  00000000  00000000  00035078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010fea  00000000  00000000  00057b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d28fa  00000000  00000000  00068b5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013b458  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005888  00000000  00000000  0013b4a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000248 	.word	0x20000248
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008b0c 	.word	0x08008b0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000024c 	.word	0x2000024c
 80001cc:	08008b0c 	.word	0x08008b0c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strcmp>:
 8000280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000288:	2a01      	cmp	r2, #1
 800028a:	bf28      	it	cs
 800028c:	429a      	cmpcs	r2, r3
 800028e:	d0f7      	beq.n	8000280 <strcmp>
 8000290:	1ad0      	subs	r0, r2, r3
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	; 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_ldivmod>:
 8000bbc:	b97b      	cbnz	r3, 8000bde <__aeabi_ldivmod+0x22>
 8000bbe:	b972      	cbnz	r2, 8000bde <__aeabi_ldivmod+0x22>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bfbe      	ittt	lt
 8000bc4:	2000      	movlt	r0, #0
 8000bc6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bca:	e006      	blt.n	8000bda <__aeabi_ldivmod+0x1e>
 8000bcc:	bf08      	it	eq
 8000bce:	2800      	cmpeq	r0, #0
 8000bd0:	bf1c      	itt	ne
 8000bd2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bd6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bda:	f000 b9bf 	b.w	8000f5c <__aeabi_idiv0>
 8000bde:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be6:	2900      	cmp	r1, #0
 8000be8:	db09      	blt.n	8000bfe <__aeabi_ldivmod+0x42>
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	db1a      	blt.n	8000c24 <__aeabi_ldivmod+0x68>
 8000bee:	f000 f84d 	bl	8000c8c <__udivmoddi4>
 8000bf2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfa:	b004      	add	sp, #16
 8000bfc:	4770      	bx	lr
 8000bfe:	4240      	negs	r0, r0
 8000c00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	db1b      	blt.n	8000c40 <__aeabi_ldivmod+0x84>
 8000c08:	f000 f840 	bl	8000c8c <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4240      	negs	r0, r0
 8000c18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c1c:	4252      	negs	r2, r2
 8000c1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c22:	4770      	bx	lr
 8000c24:	4252      	negs	r2, r2
 8000c26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c2a:	f000 f82f 	bl	8000c8c <__udivmoddi4>
 8000c2e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c36:	b004      	add	sp, #16
 8000c38:	4240      	negs	r0, r0
 8000c3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3e:	4770      	bx	lr
 8000c40:	4252      	negs	r2, r2
 8000c42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c46:	f000 f821 	bl	8000c8c <__udivmoddi4>
 8000c4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c52:	b004      	add	sp, #16
 8000c54:	4252      	negs	r2, r2
 8000c56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c5a:	4770      	bx	lr

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c70:	f000 b974 	b.w	8000f5c <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9d08      	ldr	r5, [sp, #32]
 8000c92:	4604      	mov	r4, r0
 8000c94:	468e      	mov	lr, r1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d14d      	bne.n	8000d36 <__udivmoddi4+0xaa>
 8000c9a:	428a      	cmp	r2, r1
 8000c9c:	4694      	mov	ip, r2
 8000c9e:	d969      	bls.n	8000d74 <__udivmoddi4+0xe8>
 8000ca0:	fab2 f282 	clz	r2, r2
 8000ca4:	b152      	cbz	r2, 8000cbc <__udivmoddi4+0x30>
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	f1c2 0120 	rsb	r1, r2, #32
 8000cae:	fa20 f101 	lsr.w	r1, r0, r1
 8000cb2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb6:	ea41 0e03 	orr.w	lr, r1, r3
 8000cba:	4094      	lsls	r4, r2
 8000cbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc0:	0c21      	lsrs	r1, r4, #16
 8000cc2:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc6:	fa1f f78c 	uxth.w	r7, ip
 8000cca:	fb08 e316 	mls	r3, r8, r6, lr
 8000cce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cd2:	fb06 f107 	mul.w	r1, r6, r7
 8000cd6:	4299      	cmp	r1, r3
 8000cd8:	d90a      	bls.n	8000cf0 <__udivmoddi4+0x64>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000ce2:	f080 811f 	bcs.w	8000f24 <__udivmoddi4+0x298>
 8000ce6:	4299      	cmp	r1, r3
 8000ce8:	f240 811c 	bls.w	8000f24 <__udivmoddi4+0x298>
 8000cec:	3e02      	subs	r6, #2
 8000cee:	4463      	add	r3, ip
 8000cf0:	1a5b      	subs	r3, r3, r1
 8000cf2:	b2a4      	uxth	r4, r4
 8000cf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d00:	fb00 f707 	mul.w	r7, r0, r7
 8000d04:	42a7      	cmp	r7, r4
 8000d06:	d90a      	bls.n	8000d1e <__udivmoddi4+0x92>
 8000d08:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d10:	f080 810a 	bcs.w	8000f28 <__udivmoddi4+0x29c>
 8000d14:	42a7      	cmp	r7, r4
 8000d16:	f240 8107 	bls.w	8000f28 <__udivmoddi4+0x29c>
 8000d1a:	4464      	add	r4, ip
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d22:	1be4      	subs	r4, r4, r7
 8000d24:	2600      	movs	r6, #0
 8000d26:	b11d      	cbz	r5, 8000d30 <__udivmoddi4+0xa4>
 8000d28:	40d4      	lsrs	r4, r2
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d909      	bls.n	8000d4e <__udivmoddi4+0xc2>
 8000d3a:	2d00      	cmp	r5, #0
 8000d3c:	f000 80ef 	beq.w	8000f1e <__udivmoddi4+0x292>
 8000d40:	2600      	movs	r6, #0
 8000d42:	e9c5 0100 	strd	r0, r1, [r5]
 8000d46:	4630      	mov	r0, r6
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	fab3 f683 	clz	r6, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d14a      	bne.n	8000dec <__udivmoddi4+0x160>
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d302      	bcc.n	8000d60 <__udivmoddi4+0xd4>
 8000d5a:	4282      	cmp	r2, r0
 8000d5c:	f200 80f9 	bhi.w	8000f52 <__udivmoddi4+0x2c6>
 8000d60:	1a84      	subs	r4, r0, r2
 8000d62:	eb61 0303 	sbc.w	r3, r1, r3
 8000d66:	2001      	movs	r0, #1
 8000d68:	469e      	mov	lr, r3
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d0e0      	beq.n	8000d30 <__udivmoddi4+0xa4>
 8000d6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d72:	e7dd      	b.n	8000d30 <__udivmoddi4+0xa4>
 8000d74:	b902      	cbnz	r2, 8000d78 <__udivmoddi4+0xec>
 8000d76:	deff      	udf	#255	; 0xff
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	2a00      	cmp	r2, #0
 8000d7e:	f040 8092 	bne.w	8000ea6 <__udivmoddi4+0x21a>
 8000d82:	eba1 010c 	sub.w	r1, r1, ip
 8000d86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8a:	fa1f fe8c 	uxth.w	lr, ip
 8000d8e:	2601      	movs	r6, #1
 8000d90:	0c20      	lsrs	r0, r4, #16
 8000d92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d96:	fb07 1113 	mls	r1, r7, r3, r1
 8000d9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9e:	fb0e f003 	mul.w	r0, lr, r3
 8000da2:	4288      	cmp	r0, r1
 8000da4:	d908      	bls.n	8000db8 <__udivmoddi4+0x12c>
 8000da6:	eb1c 0101 	adds.w	r1, ip, r1
 8000daa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dae:	d202      	bcs.n	8000db6 <__udivmoddi4+0x12a>
 8000db0:	4288      	cmp	r0, r1
 8000db2:	f200 80cb 	bhi.w	8000f4c <__udivmoddi4+0x2c0>
 8000db6:	4643      	mov	r3, r8
 8000db8:	1a09      	subs	r1, r1, r0
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x156>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dd8:	d202      	bcs.n	8000de0 <__udivmoddi4+0x154>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	f200 80bb 	bhi.w	8000f56 <__udivmoddi4+0x2ca>
 8000de0:	4608      	mov	r0, r1
 8000de2:	eba4 040e 	sub.w	r4, r4, lr
 8000de6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dea:	e79c      	b.n	8000d26 <__udivmoddi4+0x9a>
 8000dec:	f1c6 0720 	rsb	r7, r6, #32
 8000df0:	40b3      	lsls	r3, r6
 8000df2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000e02:	431c      	orrs	r4, r3
 8000e04:	40f9      	lsrs	r1, r7
 8000e06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e12:	0c20      	lsrs	r0, r4, #16
 8000e14:	fa1f fe8c 	uxth.w	lr, ip
 8000e18:	fb09 1118 	mls	r1, r9, r8, r1
 8000e1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e20:	fb08 f00e 	mul.w	r0, r8, lr
 8000e24:	4288      	cmp	r0, r1
 8000e26:	fa02 f206 	lsl.w	r2, r2, r6
 8000e2a:	d90b      	bls.n	8000e44 <__udivmoddi4+0x1b8>
 8000e2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e30:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e34:	f080 8088 	bcs.w	8000f48 <__udivmoddi4+0x2bc>
 8000e38:	4288      	cmp	r0, r1
 8000e3a:	f240 8085 	bls.w	8000f48 <__udivmoddi4+0x2bc>
 8000e3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	1a09      	subs	r1, r1, r0
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e58:	458e      	cmp	lr, r1
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x1e2>
 8000e5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e60:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e64:	d26c      	bcs.n	8000f40 <__udivmoddi4+0x2b4>
 8000e66:	458e      	cmp	lr, r1
 8000e68:	d96a      	bls.n	8000f40 <__udivmoddi4+0x2b4>
 8000e6a:	3802      	subs	r0, #2
 8000e6c:	4461      	add	r1, ip
 8000e6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e72:	fba0 9402 	umull	r9, r4, r0, r2
 8000e76:	eba1 010e 	sub.w	r1, r1, lr
 8000e7a:	42a1      	cmp	r1, r4
 8000e7c:	46c8      	mov	r8, r9
 8000e7e:	46a6      	mov	lr, r4
 8000e80:	d356      	bcc.n	8000f30 <__udivmoddi4+0x2a4>
 8000e82:	d053      	beq.n	8000f2c <__udivmoddi4+0x2a0>
 8000e84:	b15d      	cbz	r5, 8000e9e <__udivmoddi4+0x212>
 8000e86:	ebb3 0208 	subs.w	r2, r3, r8
 8000e8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e92:	fa22 f306 	lsr.w	r3, r2, r6
 8000e96:	40f1      	lsrs	r1, r6
 8000e98:	431f      	orrs	r7, r3
 8000e9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9e:	2600      	movs	r6, #0
 8000ea0:	4631      	mov	r1, r6
 8000ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea6:	f1c2 0320 	rsb	r3, r2, #32
 8000eaa:	40d8      	lsrs	r0, r3
 8000eac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb4:	4091      	lsls	r1, r2
 8000eb6:	4301      	orrs	r1, r0
 8000eb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec8:	0c0b      	lsrs	r3, r1, #16
 8000eca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ece:	fb00 f60e 	mul.w	r6, r0, lr
 8000ed2:	429e      	cmp	r6, r3
 8000ed4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed8:	d908      	bls.n	8000eec <__udivmoddi4+0x260>
 8000eda:	eb1c 0303 	adds.w	r3, ip, r3
 8000ede:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ee2:	d22f      	bcs.n	8000f44 <__udivmoddi4+0x2b8>
 8000ee4:	429e      	cmp	r6, r3
 8000ee6:	d92d      	bls.n	8000f44 <__udivmoddi4+0x2b8>
 8000ee8:	3802      	subs	r0, #2
 8000eea:	4463      	add	r3, ip
 8000eec:	1b9b      	subs	r3, r3, r6
 8000eee:	b289      	uxth	r1, r1
 8000ef0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000efc:	fb06 f30e 	mul.w	r3, r6, lr
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x28a>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f0c:	d216      	bcs.n	8000f3c <__udivmoddi4+0x2b0>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d914      	bls.n	8000f3c <__udivmoddi4+0x2b0>
 8000f12:	3e02      	subs	r6, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	1ac9      	subs	r1, r1, r3
 8000f18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f1c:	e738      	b.n	8000d90 <__udivmoddi4+0x104>
 8000f1e:	462e      	mov	r6, r5
 8000f20:	4628      	mov	r0, r5
 8000f22:	e705      	b.n	8000d30 <__udivmoddi4+0xa4>
 8000f24:	4606      	mov	r6, r0
 8000f26:	e6e3      	b.n	8000cf0 <__udivmoddi4+0x64>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6f8      	b.n	8000d1e <__udivmoddi4+0x92>
 8000f2c:	454b      	cmp	r3, r9
 8000f2e:	d2a9      	bcs.n	8000e84 <__udivmoddi4+0x1f8>
 8000f30:	ebb9 0802 	subs.w	r8, r9, r2
 8000f34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f38:	3801      	subs	r0, #1
 8000f3a:	e7a3      	b.n	8000e84 <__udivmoddi4+0x1f8>
 8000f3c:	4646      	mov	r6, r8
 8000f3e:	e7ea      	b.n	8000f16 <__udivmoddi4+0x28a>
 8000f40:	4620      	mov	r0, r4
 8000f42:	e794      	b.n	8000e6e <__udivmoddi4+0x1e2>
 8000f44:	4640      	mov	r0, r8
 8000f46:	e7d1      	b.n	8000eec <__udivmoddi4+0x260>
 8000f48:	46d0      	mov	r8, sl
 8000f4a:	e77b      	b.n	8000e44 <__udivmoddi4+0x1b8>
 8000f4c:	3b02      	subs	r3, #2
 8000f4e:	4461      	add	r1, ip
 8000f50:	e732      	b.n	8000db8 <__udivmoddi4+0x12c>
 8000f52:	4630      	mov	r0, r6
 8000f54:	e709      	b.n	8000d6a <__udivmoddi4+0xde>
 8000f56:	4464      	add	r4, ip
 8000f58:	3802      	subs	r0, #2
 8000f5a:	e742      	b.n	8000de2 <__udivmoddi4+0x156>

08000f5c <__aeabi_idiv0>:
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f68:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f6c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d013      	beq.n	8000fa0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f78:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f7c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f80:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d00b      	beq.n	8000fa0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f88:	e000      	b.n	8000f8c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f8a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d0f9      	beq.n	8000f8a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f96:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fa0:	687b      	ldr	r3, [r7, #4]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
	...

08000fb0 <_write>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_RTC_Init(void);
static void MX_USART6_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart6, (uint8_t*) ptr, len, 50);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	2332      	movs	r3, #50	; 0x32
 8000fc2:	68b9      	ldr	r1, [r7, #8]
 8000fc4:	480c      	ldr	r0, [pc, #48]	; (8000ff8 <_write+0x48>)
 8000fc6:	f002 fe52 	bl	8003c6e <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	e009      	b.n	8000fe4 <_write+0x34>
		ITM_SendChar(*ptr++);
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	1c5a      	adds	r2, r3, #1
 8000fd4:	60ba      	str	r2, [r7, #8]
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ffc1 	bl	8000f60 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697a      	ldr	r2, [r7, #20]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	dbf1      	blt.n	8000fd0 <_write+0x20>
	}
	return len;
 8000fec:	687b      	ldr	r3, [r7, #4]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2000035c 	.word	0x2000035c

08000ffc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001002:	f000 fd6f 	bl	8001ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001006:	f000 f95d 	bl	80012c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800100a:	f000 fa7d 	bl	8001508 <MX_GPIO_Init>
  MX_RTC_Init();
 800100e:	f000 f9c5 	bl	800139c <MX_RTC_Init>
  MX_USART6_UART_Init();
 8001012:	f000 fa4f 	bl	80014b4 <MX_USART6_UART_Init>
//}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  flag = 0;
 8001016:	4b91      	ldr	r3, [pc, #580]	; (800125c <main+0x260>)
 8001018:	2200      	movs	r2, #0
 800101a:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 800101c:	2200      	movs	r2, #0
 800101e:	4990      	ldr	r1, [pc, #576]	; (8001260 <main+0x264>)
 8001020:	4890      	ldr	r0, [pc, #576]	; (8001264 <main+0x268>)
 8001022:	f001 ff19 	bl	8002e58 <HAL_RTC_GetTime>
      snprintf(trans_str, 63, "Curent time is %d:%d:%d\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001026:	4b8e      	ldr	r3, [pc, #568]	; (8001260 <main+0x264>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	4619      	mov	r1, r3
 800102c:	4b8c      	ldr	r3, [pc, #560]	; (8001260 <main+0x264>)
 800102e:	785b      	ldrb	r3, [r3, #1]
 8001030:	461a      	mov	r2, r3
 8001032:	4b8b      	ldr	r3, [pc, #556]	; (8001260 <main+0x264>)
 8001034:	789b      	ldrb	r3, [r3, #2]
 8001036:	9301      	str	r3, [sp, #4]
 8001038:	9200      	str	r2, [sp, #0]
 800103a:	460b      	mov	r3, r1
 800103c:	4a8a      	ldr	r2, [pc, #552]	; (8001268 <main+0x26c>)
 800103e:	213f      	movs	r1, #63	; 0x3f
 8001040:	488a      	ldr	r0, [pc, #552]	; (800126c <main+0x270>)
 8001042:	f004 fae7 	bl	8005614 <sniprintf>
      //snprintf(trans_str, 63, "Time %d:%d:%d:%lu\n", sTime.Hours, sTime.Minutes, sTime.Seconds, sTime.SubSeconds);
      HAL_UART_Transmit(&huart6, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8001046:	4889      	ldr	r0, [pc, #548]	; (800126c <main+0x270>)
 8001048:	f7ff f8c2 	bl	80001d0 <strlen>
 800104c:	4603      	mov	r3, r0
 800104e:	b29a      	uxth	r2, r3
 8001050:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001054:	4985      	ldr	r1, [pc, #532]	; (800126c <main+0x270>)
 8001056:	4886      	ldr	r0, [pc, #536]	; (8001270 <main+0x274>)
 8001058:	f002 fe09 	bl	8003c6e <HAL_UART_Transmit>

      HAL_RTC_GetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
 800105c:	2200      	movs	r2, #0
 800105e:	4985      	ldr	r1, [pc, #532]	; (8001274 <main+0x278>)
 8001060:	4880      	ldr	r0, [pc, #512]	; (8001264 <main+0x268>)
 8001062:	f001 ffdb 	bl	800301c <HAL_RTC_GetDate>
      snprintf(trans_str, 63, "Date %d-%d-20%d\n", DateToUpdate.Date, DateToUpdate.Month, DateToUpdate.Year);
 8001066:	4b83      	ldr	r3, [pc, #524]	; (8001274 <main+0x278>)
 8001068:	789b      	ldrb	r3, [r3, #2]
 800106a:	4619      	mov	r1, r3
 800106c:	4b81      	ldr	r3, [pc, #516]	; (8001274 <main+0x278>)
 800106e:	785b      	ldrb	r3, [r3, #1]
 8001070:	461a      	mov	r2, r3
 8001072:	4b80      	ldr	r3, [pc, #512]	; (8001274 <main+0x278>)
 8001074:	78db      	ldrb	r3, [r3, #3]
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	9200      	str	r2, [sp, #0]
 800107a:	460b      	mov	r3, r1
 800107c:	4a7e      	ldr	r2, [pc, #504]	; (8001278 <main+0x27c>)
 800107e:	213f      	movs	r1, #63	; 0x3f
 8001080:	487a      	ldr	r0, [pc, #488]	; (800126c <main+0x270>)
 8001082:	f004 fac7 	bl	8005614 <sniprintf>
      HAL_UART_Transmit(&huart6, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8001086:	4879      	ldr	r0, [pc, #484]	; (800126c <main+0x270>)
 8001088:	f7ff f8a2 	bl	80001d0 <strlen>
 800108c:	4603      	mov	r3, r0
 800108e:	b29a      	uxth	r2, r3
 8001090:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001094:	4975      	ldr	r1, [pc, #468]	; (800126c <main+0x270>)
 8001096:	4876      	ldr	r0, [pc, #472]	; (8001270 <main+0x274>)
 8001098:	f002 fde9 	bl	8003c6e <HAL_UART_Transmit>

      HAL_RTC_GetAlarm(&hrtc, &sAlarm, RTC_ALARM_A, RTC_FORMAT_BIN);
 800109c:	2300      	movs	r3, #0
 800109e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010a2:	4976      	ldr	r1, [pc, #472]	; (800127c <main+0x280>)
 80010a4:	486f      	ldr	r0, [pc, #444]	; (8001264 <main+0x268>)
 80010a6:	f002 f94b 	bl	8003340 <HAL_RTC_GetAlarm>
      snprintf(trans_str, 63, "Settings of alarm %d:%d:%d\n", sAlarm.AlarmTime.Hours, sAlarm.AlarmTime.Minutes, sAlarm.AlarmTime.Seconds);
 80010aa:	4b74      	ldr	r3, [pc, #464]	; (800127c <main+0x280>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	4619      	mov	r1, r3
 80010b0:	4b72      	ldr	r3, [pc, #456]	; (800127c <main+0x280>)
 80010b2:	785b      	ldrb	r3, [r3, #1]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b71      	ldr	r3, [pc, #452]	; (800127c <main+0x280>)
 80010b8:	789b      	ldrb	r3, [r3, #2]
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	9200      	str	r2, [sp, #0]
 80010be:	460b      	mov	r3, r1
 80010c0:	4a6f      	ldr	r2, [pc, #444]	; (8001280 <main+0x284>)
 80010c2:	213f      	movs	r1, #63	; 0x3f
 80010c4:	4869      	ldr	r0, [pc, #420]	; (800126c <main+0x270>)
 80010c6:	f004 faa5 	bl	8005614 <sniprintf>
      HAL_UART_Transmit(&huart6, (uint8_t*)trans_str, strlen(trans_str), 1000);
 80010ca:	4868      	ldr	r0, [pc, #416]	; (800126c <main+0x270>)
 80010cc:	f7ff f880 	bl	80001d0 <strlen>
 80010d0:	4603      	mov	r3, r0
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d8:	4964      	ldr	r1, [pc, #400]	; (800126c <main+0x270>)
 80010da:	4865      	ldr	r0, [pc, #404]	; (8001270 <main+0x274>)
 80010dc:	f002 fdc7 	bl	8003c6e <HAL_UART_Transmit>

	  printf ("\n");
 80010e0:	200a      	movs	r0, #10
 80010e2:	f004 fa71 	bl	80055c8 <putchar>

/*---------------------------------- Get timestamp from RTC ----------------------------------------*/
	  HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 80010e6:	2200      	movs	r2, #0
 80010e8:	4966      	ldr	r1, [pc, #408]	; (8001284 <main+0x288>)
 80010ea:	485e      	ldr	r0, [pc, #376]	; (8001264 <main+0x268>)
 80010ec:	f001 feb4 	bl	8002e58 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 80010f0:	2200      	movs	r2, #0
 80010f2:	4965      	ldr	r1, [pc, #404]	; (8001288 <main+0x28c>)
 80010f4:	485b      	ldr	r0, [pc, #364]	; (8001264 <main+0x268>)
 80010f6:	f001 ff91 	bl	800301c <HAL_RTC_GetDate>

	  currTime.tm_year = currentDate.Year + 100;  // In fact: 2000 + 18 - 1900
 80010fa:	4b63      	ldr	r3, [pc, #396]	; (8001288 <main+0x28c>)
 80010fc:	78db      	ldrb	r3, [r3, #3]
 80010fe:	3364      	adds	r3, #100	; 0x64
 8001100:	4a62      	ldr	r2, [pc, #392]	; (800128c <main+0x290>)
 8001102:	6153      	str	r3, [r2, #20]
	  currTime.tm_mday = currentDate.Date;
 8001104:	4b60      	ldr	r3, [pc, #384]	; (8001288 <main+0x28c>)
 8001106:	789b      	ldrb	r3, [r3, #2]
 8001108:	461a      	mov	r2, r3
 800110a:	4b60      	ldr	r3, [pc, #384]	; (800128c <main+0x290>)
 800110c:	60da      	str	r2, [r3, #12]
	  currTime.tm_mon  = currentDate.Month - 1;
 800110e:	4b5e      	ldr	r3, [pc, #376]	; (8001288 <main+0x28c>)
 8001110:	785b      	ldrb	r3, [r3, #1]
 8001112:	3b01      	subs	r3, #1
 8001114:	4a5d      	ldr	r2, [pc, #372]	; (800128c <main+0x290>)
 8001116:	6113      	str	r3, [r2, #16]

	  currTime.tm_hour = currentTime.Hours;
 8001118:	4b5a      	ldr	r3, [pc, #360]	; (8001284 <main+0x288>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4b5b      	ldr	r3, [pc, #364]	; (800128c <main+0x290>)
 8001120:	609a      	str	r2, [r3, #8]
	  currTime.tm_min  = currentTime.Minutes;
 8001122:	4b58      	ldr	r3, [pc, #352]	; (8001284 <main+0x288>)
 8001124:	785b      	ldrb	r3, [r3, #1]
 8001126:	461a      	mov	r2, r3
 8001128:	4b58      	ldr	r3, [pc, #352]	; (800128c <main+0x290>)
 800112a:	605a      	str	r2, [r3, #4]
	  currTime.tm_sec  = currentTime.Seconds;
 800112c:	4b55      	ldr	r3, [pc, #340]	; (8001284 <main+0x288>)
 800112e:	789b      	ldrb	r3, [r3, #2]
 8001130:	461a      	mov	r2, r3
 8001132:	4b56      	ldr	r3, [pc, #344]	; (800128c <main+0x290>)
 8001134:	601a      	str	r2, [r3, #0]

	  timestamp = mktime(&currTime);
 8001136:	4855      	ldr	r0, [pc, #340]	; (800128c <main+0x290>)
 8001138:	f003 fb4a 	bl	80047d0 <mktime>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4953      	ldr	r1, [pc, #332]	; (8001290 <main+0x294>)
 8001142:	e9c1 2300 	strd	r2, r3, [r1]
	  //printf ( "Current SECONDS: %f\n", timestamp );
	  printf ( "Current date and time are: %s\n", ctime (&timestamp) ); // Convert time_t value to string
 8001146:	4852      	ldr	r0, [pc, #328]	; (8001290 <main+0x294>)
 8001148:	f003 f906 	bl	8004358 <ctime>
 800114c:	4603      	mov	r3, r0
 800114e:	4619      	mov	r1, r3
 8001150:	4850      	ldr	r0, [pc, #320]	; (8001294 <main+0x298>)
 8001152:	f004 fa21 	bl	8005598 <iprintf>

/*---------------------------------- Get timestamp for Time1 ----------------------------------------*/
		HAL_RTC_GetTime(&hrtc, &Time1, RTC_FORMAT_BIN);
 8001156:	2200      	movs	r2, #0
 8001158:	494f      	ldr	r1, [pc, #316]	; (8001298 <main+0x29c>)
 800115a:	4842      	ldr	r0, [pc, #264]	; (8001264 <main+0x268>)
 800115c:	f001 fe7c 	bl	8002e58 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &Date1, RTC_FORMAT_BIN);
 8001160:	2200      	movs	r2, #0
 8001162:	494e      	ldr	r1, [pc, #312]	; (800129c <main+0x2a0>)
 8001164:	483f      	ldr	r0, [pc, #252]	; (8001264 <main+0x268>)
 8001166:	f001 ff59 	bl	800301c <HAL_RTC_GetDate>

		stTime1.tm_year = Date1.Year + 100;  // In fact: 2000 + 18 - 1900
 800116a:	4b4c      	ldr	r3, [pc, #304]	; (800129c <main+0x2a0>)
 800116c:	78db      	ldrb	r3, [r3, #3]
 800116e:	3364      	adds	r3, #100	; 0x64
 8001170:	4a4b      	ldr	r2, [pc, #300]	; (80012a0 <main+0x2a4>)
 8001172:	6153      	str	r3, [r2, #20]
		stTime1.tm_mday = Date1.Date;
 8001174:	4b49      	ldr	r3, [pc, #292]	; (800129c <main+0x2a0>)
 8001176:	789b      	ldrb	r3, [r3, #2]
 8001178:	461a      	mov	r2, r3
 800117a:	4b49      	ldr	r3, [pc, #292]	; (80012a0 <main+0x2a4>)
 800117c:	60da      	str	r2, [r3, #12]
		stTime1.tm_mon = Date1.Month - 1;
 800117e:	4b47      	ldr	r3, [pc, #284]	; (800129c <main+0x2a0>)
 8001180:	785b      	ldrb	r3, [r3, #1]
 8001182:	3b01      	subs	r3, #1
 8001184:	4a46      	ldr	r2, [pc, #280]	; (80012a0 <main+0x2a4>)
 8001186:	6113      	str	r3, [r2, #16]

		stTime1.tm_hour = Time1.Hours;
 8001188:	4b43      	ldr	r3, [pc, #268]	; (8001298 <main+0x29c>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	4b44      	ldr	r3, [pc, #272]	; (80012a0 <main+0x2a4>)
 8001190:	609a      	str	r2, [r3, #8]
		stTime1.tm_min = Time1.Minutes;
 8001192:	4b41      	ldr	r3, [pc, #260]	; (8001298 <main+0x29c>)
 8001194:	785b      	ldrb	r3, [r3, #1]
 8001196:	461a      	mov	r2, r3
 8001198:	4b41      	ldr	r3, [pc, #260]	; (80012a0 <main+0x2a4>)
 800119a:	605a      	str	r2, [r3, #4]
		stTime1.tm_sec = Time1.Seconds;
 800119c:	4b3e      	ldr	r3, [pc, #248]	; (8001298 <main+0x29c>)
 800119e:	789b      	ldrb	r3, [r3, #2]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b3f      	ldr	r3, [pc, #252]	; (80012a0 <main+0x2a4>)
 80011a4:	601a      	str	r2, [r3, #0]

		timestamp1 = mktime(&stTime1);
 80011a6:	483e      	ldr	r0, [pc, #248]	; (80012a0 <main+0x2a4>)
 80011a8:	f003 fb12 	bl	80047d0 <mktime>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	493c      	ldr	r1, [pc, #240]	; (80012a4 <main+0x2a8>)
 80011b2:	e9c1 2300 	strd	r2, r3, [r1]
		printf ( "Time1: %s", ctime (&timestamp1) ); // Convert Time1 value to string
 80011b6:	483b      	ldr	r0, [pc, #236]	; (80012a4 <main+0x2a8>)
 80011b8:	f003 f8ce 	bl	8004358 <ctime>
 80011bc:	4603      	mov	r3, r0
 80011be:	4619      	mov	r1, r3
 80011c0:	4839      	ldr	r0, [pc, #228]	; (80012a8 <main+0x2ac>)
 80011c2:	f004 f9e9 	bl	8005598 <iprintf>

/*---------------------------------- Get timestamp for Time2 ----------------------------------------*/
		HAL_RTC_GetTime(&hrtc, &Time2, RTC_FORMAT_BIN);
 80011c6:	2200      	movs	r2, #0
 80011c8:	4938      	ldr	r1, [pc, #224]	; (80012ac <main+0x2b0>)
 80011ca:	4826      	ldr	r0, [pc, #152]	; (8001264 <main+0x268>)
 80011cc:	f001 fe44 	bl	8002e58 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &Date2, RTC_FORMAT_BIN);
 80011d0:	2200      	movs	r2, #0
 80011d2:	4937      	ldr	r1, [pc, #220]	; (80012b0 <main+0x2b4>)
 80011d4:	4823      	ldr	r0, [pc, #140]	; (8001264 <main+0x268>)
 80011d6:	f001 ff21 	bl	800301c <HAL_RTC_GetDate>

		stTime2.tm_year = Date2.Year + 100;  // In fact: 2000 + 18 - 1900
 80011da:	4b35      	ldr	r3, [pc, #212]	; (80012b0 <main+0x2b4>)
 80011dc:	78db      	ldrb	r3, [r3, #3]
 80011de:	3364      	adds	r3, #100	; 0x64
 80011e0:	4a34      	ldr	r2, [pc, #208]	; (80012b4 <main+0x2b8>)
 80011e2:	6153      	str	r3, [r2, #20]
		stTime2.tm_mday = Date2.Date;
 80011e4:	4b32      	ldr	r3, [pc, #200]	; (80012b0 <main+0x2b4>)
 80011e6:	789b      	ldrb	r3, [r3, #2]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b32      	ldr	r3, [pc, #200]	; (80012b4 <main+0x2b8>)
 80011ec:	60da      	str	r2, [r3, #12]
		stTime2.tm_mon = Date1.Month - 1;
 80011ee:	4b2b      	ldr	r3, [pc, #172]	; (800129c <main+0x2a0>)
 80011f0:	785b      	ldrb	r3, [r3, #1]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	4a2f      	ldr	r2, [pc, #188]	; (80012b4 <main+0x2b8>)
 80011f6:	6113      	str	r3, [r2, #16]

		stTime2.tm_hour = 19;
 80011f8:	4b2e      	ldr	r3, [pc, #184]	; (80012b4 <main+0x2b8>)
 80011fa:	2213      	movs	r2, #19
 80011fc:	609a      	str	r2, [r3, #8]
		stTime2.tm_min = Time2.Minutes;
 80011fe:	4b2b      	ldr	r3, [pc, #172]	; (80012ac <main+0x2b0>)
 8001200:	785b      	ldrb	r3, [r3, #1]
 8001202:	461a      	mov	r2, r3
 8001204:	4b2b      	ldr	r3, [pc, #172]	; (80012b4 <main+0x2b8>)
 8001206:	605a      	str	r2, [r3, #4]
		stTime2.tm_sec = Time2.Seconds;
 8001208:	4b28      	ldr	r3, [pc, #160]	; (80012ac <main+0x2b0>)
 800120a:	789b      	ldrb	r3, [r3, #2]
 800120c:	461a      	mov	r2, r3
 800120e:	4b29      	ldr	r3, [pc, #164]	; (80012b4 <main+0x2b8>)
 8001210:	601a      	str	r2, [r3, #0]

		timestamp2 = mktime(&stTime2);
 8001212:	4828      	ldr	r0, [pc, #160]	; (80012b4 <main+0x2b8>)
 8001214:	f003 fadc 	bl	80047d0 <mktime>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4926      	ldr	r1, [pc, #152]	; (80012b8 <main+0x2bc>)
 800121e:	e9c1 2300 	strd	r2, r3, [r1]
		printf ( "Time2: %s\n", ctime (&timestamp2) ); // Convert Time2 value to string
 8001222:	4825      	ldr	r0, [pc, #148]	; (80012b8 <main+0x2bc>)
 8001224:	f003 f898 	bl	8004358 <ctime>
 8001228:	4603      	mov	r3, r0
 800122a:	4619      	mov	r1, r3
 800122c:	4823      	ldr	r0, [pc, #140]	; (80012bc <main+0x2c0>)
 800122e:	f004 f9b3 	bl	8005598 <iprintf>



		double interval = difftime(timestamp1, timestamp2);
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <main+0x2a8>)
 8001234:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001238:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <main+0x2bc>)
 800123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123e:	f003 f892 	bl	8004366 <difftime>
 8001242:	ed87 0b00 	vstr	d0, [r7]
		printf("difference  = %fs\n", interval);
 8001246:	e9d7 2300 	ldrd	r2, r3, [r7]
 800124a:	481d      	ldr	r0, [pc, #116]	; (80012c0 <main+0x2c4>)
 800124c:	f004 f9a4 	bl	8005598 <iprintf>

//      if (flag == 1){
//    	  flag = 0;
//      }

	      HAL_Delay(1000);
 8001250:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001254:	f000 fc88 	bl	8001b68 <HAL_Delay>
  {
 8001258:	e6e0      	b.n	800101c <main+0x20>
 800125a:	bf00      	nop
 800125c:	20000264 	.word	0x20000264
 8001260:	200003a0 	.word	0x200003a0
 8001264:	2000033c 	.word	0x2000033c
 8001268:	08008b28 	.word	0x08008b28
 800126c:	200003e0 	.word	0x200003e0
 8001270:	2000035c 	.word	0x2000035c
 8001274:	200003b4 	.word	0x200003b4
 8001278:	08008b44 	.word	0x08008b44
 800127c:	200003b8 	.word	0x200003b8
 8001280:	08008b58 	.word	0x08008b58
 8001284:	20000268 	.word	0x20000268
 8001288:	2000027c 	.word	0x2000027c
 800128c:	20000288 	.word	0x20000288
 8001290:	20000280 	.word	0x20000280
 8001294:	08008b74 	.word	0x08008b74
 8001298:	200002ac 	.word	0x200002ac
 800129c:	200002c0 	.word	0x200002c0
 80012a0:	200002d0 	.word	0x200002d0
 80012a4:	200002c8 	.word	0x200002c8
 80012a8:	08008b94 	.word	0x08008b94
 80012ac:	200002f4 	.word	0x200002f4
 80012b0:	20000308 	.word	0x20000308
 80012b4:	20000318 	.word	0x20000318
 80012b8:	20000310 	.word	0x20000310
 80012bc:	08008ba0 	.word	0x08008ba0
 80012c0:	08008bac 	.word	0x08008bac

080012c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b094      	sub	sp, #80	; 0x50
 80012c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ca:	f107 0320 	add.w	r3, r7, #32
 80012ce:	2230      	movs	r2, #48	; 0x30
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f003 f99c 	bl	8004610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e8:	2300      	movs	r3, #0
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	4b29      	ldr	r3, [pc, #164]	; (8001394 <SystemClock_Config+0xd0>)
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	4a28      	ldr	r2, [pc, #160]	; (8001394 <SystemClock_Config+0xd0>)
 80012f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f6:	6413      	str	r3, [r2, #64]	; 0x40
 80012f8:	4b26      	ldr	r3, [pc, #152]	; (8001394 <SystemClock_Config+0xd0>)
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001304:	2300      	movs	r3, #0
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	4b23      	ldr	r3, [pc, #140]	; (8001398 <SystemClock_Config+0xd4>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a22      	ldr	r2, [pc, #136]	; (8001398 <SystemClock_Config+0xd4>)
 800130e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001312:	6013      	str	r3, [r2, #0]
 8001314:	4b20      	ldr	r3, [pc, #128]	; (8001398 <SystemClock_Config+0xd4>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001320:	2309      	movs	r3, #9
 8001322:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001324:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800132a:	2301      	movs	r3, #1
 800132c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800132e:	2302      	movs	r3, #2
 8001330:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001332:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001336:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001338:	2304      	movs	r3, #4
 800133a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800133c:	23a8      	movs	r3, #168	; 0xa8
 800133e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001340:	2302      	movs	r3, #2
 8001342:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001344:	2304      	movs	r3, #4
 8001346:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001348:	f107 0320 	add.w	r3, r7, #32
 800134c:	4618      	mov	r0, r3
 800134e:	f000 fec7 	bl	80020e0 <HAL_RCC_OscConfig>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001358:	f000 f97a 	bl	8001650 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800135c:	230f      	movs	r3, #15
 800135e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001360:	2302      	movs	r3, #2
 8001362:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001368:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800136c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800136e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001372:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	2105      	movs	r1, #5
 800137a:	4618      	mov	r0, r3
 800137c:	f001 f928 	bl	80025d0 <HAL_RCC_ClockConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001386:	f000 f963 	bl	8001650 <Error_Handler>
  }
}
 800138a:	bf00      	nop
 800138c:	3750      	adds	r7, #80	; 0x50
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40007000 	.word	0x40007000

0800139c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b090      	sub	sp, #64	; 0x40
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80013a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80013b2:	2300      	movs	r3, #0
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80013b6:	463b      	mov	r3, r7
 80013b8:	2228      	movs	r2, #40	; 0x28
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f003 f927 	bl	8004610 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80013c2:	4b3a      	ldr	r3, [pc, #232]	; (80014ac <MX_RTC_Init+0x110>)
 80013c4:	4a3a      	ldr	r2, [pc, #232]	; (80014b0 <MX_RTC_Init+0x114>)
 80013c6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80013c8:	4b38      	ldr	r3, [pc, #224]	; (80014ac <MX_RTC_Init+0x110>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80013ce:	4b37      	ldr	r3, [pc, #220]	; (80014ac <MX_RTC_Init+0x110>)
 80013d0:	227f      	movs	r2, #127	; 0x7f
 80013d2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80013d4:	4b35      	ldr	r3, [pc, #212]	; (80014ac <MX_RTC_Init+0x110>)
 80013d6:	22ff      	movs	r2, #255	; 0xff
 80013d8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80013da:	4b34      	ldr	r3, [pc, #208]	; (80014ac <MX_RTC_Init+0x110>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80013e0:	4b32      	ldr	r3, [pc, #200]	; (80014ac <MX_RTC_Init+0x110>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80013e6:	4b31      	ldr	r3, [pc, #196]	; (80014ac <MX_RTC_Init+0x110>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013ec:	482f      	ldr	r0, [pc, #188]	; (80014ac <MX_RTC_Init+0x110>)
 80013ee:	f001 fc23 	bl	8002c38 <HAL_RTC_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80013f8:	f000 f92a 	bl	8001650 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 18;
 80013fc:	2312      	movs	r3, #18
 80013fe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 15;
 8001402:	230f      	movs	r3, #15
 8001404:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800140e:	2300      	movs	r3, #0
 8001410:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001412:	2300      	movs	r3, #0
 8001414:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001416:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800141a:	2200      	movs	r2, #0
 800141c:	4619      	mov	r1, r3
 800141e:	4823      	ldr	r0, [pc, #140]	; (80014ac <MX_RTC_Init+0x110>)
 8001420:	f001 fc80 	bl	8002d24 <HAL_RTC_SetTime>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800142a:	f000 f911 	bl	8001650 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800142e:	2306      	movs	r3, #6
 8001430:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_AUGUST;
 8001434:	2308      	movs	r3, #8
 8001436:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 6;
 800143a:	2306      	movs	r3, #6
 800143c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 22;
 8001440:	2316      	movs	r3, #22
 8001442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001446:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800144a:	2200      	movs	r2, #0
 800144c:	4619      	mov	r1, r3
 800144e:	4817      	ldr	r0, [pc, #92]	; (80014ac <MX_RTC_Init+0x110>)
 8001450:	f001 fd60 	bl	8002f14 <HAL_RTC_SetDate>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800145a:	f000 f8f9 	bl	8001650 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 18;
 800145e:	2312      	movs	r3, #18
 8001460:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 15;
 8001462:	230f      	movs	r3, #15
 8001464:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 5;
 8001466:	2305      	movs	r3, #5
 8001468:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_SECONDS;
 8001476:	2380      	movs	r3, #128	; 0x80
 8001478:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800147a:	2300      	movs	r3, #0
 800147c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8001482:	2301      	movs	r3, #1
 8001484:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001488:	f44f 7380 	mov.w	r3, #256	; 0x100
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800148e:	463b      	mov	r3, r7
 8001490:	2200      	movs	r2, #0
 8001492:	4619      	mov	r1, r3
 8001494:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_RTC_Init+0x110>)
 8001496:	f001 fe11 	bl	80030bc <HAL_RTC_SetAlarm_IT>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80014a0:	f000 f8d6 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	3740      	adds	r7, #64	; 0x40
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	2000033c 	.word	0x2000033c
 80014b0:	40002800 	.word	0x40002800

080014b4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <MX_USART6_UART_Init+0x4c>)
 80014ba:	4a12      	ldr	r2, [pc, #72]	; (8001504 <MX_USART6_UART_Init+0x50>)
 80014bc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <MX_USART6_UART_Init+0x4c>)
 80014c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014c4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <MX_USART6_UART_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <MX_USART6_UART_Init+0x4c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <MX_USART6_UART_Init+0x4c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_USART6_UART_Init+0x4c>)
 80014da:	220c      	movs	r2, #12
 80014dc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <MX_USART6_UART_Init+0x4c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <MX_USART6_UART_Init+0x4c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_USART6_UART_Init+0x4c>)
 80014ec:	f002 fb72 	bl	8003bd4 <HAL_UART_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80014f6:	f000 f8ab 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	2000035c 	.word	0x2000035c
 8001504:	40011400 	.word	0x40011400

08001508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08a      	sub	sp, #40	; 0x28
 800150c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
 8001522:	4b30      	ldr	r3, [pc, #192]	; (80015e4 <MX_GPIO_Init+0xdc>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a2f      	ldr	r2, [pc, #188]	; (80015e4 <MX_GPIO_Init+0xdc>)
 8001528:	f043 0304 	orr.w	r3, r3, #4
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b2d      	ldr	r3, [pc, #180]	; (80015e4 <MX_GPIO_Init+0xdc>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0304 	and.w	r3, r3, #4
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	4b29      	ldr	r3, [pc, #164]	; (80015e4 <MX_GPIO_Init+0xdc>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a28      	ldr	r2, [pc, #160]	; (80015e4 <MX_GPIO_Init+0xdc>)
 8001544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b26      	ldr	r3, [pc, #152]	; (80015e4 <MX_GPIO_Init+0xdc>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <MX_GPIO_Init+0xdc>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a21      	ldr	r2, [pc, #132]	; (80015e4 <MX_GPIO_Init+0xdc>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b1f      	ldr	r3, [pc, #124]	; (80015e4 <MX_GPIO_Init+0xdc>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <MX_GPIO_Init+0xdc>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a1a      	ldr	r2, [pc, #104]	; (80015e4 <MX_GPIO_Init+0xdc>)
 800157c:	f043 0308 	orr.w	r3, r3, #8
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <MX_GPIO_Init+0xdc>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	2102      	movs	r1, #2
 8001592:	4815      	ldr	r0, [pc, #84]	; (80015e8 <MX_GPIO_Init+0xe0>)
 8001594:	f000 fd8a 	bl	80020ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001598:	2200      	movs	r2, #0
 800159a:	2101      	movs	r1, #1
 800159c:	4813      	ldr	r0, [pc, #76]	; (80015ec <MX_GPIO_Init+0xe4>)
 800159e:	f000 fd85 	bl	80020ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015a2:	2302      	movs	r3, #2
 80015a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a6:	2301      	movs	r3, #1
 80015a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2300      	movs	r3, #0
 80015b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	480b      	ldr	r0, [pc, #44]	; (80015e8 <MX_GPIO_Init+0xe0>)
 80015ba:	f000 fbdb 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015be:	2301      	movs	r3, #1
 80015c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c2:	2301      	movs	r3, #1
 80015c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4619      	mov	r1, r3
 80015d4:	4805      	ldr	r0, [pc, #20]	; (80015ec <MX_GPIO_Init+0xe4>)
 80015d6:	f000 fbcd 	bl	8001d74 <HAL_GPIO_Init>

}
 80015da:	bf00      	nop
 80015dc:	3728      	adds	r7, #40	; 0x28
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40020000 	.word	0x40020000
 80015ec:	40020c00 	.word	0x40020c00

080015f0 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
        snprintf(trans_str, 63, "++++++++++ Alarm_A +++++++++\n");
 80015f8:	4a09      	ldr	r2, [pc, #36]	; (8001620 <HAL_RTC_AlarmAEventCallback+0x30>)
 80015fa:	213f      	movs	r1, #63	; 0x3f
 80015fc:	4809      	ldr	r0, [pc, #36]	; (8001624 <HAL_RTC_AlarmAEventCallback+0x34>)
 80015fe:	f004 f809 	bl	8005614 <sniprintf>
        HAL_UART_Transmit(&huart6, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8001602:	4808      	ldr	r0, [pc, #32]	; (8001624 <HAL_RTC_AlarmAEventCallback+0x34>)
 8001604:	f7fe fde4 	bl	80001d0 <strlen>
 8001608:	4603      	mov	r3, r0
 800160a:	b29a      	uxth	r2, r3
 800160c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001610:	4904      	ldr	r1, [pc, #16]	; (8001624 <HAL_RTC_AlarmAEventCallback+0x34>)
 8001612:	4805      	ldr	r0, [pc, #20]	; (8001628 <HAL_RTC_AlarmAEventCallback+0x38>)
 8001614:	f002 fb2b 	bl	8003c6e <HAL_UART_Transmit>
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	08008bc0 	.word	0x08008bc0
 8001624:	200003e0 	.word	0x200003e0
 8001628:	2000035c 	.word	0x2000035c

0800162c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a04      	ldr	r2, [pc, #16]	; (800164c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d101      	bne.n	8001642 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800163e:	f000 fa73 	bl	8001b28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40002000 	.word	0x40002000

08001650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001654:	b672      	cpsid	i
}
 8001656:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001658:	e7fe      	b.n	8001658 <Error_Handler+0x8>
	...

0800165c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <HAL_MspInit+0x4c>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	4a0f      	ldr	r2, [pc, #60]	; (80016a8 <HAL_MspInit+0x4c>)
 800166c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001670:	6453      	str	r3, [r2, #68]	; 0x44
 8001672:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <HAL_MspInit+0x4c>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	603b      	str	r3, [r7, #0]
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <HAL_MspInit+0x4c>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	4a08      	ldr	r2, [pc, #32]	; (80016a8 <HAL_MspInit+0x4c>)
 8001688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168c:	6413      	str	r3, [r2, #64]	; 0x40
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_MspInit+0x4c>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40023800 	.word	0x40023800

080016ac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016b4:	f107 0308 	add.w	r3, r7, #8
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a10      	ldr	r2, [pc, #64]	; (8001708 <HAL_RTC_MspInit+0x5c>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d119      	bne.n	8001700 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016cc:	2302      	movs	r3, #2
 80016ce:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80016d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016d4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016d6:	f107 0308 	add.w	r3, r7, #8
 80016da:	4618      	mov	r0, r3
 80016dc:	f001 f9ca 	bl	8002a74 <HAL_RCCEx_PeriphCLKConfig>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80016e6:	f7ff ffb3 	bl	8001650 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <HAL_RTC_MspInit+0x60>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2100      	movs	r1, #0
 80016f4:	2029      	movs	r0, #41	; 0x29
 80016f6:	f000 fb13 	bl	8001d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80016fa:	2029      	movs	r0, #41	; 0x29
 80016fc:	f000 fb2c 	bl	8001d58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001700:	bf00      	nop
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40002800 	.word	0x40002800
 800170c:	42470e3c 	.word	0x42470e3c

08001710 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08a      	sub	sp, #40	; 0x28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a19      	ldr	r2, [pc, #100]	; (8001794 <HAL_UART_MspInit+0x84>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d12b      	bne.n	800178a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	4b18      	ldr	r3, [pc, #96]	; (8001798 <HAL_UART_MspInit+0x88>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	4a17      	ldr	r2, [pc, #92]	; (8001798 <HAL_UART_MspInit+0x88>)
 800173c:	f043 0320 	orr.w	r3, r3, #32
 8001740:	6453      	str	r3, [r2, #68]	; 0x44
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <HAL_UART_MspInit+0x88>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	f003 0320 	and.w	r3, r3, #32
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	4b11      	ldr	r3, [pc, #68]	; (8001798 <HAL_UART_MspInit+0x88>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a10      	ldr	r2, [pc, #64]	; (8001798 <HAL_UART_MspInit+0x88>)
 8001758:	f043 0304 	orr.w	r3, r3, #4
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <HAL_UART_MspInit+0x88>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0304 	and.w	r3, r3, #4
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800176a:	23c0      	movs	r3, #192	; 0xc0
 800176c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001776:	2303      	movs	r3, #3
 8001778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800177a:	2308      	movs	r3, #8
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	4619      	mov	r1, r3
 8001784:	4805      	ldr	r0, [pc, #20]	; (800179c <HAL_UART_MspInit+0x8c>)
 8001786:	f000 faf5 	bl	8001d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800178a:	bf00      	nop
 800178c:	3728      	adds	r7, #40	; 0x28
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40011400 	.word	0x40011400
 8001798:	40023800 	.word	0x40023800
 800179c:	40020800 	.word	0x40020800

080017a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08e      	sub	sp, #56	; 0x38
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	4b33      	ldr	r3, [pc, #204]	; (8001884 <HAL_InitTick+0xe4>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	4a32      	ldr	r2, [pc, #200]	; (8001884 <HAL_InitTick+0xe4>)
 80017ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017be:	6413      	str	r3, [r2, #64]	; 0x40
 80017c0:	4b30      	ldr	r3, [pc, #192]	; (8001884 <HAL_InitTick+0xe4>)
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017cc:	f107 0210 	add.w	r2, r7, #16
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	4611      	mov	r1, r2
 80017d6:	4618      	mov	r0, r3
 80017d8:	f001 f91a 	bl	8002a10 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017dc:	6a3b      	ldr	r3, [r7, #32]
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d103      	bne.n	80017ee <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017e6:	f001 f8eb 	bl	80029c0 <HAL_RCC_GetPCLK1Freq>
 80017ea:	6378      	str	r0, [r7, #52]	; 0x34
 80017ec:	e004      	b.n	80017f8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017ee:	f001 f8e7 	bl	80029c0 <HAL_RCC_GetPCLK1Freq>
 80017f2:	4603      	mov	r3, r0
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017fa:	4a23      	ldr	r2, [pc, #140]	; (8001888 <HAL_InitTick+0xe8>)
 80017fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001800:	0c9b      	lsrs	r3, r3, #18
 8001802:	3b01      	subs	r3, #1
 8001804:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001806:	4b21      	ldr	r3, [pc, #132]	; (800188c <HAL_InitTick+0xec>)
 8001808:	4a21      	ldr	r2, [pc, #132]	; (8001890 <HAL_InitTick+0xf0>)
 800180a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 800180c:	4b1f      	ldr	r3, [pc, #124]	; (800188c <HAL_InitTick+0xec>)
 800180e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001812:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001814:	4a1d      	ldr	r2, [pc, #116]	; (800188c <HAL_InitTick+0xec>)
 8001816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001818:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800181a:	4b1c      	ldr	r3, [pc, #112]	; (800188c <HAL_InitTick+0xec>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001820:	4b1a      	ldr	r3, [pc, #104]	; (800188c <HAL_InitTick+0xec>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001826:	4b19      	ldr	r3, [pc, #100]	; (800188c <HAL_InitTick+0xec>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 800182c:	4817      	ldr	r0, [pc, #92]	; (800188c <HAL_InitTick+0xec>)
 800182e:	f001 ff24 	bl	800367a <HAL_TIM_Base_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001838:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800183c:	2b00      	cmp	r3, #0
 800183e:	d11b      	bne.n	8001878 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8001840:	4812      	ldr	r0, [pc, #72]	; (800188c <HAL_InitTick+0xec>)
 8001842:	f001 ff73 	bl	800372c <HAL_TIM_Base_Start_IT>
 8001846:	4603      	mov	r3, r0
 8001848:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800184c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001850:	2b00      	cmp	r3, #0
 8001852:	d111      	bne.n	8001878 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001854:	202d      	movs	r0, #45	; 0x2d
 8001856:	f000 fa7f 	bl	8001d58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b0f      	cmp	r3, #15
 800185e:	d808      	bhi.n	8001872 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8001860:	2200      	movs	r2, #0
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	202d      	movs	r0, #45	; 0x2d
 8001866:	f000 fa5b 	bl	8001d20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800186a:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <HAL_InitTick+0xf4>)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	e002      	b.n	8001878 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001878:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800187c:	4618      	mov	r0, r3
 800187e:	3738      	adds	r7, #56	; 0x38
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40023800 	.word	0x40023800
 8001888:	431bde83 	.word	0x431bde83
 800188c:	20000420 	.word	0x20000420
 8001890:	40002000 	.word	0x40002000
 8001894:	20000008 	.word	0x20000008

08001898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800189c:	e7fe      	b.n	800189c <NMI_Handler+0x4>

0800189e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <HardFault_Handler+0x4>

080018a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <MemManage_Handler+0x4>

080018aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <BusFault_Handler+0x4>

080018b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <UsageFault_Handler+0x4>

080018b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
	...

080018f0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <RTC_Alarm_IRQHandler+0x10>)
 80018f6:	f001 fdb3 	bl	8003460 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	2000033c 	.word	0x2000033c

08001904 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800190a:	f001 ff7f 	bl	800380c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000420 	.word	0x20000420

08001918 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
	return 1;
 800191c:	2301      	movs	r3, #1
}
 800191e:	4618      	mov	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <_kill>:

int _kill(int pid, int sig)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001932:	f002 fd21 	bl	8004378 <__errno>
 8001936:	4603      	mov	r3, r0
 8001938:	2216      	movs	r2, #22
 800193a:	601a      	str	r2, [r3, #0]
	return -1;
 800193c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <_exit>:

void _exit (int status)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001950:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff ffe7 	bl	8001928 <_kill>
	while (1) {}		/* Make sure we hang here */
 800195a:	e7fe      	b.n	800195a <_exit+0x12>

0800195c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	e00a      	b.n	8001984 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800196e:	f3af 8000 	nop.w
 8001972:	4601      	mov	r1, r0
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	60ba      	str	r2, [r7, #8]
 800197a:	b2ca      	uxtb	r2, r1
 800197c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	3301      	adds	r3, #1
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	429a      	cmp	r2, r3
 800198a:	dbf0      	blt.n	800196e <_read+0x12>
	}

return len;
 800198c:	687b      	ldr	r3, [r7, #4]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
	return -1;
 800199e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
 80019b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019be:	605a      	str	r2, [r3, #4]
	return 0;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <_isatty>:

int _isatty(int file)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
	return 1;
 80019d6:	2301      	movs	r3, #1
}
 80019d8:	4618      	mov	r0, r3
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
	return 0;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a08:	4a14      	ldr	r2, [pc, #80]	; (8001a5c <_sbrk+0x5c>)
 8001a0a:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <_sbrk+0x60>)
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a14:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <_sbrk+0x64>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d102      	bne.n	8001a22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <_sbrk+0x64>)
 8001a1e:	4a12      	ldr	r2, [pc, #72]	; (8001a68 <_sbrk+0x68>)
 8001a20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a22:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <_sbrk+0x64>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d207      	bcs.n	8001a40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a30:	f002 fca2 	bl	8004378 <__errno>
 8001a34:	4603      	mov	r3, r0
 8001a36:	220c      	movs	r2, #12
 8001a38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a3e:	e009      	b.n	8001a54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <_sbrk+0x64>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a46:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <_sbrk+0x64>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	4a05      	ldr	r2, [pc, #20]	; (8001a64 <_sbrk+0x64>)
 8001a50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a52:	68fb      	ldr	r3, [r7, #12]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20020000 	.word	0x20020000
 8001a60:	00000400 	.word	0x00000400
 8001a64:	2000046c 	.word	0x2000046c
 8001a68:	200004b0 	.word	0x200004b0

08001a6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <SystemInit+0x20>)
 8001a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a76:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <SystemInit+0x20>)
 8001a78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ac8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a94:	480d      	ldr	r0, [pc, #52]	; (8001acc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a96:	490e      	ldr	r1, [pc, #56]	; (8001ad0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a98:	4a0e      	ldr	r2, [pc, #56]	; (8001ad4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a9c:	e002      	b.n	8001aa4 <LoopCopyDataInit>

08001a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa2:	3304      	adds	r3, #4

08001aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa8:	d3f9      	bcc.n	8001a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aaa:	4a0b      	ldr	r2, [pc, #44]	; (8001ad8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001aac:	4c0b      	ldr	r4, [pc, #44]	; (8001adc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab0:	e001      	b.n	8001ab6 <LoopFillZerobss>

08001ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab4:	3204      	adds	r2, #4

08001ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab8:	d3fb      	bcc.n	8001ab2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001aba:	f7ff ffd7 	bl	8001a6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001abe:	f002 fc61 	bl	8004384 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ac2:	f7ff fa9b 	bl	8000ffc <main>
  bx  lr    
 8001ac6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ac8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad0:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 8001ad4:	08009214 	.word	0x08009214
  ldr r2, =_sbss
 8001ad8:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 8001adc:	200004ac 	.word	0x200004ac

08001ae0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ae0:	e7fe      	b.n	8001ae0 <ADC_IRQHandler>
	...

08001ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ae8:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <HAL_Init+0x40>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0d      	ldr	r2, [pc, #52]	; (8001b24 <HAL_Init+0x40>)
 8001aee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001af2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_Init+0x40>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <HAL_Init+0x40>)
 8001afa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001afe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b00:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <HAL_Init+0x40>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a07      	ldr	r2, [pc, #28]	; (8001b24 <HAL_Init+0x40>)
 8001b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b0c:	2003      	movs	r0, #3
 8001b0e:	f000 f8fc 	bl	8001d0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b12:	200f      	movs	r0, #15
 8001b14:	f7ff fe44 	bl	80017a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b18:	f7ff fda0 	bl	800165c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40023c00 	.word	0x40023c00

08001b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_IncTick+0x20>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <HAL_IncTick+0x24>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4413      	add	r3, r2
 8001b38:	4a04      	ldr	r2, [pc, #16]	; (8001b4c <HAL_IncTick+0x24>)
 8001b3a:	6013      	str	r3, [r2, #0]
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	2000000c 	.word	0x2000000c
 8001b4c:	20000470 	.word	0x20000470

08001b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return uwTick;
 8001b54:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <HAL_GetTick+0x14>)
 8001b56:	681b      	ldr	r3, [r3, #0]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20000470 	.word	0x20000470

08001b68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b70:	f7ff ffee 	bl	8001b50 <HAL_GetTick>
 8001b74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b80:	d005      	beq.n	8001b8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <HAL_Delay+0x44>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b8e:	bf00      	nop
 8001b90:	f7ff ffde 	bl	8001b50 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d8f7      	bhi.n	8001b90 <HAL_Delay+0x28>
  {
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	2000000c 	.word	0x2000000c

08001bb0 <__NVIC_SetPriorityGrouping>:
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be2:	4a04      	ldr	r2, [pc, #16]	; (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	60d3      	str	r3, [r2, #12]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_GetPriorityGrouping>:
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <__NVIC_GetPriorityGrouping+0x18>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	0a1b      	lsrs	r3, r3, #8
 8001c02:	f003 0307 	and.w	r3, r3, #7
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <__NVIC_EnableIRQ>:
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	db0b      	blt.n	8001c3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	f003 021f 	and.w	r2, r3, #31
 8001c2c:	4907      	ldr	r1, [pc, #28]	; (8001c4c <__NVIC_EnableIRQ+0x38>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	095b      	lsrs	r3, r3, #5
 8001c34:	2001      	movs	r0, #1
 8001c36:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000e100 	.word	0xe000e100

08001c50 <__NVIC_SetPriority>:
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	6039      	str	r1, [r7, #0]
 8001c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	db0a      	blt.n	8001c7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	490c      	ldr	r1, [pc, #48]	; (8001c9c <__NVIC_SetPriority+0x4c>)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	0112      	lsls	r2, r2, #4
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	440b      	add	r3, r1
 8001c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c78:	e00a      	b.n	8001c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	4908      	ldr	r1, [pc, #32]	; (8001ca0 <__NVIC_SetPriority+0x50>)
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	3b04      	subs	r3, #4
 8001c88:	0112      	lsls	r2, r2, #4
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	761a      	strb	r2, [r3, #24]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000e100 	.word	0xe000e100
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <NVIC_EncodePriority>:
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b089      	sub	sp, #36	; 0x24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f1c3 0307 	rsb	r3, r3, #7
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	bf28      	it	cs
 8001cc2:	2304      	movcs	r3, #4
 8001cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3304      	adds	r3, #4
 8001cca:	2b06      	cmp	r3, #6
 8001ccc:	d902      	bls.n	8001cd4 <NVIC_EncodePriority+0x30>
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3b03      	subs	r3, #3
 8001cd2:	e000      	b.n	8001cd6 <NVIC_EncodePriority+0x32>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf6:	43d9      	mvns	r1, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cfc:	4313      	orrs	r3, r2
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3724      	adds	r7, #36	; 0x24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff ff4c 	bl	8001bb0 <__NVIC_SetPriorityGrouping>
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
 8001d2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d32:	f7ff ff61 	bl	8001bf8 <__NVIC_GetPriorityGrouping>
 8001d36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	68b9      	ldr	r1, [r7, #8]
 8001d3c:	6978      	ldr	r0, [r7, #20]
 8001d3e:	f7ff ffb1 	bl	8001ca4 <NVIC_EncodePriority>
 8001d42:	4602      	mov	r2, r0
 8001d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d48:	4611      	mov	r1, r2
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff ff80 	bl	8001c50 <__NVIC_SetPriority>
}
 8001d50:	bf00      	nop
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff ff54 	bl	8001c14 <__NVIC_EnableIRQ>
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b089      	sub	sp, #36	; 0x24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
 8001d8e:	e16b      	b.n	8002068 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d90:	2201      	movs	r2, #1
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	4013      	ands	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	f040 815a 	bne.w	8002062 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d005      	beq.n	8001dc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d130      	bne.n	8001e28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	091b      	lsrs	r3, r3, #4
 8001e12:	f003 0201 	and.w	r2, r3, #1
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	2b03      	cmp	r3, #3
 8001e32:	d017      	beq.n	8001e64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	2203      	movs	r2, #3
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d123      	bne.n	8001eb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	08da      	lsrs	r2, r3, #3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3208      	adds	r2, #8
 8001e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	220f      	movs	r2, #15
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	691a      	ldr	r2, [r3, #16]
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	08da      	lsrs	r2, r3, #3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3208      	adds	r2, #8
 8001eb2:	69b9      	ldr	r1, [r7, #24]
 8001eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0203 	and.w	r2, r3, #3
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 80b4 	beq.w	8002062 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	4b60      	ldr	r3, [pc, #384]	; (8002080 <HAL_GPIO_Init+0x30c>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	4a5f      	ldr	r2, [pc, #380]	; (8002080 <HAL_GPIO_Init+0x30c>)
 8001f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f08:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0a:	4b5d      	ldr	r3, [pc, #372]	; (8002080 <HAL_GPIO_Init+0x30c>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f16:	4a5b      	ldr	r2, [pc, #364]	; (8002084 <HAL_GPIO_Init+0x310>)
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	089b      	lsrs	r3, r3, #2
 8001f1c:	3302      	adds	r3, #2
 8001f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	220f      	movs	r2, #15
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a52      	ldr	r2, [pc, #328]	; (8002088 <HAL_GPIO_Init+0x314>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d02b      	beq.n	8001f9a <HAL_GPIO_Init+0x226>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a51      	ldr	r2, [pc, #324]	; (800208c <HAL_GPIO_Init+0x318>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d025      	beq.n	8001f96 <HAL_GPIO_Init+0x222>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a50      	ldr	r2, [pc, #320]	; (8002090 <HAL_GPIO_Init+0x31c>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d01f      	beq.n	8001f92 <HAL_GPIO_Init+0x21e>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a4f      	ldr	r2, [pc, #316]	; (8002094 <HAL_GPIO_Init+0x320>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d019      	beq.n	8001f8e <HAL_GPIO_Init+0x21a>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a4e      	ldr	r2, [pc, #312]	; (8002098 <HAL_GPIO_Init+0x324>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d013      	beq.n	8001f8a <HAL_GPIO_Init+0x216>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a4d      	ldr	r2, [pc, #308]	; (800209c <HAL_GPIO_Init+0x328>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d00d      	beq.n	8001f86 <HAL_GPIO_Init+0x212>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a4c      	ldr	r2, [pc, #304]	; (80020a0 <HAL_GPIO_Init+0x32c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d007      	beq.n	8001f82 <HAL_GPIO_Init+0x20e>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a4b      	ldr	r2, [pc, #300]	; (80020a4 <HAL_GPIO_Init+0x330>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d101      	bne.n	8001f7e <HAL_GPIO_Init+0x20a>
 8001f7a:	2307      	movs	r3, #7
 8001f7c:	e00e      	b.n	8001f9c <HAL_GPIO_Init+0x228>
 8001f7e:	2308      	movs	r3, #8
 8001f80:	e00c      	b.n	8001f9c <HAL_GPIO_Init+0x228>
 8001f82:	2306      	movs	r3, #6
 8001f84:	e00a      	b.n	8001f9c <HAL_GPIO_Init+0x228>
 8001f86:	2305      	movs	r3, #5
 8001f88:	e008      	b.n	8001f9c <HAL_GPIO_Init+0x228>
 8001f8a:	2304      	movs	r3, #4
 8001f8c:	e006      	b.n	8001f9c <HAL_GPIO_Init+0x228>
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e004      	b.n	8001f9c <HAL_GPIO_Init+0x228>
 8001f92:	2302      	movs	r3, #2
 8001f94:	e002      	b.n	8001f9c <HAL_GPIO_Init+0x228>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <HAL_GPIO_Init+0x228>
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	69fa      	ldr	r2, [r7, #28]
 8001f9e:	f002 0203 	and.w	r2, r2, #3
 8001fa2:	0092      	lsls	r2, r2, #2
 8001fa4:	4093      	lsls	r3, r2
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fac:	4935      	ldr	r1, [pc, #212]	; (8002084 <HAL_GPIO_Init+0x310>)
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	089b      	lsrs	r3, r3, #2
 8001fb2:	3302      	adds	r3, #2
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fba:	4b3b      	ldr	r3, [pc, #236]	; (80020a8 <HAL_GPIO_Init+0x334>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fde:	4a32      	ldr	r2, [pc, #200]	; (80020a8 <HAL_GPIO_Init+0x334>)
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fe4:	4b30      	ldr	r3, [pc, #192]	; (80020a8 <HAL_GPIO_Init+0x334>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002008:	4a27      	ldr	r2, [pc, #156]	; (80020a8 <HAL_GPIO_Init+0x334>)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800200e:	4b26      	ldr	r3, [pc, #152]	; (80020a8 <HAL_GPIO_Init+0x334>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	43db      	mvns	r3, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4013      	ands	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002032:	4a1d      	ldr	r2, [pc, #116]	; (80020a8 <HAL_GPIO_Init+0x334>)
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002038:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <HAL_GPIO_Init+0x334>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	4313      	orrs	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800205c:	4a12      	ldr	r2, [pc, #72]	; (80020a8 <HAL_GPIO_Init+0x334>)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3301      	adds	r3, #1
 8002066:	61fb      	str	r3, [r7, #28]
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	2b0f      	cmp	r3, #15
 800206c:	f67f ae90 	bls.w	8001d90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002070:	bf00      	nop
 8002072:	bf00      	nop
 8002074:	3724      	adds	r7, #36	; 0x24
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	40023800 	.word	0x40023800
 8002084:	40013800 	.word	0x40013800
 8002088:	40020000 	.word	0x40020000
 800208c:	40020400 	.word	0x40020400
 8002090:	40020800 	.word	0x40020800
 8002094:	40020c00 	.word	0x40020c00
 8002098:	40021000 	.word	0x40021000
 800209c:	40021400 	.word	0x40021400
 80020a0:	40021800 	.word	0x40021800
 80020a4:	40021c00 	.word	0x40021c00
 80020a8:	40013c00 	.word	0x40013c00

080020ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	807b      	strh	r3, [r7, #2]
 80020b8:	4613      	mov	r3, r2
 80020ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020bc:	787b      	ldrb	r3, [r7, #1]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020c2:	887a      	ldrh	r2, [r7, #2]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020c8:	e003      	b.n	80020d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020ca:	887b      	ldrh	r3, [r7, #2]
 80020cc:	041a      	lsls	r2, r3, #16
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	619a      	str	r2, [r3, #24]
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e267      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d075      	beq.n	80021ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020fe:	4b88      	ldr	r3, [pc, #544]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	2b04      	cmp	r3, #4
 8002108:	d00c      	beq.n	8002124 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800210a:	4b85      	ldr	r3, [pc, #532]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002112:	2b08      	cmp	r3, #8
 8002114:	d112      	bne.n	800213c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002116:	4b82      	ldr	r3, [pc, #520]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002122:	d10b      	bne.n	800213c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002124:	4b7e      	ldr	r3, [pc, #504]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d05b      	beq.n	80021e8 <HAL_RCC_OscConfig+0x108>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d157      	bne.n	80021e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e242      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002144:	d106      	bne.n	8002154 <HAL_RCC_OscConfig+0x74>
 8002146:	4b76      	ldr	r3, [pc, #472]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a75      	ldr	r2, [pc, #468]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800214c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	e01d      	b.n	8002190 <HAL_RCC_OscConfig+0xb0>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800215c:	d10c      	bne.n	8002178 <HAL_RCC_OscConfig+0x98>
 800215e:	4b70      	ldr	r3, [pc, #448]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a6f      	ldr	r2, [pc, #444]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	4b6d      	ldr	r3, [pc, #436]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a6c      	ldr	r2, [pc, #432]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	e00b      	b.n	8002190 <HAL_RCC_OscConfig+0xb0>
 8002178:	4b69      	ldr	r3, [pc, #420]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a68      	ldr	r2, [pc, #416]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800217e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002182:	6013      	str	r3, [r2, #0]
 8002184:	4b66      	ldr	r3, [pc, #408]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a65      	ldr	r2, [pc, #404]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800218a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800218e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d013      	beq.n	80021c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002198:	f7ff fcda 	bl	8001b50 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021a0:	f7ff fcd6 	bl	8001b50 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b64      	cmp	r3, #100	; 0x64
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e207      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b2:	4b5b      	ldr	r3, [pc, #364]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0f0      	beq.n	80021a0 <HAL_RCC_OscConfig+0xc0>
 80021be:	e014      	b.n	80021ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c0:	f7ff fcc6 	bl	8001b50 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021c8:	f7ff fcc2 	bl	8001b50 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b64      	cmp	r3, #100	; 0x64
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e1f3      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021da:	4b51      	ldr	r3, [pc, #324]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0xe8>
 80021e6:	e000      	b.n	80021ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d063      	beq.n	80022be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021f6:	4b4a      	ldr	r3, [pc, #296]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00b      	beq.n	800221a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002202:	4b47      	ldr	r3, [pc, #284]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800220a:	2b08      	cmp	r3, #8
 800220c:	d11c      	bne.n	8002248 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800220e:	4b44      	ldr	r3, [pc, #272]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d116      	bne.n	8002248 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221a:	4b41      	ldr	r3, [pc, #260]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d005      	beq.n	8002232 <HAL_RCC_OscConfig+0x152>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d001      	beq.n	8002232 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e1c7      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002232:	4b3b      	ldr	r3, [pc, #236]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	4937      	ldr	r1, [pc, #220]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002242:	4313      	orrs	r3, r2
 8002244:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002246:	e03a      	b.n	80022be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d020      	beq.n	8002292 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002250:	4b34      	ldr	r3, [pc, #208]	; (8002324 <HAL_RCC_OscConfig+0x244>)
 8002252:	2201      	movs	r2, #1
 8002254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002256:	f7ff fc7b 	bl	8001b50 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800225e:	f7ff fc77 	bl	8001b50 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e1a8      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002270:	4b2b      	ldr	r3, [pc, #172]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0f0      	beq.n	800225e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800227c:	4b28      	ldr	r3, [pc, #160]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	4925      	ldr	r1, [pc, #148]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800228c:	4313      	orrs	r3, r2
 800228e:	600b      	str	r3, [r1, #0]
 8002290:	e015      	b.n	80022be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002292:	4b24      	ldr	r3, [pc, #144]	; (8002324 <HAL_RCC_OscConfig+0x244>)
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002298:	f7ff fc5a 	bl	8001b50 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022a0:	f7ff fc56 	bl	8001b50 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e187      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b2:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f0      	bne.n	80022a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d036      	beq.n	8002338 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d016      	beq.n	8002300 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022d2:	4b15      	ldr	r3, [pc, #84]	; (8002328 <HAL_RCC_OscConfig+0x248>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d8:	f7ff fc3a 	bl	8001b50 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022e0:	f7ff fc36 	bl	8001b50 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e167      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f2:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 80022f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0f0      	beq.n	80022e0 <HAL_RCC_OscConfig+0x200>
 80022fe:	e01b      	b.n	8002338 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002300:	4b09      	ldr	r3, [pc, #36]	; (8002328 <HAL_RCC_OscConfig+0x248>)
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002306:	f7ff fc23 	bl	8001b50 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800230c:	e00e      	b.n	800232c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800230e:	f7ff fc1f 	bl	8001b50 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d907      	bls.n	800232c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e150      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
 8002320:	40023800 	.word	0x40023800
 8002324:	42470000 	.word	0x42470000
 8002328:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800232c:	4b88      	ldr	r3, [pc, #544]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 800232e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1ea      	bne.n	800230e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 8097 	beq.w	8002474 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002346:	2300      	movs	r3, #0
 8002348:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800234a:	4b81      	ldr	r3, [pc, #516]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10f      	bne.n	8002376 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	4b7d      	ldr	r3, [pc, #500]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	4a7c      	ldr	r2, [pc, #496]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 8002360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002364:	6413      	str	r3, [r2, #64]	; 0x40
 8002366:	4b7a      	ldr	r3, [pc, #488]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002372:	2301      	movs	r3, #1
 8002374:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002376:	4b77      	ldr	r3, [pc, #476]	; (8002554 <HAL_RCC_OscConfig+0x474>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237e:	2b00      	cmp	r3, #0
 8002380:	d118      	bne.n	80023b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002382:	4b74      	ldr	r3, [pc, #464]	; (8002554 <HAL_RCC_OscConfig+0x474>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a73      	ldr	r2, [pc, #460]	; (8002554 <HAL_RCC_OscConfig+0x474>)
 8002388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800238e:	f7ff fbdf 	bl	8001b50 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002396:	f7ff fbdb 	bl	8001b50 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e10c      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a8:	4b6a      	ldr	r3, [pc, #424]	; (8002554 <HAL_RCC_OscConfig+0x474>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0f0      	beq.n	8002396 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d106      	bne.n	80023ca <HAL_RCC_OscConfig+0x2ea>
 80023bc:	4b64      	ldr	r3, [pc, #400]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c0:	4a63      	ldr	r2, [pc, #396]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	6713      	str	r3, [r2, #112]	; 0x70
 80023c8:	e01c      	b.n	8002404 <HAL_RCC_OscConfig+0x324>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b05      	cmp	r3, #5
 80023d0:	d10c      	bne.n	80023ec <HAL_RCC_OscConfig+0x30c>
 80023d2:	4b5f      	ldr	r3, [pc, #380]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d6:	4a5e      	ldr	r2, [pc, #376]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023d8:	f043 0304 	orr.w	r3, r3, #4
 80023dc:	6713      	str	r3, [r2, #112]	; 0x70
 80023de:	4b5c      	ldr	r3, [pc, #368]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e2:	4a5b      	ldr	r2, [pc, #364]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	6713      	str	r3, [r2, #112]	; 0x70
 80023ea:	e00b      	b.n	8002404 <HAL_RCC_OscConfig+0x324>
 80023ec:	4b58      	ldr	r3, [pc, #352]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f0:	4a57      	ldr	r2, [pc, #348]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023f2:	f023 0301 	bic.w	r3, r3, #1
 80023f6:	6713      	str	r3, [r2, #112]	; 0x70
 80023f8:	4b55      	ldr	r3, [pc, #340]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fc:	4a54      	ldr	r2, [pc, #336]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023fe:	f023 0304 	bic.w	r3, r3, #4
 8002402:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d015      	beq.n	8002438 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240c:	f7ff fba0 	bl	8001b50 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002412:	e00a      	b.n	800242a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002414:	f7ff fb9c 	bl	8001b50 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002422:	4293      	cmp	r3, r2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e0cb      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242a:	4b49      	ldr	r3, [pc, #292]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 800242c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0ee      	beq.n	8002414 <HAL_RCC_OscConfig+0x334>
 8002436:	e014      	b.n	8002462 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002438:	f7ff fb8a 	bl	8001b50 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243e:	e00a      	b.n	8002456 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002440:	f7ff fb86 	bl	8001b50 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	f241 3288 	movw	r2, #5000	; 0x1388
 800244e:	4293      	cmp	r3, r2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e0b5      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002456:	4b3e      	ldr	r3, [pc, #248]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 8002458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1ee      	bne.n	8002440 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002462:	7dfb      	ldrb	r3, [r7, #23]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d105      	bne.n	8002474 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002468:	4b39      	ldr	r3, [pc, #228]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	4a38      	ldr	r2, [pc, #224]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 800246e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002472:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80a1 	beq.w	80025c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800247e:	4b34      	ldr	r3, [pc, #208]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	2b08      	cmp	r3, #8
 8002488:	d05c      	beq.n	8002544 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	2b02      	cmp	r3, #2
 8002490:	d141      	bne.n	8002516 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002492:	4b31      	ldr	r3, [pc, #196]	; (8002558 <HAL_RCC_OscConfig+0x478>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7ff fb5a 	bl	8001b50 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a0:	f7ff fb56 	bl	8001b50 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e087      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b2:	4b27      	ldr	r3, [pc, #156]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69da      	ldr	r2, [r3, #28]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	019b      	lsls	r3, r3, #6
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d4:	085b      	lsrs	r3, r3, #1
 80024d6:	3b01      	subs	r3, #1
 80024d8:	041b      	lsls	r3, r3, #16
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	061b      	lsls	r3, r3, #24
 80024e2:	491b      	ldr	r1, [pc, #108]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024e8:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <HAL_RCC_OscConfig+0x478>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ee:	f7ff fb2f 	bl	8001b50 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f6:	f7ff fb2b 	bl	8001b50 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e05c      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002508:	4b11      	ldr	r3, [pc, #68]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0f0      	beq.n	80024f6 <HAL_RCC_OscConfig+0x416>
 8002514:	e054      	b.n	80025c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002516:	4b10      	ldr	r3, [pc, #64]	; (8002558 <HAL_RCC_OscConfig+0x478>)
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7ff fb18 	bl	8001b50 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002524:	f7ff fb14 	bl	8001b50 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e045      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f0      	bne.n	8002524 <HAL_RCC_OscConfig+0x444>
 8002542:	e03d      	b.n	80025c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d107      	bne.n	800255c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e038      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
 8002550:	40023800 	.word	0x40023800
 8002554:	40007000 	.word	0x40007000
 8002558:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800255c:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <HAL_RCC_OscConfig+0x4ec>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d028      	beq.n	80025bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002574:	429a      	cmp	r2, r3
 8002576:	d121      	bne.n	80025bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002582:	429a      	cmp	r2, r3
 8002584:	d11a      	bne.n	80025bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800258c:	4013      	ands	r3, r2
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002592:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002594:	4293      	cmp	r3, r2
 8002596:	d111      	bne.n	80025bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a2:	085b      	lsrs	r3, r3, #1
 80025a4:	3b01      	subs	r3, #1
 80025a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d107      	bne.n	80025bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d001      	beq.n	80025c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e000      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40023800 	.word	0x40023800

080025d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0cc      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025e4:	4b68      	ldr	r3, [pc, #416]	; (8002788 <HAL_RCC_ClockConfig+0x1b8>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d90c      	bls.n	800260c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	4b65      	ldr	r3, [pc, #404]	; (8002788 <HAL_RCC_ClockConfig+0x1b8>)
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fa:	4b63      	ldr	r3, [pc, #396]	; (8002788 <HAL_RCC_ClockConfig+0x1b8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	429a      	cmp	r2, r3
 8002606:	d001      	beq.n	800260c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e0b8      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d020      	beq.n	800265a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b00      	cmp	r3, #0
 8002622:	d005      	beq.n	8002630 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002624:	4b59      	ldr	r3, [pc, #356]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	4a58      	ldr	r2, [pc, #352]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800262e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0308 	and.w	r3, r3, #8
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800263c:	4b53      	ldr	r3, [pc, #332]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	4a52      	ldr	r2, [pc, #328]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002642:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002646:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002648:	4b50      	ldr	r3, [pc, #320]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	494d      	ldr	r1, [pc, #308]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002656:	4313      	orrs	r3, r2
 8002658:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d044      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d107      	bne.n	800267e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266e:	4b47      	ldr	r3, [pc, #284]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d119      	bne.n	80026ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e07f      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d003      	beq.n	800268e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800268a:	2b03      	cmp	r3, #3
 800268c:	d107      	bne.n	800269e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268e:	4b3f      	ldr	r3, [pc, #252]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d109      	bne.n	80026ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e06f      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269e:	4b3b      	ldr	r3, [pc, #236]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e067      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ae:	4b37      	ldr	r3, [pc, #220]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f023 0203 	bic.w	r2, r3, #3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	4934      	ldr	r1, [pc, #208]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026c0:	f7ff fa46 	bl	8001b50 <HAL_GetTick>
 80026c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c6:	e00a      	b.n	80026de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c8:	f7ff fa42 	bl	8001b50 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e04f      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026de:	4b2b      	ldr	r3, [pc, #172]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 020c 	and.w	r2, r3, #12
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d1eb      	bne.n	80026c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026f0:	4b25      	ldr	r3, [pc, #148]	; (8002788 <HAL_RCC_ClockConfig+0x1b8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d20c      	bcs.n	8002718 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b22      	ldr	r3, [pc, #136]	; (8002788 <HAL_RCC_ClockConfig+0x1b8>)
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002706:	4b20      	ldr	r3, [pc, #128]	; (8002788 <HAL_RCC_ClockConfig+0x1b8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d001      	beq.n	8002718 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e032      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d008      	beq.n	8002736 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002724:	4b19      	ldr	r3, [pc, #100]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	4916      	ldr	r1, [pc, #88]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	4313      	orrs	r3, r2
 8002734:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d009      	beq.n	8002756 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002742:	4b12      	ldr	r3, [pc, #72]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	490e      	ldr	r1, [pc, #56]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	4313      	orrs	r3, r2
 8002754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002756:	f000 f821 	bl	800279c <HAL_RCC_GetSysClockFreq>
 800275a:	4602      	mov	r2, r0
 800275c:	4b0b      	ldr	r3, [pc, #44]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	091b      	lsrs	r3, r3, #4
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	490a      	ldr	r1, [pc, #40]	; (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 8002768:	5ccb      	ldrb	r3, [r1, r3]
 800276a:	fa22 f303 	lsr.w	r3, r2, r3
 800276e:	4a09      	ldr	r2, [pc, #36]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002772:	4b09      	ldr	r3, [pc, #36]	; (8002798 <HAL_RCC_ClockConfig+0x1c8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff f812 	bl	80017a0 <HAL_InitTick>

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40023c00 	.word	0x40023c00
 800278c:	40023800 	.word	0x40023800
 8002790:	08008bec 	.word	0x08008bec
 8002794:	20000004 	.word	0x20000004
 8002798:	20000008 	.word	0x20000008

0800279c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800279c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027a0:	b094      	sub	sp, #80	; 0x50
 80027a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	647b      	str	r3, [r7, #68]	; 0x44
 80027a8:	2300      	movs	r3, #0
 80027aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027ac:	2300      	movs	r3, #0
 80027ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027b4:	4b79      	ldr	r3, [pc, #484]	; (800299c <HAL_RCC_GetSysClockFreq+0x200>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 030c 	and.w	r3, r3, #12
 80027bc:	2b08      	cmp	r3, #8
 80027be:	d00d      	beq.n	80027dc <HAL_RCC_GetSysClockFreq+0x40>
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	f200 80e1 	bhi.w	8002988 <HAL_RCC_GetSysClockFreq+0x1ec>
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <HAL_RCC_GetSysClockFreq+0x34>
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d003      	beq.n	80027d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80027ce:	e0db      	b.n	8002988 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027d0:	4b73      	ldr	r3, [pc, #460]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80027d2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80027d4:	e0db      	b.n	800298e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027d6:	4b73      	ldr	r3, [pc, #460]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80027d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027da:	e0d8      	b.n	800298e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027dc:	4b6f      	ldr	r3, [pc, #444]	; (800299c <HAL_RCC_GetSysClockFreq+0x200>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027e4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027e6:	4b6d      	ldr	r3, [pc, #436]	; (800299c <HAL_RCC_GetSysClockFreq+0x200>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d063      	beq.n	80028ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027f2:	4b6a      	ldr	r3, [pc, #424]	; (800299c <HAL_RCC_GetSysClockFreq+0x200>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	099b      	lsrs	r3, r3, #6
 80027f8:	2200      	movs	r2, #0
 80027fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80027fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80027fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002804:	633b      	str	r3, [r7, #48]	; 0x30
 8002806:	2300      	movs	r3, #0
 8002808:	637b      	str	r3, [r7, #52]	; 0x34
 800280a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800280e:	4622      	mov	r2, r4
 8002810:	462b      	mov	r3, r5
 8002812:	f04f 0000 	mov.w	r0, #0
 8002816:	f04f 0100 	mov.w	r1, #0
 800281a:	0159      	lsls	r1, r3, #5
 800281c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002820:	0150      	lsls	r0, r2, #5
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4621      	mov	r1, r4
 8002828:	1a51      	subs	r1, r2, r1
 800282a:	6139      	str	r1, [r7, #16]
 800282c:	4629      	mov	r1, r5
 800282e:	eb63 0301 	sbc.w	r3, r3, r1
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002840:	4659      	mov	r1, fp
 8002842:	018b      	lsls	r3, r1, #6
 8002844:	4651      	mov	r1, sl
 8002846:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800284a:	4651      	mov	r1, sl
 800284c:	018a      	lsls	r2, r1, #6
 800284e:	4651      	mov	r1, sl
 8002850:	ebb2 0801 	subs.w	r8, r2, r1
 8002854:	4659      	mov	r1, fp
 8002856:	eb63 0901 	sbc.w	r9, r3, r1
 800285a:	f04f 0200 	mov.w	r2, #0
 800285e:	f04f 0300 	mov.w	r3, #0
 8002862:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002866:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800286a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800286e:	4690      	mov	r8, r2
 8002870:	4699      	mov	r9, r3
 8002872:	4623      	mov	r3, r4
 8002874:	eb18 0303 	adds.w	r3, r8, r3
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	462b      	mov	r3, r5
 800287c:	eb49 0303 	adc.w	r3, r9, r3
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	f04f 0300 	mov.w	r3, #0
 800288a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800288e:	4629      	mov	r1, r5
 8002890:	024b      	lsls	r3, r1, #9
 8002892:	4621      	mov	r1, r4
 8002894:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002898:	4621      	mov	r1, r4
 800289a:	024a      	lsls	r2, r1, #9
 800289c:	4610      	mov	r0, r2
 800289e:	4619      	mov	r1, r3
 80028a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028a2:	2200      	movs	r2, #0
 80028a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80028a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028ac:	f7fe f9d6 	bl	8000c5c <__aeabi_uldivmod>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4613      	mov	r3, r2
 80028b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028b8:	e058      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ba:	4b38      	ldr	r3, [pc, #224]	; (800299c <HAL_RCC_GetSysClockFreq+0x200>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	099b      	lsrs	r3, r3, #6
 80028c0:	2200      	movs	r2, #0
 80028c2:	4618      	mov	r0, r3
 80028c4:	4611      	mov	r1, r2
 80028c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028ca:	623b      	str	r3, [r7, #32]
 80028cc:	2300      	movs	r3, #0
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
 80028d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028d4:	4642      	mov	r2, r8
 80028d6:	464b      	mov	r3, r9
 80028d8:	f04f 0000 	mov.w	r0, #0
 80028dc:	f04f 0100 	mov.w	r1, #0
 80028e0:	0159      	lsls	r1, r3, #5
 80028e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028e6:	0150      	lsls	r0, r2, #5
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	4641      	mov	r1, r8
 80028ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80028f2:	4649      	mov	r1, r9
 80028f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002904:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002908:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800290c:	ebb2 040a 	subs.w	r4, r2, sl
 8002910:	eb63 050b 	sbc.w	r5, r3, fp
 8002914:	f04f 0200 	mov.w	r2, #0
 8002918:	f04f 0300 	mov.w	r3, #0
 800291c:	00eb      	lsls	r3, r5, #3
 800291e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002922:	00e2      	lsls	r2, r4, #3
 8002924:	4614      	mov	r4, r2
 8002926:	461d      	mov	r5, r3
 8002928:	4643      	mov	r3, r8
 800292a:	18e3      	adds	r3, r4, r3
 800292c:	603b      	str	r3, [r7, #0]
 800292e:	464b      	mov	r3, r9
 8002930:	eb45 0303 	adc.w	r3, r5, r3
 8002934:	607b      	str	r3, [r7, #4]
 8002936:	f04f 0200 	mov.w	r2, #0
 800293a:	f04f 0300 	mov.w	r3, #0
 800293e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002942:	4629      	mov	r1, r5
 8002944:	028b      	lsls	r3, r1, #10
 8002946:	4621      	mov	r1, r4
 8002948:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800294c:	4621      	mov	r1, r4
 800294e:	028a      	lsls	r2, r1, #10
 8002950:	4610      	mov	r0, r2
 8002952:	4619      	mov	r1, r3
 8002954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002956:	2200      	movs	r2, #0
 8002958:	61bb      	str	r3, [r7, #24]
 800295a:	61fa      	str	r2, [r7, #28]
 800295c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002960:	f7fe f97c 	bl	8000c5c <__aeabi_uldivmod>
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	4613      	mov	r3, r2
 800296a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800296c:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HAL_RCC_GetSysClockFreq+0x200>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	0c1b      	lsrs	r3, r3, #16
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	3301      	adds	r3, #1
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800297c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800297e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002980:	fbb2 f3f3 	udiv	r3, r2, r3
 8002984:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002986:	e002      	b.n	800298e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002988:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800298a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800298c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800298e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002990:	4618      	mov	r0, r3
 8002992:	3750      	adds	r7, #80	; 0x50
 8002994:	46bd      	mov	sp, r7
 8002996:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800
 80029a0:	00f42400 	.word	0x00f42400
 80029a4:	007a1200 	.word	0x007a1200

080029a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029ac:	4b03      	ldr	r3, [pc, #12]	; (80029bc <HAL_RCC_GetHCLKFreq+0x14>)
 80029ae:	681b      	ldr	r3, [r3, #0]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	20000004 	.word	0x20000004

080029c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029c4:	f7ff fff0 	bl	80029a8 <HAL_RCC_GetHCLKFreq>
 80029c8:	4602      	mov	r2, r0
 80029ca:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	0a9b      	lsrs	r3, r3, #10
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	4903      	ldr	r1, [pc, #12]	; (80029e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029d6:	5ccb      	ldrb	r3, [r1, r3]
 80029d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029dc:	4618      	mov	r0, r3
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40023800 	.word	0x40023800
 80029e4:	08008bfc 	.word	0x08008bfc

080029e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029ec:	f7ff ffdc 	bl	80029a8 <HAL_RCC_GetHCLKFreq>
 80029f0:	4602      	mov	r2, r0
 80029f2:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	0b5b      	lsrs	r3, r3, #13
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	4903      	ldr	r1, [pc, #12]	; (8002a0c <HAL_RCC_GetPCLK2Freq+0x24>)
 80029fe:	5ccb      	ldrb	r3, [r1, r3]
 8002a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	08008bfc 	.word	0x08008bfc

08002a10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	220f      	movs	r2, #15
 8002a1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a20:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <HAL_RCC_GetClockConfig+0x5c>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 0203 	and.w	r2, r3, #3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a2c:	4b0f      	ldr	r3, [pc, #60]	; (8002a6c <HAL_RCC_GetClockConfig+0x5c>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a38:	4b0c      	ldr	r3, [pc, #48]	; (8002a6c <HAL_RCC_GetClockConfig+0x5c>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a44:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <HAL_RCC_GetClockConfig+0x5c>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	08db      	lsrs	r3, r3, #3
 8002a4a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a52:	4b07      	ldr	r3, [pc, #28]	; (8002a70 <HAL_RCC_GetClockConfig+0x60>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0207 	and.w	r2, r3, #7
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	601a      	str	r2, [r3, #0]
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40023c00 	.word	0x40023c00

08002a74 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d105      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d035      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a9c:	4b62      	ldr	r3, [pc, #392]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002aa2:	f7ff f855 	bl	8001b50 <HAL_GetTick>
 8002aa6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002aa8:	e008      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002aaa:	f7ff f851 	bl	8001b50 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e0b0      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002abc:	4b5b      	ldr	r3, [pc, #364]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1f0      	bne.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	019a      	lsls	r2, r3, #6
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	071b      	lsls	r3, r3, #28
 8002ad4:	4955      	ldr	r1, [pc, #340]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002adc:	4b52      	ldr	r3, [pc, #328]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ae2:	f7ff f835 	bl	8001b50 <HAL_GetTick>
 8002ae6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ae8:	e008      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002aea:	f7ff f831 	bl	8001b50 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e090      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002afc:	4b4b      	ldr	r3, [pc, #300]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f0      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 8083 	beq.w	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	4b44      	ldr	r3, [pc, #272]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	4a43      	ldr	r2, [pc, #268]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b24:	6413      	str	r3, [r2, #64]	; 0x40
 8002b26:	4b41      	ldr	r3, [pc, #260]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002b32:	4b3f      	ldr	r3, [pc, #252]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a3e      	ldr	r2, [pc, #248]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b3c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b3e:	f7ff f807 	bl	8001b50 <HAL_GetTick>
 8002b42:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b44:	e008      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b46:	f7ff f803 	bl	8001b50 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e062      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b58:	4b35      	ldr	r3, [pc, #212]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0f0      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b64:	4b31      	ldr	r3, [pc, #196]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b6c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d02f      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d028      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b82:	4b2a      	ldr	r3, [pc, #168]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b8a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b8c:	4b29      	ldr	r3, [pc, #164]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b92:	4b28      	ldr	r3, [pc, #160]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002b98:	4a24      	ldr	r2, [pc, #144]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b9e:	4b23      	ldr	r3, [pc, #140]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d114      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002baa:	f7fe ffd1 	bl	8001b50 <HAL_GetTick>
 8002bae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb0:	e00a      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bb2:	f7fe ffcd 	bl	8001b50 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e02a      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc8:	4b18      	ldr	r3, [pc, #96]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0ee      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002be0:	d10d      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002be2:	4b12      	ldr	r3, [pc, #72]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002bf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bf6:	490d      	ldr	r1, [pc, #52]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	608b      	str	r3, [r1, #8]
 8002bfc:	e005      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002bfe:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	4a0a      	ldr	r2, [pc, #40]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c04:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c08:	6093      	str	r3, [r2, #8]
 8002c0a:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c16:	4905      	ldr	r1, [pc, #20]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	42470068 	.word	0x42470068
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40007000 	.word	0x40007000
 8002c34:	42470e40 	.word	0x42470e40

08002c38 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e066      	b.n	8002d1c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	7f5b      	ldrb	r3, [r3, #29]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d105      	bne.n	8002c64 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7fe fd24 	bl	80016ac <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	22ca      	movs	r2, #202	; 0xca
 8002c70:	625a      	str	r2, [r3, #36]	; 0x24
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2253      	movs	r2, #83	; 0x53
 8002c78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 fc5e 	bl	800353c <RTC_EnterInitMode>
 8002c80:	4603      	mov	r3, r0
 8002c82:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d12c      	bne.n	8002ce4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6812      	ldr	r2, [r2, #0]
 8002c94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002c98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c9c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6899      	ldr	r1, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	68d2      	ldr	r2, [r2, #12]
 8002cc4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6919      	ldr	r1, [r3, #16]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	041a      	lsls	r2, r3, #16
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 fc65 	bl	80035aa <RTC_ExitInitMode>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d113      	bne.n	8002d12 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cf8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699a      	ldr	r2, [r3, #24]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	22ff      	movs	r2, #255	; 0xff
 8002d18:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d24:	b590      	push	{r4, r7, lr}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	7f1b      	ldrb	r3, [r3, #28]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_RTC_SetTime+0x1c>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e087      	b.n	8002e50 <HAL_RTC_SetTime+0x12c>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2201      	movs	r2, #1
 8002d44:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2202      	movs	r2, #2
 8002d4a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d126      	bne.n	8002da0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d102      	bne.n	8002d66 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2200      	movs	r2, #0
 8002d64:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 fc42 	bl	80035f4 <RTC_ByteToBcd2>
 8002d70:	4603      	mov	r3, r0
 8002d72:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	785b      	ldrb	r3, [r3, #1]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 fc3b 	bl	80035f4 <RTC_ByteToBcd2>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002d82:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	789b      	ldrb	r3, [r3, #2]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 fc33 	bl	80035f4 <RTC_ByteToBcd2>
 8002d8e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002d90:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	78db      	ldrb	r3, [r3, #3]
 8002d98:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	e018      	b.n	8002dd2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d102      	bne.n	8002db4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2200      	movs	r2, #0
 8002db2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	785b      	ldrb	r3, [r3, #1]
 8002dbe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002dc0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002dc6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	78db      	ldrb	r3, [r3, #3]
 8002dcc:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	22ca      	movs	r2, #202	; 0xca
 8002dd8:	625a      	str	r2, [r3, #36]	; 0x24
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2253      	movs	r2, #83	; 0x53
 8002de0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 fbaa 	bl	800353c <RTC_EnterInitMode>
 8002de8:	4603      	mov	r3, r0
 8002dea:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002dec:	7cfb      	ldrb	r3, [r7, #19]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d120      	bne.n	8002e34 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002dfc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002e00:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e10:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6899      	ldr	r1, [r3, #8]
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	431a      	orrs	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f000 fbbd 	bl	80035aa <RTC_ExitInitMode>
 8002e30:	4603      	mov	r3, r0
 8002e32:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002e34:	7cfb      	ldrb	r3, [r7, #19]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d102      	bne.n	8002e40 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	22ff      	movs	r2, #255	; 0xff
 8002e46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	771a      	strb	r2, [r3, #28]

  return status;
 8002e4e:	7cfb      	ldrb	r3, [r7, #19]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	371c      	adds	r7, #28
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd90      	pop	{r4, r7, pc}

08002e58 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002e8a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002e8e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	0c1b      	lsrs	r3, r3, #16
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	0a1b      	lsrs	r3, r3, #8
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	0d9b      	lsrs	r3, r3, #22
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	b2da      	uxtb	r2, r3
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d11a      	bne.n	8002f0a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 fba8 	bl	800362e <RTC_Bcd2ToByte>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	785b      	ldrb	r3, [r3, #1]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 fb9f 	bl	800362e <RTC_Bcd2ToByte>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	789b      	ldrb	r3, [r3, #2]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 fb96 	bl	800362e <RTC_Bcd2ToByte>
 8002f02:	4603      	mov	r3, r0
 8002f04:	461a      	mov	r2, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002f14:	b590      	push	{r4, r7, lr}
 8002f16:	b087      	sub	sp, #28
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	7f1b      	ldrb	r3, [r3, #28]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d101      	bne.n	8002f30 <HAL_RTC_SetDate+0x1c>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	e071      	b.n	8003014 <HAL_RTC_SetDate+0x100>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2201      	movs	r2, #1
 8002f34:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2202      	movs	r2, #2
 8002f3a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10e      	bne.n	8002f60 <HAL_RTC_SetDate+0x4c>
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	785b      	ldrb	r3, [r3, #1]
 8002f46:	f003 0310 	and.w	r3, r3, #16
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d008      	beq.n	8002f60 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	785b      	ldrb	r3, [r3, #1]
 8002f52:	f023 0310 	bic.w	r3, r3, #16
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	330a      	adds	r3, #10
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d11c      	bne.n	8002fa0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	78db      	ldrb	r3, [r3, #3]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 fb42 	bl	80035f4 <RTC_ByteToBcd2>
 8002f70:	4603      	mov	r3, r0
 8002f72:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	785b      	ldrb	r3, [r3, #1]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 fb3b 	bl	80035f4 <RTC_ByteToBcd2>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002f82:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	789b      	ldrb	r3, [r3, #2]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 fb33 	bl	80035f4 <RTC_ByteToBcd2>
 8002f8e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002f90:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	e00e      	b.n	8002fbe <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	78db      	ldrb	r3, [r3, #3]
 8002fa4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	785b      	ldrb	r3, [r3, #1]
 8002faa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002fac:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002fb2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	22ca      	movs	r2, #202	; 0xca
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2253      	movs	r2, #83	; 0x53
 8002fcc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 fab4 	bl	800353c <RTC_EnterInitMode>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002fd8:	7cfb      	ldrb	r3, [r7, #19]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002fe8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002fec:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 fadb 	bl	80035aa <RTC_ExitInitMode>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002ff8:	7cfb      	ldrb	r3, [r7, #19]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d102      	bne.n	8003004 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2201      	movs	r2, #1
 8003002:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	22ff      	movs	r2, #255	; 0xff
 800300a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	771a      	strb	r2, [r3, #28]

  return status;
 8003012:	7cfb      	ldrb	r3, [r7, #19]
}
 8003014:	4618      	mov	r0, r3
 8003016:	371c      	adds	r7, #28
 8003018:	46bd      	mov	sp, r7
 800301a:	bd90      	pop	{r4, r7, pc}

0800301c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003036:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800303a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	0c1b      	lsrs	r3, r3, #16
 8003040:	b2da      	uxtb	r2, r3
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	0a1b      	lsrs	r3, r3, #8
 800304a:	b2db      	uxtb	r3, r3
 800304c:	f003 031f 	and.w	r3, r3, #31
 8003050:	b2da      	uxtb	r2, r3
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	b2db      	uxtb	r3, r3
 800305a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800305e:	b2da      	uxtb	r2, r3
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	0b5b      	lsrs	r3, r3, #13
 8003068:	b2db      	uxtb	r3, r3
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	b2da      	uxtb	r2, r3
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d11a      	bne.n	80030b0 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	78db      	ldrb	r3, [r3, #3]
 800307e:	4618      	mov	r0, r3
 8003080:	f000 fad5 	bl	800362e <RTC_Bcd2ToByte>
 8003084:	4603      	mov	r3, r0
 8003086:	461a      	mov	r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	785b      	ldrb	r3, [r3, #1]
 8003090:	4618      	mov	r0, r3
 8003092:	f000 facc 	bl	800362e <RTC_Bcd2ToByte>
 8003096:	4603      	mov	r3, r0
 8003098:	461a      	mov	r2, r3
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	789b      	ldrb	r3, [r3, #2]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 fac3 	bl	800362e <RTC_Bcd2ToByte>
 80030a8:	4603      	mov	r3, r0
 80030aa:	461a      	mov	r2, r3
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
	...

080030bc <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80030bc:	b590      	push	{r4, r7, lr}
 80030be:	b089      	sub	sp, #36	; 0x24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80030c8:	4b9a      	ldr	r3, [pc, #616]	; (8003334 <HAL_RTC_SetAlarm_IT+0x278>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a9a      	ldr	r2, [pc, #616]	; (8003338 <HAL_RTC_SetAlarm_IT+0x27c>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	0adb      	lsrs	r3, r3, #11
 80030d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030d8:	fb02 f303 	mul.w	r3, r2, r3
 80030dc:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	7f1b      	ldrb	r3, [r3, #28]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <HAL_RTC_SetAlarm_IT+0x36>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e11c      	b.n	800332c <HAL_RTC_SetAlarm_IT+0x270>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2201      	movs	r2, #1
 80030f6:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2202      	movs	r2, #2
 80030fc:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d137      	bne.n	8003174 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310e:	2b00      	cmp	r3, #0
 8003110:	d102      	bne.n	8003118 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	2200      	movs	r2, #0
 8003116:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f000 fa69 	bl	80035f4 <RTC_ByteToBcd2>
 8003122:	4603      	mov	r3, r0
 8003124:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	785b      	ldrb	r3, [r3, #1]
 800312a:	4618      	mov	r0, r3
 800312c:	f000 fa62 	bl	80035f4 <RTC_ByteToBcd2>
 8003130:	4603      	mov	r3, r0
 8003132:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003134:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	789b      	ldrb	r3, [r3, #2]
 800313a:	4618      	mov	r0, r3
 800313c:	f000 fa5a 	bl	80035f4 <RTC_ByteToBcd2>
 8003140:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003142:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	78db      	ldrb	r3, [r3, #3]
 800314a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800314c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003156:	4618      	mov	r0, r3
 8003158:	f000 fa4c 	bl	80035f4 <RTC_ByteToBcd2>
 800315c:	4603      	mov	r3, r0
 800315e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8003160:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003168:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800316e:	4313      	orrs	r3, r2
 8003170:	61fb      	str	r3, [r7, #28]
 8003172:	e023      	b.n	80031bc <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317e:	2b00      	cmp	r3, #0
 8003180:	d102      	bne.n	8003188 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2200      	movs	r2, #0
 8003186:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	785b      	ldrb	r3, [r3, #1]
 8003192:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003194:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800319a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	78db      	ldrb	r3, [r3, #3]
 80031a0:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80031a2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031aa:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80031ac:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80031b2:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80031c4:	4313      	orrs	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	22ca      	movs	r2, #202	; 0xca
 80031ce:	625a      	str	r2, [r3, #36]	; 0x24
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2253      	movs	r2, #83	; 0x53
 80031d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031e0:	d141      	bne.n	8003266 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031f0:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003202:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	1e5a      	subs	r2, r3, #1
 8003208:	617a      	str	r2, [r7, #20]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10b      	bne.n	8003226 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	22ff      	movs	r2, #255	; 0xff
 8003214:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2203      	movs	r2, #3
 800321a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e082      	b.n	800332c <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0e7      	beq.n	8003204 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	69fa      	ldr	r2, [r7, #28]
 800323a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003252:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003262:	609a      	str	r2, [r3, #8]
 8003264:	e04b      	b.n	80032fe <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003274:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	b2da      	uxtb	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003286:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003288:	4b2a      	ldr	r3, [pc, #168]	; (8003334 <HAL_RTC_SetAlarm_IT+0x278>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a2a      	ldr	r2, [pc, #168]	; (8003338 <HAL_RTC_SetAlarm_IT+0x27c>)
 800328e:	fba2 2303 	umull	r2, r3, r2, r3
 8003292:	0adb      	lsrs	r3, r3, #11
 8003294:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003298:	fb02 f303 	mul.w	r3, r2, r3
 800329c:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	1e5a      	subs	r2, r3, #1
 80032a2:	617a      	str	r2, [r7, #20]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10b      	bne.n	80032c0 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	22ff      	movs	r2, #255	; 0xff
 80032ae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2203      	movs	r2, #3
 80032b4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e035      	b.n	800332c <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0e7      	beq.n	800329e <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69fa      	ldr	r2, [r7, #28]
 80032d4:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ec:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032fc:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80032fe:	4b0f      	ldr	r3, [pc, #60]	; (800333c <HAL_RTC_SetAlarm_IT+0x280>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a0e      	ldr	r2, [pc, #56]	; (800333c <HAL_RTC_SetAlarm_IT+0x280>)
 8003304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003308:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800330a:	4b0c      	ldr	r3, [pc, #48]	; (800333c <HAL_RTC_SetAlarm_IT+0x280>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	4a0b      	ldr	r2, [pc, #44]	; (800333c <HAL_RTC_SetAlarm_IT+0x280>)
 8003310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003314:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	22ff      	movs	r2, #255	; 0xff
 800331c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2201      	movs	r2, #1
 8003322:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3724      	adds	r7, #36	; 0x24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd90      	pop	{r4, r7, pc}
 8003334:	20000004 	.word	0x20000004
 8003338:	10624dd3 	.word	0x10624dd3
 800333c:	40013c00 	.word	0x40013c00

08003340 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
 800334c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 800334e:	2300      	movs	r3, #0
 8003350:	617b      	str	r3, [r7, #20]
  uint32_t subsecondtmpreg = 0U;
 8003352:	2300      	movs	r3, #0
 8003354:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800335c:	d10e      	bne.n	800337c <HAL_RTC_GetAlarm+0x3c>
  {
    sAlarm->Alarm = RTC_ALARM_A;
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003364:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003374:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003378:	613b      	str	r3, [r7, #16]
 800337a:	e00d      	b.n	8003398 <HAL_RTC_GetAlarm+0x58>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003382:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003392:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003396:	613b      	str	r3, [r7, #16]
  }

  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours      = (uint8_t) ((tmpreg & (RTC_ALRMAR_HT  | RTC_ALRMAR_HU))  >> RTC_ALRMAR_HU_Pos);
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	0c1b      	lsrs	r3, r3, #16
 800339c:	b2db      	uxtb	r3, r3
 800339e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes    = (uint8_t) ((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	0a1b      	lsrs	r3, r3, #8
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds    = (uint8_t) ( tmpreg & (RTC_ALRMAR_ST  | RTC_ALRMAR_SU));
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint8_t) ((tmpreg & RTC_ALRMAR_PM)                     >> RTC_TR_PM_Pos);
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	0d9b      	lsrs	r3, r3, #22
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	70da      	strb	r2, [r3, #3]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	605a      	str	r2, [r3, #4]
  sAlarm->AlarmDateWeekDay     = (uint8_t) ((tmpreg & (RTC_ALRMAR_DT  | RTC_ALRMAR_DU))  >> RTC_ALRMAR_DU_Pos);
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	0e1b      	lsrs	r3, r3, #24
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f883 2020 	strb.w	r2, [r3, #32]
  sAlarm->AlarmDateWeekDaySel  = (uint32_t) (tmpreg & RTC_ALRMAR_WDSEL);
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask            = (uint32_t) (tmpreg & RTC_ALARMMASK_ALL);
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	615a      	str	r2, [r3, #20]

  if (Format == RTC_FORMAT_BIN)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d125      	bne.n	8003454 <HAL_RTC_GetAlarm+0x114>
  {
    sAlarm->AlarmTime.Hours   = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f000 f90e 	bl	800362e <RTC_Bcd2ToByte>
 8003412:	4603      	mov	r3, r0
 8003414:	461a      	mov	r2, r3
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	785b      	ldrb	r3, [r3, #1]
 800341e:	4618      	mov	r0, r3
 8003420:	f000 f905 	bl	800362e <RTC_Bcd2ToByte>
 8003424:	4603      	mov	r3, r0
 8003426:	461a      	mov	r2, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	789b      	ldrb	r3, [r3, #2]
 8003430:	4618      	mov	r0, r3
 8003432:	f000 f8fc 	bl	800362e <RTC_Bcd2ToByte>
 8003436:	4603      	mov	r3, r0
 8003438:	461a      	mov	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay  = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003444:	4618      	mov	r0, r3
 8003446:	f000 f8f2 	bl	800362e <RTC_Bcd2ToByte>
 800344a:	4603      	mov	r3, r0
 800344c:	461a      	mov	r2, r3
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	f883 2020 	strb.w	r2, [r3, #32]
  }

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
	...

08003460 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d012      	beq.n	800349c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00b      	beq.n	800349c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7fe f8b3 	bl	80015f0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	b2da      	uxtb	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800349a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d012      	beq.n	80034d0 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00b      	beq.n	80034d0 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f8d4 	bl	8003666 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f462 7220 	orn	r2, r2, #640	; 0x280
 80034ce:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80034d0:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <HAL_RTC_AlarmIRQHandler+0x88>)
 80034d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034d6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	775a      	strb	r2, [r3, #29]
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40013c00 	.word	0x40013c00

080034ec <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003506:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003508:	f7fe fb22 	bl	8001b50 <HAL_GetTick>
 800350c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800350e:	e009      	b.n	8003524 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003510:	f7fe fb1e 	bl	8001b50 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800351e:	d901      	bls.n	8003524 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e007      	b.n	8003534 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f003 0320 	and.w	r3, r3, #32
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0ee      	beq.n	8003510 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003548:	2300      	movs	r3, #0
 800354a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d122      	bne.n	80035a0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003568:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800356a:	f7fe faf1 	bl	8001b50 <HAL_GetTick>
 800356e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003570:	e00c      	b.n	800358c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003572:	f7fe faed 	bl	8001b50 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003580:	d904      	bls.n	800358c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2204      	movs	r2, #4
 8003586:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003596:	2b00      	cmp	r3, #0
 8003598:	d102      	bne.n	80035a0 <RTC_EnterInitMode+0x64>
 800359a:	7bfb      	ldrb	r3, [r7, #15]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d1e8      	bne.n	8003572 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b084      	sub	sp, #16
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035c4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 0320 	and.w	r3, r3, #32
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10a      	bne.n	80035ea <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7ff ff89 	bl	80034ec <HAL_RTC_WaitForSynchro>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d004      	beq.n	80035ea <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2204      	movs	r2, #4
 80035e4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80035fe:	2300      	movs	r3, #0
 8003600:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8003602:	e005      	b.n	8003610 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003604:	7bfb      	ldrb	r3, [r7, #15]
 8003606:	3301      	adds	r3, #1
 8003608:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	3b0a      	subs	r3, #10
 800360e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003610:	79fb      	ldrb	r3, [r7, #7]
 8003612:	2b09      	cmp	r3, #9
 8003614:	d8f6      	bhi.n	8003604 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003616:	7bfb      	ldrb	r3, [r7, #15]
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	b2da      	uxtb	r2, r3
 800361c:	79fb      	ldrb	r3, [r7, #7]
 800361e:	4313      	orrs	r3, r2
 8003620:	b2db      	uxtb	r3, r3
}
 8003622:	4618      	mov	r0, r3
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800362e:	b480      	push	{r7}
 8003630:	b085      	sub	sp, #20
 8003632:	af00      	add	r7, sp, #0
 8003634:	4603      	mov	r3, r0
 8003636:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800363c:	79fb      	ldrb	r3, [r7, #7]
 800363e:	091b      	lsrs	r3, r3, #4
 8003640:	b2db      	uxtb	r3, r3
 8003642:	461a      	mov	r2, r3
 8003644:	0092      	lsls	r2, r2, #2
 8003646:	4413      	add	r3, r2
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800364c:	79fb      	ldrb	r3, [r7, #7]
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	b2da      	uxtb	r2, r3
 8003654:	7bfb      	ldrb	r3, [r7, #15]
 8003656:	4413      	add	r3, r2
 8003658:	b2db      	uxtb	r3, r3
}
 800365a:	4618      	mov	r0, r3
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b082      	sub	sp, #8
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e041      	b.n	8003710 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	d106      	bne.n	80036a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f839 	bl	8003718 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2202      	movs	r2, #2
 80036aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3304      	adds	r3, #4
 80036b6:	4619      	mov	r1, r3
 80036b8:	4610      	mov	r0, r2
 80036ba:	f000 f9d7 	bl	8003a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b01      	cmp	r3, #1
 800373e:	d001      	beq.n	8003744 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e04e      	b.n	80037e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0201 	orr.w	r2, r2, #1
 800375a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a23      	ldr	r2, [pc, #140]	; (80037f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d022      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x80>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376e:	d01d      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x80>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a1f      	ldr	r2, [pc, #124]	; (80037f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d018      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x80>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a1e      	ldr	r2, [pc, #120]	; (80037f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d013      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x80>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a1c      	ldr	r2, [pc, #112]	; (80037fc <HAL_TIM_Base_Start_IT+0xd0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d00e      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x80>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a1b      	ldr	r2, [pc, #108]	; (8003800 <HAL_TIM_Base_Start_IT+0xd4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d009      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x80>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a19      	ldr	r2, [pc, #100]	; (8003804 <HAL_TIM_Base_Start_IT+0xd8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d004      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x80>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a18      	ldr	r2, [pc, #96]	; (8003808 <HAL_TIM_Base_Start_IT+0xdc>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d111      	bne.n	80037d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2b06      	cmp	r3, #6
 80037bc:	d010      	beq.n	80037e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f042 0201 	orr.w	r2, r2, #1
 80037cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ce:	e007      	b.n	80037e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0201 	orr.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	40010000 	.word	0x40010000
 80037f4:	40000400 	.word	0x40000400
 80037f8:	40000800 	.word	0x40000800
 80037fc:	40000c00 	.word	0x40000c00
 8003800:	40010400 	.word	0x40010400
 8003804:	40014000 	.word	0x40014000
 8003808:	40001800 	.word	0x40001800

0800380c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b02      	cmp	r3, #2
 8003820:	d122      	bne.n	8003868 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b02      	cmp	r3, #2
 800382e:	d11b      	bne.n	8003868 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f06f 0202 	mvn.w	r2, #2
 8003838:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f8ee 	bl	8003a30 <HAL_TIM_IC_CaptureCallback>
 8003854:	e005      	b.n	8003862 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f8e0 	bl	8003a1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f8f1 	bl	8003a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b04      	cmp	r3, #4
 8003874:	d122      	bne.n	80038bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b04      	cmp	r3, #4
 8003882:	d11b      	bne.n	80038bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f06f 0204 	mvn.w	r2, #4
 800388c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2202      	movs	r2, #2
 8003892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f8c4 	bl	8003a30 <HAL_TIM_IC_CaptureCallback>
 80038a8:	e005      	b.n	80038b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f8b6 	bl	8003a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f8c7 	bl	8003a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	d122      	bne.n	8003910 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f003 0308 	and.w	r3, r3, #8
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d11b      	bne.n	8003910 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0208 	mvn.w	r2, #8
 80038e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2204      	movs	r2, #4
 80038e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f89a 	bl	8003a30 <HAL_TIM_IC_CaptureCallback>
 80038fc:	e005      	b.n	800390a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f88c 	bl	8003a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f89d 	bl	8003a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f003 0310 	and.w	r3, r3, #16
 800391a:	2b10      	cmp	r3, #16
 800391c:	d122      	bne.n	8003964 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f003 0310 	and.w	r3, r3, #16
 8003928:	2b10      	cmp	r3, #16
 800392a:	d11b      	bne.n	8003964 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f06f 0210 	mvn.w	r2, #16
 8003934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2208      	movs	r2, #8
 800393a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f870 	bl	8003a30 <HAL_TIM_IC_CaptureCallback>
 8003950:	e005      	b.n	800395e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f862 	bl	8003a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f873 	bl	8003a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b01      	cmp	r3, #1
 8003970:	d10e      	bne.n	8003990 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b01      	cmp	r3, #1
 800397e:	d107      	bne.n	8003990 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f06f 0201 	mvn.w	r2, #1
 8003988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7fd fe4e 	bl	800162c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399a:	2b80      	cmp	r3, #128	; 0x80
 800399c:	d10e      	bne.n	80039bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a8:	2b80      	cmp	r3, #128	; 0x80
 80039aa:	d107      	bne.n	80039bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f902 	bl	8003bc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c6:	2b40      	cmp	r3, #64	; 0x40
 80039c8:	d10e      	bne.n	80039e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d4:	2b40      	cmp	r3, #64	; 0x40
 80039d6:	d107      	bne.n	80039e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f838 	bl	8003a58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	2b20      	cmp	r3, #32
 80039f4:	d10e      	bne.n	8003a14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f003 0320 	and.w	r3, r3, #32
 8003a00:	2b20      	cmp	r3, #32
 8003a02:	d107      	bne.n	8003a14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f06f 0220 	mvn.w	r2, #32
 8003a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f8cc 	bl	8003bac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a14:	bf00      	nop
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a40      	ldr	r2, [pc, #256]	; (8003b80 <TIM_Base_SetConfig+0x114>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d013      	beq.n	8003aac <TIM_Base_SetConfig+0x40>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a8a:	d00f      	beq.n	8003aac <TIM_Base_SetConfig+0x40>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a3d      	ldr	r2, [pc, #244]	; (8003b84 <TIM_Base_SetConfig+0x118>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d00b      	beq.n	8003aac <TIM_Base_SetConfig+0x40>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a3c      	ldr	r2, [pc, #240]	; (8003b88 <TIM_Base_SetConfig+0x11c>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d007      	beq.n	8003aac <TIM_Base_SetConfig+0x40>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a3b      	ldr	r2, [pc, #236]	; (8003b8c <TIM_Base_SetConfig+0x120>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d003      	beq.n	8003aac <TIM_Base_SetConfig+0x40>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a3a      	ldr	r2, [pc, #232]	; (8003b90 <TIM_Base_SetConfig+0x124>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d108      	bne.n	8003abe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a2f      	ldr	r2, [pc, #188]	; (8003b80 <TIM_Base_SetConfig+0x114>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d02b      	beq.n	8003b1e <TIM_Base_SetConfig+0xb2>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003acc:	d027      	beq.n	8003b1e <TIM_Base_SetConfig+0xb2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a2c      	ldr	r2, [pc, #176]	; (8003b84 <TIM_Base_SetConfig+0x118>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d023      	beq.n	8003b1e <TIM_Base_SetConfig+0xb2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a2b      	ldr	r2, [pc, #172]	; (8003b88 <TIM_Base_SetConfig+0x11c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d01f      	beq.n	8003b1e <TIM_Base_SetConfig+0xb2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a2a      	ldr	r2, [pc, #168]	; (8003b8c <TIM_Base_SetConfig+0x120>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d01b      	beq.n	8003b1e <TIM_Base_SetConfig+0xb2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a29      	ldr	r2, [pc, #164]	; (8003b90 <TIM_Base_SetConfig+0x124>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d017      	beq.n	8003b1e <TIM_Base_SetConfig+0xb2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a28      	ldr	r2, [pc, #160]	; (8003b94 <TIM_Base_SetConfig+0x128>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d013      	beq.n	8003b1e <TIM_Base_SetConfig+0xb2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a27      	ldr	r2, [pc, #156]	; (8003b98 <TIM_Base_SetConfig+0x12c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d00f      	beq.n	8003b1e <TIM_Base_SetConfig+0xb2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a26      	ldr	r2, [pc, #152]	; (8003b9c <TIM_Base_SetConfig+0x130>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d00b      	beq.n	8003b1e <TIM_Base_SetConfig+0xb2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a25      	ldr	r2, [pc, #148]	; (8003ba0 <TIM_Base_SetConfig+0x134>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d007      	beq.n	8003b1e <TIM_Base_SetConfig+0xb2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a24      	ldr	r2, [pc, #144]	; (8003ba4 <TIM_Base_SetConfig+0x138>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d003      	beq.n	8003b1e <TIM_Base_SetConfig+0xb2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a23      	ldr	r2, [pc, #140]	; (8003ba8 <TIM_Base_SetConfig+0x13c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d108      	bne.n	8003b30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a0a      	ldr	r2, [pc, #40]	; (8003b80 <TIM_Base_SetConfig+0x114>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d003      	beq.n	8003b64 <TIM_Base_SetConfig+0xf8>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a0c      	ldr	r2, [pc, #48]	; (8003b90 <TIM_Base_SetConfig+0x124>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d103      	bne.n	8003b6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	691a      	ldr	r2, [r3, #16]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	615a      	str	r2, [r3, #20]
}
 8003b72:	bf00      	nop
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	40010000 	.word	0x40010000
 8003b84:	40000400 	.word	0x40000400
 8003b88:	40000800 	.word	0x40000800
 8003b8c:	40000c00 	.word	0x40000c00
 8003b90:	40010400 	.word	0x40010400
 8003b94:	40014000 	.word	0x40014000
 8003b98:	40014400 	.word	0x40014400
 8003b9c:	40014800 	.word	0x40014800
 8003ba0:	40001800 	.word	0x40001800
 8003ba4:	40001c00 	.word	0x40001c00
 8003ba8:	40002000 	.word	0x40002000

08003bac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e03f      	b.n	8003c66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d106      	bne.n	8003c00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7fd fd88 	bl	8001710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2224      	movs	r2, #36	; 0x24
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 f929 	bl	8003e70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695a      	ldr	r2, [r3, #20]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68da      	ldr	r2, [r3, #12]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b08a      	sub	sp, #40	; 0x28
 8003c72:	af02      	add	r7, sp, #8
 8003c74:	60f8      	str	r0, [r7, #12]
 8003c76:	60b9      	str	r1, [r7, #8]
 8003c78:	603b      	str	r3, [r7, #0]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b20      	cmp	r3, #32
 8003c8c:	d17c      	bne.n	8003d88 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d002      	beq.n	8003c9a <HAL_UART_Transmit+0x2c>
 8003c94:	88fb      	ldrh	r3, [r7, #6]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e075      	b.n	8003d8a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <HAL_UART_Transmit+0x3e>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	e06e      	b.n	8003d8a <HAL_UART_Transmit+0x11c>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2221      	movs	r2, #33	; 0x21
 8003cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cc2:	f7fd ff45 	bl	8001b50 <HAL_GetTick>
 8003cc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	88fa      	ldrh	r2, [r7, #6]
 8003ccc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	88fa      	ldrh	r2, [r7, #6]
 8003cd2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cdc:	d108      	bne.n	8003cf0 <HAL_UART_Transmit+0x82>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d104      	bne.n	8003cf0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	61bb      	str	r3, [r7, #24]
 8003cee:	e003      	b.n	8003cf8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d00:	e02a      	b.n	8003d58 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	2180      	movs	r1, #128	; 0x80
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 f840 	bl	8003d92 <UART_WaitOnFlagUntilTimeout>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e036      	b.n	8003d8a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10b      	bne.n	8003d3a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	461a      	mov	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	3302      	adds	r3, #2
 8003d36:	61bb      	str	r3, [r7, #24]
 8003d38:	e007      	b.n	8003d4a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	781a      	ldrb	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	3301      	adds	r3, #1
 8003d48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	3b01      	subs	r3, #1
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1cf      	bne.n	8003d02 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	2140      	movs	r1, #64	; 0x40
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 f810 	bl	8003d92 <UART_WaitOnFlagUntilTimeout>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e006      	b.n	8003d8a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d84:	2300      	movs	r3, #0
 8003d86:	e000      	b.n	8003d8a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d88:	2302      	movs	r3, #2
  }
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3720      	adds	r7, #32
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b090      	sub	sp, #64	; 0x40
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	60f8      	str	r0, [r7, #12]
 8003d9a:	60b9      	str	r1, [r7, #8]
 8003d9c:	603b      	str	r3, [r7, #0]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003da2:	e050      	b.n	8003e46 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003da6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003daa:	d04c      	beq.n	8003e46 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003dac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d007      	beq.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003db2:	f7fd fecd 	bl	8001b50 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d241      	bcs.n	8003e46 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	330c      	adds	r3, #12
 8003dc8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dcc:	e853 3f00 	ldrex	r3, [r3]
 8003dd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	330c      	adds	r3, #12
 8003de0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003de2:	637a      	str	r2, [r7, #52]	; 0x34
 8003de4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003de8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dea:	e841 2300 	strex	r3, r2, [r1]
 8003dee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1e5      	bne.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	3314      	adds	r3, #20
 8003dfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	e853 3f00 	ldrex	r3, [r3]
 8003e04:	613b      	str	r3, [r7, #16]
   return(result);
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f023 0301 	bic.w	r3, r3, #1
 8003e0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	3314      	adds	r3, #20
 8003e14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e16:	623a      	str	r2, [r7, #32]
 8003e18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1a:	69f9      	ldr	r1, [r7, #28]
 8003e1c:	6a3a      	ldr	r2, [r7, #32]
 8003e1e:	e841 2300 	strex	r3, r2, [r1]
 8003e22:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1e5      	bne.n	8003df6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e00f      	b.n	8003e66 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	bf0c      	ite	eq
 8003e56:	2301      	moveq	r3, #1
 8003e58:	2300      	movne	r3, #0
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	79fb      	ldrb	r3, [r7, #7]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d09f      	beq.n	8003da4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3740      	adds	r7, #64	; 0x40
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
	...

08003e70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e74:	b0c0      	sub	sp, #256	; 0x100
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e8c:	68d9      	ldr	r1, [r3, #12]
 8003e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	ea40 0301 	orr.w	r3, r0, r1
 8003e98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ec8:	f021 010c 	bic.w	r1, r1, #12
 8003ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ed6:	430b      	orrs	r3, r1
 8003ed8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eea:	6999      	ldr	r1, [r3, #24]
 8003eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	ea40 0301 	orr.w	r3, r0, r1
 8003ef6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	4b8f      	ldr	r3, [pc, #572]	; (800413c <UART_SetConfig+0x2cc>)
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d005      	beq.n	8003f10 <UART_SetConfig+0xa0>
 8003f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	4b8d      	ldr	r3, [pc, #564]	; (8004140 <UART_SetConfig+0x2d0>)
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d104      	bne.n	8003f1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f10:	f7fe fd6a 	bl	80029e8 <HAL_RCC_GetPCLK2Freq>
 8003f14:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f18:	e003      	b.n	8003f22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f1a:	f7fe fd51 	bl	80029c0 <HAL_RCC_GetPCLK1Freq>
 8003f1e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f2c:	f040 810c 	bne.w	8004148 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f34:	2200      	movs	r2, #0
 8003f36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f3a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f42:	4622      	mov	r2, r4
 8003f44:	462b      	mov	r3, r5
 8003f46:	1891      	adds	r1, r2, r2
 8003f48:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f4a:	415b      	adcs	r3, r3
 8003f4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f52:	4621      	mov	r1, r4
 8003f54:	eb12 0801 	adds.w	r8, r2, r1
 8003f58:	4629      	mov	r1, r5
 8003f5a:	eb43 0901 	adc.w	r9, r3, r1
 8003f5e:	f04f 0200 	mov.w	r2, #0
 8003f62:	f04f 0300 	mov.w	r3, #0
 8003f66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f72:	4690      	mov	r8, r2
 8003f74:	4699      	mov	r9, r3
 8003f76:	4623      	mov	r3, r4
 8003f78:	eb18 0303 	adds.w	r3, r8, r3
 8003f7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f80:	462b      	mov	r3, r5
 8003f82:	eb49 0303 	adc.w	r3, r9, r3
 8003f86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f96:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	18db      	adds	r3, r3, r3
 8003fa2:	653b      	str	r3, [r7, #80]	; 0x50
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	eb42 0303 	adc.w	r3, r2, r3
 8003faa:	657b      	str	r3, [r7, #84]	; 0x54
 8003fac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003fb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003fb4:	f7fc fe52 	bl	8000c5c <__aeabi_uldivmod>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4b61      	ldr	r3, [pc, #388]	; (8004144 <UART_SetConfig+0x2d4>)
 8003fbe:	fba3 2302 	umull	r2, r3, r3, r2
 8003fc2:	095b      	lsrs	r3, r3, #5
 8003fc4:	011c      	lsls	r4, r3, #4
 8003fc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fd0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003fd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003fd8:	4642      	mov	r2, r8
 8003fda:	464b      	mov	r3, r9
 8003fdc:	1891      	adds	r1, r2, r2
 8003fde:	64b9      	str	r1, [r7, #72]	; 0x48
 8003fe0:	415b      	adcs	r3, r3
 8003fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fe4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003fe8:	4641      	mov	r1, r8
 8003fea:	eb12 0a01 	adds.w	sl, r2, r1
 8003fee:	4649      	mov	r1, r9
 8003ff0:	eb43 0b01 	adc.w	fp, r3, r1
 8003ff4:	f04f 0200 	mov.w	r2, #0
 8003ff8:	f04f 0300 	mov.w	r3, #0
 8003ffc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004000:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004004:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004008:	4692      	mov	sl, r2
 800400a:	469b      	mov	fp, r3
 800400c:	4643      	mov	r3, r8
 800400e:	eb1a 0303 	adds.w	r3, sl, r3
 8004012:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004016:	464b      	mov	r3, r9
 8004018:	eb4b 0303 	adc.w	r3, fp, r3
 800401c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800402c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004030:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004034:	460b      	mov	r3, r1
 8004036:	18db      	adds	r3, r3, r3
 8004038:	643b      	str	r3, [r7, #64]	; 0x40
 800403a:	4613      	mov	r3, r2
 800403c:	eb42 0303 	adc.w	r3, r2, r3
 8004040:	647b      	str	r3, [r7, #68]	; 0x44
 8004042:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004046:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800404a:	f7fc fe07 	bl	8000c5c <__aeabi_uldivmod>
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	4611      	mov	r1, r2
 8004054:	4b3b      	ldr	r3, [pc, #236]	; (8004144 <UART_SetConfig+0x2d4>)
 8004056:	fba3 2301 	umull	r2, r3, r3, r1
 800405a:	095b      	lsrs	r3, r3, #5
 800405c:	2264      	movs	r2, #100	; 0x64
 800405e:	fb02 f303 	mul.w	r3, r2, r3
 8004062:	1acb      	subs	r3, r1, r3
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800406a:	4b36      	ldr	r3, [pc, #216]	; (8004144 <UART_SetConfig+0x2d4>)
 800406c:	fba3 2302 	umull	r2, r3, r3, r2
 8004070:	095b      	lsrs	r3, r3, #5
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004078:	441c      	add	r4, r3
 800407a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800407e:	2200      	movs	r2, #0
 8004080:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004084:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004088:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800408c:	4642      	mov	r2, r8
 800408e:	464b      	mov	r3, r9
 8004090:	1891      	adds	r1, r2, r2
 8004092:	63b9      	str	r1, [r7, #56]	; 0x38
 8004094:	415b      	adcs	r3, r3
 8004096:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004098:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800409c:	4641      	mov	r1, r8
 800409e:	1851      	adds	r1, r2, r1
 80040a0:	6339      	str	r1, [r7, #48]	; 0x30
 80040a2:	4649      	mov	r1, r9
 80040a4:	414b      	adcs	r3, r1
 80040a6:	637b      	str	r3, [r7, #52]	; 0x34
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	f04f 0300 	mov.w	r3, #0
 80040b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80040b4:	4659      	mov	r1, fp
 80040b6:	00cb      	lsls	r3, r1, #3
 80040b8:	4651      	mov	r1, sl
 80040ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040be:	4651      	mov	r1, sl
 80040c0:	00ca      	lsls	r2, r1, #3
 80040c2:	4610      	mov	r0, r2
 80040c4:	4619      	mov	r1, r3
 80040c6:	4603      	mov	r3, r0
 80040c8:	4642      	mov	r2, r8
 80040ca:	189b      	adds	r3, r3, r2
 80040cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040d0:	464b      	mov	r3, r9
 80040d2:	460a      	mov	r2, r1
 80040d4:	eb42 0303 	adc.w	r3, r2, r3
 80040d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80040ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80040f0:	460b      	mov	r3, r1
 80040f2:	18db      	adds	r3, r3, r3
 80040f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80040f6:	4613      	mov	r3, r2
 80040f8:	eb42 0303 	adc.w	r3, r2, r3
 80040fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004102:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004106:	f7fc fda9 	bl	8000c5c <__aeabi_uldivmod>
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	4b0d      	ldr	r3, [pc, #52]	; (8004144 <UART_SetConfig+0x2d4>)
 8004110:	fba3 1302 	umull	r1, r3, r3, r2
 8004114:	095b      	lsrs	r3, r3, #5
 8004116:	2164      	movs	r1, #100	; 0x64
 8004118:	fb01 f303 	mul.w	r3, r1, r3
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	3332      	adds	r3, #50	; 0x32
 8004122:	4a08      	ldr	r2, [pc, #32]	; (8004144 <UART_SetConfig+0x2d4>)
 8004124:	fba2 2303 	umull	r2, r3, r2, r3
 8004128:	095b      	lsrs	r3, r3, #5
 800412a:	f003 0207 	and.w	r2, r3, #7
 800412e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4422      	add	r2, r4
 8004136:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004138:	e105      	b.n	8004346 <UART_SetConfig+0x4d6>
 800413a:	bf00      	nop
 800413c:	40011000 	.word	0x40011000
 8004140:	40011400 	.word	0x40011400
 8004144:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004148:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800414c:	2200      	movs	r2, #0
 800414e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004152:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004156:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800415a:	4642      	mov	r2, r8
 800415c:	464b      	mov	r3, r9
 800415e:	1891      	adds	r1, r2, r2
 8004160:	6239      	str	r1, [r7, #32]
 8004162:	415b      	adcs	r3, r3
 8004164:	627b      	str	r3, [r7, #36]	; 0x24
 8004166:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800416a:	4641      	mov	r1, r8
 800416c:	1854      	adds	r4, r2, r1
 800416e:	4649      	mov	r1, r9
 8004170:	eb43 0501 	adc.w	r5, r3, r1
 8004174:	f04f 0200 	mov.w	r2, #0
 8004178:	f04f 0300 	mov.w	r3, #0
 800417c:	00eb      	lsls	r3, r5, #3
 800417e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004182:	00e2      	lsls	r2, r4, #3
 8004184:	4614      	mov	r4, r2
 8004186:	461d      	mov	r5, r3
 8004188:	4643      	mov	r3, r8
 800418a:	18e3      	adds	r3, r4, r3
 800418c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004190:	464b      	mov	r3, r9
 8004192:	eb45 0303 	adc.w	r3, r5, r3
 8004196:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800419a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041aa:	f04f 0200 	mov.w	r2, #0
 80041ae:	f04f 0300 	mov.w	r3, #0
 80041b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80041b6:	4629      	mov	r1, r5
 80041b8:	008b      	lsls	r3, r1, #2
 80041ba:	4621      	mov	r1, r4
 80041bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041c0:	4621      	mov	r1, r4
 80041c2:	008a      	lsls	r2, r1, #2
 80041c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80041c8:	f7fc fd48 	bl	8000c5c <__aeabi_uldivmod>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	4b60      	ldr	r3, [pc, #384]	; (8004354 <UART_SetConfig+0x4e4>)
 80041d2:	fba3 2302 	umull	r2, r3, r3, r2
 80041d6:	095b      	lsrs	r3, r3, #5
 80041d8:	011c      	lsls	r4, r3, #4
 80041da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041de:	2200      	movs	r2, #0
 80041e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80041e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80041ec:	4642      	mov	r2, r8
 80041ee:	464b      	mov	r3, r9
 80041f0:	1891      	adds	r1, r2, r2
 80041f2:	61b9      	str	r1, [r7, #24]
 80041f4:	415b      	adcs	r3, r3
 80041f6:	61fb      	str	r3, [r7, #28]
 80041f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041fc:	4641      	mov	r1, r8
 80041fe:	1851      	adds	r1, r2, r1
 8004200:	6139      	str	r1, [r7, #16]
 8004202:	4649      	mov	r1, r9
 8004204:	414b      	adcs	r3, r1
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004214:	4659      	mov	r1, fp
 8004216:	00cb      	lsls	r3, r1, #3
 8004218:	4651      	mov	r1, sl
 800421a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800421e:	4651      	mov	r1, sl
 8004220:	00ca      	lsls	r2, r1, #3
 8004222:	4610      	mov	r0, r2
 8004224:	4619      	mov	r1, r3
 8004226:	4603      	mov	r3, r0
 8004228:	4642      	mov	r2, r8
 800422a:	189b      	adds	r3, r3, r2
 800422c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004230:	464b      	mov	r3, r9
 8004232:	460a      	mov	r2, r1
 8004234:	eb42 0303 	adc.w	r3, r2, r3
 8004238:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800423c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	67bb      	str	r3, [r7, #120]	; 0x78
 8004246:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004248:	f04f 0200 	mov.w	r2, #0
 800424c:	f04f 0300 	mov.w	r3, #0
 8004250:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004254:	4649      	mov	r1, r9
 8004256:	008b      	lsls	r3, r1, #2
 8004258:	4641      	mov	r1, r8
 800425a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800425e:	4641      	mov	r1, r8
 8004260:	008a      	lsls	r2, r1, #2
 8004262:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004266:	f7fc fcf9 	bl	8000c5c <__aeabi_uldivmod>
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	4b39      	ldr	r3, [pc, #228]	; (8004354 <UART_SetConfig+0x4e4>)
 8004270:	fba3 1302 	umull	r1, r3, r3, r2
 8004274:	095b      	lsrs	r3, r3, #5
 8004276:	2164      	movs	r1, #100	; 0x64
 8004278:	fb01 f303 	mul.w	r3, r1, r3
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	011b      	lsls	r3, r3, #4
 8004280:	3332      	adds	r3, #50	; 0x32
 8004282:	4a34      	ldr	r2, [pc, #208]	; (8004354 <UART_SetConfig+0x4e4>)
 8004284:	fba2 2303 	umull	r2, r3, r2, r3
 8004288:	095b      	lsrs	r3, r3, #5
 800428a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800428e:	441c      	add	r4, r3
 8004290:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004294:	2200      	movs	r2, #0
 8004296:	673b      	str	r3, [r7, #112]	; 0x70
 8004298:	677a      	str	r2, [r7, #116]	; 0x74
 800429a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800429e:	4642      	mov	r2, r8
 80042a0:	464b      	mov	r3, r9
 80042a2:	1891      	adds	r1, r2, r2
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	415b      	adcs	r3, r3
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042ae:	4641      	mov	r1, r8
 80042b0:	1851      	adds	r1, r2, r1
 80042b2:	6039      	str	r1, [r7, #0]
 80042b4:	4649      	mov	r1, r9
 80042b6:	414b      	adcs	r3, r1
 80042b8:	607b      	str	r3, [r7, #4]
 80042ba:	f04f 0200 	mov.w	r2, #0
 80042be:	f04f 0300 	mov.w	r3, #0
 80042c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042c6:	4659      	mov	r1, fp
 80042c8:	00cb      	lsls	r3, r1, #3
 80042ca:	4651      	mov	r1, sl
 80042cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042d0:	4651      	mov	r1, sl
 80042d2:	00ca      	lsls	r2, r1, #3
 80042d4:	4610      	mov	r0, r2
 80042d6:	4619      	mov	r1, r3
 80042d8:	4603      	mov	r3, r0
 80042da:	4642      	mov	r2, r8
 80042dc:	189b      	adds	r3, r3, r2
 80042de:	66bb      	str	r3, [r7, #104]	; 0x68
 80042e0:	464b      	mov	r3, r9
 80042e2:	460a      	mov	r2, r1
 80042e4:	eb42 0303 	adc.w	r3, r2, r3
 80042e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	663b      	str	r3, [r7, #96]	; 0x60
 80042f4:	667a      	str	r2, [r7, #100]	; 0x64
 80042f6:	f04f 0200 	mov.w	r2, #0
 80042fa:	f04f 0300 	mov.w	r3, #0
 80042fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004302:	4649      	mov	r1, r9
 8004304:	008b      	lsls	r3, r1, #2
 8004306:	4641      	mov	r1, r8
 8004308:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800430c:	4641      	mov	r1, r8
 800430e:	008a      	lsls	r2, r1, #2
 8004310:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004314:	f7fc fca2 	bl	8000c5c <__aeabi_uldivmod>
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	4b0d      	ldr	r3, [pc, #52]	; (8004354 <UART_SetConfig+0x4e4>)
 800431e:	fba3 1302 	umull	r1, r3, r3, r2
 8004322:	095b      	lsrs	r3, r3, #5
 8004324:	2164      	movs	r1, #100	; 0x64
 8004326:	fb01 f303 	mul.w	r3, r1, r3
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	3332      	adds	r3, #50	; 0x32
 8004330:	4a08      	ldr	r2, [pc, #32]	; (8004354 <UART_SetConfig+0x4e4>)
 8004332:	fba2 2303 	umull	r2, r3, r2, r3
 8004336:	095b      	lsrs	r3, r3, #5
 8004338:	f003 020f 	and.w	r2, r3, #15
 800433c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4422      	add	r2, r4
 8004344:	609a      	str	r2, [r3, #8]
}
 8004346:	bf00      	nop
 8004348:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800434c:	46bd      	mov	sp, r7
 800434e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004352:	bf00      	nop
 8004354:	51eb851f 	.word	0x51eb851f

08004358 <ctime>:
 8004358:	b508      	push	{r3, lr}
 800435a:	f000 f837 	bl	80043cc <localtime>
 800435e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004362:	f001 bbc7 	b.w	8005af4 <asctime>

08004366 <difftime>:
 8004366:	1a80      	subs	r0, r0, r2
 8004368:	b508      	push	{r3, lr}
 800436a:	eb61 0103 	sbc.w	r1, r1, r3
 800436e:	f7fc f91f 	bl	80005b0 <__aeabi_l2d>
 8004372:	ec41 0b10 	vmov	d0, r0, r1
 8004376:	bd08      	pop	{r3, pc}

08004378 <__errno>:
 8004378:	4b01      	ldr	r3, [pc, #4]	; (8004380 <__errno+0x8>)
 800437a:	6818      	ldr	r0, [r3, #0]
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	20000010 	.word	0x20000010

08004384 <__libc_init_array>:
 8004384:	b570      	push	{r4, r5, r6, lr}
 8004386:	4d0d      	ldr	r5, [pc, #52]	; (80043bc <__libc_init_array+0x38>)
 8004388:	4c0d      	ldr	r4, [pc, #52]	; (80043c0 <__libc_init_array+0x3c>)
 800438a:	1b64      	subs	r4, r4, r5
 800438c:	10a4      	asrs	r4, r4, #2
 800438e:	2600      	movs	r6, #0
 8004390:	42a6      	cmp	r6, r4
 8004392:	d109      	bne.n	80043a8 <__libc_init_array+0x24>
 8004394:	4d0b      	ldr	r5, [pc, #44]	; (80043c4 <__libc_init_array+0x40>)
 8004396:	4c0c      	ldr	r4, [pc, #48]	; (80043c8 <__libc_init_array+0x44>)
 8004398:	f004 fbb8 	bl	8008b0c <_init>
 800439c:	1b64      	subs	r4, r4, r5
 800439e:	10a4      	asrs	r4, r4, #2
 80043a0:	2600      	movs	r6, #0
 80043a2:	42a6      	cmp	r6, r4
 80043a4:	d105      	bne.n	80043b2 <__libc_init_array+0x2e>
 80043a6:	bd70      	pop	{r4, r5, r6, pc}
 80043a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ac:	4798      	blx	r3
 80043ae:	3601      	adds	r6, #1
 80043b0:	e7ee      	b.n	8004390 <__libc_init_array+0xc>
 80043b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043b6:	4798      	blx	r3
 80043b8:	3601      	adds	r6, #1
 80043ba:	e7f2      	b.n	80043a2 <__libc_init_array+0x1e>
 80043bc:	0800920c 	.word	0x0800920c
 80043c0:	0800920c 	.word	0x0800920c
 80043c4:	0800920c 	.word	0x0800920c
 80043c8:	08009210 	.word	0x08009210

080043cc <localtime>:
 80043cc:	b538      	push	{r3, r4, r5, lr}
 80043ce:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <localtime+0x30>)
 80043d0:	681d      	ldr	r5, [r3, #0]
 80043d2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80043d4:	4604      	mov	r4, r0
 80043d6:	b953      	cbnz	r3, 80043ee <localtime+0x22>
 80043d8:	2024      	movs	r0, #36	; 0x24
 80043da:	f000 f909 	bl	80045f0 <malloc>
 80043de:	4602      	mov	r2, r0
 80043e0:	63e8      	str	r0, [r5, #60]	; 0x3c
 80043e2:	b920      	cbnz	r0, 80043ee <localtime+0x22>
 80043e4:	4b06      	ldr	r3, [pc, #24]	; (8004400 <localtime+0x34>)
 80043e6:	4807      	ldr	r0, [pc, #28]	; (8004404 <localtime+0x38>)
 80043e8:	2132      	movs	r1, #50	; 0x32
 80043ea:	f001 fbcb 	bl	8005b84 <__assert_func>
 80043ee:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80043f0:	4620      	mov	r0, r4
 80043f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043f6:	f000 b807 	b.w	8004408 <localtime_r>
 80043fa:	bf00      	nop
 80043fc:	20000010 	.word	0x20000010
 8004400:	08008c08 	.word	0x08008c08
 8004404:	08008c1f 	.word	0x08008c1f

08004408 <localtime_r>:
 8004408:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800440c:	4680      	mov	r8, r0
 800440e:	9101      	str	r1, [sp, #4]
 8004410:	f002 fbb0 	bl	8006b74 <__gettzinfo>
 8004414:	9901      	ldr	r1, [sp, #4]
 8004416:	4605      	mov	r5, r0
 8004418:	4640      	mov	r0, r8
 800441a:	f002 fbaf 	bl	8006b7c <gmtime_r>
 800441e:	6943      	ldr	r3, [r0, #20]
 8004420:	0799      	lsls	r1, r3, #30
 8004422:	4604      	mov	r4, r0
 8004424:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 8004428:	d105      	bne.n	8004436 <localtime_r+0x2e>
 800442a:	2264      	movs	r2, #100	; 0x64
 800442c:	fb97 f3f2 	sdiv	r3, r7, r2
 8004430:	fb02 7313 	mls	r3, r2, r3, r7
 8004434:	bb73      	cbnz	r3, 8004494 <localtime_r+0x8c>
 8004436:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800443a:	fb97 f6f3 	sdiv	r6, r7, r3
 800443e:	fb03 7616 	mls	r6, r3, r6, r7
 8004442:	fab6 f386 	clz	r3, r6
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	4e67      	ldr	r6, [pc, #412]	; (80045e8 <localtime_r+0x1e0>)
 800444a:	2230      	movs	r2, #48	; 0x30
 800444c:	fb02 6603 	mla	r6, r2, r3, r6
 8004450:	f001 f9be 	bl	80057d0 <__tz_lock>
 8004454:	f001 f9c8 	bl	80057e8 <_tzset_unlocked>
 8004458:	4b64      	ldr	r3, [pc, #400]	; (80045ec <localtime_r+0x1e4>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	b34b      	cbz	r3, 80044b2 <localtime_r+0xaa>
 800445e:	686b      	ldr	r3, [r5, #4]
 8004460:	42bb      	cmp	r3, r7
 8004462:	d119      	bne.n	8004498 <localtime_r+0x90>
 8004464:	682f      	ldr	r7, [r5, #0]
 8004466:	e9d8 2300 	ldrd	r2, r3, [r8]
 800446a:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 800446e:	b9df      	cbnz	r7, 80044a8 <localtime_r+0xa0>
 8004470:	4282      	cmp	r2, r0
 8004472:	eb73 0101 	sbcs.w	r1, r3, r1
 8004476:	da23      	bge.n	80044c0 <localtime_r+0xb8>
 8004478:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 800447c:	4282      	cmp	r2, r0
 800447e:	eb73 0701 	sbcs.w	r7, r3, r1
 8004482:	bfb4      	ite	lt
 8004484:	2701      	movlt	r7, #1
 8004486:	2700      	movge	r7, #0
 8004488:	4282      	cmp	r2, r0
 800448a:	418b      	sbcs	r3, r1
 800448c:	6227      	str	r7, [r4, #32]
 800448e:	db19      	blt.n	80044c4 <localtime_r+0xbc>
 8004490:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004492:	e018      	b.n	80044c6 <localtime_r+0xbe>
 8004494:	2301      	movs	r3, #1
 8004496:	e7d7      	b.n	8004448 <localtime_r+0x40>
 8004498:	4638      	mov	r0, r7
 800449a:	f001 f8ef 	bl	800567c <__tzcalc_limits>
 800449e:	2800      	cmp	r0, #0
 80044a0:	d1e0      	bne.n	8004464 <localtime_r+0x5c>
 80044a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044a6:	e004      	b.n	80044b2 <localtime_r+0xaa>
 80044a8:	4282      	cmp	r2, r0
 80044aa:	eb73 0101 	sbcs.w	r1, r3, r1
 80044ae:	da02      	bge.n	80044b6 <localtime_r+0xae>
 80044b0:	2300      	movs	r3, #0
 80044b2:	6223      	str	r3, [r4, #32]
 80044b4:	e7ec      	b.n	8004490 <localtime_r+0x88>
 80044b6:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80044ba:	4282      	cmp	r2, r0
 80044bc:	418b      	sbcs	r3, r1
 80044be:	daf7      	bge.n	80044b0 <localtime_r+0xa8>
 80044c0:	2301      	movs	r3, #1
 80044c2:	6223      	str	r3, [r4, #32]
 80044c4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80044c6:	6861      	ldr	r1, [r4, #4]
 80044c8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80044cc:	203c      	movs	r0, #60	; 0x3c
 80044ce:	fb93 f5f2 	sdiv	r5, r3, r2
 80044d2:	fb02 3315 	mls	r3, r2, r5, r3
 80044d6:	fb93 f2f0 	sdiv	r2, r3, r0
 80044da:	fb00 3012 	mls	r0, r0, r2, r3
 80044de:	6823      	ldr	r3, [r4, #0]
 80044e0:	1a89      	subs	r1, r1, r2
 80044e2:	68a2      	ldr	r2, [r4, #8]
 80044e4:	6061      	str	r1, [r4, #4]
 80044e6:	1a1b      	subs	r3, r3, r0
 80044e8:	1b52      	subs	r2, r2, r5
 80044ea:	2b3b      	cmp	r3, #59	; 0x3b
 80044ec:	6023      	str	r3, [r4, #0]
 80044ee:	60a2      	str	r2, [r4, #8]
 80044f0:	dd35      	ble.n	800455e <localtime_r+0x156>
 80044f2:	3101      	adds	r1, #1
 80044f4:	6061      	str	r1, [r4, #4]
 80044f6:	3b3c      	subs	r3, #60	; 0x3c
 80044f8:	6023      	str	r3, [r4, #0]
 80044fa:	6863      	ldr	r3, [r4, #4]
 80044fc:	2b3b      	cmp	r3, #59	; 0x3b
 80044fe:	dd34      	ble.n	800456a <localtime_r+0x162>
 8004500:	3201      	adds	r2, #1
 8004502:	60a2      	str	r2, [r4, #8]
 8004504:	3b3c      	subs	r3, #60	; 0x3c
 8004506:	6063      	str	r3, [r4, #4]
 8004508:	68a3      	ldr	r3, [r4, #8]
 800450a:	2b17      	cmp	r3, #23
 800450c:	dd33      	ble.n	8004576 <localtime_r+0x16e>
 800450e:	69e2      	ldr	r2, [r4, #28]
 8004510:	3201      	adds	r2, #1
 8004512:	61e2      	str	r2, [r4, #28]
 8004514:	69a2      	ldr	r2, [r4, #24]
 8004516:	3201      	adds	r2, #1
 8004518:	2a06      	cmp	r2, #6
 800451a:	bfc8      	it	gt
 800451c:	2200      	movgt	r2, #0
 800451e:	61a2      	str	r2, [r4, #24]
 8004520:	68e2      	ldr	r2, [r4, #12]
 8004522:	3b18      	subs	r3, #24
 8004524:	3201      	adds	r2, #1
 8004526:	60a3      	str	r3, [r4, #8]
 8004528:	6923      	ldr	r3, [r4, #16]
 800452a:	60e2      	str	r2, [r4, #12]
 800452c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8004530:	428a      	cmp	r2, r1
 8004532:	dd0e      	ble.n	8004552 <localtime_r+0x14a>
 8004534:	2b0b      	cmp	r3, #11
 8004536:	eba2 0201 	sub.w	r2, r2, r1
 800453a:	60e2      	str	r2, [r4, #12]
 800453c:	f103 0201 	add.w	r2, r3, #1
 8004540:	bf09      	itett	eq
 8004542:	6963      	ldreq	r3, [r4, #20]
 8004544:	6122      	strne	r2, [r4, #16]
 8004546:	2200      	moveq	r2, #0
 8004548:	3301      	addeq	r3, #1
 800454a:	bf02      	ittt	eq
 800454c:	6122      	streq	r2, [r4, #16]
 800454e:	6163      	streq	r3, [r4, #20]
 8004550:	61e2      	streq	r2, [r4, #28]
 8004552:	f001 f943 	bl	80057dc <__tz_unlock>
 8004556:	4620      	mov	r0, r4
 8004558:	b002      	add	sp, #8
 800455a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800455e:	2b00      	cmp	r3, #0
 8004560:	dacb      	bge.n	80044fa <localtime_r+0xf2>
 8004562:	3901      	subs	r1, #1
 8004564:	6061      	str	r1, [r4, #4]
 8004566:	333c      	adds	r3, #60	; 0x3c
 8004568:	e7c6      	b.n	80044f8 <localtime_r+0xf0>
 800456a:	2b00      	cmp	r3, #0
 800456c:	dacc      	bge.n	8004508 <localtime_r+0x100>
 800456e:	3a01      	subs	r2, #1
 8004570:	60a2      	str	r2, [r4, #8]
 8004572:	333c      	adds	r3, #60	; 0x3c
 8004574:	e7c7      	b.n	8004506 <localtime_r+0xfe>
 8004576:	2b00      	cmp	r3, #0
 8004578:	daeb      	bge.n	8004552 <localtime_r+0x14a>
 800457a:	69e2      	ldr	r2, [r4, #28]
 800457c:	3a01      	subs	r2, #1
 800457e:	61e2      	str	r2, [r4, #28]
 8004580:	69a2      	ldr	r2, [r4, #24]
 8004582:	3a01      	subs	r2, #1
 8004584:	bf48      	it	mi
 8004586:	2206      	movmi	r2, #6
 8004588:	61a2      	str	r2, [r4, #24]
 800458a:	68e2      	ldr	r2, [r4, #12]
 800458c:	3318      	adds	r3, #24
 800458e:	3a01      	subs	r2, #1
 8004590:	60e2      	str	r2, [r4, #12]
 8004592:	60a3      	str	r3, [r4, #8]
 8004594:	2a00      	cmp	r2, #0
 8004596:	d1dc      	bne.n	8004552 <localtime_r+0x14a>
 8004598:	6923      	ldr	r3, [r4, #16]
 800459a:	3b01      	subs	r3, #1
 800459c:	d405      	bmi.n	80045aa <localtime_r+0x1a2>
 800459e:	6123      	str	r3, [r4, #16]
 80045a0:	6923      	ldr	r3, [r4, #16]
 80045a2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80045a6:	60e3      	str	r3, [r4, #12]
 80045a8:	e7d3      	b.n	8004552 <localtime_r+0x14a>
 80045aa:	230b      	movs	r3, #11
 80045ac:	6123      	str	r3, [r4, #16]
 80045ae:	6963      	ldr	r3, [r4, #20]
 80045b0:	1e5a      	subs	r2, r3, #1
 80045b2:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80045b6:	6162      	str	r2, [r4, #20]
 80045b8:	079a      	lsls	r2, r3, #30
 80045ba:	d105      	bne.n	80045c8 <localtime_r+0x1c0>
 80045bc:	2164      	movs	r1, #100	; 0x64
 80045be:	fb93 f2f1 	sdiv	r2, r3, r1
 80045c2:	fb01 3212 	mls	r2, r1, r2, r3
 80045c6:	b962      	cbnz	r2, 80045e2 <localtime_r+0x1da>
 80045c8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80045cc:	fb93 f1f2 	sdiv	r1, r3, r2
 80045d0:	fb02 3311 	mls	r3, r2, r1, r3
 80045d4:	fab3 f383 	clz	r3, r3
 80045d8:	095b      	lsrs	r3, r3, #5
 80045da:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80045de:	61e3      	str	r3, [r4, #28]
 80045e0:	e7de      	b.n	80045a0 <localtime_r+0x198>
 80045e2:	2301      	movs	r3, #1
 80045e4:	e7f9      	b.n	80045da <localtime_r+0x1d2>
 80045e6:	bf00      	nop
 80045e8:	08008cdc 	.word	0x08008cdc
 80045ec:	20000498 	.word	0x20000498

080045f0 <malloc>:
 80045f0:	4b02      	ldr	r3, [pc, #8]	; (80045fc <malloc+0xc>)
 80045f2:	4601      	mov	r1, r0
 80045f4:	6818      	ldr	r0, [r3, #0]
 80045f6:	f000 baf1 	b.w	8004bdc <_malloc_r>
 80045fa:	bf00      	nop
 80045fc:	20000010 	.word	0x20000010

08004600 <free>:
 8004600:	4b02      	ldr	r3, [pc, #8]	; (800460c <free+0xc>)
 8004602:	4601      	mov	r1, r0
 8004604:	6818      	ldr	r0, [r3, #0]
 8004606:	f000 ba7d 	b.w	8004b04 <_free_r>
 800460a:	bf00      	nop
 800460c:	20000010 	.word	0x20000010

08004610 <memset>:
 8004610:	4402      	add	r2, r0
 8004612:	4603      	mov	r3, r0
 8004614:	4293      	cmp	r3, r2
 8004616:	d100      	bne.n	800461a <memset+0xa>
 8004618:	4770      	bx	lr
 800461a:	f803 1b01 	strb.w	r1, [r3], #1
 800461e:	e7f9      	b.n	8004614 <memset+0x4>

08004620 <validate_structure>:
 8004620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004622:	6801      	ldr	r1, [r0, #0]
 8004624:	293b      	cmp	r1, #59	; 0x3b
 8004626:	4604      	mov	r4, r0
 8004628:	d911      	bls.n	800464e <validate_structure+0x2e>
 800462a:	223c      	movs	r2, #60	; 0x3c
 800462c:	4668      	mov	r0, sp
 800462e:	f001 fac7 	bl	8005bc0 <div>
 8004632:	9a01      	ldr	r2, [sp, #4]
 8004634:	6863      	ldr	r3, [r4, #4]
 8004636:	9900      	ldr	r1, [sp, #0]
 8004638:	2a00      	cmp	r2, #0
 800463a:	440b      	add	r3, r1
 800463c:	6063      	str	r3, [r4, #4]
 800463e:	bfbb      	ittet	lt
 8004640:	323c      	addlt	r2, #60	; 0x3c
 8004642:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 8004646:	6022      	strge	r2, [r4, #0]
 8004648:	6022      	strlt	r2, [r4, #0]
 800464a:	bfb8      	it	lt
 800464c:	6063      	strlt	r3, [r4, #4]
 800464e:	6861      	ldr	r1, [r4, #4]
 8004650:	293b      	cmp	r1, #59	; 0x3b
 8004652:	d911      	bls.n	8004678 <validate_structure+0x58>
 8004654:	223c      	movs	r2, #60	; 0x3c
 8004656:	4668      	mov	r0, sp
 8004658:	f001 fab2 	bl	8005bc0 <div>
 800465c:	9a01      	ldr	r2, [sp, #4]
 800465e:	68a3      	ldr	r3, [r4, #8]
 8004660:	9900      	ldr	r1, [sp, #0]
 8004662:	2a00      	cmp	r2, #0
 8004664:	440b      	add	r3, r1
 8004666:	60a3      	str	r3, [r4, #8]
 8004668:	bfbb      	ittet	lt
 800466a:	323c      	addlt	r2, #60	; 0x3c
 800466c:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 8004670:	6062      	strge	r2, [r4, #4]
 8004672:	6062      	strlt	r2, [r4, #4]
 8004674:	bfb8      	it	lt
 8004676:	60a3      	strlt	r3, [r4, #8]
 8004678:	68a1      	ldr	r1, [r4, #8]
 800467a:	2917      	cmp	r1, #23
 800467c:	d911      	bls.n	80046a2 <validate_structure+0x82>
 800467e:	2218      	movs	r2, #24
 8004680:	4668      	mov	r0, sp
 8004682:	f001 fa9d 	bl	8005bc0 <div>
 8004686:	9a01      	ldr	r2, [sp, #4]
 8004688:	68e3      	ldr	r3, [r4, #12]
 800468a:	9900      	ldr	r1, [sp, #0]
 800468c:	2a00      	cmp	r2, #0
 800468e:	440b      	add	r3, r1
 8004690:	60e3      	str	r3, [r4, #12]
 8004692:	bfbb      	ittet	lt
 8004694:	3218      	addlt	r2, #24
 8004696:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 800469a:	60a2      	strge	r2, [r4, #8]
 800469c:	60a2      	strlt	r2, [r4, #8]
 800469e:	bfb8      	it	lt
 80046a0:	60e3      	strlt	r3, [r4, #12]
 80046a2:	6921      	ldr	r1, [r4, #16]
 80046a4:	290b      	cmp	r1, #11
 80046a6:	d911      	bls.n	80046cc <validate_structure+0xac>
 80046a8:	220c      	movs	r2, #12
 80046aa:	4668      	mov	r0, sp
 80046ac:	f001 fa88 	bl	8005bc0 <div>
 80046b0:	9a01      	ldr	r2, [sp, #4]
 80046b2:	6963      	ldr	r3, [r4, #20]
 80046b4:	9900      	ldr	r1, [sp, #0]
 80046b6:	2a00      	cmp	r2, #0
 80046b8:	440b      	add	r3, r1
 80046ba:	6163      	str	r3, [r4, #20]
 80046bc:	bfbb      	ittet	lt
 80046be:	320c      	addlt	r2, #12
 80046c0:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 80046c4:	6122      	strge	r2, [r4, #16]
 80046c6:	6122      	strlt	r2, [r4, #16]
 80046c8:	bfb8      	it	lt
 80046ca:	6163      	strlt	r3, [r4, #20]
 80046cc:	6963      	ldr	r3, [r4, #20]
 80046ce:	0798      	lsls	r0, r3, #30
 80046d0:	d120      	bne.n	8004714 <validate_structure+0xf4>
 80046d2:	2164      	movs	r1, #100	; 0x64
 80046d4:	fb93 f2f1 	sdiv	r2, r3, r1
 80046d8:	fb01 3212 	mls	r2, r1, r2, r3
 80046dc:	b9e2      	cbnz	r2, 8004718 <validate_structure+0xf8>
 80046de:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80046e2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80046e6:	fb93 f1f2 	sdiv	r1, r3, r2
 80046ea:	fb02 3311 	mls	r3, r2, r1, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	bf14      	ite	ne
 80046f2:	231c      	movne	r3, #28
 80046f4:	231d      	moveq	r3, #29
 80046f6:	68e2      	ldr	r2, [r4, #12]
 80046f8:	2a00      	cmp	r2, #0
 80046fa:	dc0f      	bgt.n	800471c <validate_structure+0xfc>
 80046fc:	4f33      	ldr	r7, [pc, #204]	; (80047cc <validate_structure+0x1ac>)
 80046fe:	260b      	movs	r6, #11
 8004700:	2064      	movs	r0, #100	; 0x64
 8004702:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8004706:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800470a:	f1bc 0f00 	cmp.w	ip, #0
 800470e:	dd31      	ble.n	8004774 <validate_structure+0x154>
 8004710:	b003      	add	sp, #12
 8004712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004714:	231c      	movs	r3, #28
 8004716:	e7ee      	b.n	80046f6 <validate_structure+0xd6>
 8004718:	231d      	movs	r3, #29
 800471a:	e7ec      	b.n	80046f6 <validate_structure+0xd6>
 800471c:	4e2b      	ldr	r6, [pc, #172]	; (80047cc <validate_structure+0x1ac>)
 800471e:	2700      	movs	r7, #0
 8004720:	2064      	movs	r0, #100	; 0x64
 8004722:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8004726:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800472a:	2a01      	cmp	r2, #1
 800472c:	bf14      	ite	ne
 800472e:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 8004732:	469c      	moveq	ip, r3
 8004734:	4561      	cmp	r1, ip
 8004736:	ddeb      	ble.n	8004710 <validate_structure+0xf0>
 8004738:	3201      	adds	r2, #1
 800473a:	eba1 010c 	sub.w	r1, r1, ip
 800473e:	2a0c      	cmp	r2, #12
 8004740:	60e1      	str	r1, [r4, #12]
 8004742:	6122      	str	r2, [r4, #16]
 8004744:	d1ef      	bne.n	8004726 <validate_structure+0x106>
 8004746:	6963      	ldr	r3, [r4, #20]
 8004748:	1c5a      	adds	r2, r3, #1
 800474a:	0791      	lsls	r1, r2, #30
 800474c:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8004750:	d137      	bne.n	80047c2 <validate_structure+0x1a2>
 8004752:	fb92 f1f0 	sdiv	r1, r2, r0
 8004756:	fb00 2211 	mls	r2, r0, r1, r2
 800475a:	2a00      	cmp	r2, #0
 800475c:	d133      	bne.n	80047c6 <validate_structure+0x1a6>
 800475e:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8004762:	fb93 f2f5 	sdiv	r2, r3, r5
 8004766:	fb05 3312 	mls	r3, r5, r2, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	bf14      	ite	ne
 800476e:	231c      	movne	r3, #28
 8004770:	231d      	moveq	r3, #29
 8004772:	e7d8      	b.n	8004726 <validate_structure+0x106>
 8004774:	6921      	ldr	r1, [r4, #16]
 8004776:	3901      	subs	r1, #1
 8004778:	6121      	str	r1, [r4, #16]
 800477a:	3101      	adds	r1, #1
 800477c:	d114      	bne.n	80047a8 <validate_structure+0x188>
 800477e:	6963      	ldr	r3, [r4, #20]
 8004780:	1e5a      	subs	r2, r3, #1
 8004782:	0791      	lsls	r1, r2, #30
 8004784:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8004788:	d117      	bne.n	80047ba <validate_structure+0x19a>
 800478a:	fb92 f1f0 	sdiv	r1, r2, r0
 800478e:	fb00 2211 	mls	r2, r0, r1, r2
 8004792:	b9a2      	cbnz	r2, 80047be <validate_structure+0x19e>
 8004794:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8004798:	fb93 f2f5 	sdiv	r2, r3, r5
 800479c:	fb05 3312 	mls	r3, r5, r2, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	bf14      	ite	ne
 80047a4:	231c      	movne	r3, #28
 80047a6:	231d      	moveq	r3, #29
 80047a8:	6922      	ldr	r2, [r4, #16]
 80047aa:	2a01      	cmp	r2, #1
 80047ac:	bf14      	ite	ne
 80047ae:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 80047b2:	461a      	moveq	r2, r3
 80047b4:	4462      	add	r2, ip
 80047b6:	60e2      	str	r2, [r4, #12]
 80047b8:	e7a5      	b.n	8004706 <validate_structure+0xe6>
 80047ba:	231c      	movs	r3, #28
 80047bc:	e7f4      	b.n	80047a8 <validate_structure+0x188>
 80047be:	231d      	movs	r3, #29
 80047c0:	e7f2      	b.n	80047a8 <validate_structure+0x188>
 80047c2:	231c      	movs	r3, #28
 80047c4:	e7af      	b.n	8004726 <validate_structure+0x106>
 80047c6:	231d      	movs	r3, #29
 80047c8:	e7ad      	b.n	8004726 <validate_structure+0x106>
 80047ca:	bf00      	nop
 80047cc:	08008c7c 	.word	0x08008c7c

080047d0 <mktime>:
 80047d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047d4:	b085      	sub	sp, #20
 80047d6:	4607      	mov	r7, r0
 80047d8:	f002 f9cc 	bl	8006b74 <__gettzinfo>
 80047dc:	4681      	mov	r9, r0
 80047de:	4638      	mov	r0, r7
 80047e0:	f7ff ff1e 	bl	8004620 <validate_structure>
 80047e4:	e9d7 4000 	ldrd	r4, r0, [r7]
 80047e8:	233c      	movs	r3, #60	; 0x3c
 80047ea:	fb03 4400 	mla	r4, r3, r0, r4
 80047ee:	68b8      	ldr	r0, [r7, #8]
 80047f0:	4abc      	ldr	r2, [pc, #752]	; (8004ae4 <mktime+0x314>)
 80047f2:	697e      	ldr	r6, [r7, #20]
 80047f4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80047f8:	fb03 4400 	mla	r4, r3, r0, r4
 80047fc:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8004800:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004804:	3d01      	subs	r5, #1
 8004806:	2b01      	cmp	r3, #1
 8004808:	4415      	add	r5, r2
 800480a:	dd11      	ble.n	8004830 <mktime+0x60>
 800480c:	07b1      	lsls	r1, r6, #30
 800480e:	d10f      	bne.n	8004830 <mktime+0x60>
 8004810:	2264      	movs	r2, #100	; 0x64
 8004812:	fb96 f3f2 	sdiv	r3, r6, r2
 8004816:	fb02 6313 	mls	r3, r2, r3, r6
 800481a:	b943      	cbnz	r3, 800482e <mktime+0x5e>
 800481c:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8004820:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004824:	fb93 f1f2 	sdiv	r1, r3, r2
 8004828:	fb02 3311 	mls	r3, r2, r1, r3
 800482c:	b903      	cbnz	r3, 8004830 <mktime+0x60>
 800482e:	3501      	adds	r5, #1
 8004830:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8004834:	3310      	adds	r3, #16
 8004836:	f644 6220 	movw	r2, #20000	; 0x4e20
 800483a:	4293      	cmp	r3, r2
 800483c:	61fd      	str	r5, [r7, #28]
 800483e:	f200 815d 	bhi.w	8004afc <mktime+0x32c>
 8004842:	2e46      	cmp	r6, #70	; 0x46
 8004844:	dd71      	ble.n	800492a <mktime+0x15a>
 8004846:	2346      	movs	r3, #70	; 0x46
 8004848:	f240 1c6d 	movw	ip, #365	; 0x16d
 800484c:	2164      	movs	r1, #100	; 0x64
 800484e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004852:	079a      	lsls	r2, r3, #30
 8004854:	d163      	bne.n	800491e <mktime+0x14e>
 8004856:	fb93 f2f1 	sdiv	r2, r3, r1
 800485a:	fb01 3212 	mls	r2, r1, r2, r3
 800485e:	2a00      	cmp	r2, #0
 8004860:	d160      	bne.n	8004924 <mktime+0x154>
 8004862:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8004866:	fb92 fef0 	sdiv	lr, r2, r0
 800486a:	fb00 221e 	mls	r2, r0, lr, r2
 800486e:	2a00      	cmp	r2, #0
 8004870:	bf14      	ite	ne
 8004872:	4662      	movne	r2, ip
 8004874:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8004878:	3301      	adds	r3, #1
 800487a:	429e      	cmp	r6, r3
 800487c:	4415      	add	r5, r2
 800487e:	d1e8      	bne.n	8004852 <mktime+0x82>
 8004880:	4b99      	ldr	r3, [pc, #612]	; (8004ae8 <mktime+0x318>)
 8004882:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8004886:	fbc5 4803 	smlal	r4, r8, r5, r3
 800488a:	f000 ffa1 	bl	80057d0 <__tz_lock>
 800488e:	f000 ffab 	bl	80057e8 <_tzset_unlocked>
 8004892:	4b96      	ldr	r3, [pc, #600]	; (8004aec <mktime+0x31c>)
 8004894:	f8d3 b000 	ldr.w	fp, [r3]
 8004898:	f1bb 0f00 	cmp.w	fp, #0
 800489c:	d039      	beq.n	8004912 <mktime+0x142>
 800489e:	f8d7 b020 	ldr.w	fp, [r7, #32]
 80048a2:	6978      	ldr	r0, [r7, #20]
 80048a4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80048a8:	f1bb 0f01 	cmp.w	fp, #1
 80048ac:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80048b0:	46da      	mov	sl, fp
 80048b2:	bfa8      	it	ge
 80048b4:	f04f 0a01 	movge.w	sl, #1
 80048b8:	4283      	cmp	r3, r0
 80048ba:	d178      	bne.n	80049ae <mktime+0x1de>
 80048bc:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 80048c0:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 80048c4:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 80048c8:	1a5b      	subs	r3, r3, r1
 80048ca:	9302      	str	r3, [sp, #8]
 80048cc:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 80048d0:	9303      	str	r3, [sp, #12]
 80048d2:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 80048d6:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 80048da:	9301      	str	r3, [sp, #4]
 80048dc:	ebb3 0c02 	subs.w	ip, r3, r2
 80048e0:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 80048e4:	4564      	cmp	r4, ip
 80048e6:	eb78 0300 	sbcs.w	r3, r8, r0
 80048ea:	da66      	bge.n	80049ba <mktime+0x1ea>
 80048ec:	f8d9 3000 	ldr.w	r3, [r9]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d06f      	beq.n	80049d4 <mktime+0x204>
 80048f4:	9b02      	ldr	r3, [sp, #8]
 80048f6:	429c      	cmp	r4, r3
 80048f8:	9b03      	ldr	r3, [sp, #12]
 80048fa:	eb78 0303 	sbcs.w	r3, r8, r3
 80048fe:	db03      	blt.n	8004908 <mktime+0x138>
 8004900:	4564      	cmp	r4, ip
 8004902:	eb78 0300 	sbcs.w	r3, r8, r0
 8004906:	db6b      	blt.n	80049e0 <mktime+0x210>
 8004908:	f1bb 0f00 	cmp.w	fp, #0
 800490c:	f04f 0b00 	mov.w	fp, #0
 8004910:	da6b      	bge.n	80049ea <mktime+0x21a>
 8004912:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8004916:	190c      	adds	r4, r1, r4
 8004918:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800491c:	e0a9      	b.n	8004a72 <mktime+0x2a2>
 800491e:	f240 126d 	movw	r2, #365	; 0x16d
 8004922:	e7a9      	b.n	8004878 <mktime+0xa8>
 8004924:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8004928:	e7a6      	b.n	8004878 <mktime+0xa8>
 800492a:	d0a9      	beq.n	8004880 <mktime+0xb0>
 800492c:	2345      	movs	r3, #69	; 0x45
 800492e:	f240 1c6d 	movw	ip, #365	; 0x16d
 8004932:	2164      	movs	r1, #100	; 0x64
 8004934:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004938:	e012      	b.n	8004960 <mktime+0x190>
 800493a:	bb62      	cbnz	r2, 8004996 <mktime+0x1c6>
 800493c:	fb93 f2f1 	sdiv	r2, r3, r1
 8004940:	fb01 3212 	mls	r2, r1, r2, r3
 8004944:	bb52      	cbnz	r2, 800499c <mktime+0x1cc>
 8004946:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800494a:	fb92 fef0 	sdiv	lr, r2, r0
 800494e:	fb00 221e 	mls	r2, r0, lr, r2
 8004952:	2a00      	cmp	r2, #0
 8004954:	bf14      	ite	ne
 8004956:	4662      	movne	r2, ip
 8004958:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800495c:	1aad      	subs	r5, r5, r2
 800495e:	3b01      	subs	r3, #1
 8004960:	429e      	cmp	r6, r3
 8004962:	f003 0203 	and.w	r2, r3, #3
 8004966:	dbe8      	blt.n	800493a <mktime+0x16a>
 8004968:	b9da      	cbnz	r2, 80049a2 <mktime+0x1d2>
 800496a:	2264      	movs	r2, #100	; 0x64
 800496c:	fb96 f3f2 	sdiv	r3, r6, r2
 8004970:	fb02 6313 	mls	r3, r2, r3, r6
 8004974:	b9c3      	cbnz	r3, 80049a8 <mktime+0x1d8>
 8004976:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800497a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800497e:	fb93 f1f2 	sdiv	r1, r3, r2
 8004982:	fb02 3311 	mls	r3, r2, r1, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	f240 136d 	movw	r3, #365	; 0x16d
 800498c:	bf08      	it	eq
 800498e:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8004992:	1aed      	subs	r5, r5, r3
 8004994:	e774      	b.n	8004880 <mktime+0xb0>
 8004996:	f240 126d 	movw	r2, #365	; 0x16d
 800499a:	e7df      	b.n	800495c <mktime+0x18c>
 800499c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80049a0:	e7dc      	b.n	800495c <mktime+0x18c>
 80049a2:	f240 136d 	movw	r3, #365	; 0x16d
 80049a6:	e7f4      	b.n	8004992 <mktime+0x1c2>
 80049a8:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80049ac:	e7f1      	b.n	8004992 <mktime+0x1c2>
 80049ae:	f000 fe65 	bl	800567c <__tzcalc_limits>
 80049b2:	2800      	cmp	r0, #0
 80049b4:	d182      	bne.n	80048bc <mktime+0xec>
 80049b6:	46d3      	mov	fp, sl
 80049b8:	e050      	b.n	8004a5c <mktime+0x28c>
 80049ba:	9b01      	ldr	r3, [sp, #4]
 80049bc:	1a5b      	subs	r3, r3, r1
 80049be:	9301      	str	r3, [sp, #4]
 80049c0:	ea4f 73e1 	mov.w	r3, r1, asr #31
 80049c4:	eb6e 0e03 	sbc.w	lr, lr, r3
 80049c8:	9b01      	ldr	r3, [sp, #4]
 80049ca:	429c      	cmp	r4, r3
 80049cc:	eb78 030e 	sbcs.w	r3, r8, lr
 80049d0:	dbf1      	blt.n	80049b6 <mktime+0x1e6>
 80049d2:	e78b      	b.n	80048ec <mktime+0x11c>
 80049d4:	9b02      	ldr	r3, [sp, #8]
 80049d6:	429c      	cmp	r4, r3
 80049d8:	9b03      	ldr	r3, [sp, #12]
 80049da:	eb78 0303 	sbcs.w	r3, r8, r3
 80049de:	db8f      	blt.n	8004900 <mktime+0x130>
 80049e0:	f1bb 0f00 	cmp.w	fp, #0
 80049e4:	db3e      	blt.n	8004a64 <mktime+0x294>
 80049e6:	f04f 0b01 	mov.w	fp, #1
 80049ea:	ea8a 0a0b 	eor.w	sl, sl, fp
 80049ee:	f1ba 0f01 	cmp.w	sl, #1
 80049f2:	d133      	bne.n	8004a5c <mktime+0x28c>
 80049f4:	f1bb 0f00 	cmp.w	fp, #0
 80049f8:	d04e      	beq.n	8004a98 <mktime+0x2c8>
 80049fa:	1a52      	subs	r2, r2, r1
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8004a02:	4413      	add	r3, r2
 8004a04:	1914      	adds	r4, r2, r4
 8004a06:	603b      	str	r3, [r7, #0]
 8004a08:	4638      	mov	r0, r7
 8004a0a:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 8004a0e:	f7ff fe07 	bl	8004620 <validate_structure>
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	ebb2 020a 	subs.w	r2, r2, sl
 8004a18:	d020      	beq.n	8004a5c <mktime+0x28c>
 8004a1a:	2a01      	cmp	r2, #1
 8004a1c:	dc3e      	bgt.n	8004a9c <mktime+0x2cc>
 8004a1e:	1c90      	adds	r0, r2, #2
 8004a20:	bfd8      	it	le
 8004a22:	2201      	movle	r2, #1
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	18d3      	adds	r3, r2, r3
 8004a28:	4415      	add	r5, r2
 8004a2a:	d540      	bpl.n	8004aae <mktime+0x2de>
 8004a2c:	1e73      	subs	r3, r6, #1
 8004a2e:	0799      	lsls	r1, r3, #30
 8004a30:	d137      	bne.n	8004aa2 <mktime+0x2d2>
 8004a32:	2264      	movs	r2, #100	; 0x64
 8004a34:	fb93 f1f2 	sdiv	r1, r3, r2
 8004a38:	fb02 3311 	mls	r3, r2, r1, r3
 8004a3c:	bba3      	cbnz	r3, 8004aa8 <mktime+0x2d8>
 8004a3e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8004a42:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8004a46:	fb96 f2f3 	sdiv	r2, r6, r3
 8004a4a:	fb03 6612 	mls	r6, r3, r2, r6
 8004a4e:	2e00      	cmp	r6, #0
 8004a50:	f240 136d 	movw	r3, #365	; 0x16d
 8004a54:	bf18      	it	ne
 8004a56:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8004a5a:	61fb      	str	r3, [r7, #28]
 8004a5c:	f1bb 0f01 	cmp.w	fp, #1
 8004a60:	f47f af57 	bne.w	8004912 <mktime+0x142>
 8004a64:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8004a68:	190c      	adds	r4, r1, r4
 8004a6a:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8004a6e:	f04f 0b01 	mov.w	fp, #1
 8004a72:	f000 feb3 	bl	80057dc <__tz_unlock>
 8004a76:	3504      	adds	r5, #4
 8004a78:	2307      	movs	r3, #7
 8004a7a:	fb95 f3f3 	sdiv	r3, r5, r3
 8004a7e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004a82:	1aed      	subs	r5, r5, r3
 8004a84:	bf48      	it	mi
 8004a86:	3507      	addmi	r5, #7
 8004a88:	f8c7 b020 	str.w	fp, [r7, #32]
 8004a8c:	61bd      	str	r5, [r7, #24]
 8004a8e:	4620      	mov	r0, r4
 8004a90:	4641      	mov	r1, r8
 8004a92:	b005      	add	sp, #20
 8004a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a98:	1a8a      	subs	r2, r1, r2
 8004a9a:	e7af      	b.n	80049fc <mktime+0x22c>
 8004a9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004aa0:	e7c0      	b.n	8004a24 <mktime+0x254>
 8004aa2:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8004aa6:	e7d8      	b.n	8004a5a <mktime+0x28a>
 8004aa8:	f240 136d 	movw	r3, #365	; 0x16d
 8004aac:	e7d5      	b.n	8004a5a <mktime+0x28a>
 8004aae:	07b2      	lsls	r2, r6, #30
 8004ab0:	d11e      	bne.n	8004af0 <mktime+0x320>
 8004ab2:	2164      	movs	r1, #100	; 0x64
 8004ab4:	fb96 f2f1 	sdiv	r2, r6, r1
 8004ab8:	fb01 6212 	mls	r2, r1, r2, r6
 8004abc:	b9da      	cbnz	r2, 8004af6 <mktime+0x326>
 8004abe:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004ac2:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8004ac6:	fb96 f1f2 	sdiv	r1, r6, r2
 8004aca:	fb02 6611 	mls	r6, r2, r1, r6
 8004ace:	2e00      	cmp	r6, #0
 8004ad0:	f240 126d 	movw	r2, #365	; 0x16d
 8004ad4:	bf08      	it	eq
 8004ad6:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8004ada:	4293      	cmp	r3, r2
 8004adc:	bfa8      	it	ge
 8004ade:	1a9b      	subge	r3, r3, r2
 8004ae0:	e7bb      	b.n	8004a5a <mktime+0x28a>
 8004ae2:	bf00      	nop
 8004ae4:	08008cac 	.word	0x08008cac
 8004ae8:	00015180 	.word	0x00015180
 8004aec:	20000498 	.word	0x20000498
 8004af0:	f240 126d 	movw	r2, #365	; 0x16d
 8004af4:	e7f1      	b.n	8004ada <mktime+0x30a>
 8004af6:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8004afa:	e7ee      	b.n	8004ada <mktime+0x30a>
 8004afc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004b00:	46a0      	mov	r8, r4
 8004b02:	e7c4      	b.n	8004a8e <mktime+0x2be>

08004b04 <_free_r>:
 8004b04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b06:	2900      	cmp	r1, #0
 8004b08:	d044      	beq.n	8004b94 <_free_r+0x90>
 8004b0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b0e:	9001      	str	r0, [sp, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f1a1 0404 	sub.w	r4, r1, #4
 8004b16:	bfb8      	it	lt
 8004b18:	18e4      	addlt	r4, r4, r3
 8004b1a:	f002 f8f3 	bl	8006d04 <__malloc_lock>
 8004b1e:	4a1e      	ldr	r2, [pc, #120]	; (8004b98 <_free_r+0x94>)
 8004b20:	9801      	ldr	r0, [sp, #4]
 8004b22:	6813      	ldr	r3, [r2, #0]
 8004b24:	b933      	cbnz	r3, 8004b34 <_free_r+0x30>
 8004b26:	6063      	str	r3, [r4, #4]
 8004b28:	6014      	str	r4, [r2, #0]
 8004b2a:	b003      	add	sp, #12
 8004b2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b30:	f002 b8ee 	b.w	8006d10 <__malloc_unlock>
 8004b34:	42a3      	cmp	r3, r4
 8004b36:	d908      	bls.n	8004b4a <_free_r+0x46>
 8004b38:	6825      	ldr	r5, [r4, #0]
 8004b3a:	1961      	adds	r1, r4, r5
 8004b3c:	428b      	cmp	r3, r1
 8004b3e:	bf01      	itttt	eq
 8004b40:	6819      	ldreq	r1, [r3, #0]
 8004b42:	685b      	ldreq	r3, [r3, #4]
 8004b44:	1949      	addeq	r1, r1, r5
 8004b46:	6021      	streq	r1, [r4, #0]
 8004b48:	e7ed      	b.n	8004b26 <_free_r+0x22>
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	b10b      	cbz	r3, 8004b54 <_free_r+0x50>
 8004b50:	42a3      	cmp	r3, r4
 8004b52:	d9fa      	bls.n	8004b4a <_free_r+0x46>
 8004b54:	6811      	ldr	r1, [r2, #0]
 8004b56:	1855      	adds	r5, r2, r1
 8004b58:	42a5      	cmp	r5, r4
 8004b5a:	d10b      	bne.n	8004b74 <_free_r+0x70>
 8004b5c:	6824      	ldr	r4, [r4, #0]
 8004b5e:	4421      	add	r1, r4
 8004b60:	1854      	adds	r4, r2, r1
 8004b62:	42a3      	cmp	r3, r4
 8004b64:	6011      	str	r1, [r2, #0]
 8004b66:	d1e0      	bne.n	8004b2a <_free_r+0x26>
 8004b68:	681c      	ldr	r4, [r3, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	6053      	str	r3, [r2, #4]
 8004b6e:	4421      	add	r1, r4
 8004b70:	6011      	str	r1, [r2, #0]
 8004b72:	e7da      	b.n	8004b2a <_free_r+0x26>
 8004b74:	d902      	bls.n	8004b7c <_free_r+0x78>
 8004b76:	230c      	movs	r3, #12
 8004b78:	6003      	str	r3, [r0, #0]
 8004b7a:	e7d6      	b.n	8004b2a <_free_r+0x26>
 8004b7c:	6825      	ldr	r5, [r4, #0]
 8004b7e:	1961      	adds	r1, r4, r5
 8004b80:	428b      	cmp	r3, r1
 8004b82:	bf04      	itt	eq
 8004b84:	6819      	ldreq	r1, [r3, #0]
 8004b86:	685b      	ldreq	r3, [r3, #4]
 8004b88:	6063      	str	r3, [r4, #4]
 8004b8a:	bf04      	itt	eq
 8004b8c:	1949      	addeq	r1, r1, r5
 8004b8e:	6021      	streq	r1, [r4, #0]
 8004b90:	6054      	str	r4, [r2, #4]
 8004b92:	e7ca      	b.n	8004b2a <_free_r+0x26>
 8004b94:	b003      	add	sp, #12
 8004b96:	bd30      	pop	{r4, r5, pc}
 8004b98:	20000474 	.word	0x20000474

08004b9c <sbrk_aligned>:
 8004b9c:	b570      	push	{r4, r5, r6, lr}
 8004b9e:	4e0e      	ldr	r6, [pc, #56]	; (8004bd8 <sbrk_aligned+0x3c>)
 8004ba0:	460c      	mov	r4, r1
 8004ba2:	6831      	ldr	r1, [r6, #0]
 8004ba4:	4605      	mov	r5, r0
 8004ba6:	b911      	cbnz	r1, 8004bae <sbrk_aligned+0x12>
 8004ba8:	f000 fd24 	bl	80055f4 <_sbrk_r>
 8004bac:	6030      	str	r0, [r6, #0]
 8004bae:	4621      	mov	r1, r4
 8004bb0:	4628      	mov	r0, r5
 8004bb2:	f000 fd1f 	bl	80055f4 <_sbrk_r>
 8004bb6:	1c43      	adds	r3, r0, #1
 8004bb8:	d00a      	beq.n	8004bd0 <sbrk_aligned+0x34>
 8004bba:	1cc4      	adds	r4, r0, #3
 8004bbc:	f024 0403 	bic.w	r4, r4, #3
 8004bc0:	42a0      	cmp	r0, r4
 8004bc2:	d007      	beq.n	8004bd4 <sbrk_aligned+0x38>
 8004bc4:	1a21      	subs	r1, r4, r0
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	f000 fd14 	bl	80055f4 <_sbrk_r>
 8004bcc:	3001      	adds	r0, #1
 8004bce:	d101      	bne.n	8004bd4 <sbrk_aligned+0x38>
 8004bd0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	bd70      	pop	{r4, r5, r6, pc}
 8004bd8:	20000478 	.word	0x20000478

08004bdc <_malloc_r>:
 8004bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004be0:	1ccd      	adds	r5, r1, #3
 8004be2:	f025 0503 	bic.w	r5, r5, #3
 8004be6:	3508      	adds	r5, #8
 8004be8:	2d0c      	cmp	r5, #12
 8004bea:	bf38      	it	cc
 8004bec:	250c      	movcc	r5, #12
 8004bee:	2d00      	cmp	r5, #0
 8004bf0:	4607      	mov	r7, r0
 8004bf2:	db01      	blt.n	8004bf8 <_malloc_r+0x1c>
 8004bf4:	42a9      	cmp	r1, r5
 8004bf6:	d905      	bls.n	8004c04 <_malloc_r+0x28>
 8004bf8:	230c      	movs	r3, #12
 8004bfa:	603b      	str	r3, [r7, #0]
 8004bfc:	2600      	movs	r6, #0
 8004bfe:	4630      	mov	r0, r6
 8004c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c04:	4e2e      	ldr	r6, [pc, #184]	; (8004cc0 <_malloc_r+0xe4>)
 8004c06:	f002 f87d 	bl	8006d04 <__malloc_lock>
 8004c0a:	6833      	ldr	r3, [r6, #0]
 8004c0c:	461c      	mov	r4, r3
 8004c0e:	bb34      	cbnz	r4, 8004c5e <_malloc_r+0x82>
 8004c10:	4629      	mov	r1, r5
 8004c12:	4638      	mov	r0, r7
 8004c14:	f7ff ffc2 	bl	8004b9c <sbrk_aligned>
 8004c18:	1c43      	adds	r3, r0, #1
 8004c1a:	4604      	mov	r4, r0
 8004c1c:	d14d      	bne.n	8004cba <_malloc_r+0xde>
 8004c1e:	6834      	ldr	r4, [r6, #0]
 8004c20:	4626      	mov	r6, r4
 8004c22:	2e00      	cmp	r6, #0
 8004c24:	d140      	bne.n	8004ca8 <_malloc_r+0xcc>
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	4631      	mov	r1, r6
 8004c2a:	4638      	mov	r0, r7
 8004c2c:	eb04 0803 	add.w	r8, r4, r3
 8004c30:	f000 fce0 	bl	80055f4 <_sbrk_r>
 8004c34:	4580      	cmp	r8, r0
 8004c36:	d13a      	bne.n	8004cae <_malloc_r+0xd2>
 8004c38:	6821      	ldr	r1, [r4, #0]
 8004c3a:	3503      	adds	r5, #3
 8004c3c:	1a6d      	subs	r5, r5, r1
 8004c3e:	f025 0503 	bic.w	r5, r5, #3
 8004c42:	3508      	adds	r5, #8
 8004c44:	2d0c      	cmp	r5, #12
 8004c46:	bf38      	it	cc
 8004c48:	250c      	movcc	r5, #12
 8004c4a:	4629      	mov	r1, r5
 8004c4c:	4638      	mov	r0, r7
 8004c4e:	f7ff ffa5 	bl	8004b9c <sbrk_aligned>
 8004c52:	3001      	adds	r0, #1
 8004c54:	d02b      	beq.n	8004cae <_malloc_r+0xd2>
 8004c56:	6823      	ldr	r3, [r4, #0]
 8004c58:	442b      	add	r3, r5
 8004c5a:	6023      	str	r3, [r4, #0]
 8004c5c:	e00e      	b.n	8004c7c <_malloc_r+0xa0>
 8004c5e:	6822      	ldr	r2, [r4, #0]
 8004c60:	1b52      	subs	r2, r2, r5
 8004c62:	d41e      	bmi.n	8004ca2 <_malloc_r+0xc6>
 8004c64:	2a0b      	cmp	r2, #11
 8004c66:	d916      	bls.n	8004c96 <_malloc_r+0xba>
 8004c68:	1961      	adds	r1, r4, r5
 8004c6a:	42a3      	cmp	r3, r4
 8004c6c:	6025      	str	r5, [r4, #0]
 8004c6e:	bf18      	it	ne
 8004c70:	6059      	strne	r1, [r3, #4]
 8004c72:	6863      	ldr	r3, [r4, #4]
 8004c74:	bf08      	it	eq
 8004c76:	6031      	streq	r1, [r6, #0]
 8004c78:	5162      	str	r2, [r4, r5]
 8004c7a:	604b      	str	r3, [r1, #4]
 8004c7c:	4638      	mov	r0, r7
 8004c7e:	f104 060b 	add.w	r6, r4, #11
 8004c82:	f002 f845 	bl	8006d10 <__malloc_unlock>
 8004c86:	f026 0607 	bic.w	r6, r6, #7
 8004c8a:	1d23      	adds	r3, r4, #4
 8004c8c:	1af2      	subs	r2, r6, r3
 8004c8e:	d0b6      	beq.n	8004bfe <_malloc_r+0x22>
 8004c90:	1b9b      	subs	r3, r3, r6
 8004c92:	50a3      	str	r3, [r4, r2]
 8004c94:	e7b3      	b.n	8004bfe <_malloc_r+0x22>
 8004c96:	6862      	ldr	r2, [r4, #4]
 8004c98:	42a3      	cmp	r3, r4
 8004c9a:	bf0c      	ite	eq
 8004c9c:	6032      	streq	r2, [r6, #0]
 8004c9e:	605a      	strne	r2, [r3, #4]
 8004ca0:	e7ec      	b.n	8004c7c <_malloc_r+0xa0>
 8004ca2:	4623      	mov	r3, r4
 8004ca4:	6864      	ldr	r4, [r4, #4]
 8004ca6:	e7b2      	b.n	8004c0e <_malloc_r+0x32>
 8004ca8:	4634      	mov	r4, r6
 8004caa:	6876      	ldr	r6, [r6, #4]
 8004cac:	e7b9      	b.n	8004c22 <_malloc_r+0x46>
 8004cae:	230c      	movs	r3, #12
 8004cb0:	603b      	str	r3, [r7, #0]
 8004cb2:	4638      	mov	r0, r7
 8004cb4:	f002 f82c 	bl	8006d10 <__malloc_unlock>
 8004cb8:	e7a1      	b.n	8004bfe <_malloc_r+0x22>
 8004cba:	6025      	str	r5, [r4, #0]
 8004cbc:	e7de      	b.n	8004c7c <_malloc_r+0xa0>
 8004cbe:	bf00      	nop
 8004cc0:	20000474 	.word	0x20000474

08004cc4 <__cvt>:
 8004cc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cc8:	ec55 4b10 	vmov	r4, r5, d0
 8004ccc:	2d00      	cmp	r5, #0
 8004cce:	460e      	mov	r6, r1
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	462b      	mov	r3, r5
 8004cd4:	bfbb      	ittet	lt
 8004cd6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004cda:	461d      	movlt	r5, r3
 8004cdc:	2300      	movge	r3, #0
 8004cde:	232d      	movlt	r3, #45	; 0x2d
 8004ce0:	700b      	strb	r3, [r1, #0]
 8004ce2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ce4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004ce8:	4691      	mov	r9, r2
 8004cea:	f023 0820 	bic.w	r8, r3, #32
 8004cee:	bfbc      	itt	lt
 8004cf0:	4622      	movlt	r2, r4
 8004cf2:	4614      	movlt	r4, r2
 8004cf4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004cf8:	d005      	beq.n	8004d06 <__cvt+0x42>
 8004cfa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004cfe:	d100      	bne.n	8004d02 <__cvt+0x3e>
 8004d00:	3601      	adds	r6, #1
 8004d02:	2102      	movs	r1, #2
 8004d04:	e000      	b.n	8004d08 <__cvt+0x44>
 8004d06:	2103      	movs	r1, #3
 8004d08:	ab03      	add	r3, sp, #12
 8004d0a:	9301      	str	r3, [sp, #4]
 8004d0c:	ab02      	add	r3, sp, #8
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	ec45 4b10 	vmov	d0, r4, r5
 8004d14:	4653      	mov	r3, sl
 8004d16:	4632      	mov	r2, r6
 8004d18:	f000 fff2 	bl	8005d00 <_dtoa_r>
 8004d1c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004d20:	4607      	mov	r7, r0
 8004d22:	d102      	bne.n	8004d2a <__cvt+0x66>
 8004d24:	f019 0f01 	tst.w	r9, #1
 8004d28:	d022      	beq.n	8004d70 <__cvt+0xac>
 8004d2a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d2e:	eb07 0906 	add.w	r9, r7, r6
 8004d32:	d110      	bne.n	8004d56 <__cvt+0x92>
 8004d34:	783b      	ldrb	r3, [r7, #0]
 8004d36:	2b30      	cmp	r3, #48	; 0x30
 8004d38:	d10a      	bne.n	8004d50 <__cvt+0x8c>
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	4620      	mov	r0, r4
 8004d40:	4629      	mov	r1, r5
 8004d42:	f7fb fecb 	bl	8000adc <__aeabi_dcmpeq>
 8004d46:	b918      	cbnz	r0, 8004d50 <__cvt+0x8c>
 8004d48:	f1c6 0601 	rsb	r6, r6, #1
 8004d4c:	f8ca 6000 	str.w	r6, [sl]
 8004d50:	f8da 3000 	ldr.w	r3, [sl]
 8004d54:	4499      	add	r9, r3
 8004d56:	2200      	movs	r2, #0
 8004d58:	2300      	movs	r3, #0
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	4629      	mov	r1, r5
 8004d5e:	f7fb febd 	bl	8000adc <__aeabi_dcmpeq>
 8004d62:	b108      	cbz	r0, 8004d68 <__cvt+0xa4>
 8004d64:	f8cd 900c 	str.w	r9, [sp, #12]
 8004d68:	2230      	movs	r2, #48	; 0x30
 8004d6a:	9b03      	ldr	r3, [sp, #12]
 8004d6c:	454b      	cmp	r3, r9
 8004d6e:	d307      	bcc.n	8004d80 <__cvt+0xbc>
 8004d70:	9b03      	ldr	r3, [sp, #12]
 8004d72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d74:	1bdb      	subs	r3, r3, r7
 8004d76:	4638      	mov	r0, r7
 8004d78:	6013      	str	r3, [r2, #0]
 8004d7a:	b004      	add	sp, #16
 8004d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d80:	1c59      	adds	r1, r3, #1
 8004d82:	9103      	str	r1, [sp, #12]
 8004d84:	701a      	strb	r2, [r3, #0]
 8004d86:	e7f0      	b.n	8004d6a <__cvt+0xa6>

08004d88 <__exponent>:
 8004d88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2900      	cmp	r1, #0
 8004d8e:	bfb8      	it	lt
 8004d90:	4249      	neglt	r1, r1
 8004d92:	f803 2b02 	strb.w	r2, [r3], #2
 8004d96:	bfb4      	ite	lt
 8004d98:	222d      	movlt	r2, #45	; 0x2d
 8004d9a:	222b      	movge	r2, #43	; 0x2b
 8004d9c:	2909      	cmp	r1, #9
 8004d9e:	7042      	strb	r2, [r0, #1]
 8004da0:	dd2a      	ble.n	8004df8 <__exponent+0x70>
 8004da2:	f10d 0407 	add.w	r4, sp, #7
 8004da6:	46a4      	mov	ip, r4
 8004da8:	270a      	movs	r7, #10
 8004daa:	46a6      	mov	lr, r4
 8004dac:	460a      	mov	r2, r1
 8004dae:	fb91 f6f7 	sdiv	r6, r1, r7
 8004db2:	fb07 1516 	mls	r5, r7, r6, r1
 8004db6:	3530      	adds	r5, #48	; 0x30
 8004db8:	2a63      	cmp	r2, #99	; 0x63
 8004dba:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004dbe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004dc2:	4631      	mov	r1, r6
 8004dc4:	dcf1      	bgt.n	8004daa <__exponent+0x22>
 8004dc6:	3130      	adds	r1, #48	; 0x30
 8004dc8:	f1ae 0502 	sub.w	r5, lr, #2
 8004dcc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004dd0:	1c44      	adds	r4, r0, #1
 8004dd2:	4629      	mov	r1, r5
 8004dd4:	4561      	cmp	r1, ip
 8004dd6:	d30a      	bcc.n	8004dee <__exponent+0x66>
 8004dd8:	f10d 0209 	add.w	r2, sp, #9
 8004ddc:	eba2 020e 	sub.w	r2, r2, lr
 8004de0:	4565      	cmp	r5, ip
 8004de2:	bf88      	it	hi
 8004de4:	2200      	movhi	r2, #0
 8004de6:	4413      	add	r3, r2
 8004de8:	1a18      	subs	r0, r3, r0
 8004dea:	b003      	add	sp, #12
 8004dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004df2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004df6:	e7ed      	b.n	8004dd4 <__exponent+0x4c>
 8004df8:	2330      	movs	r3, #48	; 0x30
 8004dfa:	3130      	adds	r1, #48	; 0x30
 8004dfc:	7083      	strb	r3, [r0, #2]
 8004dfe:	70c1      	strb	r1, [r0, #3]
 8004e00:	1d03      	adds	r3, r0, #4
 8004e02:	e7f1      	b.n	8004de8 <__exponent+0x60>

08004e04 <_printf_float>:
 8004e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e08:	ed2d 8b02 	vpush	{d8}
 8004e0c:	b08d      	sub	sp, #52	; 0x34
 8004e0e:	460c      	mov	r4, r1
 8004e10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004e14:	4616      	mov	r6, r2
 8004e16:	461f      	mov	r7, r3
 8004e18:	4605      	mov	r5, r0
 8004e1a:	f001 ff5b 	bl	8006cd4 <_localeconv_r>
 8004e1e:	f8d0 a000 	ldr.w	sl, [r0]
 8004e22:	4650      	mov	r0, sl
 8004e24:	f7fb f9d4 	bl	80001d0 <strlen>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	930a      	str	r3, [sp, #40]	; 0x28
 8004e2c:	6823      	ldr	r3, [r4, #0]
 8004e2e:	9305      	str	r3, [sp, #20]
 8004e30:	f8d8 3000 	ldr.w	r3, [r8]
 8004e34:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004e38:	3307      	adds	r3, #7
 8004e3a:	f023 0307 	bic.w	r3, r3, #7
 8004e3e:	f103 0208 	add.w	r2, r3, #8
 8004e42:	f8c8 2000 	str.w	r2, [r8]
 8004e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004e4e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004e52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004e56:	9307      	str	r3, [sp, #28]
 8004e58:	f8cd 8018 	str.w	r8, [sp, #24]
 8004e5c:	ee08 0a10 	vmov	s16, r0
 8004e60:	4b9f      	ldr	r3, [pc, #636]	; (80050e0 <_printf_float+0x2dc>)
 8004e62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e6a:	f7fb fe69 	bl	8000b40 <__aeabi_dcmpun>
 8004e6e:	bb88      	cbnz	r0, 8004ed4 <_printf_float+0xd0>
 8004e70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e74:	4b9a      	ldr	r3, [pc, #616]	; (80050e0 <_printf_float+0x2dc>)
 8004e76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e7a:	f7fb fe43 	bl	8000b04 <__aeabi_dcmple>
 8004e7e:	bb48      	cbnz	r0, 8004ed4 <_printf_float+0xd0>
 8004e80:	2200      	movs	r2, #0
 8004e82:	2300      	movs	r3, #0
 8004e84:	4640      	mov	r0, r8
 8004e86:	4649      	mov	r1, r9
 8004e88:	f7fb fe32 	bl	8000af0 <__aeabi_dcmplt>
 8004e8c:	b110      	cbz	r0, 8004e94 <_printf_float+0x90>
 8004e8e:	232d      	movs	r3, #45	; 0x2d
 8004e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e94:	4b93      	ldr	r3, [pc, #588]	; (80050e4 <_printf_float+0x2e0>)
 8004e96:	4894      	ldr	r0, [pc, #592]	; (80050e8 <_printf_float+0x2e4>)
 8004e98:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004e9c:	bf94      	ite	ls
 8004e9e:	4698      	movls	r8, r3
 8004ea0:	4680      	movhi	r8, r0
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	6123      	str	r3, [r4, #16]
 8004ea6:	9b05      	ldr	r3, [sp, #20]
 8004ea8:	f023 0204 	bic.w	r2, r3, #4
 8004eac:	6022      	str	r2, [r4, #0]
 8004eae:	f04f 0900 	mov.w	r9, #0
 8004eb2:	9700      	str	r7, [sp, #0]
 8004eb4:	4633      	mov	r3, r6
 8004eb6:	aa0b      	add	r2, sp, #44	; 0x2c
 8004eb8:	4621      	mov	r1, r4
 8004eba:	4628      	mov	r0, r5
 8004ebc:	f000 f9d8 	bl	8005270 <_printf_common>
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	f040 8090 	bne.w	8004fe6 <_printf_float+0x1e2>
 8004ec6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004eca:	b00d      	add	sp, #52	; 0x34
 8004ecc:	ecbd 8b02 	vpop	{d8}
 8004ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ed4:	4642      	mov	r2, r8
 8004ed6:	464b      	mov	r3, r9
 8004ed8:	4640      	mov	r0, r8
 8004eda:	4649      	mov	r1, r9
 8004edc:	f7fb fe30 	bl	8000b40 <__aeabi_dcmpun>
 8004ee0:	b140      	cbz	r0, 8004ef4 <_printf_float+0xf0>
 8004ee2:	464b      	mov	r3, r9
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	bfbc      	itt	lt
 8004ee8:	232d      	movlt	r3, #45	; 0x2d
 8004eea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004eee:	487f      	ldr	r0, [pc, #508]	; (80050ec <_printf_float+0x2e8>)
 8004ef0:	4b7f      	ldr	r3, [pc, #508]	; (80050f0 <_printf_float+0x2ec>)
 8004ef2:	e7d1      	b.n	8004e98 <_printf_float+0x94>
 8004ef4:	6863      	ldr	r3, [r4, #4]
 8004ef6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004efa:	9206      	str	r2, [sp, #24]
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	d13f      	bne.n	8004f80 <_printf_float+0x17c>
 8004f00:	2306      	movs	r3, #6
 8004f02:	6063      	str	r3, [r4, #4]
 8004f04:	9b05      	ldr	r3, [sp, #20]
 8004f06:	6861      	ldr	r1, [r4, #4]
 8004f08:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	9303      	str	r3, [sp, #12]
 8004f10:	ab0a      	add	r3, sp, #40	; 0x28
 8004f12:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004f16:	ab09      	add	r3, sp, #36	; 0x24
 8004f18:	ec49 8b10 	vmov	d0, r8, r9
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	6022      	str	r2, [r4, #0]
 8004f20:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004f24:	4628      	mov	r0, r5
 8004f26:	f7ff fecd 	bl	8004cc4 <__cvt>
 8004f2a:	9b06      	ldr	r3, [sp, #24]
 8004f2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f2e:	2b47      	cmp	r3, #71	; 0x47
 8004f30:	4680      	mov	r8, r0
 8004f32:	d108      	bne.n	8004f46 <_printf_float+0x142>
 8004f34:	1cc8      	adds	r0, r1, #3
 8004f36:	db02      	blt.n	8004f3e <_printf_float+0x13a>
 8004f38:	6863      	ldr	r3, [r4, #4]
 8004f3a:	4299      	cmp	r1, r3
 8004f3c:	dd41      	ble.n	8004fc2 <_printf_float+0x1be>
 8004f3e:	f1ab 0b02 	sub.w	fp, fp, #2
 8004f42:	fa5f fb8b 	uxtb.w	fp, fp
 8004f46:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004f4a:	d820      	bhi.n	8004f8e <_printf_float+0x18a>
 8004f4c:	3901      	subs	r1, #1
 8004f4e:	465a      	mov	r2, fp
 8004f50:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004f54:	9109      	str	r1, [sp, #36]	; 0x24
 8004f56:	f7ff ff17 	bl	8004d88 <__exponent>
 8004f5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f5c:	1813      	adds	r3, r2, r0
 8004f5e:	2a01      	cmp	r2, #1
 8004f60:	4681      	mov	r9, r0
 8004f62:	6123      	str	r3, [r4, #16]
 8004f64:	dc02      	bgt.n	8004f6c <_printf_float+0x168>
 8004f66:	6822      	ldr	r2, [r4, #0]
 8004f68:	07d2      	lsls	r2, r2, #31
 8004f6a:	d501      	bpl.n	8004f70 <_printf_float+0x16c>
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	6123      	str	r3, [r4, #16]
 8004f70:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d09c      	beq.n	8004eb2 <_printf_float+0xae>
 8004f78:	232d      	movs	r3, #45	; 0x2d
 8004f7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f7e:	e798      	b.n	8004eb2 <_printf_float+0xae>
 8004f80:	9a06      	ldr	r2, [sp, #24]
 8004f82:	2a47      	cmp	r2, #71	; 0x47
 8004f84:	d1be      	bne.n	8004f04 <_printf_float+0x100>
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1bc      	bne.n	8004f04 <_printf_float+0x100>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e7b9      	b.n	8004f02 <_printf_float+0xfe>
 8004f8e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004f92:	d118      	bne.n	8004fc6 <_printf_float+0x1c2>
 8004f94:	2900      	cmp	r1, #0
 8004f96:	6863      	ldr	r3, [r4, #4]
 8004f98:	dd0b      	ble.n	8004fb2 <_printf_float+0x1ae>
 8004f9a:	6121      	str	r1, [r4, #16]
 8004f9c:	b913      	cbnz	r3, 8004fa4 <_printf_float+0x1a0>
 8004f9e:	6822      	ldr	r2, [r4, #0]
 8004fa0:	07d0      	lsls	r0, r2, #31
 8004fa2:	d502      	bpl.n	8004faa <_printf_float+0x1a6>
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	440b      	add	r3, r1
 8004fa8:	6123      	str	r3, [r4, #16]
 8004faa:	65a1      	str	r1, [r4, #88]	; 0x58
 8004fac:	f04f 0900 	mov.w	r9, #0
 8004fb0:	e7de      	b.n	8004f70 <_printf_float+0x16c>
 8004fb2:	b913      	cbnz	r3, 8004fba <_printf_float+0x1b6>
 8004fb4:	6822      	ldr	r2, [r4, #0]
 8004fb6:	07d2      	lsls	r2, r2, #31
 8004fb8:	d501      	bpl.n	8004fbe <_printf_float+0x1ba>
 8004fba:	3302      	adds	r3, #2
 8004fbc:	e7f4      	b.n	8004fa8 <_printf_float+0x1a4>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e7f2      	b.n	8004fa8 <_printf_float+0x1a4>
 8004fc2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fc8:	4299      	cmp	r1, r3
 8004fca:	db05      	blt.n	8004fd8 <_printf_float+0x1d4>
 8004fcc:	6823      	ldr	r3, [r4, #0]
 8004fce:	6121      	str	r1, [r4, #16]
 8004fd0:	07d8      	lsls	r0, r3, #31
 8004fd2:	d5ea      	bpl.n	8004faa <_printf_float+0x1a6>
 8004fd4:	1c4b      	adds	r3, r1, #1
 8004fd6:	e7e7      	b.n	8004fa8 <_printf_float+0x1a4>
 8004fd8:	2900      	cmp	r1, #0
 8004fda:	bfd4      	ite	le
 8004fdc:	f1c1 0202 	rsble	r2, r1, #2
 8004fe0:	2201      	movgt	r2, #1
 8004fe2:	4413      	add	r3, r2
 8004fe4:	e7e0      	b.n	8004fa8 <_printf_float+0x1a4>
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	055a      	lsls	r2, r3, #21
 8004fea:	d407      	bmi.n	8004ffc <_printf_float+0x1f8>
 8004fec:	6923      	ldr	r3, [r4, #16]
 8004fee:	4642      	mov	r2, r8
 8004ff0:	4631      	mov	r1, r6
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	47b8      	blx	r7
 8004ff6:	3001      	adds	r0, #1
 8004ff8:	d12c      	bne.n	8005054 <_printf_float+0x250>
 8004ffa:	e764      	b.n	8004ec6 <_printf_float+0xc2>
 8004ffc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005000:	f240 80e0 	bls.w	80051c4 <_printf_float+0x3c0>
 8005004:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005008:	2200      	movs	r2, #0
 800500a:	2300      	movs	r3, #0
 800500c:	f7fb fd66 	bl	8000adc <__aeabi_dcmpeq>
 8005010:	2800      	cmp	r0, #0
 8005012:	d034      	beq.n	800507e <_printf_float+0x27a>
 8005014:	4a37      	ldr	r2, [pc, #220]	; (80050f4 <_printf_float+0x2f0>)
 8005016:	2301      	movs	r3, #1
 8005018:	4631      	mov	r1, r6
 800501a:	4628      	mov	r0, r5
 800501c:	47b8      	blx	r7
 800501e:	3001      	adds	r0, #1
 8005020:	f43f af51 	beq.w	8004ec6 <_printf_float+0xc2>
 8005024:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005028:	429a      	cmp	r2, r3
 800502a:	db02      	blt.n	8005032 <_printf_float+0x22e>
 800502c:	6823      	ldr	r3, [r4, #0]
 800502e:	07d8      	lsls	r0, r3, #31
 8005030:	d510      	bpl.n	8005054 <_printf_float+0x250>
 8005032:	ee18 3a10 	vmov	r3, s16
 8005036:	4652      	mov	r2, sl
 8005038:	4631      	mov	r1, r6
 800503a:	4628      	mov	r0, r5
 800503c:	47b8      	blx	r7
 800503e:	3001      	adds	r0, #1
 8005040:	f43f af41 	beq.w	8004ec6 <_printf_float+0xc2>
 8005044:	f04f 0800 	mov.w	r8, #0
 8005048:	f104 091a 	add.w	r9, r4, #26
 800504c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800504e:	3b01      	subs	r3, #1
 8005050:	4543      	cmp	r3, r8
 8005052:	dc09      	bgt.n	8005068 <_printf_float+0x264>
 8005054:	6823      	ldr	r3, [r4, #0]
 8005056:	079b      	lsls	r3, r3, #30
 8005058:	f100 8105 	bmi.w	8005266 <_printf_float+0x462>
 800505c:	68e0      	ldr	r0, [r4, #12]
 800505e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005060:	4298      	cmp	r0, r3
 8005062:	bfb8      	it	lt
 8005064:	4618      	movlt	r0, r3
 8005066:	e730      	b.n	8004eca <_printf_float+0xc6>
 8005068:	2301      	movs	r3, #1
 800506a:	464a      	mov	r2, r9
 800506c:	4631      	mov	r1, r6
 800506e:	4628      	mov	r0, r5
 8005070:	47b8      	blx	r7
 8005072:	3001      	adds	r0, #1
 8005074:	f43f af27 	beq.w	8004ec6 <_printf_float+0xc2>
 8005078:	f108 0801 	add.w	r8, r8, #1
 800507c:	e7e6      	b.n	800504c <_printf_float+0x248>
 800507e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005080:	2b00      	cmp	r3, #0
 8005082:	dc39      	bgt.n	80050f8 <_printf_float+0x2f4>
 8005084:	4a1b      	ldr	r2, [pc, #108]	; (80050f4 <_printf_float+0x2f0>)
 8005086:	2301      	movs	r3, #1
 8005088:	4631      	mov	r1, r6
 800508a:	4628      	mov	r0, r5
 800508c:	47b8      	blx	r7
 800508e:	3001      	adds	r0, #1
 8005090:	f43f af19 	beq.w	8004ec6 <_printf_float+0xc2>
 8005094:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005098:	4313      	orrs	r3, r2
 800509a:	d102      	bne.n	80050a2 <_printf_float+0x29e>
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	07d9      	lsls	r1, r3, #31
 80050a0:	d5d8      	bpl.n	8005054 <_printf_float+0x250>
 80050a2:	ee18 3a10 	vmov	r3, s16
 80050a6:	4652      	mov	r2, sl
 80050a8:	4631      	mov	r1, r6
 80050aa:	4628      	mov	r0, r5
 80050ac:	47b8      	blx	r7
 80050ae:	3001      	adds	r0, #1
 80050b0:	f43f af09 	beq.w	8004ec6 <_printf_float+0xc2>
 80050b4:	f04f 0900 	mov.w	r9, #0
 80050b8:	f104 0a1a 	add.w	sl, r4, #26
 80050bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050be:	425b      	negs	r3, r3
 80050c0:	454b      	cmp	r3, r9
 80050c2:	dc01      	bgt.n	80050c8 <_printf_float+0x2c4>
 80050c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050c6:	e792      	b.n	8004fee <_printf_float+0x1ea>
 80050c8:	2301      	movs	r3, #1
 80050ca:	4652      	mov	r2, sl
 80050cc:	4631      	mov	r1, r6
 80050ce:	4628      	mov	r0, r5
 80050d0:	47b8      	blx	r7
 80050d2:	3001      	adds	r0, #1
 80050d4:	f43f aef7 	beq.w	8004ec6 <_printf_float+0xc2>
 80050d8:	f109 0901 	add.w	r9, r9, #1
 80050dc:	e7ee      	b.n	80050bc <_printf_float+0x2b8>
 80050de:	bf00      	nop
 80050e0:	7fefffff 	.word	0x7fefffff
 80050e4:	08008d3c 	.word	0x08008d3c
 80050e8:	08008d40 	.word	0x08008d40
 80050ec:	08008d48 	.word	0x08008d48
 80050f0:	08008d44 	.word	0x08008d44
 80050f4:	080091ec 	.word	0x080091ec
 80050f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050fc:	429a      	cmp	r2, r3
 80050fe:	bfa8      	it	ge
 8005100:	461a      	movge	r2, r3
 8005102:	2a00      	cmp	r2, #0
 8005104:	4691      	mov	r9, r2
 8005106:	dc37      	bgt.n	8005178 <_printf_float+0x374>
 8005108:	f04f 0b00 	mov.w	fp, #0
 800510c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005110:	f104 021a 	add.w	r2, r4, #26
 8005114:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005116:	9305      	str	r3, [sp, #20]
 8005118:	eba3 0309 	sub.w	r3, r3, r9
 800511c:	455b      	cmp	r3, fp
 800511e:	dc33      	bgt.n	8005188 <_printf_float+0x384>
 8005120:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005124:	429a      	cmp	r2, r3
 8005126:	db3b      	blt.n	80051a0 <_printf_float+0x39c>
 8005128:	6823      	ldr	r3, [r4, #0]
 800512a:	07da      	lsls	r2, r3, #31
 800512c:	d438      	bmi.n	80051a0 <_printf_float+0x39c>
 800512e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005130:	9a05      	ldr	r2, [sp, #20]
 8005132:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005134:	1a9a      	subs	r2, r3, r2
 8005136:	eba3 0901 	sub.w	r9, r3, r1
 800513a:	4591      	cmp	r9, r2
 800513c:	bfa8      	it	ge
 800513e:	4691      	movge	r9, r2
 8005140:	f1b9 0f00 	cmp.w	r9, #0
 8005144:	dc35      	bgt.n	80051b2 <_printf_float+0x3ae>
 8005146:	f04f 0800 	mov.w	r8, #0
 800514a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800514e:	f104 0a1a 	add.w	sl, r4, #26
 8005152:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005156:	1a9b      	subs	r3, r3, r2
 8005158:	eba3 0309 	sub.w	r3, r3, r9
 800515c:	4543      	cmp	r3, r8
 800515e:	f77f af79 	ble.w	8005054 <_printf_float+0x250>
 8005162:	2301      	movs	r3, #1
 8005164:	4652      	mov	r2, sl
 8005166:	4631      	mov	r1, r6
 8005168:	4628      	mov	r0, r5
 800516a:	47b8      	blx	r7
 800516c:	3001      	adds	r0, #1
 800516e:	f43f aeaa 	beq.w	8004ec6 <_printf_float+0xc2>
 8005172:	f108 0801 	add.w	r8, r8, #1
 8005176:	e7ec      	b.n	8005152 <_printf_float+0x34e>
 8005178:	4613      	mov	r3, r2
 800517a:	4631      	mov	r1, r6
 800517c:	4642      	mov	r2, r8
 800517e:	4628      	mov	r0, r5
 8005180:	47b8      	blx	r7
 8005182:	3001      	adds	r0, #1
 8005184:	d1c0      	bne.n	8005108 <_printf_float+0x304>
 8005186:	e69e      	b.n	8004ec6 <_printf_float+0xc2>
 8005188:	2301      	movs	r3, #1
 800518a:	4631      	mov	r1, r6
 800518c:	4628      	mov	r0, r5
 800518e:	9205      	str	r2, [sp, #20]
 8005190:	47b8      	blx	r7
 8005192:	3001      	adds	r0, #1
 8005194:	f43f ae97 	beq.w	8004ec6 <_printf_float+0xc2>
 8005198:	9a05      	ldr	r2, [sp, #20]
 800519a:	f10b 0b01 	add.w	fp, fp, #1
 800519e:	e7b9      	b.n	8005114 <_printf_float+0x310>
 80051a0:	ee18 3a10 	vmov	r3, s16
 80051a4:	4652      	mov	r2, sl
 80051a6:	4631      	mov	r1, r6
 80051a8:	4628      	mov	r0, r5
 80051aa:	47b8      	blx	r7
 80051ac:	3001      	adds	r0, #1
 80051ae:	d1be      	bne.n	800512e <_printf_float+0x32a>
 80051b0:	e689      	b.n	8004ec6 <_printf_float+0xc2>
 80051b2:	9a05      	ldr	r2, [sp, #20]
 80051b4:	464b      	mov	r3, r9
 80051b6:	4442      	add	r2, r8
 80051b8:	4631      	mov	r1, r6
 80051ba:	4628      	mov	r0, r5
 80051bc:	47b8      	blx	r7
 80051be:	3001      	adds	r0, #1
 80051c0:	d1c1      	bne.n	8005146 <_printf_float+0x342>
 80051c2:	e680      	b.n	8004ec6 <_printf_float+0xc2>
 80051c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051c6:	2a01      	cmp	r2, #1
 80051c8:	dc01      	bgt.n	80051ce <_printf_float+0x3ca>
 80051ca:	07db      	lsls	r3, r3, #31
 80051cc:	d538      	bpl.n	8005240 <_printf_float+0x43c>
 80051ce:	2301      	movs	r3, #1
 80051d0:	4642      	mov	r2, r8
 80051d2:	4631      	mov	r1, r6
 80051d4:	4628      	mov	r0, r5
 80051d6:	47b8      	blx	r7
 80051d8:	3001      	adds	r0, #1
 80051da:	f43f ae74 	beq.w	8004ec6 <_printf_float+0xc2>
 80051de:	ee18 3a10 	vmov	r3, s16
 80051e2:	4652      	mov	r2, sl
 80051e4:	4631      	mov	r1, r6
 80051e6:	4628      	mov	r0, r5
 80051e8:	47b8      	blx	r7
 80051ea:	3001      	adds	r0, #1
 80051ec:	f43f ae6b 	beq.w	8004ec6 <_printf_float+0xc2>
 80051f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80051f4:	2200      	movs	r2, #0
 80051f6:	2300      	movs	r3, #0
 80051f8:	f7fb fc70 	bl	8000adc <__aeabi_dcmpeq>
 80051fc:	b9d8      	cbnz	r0, 8005236 <_printf_float+0x432>
 80051fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005200:	f108 0201 	add.w	r2, r8, #1
 8005204:	3b01      	subs	r3, #1
 8005206:	4631      	mov	r1, r6
 8005208:	4628      	mov	r0, r5
 800520a:	47b8      	blx	r7
 800520c:	3001      	adds	r0, #1
 800520e:	d10e      	bne.n	800522e <_printf_float+0x42a>
 8005210:	e659      	b.n	8004ec6 <_printf_float+0xc2>
 8005212:	2301      	movs	r3, #1
 8005214:	4652      	mov	r2, sl
 8005216:	4631      	mov	r1, r6
 8005218:	4628      	mov	r0, r5
 800521a:	47b8      	blx	r7
 800521c:	3001      	adds	r0, #1
 800521e:	f43f ae52 	beq.w	8004ec6 <_printf_float+0xc2>
 8005222:	f108 0801 	add.w	r8, r8, #1
 8005226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005228:	3b01      	subs	r3, #1
 800522a:	4543      	cmp	r3, r8
 800522c:	dcf1      	bgt.n	8005212 <_printf_float+0x40e>
 800522e:	464b      	mov	r3, r9
 8005230:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005234:	e6dc      	b.n	8004ff0 <_printf_float+0x1ec>
 8005236:	f04f 0800 	mov.w	r8, #0
 800523a:	f104 0a1a 	add.w	sl, r4, #26
 800523e:	e7f2      	b.n	8005226 <_printf_float+0x422>
 8005240:	2301      	movs	r3, #1
 8005242:	4642      	mov	r2, r8
 8005244:	e7df      	b.n	8005206 <_printf_float+0x402>
 8005246:	2301      	movs	r3, #1
 8005248:	464a      	mov	r2, r9
 800524a:	4631      	mov	r1, r6
 800524c:	4628      	mov	r0, r5
 800524e:	47b8      	blx	r7
 8005250:	3001      	adds	r0, #1
 8005252:	f43f ae38 	beq.w	8004ec6 <_printf_float+0xc2>
 8005256:	f108 0801 	add.w	r8, r8, #1
 800525a:	68e3      	ldr	r3, [r4, #12]
 800525c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800525e:	1a5b      	subs	r3, r3, r1
 8005260:	4543      	cmp	r3, r8
 8005262:	dcf0      	bgt.n	8005246 <_printf_float+0x442>
 8005264:	e6fa      	b.n	800505c <_printf_float+0x258>
 8005266:	f04f 0800 	mov.w	r8, #0
 800526a:	f104 0919 	add.w	r9, r4, #25
 800526e:	e7f4      	b.n	800525a <_printf_float+0x456>

08005270 <_printf_common>:
 8005270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005274:	4616      	mov	r6, r2
 8005276:	4699      	mov	r9, r3
 8005278:	688a      	ldr	r2, [r1, #8]
 800527a:	690b      	ldr	r3, [r1, #16]
 800527c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005280:	4293      	cmp	r3, r2
 8005282:	bfb8      	it	lt
 8005284:	4613      	movlt	r3, r2
 8005286:	6033      	str	r3, [r6, #0]
 8005288:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800528c:	4607      	mov	r7, r0
 800528e:	460c      	mov	r4, r1
 8005290:	b10a      	cbz	r2, 8005296 <_printf_common+0x26>
 8005292:	3301      	adds	r3, #1
 8005294:	6033      	str	r3, [r6, #0]
 8005296:	6823      	ldr	r3, [r4, #0]
 8005298:	0699      	lsls	r1, r3, #26
 800529a:	bf42      	ittt	mi
 800529c:	6833      	ldrmi	r3, [r6, #0]
 800529e:	3302      	addmi	r3, #2
 80052a0:	6033      	strmi	r3, [r6, #0]
 80052a2:	6825      	ldr	r5, [r4, #0]
 80052a4:	f015 0506 	ands.w	r5, r5, #6
 80052a8:	d106      	bne.n	80052b8 <_printf_common+0x48>
 80052aa:	f104 0a19 	add.w	sl, r4, #25
 80052ae:	68e3      	ldr	r3, [r4, #12]
 80052b0:	6832      	ldr	r2, [r6, #0]
 80052b2:	1a9b      	subs	r3, r3, r2
 80052b4:	42ab      	cmp	r3, r5
 80052b6:	dc26      	bgt.n	8005306 <_printf_common+0x96>
 80052b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052bc:	1e13      	subs	r3, r2, #0
 80052be:	6822      	ldr	r2, [r4, #0]
 80052c0:	bf18      	it	ne
 80052c2:	2301      	movne	r3, #1
 80052c4:	0692      	lsls	r2, r2, #26
 80052c6:	d42b      	bmi.n	8005320 <_printf_common+0xb0>
 80052c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052cc:	4649      	mov	r1, r9
 80052ce:	4638      	mov	r0, r7
 80052d0:	47c0      	blx	r8
 80052d2:	3001      	adds	r0, #1
 80052d4:	d01e      	beq.n	8005314 <_printf_common+0xa4>
 80052d6:	6823      	ldr	r3, [r4, #0]
 80052d8:	68e5      	ldr	r5, [r4, #12]
 80052da:	6832      	ldr	r2, [r6, #0]
 80052dc:	f003 0306 	and.w	r3, r3, #6
 80052e0:	2b04      	cmp	r3, #4
 80052e2:	bf08      	it	eq
 80052e4:	1aad      	subeq	r5, r5, r2
 80052e6:	68a3      	ldr	r3, [r4, #8]
 80052e8:	6922      	ldr	r2, [r4, #16]
 80052ea:	bf0c      	ite	eq
 80052ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052f0:	2500      	movne	r5, #0
 80052f2:	4293      	cmp	r3, r2
 80052f4:	bfc4      	itt	gt
 80052f6:	1a9b      	subgt	r3, r3, r2
 80052f8:	18ed      	addgt	r5, r5, r3
 80052fa:	2600      	movs	r6, #0
 80052fc:	341a      	adds	r4, #26
 80052fe:	42b5      	cmp	r5, r6
 8005300:	d11a      	bne.n	8005338 <_printf_common+0xc8>
 8005302:	2000      	movs	r0, #0
 8005304:	e008      	b.n	8005318 <_printf_common+0xa8>
 8005306:	2301      	movs	r3, #1
 8005308:	4652      	mov	r2, sl
 800530a:	4649      	mov	r1, r9
 800530c:	4638      	mov	r0, r7
 800530e:	47c0      	blx	r8
 8005310:	3001      	adds	r0, #1
 8005312:	d103      	bne.n	800531c <_printf_common+0xac>
 8005314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800531c:	3501      	adds	r5, #1
 800531e:	e7c6      	b.n	80052ae <_printf_common+0x3e>
 8005320:	18e1      	adds	r1, r4, r3
 8005322:	1c5a      	adds	r2, r3, #1
 8005324:	2030      	movs	r0, #48	; 0x30
 8005326:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800532a:	4422      	add	r2, r4
 800532c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005330:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005334:	3302      	adds	r3, #2
 8005336:	e7c7      	b.n	80052c8 <_printf_common+0x58>
 8005338:	2301      	movs	r3, #1
 800533a:	4622      	mov	r2, r4
 800533c:	4649      	mov	r1, r9
 800533e:	4638      	mov	r0, r7
 8005340:	47c0      	blx	r8
 8005342:	3001      	adds	r0, #1
 8005344:	d0e6      	beq.n	8005314 <_printf_common+0xa4>
 8005346:	3601      	adds	r6, #1
 8005348:	e7d9      	b.n	80052fe <_printf_common+0x8e>
	...

0800534c <_printf_i>:
 800534c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005350:	7e0f      	ldrb	r7, [r1, #24]
 8005352:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005354:	2f78      	cmp	r7, #120	; 0x78
 8005356:	4691      	mov	r9, r2
 8005358:	4680      	mov	r8, r0
 800535a:	460c      	mov	r4, r1
 800535c:	469a      	mov	sl, r3
 800535e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005362:	d807      	bhi.n	8005374 <_printf_i+0x28>
 8005364:	2f62      	cmp	r7, #98	; 0x62
 8005366:	d80a      	bhi.n	800537e <_printf_i+0x32>
 8005368:	2f00      	cmp	r7, #0
 800536a:	f000 80d8 	beq.w	800551e <_printf_i+0x1d2>
 800536e:	2f58      	cmp	r7, #88	; 0x58
 8005370:	f000 80a3 	beq.w	80054ba <_printf_i+0x16e>
 8005374:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005378:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800537c:	e03a      	b.n	80053f4 <_printf_i+0xa8>
 800537e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005382:	2b15      	cmp	r3, #21
 8005384:	d8f6      	bhi.n	8005374 <_printf_i+0x28>
 8005386:	a101      	add	r1, pc, #4	; (adr r1, 800538c <_printf_i+0x40>)
 8005388:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800538c:	080053e5 	.word	0x080053e5
 8005390:	080053f9 	.word	0x080053f9
 8005394:	08005375 	.word	0x08005375
 8005398:	08005375 	.word	0x08005375
 800539c:	08005375 	.word	0x08005375
 80053a0:	08005375 	.word	0x08005375
 80053a4:	080053f9 	.word	0x080053f9
 80053a8:	08005375 	.word	0x08005375
 80053ac:	08005375 	.word	0x08005375
 80053b0:	08005375 	.word	0x08005375
 80053b4:	08005375 	.word	0x08005375
 80053b8:	08005505 	.word	0x08005505
 80053bc:	08005429 	.word	0x08005429
 80053c0:	080054e7 	.word	0x080054e7
 80053c4:	08005375 	.word	0x08005375
 80053c8:	08005375 	.word	0x08005375
 80053cc:	08005527 	.word	0x08005527
 80053d0:	08005375 	.word	0x08005375
 80053d4:	08005429 	.word	0x08005429
 80053d8:	08005375 	.word	0x08005375
 80053dc:	08005375 	.word	0x08005375
 80053e0:	080054ef 	.word	0x080054ef
 80053e4:	682b      	ldr	r3, [r5, #0]
 80053e6:	1d1a      	adds	r2, r3, #4
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	602a      	str	r2, [r5, #0]
 80053ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053f4:	2301      	movs	r3, #1
 80053f6:	e0a3      	b.n	8005540 <_printf_i+0x1f4>
 80053f8:	6820      	ldr	r0, [r4, #0]
 80053fa:	6829      	ldr	r1, [r5, #0]
 80053fc:	0606      	lsls	r6, r0, #24
 80053fe:	f101 0304 	add.w	r3, r1, #4
 8005402:	d50a      	bpl.n	800541a <_printf_i+0xce>
 8005404:	680e      	ldr	r6, [r1, #0]
 8005406:	602b      	str	r3, [r5, #0]
 8005408:	2e00      	cmp	r6, #0
 800540a:	da03      	bge.n	8005414 <_printf_i+0xc8>
 800540c:	232d      	movs	r3, #45	; 0x2d
 800540e:	4276      	negs	r6, r6
 8005410:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005414:	485e      	ldr	r0, [pc, #376]	; (8005590 <_printf_i+0x244>)
 8005416:	230a      	movs	r3, #10
 8005418:	e019      	b.n	800544e <_printf_i+0x102>
 800541a:	680e      	ldr	r6, [r1, #0]
 800541c:	602b      	str	r3, [r5, #0]
 800541e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005422:	bf18      	it	ne
 8005424:	b236      	sxthne	r6, r6
 8005426:	e7ef      	b.n	8005408 <_printf_i+0xbc>
 8005428:	682b      	ldr	r3, [r5, #0]
 800542a:	6820      	ldr	r0, [r4, #0]
 800542c:	1d19      	adds	r1, r3, #4
 800542e:	6029      	str	r1, [r5, #0]
 8005430:	0601      	lsls	r1, r0, #24
 8005432:	d501      	bpl.n	8005438 <_printf_i+0xec>
 8005434:	681e      	ldr	r6, [r3, #0]
 8005436:	e002      	b.n	800543e <_printf_i+0xf2>
 8005438:	0646      	lsls	r6, r0, #25
 800543a:	d5fb      	bpl.n	8005434 <_printf_i+0xe8>
 800543c:	881e      	ldrh	r6, [r3, #0]
 800543e:	4854      	ldr	r0, [pc, #336]	; (8005590 <_printf_i+0x244>)
 8005440:	2f6f      	cmp	r7, #111	; 0x6f
 8005442:	bf0c      	ite	eq
 8005444:	2308      	moveq	r3, #8
 8005446:	230a      	movne	r3, #10
 8005448:	2100      	movs	r1, #0
 800544a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800544e:	6865      	ldr	r5, [r4, #4]
 8005450:	60a5      	str	r5, [r4, #8]
 8005452:	2d00      	cmp	r5, #0
 8005454:	bfa2      	ittt	ge
 8005456:	6821      	ldrge	r1, [r4, #0]
 8005458:	f021 0104 	bicge.w	r1, r1, #4
 800545c:	6021      	strge	r1, [r4, #0]
 800545e:	b90e      	cbnz	r6, 8005464 <_printf_i+0x118>
 8005460:	2d00      	cmp	r5, #0
 8005462:	d04d      	beq.n	8005500 <_printf_i+0x1b4>
 8005464:	4615      	mov	r5, r2
 8005466:	fbb6 f1f3 	udiv	r1, r6, r3
 800546a:	fb03 6711 	mls	r7, r3, r1, r6
 800546e:	5dc7      	ldrb	r7, [r0, r7]
 8005470:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005474:	4637      	mov	r7, r6
 8005476:	42bb      	cmp	r3, r7
 8005478:	460e      	mov	r6, r1
 800547a:	d9f4      	bls.n	8005466 <_printf_i+0x11a>
 800547c:	2b08      	cmp	r3, #8
 800547e:	d10b      	bne.n	8005498 <_printf_i+0x14c>
 8005480:	6823      	ldr	r3, [r4, #0]
 8005482:	07de      	lsls	r6, r3, #31
 8005484:	d508      	bpl.n	8005498 <_printf_i+0x14c>
 8005486:	6923      	ldr	r3, [r4, #16]
 8005488:	6861      	ldr	r1, [r4, #4]
 800548a:	4299      	cmp	r1, r3
 800548c:	bfde      	ittt	le
 800548e:	2330      	movle	r3, #48	; 0x30
 8005490:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005494:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005498:	1b52      	subs	r2, r2, r5
 800549a:	6122      	str	r2, [r4, #16]
 800549c:	f8cd a000 	str.w	sl, [sp]
 80054a0:	464b      	mov	r3, r9
 80054a2:	aa03      	add	r2, sp, #12
 80054a4:	4621      	mov	r1, r4
 80054a6:	4640      	mov	r0, r8
 80054a8:	f7ff fee2 	bl	8005270 <_printf_common>
 80054ac:	3001      	adds	r0, #1
 80054ae:	d14c      	bne.n	800554a <_printf_i+0x1fe>
 80054b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054b4:	b004      	add	sp, #16
 80054b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054ba:	4835      	ldr	r0, [pc, #212]	; (8005590 <_printf_i+0x244>)
 80054bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80054c0:	6829      	ldr	r1, [r5, #0]
 80054c2:	6823      	ldr	r3, [r4, #0]
 80054c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80054c8:	6029      	str	r1, [r5, #0]
 80054ca:	061d      	lsls	r5, r3, #24
 80054cc:	d514      	bpl.n	80054f8 <_printf_i+0x1ac>
 80054ce:	07df      	lsls	r7, r3, #31
 80054d0:	bf44      	itt	mi
 80054d2:	f043 0320 	orrmi.w	r3, r3, #32
 80054d6:	6023      	strmi	r3, [r4, #0]
 80054d8:	b91e      	cbnz	r6, 80054e2 <_printf_i+0x196>
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	f023 0320 	bic.w	r3, r3, #32
 80054e0:	6023      	str	r3, [r4, #0]
 80054e2:	2310      	movs	r3, #16
 80054e4:	e7b0      	b.n	8005448 <_printf_i+0xfc>
 80054e6:	6823      	ldr	r3, [r4, #0]
 80054e8:	f043 0320 	orr.w	r3, r3, #32
 80054ec:	6023      	str	r3, [r4, #0]
 80054ee:	2378      	movs	r3, #120	; 0x78
 80054f0:	4828      	ldr	r0, [pc, #160]	; (8005594 <_printf_i+0x248>)
 80054f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054f6:	e7e3      	b.n	80054c0 <_printf_i+0x174>
 80054f8:	0659      	lsls	r1, r3, #25
 80054fa:	bf48      	it	mi
 80054fc:	b2b6      	uxthmi	r6, r6
 80054fe:	e7e6      	b.n	80054ce <_printf_i+0x182>
 8005500:	4615      	mov	r5, r2
 8005502:	e7bb      	b.n	800547c <_printf_i+0x130>
 8005504:	682b      	ldr	r3, [r5, #0]
 8005506:	6826      	ldr	r6, [r4, #0]
 8005508:	6961      	ldr	r1, [r4, #20]
 800550a:	1d18      	adds	r0, r3, #4
 800550c:	6028      	str	r0, [r5, #0]
 800550e:	0635      	lsls	r5, r6, #24
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	d501      	bpl.n	8005518 <_printf_i+0x1cc>
 8005514:	6019      	str	r1, [r3, #0]
 8005516:	e002      	b.n	800551e <_printf_i+0x1d2>
 8005518:	0670      	lsls	r0, r6, #25
 800551a:	d5fb      	bpl.n	8005514 <_printf_i+0x1c8>
 800551c:	8019      	strh	r1, [r3, #0]
 800551e:	2300      	movs	r3, #0
 8005520:	6123      	str	r3, [r4, #16]
 8005522:	4615      	mov	r5, r2
 8005524:	e7ba      	b.n	800549c <_printf_i+0x150>
 8005526:	682b      	ldr	r3, [r5, #0]
 8005528:	1d1a      	adds	r2, r3, #4
 800552a:	602a      	str	r2, [r5, #0]
 800552c:	681d      	ldr	r5, [r3, #0]
 800552e:	6862      	ldr	r2, [r4, #4]
 8005530:	2100      	movs	r1, #0
 8005532:	4628      	mov	r0, r5
 8005534:	f7fa fe54 	bl	80001e0 <memchr>
 8005538:	b108      	cbz	r0, 800553e <_printf_i+0x1f2>
 800553a:	1b40      	subs	r0, r0, r5
 800553c:	6060      	str	r0, [r4, #4]
 800553e:	6863      	ldr	r3, [r4, #4]
 8005540:	6123      	str	r3, [r4, #16]
 8005542:	2300      	movs	r3, #0
 8005544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005548:	e7a8      	b.n	800549c <_printf_i+0x150>
 800554a:	6923      	ldr	r3, [r4, #16]
 800554c:	462a      	mov	r2, r5
 800554e:	4649      	mov	r1, r9
 8005550:	4640      	mov	r0, r8
 8005552:	47d0      	blx	sl
 8005554:	3001      	adds	r0, #1
 8005556:	d0ab      	beq.n	80054b0 <_printf_i+0x164>
 8005558:	6823      	ldr	r3, [r4, #0]
 800555a:	079b      	lsls	r3, r3, #30
 800555c:	d413      	bmi.n	8005586 <_printf_i+0x23a>
 800555e:	68e0      	ldr	r0, [r4, #12]
 8005560:	9b03      	ldr	r3, [sp, #12]
 8005562:	4298      	cmp	r0, r3
 8005564:	bfb8      	it	lt
 8005566:	4618      	movlt	r0, r3
 8005568:	e7a4      	b.n	80054b4 <_printf_i+0x168>
 800556a:	2301      	movs	r3, #1
 800556c:	4632      	mov	r2, r6
 800556e:	4649      	mov	r1, r9
 8005570:	4640      	mov	r0, r8
 8005572:	47d0      	blx	sl
 8005574:	3001      	adds	r0, #1
 8005576:	d09b      	beq.n	80054b0 <_printf_i+0x164>
 8005578:	3501      	adds	r5, #1
 800557a:	68e3      	ldr	r3, [r4, #12]
 800557c:	9903      	ldr	r1, [sp, #12]
 800557e:	1a5b      	subs	r3, r3, r1
 8005580:	42ab      	cmp	r3, r5
 8005582:	dcf2      	bgt.n	800556a <_printf_i+0x21e>
 8005584:	e7eb      	b.n	800555e <_printf_i+0x212>
 8005586:	2500      	movs	r5, #0
 8005588:	f104 0619 	add.w	r6, r4, #25
 800558c:	e7f5      	b.n	800557a <_printf_i+0x22e>
 800558e:	bf00      	nop
 8005590:	08008d4c 	.word	0x08008d4c
 8005594:	08008d5d 	.word	0x08008d5d

08005598 <iprintf>:
 8005598:	b40f      	push	{r0, r1, r2, r3}
 800559a:	4b0a      	ldr	r3, [pc, #40]	; (80055c4 <iprintf+0x2c>)
 800559c:	b513      	push	{r0, r1, r4, lr}
 800559e:	681c      	ldr	r4, [r3, #0]
 80055a0:	b124      	cbz	r4, 80055ac <iprintf+0x14>
 80055a2:	69a3      	ldr	r3, [r4, #24]
 80055a4:	b913      	cbnz	r3, 80055ac <iprintf+0x14>
 80055a6:	4620      	mov	r0, r4
 80055a8:	f001 f9f0 	bl	800698c <__sinit>
 80055ac:	ab05      	add	r3, sp, #20
 80055ae:	9a04      	ldr	r2, [sp, #16]
 80055b0:	68a1      	ldr	r1, [r4, #8]
 80055b2:	9301      	str	r3, [sp, #4]
 80055b4:	4620      	mov	r0, r4
 80055b6:	f002 f8d1 	bl	800775c <_vfiprintf_r>
 80055ba:	b002      	add	sp, #8
 80055bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055c0:	b004      	add	sp, #16
 80055c2:	4770      	bx	lr
 80055c4:	20000010 	.word	0x20000010

080055c8 <putchar>:
 80055c8:	4b09      	ldr	r3, [pc, #36]	; (80055f0 <putchar+0x28>)
 80055ca:	b513      	push	{r0, r1, r4, lr}
 80055cc:	681c      	ldr	r4, [r3, #0]
 80055ce:	4601      	mov	r1, r0
 80055d0:	b134      	cbz	r4, 80055e0 <putchar+0x18>
 80055d2:	69a3      	ldr	r3, [r4, #24]
 80055d4:	b923      	cbnz	r3, 80055e0 <putchar+0x18>
 80055d6:	9001      	str	r0, [sp, #4]
 80055d8:	4620      	mov	r0, r4
 80055da:	f001 f9d7 	bl	800698c <__sinit>
 80055de:	9901      	ldr	r1, [sp, #4]
 80055e0:	68a2      	ldr	r2, [r4, #8]
 80055e2:	4620      	mov	r0, r4
 80055e4:	b002      	add	sp, #8
 80055e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055ea:	f002 b9e7 	b.w	80079bc <_putc_r>
 80055ee:	bf00      	nop
 80055f0:	20000010 	.word	0x20000010

080055f4 <_sbrk_r>:
 80055f4:	b538      	push	{r3, r4, r5, lr}
 80055f6:	4d06      	ldr	r5, [pc, #24]	; (8005610 <_sbrk_r+0x1c>)
 80055f8:	2300      	movs	r3, #0
 80055fa:	4604      	mov	r4, r0
 80055fc:	4608      	mov	r0, r1
 80055fe:	602b      	str	r3, [r5, #0]
 8005600:	f7fc f9fe 	bl	8001a00 <_sbrk>
 8005604:	1c43      	adds	r3, r0, #1
 8005606:	d102      	bne.n	800560e <_sbrk_r+0x1a>
 8005608:	682b      	ldr	r3, [r5, #0]
 800560a:	b103      	cbz	r3, 800560e <_sbrk_r+0x1a>
 800560c:	6023      	str	r3, [r4, #0]
 800560e:	bd38      	pop	{r3, r4, r5, pc}
 8005610:	200004a8 	.word	0x200004a8

08005614 <sniprintf>:
 8005614:	b40c      	push	{r2, r3}
 8005616:	b530      	push	{r4, r5, lr}
 8005618:	4b17      	ldr	r3, [pc, #92]	; (8005678 <sniprintf+0x64>)
 800561a:	1e0c      	subs	r4, r1, #0
 800561c:	681d      	ldr	r5, [r3, #0]
 800561e:	b09d      	sub	sp, #116	; 0x74
 8005620:	da08      	bge.n	8005634 <sniprintf+0x20>
 8005622:	238b      	movs	r3, #139	; 0x8b
 8005624:	602b      	str	r3, [r5, #0]
 8005626:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800562a:	b01d      	add	sp, #116	; 0x74
 800562c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005630:	b002      	add	sp, #8
 8005632:	4770      	bx	lr
 8005634:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005638:	f8ad 3014 	strh.w	r3, [sp, #20]
 800563c:	bf14      	ite	ne
 800563e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005642:	4623      	moveq	r3, r4
 8005644:	9304      	str	r3, [sp, #16]
 8005646:	9307      	str	r3, [sp, #28]
 8005648:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800564c:	9002      	str	r0, [sp, #8]
 800564e:	9006      	str	r0, [sp, #24]
 8005650:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005654:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005656:	ab21      	add	r3, sp, #132	; 0x84
 8005658:	a902      	add	r1, sp, #8
 800565a:	4628      	mov	r0, r5
 800565c:	9301      	str	r3, [sp, #4]
 800565e:	f001 ff53 	bl	8007508 <_svfiprintf_r>
 8005662:	1c43      	adds	r3, r0, #1
 8005664:	bfbc      	itt	lt
 8005666:	238b      	movlt	r3, #139	; 0x8b
 8005668:	602b      	strlt	r3, [r5, #0]
 800566a:	2c00      	cmp	r4, #0
 800566c:	d0dd      	beq.n	800562a <sniprintf+0x16>
 800566e:	9b02      	ldr	r3, [sp, #8]
 8005670:	2200      	movs	r2, #0
 8005672:	701a      	strb	r2, [r3, #0]
 8005674:	e7d9      	b.n	800562a <sniprintf+0x16>
 8005676:	bf00      	nop
 8005678:	20000010 	.word	0x20000010

0800567c <__tzcalc_limits>:
 800567c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005680:	4605      	mov	r5, r0
 8005682:	f001 fa77 	bl	8006b74 <__gettzinfo>
 8005686:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800568a:	429d      	cmp	r5, r3
 800568c:	f340 8099 	ble.w	80057c2 <__tzcalc_limits+0x146>
 8005690:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8005694:	18ac      	adds	r4, r5, r2
 8005696:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800569a:	f240 126d 	movw	r2, #365	; 0x16d
 800569e:	10a4      	asrs	r4, r4, #2
 80056a0:	fb02 4403 	mla	r4, r2, r3, r4
 80056a4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80056a8:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 80056ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80056b0:	441c      	add	r4, r3
 80056b2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80056b6:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 80056ba:	fb95 fcf3 	sdiv	ip, r5, r3
 80056be:	fb03 5c1c 	mls	ip, r3, ip, r5
 80056c2:	186a      	adds	r2, r5, r1
 80056c4:	fabc f68c 	clz	r6, ip
 80056c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80056cc:	f005 0303 	and.w	r3, r5, #3
 80056d0:	4414      	add	r4, r2
 80056d2:	2264      	movs	r2, #100	; 0x64
 80056d4:	6045      	str	r5, [r0, #4]
 80056d6:	fb95 f7f2 	sdiv	r7, r5, r2
 80056da:	0976      	lsrs	r6, r6, #5
 80056dc:	fb02 5717 	mls	r7, r2, r7, r5
 80056e0:	4601      	mov	r1, r0
 80056e2:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	f04f 0a07 	mov.w	sl, #7
 80056ec:	7a0d      	ldrb	r5, [r1, #8]
 80056ee:	694b      	ldr	r3, [r1, #20]
 80056f0:	2d4a      	cmp	r5, #74	; 0x4a
 80056f2:	d12d      	bne.n	8005750 <__tzcalc_limits+0xd4>
 80056f4:	9a00      	ldr	r2, [sp, #0]
 80056f6:	eb04 0e03 	add.w	lr, r4, r3
 80056fa:	b902      	cbnz	r2, 80056fe <__tzcalc_limits+0x82>
 80056fc:	b917      	cbnz	r7, 8005704 <__tzcalc_limits+0x88>
 80056fe:	f1bc 0f00 	cmp.w	ip, #0
 8005702:	d123      	bne.n	800574c <__tzcalc_limits+0xd0>
 8005704:	2b3b      	cmp	r3, #59	; 0x3b
 8005706:	bfd4      	ite	le
 8005708:	2300      	movle	r3, #0
 800570a:	2301      	movgt	r3, #1
 800570c:	4473      	add	r3, lr
 800570e:	3b01      	subs	r3, #1
 8005710:	698d      	ldr	r5, [r1, #24]
 8005712:	4a2d      	ldr	r2, [pc, #180]	; (80057c8 <__tzcalc_limits+0x14c>)
 8005714:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8005718:	fbc3 5e02 	smlal	r5, lr, r3, r2
 800571c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800571e:	18ed      	adds	r5, r5, r3
 8005720:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8005724:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8005728:	3128      	adds	r1, #40	; 0x28
 800572a:	458b      	cmp	fp, r1
 800572c:	d1de      	bne.n	80056ec <__tzcalc_limits+0x70>
 800572e:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 8005732:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 8005736:	428c      	cmp	r4, r1
 8005738:	eb72 0303 	sbcs.w	r3, r2, r3
 800573c:	bfb4      	ite	lt
 800573e:	2301      	movlt	r3, #1
 8005740:	2300      	movge	r3, #0
 8005742:	6003      	str	r3, [r0, #0]
 8005744:	2001      	movs	r0, #1
 8005746:	b003      	add	sp, #12
 8005748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800574c:	2300      	movs	r3, #0
 800574e:	e7dd      	b.n	800570c <__tzcalc_limits+0x90>
 8005750:	2d44      	cmp	r5, #68	; 0x44
 8005752:	d101      	bne.n	8005758 <__tzcalc_limits+0xdc>
 8005754:	4423      	add	r3, r4
 8005756:	e7db      	b.n	8005710 <__tzcalc_limits+0x94>
 8005758:	9a00      	ldr	r2, [sp, #0]
 800575a:	bb62      	cbnz	r2, 80057b6 <__tzcalc_limits+0x13a>
 800575c:	2f00      	cmp	r7, #0
 800575e:	bf0c      	ite	eq
 8005760:	4635      	moveq	r5, r6
 8005762:	2501      	movne	r5, #1
 8005764:	68ca      	ldr	r2, [r1, #12]
 8005766:	9201      	str	r2, [sp, #4]
 8005768:	4a18      	ldr	r2, [pc, #96]	; (80057cc <__tzcalc_limits+0x150>)
 800576a:	f04f 0930 	mov.w	r9, #48	; 0x30
 800576e:	fb09 2505 	mla	r5, r9, r5, r2
 8005772:	46a6      	mov	lr, r4
 8005774:	f04f 0800 	mov.w	r8, #0
 8005778:	3d04      	subs	r5, #4
 800577a:	9a01      	ldr	r2, [sp, #4]
 800577c:	f108 0801 	add.w	r8, r8, #1
 8005780:	4542      	cmp	r2, r8
 8005782:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8005786:	dc18      	bgt.n	80057ba <__tzcalc_limits+0x13e>
 8005788:	f10e 0504 	add.w	r5, lr, #4
 800578c:	fb95 f8fa 	sdiv	r8, r5, sl
 8005790:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8005794:	eba5 0808 	sub.w	r8, r5, r8
 8005798:	ebb3 0808 	subs.w	r8, r3, r8
 800579c:	690b      	ldr	r3, [r1, #16]
 800579e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80057a2:	bf48      	it	mi
 80057a4:	f108 0807 	addmi.w	r8, r8, #7
 80057a8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80057ac:	4443      	add	r3, r8
 80057ae:	454b      	cmp	r3, r9
 80057b0:	da05      	bge.n	80057be <__tzcalc_limits+0x142>
 80057b2:	4473      	add	r3, lr
 80057b4:	e7ac      	b.n	8005710 <__tzcalc_limits+0x94>
 80057b6:	4635      	mov	r5, r6
 80057b8:	e7d4      	b.n	8005764 <__tzcalc_limits+0xe8>
 80057ba:	44ce      	add	lr, r9
 80057bc:	e7dd      	b.n	800577a <__tzcalc_limits+0xfe>
 80057be:	3b07      	subs	r3, #7
 80057c0:	e7f5      	b.n	80057ae <__tzcalc_limits+0x132>
 80057c2:	2000      	movs	r0, #0
 80057c4:	e7bf      	b.n	8005746 <__tzcalc_limits+0xca>
 80057c6:	bf00      	nop
 80057c8:	00015180 	.word	0x00015180
 80057cc:	08008cdc 	.word	0x08008cdc

080057d0 <__tz_lock>:
 80057d0:	4801      	ldr	r0, [pc, #4]	; (80057d8 <__tz_lock+0x8>)
 80057d2:	f001 ba84 	b.w	8006cde <__retarget_lock_acquire>
 80057d6:	bf00      	nop
 80057d8:	200004a4 	.word	0x200004a4

080057dc <__tz_unlock>:
 80057dc:	4801      	ldr	r0, [pc, #4]	; (80057e4 <__tz_unlock+0x8>)
 80057de:	f001 ba80 	b.w	8006ce2 <__retarget_lock_release>
 80057e2:	bf00      	nop
 80057e4:	200004a4 	.word	0x200004a4

080057e8 <_tzset_unlocked>:
 80057e8:	4b01      	ldr	r3, [pc, #4]	; (80057f0 <_tzset_unlocked+0x8>)
 80057ea:	6818      	ldr	r0, [r3, #0]
 80057ec:	f000 b802 	b.w	80057f4 <_tzset_unlocked_r>
 80057f0:	20000010 	.word	0x20000010

080057f4 <_tzset_unlocked_r>:
 80057f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f8:	b08d      	sub	sp, #52	; 0x34
 80057fa:	4607      	mov	r7, r0
 80057fc:	f001 f9ba 	bl	8006b74 <__gettzinfo>
 8005800:	49b0      	ldr	r1, [pc, #704]	; (8005ac4 <_tzset_unlocked_r+0x2d0>)
 8005802:	4eb1      	ldr	r6, [pc, #708]	; (8005ac8 <_tzset_unlocked_r+0x2d4>)
 8005804:	4605      	mov	r5, r0
 8005806:	4638      	mov	r0, r7
 8005808:	f001 f9ac 	bl	8006b64 <_getenv_r>
 800580c:	4604      	mov	r4, r0
 800580e:	b970      	cbnz	r0, 800582e <_tzset_unlocked_r+0x3a>
 8005810:	4bae      	ldr	r3, [pc, #696]	; (8005acc <_tzset_unlocked_r+0x2d8>)
 8005812:	4aaf      	ldr	r2, [pc, #700]	; (8005ad0 <_tzset_unlocked_r+0x2dc>)
 8005814:	6018      	str	r0, [r3, #0]
 8005816:	4baf      	ldr	r3, [pc, #700]	; (8005ad4 <_tzset_unlocked_r+0x2e0>)
 8005818:	6018      	str	r0, [r3, #0]
 800581a:	4baf      	ldr	r3, [pc, #700]	; (8005ad8 <_tzset_unlocked_r+0x2e4>)
 800581c:	6830      	ldr	r0, [r6, #0]
 800581e:	e9c3 2200 	strd	r2, r2, [r3]
 8005822:	f7fe feed 	bl	8004600 <free>
 8005826:	6034      	str	r4, [r6, #0]
 8005828:	b00d      	add	sp, #52	; 0x34
 800582a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800582e:	6831      	ldr	r1, [r6, #0]
 8005830:	2900      	cmp	r1, #0
 8005832:	d162      	bne.n	80058fa <_tzset_unlocked_r+0x106>
 8005834:	6830      	ldr	r0, [r6, #0]
 8005836:	f7fe fee3 	bl	8004600 <free>
 800583a:	4620      	mov	r0, r4
 800583c:	f7fa fcc8 	bl	80001d0 <strlen>
 8005840:	1c41      	adds	r1, r0, #1
 8005842:	4638      	mov	r0, r7
 8005844:	f7ff f9ca 	bl	8004bdc <_malloc_r>
 8005848:	6030      	str	r0, [r6, #0]
 800584a:	2800      	cmp	r0, #0
 800584c:	d15a      	bne.n	8005904 <_tzset_unlocked_r+0x110>
 800584e:	7823      	ldrb	r3, [r4, #0]
 8005850:	4aa2      	ldr	r2, [pc, #648]	; (8005adc <_tzset_unlocked_r+0x2e8>)
 8005852:	49a3      	ldr	r1, [pc, #652]	; (8005ae0 <_tzset_unlocked_r+0x2ec>)
 8005854:	2b3a      	cmp	r3, #58	; 0x3a
 8005856:	bf08      	it	eq
 8005858:	3401      	addeq	r4, #1
 800585a:	ae0a      	add	r6, sp, #40	; 0x28
 800585c:	4633      	mov	r3, r6
 800585e:	4620      	mov	r0, r4
 8005860:	f002 f914 	bl	8007a8c <siscanf>
 8005864:	2800      	cmp	r0, #0
 8005866:	dddf      	ble.n	8005828 <_tzset_unlocked_r+0x34>
 8005868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800586a:	18e7      	adds	r7, r4, r3
 800586c:	5ce3      	ldrb	r3, [r4, r3]
 800586e:	2b2d      	cmp	r3, #45	; 0x2d
 8005870:	d14c      	bne.n	800590c <_tzset_unlocked_r+0x118>
 8005872:	3701      	adds	r7, #1
 8005874:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005878:	f10d 0a20 	add.w	sl, sp, #32
 800587c:	f10d 0b1e 	add.w	fp, sp, #30
 8005880:	2400      	movs	r4, #0
 8005882:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8005886:	4997      	ldr	r1, [pc, #604]	; (8005ae4 <_tzset_unlocked_r+0x2f0>)
 8005888:	9603      	str	r6, [sp, #12]
 800588a:	f8cd b000 	str.w	fp, [sp]
 800588e:	4633      	mov	r3, r6
 8005890:	aa07      	add	r2, sp, #28
 8005892:	4638      	mov	r0, r7
 8005894:	f8ad 401e 	strh.w	r4, [sp, #30]
 8005898:	f8ad 4020 	strh.w	r4, [sp, #32]
 800589c:	f002 f8f6 	bl	8007a8c <siscanf>
 80058a0:	42a0      	cmp	r0, r4
 80058a2:	ddc1      	ble.n	8005828 <_tzset_unlocked_r+0x34>
 80058a4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80058a8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80058ac:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8005af0 <_tzset_unlocked_r+0x2fc>
 80058b0:	213c      	movs	r1, #60	; 0x3c
 80058b2:	fb01 3302 	mla	r3, r1, r2, r3
 80058b6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80058ba:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80058be:	fb01 3302 	mla	r3, r1, r2, r3
 80058c2:	fb08 f303 	mul.w	r3, r8, r3
 80058c6:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8005ad8 <_tzset_unlocked_r+0x2e4>
 80058ca:	62ab      	str	r3, [r5, #40]	; 0x28
 80058cc:	4b83      	ldr	r3, [pc, #524]	; (8005adc <_tzset_unlocked_r+0x2e8>)
 80058ce:	f8c8 3000 	str.w	r3, [r8]
 80058d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058d4:	4982      	ldr	r1, [pc, #520]	; (8005ae0 <_tzset_unlocked_r+0x2ec>)
 80058d6:	441f      	add	r7, r3
 80058d8:	464a      	mov	r2, r9
 80058da:	4633      	mov	r3, r6
 80058dc:	4638      	mov	r0, r7
 80058de:	f002 f8d5 	bl	8007a8c <siscanf>
 80058e2:	42a0      	cmp	r0, r4
 80058e4:	dc18      	bgt.n	8005918 <_tzset_unlocked_r+0x124>
 80058e6:	f8d8 3000 	ldr.w	r3, [r8]
 80058ea:	f8c8 3004 	str.w	r3, [r8, #4]
 80058ee:	4b77      	ldr	r3, [pc, #476]	; (8005acc <_tzset_unlocked_r+0x2d8>)
 80058f0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80058f2:	601a      	str	r2, [r3, #0]
 80058f4:	4b77      	ldr	r3, [pc, #476]	; (8005ad4 <_tzset_unlocked_r+0x2e0>)
 80058f6:	601c      	str	r4, [r3, #0]
 80058f8:	e796      	b.n	8005828 <_tzset_unlocked_r+0x34>
 80058fa:	f7fa fcc1 	bl	8000280 <strcmp>
 80058fe:	2800      	cmp	r0, #0
 8005900:	d198      	bne.n	8005834 <_tzset_unlocked_r+0x40>
 8005902:	e791      	b.n	8005828 <_tzset_unlocked_r+0x34>
 8005904:	4621      	mov	r1, r4
 8005906:	f002 f932 	bl	8007b6e <strcpy>
 800590a:	e7a0      	b.n	800584e <_tzset_unlocked_r+0x5a>
 800590c:	2b2b      	cmp	r3, #43	; 0x2b
 800590e:	bf08      	it	eq
 8005910:	3701      	addeq	r7, #1
 8005912:	f04f 0801 	mov.w	r8, #1
 8005916:	e7af      	b.n	8005878 <_tzset_unlocked_r+0x84>
 8005918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800591a:	f8c8 9004 	str.w	r9, [r8, #4]
 800591e:	18fc      	adds	r4, r7, r3
 8005920:	5cfb      	ldrb	r3, [r7, r3]
 8005922:	2b2d      	cmp	r3, #45	; 0x2d
 8005924:	f040 808b 	bne.w	8005a3e <_tzset_unlocked_r+0x24a>
 8005928:	3401      	adds	r4, #1
 800592a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800592e:	2300      	movs	r3, #0
 8005930:	f8ad 301c 	strh.w	r3, [sp, #28]
 8005934:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005938:	f8ad 3020 	strh.w	r3, [sp, #32]
 800593c:	930a      	str	r3, [sp, #40]	; 0x28
 800593e:	e9cd a602 	strd	sl, r6, [sp, #8]
 8005942:	e9cd b600 	strd	fp, r6, [sp]
 8005946:	4967      	ldr	r1, [pc, #412]	; (8005ae4 <_tzset_unlocked_r+0x2f0>)
 8005948:	4633      	mov	r3, r6
 800594a:	aa07      	add	r2, sp, #28
 800594c:	4620      	mov	r0, r4
 800594e:	f002 f89d 	bl	8007a8c <siscanf>
 8005952:	2800      	cmp	r0, #0
 8005954:	dc78      	bgt.n	8005a48 <_tzset_unlocked_r+0x254>
 8005956:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005958:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800595c:	652b      	str	r3, [r5, #80]	; 0x50
 800595e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005960:	462f      	mov	r7, r5
 8005962:	441c      	add	r4, r3
 8005964:	f04f 0900 	mov.w	r9, #0
 8005968:	7823      	ldrb	r3, [r4, #0]
 800596a:	2b2c      	cmp	r3, #44	; 0x2c
 800596c:	bf08      	it	eq
 800596e:	3401      	addeq	r4, #1
 8005970:	f894 8000 	ldrb.w	r8, [r4]
 8005974:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8005978:	d178      	bne.n	8005a6c <_tzset_unlocked_r+0x278>
 800597a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800597e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8005982:	ab09      	add	r3, sp, #36	; 0x24
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	4958      	ldr	r1, [pc, #352]	; (8005ae8 <_tzset_unlocked_r+0x2f4>)
 8005988:	9603      	str	r6, [sp, #12]
 800598a:	4633      	mov	r3, r6
 800598c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8005990:	4620      	mov	r0, r4
 8005992:	f002 f87b 	bl	8007a8c <siscanf>
 8005996:	2803      	cmp	r0, #3
 8005998:	f47f af46 	bne.w	8005828 <_tzset_unlocked_r+0x34>
 800599c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80059a0:	1e4b      	subs	r3, r1, #1
 80059a2:	2b0b      	cmp	r3, #11
 80059a4:	f63f af40 	bhi.w	8005828 <_tzset_unlocked_r+0x34>
 80059a8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80059ac:	1e53      	subs	r3, r2, #1
 80059ae:	2b04      	cmp	r3, #4
 80059b0:	f63f af3a 	bhi.w	8005828 <_tzset_unlocked_r+0x34>
 80059b4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80059b8:	2b06      	cmp	r3, #6
 80059ba:	f63f af35 	bhi.w	8005828 <_tzset_unlocked_r+0x34>
 80059be:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80059c2:	f887 8008 	strb.w	r8, [r7, #8]
 80059c6:	617b      	str	r3, [r7, #20]
 80059c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059ca:	eb04 0803 	add.w	r8, r4, r3
 80059ce:	2302      	movs	r3, #2
 80059d0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80059d4:	2300      	movs	r3, #0
 80059d6:	f8ad 301e 	strh.w	r3, [sp, #30]
 80059da:	f8ad 3020 	strh.w	r3, [sp, #32]
 80059de:	930a      	str	r3, [sp, #40]	; 0x28
 80059e0:	f898 3000 	ldrb.w	r3, [r8]
 80059e4:	2b2f      	cmp	r3, #47	; 0x2f
 80059e6:	d109      	bne.n	80059fc <_tzset_unlocked_r+0x208>
 80059e8:	e9cd a602 	strd	sl, r6, [sp, #8]
 80059ec:	e9cd b600 	strd	fp, r6, [sp]
 80059f0:	493e      	ldr	r1, [pc, #248]	; (8005aec <_tzset_unlocked_r+0x2f8>)
 80059f2:	4633      	mov	r3, r6
 80059f4:	aa07      	add	r2, sp, #28
 80059f6:	4640      	mov	r0, r8
 80059f8:	f002 f848 	bl	8007a8c <siscanf>
 80059fc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8005a00:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8005a04:	213c      	movs	r1, #60	; 0x3c
 8005a06:	fb01 3302 	mla	r3, r1, r2, r3
 8005a0a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8005a0e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005a12:	fb01 3302 	mla	r3, r1, r2, r3
 8005a16:	61bb      	str	r3, [r7, #24]
 8005a18:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005a1a:	3728      	adds	r7, #40	; 0x28
 8005a1c:	4444      	add	r4, r8
 8005a1e:	f1b9 0f00 	cmp.w	r9, #0
 8005a22:	d020      	beq.n	8005a66 <_tzset_unlocked_r+0x272>
 8005a24:	6868      	ldr	r0, [r5, #4]
 8005a26:	f7ff fe29 	bl	800567c <__tzcalc_limits>
 8005a2a:	4b28      	ldr	r3, [pc, #160]	; (8005acc <_tzset_unlocked_r+0x2d8>)
 8005a2c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005a32:	1a9b      	subs	r3, r3, r2
 8005a34:	4a27      	ldr	r2, [pc, #156]	; (8005ad4 <_tzset_unlocked_r+0x2e0>)
 8005a36:	bf18      	it	ne
 8005a38:	2301      	movne	r3, #1
 8005a3a:	6013      	str	r3, [r2, #0]
 8005a3c:	e6f4      	b.n	8005828 <_tzset_unlocked_r+0x34>
 8005a3e:	2b2b      	cmp	r3, #43	; 0x2b
 8005a40:	bf08      	it	eq
 8005a42:	3401      	addeq	r4, #1
 8005a44:	2701      	movs	r7, #1
 8005a46:	e772      	b.n	800592e <_tzset_unlocked_r+0x13a>
 8005a48:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8005a4c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8005a50:	213c      	movs	r1, #60	; 0x3c
 8005a52:	fb01 3302 	mla	r3, r1, r2, r3
 8005a56:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8005a5a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005a5e:	fb01 3302 	mla	r3, r1, r2, r3
 8005a62:	437b      	muls	r3, r7
 8005a64:	e77a      	b.n	800595c <_tzset_unlocked_r+0x168>
 8005a66:	f04f 0901 	mov.w	r9, #1
 8005a6a:	e77d      	b.n	8005968 <_tzset_unlocked_r+0x174>
 8005a6c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8005a70:	bf06      	itte	eq
 8005a72:	3401      	addeq	r4, #1
 8005a74:	4643      	moveq	r3, r8
 8005a76:	2344      	movne	r3, #68	; 0x44
 8005a78:	220a      	movs	r2, #10
 8005a7a:	a90b      	add	r1, sp, #44	; 0x2c
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	9305      	str	r3, [sp, #20]
 8005a80:	f002 f906 	bl	8007c90 <strtoul>
 8005a84:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8005a88:	9b05      	ldr	r3, [sp, #20]
 8005a8a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8005a8e:	45a0      	cmp	r8, r4
 8005a90:	d114      	bne.n	8005abc <_tzset_unlocked_r+0x2c8>
 8005a92:	234d      	movs	r3, #77	; 0x4d
 8005a94:	f1b9 0f00 	cmp.w	r9, #0
 8005a98:	d107      	bne.n	8005aaa <_tzset_unlocked_r+0x2b6>
 8005a9a:	722b      	strb	r3, [r5, #8]
 8005a9c:	2103      	movs	r1, #3
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8005aa4:	f8c5 9014 	str.w	r9, [r5, #20]
 8005aa8:	e791      	b.n	80059ce <_tzset_unlocked_r+0x1da>
 8005aaa:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8005aae:	220b      	movs	r2, #11
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	63eb      	str	r3, [r5, #60]	; 0x3c
 8005aba:	e788      	b.n	80059ce <_tzset_unlocked_r+0x1da>
 8005abc:	b280      	uxth	r0, r0
 8005abe:	723b      	strb	r3, [r7, #8]
 8005ac0:	6178      	str	r0, [r7, #20]
 8005ac2:	e784      	b.n	80059ce <_tzset_unlocked_r+0x1da>
 8005ac4:	08008d6e 	.word	0x08008d6e
 8005ac8:	20000494 	.word	0x20000494
 8005acc:	2000049c 	.word	0x2000049c
 8005ad0:	08008d71 	.word	0x08008d71
 8005ad4:	20000498 	.word	0x20000498
 8005ad8:	20000074 	.word	0x20000074
 8005adc:	20000487 	.word	0x20000487
 8005ae0:	08008d75 	.word	0x08008d75
 8005ae4:	08008d98 	.word	0x08008d98
 8005ae8:	08008d84 	.word	0x08008d84
 8005aec:	08008d97 	.word	0x08008d97
 8005af0:	2000047c 	.word	0x2000047c

08005af4 <asctime>:
 8005af4:	4b0d      	ldr	r3, [pc, #52]	; (8005b2c <asctime+0x38>)
 8005af6:	b570      	push	{r4, r5, r6, lr}
 8005af8:	681d      	ldr	r5, [r3, #0]
 8005afa:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 8005afc:	4604      	mov	r4, r0
 8005afe:	b976      	cbnz	r6, 8005b1e <asctime+0x2a>
 8005b00:	201a      	movs	r0, #26
 8005b02:	f7fe fd75 	bl	80045f0 <malloc>
 8005b06:	4602      	mov	r2, r0
 8005b08:	6428      	str	r0, [r5, #64]	; 0x40
 8005b0a:	b920      	cbnz	r0, 8005b16 <asctime+0x22>
 8005b0c:	4b08      	ldr	r3, [pc, #32]	; (8005b30 <asctime+0x3c>)
 8005b0e:	4809      	ldr	r0, [pc, #36]	; (8005b34 <asctime+0x40>)
 8005b10:	2137      	movs	r1, #55	; 0x37
 8005b12:	f000 f837 	bl	8005b84 <__assert_func>
 8005b16:	221a      	movs	r2, #26
 8005b18:	4631      	mov	r1, r6
 8005b1a:	f7fe fd79 	bl	8004610 <memset>
 8005b1e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8005b20:	4620      	mov	r0, r4
 8005b22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005b26:	f000 b807 	b.w	8005b38 <asctime_r>
 8005b2a:	bf00      	nop
 8005b2c:	20000010 	.word	0x20000010
 8005b30:	08008c08 	.word	0x08008c08
 8005b34:	08008daa 	.word	0x08008daa

08005b38 <asctime_r>:
 8005b38:	b510      	push	{r4, lr}
 8005b3a:	460c      	mov	r4, r1
 8005b3c:	6941      	ldr	r1, [r0, #20]
 8005b3e:	6903      	ldr	r3, [r0, #16]
 8005b40:	6982      	ldr	r2, [r0, #24]
 8005b42:	b086      	sub	sp, #24
 8005b44:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8005b48:	9104      	str	r1, [sp, #16]
 8005b4a:	6801      	ldr	r1, [r0, #0]
 8005b4c:	9103      	str	r1, [sp, #12]
 8005b4e:	6841      	ldr	r1, [r0, #4]
 8005b50:	9102      	str	r1, [sp, #8]
 8005b52:	6881      	ldr	r1, [r0, #8]
 8005b54:	9101      	str	r1, [sp, #4]
 8005b56:	68c1      	ldr	r1, [r0, #12]
 8005b58:	9100      	str	r1, [sp, #0]
 8005b5a:	4907      	ldr	r1, [pc, #28]	; (8005b78 <asctime_r+0x40>)
 8005b5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005b60:	440b      	add	r3, r1
 8005b62:	4906      	ldr	r1, [pc, #24]	; (8005b7c <asctime_r+0x44>)
 8005b64:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005b68:	440a      	add	r2, r1
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	4904      	ldr	r1, [pc, #16]	; (8005b80 <asctime_r+0x48>)
 8005b6e:	f001 ff6d 	bl	8007a4c <siprintf>
 8005b72:	4620      	mov	r0, r4
 8005b74:	b006      	add	sp, #24
 8005b76:	bd10      	pop	{r4, pc}
 8005b78:	08008e3b 	.word	0x08008e3b
 8005b7c:	08008e26 	.word	0x08008e26
 8005b80:	08008e06 	.word	0x08008e06

08005b84 <__assert_func>:
 8005b84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005b86:	4614      	mov	r4, r2
 8005b88:	461a      	mov	r2, r3
 8005b8a:	4b09      	ldr	r3, [pc, #36]	; (8005bb0 <__assert_func+0x2c>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4605      	mov	r5, r0
 8005b90:	68d8      	ldr	r0, [r3, #12]
 8005b92:	b14c      	cbz	r4, 8005ba8 <__assert_func+0x24>
 8005b94:	4b07      	ldr	r3, [pc, #28]	; (8005bb4 <__assert_func+0x30>)
 8005b96:	9100      	str	r1, [sp, #0]
 8005b98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005b9c:	4906      	ldr	r1, [pc, #24]	; (8005bb8 <__assert_func+0x34>)
 8005b9e:	462b      	mov	r3, r5
 8005ba0:	f000 ff72 	bl	8006a88 <fiprintf>
 8005ba4:	f002 f950 	bl	8007e48 <abort>
 8005ba8:	4b04      	ldr	r3, [pc, #16]	; (8005bbc <__assert_func+0x38>)
 8005baa:	461c      	mov	r4, r3
 8005bac:	e7f3      	b.n	8005b96 <__assert_func+0x12>
 8005bae:	bf00      	nop
 8005bb0:	20000010 	.word	0x20000010
 8005bb4:	08008e5f 	.word	0x08008e5f
 8005bb8:	08008e6c 	.word	0x08008e6c
 8005bbc:	08008e25 	.word	0x08008e25

08005bc0 <div>:
 8005bc0:	2900      	cmp	r1, #0
 8005bc2:	b510      	push	{r4, lr}
 8005bc4:	fb91 f4f2 	sdiv	r4, r1, r2
 8005bc8:	fb02 1314 	mls	r3, r2, r4, r1
 8005bcc:	db06      	blt.n	8005bdc <div+0x1c>
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	da01      	bge.n	8005bd6 <div+0x16>
 8005bd2:	3401      	adds	r4, #1
 8005bd4:	1a9b      	subs	r3, r3, r2
 8005bd6:	e9c0 4300 	strd	r4, r3, [r0]
 8005bda:	bd10      	pop	{r4, pc}
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	bfc4      	itt	gt
 8005be0:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
 8005be4:	189b      	addgt	r3, r3, r2
 8005be6:	e7f6      	b.n	8005bd6 <div+0x16>

08005be8 <quorem>:
 8005be8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bec:	6903      	ldr	r3, [r0, #16]
 8005bee:	690c      	ldr	r4, [r1, #16]
 8005bf0:	42a3      	cmp	r3, r4
 8005bf2:	4607      	mov	r7, r0
 8005bf4:	f2c0 8081 	blt.w	8005cfa <quorem+0x112>
 8005bf8:	3c01      	subs	r4, #1
 8005bfa:	f101 0814 	add.w	r8, r1, #20
 8005bfe:	f100 0514 	add.w	r5, r0, #20
 8005c02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c06:	9301      	str	r3, [sp, #4]
 8005c08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c10:	3301      	adds	r3, #1
 8005c12:	429a      	cmp	r2, r3
 8005c14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005c18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c20:	d331      	bcc.n	8005c86 <quorem+0x9e>
 8005c22:	f04f 0e00 	mov.w	lr, #0
 8005c26:	4640      	mov	r0, r8
 8005c28:	46ac      	mov	ip, r5
 8005c2a:	46f2      	mov	sl, lr
 8005c2c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c30:	b293      	uxth	r3, r2
 8005c32:	fb06 e303 	mla	r3, r6, r3, lr
 8005c36:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	ebaa 0303 	sub.w	r3, sl, r3
 8005c40:	f8dc a000 	ldr.w	sl, [ip]
 8005c44:	0c12      	lsrs	r2, r2, #16
 8005c46:	fa13 f38a 	uxtah	r3, r3, sl
 8005c4a:	fb06 e202 	mla	r2, r6, r2, lr
 8005c4e:	9300      	str	r3, [sp, #0]
 8005c50:	9b00      	ldr	r3, [sp, #0]
 8005c52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c56:	b292      	uxth	r2, r2
 8005c58:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005c5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c60:	f8bd 3000 	ldrh.w	r3, [sp]
 8005c64:	4581      	cmp	r9, r0
 8005c66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c6a:	f84c 3b04 	str.w	r3, [ip], #4
 8005c6e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005c72:	d2db      	bcs.n	8005c2c <quorem+0x44>
 8005c74:	f855 300b 	ldr.w	r3, [r5, fp]
 8005c78:	b92b      	cbnz	r3, 8005c86 <quorem+0x9e>
 8005c7a:	9b01      	ldr	r3, [sp, #4]
 8005c7c:	3b04      	subs	r3, #4
 8005c7e:	429d      	cmp	r5, r3
 8005c80:	461a      	mov	r2, r3
 8005c82:	d32e      	bcc.n	8005ce2 <quorem+0xfa>
 8005c84:	613c      	str	r4, [r7, #16]
 8005c86:	4638      	mov	r0, r7
 8005c88:	f001 faca 	bl	8007220 <__mcmp>
 8005c8c:	2800      	cmp	r0, #0
 8005c8e:	db24      	blt.n	8005cda <quorem+0xf2>
 8005c90:	3601      	adds	r6, #1
 8005c92:	4628      	mov	r0, r5
 8005c94:	f04f 0c00 	mov.w	ip, #0
 8005c98:	f858 2b04 	ldr.w	r2, [r8], #4
 8005c9c:	f8d0 e000 	ldr.w	lr, [r0]
 8005ca0:	b293      	uxth	r3, r2
 8005ca2:	ebac 0303 	sub.w	r3, ip, r3
 8005ca6:	0c12      	lsrs	r2, r2, #16
 8005ca8:	fa13 f38e 	uxtah	r3, r3, lr
 8005cac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005cb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cba:	45c1      	cmp	r9, r8
 8005cbc:	f840 3b04 	str.w	r3, [r0], #4
 8005cc0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005cc4:	d2e8      	bcs.n	8005c98 <quorem+0xb0>
 8005cc6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cce:	b922      	cbnz	r2, 8005cda <quorem+0xf2>
 8005cd0:	3b04      	subs	r3, #4
 8005cd2:	429d      	cmp	r5, r3
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	d30a      	bcc.n	8005cee <quorem+0x106>
 8005cd8:	613c      	str	r4, [r7, #16]
 8005cda:	4630      	mov	r0, r6
 8005cdc:	b003      	add	sp, #12
 8005cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ce2:	6812      	ldr	r2, [r2, #0]
 8005ce4:	3b04      	subs	r3, #4
 8005ce6:	2a00      	cmp	r2, #0
 8005ce8:	d1cc      	bne.n	8005c84 <quorem+0x9c>
 8005cea:	3c01      	subs	r4, #1
 8005cec:	e7c7      	b.n	8005c7e <quorem+0x96>
 8005cee:	6812      	ldr	r2, [r2, #0]
 8005cf0:	3b04      	subs	r3, #4
 8005cf2:	2a00      	cmp	r2, #0
 8005cf4:	d1f0      	bne.n	8005cd8 <quorem+0xf0>
 8005cf6:	3c01      	subs	r4, #1
 8005cf8:	e7eb      	b.n	8005cd2 <quorem+0xea>
 8005cfa:	2000      	movs	r0, #0
 8005cfc:	e7ee      	b.n	8005cdc <quorem+0xf4>
	...

08005d00 <_dtoa_r>:
 8005d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d04:	ed2d 8b04 	vpush	{d8-d9}
 8005d08:	ec57 6b10 	vmov	r6, r7, d0
 8005d0c:	b093      	sub	sp, #76	; 0x4c
 8005d0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005d10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005d14:	9106      	str	r1, [sp, #24]
 8005d16:	ee10 aa10 	vmov	sl, s0
 8005d1a:	4604      	mov	r4, r0
 8005d1c:	9209      	str	r2, [sp, #36]	; 0x24
 8005d1e:	930c      	str	r3, [sp, #48]	; 0x30
 8005d20:	46bb      	mov	fp, r7
 8005d22:	b975      	cbnz	r5, 8005d42 <_dtoa_r+0x42>
 8005d24:	2010      	movs	r0, #16
 8005d26:	f7fe fc63 	bl	80045f0 <malloc>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	6260      	str	r0, [r4, #36]	; 0x24
 8005d2e:	b920      	cbnz	r0, 8005d3a <_dtoa_r+0x3a>
 8005d30:	4ba7      	ldr	r3, [pc, #668]	; (8005fd0 <_dtoa_r+0x2d0>)
 8005d32:	21ea      	movs	r1, #234	; 0xea
 8005d34:	48a7      	ldr	r0, [pc, #668]	; (8005fd4 <_dtoa_r+0x2d4>)
 8005d36:	f7ff ff25 	bl	8005b84 <__assert_func>
 8005d3a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005d3e:	6005      	str	r5, [r0, #0]
 8005d40:	60c5      	str	r5, [r0, #12]
 8005d42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d44:	6819      	ldr	r1, [r3, #0]
 8005d46:	b151      	cbz	r1, 8005d5e <_dtoa_r+0x5e>
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	604a      	str	r2, [r1, #4]
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	4093      	lsls	r3, r2
 8005d50:	608b      	str	r3, [r1, #8]
 8005d52:	4620      	mov	r0, r4
 8005d54:	f001 f822 	bl	8006d9c <_Bfree>
 8005d58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	1e3b      	subs	r3, r7, #0
 8005d60:	bfaa      	itet	ge
 8005d62:	2300      	movge	r3, #0
 8005d64:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005d68:	f8c8 3000 	strge.w	r3, [r8]
 8005d6c:	4b9a      	ldr	r3, [pc, #616]	; (8005fd8 <_dtoa_r+0x2d8>)
 8005d6e:	bfbc      	itt	lt
 8005d70:	2201      	movlt	r2, #1
 8005d72:	f8c8 2000 	strlt.w	r2, [r8]
 8005d76:	ea33 030b 	bics.w	r3, r3, fp
 8005d7a:	d11b      	bne.n	8005db4 <_dtoa_r+0xb4>
 8005d7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d7e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d82:	6013      	str	r3, [r2, #0]
 8005d84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005d88:	4333      	orrs	r3, r6
 8005d8a:	f000 8592 	beq.w	80068b2 <_dtoa_r+0xbb2>
 8005d8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d90:	b963      	cbnz	r3, 8005dac <_dtoa_r+0xac>
 8005d92:	4b92      	ldr	r3, [pc, #584]	; (8005fdc <_dtoa_r+0x2dc>)
 8005d94:	e022      	b.n	8005ddc <_dtoa_r+0xdc>
 8005d96:	4b92      	ldr	r3, [pc, #584]	; (8005fe0 <_dtoa_r+0x2e0>)
 8005d98:	9301      	str	r3, [sp, #4]
 8005d9a:	3308      	adds	r3, #8
 8005d9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005d9e:	6013      	str	r3, [r2, #0]
 8005da0:	9801      	ldr	r0, [sp, #4]
 8005da2:	b013      	add	sp, #76	; 0x4c
 8005da4:	ecbd 8b04 	vpop	{d8-d9}
 8005da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dac:	4b8b      	ldr	r3, [pc, #556]	; (8005fdc <_dtoa_r+0x2dc>)
 8005dae:	9301      	str	r3, [sp, #4]
 8005db0:	3303      	adds	r3, #3
 8005db2:	e7f3      	b.n	8005d9c <_dtoa_r+0x9c>
 8005db4:	2200      	movs	r2, #0
 8005db6:	2300      	movs	r3, #0
 8005db8:	4650      	mov	r0, sl
 8005dba:	4659      	mov	r1, fp
 8005dbc:	f7fa fe8e 	bl	8000adc <__aeabi_dcmpeq>
 8005dc0:	ec4b ab19 	vmov	d9, sl, fp
 8005dc4:	4680      	mov	r8, r0
 8005dc6:	b158      	cbz	r0, 8005de0 <_dtoa_r+0xe0>
 8005dc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005dca:	2301      	movs	r3, #1
 8005dcc:	6013      	str	r3, [r2, #0]
 8005dce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 856b 	beq.w	80068ac <_dtoa_r+0xbac>
 8005dd6:	4883      	ldr	r0, [pc, #524]	; (8005fe4 <_dtoa_r+0x2e4>)
 8005dd8:	6018      	str	r0, [r3, #0]
 8005dda:	1e43      	subs	r3, r0, #1
 8005ddc:	9301      	str	r3, [sp, #4]
 8005dde:	e7df      	b.n	8005da0 <_dtoa_r+0xa0>
 8005de0:	ec4b ab10 	vmov	d0, sl, fp
 8005de4:	aa10      	add	r2, sp, #64	; 0x40
 8005de6:	a911      	add	r1, sp, #68	; 0x44
 8005de8:	4620      	mov	r0, r4
 8005dea:	f001 fabf 	bl	800736c <__d2b>
 8005dee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005df2:	ee08 0a10 	vmov	s16, r0
 8005df6:	2d00      	cmp	r5, #0
 8005df8:	f000 8084 	beq.w	8005f04 <_dtoa_r+0x204>
 8005dfc:	ee19 3a90 	vmov	r3, s19
 8005e00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e04:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005e08:	4656      	mov	r6, sl
 8005e0a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005e0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005e12:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005e16:	4b74      	ldr	r3, [pc, #464]	; (8005fe8 <_dtoa_r+0x2e8>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	4630      	mov	r0, r6
 8005e1c:	4639      	mov	r1, r7
 8005e1e:	f7fa fa3d 	bl	800029c <__aeabi_dsub>
 8005e22:	a365      	add	r3, pc, #404	; (adr r3, 8005fb8 <_dtoa_r+0x2b8>)
 8005e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e28:	f7fa fbf0 	bl	800060c <__aeabi_dmul>
 8005e2c:	a364      	add	r3, pc, #400	; (adr r3, 8005fc0 <_dtoa_r+0x2c0>)
 8005e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e32:	f7fa fa35 	bl	80002a0 <__adddf3>
 8005e36:	4606      	mov	r6, r0
 8005e38:	4628      	mov	r0, r5
 8005e3a:	460f      	mov	r7, r1
 8005e3c:	f7fa fb7c 	bl	8000538 <__aeabi_i2d>
 8005e40:	a361      	add	r3, pc, #388	; (adr r3, 8005fc8 <_dtoa_r+0x2c8>)
 8005e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e46:	f7fa fbe1 	bl	800060c <__aeabi_dmul>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	4630      	mov	r0, r6
 8005e50:	4639      	mov	r1, r7
 8005e52:	f7fa fa25 	bl	80002a0 <__adddf3>
 8005e56:	4606      	mov	r6, r0
 8005e58:	460f      	mov	r7, r1
 8005e5a:	f7fa fe87 	bl	8000b6c <__aeabi_d2iz>
 8005e5e:	2200      	movs	r2, #0
 8005e60:	9000      	str	r0, [sp, #0]
 8005e62:	2300      	movs	r3, #0
 8005e64:	4630      	mov	r0, r6
 8005e66:	4639      	mov	r1, r7
 8005e68:	f7fa fe42 	bl	8000af0 <__aeabi_dcmplt>
 8005e6c:	b150      	cbz	r0, 8005e84 <_dtoa_r+0x184>
 8005e6e:	9800      	ldr	r0, [sp, #0]
 8005e70:	f7fa fb62 	bl	8000538 <__aeabi_i2d>
 8005e74:	4632      	mov	r2, r6
 8005e76:	463b      	mov	r3, r7
 8005e78:	f7fa fe30 	bl	8000adc <__aeabi_dcmpeq>
 8005e7c:	b910      	cbnz	r0, 8005e84 <_dtoa_r+0x184>
 8005e7e:	9b00      	ldr	r3, [sp, #0]
 8005e80:	3b01      	subs	r3, #1
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	9b00      	ldr	r3, [sp, #0]
 8005e86:	2b16      	cmp	r3, #22
 8005e88:	d85a      	bhi.n	8005f40 <_dtoa_r+0x240>
 8005e8a:	9a00      	ldr	r2, [sp, #0]
 8005e8c:	4b57      	ldr	r3, [pc, #348]	; (8005fec <_dtoa_r+0x2ec>)
 8005e8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e96:	ec51 0b19 	vmov	r0, r1, d9
 8005e9a:	f7fa fe29 	bl	8000af0 <__aeabi_dcmplt>
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	d050      	beq.n	8005f44 <_dtoa_r+0x244>
 8005ea2:	9b00      	ldr	r3, [sp, #0]
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	930b      	str	r3, [sp, #44]	; 0x2c
 8005eac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005eae:	1b5d      	subs	r5, r3, r5
 8005eb0:	1e6b      	subs	r3, r5, #1
 8005eb2:	9305      	str	r3, [sp, #20]
 8005eb4:	bf45      	ittet	mi
 8005eb6:	f1c5 0301 	rsbmi	r3, r5, #1
 8005eba:	9304      	strmi	r3, [sp, #16]
 8005ebc:	2300      	movpl	r3, #0
 8005ebe:	2300      	movmi	r3, #0
 8005ec0:	bf4c      	ite	mi
 8005ec2:	9305      	strmi	r3, [sp, #20]
 8005ec4:	9304      	strpl	r3, [sp, #16]
 8005ec6:	9b00      	ldr	r3, [sp, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	db3d      	blt.n	8005f48 <_dtoa_r+0x248>
 8005ecc:	9b05      	ldr	r3, [sp, #20]
 8005ece:	9a00      	ldr	r2, [sp, #0]
 8005ed0:	920a      	str	r2, [sp, #40]	; 0x28
 8005ed2:	4413      	add	r3, r2
 8005ed4:	9305      	str	r3, [sp, #20]
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	9307      	str	r3, [sp, #28]
 8005eda:	9b06      	ldr	r3, [sp, #24]
 8005edc:	2b09      	cmp	r3, #9
 8005ede:	f200 8089 	bhi.w	8005ff4 <_dtoa_r+0x2f4>
 8005ee2:	2b05      	cmp	r3, #5
 8005ee4:	bfc4      	itt	gt
 8005ee6:	3b04      	subgt	r3, #4
 8005ee8:	9306      	strgt	r3, [sp, #24]
 8005eea:	9b06      	ldr	r3, [sp, #24]
 8005eec:	f1a3 0302 	sub.w	r3, r3, #2
 8005ef0:	bfcc      	ite	gt
 8005ef2:	2500      	movgt	r5, #0
 8005ef4:	2501      	movle	r5, #1
 8005ef6:	2b03      	cmp	r3, #3
 8005ef8:	f200 8087 	bhi.w	800600a <_dtoa_r+0x30a>
 8005efc:	e8df f003 	tbb	[pc, r3]
 8005f00:	59383a2d 	.word	0x59383a2d
 8005f04:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005f08:	441d      	add	r5, r3
 8005f0a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005f0e:	2b20      	cmp	r3, #32
 8005f10:	bfc1      	itttt	gt
 8005f12:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005f16:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005f1a:	fa0b f303 	lslgt.w	r3, fp, r3
 8005f1e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005f22:	bfda      	itte	le
 8005f24:	f1c3 0320 	rsble	r3, r3, #32
 8005f28:	fa06 f003 	lslle.w	r0, r6, r3
 8005f2c:	4318      	orrgt	r0, r3
 8005f2e:	f7fa faf3 	bl	8000518 <__aeabi_ui2d>
 8005f32:	2301      	movs	r3, #1
 8005f34:	4606      	mov	r6, r0
 8005f36:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005f3a:	3d01      	subs	r5, #1
 8005f3c:	930e      	str	r3, [sp, #56]	; 0x38
 8005f3e:	e76a      	b.n	8005e16 <_dtoa_r+0x116>
 8005f40:	2301      	movs	r3, #1
 8005f42:	e7b2      	b.n	8005eaa <_dtoa_r+0x1aa>
 8005f44:	900b      	str	r0, [sp, #44]	; 0x2c
 8005f46:	e7b1      	b.n	8005eac <_dtoa_r+0x1ac>
 8005f48:	9b04      	ldr	r3, [sp, #16]
 8005f4a:	9a00      	ldr	r2, [sp, #0]
 8005f4c:	1a9b      	subs	r3, r3, r2
 8005f4e:	9304      	str	r3, [sp, #16]
 8005f50:	4253      	negs	r3, r2
 8005f52:	9307      	str	r3, [sp, #28]
 8005f54:	2300      	movs	r3, #0
 8005f56:	930a      	str	r3, [sp, #40]	; 0x28
 8005f58:	e7bf      	b.n	8005eda <_dtoa_r+0x1da>
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	9308      	str	r3, [sp, #32]
 8005f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	dc55      	bgt.n	8006010 <_dtoa_r+0x310>
 8005f64:	2301      	movs	r3, #1
 8005f66:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	9209      	str	r2, [sp, #36]	; 0x24
 8005f6e:	e00c      	b.n	8005f8a <_dtoa_r+0x28a>
 8005f70:	2301      	movs	r3, #1
 8005f72:	e7f3      	b.n	8005f5c <_dtoa_r+0x25c>
 8005f74:	2300      	movs	r3, #0
 8005f76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f78:	9308      	str	r3, [sp, #32]
 8005f7a:	9b00      	ldr	r3, [sp, #0]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	9302      	str	r3, [sp, #8]
 8005f80:	3301      	adds	r3, #1
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	9303      	str	r3, [sp, #12]
 8005f86:	bfb8      	it	lt
 8005f88:	2301      	movlt	r3, #1
 8005f8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	6042      	str	r2, [r0, #4]
 8005f90:	2204      	movs	r2, #4
 8005f92:	f102 0614 	add.w	r6, r2, #20
 8005f96:	429e      	cmp	r6, r3
 8005f98:	6841      	ldr	r1, [r0, #4]
 8005f9a:	d93d      	bls.n	8006018 <_dtoa_r+0x318>
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	f000 febd 	bl	8006d1c <_Balloc>
 8005fa2:	9001      	str	r0, [sp, #4]
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	d13b      	bne.n	8006020 <_dtoa_r+0x320>
 8005fa8:	4b11      	ldr	r3, [pc, #68]	; (8005ff0 <_dtoa_r+0x2f0>)
 8005faa:	4602      	mov	r2, r0
 8005fac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005fb0:	e6c0      	b.n	8005d34 <_dtoa_r+0x34>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e7df      	b.n	8005f76 <_dtoa_r+0x276>
 8005fb6:	bf00      	nop
 8005fb8:	636f4361 	.word	0x636f4361
 8005fbc:	3fd287a7 	.word	0x3fd287a7
 8005fc0:	8b60c8b3 	.word	0x8b60c8b3
 8005fc4:	3fc68a28 	.word	0x3fc68a28
 8005fc8:	509f79fb 	.word	0x509f79fb
 8005fcc:	3fd34413 	.word	0x3fd34413
 8005fd0:	08008c08 	.word	0x08008c08
 8005fd4:	08008ea8 	.word	0x08008ea8
 8005fd8:	7ff00000 	.word	0x7ff00000
 8005fdc:	08008ea4 	.word	0x08008ea4
 8005fe0:	08008e9b 	.word	0x08008e9b
 8005fe4:	080091ed 	.word	0x080091ed
 8005fe8:	3ff80000 	.word	0x3ff80000
 8005fec:	08008ff8 	.word	0x08008ff8
 8005ff0:	08008f03 	.word	0x08008f03
 8005ff4:	2501      	movs	r5, #1
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	9306      	str	r3, [sp, #24]
 8005ffa:	9508      	str	r5, [sp, #32]
 8005ffc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006000:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006004:	2200      	movs	r2, #0
 8006006:	2312      	movs	r3, #18
 8006008:	e7b0      	b.n	8005f6c <_dtoa_r+0x26c>
 800600a:	2301      	movs	r3, #1
 800600c:	9308      	str	r3, [sp, #32]
 800600e:	e7f5      	b.n	8005ffc <_dtoa_r+0x2fc>
 8006010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006012:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006016:	e7b8      	b.n	8005f8a <_dtoa_r+0x28a>
 8006018:	3101      	adds	r1, #1
 800601a:	6041      	str	r1, [r0, #4]
 800601c:	0052      	lsls	r2, r2, #1
 800601e:	e7b8      	b.n	8005f92 <_dtoa_r+0x292>
 8006020:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006022:	9a01      	ldr	r2, [sp, #4]
 8006024:	601a      	str	r2, [r3, #0]
 8006026:	9b03      	ldr	r3, [sp, #12]
 8006028:	2b0e      	cmp	r3, #14
 800602a:	f200 809d 	bhi.w	8006168 <_dtoa_r+0x468>
 800602e:	2d00      	cmp	r5, #0
 8006030:	f000 809a 	beq.w	8006168 <_dtoa_r+0x468>
 8006034:	9b00      	ldr	r3, [sp, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	dd32      	ble.n	80060a0 <_dtoa_r+0x3a0>
 800603a:	4ab7      	ldr	r2, [pc, #732]	; (8006318 <_dtoa_r+0x618>)
 800603c:	f003 030f 	and.w	r3, r3, #15
 8006040:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006044:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006048:	9b00      	ldr	r3, [sp, #0]
 800604a:	05d8      	lsls	r0, r3, #23
 800604c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006050:	d516      	bpl.n	8006080 <_dtoa_r+0x380>
 8006052:	4bb2      	ldr	r3, [pc, #712]	; (800631c <_dtoa_r+0x61c>)
 8006054:	ec51 0b19 	vmov	r0, r1, d9
 8006058:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800605c:	f7fa fc00 	bl	8000860 <__aeabi_ddiv>
 8006060:	f007 070f 	and.w	r7, r7, #15
 8006064:	4682      	mov	sl, r0
 8006066:	468b      	mov	fp, r1
 8006068:	2503      	movs	r5, #3
 800606a:	4eac      	ldr	r6, [pc, #688]	; (800631c <_dtoa_r+0x61c>)
 800606c:	b957      	cbnz	r7, 8006084 <_dtoa_r+0x384>
 800606e:	4642      	mov	r2, r8
 8006070:	464b      	mov	r3, r9
 8006072:	4650      	mov	r0, sl
 8006074:	4659      	mov	r1, fp
 8006076:	f7fa fbf3 	bl	8000860 <__aeabi_ddiv>
 800607a:	4682      	mov	sl, r0
 800607c:	468b      	mov	fp, r1
 800607e:	e028      	b.n	80060d2 <_dtoa_r+0x3d2>
 8006080:	2502      	movs	r5, #2
 8006082:	e7f2      	b.n	800606a <_dtoa_r+0x36a>
 8006084:	07f9      	lsls	r1, r7, #31
 8006086:	d508      	bpl.n	800609a <_dtoa_r+0x39a>
 8006088:	4640      	mov	r0, r8
 800608a:	4649      	mov	r1, r9
 800608c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006090:	f7fa fabc 	bl	800060c <__aeabi_dmul>
 8006094:	3501      	adds	r5, #1
 8006096:	4680      	mov	r8, r0
 8006098:	4689      	mov	r9, r1
 800609a:	107f      	asrs	r7, r7, #1
 800609c:	3608      	adds	r6, #8
 800609e:	e7e5      	b.n	800606c <_dtoa_r+0x36c>
 80060a0:	f000 809b 	beq.w	80061da <_dtoa_r+0x4da>
 80060a4:	9b00      	ldr	r3, [sp, #0]
 80060a6:	4f9d      	ldr	r7, [pc, #628]	; (800631c <_dtoa_r+0x61c>)
 80060a8:	425e      	negs	r6, r3
 80060aa:	4b9b      	ldr	r3, [pc, #620]	; (8006318 <_dtoa_r+0x618>)
 80060ac:	f006 020f 	and.w	r2, r6, #15
 80060b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b8:	ec51 0b19 	vmov	r0, r1, d9
 80060bc:	f7fa faa6 	bl	800060c <__aeabi_dmul>
 80060c0:	1136      	asrs	r6, r6, #4
 80060c2:	4682      	mov	sl, r0
 80060c4:	468b      	mov	fp, r1
 80060c6:	2300      	movs	r3, #0
 80060c8:	2502      	movs	r5, #2
 80060ca:	2e00      	cmp	r6, #0
 80060cc:	d17a      	bne.n	80061c4 <_dtoa_r+0x4c4>
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1d3      	bne.n	800607a <_dtoa_r+0x37a>
 80060d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f000 8082 	beq.w	80061de <_dtoa_r+0x4de>
 80060da:	4b91      	ldr	r3, [pc, #580]	; (8006320 <_dtoa_r+0x620>)
 80060dc:	2200      	movs	r2, #0
 80060de:	4650      	mov	r0, sl
 80060e0:	4659      	mov	r1, fp
 80060e2:	f7fa fd05 	bl	8000af0 <__aeabi_dcmplt>
 80060e6:	2800      	cmp	r0, #0
 80060e8:	d079      	beq.n	80061de <_dtoa_r+0x4de>
 80060ea:	9b03      	ldr	r3, [sp, #12]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d076      	beq.n	80061de <_dtoa_r+0x4de>
 80060f0:	9b02      	ldr	r3, [sp, #8]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	dd36      	ble.n	8006164 <_dtoa_r+0x464>
 80060f6:	9b00      	ldr	r3, [sp, #0]
 80060f8:	4650      	mov	r0, sl
 80060fa:	4659      	mov	r1, fp
 80060fc:	1e5f      	subs	r7, r3, #1
 80060fe:	2200      	movs	r2, #0
 8006100:	4b88      	ldr	r3, [pc, #544]	; (8006324 <_dtoa_r+0x624>)
 8006102:	f7fa fa83 	bl	800060c <__aeabi_dmul>
 8006106:	9e02      	ldr	r6, [sp, #8]
 8006108:	4682      	mov	sl, r0
 800610a:	468b      	mov	fp, r1
 800610c:	3501      	adds	r5, #1
 800610e:	4628      	mov	r0, r5
 8006110:	f7fa fa12 	bl	8000538 <__aeabi_i2d>
 8006114:	4652      	mov	r2, sl
 8006116:	465b      	mov	r3, fp
 8006118:	f7fa fa78 	bl	800060c <__aeabi_dmul>
 800611c:	4b82      	ldr	r3, [pc, #520]	; (8006328 <_dtoa_r+0x628>)
 800611e:	2200      	movs	r2, #0
 8006120:	f7fa f8be 	bl	80002a0 <__adddf3>
 8006124:	46d0      	mov	r8, sl
 8006126:	46d9      	mov	r9, fp
 8006128:	4682      	mov	sl, r0
 800612a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800612e:	2e00      	cmp	r6, #0
 8006130:	d158      	bne.n	80061e4 <_dtoa_r+0x4e4>
 8006132:	4b7e      	ldr	r3, [pc, #504]	; (800632c <_dtoa_r+0x62c>)
 8006134:	2200      	movs	r2, #0
 8006136:	4640      	mov	r0, r8
 8006138:	4649      	mov	r1, r9
 800613a:	f7fa f8af 	bl	800029c <__aeabi_dsub>
 800613e:	4652      	mov	r2, sl
 8006140:	465b      	mov	r3, fp
 8006142:	4680      	mov	r8, r0
 8006144:	4689      	mov	r9, r1
 8006146:	f7fa fcf1 	bl	8000b2c <__aeabi_dcmpgt>
 800614a:	2800      	cmp	r0, #0
 800614c:	f040 8295 	bne.w	800667a <_dtoa_r+0x97a>
 8006150:	4652      	mov	r2, sl
 8006152:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006156:	4640      	mov	r0, r8
 8006158:	4649      	mov	r1, r9
 800615a:	f7fa fcc9 	bl	8000af0 <__aeabi_dcmplt>
 800615e:	2800      	cmp	r0, #0
 8006160:	f040 8289 	bne.w	8006676 <_dtoa_r+0x976>
 8006164:	ec5b ab19 	vmov	sl, fp, d9
 8006168:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800616a:	2b00      	cmp	r3, #0
 800616c:	f2c0 8148 	blt.w	8006400 <_dtoa_r+0x700>
 8006170:	9a00      	ldr	r2, [sp, #0]
 8006172:	2a0e      	cmp	r2, #14
 8006174:	f300 8144 	bgt.w	8006400 <_dtoa_r+0x700>
 8006178:	4b67      	ldr	r3, [pc, #412]	; (8006318 <_dtoa_r+0x618>)
 800617a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800617e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006184:	2b00      	cmp	r3, #0
 8006186:	f280 80d5 	bge.w	8006334 <_dtoa_r+0x634>
 800618a:	9b03      	ldr	r3, [sp, #12]
 800618c:	2b00      	cmp	r3, #0
 800618e:	f300 80d1 	bgt.w	8006334 <_dtoa_r+0x634>
 8006192:	f040 826f 	bne.w	8006674 <_dtoa_r+0x974>
 8006196:	4b65      	ldr	r3, [pc, #404]	; (800632c <_dtoa_r+0x62c>)
 8006198:	2200      	movs	r2, #0
 800619a:	4640      	mov	r0, r8
 800619c:	4649      	mov	r1, r9
 800619e:	f7fa fa35 	bl	800060c <__aeabi_dmul>
 80061a2:	4652      	mov	r2, sl
 80061a4:	465b      	mov	r3, fp
 80061a6:	f7fa fcb7 	bl	8000b18 <__aeabi_dcmpge>
 80061aa:	9e03      	ldr	r6, [sp, #12]
 80061ac:	4637      	mov	r7, r6
 80061ae:	2800      	cmp	r0, #0
 80061b0:	f040 8245 	bne.w	800663e <_dtoa_r+0x93e>
 80061b4:	9d01      	ldr	r5, [sp, #4]
 80061b6:	2331      	movs	r3, #49	; 0x31
 80061b8:	f805 3b01 	strb.w	r3, [r5], #1
 80061bc:	9b00      	ldr	r3, [sp, #0]
 80061be:	3301      	adds	r3, #1
 80061c0:	9300      	str	r3, [sp, #0]
 80061c2:	e240      	b.n	8006646 <_dtoa_r+0x946>
 80061c4:	07f2      	lsls	r2, r6, #31
 80061c6:	d505      	bpl.n	80061d4 <_dtoa_r+0x4d4>
 80061c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061cc:	f7fa fa1e 	bl	800060c <__aeabi_dmul>
 80061d0:	3501      	adds	r5, #1
 80061d2:	2301      	movs	r3, #1
 80061d4:	1076      	asrs	r6, r6, #1
 80061d6:	3708      	adds	r7, #8
 80061d8:	e777      	b.n	80060ca <_dtoa_r+0x3ca>
 80061da:	2502      	movs	r5, #2
 80061dc:	e779      	b.n	80060d2 <_dtoa_r+0x3d2>
 80061de:	9f00      	ldr	r7, [sp, #0]
 80061e0:	9e03      	ldr	r6, [sp, #12]
 80061e2:	e794      	b.n	800610e <_dtoa_r+0x40e>
 80061e4:	9901      	ldr	r1, [sp, #4]
 80061e6:	4b4c      	ldr	r3, [pc, #304]	; (8006318 <_dtoa_r+0x618>)
 80061e8:	4431      	add	r1, r6
 80061ea:	910d      	str	r1, [sp, #52]	; 0x34
 80061ec:	9908      	ldr	r1, [sp, #32]
 80061ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80061f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80061f6:	2900      	cmp	r1, #0
 80061f8:	d043      	beq.n	8006282 <_dtoa_r+0x582>
 80061fa:	494d      	ldr	r1, [pc, #308]	; (8006330 <_dtoa_r+0x630>)
 80061fc:	2000      	movs	r0, #0
 80061fe:	f7fa fb2f 	bl	8000860 <__aeabi_ddiv>
 8006202:	4652      	mov	r2, sl
 8006204:	465b      	mov	r3, fp
 8006206:	f7fa f849 	bl	800029c <__aeabi_dsub>
 800620a:	9d01      	ldr	r5, [sp, #4]
 800620c:	4682      	mov	sl, r0
 800620e:	468b      	mov	fp, r1
 8006210:	4649      	mov	r1, r9
 8006212:	4640      	mov	r0, r8
 8006214:	f7fa fcaa 	bl	8000b6c <__aeabi_d2iz>
 8006218:	4606      	mov	r6, r0
 800621a:	f7fa f98d 	bl	8000538 <__aeabi_i2d>
 800621e:	4602      	mov	r2, r0
 8006220:	460b      	mov	r3, r1
 8006222:	4640      	mov	r0, r8
 8006224:	4649      	mov	r1, r9
 8006226:	f7fa f839 	bl	800029c <__aeabi_dsub>
 800622a:	3630      	adds	r6, #48	; 0x30
 800622c:	f805 6b01 	strb.w	r6, [r5], #1
 8006230:	4652      	mov	r2, sl
 8006232:	465b      	mov	r3, fp
 8006234:	4680      	mov	r8, r0
 8006236:	4689      	mov	r9, r1
 8006238:	f7fa fc5a 	bl	8000af0 <__aeabi_dcmplt>
 800623c:	2800      	cmp	r0, #0
 800623e:	d163      	bne.n	8006308 <_dtoa_r+0x608>
 8006240:	4642      	mov	r2, r8
 8006242:	464b      	mov	r3, r9
 8006244:	4936      	ldr	r1, [pc, #216]	; (8006320 <_dtoa_r+0x620>)
 8006246:	2000      	movs	r0, #0
 8006248:	f7fa f828 	bl	800029c <__aeabi_dsub>
 800624c:	4652      	mov	r2, sl
 800624e:	465b      	mov	r3, fp
 8006250:	f7fa fc4e 	bl	8000af0 <__aeabi_dcmplt>
 8006254:	2800      	cmp	r0, #0
 8006256:	f040 80b5 	bne.w	80063c4 <_dtoa_r+0x6c4>
 800625a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800625c:	429d      	cmp	r5, r3
 800625e:	d081      	beq.n	8006164 <_dtoa_r+0x464>
 8006260:	4b30      	ldr	r3, [pc, #192]	; (8006324 <_dtoa_r+0x624>)
 8006262:	2200      	movs	r2, #0
 8006264:	4650      	mov	r0, sl
 8006266:	4659      	mov	r1, fp
 8006268:	f7fa f9d0 	bl	800060c <__aeabi_dmul>
 800626c:	4b2d      	ldr	r3, [pc, #180]	; (8006324 <_dtoa_r+0x624>)
 800626e:	4682      	mov	sl, r0
 8006270:	468b      	mov	fp, r1
 8006272:	4640      	mov	r0, r8
 8006274:	4649      	mov	r1, r9
 8006276:	2200      	movs	r2, #0
 8006278:	f7fa f9c8 	bl	800060c <__aeabi_dmul>
 800627c:	4680      	mov	r8, r0
 800627e:	4689      	mov	r9, r1
 8006280:	e7c6      	b.n	8006210 <_dtoa_r+0x510>
 8006282:	4650      	mov	r0, sl
 8006284:	4659      	mov	r1, fp
 8006286:	f7fa f9c1 	bl	800060c <__aeabi_dmul>
 800628a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800628c:	9d01      	ldr	r5, [sp, #4]
 800628e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006290:	4682      	mov	sl, r0
 8006292:	468b      	mov	fp, r1
 8006294:	4649      	mov	r1, r9
 8006296:	4640      	mov	r0, r8
 8006298:	f7fa fc68 	bl	8000b6c <__aeabi_d2iz>
 800629c:	4606      	mov	r6, r0
 800629e:	f7fa f94b 	bl	8000538 <__aeabi_i2d>
 80062a2:	3630      	adds	r6, #48	; 0x30
 80062a4:	4602      	mov	r2, r0
 80062a6:	460b      	mov	r3, r1
 80062a8:	4640      	mov	r0, r8
 80062aa:	4649      	mov	r1, r9
 80062ac:	f7f9 fff6 	bl	800029c <__aeabi_dsub>
 80062b0:	f805 6b01 	strb.w	r6, [r5], #1
 80062b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062b6:	429d      	cmp	r5, r3
 80062b8:	4680      	mov	r8, r0
 80062ba:	4689      	mov	r9, r1
 80062bc:	f04f 0200 	mov.w	r2, #0
 80062c0:	d124      	bne.n	800630c <_dtoa_r+0x60c>
 80062c2:	4b1b      	ldr	r3, [pc, #108]	; (8006330 <_dtoa_r+0x630>)
 80062c4:	4650      	mov	r0, sl
 80062c6:	4659      	mov	r1, fp
 80062c8:	f7f9 ffea 	bl	80002a0 <__adddf3>
 80062cc:	4602      	mov	r2, r0
 80062ce:	460b      	mov	r3, r1
 80062d0:	4640      	mov	r0, r8
 80062d2:	4649      	mov	r1, r9
 80062d4:	f7fa fc2a 	bl	8000b2c <__aeabi_dcmpgt>
 80062d8:	2800      	cmp	r0, #0
 80062da:	d173      	bne.n	80063c4 <_dtoa_r+0x6c4>
 80062dc:	4652      	mov	r2, sl
 80062de:	465b      	mov	r3, fp
 80062e0:	4913      	ldr	r1, [pc, #76]	; (8006330 <_dtoa_r+0x630>)
 80062e2:	2000      	movs	r0, #0
 80062e4:	f7f9 ffda 	bl	800029c <__aeabi_dsub>
 80062e8:	4602      	mov	r2, r0
 80062ea:	460b      	mov	r3, r1
 80062ec:	4640      	mov	r0, r8
 80062ee:	4649      	mov	r1, r9
 80062f0:	f7fa fbfe 	bl	8000af0 <__aeabi_dcmplt>
 80062f4:	2800      	cmp	r0, #0
 80062f6:	f43f af35 	beq.w	8006164 <_dtoa_r+0x464>
 80062fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80062fc:	1e6b      	subs	r3, r5, #1
 80062fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8006300:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006304:	2b30      	cmp	r3, #48	; 0x30
 8006306:	d0f8      	beq.n	80062fa <_dtoa_r+0x5fa>
 8006308:	9700      	str	r7, [sp, #0]
 800630a:	e049      	b.n	80063a0 <_dtoa_r+0x6a0>
 800630c:	4b05      	ldr	r3, [pc, #20]	; (8006324 <_dtoa_r+0x624>)
 800630e:	f7fa f97d 	bl	800060c <__aeabi_dmul>
 8006312:	4680      	mov	r8, r0
 8006314:	4689      	mov	r9, r1
 8006316:	e7bd      	b.n	8006294 <_dtoa_r+0x594>
 8006318:	08008ff8 	.word	0x08008ff8
 800631c:	08008fd0 	.word	0x08008fd0
 8006320:	3ff00000 	.word	0x3ff00000
 8006324:	40240000 	.word	0x40240000
 8006328:	401c0000 	.word	0x401c0000
 800632c:	40140000 	.word	0x40140000
 8006330:	3fe00000 	.word	0x3fe00000
 8006334:	9d01      	ldr	r5, [sp, #4]
 8006336:	4656      	mov	r6, sl
 8006338:	465f      	mov	r7, fp
 800633a:	4642      	mov	r2, r8
 800633c:	464b      	mov	r3, r9
 800633e:	4630      	mov	r0, r6
 8006340:	4639      	mov	r1, r7
 8006342:	f7fa fa8d 	bl	8000860 <__aeabi_ddiv>
 8006346:	f7fa fc11 	bl	8000b6c <__aeabi_d2iz>
 800634a:	4682      	mov	sl, r0
 800634c:	f7fa f8f4 	bl	8000538 <__aeabi_i2d>
 8006350:	4642      	mov	r2, r8
 8006352:	464b      	mov	r3, r9
 8006354:	f7fa f95a 	bl	800060c <__aeabi_dmul>
 8006358:	4602      	mov	r2, r0
 800635a:	460b      	mov	r3, r1
 800635c:	4630      	mov	r0, r6
 800635e:	4639      	mov	r1, r7
 8006360:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006364:	f7f9 ff9a 	bl	800029c <__aeabi_dsub>
 8006368:	f805 6b01 	strb.w	r6, [r5], #1
 800636c:	9e01      	ldr	r6, [sp, #4]
 800636e:	9f03      	ldr	r7, [sp, #12]
 8006370:	1bae      	subs	r6, r5, r6
 8006372:	42b7      	cmp	r7, r6
 8006374:	4602      	mov	r2, r0
 8006376:	460b      	mov	r3, r1
 8006378:	d135      	bne.n	80063e6 <_dtoa_r+0x6e6>
 800637a:	f7f9 ff91 	bl	80002a0 <__adddf3>
 800637e:	4642      	mov	r2, r8
 8006380:	464b      	mov	r3, r9
 8006382:	4606      	mov	r6, r0
 8006384:	460f      	mov	r7, r1
 8006386:	f7fa fbd1 	bl	8000b2c <__aeabi_dcmpgt>
 800638a:	b9d0      	cbnz	r0, 80063c2 <_dtoa_r+0x6c2>
 800638c:	4642      	mov	r2, r8
 800638e:	464b      	mov	r3, r9
 8006390:	4630      	mov	r0, r6
 8006392:	4639      	mov	r1, r7
 8006394:	f7fa fba2 	bl	8000adc <__aeabi_dcmpeq>
 8006398:	b110      	cbz	r0, 80063a0 <_dtoa_r+0x6a0>
 800639a:	f01a 0f01 	tst.w	sl, #1
 800639e:	d110      	bne.n	80063c2 <_dtoa_r+0x6c2>
 80063a0:	4620      	mov	r0, r4
 80063a2:	ee18 1a10 	vmov	r1, s16
 80063a6:	f000 fcf9 	bl	8006d9c <_Bfree>
 80063aa:	2300      	movs	r3, #0
 80063ac:	9800      	ldr	r0, [sp, #0]
 80063ae:	702b      	strb	r3, [r5, #0]
 80063b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063b2:	3001      	adds	r0, #1
 80063b4:	6018      	str	r0, [r3, #0]
 80063b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f43f acf1 	beq.w	8005da0 <_dtoa_r+0xa0>
 80063be:	601d      	str	r5, [r3, #0]
 80063c0:	e4ee      	b.n	8005da0 <_dtoa_r+0xa0>
 80063c2:	9f00      	ldr	r7, [sp, #0]
 80063c4:	462b      	mov	r3, r5
 80063c6:	461d      	mov	r5, r3
 80063c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063cc:	2a39      	cmp	r2, #57	; 0x39
 80063ce:	d106      	bne.n	80063de <_dtoa_r+0x6de>
 80063d0:	9a01      	ldr	r2, [sp, #4]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d1f7      	bne.n	80063c6 <_dtoa_r+0x6c6>
 80063d6:	9901      	ldr	r1, [sp, #4]
 80063d8:	2230      	movs	r2, #48	; 0x30
 80063da:	3701      	adds	r7, #1
 80063dc:	700a      	strb	r2, [r1, #0]
 80063de:	781a      	ldrb	r2, [r3, #0]
 80063e0:	3201      	adds	r2, #1
 80063e2:	701a      	strb	r2, [r3, #0]
 80063e4:	e790      	b.n	8006308 <_dtoa_r+0x608>
 80063e6:	4ba6      	ldr	r3, [pc, #664]	; (8006680 <_dtoa_r+0x980>)
 80063e8:	2200      	movs	r2, #0
 80063ea:	f7fa f90f 	bl	800060c <__aeabi_dmul>
 80063ee:	2200      	movs	r2, #0
 80063f0:	2300      	movs	r3, #0
 80063f2:	4606      	mov	r6, r0
 80063f4:	460f      	mov	r7, r1
 80063f6:	f7fa fb71 	bl	8000adc <__aeabi_dcmpeq>
 80063fa:	2800      	cmp	r0, #0
 80063fc:	d09d      	beq.n	800633a <_dtoa_r+0x63a>
 80063fe:	e7cf      	b.n	80063a0 <_dtoa_r+0x6a0>
 8006400:	9a08      	ldr	r2, [sp, #32]
 8006402:	2a00      	cmp	r2, #0
 8006404:	f000 80d7 	beq.w	80065b6 <_dtoa_r+0x8b6>
 8006408:	9a06      	ldr	r2, [sp, #24]
 800640a:	2a01      	cmp	r2, #1
 800640c:	f300 80ba 	bgt.w	8006584 <_dtoa_r+0x884>
 8006410:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006412:	2a00      	cmp	r2, #0
 8006414:	f000 80b2 	beq.w	800657c <_dtoa_r+0x87c>
 8006418:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800641c:	9e07      	ldr	r6, [sp, #28]
 800641e:	9d04      	ldr	r5, [sp, #16]
 8006420:	9a04      	ldr	r2, [sp, #16]
 8006422:	441a      	add	r2, r3
 8006424:	9204      	str	r2, [sp, #16]
 8006426:	9a05      	ldr	r2, [sp, #20]
 8006428:	2101      	movs	r1, #1
 800642a:	441a      	add	r2, r3
 800642c:	4620      	mov	r0, r4
 800642e:	9205      	str	r2, [sp, #20]
 8006430:	f000 fd6c 	bl	8006f0c <__i2b>
 8006434:	4607      	mov	r7, r0
 8006436:	2d00      	cmp	r5, #0
 8006438:	dd0c      	ble.n	8006454 <_dtoa_r+0x754>
 800643a:	9b05      	ldr	r3, [sp, #20]
 800643c:	2b00      	cmp	r3, #0
 800643e:	dd09      	ble.n	8006454 <_dtoa_r+0x754>
 8006440:	42ab      	cmp	r3, r5
 8006442:	9a04      	ldr	r2, [sp, #16]
 8006444:	bfa8      	it	ge
 8006446:	462b      	movge	r3, r5
 8006448:	1ad2      	subs	r2, r2, r3
 800644a:	9204      	str	r2, [sp, #16]
 800644c:	9a05      	ldr	r2, [sp, #20]
 800644e:	1aed      	subs	r5, r5, r3
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	9305      	str	r3, [sp, #20]
 8006454:	9b07      	ldr	r3, [sp, #28]
 8006456:	b31b      	cbz	r3, 80064a0 <_dtoa_r+0x7a0>
 8006458:	9b08      	ldr	r3, [sp, #32]
 800645a:	2b00      	cmp	r3, #0
 800645c:	f000 80af 	beq.w	80065be <_dtoa_r+0x8be>
 8006460:	2e00      	cmp	r6, #0
 8006462:	dd13      	ble.n	800648c <_dtoa_r+0x78c>
 8006464:	4639      	mov	r1, r7
 8006466:	4632      	mov	r2, r6
 8006468:	4620      	mov	r0, r4
 800646a:	f000 fe0f 	bl	800708c <__pow5mult>
 800646e:	ee18 2a10 	vmov	r2, s16
 8006472:	4601      	mov	r1, r0
 8006474:	4607      	mov	r7, r0
 8006476:	4620      	mov	r0, r4
 8006478:	f000 fd5e 	bl	8006f38 <__multiply>
 800647c:	ee18 1a10 	vmov	r1, s16
 8006480:	4680      	mov	r8, r0
 8006482:	4620      	mov	r0, r4
 8006484:	f000 fc8a 	bl	8006d9c <_Bfree>
 8006488:	ee08 8a10 	vmov	s16, r8
 800648c:	9b07      	ldr	r3, [sp, #28]
 800648e:	1b9a      	subs	r2, r3, r6
 8006490:	d006      	beq.n	80064a0 <_dtoa_r+0x7a0>
 8006492:	ee18 1a10 	vmov	r1, s16
 8006496:	4620      	mov	r0, r4
 8006498:	f000 fdf8 	bl	800708c <__pow5mult>
 800649c:	ee08 0a10 	vmov	s16, r0
 80064a0:	2101      	movs	r1, #1
 80064a2:	4620      	mov	r0, r4
 80064a4:	f000 fd32 	bl	8006f0c <__i2b>
 80064a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	4606      	mov	r6, r0
 80064ae:	f340 8088 	ble.w	80065c2 <_dtoa_r+0x8c2>
 80064b2:	461a      	mov	r2, r3
 80064b4:	4601      	mov	r1, r0
 80064b6:	4620      	mov	r0, r4
 80064b8:	f000 fde8 	bl	800708c <__pow5mult>
 80064bc:	9b06      	ldr	r3, [sp, #24]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	4606      	mov	r6, r0
 80064c2:	f340 8081 	ble.w	80065c8 <_dtoa_r+0x8c8>
 80064c6:	f04f 0800 	mov.w	r8, #0
 80064ca:	6933      	ldr	r3, [r6, #16]
 80064cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80064d0:	6918      	ldr	r0, [r3, #16]
 80064d2:	f000 fccb 	bl	8006e6c <__hi0bits>
 80064d6:	f1c0 0020 	rsb	r0, r0, #32
 80064da:	9b05      	ldr	r3, [sp, #20]
 80064dc:	4418      	add	r0, r3
 80064de:	f010 001f 	ands.w	r0, r0, #31
 80064e2:	f000 8092 	beq.w	800660a <_dtoa_r+0x90a>
 80064e6:	f1c0 0320 	rsb	r3, r0, #32
 80064ea:	2b04      	cmp	r3, #4
 80064ec:	f340 808a 	ble.w	8006604 <_dtoa_r+0x904>
 80064f0:	f1c0 001c 	rsb	r0, r0, #28
 80064f4:	9b04      	ldr	r3, [sp, #16]
 80064f6:	4403      	add	r3, r0
 80064f8:	9304      	str	r3, [sp, #16]
 80064fa:	9b05      	ldr	r3, [sp, #20]
 80064fc:	4403      	add	r3, r0
 80064fe:	4405      	add	r5, r0
 8006500:	9305      	str	r3, [sp, #20]
 8006502:	9b04      	ldr	r3, [sp, #16]
 8006504:	2b00      	cmp	r3, #0
 8006506:	dd07      	ble.n	8006518 <_dtoa_r+0x818>
 8006508:	ee18 1a10 	vmov	r1, s16
 800650c:	461a      	mov	r2, r3
 800650e:	4620      	mov	r0, r4
 8006510:	f000 fe16 	bl	8007140 <__lshift>
 8006514:	ee08 0a10 	vmov	s16, r0
 8006518:	9b05      	ldr	r3, [sp, #20]
 800651a:	2b00      	cmp	r3, #0
 800651c:	dd05      	ble.n	800652a <_dtoa_r+0x82a>
 800651e:	4631      	mov	r1, r6
 8006520:	461a      	mov	r2, r3
 8006522:	4620      	mov	r0, r4
 8006524:	f000 fe0c 	bl	8007140 <__lshift>
 8006528:	4606      	mov	r6, r0
 800652a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800652c:	2b00      	cmp	r3, #0
 800652e:	d06e      	beq.n	800660e <_dtoa_r+0x90e>
 8006530:	ee18 0a10 	vmov	r0, s16
 8006534:	4631      	mov	r1, r6
 8006536:	f000 fe73 	bl	8007220 <__mcmp>
 800653a:	2800      	cmp	r0, #0
 800653c:	da67      	bge.n	800660e <_dtoa_r+0x90e>
 800653e:	9b00      	ldr	r3, [sp, #0]
 8006540:	3b01      	subs	r3, #1
 8006542:	ee18 1a10 	vmov	r1, s16
 8006546:	9300      	str	r3, [sp, #0]
 8006548:	220a      	movs	r2, #10
 800654a:	2300      	movs	r3, #0
 800654c:	4620      	mov	r0, r4
 800654e:	f000 fc47 	bl	8006de0 <__multadd>
 8006552:	9b08      	ldr	r3, [sp, #32]
 8006554:	ee08 0a10 	vmov	s16, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 81b1 	beq.w	80068c0 <_dtoa_r+0xbc0>
 800655e:	2300      	movs	r3, #0
 8006560:	4639      	mov	r1, r7
 8006562:	220a      	movs	r2, #10
 8006564:	4620      	mov	r0, r4
 8006566:	f000 fc3b 	bl	8006de0 <__multadd>
 800656a:	9b02      	ldr	r3, [sp, #8]
 800656c:	2b00      	cmp	r3, #0
 800656e:	4607      	mov	r7, r0
 8006570:	f300 808e 	bgt.w	8006690 <_dtoa_r+0x990>
 8006574:	9b06      	ldr	r3, [sp, #24]
 8006576:	2b02      	cmp	r3, #2
 8006578:	dc51      	bgt.n	800661e <_dtoa_r+0x91e>
 800657a:	e089      	b.n	8006690 <_dtoa_r+0x990>
 800657c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800657e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006582:	e74b      	b.n	800641c <_dtoa_r+0x71c>
 8006584:	9b03      	ldr	r3, [sp, #12]
 8006586:	1e5e      	subs	r6, r3, #1
 8006588:	9b07      	ldr	r3, [sp, #28]
 800658a:	42b3      	cmp	r3, r6
 800658c:	bfbf      	itttt	lt
 800658e:	9b07      	ldrlt	r3, [sp, #28]
 8006590:	9607      	strlt	r6, [sp, #28]
 8006592:	1af2      	sublt	r2, r6, r3
 8006594:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006596:	bfb6      	itet	lt
 8006598:	189b      	addlt	r3, r3, r2
 800659a:	1b9e      	subge	r6, r3, r6
 800659c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800659e:	9b03      	ldr	r3, [sp, #12]
 80065a0:	bfb8      	it	lt
 80065a2:	2600      	movlt	r6, #0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	bfb7      	itett	lt
 80065a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80065ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80065b0:	1a9d      	sublt	r5, r3, r2
 80065b2:	2300      	movlt	r3, #0
 80065b4:	e734      	b.n	8006420 <_dtoa_r+0x720>
 80065b6:	9e07      	ldr	r6, [sp, #28]
 80065b8:	9d04      	ldr	r5, [sp, #16]
 80065ba:	9f08      	ldr	r7, [sp, #32]
 80065bc:	e73b      	b.n	8006436 <_dtoa_r+0x736>
 80065be:	9a07      	ldr	r2, [sp, #28]
 80065c0:	e767      	b.n	8006492 <_dtoa_r+0x792>
 80065c2:	9b06      	ldr	r3, [sp, #24]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	dc18      	bgt.n	80065fa <_dtoa_r+0x8fa>
 80065c8:	f1ba 0f00 	cmp.w	sl, #0
 80065cc:	d115      	bne.n	80065fa <_dtoa_r+0x8fa>
 80065ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80065d2:	b993      	cbnz	r3, 80065fa <_dtoa_r+0x8fa>
 80065d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80065d8:	0d1b      	lsrs	r3, r3, #20
 80065da:	051b      	lsls	r3, r3, #20
 80065dc:	b183      	cbz	r3, 8006600 <_dtoa_r+0x900>
 80065de:	9b04      	ldr	r3, [sp, #16]
 80065e0:	3301      	adds	r3, #1
 80065e2:	9304      	str	r3, [sp, #16]
 80065e4:	9b05      	ldr	r3, [sp, #20]
 80065e6:	3301      	adds	r3, #1
 80065e8:	9305      	str	r3, [sp, #20]
 80065ea:	f04f 0801 	mov.w	r8, #1
 80065ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f47f af6a 	bne.w	80064ca <_dtoa_r+0x7ca>
 80065f6:	2001      	movs	r0, #1
 80065f8:	e76f      	b.n	80064da <_dtoa_r+0x7da>
 80065fa:	f04f 0800 	mov.w	r8, #0
 80065fe:	e7f6      	b.n	80065ee <_dtoa_r+0x8ee>
 8006600:	4698      	mov	r8, r3
 8006602:	e7f4      	b.n	80065ee <_dtoa_r+0x8ee>
 8006604:	f43f af7d 	beq.w	8006502 <_dtoa_r+0x802>
 8006608:	4618      	mov	r0, r3
 800660a:	301c      	adds	r0, #28
 800660c:	e772      	b.n	80064f4 <_dtoa_r+0x7f4>
 800660e:	9b03      	ldr	r3, [sp, #12]
 8006610:	2b00      	cmp	r3, #0
 8006612:	dc37      	bgt.n	8006684 <_dtoa_r+0x984>
 8006614:	9b06      	ldr	r3, [sp, #24]
 8006616:	2b02      	cmp	r3, #2
 8006618:	dd34      	ble.n	8006684 <_dtoa_r+0x984>
 800661a:	9b03      	ldr	r3, [sp, #12]
 800661c:	9302      	str	r3, [sp, #8]
 800661e:	9b02      	ldr	r3, [sp, #8]
 8006620:	b96b      	cbnz	r3, 800663e <_dtoa_r+0x93e>
 8006622:	4631      	mov	r1, r6
 8006624:	2205      	movs	r2, #5
 8006626:	4620      	mov	r0, r4
 8006628:	f000 fbda 	bl	8006de0 <__multadd>
 800662c:	4601      	mov	r1, r0
 800662e:	4606      	mov	r6, r0
 8006630:	ee18 0a10 	vmov	r0, s16
 8006634:	f000 fdf4 	bl	8007220 <__mcmp>
 8006638:	2800      	cmp	r0, #0
 800663a:	f73f adbb 	bgt.w	80061b4 <_dtoa_r+0x4b4>
 800663e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006640:	9d01      	ldr	r5, [sp, #4]
 8006642:	43db      	mvns	r3, r3
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	f04f 0800 	mov.w	r8, #0
 800664a:	4631      	mov	r1, r6
 800664c:	4620      	mov	r0, r4
 800664e:	f000 fba5 	bl	8006d9c <_Bfree>
 8006652:	2f00      	cmp	r7, #0
 8006654:	f43f aea4 	beq.w	80063a0 <_dtoa_r+0x6a0>
 8006658:	f1b8 0f00 	cmp.w	r8, #0
 800665c:	d005      	beq.n	800666a <_dtoa_r+0x96a>
 800665e:	45b8      	cmp	r8, r7
 8006660:	d003      	beq.n	800666a <_dtoa_r+0x96a>
 8006662:	4641      	mov	r1, r8
 8006664:	4620      	mov	r0, r4
 8006666:	f000 fb99 	bl	8006d9c <_Bfree>
 800666a:	4639      	mov	r1, r7
 800666c:	4620      	mov	r0, r4
 800666e:	f000 fb95 	bl	8006d9c <_Bfree>
 8006672:	e695      	b.n	80063a0 <_dtoa_r+0x6a0>
 8006674:	2600      	movs	r6, #0
 8006676:	4637      	mov	r7, r6
 8006678:	e7e1      	b.n	800663e <_dtoa_r+0x93e>
 800667a:	9700      	str	r7, [sp, #0]
 800667c:	4637      	mov	r7, r6
 800667e:	e599      	b.n	80061b4 <_dtoa_r+0x4b4>
 8006680:	40240000 	.word	0x40240000
 8006684:	9b08      	ldr	r3, [sp, #32]
 8006686:	2b00      	cmp	r3, #0
 8006688:	f000 80ca 	beq.w	8006820 <_dtoa_r+0xb20>
 800668c:	9b03      	ldr	r3, [sp, #12]
 800668e:	9302      	str	r3, [sp, #8]
 8006690:	2d00      	cmp	r5, #0
 8006692:	dd05      	ble.n	80066a0 <_dtoa_r+0x9a0>
 8006694:	4639      	mov	r1, r7
 8006696:	462a      	mov	r2, r5
 8006698:	4620      	mov	r0, r4
 800669a:	f000 fd51 	bl	8007140 <__lshift>
 800669e:	4607      	mov	r7, r0
 80066a0:	f1b8 0f00 	cmp.w	r8, #0
 80066a4:	d05b      	beq.n	800675e <_dtoa_r+0xa5e>
 80066a6:	6879      	ldr	r1, [r7, #4]
 80066a8:	4620      	mov	r0, r4
 80066aa:	f000 fb37 	bl	8006d1c <_Balloc>
 80066ae:	4605      	mov	r5, r0
 80066b0:	b928      	cbnz	r0, 80066be <_dtoa_r+0x9be>
 80066b2:	4b87      	ldr	r3, [pc, #540]	; (80068d0 <_dtoa_r+0xbd0>)
 80066b4:	4602      	mov	r2, r0
 80066b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80066ba:	f7ff bb3b 	b.w	8005d34 <_dtoa_r+0x34>
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	3202      	adds	r2, #2
 80066c2:	0092      	lsls	r2, r2, #2
 80066c4:	f107 010c 	add.w	r1, r7, #12
 80066c8:	300c      	adds	r0, #12
 80066ca:	f000 fb0c 	bl	8006ce6 <memcpy>
 80066ce:	2201      	movs	r2, #1
 80066d0:	4629      	mov	r1, r5
 80066d2:	4620      	mov	r0, r4
 80066d4:	f000 fd34 	bl	8007140 <__lshift>
 80066d8:	9b01      	ldr	r3, [sp, #4]
 80066da:	f103 0901 	add.w	r9, r3, #1
 80066de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80066e2:	4413      	add	r3, r2
 80066e4:	9305      	str	r3, [sp, #20]
 80066e6:	f00a 0301 	and.w	r3, sl, #1
 80066ea:	46b8      	mov	r8, r7
 80066ec:	9304      	str	r3, [sp, #16]
 80066ee:	4607      	mov	r7, r0
 80066f0:	4631      	mov	r1, r6
 80066f2:	ee18 0a10 	vmov	r0, s16
 80066f6:	f7ff fa77 	bl	8005be8 <quorem>
 80066fa:	4641      	mov	r1, r8
 80066fc:	9002      	str	r0, [sp, #8]
 80066fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006702:	ee18 0a10 	vmov	r0, s16
 8006706:	f000 fd8b 	bl	8007220 <__mcmp>
 800670a:	463a      	mov	r2, r7
 800670c:	9003      	str	r0, [sp, #12]
 800670e:	4631      	mov	r1, r6
 8006710:	4620      	mov	r0, r4
 8006712:	f000 fda1 	bl	8007258 <__mdiff>
 8006716:	68c2      	ldr	r2, [r0, #12]
 8006718:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800671c:	4605      	mov	r5, r0
 800671e:	bb02      	cbnz	r2, 8006762 <_dtoa_r+0xa62>
 8006720:	4601      	mov	r1, r0
 8006722:	ee18 0a10 	vmov	r0, s16
 8006726:	f000 fd7b 	bl	8007220 <__mcmp>
 800672a:	4602      	mov	r2, r0
 800672c:	4629      	mov	r1, r5
 800672e:	4620      	mov	r0, r4
 8006730:	9207      	str	r2, [sp, #28]
 8006732:	f000 fb33 	bl	8006d9c <_Bfree>
 8006736:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800673a:	ea43 0102 	orr.w	r1, r3, r2
 800673e:	9b04      	ldr	r3, [sp, #16]
 8006740:	430b      	orrs	r3, r1
 8006742:	464d      	mov	r5, r9
 8006744:	d10f      	bne.n	8006766 <_dtoa_r+0xa66>
 8006746:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800674a:	d02a      	beq.n	80067a2 <_dtoa_r+0xaa2>
 800674c:	9b03      	ldr	r3, [sp, #12]
 800674e:	2b00      	cmp	r3, #0
 8006750:	dd02      	ble.n	8006758 <_dtoa_r+0xa58>
 8006752:	9b02      	ldr	r3, [sp, #8]
 8006754:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006758:	f88b a000 	strb.w	sl, [fp]
 800675c:	e775      	b.n	800664a <_dtoa_r+0x94a>
 800675e:	4638      	mov	r0, r7
 8006760:	e7ba      	b.n	80066d8 <_dtoa_r+0x9d8>
 8006762:	2201      	movs	r2, #1
 8006764:	e7e2      	b.n	800672c <_dtoa_r+0xa2c>
 8006766:	9b03      	ldr	r3, [sp, #12]
 8006768:	2b00      	cmp	r3, #0
 800676a:	db04      	blt.n	8006776 <_dtoa_r+0xa76>
 800676c:	9906      	ldr	r1, [sp, #24]
 800676e:	430b      	orrs	r3, r1
 8006770:	9904      	ldr	r1, [sp, #16]
 8006772:	430b      	orrs	r3, r1
 8006774:	d122      	bne.n	80067bc <_dtoa_r+0xabc>
 8006776:	2a00      	cmp	r2, #0
 8006778:	ddee      	ble.n	8006758 <_dtoa_r+0xa58>
 800677a:	ee18 1a10 	vmov	r1, s16
 800677e:	2201      	movs	r2, #1
 8006780:	4620      	mov	r0, r4
 8006782:	f000 fcdd 	bl	8007140 <__lshift>
 8006786:	4631      	mov	r1, r6
 8006788:	ee08 0a10 	vmov	s16, r0
 800678c:	f000 fd48 	bl	8007220 <__mcmp>
 8006790:	2800      	cmp	r0, #0
 8006792:	dc03      	bgt.n	800679c <_dtoa_r+0xa9c>
 8006794:	d1e0      	bne.n	8006758 <_dtoa_r+0xa58>
 8006796:	f01a 0f01 	tst.w	sl, #1
 800679a:	d0dd      	beq.n	8006758 <_dtoa_r+0xa58>
 800679c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80067a0:	d1d7      	bne.n	8006752 <_dtoa_r+0xa52>
 80067a2:	2339      	movs	r3, #57	; 0x39
 80067a4:	f88b 3000 	strb.w	r3, [fp]
 80067a8:	462b      	mov	r3, r5
 80067aa:	461d      	mov	r5, r3
 80067ac:	3b01      	subs	r3, #1
 80067ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80067b2:	2a39      	cmp	r2, #57	; 0x39
 80067b4:	d071      	beq.n	800689a <_dtoa_r+0xb9a>
 80067b6:	3201      	adds	r2, #1
 80067b8:	701a      	strb	r2, [r3, #0]
 80067ba:	e746      	b.n	800664a <_dtoa_r+0x94a>
 80067bc:	2a00      	cmp	r2, #0
 80067be:	dd07      	ble.n	80067d0 <_dtoa_r+0xad0>
 80067c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80067c4:	d0ed      	beq.n	80067a2 <_dtoa_r+0xaa2>
 80067c6:	f10a 0301 	add.w	r3, sl, #1
 80067ca:	f88b 3000 	strb.w	r3, [fp]
 80067ce:	e73c      	b.n	800664a <_dtoa_r+0x94a>
 80067d0:	9b05      	ldr	r3, [sp, #20]
 80067d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80067d6:	4599      	cmp	r9, r3
 80067d8:	d047      	beq.n	800686a <_dtoa_r+0xb6a>
 80067da:	ee18 1a10 	vmov	r1, s16
 80067de:	2300      	movs	r3, #0
 80067e0:	220a      	movs	r2, #10
 80067e2:	4620      	mov	r0, r4
 80067e4:	f000 fafc 	bl	8006de0 <__multadd>
 80067e8:	45b8      	cmp	r8, r7
 80067ea:	ee08 0a10 	vmov	s16, r0
 80067ee:	f04f 0300 	mov.w	r3, #0
 80067f2:	f04f 020a 	mov.w	r2, #10
 80067f6:	4641      	mov	r1, r8
 80067f8:	4620      	mov	r0, r4
 80067fa:	d106      	bne.n	800680a <_dtoa_r+0xb0a>
 80067fc:	f000 faf0 	bl	8006de0 <__multadd>
 8006800:	4680      	mov	r8, r0
 8006802:	4607      	mov	r7, r0
 8006804:	f109 0901 	add.w	r9, r9, #1
 8006808:	e772      	b.n	80066f0 <_dtoa_r+0x9f0>
 800680a:	f000 fae9 	bl	8006de0 <__multadd>
 800680e:	4639      	mov	r1, r7
 8006810:	4680      	mov	r8, r0
 8006812:	2300      	movs	r3, #0
 8006814:	220a      	movs	r2, #10
 8006816:	4620      	mov	r0, r4
 8006818:	f000 fae2 	bl	8006de0 <__multadd>
 800681c:	4607      	mov	r7, r0
 800681e:	e7f1      	b.n	8006804 <_dtoa_r+0xb04>
 8006820:	9b03      	ldr	r3, [sp, #12]
 8006822:	9302      	str	r3, [sp, #8]
 8006824:	9d01      	ldr	r5, [sp, #4]
 8006826:	ee18 0a10 	vmov	r0, s16
 800682a:	4631      	mov	r1, r6
 800682c:	f7ff f9dc 	bl	8005be8 <quorem>
 8006830:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006834:	9b01      	ldr	r3, [sp, #4]
 8006836:	f805 ab01 	strb.w	sl, [r5], #1
 800683a:	1aea      	subs	r2, r5, r3
 800683c:	9b02      	ldr	r3, [sp, #8]
 800683e:	4293      	cmp	r3, r2
 8006840:	dd09      	ble.n	8006856 <_dtoa_r+0xb56>
 8006842:	ee18 1a10 	vmov	r1, s16
 8006846:	2300      	movs	r3, #0
 8006848:	220a      	movs	r2, #10
 800684a:	4620      	mov	r0, r4
 800684c:	f000 fac8 	bl	8006de0 <__multadd>
 8006850:	ee08 0a10 	vmov	s16, r0
 8006854:	e7e7      	b.n	8006826 <_dtoa_r+0xb26>
 8006856:	9b02      	ldr	r3, [sp, #8]
 8006858:	2b00      	cmp	r3, #0
 800685a:	bfc8      	it	gt
 800685c:	461d      	movgt	r5, r3
 800685e:	9b01      	ldr	r3, [sp, #4]
 8006860:	bfd8      	it	le
 8006862:	2501      	movle	r5, #1
 8006864:	441d      	add	r5, r3
 8006866:	f04f 0800 	mov.w	r8, #0
 800686a:	ee18 1a10 	vmov	r1, s16
 800686e:	2201      	movs	r2, #1
 8006870:	4620      	mov	r0, r4
 8006872:	f000 fc65 	bl	8007140 <__lshift>
 8006876:	4631      	mov	r1, r6
 8006878:	ee08 0a10 	vmov	s16, r0
 800687c:	f000 fcd0 	bl	8007220 <__mcmp>
 8006880:	2800      	cmp	r0, #0
 8006882:	dc91      	bgt.n	80067a8 <_dtoa_r+0xaa8>
 8006884:	d102      	bne.n	800688c <_dtoa_r+0xb8c>
 8006886:	f01a 0f01 	tst.w	sl, #1
 800688a:	d18d      	bne.n	80067a8 <_dtoa_r+0xaa8>
 800688c:	462b      	mov	r3, r5
 800688e:	461d      	mov	r5, r3
 8006890:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006894:	2a30      	cmp	r2, #48	; 0x30
 8006896:	d0fa      	beq.n	800688e <_dtoa_r+0xb8e>
 8006898:	e6d7      	b.n	800664a <_dtoa_r+0x94a>
 800689a:	9a01      	ldr	r2, [sp, #4]
 800689c:	429a      	cmp	r2, r3
 800689e:	d184      	bne.n	80067aa <_dtoa_r+0xaaa>
 80068a0:	9b00      	ldr	r3, [sp, #0]
 80068a2:	3301      	adds	r3, #1
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	2331      	movs	r3, #49	; 0x31
 80068a8:	7013      	strb	r3, [r2, #0]
 80068aa:	e6ce      	b.n	800664a <_dtoa_r+0x94a>
 80068ac:	4b09      	ldr	r3, [pc, #36]	; (80068d4 <_dtoa_r+0xbd4>)
 80068ae:	f7ff ba95 	b.w	8005ddc <_dtoa_r+0xdc>
 80068b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f47f aa6e 	bne.w	8005d96 <_dtoa_r+0x96>
 80068ba:	4b07      	ldr	r3, [pc, #28]	; (80068d8 <_dtoa_r+0xbd8>)
 80068bc:	f7ff ba8e 	b.w	8005ddc <_dtoa_r+0xdc>
 80068c0:	9b02      	ldr	r3, [sp, #8]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	dcae      	bgt.n	8006824 <_dtoa_r+0xb24>
 80068c6:	9b06      	ldr	r3, [sp, #24]
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	f73f aea8 	bgt.w	800661e <_dtoa_r+0x91e>
 80068ce:	e7a9      	b.n	8006824 <_dtoa_r+0xb24>
 80068d0:	08008f03 	.word	0x08008f03
 80068d4:	080091ec 	.word	0x080091ec
 80068d8:	08008e9b 	.word	0x08008e9b

080068dc <std>:
 80068dc:	2300      	movs	r3, #0
 80068de:	b510      	push	{r4, lr}
 80068e0:	4604      	mov	r4, r0
 80068e2:	e9c0 3300 	strd	r3, r3, [r0]
 80068e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068ea:	6083      	str	r3, [r0, #8]
 80068ec:	8181      	strh	r1, [r0, #12]
 80068ee:	6643      	str	r3, [r0, #100]	; 0x64
 80068f0:	81c2      	strh	r2, [r0, #14]
 80068f2:	6183      	str	r3, [r0, #24]
 80068f4:	4619      	mov	r1, r3
 80068f6:	2208      	movs	r2, #8
 80068f8:	305c      	adds	r0, #92	; 0x5c
 80068fa:	f7fd fe89 	bl	8004610 <memset>
 80068fe:	4b05      	ldr	r3, [pc, #20]	; (8006914 <std+0x38>)
 8006900:	6263      	str	r3, [r4, #36]	; 0x24
 8006902:	4b05      	ldr	r3, [pc, #20]	; (8006918 <std+0x3c>)
 8006904:	62a3      	str	r3, [r4, #40]	; 0x28
 8006906:	4b05      	ldr	r3, [pc, #20]	; (800691c <std+0x40>)
 8006908:	62e3      	str	r3, [r4, #44]	; 0x2c
 800690a:	4b05      	ldr	r3, [pc, #20]	; (8006920 <std+0x44>)
 800690c:	6224      	str	r4, [r4, #32]
 800690e:	6323      	str	r3, [r4, #48]	; 0x30
 8006910:	bd10      	pop	{r4, pc}
 8006912:	bf00      	nop
 8006914:	08007ae5 	.word	0x08007ae5
 8006918:	08007b0b 	.word	0x08007b0b
 800691c:	08007b43 	.word	0x08007b43
 8006920:	08007b67 	.word	0x08007b67

08006924 <_cleanup_r>:
 8006924:	4901      	ldr	r1, [pc, #4]	; (800692c <_cleanup_r+0x8>)
 8006926:	f000 b8c1 	b.w	8006aac <_fwalk_reent>
 800692a:	bf00      	nop
 800692c:	08007f9d 	.word	0x08007f9d

08006930 <__sfmoreglue>:
 8006930:	b570      	push	{r4, r5, r6, lr}
 8006932:	2268      	movs	r2, #104	; 0x68
 8006934:	1e4d      	subs	r5, r1, #1
 8006936:	4355      	muls	r5, r2
 8006938:	460e      	mov	r6, r1
 800693a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800693e:	f7fe f94d 	bl	8004bdc <_malloc_r>
 8006942:	4604      	mov	r4, r0
 8006944:	b140      	cbz	r0, 8006958 <__sfmoreglue+0x28>
 8006946:	2100      	movs	r1, #0
 8006948:	e9c0 1600 	strd	r1, r6, [r0]
 800694c:	300c      	adds	r0, #12
 800694e:	60a0      	str	r0, [r4, #8]
 8006950:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006954:	f7fd fe5c 	bl	8004610 <memset>
 8006958:	4620      	mov	r0, r4
 800695a:	bd70      	pop	{r4, r5, r6, pc}

0800695c <__sfp_lock_acquire>:
 800695c:	4801      	ldr	r0, [pc, #4]	; (8006964 <__sfp_lock_acquire+0x8>)
 800695e:	f000 b9bf 	b.w	8006ce0 <__retarget_lock_acquire_recursive>
 8006962:	bf00      	nop
 8006964:	200004a2 	.word	0x200004a2

08006968 <__sfp_lock_release>:
 8006968:	4801      	ldr	r0, [pc, #4]	; (8006970 <__sfp_lock_release+0x8>)
 800696a:	f000 b9bb 	b.w	8006ce4 <__retarget_lock_release_recursive>
 800696e:	bf00      	nop
 8006970:	200004a2 	.word	0x200004a2

08006974 <__sinit_lock_acquire>:
 8006974:	4801      	ldr	r0, [pc, #4]	; (800697c <__sinit_lock_acquire+0x8>)
 8006976:	f000 b9b3 	b.w	8006ce0 <__retarget_lock_acquire_recursive>
 800697a:	bf00      	nop
 800697c:	200004a3 	.word	0x200004a3

08006980 <__sinit_lock_release>:
 8006980:	4801      	ldr	r0, [pc, #4]	; (8006988 <__sinit_lock_release+0x8>)
 8006982:	f000 b9af 	b.w	8006ce4 <__retarget_lock_release_recursive>
 8006986:	bf00      	nop
 8006988:	200004a3 	.word	0x200004a3

0800698c <__sinit>:
 800698c:	b510      	push	{r4, lr}
 800698e:	4604      	mov	r4, r0
 8006990:	f7ff fff0 	bl	8006974 <__sinit_lock_acquire>
 8006994:	69a3      	ldr	r3, [r4, #24]
 8006996:	b11b      	cbz	r3, 80069a0 <__sinit+0x14>
 8006998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800699c:	f7ff bff0 	b.w	8006980 <__sinit_lock_release>
 80069a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80069a4:	6523      	str	r3, [r4, #80]	; 0x50
 80069a6:	4b13      	ldr	r3, [pc, #76]	; (80069f4 <__sinit+0x68>)
 80069a8:	4a13      	ldr	r2, [pc, #76]	; (80069f8 <__sinit+0x6c>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80069ae:	42a3      	cmp	r3, r4
 80069b0:	bf04      	itt	eq
 80069b2:	2301      	moveq	r3, #1
 80069b4:	61a3      	streq	r3, [r4, #24]
 80069b6:	4620      	mov	r0, r4
 80069b8:	f000 f820 	bl	80069fc <__sfp>
 80069bc:	6060      	str	r0, [r4, #4]
 80069be:	4620      	mov	r0, r4
 80069c0:	f000 f81c 	bl	80069fc <__sfp>
 80069c4:	60a0      	str	r0, [r4, #8]
 80069c6:	4620      	mov	r0, r4
 80069c8:	f000 f818 	bl	80069fc <__sfp>
 80069cc:	2200      	movs	r2, #0
 80069ce:	60e0      	str	r0, [r4, #12]
 80069d0:	2104      	movs	r1, #4
 80069d2:	6860      	ldr	r0, [r4, #4]
 80069d4:	f7ff ff82 	bl	80068dc <std>
 80069d8:	68a0      	ldr	r0, [r4, #8]
 80069da:	2201      	movs	r2, #1
 80069dc:	2109      	movs	r1, #9
 80069de:	f7ff ff7d 	bl	80068dc <std>
 80069e2:	68e0      	ldr	r0, [r4, #12]
 80069e4:	2202      	movs	r2, #2
 80069e6:	2112      	movs	r1, #18
 80069e8:	f7ff ff78 	bl	80068dc <std>
 80069ec:	2301      	movs	r3, #1
 80069ee:	61a3      	str	r3, [r4, #24]
 80069f0:	e7d2      	b.n	8006998 <__sinit+0xc>
 80069f2:	bf00      	nop
 80069f4:	08008c04 	.word	0x08008c04
 80069f8:	08006925 	.word	0x08006925

080069fc <__sfp>:
 80069fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069fe:	4607      	mov	r7, r0
 8006a00:	f7ff ffac 	bl	800695c <__sfp_lock_acquire>
 8006a04:	4b1e      	ldr	r3, [pc, #120]	; (8006a80 <__sfp+0x84>)
 8006a06:	681e      	ldr	r6, [r3, #0]
 8006a08:	69b3      	ldr	r3, [r6, #24]
 8006a0a:	b913      	cbnz	r3, 8006a12 <__sfp+0x16>
 8006a0c:	4630      	mov	r0, r6
 8006a0e:	f7ff ffbd 	bl	800698c <__sinit>
 8006a12:	3648      	adds	r6, #72	; 0x48
 8006a14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	d503      	bpl.n	8006a24 <__sfp+0x28>
 8006a1c:	6833      	ldr	r3, [r6, #0]
 8006a1e:	b30b      	cbz	r3, 8006a64 <__sfp+0x68>
 8006a20:	6836      	ldr	r6, [r6, #0]
 8006a22:	e7f7      	b.n	8006a14 <__sfp+0x18>
 8006a24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006a28:	b9d5      	cbnz	r5, 8006a60 <__sfp+0x64>
 8006a2a:	4b16      	ldr	r3, [pc, #88]	; (8006a84 <__sfp+0x88>)
 8006a2c:	60e3      	str	r3, [r4, #12]
 8006a2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a32:	6665      	str	r5, [r4, #100]	; 0x64
 8006a34:	f000 f952 	bl	8006cdc <__retarget_lock_init_recursive>
 8006a38:	f7ff ff96 	bl	8006968 <__sfp_lock_release>
 8006a3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006a40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006a44:	6025      	str	r5, [r4, #0]
 8006a46:	61a5      	str	r5, [r4, #24]
 8006a48:	2208      	movs	r2, #8
 8006a4a:	4629      	mov	r1, r5
 8006a4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a50:	f7fd fdde 	bl	8004610 <memset>
 8006a54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a60:	3468      	adds	r4, #104	; 0x68
 8006a62:	e7d9      	b.n	8006a18 <__sfp+0x1c>
 8006a64:	2104      	movs	r1, #4
 8006a66:	4638      	mov	r0, r7
 8006a68:	f7ff ff62 	bl	8006930 <__sfmoreglue>
 8006a6c:	4604      	mov	r4, r0
 8006a6e:	6030      	str	r0, [r6, #0]
 8006a70:	2800      	cmp	r0, #0
 8006a72:	d1d5      	bne.n	8006a20 <__sfp+0x24>
 8006a74:	f7ff ff78 	bl	8006968 <__sfp_lock_release>
 8006a78:	230c      	movs	r3, #12
 8006a7a:	603b      	str	r3, [r7, #0]
 8006a7c:	e7ee      	b.n	8006a5c <__sfp+0x60>
 8006a7e:	bf00      	nop
 8006a80:	08008c04 	.word	0x08008c04
 8006a84:	ffff0001 	.word	0xffff0001

08006a88 <fiprintf>:
 8006a88:	b40e      	push	{r1, r2, r3}
 8006a8a:	b503      	push	{r0, r1, lr}
 8006a8c:	4601      	mov	r1, r0
 8006a8e:	ab03      	add	r3, sp, #12
 8006a90:	4805      	ldr	r0, [pc, #20]	; (8006aa8 <fiprintf+0x20>)
 8006a92:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a96:	6800      	ldr	r0, [r0, #0]
 8006a98:	9301      	str	r3, [sp, #4]
 8006a9a:	f000 fe5f 	bl	800775c <_vfiprintf_r>
 8006a9e:	b002      	add	sp, #8
 8006aa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006aa4:	b003      	add	sp, #12
 8006aa6:	4770      	bx	lr
 8006aa8:	20000010 	.word	0x20000010

08006aac <_fwalk_reent>:
 8006aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ab0:	4606      	mov	r6, r0
 8006ab2:	4688      	mov	r8, r1
 8006ab4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ab8:	2700      	movs	r7, #0
 8006aba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006abe:	f1b9 0901 	subs.w	r9, r9, #1
 8006ac2:	d505      	bpl.n	8006ad0 <_fwalk_reent+0x24>
 8006ac4:	6824      	ldr	r4, [r4, #0]
 8006ac6:	2c00      	cmp	r4, #0
 8006ac8:	d1f7      	bne.n	8006aba <_fwalk_reent+0xe>
 8006aca:	4638      	mov	r0, r7
 8006acc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ad0:	89ab      	ldrh	r3, [r5, #12]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d907      	bls.n	8006ae6 <_fwalk_reent+0x3a>
 8006ad6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ada:	3301      	adds	r3, #1
 8006adc:	d003      	beq.n	8006ae6 <_fwalk_reent+0x3a>
 8006ade:	4629      	mov	r1, r5
 8006ae0:	4630      	mov	r0, r6
 8006ae2:	47c0      	blx	r8
 8006ae4:	4307      	orrs	r7, r0
 8006ae6:	3568      	adds	r5, #104	; 0x68
 8006ae8:	e7e9      	b.n	8006abe <_fwalk_reent+0x12>
	...

08006aec <_findenv_r>:
 8006aec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af0:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8006b60 <_findenv_r+0x74>
 8006af4:	4607      	mov	r7, r0
 8006af6:	4689      	mov	r9, r1
 8006af8:	4616      	mov	r6, r2
 8006afa:	f001 f9bd 	bl	8007e78 <__env_lock>
 8006afe:	f8da 4000 	ldr.w	r4, [sl]
 8006b02:	b134      	cbz	r4, 8006b12 <_findenv_r+0x26>
 8006b04:	464b      	mov	r3, r9
 8006b06:	4698      	mov	r8, r3
 8006b08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b0c:	b13a      	cbz	r2, 8006b1e <_findenv_r+0x32>
 8006b0e:	2a3d      	cmp	r2, #61	; 0x3d
 8006b10:	d1f9      	bne.n	8006b06 <_findenv_r+0x1a>
 8006b12:	4638      	mov	r0, r7
 8006b14:	f001 f9b6 	bl	8007e84 <__env_unlock>
 8006b18:	2000      	movs	r0, #0
 8006b1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b1e:	eba8 0809 	sub.w	r8, r8, r9
 8006b22:	46a3      	mov	fp, r4
 8006b24:	f854 0b04 	ldr.w	r0, [r4], #4
 8006b28:	2800      	cmp	r0, #0
 8006b2a:	d0f2      	beq.n	8006b12 <_findenv_r+0x26>
 8006b2c:	4642      	mov	r2, r8
 8006b2e:	4649      	mov	r1, r9
 8006b30:	f001 f825 	bl	8007b7e <strncmp>
 8006b34:	2800      	cmp	r0, #0
 8006b36:	d1f4      	bne.n	8006b22 <_findenv_r+0x36>
 8006b38:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006b3c:	eb03 0508 	add.w	r5, r3, r8
 8006b40:	f813 3008 	ldrb.w	r3, [r3, r8]
 8006b44:	2b3d      	cmp	r3, #61	; 0x3d
 8006b46:	d1ec      	bne.n	8006b22 <_findenv_r+0x36>
 8006b48:	f8da 3000 	ldr.w	r3, [sl]
 8006b4c:	ebab 0303 	sub.w	r3, fp, r3
 8006b50:	109b      	asrs	r3, r3, #2
 8006b52:	4638      	mov	r0, r7
 8006b54:	6033      	str	r3, [r6, #0]
 8006b56:	f001 f995 	bl	8007e84 <__env_unlock>
 8006b5a:	1c68      	adds	r0, r5, #1
 8006b5c:	e7dd      	b.n	8006b1a <_findenv_r+0x2e>
 8006b5e:	bf00      	nop
 8006b60:	20000000 	.word	0x20000000

08006b64 <_getenv_r>:
 8006b64:	b507      	push	{r0, r1, r2, lr}
 8006b66:	aa01      	add	r2, sp, #4
 8006b68:	f7ff ffc0 	bl	8006aec <_findenv_r>
 8006b6c:	b003      	add	sp, #12
 8006b6e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006b74 <__gettzinfo>:
 8006b74:	4800      	ldr	r0, [pc, #0]	; (8006b78 <__gettzinfo+0x4>)
 8006b76:	4770      	bx	lr
 8006b78:	20000080 	.word	0x20000080

08006b7c <gmtime_r>:
 8006b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b80:	e9d0 6700 	ldrd	r6, r7, [r0]
 8006b84:	460c      	mov	r4, r1
 8006b86:	4a4f      	ldr	r2, [pc, #316]	; (8006cc4 <gmtime_r+0x148>)
 8006b88:	2300      	movs	r3, #0
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	4639      	mov	r1, r7
 8006b8e:	f7fa f815 	bl	8000bbc <__aeabi_ldivmod>
 8006b92:	4639      	mov	r1, r7
 8006b94:	4605      	mov	r5, r0
 8006b96:	4a4b      	ldr	r2, [pc, #300]	; (8006cc4 <gmtime_r+0x148>)
 8006b98:	4630      	mov	r0, r6
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	f7fa f80e 	bl	8000bbc <__aeabi_ldivmod>
 8006ba0:	2a00      	cmp	r2, #0
 8006ba2:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8006ba6:	bfb7      	itett	lt
 8006ba8:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8006bac:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 8006bb0:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 8006bb4:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8006bb8:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8006bbc:	fbb2 f1f0 	udiv	r1, r2, r0
 8006bc0:	fb00 2211 	mls	r2, r0, r1, r2
 8006bc4:	203c      	movs	r0, #60	; 0x3c
 8006bc6:	60a1      	str	r1, [r4, #8]
 8006bc8:	fbb2 f1f0 	udiv	r1, r2, r0
 8006bcc:	fb00 2211 	mls	r2, r0, r1, r2
 8006bd0:	6061      	str	r1, [r4, #4]
 8006bd2:	6022      	str	r2, [r4, #0]
 8006bd4:	2107      	movs	r1, #7
 8006bd6:	1cda      	adds	r2, r3, #3
 8006bd8:	fb92 f1f1 	sdiv	r1, r2, r1
 8006bdc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8006be0:	1a52      	subs	r2, r2, r1
 8006be2:	bf48      	it	mi
 8006be4:	3207      	addmi	r2, #7
 8006be6:	4d38      	ldr	r5, [pc, #224]	; (8006cc8 <gmtime_r+0x14c>)
 8006be8:	4838      	ldr	r0, [pc, #224]	; (8006ccc <gmtime_r+0x150>)
 8006bea:	61a2      	str	r2, [r4, #24]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	bfb7      	itett	lt
 8006bf0:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 8006bf4:	fb93 f5f5 	sdivge	r5, r3, r5
 8006bf8:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 8006bfc:	fb92 f5f5 	sdivlt	r5, r2, r5
 8006c00:	fb00 3005 	mla	r0, r0, r5, r3
 8006c04:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8006c08:	fbb0 f2f2 	udiv	r2, r0, r2
 8006c0c:	4402      	add	r2, r0
 8006c0e:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8006c12:	fbb0 f1f3 	udiv	r1, r0, r3
 8006c16:	1a52      	subs	r2, r2, r1
 8006c18:	f240 1c6d 	movw	ip, #365	; 0x16d
 8006c1c:	492c      	ldr	r1, [pc, #176]	; (8006cd0 <gmtime_r+0x154>)
 8006c1e:	fbb0 f1f1 	udiv	r1, r0, r1
 8006c22:	2764      	movs	r7, #100	; 0x64
 8006c24:	1a52      	subs	r2, r2, r1
 8006c26:	fbb2 f1fc 	udiv	r1, r2, ip
 8006c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c2e:	fbb1 f6f7 	udiv	r6, r1, r7
 8006c32:	1af3      	subs	r3, r6, r3
 8006c34:	4403      	add	r3, r0
 8006c36:	fb0c 3311 	mls	r3, ip, r1, r3
 8006c3a:	2299      	movs	r2, #153	; 0x99
 8006c3c:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8006c40:	f10e 0e02 	add.w	lr, lr, #2
 8006c44:	f103 0c01 	add.w	ip, r3, #1
 8006c48:	fbbe f0f2 	udiv	r0, lr, r2
 8006c4c:	4342      	muls	r2, r0
 8006c4e:	3202      	adds	r2, #2
 8006c50:	f04f 0805 	mov.w	r8, #5
 8006c54:	fbb2 f2f8 	udiv	r2, r2, r8
 8006c58:	ebac 0c02 	sub.w	ip, ip, r2
 8006c5c:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8006c60:	4596      	cmp	lr, r2
 8006c62:	bf94      	ite	ls
 8006c64:	2202      	movls	r2, #2
 8006c66:	f06f 0209 	mvnhi.w	r2, #9
 8006c6a:	4410      	add	r0, r2
 8006c6c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006c70:	fb02 1505 	mla	r5, r2, r5, r1
 8006c74:	2801      	cmp	r0, #1
 8006c76:	bf98      	it	ls
 8006c78:	3501      	addls	r5, #1
 8006c7a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8006c7e:	d30d      	bcc.n	8006c9c <gmtime_r+0x120>
 8006c80:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006c84:	61e3      	str	r3, [r4, #28]
 8006c86:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	e9c4 0504 	strd	r0, r5, [r4, #16]
 8006c90:	f8c4 c00c 	str.w	ip, [r4, #12]
 8006c94:	6223      	str	r3, [r4, #32]
 8006c96:	4620      	mov	r0, r4
 8006c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c9c:	078a      	lsls	r2, r1, #30
 8006c9e:	d102      	bne.n	8006ca6 <gmtime_r+0x12a>
 8006ca0:	fb07 1616 	mls	r6, r7, r6, r1
 8006ca4:	b95e      	cbnz	r6, 8006cbe <gmtime_r+0x142>
 8006ca6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006caa:	fbb1 f6f2 	udiv	r6, r1, r2
 8006cae:	fb02 1216 	mls	r2, r2, r6, r1
 8006cb2:	fab2 f282 	clz	r2, r2
 8006cb6:	0952      	lsrs	r2, r2, #5
 8006cb8:	333b      	adds	r3, #59	; 0x3b
 8006cba:	4413      	add	r3, r2
 8006cbc:	e7e2      	b.n	8006c84 <gmtime_r+0x108>
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	e7fa      	b.n	8006cb8 <gmtime_r+0x13c>
 8006cc2:	bf00      	nop
 8006cc4:	00015180 	.word	0x00015180
 8006cc8:	00023ab1 	.word	0x00023ab1
 8006ccc:	fffdc54f 	.word	0xfffdc54f
 8006cd0:	00023ab0 	.word	0x00023ab0

08006cd4 <_localeconv_r>:
 8006cd4:	4800      	ldr	r0, [pc, #0]	; (8006cd8 <_localeconv_r+0x4>)
 8006cd6:	4770      	bx	lr
 8006cd8:	200001c8 	.word	0x200001c8

08006cdc <__retarget_lock_init_recursive>:
 8006cdc:	4770      	bx	lr

08006cde <__retarget_lock_acquire>:
 8006cde:	4770      	bx	lr

08006ce0 <__retarget_lock_acquire_recursive>:
 8006ce0:	4770      	bx	lr

08006ce2 <__retarget_lock_release>:
 8006ce2:	4770      	bx	lr

08006ce4 <__retarget_lock_release_recursive>:
 8006ce4:	4770      	bx	lr

08006ce6 <memcpy>:
 8006ce6:	440a      	add	r2, r1
 8006ce8:	4291      	cmp	r1, r2
 8006cea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006cee:	d100      	bne.n	8006cf2 <memcpy+0xc>
 8006cf0:	4770      	bx	lr
 8006cf2:	b510      	push	{r4, lr}
 8006cf4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cfc:	4291      	cmp	r1, r2
 8006cfe:	d1f9      	bne.n	8006cf4 <memcpy+0xe>
 8006d00:	bd10      	pop	{r4, pc}
	...

08006d04 <__malloc_lock>:
 8006d04:	4801      	ldr	r0, [pc, #4]	; (8006d0c <__malloc_lock+0x8>)
 8006d06:	f7ff bfeb 	b.w	8006ce0 <__retarget_lock_acquire_recursive>
 8006d0a:	bf00      	nop
 8006d0c:	200004a1 	.word	0x200004a1

08006d10 <__malloc_unlock>:
 8006d10:	4801      	ldr	r0, [pc, #4]	; (8006d18 <__malloc_unlock+0x8>)
 8006d12:	f7ff bfe7 	b.w	8006ce4 <__retarget_lock_release_recursive>
 8006d16:	bf00      	nop
 8006d18:	200004a1 	.word	0x200004a1

08006d1c <_Balloc>:
 8006d1c:	b570      	push	{r4, r5, r6, lr}
 8006d1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006d20:	4604      	mov	r4, r0
 8006d22:	460d      	mov	r5, r1
 8006d24:	b976      	cbnz	r6, 8006d44 <_Balloc+0x28>
 8006d26:	2010      	movs	r0, #16
 8006d28:	f7fd fc62 	bl	80045f0 <malloc>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	6260      	str	r0, [r4, #36]	; 0x24
 8006d30:	b920      	cbnz	r0, 8006d3c <_Balloc+0x20>
 8006d32:	4b18      	ldr	r3, [pc, #96]	; (8006d94 <_Balloc+0x78>)
 8006d34:	4818      	ldr	r0, [pc, #96]	; (8006d98 <_Balloc+0x7c>)
 8006d36:	2166      	movs	r1, #102	; 0x66
 8006d38:	f7fe ff24 	bl	8005b84 <__assert_func>
 8006d3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d40:	6006      	str	r6, [r0, #0]
 8006d42:	60c6      	str	r6, [r0, #12]
 8006d44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006d46:	68f3      	ldr	r3, [r6, #12]
 8006d48:	b183      	cbz	r3, 8006d6c <_Balloc+0x50>
 8006d4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d52:	b9b8      	cbnz	r0, 8006d84 <_Balloc+0x68>
 8006d54:	2101      	movs	r1, #1
 8006d56:	fa01 f605 	lsl.w	r6, r1, r5
 8006d5a:	1d72      	adds	r2, r6, #5
 8006d5c:	0092      	lsls	r2, r2, #2
 8006d5e:	4620      	mov	r0, r4
 8006d60:	f000 fb60 	bl	8007424 <_calloc_r>
 8006d64:	b160      	cbz	r0, 8006d80 <_Balloc+0x64>
 8006d66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d6a:	e00e      	b.n	8006d8a <_Balloc+0x6e>
 8006d6c:	2221      	movs	r2, #33	; 0x21
 8006d6e:	2104      	movs	r1, #4
 8006d70:	4620      	mov	r0, r4
 8006d72:	f000 fb57 	bl	8007424 <_calloc_r>
 8006d76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d78:	60f0      	str	r0, [r6, #12]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1e4      	bne.n	8006d4a <_Balloc+0x2e>
 8006d80:	2000      	movs	r0, #0
 8006d82:	bd70      	pop	{r4, r5, r6, pc}
 8006d84:	6802      	ldr	r2, [r0, #0]
 8006d86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d90:	e7f7      	b.n	8006d82 <_Balloc+0x66>
 8006d92:	bf00      	nop
 8006d94:	08008c08 	.word	0x08008c08
 8006d98:	08008f74 	.word	0x08008f74

08006d9c <_Bfree>:
 8006d9c:	b570      	push	{r4, r5, r6, lr}
 8006d9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006da0:	4605      	mov	r5, r0
 8006da2:	460c      	mov	r4, r1
 8006da4:	b976      	cbnz	r6, 8006dc4 <_Bfree+0x28>
 8006da6:	2010      	movs	r0, #16
 8006da8:	f7fd fc22 	bl	80045f0 <malloc>
 8006dac:	4602      	mov	r2, r0
 8006dae:	6268      	str	r0, [r5, #36]	; 0x24
 8006db0:	b920      	cbnz	r0, 8006dbc <_Bfree+0x20>
 8006db2:	4b09      	ldr	r3, [pc, #36]	; (8006dd8 <_Bfree+0x3c>)
 8006db4:	4809      	ldr	r0, [pc, #36]	; (8006ddc <_Bfree+0x40>)
 8006db6:	218a      	movs	r1, #138	; 0x8a
 8006db8:	f7fe fee4 	bl	8005b84 <__assert_func>
 8006dbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006dc0:	6006      	str	r6, [r0, #0]
 8006dc2:	60c6      	str	r6, [r0, #12]
 8006dc4:	b13c      	cbz	r4, 8006dd6 <_Bfree+0x3a>
 8006dc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006dc8:	6862      	ldr	r2, [r4, #4]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006dd0:	6021      	str	r1, [r4, #0]
 8006dd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006dd6:	bd70      	pop	{r4, r5, r6, pc}
 8006dd8:	08008c08 	.word	0x08008c08
 8006ddc:	08008f74 	.word	0x08008f74

08006de0 <__multadd>:
 8006de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006de4:	690d      	ldr	r5, [r1, #16]
 8006de6:	4607      	mov	r7, r0
 8006de8:	460c      	mov	r4, r1
 8006dea:	461e      	mov	r6, r3
 8006dec:	f101 0c14 	add.w	ip, r1, #20
 8006df0:	2000      	movs	r0, #0
 8006df2:	f8dc 3000 	ldr.w	r3, [ip]
 8006df6:	b299      	uxth	r1, r3
 8006df8:	fb02 6101 	mla	r1, r2, r1, r6
 8006dfc:	0c1e      	lsrs	r6, r3, #16
 8006dfe:	0c0b      	lsrs	r3, r1, #16
 8006e00:	fb02 3306 	mla	r3, r2, r6, r3
 8006e04:	b289      	uxth	r1, r1
 8006e06:	3001      	adds	r0, #1
 8006e08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e0c:	4285      	cmp	r5, r0
 8006e0e:	f84c 1b04 	str.w	r1, [ip], #4
 8006e12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e16:	dcec      	bgt.n	8006df2 <__multadd+0x12>
 8006e18:	b30e      	cbz	r6, 8006e5e <__multadd+0x7e>
 8006e1a:	68a3      	ldr	r3, [r4, #8]
 8006e1c:	42ab      	cmp	r3, r5
 8006e1e:	dc19      	bgt.n	8006e54 <__multadd+0x74>
 8006e20:	6861      	ldr	r1, [r4, #4]
 8006e22:	4638      	mov	r0, r7
 8006e24:	3101      	adds	r1, #1
 8006e26:	f7ff ff79 	bl	8006d1c <_Balloc>
 8006e2a:	4680      	mov	r8, r0
 8006e2c:	b928      	cbnz	r0, 8006e3a <__multadd+0x5a>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	4b0c      	ldr	r3, [pc, #48]	; (8006e64 <__multadd+0x84>)
 8006e32:	480d      	ldr	r0, [pc, #52]	; (8006e68 <__multadd+0x88>)
 8006e34:	21b5      	movs	r1, #181	; 0xb5
 8006e36:	f7fe fea5 	bl	8005b84 <__assert_func>
 8006e3a:	6922      	ldr	r2, [r4, #16]
 8006e3c:	3202      	adds	r2, #2
 8006e3e:	f104 010c 	add.w	r1, r4, #12
 8006e42:	0092      	lsls	r2, r2, #2
 8006e44:	300c      	adds	r0, #12
 8006e46:	f7ff ff4e 	bl	8006ce6 <memcpy>
 8006e4a:	4621      	mov	r1, r4
 8006e4c:	4638      	mov	r0, r7
 8006e4e:	f7ff ffa5 	bl	8006d9c <_Bfree>
 8006e52:	4644      	mov	r4, r8
 8006e54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e58:	3501      	adds	r5, #1
 8006e5a:	615e      	str	r6, [r3, #20]
 8006e5c:	6125      	str	r5, [r4, #16]
 8006e5e:	4620      	mov	r0, r4
 8006e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e64:	08008f03 	.word	0x08008f03
 8006e68:	08008f74 	.word	0x08008f74

08006e6c <__hi0bits>:
 8006e6c:	0c03      	lsrs	r3, r0, #16
 8006e6e:	041b      	lsls	r3, r3, #16
 8006e70:	b9d3      	cbnz	r3, 8006ea8 <__hi0bits+0x3c>
 8006e72:	0400      	lsls	r0, r0, #16
 8006e74:	2310      	movs	r3, #16
 8006e76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006e7a:	bf04      	itt	eq
 8006e7c:	0200      	lsleq	r0, r0, #8
 8006e7e:	3308      	addeq	r3, #8
 8006e80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006e84:	bf04      	itt	eq
 8006e86:	0100      	lsleq	r0, r0, #4
 8006e88:	3304      	addeq	r3, #4
 8006e8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006e8e:	bf04      	itt	eq
 8006e90:	0080      	lsleq	r0, r0, #2
 8006e92:	3302      	addeq	r3, #2
 8006e94:	2800      	cmp	r0, #0
 8006e96:	db05      	blt.n	8006ea4 <__hi0bits+0x38>
 8006e98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006e9c:	f103 0301 	add.w	r3, r3, #1
 8006ea0:	bf08      	it	eq
 8006ea2:	2320      	moveq	r3, #32
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	4770      	bx	lr
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	e7e4      	b.n	8006e76 <__hi0bits+0xa>

08006eac <__lo0bits>:
 8006eac:	6803      	ldr	r3, [r0, #0]
 8006eae:	f013 0207 	ands.w	r2, r3, #7
 8006eb2:	4601      	mov	r1, r0
 8006eb4:	d00b      	beq.n	8006ece <__lo0bits+0x22>
 8006eb6:	07da      	lsls	r2, r3, #31
 8006eb8:	d423      	bmi.n	8006f02 <__lo0bits+0x56>
 8006eba:	0798      	lsls	r0, r3, #30
 8006ebc:	bf49      	itett	mi
 8006ebe:	085b      	lsrmi	r3, r3, #1
 8006ec0:	089b      	lsrpl	r3, r3, #2
 8006ec2:	2001      	movmi	r0, #1
 8006ec4:	600b      	strmi	r3, [r1, #0]
 8006ec6:	bf5c      	itt	pl
 8006ec8:	600b      	strpl	r3, [r1, #0]
 8006eca:	2002      	movpl	r0, #2
 8006ecc:	4770      	bx	lr
 8006ece:	b298      	uxth	r0, r3
 8006ed0:	b9a8      	cbnz	r0, 8006efe <__lo0bits+0x52>
 8006ed2:	0c1b      	lsrs	r3, r3, #16
 8006ed4:	2010      	movs	r0, #16
 8006ed6:	b2da      	uxtb	r2, r3
 8006ed8:	b90a      	cbnz	r2, 8006ede <__lo0bits+0x32>
 8006eda:	3008      	adds	r0, #8
 8006edc:	0a1b      	lsrs	r3, r3, #8
 8006ede:	071a      	lsls	r2, r3, #28
 8006ee0:	bf04      	itt	eq
 8006ee2:	091b      	lsreq	r3, r3, #4
 8006ee4:	3004      	addeq	r0, #4
 8006ee6:	079a      	lsls	r2, r3, #30
 8006ee8:	bf04      	itt	eq
 8006eea:	089b      	lsreq	r3, r3, #2
 8006eec:	3002      	addeq	r0, #2
 8006eee:	07da      	lsls	r2, r3, #31
 8006ef0:	d403      	bmi.n	8006efa <__lo0bits+0x4e>
 8006ef2:	085b      	lsrs	r3, r3, #1
 8006ef4:	f100 0001 	add.w	r0, r0, #1
 8006ef8:	d005      	beq.n	8006f06 <__lo0bits+0x5a>
 8006efa:	600b      	str	r3, [r1, #0]
 8006efc:	4770      	bx	lr
 8006efe:	4610      	mov	r0, r2
 8006f00:	e7e9      	b.n	8006ed6 <__lo0bits+0x2a>
 8006f02:	2000      	movs	r0, #0
 8006f04:	4770      	bx	lr
 8006f06:	2020      	movs	r0, #32
 8006f08:	4770      	bx	lr
	...

08006f0c <__i2b>:
 8006f0c:	b510      	push	{r4, lr}
 8006f0e:	460c      	mov	r4, r1
 8006f10:	2101      	movs	r1, #1
 8006f12:	f7ff ff03 	bl	8006d1c <_Balloc>
 8006f16:	4602      	mov	r2, r0
 8006f18:	b928      	cbnz	r0, 8006f26 <__i2b+0x1a>
 8006f1a:	4b05      	ldr	r3, [pc, #20]	; (8006f30 <__i2b+0x24>)
 8006f1c:	4805      	ldr	r0, [pc, #20]	; (8006f34 <__i2b+0x28>)
 8006f1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006f22:	f7fe fe2f 	bl	8005b84 <__assert_func>
 8006f26:	2301      	movs	r3, #1
 8006f28:	6144      	str	r4, [r0, #20]
 8006f2a:	6103      	str	r3, [r0, #16]
 8006f2c:	bd10      	pop	{r4, pc}
 8006f2e:	bf00      	nop
 8006f30:	08008f03 	.word	0x08008f03
 8006f34:	08008f74 	.word	0x08008f74

08006f38 <__multiply>:
 8006f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f3c:	4691      	mov	r9, r2
 8006f3e:	690a      	ldr	r2, [r1, #16]
 8006f40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	bfb8      	it	lt
 8006f48:	460b      	movlt	r3, r1
 8006f4a:	460c      	mov	r4, r1
 8006f4c:	bfbc      	itt	lt
 8006f4e:	464c      	movlt	r4, r9
 8006f50:	4699      	movlt	r9, r3
 8006f52:	6927      	ldr	r7, [r4, #16]
 8006f54:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006f58:	68a3      	ldr	r3, [r4, #8]
 8006f5a:	6861      	ldr	r1, [r4, #4]
 8006f5c:	eb07 060a 	add.w	r6, r7, sl
 8006f60:	42b3      	cmp	r3, r6
 8006f62:	b085      	sub	sp, #20
 8006f64:	bfb8      	it	lt
 8006f66:	3101      	addlt	r1, #1
 8006f68:	f7ff fed8 	bl	8006d1c <_Balloc>
 8006f6c:	b930      	cbnz	r0, 8006f7c <__multiply+0x44>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	4b44      	ldr	r3, [pc, #272]	; (8007084 <__multiply+0x14c>)
 8006f72:	4845      	ldr	r0, [pc, #276]	; (8007088 <__multiply+0x150>)
 8006f74:	f240 115d 	movw	r1, #349	; 0x15d
 8006f78:	f7fe fe04 	bl	8005b84 <__assert_func>
 8006f7c:	f100 0514 	add.w	r5, r0, #20
 8006f80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006f84:	462b      	mov	r3, r5
 8006f86:	2200      	movs	r2, #0
 8006f88:	4543      	cmp	r3, r8
 8006f8a:	d321      	bcc.n	8006fd0 <__multiply+0x98>
 8006f8c:	f104 0314 	add.w	r3, r4, #20
 8006f90:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006f94:	f109 0314 	add.w	r3, r9, #20
 8006f98:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006f9c:	9202      	str	r2, [sp, #8]
 8006f9e:	1b3a      	subs	r2, r7, r4
 8006fa0:	3a15      	subs	r2, #21
 8006fa2:	f022 0203 	bic.w	r2, r2, #3
 8006fa6:	3204      	adds	r2, #4
 8006fa8:	f104 0115 	add.w	r1, r4, #21
 8006fac:	428f      	cmp	r7, r1
 8006fae:	bf38      	it	cc
 8006fb0:	2204      	movcc	r2, #4
 8006fb2:	9201      	str	r2, [sp, #4]
 8006fb4:	9a02      	ldr	r2, [sp, #8]
 8006fb6:	9303      	str	r3, [sp, #12]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d80c      	bhi.n	8006fd6 <__multiply+0x9e>
 8006fbc:	2e00      	cmp	r6, #0
 8006fbe:	dd03      	ble.n	8006fc8 <__multiply+0x90>
 8006fc0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d05a      	beq.n	800707e <__multiply+0x146>
 8006fc8:	6106      	str	r6, [r0, #16]
 8006fca:	b005      	add	sp, #20
 8006fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fd0:	f843 2b04 	str.w	r2, [r3], #4
 8006fd4:	e7d8      	b.n	8006f88 <__multiply+0x50>
 8006fd6:	f8b3 a000 	ldrh.w	sl, [r3]
 8006fda:	f1ba 0f00 	cmp.w	sl, #0
 8006fde:	d024      	beq.n	800702a <__multiply+0xf2>
 8006fe0:	f104 0e14 	add.w	lr, r4, #20
 8006fe4:	46a9      	mov	r9, r5
 8006fe6:	f04f 0c00 	mov.w	ip, #0
 8006fea:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006fee:	f8d9 1000 	ldr.w	r1, [r9]
 8006ff2:	fa1f fb82 	uxth.w	fp, r2
 8006ff6:	b289      	uxth	r1, r1
 8006ff8:	fb0a 110b 	mla	r1, sl, fp, r1
 8006ffc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007000:	f8d9 2000 	ldr.w	r2, [r9]
 8007004:	4461      	add	r1, ip
 8007006:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800700a:	fb0a c20b 	mla	r2, sl, fp, ip
 800700e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007012:	b289      	uxth	r1, r1
 8007014:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007018:	4577      	cmp	r7, lr
 800701a:	f849 1b04 	str.w	r1, [r9], #4
 800701e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007022:	d8e2      	bhi.n	8006fea <__multiply+0xb2>
 8007024:	9a01      	ldr	r2, [sp, #4]
 8007026:	f845 c002 	str.w	ip, [r5, r2]
 800702a:	9a03      	ldr	r2, [sp, #12]
 800702c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007030:	3304      	adds	r3, #4
 8007032:	f1b9 0f00 	cmp.w	r9, #0
 8007036:	d020      	beq.n	800707a <__multiply+0x142>
 8007038:	6829      	ldr	r1, [r5, #0]
 800703a:	f104 0c14 	add.w	ip, r4, #20
 800703e:	46ae      	mov	lr, r5
 8007040:	f04f 0a00 	mov.w	sl, #0
 8007044:	f8bc b000 	ldrh.w	fp, [ip]
 8007048:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800704c:	fb09 220b 	mla	r2, r9, fp, r2
 8007050:	4492      	add	sl, r2
 8007052:	b289      	uxth	r1, r1
 8007054:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007058:	f84e 1b04 	str.w	r1, [lr], #4
 800705c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007060:	f8be 1000 	ldrh.w	r1, [lr]
 8007064:	0c12      	lsrs	r2, r2, #16
 8007066:	fb09 1102 	mla	r1, r9, r2, r1
 800706a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800706e:	4567      	cmp	r7, ip
 8007070:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007074:	d8e6      	bhi.n	8007044 <__multiply+0x10c>
 8007076:	9a01      	ldr	r2, [sp, #4]
 8007078:	50a9      	str	r1, [r5, r2]
 800707a:	3504      	adds	r5, #4
 800707c:	e79a      	b.n	8006fb4 <__multiply+0x7c>
 800707e:	3e01      	subs	r6, #1
 8007080:	e79c      	b.n	8006fbc <__multiply+0x84>
 8007082:	bf00      	nop
 8007084:	08008f03 	.word	0x08008f03
 8007088:	08008f74 	.word	0x08008f74

0800708c <__pow5mult>:
 800708c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007090:	4615      	mov	r5, r2
 8007092:	f012 0203 	ands.w	r2, r2, #3
 8007096:	4606      	mov	r6, r0
 8007098:	460f      	mov	r7, r1
 800709a:	d007      	beq.n	80070ac <__pow5mult+0x20>
 800709c:	4c25      	ldr	r4, [pc, #148]	; (8007134 <__pow5mult+0xa8>)
 800709e:	3a01      	subs	r2, #1
 80070a0:	2300      	movs	r3, #0
 80070a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80070a6:	f7ff fe9b 	bl	8006de0 <__multadd>
 80070aa:	4607      	mov	r7, r0
 80070ac:	10ad      	asrs	r5, r5, #2
 80070ae:	d03d      	beq.n	800712c <__pow5mult+0xa0>
 80070b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80070b2:	b97c      	cbnz	r4, 80070d4 <__pow5mult+0x48>
 80070b4:	2010      	movs	r0, #16
 80070b6:	f7fd fa9b 	bl	80045f0 <malloc>
 80070ba:	4602      	mov	r2, r0
 80070bc:	6270      	str	r0, [r6, #36]	; 0x24
 80070be:	b928      	cbnz	r0, 80070cc <__pow5mult+0x40>
 80070c0:	4b1d      	ldr	r3, [pc, #116]	; (8007138 <__pow5mult+0xac>)
 80070c2:	481e      	ldr	r0, [pc, #120]	; (800713c <__pow5mult+0xb0>)
 80070c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80070c8:	f7fe fd5c 	bl	8005b84 <__assert_func>
 80070cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070d0:	6004      	str	r4, [r0, #0]
 80070d2:	60c4      	str	r4, [r0, #12]
 80070d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80070d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80070dc:	b94c      	cbnz	r4, 80070f2 <__pow5mult+0x66>
 80070de:	f240 2171 	movw	r1, #625	; 0x271
 80070e2:	4630      	mov	r0, r6
 80070e4:	f7ff ff12 	bl	8006f0c <__i2b>
 80070e8:	2300      	movs	r3, #0
 80070ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80070ee:	4604      	mov	r4, r0
 80070f0:	6003      	str	r3, [r0, #0]
 80070f2:	f04f 0900 	mov.w	r9, #0
 80070f6:	07eb      	lsls	r3, r5, #31
 80070f8:	d50a      	bpl.n	8007110 <__pow5mult+0x84>
 80070fa:	4639      	mov	r1, r7
 80070fc:	4622      	mov	r2, r4
 80070fe:	4630      	mov	r0, r6
 8007100:	f7ff ff1a 	bl	8006f38 <__multiply>
 8007104:	4639      	mov	r1, r7
 8007106:	4680      	mov	r8, r0
 8007108:	4630      	mov	r0, r6
 800710a:	f7ff fe47 	bl	8006d9c <_Bfree>
 800710e:	4647      	mov	r7, r8
 8007110:	106d      	asrs	r5, r5, #1
 8007112:	d00b      	beq.n	800712c <__pow5mult+0xa0>
 8007114:	6820      	ldr	r0, [r4, #0]
 8007116:	b938      	cbnz	r0, 8007128 <__pow5mult+0x9c>
 8007118:	4622      	mov	r2, r4
 800711a:	4621      	mov	r1, r4
 800711c:	4630      	mov	r0, r6
 800711e:	f7ff ff0b 	bl	8006f38 <__multiply>
 8007122:	6020      	str	r0, [r4, #0]
 8007124:	f8c0 9000 	str.w	r9, [r0]
 8007128:	4604      	mov	r4, r0
 800712a:	e7e4      	b.n	80070f6 <__pow5mult+0x6a>
 800712c:	4638      	mov	r0, r7
 800712e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007132:	bf00      	nop
 8007134:	080090c0 	.word	0x080090c0
 8007138:	08008c08 	.word	0x08008c08
 800713c:	08008f74 	.word	0x08008f74

08007140 <__lshift>:
 8007140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007144:	460c      	mov	r4, r1
 8007146:	6849      	ldr	r1, [r1, #4]
 8007148:	6923      	ldr	r3, [r4, #16]
 800714a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800714e:	68a3      	ldr	r3, [r4, #8]
 8007150:	4607      	mov	r7, r0
 8007152:	4691      	mov	r9, r2
 8007154:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007158:	f108 0601 	add.w	r6, r8, #1
 800715c:	42b3      	cmp	r3, r6
 800715e:	db0b      	blt.n	8007178 <__lshift+0x38>
 8007160:	4638      	mov	r0, r7
 8007162:	f7ff fddb 	bl	8006d1c <_Balloc>
 8007166:	4605      	mov	r5, r0
 8007168:	b948      	cbnz	r0, 800717e <__lshift+0x3e>
 800716a:	4602      	mov	r2, r0
 800716c:	4b2a      	ldr	r3, [pc, #168]	; (8007218 <__lshift+0xd8>)
 800716e:	482b      	ldr	r0, [pc, #172]	; (800721c <__lshift+0xdc>)
 8007170:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007174:	f7fe fd06 	bl	8005b84 <__assert_func>
 8007178:	3101      	adds	r1, #1
 800717a:	005b      	lsls	r3, r3, #1
 800717c:	e7ee      	b.n	800715c <__lshift+0x1c>
 800717e:	2300      	movs	r3, #0
 8007180:	f100 0114 	add.w	r1, r0, #20
 8007184:	f100 0210 	add.w	r2, r0, #16
 8007188:	4618      	mov	r0, r3
 800718a:	4553      	cmp	r3, sl
 800718c:	db37      	blt.n	80071fe <__lshift+0xbe>
 800718e:	6920      	ldr	r0, [r4, #16]
 8007190:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007194:	f104 0314 	add.w	r3, r4, #20
 8007198:	f019 091f 	ands.w	r9, r9, #31
 800719c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80071a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80071a4:	d02f      	beq.n	8007206 <__lshift+0xc6>
 80071a6:	f1c9 0e20 	rsb	lr, r9, #32
 80071aa:	468a      	mov	sl, r1
 80071ac:	f04f 0c00 	mov.w	ip, #0
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	fa02 f209 	lsl.w	r2, r2, r9
 80071b6:	ea42 020c 	orr.w	r2, r2, ip
 80071ba:	f84a 2b04 	str.w	r2, [sl], #4
 80071be:	f853 2b04 	ldr.w	r2, [r3], #4
 80071c2:	4298      	cmp	r0, r3
 80071c4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80071c8:	d8f2      	bhi.n	80071b0 <__lshift+0x70>
 80071ca:	1b03      	subs	r3, r0, r4
 80071cc:	3b15      	subs	r3, #21
 80071ce:	f023 0303 	bic.w	r3, r3, #3
 80071d2:	3304      	adds	r3, #4
 80071d4:	f104 0215 	add.w	r2, r4, #21
 80071d8:	4290      	cmp	r0, r2
 80071da:	bf38      	it	cc
 80071dc:	2304      	movcc	r3, #4
 80071de:	f841 c003 	str.w	ip, [r1, r3]
 80071e2:	f1bc 0f00 	cmp.w	ip, #0
 80071e6:	d001      	beq.n	80071ec <__lshift+0xac>
 80071e8:	f108 0602 	add.w	r6, r8, #2
 80071ec:	3e01      	subs	r6, #1
 80071ee:	4638      	mov	r0, r7
 80071f0:	612e      	str	r6, [r5, #16]
 80071f2:	4621      	mov	r1, r4
 80071f4:	f7ff fdd2 	bl	8006d9c <_Bfree>
 80071f8:	4628      	mov	r0, r5
 80071fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8007202:	3301      	adds	r3, #1
 8007204:	e7c1      	b.n	800718a <__lshift+0x4a>
 8007206:	3904      	subs	r1, #4
 8007208:	f853 2b04 	ldr.w	r2, [r3], #4
 800720c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007210:	4298      	cmp	r0, r3
 8007212:	d8f9      	bhi.n	8007208 <__lshift+0xc8>
 8007214:	e7ea      	b.n	80071ec <__lshift+0xac>
 8007216:	bf00      	nop
 8007218:	08008f03 	.word	0x08008f03
 800721c:	08008f74 	.word	0x08008f74

08007220 <__mcmp>:
 8007220:	b530      	push	{r4, r5, lr}
 8007222:	6902      	ldr	r2, [r0, #16]
 8007224:	690c      	ldr	r4, [r1, #16]
 8007226:	1b12      	subs	r2, r2, r4
 8007228:	d10e      	bne.n	8007248 <__mcmp+0x28>
 800722a:	f100 0314 	add.w	r3, r0, #20
 800722e:	3114      	adds	r1, #20
 8007230:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007234:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007238:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800723c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007240:	42a5      	cmp	r5, r4
 8007242:	d003      	beq.n	800724c <__mcmp+0x2c>
 8007244:	d305      	bcc.n	8007252 <__mcmp+0x32>
 8007246:	2201      	movs	r2, #1
 8007248:	4610      	mov	r0, r2
 800724a:	bd30      	pop	{r4, r5, pc}
 800724c:	4283      	cmp	r3, r0
 800724e:	d3f3      	bcc.n	8007238 <__mcmp+0x18>
 8007250:	e7fa      	b.n	8007248 <__mcmp+0x28>
 8007252:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007256:	e7f7      	b.n	8007248 <__mcmp+0x28>

08007258 <__mdiff>:
 8007258:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800725c:	460c      	mov	r4, r1
 800725e:	4606      	mov	r6, r0
 8007260:	4611      	mov	r1, r2
 8007262:	4620      	mov	r0, r4
 8007264:	4690      	mov	r8, r2
 8007266:	f7ff ffdb 	bl	8007220 <__mcmp>
 800726a:	1e05      	subs	r5, r0, #0
 800726c:	d110      	bne.n	8007290 <__mdiff+0x38>
 800726e:	4629      	mov	r1, r5
 8007270:	4630      	mov	r0, r6
 8007272:	f7ff fd53 	bl	8006d1c <_Balloc>
 8007276:	b930      	cbnz	r0, 8007286 <__mdiff+0x2e>
 8007278:	4b3a      	ldr	r3, [pc, #232]	; (8007364 <__mdiff+0x10c>)
 800727a:	4602      	mov	r2, r0
 800727c:	f240 2132 	movw	r1, #562	; 0x232
 8007280:	4839      	ldr	r0, [pc, #228]	; (8007368 <__mdiff+0x110>)
 8007282:	f7fe fc7f 	bl	8005b84 <__assert_func>
 8007286:	2301      	movs	r3, #1
 8007288:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800728c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007290:	bfa4      	itt	ge
 8007292:	4643      	movge	r3, r8
 8007294:	46a0      	movge	r8, r4
 8007296:	4630      	mov	r0, r6
 8007298:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800729c:	bfa6      	itte	ge
 800729e:	461c      	movge	r4, r3
 80072a0:	2500      	movge	r5, #0
 80072a2:	2501      	movlt	r5, #1
 80072a4:	f7ff fd3a 	bl	8006d1c <_Balloc>
 80072a8:	b920      	cbnz	r0, 80072b4 <__mdiff+0x5c>
 80072aa:	4b2e      	ldr	r3, [pc, #184]	; (8007364 <__mdiff+0x10c>)
 80072ac:	4602      	mov	r2, r0
 80072ae:	f44f 7110 	mov.w	r1, #576	; 0x240
 80072b2:	e7e5      	b.n	8007280 <__mdiff+0x28>
 80072b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80072b8:	6926      	ldr	r6, [r4, #16]
 80072ba:	60c5      	str	r5, [r0, #12]
 80072bc:	f104 0914 	add.w	r9, r4, #20
 80072c0:	f108 0514 	add.w	r5, r8, #20
 80072c4:	f100 0e14 	add.w	lr, r0, #20
 80072c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80072cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80072d0:	f108 0210 	add.w	r2, r8, #16
 80072d4:	46f2      	mov	sl, lr
 80072d6:	2100      	movs	r1, #0
 80072d8:	f859 3b04 	ldr.w	r3, [r9], #4
 80072dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80072e0:	fa1f f883 	uxth.w	r8, r3
 80072e4:	fa11 f18b 	uxtah	r1, r1, fp
 80072e8:	0c1b      	lsrs	r3, r3, #16
 80072ea:	eba1 0808 	sub.w	r8, r1, r8
 80072ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80072f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80072f6:	fa1f f888 	uxth.w	r8, r8
 80072fa:	1419      	asrs	r1, r3, #16
 80072fc:	454e      	cmp	r6, r9
 80072fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007302:	f84a 3b04 	str.w	r3, [sl], #4
 8007306:	d8e7      	bhi.n	80072d8 <__mdiff+0x80>
 8007308:	1b33      	subs	r3, r6, r4
 800730a:	3b15      	subs	r3, #21
 800730c:	f023 0303 	bic.w	r3, r3, #3
 8007310:	3304      	adds	r3, #4
 8007312:	3415      	adds	r4, #21
 8007314:	42a6      	cmp	r6, r4
 8007316:	bf38      	it	cc
 8007318:	2304      	movcc	r3, #4
 800731a:	441d      	add	r5, r3
 800731c:	4473      	add	r3, lr
 800731e:	469e      	mov	lr, r3
 8007320:	462e      	mov	r6, r5
 8007322:	4566      	cmp	r6, ip
 8007324:	d30e      	bcc.n	8007344 <__mdiff+0xec>
 8007326:	f10c 0203 	add.w	r2, ip, #3
 800732a:	1b52      	subs	r2, r2, r5
 800732c:	f022 0203 	bic.w	r2, r2, #3
 8007330:	3d03      	subs	r5, #3
 8007332:	45ac      	cmp	ip, r5
 8007334:	bf38      	it	cc
 8007336:	2200      	movcc	r2, #0
 8007338:	441a      	add	r2, r3
 800733a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800733e:	b17b      	cbz	r3, 8007360 <__mdiff+0x108>
 8007340:	6107      	str	r7, [r0, #16]
 8007342:	e7a3      	b.n	800728c <__mdiff+0x34>
 8007344:	f856 8b04 	ldr.w	r8, [r6], #4
 8007348:	fa11 f288 	uxtah	r2, r1, r8
 800734c:	1414      	asrs	r4, r2, #16
 800734e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007352:	b292      	uxth	r2, r2
 8007354:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007358:	f84e 2b04 	str.w	r2, [lr], #4
 800735c:	1421      	asrs	r1, r4, #16
 800735e:	e7e0      	b.n	8007322 <__mdiff+0xca>
 8007360:	3f01      	subs	r7, #1
 8007362:	e7ea      	b.n	800733a <__mdiff+0xe2>
 8007364:	08008f03 	.word	0x08008f03
 8007368:	08008f74 	.word	0x08008f74

0800736c <__d2b>:
 800736c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007370:	4689      	mov	r9, r1
 8007372:	2101      	movs	r1, #1
 8007374:	ec57 6b10 	vmov	r6, r7, d0
 8007378:	4690      	mov	r8, r2
 800737a:	f7ff fccf 	bl	8006d1c <_Balloc>
 800737e:	4604      	mov	r4, r0
 8007380:	b930      	cbnz	r0, 8007390 <__d2b+0x24>
 8007382:	4602      	mov	r2, r0
 8007384:	4b25      	ldr	r3, [pc, #148]	; (800741c <__d2b+0xb0>)
 8007386:	4826      	ldr	r0, [pc, #152]	; (8007420 <__d2b+0xb4>)
 8007388:	f240 310a 	movw	r1, #778	; 0x30a
 800738c:	f7fe fbfa 	bl	8005b84 <__assert_func>
 8007390:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007394:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007398:	bb35      	cbnz	r5, 80073e8 <__d2b+0x7c>
 800739a:	2e00      	cmp	r6, #0
 800739c:	9301      	str	r3, [sp, #4]
 800739e:	d028      	beq.n	80073f2 <__d2b+0x86>
 80073a0:	4668      	mov	r0, sp
 80073a2:	9600      	str	r6, [sp, #0]
 80073a4:	f7ff fd82 	bl	8006eac <__lo0bits>
 80073a8:	9900      	ldr	r1, [sp, #0]
 80073aa:	b300      	cbz	r0, 80073ee <__d2b+0x82>
 80073ac:	9a01      	ldr	r2, [sp, #4]
 80073ae:	f1c0 0320 	rsb	r3, r0, #32
 80073b2:	fa02 f303 	lsl.w	r3, r2, r3
 80073b6:	430b      	orrs	r3, r1
 80073b8:	40c2      	lsrs	r2, r0
 80073ba:	6163      	str	r3, [r4, #20]
 80073bc:	9201      	str	r2, [sp, #4]
 80073be:	9b01      	ldr	r3, [sp, #4]
 80073c0:	61a3      	str	r3, [r4, #24]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	bf14      	ite	ne
 80073c6:	2202      	movne	r2, #2
 80073c8:	2201      	moveq	r2, #1
 80073ca:	6122      	str	r2, [r4, #16]
 80073cc:	b1d5      	cbz	r5, 8007404 <__d2b+0x98>
 80073ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80073d2:	4405      	add	r5, r0
 80073d4:	f8c9 5000 	str.w	r5, [r9]
 80073d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80073dc:	f8c8 0000 	str.w	r0, [r8]
 80073e0:	4620      	mov	r0, r4
 80073e2:	b003      	add	sp, #12
 80073e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073ec:	e7d5      	b.n	800739a <__d2b+0x2e>
 80073ee:	6161      	str	r1, [r4, #20]
 80073f0:	e7e5      	b.n	80073be <__d2b+0x52>
 80073f2:	a801      	add	r0, sp, #4
 80073f4:	f7ff fd5a 	bl	8006eac <__lo0bits>
 80073f8:	9b01      	ldr	r3, [sp, #4]
 80073fa:	6163      	str	r3, [r4, #20]
 80073fc:	2201      	movs	r2, #1
 80073fe:	6122      	str	r2, [r4, #16]
 8007400:	3020      	adds	r0, #32
 8007402:	e7e3      	b.n	80073cc <__d2b+0x60>
 8007404:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007408:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800740c:	f8c9 0000 	str.w	r0, [r9]
 8007410:	6918      	ldr	r0, [r3, #16]
 8007412:	f7ff fd2b 	bl	8006e6c <__hi0bits>
 8007416:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800741a:	e7df      	b.n	80073dc <__d2b+0x70>
 800741c:	08008f03 	.word	0x08008f03
 8007420:	08008f74 	.word	0x08008f74

08007424 <_calloc_r>:
 8007424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007426:	fba1 2402 	umull	r2, r4, r1, r2
 800742a:	b94c      	cbnz	r4, 8007440 <_calloc_r+0x1c>
 800742c:	4611      	mov	r1, r2
 800742e:	9201      	str	r2, [sp, #4]
 8007430:	f7fd fbd4 	bl	8004bdc <_malloc_r>
 8007434:	9a01      	ldr	r2, [sp, #4]
 8007436:	4605      	mov	r5, r0
 8007438:	b930      	cbnz	r0, 8007448 <_calloc_r+0x24>
 800743a:	4628      	mov	r0, r5
 800743c:	b003      	add	sp, #12
 800743e:	bd30      	pop	{r4, r5, pc}
 8007440:	220c      	movs	r2, #12
 8007442:	6002      	str	r2, [r0, #0]
 8007444:	2500      	movs	r5, #0
 8007446:	e7f8      	b.n	800743a <_calloc_r+0x16>
 8007448:	4621      	mov	r1, r4
 800744a:	f7fd f8e1 	bl	8004610 <memset>
 800744e:	e7f4      	b.n	800743a <_calloc_r+0x16>

08007450 <__ssputs_r>:
 8007450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007454:	688e      	ldr	r6, [r1, #8]
 8007456:	429e      	cmp	r6, r3
 8007458:	4682      	mov	sl, r0
 800745a:	460c      	mov	r4, r1
 800745c:	4690      	mov	r8, r2
 800745e:	461f      	mov	r7, r3
 8007460:	d838      	bhi.n	80074d4 <__ssputs_r+0x84>
 8007462:	898a      	ldrh	r2, [r1, #12]
 8007464:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007468:	d032      	beq.n	80074d0 <__ssputs_r+0x80>
 800746a:	6825      	ldr	r5, [r4, #0]
 800746c:	6909      	ldr	r1, [r1, #16]
 800746e:	eba5 0901 	sub.w	r9, r5, r1
 8007472:	6965      	ldr	r5, [r4, #20]
 8007474:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007478:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800747c:	3301      	adds	r3, #1
 800747e:	444b      	add	r3, r9
 8007480:	106d      	asrs	r5, r5, #1
 8007482:	429d      	cmp	r5, r3
 8007484:	bf38      	it	cc
 8007486:	461d      	movcc	r5, r3
 8007488:	0553      	lsls	r3, r2, #21
 800748a:	d531      	bpl.n	80074f0 <__ssputs_r+0xa0>
 800748c:	4629      	mov	r1, r5
 800748e:	f7fd fba5 	bl	8004bdc <_malloc_r>
 8007492:	4606      	mov	r6, r0
 8007494:	b950      	cbnz	r0, 80074ac <__ssputs_r+0x5c>
 8007496:	230c      	movs	r3, #12
 8007498:	f8ca 3000 	str.w	r3, [sl]
 800749c:	89a3      	ldrh	r3, [r4, #12]
 800749e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074a2:	81a3      	strh	r3, [r4, #12]
 80074a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074ac:	6921      	ldr	r1, [r4, #16]
 80074ae:	464a      	mov	r2, r9
 80074b0:	f7ff fc19 	bl	8006ce6 <memcpy>
 80074b4:	89a3      	ldrh	r3, [r4, #12]
 80074b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074be:	81a3      	strh	r3, [r4, #12]
 80074c0:	6126      	str	r6, [r4, #16]
 80074c2:	6165      	str	r5, [r4, #20]
 80074c4:	444e      	add	r6, r9
 80074c6:	eba5 0509 	sub.w	r5, r5, r9
 80074ca:	6026      	str	r6, [r4, #0]
 80074cc:	60a5      	str	r5, [r4, #8]
 80074ce:	463e      	mov	r6, r7
 80074d0:	42be      	cmp	r6, r7
 80074d2:	d900      	bls.n	80074d6 <__ssputs_r+0x86>
 80074d4:	463e      	mov	r6, r7
 80074d6:	6820      	ldr	r0, [r4, #0]
 80074d8:	4632      	mov	r2, r6
 80074da:	4641      	mov	r1, r8
 80074dc:	f000 fe24 	bl	8008128 <memmove>
 80074e0:	68a3      	ldr	r3, [r4, #8]
 80074e2:	1b9b      	subs	r3, r3, r6
 80074e4:	60a3      	str	r3, [r4, #8]
 80074e6:	6823      	ldr	r3, [r4, #0]
 80074e8:	4433      	add	r3, r6
 80074ea:	6023      	str	r3, [r4, #0]
 80074ec:	2000      	movs	r0, #0
 80074ee:	e7db      	b.n	80074a8 <__ssputs_r+0x58>
 80074f0:	462a      	mov	r2, r5
 80074f2:	f000 fe33 	bl	800815c <_realloc_r>
 80074f6:	4606      	mov	r6, r0
 80074f8:	2800      	cmp	r0, #0
 80074fa:	d1e1      	bne.n	80074c0 <__ssputs_r+0x70>
 80074fc:	6921      	ldr	r1, [r4, #16]
 80074fe:	4650      	mov	r0, sl
 8007500:	f7fd fb00 	bl	8004b04 <_free_r>
 8007504:	e7c7      	b.n	8007496 <__ssputs_r+0x46>
	...

08007508 <_svfiprintf_r>:
 8007508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800750c:	4698      	mov	r8, r3
 800750e:	898b      	ldrh	r3, [r1, #12]
 8007510:	061b      	lsls	r3, r3, #24
 8007512:	b09d      	sub	sp, #116	; 0x74
 8007514:	4607      	mov	r7, r0
 8007516:	460d      	mov	r5, r1
 8007518:	4614      	mov	r4, r2
 800751a:	d50e      	bpl.n	800753a <_svfiprintf_r+0x32>
 800751c:	690b      	ldr	r3, [r1, #16]
 800751e:	b963      	cbnz	r3, 800753a <_svfiprintf_r+0x32>
 8007520:	2140      	movs	r1, #64	; 0x40
 8007522:	f7fd fb5b 	bl	8004bdc <_malloc_r>
 8007526:	6028      	str	r0, [r5, #0]
 8007528:	6128      	str	r0, [r5, #16]
 800752a:	b920      	cbnz	r0, 8007536 <_svfiprintf_r+0x2e>
 800752c:	230c      	movs	r3, #12
 800752e:	603b      	str	r3, [r7, #0]
 8007530:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007534:	e0d1      	b.n	80076da <_svfiprintf_r+0x1d2>
 8007536:	2340      	movs	r3, #64	; 0x40
 8007538:	616b      	str	r3, [r5, #20]
 800753a:	2300      	movs	r3, #0
 800753c:	9309      	str	r3, [sp, #36]	; 0x24
 800753e:	2320      	movs	r3, #32
 8007540:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007544:	f8cd 800c 	str.w	r8, [sp, #12]
 8007548:	2330      	movs	r3, #48	; 0x30
 800754a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80076f4 <_svfiprintf_r+0x1ec>
 800754e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007552:	f04f 0901 	mov.w	r9, #1
 8007556:	4623      	mov	r3, r4
 8007558:	469a      	mov	sl, r3
 800755a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800755e:	b10a      	cbz	r2, 8007564 <_svfiprintf_r+0x5c>
 8007560:	2a25      	cmp	r2, #37	; 0x25
 8007562:	d1f9      	bne.n	8007558 <_svfiprintf_r+0x50>
 8007564:	ebba 0b04 	subs.w	fp, sl, r4
 8007568:	d00b      	beq.n	8007582 <_svfiprintf_r+0x7a>
 800756a:	465b      	mov	r3, fp
 800756c:	4622      	mov	r2, r4
 800756e:	4629      	mov	r1, r5
 8007570:	4638      	mov	r0, r7
 8007572:	f7ff ff6d 	bl	8007450 <__ssputs_r>
 8007576:	3001      	adds	r0, #1
 8007578:	f000 80aa 	beq.w	80076d0 <_svfiprintf_r+0x1c8>
 800757c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800757e:	445a      	add	r2, fp
 8007580:	9209      	str	r2, [sp, #36]	; 0x24
 8007582:	f89a 3000 	ldrb.w	r3, [sl]
 8007586:	2b00      	cmp	r3, #0
 8007588:	f000 80a2 	beq.w	80076d0 <_svfiprintf_r+0x1c8>
 800758c:	2300      	movs	r3, #0
 800758e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007592:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007596:	f10a 0a01 	add.w	sl, sl, #1
 800759a:	9304      	str	r3, [sp, #16]
 800759c:	9307      	str	r3, [sp, #28]
 800759e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075a2:	931a      	str	r3, [sp, #104]	; 0x68
 80075a4:	4654      	mov	r4, sl
 80075a6:	2205      	movs	r2, #5
 80075a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075ac:	4851      	ldr	r0, [pc, #324]	; (80076f4 <_svfiprintf_r+0x1ec>)
 80075ae:	f7f8 fe17 	bl	80001e0 <memchr>
 80075b2:	9a04      	ldr	r2, [sp, #16]
 80075b4:	b9d8      	cbnz	r0, 80075ee <_svfiprintf_r+0xe6>
 80075b6:	06d0      	lsls	r0, r2, #27
 80075b8:	bf44      	itt	mi
 80075ba:	2320      	movmi	r3, #32
 80075bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075c0:	0711      	lsls	r1, r2, #28
 80075c2:	bf44      	itt	mi
 80075c4:	232b      	movmi	r3, #43	; 0x2b
 80075c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075ca:	f89a 3000 	ldrb.w	r3, [sl]
 80075ce:	2b2a      	cmp	r3, #42	; 0x2a
 80075d0:	d015      	beq.n	80075fe <_svfiprintf_r+0xf6>
 80075d2:	9a07      	ldr	r2, [sp, #28]
 80075d4:	4654      	mov	r4, sl
 80075d6:	2000      	movs	r0, #0
 80075d8:	f04f 0c0a 	mov.w	ip, #10
 80075dc:	4621      	mov	r1, r4
 80075de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075e2:	3b30      	subs	r3, #48	; 0x30
 80075e4:	2b09      	cmp	r3, #9
 80075e6:	d94e      	bls.n	8007686 <_svfiprintf_r+0x17e>
 80075e8:	b1b0      	cbz	r0, 8007618 <_svfiprintf_r+0x110>
 80075ea:	9207      	str	r2, [sp, #28]
 80075ec:	e014      	b.n	8007618 <_svfiprintf_r+0x110>
 80075ee:	eba0 0308 	sub.w	r3, r0, r8
 80075f2:	fa09 f303 	lsl.w	r3, r9, r3
 80075f6:	4313      	orrs	r3, r2
 80075f8:	9304      	str	r3, [sp, #16]
 80075fa:	46a2      	mov	sl, r4
 80075fc:	e7d2      	b.n	80075a4 <_svfiprintf_r+0x9c>
 80075fe:	9b03      	ldr	r3, [sp, #12]
 8007600:	1d19      	adds	r1, r3, #4
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	9103      	str	r1, [sp, #12]
 8007606:	2b00      	cmp	r3, #0
 8007608:	bfbb      	ittet	lt
 800760a:	425b      	neglt	r3, r3
 800760c:	f042 0202 	orrlt.w	r2, r2, #2
 8007610:	9307      	strge	r3, [sp, #28]
 8007612:	9307      	strlt	r3, [sp, #28]
 8007614:	bfb8      	it	lt
 8007616:	9204      	strlt	r2, [sp, #16]
 8007618:	7823      	ldrb	r3, [r4, #0]
 800761a:	2b2e      	cmp	r3, #46	; 0x2e
 800761c:	d10c      	bne.n	8007638 <_svfiprintf_r+0x130>
 800761e:	7863      	ldrb	r3, [r4, #1]
 8007620:	2b2a      	cmp	r3, #42	; 0x2a
 8007622:	d135      	bne.n	8007690 <_svfiprintf_r+0x188>
 8007624:	9b03      	ldr	r3, [sp, #12]
 8007626:	1d1a      	adds	r2, r3, #4
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	9203      	str	r2, [sp, #12]
 800762c:	2b00      	cmp	r3, #0
 800762e:	bfb8      	it	lt
 8007630:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007634:	3402      	adds	r4, #2
 8007636:	9305      	str	r3, [sp, #20]
 8007638:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007704 <_svfiprintf_r+0x1fc>
 800763c:	7821      	ldrb	r1, [r4, #0]
 800763e:	2203      	movs	r2, #3
 8007640:	4650      	mov	r0, sl
 8007642:	f7f8 fdcd 	bl	80001e0 <memchr>
 8007646:	b140      	cbz	r0, 800765a <_svfiprintf_r+0x152>
 8007648:	2340      	movs	r3, #64	; 0x40
 800764a:	eba0 000a 	sub.w	r0, r0, sl
 800764e:	fa03 f000 	lsl.w	r0, r3, r0
 8007652:	9b04      	ldr	r3, [sp, #16]
 8007654:	4303      	orrs	r3, r0
 8007656:	3401      	adds	r4, #1
 8007658:	9304      	str	r3, [sp, #16]
 800765a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800765e:	4826      	ldr	r0, [pc, #152]	; (80076f8 <_svfiprintf_r+0x1f0>)
 8007660:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007664:	2206      	movs	r2, #6
 8007666:	f7f8 fdbb 	bl	80001e0 <memchr>
 800766a:	2800      	cmp	r0, #0
 800766c:	d038      	beq.n	80076e0 <_svfiprintf_r+0x1d8>
 800766e:	4b23      	ldr	r3, [pc, #140]	; (80076fc <_svfiprintf_r+0x1f4>)
 8007670:	bb1b      	cbnz	r3, 80076ba <_svfiprintf_r+0x1b2>
 8007672:	9b03      	ldr	r3, [sp, #12]
 8007674:	3307      	adds	r3, #7
 8007676:	f023 0307 	bic.w	r3, r3, #7
 800767a:	3308      	adds	r3, #8
 800767c:	9303      	str	r3, [sp, #12]
 800767e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007680:	4433      	add	r3, r6
 8007682:	9309      	str	r3, [sp, #36]	; 0x24
 8007684:	e767      	b.n	8007556 <_svfiprintf_r+0x4e>
 8007686:	fb0c 3202 	mla	r2, ip, r2, r3
 800768a:	460c      	mov	r4, r1
 800768c:	2001      	movs	r0, #1
 800768e:	e7a5      	b.n	80075dc <_svfiprintf_r+0xd4>
 8007690:	2300      	movs	r3, #0
 8007692:	3401      	adds	r4, #1
 8007694:	9305      	str	r3, [sp, #20]
 8007696:	4619      	mov	r1, r3
 8007698:	f04f 0c0a 	mov.w	ip, #10
 800769c:	4620      	mov	r0, r4
 800769e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076a2:	3a30      	subs	r2, #48	; 0x30
 80076a4:	2a09      	cmp	r2, #9
 80076a6:	d903      	bls.n	80076b0 <_svfiprintf_r+0x1a8>
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d0c5      	beq.n	8007638 <_svfiprintf_r+0x130>
 80076ac:	9105      	str	r1, [sp, #20]
 80076ae:	e7c3      	b.n	8007638 <_svfiprintf_r+0x130>
 80076b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80076b4:	4604      	mov	r4, r0
 80076b6:	2301      	movs	r3, #1
 80076b8:	e7f0      	b.n	800769c <_svfiprintf_r+0x194>
 80076ba:	ab03      	add	r3, sp, #12
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	462a      	mov	r2, r5
 80076c0:	4b0f      	ldr	r3, [pc, #60]	; (8007700 <_svfiprintf_r+0x1f8>)
 80076c2:	a904      	add	r1, sp, #16
 80076c4:	4638      	mov	r0, r7
 80076c6:	f7fd fb9d 	bl	8004e04 <_printf_float>
 80076ca:	1c42      	adds	r2, r0, #1
 80076cc:	4606      	mov	r6, r0
 80076ce:	d1d6      	bne.n	800767e <_svfiprintf_r+0x176>
 80076d0:	89ab      	ldrh	r3, [r5, #12]
 80076d2:	065b      	lsls	r3, r3, #25
 80076d4:	f53f af2c 	bmi.w	8007530 <_svfiprintf_r+0x28>
 80076d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076da:	b01d      	add	sp, #116	; 0x74
 80076dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076e0:	ab03      	add	r3, sp, #12
 80076e2:	9300      	str	r3, [sp, #0]
 80076e4:	462a      	mov	r2, r5
 80076e6:	4b06      	ldr	r3, [pc, #24]	; (8007700 <_svfiprintf_r+0x1f8>)
 80076e8:	a904      	add	r1, sp, #16
 80076ea:	4638      	mov	r0, r7
 80076ec:	f7fd fe2e 	bl	800534c <_printf_i>
 80076f0:	e7eb      	b.n	80076ca <_svfiprintf_r+0x1c2>
 80076f2:	bf00      	nop
 80076f4:	080090cc 	.word	0x080090cc
 80076f8:	080090d6 	.word	0x080090d6
 80076fc:	08004e05 	.word	0x08004e05
 8007700:	08007451 	.word	0x08007451
 8007704:	080090d2 	.word	0x080090d2

08007708 <__sfputc_r>:
 8007708:	6893      	ldr	r3, [r2, #8]
 800770a:	3b01      	subs	r3, #1
 800770c:	2b00      	cmp	r3, #0
 800770e:	b410      	push	{r4}
 8007710:	6093      	str	r3, [r2, #8]
 8007712:	da08      	bge.n	8007726 <__sfputc_r+0x1e>
 8007714:	6994      	ldr	r4, [r2, #24]
 8007716:	42a3      	cmp	r3, r4
 8007718:	db01      	blt.n	800771e <__sfputc_r+0x16>
 800771a:	290a      	cmp	r1, #10
 800771c:	d103      	bne.n	8007726 <__sfputc_r+0x1e>
 800771e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007722:	f000 babf 	b.w	8007ca4 <__swbuf_r>
 8007726:	6813      	ldr	r3, [r2, #0]
 8007728:	1c58      	adds	r0, r3, #1
 800772a:	6010      	str	r0, [r2, #0]
 800772c:	7019      	strb	r1, [r3, #0]
 800772e:	4608      	mov	r0, r1
 8007730:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007734:	4770      	bx	lr

08007736 <__sfputs_r>:
 8007736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007738:	4606      	mov	r6, r0
 800773a:	460f      	mov	r7, r1
 800773c:	4614      	mov	r4, r2
 800773e:	18d5      	adds	r5, r2, r3
 8007740:	42ac      	cmp	r4, r5
 8007742:	d101      	bne.n	8007748 <__sfputs_r+0x12>
 8007744:	2000      	movs	r0, #0
 8007746:	e007      	b.n	8007758 <__sfputs_r+0x22>
 8007748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800774c:	463a      	mov	r2, r7
 800774e:	4630      	mov	r0, r6
 8007750:	f7ff ffda 	bl	8007708 <__sfputc_r>
 8007754:	1c43      	adds	r3, r0, #1
 8007756:	d1f3      	bne.n	8007740 <__sfputs_r+0xa>
 8007758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800775c <_vfiprintf_r>:
 800775c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007760:	460d      	mov	r5, r1
 8007762:	b09d      	sub	sp, #116	; 0x74
 8007764:	4614      	mov	r4, r2
 8007766:	4698      	mov	r8, r3
 8007768:	4606      	mov	r6, r0
 800776a:	b118      	cbz	r0, 8007774 <_vfiprintf_r+0x18>
 800776c:	6983      	ldr	r3, [r0, #24]
 800776e:	b90b      	cbnz	r3, 8007774 <_vfiprintf_r+0x18>
 8007770:	f7ff f90c 	bl	800698c <__sinit>
 8007774:	4b89      	ldr	r3, [pc, #548]	; (800799c <_vfiprintf_r+0x240>)
 8007776:	429d      	cmp	r5, r3
 8007778:	d11b      	bne.n	80077b2 <_vfiprintf_r+0x56>
 800777a:	6875      	ldr	r5, [r6, #4]
 800777c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800777e:	07d9      	lsls	r1, r3, #31
 8007780:	d405      	bmi.n	800778e <_vfiprintf_r+0x32>
 8007782:	89ab      	ldrh	r3, [r5, #12]
 8007784:	059a      	lsls	r2, r3, #22
 8007786:	d402      	bmi.n	800778e <_vfiprintf_r+0x32>
 8007788:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800778a:	f7ff faa9 	bl	8006ce0 <__retarget_lock_acquire_recursive>
 800778e:	89ab      	ldrh	r3, [r5, #12]
 8007790:	071b      	lsls	r3, r3, #28
 8007792:	d501      	bpl.n	8007798 <_vfiprintf_r+0x3c>
 8007794:	692b      	ldr	r3, [r5, #16]
 8007796:	b9eb      	cbnz	r3, 80077d4 <_vfiprintf_r+0x78>
 8007798:	4629      	mov	r1, r5
 800779a:	4630      	mov	r0, r6
 800779c:	f000 fae6 	bl	8007d6c <__swsetup_r>
 80077a0:	b1c0      	cbz	r0, 80077d4 <_vfiprintf_r+0x78>
 80077a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077a4:	07dc      	lsls	r4, r3, #31
 80077a6:	d50e      	bpl.n	80077c6 <_vfiprintf_r+0x6a>
 80077a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077ac:	b01d      	add	sp, #116	; 0x74
 80077ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077b2:	4b7b      	ldr	r3, [pc, #492]	; (80079a0 <_vfiprintf_r+0x244>)
 80077b4:	429d      	cmp	r5, r3
 80077b6:	d101      	bne.n	80077bc <_vfiprintf_r+0x60>
 80077b8:	68b5      	ldr	r5, [r6, #8]
 80077ba:	e7df      	b.n	800777c <_vfiprintf_r+0x20>
 80077bc:	4b79      	ldr	r3, [pc, #484]	; (80079a4 <_vfiprintf_r+0x248>)
 80077be:	429d      	cmp	r5, r3
 80077c0:	bf08      	it	eq
 80077c2:	68f5      	ldreq	r5, [r6, #12]
 80077c4:	e7da      	b.n	800777c <_vfiprintf_r+0x20>
 80077c6:	89ab      	ldrh	r3, [r5, #12]
 80077c8:	0598      	lsls	r0, r3, #22
 80077ca:	d4ed      	bmi.n	80077a8 <_vfiprintf_r+0x4c>
 80077cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077ce:	f7ff fa89 	bl	8006ce4 <__retarget_lock_release_recursive>
 80077d2:	e7e9      	b.n	80077a8 <_vfiprintf_r+0x4c>
 80077d4:	2300      	movs	r3, #0
 80077d6:	9309      	str	r3, [sp, #36]	; 0x24
 80077d8:	2320      	movs	r3, #32
 80077da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077de:	f8cd 800c 	str.w	r8, [sp, #12]
 80077e2:	2330      	movs	r3, #48	; 0x30
 80077e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80079a8 <_vfiprintf_r+0x24c>
 80077e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077ec:	f04f 0901 	mov.w	r9, #1
 80077f0:	4623      	mov	r3, r4
 80077f2:	469a      	mov	sl, r3
 80077f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077f8:	b10a      	cbz	r2, 80077fe <_vfiprintf_r+0xa2>
 80077fa:	2a25      	cmp	r2, #37	; 0x25
 80077fc:	d1f9      	bne.n	80077f2 <_vfiprintf_r+0x96>
 80077fe:	ebba 0b04 	subs.w	fp, sl, r4
 8007802:	d00b      	beq.n	800781c <_vfiprintf_r+0xc0>
 8007804:	465b      	mov	r3, fp
 8007806:	4622      	mov	r2, r4
 8007808:	4629      	mov	r1, r5
 800780a:	4630      	mov	r0, r6
 800780c:	f7ff ff93 	bl	8007736 <__sfputs_r>
 8007810:	3001      	adds	r0, #1
 8007812:	f000 80aa 	beq.w	800796a <_vfiprintf_r+0x20e>
 8007816:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007818:	445a      	add	r2, fp
 800781a:	9209      	str	r2, [sp, #36]	; 0x24
 800781c:	f89a 3000 	ldrb.w	r3, [sl]
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 80a2 	beq.w	800796a <_vfiprintf_r+0x20e>
 8007826:	2300      	movs	r3, #0
 8007828:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800782c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007830:	f10a 0a01 	add.w	sl, sl, #1
 8007834:	9304      	str	r3, [sp, #16]
 8007836:	9307      	str	r3, [sp, #28]
 8007838:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800783c:	931a      	str	r3, [sp, #104]	; 0x68
 800783e:	4654      	mov	r4, sl
 8007840:	2205      	movs	r2, #5
 8007842:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007846:	4858      	ldr	r0, [pc, #352]	; (80079a8 <_vfiprintf_r+0x24c>)
 8007848:	f7f8 fcca 	bl	80001e0 <memchr>
 800784c:	9a04      	ldr	r2, [sp, #16]
 800784e:	b9d8      	cbnz	r0, 8007888 <_vfiprintf_r+0x12c>
 8007850:	06d1      	lsls	r1, r2, #27
 8007852:	bf44      	itt	mi
 8007854:	2320      	movmi	r3, #32
 8007856:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800785a:	0713      	lsls	r3, r2, #28
 800785c:	bf44      	itt	mi
 800785e:	232b      	movmi	r3, #43	; 0x2b
 8007860:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007864:	f89a 3000 	ldrb.w	r3, [sl]
 8007868:	2b2a      	cmp	r3, #42	; 0x2a
 800786a:	d015      	beq.n	8007898 <_vfiprintf_r+0x13c>
 800786c:	9a07      	ldr	r2, [sp, #28]
 800786e:	4654      	mov	r4, sl
 8007870:	2000      	movs	r0, #0
 8007872:	f04f 0c0a 	mov.w	ip, #10
 8007876:	4621      	mov	r1, r4
 8007878:	f811 3b01 	ldrb.w	r3, [r1], #1
 800787c:	3b30      	subs	r3, #48	; 0x30
 800787e:	2b09      	cmp	r3, #9
 8007880:	d94e      	bls.n	8007920 <_vfiprintf_r+0x1c4>
 8007882:	b1b0      	cbz	r0, 80078b2 <_vfiprintf_r+0x156>
 8007884:	9207      	str	r2, [sp, #28]
 8007886:	e014      	b.n	80078b2 <_vfiprintf_r+0x156>
 8007888:	eba0 0308 	sub.w	r3, r0, r8
 800788c:	fa09 f303 	lsl.w	r3, r9, r3
 8007890:	4313      	orrs	r3, r2
 8007892:	9304      	str	r3, [sp, #16]
 8007894:	46a2      	mov	sl, r4
 8007896:	e7d2      	b.n	800783e <_vfiprintf_r+0xe2>
 8007898:	9b03      	ldr	r3, [sp, #12]
 800789a:	1d19      	adds	r1, r3, #4
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	9103      	str	r1, [sp, #12]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	bfbb      	ittet	lt
 80078a4:	425b      	neglt	r3, r3
 80078a6:	f042 0202 	orrlt.w	r2, r2, #2
 80078aa:	9307      	strge	r3, [sp, #28]
 80078ac:	9307      	strlt	r3, [sp, #28]
 80078ae:	bfb8      	it	lt
 80078b0:	9204      	strlt	r2, [sp, #16]
 80078b2:	7823      	ldrb	r3, [r4, #0]
 80078b4:	2b2e      	cmp	r3, #46	; 0x2e
 80078b6:	d10c      	bne.n	80078d2 <_vfiprintf_r+0x176>
 80078b8:	7863      	ldrb	r3, [r4, #1]
 80078ba:	2b2a      	cmp	r3, #42	; 0x2a
 80078bc:	d135      	bne.n	800792a <_vfiprintf_r+0x1ce>
 80078be:	9b03      	ldr	r3, [sp, #12]
 80078c0:	1d1a      	adds	r2, r3, #4
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	9203      	str	r2, [sp, #12]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	bfb8      	it	lt
 80078ca:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80078ce:	3402      	adds	r4, #2
 80078d0:	9305      	str	r3, [sp, #20]
 80078d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80079b8 <_vfiprintf_r+0x25c>
 80078d6:	7821      	ldrb	r1, [r4, #0]
 80078d8:	2203      	movs	r2, #3
 80078da:	4650      	mov	r0, sl
 80078dc:	f7f8 fc80 	bl	80001e0 <memchr>
 80078e0:	b140      	cbz	r0, 80078f4 <_vfiprintf_r+0x198>
 80078e2:	2340      	movs	r3, #64	; 0x40
 80078e4:	eba0 000a 	sub.w	r0, r0, sl
 80078e8:	fa03 f000 	lsl.w	r0, r3, r0
 80078ec:	9b04      	ldr	r3, [sp, #16]
 80078ee:	4303      	orrs	r3, r0
 80078f0:	3401      	adds	r4, #1
 80078f2:	9304      	str	r3, [sp, #16]
 80078f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078f8:	482c      	ldr	r0, [pc, #176]	; (80079ac <_vfiprintf_r+0x250>)
 80078fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078fe:	2206      	movs	r2, #6
 8007900:	f7f8 fc6e 	bl	80001e0 <memchr>
 8007904:	2800      	cmp	r0, #0
 8007906:	d03f      	beq.n	8007988 <_vfiprintf_r+0x22c>
 8007908:	4b29      	ldr	r3, [pc, #164]	; (80079b0 <_vfiprintf_r+0x254>)
 800790a:	bb1b      	cbnz	r3, 8007954 <_vfiprintf_r+0x1f8>
 800790c:	9b03      	ldr	r3, [sp, #12]
 800790e:	3307      	adds	r3, #7
 8007910:	f023 0307 	bic.w	r3, r3, #7
 8007914:	3308      	adds	r3, #8
 8007916:	9303      	str	r3, [sp, #12]
 8007918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800791a:	443b      	add	r3, r7
 800791c:	9309      	str	r3, [sp, #36]	; 0x24
 800791e:	e767      	b.n	80077f0 <_vfiprintf_r+0x94>
 8007920:	fb0c 3202 	mla	r2, ip, r2, r3
 8007924:	460c      	mov	r4, r1
 8007926:	2001      	movs	r0, #1
 8007928:	e7a5      	b.n	8007876 <_vfiprintf_r+0x11a>
 800792a:	2300      	movs	r3, #0
 800792c:	3401      	adds	r4, #1
 800792e:	9305      	str	r3, [sp, #20]
 8007930:	4619      	mov	r1, r3
 8007932:	f04f 0c0a 	mov.w	ip, #10
 8007936:	4620      	mov	r0, r4
 8007938:	f810 2b01 	ldrb.w	r2, [r0], #1
 800793c:	3a30      	subs	r2, #48	; 0x30
 800793e:	2a09      	cmp	r2, #9
 8007940:	d903      	bls.n	800794a <_vfiprintf_r+0x1ee>
 8007942:	2b00      	cmp	r3, #0
 8007944:	d0c5      	beq.n	80078d2 <_vfiprintf_r+0x176>
 8007946:	9105      	str	r1, [sp, #20]
 8007948:	e7c3      	b.n	80078d2 <_vfiprintf_r+0x176>
 800794a:	fb0c 2101 	mla	r1, ip, r1, r2
 800794e:	4604      	mov	r4, r0
 8007950:	2301      	movs	r3, #1
 8007952:	e7f0      	b.n	8007936 <_vfiprintf_r+0x1da>
 8007954:	ab03      	add	r3, sp, #12
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	462a      	mov	r2, r5
 800795a:	4b16      	ldr	r3, [pc, #88]	; (80079b4 <_vfiprintf_r+0x258>)
 800795c:	a904      	add	r1, sp, #16
 800795e:	4630      	mov	r0, r6
 8007960:	f7fd fa50 	bl	8004e04 <_printf_float>
 8007964:	4607      	mov	r7, r0
 8007966:	1c78      	adds	r0, r7, #1
 8007968:	d1d6      	bne.n	8007918 <_vfiprintf_r+0x1bc>
 800796a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800796c:	07d9      	lsls	r1, r3, #31
 800796e:	d405      	bmi.n	800797c <_vfiprintf_r+0x220>
 8007970:	89ab      	ldrh	r3, [r5, #12]
 8007972:	059a      	lsls	r2, r3, #22
 8007974:	d402      	bmi.n	800797c <_vfiprintf_r+0x220>
 8007976:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007978:	f7ff f9b4 	bl	8006ce4 <__retarget_lock_release_recursive>
 800797c:	89ab      	ldrh	r3, [r5, #12]
 800797e:	065b      	lsls	r3, r3, #25
 8007980:	f53f af12 	bmi.w	80077a8 <_vfiprintf_r+0x4c>
 8007984:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007986:	e711      	b.n	80077ac <_vfiprintf_r+0x50>
 8007988:	ab03      	add	r3, sp, #12
 800798a:	9300      	str	r3, [sp, #0]
 800798c:	462a      	mov	r2, r5
 800798e:	4b09      	ldr	r3, [pc, #36]	; (80079b4 <_vfiprintf_r+0x258>)
 8007990:	a904      	add	r1, sp, #16
 8007992:	4630      	mov	r0, r6
 8007994:	f7fd fcda 	bl	800534c <_printf_i>
 8007998:	e7e4      	b.n	8007964 <_vfiprintf_r+0x208>
 800799a:	bf00      	nop
 800799c:	08008f34 	.word	0x08008f34
 80079a0:	08008f54 	.word	0x08008f54
 80079a4:	08008f14 	.word	0x08008f14
 80079a8:	080090cc 	.word	0x080090cc
 80079ac:	080090d6 	.word	0x080090d6
 80079b0:	08004e05 	.word	0x08004e05
 80079b4:	08007737 	.word	0x08007737
 80079b8:	080090d2 	.word	0x080090d2

080079bc <_putc_r>:
 80079bc:	b570      	push	{r4, r5, r6, lr}
 80079be:	460d      	mov	r5, r1
 80079c0:	4614      	mov	r4, r2
 80079c2:	4606      	mov	r6, r0
 80079c4:	b118      	cbz	r0, 80079ce <_putc_r+0x12>
 80079c6:	6983      	ldr	r3, [r0, #24]
 80079c8:	b90b      	cbnz	r3, 80079ce <_putc_r+0x12>
 80079ca:	f7fe ffdf 	bl	800698c <__sinit>
 80079ce:	4b1c      	ldr	r3, [pc, #112]	; (8007a40 <_putc_r+0x84>)
 80079d0:	429c      	cmp	r4, r3
 80079d2:	d124      	bne.n	8007a1e <_putc_r+0x62>
 80079d4:	6874      	ldr	r4, [r6, #4]
 80079d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079d8:	07d8      	lsls	r0, r3, #31
 80079da:	d405      	bmi.n	80079e8 <_putc_r+0x2c>
 80079dc:	89a3      	ldrh	r3, [r4, #12]
 80079de:	0599      	lsls	r1, r3, #22
 80079e0:	d402      	bmi.n	80079e8 <_putc_r+0x2c>
 80079e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079e4:	f7ff f97c 	bl	8006ce0 <__retarget_lock_acquire_recursive>
 80079e8:	68a3      	ldr	r3, [r4, #8]
 80079ea:	3b01      	subs	r3, #1
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	60a3      	str	r3, [r4, #8]
 80079f0:	da05      	bge.n	80079fe <_putc_r+0x42>
 80079f2:	69a2      	ldr	r2, [r4, #24]
 80079f4:	4293      	cmp	r3, r2
 80079f6:	db1c      	blt.n	8007a32 <_putc_r+0x76>
 80079f8:	b2eb      	uxtb	r3, r5
 80079fa:	2b0a      	cmp	r3, #10
 80079fc:	d019      	beq.n	8007a32 <_putc_r+0x76>
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	1c5a      	adds	r2, r3, #1
 8007a02:	6022      	str	r2, [r4, #0]
 8007a04:	701d      	strb	r5, [r3, #0]
 8007a06:	b2ed      	uxtb	r5, r5
 8007a08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a0a:	07da      	lsls	r2, r3, #31
 8007a0c:	d405      	bmi.n	8007a1a <_putc_r+0x5e>
 8007a0e:	89a3      	ldrh	r3, [r4, #12]
 8007a10:	059b      	lsls	r3, r3, #22
 8007a12:	d402      	bmi.n	8007a1a <_putc_r+0x5e>
 8007a14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a16:	f7ff f965 	bl	8006ce4 <__retarget_lock_release_recursive>
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	bd70      	pop	{r4, r5, r6, pc}
 8007a1e:	4b09      	ldr	r3, [pc, #36]	; (8007a44 <_putc_r+0x88>)
 8007a20:	429c      	cmp	r4, r3
 8007a22:	d101      	bne.n	8007a28 <_putc_r+0x6c>
 8007a24:	68b4      	ldr	r4, [r6, #8]
 8007a26:	e7d6      	b.n	80079d6 <_putc_r+0x1a>
 8007a28:	4b07      	ldr	r3, [pc, #28]	; (8007a48 <_putc_r+0x8c>)
 8007a2a:	429c      	cmp	r4, r3
 8007a2c:	bf08      	it	eq
 8007a2e:	68f4      	ldreq	r4, [r6, #12]
 8007a30:	e7d1      	b.n	80079d6 <_putc_r+0x1a>
 8007a32:	4629      	mov	r1, r5
 8007a34:	4622      	mov	r2, r4
 8007a36:	4630      	mov	r0, r6
 8007a38:	f000 f934 	bl	8007ca4 <__swbuf_r>
 8007a3c:	4605      	mov	r5, r0
 8007a3e:	e7e3      	b.n	8007a08 <_putc_r+0x4c>
 8007a40:	08008f34 	.word	0x08008f34
 8007a44:	08008f54 	.word	0x08008f54
 8007a48:	08008f14 	.word	0x08008f14

08007a4c <siprintf>:
 8007a4c:	b40e      	push	{r1, r2, r3}
 8007a4e:	b500      	push	{lr}
 8007a50:	b09c      	sub	sp, #112	; 0x70
 8007a52:	ab1d      	add	r3, sp, #116	; 0x74
 8007a54:	9002      	str	r0, [sp, #8]
 8007a56:	9006      	str	r0, [sp, #24]
 8007a58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a5c:	4809      	ldr	r0, [pc, #36]	; (8007a84 <siprintf+0x38>)
 8007a5e:	9107      	str	r1, [sp, #28]
 8007a60:	9104      	str	r1, [sp, #16]
 8007a62:	4909      	ldr	r1, [pc, #36]	; (8007a88 <siprintf+0x3c>)
 8007a64:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a68:	9105      	str	r1, [sp, #20]
 8007a6a:	6800      	ldr	r0, [r0, #0]
 8007a6c:	9301      	str	r3, [sp, #4]
 8007a6e:	a902      	add	r1, sp, #8
 8007a70:	f7ff fd4a 	bl	8007508 <_svfiprintf_r>
 8007a74:	9b02      	ldr	r3, [sp, #8]
 8007a76:	2200      	movs	r2, #0
 8007a78:	701a      	strb	r2, [r3, #0]
 8007a7a:	b01c      	add	sp, #112	; 0x70
 8007a7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a80:	b003      	add	sp, #12
 8007a82:	4770      	bx	lr
 8007a84:	20000010 	.word	0x20000010
 8007a88:	ffff0208 	.word	0xffff0208

08007a8c <siscanf>:
 8007a8c:	b40e      	push	{r1, r2, r3}
 8007a8e:	b510      	push	{r4, lr}
 8007a90:	b09f      	sub	sp, #124	; 0x7c
 8007a92:	ac21      	add	r4, sp, #132	; 0x84
 8007a94:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007a98:	f854 2b04 	ldr.w	r2, [r4], #4
 8007a9c:	9201      	str	r2, [sp, #4]
 8007a9e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8007aa2:	9004      	str	r0, [sp, #16]
 8007aa4:	9008      	str	r0, [sp, #32]
 8007aa6:	f7f8 fb93 	bl	80001d0 <strlen>
 8007aaa:	4b0c      	ldr	r3, [pc, #48]	; (8007adc <siscanf+0x50>)
 8007aac:	9005      	str	r0, [sp, #20]
 8007aae:	9009      	str	r0, [sp, #36]	; 0x24
 8007ab0:	930d      	str	r3, [sp, #52]	; 0x34
 8007ab2:	480b      	ldr	r0, [pc, #44]	; (8007ae0 <siscanf+0x54>)
 8007ab4:	9a01      	ldr	r2, [sp, #4]
 8007ab6:	6800      	ldr	r0, [r0, #0]
 8007ab8:	9403      	str	r4, [sp, #12]
 8007aba:	2300      	movs	r3, #0
 8007abc:	9311      	str	r3, [sp, #68]	; 0x44
 8007abe:	9316      	str	r3, [sp, #88]	; 0x58
 8007ac0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007ac4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007ac8:	a904      	add	r1, sp, #16
 8007aca:	4623      	mov	r3, r4
 8007acc:	f000 fbd0 	bl	8008270 <__ssvfiscanf_r>
 8007ad0:	b01f      	add	sp, #124	; 0x7c
 8007ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ad6:	b003      	add	sp, #12
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	08007b07 	.word	0x08007b07
 8007ae0:	20000010 	.word	0x20000010

08007ae4 <__sread>:
 8007ae4:	b510      	push	{r4, lr}
 8007ae6:	460c      	mov	r4, r1
 8007ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aec:	f000 fe8a 	bl	8008804 <_read_r>
 8007af0:	2800      	cmp	r0, #0
 8007af2:	bfab      	itete	ge
 8007af4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007af6:	89a3      	ldrhlt	r3, [r4, #12]
 8007af8:	181b      	addge	r3, r3, r0
 8007afa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007afe:	bfac      	ite	ge
 8007b00:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b02:	81a3      	strhlt	r3, [r4, #12]
 8007b04:	bd10      	pop	{r4, pc}

08007b06 <__seofread>:
 8007b06:	2000      	movs	r0, #0
 8007b08:	4770      	bx	lr

08007b0a <__swrite>:
 8007b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b0e:	461f      	mov	r7, r3
 8007b10:	898b      	ldrh	r3, [r1, #12]
 8007b12:	05db      	lsls	r3, r3, #23
 8007b14:	4605      	mov	r5, r0
 8007b16:	460c      	mov	r4, r1
 8007b18:	4616      	mov	r6, r2
 8007b1a:	d505      	bpl.n	8007b28 <__swrite+0x1e>
 8007b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b20:	2302      	movs	r3, #2
 8007b22:	2200      	movs	r2, #0
 8007b24:	f000 fa76 	bl	8008014 <_lseek_r>
 8007b28:	89a3      	ldrh	r3, [r4, #12]
 8007b2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b32:	81a3      	strh	r3, [r4, #12]
 8007b34:	4632      	mov	r2, r6
 8007b36:	463b      	mov	r3, r7
 8007b38:	4628      	mov	r0, r5
 8007b3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b3e:	f000 b903 	b.w	8007d48 <_write_r>

08007b42 <__sseek>:
 8007b42:	b510      	push	{r4, lr}
 8007b44:	460c      	mov	r4, r1
 8007b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b4a:	f000 fa63 	bl	8008014 <_lseek_r>
 8007b4e:	1c43      	adds	r3, r0, #1
 8007b50:	89a3      	ldrh	r3, [r4, #12]
 8007b52:	bf15      	itete	ne
 8007b54:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b5e:	81a3      	strheq	r3, [r4, #12]
 8007b60:	bf18      	it	ne
 8007b62:	81a3      	strhne	r3, [r4, #12]
 8007b64:	bd10      	pop	{r4, pc}

08007b66 <__sclose>:
 8007b66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b6a:	f000 b975 	b.w	8007e58 <_close_r>

08007b6e <strcpy>:
 8007b6e:	4603      	mov	r3, r0
 8007b70:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b74:	f803 2b01 	strb.w	r2, [r3], #1
 8007b78:	2a00      	cmp	r2, #0
 8007b7a:	d1f9      	bne.n	8007b70 <strcpy+0x2>
 8007b7c:	4770      	bx	lr

08007b7e <strncmp>:
 8007b7e:	b510      	push	{r4, lr}
 8007b80:	b17a      	cbz	r2, 8007ba2 <strncmp+0x24>
 8007b82:	4603      	mov	r3, r0
 8007b84:	3901      	subs	r1, #1
 8007b86:	1884      	adds	r4, r0, r2
 8007b88:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007b8c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007b90:	4290      	cmp	r0, r2
 8007b92:	d101      	bne.n	8007b98 <strncmp+0x1a>
 8007b94:	42a3      	cmp	r3, r4
 8007b96:	d101      	bne.n	8007b9c <strncmp+0x1e>
 8007b98:	1a80      	subs	r0, r0, r2
 8007b9a:	bd10      	pop	{r4, pc}
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	d1f3      	bne.n	8007b88 <strncmp+0xa>
 8007ba0:	e7fa      	b.n	8007b98 <strncmp+0x1a>
 8007ba2:	4610      	mov	r0, r2
 8007ba4:	e7f9      	b.n	8007b9a <strncmp+0x1c>
	...

08007ba8 <_strtoul_l.constprop.0>:
 8007ba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007bac:	4f36      	ldr	r7, [pc, #216]	; (8007c88 <_strtoul_l.constprop.0+0xe0>)
 8007bae:	4686      	mov	lr, r0
 8007bb0:	460d      	mov	r5, r1
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007bb8:	5de6      	ldrb	r6, [r4, r7]
 8007bba:	f016 0608 	ands.w	r6, r6, #8
 8007bbe:	d1f8      	bne.n	8007bb2 <_strtoul_l.constprop.0+0xa>
 8007bc0:	2c2d      	cmp	r4, #45	; 0x2d
 8007bc2:	d12f      	bne.n	8007c24 <_strtoul_l.constprop.0+0x7c>
 8007bc4:	782c      	ldrb	r4, [r5, #0]
 8007bc6:	2601      	movs	r6, #1
 8007bc8:	1c85      	adds	r5, r0, #2
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d057      	beq.n	8007c7e <_strtoul_l.constprop.0+0xd6>
 8007bce:	2b10      	cmp	r3, #16
 8007bd0:	d109      	bne.n	8007be6 <_strtoul_l.constprop.0+0x3e>
 8007bd2:	2c30      	cmp	r4, #48	; 0x30
 8007bd4:	d107      	bne.n	8007be6 <_strtoul_l.constprop.0+0x3e>
 8007bd6:	7828      	ldrb	r0, [r5, #0]
 8007bd8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007bdc:	2858      	cmp	r0, #88	; 0x58
 8007bde:	d149      	bne.n	8007c74 <_strtoul_l.constprop.0+0xcc>
 8007be0:	786c      	ldrb	r4, [r5, #1]
 8007be2:	2310      	movs	r3, #16
 8007be4:	3502      	adds	r5, #2
 8007be6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8007bea:	2700      	movs	r7, #0
 8007bec:	fbb8 f8f3 	udiv	r8, r8, r3
 8007bf0:	fb03 f908 	mul.w	r9, r3, r8
 8007bf4:	ea6f 0909 	mvn.w	r9, r9
 8007bf8:	4638      	mov	r0, r7
 8007bfa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007bfe:	f1bc 0f09 	cmp.w	ip, #9
 8007c02:	d814      	bhi.n	8007c2e <_strtoul_l.constprop.0+0x86>
 8007c04:	4664      	mov	r4, ip
 8007c06:	42a3      	cmp	r3, r4
 8007c08:	dd22      	ble.n	8007c50 <_strtoul_l.constprop.0+0xa8>
 8007c0a:	2f00      	cmp	r7, #0
 8007c0c:	db1d      	blt.n	8007c4a <_strtoul_l.constprop.0+0xa2>
 8007c0e:	4580      	cmp	r8, r0
 8007c10:	d31b      	bcc.n	8007c4a <_strtoul_l.constprop.0+0xa2>
 8007c12:	d101      	bne.n	8007c18 <_strtoul_l.constprop.0+0x70>
 8007c14:	45a1      	cmp	r9, r4
 8007c16:	db18      	blt.n	8007c4a <_strtoul_l.constprop.0+0xa2>
 8007c18:	fb00 4003 	mla	r0, r0, r3, r4
 8007c1c:	2701      	movs	r7, #1
 8007c1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c22:	e7ea      	b.n	8007bfa <_strtoul_l.constprop.0+0x52>
 8007c24:	2c2b      	cmp	r4, #43	; 0x2b
 8007c26:	bf04      	itt	eq
 8007c28:	782c      	ldrbeq	r4, [r5, #0]
 8007c2a:	1c85      	addeq	r5, r0, #2
 8007c2c:	e7cd      	b.n	8007bca <_strtoul_l.constprop.0+0x22>
 8007c2e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007c32:	f1bc 0f19 	cmp.w	ip, #25
 8007c36:	d801      	bhi.n	8007c3c <_strtoul_l.constprop.0+0x94>
 8007c38:	3c37      	subs	r4, #55	; 0x37
 8007c3a:	e7e4      	b.n	8007c06 <_strtoul_l.constprop.0+0x5e>
 8007c3c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007c40:	f1bc 0f19 	cmp.w	ip, #25
 8007c44:	d804      	bhi.n	8007c50 <_strtoul_l.constprop.0+0xa8>
 8007c46:	3c57      	subs	r4, #87	; 0x57
 8007c48:	e7dd      	b.n	8007c06 <_strtoul_l.constprop.0+0x5e>
 8007c4a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007c4e:	e7e6      	b.n	8007c1e <_strtoul_l.constprop.0+0x76>
 8007c50:	2f00      	cmp	r7, #0
 8007c52:	da07      	bge.n	8007c64 <_strtoul_l.constprop.0+0xbc>
 8007c54:	2322      	movs	r3, #34	; 0x22
 8007c56:	f8ce 3000 	str.w	r3, [lr]
 8007c5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c5e:	b932      	cbnz	r2, 8007c6e <_strtoul_l.constprop.0+0xc6>
 8007c60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c64:	b106      	cbz	r6, 8007c68 <_strtoul_l.constprop.0+0xc0>
 8007c66:	4240      	negs	r0, r0
 8007c68:	2a00      	cmp	r2, #0
 8007c6a:	d0f9      	beq.n	8007c60 <_strtoul_l.constprop.0+0xb8>
 8007c6c:	b107      	cbz	r7, 8007c70 <_strtoul_l.constprop.0+0xc8>
 8007c6e:	1e69      	subs	r1, r5, #1
 8007c70:	6011      	str	r1, [r2, #0]
 8007c72:	e7f5      	b.n	8007c60 <_strtoul_l.constprop.0+0xb8>
 8007c74:	2430      	movs	r4, #48	; 0x30
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1b5      	bne.n	8007be6 <_strtoul_l.constprop.0+0x3e>
 8007c7a:	2308      	movs	r3, #8
 8007c7c:	e7b3      	b.n	8007be6 <_strtoul_l.constprop.0+0x3e>
 8007c7e:	2c30      	cmp	r4, #48	; 0x30
 8007c80:	d0a9      	beq.n	8007bd6 <_strtoul_l.constprop.0+0x2e>
 8007c82:	230a      	movs	r3, #10
 8007c84:	e7af      	b.n	8007be6 <_strtoul_l.constprop.0+0x3e>
 8007c86:	bf00      	nop
 8007c88:	080090de 	.word	0x080090de

08007c8c <_strtoul_r>:
 8007c8c:	f7ff bf8c 	b.w	8007ba8 <_strtoul_l.constprop.0>

08007c90 <strtoul>:
 8007c90:	4613      	mov	r3, r2
 8007c92:	460a      	mov	r2, r1
 8007c94:	4601      	mov	r1, r0
 8007c96:	4802      	ldr	r0, [pc, #8]	; (8007ca0 <strtoul+0x10>)
 8007c98:	6800      	ldr	r0, [r0, #0]
 8007c9a:	f7ff bf85 	b.w	8007ba8 <_strtoul_l.constprop.0>
 8007c9e:	bf00      	nop
 8007ca0:	20000010 	.word	0x20000010

08007ca4 <__swbuf_r>:
 8007ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ca6:	460e      	mov	r6, r1
 8007ca8:	4614      	mov	r4, r2
 8007caa:	4605      	mov	r5, r0
 8007cac:	b118      	cbz	r0, 8007cb6 <__swbuf_r+0x12>
 8007cae:	6983      	ldr	r3, [r0, #24]
 8007cb0:	b90b      	cbnz	r3, 8007cb6 <__swbuf_r+0x12>
 8007cb2:	f7fe fe6b 	bl	800698c <__sinit>
 8007cb6:	4b21      	ldr	r3, [pc, #132]	; (8007d3c <__swbuf_r+0x98>)
 8007cb8:	429c      	cmp	r4, r3
 8007cba:	d12b      	bne.n	8007d14 <__swbuf_r+0x70>
 8007cbc:	686c      	ldr	r4, [r5, #4]
 8007cbe:	69a3      	ldr	r3, [r4, #24]
 8007cc0:	60a3      	str	r3, [r4, #8]
 8007cc2:	89a3      	ldrh	r3, [r4, #12]
 8007cc4:	071a      	lsls	r2, r3, #28
 8007cc6:	d52f      	bpl.n	8007d28 <__swbuf_r+0x84>
 8007cc8:	6923      	ldr	r3, [r4, #16]
 8007cca:	b36b      	cbz	r3, 8007d28 <__swbuf_r+0x84>
 8007ccc:	6923      	ldr	r3, [r4, #16]
 8007cce:	6820      	ldr	r0, [r4, #0]
 8007cd0:	1ac0      	subs	r0, r0, r3
 8007cd2:	6963      	ldr	r3, [r4, #20]
 8007cd4:	b2f6      	uxtb	r6, r6
 8007cd6:	4283      	cmp	r3, r0
 8007cd8:	4637      	mov	r7, r6
 8007cda:	dc04      	bgt.n	8007ce6 <__swbuf_r+0x42>
 8007cdc:	4621      	mov	r1, r4
 8007cde:	4628      	mov	r0, r5
 8007ce0:	f000 f95c 	bl	8007f9c <_fflush_r>
 8007ce4:	bb30      	cbnz	r0, 8007d34 <__swbuf_r+0x90>
 8007ce6:	68a3      	ldr	r3, [r4, #8]
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	60a3      	str	r3, [r4, #8]
 8007cec:	6823      	ldr	r3, [r4, #0]
 8007cee:	1c5a      	adds	r2, r3, #1
 8007cf0:	6022      	str	r2, [r4, #0]
 8007cf2:	701e      	strb	r6, [r3, #0]
 8007cf4:	6963      	ldr	r3, [r4, #20]
 8007cf6:	3001      	adds	r0, #1
 8007cf8:	4283      	cmp	r3, r0
 8007cfa:	d004      	beq.n	8007d06 <__swbuf_r+0x62>
 8007cfc:	89a3      	ldrh	r3, [r4, #12]
 8007cfe:	07db      	lsls	r3, r3, #31
 8007d00:	d506      	bpl.n	8007d10 <__swbuf_r+0x6c>
 8007d02:	2e0a      	cmp	r6, #10
 8007d04:	d104      	bne.n	8007d10 <__swbuf_r+0x6c>
 8007d06:	4621      	mov	r1, r4
 8007d08:	4628      	mov	r0, r5
 8007d0a:	f000 f947 	bl	8007f9c <_fflush_r>
 8007d0e:	b988      	cbnz	r0, 8007d34 <__swbuf_r+0x90>
 8007d10:	4638      	mov	r0, r7
 8007d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d14:	4b0a      	ldr	r3, [pc, #40]	; (8007d40 <__swbuf_r+0x9c>)
 8007d16:	429c      	cmp	r4, r3
 8007d18:	d101      	bne.n	8007d1e <__swbuf_r+0x7a>
 8007d1a:	68ac      	ldr	r4, [r5, #8]
 8007d1c:	e7cf      	b.n	8007cbe <__swbuf_r+0x1a>
 8007d1e:	4b09      	ldr	r3, [pc, #36]	; (8007d44 <__swbuf_r+0xa0>)
 8007d20:	429c      	cmp	r4, r3
 8007d22:	bf08      	it	eq
 8007d24:	68ec      	ldreq	r4, [r5, #12]
 8007d26:	e7ca      	b.n	8007cbe <__swbuf_r+0x1a>
 8007d28:	4621      	mov	r1, r4
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	f000 f81e 	bl	8007d6c <__swsetup_r>
 8007d30:	2800      	cmp	r0, #0
 8007d32:	d0cb      	beq.n	8007ccc <__swbuf_r+0x28>
 8007d34:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007d38:	e7ea      	b.n	8007d10 <__swbuf_r+0x6c>
 8007d3a:	bf00      	nop
 8007d3c:	08008f34 	.word	0x08008f34
 8007d40:	08008f54 	.word	0x08008f54
 8007d44:	08008f14 	.word	0x08008f14

08007d48 <_write_r>:
 8007d48:	b538      	push	{r3, r4, r5, lr}
 8007d4a:	4d07      	ldr	r5, [pc, #28]	; (8007d68 <_write_r+0x20>)
 8007d4c:	4604      	mov	r4, r0
 8007d4e:	4608      	mov	r0, r1
 8007d50:	4611      	mov	r1, r2
 8007d52:	2200      	movs	r2, #0
 8007d54:	602a      	str	r2, [r5, #0]
 8007d56:	461a      	mov	r2, r3
 8007d58:	f7f9 f92a 	bl	8000fb0 <_write>
 8007d5c:	1c43      	adds	r3, r0, #1
 8007d5e:	d102      	bne.n	8007d66 <_write_r+0x1e>
 8007d60:	682b      	ldr	r3, [r5, #0]
 8007d62:	b103      	cbz	r3, 8007d66 <_write_r+0x1e>
 8007d64:	6023      	str	r3, [r4, #0]
 8007d66:	bd38      	pop	{r3, r4, r5, pc}
 8007d68:	200004a8 	.word	0x200004a8

08007d6c <__swsetup_r>:
 8007d6c:	4b32      	ldr	r3, [pc, #200]	; (8007e38 <__swsetup_r+0xcc>)
 8007d6e:	b570      	push	{r4, r5, r6, lr}
 8007d70:	681d      	ldr	r5, [r3, #0]
 8007d72:	4606      	mov	r6, r0
 8007d74:	460c      	mov	r4, r1
 8007d76:	b125      	cbz	r5, 8007d82 <__swsetup_r+0x16>
 8007d78:	69ab      	ldr	r3, [r5, #24]
 8007d7a:	b913      	cbnz	r3, 8007d82 <__swsetup_r+0x16>
 8007d7c:	4628      	mov	r0, r5
 8007d7e:	f7fe fe05 	bl	800698c <__sinit>
 8007d82:	4b2e      	ldr	r3, [pc, #184]	; (8007e3c <__swsetup_r+0xd0>)
 8007d84:	429c      	cmp	r4, r3
 8007d86:	d10f      	bne.n	8007da8 <__swsetup_r+0x3c>
 8007d88:	686c      	ldr	r4, [r5, #4]
 8007d8a:	89a3      	ldrh	r3, [r4, #12]
 8007d8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d90:	0719      	lsls	r1, r3, #28
 8007d92:	d42c      	bmi.n	8007dee <__swsetup_r+0x82>
 8007d94:	06dd      	lsls	r5, r3, #27
 8007d96:	d411      	bmi.n	8007dbc <__swsetup_r+0x50>
 8007d98:	2309      	movs	r3, #9
 8007d9a:	6033      	str	r3, [r6, #0]
 8007d9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007da0:	81a3      	strh	r3, [r4, #12]
 8007da2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007da6:	e03e      	b.n	8007e26 <__swsetup_r+0xba>
 8007da8:	4b25      	ldr	r3, [pc, #148]	; (8007e40 <__swsetup_r+0xd4>)
 8007daa:	429c      	cmp	r4, r3
 8007dac:	d101      	bne.n	8007db2 <__swsetup_r+0x46>
 8007dae:	68ac      	ldr	r4, [r5, #8]
 8007db0:	e7eb      	b.n	8007d8a <__swsetup_r+0x1e>
 8007db2:	4b24      	ldr	r3, [pc, #144]	; (8007e44 <__swsetup_r+0xd8>)
 8007db4:	429c      	cmp	r4, r3
 8007db6:	bf08      	it	eq
 8007db8:	68ec      	ldreq	r4, [r5, #12]
 8007dba:	e7e6      	b.n	8007d8a <__swsetup_r+0x1e>
 8007dbc:	0758      	lsls	r0, r3, #29
 8007dbe:	d512      	bpl.n	8007de6 <__swsetup_r+0x7a>
 8007dc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dc2:	b141      	cbz	r1, 8007dd6 <__swsetup_r+0x6a>
 8007dc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dc8:	4299      	cmp	r1, r3
 8007dca:	d002      	beq.n	8007dd2 <__swsetup_r+0x66>
 8007dcc:	4630      	mov	r0, r6
 8007dce:	f7fc fe99 	bl	8004b04 <_free_r>
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	6363      	str	r3, [r4, #52]	; 0x34
 8007dd6:	89a3      	ldrh	r3, [r4, #12]
 8007dd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ddc:	81a3      	strh	r3, [r4, #12]
 8007dde:	2300      	movs	r3, #0
 8007de0:	6063      	str	r3, [r4, #4]
 8007de2:	6923      	ldr	r3, [r4, #16]
 8007de4:	6023      	str	r3, [r4, #0]
 8007de6:	89a3      	ldrh	r3, [r4, #12]
 8007de8:	f043 0308 	orr.w	r3, r3, #8
 8007dec:	81a3      	strh	r3, [r4, #12]
 8007dee:	6923      	ldr	r3, [r4, #16]
 8007df0:	b94b      	cbnz	r3, 8007e06 <__swsetup_r+0x9a>
 8007df2:	89a3      	ldrh	r3, [r4, #12]
 8007df4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dfc:	d003      	beq.n	8007e06 <__swsetup_r+0x9a>
 8007dfe:	4621      	mov	r1, r4
 8007e00:	4630      	mov	r0, r6
 8007e02:	f000 f93f 	bl	8008084 <__smakebuf_r>
 8007e06:	89a0      	ldrh	r0, [r4, #12]
 8007e08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e0c:	f010 0301 	ands.w	r3, r0, #1
 8007e10:	d00a      	beq.n	8007e28 <__swsetup_r+0xbc>
 8007e12:	2300      	movs	r3, #0
 8007e14:	60a3      	str	r3, [r4, #8]
 8007e16:	6963      	ldr	r3, [r4, #20]
 8007e18:	425b      	negs	r3, r3
 8007e1a:	61a3      	str	r3, [r4, #24]
 8007e1c:	6923      	ldr	r3, [r4, #16]
 8007e1e:	b943      	cbnz	r3, 8007e32 <__swsetup_r+0xc6>
 8007e20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e24:	d1ba      	bne.n	8007d9c <__swsetup_r+0x30>
 8007e26:	bd70      	pop	{r4, r5, r6, pc}
 8007e28:	0781      	lsls	r1, r0, #30
 8007e2a:	bf58      	it	pl
 8007e2c:	6963      	ldrpl	r3, [r4, #20]
 8007e2e:	60a3      	str	r3, [r4, #8]
 8007e30:	e7f4      	b.n	8007e1c <__swsetup_r+0xb0>
 8007e32:	2000      	movs	r0, #0
 8007e34:	e7f7      	b.n	8007e26 <__swsetup_r+0xba>
 8007e36:	bf00      	nop
 8007e38:	20000010 	.word	0x20000010
 8007e3c:	08008f34 	.word	0x08008f34
 8007e40:	08008f54 	.word	0x08008f54
 8007e44:	08008f14 	.word	0x08008f14

08007e48 <abort>:
 8007e48:	b508      	push	{r3, lr}
 8007e4a:	2006      	movs	r0, #6
 8007e4c:	f000 fd4c 	bl	80088e8 <raise>
 8007e50:	2001      	movs	r0, #1
 8007e52:	f7f9 fd79 	bl	8001948 <_exit>
	...

08007e58 <_close_r>:
 8007e58:	b538      	push	{r3, r4, r5, lr}
 8007e5a:	4d06      	ldr	r5, [pc, #24]	; (8007e74 <_close_r+0x1c>)
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	4604      	mov	r4, r0
 8007e60:	4608      	mov	r0, r1
 8007e62:	602b      	str	r3, [r5, #0]
 8007e64:	f7f9 fd97 	bl	8001996 <_close>
 8007e68:	1c43      	adds	r3, r0, #1
 8007e6a:	d102      	bne.n	8007e72 <_close_r+0x1a>
 8007e6c:	682b      	ldr	r3, [r5, #0]
 8007e6e:	b103      	cbz	r3, 8007e72 <_close_r+0x1a>
 8007e70:	6023      	str	r3, [r4, #0]
 8007e72:	bd38      	pop	{r3, r4, r5, pc}
 8007e74:	200004a8 	.word	0x200004a8

08007e78 <__env_lock>:
 8007e78:	4801      	ldr	r0, [pc, #4]	; (8007e80 <__env_lock+0x8>)
 8007e7a:	f7fe bf31 	b.w	8006ce0 <__retarget_lock_acquire_recursive>
 8007e7e:	bf00      	nop
 8007e80:	200004a0 	.word	0x200004a0

08007e84 <__env_unlock>:
 8007e84:	4801      	ldr	r0, [pc, #4]	; (8007e8c <__env_unlock+0x8>)
 8007e86:	f7fe bf2d 	b.w	8006ce4 <__retarget_lock_release_recursive>
 8007e8a:	bf00      	nop
 8007e8c:	200004a0 	.word	0x200004a0

08007e90 <__sflush_r>:
 8007e90:	898a      	ldrh	r2, [r1, #12]
 8007e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e96:	4605      	mov	r5, r0
 8007e98:	0710      	lsls	r0, r2, #28
 8007e9a:	460c      	mov	r4, r1
 8007e9c:	d458      	bmi.n	8007f50 <__sflush_r+0xc0>
 8007e9e:	684b      	ldr	r3, [r1, #4]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	dc05      	bgt.n	8007eb0 <__sflush_r+0x20>
 8007ea4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	dc02      	bgt.n	8007eb0 <__sflush_r+0x20>
 8007eaa:	2000      	movs	r0, #0
 8007eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007eb2:	2e00      	cmp	r6, #0
 8007eb4:	d0f9      	beq.n	8007eaa <__sflush_r+0x1a>
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ebc:	682f      	ldr	r7, [r5, #0]
 8007ebe:	602b      	str	r3, [r5, #0]
 8007ec0:	d032      	beq.n	8007f28 <__sflush_r+0x98>
 8007ec2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ec4:	89a3      	ldrh	r3, [r4, #12]
 8007ec6:	075a      	lsls	r2, r3, #29
 8007ec8:	d505      	bpl.n	8007ed6 <__sflush_r+0x46>
 8007eca:	6863      	ldr	r3, [r4, #4]
 8007ecc:	1ac0      	subs	r0, r0, r3
 8007ece:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ed0:	b10b      	cbz	r3, 8007ed6 <__sflush_r+0x46>
 8007ed2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ed4:	1ac0      	subs	r0, r0, r3
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	4602      	mov	r2, r0
 8007eda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007edc:	6a21      	ldr	r1, [r4, #32]
 8007ede:	4628      	mov	r0, r5
 8007ee0:	47b0      	blx	r6
 8007ee2:	1c43      	adds	r3, r0, #1
 8007ee4:	89a3      	ldrh	r3, [r4, #12]
 8007ee6:	d106      	bne.n	8007ef6 <__sflush_r+0x66>
 8007ee8:	6829      	ldr	r1, [r5, #0]
 8007eea:	291d      	cmp	r1, #29
 8007eec:	d82c      	bhi.n	8007f48 <__sflush_r+0xb8>
 8007eee:	4a2a      	ldr	r2, [pc, #168]	; (8007f98 <__sflush_r+0x108>)
 8007ef0:	40ca      	lsrs	r2, r1
 8007ef2:	07d6      	lsls	r6, r2, #31
 8007ef4:	d528      	bpl.n	8007f48 <__sflush_r+0xb8>
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	6062      	str	r2, [r4, #4]
 8007efa:	04d9      	lsls	r1, r3, #19
 8007efc:	6922      	ldr	r2, [r4, #16]
 8007efe:	6022      	str	r2, [r4, #0]
 8007f00:	d504      	bpl.n	8007f0c <__sflush_r+0x7c>
 8007f02:	1c42      	adds	r2, r0, #1
 8007f04:	d101      	bne.n	8007f0a <__sflush_r+0x7a>
 8007f06:	682b      	ldr	r3, [r5, #0]
 8007f08:	b903      	cbnz	r3, 8007f0c <__sflush_r+0x7c>
 8007f0a:	6560      	str	r0, [r4, #84]	; 0x54
 8007f0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f0e:	602f      	str	r7, [r5, #0]
 8007f10:	2900      	cmp	r1, #0
 8007f12:	d0ca      	beq.n	8007eaa <__sflush_r+0x1a>
 8007f14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f18:	4299      	cmp	r1, r3
 8007f1a:	d002      	beq.n	8007f22 <__sflush_r+0x92>
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	f7fc fdf1 	bl	8004b04 <_free_r>
 8007f22:	2000      	movs	r0, #0
 8007f24:	6360      	str	r0, [r4, #52]	; 0x34
 8007f26:	e7c1      	b.n	8007eac <__sflush_r+0x1c>
 8007f28:	6a21      	ldr	r1, [r4, #32]
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	47b0      	blx	r6
 8007f30:	1c41      	adds	r1, r0, #1
 8007f32:	d1c7      	bne.n	8007ec4 <__sflush_r+0x34>
 8007f34:	682b      	ldr	r3, [r5, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d0c4      	beq.n	8007ec4 <__sflush_r+0x34>
 8007f3a:	2b1d      	cmp	r3, #29
 8007f3c:	d001      	beq.n	8007f42 <__sflush_r+0xb2>
 8007f3e:	2b16      	cmp	r3, #22
 8007f40:	d101      	bne.n	8007f46 <__sflush_r+0xb6>
 8007f42:	602f      	str	r7, [r5, #0]
 8007f44:	e7b1      	b.n	8007eaa <__sflush_r+0x1a>
 8007f46:	89a3      	ldrh	r3, [r4, #12]
 8007f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f4c:	81a3      	strh	r3, [r4, #12]
 8007f4e:	e7ad      	b.n	8007eac <__sflush_r+0x1c>
 8007f50:	690f      	ldr	r7, [r1, #16]
 8007f52:	2f00      	cmp	r7, #0
 8007f54:	d0a9      	beq.n	8007eaa <__sflush_r+0x1a>
 8007f56:	0793      	lsls	r3, r2, #30
 8007f58:	680e      	ldr	r6, [r1, #0]
 8007f5a:	bf08      	it	eq
 8007f5c:	694b      	ldreq	r3, [r1, #20]
 8007f5e:	600f      	str	r7, [r1, #0]
 8007f60:	bf18      	it	ne
 8007f62:	2300      	movne	r3, #0
 8007f64:	eba6 0807 	sub.w	r8, r6, r7
 8007f68:	608b      	str	r3, [r1, #8]
 8007f6a:	f1b8 0f00 	cmp.w	r8, #0
 8007f6e:	dd9c      	ble.n	8007eaa <__sflush_r+0x1a>
 8007f70:	6a21      	ldr	r1, [r4, #32]
 8007f72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f74:	4643      	mov	r3, r8
 8007f76:	463a      	mov	r2, r7
 8007f78:	4628      	mov	r0, r5
 8007f7a:	47b0      	blx	r6
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	dc06      	bgt.n	8007f8e <__sflush_r+0xfe>
 8007f80:	89a3      	ldrh	r3, [r4, #12]
 8007f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f86:	81a3      	strh	r3, [r4, #12]
 8007f88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f8c:	e78e      	b.n	8007eac <__sflush_r+0x1c>
 8007f8e:	4407      	add	r7, r0
 8007f90:	eba8 0800 	sub.w	r8, r8, r0
 8007f94:	e7e9      	b.n	8007f6a <__sflush_r+0xda>
 8007f96:	bf00      	nop
 8007f98:	20400001 	.word	0x20400001

08007f9c <_fflush_r>:
 8007f9c:	b538      	push	{r3, r4, r5, lr}
 8007f9e:	690b      	ldr	r3, [r1, #16]
 8007fa0:	4605      	mov	r5, r0
 8007fa2:	460c      	mov	r4, r1
 8007fa4:	b913      	cbnz	r3, 8007fac <_fflush_r+0x10>
 8007fa6:	2500      	movs	r5, #0
 8007fa8:	4628      	mov	r0, r5
 8007faa:	bd38      	pop	{r3, r4, r5, pc}
 8007fac:	b118      	cbz	r0, 8007fb6 <_fflush_r+0x1a>
 8007fae:	6983      	ldr	r3, [r0, #24]
 8007fb0:	b90b      	cbnz	r3, 8007fb6 <_fflush_r+0x1a>
 8007fb2:	f7fe fceb 	bl	800698c <__sinit>
 8007fb6:	4b14      	ldr	r3, [pc, #80]	; (8008008 <_fflush_r+0x6c>)
 8007fb8:	429c      	cmp	r4, r3
 8007fba:	d11b      	bne.n	8007ff4 <_fflush_r+0x58>
 8007fbc:	686c      	ldr	r4, [r5, #4]
 8007fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d0ef      	beq.n	8007fa6 <_fflush_r+0xa>
 8007fc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007fc8:	07d0      	lsls	r0, r2, #31
 8007fca:	d404      	bmi.n	8007fd6 <_fflush_r+0x3a>
 8007fcc:	0599      	lsls	r1, r3, #22
 8007fce:	d402      	bmi.n	8007fd6 <_fflush_r+0x3a>
 8007fd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fd2:	f7fe fe85 	bl	8006ce0 <__retarget_lock_acquire_recursive>
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	4621      	mov	r1, r4
 8007fda:	f7ff ff59 	bl	8007e90 <__sflush_r>
 8007fde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fe0:	07da      	lsls	r2, r3, #31
 8007fe2:	4605      	mov	r5, r0
 8007fe4:	d4e0      	bmi.n	8007fa8 <_fflush_r+0xc>
 8007fe6:	89a3      	ldrh	r3, [r4, #12]
 8007fe8:	059b      	lsls	r3, r3, #22
 8007fea:	d4dd      	bmi.n	8007fa8 <_fflush_r+0xc>
 8007fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fee:	f7fe fe79 	bl	8006ce4 <__retarget_lock_release_recursive>
 8007ff2:	e7d9      	b.n	8007fa8 <_fflush_r+0xc>
 8007ff4:	4b05      	ldr	r3, [pc, #20]	; (800800c <_fflush_r+0x70>)
 8007ff6:	429c      	cmp	r4, r3
 8007ff8:	d101      	bne.n	8007ffe <_fflush_r+0x62>
 8007ffa:	68ac      	ldr	r4, [r5, #8]
 8007ffc:	e7df      	b.n	8007fbe <_fflush_r+0x22>
 8007ffe:	4b04      	ldr	r3, [pc, #16]	; (8008010 <_fflush_r+0x74>)
 8008000:	429c      	cmp	r4, r3
 8008002:	bf08      	it	eq
 8008004:	68ec      	ldreq	r4, [r5, #12]
 8008006:	e7da      	b.n	8007fbe <_fflush_r+0x22>
 8008008:	08008f34 	.word	0x08008f34
 800800c:	08008f54 	.word	0x08008f54
 8008010:	08008f14 	.word	0x08008f14

08008014 <_lseek_r>:
 8008014:	b538      	push	{r3, r4, r5, lr}
 8008016:	4d07      	ldr	r5, [pc, #28]	; (8008034 <_lseek_r+0x20>)
 8008018:	4604      	mov	r4, r0
 800801a:	4608      	mov	r0, r1
 800801c:	4611      	mov	r1, r2
 800801e:	2200      	movs	r2, #0
 8008020:	602a      	str	r2, [r5, #0]
 8008022:	461a      	mov	r2, r3
 8008024:	f7f9 fcde 	bl	80019e4 <_lseek>
 8008028:	1c43      	adds	r3, r0, #1
 800802a:	d102      	bne.n	8008032 <_lseek_r+0x1e>
 800802c:	682b      	ldr	r3, [r5, #0]
 800802e:	b103      	cbz	r3, 8008032 <_lseek_r+0x1e>
 8008030:	6023      	str	r3, [r4, #0]
 8008032:	bd38      	pop	{r3, r4, r5, pc}
 8008034:	200004a8 	.word	0x200004a8

08008038 <__swhatbuf_r>:
 8008038:	b570      	push	{r4, r5, r6, lr}
 800803a:	460e      	mov	r6, r1
 800803c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008040:	2900      	cmp	r1, #0
 8008042:	b096      	sub	sp, #88	; 0x58
 8008044:	4614      	mov	r4, r2
 8008046:	461d      	mov	r5, r3
 8008048:	da08      	bge.n	800805c <__swhatbuf_r+0x24>
 800804a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800804e:	2200      	movs	r2, #0
 8008050:	602a      	str	r2, [r5, #0]
 8008052:	061a      	lsls	r2, r3, #24
 8008054:	d410      	bmi.n	8008078 <__swhatbuf_r+0x40>
 8008056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800805a:	e00e      	b.n	800807a <__swhatbuf_r+0x42>
 800805c:	466a      	mov	r2, sp
 800805e:	f000 fd2b 	bl	8008ab8 <_fstat_r>
 8008062:	2800      	cmp	r0, #0
 8008064:	dbf1      	blt.n	800804a <__swhatbuf_r+0x12>
 8008066:	9a01      	ldr	r2, [sp, #4]
 8008068:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800806c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008070:	425a      	negs	r2, r3
 8008072:	415a      	adcs	r2, r3
 8008074:	602a      	str	r2, [r5, #0]
 8008076:	e7ee      	b.n	8008056 <__swhatbuf_r+0x1e>
 8008078:	2340      	movs	r3, #64	; 0x40
 800807a:	2000      	movs	r0, #0
 800807c:	6023      	str	r3, [r4, #0]
 800807e:	b016      	add	sp, #88	; 0x58
 8008080:	bd70      	pop	{r4, r5, r6, pc}
	...

08008084 <__smakebuf_r>:
 8008084:	898b      	ldrh	r3, [r1, #12]
 8008086:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008088:	079d      	lsls	r5, r3, #30
 800808a:	4606      	mov	r6, r0
 800808c:	460c      	mov	r4, r1
 800808e:	d507      	bpl.n	80080a0 <__smakebuf_r+0x1c>
 8008090:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008094:	6023      	str	r3, [r4, #0]
 8008096:	6123      	str	r3, [r4, #16]
 8008098:	2301      	movs	r3, #1
 800809a:	6163      	str	r3, [r4, #20]
 800809c:	b002      	add	sp, #8
 800809e:	bd70      	pop	{r4, r5, r6, pc}
 80080a0:	ab01      	add	r3, sp, #4
 80080a2:	466a      	mov	r2, sp
 80080a4:	f7ff ffc8 	bl	8008038 <__swhatbuf_r>
 80080a8:	9900      	ldr	r1, [sp, #0]
 80080aa:	4605      	mov	r5, r0
 80080ac:	4630      	mov	r0, r6
 80080ae:	f7fc fd95 	bl	8004bdc <_malloc_r>
 80080b2:	b948      	cbnz	r0, 80080c8 <__smakebuf_r+0x44>
 80080b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080b8:	059a      	lsls	r2, r3, #22
 80080ba:	d4ef      	bmi.n	800809c <__smakebuf_r+0x18>
 80080bc:	f023 0303 	bic.w	r3, r3, #3
 80080c0:	f043 0302 	orr.w	r3, r3, #2
 80080c4:	81a3      	strh	r3, [r4, #12]
 80080c6:	e7e3      	b.n	8008090 <__smakebuf_r+0xc>
 80080c8:	4b0d      	ldr	r3, [pc, #52]	; (8008100 <__smakebuf_r+0x7c>)
 80080ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80080cc:	89a3      	ldrh	r3, [r4, #12]
 80080ce:	6020      	str	r0, [r4, #0]
 80080d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080d4:	81a3      	strh	r3, [r4, #12]
 80080d6:	9b00      	ldr	r3, [sp, #0]
 80080d8:	6163      	str	r3, [r4, #20]
 80080da:	9b01      	ldr	r3, [sp, #4]
 80080dc:	6120      	str	r0, [r4, #16]
 80080de:	b15b      	cbz	r3, 80080f8 <__smakebuf_r+0x74>
 80080e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080e4:	4630      	mov	r0, r6
 80080e6:	f000 fcf9 	bl	8008adc <_isatty_r>
 80080ea:	b128      	cbz	r0, 80080f8 <__smakebuf_r+0x74>
 80080ec:	89a3      	ldrh	r3, [r4, #12]
 80080ee:	f023 0303 	bic.w	r3, r3, #3
 80080f2:	f043 0301 	orr.w	r3, r3, #1
 80080f6:	81a3      	strh	r3, [r4, #12]
 80080f8:	89a0      	ldrh	r0, [r4, #12]
 80080fa:	4305      	orrs	r5, r0
 80080fc:	81a5      	strh	r5, [r4, #12]
 80080fe:	e7cd      	b.n	800809c <__smakebuf_r+0x18>
 8008100:	08006925 	.word	0x08006925

08008104 <__ascii_mbtowc>:
 8008104:	b082      	sub	sp, #8
 8008106:	b901      	cbnz	r1, 800810a <__ascii_mbtowc+0x6>
 8008108:	a901      	add	r1, sp, #4
 800810a:	b142      	cbz	r2, 800811e <__ascii_mbtowc+0x1a>
 800810c:	b14b      	cbz	r3, 8008122 <__ascii_mbtowc+0x1e>
 800810e:	7813      	ldrb	r3, [r2, #0]
 8008110:	600b      	str	r3, [r1, #0]
 8008112:	7812      	ldrb	r2, [r2, #0]
 8008114:	1e10      	subs	r0, r2, #0
 8008116:	bf18      	it	ne
 8008118:	2001      	movne	r0, #1
 800811a:	b002      	add	sp, #8
 800811c:	4770      	bx	lr
 800811e:	4610      	mov	r0, r2
 8008120:	e7fb      	b.n	800811a <__ascii_mbtowc+0x16>
 8008122:	f06f 0001 	mvn.w	r0, #1
 8008126:	e7f8      	b.n	800811a <__ascii_mbtowc+0x16>

08008128 <memmove>:
 8008128:	4288      	cmp	r0, r1
 800812a:	b510      	push	{r4, lr}
 800812c:	eb01 0402 	add.w	r4, r1, r2
 8008130:	d902      	bls.n	8008138 <memmove+0x10>
 8008132:	4284      	cmp	r4, r0
 8008134:	4623      	mov	r3, r4
 8008136:	d807      	bhi.n	8008148 <memmove+0x20>
 8008138:	1e43      	subs	r3, r0, #1
 800813a:	42a1      	cmp	r1, r4
 800813c:	d008      	beq.n	8008150 <memmove+0x28>
 800813e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008142:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008146:	e7f8      	b.n	800813a <memmove+0x12>
 8008148:	4402      	add	r2, r0
 800814a:	4601      	mov	r1, r0
 800814c:	428a      	cmp	r2, r1
 800814e:	d100      	bne.n	8008152 <memmove+0x2a>
 8008150:	bd10      	pop	{r4, pc}
 8008152:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008156:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800815a:	e7f7      	b.n	800814c <memmove+0x24>

0800815c <_realloc_r>:
 800815c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008160:	4680      	mov	r8, r0
 8008162:	4614      	mov	r4, r2
 8008164:	460e      	mov	r6, r1
 8008166:	b921      	cbnz	r1, 8008172 <_realloc_r+0x16>
 8008168:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800816c:	4611      	mov	r1, r2
 800816e:	f7fc bd35 	b.w	8004bdc <_malloc_r>
 8008172:	b92a      	cbnz	r2, 8008180 <_realloc_r+0x24>
 8008174:	f7fc fcc6 	bl	8004b04 <_free_r>
 8008178:	4625      	mov	r5, r4
 800817a:	4628      	mov	r0, r5
 800817c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008180:	f000 fcbc 	bl	8008afc <_malloc_usable_size_r>
 8008184:	4284      	cmp	r4, r0
 8008186:	4607      	mov	r7, r0
 8008188:	d802      	bhi.n	8008190 <_realloc_r+0x34>
 800818a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800818e:	d812      	bhi.n	80081b6 <_realloc_r+0x5a>
 8008190:	4621      	mov	r1, r4
 8008192:	4640      	mov	r0, r8
 8008194:	f7fc fd22 	bl	8004bdc <_malloc_r>
 8008198:	4605      	mov	r5, r0
 800819a:	2800      	cmp	r0, #0
 800819c:	d0ed      	beq.n	800817a <_realloc_r+0x1e>
 800819e:	42bc      	cmp	r4, r7
 80081a0:	4622      	mov	r2, r4
 80081a2:	4631      	mov	r1, r6
 80081a4:	bf28      	it	cs
 80081a6:	463a      	movcs	r2, r7
 80081a8:	f7fe fd9d 	bl	8006ce6 <memcpy>
 80081ac:	4631      	mov	r1, r6
 80081ae:	4640      	mov	r0, r8
 80081b0:	f7fc fca8 	bl	8004b04 <_free_r>
 80081b4:	e7e1      	b.n	800817a <_realloc_r+0x1e>
 80081b6:	4635      	mov	r5, r6
 80081b8:	e7df      	b.n	800817a <_realloc_r+0x1e>

080081ba <_sungetc_r>:
 80081ba:	b538      	push	{r3, r4, r5, lr}
 80081bc:	1c4b      	adds	r3, r1, #1
 80081be:	4614      	mov	r4, r2
 80081c0:	d103      	bne.n	80081ca <_sungetc_r+0x10>
 80081c2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80081c6:	4628      	mov	r0, r5
 80081c8:	bd38      	pop	{r3, r4, r5, pc}
 80081ca:	8993      	ldrh	r3, [r2, #12]
 80081cc:	f023 0320 	bic.w	r3, r3, #32
 80081d0:	8193      	strh	r3, [r2, #12]
 80081d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081d4:	6852      	ldr	r2, [r2, #4]
 80081d6:	b2cd      	uxtb	r5, r1
 80081d8:	b18b      	cbz	r3, 80081fe <_sungetc_r+0x44>
 80081da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80081dc:	4293      	cmp	r3, r2
 80081de:	dd08      	ble.n	80081f2 <_sungetc_r+0x38>
 80081e0:	6823      	ldr	r3, [r4, #0]
 80081e2:	1e5a      	subs	r2, r3, #1
 80081e4:	6022      	str	r2, [r4, #0]
 80081e6:	f803 5c01 	strb.w	r5, [r3, #-1]
 80081ea:	6863      	ldr	r3, [r4, #4]
 80081ec:	3301      	adds	r3, #1
 80081ee:	6063      	str	r3, [r4, #4]
 80081f0:	e7e9      	b.n	80081c6 <_sungetc_r+0xc>
 80081f2:	4621      	mov	r1, r4
 80081f4:	f000 fc18 	bl	8008a28 <__submore>
 80081f8:	2800      	cmp	r0, #0
 80081fa:	d0f1      	beq.n	80081e0 <_sungetc_r+0x26>
 80081fc:	e7e1      	b.n	80081c2 <_sungetc_r+0x8>
 80081fe:	6921      	ldr	r1, [r4, #16]
 8008200:	6823      	ldr	r3, [r4, #0]
 8008202:	b151      	cbz	r1, 800821a <_sungetc_r+0x60>
 8008204:	4299      	cmp	r1, r3
 8008206:	d208      	bcs.n	800821a <_sungetc_r+0x60>
 8008208:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800820c:	42a9      	cmp	r1, r5
 800820e:	d104      	bne.n	800821a <_sungetc_r+0x60>
 8008210:	3b01      	subs	r3, #1
 8008212:	3201      	adds	r2, #1
 8008214:	6023      	str	r3, [r4, #0]
 8008216:	6062      	str	r2, [r4, #4]
 8008218:	e7d5      	b.n	80081c6 <_sungetc_r+0xc>
 800821a:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800821e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008222:	6363      	str	r3, [r4, #52]	; 0x34
 8008224:	2303      	movs	r3, #3
 8008226:	63a3      	str	r3, [r4, #56]	; 0x38
 8008228:	4623      	mov	r3, r4
 800822a:	f803 5f46 	strb.w	r5, [r3, #70]!
 800822e:	6023      	str	r3, [r4, #0]
 8008230:	2301      	movs	r3, #1
 8008232:	e7dc      	b.n	80081ee <_sungetc_r+0x34>

08008234 <__ssrefill_r>:
 8008234:	b510      	push	{r4, lr}
 8008236:	460c      	mov	r4, r1
 8008238:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800823a:	b169      	cbz	r1, 8008258 <__ssrefill_r+0x24>
 800823c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008240:	4299      	cmp	r1, r3
 8008242:	d001      	beq.n	8008248 <__ssrefill_r+0x14>
 8008244:	f7fc fc5e 	bl	8004b04 <_free_r>
 8008248:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800824a:	6063      	str	r3, [r4, #4]
 800824c:	2000      	movs	r0, #0
 800824e:	6360      	str	r0, [r4, #52]	; 0x34
 8008250:	b113      	cbz	r3, 8008258 <__ssrefill_r+0x24>
 8008252:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008254:	6023      	str	r3, [r4, #0]
 8008256:	bd10      	pop	{r4, pc}
 8008258:	6923      	ldr	r3, [r4, #16]
 800825a:	6023      	str	r3, [r4, #0]
 800825c:	2300      	movs	r3, #0
 800825e:	6063      	str	r3, [r4, #4]
 8008260:	89a3      	ldrh	r3, [r4, #12]
 8008262:	f043 0320 	orr.w	r3, r3, #32
 8008266:	81a3      	strh	r3, [r4, #12]
 8008268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800826c:	e7f3      	b.n	8008256 <__ssrefill_r+0x22>
	...

08008270 <__ssvfiscanf_r>:
 8008270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008274:	460c      	mov	r4, r1
 8008276:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800827a:	2100      	movs	r1, #0
 800827c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008280:	49a6      	ldr	r1, [pc, #664]	; (800851c <__ssvfiscanf_r+0x2ac>)
 8008282:	91a0      	str	r1, [sp, #640]	; 0x280
 8008284:	f10d 0804 	add.w	r8, sp, #4
 8008288:	49a5      	ldr	r1, [pc, #660]	; (8008520 <__ssvfiscanf_r+0x2b0>)
 800828a:	4fa6      	ldr	r7, [pc, #664]	; (8008524 <__ssvfiscanf_r+0x2b4>)
 800828c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008528 <__ssvfiscanf_r+0x2b8>
 8008290:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008294:	4606      	mov	r6, r0
 8008296:	91a1      	str	r1, [sp, #644]	; 0x284
 8008298:	9300      	str	r3, [sp, #0]
 800829a:	7813      	ldrb	r3, [r2, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	f000 815a 	beq.w	8008556 <__ssvfiscanf_r+0x2e6>
 80082a2:	5dd9      	ldrb	r1, [r3, r7]
 80082a4:	f011 0108 	ands.w	r1, r1, #8
 80082a8:	f102 0501 	add.w	r5, r2, #1
 80082ac:	d019      	beq.n	80082e2 <__ssvfiscanf_r+0x72>
 80082ae:	6863      	ldr	r3, [r4, #4]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	dd0f      	ble.n	80082d4 <__ssvfiscanf_r+0x64>
 80082b4:	6823      	ldr	r3, [r4, #0]
 80082b6:	781a      	ldrb	r2, [r3, #0]
 80082b8:	5cba      	ldrb	r2, [r7, r2]
 80082ba:	0712      	lsls	r2, r2, #28
 80082bc:	d401      	bmi.n	80082c2 <__ssvfiscanf_r+0x52>
 80082be:	462a      	mov	r2, r5
 80082c0:	e7eb      	b.n	800829a <__ssvfiscanf_r+0x2a>
 80082c2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80082c4:	3201      	adds	r2, #1
 80082c6:	9245      	str	r2, [sp, #276]	; 0x114
 80082c8:	6862      	ldr	r2, [r4, #4]
 80082ca:	3301      	adds	r3, #1
 80082cc:	3a01      	subs	r2, #1
 80082ce:	6062      	str	r2, [r4, #4]
 80082d0:	6023      	str	r3, [r4, #0]
 80082d2:	e7ec      	b.n	80082ae <__ssvfiscanf_r+0x3e>
 80082d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80082d6:	4621      	mov	r1, r4
 80082d8:	4630      	mov	r0, r6
 80082da:	4798      	blx	r3
 80082dc:	2800      	cmp	r0, #0
 80082de:	d0e9      	beq.n	80082b4 <__ssvfiscanf_r+0x44>
 80082e0:	e7ed      	b.n	80082be <__ssvfiscanf_r+0x4e>
 80082e2:	2b25      	cmp	r3, #37	; 0x25
 80082e4:	d012      	beq.n	800830c <__ssvfiscanf_r+0x9c>
 80082e6:	469a      	mov	sl, r3
 80082e8:	6863      	ldr	r3, [r4, #4]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	f340 8091 	ble.w	8008412 <__ssvfiscanf_r+0x1a2>
 80082f0:	6822      	ldr	r2, [r4, #0]
 80082f2:	7813      	ldrb	r3, [r2, #0]
 80082f4:	4553      	cmp	r3, sl
 80082f6:	f040 812e 	bne.w	8008556 <__ssvfiscanf_r+0x2e6>
 80082fa:	6863      	ldr	r3, [r4, #4]
 80082fc:	3b01      	subs	r3, #1
 80082fe:	6063      	str	r3, [r4, #4]
 8008300:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008302:	3201      	adds	r2, #1
 8008304:	3301      	adds	r3, #1
 8008306:	6022      	str	r2, [r4, #0]
 8008308:	9345      	str	r3, [sp, #276]	; 0x114
 800830a:	e7d8      	b.n	80082be <__ssvfiscanf_r+0x4e>
 800830c:	9141      	str	r1, [sp, #260]	; 0x104
 800830e:	9143      	str	r1, [sp, #268]	; 0x10c
 8008310:	7853      	ldrb	r3, [r2, #1]
 8008312:	2b2a      	cmp	r3, #42	; 0x2a
 8008314:	bf02      	ittt	eq
 8008316:	2310      	moveq	r3, #16
 8008318:	1c95      	addeq	r5, r2, #2
 800831a:	9341      	streq	r3, [sp, #260]	; 0x104
 800831c:	220a      	movs	r2, #10
 800831e:	46aa      	mov	sl, r5
 8008320:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008324:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008328:	2b09      	cmp	r3, #9
 800832a:	d91d      	bls.n	8008368 <__ssvfiscanf_r+0xf8>
 800832c:	487e      	ldr	r0, [pc, #504]	; (8008528 <__ssvfiscanf_r+0x2b8>)
 800832e:	2203      	movs	r2, #3
 8008330:	f7f7 ff56 	bl	80001e0 <memchr>
 8008334:	b140      	cbz	r0, 8008348 <__ssvfiscanf_r+0xd8>
 8008336:	2301      	movs	r3, #1
 8008338:	eba0 0009 	sub.w	r0, r0, r9
 800833c:	fa03 f000 	lsl.w	r0, r3, r0
 8008340:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008342:	4318      	orrs	r0, r3
 8008344:	9041      	str	r0, [sp, #260]	; 0x104
 8008346:	4655      	mov	r5, sl
 8008348:	f815 3b01 	ldrb.w	r3, [r5], #1
 800834c:	2b78      	cmp	r3, #120	; 0x78
 800834e:	d806      	bhi.n	800835e <__ssvfiscanf_r+0xee>
 8008350:	2b57      	cmp	r3, #87	; 0x57
 8008352:	d810      	bhi.n	8008376 <__ssvfiscanf_r+0x106>
 8008354:	2b25      	cmp	r3, #37	; 0x25
 8008356:	d0c6      	beq.n	80082e6 <__ssvfiscanf_r+0x76>
 8008358:	d856      	bhi.n	8008408 <__ssvfiscanf_r+0x198>
 800835a:	2b00      	cmp	r3, #0
 800835c:	d064      	beq.n	8008428 <__ssvfiscanf_r+0x1b8>
 800835e:	2303      	movs	r3, #3
 8008360:	9347      	str	r3, [sp, #284]	; 0x11c
 8008362:	230a      	movs	r3, #10
 8008364:	9342      	str	r3, [sp, #264]	; 0x108
 8008366:	e071      	b.n	800844c <__ssvfiscanf_r+0x1dc>
 8008368:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800836a:	fb02 1103 	mla	r1, r2, r3, r1
 800836e:	3930      	subs	r1, #48	; 0x30
 8008370:	9143      	str	r1, [sp, #268]	; 0x10c
 8008372:	4655      	mov	r5, sl
 8008374:	e7d3      	b.n	800831e <__ssvfiscanf_r+0xae>
 8008376:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800837a:	2a20      	cmp	r2, #32
 800837c:	d8ef      	bhi.n	800835e <__ssvfiscanf_r+0xee>
 800837e:	a101      	add	r1, pc, #4	; (adr r1, 8008384 <__ssvfiscanf_r+0x114>)
 8008380:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008384:	08008437 	.word	0x08008437
 8008388:	0800835f 	.word	0x0800835f
 800838c:	0800835f 	.word	0x0800835f
 8008390:	08008495 	.word	0x08008495
 8008394:	0800835f 	.word	0x0800835f
 8008398:	0800835f 	.word	0x0800835f
 800839c:	0800835f 	.word	0x0800835f
 80083a0:	0800835f 	.word	0x0800835f
 80083a4:	0800835f 	.word	0x0800835f
 80083a8:	0800835f 	.word	0x0800835f
 80083ac:	0800835f 	.word	0x0800835f
 80083b0:	080084ab 	.word	0x080084ab
 80083b4:	08008481 	.word	0x08008481
 80083b8:	0800840f 	.word	0x0800840f
 80083bc:	0800840f 	.word	0x0800840f
 80083c0:	0800840f 	.word	0x0800840f
 80083c4:	0800835f 	.word	0x0800835f
 80083c8:	08008485 	.word	0x08008485
 80083cc:	0800835f 	.word	0x0800835f
 80083d0:	0800835f 	.word	0x0800835f
 80083d4:	0800835f 	.word	0x0800835f
 80083d8:	0800835f 	.word	0x0800835f
 80083dc:	080084bb 	.word	0x080084bb
 80083e0:	0800848d 	.word	0x0800848d
 80083e4:	0800842f 	.word	0x0800842f
 80083e8:	0800835f 	.word	0x0800835f
 80083ec:	0800835f 	.word	0x0800835f
 80083f0:	080084b7 	.word	0x080084b7
 80083f4:	0800835f 	.word	0x0800835f
 80083f8:	08008481 	.word	0x08008481
 80083fc:	0800835f 	.word	0x0800835f
 8008400:	0800835f 	.word	0x0800835f
 8008404:	08008437 	.word	0x08008437
 8008408:	3b45      	subs	r3, #69	; 0x45
 800840a:	2b02      	cmp	r3, #2
 800840c:	d8a7      	bhi.n	800835e <__ssvfiscanf_r+0xee>
 800840e:	2305      	movs	r3, #5
 8008410:	e01b      	b.n	800844a <__ssvfiscanf_r+0x1da>
 8008412:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008414:	4621      	mov	r1, r4
 8008416:	4630      	mov	r0, r6
 8008418:	4798      	blx	r3
 800841a:	2800      	cmp	r0, #0
 800841c:	f43f af68 	beq.w	80082f0 <__ssvfiscanf_r+0x80>
 8008420:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008422:	2800      	cmp	r0, #0
 8008424:	f040 808d 	bne.w	8008542 <__ssvfiscanf_r+0x2d2>
 8008428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800842c:	e08f      	b.n	800854e <__ssvfiscanf_r+0x2de>
 800842e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008430:	f042 0220 	orr.w	r2, r2, #32
 8008434:	9241      	str	r2, [sp, #260]	; 0x104
 8008436:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800843c:	9241      	str	r2, [sp, #260]	; 0x104
 800843e:	2210      	movs	r2, #16
 8008440:	2b6f      	cmp	r3, #111	; 0x6f
 8008442:	9242      	str	r2, [sp, #264]	; 0x108
 8008444:	bf34      	ite	cc
 8008446:	2303      	movcc	r3, #3
 8008448:	2304      	movcs	r3, #4
 800844a:	9347      	str	r3, [sp, #284]	; 0x11c
 800844c:	6863      	ldr	r3, [r4, #4]
 800844e:	2b00      	cmp	r3, #0
 8008450:	dd42      	ble.n	80084d8 <__ssvfiscanf_r+0x268>
 8008452:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008454:	0659      	lsls	r1, r3, #25
 8008456:	d404      	bmi.n	8008462 <__ssvfiscanf_r+0x1f2>
 8008458:	6823      	ldr	r3, [r4, #0]
 800845a:	781a      	ldrb	r2, [r3, #0]
 800845c:	5cba      	ldrb	r2, [r7, r2]
 800845e:	0712      	lsls	r2, r2, #28
 8008460:	d441      	bmi.n	80084e6 <__ssvfiscanf_r+0x276>
 8008462:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008464:	2b02      	cmp	r3, #2
 8008466:	dc50      	bgt.n	800850a <__ssvfiscanf_r+0x29a>
 8008468:	466b      	mov	r3, sp
 800846a:	4622      	mov	r2, r4
 800846c:	a941      	add	r1, sp, #260	; 0x104
 800846e:	4630      	mov	r0, r6
 8008470:	f000 f876 	bl	8008560 <_scanf_chars>
 8008474:	2801      	cmp	r0, #1
 8008476:	d06e      	beq.n	8008556 <__ssvfiscanf_r+0x2e6>
 8008478:	2802      	cmp	r0, #2
 800847a:	f47f af20 	bne.w	80082be <__ssvfiscanf_r+0x4e>
 800847e:	e7cf      	b.n	8008420 <__ssvfiscanf_r+0x1b0>
 8008480:	220a      	movs	r2, #10
 8008482:	e7dd      	b.n	8008440 <__ssvfiscanf_r+0x1d0>
 8008484:	2300      	movs	r3, #0
 8008486:	9342      	str	r3, [sp, #264]	; 0x108
 8008488:	2303      	movs	r3, #3
 800848a:	e7de      	b.n	800844a <__ssvfiscanf_r+0x1da>
 800848c:	2308      	movs	r3, #8
 800848e:	9342      	str	r3, [sp, #264]	; 0x108
 8008490:	2304      	movs	r3, #4
 8008492:	e7da      	b.n	800844a <__ssvfiscanf_r+0x1da>
 8008494:	4629      	mov	r1, r5
 8008496:	4640      	mov	r0, r8
 8008498:	f000 f9c6 	bl	8008828 <__sccl>
 800849c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800849e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084a2:	9341      	str	r3, [sp, #260]	; 0x104
 80084a4:	4605      	mov	r5, r0
 80084a6:	2301      	movs	r3, #1
 80084a8:	e7cf      	b.n	800844a <__ssvfiscanf_r+0x1da>
 80084aa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80084ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084b0:	9341      	str	r3, [sp, #260]	; 0x104
 80084b2:	2300      	movs	r3, #0
 80084b4:	e7c9      	b.n	800844a <__ssvfiscanf_r+0x1da>
 80084b6:	2302      	movs	r3, #2
 80084b8:	e7c7      	b.n	800844a <__ssvfiscanf_r+0x1da>
 80084ba:	9841      	ldr	r0, [sp, #260]	; 0x104
 80084bc:	06c3      	lsls	r3, r0, #27
 80084be:	f53f aefe 	bmi.w	80082be <__ssvfiscanf_r+0x4e>
 80084c2:	9b00      	ldr	r3, [sp, #0]
 80084c4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80084c6:	1d19      	adds	r1, r3, #4
 80084c8:	9100      	str	r1, [sp, #0]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f010 0f01 	tst.w	r0, #1
 80084d0:	bf14      	ite	ne
 80084d2:	801a      	strhne	r2, [r3, #0]
 80084d4:	601a      	streq	r2, [r3, #0]
 80084d6:	e6f2      	b.n	80082be <__ssvfiscanf_r+0x4e>
 80084d8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80084da:	4621      	mov	r1, r4
 80084dc:	4630      	mov	r0, r6
 80084de:	4798      	blx	r3
 80084e0:	2800      	cmp	r0, #0
 80084e2:	d0b6      	beq.n	8008452 <__ssvfiscanf_r+0x1e2>
 80084e4:	e79c      	b.n	8008420 <__ssvfiscanf_r+0x1b0>
 80084e6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80084e8:	3201      	adds	r2, #1
 80084ea:	9245      	str	r2, [sp, #276]	; 0x114
 80084ec:	6862      	ldr	r2, [r4, #4]
 80084ee:	3a01      	subs	r2, #1
 80084f0:	2a00      	cmp	r2, #0
 80084f2:	6062      	str	r2, [r4, #4]
 80084f4:	dd02      	ble.n	80084fc <__ssvfiscanf_r+0x28c>
 80084f6:	3301      	adds	r3, #1
 80084f8:	6023      	str	r3, [r4, #0]
 80084fa:	e7ad      	b.n	8008458 <__ssvfiscanf_r+0x1e8>
 80084fc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80084fe:	4621      	mov	r1, r4
 8008500:	4630      	mov	r0, r6
 8008502:	4798      	blx	r3
 8008504:	2800      	cmp	r0, #0
 8008506:	d0a7      	beq.n	8008458 <__ssvfiscanf_r+0x1e8>
 8008508:	e78a      	b.n	8008420 <__ssvfiscanf_r+0x1b0>
 800850a:	2b04      	cmp	r3, #4
 800850c:	dc0e      	bgt.n	800852c <__ssvfiscanf_r+0x2bc>
 800850e:	466b      	mov	r3, sp
 8008510:	4622      	mov	r2, r4
 8008512:	a941      	add	r1, sp, #260	; 0x104
 8008514:	4630      	mov	r0, r6
 8008516:	f000 f87d 	bl	8008614 <_scanf_i>
 800851a:	e7ab      	b.n	8008474 <__ssvfiscanf_r+0x204>
 800851c:	080081bb 	.word	0x080081bb
 8008520:	08008235 	.word	0x08008235
 8008524:	080090de 	.word	0x080090de
 8008528:	080090d2 	.word	0x080090d2
 800852c:	4b0b      	ldr	r3, [pc, #44]	; (800855c <__ssvfiscanf_r+0x2ec>)
 800852e:	2b00      	cmp	r3, #0
 8008530:	f43f aec5 	beq.w	80082be <__ssvfiscanf_r+0x4e>
 8008534:	466b      	mov	r3, sp
 8008536:	4622      	mov	r2, r4
 8008538:	a941      	add	r1, sp, #260	; 0x104
 800853a:	4630      	mov	r0, r6
 800853c:	f3af 8000 	nop.w
 8008540:	e798      	b.n	8008474 <__ssvfiscanf_r+0x204>
 8008542:	89a3      	ldrh	r3, [r4, #12]
 8008544:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008548:	bf18      	it	ne
 800854a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800854e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8008552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008556:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008558:	e7f9      	b.n	800854e <__ssvfiscanf_r+0x2de>
 800855a:	bf00      	nop
 800855c:	00000000 	.word	0x00000000

08008560 <_scanf_chars>:
 8008560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008564:	4615      	mov	r5, r2
 8008566:	688a      	ldr	r2, [r1, #8]
 8008568:	4680      	mov	r8, r0
 800856a:	460c      	mov	r4, r1
 800856c:	b932      	cbnz	r2, 800857c <_scanf_chars+0x1c>
 800856e:	698a      	ldr	r2, [r1, #24]
 8008570:	2a00      	cmp	r2, #0
 8008572:	bf0c      	ite	eq
 8008574:	2201      	moveq	r2, #1
 8008576:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800857a:	608a      	str	r2, [r1, #8]
 800857c:	6822      	ldr	r2, [r4, #0]
 800857e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8008610 <_scanf_chars+0xb0>
 8008582:	06d1      	lsls	r1, r2, #27
 8008584:	bf5f      	itttt	pl
 8008586:	681a      	ldrpl	r2, [r3, #0]
 8008588:	1d11      	addpl	r1, r2, #4
 800858a:	6019      	strpl	r1, [r3, #0]
 800858c:	6816      	ldrpl	r6, [r2, #0]
 800858e:	2700      	movs	r7, #0
 8008590:	69a0      	ldr	r0, [r4, #24]
 8008592:	b188      	cbz	r0, 80085b8 <_scanf_chars+0x58>
 8008594:	2801      	cmp	r0, #1
 8008596:	d107      	bne.n	80085a8 <_scanf_chars+0x48>
 8008598:	682a      	ldr	r2, [r5, #0]
 800859a:	7811      	ldrb	r1, [r2, #0]
 800859c:	6962      	ldr	r2, [r4, #20]
 800859e:	5c52      	ldrb	r2, [r2, r1]
 80085a0:	b952      	cbnz	r2, 80085b8 <_scanf_chars+0x58>
 80085a2:	2f00      	cmp	r7, #0
 80085a4:	d031      	beq.n	800860a <_scanf_chars+0xaa>
 80085a6:	e022      	b.n	80085ee <_scanf_chars+0x8e>
 80085a8:	2802      	cmp	r0, #2
 80085aa:	d120      	bne.n	80085ee <_scanf_chars+0x8e>
 80085ac:	682b      	ldr	r3, [r5, #0]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80085b4:	071b      	lsls	r3, r3, #28
 80085b6:	d41a      	bmi.n	80085ee <_scanf_chars+0x8e>
 80085b8:	6823      	ldr	r3, [r4, #0]
 80085ba:	06da      	lsls	r2, r3, #27
 80085bc:	bf5e      	ittt	pl
 80085be:	682b      	ldrpl	r3, [r5, #0]
 80085c0:	781b      	ldrbpl	r3, [r3, #0]
 80085c2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80085c6:	682a      	ldr	r2, [r5, #0]
 80085c8:	686b      	ldr	r3, [r5, #4]
 80085ca:	3201      	adds	r2, #1
 80085cc:	602a      	str	r2, [r5, #0]
 80085ce:	68a2      	ldr	r2, [r4, #8]
 80085d0:	3b01      	subs	r3, #1
 80085d2:	3a01      	subs	r2, #1
 80085d4:	606b      	str	r3, [r5, #4]
 80085d6:	3701      	adds	r7, #1
 80085d8:	60a2      	str	r2, [r4, #8]
 80085da:	b142      	cbz	r2, 80085ee <_scanf_chars+0x8e>
 80085dc:	2b00      	cmp	r3, #0
 80085de:	dcd7      	bgt.n	8008590 <_scanf_chars+0x30>
 80085e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80085e4:	4629      	mov	r1, r5
 80085e6:	4640      	mov	r0, r8
 80085e8:	4798      	blx	r3
 80085ea:	2800      	cmp	r0, #0
 80085ec:	d0d0      	beq.n	8008590 <_scanf_chars+0x30>
 80085ee:	6823      	ldr	r3, [r4, #0]
 80085f0:	f013 0310 	ands.w	r3, r3, #16
 80085f4:	d105      	bne.n	8008602 <_scanf_chars+0xa2>
 80085f6:	68e2      	ldr	r2, [r4, #12]
 80085f8:	3201      	adds	r2, #1
 80085fa:	60e2      	str	r2, [r4, #12]
 80085fc:	69a2      	ldr	r2, [r4, #24]
 80085fe:	b102      	cbz	r2, 8008602 <_scanf_chars+0xa2>
 8008600:	7033      	strb	r3, [r6, #0]
 8008602:	6923      	ldr	r3, [r4, #16]
 8008604:	443b      	add	r3, r7
 8008606:	6123      	str	r3, [r4, #16]
 8008608:	2000      	movs	r0, #0
 800860a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800860e:	bf00      	nop
 8008610:	080090de 	.word	0x080090de

08008614 <_scanf_i>:
 8008614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008618:	4698      	mov	r8, r3
 800861a:	4b76      	ldr	r3, [pc, #472]	; (80087f4 <_scanf_i+0x1e0>)
 800861c:	460c      	mov	r4, r1
 800861e:	4682      	mov	sl, r0
 8008620:	4616      	mov	r6, r2
 8008622:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008626:	b087      	sub	sp, #28
 8008628:	ab03      	add	r3, sp, #12
 800862a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800862e:	4b72      	ldr	r3, [pc, #456]	; (80087f8 <_scanf_i+0x1e4>)
 8008630:	69a1      	ldr	r1, [r4, #24]
 8008632:	4a72      	ldr	r2, [pc, #456]	; (80087fc <_scanf_i+0x1e8>)
 8008634:	2903      	cmp	r1, #3
 8008636:	bf18      	it	ne
 8008638:	461a      	movne	r2, r3
 800863a:	68a3      	ldr	r3, [r4, #8]
 800863c:	9201      	str	r2, [sp, #4]
 800863e:	1e5a      	subs	r2, r3, #1
 8008640:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008644:	bf88      	it	hi
 8008646:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800864a:	4627      	mov	r7, r4
 800864c:	bf82      	ittt	hi
 800864e:	eb03 0905 	addhi.w	r9, r3, r5
 8008652:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008656:	60a3      	strhi	r3, [r4, #8]
 8008658:	f857 3b1c 	ldr.w	r3, [r7], #28
 800865c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008660:	bf98      	it	ls
 8008662:	f04f 0900 	movls.w	r9, #0
 8008666:	6023      	str	r3, [r4, #0]
 8008668:	463d      	mov	r5, r7
 800866a:	f04f 0b00 	mov.w	fp, #0
 800866e:	6831      	ldr	r1, [r6, #0]
 8008670:	ab03      	add	r3, sp, #12
 8008672:	7809      	ldrb	r1, [r1, #0]
 8008674:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008678:	2202      	movs	r2, #2
 800867a:	f7f7 fdb1 	bl	80001e0 <memchr>
 800867e:	b328      	cbz	r0, 80086cc <_scanf_i+0xb8>
 8008680:	f1bb 0f01 	cmp.w	fp, #1
 8008684:	d159      	bne.n	800873a <_scanf_i+0x126>
 8008686:	6862      	ldr	r2, [r4, #4]
 8008688:	b92a      	cbnz	r2, 8008696 <_scanf_i+0x82>
 800868a:	6822      	ldr	r2, [r4, #0]
 800868c:	2308      	movs	r3, #8
 800868e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008692:	6063      	str	r3, [r4, #4]
 8008694:	6022      	str	r2, [r4, #0]
 8008696:	6822      	ldr	r2, [r4, #0]
 8008698:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800869c:	6022      	str	r2, [r4, #0]
 800869e:	68a2      	ldr	r2, [r4, #8]
 80086a0:	1e51      	subs	r1, r2, #1
 80086a2:	60a1      	str	r1, [r4, #8]
 80086a4:	b192      	cbz	r2, 80086cc <_scanf_i+0xb8>
 80086a6:	6832      	ldr	r2, [r6, #0]
 80086a8:	1c51      	adds	r1, r2, #1
 80086aa:	6031      	str	r1, [r6, #0]
 80086ac:	7812      	ldrb	r2, [r2, #0]
 80086ae:	f805 2b01 	strb.w	r2, [r5], #1
 80086b2:	6872      	ldr	r2, [r6, #4]
 80086b4:	3a01      	subs	r2, #1
 80086b6:	2a00      	cmp	r2, #0
 80086b8:	6072      	str	r2, [r6, #4]
 80086ba:	dc07      	bgt.n	80086cc <_scanf_i+0xb8>
 80086bc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80086c0:	4631      	mov	r1, r6
 80086c2:	4650      	mov	r0, sl
 80086c4:	4790      	blx	r2
 80086c6:	2800      	cmp	r0, #0
 80086c8:	f040 8085 	bne.w	80087d6 <_scanf_i+0x1c2>
 80086cc:	f10b 0b01 	add.w	fp, fp, #1
 80086d0:	f1bb 0f03 	cmp.w	fp, #3
 80086d4:	d1cb      	bne.n	800866e <_scanf_i+0x5a>
 80086d6:	6863      	ldr	r3, [r4, #4]
 80086d8:	b90b      	cbnz	r3, 80086de <_scanf_i+0xca>
 80086da:	230a      	movs	r3, #10
 80086dc:	6063      	str	r3, [r4, #4]
 80086de:	6863      	ldr	r3, [r4, #4]
 80086e0:	4947      	ldr	r1, [pc, #284]	; (8008800 <_scanf_i+0x1ec>)
 80086e2:	6960      	ldr	r0, [r4, #20]
 80086e4:	1ac9      	subs	r1, r1, r3
 80086e6:	f000 f89f 	bl	8008828 <__sccl>
 80086ea:	f04f 0b00 	mov.w	fp, #0
 80086ee:	68a3      	ldr	r3, [r4, #8]
 80086f0:	6822      	ldr	r2, [r4, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d03d      	beq.n	8008772 <_scanf_i+0x15e>
 80086f6:	6831      	ldr	r1, [r6, #0]
 80086f8:	6960      	ldr	r0, [r4, #20]
 80086fa:	f891 c000 	ldrb.w	ip, [r1]
 80086fe:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008702:	2800      	cmp	r0, #0
 8008704:	d035      	beq.n	8008772 <_scanf_i+0x15e>
 8008706:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800870a:	d124      	bne.n	8008756 <_scanf_i+0x142>
 800870c:	0510      	lsls	r0, r2, #20
 800870e:	d522      	bpl.n	8008756 <_scanf_i+0x142>
 8008710:	f10b 0b01 	add.w	fp, fp, #1
 8008714:	f1b9 0f00 	cmp.w	r9, #0
 8008718:	d003      	beq.n	8008722 <_scanf_i+0x10e>
 800871a:	3301      	adds	r3, #1
 800871c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008720:	60a3      	str	r3, [r4, #8]
 8008722:	6873      	ldr	r3, [r6, #4]
 8008724:	3b01      	subs	r3, #1
 8008726:	2b00      	cmp	r3, #0
 8008728:	6073      	str	r3, [r6, #4]
 800872a:	dd1b      	ble.n	8008764 <_scanf_i+0x150>
 800872c:	6833      	ldr	r3, [r6, #0]
 800872e:	3301      	adds	r3, #1
 8008730:	6033      	str	r3, [r6, #0]
 8008732:	68a3      	ldr	r3, [r4, #8]
 8008734:	3b01      	subs	r3, #1
 8008736:	60a3      	str	r3, [r4, #8]
 8008738:	e7d9      	b.n	80086ee <_scanf_i+0xda>
 800873a:	f1bb 0f02 	cmp.w	fp, #2
 800873e:	d1ae      	bne.n	800869e <_scanf_i+0x8a>
 8008740:	6822      	ldr	r2, [r4, #0]
 8008742:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008746:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800874a:	d1bf      	bne.n	80086cc <_scanf_i+0xb8>
 800874c:	2310      	movs	r3, #16
 800874e:	6063      	str	r3, [r4, #4]
 8008750:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008754:	e7a2      	b.n	800869c <_scanf_i+0x88>
 8008756:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800875a:	6022      	str	r2, [r4, #0]
 800875c:	780b      	ldrb	r3, [r1, #0]
 800875e:	f805 3b01 	strb.w	r3, [r5], #1
 8008762:	e7de      	b.n	8008722 <_scanf_i+0x10e>
 8008764:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008768:	4631      	mov	r1, r6
 800876a:	4650      	mov	r0, sl
 800876c:	4798      	blx	r3
 800876e:	2800      	cmp	r0, #0
 8008770:	d0df      	beq.n	8008732 <_scanf_i+0x11e>
 8008772:	6823      	ldr	r3, [r4, #0]
 8008774:	05db      	lsls	r3, r3, #23
 8008776:	d50d      	bpl.n	8008794 <_scanf_i+0x180>
 8008778:	42bd      	cmp	r5, r7
 800877a:	d909      	bls.n	8008790 <_scanf_i+0x17c>
 800877c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008780:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008784:	4632      	mov	r2, r6
 8008786:	4650      	mov	r0, sl
 8008788:	4798      	blx	r3
 800878a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800878e:	464d      	mov	r5, r9
 8008790:	42bd      	cmp	r5, r7
 8008792:	d02d      	beq.n	80087f0 <_scanf_i+0x1dc>
 8008794:	6822      	ldr	r2, [r4, #0]
 8008796:	f012 0210 	ands.w	r2, r2, #16
 800879a:	d113      	bne.n	80087c4 <_scanf_i+0x1b0>
 800879c:	702a      	strb	r2, [r5, #0]
 800879e:	6863      	ldr	r3, [r4, #4]
 80087a0:	9e01      	ldr	r6, [sp, #4]
 80087a2:	4639      	mov	r1, r7
 80087a4:	4650      	mov	r0, sl
 80087a6:	47b0      	blx	r6
 80087a8:	6821      	ldr	r1, [r4, #0]
 80087aa:	f8d8 3000 	ldr.w	r3, [r8]
 80087ae:	f011 0f20 	tst.w	r1, #32
 80087b2:	d013      	beq.n	80087dc <_scanf_i+0x1c8>
 80087b4:	1d1a      	adds	r2, r3, #4
 80087b6:	f8c8 2000 	str.w	r2, [r8]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	6018      	str	r0, [r3, #0]
 80087be:	68e3      	ldr	r3, [r4, #12]
 80087c0:	3301      	adds	r3, #1
 80087c2:	60e3      	str	r3, [r4, #12]
 80087c4:	1bed      	subs	r5, r5, r7
 80087c6:	44ab      	add	fp, r5
 80087c8:	6925      	ldr	r5, [r4, #16]
 80087ca:	445d      	add	r5, fp
 80087cc:	6125      	str	r5, [r4, #16]
 80087ce:	2000      	movs	r0, #0
 80087d0:	b007      	add	sp, #28
 80087d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d6:	f04f 0b00 	mov.w	fp, #0
 80087da:	e7ca      	b.n	8008772 <_scanf_i+0x15e>
 80087dc:	1d1a      	adds	r2, r3, #4
 80087de:	f8c8 2000 	str.w	r2, [r8]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f011 0f01 	tst.w	r1, #1
 80087e8:	bf14      	ite	ne
 80087ea:	8018      	strhne	r0, [r3, #0]
 80087ec:	6018      	streq	r0, [r3, #0]
 80087ee:	e7e6      	b.n	80087be <_scanf_i+0x1aa>
 80087f0:	2001      	movs	r0, #1
 80087f2:	e7ed      	b.n	80087d0 <_scanf_i+0x1bc>
 80087f4:	08008be0 	.word	0x08008be0
 80087f8:	08007c8d 	.word	0x08007c8d
 80087fc:	08008a25 	.word	0x08008a25
 8008800:	08009201 	.word	0x08009201

08008804 <_read_r>:
 8008804:	b538      	push	{r3, r4, r5, lr}
 8008806:	4d07      	ldr	r5, [pc, #28]	; (8008824 <_read_r+0x20>)
 8008808:	4604      	mov	r4, r0
 800880a:	4608      	mov	r0, r1
 800880c:	4611      	mov	r1, r2
 800880e:	2200      	movs	r2, #0
 8008810:	602a      	str	r2, [r5, #0]
 8008812:	461a      	mov	r2, r3
 8008814:	f7f9 f8a2 	bl	800195c <_read>
 8008818:	1c43      	adds	r3, r0, #1
 800881a:	d102      	bne.n	8008822 <_read_r+0x1e>
 800881c:	682b      	ldr	r3, [r5, #0]
 800881e:	b103      	cbz	r3, 8008822 <_read_r+0x1e>
 8008820:	6023      	str	r3, [r4, #0]
 8008822:	bd38      	pop	{r3, r4, r5, pc}
 8008824:	200004a8 	.word	0x200004a8

08008828 <__sccl>:
 8008828:	b570      	push	{r4, r5, r6, lr}
 800882a:	780b      	ldrb	r3, [r1, #0]
 800882c:	4604      	mov	r4, r0
 800882e:	2b5e      	cmp	r3, #94	; 0x5e
 8008830:	bf0b      	itete	eq
 8008832:	784b      	ldrbeq	r3, [r1, #1]
 8008834:	1c48      	addne	r0, r1, #1
 8008836:	1c88      	addeq	r0, r1, #2
 8008838:	2200      	movne	r2, #0
 800883a:	bf08      	it	eq
 800883c:	2201      	moveq	r2, #1
 800883e:	1e61      	subs	r1, r4, #1
 8008840:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008844:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008848:	42a9      	cmp	r1, r5
 800884a:	d1fb      	bne.n	8008844 <__sccl+0x1c>
 800884c:	b90b      	cbnz	r3, 8008852 <__sccl+0x2a>
 800884e:	3801      	subs	r0, #1
 8008850:	bd70      	pop	{r4, r5, r6, pc}
 8008852:	f082 0201 	eor.w	r2, r2, #1
 8008856:	54e2      	strb	r2, [r4, r3]
 8008858:	4605      	mov	r5, r0
 800885a:	4628      	mov	r0, r5
 800885c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008860:	292d      	cmp	r1, #45	; 0x2d
 8008862:	d006      	beq.n	8008872 <__sccl+0x4a>
 8008864:	295d      	cmp	r1, #93	; 0x5d
 8008866:	d0f3      	beq.n	8008850 <__sccl+0x28>
 8008868:	b909      	cbnz	r1, 800886e <__sccl+0x46>
 800886a:	4628      	mov	r0, r5
 800886c:	e7f0      	b.n	8008850 <__sccl+0x28>
 800886e:	460b      	mov	r3, r1
 8008870:	e7f1      	b.n	8008856 <__sccl+0x2e>
 8008872:	786e      	ldrb	r6, [r5, #1]
 8008874:	2e5d      	cmp	r6, #93	; 0x5d
 8008876:	d0fa      	beq.n	800886e <__sccl+0x46>
 8008878:	42b3      	cmp	r3, r6
 800887a:	dcf8      	bgt.n	800886e <__sccl+0x46>
 800887c:	3502      	adds	r5, #2
 800887e:	4619      	mov	r1, r3
 8008880:	3101      	adds	r1, #1
 8008882:	428e      	cmp	r6, r1
 8008884:	5462      	strb	r2, [r4, r1]
 8008886:	dcfb      	bgt.n	8008880 <__sccl+0x58>
 8008888:	1af1      	subs	r1, r6, r3
 800888a:	3901      	subs	r1, #1
 800888c:	1c58      	adds	r0, r3, #1
 800888e:	42b3      	cmp	r3, r6
 8008890:	bfa8      	it	ge
 8008892:	2100      	movge	r1, #0
 8008894:	1843      	adds	r3, r0, r1
 8008896:	e7e0      	b.n	800885a <__sccl+0x32>

08008898 <_raise_r>:
 8008898:	291f      	cmp	r1, #31
 800889a:	b538      	push	{r3, r4, r5, lr}
 800889c:	4604      	mov	r4, r0
 800889e:	460d      	mov	r5, r1
 80088a0:	d904      	bls.n	80088ac <_raise_r+0x14>
 80088a2:	2316      	movs	r3, #22
 80088a4:	6003      	str	r3, [r0, #0]
 80088a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088aa:	bd38      	pop	{r3, r4, r5, pc}
 80088ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80088ae:	b112      	cbz	r2, 80088b6 <_raise_r+0x1e>
 80088b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088b4:	b94b      	cbnz	r3, 80088ca <_raise_r+0x32>
 80088b6:	4620      	mov	r0, r4
 80088b8:	f000 f830 	bl	800891c <_getpid_r>
 80088bc:	462a      	mov	r2, r5
 80088be:	4601      	mov	r1, r0
 80088c0:	4620      	mov	r0, r4
 80088c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088c6:	f000 b817 	b.w	80088f8 <_kill_r>
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d00a      	beq.n	80088e4 <_raise_r+0x4c>
 80088ce:	1c59      	adds	r1, r3, #1
 80088d0:	d103      	bne.n	80088da <_raise_r+0x42>
 80088d2:	2316      	movs	r3, #22
 80088d4:	6003      	str	r3, [r0, #0]
 80088d6:	2001      	movs	r0, #1
 80088d8:	e7e7      	b.n	80088aa <_raise_r+0x12>
 80088da:	2400      	movs	r4, #0
 80088dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80088e0:	4628      	mov	r0, r5
 80088e2:	4798      	blx	r3
 80088e4:	2000      	movs	r0, #0
 80088e6:	e7e0      	b.n	80088aa <_raise_r+0x12>

080088e8 <raise>:
 80088e8:	4b02      	ldr	r3, [pc, #8]	; (80088f4 <raise+0xc>)
 80088ea:	4601      	mov	r1, r0
 80088ec:	6818      	ldr	r0, [r3, #0]
 80088ee:	f7ff bfd3 	b.w	8008898 <_raise_r>
 80088f2:	bf00      	nop
 80088f4:	20000010 	.word	0x20000010

080088f8 <_kill_r>:
 80088f8:	b538      	push	{r3, r4, r5, lr}
 80088fa:	4d07      	ldr	r5, [pc, #28]	; (8008918 <_kill_r+0x20>)
 80088fc:	2300      	movs	r3, #0
 80088fe:	4604      	mov	r4, r0
 8008900:	4608      	mov	r0, r1
 8008902:	4611      	mov	r1, r2
 8008904:	602b      	str	r3, [r5, #0]
 8008906:	f7f9 f80f 	bl	8001928 <_kill>
 800890a:	1c43      	adds	r3, r0, #1
 800890c:	d102      	bne.n	8008914 <_kill_r+0x1c>
 800890e:	682b      	ldr	r3, [r5, #0]
 8008910:	b103      	cbz	r3, 8008914 <_kill_r+0x1c>
 8008912:	6023      	str	r3, [r4, #0]
 8008914:	bd38      	pop	{r3, r4, r5, pc}
 8008916:	bf00      	nop
 8008918:	200004a8 	.word	0x200004a8

0800891c <_getpid_r>:
 800891c:	f7f8 bffc 	b.w	8001918 <_getpid>

08008920 <_strtol_l.constprop.0>:
 8008920:	2b01      	cmp	r3, #1
 8008922:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008926:	d001      	beq.n	800892c <_strtol_l.constprop.0+0xc>
 8008928:	2b24      	cmp	r3, #36	; 0x24
 800892a:	d906      	bls.n	800893a <_strtol_l.constprop.0+0x1a>
 800892c:	f7fb fd24 	bl	8004378 <__errno>
 8008930:	2316      	movs	r3, #22
 8008932:	6003      	str	r3, [r0, #0]
 8008934:	2000      	movs	r0, #0
 8008936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800893a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008a20 <_strtol_l.constprop.0+0x100>
 800893e:	460d      	mov	r5, r1
 8008940:	462e      	mov	r6, r5
 8008942:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008946:	f814 700c 	ldrb.w	r7, [r4, ip]
 800894a:	f017 0708 	ands.w	r7, r7, #8
 800894e:	d1f7      	bne.n	8008940 <_strtol_l.constprop.0+0x20>
 8008950:	2c2d      	cmp	r4, #45	; 0x2d
 8008952:	d132      	bne.n	80089ba <_strtol_l.constprop.0+0x9a>
 8008954:	782c      	ldrb	r4, [r5, #0]
 8008956:	2701      	movs	r7, #1
 8008958:	1cb5      	adds	r5, r6, #2
 800895a:	2b00      	cmp	r3, #0
 800895c:	d05b      	beq.n	8008a16 <_strtol_l.constprop.0+0xf6>
 800895e:	2b10      	cmp	r3, #16
 8008960:	d109      	bne.n	8008976 <_strtol_l.constprop.0+0x56>
 8008962:	2c30      	cmp	r4, #48	; 0x30
 8008964:	d107      	bne.n	8008976 <_strtol_l.constprop.0+0x56>
 8008966:	782c      	ldrb	r4, [r5, #0]
 8008968:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800896c:	2c58      	cmp	r4, #88	; 0x58
 800896e:	d14d      	bne.n	8008a0c <_strtol_l.constprop.0+0xec>
 8008970:	786c      	ldrb	r4, [r5, #1]
 8008972:	2310      	movs	r3, #16
 8008974:	3502      	adds	r5, #2
 8008976:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800897a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800897e:	f04f 0c00 	mov.w	ip, #0
 8008982:	fbb8 f9f3 	udiv	r9, r8, r3
 8008986:	4666      	mov	r6, ip
 8008988:	fb03 8a19 	mls	sl, r3, r9, r8
 800898c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008990:	f1be 0f09 	cmp.w	lr, #9
 8008994:	d816      	bhi.n	80089c4 <_strtol_l.constprop.0+0xa4>
 8008996:	4674      	mov	r4, lr
 8008998:	42a3      	cmp	r3, r4
 800899a:	dd24      	ble.n	80089e6 <_strtol_l.constprop.0+0xc6>
 800899c:	f1bc 0f00 	cmp.w	ip, #0
 80089a0:	db1e      	blt.n	80089e0 <_strtol_l.constprop.0+0xc0>
 80089a2:	45b1      	cmp	r9, r6
 80089a4:	d31c      	bcc.n	80089e0 <_strtol_l.constprop.0+0xc0>
 80089a6:	d101      	bne.n	80089ac <_strtol_l.constprop.0+0x8c>
 80089a8:	45a2      	cmp	sl, r4
 80089aa:	db19      	blt.n	80089e0 <_strtol_l.constprop.0+0xc0>
 80089ac:	fb06 4603 	mla	r6, r6, r3, r4
 80089b0:	f04f 0c01 	mov.w	ip, #1
 80089b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80089b8:	e7e8      	b.n	800898c <_strtol_l.constprop.0+0x6c>
 80089ba:	2c2b      	cmp	r4, #43	; 0x2b
 80089bc:	bf04      	itt	eq
 80089be:	782c      	ldrbeq	r4, [r5, #0]
 80089c0:	1cb5      	addeq	r5, r6, #2
 80089c2:	e7ca      	b.n	800895a <_strtol_l.constprop.0+0x3a>
 80089c4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80089c8:	f1be 0f19 	cmp.w	lr, #25
 80089cc:	d801      	bhi.n	80089d2 <_strtol_l.constprop.0+0xb2>
 80089ce:	3c37      	subs	r4, #55	; 0x37
 80089d0:	e7e2      	b.n	8008998 <_strtol_l.constprop.0+0x78>
 80089d2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80089d6:	f1be 0f19 	cmp.w	lr, #25
 80089da:	d804      	bhi.n	80089e6 <_strtol_l.constprop.0+0xc6>
 80089dc:	3c57      	subs	r4, #87	; 0x57
 80089de:	e7db      	b.n	8008998 <_strtol_l.constprop.0+0x78>
 80089e0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80089e4:	e7e6      	b.n	80089b4 <_strtol_l.constprop.0+0x94>
 80089e6:	f1bc 0f00 	cmp.w	ip, #0
 80089ea:	da05      	bge.n	80089f8 <_strtol_l.constprop.0+0xd8>
 80089ec:	2322      	movs	r3, #34	; 0x22
 80089ee:	6003      	str	r3, [r0, #0]
 80089f0:	4646      	mov	r6, r8
 80089f2:	b942      	cbnz	r2, 8008a06 <_strtol_l.constprop.0+0xe6>
 80089f4:	4630      	mov	r0, r6
 80089f6:	e79e      	b.n	8008936 <_strtol_l.constprop.0+0x16>
 80089f8:	b107      	cbz	r7, 80089fc <_strtol_l.constprop.0+0xdc>
 80089fa:	4276      	negs	r6, r6
 80089fc:	2a00      	cmp	r2, #0
 80089fe:	d0f9      	beq.n	80089f4 <_strtol_l.constprop.0+0xd4>
 8008a00:	f1bc 0f00 	cmp.w	ip, #0
 8008a04:	d000      	beq.n	8008a08 <_strtol_l.constprop.0+0xe8>
 8008a06:	1e69      	subs	r1, r5, #1
 8008a08:	6011      	str	r1, [r2, #0]
 8008a0a:	e7f3      	b.n	80089f4 <_strtol_l.constprop.0+0xd4>
 8008a0c:	2430      	movs	r4, #48	; 0x30
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d1b1      	bne.n	8008976 <_strtol_l.constprop.0+0x56>
 8008a12:	2308      	movs	r3, #8
 8008a14:	e7af      	b.n	8008976 <_strtol_l.constprop.0+0x56>
 8008a16:	2c30      	cmp	r4, #48	; 0x30
 8008a18:	d0a5      	beq.n	8008966 <_strtol_l.constprop.0+0x46>
 8008a1a:	230a      	movs	r3, #10
 8008a1c:	e7ab      	b.n	8008976 <_strtol_l.constprop.0+0x56>
 8008a1e:	bf00      	nop
 8008a20:	080090de 	.word	0x080090de

08008a24 <_strtol_r>:
 8008a24:	f7ff bf7c 	b.w	8008920 <_strtol_l.constprop.0>

08008a28 <__submore>:
 8008a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a2c:	460c      	mov	r4, r1
 8008a2e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008a30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a34:	4299      	cmp	r1, r3
 8008a36:	d11d      	bne.n	8008a74 <__submore+0x4c>
 8008a38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008a3c:	f7fc f8ce 	bl	8004bdc <_malloc_r>
 8008a40:	b918      	cbnz	r0, 8008a4a <__submore+0x22>
 8008a42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a4e:	63a3      	str	r3, [r4, #56]	; 0x38
 8008a50:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008a54:	6360      	str	r0, [r4, #52]	; 0x34
 8008a56:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008a5a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008a5e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8008a62:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008a66:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008a6a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008a6e:	6020      	str	r0, [r4, #0]
 8008a70:	2000      	movs	r0, #0
 8008a72:	e7e8      	b.n	8008a46 <__submore+0x1e>
 8008a74:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008a76:	0077      	lsls	r7, r6, #1
 8008a78:	463a      	mov	r2, r7
 8008a7a:	f7ff fb6f 	bl	800815c <_realloc_r>
 8008a7e:	4605      	mov	r5, r0
 8008a80:	2800      	cmp	r0, #0
 8008a82:	d0de      	beq.n	8008a42 <__submore+0x1a>
 8008a84:	eb00 0806 	add.w	r8, r0, r6
 8008a88:	4601      	mov	r1, r0
 8008a8a:	4632      	mov	r2, r6
 8008a8c:	4640      	mov	r0, r8
 8008a8e:	f7fe f92a 	bl	8006ce6 <memcpy>
 8008a92:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008a96:	f8c4 8000 	str.w	r8, [r4]
 8008a9a:	e7e9      	b.n	8008a70 <__submore+0x48>

08008a9c <__ascii_wctomb>:
 8008a9c:	b149      	cbz	r1, 8008ab2 <__ascii_wctomb+0x16>
 8008a9e:	2aff      	cmp	r2, #255	; 0xff
 8008aa0:	bf85      	ittet	hi
 8008aa2:	238a      	movhi	r3, #138	; 0x8a
 8008aa4:	6003      	strhi	r3, [r0, #0]
 8008aa6:	700a      	strbls	r2, [r1, #0]
 8008aa8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008aac:	bf98      	it	ls
 8008aae:	2001      	movls	r0, #1
 8008ab0:	4770      	bx	lr
 8008ab2:	4608      	mov	r0, r1
 8008ab4:	4770      	bx	lr
	...

08008ab8 <_fstat_r>:
 8008ab8:	b538      	push	{r3, r4, r5, lr}
 8008aba:	4d07      	ldr	r5, [pc, #28]	; (8008ad8 <_fstat_r+0x20>)
 8008abc:	2300      	movs	r3, #0
 8008abe:	4604      	mov	r4, r0
 8008ac0:	4608      	mov	r0, r1
 8008ac2:	4611      	mov	r1, r2
 8008ac4:	602b      	str	r3, [r5, #0]
 8008ac6:	f7f8 ff72 	bl	80019ae <_fstat>
 8008aca:	1c43      	adds	r3, r0, #1
 8008acc:	d102      	bne.n	8008ad4 <_fstat_r+0x1c>
 8008ace:	682b      	ldr	r3, [r5, #0]
 8008ad0:	b103      	cbz	r3, 8008ad4 <_fstat_r+0x1c>
 8008ad2:	6023      	str	r3, [r4, #0]
 8008ad4:	bd38      	pop	{r3, r4, r5, pc}
 8008ad6:	bf00      	nop
 8008ad8:	200004a8 	.word	0x200004a8

08008adc <_isatty_r>:
 8008adc:	b538      	push	{r3, r4, r5, lr}
 8008ade:	4d06      	ldr	r5, [pc, #24]	; (8008af8 <_isatty_r+0x1c>)
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	4608      	mov	r0, r1
 8008ae6:	602b      	str	r3, [r5, #0]
 8008ae8:	f7f8 ff71 	bl	80019ce <_isatty>
 8008aec:	1c43      	adds	r3, r0, #1
 8008aee:	d102      	bne.n	8008af6 <_isatty_r+0x1a>
 8008af0:	682b      	ldr	r3, [r5, #0]
 8008af2:	b103      	cbz	r3, 8008af6 <_isatty_r+0x1a>
 8008af4:	6023      	str	r3, [r4, #0]
 8008af6:	bd38      	pop	{r3, r4, r5, pc}
 8008af8:	200004a8 	.word	0x200004a8

08008afc <_malloc_usable_size_r>:
 8008afc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b00:	1f18      	subs	r0, r3, #4
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	bfbc      	itt	lt
 8008b06:	580b      	ldrlt	r3, [r1, r0]
 8008b08:	18c0      	addlt	r0, r0, r3
 8008b0a:	4770      	bx	lr

08008b0c <_init>:
 8008b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b0e:	bf00      	nop
 8008b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b12:	bc08      	pop	{r3}
 8008b14:	469e      	mov	lr, r3
 8008b16:	4770      	bx	lr

08008b18 <_fini>:
 8008b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b1a:	bf00      	nop
 8008b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b1e:	bc08      	pop	{r3}
 8008b20:	469e      	mov	lr, r3
 8008b22:	4770      	bx	lr
