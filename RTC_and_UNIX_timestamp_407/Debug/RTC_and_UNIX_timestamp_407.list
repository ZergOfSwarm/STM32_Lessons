
RTC_and_UNIX_timestamp_407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006520  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  080066b0  080066b0  000166b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b78  08006b78  000200d8  2**0
                  CONTENTS
  4 .ARM          00000008  08006b78  08006b78  00016b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b80  08006b80  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b80  08006b80  00016b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b84  08006b84  00016b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08006b88  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d8  2**0
                  CONTENTS
 10 .bss          000001d4  200000d8  200000d8  000200d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200002ac  200002ac  000200d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010d16  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000235f  00000000  00000000  00030e1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee0  00000000  00000000  00033180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000df8  00000000  00000000  00034060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ad1  00000000  00000000  00034e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010ecc  00000000  00000000  00057929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d286b  00000000  00000000  000687f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013b060  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000519c  00000000  00000000  0013b0b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d8 	.word	0x200000d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006698 	.word	0x08006698

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	08006698 	.word	0x08006698

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_ldivmod>:
 80002a0:	b97b      	cbnz	r3, 80002c2 <__aeabi_ldivmod+0x22>
 80002a2:	b972      	cbnz	r2, 80002c2 <__aeabi_ldivmod+0x22>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bfbe      	ittt	lt
 80002a8:	2000      	movlt	r0, #0
 80002aa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ae:	e006      	blt.n	80002be <__aeabi_ldivmod+0x1e>
 80002b0:	bf08      	it	eq
 80002b2:	2800      	cmpeq	r0, #0
 80002b4:	bf1c      	itt	ne
 80002b6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002ba:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002be:	f000 b9bf 	b.w	8000640 <__aeabi_idiv0>
 80002c2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ca:	2900      	cmp	r1, #0
 80002cc:	db09      	blt.n	80002e2 <__aeabi_ldivmod+0x42>
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	db1a      	blt.n	8000308 <__aeabi_ldivmod+0x68>
 80002d2:	f000 f84d 	bl	8000370 <__udivmoddi4>
 80002d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002de:	b004      	add	sp, #16
 80002e0:	4770      	bx	lr
 80002e2:	4240      	negs	r0, r0
 80002e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	db1b      	blt.n	8000324 <__aeabi_ldivmod+0x84>
 80002ec:	f000 f840 	bl	8000370 <__udivmoddi4>
 80002f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002f8:	b004      	add	sp, #16
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	4252      	negs	r2, r2
 8000302:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000306:	4770      	bx	lr
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	f000 f82f 	bl	8000370 <__udivmoddi4>
 8000312:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031a:	b004      	add	sp, #16
 800031c:	4240      	negs	r0, r0
 800031e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000322:	4770      	bx	lr
 8000324:	4252      	negs	r2, r2
 8000326:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032a:	f000 f821 	bl	8000370 <__udivmoddi4>
 800032e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000332:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000336:	b004      	add	sp, #16
 8000338:	4252      	negs	r2, r2
 800033a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033e:	4770      	bx	lr

08000340 <__aeabi_uldivmod>:
 8000340:	b953      	cbnz	r3, 8000358 <__aeabi_uldivmod+0x18>
 8000342:	b94a      	cbnz	r2, 8000358 <__aeabi_uldivmod+0x18>
 8000344:	2900      	cmp	r1, #0
 8000346:	bf08      	it	eq
 8000348:	2800      	cmpeq	r0, #0
 800034a:	bf1c      	itt	ne
 800034c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000350:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000354:	f000 b974 	b.w	8000640 <__aeabi_idiv0>
 8000358:	f1ad 0c08 	sub.w	ip, sp, #8
 800035c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000360:	f000 f806 	bl	8000370 <__udivmoddi4>
 8000364:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036c:	b004      	add	sp, #16
 800036e:	4770      	bx	lr

08000370 <__udivmoddi4>:
 8000370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000374:	9d08      	ldr	r5, [sp, #32]
 8000376:	4604      	mov	r4, r0
 8000378:	468e      	mov	lr, r1
 800037a:	2b00      	cmp	r3, #0
 800037c:	d14d      	bne.n	800041a <__udivmoddi4+0xaa>
 800037e:	428a      	cmp	r2, r1
 8000380:	4694      	mov	ip, r2
 8000382:	d969      	bls.n	8000458 <__udivmoddi4+0xe8>
 8000384:	fab2 f282 	clz	r2, r2
 8000388:	b152      	cbz	r2, 80003a0 <__udivmoddi4+0x30>
 800038a:	fa01 f302 	lsl.w	r3, r1, r2
 800038e:	f1c2 0120 	rsb	r1, r2, #32
 8000392:	fa20 f101 	lsr.w	r1, r0, r1
 8000396:	fa0c fc02 	lsl.w	ip, ip, r2
 800039a:	ea41 0e03 	orr.w	lr, r1, r3
 800039e:	4094      	lsls	r4, r2
 80003a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003a4:	0c21      	lsrs	r1, r4, #16
 80003a6:	fbbe f6f8 	udiv	r6, lr, r8
 80003aa:	fa1f f78c 	uxth.w	r7, ip
 80003ae:	fb08 e316 	mls	r3, r8, r6, lr
 80003b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003b6:	fb06 f107 	mul.w	r1, r6, r7
 80003ba:	4299      	cmp	r1, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x64>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003c6:	f080 811f 	bcs.w	8000608 <__udivmoddi4+0x298>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 811c 	bls.w	8000608 <__udivmoddi4+0x298>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	4463      	add	r3, ip
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003dc:	fb08 3310 	mls	r3, r8, r0, r3
 80003e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003e4:	fb00 f707 	mul.w	r7, r0, r7
 80003e8:	42a7      	cmp	r7, r4
 80003ea:	d90a      	bls.n	8000402 <__udivmoddi4+0x92>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f4:	f080 810a 	bcs.w	800060c <__udivmoddi4+0x29c>
 80003f8:	42a7      	cmp	r7, r4
 80003fa:	f240 8107 	bls.w	800060c <__udivmoddi4+0x29c>
 80003fe:	4464      	add	r4, ip
 8000400:	3802      	subs	r0, #2
 8000402:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000406:	1be4      	subs	r4, r4, r7
 8000408:	2600      	movs	r6, #0
 800040a:	b11d      	cbz	r5, 8000414 <__udivmoddi4+0xa4>
 800040c:	40d4      	lsrs	r4, r2
 800040e:	2300      	movs	r3, #0
 8000410:	e9c5 4300 	strd	r4, r3, [r5]
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	428b      	cmp	r3, r1
 800041c:	d909      	bls.n	8000432 <__udivmoddi4+0xc2>
 800041e:	2d00      	cmp	r5, #0
 8000420:	f000 80ef 	beq.w	8000602 <__udivmoddi4+0x292>
 8000424:	2600      	movs	r6, #0
 8000426:	e9c5 0100 	strd	r0, r1, [r5]
 800042a:	4630      	mov	r0, r6
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	fab3 f683 	clz	r6, r3
 8000436:	2e00      	cmp	r6, #0
 8000438:	d14a      	bne.n	80004d0 <__udivmoddi4+0x160>
 800043a:	428b      	cmp	r3, r1
 800043c:	d302      	bcc.n	8000444 <__udivmoddi4+0xd4>
 800043e:	4282      	cmp	r2, r0
 8000440:	f200 80f9 	bhi.w	8000636 <__udivmoddi4+0x2c6>
 8000444:	1a84      	subs	r4, r0, r2
 8000446:	eb61 0303 	sbc.w	r3, r1, r3
 800044a:	2001      	movs	r0, #1
 800044c:	469e      	mov	lr, r3
 800044e:	2d00      	cmp	r5, #0
 8000450:	d0e0      	beq.n	8000414 <__udivmoddi4+0xa4>
 8000452:	e9c5 4e00 	strd	r4, lr, [r5]
 8000456:	e7dd      	b.n	8000414 <__udivmoddi4+0xa4>
 8000458:	b902      	cbnz	r2, 800045c <__udivmoddi4+0xec>
 800045a:	deff      	udf	#255	; 0xff
 800045c:	fab2 f282 	clz	r2, r2
 8000460:	2a00      	cmp	r2, #0
 8000462:	f040 8092 	bne.w	800058a <__udivmoddi4+0x21a>
 8000466:	eba1 010c 	sub.w	r1, r1, ip
 800046a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800046e:	fa1f fe8c 	uxth.w	lr, ip
 8000472:	2601      	movs	r6, #1
 8000474:	0c20      	lsrs	r0, r4, #16
 8000476:	fbb1 f3f7 	udiv	r3, r1, r7
 800047a:	fb07 1113 	mls	r1, r7, r3, r1
 800047e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000482:	fb0e f003 	mul.w	r0, lr, r3
 8000486:	4288      	cmp	r0, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x12c>
 800048a:	eb1c 0101 	adds.w	r1, ip, r1
 800048e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x12a>
 8000494:	4288      	cmp	r0, r1
 8000496:	f200 80cb 	bhi.w	8000630 <__udivmoddi4+0x2c0>
 800049a:	4643      	mov	r3, r8
 800049c:	1a09      	subs	r1, r1, r0
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a4:	fb07 1110 	mls	r1, r7, r0, r1
 80004a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ac:	fb0e fe00 	mul.w	lr, lr, r0
 80004b0:	45a6      	cmp	lr, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x156>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004bc:	d202      	bcs.n	80004c4 <__udivmoddi4+0x154>
 80004be:	45a6      	cmp	lr, r4
 80004c0:	f200 80bb 	bhi.w	800063a <__udivmoddi4+0x2ca>
 80004c4:	4608      	mov	r0, r1
 80004c6:	eba4 040e 	sub.w	r4, r4, lr
 80004ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ce:	e79c      	b.n	800040a <__udivmoddi4+0x9a>
 80004d0:	f1c6 0720 	rsb	r7, r6, #32
 80004d4:	40b3      	lsls	r3, r6
 80004d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004da:	ea4c 0c03 	orr.w	ip, ip, r3
 80004de:	fa20 f407 	lsr.w	r4, r0, r7
 80004e2:	fa01 f306 	lsl.w	r3, r1, r6
 80004e6:	431c      	orrs	r4, r3
 80004e8:	40f9      	lsrs	r1, r7
 80004ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ee:	fa00 f306 	lsl.w	r3, r0, r6
 80004f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004f6:	0c20      	lsrs	r0, r4, #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000500:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000504:	fb08 f00e 	mul.w	r0, r8, lr
 8000508:	4288      	cmp	r0, r1
 800050a:	fa02 f206 	lsl.w	r2, r2, r6
 800050e:	d90b      	bls.n	8000528 <__udivmoddi4+0x1b8>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000518:	f080 8088 	bcs.w	800062c <__udivmoddi4+0x2bc>
 800051c:	4288      	cmp	r0, r1
 800051e:	f240 8085 	bls.w	800062c <__udivmoddi4+0x2bc>
 8000522:	f1a8 0802 	sub.w	r8, r8, #2
 8000526:	4461      	add	r1, ip
 8000528:	1a09      	subs	r1, r1, r0
 800052a:	b2a4      	uxth	r4, r4
 800052c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000530:	fb09 1110 	mls	r1, r9, r0, r1
 8000534:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000538:	fb00 fe0e 	mul.w	lr, r0, lr
 800053c:	458e      	cmp	lr, r1
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x1e2>
 8000540:	eb1c 0101 	adds.w	r1, ip, r1
 8000544:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000548:	d26c      	bcs.n	8000624 <__udivmoddi4+0x2b4>
 800054a:	458e      	cmp	lr, r1
 800054c:	d96a      	bls.n	8000624 <__udivmoddi4+0x2b4>
 800054e:	3802      	subs	r0, #2
 8000550:	4461      	add	r1, ip
 8000552:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000556:	fba0 9402 	umull	r9, r4, r0, r2
 800055a:	eba1 010e 	sub.w	r1, r1, lr
 800055e:	42a1      	cmp	r1, r4
 8000560:	46c8      	mov	r8, r9
 8000562:	46a6      	mov	lr, r4
 8000564:	d356      	bcc.n	8000614 <__udivmoddi4+0x2a4>
 8000566:	d053      	beq.n	8000610 <__udivmoddi4+0x2a0>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x212>
 800056a:	ebb3 0208 	subs.w	r2, r3, r8
 800056e:	eb61 010e 	sbc.w	r1, r1, lr
 8000572:	fa01 f707 	lsl.w	r7, r1, r7
 8000576:	fa22 f306 	lsr.w	r3, r2, r6
 800057a:	40f1      	lsrs	r1, r6
 800057c:	431f      	orrs	r7, r3
 800057e:	e9c5 7100 	strd	r7, r1, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	40d8      	lsrs	r0, r3
 8000590:	fa0c fc02 	lsl.w	ip, ip, r2
 8000594:	fa21 f303 	lsr.w	r3, r1, r3
 8000598:	4091      	lsls	r1, r2
 800059a:	4301      	orrs	r1, r0
 800059c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005a0:	fa1f fe8c 	uxth.w	lr, ip
 80005a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005a8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ac:	0c0b      	lsrs	r3, r1, #16
 80005ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005b2:	fb00 f60e 	mul.w	r6, r0, lr
 80005b6:	429e      	cmp	r6, r3
 80005b8:	fa04 f402 	lsl.w	r4, r4, r2
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x260>
 80005be:	eb1c 0303 	adds.w	r3, ip, r3
 80005c2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005c6:	d22f      	bcs.n	8000628 <__udivmoddi4+0x2b8>
 80005c8:	429e      	cmp	r6, r3
 80005ca:	d92d      	bls.n	8000628 <__udivmoddi4+0x2b8>
 80005cc:	3802      	subs	r0, #2
 80005ce:	4463      	add	r3, ip
 80005d0:	1b9b      	subs	r3, r3, r6
 80005d2:	b289      	uxth	r1, r1
 80005d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005d8:	fb07 3316 	mls	r3, r7, r6, r3
 80005dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005e0:	fb06 f30e 	mul.w	r3, r6, lr
 80005e4:	428b      	cmp	r3, r1
 80005e6:	d908      	bls.n	80005fa <__udivmoddi4+0x28a>
 80005e8:	eb1c 0101 	adds.w	r1, ip, r1
 80005ec:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005f0:	d216      	bcs.n	8000620 <__udivmoddi4+0x2b0>
 80005f2:	428b      	cmp	r3, r1
 80005f4:	d914      	bls.n	8000620 <__udivmoddi4+0x2b0>
 80005f6:	3e02      	subs	r6, #2
 80005f8:	4461      	add	r1, ip
 80005fa:	1ac9      	subs	r1, r1, r3
 80005fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000600:	e738      	b.n	8000474 <__udivmoddi4+0x104>
 8000602:	462e      	mov	r6, r5
 8000604:	4628      	mov	r0, r5
 8000606:	e705      	b.n	8000414 <__udivmoddi4+0xa4>
 8000608:	4606      	mov	r6, r0
 800060a:	e6e3      	b.n	80003d4 <__udivmoddi4+0x64>
 800060c:	4618      	mov	r0, r3
 800060e:	e6f8      	b.n	8000402 <__udivmoddi4+0x92>
 8000610:	454b      	cmp	r3, r9
 8000612:	d2a9      	bcs.n	8000568 <__udivmoddi4+0x1f8>
 8000614:	ebb9 0802 	subs.w	r8, r9, r2
 8000618:	eb64 0e0c 	sbc.w	lr, r4, ip
 800061c:	3801      	subs	r0, #1
 800061e:	e7a3      	b.n	8000568 <__udivmoddi4+0x1f8>
 8000620:	4646      	mov	r6, r8
 8000622:	e7ea      	b.n	80005fa <__udivmoddi4+0x28a>
 8000624:	4620      	mov	r0, r4
 8000626:	e794      	b.n	8000552 <__udivmoddi4+0x1e2>
 8000628:	4640      	mov	r0, r8
 800062a:	e7d1      	b.n	80005d0 <__udivmoddi4+0x260>
 800062c:	46d0      	mov	r8, sl
 800062e:	e77b      	b.n	8000528 <__udivmoddi4+0x1b8>
 8000630:	3b02      	subs	r3, #2
 8000632:	4461      	add	r1, ip
 8000634:	e732      	b.n	800049c <__udivmoddi4+0x12c>
 8000636:	4630      	mov	r0, r6
 8000638:	e709      	b.n	800044e <__udivmoddi4+0xde>
 800063a:	4464      	add	r4, ip
 800063c:	3802      	subs	r0, #2
 800063e:	e742      	b.n	80004c6 <__udivmoddi4+0x156>

08000640 <__aeabi_idiv0>:
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop

08000644 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800064c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000650:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d013      	beq.n	8000684 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800065c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000660:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000664:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00b      	beq.n	8000684 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800066c:	e000      	b.n	8000670 <ITM_SendChar+0x2c>
    {
      __NOP();
 800066e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000670:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f9      	beq.n	800066e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800067a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000684:	687b      	ldr	r3, [r7, #4]
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <_write>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_RTC_Init(void);
static void MX_USART6_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart6, (uint8_t*) ptr, len, 50);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	2332      	movs	r3, #50	; 0x32
 80006a6:	68b9      	ldr	r1, [r7, #8]
 80006a8:	480c      	ldr	r0, [pc, #48]	; (80006dc <_write+0x48>)
 80006aa:	f002 fdbc 	bl	8003226 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
 80006b2:	e009      	b.n	80006c8 <_write+0x34>
		ITM_SendChar(*ptr++);
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	1c5a      	adds	r2, r3, #1
 80006b8:	60ba      	str	r2, [r7, #8]
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ffc1 	bl	8000644 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	3301      	adds	r3, #1
 80006c6:	617b      	str	r3, [r7, #20]
 80006c8:	697a      	ldr	r2, [r7, #20]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	dbf1      	blt.n	80006b4 <_write+0x20>
	}
	return len;
 80006d0:	687b      	ldr	r3, [r7, #4]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3718      	adds	r7, #24
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	2000015c 	.word	0x2000015c

080006e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e6:	f000 fcd9 	bl	800109c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ea:	f000 f8c5 	bl	8000878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ee:	f000 f9e7 	bl	8000ac0 <MX_GPIO_Init>
  MX_RTC_Init();
 80006f2:	f000 f92d 	bl	8000950 <MX_RTC_Init>
  MX_USART6_UART_Init();
 80006f6:	f000 f9b9 	bl	8000a6c <MX_USART6_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 80006fa:	2200      	movs	r2, #0
 80006fc:	4950      	ldr	r1, [pc, #320]	; (8000840 <main+0x160>)
 80006fe:	4851      	ldr	r0, [pc, #324]	; (8000844 <main+0x164>)
 8000700:	f001 fe86 	bl	8002410 <HAL_RTC_GetTime>
      snprintf(trans_str, 63, "Curent time is %d:%d:%d\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000704:	4b4e      	ldr	r3, [pc, #312]	; (8000840 <main+0x160>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	4619      	mov	r1, r3
 800070a:	4b4d      	ldr	r3, [pc, #308]	; (8000840 <main+0x160>)
 800070c:	785b      	ldrb	r3, [r3, #1]
 800070e:	461a      	mov	r2, r3
 8000710:	4b4b      	ldr	r3, [pc, #300]	; (8000840 <main+0x160>)
 8000712:	789b      	ldrb	r3, [r3, #2]
 8000714:	9301      	str	r3, [sp, #4]
 8000716:	9200      	str	r2, [sp, #0]
 8000718:	460b      	mov	r3, r1
 800071a:	4a4b      	ldr	r2, [pc, #300]	; (8000848 <main+0x168>)
 800071c:	213f      	movs	r1, #63	; 0x3f
 800071e:	484b      	ldr	r0, [pc, #300]	; (800084c <main+0x16c>)
 8000720:	f003 fde2 	bl	80042e8 <sniprintf>
      //snprintf(trans_str, 63, "Time %d:%d:%d:%lu\n", sTime.Hours, sTime.Minutes, sTime.Seconds, sTime.SubSeconds);
      HAL_UART_Transmit(&huart6, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8000724:	4849      	ldr	r0, [pc, #292]	; (800084c <main+0x16c>)
 8000726:	f7ff fd53 	bl	80001d0 <strlen>
 800072a:	4603      	mov	r3, r0
 800072c:	b29a      	uxth	r2, r3
 800072e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000732:	4946      	ldr	r1, [pc, #280]	; (800084c <main+0x16c>)
 8000734:	4846      	ldr	r0, [pc, #280]	; (8000850 <main+0x170>)
 8000736:	f002 fd76 	bl	8003226 <HAL_UART_Transmit>

      HAL_RTC_GetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
 800073a:	2200      	movs	r2, #0
 800073c:	4945      	ldr	r1, [pc, #276]	; (8000854 <main+0x174>)
 800073e:	4841      	ldr	r0, [pc, #260]	; (8000844 <main+0x164>)
 8000740:	f001 ff48 	bl	80025d4 <HAL_RTC_GetDate>
      snprintf(trans_str, 63, "Date %d-%d-20%d\n", DateToUpdate.Date, DateToUpdate.Month, DateToUpdate.Year);
 8000744:	4b43      	ldr	r3, [pc, #268]	; (8000854 <main+0x174>)
 8000746:	789b      	ldrb	r3, [r3, #2]
 8000748:	4619      	mov	r1, r3
 800074a:	4b42      	ldr	r3, [pc, #264]	; (8000854 <main+0x174>)
 800074c:	785b      	ldrb	r3, [r3, #1]
 800074e:	461a      	mov	r2, r3
 8000750:	4b40      	ldr	r3, [pc, #256]	; (8000854 <main+0x174>)
 8000752:	78db      	ldrb	r3, [r3, #3]
 8000754:	9301      	str	r3, [sp, #4]
 8000756:	9200      	str	r2, [sp, #0]
 8000758:	460b      	mov	r3, r1
 800075a:	4a3f      	ldr	r2, [pc, #252]	; (8000858 <main+0x178>)
 800075c:	213f      	movs	r1, #63	; 0x3f
 800075e:	483b      	ldr	r0, [pc, #236]	; (800084c <main+0x16c>)
 8000760:	f003 fdc2 	bl	80042e8 <sniprintf>
      HAL_UART_Transmit(&huart6, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8000764:	4839      	ldr	r0, [pc, #228]	; (800084c <main+0x16c>)
 8000766:	f7ff fd33 	bl	80001d0 <strlen>
 800076a:	4603      	mov	r3, r0
 800076c:	b29a      	uxth	r2, r3
 800076e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000772:	4936      	ldr	r1, [pc, #216]	; (800084c <main+0x16c>)
 8000774:	4836      	ldr	r0, [pc, #216]	; (8000850 <main+0x170>)
 8000776:	f002 fd56 	bl	8003226 <HAL_UART_Transmit>

      HAL_RTC_GetAlarm(&hrtc, &sAlarm, RTC_ALARM_A, RTC_FORMAT_BIN);
 800077a:	2300      	movs	r3, #0
 800077c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000780:	4936      	ldr	r1, [pc, #216]	; (800085c <main+0x17c>)
 8000782:	4830      	ldr	r0, [pc, #192]	; (8000844 <main+0x164>)
 8000784:	f002 f8b8 	bl	80028f8 <HAL_RTC_GetAlarm>
      snprintf(trans_str, 63, "Settings of alarm %d:%d:%d\n", sAlarm.AlarmTime.Hours, sAlarm.AlarmTime.Minutes, sAlarm.AlarmTime.Seconds);
 8000788:	4b34      	ldr	r3, [pc, #208]	; (800085c <main+0x17c>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	4b33      	ldr	r3, [pc, #204]	; (800085c <main+0x17c>)
 8000790:	785b      	ldrb	r3, [r3, #1]
 8000792:	461a      	mov	r2, r3
 8000794:	4b31      	ldr	r3, [pc, #196]	; (800085c <main+0x17c>)
 8000796:	789b      	ldrb	r3, [r3, #2]
 8000798:	9301      	str	r3, [sp, #4]
 800079a:	9200      	str	r2, [sp, #0]
 800079c:	460b      	mov	r3, r1
 800079e:	4a30      	ldr	r2, [pc, #192]	; (8000860 <main+0x180>)
 80007a0:	213f      	movs	r1, #63	; 0x3f
 80007a2:	482a      	ldr	r0, [pc, #168]	; (800084c <main+0x16c>)
 80007a4:	f003 fda0 	bl	80042e8 <sniprintf>
      HAL_UART_Transmit(&huart6, (uint8_t*)trans_str, strlen(trans_str), 1000);
 80007a8:	4828      	ldr	r0, [pc, #160]	; (800084c <main+0x16c>)
 80007aa:	f7ff fd11 	bl	80001d0 <strlen>
 80007ae:	4603      	mov	r3, r0
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b6:	4925      	ldr	r1, [pc, #148]	; (800084c <main+0x16c>)
 80007b8:	4825      	ldr	r0, [pc, #148]	; (8000850 <main+0x170>)
 80007ba:	f002 fd34 	bl	8003226 <HAL_UART_Transmit>

	  printf ("\n");
 80007be:	200a      	movs	r0, #10
 80007c0:	f003 fd6c 	bl	800429c <putchar>

/*--------------------------------------- Get timestamp from RTC ---------------------------------------------------*/
	  HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 80007c4:	2200      	movs	r2, #0
 80007c6:	4927      	ldr	r1, [pc, #156]	; (8000864 <main+0x184>)
 80007c8:	481e      	ldr	r0, [pc, #120]	; (8000844 <main+0x164>)
 80007ca:	f001 fe21 	bl	8002410 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 80007ce:	2200      	movs	r2, #0
 80007d0:	4925      	ldr	r1, [pc, #148]	; (8000868 <main+0x188>)
 80007d2:	481c      	ldr	r0, [pc, #112]	; (8000844 <main+0x164>)
 80007d4:	f001 fefe 	bl	80025d4 <HAL_RTC_GetDate>

	  currTime.tm_year = currentDate.Year + 100;  // In fact: 2000 + 18 - 1900
 80007d8:	4b23      	ldr	r3, [pc, #140]	; (8000868 <main+0x188>)
 80007da:	78db      	ldrb	r3, [r3, #3]
 80007dc:	3364      	adds	r3, #100	; 0x64
 80007de:	4a23      	ldr	r2, [pc, #140]	; (800086c <main+0x18c>)
 80007e0:	6153      	str	r3, [r2, #20]
	  currTime.tm_mday = currentDate.Date;
 80007e2:	4b21      	ldr	r3, [pc, #132]	; (8000868 <main+0x188>)
 80007e4:	789b      	ldrb	r3, [r3, #2]
 80007e6:	461a      	mov	r2, r3
 80007e8:	4b20      	ldr	r3, [pc, #128]	; (800086c <main+0x18c>)
 80007ea:	60da      	str	r2, [r3, #12]
	  currTime.tm_mon  = currentDate.Month - 1;
 80007ec:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <main+0x188>)
 80007ee:	785b      	ldrb	r3, [r3, #1]
 80007f0:	3b01      	subs	r3, #1
 80007f2:	4a1e      	ldr	r2, [pc, #120]	; (800086c <main+0x18c>)
 80007f4:	6113      	str	r3, [r2, #16]

	  currTime.tm_hour = currentTime.Hours;
 80007f6:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <main+0x184>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	4b1b      	ldr	r3, [pc, #108]	; (800086c <main+0x18c>)
 80007fe:	609a      	str	r2, [r3, #8]
	  currTime.tm_min  = currentTime.Minutes;
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <main+0x184>)
 8000802:	785b      	ldrb	r3, [r3, #1]
 8000804:	461a      	mov	r2, r3
 8000806:	4b19      	ldr	r3, [pc, #100]	; (800086c <main+0x18c>)
 8000808:	605a      	str	r2, [r3, #4]
	  currTime.tm_sec  = currentTime.Seconds;
 800080a:	4b16      	ldr	r3, [pc, #88]	; (8000864 <main+0x184>)
 800080c:	789b      	ldrb	r3, [r3, #2]
 800080e:	461a      	mov	r2, r3
 8000810:	4b16      	ldr	r3, [pc, #88]	; (800086c <main+0x18c>)
 8000812:	601a      	str	r2, [r3, #0]

	  timestamp = mktime(&currTime);
 8000814:	4815      	ldr	r0, [pc, #84]	; (800086c <main+0x18c>)
 8000816:	f003 faaf 	bl	8003d78 <mktime>
 800081a:	4602      	mov	r2, r0
 800081c:	460b      	mov	r3, r1
 800081e:	4914      	ldr	r1, [pc, #80]	; (8000870 <main+0x190>)
 8000820:	e9c1 2300 	strd	r2, r3, [r1]
	  printf ( "Current date and time are: %s", ctime (&timestamp) ); // Convert time_t value to string
 8000824:	4812      	ldr	r0, [pc, #72]	; (8000870 <main+0x190>)
 8000826:	f003 f873 	bl	8003910 <ctime>
 800082a:	4603      	mov	r3, r0
 800082c:	4619      	mov	r1, r3
 800082e:	4811      	ldr	r0, [pc, #68]	; (8000874 <main+0x194>)
 8000830:	f003 fd1c 	bl	800426c <iprintf>

      HAL_Delay(1000);
 8000834:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000838:	f000 fc72 	bl	8001120 <HAL_Delay>
      HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 800083c:	e75d      	b.n	80006fa <main+0x1a>
 800083e:	bf00      	nop
 8000840:	200001a0 	.word	0x200001a0
 8000844:	2000013c 	.word	0x2000013c
 8000848:	080066b0 	.word	0x080066b0
 800084c:	200001e0 	.word	0x200001e0
 8000850:	2000015c 	.word	0x2000015c
 8000854:	200001b4 	.word	0x200001b4
 8000858:	080066cc 	.word	0x080066cc
 800085c:	200001b8 	.word	0x200001b8
 8000860:	080066e0 	.word	0x080066e0
 8000864:	200000f4 	.word	0x200000f4
 8000868:	20000108 	.word	0x20000108
 800086c:	20000118 	.word	0x20000118
 8000870:	20000110 	.word	0x20000110
 8000874:	080066fc 	.word	0x080066fc

08000878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b094      	sub	sp, #80	; 0x50
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 0320 	add.w	r3, r7, #32
 8000882:	2230      	movs	r2, #48	; 0x30
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f003 f996 	bl	8003bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800089c:	2300      	movs	r3, #0
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	4b29      	ldr	r3, [pc, #164]	; (8000948 <SystemClock_Config+0xd0>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a4:	4a28      	ldr	r2, [pc, #160]	; (8000948 <SystemClock_Config+0xd0>)
 80008a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008aa:	6413      	str	r3, [r2, #64]	; 0x40
 80008ac:	4b26      	ldr	r3, [pc, #152]	; (8000948 <SystemClock_Config+0xd0>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b8:	2300      	movs	r3, #0
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	4b23      	ldr	r3, [pc, #140]	; (800094c <SystemClock_Config+0xd4>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a22      	ldr	r2, [pc, #136]	; (800094c <SystemClock_Config+0xd4>)
 80008c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c6:	6013      	str	r3, [r2, #0]
 80008c8:	4b20      	ldr	r3, [pc, #128]	; (800094c <SystemClock_Config+0xd4>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80008d4:	2309      	movs	r3, #9
 80008d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008de:	2301      	movs	r3, #1
 80008e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e2:	2302      	movs	r3, #2
 80008e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008ec:	2304      	movs	r3, #4
 80008ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008f0:	23a8      	movs	r3, #168	; 0xa8
 80008f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008f4:	2302      	movs	r3, #2
 80008f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008f8:	2304      	movs	r3, #4
 80008fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fc:	f107 0320 	add.w	r3, r7, #32
 8000900:	4618      	mov	r0, r3
 8000902:	f000 fec9 	bl	8001698 <HAL_RCC_OscConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800090c:	f000 f97c 	bl	8000c08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000910:	230f      	movs	r3, #15
 8000912:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000914:	2302      	movs	r3, #2
 8000916:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800091c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000920:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000922:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000926:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	2105      	movs	r1, #5
 800092e:	4618      	mov	r0, r3
 8000930:	f001 f92a 	bl	8001b88 <HAL_RCC_ClockConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800093a:	f000 f965 	bl	8000c08 <Error_Handler>
  }
}
 800093e:	bf00      	nop
 8000940:	3750      	adds	r7, #80	; 0x50
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800
 800094c:	40007000 	.word	0x40007000

08000950 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b090      	sub	sp, #64	; 0x40
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000956:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800096a:	463b      	mov	r3, r7
 800096c:	2228      	movs	r2, #40	; 0x28
 800096e:	2100      	movs	r1, #0
 8000970:	4618      	mov	r0, r3
 8000972:	f003 f921 	bl	8003bb8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000976:	4b3b      	ldr	r3, [pc, #236]	; (8000a64 <MX_RTC_Init+0x114>)
 8000978:	4a3b      	ldr	r2, [pc, #236]	; (8000a68 <MX_RTC_Init+0x118>)
 800097a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800097c:	4b39      	ldr	r3, [pc, #228]	; (8000a64 <MX_RTC_Init+0x114>)
 800097e:	2200      	movs	r2, #0
 8000980:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000982:	4b38      	ldr	r3, [pc, #224]	; (8000a64 <MX_RTC_Init+0x114>)
 8000984:	227f      	movs	r2, #127	; 0x7f
 8000986:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000988:	4b36      	ldr	r3, [pc, #216]	; (8000a64 <MX_RTC_Init+0x114>)
 800098a:	22ff      	movs	r2, #255	; 0xff
 800098c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800098e:	4b35      	ldr	r3, [pc, #212]	; (8000a64 <MX_RTC_Init+0x114>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000994:	4b33      	ldr	r3, [pc, #204]	; (8000a64 <MX_RTC_Init+0x114>)
 8000996:	2200      	movs	r2, #0
 8000998:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800099a:	4b32      	ldr	r3, [pc, #200]	; (8000a64 <MX_RTC_Init+0x114>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009a0:	4830      	ldr	r0, [pc, #192]	; (8000a64 <MX_RTC_Init+0x114>)
 80009a2:	f001 fc25 	bl	80021f0 <HAL_RTC_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80009ac:	f000 f92c 	bl	8000c08 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 18;
 80009b0:	2312      	movs	r3, #18
 80009b2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 15;
 80009b6:	230f      	movs	r3, #15
 80009b8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009c6:	2300      	movs	r3, #0
 80009c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80009ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009ce:	2200      	movs	r2, #0
 80009d0:	4619      	mov	r1, r3
 80009d2:	4824      	ldr	r0, [pc, #144]	; (8000a64 <MX_RTC_Init+0x114>)
 80009d4:	f001 fc82 	bl	80022dc <HAL_RTC_SetTime>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80009de:	f000 f913 	bl	8000c08 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80009e2:	2306      	movs	r3, #6
 80009e4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_AUGUST;
 80009e8:	2308      	movs	r3, #8
 80009ea:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 6;
 80009ee:	2306      	movs	r3, #6
 80009f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 22;
 80009f4:	2316      	movs	r3, #22
 80009f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80009fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009fe:	2200      	movs	r2, #0
 8000a00:	4619      	mov	r1, r3
 8000a02:	4818      	ldr	r0, [pc, #96]	; (8000a64 <MX_RTC_Init+0x114>)
 8000a04:	f001 fd62 	bl	80024cc <HAL_RTC_SetDate>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000a0e:	f000 f8fb 	bl	8000c08 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 18;
 8000a12:	2312      	movs	r3, #18
 8000a14:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 15;
 8000a16:	230f      	movs	r3, #15
 8000a18:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 10;
 8000a1a:	230a      	movs	r3, #10
 8000a1c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8000a2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000a2e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000a3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000a44:	463b      	mov	r3, r7
 8000a46:	2200      	movs	r2, #0
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4806      	ldr	r0, [pc, #24]	; (8000a64 <MX_RTC_Init+0x114>)
 8000a4c:	f001 fe12 	bl	8002674 <HAL_RTC_SetAlarm_IT>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000a56:	f000 f8d7 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	3740      	adds	r7, #64	; 0x40
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	2000013c 	.word	0x2000013c
 8000a68:	40002800 	.word	0x40002800

08000a6c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_USART6_UART_Init+0x4c>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <MX_USART6_UART_Init+0x50>)
 8000a74:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <MX_USART6_UART_Init+0x4c>)
 8000a78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a7c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_USART6_UART_Init+0x4c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_USART6_UART_Init+0x4c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <MX_USART6_UART_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_USART6_UART_Init+0x4c>)
 8000a92:	220c      	movs	r2, #12
 8000a94:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <MX_USART6_UART_Init+0x4c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_USART6_UART_Init+0x4c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_USART6_UART_Init+0x4c>)
 8000aa4:	f002 fb72 	bl	800318c <HAL_UART_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000aae:	f000 f8ab 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	2000015c 	.word	0x2000015c
 8000abc:	40011400 	.word	0x40011400

08000ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	4b30      	ldr	r3, [pc, #192]	; (8000b9c <MX_GPIO_Init+0xdc>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a2f      	ldr	r2, [pc, #188]	; (8000b9c <MX_GPIO_Init+0xdc>)
 8000ae0:	f043 0304 	orr.w	r3, r3, #4
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <MX_GPIO_Init+0xdc>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0304 	and.w	r3, r3, #4
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	4b29      	ldr	r3, [pc, #164]	; (8000b9c <MX_GPIO_Init+0xdc>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a28      	ldr	r2, [pc, #160]	; (8000b9c <MX_GPIO_Init+0xdc>)
 8000afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b26      	ldr	r3, [pc, #152]	; (8000b9c <MX_GPIO_Init+0xdc>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	4b22      	ldr	r3, [pc, #136]	; (8000b9c <MX_GPIO_Init+0xdc>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a21      	ldr	r2, [pc, #132]	; (8000b9c <MX_GPIO_Init+0xdc>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <MX_GPIO_Init+0xdc>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <MX_GPIO_Init+0xdc>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a1a      	ldr	r2, [pc, #104]	; (8000b9c <MX_GPIO_Init+0xdc>)
 8000b34:	f043 0308 	orr.w	r3, r3, #8
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <MX_GPIO_Init+0xdc>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0308 	and.w	r3, r3, #8
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2102      	movs	r1, #2
 8000b4a:	4815      	ldr	r0, [pc, #84]	; (8000ba0 <MX_GPIO_Init+0xe0>)
 8000b4c:	f000 fd8a 	bl	8001664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2101      	movs	r1, #1
 8000b54:	4813      	ldr	r0, [pc, #76]	; (8000ba4 <MX_GPIO_Init+0xe4>)
 8000b56:	f000 fd85 	bl	8001664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	480b      	ldr	r0, [pc, #44]	; (8000ba0 <MX_GPIO_Init+0xe0>)
 8000b72:	f000 fbdb 	bl	800132c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b76:	2301      	movs	r3, #1
 8000b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <MX_GPIO_Init+0xe4>)
 8000b8e:	f000 fbcd 	bl	800132c <HAL_GPIO_Init>

}
 8000b92:	bf00      	nop
 8000b94:	3728      	adds	r7, #40	; 0x28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020000 	.word	0x40020000
 8000ba4:	40020c00 	.word	0x40020c00

08000ba8 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
        snprintf(trans_str, 63, "++++++++++ Alarm_A +++++++++\n");
 8000bb0:	4a09      	ldr	r2, [pc, #36]	; (8000bd8 <HAL_RTC_AlarmAEventCallback+0x30>)
 8000bb2:	213f      	movs	r1, #63	; 0x3f
 8000bb4:	4809      	ldr	r0, [pc, #36]	; (8000bdc <HAL_RTC_AlarmAEventCallback+0x34>)
 8000bb6:	f003 fb97 	bl	80042e8 <sniprintf>
        HAL_UART_Transmit(&huart6, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8000bba:	4808      	ldr	r0, [pc, #32]	; (8000bdc <HAL_RTC_AlarmAEventCallback+0x34>)
 8000bbc:	f7ff fb08 	bl	80001d0 <strlen>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc8:	4904      	ldr	r1, [pc, #16]	; (8000bdc <HAL_RTC_AlarmAEventCallback+0x34>)
 8000bca:	4805      	ldr	r0, [pc, #20]	; (8000be0 <HAL_RTC_AlarmAEventCallback+0x38>)
 8000bcc:	f002 fb2b 	bl	8003226 <HAL_UART_Transmit>
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	0800671c 	.word	0x0800671c
 8000bdc:	200001e0 	.word	0x200001e0
 8000be0:	2000015c 	.word	0x2000015c

08000be4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d101      	bne.n	8000bfa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bf6:	f000 fa73 	bl	80010e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40002000 	.word	0x40002000

08000c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0c:	b672      	cpsid	i
}
 8000c0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <Error_Handler+0x8>
	...

08000c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	4a0f      	ldr	r2, [pc, #60]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c28:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	603b      	str	r3, [r7, #0]
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	4a08      	ldr	r2, [pc, #32]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c44:	6413      	str	r3, [r2, #64]	; 0x40
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800

08000c64 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c6c:	f107 0308 	add.w	r3, r7, #8
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a10      	ldr	r2, [pc, #64]	; (8000cc0 <HAL_RTC_MspInit+0x5c>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d119      	bne.n	8000cb8 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c84:	2302      	movs	r3, #2
 8000c86:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c8c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c8e:	f107 0308 	add.w	r3, r7, #8
 8000c92:	4618      	mov	r0, r3
 8000c94:	f001 f9ca 	bl	800202c <HAL_RCCEx_PeriphCLKConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000c9e:	f7ff ffb3 	bl	8000c08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ca2:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <HAL_RTC_MspInit+0x60>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2100      	movs	r1, #0
 8000cac:	2029      	movs	r0, #41	; 0x29
 8000cae:	f000 fb13 	bl	80012d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000cb2:	2029      	movs	r0, #41	; 0x29
 8000cb4:	f000 fb2c 	bl	8001310 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000cb8:	bf00      	nop
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40002800 	.word	0x40002800
 8000cc4:	42470e3c 	.word	0x42470e3c

08000cc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	; 0x28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a19      	ldr	r2, [pc, #100]	; (8000d4c <HAL_UART_MspInit+0x84>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d12b      	bne.n	8000d42 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <HAL_UART_MspInit+0x88>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	4a17      	ldr	r2, [pc, #92]	; (8000d50 <HAL_UART_MspInit+0x88>)
 8000cf4:	f043 0320 	orr.w	r3, r3, #32
 8000cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <HAL_UART_MspInit+0x88>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	f003 0320 	and.w	r3, r3, #32
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <HAL_UART_MspInit+0x88>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a10      	ldr	r2, [pc, #64]	; (8000d50 <HAL_UART_MspInit+0x88>)
 8000d10:	f043 0304 	orr.w	r3, r3, #4
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <HAL_UART_MspInit+0x88>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0304 	and.w	r3, r3, #4
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d22:	23c0      	movs	r3, #192	; 0xc0
 8000d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000d32:	2308      	movs	r3, #8
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4805      	ldr	r0, [pc, #20]	; (8000d54 <HAL_UART_MspInit+0x8c>)
 8000d3e:	f000 faf5 	bl	800132c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000d42:	bf00      	nop
 8000d44:	3728      	adds	r7, #40	; 0x28
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40011400 	.word	0x40011400
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020800 	.word	0x40020800

08000d58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08e      	sub	sp, #56	; 0x38
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	4b33      	ldr	r3, [pc, #204]	; (8000e3c <HAL_InitTick+0xe4>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d70:	4a32      	ldr	r2, [pc, #200]	; (8000e3c <HAL_InitTick+0xe4>)
 8000d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d76:	6413      	str	r3, [r2, #64]	; 0x40
 8000d78:	4b30      	ldr	r3, [pc, #192]	; (8000e3c <HAL_InitTick+0xe4>)
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d84:	f107 0210 	add.w	r2, r7, #16
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4611      	mov	r1, r2
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f001 f91a 	bl	8001fc8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d94:	6a3b      	ldr	r3, [r7, #32]
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d103      	bne.n	8000da6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d9e:	f001 f8eb 	bl	8001f78 <HAL_RCC_GetPCLK1Freq>
 8000da2:	6378      	str	r0, [r7, #52]	; 0x34
 8000da4:	e004      	b.n	8000db0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000da6:	f001 f8e7 	bl	8001f78 <HAL_RCC_GetPCLK1Freq>
 8000daa:	4603      	mov	r3, r0
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000db2:	4a23      	ldr	r2, [pc, #140]	; (8000e40 <HAL_InitTick+0xe8>)
 8000db4:	fba2 2303 	umull	r2, r3, r2, r3
 8000db8:	0c9b      	lsrs	r3, r3, #18
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000dbe:	4b21      	ldr	r3, [pc, #132]	; (8000e44 <HAL_InitTick+0xec>)
 8000dc0:	4a21      	ldr	r2, [pc, #132]	; (8000e48 <HAL_InitTick+0xf0>)
 8000dc2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000dc4:	4b1f      	ldr	r3, [pc, #124]	; (8000e44 <HAL_InitTick+0xec>)
 8000dc6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dca:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000dcc:	4a1d      	ldr	r2, [pc, #116]	; (8000e44 <HAL_InitTick+0xec>)
 8000dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dd0:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <HAL_InitTick+0xec>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd8:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <HAL_InitTick+0xec>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dde:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <HAL_InitTick+0xec>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000de4:	4817      	ldr	r0, [pc, #92]	; (8000e44 <HAL_InitTick+0xec>)
 8000de6:	f001 ff24 	bl	8002c32 <HAL_TIM_Base_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000df0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d11b      	bne.n	8000e30 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000df8:	4812      	ldr	r0, [pc, #72]	; (8000e44 <HAL_InitTick+0xec>)
 8000dfa:	f001 ff73 	bl	8002ce4 <HAL_TIM_Base_Start_IT>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d111      	bne.n	8000e30 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000e0c:	202d      	movs	r0, #45	; 0x2d
 8000e0e:	f000 fa7f 	bl	8001310 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2b0f      	cmp	r3, #15
 8000e16:	d808      	bhi.n	8000e2a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	6879      	ldr	r1, [r7, #4]
 8000e1c:	202d      	movs	r0, #45	; 0x2d
 8000e1e:	f000 fa5b 	bl	80012d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e22:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <HAL_InitTick+0xf4>)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6013      	str	r3, [r2, #0]
 8000e28:	e002      	b.n	8000e30 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3738      	adds	r7, #56	; 0x38
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	431bde83 	.word	0x431bde83
 8000e44:	20000220 	.word	0x20000220
 8000e48:	40002000 	.word	0x40002000
 8000e4c:	20000008 	.word	0x20000008

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <NMI_Handler+0x4>

08000e56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <HardFault_Handler+0x4>

08000e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <MemManage_Handler+0x4>

08000e62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <BusFault_Handler+0x4>

08000e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <UsageFault_Handler+0x4>

08000e6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
	...

08000ea8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000eac:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <RTC_Alarm_IRQHandler+0x10>)
 8000eae:	f001 fdb3 	bl	8002a18 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	2000013c 	.word	0x2000013c

08000ebc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000ec0:	4802      	ldr	r0, [pc, #8]	; (8000ecc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000ec2:	f001 ff7f 	bl	8002dc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000220 	.word	0x20000220

08000ed0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
	return 1;
 8000ed4:	2301      	movs	r3, #1
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <_kill>:

int _kill(int pid, int sig)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000eea:	f002 fd19 	bl	8003920 <__errno>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2216      	movs	r2, #22
 8000ef2:	601a      	str	r2, [r3, #0]
	return -1;
 8000ef4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <_exit>:

void _exit (int status)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff ffe7 	bl	8000ee0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f12:	e7fe      	b.n	8000f12 <_exit+0x12>

08000f14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	e00a      	b.n	8000f3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f26:	f3af 8000 	nop.w
 8000f2a:	4601      	mov	r1, r0
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	1c5a      	adds	r2, r3, #1
 8000f30:	60ba      	str	r2, [r7, #8]
 8000f32:	b2ca      	uxtb	r2, r1
 8000f34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	dbf0      	blt.n	8000f26 <_read+0x12>
	}

return len;
 8000f44:	687b      	ldr	r3, [r7, #4]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
	return -1;
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
 8000f6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f76:	605a      	str	r2, [r3, #4]
	return 0;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <_isatty>:

int _isatty(int file)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
	return 1;
 8000f8e:	2301      	movs	r3, #1
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
	return 0;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc0:	4a14      	ldr	r2, [pc, #80]	; (8001014 <_sbrk+0x5c>)
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <_sbrk+0x60>)
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fcc:	4b13      	ldr	r3, [pc, #76]	; (800101c <_sbrk+0x64>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d102      	bne.n	8000fda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <_sbrk+0x64>)
 8000fd6:	4a12      	ldr	r2, [pc, #72]	; (8001020 <_sbrk+0x68>)
 8000fd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <_sbrk+0x64>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d207      	bcs.n	8000ff8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe8:	f002 fc9a 	bl	8003920 <__errno>
 8000fec:	4603      	mov	r3, r0
 8000fee:	220c      	movs	r2, #12
 8000ff0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ff6:	e009      	b.n	800100c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ffe:	4b07      	ldr	r3, [pc, #28]	; (800101c <_sbrk+0x64>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	4a05      	ldr	r2, [pc, #20]	; (800101c <_sbrk+0x64>)
 8001008:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800100a:	68fb      	ldr	r3, [r7, #12]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20020000 	.word	0x20020000
 8001018:	00000400 	.word	0x00000400
 800101c:	2000026c 	.word	0x2000026c
 8001020:	200002b0 	.word	0x200002b0

08001024 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <SystemInit+0x20>)
 800102a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800102e:	4a05      	ldr	r2, [pc, #20]	; (8001044 <SystemInit+0x20>)
 8001030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001034:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001048:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001080 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800104c:	480d      	ldr	r0, [pc, #52]	; (8001084 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800104e:	490e      	ldr	r1, [pc, #56]	; (8001088 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001050:	4a0e      	ldr	r2, [pc, #56]	; (800108c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001054:	e002      	b.n	800105c <LoopCopyDataInit>

08001056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105a:	3304      	adds	r3, #4

0800105c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800105c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001060:	d3f9      	bcc.n	8001056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001062:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001064:	4c0b      	ldr	r4, [pc, #44]	; (8001094 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001068:	e001      	b.n	800106e <LoopFillZerobss>

0800106a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800106c:	3204      	adds	r2, #4

0800106e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001070:	d3fb      	bcc.n	800106a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001072:	f7ff ffd7 	bl	8001024 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001076:	f002 fc59 	bl	800392c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800107a:	f7ff fb31 	bl	80006e0 <main>
  bx  lr    
 800107e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001080:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001088:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 800108c:	08006b88 	.word	0x08006b88
  ldr r2, =_sbss
 8001090:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8001094:	200002ac 	.word	0x200002ac

08001098 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001098:	e7fe      	b.n	8001098 <ADC_IRQHandler>
	...

0800109c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_Init+0x40>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0d      	ldr	r2, [pc, #52]	; (80010dc <HAL_Init+0x40>)
 80010a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <HAL_Init+0x40>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <HAL_Init+0x40>)
 80010b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <HAL_Init+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a07      	ldr	r2, [pc, #28]	; (80010dc <HAL_Init+0x40>)
 80010be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c4:	2003      	movs	r0, #3
 80010c6:	f000 f8fc 	bl	80012c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ca:	200f      	movs	r0, #15
 80010cc:	f7ff fe44 	bl	8000d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d0:	f7ff fda0 	bl	8000c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40023c00 	.word	0x40023c00

080010e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_IncTick+0x20>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_IncTick+0x24>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	4a04      	ldr	r2, [pc, #16]	; (8001104 <HAL_IncTick+0x24>)
 80010f2:	6013      	str	r3, [r2, #0]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	2000000c 	.word	0x2000000c
 8001104:	20000270 	.word	0x20000270

08001108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return uwTick;
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <HAL_GetTick+0x14>)
 800110e:	681b      	ldr	r3, [r3, #0]
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000270 	.word	0x20000270

08001120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001128:	f7ff ffee 	bl	8001108 <HAL_GetTick>
 800112c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001138:	d005      	beq.n	8001146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <HAL_Delay+0x44>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001146:	bf00      	nop
 8001148:	f7ff ffde 	bl	8001108 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	429a      	cmp	r2, r3
 8001156:	d8f7      	bhi.n	8001148 <HAL_Delay+0x28>
  {
  }
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	2000000c 	.word	0x2000000c

08001168 <__NVIC_SetPriorityGrouping>:
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001184:	4013      	ands	r3, r2
 8001186:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001190:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119a:	4a04      	ldr	r2, [pc, #16]	; (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	60d3      	str	r3, [r2, #12]
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_GetPriorityGrouping>:
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b4:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <__NVIC_GetPriorityGrouping+0x18>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	0a1b      	lsrs	r3, r3, #8
 80011ba:	f003 0307 	and.w	r3, r3, #7
}
 80011be:	4618      	mov	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_EnableIRQ>:
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	db0b      	blt.n	80011f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	f003 021f 	and.w	r2, r3, #31
 80011e4:	4907      	ldr	r1, [pc, #28]	; (8001204 <__NVIC_EnableIRQ+0x38>)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	095b      	lsrs	r3, r3, #5
 80011ec:	2001      	movs	r0, #1
 80011ee:	fa00 f202 	lsl.w	r2, r0, r2
 80011f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000e100 	.word	0xe000e100

08001208 <__NVIC_SetPriority>:
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001218:	2b00      	cmp	r3, #0
 800121a:	db0a      	blt.n	8001232 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	b2da      	uxtb	r2, r3
 8001220:	490c      	ldr	r1, [pc, #48]	; (8001254 <__NVIC_SetPriority+0x4c>)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	0112      	lsls	r2, r2, #4
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	440b      	add	r3, r1
 800122c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001230:	e00a      	b.n	8001248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4908      	ldr	r1, [pc, #32]	; (8001258 <__NVIC_SetPriority+0x50>)
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	3b04      	subs	r3, #4
 8001240:	0112      	lsls	r2, r2, #4
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	440b      	add	r3, r1
 8001246:	761a      	strb	r2, [r3, #24]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000e100 	.word	0xe000e100
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <NVIC_EncodePriority>:
{
 800125c:	b480      	push	{r7}
 800125e:	b089      	sub	sp, #36	; 0x24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f1c3 0307 	rsb	r3, r3, #7
 8001276:	2b04      	cmp	r3, #4
 8001278:	bf28      	it	cs
 800127a:	2304      	movcs	r3, #4
 800127c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3304      	adds	r3, #4
 8001282:	2b06      	cmp	r3, #6
 8001284:	d902      	bls.n	800128c <NVIC_EncodePriority+0x30>
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3b03      	subs	r3, #3
 800128a:	e000      	b.n	800128e <NVIC_EncodePriority+0x32>
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43da      	mvns	r2, r3
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	401a      	ands	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	43d9      	mvns	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	4313      	orrs	r3, r2
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3724      	adds	r7, #36	; 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ff4c 	bl	8001168 <__NVIC_SetPriorityGrouping>
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
 80012e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ea:	f7ff ff61 	bl	80011b0 <__NVIC_GetPriorityGrouping>
 80012ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	68b9      	ldr	r1, [r7, #8]
 80012f4:	6978      	ldr	r0, [r7, #20]
 80012f6:	f7ff ffb1 	bl	800125c <NVIC_EncodePriority>
 80012fa:	4602      	mov	r2, r0
 80012fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001300:	4611      	mov	r1, r2
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ff80 	bl	8001208 <__NVIC_SetPriority>
}
 8001308:	bf00      	nop
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff ff54 	bl	80011cc <__NVIC_EnableIRQ>
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800132c:	b480      	push	{r7}
 800132e:	b089      	sub	sp, #36	; 0x24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800133e:	2300      	movs	r3, #0
 8001340:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
 8001346:	e16b      	b.n	8001620 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001348:	2201      	movs	r2, #1
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	4013      	ands	r3, r2
 800135a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	429a      	cmp	r2, r3
 8001362:	f040 815a 	bne.w	800161a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	2b01      	cmp	r3, #1
 8001370:	d005      	beq.n	800137e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800137a:	2b02      	cmp	r3, #2
 800137c:	d130      	bne.n	80013e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	2203      	movs	r2, #3
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4013      	ands	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	68da      	ldr	r2, [r3, #12]
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013b4:	2201      	movs	r2, #1
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	091b      	lsrs	r3, r3, #4
 80013ca:	f003 0201 	and.w	r2, r3, #1
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 0303 	and.w	r3, r3, #3
 80013e8:	2b03      	cmp	r3, #3
 80013ea:	d017      	beq.n	800141c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	2203      	movs	r2, #3
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d123      	bne.n	8001470 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	08da      	lsrs	r2, r3, #3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3208      	adds	r2, #8
 8001430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001434:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	f003 0307 	and.w	r3, r3, #7
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	220f      	movs	r2, #15
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4013      	ands	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	691a      	ldr	r2, [r3, #16]
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4313      	orrs	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	08da      	lsrs	r2, r3, #3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3208      	adds	r2, #8
 800146a:	69b9      	ldr	r1, [r7, #24]
 800146c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	2203      	movs	r2, #3
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0203 	and.w	r2, r3, #3
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 80b4 	beq.w	800161a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	4b60      	ldr	r3, [pc, #384]	; (8001638 <HAL_GPIO_Init+0x30c>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	4a5f      	ldr	r2, [pc, #380]	; (8001638 <HAL_GPIO_Init+0x30c>)
 80014bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c0:	6453      	str	r3, [r2, #68]	; 0x44
 80014c2:	4b5d      	ldr	r3, [pc, #372]	; (8001638 <HAL_GPIO_Init+0x30c>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ce:	4a5b      	ldr	r2, [pc, #364]	; (800163c <HAL_GPIO_Init+0x310>)
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	3302      	adds	r3, #2
 80014d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	220f      	movs	r2, #15
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a52      	ldr	r2, [pc, #328]	; (8001640 <HAL_GPIO_Init+0x314>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d02b      	beq.n	8001552 <HAL_GPIO_Init+0x226>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a51      	ldr	r2, [pc, #324]	; (8001644 <HAL_GPIO_Init+0x318>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d025      	beq.n	800154e <HAL_GPIO_Init+0x222>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a50      	ldr	r2, [pc, #320]	; (8001648 <HAL_GPIO_Init+0x31c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d01f      	beq.n	800154a <HAL_GPIO_Init+0x21e>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a4f      	ldr	r2, [pc, #316]	; (800164c <HAL_GPIO_Init+0x320>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d019      	beq.n	8001546 <HAL_GPIO_Init+0x21a>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a4e      	ldr	r2, [pc, #312]	; (8001650 <HAL_GPIO_Init+0x324>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d013      	beq.n	8001542 <HAL_GPIO_Init+0x216>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a4d      	ldr	r2, [pc, #308]	; (8001654 <HAL_GPIO_Init+0x328>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d00d      	beq.n	800153e <HAL_GPIO_Init+0x212>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a4c      	ldr	r2, [pc, #304]	; (8001658 <HAL_GPIO_Init+0x32c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d007      	beq.n	800153a <HAL_GPIO_Init+0x20e>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a4b      	ldr	r2, [pc, #300]	; (800165c <HAL_GPIO_Init+0x330>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d101      	bne.n	8001536 <HAL_GPIO_Init+0x20a>
 8001532:	2307      	movs	r3, #7
 8001534:	e00e      	b.n	8001554 <HAL_GPIO_Init+0x228>
 8001536:	2308      	movs	r3, #8
 8001538:	e00c      	b.n	8001554 <HAL_GPIO_Init+0x228>
 800153a:	2306      	movs	r3, #6
 800153c:	e00a      	b.n	8001554 <HAL_GPIO_Init+0x228>
 800153e:	2305      	movs	r3, #5
 8001540:	e008      	b.n	8001554 <HAL_GPIO_Init+0x228>
 8001542:	2304      	movs	r3, #4
 8001544:	e006      	b.n	8001554 <HAL_GPIO_Init+0x228>
 8001546:	2303      	movs	r3, #3
 8001548:	e004      	b.n	8001554 <HAL_GPIO_Init+0x228>
 800154a:	2302      	movs	r3, #2
 800154c:	e002      	b.n	8001554 <HAL_GPIO_Init+0x228>
 800154e:	2301      	movs	r3, #1
 8001550:	e000      	b.n	8001554 <HAL_GPIO_Init+0x228>
 8001552:	2300      	movs	r3, #0
 8001554:	69fa      	ldr	r2, [r7, #28]
 8001556:	f002 0203 	and.w	r2, r2, #3
 800155a:	0092      	lsls	r2, r2, #2
 800155c:	4093      	lsls	r3, r2
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001564:	4935      	ldr	r1, [pc, #212]	; (800163c <HAL_GPIO_Init+0x310>)
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	089b      	lsrs	r3, r3, #2
 800156a:	3302      	adds	r3, #2
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001572:	4b3b      	ldr	r3, [pc, #236]	; (8001660 <HAL_GPIO_Init+0x334>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	43db      	mvns	r3, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4013      	ands	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001596:	4a32      	ldr	r2, [pc, #200]	; (8001660 <HAL_GPIO_Init+0x334>)
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800159c:	4b30      	ldr	r3, [pc, #192]	; (8001660 <HAL_GPIO_Init+0x334>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015c0:	4a27      	ldr	r2, [pc, #156]	; (8001660 <HAL_GPIO_Init+0x334>)
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015c6:	4b26      	ldr	r3, [pc, #152]	; (8001660 <HAL_GPIO_Init+0x334>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4013      	ands	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015ea:	4a1d      	ldr	r2, [pc, #116]	; (8001660 <HAL_GPIO_Init+0x334>)
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015f0:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <HAL_GPIO_Init+0x334>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001614:	4a12      	ldr	r2, [pc, #72]	; (8001660 <HAL_GPIO_Init+0x334>)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3301      	adds	r3, #1
 800161e:	61fb      	str	r3, [r7, #28]
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	2b0f      	cmp	r3, #15
 8001624:	f67f ae90 	bls.w	8001348 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	3724      	adds	r7, #36	; 0x24
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40023800 	.word	0x40023800
 800163c:	40013800 	.word	0x40013800
 8001640:	40020000 	.word	0x40020000
 8001644:	40020400 	.word	0x40020400
 8001648:	40020800 	.word	0x40020800
 800164c:	40020c00 	.word	0x40020c00
 8001650:	40021000 	.word	0x40021000
 8001654:	40021400 	.word	0x40021400
 8001658:	40021800 	.word	0x40021800
 800165c:	40021c00 	.word	0x40021c00
 8001660:	40013c00 	.word	0x40013c00

08001664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	807b      	strh	r3, [r7, #2]
 8001670:	4613      	mov	r3, r2
 8001672:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001674:	787b      	ldrb	r3, [r7, #1]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800167a:	887a      	ldrh	r2, [r7, #2]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001680:	e003      	b.n	800168a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001682:	887b      	ldrh	r3, [r7, #2]
 8001684:	041a      	lsls	r2, r3, #16
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	619a      	str	r2, [r3, #24]
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e267      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d075      	beq.n	80017a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016b6:	4b88      	ldr	r3, [pc, #544]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 030c 	and.w	r3, r3, #12
 80016be:	2b04      	cmp	r3, #4
 80016c0:	d00c      	beq.n	80016dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016c2:	4b85      	ldr	r3, [pc, #532]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016ca:	2b08      	cmp	r3, #8
 80016cc:	d112      	bne.n	80016f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ce:	4b82      	ldr	r3, [pc, #520]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016da:	d10b      	bne.n	80016f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016dc:	4b7e      	ldr	r3, [pc, #504]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d05b      	beq.n	80017a0 <HAL_RCC_OscConfig+0x108>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d157      	bne.n	80017a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e242      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016fc:	d106      	bne.n	800170c <HAL_RCC_OscConfig+0x74>
 80016fe:	4b76      	ldr	r3, [pc, #472]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a75      	ldr	r2, [pc, #468]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	e01d      	b.n	8001748 <HAL_RCC_OscConfig+0xb0>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001714:	d10c      	bne.n	8001730 <HAL_RCC_OscConfig+0x98>
 8001716:	4b70      	ldr	r3, [pc, #448]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a6f      	ldr	r2, [pc, #444]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 800171c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	4b6d      	ldr	r3, [pc, #436]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a6c      	ldr	r2, [pc, #432]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	e00b      	b.n	8001748 <HAL_RCC_OscConfig+0xb0>
 8001730:	4b69      	ldr	r3, [pc, #420]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a68      	ldr	r2, [pc, #416]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	4b66      	ldr	r3, [pc, #408]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a65      	ldr	r2, [pc, #404]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d013      	beq.n	8001778 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001750:	f7ff fcda 	bl	8001108 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001758:	f7ff fcd6 	bl	8001108 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b64      	cmp	r3, #100	; 0x64
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e207      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176a:	4b5b      	ldr	r3, [pc, #364]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0xc0>
 8001776:	e014      	b.n	80017a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001778:	f7ff fcc6 	bl	8001108 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001780:	f7ff fcc2 	bl	8001108 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b64      	cmp	r3, #100	; 0x64
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e1f3      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001792:	4b51      	ldr	r3, [pc, #324]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0xe8>
 800179e:	e000      	b.n	80017a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d063      	beq.n	8001876 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017ae:	4b4a      	ldr	r3, [pc, #296]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 030c 	and.w	r3, r3, #12
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00b      	beq.n	80017d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ba:	4b47      	ldr	r3, [pc, #284]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d11c      	bne.n	8001800 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017c6:	4b44      	ldr	r3, [pc, #272]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d116      	bne.n	8001800 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d2:	4b41      	ldr	r3, [pc, #260]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d005      	beq.n	80017ea <HAL_RCC_OscConfig+0x152>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d001      	beq.n	80017ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e1c7      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ea:	4b3b      	ldr	r3, [pc, #236]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4937      	ldr	r1, [pc, #220]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fe:	e03a      	b.n	8001876 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d020      	beq.n	800184a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001808:	4b34      	ldr	r3, [pc, #208]	; (80018dc <HAL_RCC_OscConfig+0x244>)
 800180a:	2201      	movs	r2, #1
 800180c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180e:	f7ff fc7b 	bl	8001108 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001816:	f7ff fc77 	bl	8001108 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e1a8      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001828:	4b2b      	ldr	r3, [pc, #172]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0f0      	beq.n	8001816 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001834:	4b28      	ldr	r3, [pc, #160]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	4925      	ldr	r1, [pc, #148]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001844:	4313      	orrs	r3, r2
 8001846:	600b      	str	r3, [r1, #0]
 8001848:	e015      	b.n	8001876 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800184a:	4b24      	ldr	r3, [pc, #144]	; (80018dc <HAL_RCC_OscConfig+0x244>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001850:	f7ff fc5a 	bl	8001108 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001858:	f7ff fc56 	bl	8001108 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e187      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800186a:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	2b00      	cmp	r3, #0
 8001880:	d036      	beq.n	80018f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d016      	beq.n	80018b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <HAL_RCC_OscConfig+0x248>)
 800188c:	2201      	movs	r2, #1
 800188e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001890:	f7ff fc3a 	bl	8001108 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001898:	f7ff fc36 	bl	8001108 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e167      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018aa:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <HAL_RCC_OscConfig+0x240>)
 80018ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0x200>
 80018b6:	e01b      	b.n	80018f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <HAL_RCC_OscConfig+0x248>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018be:	f7ff fc23 	bl	8001108 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c4:	e00e      	b.n	80018e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018c6:	f7ff fc1f 	bl	8001108 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d907      	bls.n	80018e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e150      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
 80018d8:	40023800 	.word	0x40023800
 80018dc:	42470000 	.word	0x42470000
 80018e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e4:	4b88      	ldr	r3, [pc, #544]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 80018e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1ea      	bne.n	80018c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 8097 	beq.w	8001a2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018fe:	2300      	movs	r3, #0
 8001900:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001902:	4b81      	ldr	r3, [pc, #516]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10f      	bne.n	800192e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	4b7d      	ldr	r3, [pc, #500]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	4a7c      	ldr	r2, [pc, #496]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800191c:	6413      	str	r3, [r2, #64]	; 0x40
 800191e:	4b7a      	ldr	r3, [pc, #488]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800192a:	2301      	movs	r3, #1
 800192c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192e:	4b77      	ldr	r3, [pc, #476]	; (8001b0c <HAL_RCC_OscConfig+0x474>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001936:	2b00      	cmp	r3, #0
 8001938:	d118      	bne.n	800196c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800193a:	4b74      	ldr	r3, [pc, #464]	; (8001b0c <HAL_RCC_OscConfig+0x474>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a73      	ldr	r2, [pc, #460]	; (8001b0c <HAL_RCC_OscConfig+0x474>)
 8001940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001944:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001946:	f7ff fbdf 	bl	8001108 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800194e:	f7ff fbdb 	bl	8001108 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e10c      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001960:	4b6a      	ldr	r3, [pc, #424]	; (8001b0c <HAL_RCC_OscConfig+0x474>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0f0      	beq.n	800194e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d106      	bne.n	8001982 <HAL_RCC_OscConfig+0x2ea>
 8001974:	4b64      	ldr	r3, [pc, #400]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001978:	4a63      	ldr	r2, [pc, #396]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6713      	str	r3, [r2, #112]	; 0x70
 8001980:	e01c      	b.n	80019bc <HAL_RCC_OscConfig+0x324>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b05      	cmp	r3, #5
 8001988:	d10c      	bne.n	80019a4 <HAL_RCC_OscConfig+0x30c>
 800198a:	4b5f      	ldr	r3, [pc, #380]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198e:	4a5e      	ldr	r2, [pc, #376]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001990:	f043 0304 	orr.w	r3, r3, #4
 8001994:	6713      	str	r3, [r2, #112]	; 0x70
 8001996:	4b5c      	ldr	r3, [pc, #368]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199a:	4a5b      	ldr	r2, [pc, #364]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6713      	str	r3, [r2, #112]	; 0x70
 80019a2:	e00b      	b.n	80019bc <HAL_RCC_OscConfig+0x324>
 80019a4:	4b58      	ldr	r3, [pc, #352]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 80019a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a8:	4a57      	ldr	r2, [pc, #348]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 80019aa:	f023 0301 	bic.w	r3, r3, #1
 80019ae:	6713      	str	r3, [r2, #112]	; 0x70
 80019b0:	4b55      	ldr	r3, [pc, #340]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 80019b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b4:	4a54      	ldr	r2, [pc, #336]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 80019b6:	f023 0304 	bic.w	r3, r3, #4
 80019ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d015      	beq.n	80019f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c4:	f7ff fba0 	bl	8001108 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ca:	e00a      	b.n	80019e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019cc:	f7ff fb9c 	bl	8001108 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019da:	4293      	cmp	r3, r2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e0cb      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e2:	4b49      	ldr	r3, [pc, #292]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 80019e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0ee      	beq.n	80019cc <HAL_RCC_OscConfig+0x334>
 80019ee:	e014      	b.n	8001a1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f0:	f7ff fb8a 	bl	8001108 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f6:	e00a      	b.n	8001a0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019f8:	f7ff fb86 	bl	8001108 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e0b5      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a0e:	4b3e      	ldr	r3, [pc, #248]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1ee      	bne.n	80019f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a1a:	7dfb      	ldrb	r3, [r7, #23]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d105      	bne.n	8001a2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a20:	4b39      	ldr	r3, [pc, #228]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	4a38      	ldr	r2, [pc, #224]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001a26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 80a1 	beq.w	8001b78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a36:	4b34      	ldr	r3, [pc, #208]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 030c 	and.w	r3, r3, #12
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d05c      	beq.n	8001afc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d141      	bne.n	8001ace <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a4a:	4b31      	ldr	r3, [pc, #196]	; (8001b10 <HAL_RCC_OscConfig+0x478>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a50:	f7ff fb5a 	bl	8001108 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a58:	f7ff fb56 	bl	8001108 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e087      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a6a:	4b27      	ldr	r3, [pc, #156]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69da      	ldr	r2, [r3, #28]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	019b      	lsls	r3, r3, #6
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8c:	085b      	lsrs	r3, r3, #1
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	041b      	lsls	r3, r3, #16
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a98:	061b      	lsls	r3, r3, #24
 8001a9a:	491b      	ldr	r1, [pc, #108]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <HAL_RCC_OscConfig+0x478>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa6:	f7ff fb2f 	bl	8001108 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aae:	f7ff fb2b 	bl	8001108 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e05c      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f0      	beq.n	8001aae <HAL_RCC_OscConfig+0x416>
 8001acc:	e054      	b.n	8001b78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ace:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <HAL_RCC_OscConfig+0x478>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad4:	f7ff fb18 	bl	8001108 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001adc:	f7ff fb14 	bl	8001108 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e045      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x444>
 8001afa:	e03d      	b.n	8001b78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d107      	bne.n	8001b14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e038      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40007000 	.word	0x40007000
 8001b10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b14:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <HAL_RCC_OscConfig+0x4ec>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d028      	beq.n	8001b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d121      	bne.n	8001b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d11a      	bne.n	8001b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b44:	4013      	ands	r3, r2
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d111      	bne.n	8001b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5a:	085b      	lsrs	r3, r3, #1
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d107      	bne.n	8001b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d001      	beq.n	8001b78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e000      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800

08001b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0cc      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b9c:	4b68      	ldr	r3, [pc, #416]	; (8001d40 <HAL_RCC_ClockConfig+0x1b8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d90c      	bls.n	8001bc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001baa:	4b65      	ldr	r3, [pc, #404]	; (8001d40 <HAL_RCC_ClockConfig+0x1b8>)
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb2:	4b63      	ldr	r3, [pc, #396]	; (8001d40 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d001      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e0b8      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d020      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d005      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bdc:	4b59      	ldr	r3, [pc, #356]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	4a58      	ldr	r2, [pc, #352]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001be6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0308 	and.w	r3, r3, #8
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d005      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bf4:	4b53      	ldr	r3, [pc, #332]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	4a52      	ldr	r2, [pc, #328]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c00:	4b50      	ldr	r3, [pc, #320]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	494d      	ldr	r1, [pc, #308]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d044      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d107      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c26:	4b47      	ldr	r3, [pc, #284]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d119      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e07f      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d003      	beq.n	8001c46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d107      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c46:	4b3f      	ldr	r3, [pc, #252]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d109      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e06f      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c56:	4b3b      	ldr	r3, [pc, #236]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e067      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c66:	4b37      	ldr	r3, [pc, #220]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f023 0203 	bic.w	r2, r3, #3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	4934      	ldr	r1, [pc, #208]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c78:	f7ff fa46 	bl	8001108 <HAL_GetTick>
 8001c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7e:	e00a      	b.n	8001c96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c80:	f7ff fa42 	bl	8001108 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e04f      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c96:	4b2b      	ldr	r3, [pc, #172]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 020c 	and.w	r2, r3, #12
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d1eb      	bne.n	8001c80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca8:	4b25      	ldr	r3, [pc, #148]	; (8001d40 <HAL_RCC_ClockConfig+0x1b8>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d20c      	bcs.n	8001cd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb6:	4b22      	ldr	r3, [pc, #136]	; (8001d40 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cbe:	4b20      	ldr	r3, [pc, #128]	; (8001d40 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d001      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e032      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d008      	beq.n	8001cee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cdc:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	4916      	ldr	r1, [pc, #88]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d009      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cfa:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	490e      	ldr	r1, [pc, #56]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d0e:	f000 f821 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 8001d12:	4602      	mov	r2, r0
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	091b      	lsrs	r3, r3, #4
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	490a      	ldr	r1, [pc, #40]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001d20:	5ccb      	ldrb	r3, [r1, r3]
 8001d22:	fa22 f303 	lsr.w	r3, r2, r3
 8001d26:	4a09      	ldr	r2, [pc, #36]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <HAL_RCC_ClockConfig+0x1c8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff f812 	bl	8000d58 <HAL_InitTick>

  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023c00 	.word	0x40023c00
 8001d44:	40023800 	.word	0x40023800
 8001d48:	08006748 	.word	0x08006748
 8001d4c:	20000004 	.word	0x20000004
 8001d50:	20000008 	.word	0x20000008

08001d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d58:	b094      	sub	sp, #80	; 0x50
 8001d5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	647b      	str	r3, [r7, #68]	; 0x44
 8001d60:	2300      	movs	r3, #0
 8001d62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d64:	2300      	movs	r3, #0
 8001d66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d6c:	4b79      	ldr	r3, [pc, #484]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 030c 	and.w	r3, r3, #12
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d00d      	beq.n	8001d94 <HAL_RCC_GetSysClockFreq+0x40>
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	f200 80e1 	bhi.w	8001f40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d002      	beq.n	8001d88 <HAL_RCC_GetSysClockFreq+0x34>
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d003      	beq.n	8001d8e <HAL_RCC_GetSysClockFreq+0x3a>
 8001d86:	e0db      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d88:	4b73      	ldr	r3, [pc, #460]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d8a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001d8c:	e0db      	b.n	8001f46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d8e:	4b73      	ldr	r3, [pc, #460]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x208>)
 8001d90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d92:	e0d8      	b.n	8001f46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d94:	4b6f      	ldr	r3, [pc, #444]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d9c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d9e:	4b6d      	ldr	r3, [pc, #436]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d063      	beq.n	8001e72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001daa:	4b6a      	ldr	r3, [pc, #424]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	099b      	lsrs	r3, r3, #6
 8001db0:	2200      	movs	r2, #0
 8001db2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001db4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dbc:	633b      	str	r3, [r7, #48]	; 0x30
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8001dc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001dc6:	4622      	mov	r2, r4
 8001dc8:	462b      	mov	r3, r5
 8001dca:	f04f 0000 	mov.w	r0, #0
 8001dce:	f04f 0100 	mov.w	r1, #0
 8001dd2:	0159      	lsls	r1, r3, #5
 8001dd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dd8:	0150      	lsls	r0, r2, #5
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4621      	mov	r1, r4
 8001de0:	1a51      	subs	r1, r2, r1
 8001de2:	6139      	str	r1, [r7, #16]
 8001de4:	4629      	mov	r1, r5
 8001de6:	eb63 0301 	sbc.w	r3, r3, r1
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001df8:	4659      	mov	r1, fp
 8001dfa:	018b      	lsls	r3, r1, #6
 8001dfc:	4651      	mov	r1, sl
 8001dfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e02:	4651      	mov	r1, sl
 8001e04:	018a      	lsls	r2, r1, #6
 8001e06:	4651      	mov	r1, sl
 8001e08:	ebb2 0801 	subs.w	r8, r2, r1
 8001e0c:	4659      	mov	r1, fp
 8001e0e:	eb63 0901 	sbc.w	r9, r3, r1
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	f04f 0300 	mov.w	r3, #0
 8001e1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e26:	4690      	mov	r8, r2
 8001e28:	4699      	mov	r9, r3
 8001e2a:	4623      	mov	r3, r4
 8001e2c:	eb18 0303 	adds.w	r3, r8, r3
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	462b      	mov	r3, r5
 8001e34:	eb49 0303 	adc.w	r3, r9, r3
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	f04f 0300 	mov.w	r3, #0
 8001e42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e46:	4629      	mov	r1, r5
 8001e48:	024b      	lsls	r3, r1, #9
 8001e4a:	4621      	mov	r1, r4
 8001e4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e50:	4621      	mov	r1, r4
 8001e52:	024a      	lsls	r2, r1, #9
 8001e54:	4610      	mov	r0, r2
 8001e56:	4619      	mov	r1, r3
 8001e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e64:	f7fe fa6c 	bl	8000340 <__aeabi_uldivmod>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e70:	e058      	b.n	8001f24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e72:	4b38      	ldr	r3, [pc, #224]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	099b      	lsrs	r3, r3, #6
 8001e78:	2200      	movs	r2, #0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	4611      	mov	r1, r2
 8001e7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e82:	623b      	str	r3, [r7, #32]
 8001e84:	2300      	movs	r3, #0
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
 8001e88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e8c:	4642      	mov	r2, r8
 8001e8e:	464b      	mov	r3, r9
 8001e90:	f04f 0000 	mov.w	r0, #0
 8001e94:	f04f 0100 	mov.w	r1, #0
 8001e98:	0159      	lsls	r1, r3, #5
 8001e9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e9e:	0150      	lsls	r0, r2, #5
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	4641      	mov	r1, r8
 8001ea6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001eaa:	4649      	mov	r1, r9
 8001eac:	eb63 0b01 	sbc.w	fp, r3, r1
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	f04f 0300 	mov.w	r3, #0
 8001eb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ebc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ec0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ec4:	ebb2 040a 	subs.w	r4, r2, sl
 8001ec8:	eb63 050b 	sbc.w	r5, r3, fp
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	00eb      	lsls	r3, r5, #3
 8001ed6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001eda:	00e2      	lsls	r2, r4, #3
 8001edc:	4614      	mov	r4, r2
 8001ede:	461d      	mov	r5, r3
 8001ee0:	4643      	mov	r3, r8
 8001ee2:	18e3      	adds	r3, r4, r3
 8001ee4:	603b      	str	r3, [r7, #0]
 8001ee6:	464b      	mov	r3, r9
 8001ee8:	eb45 0303 	adc.w	r3, r5, r3
 8001eec:	607b      	str	r3, [r7, #4]
 8001eee:	f04f 0200 	mov.w	r2, #0
 8001ef2:	f04f 0300 	mov.w	r3, #0
 8001ef6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001efa:	4629      	mov	r1, r5
 8001efc:	028b      	lsls	r3, r1, #10
 8001efe:	4621      	mov	r1, r4
 8001f00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f04:	4621      	mov	r1, r4
 8001f06:	028a      	lsls	r2, r1, #10
 8001f08:	4610      	mov	r0, r2
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f0e:	2200      	movs	r2, #0
 8001f10:	61bb      	str	r3, [r7, #24]
 8001f12:	61fa      	str	r2, [r7, #28]
 8001f14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f18:	f7fe fa12 	bl	8000340 <__aeabi_uldivmod>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4613      	mov	r3, r2
 8001f22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	0c1b      	lsrs	r3, r3, #16
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	3301      	adds	r3, #1
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001f34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f3e:	e002      	b.n	8001f46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f40:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3750      	adds	r7, #80	; 0x50
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f52:	bf00      	nop
 8001f54:	40023800 	.word	0x40023800
 8001f58:	00f42400 	.word	0x00f42400
 8001f5c:	007a1200 	.word	0x007a1200

08001f60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f64:	4b03      	ldr	r3, [pc, #12]	; (8001f74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f66:	681b      	ldr	r3, [r3, #0]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	20000004 	.word	0x20000004

08001f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f7c:	f7ff fff0 	bl	8001f60 <HAL_RCC_GetHCLKFreq>
 8001f80:	4602      	mov	r2, r0
 8001f82:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	0a9b      	lsrs	r3, r3, #10
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	4903      	ldr	r1, [pc, #12]	; (8001f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f8e:	5ccb      	ldrb	r3, [r1, r3]
 8001f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	08006758 	.word	0x08006758

08001fa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fa4:	f7ff ffdc 	bl	8001f60 <HAL_RCC_GetHCLKFreq>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	0b5b      	lsrs	r3, r3, #13
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	4903      	ldr	r1, [pc, #12]	; (8001fc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fb6:	5ccb      	ldrb	r3, [r1, r3]
 8001fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	08006758 	.word	0x08006758

08001fc8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	220f      	movs	r2, #15
 8001fd6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001fd8:	4b12      	ldr	r3, [pc, #72]	; (8002024 <HAL_RCC_GetClockConfig+0x5c>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 0203 	and.w	r2, r3, #3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001fe4:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <HAL_RCC_GetClockConfig+0x5c>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <HAL_RCC_GetClockConfig+0x5c>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ffc:	4b09      	ldr	r3, [pc, #36]	; (8002024 <HAL_RCC_GetClockConfig+0x5c>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	08db      	lsrs	r3, r3, #3
 8002002:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800200a:	4b07      	ldr	r3, [pc, #28]	; (8002028 <HAL_RCC_GetClockConfig+0x60>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0207 	and.w	r2, r3, #7
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	601a      	str	r2, [r3, #0]
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40023800 	.word	0x40023800
 8002028:	40023c00 	.word	0x40023c00

0800202c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b00      	cmp	r3, #0
 8002046:	d105      	bne.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002050:	2b00      	cmp	r3, #0
 8002052:	d035      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002054:	4b62      	ldr	r3, [pc, #392]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800205a:	f7ff f855 	bl	8001108 <HAL_GetTick>
 800205e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002060:	e008      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002062:	f7ff f851 	bl	8001108 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e0b0      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002074:	4b5b      	ldr	r3, [pc, #364]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1f0      	bne.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	019a      	lsls	r2, r3, #6
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	071b      	lsls	r3, r3, #28
 800208c:	4955      	ldr	r1, [pc, #340]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800208e:	4313      	orrs	r3, r2
 8002090:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002094:	4b52      	ldr	r3, [pc, #328]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002096:	2201      	movs	r2, #1
 8002098:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800209a:	f7ff f835 	bl	8001108 <HAL_GetTick>
 800209e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80020a0:	e008      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80020a2:	f7ff f831 	bl	8001108 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e090      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80020b4:	4b4b      	ldr	r3, [pc, #300]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0f0      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 8083 	beq.w	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	4b44      	ldr	r3, [pc, #272]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	4a43      	ldr	r2, [pc, #268]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80020d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020dc:	6413      	str	r3, [r2, #64]	; 0x40
 80020de:	4b41      	ldr	r3, [pc, #260]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80020ea:	4b3f      	ldr	r3, [pc, #252]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a3e      	ldr	r2, [pc, #248]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80020f6:	f7ff f807 	bl	8001108 <HAL_GetTick>
 80020fa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80020fc:	e008      	b.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80020fe:	f7ff f803 	bl	8001108 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e062      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002110:	4b35      	ldr	r3, [pc, #212]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0f0      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800211c:	4b31      	ldr	r3, [pc, #196]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800211e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002120:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002124:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d02f      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	429a      	cmp	r2, r3
 8002138:	d028      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800213a:	4b2a      	ldr	r3, [pc, #168]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800213c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002142:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002144:	4b29      	ldr	r3, [pc, #164]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002146:	2201      	movs	r2, #1
 8002148:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800214a:	4b28      	ldr	r3, [pc, #160]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002150:	4a24      	ldr	r2, [pc, #144]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002156:	4b23      	ldr	r3, [pc, #140]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b01      	cmp	r3, #1
 8002160:	d114      	bne.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002162:	f7fe ffd1 	bl	8001108 <HAL_GetTick>
 8002166:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002168:	e00a      	b.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800216a:	f7fe ffcd 	bl	8001108 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	f241 3288 	movw	r2, #5000	; 0x1388
 8002178:	4293      	cmp	r3, r2
 800217a:	d901      	bls.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e02a      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002180:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0ee      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002194:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002198:	d10d      	bne.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800219a:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80021aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ae:	490d      	ldr	r1, [pc, #52]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	608b      	str	r3, [r1, #8]
 80021b4:	e005      	b.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80021b6:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021bc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80021c0:	6093      	str	r3, [r2, #8]
 80021c2:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ce:	4905      	ldr	r1, [pc, #20]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	42470068 	.word	0x42470068
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40007000 	.word	0x40007000
 80021ec:	42470e40 	.word	0x42470e40

080021f0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e066      	b.n	80022d4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	7f5b      	ldrb	r3, [r3, #29]
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	d105      	bne.n	800221c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7fe fd24 	bl	8000c64 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2202      	movs	r2, #2
 8002220:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	22ca      	movs	r2, #202	; 0xca
 8002228:	625a      	str	r2, [r3, #36]	; 0x24
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2253      	movs	r2, #83	; 0x53
 8002230:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 fc5e 	bl	8002af4 <RTC_EnterInitMode>
 8002238:	4603      	mov	r3, r0
 800223a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800223c:	7bfb      	ldrb	r3, [r7, #15]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d12c      	bne.n	800229c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002250:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002254:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6899      	ldr	r1, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	431a      	orrs	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	431a      	orrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	68d2      	ldr	r2, [r2, #12]
 800227c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6919      	ldr	r1, [r3, #16]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	041a      	lsls	r2, r3, #16
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 fc65 	bl	8002b62 <RTC_ExitInitMode>
 8002298:	4603      	mov	r3, r0
 800229a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800229c:	7bfb      	ldrb	r3, [r7, #15]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d113      	bne.n	80022ca <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022b0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	699a      	ldr	r2, [r3, #24]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	22ff      	movs	r2, #255	; 0xff
 80022d0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80022dc:	b590      	push	{r4, r7, lr}
 80022de:	b087      	sub	sp, #28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	7f1b      	ldrb	r3, [r3, #28]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_RTC_SetTime+0x1c>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e087      	b.n	8002408 <HAL_RTC_SetTime+0x12c>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2201      	movs	r2, #1
 80022fc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2202      	movs	r2, #2
 8002302:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d126      	bne.n	8002358 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002314:	2b00      	cmp	r3, #0
 8002316:	d102      	bne.n	800231e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2200      	movs	r2, #0
 800231c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f000 fc42 	bl	8002bac <RTC_ByteToBcd2>
 8002328:	4603      	mov	r3, r0
 800232a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	785b      	ldrb	r3, [r3, #1]
 8002330:	4618      	mov	r0, r3
 8002332:	f000 fc3b 	bl	8002bac <RTC_ByteToBcd2>
 8002336:	4603      	mov	r3, r0
 8002338:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800233a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	789b      	ldrb	r3, [r3, #2]
 8002340:	4618      	mov	r0, r3
 8002342:	f000 fc33 	bl	8002bac <RTC_ByteToBcd2>
 8002346:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002348:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	78db      	ldrb	r3, [r3, #3]
 8002350:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002352:	4313      	orrs	r3, r2
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	e018      	b.n	800238a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002362:	2b00      	cmp	r3, #0
 8002364:	d102      	bne.n	800236c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	2200      	movs	r2, #0
 800236a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	785b      	ldrb	r3, [r3, #1]
 8002376:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002378:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800237e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	78db      	ldrb	r3, [r3, #3]
 8002384:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002386:	4313      	orrs	r3, r2
 8002388:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	22ca      	movs	r2, #202	; 0xca
 8002390:	625a      	str	r2, [r3, #36]	; 0x24
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2253      	movs	r2, #83	; 0x53
 8002398:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 fbaa 	bl	8002af4 <RTC_EnterInitMode>
 80023a0:	4603      	mov	r3, r0
 80023a2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80023a4:	7cfb      	ldrb	r3, [r7, #19]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d120      	bne.n	80023ec <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80023b4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80023b8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023c8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6899      	ldr	r1, [r3, #8]
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	68da      	ldr	r2, [r3, #12]
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	431a      	orrs	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 fbbd 	bl	8002b62 <RTC_ExitInitMode>
 80023e8:	4603      	mov	r3, r0
 80023ea:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80023ec:	7cfb      	ldrb	r3, [r7, #19]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d102      	bne.n	80023f8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2201      	movs	r2, #1
 80023f6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	22ff      	movs	r2, #255	; 0xff
 80023fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	771a      	strb	r2, [r3, #28]

  return status;
 8002406:	7cfb      	ldrb	r3, [r7, #19]
}
 8002408:	4618      	mov	r0, r3
 800240a:	371c      	adds	r7, #28
 800240c:	46bd      	mov	sp, r7
 800240e:	bd90      	pop	{r4, r7, pc}

08002410 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002442:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002446:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	0c1b      	lsrs	r3, r3, #16
 800244c:	b2db      	uxtb	r3, r3
 800244e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002452:	b2da      	uxtb	r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	0a1b      	lsrs	r3, r3, #8
 800245c:	b2db      	uxtb	r3, r3
 800245e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002462:	b2da      	uxtb	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	b2db      	uxtb	r3, r3
 800246c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002470:	b2da      	uxtb	r2, r3
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	0d9b      	lsrs	r3, r3, #22
 800247a:	b2db      	uxtb	r3, r3
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	b2da      	uxtb	r2, r3
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d11a      	bne.n	80024c2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f000 fba8 	bl	8002be6 <RTC_Bcd2ToByte>
 8002496:	4603      	mov	r3, r0
 8002498:	461a      	mov	r2, r3
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	785b      	ldrb	r3, [r3, #1]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 fb9f 	bl	8002be6 <RTC_Bcd2ToByte>
 80024a8:	4603      	mov	r3, r0
 80024aa:	461a      	mov	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	789b      	ldrb	r3, [r3, #2]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 fb96 	bl	8002be6 <RTC_Bcd2ToByte>
 80024ba:	4603      	mov	r3, r0
 80024bc:	461a      	mov	r2, r3
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80024cc:	b590      	push	{r4, r7, lr}
 80024ce:	b087      	sub	sp, #28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	7f1b      	ldrb	r3, [r3, #28]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_RTC_SetDate+0x1c>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e071      	b.n	80025cc <HAL_RTC_SetDate+0x100>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2201      	movs	r2, #1
 80024ec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2202      	movs	r2, #2
 80024f2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10e      	bne.n	8002518 <HAL_RTC_SetDate+0x4c>
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	785b      	ldrb	r3, [r3, #1]
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	2b00      	cmp	r3, #0
 8002504:	d008      	beq.n	8002518 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	785b      	ldrb	r3, [r3, #1]
 800250a:	f023 0310 	bic.w	r3, r3, #16
 800250e:	b2db      	uxtb	r3, r3
 8002510:	330a      	adds	r3, #10
 8002512:	b2da      	uxtb	r2, r3
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d11c      	bne.n	8002558 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	78db      	ldrb	r3, [r3, #3]
 8002522:	4618      	mov	r0, r3
 8002524:	f000 fb42 	bl	8002bac <RTC_ByteToBcd2>
 8002528:	4603      	mov	r3, r0
 800252a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	785b      	ldrb	r3, [r3, #1]
 8002530:	4618      	mov	r0, r3
 8002532:	f000 fb3b 	bl	8002bac <RTC_ByteToBcd2>
 8002536:	4603      	mov	r3, r0
 8002538:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800253a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	789b      	ldrb	r3, [r3, #2]
 8002540:	4618      	mov	r0, r3
 8002542:	f000 fb33 	bl	8002bac <RTC_ByteToBcd2>
 8002546:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002548:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002552:	4313      	orrs	r3, r2
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	e00e      	b.n	8002576 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	78db      	ldrb	r3, [r3, #3]
 800255c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	785b      	ldrb	r3, [r3, #1]
 8002562:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002564:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800256a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002572:	4313      	orrs	r3, r2
 8002574:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	22ca      	movs	r2, #202	; 0xca
 800257c:	625a      	str	r2, [r3, #36]	; 0x24
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2253      	movs	r2, #83	; 0x53
 8002584:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 fab4 	bl	8002af4 <RTC_EnterInitMode>
 800258c:	4603      	mov	r3, r0
 800258e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002590:	7cfb      	ldrb	r3, [r7, #19]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10c      	bne.n	80025b0 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80025a0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80025a4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 fadb 	bl	8002b62 <RTC_ExitInitMode>
 80025ac:	4603      	mov	r3, r0
 80025ae:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80025b0:	7cfb      	ldrb	r3, [r7, #19]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d102      	bne.n	80025bc <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2201      	movs	r2, #1
 80025ba:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	22ff      	movs	r2, #255	; 0xff
 80025c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	771a      	strb	r2, [r3, #28]

  return status;
 80025ca:	7cfb      	ldrb	r3, [r7, #19]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	371c      	adds	r7, #28
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd90      	pop	{r4, r7, pc}

080025d4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80025ee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80025f2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	0c1b      	lsrs	r3, r3, #16
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	0a1b      	lsrs	r3, r3, #8
 8002602:	b2db      	uxtb	r3, r3
 8002604:	f003 031f 	and.w	r3, r3, #31
 8002608:	b2da      	uxtb	r2, r3
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	b2db      	uxtb	r3, r3
 8002612:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002616:	b2da      	uxtb	r2, r3
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	0b5b      	lsrs	r3, r3, #13
 8002620:	b2db      	uxtb	r3, r3
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	b2da      	uxtb	r2, r3
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d11a      	bne.n	8002668 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	78db      	ldrb	r3, [r3, #3]
 8002636:	4618      	mov	r0, r3
 8002638:	f000 fad5 	bl	8002be6 <RTC_Bcd2ToByte>
 800263c:	4603      	mov	r3, r0
 800263e:	461a      	mov	r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	785b      	ldrb	r3, [r3, #1]
 8002648:	4618      	mov	r0, r3
 800264a:	f000 facc 	bl	8002be6 <RTC_Bcd2ToByte>
 800264e:	4603      	mov	r3, r0
 8002650:	461a      	mov	r2, r3
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	789b      	ldrb	r3, [r3, #2]
 800265a:	4618      	mov	r0, r3
 800265c:	f000 fac3 	bl	8002be6 <RTC_Bcd2ToByte>
 8002660:	4603      	mov	r3, r0
 8002662:	461a      	mov	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
	...

08002674 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002674:	b590      	push	{r4, r7, lr}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002680:	4b9a      	ldr	r3, [pc, #616]	; (80028ec <HAL_RTC_SetAlarm_IT+0x278>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a9a      	ldr	r2, [pc, #616]	; (80028f0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8002686:	fba2 2303 	umull	r2, r3, r2, r3
 800268a:	0adb      	lsrs	r3, r3, #11
 800268c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002690:	fb02 f303 	mul.w	r3, r2, r3
 8002694:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8002696:	2300      	movs	r3, #0
 8002698:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800269a:	2300      	movs	r3, #0
 800269c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	7f1b      	ldrb	r3, [r3, #28]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d101      	bne.n	80026aa <HAL_RTC_SetAlarm_IT+0x36>
 80026a6:	2302      	movs	r3, #2
 80026a8:	e11c      	b.n	80028e4 <HAL_RTC_SetAlarm_IT+0x270>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2201      	movs	r2, #1
 80026ae:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2202      	movs	r2, #2
 80026b4:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d137      	bne.n	800272c <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d102      	bne.n	80026d0 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	2200      	movs	r2, #0
 80026ce:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f000 fa69 	bl	8002bac <RTC_ByteToBcd2>
 80026da:	4603      	mov	r3, r0
 80026dc:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	785b      	ldrb	r3, [r3, #1]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 fa62 	bl	8002bac <RTC_ByteToBcd2>
 80026e8:	4603      	mov	r3, r0
 80026ea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80026ec:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	789b      	ldrb	r3, [r3, #2]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 fa5a 	bl	8002bac <RTC_ByteToBcd2>
 80026f8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80026fa:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	78db      	ldrb	r3, [r3, #3]
 8002702:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002704:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800270e:	4618      	mov	r0, r3
 8002710:	f000 fa4c 	bl	8002bac <RTC_ByteToBcd2>
 8002714:	4603      	mov	r3, r0
 8002716:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8002718:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002720:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002726:	4313      	orrs	r3, r2
 8002728:	61fb      	str	r3, [r7, #28]
 800272a:	e023      	b.n	8002774 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002736:	2b00      	cmp	r3, #0
 8002738:	d102      	bne.n	8002740 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2200      	movs	r2, #0
 800273e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	785b      	ldrb	r3, [r3, #1]
 800274a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800274c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002752:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	78db      	ldrb	r3, [r3, #3]
 8002758:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800275a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002762:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002764:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800276a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002770:	4313      	orrs	r3, r2
 8002772:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800277c:	4313      	orrs	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	22ca      	movs	r2, #202	; 0xca
 8002786:	625a      	str	r2, [r3, #36]	; 0x24
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2253      	movs	r2, #83	; 0x53
 800278e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002798:	d141      	bne.n	800281e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027a8:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80027ba:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	1e5a      	subs	r2, r3, #1
 80027c0:	617a      	str	r2, [r7, #20]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10b      	bne.n	80027de <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	22ff      	movs	r2, #255	; 0xff
 80027cc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2203      	movs	r2, #3
 80027d2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e082      	b.n	80028e4 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0e7      	beq.n	80027bc <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	69fa      	ldr	r2, [r7, #28]
 80027f2:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800280a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	e04b      	b.n	80028b6 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800282c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	b2da      	uxtb	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800283e:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002840:	4b2a      	ldr	r3, [pc, #168]	; (80028ec <HAL_RTC_SetAlarm_IT+0x278>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a2a      	ldr	r2, [pc, #168]	; (80028f0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8002846:	fba2 2303 	umull	r2, r3, r2, r3
 800284a:	0adb      	lsrs	r3, r3, #11
 800284c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002850:	fb02 f303 	mul.w	r3, r2, r3
 8002854:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	1e5a      	subs	r2, r3, #1
 800285a:	617a      	str	r2, [r7, #20]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10b      	bne.n	8002878 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	22ff      	movs	r2, #255	; 0xff
 8002866:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2203      	movs	r2, #3
 800286c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e035      	b.n	80028e4 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0e7      	beq.n	8002856 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	69fa      	ldr	r2, [r7, #28]
 800288c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a4:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028b4:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80028b6:	4b0f      	ldr	r3, [pc, #60]	; (80028f4 <HAL_RTC_SetAlarm_IT+0x280>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a0e      	ldr	r2, [pc, #56]	; (80028f4 <HAL_RTC_SetAlarm_IT+0x280>)
 80028bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028c0:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80028c2:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <HAL_RTC_SetAlarm_IT+0x280>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	4a0b      	ldr	r2, [pc, #44]	; (80028f4 <HAL_RTC_SetAlarm_IT+0x280>)
 80028c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028cc:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	22ff      	movs	r2, #255	; 0xff
 80028d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2201      	movs	r2, #1
 80028da:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3724      	adds	r7, #36	; 0x24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd90      	pop	{r4, r7, pc}
 80028ec:	20000004 	.word	0x20000004
 80028f0:	10624dd3 	.word	0x10624dd3
 80028f4:	40013c00 	.word	0x40013c00

080028f8 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
  uint32_t subsecondtmpreg = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002914:	d10e      	bne.n	8002934 <HAL_RTC_GetAlarm+0x3c>
  {
    sAlarm->Alarm = RTC_ALARM_A;
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	f44f 7280 	mov.w	r2, #256	; 0x100
 800291c:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	e00d      	b.n	8002950 <HAL_RTC_GetAlarm+0x58>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800293a:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800294a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800294e:	613b      	str	r3, [r7, #16]
  }

  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours      = (uint8_t) ((tmpreg & (RTC_ALRMAR_HT  | RTC_ALRMAR_HU))  >> RTC_ALRMAR_HU_Pos);
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	0c1b      	lsrs	r3, r3, #16
 8002954:	b2db      	uxtb	r3, r3
 8002956:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800295a:	b2da      	uxtb	r2, r3
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes    = (uint8_t) ((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	0a1b      	lsrs	r3, r3, #8
 8002964:	b2db      	uxtb	r3, r3
 8002966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800296a:	b2da      	uxtb	r2, r3
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds    = (uint8_t) ( tmpreg & (RTC_ALRMAR_ST  | RTC_ALRMAR_SU));
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	b2db      	uxtb	r3, r3
 8002974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002978:	b2da      	uxtb	r2, r3
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint8_t) ((tmpreg & RTC_ALRMAR_PM)                     >> RTC_TR_PM_Pos);
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	0d9b      	lsrs	r3, r3, #22
 8002982:	b2db      	uxtb	r3, r3
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	b2da      	uxtb	r2, r3
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	70da      	strb	r2, [r3, #3]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	605a      	str	r2, [r3, #4]
  sAlarm->AlarmDateWeekDay     = (uint8_t) ((tmpreg & (RTC_ALRMAR_DT  | RTC_ALRMAR_DU))  >> RTC_ALRMAR_DU_Pos);
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	0e1b      	lsrs	r3, r3, #24
 8002998:	b2db      	uxtb	r3, r3
 800299a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f883 2020 	strb.w	r2, [r3, #32]
  sAlarm->AlarmDateWeekDaySel  = (uint32_t) (tmpreg & RTC_ALRMAR_WDSEL);
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask            = (uint32_t) (tmpreg & RTC_ALARMMASK_ALL);
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	615a      	str	r2, [r3, #20]

  if (Format == RTC_FORMAT_BIN)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d125      	bne.n	8002a0c <HAL_RTC_GetAlarm+0x114>
  {
    sAlarm->AlarmTime.Hours   = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 f90e 	bl	8002be6 <RTC_Bcd2ToByte>
 80029ca:	4603      	mov	r3, r0
 80029cc:	461a      	mov	r2, r3
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	785b      	ldrb	r3, [r3, #1]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 f905 	bl	8002be6 <RTC_Bcd2ToByte>
 80029dc:	4603      	mov	r3, r0
 80029de:	461a      	mov	r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	789b      	ldrb	r3, [r3, #2]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 f8fc 	bl	8002be6 <RTC_Bcd2ToByte>
 80029ee:	4603      	mov	r3, r0
 80029f0:	461a      	mov	r2, r3
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay  = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 f8f2 	bl	8002be6 <RTC_Bcd2ToByte>
 8002a02:	4603      	mov	r3, r0
 8002a04:	461a      	mov	r2, r3
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	f883 2020 	strb.w	r2, [r3, #32]
  }

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d012      	beq.n	8002a54 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00b      	beq.n	8002a54 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7fe f8b3 	bl	8000ba8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002a52:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d012      	beq.n	8002a88 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00b      	beq.n	8002a88 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f8d4 	bl	8002c1e <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002a86:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002a88:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <HAL_RTC_AlarmIRQHandler+0x88>)
 8002a8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a8e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	775a      	strb	r2, [r3, #29]
}
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40013c00 	.word	0x40013c00

08002aa4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002abe:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ac0:	f7fe fb22 	bl	8001108 <HAL_GetTick>
 8002ac4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002ac6:	e009      	b.n	8002adc <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002ac8:	f7fe fb1e 	bl	8001108 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ad6:	d901      	bls.n	8002adc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e007      	b.n	8002aec <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f003 0320 	and.w	r3, r3, #32
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0ee      	beq.n	8002ac8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002b00:	2300      	movs	r3, #0
 8002b02:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d122      	bne.n	8002b58 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b20:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b22:	f7fe faf1 	bl	8001108 <HAL_GetTick>
 8002b26:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002b28:	e00c      	b.n	8002b44 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b2a:	f7fe faed 	bl	8001108 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b38:	d904      	bls.n	8002b44 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2204      	movs	r2, #4
 8002b3e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d102      	bne.n	8002b58 <RTC_EnterInitMode+0x64>
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d1e8      	bne.n	8002b2a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b084      	sub	sp, #16
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68da      	ldr	r2, [r3, #12]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b7c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 0320 	and.w	r3, r3, #32
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10a      	bne.n	8002ba2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7ff ff89 	bl	8002aa4 <HAL_RTC_WaitForSynchro>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d004      	beq.n	8002ba2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2204      	movs	r2, #4
 8002b9c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8002bba:	e005      	b.n	8002bc8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	3b0a      	subs	r3, #10
 8002bc6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	2b09      	cmp	r3, #9
 8002bcc:	d8f6      	bhi.n	8002bbc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
 8002bd0:	011b      	lsls	r3, r3, #4
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	b2db      	uxtb	r3, r3
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b085      	sub	sp, #20
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	4603      	mov	r3, r0
 8002bee:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	091b      	lsrs	r3, r3, #4
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	0092      	lsls	r2, r2, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
 8002c0e:	4413      	add	r3, r2
 8002c10:	b2db      	uxtb	r3, r3
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e041      	b.n	8002cc8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d106      	bne.n	8002c5e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f839 	bl	8002cd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2202      	movs	r2, #2
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4610      	mov	r0, r2
 8002c72:	f000 f9d7 	bl	8003024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d001      	beq.n	8002cfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e04e      	b.n	8002d9a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0201 	orr.w	r2, r2, #1
 8002d12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a23      	ldr	r2, [pc, #140]	; (8002da8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d022      	beq.n	8002d64 <HAL_TIM_Base_Start_IT+0x80>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d26:	d01d      	beq.n	8002d64 <HAL_TIM_Base_Start_IT+0x80>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a1f      	ldr	r2, [pc, #124]	; (8002dac <HAL_TIM_Base_Start_IT+0xc8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d018      	beq.n	8002d64 <HAL_TIM_Base_Start_IT+0x80>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a1e      	ldr	r2, [pc, #120]	; (8002db0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d013      	beq.n	8002d64 <HAL_TIM_Base_Start_IT+0x80>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a1c      	ldr	r2, [pc, #112]	; (8002db4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d00e      	beq.n	8002d64 <HAL_TIM_Base_Start_IT+0x80>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a1b      	ldr	r2, [pc, #108]	; (8002db8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d009      	beq.n	8002d64 <HAL_TIM_Base_Start_IT+0x80>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a19      	ldr	r2, [pc, #100]	; (8002dbc <HAL_TIM_Base_Start_IT+0xd8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d004      	beq.n	8002d64 <HAL_TIM_Base_Start_IT+0x80>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a18      	ldr	r2, [pc, #96]	; (8002dc0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d111      	bne.n	8002d88 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2b06      	cmp	r3, #6
 8002d74:	d010      	beq.n	8002d98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f042 0201 	orr.w	r2, r2, #1
 8002d84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d86:	e007      	b.n	8002d98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0201 	orr.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40010000 	.word	0x40010000
 8002dac:	40000400 	.word	0x40000400
 8002db0:	40000800 	.word	0x40000800
 8002db4:	40000c00 	.word	0x40000c00
 8002db8:	40010400 	.word	0x40010400
 8002dbc:	40014000 	.word	0x40014000
 8002dc0:	40001800 	.word	0x40001800

08002dc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d122      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d11b      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f06f 0202 	mvn.w	r2, #2
 8002df0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f8ee 	bl	8002fe8 <HAL_TIM_IC_CaptureCallback>
 8002e0c:	e005      	b.n	8002e1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f8e0 	bl	8002fd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f8f1 	bl	8002ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d122      	bne.n	8002e74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d11b      	bne.n	8002e74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f06f 0204 	mvn.w	r2, #4
 8002e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2202      	movs	r2, #2
 8002e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f8c4 	bl	8002fe8 <HAL_TIM_IC_CaptureCallback>
 8002e60:	e005      	b.n	8002e6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f8b6 	bl	8002fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f8c7 	bl	8002ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d122      	bne.n	8002ec8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f003 0308 	and.w	r3, r3, #8
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d11b      	bne.n	8002ec8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f06f 0208 	mvn.w	r2, #8
 8002e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2204      	movs	r2, #4
 8002e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f89a 	bl	8002fe8 <HAL_TIM_IC_CaptureCallback>
 8002eb4:	e005      	b.n	8002ec2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f88c 	bl	8002fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 f89d 	bl	8002ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f003 0310 	and.w	r3, r3, #16
 8002ed2:	2b10      	cmp	r3, #16
 8002ed4:	d122      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f003 0310 	and.w	r3, r3, #16
 8002ee0:	2b10      	cmp	r3, #16
 8002ee2:	d11b      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f06f 0210 	mvn.w	r2, #16
 8002eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2208      	movs	r2, #8
 8002ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f870 	bl	8002fe8 <HAL_TIM_IC_CaptureCallback>
 8002f08:	e005      	b.n	8002f16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f862 	bl	8002fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f873 	bl	8002ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d10e      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d107      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f06f 0201 	mvn.w	r2, #1
 8002f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7fd fe4e 	bl	8000be4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f52:	2b80      	cmp	r3, #128	; 0x80
 8002f54:	d10e      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f60:	2b80      	cmp	r3, #128	; 0x80
 8002f62:	d107      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f902 	bl	8003178 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7e:	2b40      	cmp	r3, #64	; 0x40
 8002f80:	d10e      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8c:	2b40      	cmp	r3, #64	; 0x40
 8002f8e:	d107      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f838 	bl	8003010 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	f003 0320 	and.w	r3, r3, #32
 8002faa:	2b20      	cmp	r3, #32
 8002fac:	d10e      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f003 0320 	and.w	r3, r3, #32
 8002fb8:	2b20      	cmp	r3, #32
 8002fba:	d107      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f06f 0220 	mvn.w	r2, #32
 8002fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f8cc 	bl	8003164 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fcc:	bf00      	nop
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a40      	ldr	r2, [pc, #256]	; (8003138 <TIM_Base_SetConfig+0x114>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d013      	beq.n	8003064 <TIM_Base_SetConfig+0x40>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003042:	d00f      	beq.n	8003064 <TIM_Base_SetConfig+0x40>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a3d      	ldr	r2, [pc, #244]	; (800313c <TIM_Base_SetConfig+0x118>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d00b      	beq.n	8003064 <TIM_Base_SetConfig+0x40>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a3c      	ldr	r2, [pc, #240]	; (8003140 <TIM_Base_SetConfig+0x11c>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d007      	beq.n	8003064 <TIM_Base_SetConfig+0x40>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a3b      	ldr	r2, [pc, #236]	; (8003144 <TIM_Base_SetConfig+0x120>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d003      	beq.n	8003064 <TIM_Base_SetConfig+0x40>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a3a      	ldr	r2, [pc, #232]	; (8003148 <TIM_Base_SetConfig+0x124>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d108      	bne.n	8003076 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800306a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	4313      	orrs	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a2f      	ldr	r2, [pc, #188]	; (8003138 <TIM_Base_SetConfig+0x114>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d02b      	beq.n	80030d6 <TIM_Base_SetConfig+0xb2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003084:	d027      	beq.n	80030d6 <TIM_Base_SetConfig+0xb2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a2c      	ldr	r2, [pc, #176]	; (800313c <TIM_Base_SetConfig+0x118>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d023      	beq.n	80030d6 <TIM_Base_SetConfig+0xb2>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a2b      	ldr	r2, [pc, #172]	; (8003140 <TIM_Base_SetConfig+0x11c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d01f      	beq.n	80030d6 <TIM_Base_SetConfig+0xb2>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a2a      	ldr	r2, [pc, #168]	; (8003144 <TIM_Base_SetConfig+0x120>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d01b      	beq.n	80030d6 <TIM_Base_SetConfig+0xb2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a29      	ldr	r2, [pc, #164]	; (8003148 <TIM_Base_SetConfig+0x124>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d017      	beq.n	80030d6 <TIM_Base_SetConfig+0xb2>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a28      	ldr	r2, [pc, #160]	; (800314c <TIM_Base_SetConfig+0x128>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d013      	beq.n	80030d6 <TIM_Base_SetConfig+0xb2>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a27      	ldr	r2, [pc, #156]	; (8003150 <TIM_Base_SetConfig+0x12c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d00f      	beq.n	80030d6 <TIM_Base_SetConfig+0xb2>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a26      	ldr	r2, [pc, #152]	; (8003154 <TIM_Base_SetConfig+0x130>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d00b      	beq.n	80030d6 <TIM_Base_SetConfig+0xb2>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a25      	ldr	r2, [pc, #148]	; (8003158 <TIM_Base_SetConfig+0x134>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d007      	beq.n	80030d6 <TIM_Base_SetConfig+0xb2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a24      	ldr	r2, [pc, #144]	; (800315c <TIM_Base_SetConfig+0x138>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d003      	beq.n	80030d6 <TIM_Base_SetConfig+0xb2>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a23      	ldr	r2, [pc, #140]	; (8003160 <TIM_Base_SetConfig+0x13c>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d108      	bne.n	80030e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a0a      	ldr	r2, [pc, #40]	; (8003138 <TIM_Base_SetConfig+0x114>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d003      	beq.n	800311c <TIM_Base_SetConfig+0xf8>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a0c      	ldr	r2, [pc, #48]	; (8003148 <TIM_Base_SetConfig+0x124>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d103      	bne.n	8003124 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	615a      	str	r2, [r3, #20]
}
 800312a:	bf00      	nop
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40010000 	.word	0x40010000
 800313c:	40000400 	.word	0x40000400
 8003140:	40000800 	.word	0x40000800
 8003144:	40000c00 	.word	0x40000c00
 8003148:	40010400 	.word	0x40010400
 800314c:	40014000 	.word	0x40014000
 8003150:	40014400 	.word	0x40014400
 8003154:	40014800 	.word	0x40014800
 8003158:	40001800 	.word	0x40001800
 800315c:	40001c00 	.word	0x40001c00
 8003160:	40002000 	.word	0x40002000

08003164 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e03f      	b.n	800321e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d106      	bne.n	80031b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7fd fd88 	bl	8000cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2224      	movs	r2, #36	; 0x24
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f929 	bl	8003428 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	695a      	ldr	r2, [r3, #20]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68da      	ldr	r2, [r3, #12]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003204:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b08a      	sub	sp, #40	; 0x28
 800322a:	af02      	add	r7, sp, #8
 800322c:	60f8      	str	r0, [r7, #12]
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	603b      	str	r3, [r7, #0]
 8003232:	4613      	mov	r3, r2
 8003234:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b20      	cmp	r3, #32
 8003244:	d17c      	bne.n	8003340 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d002      	beq.n	8003252 <HAL_UART_Transmit+0x2c>
 800324c:	88fb      	ldrh	r3, [r7, #6]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e075      	b.n	8003342 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800325c:	2b01      	cmp	r3, #1
 800325e:	d101      	bne.n	8003264 <HAL_UART_Transmit+0x3e>
 8003260:	2302      	movs	r3, #2
 8003262:	e06e      	b.n	8003342 <HAL_UART_Transmit+0x11c>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2221      	movs	r2, #33	; 0x21
 8003276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800327a:	f7fd ff45 	bl	8001108 <HAL_GetTick>
 800327e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	88fa      	ldrh	r2, [r7, #6]
 8003284:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	88fa      	ldrh	r2, [r7, #6]
 800328a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003294:	d108      	bne.n	80032a8 <HAL_UART_Transmit+0x82>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d104      	bne.n	80032a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800329e:	2300      	movs	r3, #0
 80032a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	61bb      	str	r3, [r7, #24]
 80032a6:	e003      	b.n	80032b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032ac:	2300      	movs	r3, #0
 80032ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80032b8:	e02a      	b.n	8003310 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2200      	movs	r2, #0
 80032c2:	2180      	movs	r1, #128	; 0x80
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 f840 	bl	800334a <UART_WaitOnFlagUntilTimeout>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e036      	b.n	8003342 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10b      	bne.n	80032f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	461a      	mov	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	3302      	adds	r3, #2
 80032ee:	61bb      	str	r3, [r7, #24]
 80032f0:	e007      	b.n	8003302 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	781a      	ldrb	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	3301      	adds	r3, #1
 8003300:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003306:	b29b      	uxth	r3, r3
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003314:	b29b      	uxth	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1cf      	bne.n	80032ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	2200      	movs	r2, #0
 8003322:	2140      	movs	r1, #64	; 0x40
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 f810 	bl	800334a <UART_WaitOnFlagUntilTimeout>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e006      	b.n	8003342 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2220      	movs	r2, #32
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800333c:	2300      	movs	r3, #0
 800333e:	e000      	b.n	8003342 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003340:	2302      	movs	r3, #2
  }
}
 8003342:	4618      	mov	r0, r3
 8003344:	3720      	adds	r7, #32
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b090      	sub	sp, #64	; 0x40
 800334e:	af00      	add	r7, sp, #0
 8003350:	60f8      	str	r0, [r7, #12]
 8003352:	60b9      	str	r1, [r7, #8]
 8003354:	603b      	str	r3, [r7, #0]
 8003356:	4613      	mov	r3, r2
 8003358:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800335a:	e050      	b.n	80033fe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800335c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800335e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003362:	d04c      	beq.n	80033fe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003366:	2b00      	cmp	r3, #0
 8003368:	d007      	beq.n	800337a <UART_WaitOnFlagUntilTimeout+0x30>
 800336a:	f7fd fecd 	bl	8001108 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003376:	429a      	cmp	r2, r3
 8003378:	d241      	bcs.n	80033fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	330c      	adds	r3, #12
 8003380:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003384:	e853 3f00 	ldrex	r3, [r3]
 8003388:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003390:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	330c      	adds	r3, #12
 8003398:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800339a:	637a      	str	r2, [r7, #52]	; 0x34
 800339c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033a2:	e841 2300 	strex	r3, r2, [r1]
 80033a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1e5      	bne.n	800337a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	3314      	adds	r3, #20
 80033b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	e853 3f00 	ldrex	r3, [r3]
 80033bc:	613b      	str	r3, [r7, #16]
   return(result);
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f023 0301 	bic.w	r3, r3, #1
 80033c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	3314      	adds	r3, #20
 80033cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033ce:	623a      	str	r2, [r7, #32]
 80033d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d2:	69f9      	ldr	r1, [r7, #28]
 80033d4:	6a3a      	ldr	r2, [r7, #32]
 80033d6:	e841 2300 	strex	r3, r2, [r1]
 80033da:	61bb      	str	r3, [r7, #24]
   return(result);
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1e5      	bne.n	80033ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2220      	movs	r2, #32
 80033e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2220      	movs	r2, #32
 80033ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e00f      	b.n	800341e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	4013      	ands	r3, r2
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	429a      	cmp	r2, r3
 800340c:	bf0c      	ite	eq
 800340e:	2301      	moveq	r3, #1
 8003410:	2300      	movne	r3, #0
 8003412:	b2db      	uxtb	r3, r3
 8003414:	461a      	mov	r2, r3
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	429a      	cmp	r2, r3
 800341a:	d09f      	beq.n	800335c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3740      	adds	r7, #64	; 0x40
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800342c:	b0c0      	sub	sp, #256	; 0x100
 800342e:	af00      	add	r7, sp, #0
 8003430:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003444:	68d9      	ldr	r1, [r3, #12]
 8003446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	ea40 0301 	orr.w	r3, r0, r1
 8003450:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	431a      	orrs	r2, r3
 8003460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	431a      	orrs	r2, r3
 8003468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	4313      	orrs	r3, r2
 8003470:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003480:	f021 010c 	bic.w	r1, r1, #12
 8003484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800348e:	430b      	orrs	r3, r1
 8003490:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800349e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a2:	6999      	ldr	r1, [r3, #24]
 80034a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	ea40 0301 	orr.w	r3, r0, r1
 80034ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	4b8f      	ldr	r3, [pc, #572]	; (80036f4 <UART_SetConfig+0x2cc>)
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d005      	beq.n	80034c8 <UART_SetConfig+0xa0>
 80034bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	4b8d      	ldr	r3, [pc, #564]	; (80036f8 <UART_SetConfig+0x2d0>)
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d104      	bne.n	80034d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034c8:	f7fe fd6a 	bl	8001fa0 <HAL_RCC_GetPCLK2Freq>
 80034cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80034d0:	e003      	b.n	80034da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034d2:	f7fe fd51 	bl	8001f78 <HAL_RCC_GetPCLK1Freq>
 80034d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034e4:	f040 810c 	bne.w	8003700 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034ec:	2200      	movs	r2, #0
 80034ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80034f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80034fa:	4622      	mov	r2, r4
 80034fc:	462b      	mov	r3, r5
 80034fe:	1891      	adds	r1, r2, r2
 8003500:	65b9      	str	r1, [r7, #88]	; 0x58
 8003502:	415b      	adcs	r3, r3
 8003504:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003506:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800350a:	4621      	mov	r1, r4
 800350c:	eb12 0801 	adds.w	r8, r2, r1
 8003510:	4629      	mov	r1, r5
 8003512:	eb43 0901 	adc.w	r9, r3, r1
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	f04f 0300 	mov.w	r3, #0
 800351e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003522:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003526:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800352a:	4690      	mov	r8, r2
 800352c:	4699      	mov	r9, r3
 800352e:	4623      	mov	r3, r4
 8003530:	eb18 0303 	adds.w	r3, r8, r3
 8003534:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003538:	462b      	mov	r3, r5
 800353a:	eb49 0303 	adc.w	r3, r9, r3
 800353e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800354e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003552:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003556:	460b      	mov	r3, r1
 8003558:	18db      	adds	r3, r3, r3
 800355a:	653b      	str	r3, [r7, #80]	; 0x50
 800355c:	4613      	mov	r3, r2
 800355e:	eb42 0303 	adc.w	r3, r2, r3
 8003562:	657b      	str	r3, [r7, #84]	; 0x54
 8003564:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003568:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800356c:	f7fc fee8 	bl	8000340 <__aeabi_uldivmod>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4b61      	ldr	r3, [pc, #388]	; (80036fc <UART_SetConfig+0x2d4>)
 8003576:	fba3 2302 	umull	r2, r3, r3, r2
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	011c      	lsls	r4, r3, #4
 800357e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003582:	2200      	movs	r2, #0
 8003584:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003588:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800358c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003590:	4642      	mov	r2, r8
 8003592:	464b      	mov	r3, r9
 8003594:	1891      	adds	r1, r2, r2
 8003596:	64b9      	str	r1, [r7, #72]	; 0x48
 8003598:	415b      	adcs	r3, r3
 800359a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800359c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80035a0:	4641      	mov	r1, r8
 80035a2:	eb12 0a01 	adds.w	sl, r2, r1
 80035a6:	4649      	mov	r1, r9
 80035a8:	eb43 0b01 	adc.w	fp, r3, r1
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	f04f 0300 	mov.w	r3, #0
 80035b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035c0:	4692      	mov	sl, r2
 80035c2:	469b      	mov	fp, r3
 80035c4:	4643      	mov	r3, r8
 80035c6:	eb1a 0303 	adds.w	r3, sl, r3
 80035ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035ce:	464b      	mov	r3, r9
 80035d0:	eb4b 0303 	adc.w	r3, fp, r3
 80035d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80035e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80035ec:	460b      	mov	r3, r1
 80035ee:	18db      	adds	r3, r3, r3
 80035f0:	643b      	str	r3, [r7, #64]	; 0x40
 80035f2:	4613      	mov	r3, r2
 80035f4:	eb42 0303 	adc.w	r3, r2, r3
 80035f8:	647b      	str	r3, [r7, #68]	; 0x44
 80035fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003602:	f7fc fe9d 	bl	8000340 <__aeabi_uldivmod>
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	4611      	mov	r1, r2
 800360c:	4b3b      	ldr	r3, [pc, #236]	; (80036fc <UART_SetConfig+0x2d4>)
 800360e:	fba3 2301 	umull	r2, r3, r3, r1
 8003612:	095b      	lsrs	r3, r3, #5
 8003614:	2264      	movs	r2, #100	; 0x64
 8003616:	fb02 f303 	mul.w	r3, r2, r3
 800361a:	1acb      	subs	r3, r1, r3
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003622:	4b36      	ldr	r3, [pc, #216]	; (80036fc <UART_SetConfig+0x2d4>)
 8003624:	fba3 2302 	umull	r2, r3, r3, r2
 8003628:	095b      	lsrs	r3, r3, #5
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003630:	441c      	add	r4, r3
 8003632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003636:	2200      	movs	r2, #0
 8003638:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800363c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003640:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003644:	4642      	mov	r2, r8
 8003646:	464b      	mov	r3, r9
 8003648:	1891      	adds	r1, r2, r2
 800364a:	63b9      	str	r1, [r7, #56]	; 0x38
 800364c:	415b      	adcs	r3, r3
 800364e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003650:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003654:	4641      	mov	r1, r8
 8003656:	1851      	adds	r1, r2, r1
 8003658:	6339      	str	r1, [r7, #48]	; 0x30
 800365a:	4649      	mov	r1, r9
 800365c:	414b      	adcs	r3, r1
 800365e:	637b      	str	r3, [r7, #52]	; 0x34
 8003660:	f04f 0200 	mov.w	r2, #0
 8003664:	f04f 0300 	mov.w	r3, #0
 8003668:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800366c:	4659      	mov	r1, fp
 800366e:	00cb      	lsls	r3, r1, #3
 8003670:	4651      	mov	r1, sl
 8003672:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003676:	4651      	mov	r1, sl
 8003678:	00ca      	lsls	r2, r1, #3
 800367a:	4610      	mov	r0, r2
 800367c:	4619      	mov	r1, r3
 800367e:	4603      	mov	r3, r0
 8003680:	4642      	mov	r2, r8
 8003682:	189b      	adds	r3, r3, r2
 8003684:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003688:	464b      	mov	r3, r9
 800368a:	460a      	mov	r2, r1
 800368c:	eb42 0303 	adc.w	r3, r2, r3
 8003690:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80036a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80036a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80036a8:	460b      	mov	r3, r1
 80036aa:	18db      	adds	r3, r3, r3
 80036ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80036ae:	4613      	mov	r3, r2
 80036b0:	eb42 0303 	adc.w	r3, r2, r3
 80036b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80036be:	f7fc fe3f 	bl	8000340 <__aeabi_uldivmod>
 80036c2:	4602      	mov	r2, r0
 80036c4:	460b      	mov	r3, r1
 80036c6:	4b0d      	ldr	r3, [pc, #52]	; (80036fc <UART_SetConfig+0x2d4>)
 80036c8:	fba3 1302 	umull	r1, r3, r3, r2
 80036cc:	095b      	lsrs	r3, r3, #5
 80036ce:	2164      	movs	r1, #100	; 0x64
 80036d0:	fb01 f303 	mul.w	r3, r1, r3
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	3332      	adds	r3, #50	; 0x32
 80036da:	4a08      	ldr	r2, [pc, #32]	; (80036fc <UART_SetConfig+0x2d4>)
 80036dc:	fba2 2303 	umull	r2, r3, r2, r3
 80036e0:	095b      	lsrs	r3, r3, #5
 80036e2:	f003 0207 	and.w	r2, r3, #7
 80036e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4422      	add	r2, r4
 80036ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036f0:	e105      	b.n	80038fe <UART_SetConfig+0x4d6>
 80036f2:	bf00      	nop
 80036f4:	40011000 	.word	0x40011000
 80036f8:	40011400 	.word	0x40011400
 80036fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003700:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003704:	2200      	movs	r2, #0
 8003706:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800370a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800370e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003712:	4642      	mov	r2, r8
 8003714:	464b      	mov	r3, r9
 8003716:	1891      	adds	r1, r2, r2
 8003718:	6239      	str	r1, [r7, #32]
 800371a:	415b      	adcs	r3, r3
 800371c:	627b      	str	r3, [r7, #36]	; 0x24
 800371e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003722:	4641      	mov	r1, r8
 8003724:	1854      	adds	r4, r2, r1
 8003726:	4649      	mov	r1, r9
 8003728:	eb43 0501 	adc.w	r5, r3, r1
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	f04f 0300 	mov.w	r3, #0
 8003734:	00eb      	lsls	r3, r5, #3
 8003736:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800373a:	00e2      	lsls	r2, r4, #3
 800373c:	4614      	mov	r4, r2
 800373e:	461d      	mov	r5, r3
 8003740:	4643      	mov	r3, r8
 8003742:	18e3      	adds	r3, r4, r3
 8003744:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003748:	464b      	mov	r3, r9
 800374a:	eb45 0303 	adc.w	r3, r5, r3
 800374e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800375e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003762:	f04f 0200 	mov.w	r2, #0
 8003766:	f04f 0300 	mov.w	r3, #0
 800376a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800376e:	4629      	mov	r1, r5
 8003770:	008b      	lsls	r3, r1, #2
 8003772:	4621      	mov	r1, r4
 8003774:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003778:	4621      	mov	r1, r4
 800377a:	008a      	lsls	r2, r1, #2
 800377c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003780:	f7fc fdde 	bl	8000340 <__aeabi_uldivmod>
 8003784:	4602      	mov	r2, r0
 8003786:	460b      	mov	r3, r1
 8003788:	4b60      	ldr	r3, [pc, #384]	; (800390c <UART_SetConfig+0x4e4>)
 800378a:	fba3 2302 	umull	r2, r3, r3, r2
 800378e:	095b      	lsrs	r3, r3, #5
 8003790:	011c      	lsls	r4, r3, #4
 8003792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003796:	2200      	movs	r2, #0
 8003798:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800379c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80037a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80037a4:	4642      	mov	r2, r8
 80037a6:	464b      	mov	r3, r9
 80037a8:	1891      	adds	r1, r2, r2
 80037aa:	61b9      	str	r1, [r7, #24]
 80037ac:	415b      	adcs	r3, r3
 80037ae:	61fb      	str	r3, [r7, #28]
 80037b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037b4:	4641      	mov	r1, r8
 80037b6:	1851      	adds	r1, r2, r1
 80037b8:	6139      	str	r1, [r7, #16]
 80037ba:	4649      	mov	r1, r9
 80037bc:	414b      	adcs	r3, r1
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037cc:	4659      	mov	r1, fp
 80037ce:	00cb      	lsls	r3, r1, #3
 80037d0:	4651      	mov	r1, sl
 80037d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037d6:	4651      	mov	r1, sl
 80037d8:	00ca      	lsls	r2, r1, #3
 80037da:	4610      	mov	r0, r2
 80037dc:	4619      	mov	r1, r3
 80037de:	4603      	mov	r3, r0
 80037e0:	4642      	mov	r2, r8
 80037e2:	189b      	adds	r3, r3, r2
 80037e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037e8:	464b      	mov	r3, r9
 80037ea:	460a      	mov	r2, r1
 80037ec:	eb42 0303 	adc.w	r3, r2, r3
 80037f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80037fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003800:	f04f 0200 	mov.w	r2, #0
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800380c:	4649      	mov	r1, r9
 800380e:	008b      	lsls	r3, r1, #2
 8003810:	4641      	mov	r1, r8
 8003812:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003816:	4641      	mov	r1, r8
 8003818:	008a      	lsls	r2, r1, #2
 800381a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800381e:	f7fc fd8f 	bl	8000340 <__aeabi_uldivmod>
 8003822:	4602      	mov	r2, r0
 8003824:	460b      	mov	r3, r1
 8003826:	4b39      	ldr	r3, [pc, #228]	; (800390c <UART_SetConfig+0x4e4>)
 8003828:	fba3 1302 	umull	r1, r3, r3, r2
 800382c:	095b      	lsrs	r3, r3, #5
 800382e:	2164      	movs	r1, #100	; 0x64
 8003830:	fb01 f303 	mul.w	r3, r1, r3
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	3332      	adds	r3, #50	; 0x32
 800383a:	4a34      	ldr	r2, [pc, #208]	; (800390c <UART_SetConfig+0x4e4>)
 800383c:	fba2 2303 	umull	r2, r3, r2, r3
 8003840:	095b      	lsrs	r3, r3, #5
 8003842:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003846:	441c      	add	r4, r3
 8003848:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800384c:	2200      	movs	r2, #0
 800384e:	673b      	str	r3, [r7, #112]	; 0x70
 8003850:	677a      	str	r2, [r7, #116]	; 0x74
 8003852:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003856:	4642      	mov	r2, r8
 8003858:	464b      	mov	r3, r9
 800385a:	1891      	adds	r1, r2, r2
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	415b      	adcs	r3, r3
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003866:	4641      	mov	r1, r8
 8003868:	1851      	adds	r1, r2, r1
 800386a:	6039      	str	r1, [r7, #0]
 800386c:	4649      	mov	r1, r9
 800386e:	414b      	adcs	r3, r1
 8003870:	607b      	str	r3, [r7, #4]
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800387e:	4659      	mov	r1, fp
 8003880:	00cb      	lsls	r3, r1, #3
 8003882:	4651      	mov	r1, sl
 8003884:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003888:	4651      	mov	r1, sl
 800388a:	00ca      	lsls	r2, r1, #3
 800388c:	4610      	mov	r0, r2
 800388e:	4619      	mov	r1, r3
 8003890:	4603      	mov	r3, r0
 8003892:	4642      	mov	r2, r8
 8003894:	189b      	adds	r3, r3, r2
 8003896:	66bb      	str	r3, [r7, #104]	; 0x68
 8003898:	464b      	mov	r3, r9
 800389a:	460a      	mov	r2, r1
 800389c:	eb42 0303 	adc.w	r3, r2, r3
 80038a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	663b      	str	r3, [r7, #96]	; 0x60
 80038ac:	667a      	str	r2, [r7, #100]	; 0x64
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	f04f 0300 	mov.w	r3, #0
 80038b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80038ba:	4649      	mov	r1, r9
 80038bc:	008b      	lsls	r3, r1, #2
 80038be:	4641      	mov	r1, r8
 80038c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038c4:	4641      	mov	r1, r8
 80038c6:	008a      	lsls	r2, r1, #2
 80038c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80038cc:	f7fc fd38 	bl	8000340 <__aeabi_uldivmod>
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	4b0d      	ldr	r3, [pc, #52]	; (800390c <UART_SetConfig+0x4e4>)
 80038d6:	fba3 1302 	umull	r1, r3, r3, r2
 80038da:	095b      	lsrs	r3, r3, #5
 80038dc:	2164      	movs	r1, #100	; 0x64
 80038de:	fb01 f303 	mul.w	r3, r1, r3
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	3332      	adds	r3, #50	; 0x32
 80038e8:	4a08      	ldr	r2, [pc, #32]	; (800390c <UART_SetConfig+0x4e4>)
 80038ea:	fba2 2303 	umull	r2, r3, r2, r3
 80038ee:	095b      	lsrs	r3, r3, #5
 80038f0:	f003 020f 	and.w	r2, r3, #15
 80038f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4422      	add	r2, r4
 80038fc:	609a      	str	r2, [r3, #8]
}
 80038fe:	bf00      	nop
 8003900:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003904:	46bd      	mov	sp, r7
 8003906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800390a:	bf00      	nop
 800390c:	51eb851f 	.word	0x51eb851f

08003910 <ctime>:
 8003910:	b508      	push	{r3, lr}
 8003912:	f000 f82f 	bl	8003974 <localtime>
 8003916:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800391a:	f000 bf55 	b.w	80047c8 <asctime>
	...

08003920 <__errno>:
 8003920:	4b01      	ldr	r3, [pc, #4]	; (8003928 <__errno+0x8>)
 8003922:	6818      	ldr	r0, [r3, #0]
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	20000010 	.word	0x20000010

0800392c <__libc_init_array>:
 800392c:	b570      	push	{r4, r5, r6, lr}
 800392e:	4d0d      	ldr	r5, [pc, #52]	; (8003964 <__libc_init_array+0x38>)
 8003930:	4c0d      	ldr	r4, [pc, #52]	; (8003968 <__libc_init_array+0x3c>)
 8003932:	1b64      	subs	r4, r4, r5
 8003934:	10a4      	asrs	r4, r4, #2
 8003936:	2600      	movs	r6, #0
 8003938:	42a6      	cmp	r6, r4
 800393a:	d109      	bne.n	8003950 <__libc_init_array+0x24>
 800393c:	4d0b      	ldr	r5, [pc, #44]	; (800396c <__libc_init_array+0x40>)
 800393e:	4c0c      	ldr	r4, [pc, #48]	; (8003970 <__libc_init_array+0x44>)
 8003940:	f002 feaa 	bl	8006698 <_init>
 8003944:	1b64      	subs	r4, r4, r5
 8003946:	10a4      	asrs	r4, r4, #2
 8003948:	2600      	movs	r6, #0
 800394a:	42a6      	cmp	r6, r4
 800394c:	d105      	bne.n	800395a <__libc_init_array+0x2e>
 800394e:	bd70      	pop	{r4, r5, r6, pc}
 8003950:	f855 3b04 	ldr.w	r3, [r5], #4
 8003954:	4798      	blx	r3
 8003956:	3601      	adds	r6, #1
 8003958:	e7ee      	b.n	8003938 <__libc_init_array+0xc>
 800395a:	f855 3b04 	ldr.w	r3, [r5], #4
 800395e:	4798      	blx	r3
 8003960:	3601      	adds	r6, #1
 8003962:	e7f2      	b.n	800394a <__libc_init_array+0x1e>
 8003964:	08006b80 	.word	0x08006b80
 8003968:	08006b80 	.word	0x08006b80
 800396c:	08006b80 	.word	0x08006b80
 8003970:	08006b84 	.word	0x08006b84

08003974 <localtime>:
 8003974:	b538      	push	{r3, r4, r5, lr}
 8003976:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <localtime+0x30>)
 8003978:	681d      	ldr	r5, [r3, #0]
 800397a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800397c:	4604      	mov	r4, r0
 800397e:	b953      	cbnz	r3, 8003996 <localtime+0x22>
 8003980:	2024      	movs	r0, #36	; 0x24
 8003982:	f000 f909 	bl	8003b98 <malloc>
 8003986:	4602      	mov	r2, r0
 8003988:	63e8      	str	r0, [r5, #60]	; 0x3c
 800398a:	b920      	cbnz	r0, 8003996 <localtime+0x22>
 800398c:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <localtime+0x34>)
 800398e:	4807      	ldr	r0, [pc, #28]	; (80039ac <localtime+0x38>)
 8003990:	2132      	movs	r1, #50	; 0x32
 8003992:	f000 ff61 	bl	8004858 <__assert_func>
 8003996:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8003998:	4620      	mov	r0, r4
 800399a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800399e:	f000 b807 	b.w	80039b0 <localtime_r>
 80039a2:	bf00      	nop
 80039a4:	20000010 	.word	0x20000010
 80039a8:	08006764 	.word	0x08006764
 80039ac:	0800677b 	.word	0x0800677b

080039b0 <localtime_r>:
 80039b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80039b4:	4680      	mov	r8, r0
 80039b6:	9101      	str	r1, [sp, #4]
 80039b8:	f001 f8cc 	bl	8004b54 <__gettzinfo>
 80039bc:	9901      	ldr	r1, [sp, #4]
 80039be:	4605      	mov	r5, r0
 80039c0:	4640      	mov	r0, r8
 80039c2:	f001 f8cb 	bl	8004b5c <gmtime_r>
 80039c6:	6943      	ldr	r3, [r0, #20]
 80039c8:	0799      	lsls	r1, r3, #30
 80039ca:	4604      	mov	r4, r0
 80039cc:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 80039d0:	d105      	bne.n	80039de <localtime_r+0x2e>
 80039d2:	2264      	movs	r2, #100	; 0x64
 80039d4:	fb97 f3f2 	sdiv	r3, r7, r2
 80039d8:	fb02 7313 	mls	r3, r2, r3, r7
 80039dc:	bb73      	cbnz	r3, 8003a3c <localtime_r+0x8c>
 80039de:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80039e2:	fb97 f6f3 	sdiv	r6, r7, r3
 80039e6:	fb03 7616 	mls	r6, r3, r6, r7
 80039ea:	fab6 f386 	clz	r3, r6
 80039ee:	095b      	lsrs	r3, r3, #5
 80039f0:	4e67      	ldr	r6, [pc, #412]	; (8003b90 <localtime_r+0x1e0>)
 80039f2:	2230      	movs	r2, #48	; 0x30
 80039f4:	fb02 6603 	mla	r6, r2, r3, r6
 80039f8:	f000 fd54 	bl	80044a4 <__tz_lock>
 80039fc:	f000 fd5e 	bl	80044bc <_tzset_unlocked>
 8003a00:	4b64      	ldr	r3, [pc, #400]	; (8003b94 <localtime_r+0x1e4>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	b34b      	cbz	r3, 8003a5a <localtime_r+0xaa>
 8003a06:	686b      	ldr	r3, [r5, #4]
 8003a08:	42bb      	cmp	r3, r7
 8003a0a:	d119      	bne.n	8003a40 <localtime_r+0x90>
 8003a0c:	682f      	ldr	r7, [r5, #0]
 8003a0e:	e9d8 2300 	ldrd	r2, r3, [r8]
 8003a12:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8003a16:	b9df      	cbnz	r7, 8003a50 <localtime_r+0xa0>
 8003a18:	4282      	cmp	r2, r0
 8003a1a:	eb73 0101 	sbcs.w	r1, r3, r1
 8003a1e:	da23      	bge.n	8003a68 <localtime_r+0xb8>
 8003a20:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8003a24:	4282      	cmp	r2, r0
 8003a26:	eb73 0701 	sbcs.w	r7, r3, r1
 8003a2a:	bfb4      	ite	lt
 8003a2c:	2701      	movlt	r7, #1
 8003a2e:	2700      	movge	r7, #0
 8003a30:	4282      	cmp	r2, r0
 8003a32:	418b      	sbcs	r3, r1
 8003a34:	6227      	str	r7, [r4, #32]
 8003a36:	db19      	blt.n	8003a6c <localtime_r+0xbc>
 8003a38:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003a3a:	e018      	b.n	8003a6e <localtime_r+0xbe>
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e7d7      	b.n	80039f0 <localtime_r+0x40>
 8003a40:	4638      	mov	r0, r7
 8003a42:	f000 fc85 	bl	8004350 <__tzcalc_limits>
 8003a46:	2800      	cmp	r0, #0
 8003a48:	d1e0      	bne.n	8003a0c <localtime_r+0x5c>
 8003a4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a4e:	e004      	b.n	8003a5a <localtime_r+0xaa>
 8003a50:	4282      	cmp	r2, r0
 8003a52:	eb73 0101 	sbcs.w	r1, r3, r1
 8003a56:	da02      	bge.n	8003a5e <localtime_r+0xae>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	6223      	str	r3, [r4, #32]
 8003a5c:	e7ec      	b.n	8003a38 <localtime_r+0x88>
 8003a5e:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8003a62:	4282      	cmp	r2, r0
 8003a64:	418b      	sbcs	r3, r1
 8003a66:	daf7      	bge.n	8003a58 <localtime_r+0xa8>
 8003a68:	2301      	movs	r3, #1
 8003a6a:	6223      	str	r3, [r4, #32]
 8003a6c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8003a6e:	6861      	ldr	r1, [r4, #4]
 8003a70:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8003a74:	203c      	movs	r0, #60	; 0x3c
 8003a76:	fb93 f5f2 	sdiv	r5, r3, r2
 8003a7a:	fb02 3315 	mls	r3, r2, r5, r3
 8003a7e:	fb93 f2f0 	sdiv	r2, r3, r0
 8003a82:	fb00 3012 	mls	r0, r0, r2, r3
 8003a86:	6823      	ldr	r3, [r4, #0]
 8003a88:	1a89      	subs	r1, r1, r2
 8003a8a:	68a2      	ldr	r2, [r4, #8]
 8003a8c:	6061      	str	r1, [r4, #4]
 8003a8e:	1a1b      	subs	r3, r3, r0
 8003a90:	1b52      	subs	r2, r2, r5
 8003a92:	2b3b      	cmp	r3, #59	; 0x3b
 8003a94:	6023      	str	r3, [r4, #0]
 8003a96:	60a2      	str	r2, [r4, #8]
 8003a98:	dd35      	ble.n	8003b06 <localtime_r+0x156>
 8003a9a:	3101      	adds	r1, #1
 8003a9c:	6061      	str	r1, [r4, #4]
 8003a9e:	3b3c      	subs	r3, #60	; 0x3c
 8003aa0:	6023      	str	r3, [r4, #0]
 8003aa2:	6863      	ldr	r3, [r4, #4]
 8003aa4:	2b3b      	cmp	r3, #59	; 0x3b
 8003aa6:	dd34      	ble.n	8003b12 <localtime_r+0x162>
 8003aa8:	3201      	adds	r2, #1
 8003aaa:	60a2      	str	r2, [r4, #8]
 8003aac:	3b3c      	subs	r3, #60	; 0x3c
 8003aae:	6063      	str	r3, [r4, #4]
 8003ab0:	68a3      	ldr	r3, [r4, #8]
 8003ab2:	2b17      	cmp	r3, #23
 8003ab4:	dd33      	ble.n	8003b1e <localtime_r+0x16e>
 8003ab6:	69e2      	ldr	r2, [r4, #28]
 8003ab8:	3201      	adds	r2, #1
 8003aba:	61e2      	str	r2, [r4, #28]
 8003abc:	69a2      	ldr	r2, [r4, #24]
 8003abe:	3201      	adds	r2, #1
 8003ac0:	2a06      	cmp	r2, #6
 8003ac2:	bfc8      	it	gt
 8003ac4:	2200      	movgt	r2, #0
 8003ac6:	61a2      	str	r2, [r4, #24]
 8003ac8:	68e2      	ldr	r2, [r4, #12]
 8003aca:	3b18      	subs	r3, #24
 8003acc:	3201      	adds	r2, #1
 8003ace:	60a3      	str	r3, [r4, #8]
 8003ad0:	6923      	ldr	r3, [r4, #16]
 8003ad2:	60e2      	str	r2, [r4, #12]
 8003ad4:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8003ad8:	428a      	cmp	r2, r1
 8003ada:	dd0e      	ble.n	8003afa <localtime_r+0x14a>
 8003adc:	2b0b      	cmp	r3, #11
 8003ade:	eba2 0201 	sub.w	r2, r2, r1
 8003ae2:	60e2      	str	r2, [r4, #12]
 8003ae4:	f103 0201 	add.w	r2, r3, #1
 8003ae8:	bf09      	itett	eq
 8003aea:	6963      	ldreq	r3, [r4, #20]
 8003aec:	6122      	strne	r2, [r4, #16]
 8003aee:	2200      	moveq	r2, #0
 8003af0:	3301      	addeq	r3, #1
 8003af2:	bf02      	ittt	eq
 8003af4:	6122      	streq	r2, [r4, #16]
 8003af6:	6163      	streq	r3, [r4, #20]
 8003af8:	61e2      	streq	r2, [r4, #28]
 8003afa:	f000 fcd9 	bl	80044b0 <__tz_unlock>
 8003afe:	4620      	mov	r0, r4
 8003b00:	b002      	add	sp, #8
 8003b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	dacb      	bge.n	8003aa2 <localtime_r+0xf2>
 8003b0a:	3901      	subs	r1, #1
 8003b0c:	6061      	str	r1, [r4, #4]
 8003b0e:	333c      	adds	r3, #60	; 0x3c
 8003b10:	e7c6      	b.n	8003aa0 <localtime_r+0xf0>
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	dacc      	bge.n	8003ab0 <localtime_r+0x100>
 8003b16:	3a01      	subs	r2, #1
 8003b18:	60a2      	str	r2, [r4, #8]
 8003b1a:	333c      	adds	r3, #60	; 0x3c
 8003b1c:	e7c7      	b.n	8003aae <localtime_r+0xfe>
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	daeb      	bge.n	8003afa <localtime_r+0x14a>
 8003b22:	69e2      	ldr	r2, [r4, #28]
 8003b24:	3a01      	subs	r2, #1
 8003b26:	61e2      	str	r2, [r4, #28]
 8003b28:	69a2      	ldr	r2, [r4, #24]
 8003b2a:	3a01      	subs	r2, #1
 8003b2c:	bf48      	it	mi
 8003b2e:	2206      	movmi	r2, #6
 8003b30:	61a2      	str	r2, [r4, #24]
 8003b32:	68e2      	ldr	r2, [r4, #12]
 8003b34:	3318      	adds	r3, #24
 8003b36:	3a01      	subs	r2, #1
 8003b38:	60e2      	str	r2, [r4, #12]
 8003b3a:	60a3      	str	r3, [r4, #8]
 8003b3c:	2a00      	cmp	r2, #0
 8003b3e:	d1dc      	bne.n	8003afa <localtime_r+0x14a>
 8003b40:	6923      	ldr	r3, [r4, #16]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	d405      	bmi.n	8003b52 <localtime_r+0x1a2>
 8003b46:	6123      	str	r3, [r4, #16]
 8003b48:	6923      	ldr	r3, [r4, #16]
 8003b4a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8003b4e:	60e3      	str	r3, [r4, #12]
 8003b50:	e7d3      	b.n	8003afa <localtime_r+0x14a>
 8003b52:	230b      	movs	r3, #11
 8003b54:	6123      	str	r3, [r4, #16]
 8003b56:	6963      	ldr	r3, [r4, #20]
 8003b58:	1e5a      	subs	r2, r3, #1
 8003b5a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8003b5e:	6162      	str	r2, [r4, #20]
 8003b60:	079a      	lsls	r2, r3, #30
 8003b62:	d105      	bne.n	8003b70 <localtime_r+0x1c0>
 8003b64:	2164      	movs	r1, #100	; 0x64
 8003b66:	fb93 f2f1 	sdiv	r2, r3, r1
 8003b6a:	fb01 3212 	mls	r2, r1, r2, r3
 8003b6e:	b962      	cbnz	r2, 8003b8a <localtime_r+0x1da>
 8003b70:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003b74:	fb93 f1f2 	sdiv	r1, r3, r2
 8003b78:	fb02 3311 	mls	r3, r2, r1, r3
 8003b7c:	fab3 f383 	clz	r3, r3
 8003b80:	095b      	lsrs	r3, r3, #5
 8003b82:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8003b86:	61e3      	str	r3, [r4, #28]
 8003b88:	e7de      	b.n	8003b48 <localtime_r+0x198>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e7f9      	b.n	8003b82 <localtime_r+0x1d2>
 8003b8e:	bf00      	nop
 8003b90:	08006838 	.word	0x08006838
 8003b94:	20000298 	.word	0x20000298

08003b98 <malloc>:
 8003b98:	4b02      	ldr	r3, [pc, #8]	; (8003ba4 <malloc+0xc>)
 8003b9a:	4601      	mov	r1, r0
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	f000 baf1 	b.w	8004184 <_malloc_r>
 8003ba2:	bf00      	nop
 8003ba4:	20000010 	.word	0x20000010

08003ba8 <free>:
 8003ba8:	4b02      	ldr	r3, [pc, #8]	; (8003bb4 <free+0xc>)
 8003baa:	4601      	mov	r1, r0
 8003bac:	6818      	ldr	r0, [r3, #0]
 8003bae:	f000 ba7d 	b.w	80040ac <_free_r>
 8003bb2:	bf00      	nop
 8003bb4:	20000010 	.word	0x20000010

08003bb8 <memset>:
 8003bb8:	4402      	add	r2, r0
 8003bba:	4603      	mov	r3, r0
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d100      	bne.n	8003bc2 <memset+0xa>
 8003bc0:	4770      	bx	lr
 8003bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8003bc6:	e7f9      	b.n	8003bbc <memset+0x4>

08003bc8 <validate_structure>:
 8003bc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bca:	6801      	ldr	r1, [r0, #0]
 8003bcc:	293b      	cmp	r1, #59	; 0x3b
 8003bce:	4604      	mov	r4, r0
 8003bd0:	d911      	bls.n	8003bf6 <validate_structure+0x2e>
 8003bd2:	223c      	movs	r2, #60	; 0x3c
 8003bd4:	4668      	mov	r0, sp
 8003bd6:	f000 fe5d 	bl	8004894 <div>
 8003bda:	9a01      	ldr	r2, [sp, #4]
 8003bdc:	6863      	ldr	r3, [r4, #4]
 8003bde:	9900      	ldr	r1, [sp, #0]
 8003be0:	2a00      	cmp	r2, #0
 8003be2:	440b      	add	r3, r1
 8003be4:	6063      	str	r3, [r4, #4]
 8003be6:	bfbb      	ittet	lt
 8003be8:	323c      	addlt	r2, #60	; 0x3c
 8003bea:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 8003bee:	6022      	strge	r2, [r4, #0]
 8003bf0:	6022      	strlt	r2, [r4, #0]
 8003bf2:	bfb8      	it	lt
 8003bf4:	6063      	strlt	r3, [r4, #4]
 8003bf6:	6861      	ldr	r1, [r4, #4]
 8003bf8:	293b      	cmp	r1, #59	; 0x3b
 8003bfa:	d911      	bls.n	8003c20 <validate_structure+0x58>
 8003bfc:	223c      	movs	r2, #60	; 0x3c
 8003bfe:	4668      	mov	r0, sp
 8003c00:	f000 fe48 	bl	8004894 <div>
 8003c04:	9a01      	ldr	r2, [sp, #4]
 8003c06:	68a3      	ldr	r3, [r4, #8]
 8003c08:	9900      	ldr	r1, [sp, #0]
 8003c0a:	2a00      	cmp	r2, #0
 8003c0c:	440b      	add	r3, r1
 8003c0e:	60a3      	str	r3, [r4, #8]
 8003c10:	bfbb      	ittet	lt
 8003c12:	323c      	addlt	r2, #60	; 0x3c
 8003c14:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 8003c18:	6062      	strge	r2, [r4, #4]
 8003c1a:	6062      	strlt	r2, [r4, #4]
 8003c1c:	bfb8      	it	lt
 8003c1e:	60a3      	strlt	r3, [r4, #8]
 8003c20:	68a1      	ldr	r1, [r4, #8]
 8003c22:	2917      	cmp	r1, #23
 8003c24:	d911      	bls.n	8003c4a <validate_structure+0x82>
 8003c26:	2218      	movs	r2, #24
 8003c28:	4668      	mov	r0, sp
 8003c2a:	f000 fe33 	bl	8004894 <div>
 8003c2e:	9a01      	ldr	r2, [sp, #4]
 8003c30:	68e3      	ldr	r3, [r4, #12]
 8003c32:	9900      	ldr	r1, [sp, #0]
 8003c34:	2a00      	cmp	r2, #0
 8003c36:	440b      	add	r3, r1
 8003c38:	60e3      	str	r3, [r4, #12]
 8003c3a:	bfbb      	ittet	lt
 8003c3c:	3218      	addlt	r2, #24
 8003c3e:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 8003c42:	60a2      	strge	r2, [r4, #8]
 8003c44:	60a2      	strlt	r2, [r4, #8]
 8003c46:	bfb8      	it	lt
 8003c48:	60e3      	strlt	r3, [r4, #12]
 8003c4a:	6921      	ldr	r1, [r4, #16]
 8003c4c:	290b      	cmp	r1, #11
 8003c4e:	d911      	bls.n	8003c74 <validate_structure+0xac>
 8003c50:	220c      	movs	r2, #12
 8003c52:	4668      	mov	r0, sp
 8003c54:	f000 fe1e 	bl	8004894 <div>
 8003c58:	9a01      	ldr	r2, [sp, #4]
 8003c5a:	6963      	ldr	r3, [r4, #20]
 8003c5c:	9900      	ldr	r1, [sp, #0]
 8003c5e:	2a00      	cmp	r2, #0
 8003c60:	440b      	add	r3, r1
 8003c62:	6163      	str	r3, [r4, #20]
 8003c64:	bfbb      	ittet	lt
 8003c66:	320c      	addlt	r2, #12
 8003c68:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 8003c6c:	6122      	strge	r2, [r4, #16]
 8003c6e:	6122      	strlt	r2, [r4, #16]
 8003c70:	bfb8      	it	lt
 8003c72:	6163      	strlt	r3, [r4, #20]
 8003c74:	6963      	ldr	r3, [r4, #20]
 8003c76:	0798      	lsls	r0, r3, #30
 8003c78:	d120      	bne.n	8003cbc <validate_structure+0xf4>
 8003c7a:	2164      	movs	r1, #100	; 0x64
 8003c7c:	fb93 f2f1 	sdiv	r2, r3, r1
 8003c80:	fb01 3212 	mls	r2, r1, r2, r3
 8003c84:	b9e2      	cbnz	r2, 8003cc0 <validate_structure+0xf8>
 8003c86:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8003c8a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003c8e:	fb93 f1f2 	sdiv	r1, r3, r2
 8003c92:	fb02 3311 	mls	r3, r2, r1, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	bf14      	ite	ne
 8003c9a:	231c      	movne	r3, #28
 8003c9c:	231d      	moveq	r3, #29
 8003c9e:	68e2      	ldr	r2, [r4, #12]
 8003ca0:	2a00      	cmp	r2, #0
 8003ca2:	dc0f      	bgt.n	8003cc4 <validate_structure+0xfc>
 8003ca4:	4f33      	ldr	r7, [pc, #204]	; (8003d74 <validate_structure+0x1ac>)
 8003ca6:	260b      	movs	r6, #11
 8003ca8:	2064      	movs	r0, #100	; 0x64
 8003caa:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8003cae:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8003cb2:	f1bc 0f00 	cmp.w	ip, #0
 8003cb6:	dd31      	ble.n	8003d1c <validate_structure+0x154>
 8003cb8:	b003      	add	sp, #12
 8003cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cbc:	231c      	movs	r3, #28
 8003cbe:	e7ee      	b.n	8003c9e <validate_structure+0xd6>
 8003cc0:	231d      	movs	r3, #29
 8003cc2:	e7ec      	b.n	8003c9e <validate_structure+0xd6>
 8003cc4:	4e2b      	ldr	r6, [pc, #172]	; (8003d74 <validate_structure+0x1ac>)
 8003cc6:	2700      	movs	r7, #0
 8003cc8:	2064      	movs	r0, #100	; 0x64
 8003cca:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8003cce:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8003cd2:	2a01      	cmp	r2, #1
 8003cd4:	bf14      	ite	ne
 8003cd6:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 8003cda:	469c      	moveq	ip, r3
 8003cdc:	4561      	cmp	r1, ip
 8003cde:	ddeb      	ble.n	8003cb8 <validate_structure+0xf0>
 8003ce0:	3201      	adds	r2, #1
 8003ce2:	eba1 010c 	sub.w	r1, r1, ip
 8003ce6:	2a0c      	cmp	r2, #12
 8003ce8:	60e1      	str	r1, [r4, #12]
 8003cea:	6122      	str	r2, [r4, #16]
 8003cec:	d1ef      	bne.n	8003cce <validate_structure+0x106>
 8003cee:	6963      	ldr	r3, [r4, #20]
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	0791      	lsls	r1, r2, #30
 8003cf4:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8003cf8:	d137      	bne.n	8003d6a <validate_structure+0x1a2>
 8003cfa:	fb92 f1f0 	sdiv	r1, r2, r0
 8003cfe:	fb00 2211 	mls	r2, r0, r1, r2
 8003d02:	2a00      	cmp	r2, #0
 8003d04:	d133      	bne.n	8003d6e <validate_structure+0x1a6>
 8003d06:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8003d0a:	fb93 f2f5 	sdiv	r2, r3, r5
 8003d0e:	fb05 3312 	mls	r3, r5, r2, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	bf14      	ite	ne
 8003d16:	231c      	movne	r3, #28
 8003d18:	231d      	moveq	r3, #29
 8003d1a:	e7d8      	b.n	8003cce <validate_structure+0x106>
 8003d1c:	6921      	ldr	r1, [r4, #16]
 8003d1e:	3901      	subs	r1, #1
 8003d20:	6121      	str	r1, [r4, #16]
 8003d22:	3101      	adds	r1, #1
 8003d24:	d114      	bne.n	8003d50 <validate_structure+0x188>
 8003d26:	6963      	ldr	r3, [r4, #20]
 8003d28:	1e5a      	subs	r2, r3, #1
 8003d2a:	0791      	lsls	r1, r2, #30
 8003d2c:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8003d30:	d117      	bne.n	8003d62 <validate_structure+0x19a>
 8003d32:	fb92 f1f0 	sdiv	r1, r2, r0
 8003d36:	fb00 2211 	mls	r2, r0, r1, r2
 8003d3a:	b9a2      	cbnz	r2, 8003d66 <validate_structure+0x19e>
 8003d3c:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8003d40:	fb93 f2f5 	sdiv	r2, r3, r5
 8003d44:	fb05 3312 	mls	r3, r5, r2, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	bf14      	ite	ne
 8003d4c:	231c      	movne	r3, #28
 8003d4e:	231d      	moveq	r3, #29
 8003d50:	6922      	ldr	r2, [r4, #16]
 8003d52:	2a01      	cmp	r2, #1
 8003d54:	bf14      	ite	ne
 8003d56:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8003d5a:	461a      	moveq	r2, r3
 8003d5c:	4462      	add	r2, ip
 8003d5e:	60e2      	str	r2, [r4, #12]
 8003d60:	e7a5      	b.n	8003cae <validate_structure+0xe6>
 8003d62:	231c      	movs	r3, #28
 8003d64:	e7f4      	b.n	8003d50 <validate_structure+0x188>
 8003d66:	231d      	movs	r3, #29
 8003d68:	e7f2      	b.n	8003d50 <validate_structure+0x188>
 8003d6a:	231c      	movs	r3, #28
 8003d6c:	e7af      	b.n	8003cce <validate_structure+0x106>
 8003d6e:	231d      	movs	r3, #29
 8003d70:	e7ad      	b.n	8003cce <validate_structure+0x106>
 8003d72:	bf00      	nop
 8003d74:	080067d8 	.word	0x080067d8

08003d78 <mktime>:
 8003d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d7c:	b085      	sub	sp, #20
 8003d7e:	4607      	mov	r7, r0
 8003d80:	f000 fee8 	bl	8004b54 <__gettzinfo>
 8003d84:	4681      	mov	r9, r0
 8003d86:	4638      	mov	r0, r7
 8003d88:	f7ff ff1e 	bl	8003bc8 <validate_structure>
 8003d8c:	e9d7 4000 	ldrd	r4, r0, [r7]
 8003d90:	233c      	movs	r3, #60	; 0x3c
 8003d92:	fb03 4400 	mla	r4, r3, r0, r4
 8003d96:	68b8      	ldr	r0, [r7, #8]
 8003d98:	4abc      	ldr	r2, [pc, #752]	; (800408c <mktime+0x314>)
 8003d9a:	697e      	ldr	r6, [r7, #20]
 8003d9c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003da0:	fb03 4400 	mla	r4, r3, r0, r4
 8003da4:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8003da8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003dac:	3d01      	subs	r5, #1
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	4415      	add	r5, r2
 8003db2:	dd11      	ble.n	8003dd8 <mktime+0x60>
 8003db4:	07b1      	lsls	r1, r6, #30
 8003db6:	d10f      	bne.n	8003dd8 <mktime+0x60>
 8003db8:	2264      	movs	r2, #100	; 0x64
 8003dba:	fb96 f3f2 	sdiv	r3, r6, r2
 8003dbe:	fb02 6313 	mls	r3, r2, r3, r6
 8003dc2:	b943      	cbnz	r3, 8003dd6 <mktime+0x5e>
 8003dc4:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8003dc8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003dcc:	fb93 f1f2 	sdiv	r1, r3, r2
 8003dd0:	fb02 3311 	mls	r3, r2, r1, r3
 8003dd4:	b903      	cbnz	r3, 8003dd8 <mktime+0x60>
 8003dd6:	3501      	adds	r5, #1
 8003dd8:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8003ddc:	3310      	adds	r3, #16
 8003dde:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003de2:	4293      	cmp	r3, r2
 8003de4:	61fd      	str	r5, [r7, #28]
 8003de6:	f200 815d 	bhi.w	80040a4 <mktime+0x32c>
 8003dea:	2e46      	cmp	r6, #70	; 0x46
 8003dec:	dd71      	ble.n	8003ed2 <mktime+0x15a>
 8003dee:	2346      	movs	r3, #70	; 0x46
 8003df0:	f240 1c6d 	movw	ip, #365	; 0x16d
 8003df4:	2164      	movs	r1, #100	; 0x64
 8003df6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003dfa:	079a      	lsls	r2, r3, #30
 8003dfc:	d163      	bne.n	8003ec6 <mktime+0x14e>
 8003dfe:	fb93 f2f1 	sdiv	r2, r3, r1
 8003e02:	fb01 3212 	mls	r2, r1, r2, r3
 8003e06:	2a00      	cmp	r2, #0
 8003e08:	d160      	bne.n	8003ecc <mktime+0x154>
 8003e0a:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8003e0e:	fb92 fef0 	sdiv	lr, r2, r0
 8003e12:	fb00 221e 	mls	r2, r0, lr, r2
 8003e16:	2a00      	cmp	r2, #0
 8003e18:	bf14      	ite	ne
 8003e1a:	4662      	movne	r2, ip
 8003e1c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8003e20:	3301      	adds	r3, #1
 8003e22:	429e      	cmp	r6, r3
 8003e24:	4415      	add	r5, r2
 8003e26:	d1e8      	bne.n	8003dfa <mktime+0x82>
 8003e28:	4b99      	ldr	r3, [pc, #612]	; (8004090 <mktime+0x318>)
 8003e2a:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8003e2e:	fbc5 4803 	smlal	r4, r8, r5, r3
 8003e32:	f000 fb37 	bl	80044a4 <__tz_lock>
 8003e36:	f000 fb41 	bl	80044bc <_tzset_unlocked>
 8003e3a:	4b96      	ldr	r3, [pc, #600]	; (8004094 <mktime+0x31c>)
 8003e3c:	f8d3 b000 	ldr.w	fp, [r3]
 8003e40:	f1bb 0f00 	cmp.w	fp, #0
 8003e44:	d039      	beq.n	8003eba <mktime+0x142>
 8003e46:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8003e4a:	6978      	ldr	r0, [r7, #20]
 8003e4c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003e50:	f1bb 0f01 	cmp.w	fp, #1
 8003e54:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8003e58:	46da      	mov	sl, fp
 8003e5a:	bfa8      	it	ge
 8003e5c:	f04f 0a01 	movge.w	sl, #1
 8003e60:	4283      	cmp	r3, r0
 8003e62:	d178      	bne.n	8003f56 <mktime+0x1de>
 8003e64:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 8003e68:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8003e6c:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 8003e70:	1a5b      	subs	r3, r3, r1
 8003e72:	9302      	str	r3, [sp, #8]
 8003e74:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 8003e78:	9303      	str	r3, [sp, #12]
 8003e7a:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 8003e7e:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8003e82:	9301      	str	r3, [sp, #4]
 8003e84:	ebb3 0c02 	subs.w	ip, r3, r2
 8003e88:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 8003e8c:	4564      	cmp	r4, ip
 8003e8e:	eb78 0300 	sbcs.w	r3, r8, r0
 8003e92:	da66      	bge.n	8003f62 <mktime+0x1ea>
 8003e94:	f8d9 3000 	ldr.w	r3, [r9]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d06f      	beq.n	8003f7c <mktime+0x204>
 8003e9c:	9b02      	ldr	r3, [sp, #8]
 8003e9e:	429c      	cmp	r4, r3
 8003ea0:	9b03      	ldr	r3, [sp, #12]
 8003ea2:	eb78 0303 	sbcs.w	r3, r8, r3
 8003ea6:	db03      	blt.n	8003eb0 <mktime+0x138>
 8003ea8:	4564      	cmp	r4, ip
 8003eaa:	eb78 0300 	sbcs.w	r3, r8, r0
 8003eae:	db6b      	blt.n	8003f88 <mktime+0x210>
 8003eb0:	f1bb 0f00 	cmp.w	fp, #0
 8003eb4:	f04f 0b00 	mov.w	fp, #0
 8003eb8:	da6b      	bge.n	8003f92 <mktime+0x21a>
 8003eba:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8003ebe:	190c      	adds	r4, r1, r4
 8003ec0:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8003ec4:	e0a9      	b.n	800401a <mktime+0x2a2>
 8003ec6:	f240 126d 	movw	r2, #365	; 0x16d
 8003eca:	e7a9      	b.n	8003e20 <mktime+0xa8>
 8003ecc:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8003ed0:	e7a6      	b.n	8003e20 <mktime+0xa8>
 8003ed2:	d0a9      	beq.n	8003e28 <mktime+0xb0>
 8003ed4:	2345      	movs	r3, #69	; 0x45
 8003ed6:	f240 1c6d 	movw	ip, #365	; 0x16d
 8003eda:	2164      	movs	r1, #100	; 0x64
 8003edc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003ee0:	e012      	b.n	8003f08 <mktime+0x190>
 8003ee2:	bb62      	cbnz	r2, 8003f3e <mktime+0x1c6>
 8003ee4:	fb93 f2f1 	sdiv	r2, r3, r1
 8003ee8:	fb01 3212 	mls	r2, r1, r2, r3
 8003eec:	bb52      	cbnz	r2, 8003f44 <mktime+0x1cc>
 8003eee:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8003ef2:	fb92 fef0 	sdiv	lr, r2, r0
 8003ef6:	fb00 221e 	mls	r2, r0, lr, r2
 8003efa:	2a00      	cmp	r2, #0
 8003efc:	bf14      	ite	ne
 8003efe:	4662      	movne	r2, ip
 8003f00:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8003f04:	1aad      	subs	r5, r5, r2
 8003f06:	3b01      	subs	r3, #1
 8003f08:	429e      	cmp	r6, r3
 8003f0a:	f003 0203 	and.w	r2, r3, #3
 8003f0e:	dbe8      	blt.n	8003ee2 <mktime+0x16a>
 8003f10:	b9da      	cbnz	r2, 8003f4a <mktime+0x1d2>
 8003f12:	2264      	movs	r2, #100	; 0x64
 8003f14:	fb96 f3f2 	sdiv	r3, r6, r2
 8003f18:	fb02 6313 	mls	r3, r2, r3, r6
 8003f1c:	b9c3      	cbnz	r3, 8003f50 <mktime+0x1d8>
 8003f1e:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8003f22:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003f26:	fb93 f1f2 	sdiv	r1, r3, r2
 8003f2a:	fb02 3311 	mls	r3, r2, r1, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f240 136d 	movw	r3, #365	; 0x16d
 8003f34:	bf08      	it	eq
 8003f36:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8003f3a:	1aed      	subs	r5, r5, r3
 8003f3c:	e774      	b.n	8003e28 <mktime+0xb0>
 8003f3e:	f240 126d 	movw	r2, #365	; 0x16d
 8003f42:	e7df      	b.n	8003f04 <mktime+0x18c>
 8003f44:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8003f48:	e7dc      	b.n	8003f04 <mktime+0x18c>
 8003f4a:	f240 136d 	movw	r3, #365	; 0x16d
 8003f4e:	e7f4      	b.n	8003f3a <mktime+0x1c2>
 8003f50:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8003f54:	e7f1      	b.n	8003f3a <mktime+0x1c2>
 8003f56:	f000 f9fb 	bl	8004350 <__tzcalc_limits>
 8003f5a:	2800      	cmp	r0, #0
 8003f5c:	d182      	bne.n	8003e64 <mktime+0xec>
 8003f5e:	46d3      	mov	fp, sl
 8003f60:	e050      	b.n	8004004 <mktime+0x28c>
 8003f62:	9b01      	ldr	r3, [sp, #4]
 8003f64:	1a5b      	subs	r3, r3, r1
 8003f66:	9301      	str	r3, [sp, #4]
 8003f68:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8003f6c:	eb6e 0e03 	sbc.w	lr, lr, r3
 8003f70:	9b01      	ldr	r3, [sp, #4]
 8003f72:	429c      	cmp	r4, r3
 8003f74:	eb78 030e 	sbcs.w	r3, r8, lr
 8003f78:	dbf1      	blt.n	8003f5e <mktime+0x1e6>
 8003f7a:	e78b      	b.n	8003e94 <mktime+0x11c>
 8003f7c:	9b02      	ldr	r3, [sp, #8]
 8003f7e:	429c      	cmp	r4, r3
 8003f80:	9b03      	ldr	r3, [sp, #12]
 8003f82:	eb78 0303 	sbcs.w	r3, r8, r3
 8003f86:	db8f      	blt.n	8003ea8 <mktime+0x130>
 8003f88:	f1bb 0f00 	cmp.w	fp, #0
 8003f8c:	db3e      	blt.n	800400c <mktime+0x294>
 8003f8e:	f04f 0b01 	mov.w	fp, #1
 8003f92:	ea8a 0a0b 	eor.w	sl, sl, fp
 8003f96:	f1ba 0f01 	cmp.w	sl, #1
 8003f9a:	d133      	bne.n	8004004 <mktime+0x28c>
 8003f9c:	f1bb 0f00 	cmp.w	fp, #0
 8003fa0:	d04e      	beq.n	8004040 <mktime+0x2c8>
 8003fa2:	1a52      	subs	r2, r2, r1
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8003faa:	4413      	add	r3, r2
 8003fac:	1914      	adds	r4, r2, r4
 8003fae:	603b      	str	r3, [r7, #0]
 8003fb0:	4638      	mov	r0, r7
 8003fb2:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 8003fb6:	f7ff fe07 	bl	8003bc8 <validate_structure>
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	ebb2 020a 	subs.w	r2, r2, sl
 8003fc0:	d020      	beq.n	8004004 <mktime+0x28c>
 8003fc2:	2a01      	cmp	r2, #1
 8003fc4:	dc3e      	bgt.n	8004044 <mktime+0x2cc>
 8003fc6:	1c90      	adds	r0, r2, #2
 8003fc8:	bfd8      	it	le
 8003fca:	2201      	movle	r2, #1
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	18d3      	adds	r3, r2, r3
 8003fd0:	4415      	add	r5, r2
 8003fd2:	d540      	bpl.n	8004056 <mktime+0x2de>
 8003fd4:	1e73      	subs	r3, r6, #1
 8003fd6:	0799      	lsls	r1, r3, #30
 8003fd8:	d137      	bne.n	800404a <mktime+0x2d2>
 8003fda:	2264      	movs	r2, #100	; 0x64
 8003fdc:	fb93 f1f2 	sdiv	r1, r3, r2
 8003fe0:	fb02 3311 	mls	r3, r2, r1, r3
 8003fe4:	bba3      	cbnz	r3, 8004050 <mktime+0x2d8>
 8003fe6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003fea:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8003fee:	fb96 f2f3 	sdiv	r2, r6, r3
 8003ff2:	fb03 6612 	mls	r6, r3, r2, r6
 8003ff6:	2e00      	cmp	r6, #0
 8003ff8:	f240 136d 	movw	r3, #365	; 0x16d
 8003ffc:	bf18      	it	ne
 8003ffe:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8004002:	61fb      	str	r3, [r7, #28]
 8004004:	f1bb 0f01 	cmp.w	fp, #1
 8004008:	f47f af57 	bne.w	8003eba <mktime+0x142>
 800400c:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8004010:	190c      	adds	r4, r1, r4
 8004012:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8004016:	f04f 0b01 	mov.w	fp, #1
 800401a:	f000 fa49 	bl	80044b0 <__tz_unlock>
 800401e:	3504      	adds	r5, #4
 8004020:	2307      	movs	r3, #7
 8004022:	fb95 f3f3 	sdiv	r3, r5, r3
 8004026:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800402a:	1aed      	subs	r5, r5, r3
 800402c:	bf48      	it	mi
 800402e:	3507      	addmi	r5, #7
 8004030:	f8c7 b020 	str.w	fp, [r7, #32]
 8004034:	61bd      	str	r5, [r7, #24]
 8004036:	4620      	mov	r0, r4
 8004038:	4641      	mov	r1, r8
 800403a:	b005      	add	sp, #20
 800403c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004040:	1a8a      	subs	r2, r1, r2
 8004042:	e7af      	b.n	8003fa4 <mktime+0x22c>
 8004044:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004048:	e7c0      	b.n	8003fcc <mktime+0x254>
 800404a:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800404e:	e7d8      	b.n	8004002 <mktime+0x28a>
 8004050:	f240 136d 	movw	r3, #365	; 0x16d
 8004054:	e7d5      	b.n	8004002 <mktime+0x28a>
 8004056:	07b2      	lsls	r2, r6, #30
 8004058:	d11e      	bne.n	8004098 <mktime+0x320>
 800405a:	2164      	movs	r1, #100	; 0x64
 800405c:	fb96 f2f1 	sdiv	r2, r6, r1
 8004060:	fb01 6212 	mls	r2, r1, r2, r6
 8004064:	b9da      	cbnz	r2, 800409e <mktime+0x326>
 8004066:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800406a:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 800406e:	fb96 f1f2 	sdiv	r1, r6, r2
 8004072:	fb02 6611 	mls	r6, r2, r1, r6
 8004076:	2e00      	cmp	r6, #0
 8004078:	f240 126d 	movw	r2, #365	; 0x16d
 800407c:	bf08      	it	eq
 800407e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8004082:	4293      	cmp	r3, r2
 8004084:	bfa8      	it	ge
 8004086:	1a9b      	subge	r3, r3, r2
 8004088:	e7bb      	b.n	8004002 <mktime+0x28a>
 800408a:	bf00      	nop
 800408c:	08006808 	.word	0x08006808
 8004090:	00015180 	.word	0x00015180
 8004094:	20000298 	.word	0x20000298
 8004098:	f240 126d 	movw	r2, #365	; 0x16d
 800409c:	e7f1      	b.n	8004082 <mktime+0x30a>
 800409e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80040a2:	e7ee      	b.n	8004082 <mktime+0x30a>
 80040a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80040a8:	46a0      	mov	r8, r4
 80040aa:	e7c4      	b.n	8004036 <mktime+0x2be>

080040ac <_free_r>:
 80040ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040ae:	2900      	cmp	r1, #0
 80040b0:	d044      	beq.n	800413c <_free_r+0x90>
 80040b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040b6:	9001      	str	r0, [sp, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f1a1 0404 	sub.w	r4, r1, #4
 80040be:	bfb8      	it	lt
 80040c0:	18e4      	addlt	r4, r4, r3
 80040c2:	f000 fdfd 	bl	8004cc0 <__malloc_lock>
 80040c6:	4a1e      	ldr	r2, [pc, #120]	; (8004140 <_free_r+0x94>)
 80040c8:	9801      	ldr	r0, [sp, #4]
 80040ca:	6813      	ldr	r3, [r2, #0]
 80040cc:	b933      	cbnz	r3, 80040dc <_free_r+0x30>
 80040ce:	6063      	str	r3, [r4, #4]
 80040d0:	6014      	str	r4, [r2, #0]
 80040d2:	b003      	add	sp, #12
 80040d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040d8:	f000 bdf8 	b.w	8004ccc <__malloc_unlock>
 80040dc:	42a3      	cmp	r3, r4
 80040de:	d908      	bls.n	80040f2 <_free_r+0x46>
 80040e0:	6825      	ldr	r5, [r4, #0]
 80040e2:	1961      	adds	r1, r4, r5
 80040e4:	428b      	cmp	r3, r1
 80040e6:	bf01      	itttt	eq
 80040e8:	6819      	ldreq	r1, [r3, #0]
 80040ea:	685b      	ldreq	r3, [r3, #4]
 80040ec:	1949      	addeq	r1, r1, r5
 80040ee:	6021      	streq	r1, [r4, #0]
 80040f0:	e7ed      	b.n	80040ce <_free_r+0x22>
 80040f2:	461a      	mov	r2, r3
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	b10b      	cbz	r3, 80040fc <_free_r+0x50>
 80040f8:	42a3      	cmp	r3, r4
 80040fa:	d9fa      	bls.n	80040f2 <_free_r+0x46>
 80040fc:	6811      	ldr	r1, [r2, #0]
 80040fe:	1855      	adds	r5, r2, r1
 8004100:	42a5      	cmp	r5, r4
 8004102:	d10b      	bne.n	800411c <_free_r+0x70>
 8004104:	6824      	ldr	r4, [r4, #0]
 8004106:	4421      	add	r1, r4
 8004108:	1854      	adds	r4, r2, r1
 800410a:	42a3      	cmp	r3, r4
 800410c:	6011      	str	r1, [r2, #0]
 800410e:	d1e0      	bne.n	80040d2 <_free_r+0x26>
 8004110:	681c      	ldr	r4, [r3, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	6053      	str	r3, [r2, #4]
 8004116:	4421      	add	r1, r4
 8004118:	6011      	str	r1, [r2, #0]
 800411a:	e7da      	b.n	80040d2 <_free_r+0x26>
 800411c:	d902      	bls.n	8004124 <_free_r+0x78>
 800411e:	230c      	movs	r3, #12
 8004120:	6003      	str	r3, [r0, #0]
 8004122:	e7d6      	b.n	80040d2 <_free_r+0x26>
 8004124:	6825      	ldr	r5, [r4, #0]
 8004126:	1961      	adds	r1, r4, r5
 8004128:	428b      	cmp	r3, r1
 800412a:	bf04      	itt	eq
 800412c:	6819      	ldreq	r1, [r3, #0]
 800412e:	685b      	ldreq	r3, [r3, #4]
 8004130:	6063      	str	r3, [r4, #4]
 8004132:	bf04      	itt	eq
 8004134:	1949      	addeq	r1, r1, r5
 8004136:	6021      	streq	r1, [r4, #0]
 8004138:	6054      	str	r4, [r2, #4]
 800413a:	e7ca      	b.n	80040d2 <_free_r+0x26>
 800413c:	b003      	add	sp, #12
 800413e:	bd30      	pop	{r4, r5, pc}
 8004140:	20000274 	.word	0x20000274

08004144 <sbrk_aligned>:
 8004144:	b570      	push	{r4, r5, r6, lr}
 8004146:	4e0e      	ldr	r6, [pc, #56]	; (8004180 <sbrk_aligned+0x3c>)
 8004148:	460c      	mov	r4, r1
 800414a:	6831      	ldr	r1, [r6, #0]
 800414c:	4605      	mov	r5, r0
 800414e:	b911      	cbnz	r1, 8004156 <sbrk_aligned+0x12>
 8004150:	f000 f8ba 	bl	80042c8 <_sbrk_r>
 8004154:	6030      	str	r0, [r6, #0]
 8004156:	4621      	mov	r1, r4
 8004158:	4628      	mov	r0, r5
 800415a:	f000 f8b5 	bl	80042c8 <_sbrk_r>
 800415e:	1c43      	adds	r3, r0, #1
 8004160:	d00a      	beq.n	8004178 <sbrk_aligned+0x34>
 8004162:	1cc4      	adds	r4, r0, #3
 8004164:	f024 0403 	bic.w	r4, r4, #3
 8004168:	42a0      	cmp	r0, r4
 800416a:	d007      	beq.n	800417c <sbrk_aligned+0x38>
 800416c:	1a21      	subs	r1, r4, r0
 800416e:	4628      	mov	r0, r5
 8004170:	f000 f8aa 	bl	80042c8 <_sbrk_r>
 8004174:	3001      	adds	r0, #1
 8004176:	d101      	bne.n	800417c <sbrk_aligned+0x38>
 8004178:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800417c:	4620      	mov	r0, r4
 800417e:	bd70      	pop	{r4, r5, r6, pc}
 8004180:	20000278 	.word	0x20000278

08004184 <_malloc_r>:
 8004184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004188:	1ccd      	adds	r5, r1, #3
 800418a:	f025 0503 	bic.w	r5, r5, #3
 800418e:	3508      	adds	r5, #8
 8004190:	2d0c      	cmp	r5, #12
 8004192:	bf38      	it	cc
 8004194:	250c      	movcc	r5, #12
 8004196:	2d00      	cmp	r5, #0
 8004198:	4607      	mov	r7, r0
 800419a:	db01      	blt.n	80041a0 <_malloc_r+0x1c>
 800419c:	42a9      	cmp	r1, r5
 800419e:	d905      	bls.n	80041ac <_malloc_r+0x28>
 80041a0:	230c      	movs	r3, #12
 80041a2:	603b      	str	r3, [r7, #0]
 80041a4:	2600      	movs	r6, #0
 80041a6:	4630      	mov	r0, r6
 80041a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041ac:	4e2e      	ldr	r6, [pc, #184]	; (8004268 <_malloc_r+0xe4>)
 80041ae:	f000 fd87 	bl	8004cc0 <__malloc_lock>
 80041b2:	6833      	ldr	r3, [r6, #0]
 80041b4:	461c      	mov	r4, r3
 80041b6:	bb34      	cbnz	r4, 8004206 <_malloc_r+0x82>
 80041b8:	4629      	mov	r1, r5
 80041ba:	4638      	mov	r0, r7
 80041bc:	f7ff ffc2 	bl	8004144 <sbrk_aligned>
 80041c0:	1c43      	adds	r3, r0, #1
 80041c2:	4604      	mov	r4, r0
 80041c4:	d14d      	bne.n	8004262 <_malloc_r+0xde>
 80041c6:	6834      	ldr	r4, [r6, #0]
 80041c8:	4626      	mov	r6, r4
 80041ca:	2e00      	cmp	r6, #0
 80041cc:	d140      	bne.n	8004250 <_malloc_r+0xcc>
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	4631      	mov	r1, r6
 80041d2:	4638      	mov	r0, r7
 80041d4:	eb04 0803 	add.w	r8, r4, r3
 80041d8:	f000 f876 	bl	80042c8 <_sbrk_r>
 80041dc:	4580      	cmp	r8, r0
 80041de:	d13a      	bne.n	8004256 <_malloc_r+0xd2>
 80041e0:	6821      	ldr	r1, [r4, #0]
 80041e2:	3503      	adds	r5, #3
 80041e4:	1a6d      	subs	r5, r5, r1
 80041e6:	f025 0503 	bic.w	r5, r5, #3
 80041ea:	3508      	adds	r5, #8
 80041ec:	2d0c      	cmp	r5, #12
 80041ee:	bf38      	it	cc
 80041f0:	250c      	movcc	r5, #12
 80041f2:	4629      	mov	r1, r5
 80041f4:	4638      	mov	r0, r7
 80041f6:	f7ff ffa5 	bl	8004144 <sbrk_aligned>
 80041fa:	3001      	adds	r0, #1
 80041fc:	d02b      	beq.n	8004256 <_malloc_r+0xd2>
 80041fe:	6823      	ldr	r3, [r4, #0]
 8004200:	442b      	add	r3, r5
 8004202:	6023      	str	r3, [r4, #0]
 8004204:	e00e      	b.n	8004224 <_malloc_r+0xa0>
 8004206:	6822      	ldr	r2, [r4, #0]
 8004208:	1b52      	subs	r2, r2, r5
 800420a:	d41e      	bmi.n	800424a <_malloc_r+0xc6>
 800420c:	2a0b      	cmp	r2, #11
 800420e:	d916      	bls.n	800423e <_malloc_r+0xba>
 8004210:	1961      	adds	r1, r4, r5
 8004212:	42a3      	cmp	r3, r4
 8004214:	6025      	str	r5, [r4, #0]
 8004216:	bf18      	it	ne
 8004218:	6059      	strne	r1, [r3, #4]
 800421a:	6863      	ldr	r3, [r4, #4]
 800421c:	bf08      	it	eq
 800421e:	6031      	streq	r1, [r6, #0]
 8004220:	5162      	str	r2, [r4, r5]
 8004222:	604b      	str	r3, [r1, #4]
 8004224:	4638      	mov	r0, r7
 8004226:	f104 060b 	add.w	r6, r4, #11
 800422a:	f000 fd4f 	bl	8004ccc <__malloc_unlock>
 800422e:	f026 0607 	bic.w	r6, r6, #7
 8004232:	1d23      	adds	r3, r4, #4
 8004234:	1af2      	subs	r2, r6, r3
 8004236:	d0b6      	beq.n	80041a6 <_malloc_r+0x22>
 8004238:	1b9b      	subs	r3, r3, r6
 800423a:	50a3      	str	r3, [r4, r2]
 800423c:	e7b3      	b.n	80041a6 <_malloc_r+0x22>
 800423e:	6862      	ldr	r2, [r4, #4]
 8004240:	42a3      	cmp	r3, r4
 8004242:	bf0c      	ite	eq
 8004244:	6032      	streq	r2, [r6, #0]
 8004246:	605a      	strne	r2, [r3, #4]
 8004248:	e7ec      	b.n	8004224 <_malloc_r+0xa0>
 800424a:	4623      	mov	r3, r4
 800424c:	6864      	ldr	r4, [r4, #4]
 800424e:	e7b2      	b.n	80041b6 <_malloc_r+0x32>
 8004250:	4634      	mov	r4, r6
 8004252:	6876      	ldr	r6, [r6, #4]
 8004254:	e7b9      	b.n	80041ca <_malloc_r+0x46>
 8004256:	230c      	movs	r3, #12
 8004258:	603b      	str	r3, [r7, #0]
 800425a:	4638      	mov	r0, r7
 800425c:	f000 fd36 	bl	8004ccc <__malloc_unlock>
 8004260:	e7a1      	b.n	80041a6 <_malloc_r+0x22>
 8004262:	6025      	str	r5, [r4, #0]
 8004264:	e7de      	b.n	8004224 <_malloc_r+0xa0>
 8004266:	bf00      	nop
 8004268:	20000274 	.word	0x20000274

0800426c <iprintf>:
 800426c:	b40f      	push	{r0, r1, r2, r3}
 800426e:	4b0a      	ldr	r3, [pc, #40]	; (8004298 <iprintf+0x2c>)
 8004270:	b513      	push	{r0, r1, r4, lr}
 8004272:	681c      	ldr	r4, [r3, #0]
 8004274:	b124      	cbz	r4, 8004280 <iprintf+0x14>
 8004276:	69a3      	ldr	r3, [r4, #24]
 8004278:	b913      	cbnz	r3, 8004280 <iprintf+0x14>
 800427a:	4620      	mov	r0, r4
 800427c:	f000 fb76 	bl	800496c <__sinit>
 8004280:	ab05      	add	r3, sp, #20
 8004282:	9a04      	ldr	r2, [sp, #16]
 8004284:	68a1      	ldr	r1, [r4, #8]
 8004286:	9301      	str	r3, [sp, #4]
 8004288:	4620      	mov	r0, r4
 800428a:	f000 feab 	bl	8004fe4 <_vfiprintf_r>
 800428e:	b002      	add	sp, #8
 8004290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004294:	b004      	add	sp, #16
 8004296:	4770      	bx	lr
 8004298:	20000010 	.word	0x20000010

0800429c <putchar>:
 800429c:	4b09      	ldr	r3, [pc, #36]	; (80042c4 <putchar+0x28>)
 800429e:	b513      	push	{r0, r1, r4, lr}
 80042a0:	681c      	ldr	r4, [r3, #0]
 80042a2:	4601      	mov	r1, r0
 80042a4:	b134      	cbz	r4, 80042b4 <putchar+0x18>
 80042a6:	69a3      	ldr	r3, [r4, #24]
 80042a8:	b923      	cbnz	r3, 80042b4 <putchar+0x18>
 80042aa:	9001      	str	r0, [sp, #4]
 80042ac:	4620      	mov	r0, r4
 80042ae:	f000 fb5d 	bl	800496c <__sinit>
 80042b2:	9901      	ldr	r1, [sp, #4]
 80042b4:	68a2      	ldr	r2, [r4, #8]
 80042b6:	4620      	mov	r0, r4
 80042b8:	b002      	add	sp, #8
 80042ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042be:	f001 b955 	b.w	800556c <_putc_r>
 80042c2:	bf00      	nop
 80042c4:	20000010 	.word	0x20000010

080042c8 <_sbrk_r>:
 80042c8:	b538      	push	{r3, r4, r5, lr}
 80042ca:	4d06      	ldr	r5, [pc, #24]	; (80042e4 <_sbrk_r+0x1c>)
 80042cc:	2300      	movs	r3, #0
 80042ce:	4604      	mov	r4, r0
 80042d0:	4608      	mov	r0, r1
 80042d2:	602b      	str	r3, [r5, #0]
 80042d4:	f7fc fe70 	bl	8000fb8 <_sbrk>
 80042d8:	1c43      	adds	r3, r0, #1
 80042da:	d102      	bne.n	80042e2 <_sbrk_r+0x1a>
 80042dc:	682b      	ldr	r3, [r5, #0]
 80042de:	b103      	cbz	r3, 80042e2 <_sbrk_r+0x1a>
 80042e0:	6023      	str	r3, [r4, #0]
 80042e2:	bd38      	pop	{r3, r4, r5, pc}
 80042e4:	200002a8 	.word	0x200002a8

080042e8 <sniprintf>:
 80042e8:	b40c      	push	{r2, r3}
 80042ea:	b530      	push	{r4, r5, lr}
 80042ec:	4b17      	ldr	r3, [pc, #92]	; (800434c <sniprintf+0x64>)
 80042ee:	1e0c      	subs	r4, r1, #0
 80042f0:	681d      	ldr	r5, [r3, #0]
 80042f2:	b09d      	sub	sp, #116	; 0x74
 80042f4:	da08      	bge.n	8004308 <sniprintf+0x20>
 80042f6:	238b      	movs	r3, #139	; 0x8b
 80042f8:	602b      	str	r3, [r5, #0]
 80042fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042fe:	b01d      	add	sp, #116	; 0x74
 8004300:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004304:	b002      	add	sp, #8
 8004306:	4770      	bx	lr
 8004308:	f44f 7302 	mov.w	r3, #520	; 0x208
 800430c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004310:	bf14      	ite	ne
 8004312:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8004316:	4623      	moveq	r3, r4
 8004318:	9304      	str	r3, [sp, #16]
 800431a:	9307      	str	r3, [sp, #28]
 800431c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004320:	9002      	str	r0, [sp, #8]
 8004322:	9006      	str	r0, [sp, #24]
 8004324:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004328:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800432a:	ab21      	add	r3, sp, #132	; 0x84
 800432c:	a902      	add	r1, sp, #8
 800432e:	4628      	mov	r0, r5
 8004330:	9301      	str	r3, [sp, #4]
 8004332:	f000 fd2d 	bl	8004d90 <_svfiprintf_r>
 8004336:	1c43      	adds	r3, r0, #1
 8004338:	bfbc      	itt	lt
 800433a:	238b      	movlt	r3, #139	; 0x8b
 800433c:	602b      	strlt	r3, [r5, #0]
 800433e:	2c00      	cmp	r4, #0
 8004340:	d0dd      	beq.n	80042fe <sniprintf+0x16>
 8004342:	9b02      	ldr	r3, [sp, #8]
 8004344:	2200      	movs	r2, #0
 8004346:	701a      	strb	r2, [r3, #0]
 8004348:	e7d9      	b.n	80042fe <sniprintf+0x16>
 800434a:	bf00      	nop
 800434c:	20000010 	.word	0x20000010

08004350 <__tzcalc_limits>:
 8004350:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004354:	4605      	mov	r5, r0
 8004356:	f000 fbfd 	bl	8004b54 <__gettzinfo>
 800435a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800435e:	429d      	cmp	r5, r3
 8004360:	f340 8099 	ble.w	8004496 <__tzcalc_limits+0x146>
 8004364:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8004368:	18ac      	adds	r4, r5, r2
 800436a:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800436e:	f240 126d 	movw	r2, #365	; 0x16d
 8004372:	10a4      	asrs	r4, r4, #2
 8004374:	fb02 4403 	mla	r4, r2, r3, r4
 8004378:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800437c:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8004380:	fb93 f3f2 	sdiv	r3, r3, r2
 8004384:	441c      	add	r4, r3
 8004386:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800438a:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800438e:	fb95 fcf3 	sdiv	ip, r5, r3
 8004392:	fb03 5c1c 	mls	ip, r3, ip, r5
 8004396:	186a      	adds	r2, r5, r1
 8004398:	fabc f68c 	clz	r6, ip
 800439c:	fbb2 f2f3 	udiv	r2, r2, r3
 80043a0:	f005 0303 	and.w	r3, r5, #3
 80043a4:	4414      	add	r4, r2
 80043a6:	2264      	movs	r2, #100	; 0x64
 80043a8:	6045      	str	r5, [r0, #4]
 80043aa:	fb95 f7f2 	sdiv	r7, r5, r2
 80043ae:	0976      	lsrs	r6, r6, #5
 80043b0:	fb02 5717 	mls	r7, r2, r7, r5
 80043b4:	4601      	mov	r1, r0
 80043b6:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	f04f 0a07 	mov.w	sl, #7
 80043c0:	7a0d      	ldrb	r5, [r1, #8]
 80043c2:	694b      	ldr	r3, [r1, #20]
 80043c4:	2d4a      	cmp	r5, #74	; 0x4a
 80043c6:	d12d      	bne.n	8004424 <__tzcalc_limits+0xd4>
 80043c8:	9a00      	ldr	r2, [sp, #0]
 80043ca:	eb04 0e03 	add.w	lr, r4, r3
 80043ce:	b902      	cbnz	r2, 80043d2 <__tzcalc_limits+0x82>
 80043d0:	b917      	cbnz	r7, 80043d8 <__tzcalc_limits+0x88>
 80043d2:	f1bc 0f00 	cmp.w	ip, #0
 80043d6:	d123      	bne.n	8004420 <__tzcalc_limits+0xd0>
 80043d8:	2b3b      	cmp	r3, #59	; 0x3b
 80043da:	bfd4      	ite	le
 80043dc:	2300      	movle	r3, #0
 80043de:	2301      	movgt	r3, #1
 80043e0:	4473      	add	r3, lr
 80043e2:	3b01      	subs	r3, #1
 80043e4:	698d      	ldr	r5, [r1, #24]
 80043e6:	4a2d      	ldr	r2, [pc, #180]	; (800449c <__tzcalc_limits+0x14c>)
 80043e8:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 80043ec:	fbc3 5e02 	smlal	r5, lr, r3, r2
 80043f0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80043f2:	18ed      	adds	r5, r5, r3
 80043f4:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 80043f8:	e9c1 5308 	strd	r5, r3, [r1, #32]
 80043fc:	3128      	adds	r1, #40	; 0x28
 80043fe:	458b      	cmp	fp, r1
 8004400:	d1de      	bne.n	80043c0 <__tzcalc_limits+0x70>
 8004402:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 8004406:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800440a:	428c      	cmp	r4, r1
 800440c:	eb72 0303 	sbcs.w	r3, r2, r3
 8004410:	bfb4      	ite	lt
 8004412:	2301      	movlt	r3, #1
 8004414:	2300      	movge	r3, #0
 8004416:	6003      	str	r3, [r0, #0]
 8004418:	2001      	movs	r0, #1
 800441a:	b003      	add	sp, #12
 800441c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004420:	2300      	movs	r3, #0
 8004422:	e7dd      	b.n	80043e0 <__tzcalc_limits+0x90>
 8004424:	2d44      	cmp	r5, #68	; 0x44
 8004426:	d101      	bne.n	800442c <__tzcalc_limits+0xdc>
 8004428:	4423      	add	r3, r4
 800442a:	e7db      	b.n	80043e4 <__tzcalc_limits+0x94>
 800442c:	9a00      	ldr	r2, [sp, #0]
 800442e:	bb62      	cbnz	r2, 800448a <__tzcalc_limits+0x13a>
 8004430:	2f00      	cmp	r7, #0
 8004432:	bf0c      	ite	eq
 8004434:	4635      	moveq	r5, r6
 8004436:	2501      	movne	r5, #1
 8004438:	68ca      	ldr	r2, [r1, #12]
 800443a:	9201      	str	r2, [sp, #4]
 800443c:	4a18      	ldr	r2, [pc, #96]	; (80044a0 <__tzcalc_limits+0x150>)
 800443e:	f04f 0930 	mov.w	r9, #48	; 0x30
 8004442:	fb09 2505 	mla	r5, r9, r5, r2
 8004446:	46a6      	mov	lr, r4
 8004448:	f04f 0800 	mov.w	r8, #0
 800444c:	3d04      	subs	r5, #4
 800444e:	9a01      	ldr	r2, [sp, #4]
 8004450:	f108 0801 	add.w	r8, r8, #1
 8004454:	4542      	cmp	r2, r8
 8004456:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800445a:	dc18      	bgt.n	800448e <__tzcalc_limits+0x13e>
 800445c:	f10e 0504 	add.w	r5, lr, #4
 8004460:	fb95 f8fa 	sdiv	r8, r5, sl
 8004464:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8004468:	eba5 0808 	sub.w	r8, r5, r8
 800446c:	ebb3 0808 	subs.w	r8, r3, r8
 8004470:	690b      	ldr	r3, [r1, #16]
 8004472:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004476:	bf48      	it	mi
 8004478:	f108 0807 	addmi.w	r8, r8, #7
 800447c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004480:	4443      	add	r3, r8
 8004482:	454b      	cmp	r3, r9
 8004484:	da05      	bge.n	8004492 <__tzcalc_limits+0x142>
 8004486:	4473      	add	r3, lr
 8004488:	e7ac      	b.n	80043e4 <__tzcalc_limits+0x94>
 800448a:	4635      	mov	r5, r6
 800448c:	e7d4      	b.n	8004438 <__tzcalc_limits+0xe8>
 800448e:	44ce      	add	lr, r9
 8004490:	e7dd      	b.n	800444e <__tzcalc_limits+0xfe>
 8004492:	3b07      	subs	r3, #7
 8004494:	e7f5      	b.n	8004482 <__tzcalc_limits+0x132>
 8004496:	2000      	movs	r0, #0
 8004498:	e7bf      	b.n	800441a <__tzcalc_limits+0xca>
 800449a:	bf00      	nop
 800449c:	00015180 	.word	0x00015180
 80044a0:	08006838 	.word	0x08006838

080044a4 <__tz_lock>:
 80044a4:	4801      	ldr	r0, [pc, #4]	; (80044ac <__tz_lock+0x8>)
 80044a6:	f000 bc06 	b.w	8004cb6 <__retarget_lock_acquire>
 80044aa:	bf00      	nop
 80044ac:	200002a4 	.word	0x200002a4

080044b0 <__tz_unlock>:
 80044b0:	4801      	ldr	r0, [pc, #4]	; (80044b8 <__tz_unlock+0x8>)
 80044b2:	f000 bc02 	b.w	8004cba <__retarget_lock_release>
 80044b6:	bf00      	nop
 80044b8:	200002a4 	.word	0x200002a4

080044bc <_tzset_unlocked>:
 80044bc:	4b01      	ldr	r3, [pc, #4]	; (80044c4 <_tzset_unlocked+0x8>)
 80044be:	6818      	ldr	r0, [r3, #0]
 80044c0:	f000 b802 	b.w	80044c8 <_tzset_unlocked_r>
 80044c4:	20000010 	.word	0x20000010

080044c8 <_tzset_unlocked_r>:
 80044c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044cc:	b08d      	sub	sp, #52	; 0x34
 80044ce:	4607      	mov	r7, r0
 80044d0:	f000 fb40 	bl	8004b54 <__gettzinfo>
 80044d4:	49b0      	ldr	r1, [pc, #704]	; (8004798 <_tzset_unlocked_r+0x2d0>)
 80044d6:	4eb1      	ldr	r6, [pc, #708]	; (800479c <_tzset_unlocked_r+0x2d4>)
 80044d8:	4605      	mov	r5, r0
 80044da:	4638      	mov	r0, r7
 80044dc:	f000 fb32 	bl	8004b44 <_getenv_r>
 80044e0:	4604      	mov	r4, r0
 80044e2:	b970      	cbnz	r0, 8004502 <_tzset_unlocked_r+0x3a>
 80044e4:	4bae      	ldr	r3, [pc, #696]	; (80047a0 <_tzset_unlocked_r+0x2d8>)
 80044e6:	4aaf      	ldr	r2, [pc, #700]	; (80047a4 <_tzset_unlocked_r+0x2dc>)
 80044e8:	6018      	str	r0, [r3, #0]
 80044ea:	4baf      	ldr	r3, [pc, #700]	; (80047a8 <_tzset_unlocked_r+0x2e0>)
 80044ec:	6018      	str	r0, [r3, #0]
 80044ee:	4baf      	ldr	r3, [pc, #700]	; (80047ac <_tzset_unlocked_r+0x2e4>)
 80044f0:	6830      	ldr	r0, [r6, #0]
 80044f2:	e9c3 2200 	strd	r2, r2, [r3]
 80044f6:	f7ff fb57 	bl	8003ba8 <free>
 80044fa:	6034      	str	r4, [r6, #0]
 80044fc:	b00d      	add	sp, #52	; 0x34
 80044fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004502:	6831      	ldr	r1, [r6, #0]
 8004504:	2900      	cmp	r1, #0
 8004506:	d162      	bne.n	80045ce <_tzset_unlocked_r+0x106>
 8004508:	6830      	ldr	r0, [r6, #0]
 800450a:	f7ff fb4d 	bl	8003ba8 <free>
 800450e:	4620      	mov	r0, r4
 8004510:	f7fb fe5e 	bl	80001d0 <strlen>
 8004514:	1c41      	adds	r1, r0, #1
 8004516:	4638      	mov	r0, r7
 8004518:	f7ff fe34 	bl	8004184 <_malloc_r>
 800451c:	6030      	str	r0, [r6, #0]
 800451e:	2800      	cmp	r0, #0
 8004520:	d15a      	bne.n	80045d8 <_tzset_unlocked_r+0x110>
 8004522:	7823      	ldrb	r3, [r4, #0]
 8004524:	4aa2      	ldr	r2, [pc, #648]	; (80047b0 <_tzset_unlocked_r+0x2e8>)
 8004526:	49a3      	ldr	r1, [pc, #652]	; (80047b4 <_tzset_unlocked_r+0x2ec>)
 8004528:	2b3a      	cmp	r3, #58	; 0x3a
 800452a:	bf08      	it	eq
 800452c:	3401      	addeq	r4, #1
 800452e:	ae0a      	add	r6, sp, #40	; 0x28
 8004530:	4633      	mov	r3, r6
 8004532:	4620      	mov	r0, r4
 8004534:	f001 f882 	bl	800563c <siscanf>
 8004538:	2800      	cmp	r0, #0
 800453a:	dddf      	ble.n	80044fc <_tzset_unlocked_r+0x34>
 800453c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800453e:	18e7      	adds	r7, r4, r3
 8004540:	5ce3      	ldrb	r3, [r4, r3]
 8004542:	2b2d      	cmp	r3, #45	; 0x2d
 8004544:	d14c      	bne.n	80045e0 <_tzset_unlocked_r+0x118>
 8004546:	3701      	adds	r7, #1
 8004548:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800454c:	f10d 0a20 	add.w	sl, sp, #32
 8004550:	f10d 0b1e 	add.w	fp, sp, #30
 8004554:	2400      	movs	r4, #0
 8004556:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800455a:	4997      	ldr	r1, [pc, #604]	; (80047b8 <_tzset_unlocked_r+0x2f0>)
 800455c:	9603      	str	r6, [sp, #12]
 800455e:	f8cd b000 	str.w	fp, [sp]
 8004562:	4633      	mov	r3, r6
 8004564:	aa07      	add	r2, sp, #28
 8004566:	4638      	mov	r0, r7
 8004568:	f8ad 401e 	strh.w	r4, [sp, #30]
 800456c:	f8ad 4020 	strh.w	r4, [sp, #32]
 8004570:	f001 f864 	bl	800563c <siscanf>
 8004574:	42a0      	cmp	r0, r4
 8004576:	ddc1      	ble.n	80044fc <_tzset_unlocked_r+0x34>
 8004578:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800457c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8004580:	f8df 9240 	ldr.w	r9, [pc, #576]	; 80047c4 <_tzset_unlocked_r+0x2fc>
 8004584:	213c      	movs	r1, #60	; 0x3c
 8004586:	fb01 3302 	mla	r3, r1, r2, r3
 800458a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800458e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004592:	fb01 3302 	mla	r3, r1, r2, r3
 8004596:	fb08 f303 	mul.w	r3, r8, r3
 800459a:	f8df 8210 	ldr.w	r8, [pc, #528]	; 80047ac <_tzset_unlocked_r+0x2e4>
 800459e:	62ab      	str	r3, [r5, #40]	; 0x28
 80045a0:	4b83      	ldr	r3, [pc, #524]	; (80047b0 <_tzset_unlocked_r+0x2e8>)
 80045a2:	f8c8 3000 	str.w	r3, [r8]
 80045a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045a8:	4982      	ldr	r1, [pc, #520]	; (80047b4 <_tzset_unlocked_r+0x2ec>)
 80045aa:	441f      	add	r7, r3
 80045ac:	464a      	mov	r2, r9
 80045ae:	4633      	mov	r3, r6
 80045b0:	4638      	mov	r0, r7
 80045b2:	f001 f843 	bl	800563c <siscanf>
 80045b6:	42a0      	cmp	r0, r4
 80045b8:	dc18      	bgt.n	80045ec <_tzset_unlocked_r+0x124>
 80045ba:	f8d8 3000 	ldr.w	r3, [r8]
 80045be:	f8c8 3004 	str.w	r3, [r8, #4]
 80045c2:	4b77      	ldr	r3, [pc, #476]	; (80047a0 <_tzset_unlocked_r+0x2d8>)
 80045c4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	4b77      	ldr	r3, [pc, #476]	; (80047a8 <_tzset_unlocked_r+0x2e0>)
 80045ca:	601c      	str	r4, [r3, #0]
 80045cc:	e796      	b.n	80044fc <_tzset_unlocked_r+0x34>
 80045ce:	f7fb fe07 	bl	80001e0 <strcmp>
 80045d2:	2800      	cmp	r0, #0
 80045d4:	d198      	bne.n	8004508 <_tzset_unlocked_r+0x40>
 80045d6:	e791      	b.n	80044fc <_tzset_unlocked_r+0x34>
 80045d8:	4621      	mov	r1, r4
 80045da:	f001 f8a0 	bl	800571e <strcpy>
 80045de:	e7a0      	b.n	8004522 <_tzset_unlocked_r+0x5a>
 80045e0:	2b2b      	cmp	r3, #43	; 0x2b
 80045e2:	bf08      	it	eq
 80045e4:	3701      	addeq	r7, #1
 80045e6:	f04f 0801 	mov.w	r8, #1
 80045ea:	e7af      	b.n	800454c <_tzset_unlocked_r+0x84>
 80045ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045ee:	f8c8 9004 	str.w	r9, [r8, #4]
 80045f2:	18fc      	adds	r4, r7, r3
 80045f4:	5cfb      	ldrb	r3, [r7, r3]
 80045f6:	2b2d      	cmp	r3, #45	; 0x2d
 80045f8:	f040 808b 	bne.w	8004712 <_tzset_unlocked_r+0x24a>
 80045fc:	3401      	adds	r4, #1
 80045fe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004602:	2300      	movs	r3, #0
 8004604:	f8ad 301c 	strh.w	r3, [sp, #28]
 8004608:	f8ad 301e 	strh.w	r3, [sp, #30]
 800460c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8004610:	930a      	str	r3, [sp, #40]	; 0x28
 8004612:	e9cd a602 	strd	sl, r6, [sp, #8]
 8004616:	e9cd b600 	strd	fp, r6, [sp]
 800461a:	4967      	ldr	r1, [pc, #412]	; (80047b8 <_tzset_unlocked_r+0x2f0>)
 800461c:	4633      	mov	r3, r6
 800461e:	aa07      	add	r2, sp, #28
 8004620:	4620      	mov	r0, r4
 8004622:	f001 f80b 	bl	800563c <siscanf>
 8004626:	2800      	cmp	r0, #0
 8004628:	dc78      	bgt.n	800471c <_tzset_unlocked_r+0x254>
 800462a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800462c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8004630:	652b      	str	r3, [r5, #80]	; 0x50
 8004632:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004634:	462f      	mov	r7, r5
 8004636:	441c      	add	r4, r3
 8004638:	f04f 0900 	mov.w	r9, #0
 800463c:	7823      	ldrb	r3, [r4, #0]
 800463e:	2b2c      	cmp	r3, #44	; 0x2c
 8004640:	bf08      	it	eq
 8004642:	3401      	addeq	r4, #1
 8004644:	f894 8000 	ldrb.w	r8, [r4]
 8004648:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800464c:	d178      	bne.n	8004740 <_tzset_unlocked_r+0x278>
 800464e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8004652:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8004656:	ab09      	add	r3, sp, #36	; 0x24
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	4958      	ldr	r1, [pc, #352]	; (80047bc <_tzset_unlocked_r+0x2f4>)
 800465c:	9603      	str	r6, [sp, #12]
 800465e:	4633      	mov	r3, r6
 8004660:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8004664:	4620      	mov	r0, r4
 8004666:	f000 ffe9 	bl	800563c <siscanf>
 800466a:	2803      	cmp	r0, #3
 800466c:	f47f af46 	bne.w	80044fc <_tzset_unlocked_r+0x34>
 8004670:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8004674:	1e4b      	subs	r3, r1, #1
 8004676:	2b0b      	cmp	r3, #11
 8004678:	f63f af40 	bhi.w	80044fc <_tzset_unlocked_r+0x34>
 800467c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8004680:	1e53      	subs	r3, r2, #1
 8004682:	2b04      	cmp	r3, #4
 8004684:	f63f af3a 	bhi.w	80044fc <_tzset_unlocked_r+0x34>
 8004688:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800468c:	2b06      	cmp	r3, #6
 800468e:	f63f af35 	bhi.w	80044fc <_tzset_unlocked_r+0x34>
 8004692:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8004696:	f887 8008 	strb.w	r8, [r7, #8]
 800469a:	617b      	str	r3, [r7, #20]
 800469c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800469e:	eb04 0803 	add.w	r8, r4, r3
 80046a2:	2302      	movs	r3, #2
 80046a4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80046a8:	2300      	movs	r3, #0
 80046aa:	f8ad 301e 	strh.w	r3, [sp, #30]
 80046ae:	f8ad 3020 	strh.w	r3, [sp, #32]
 80046b2:	930a      	str	r3, [sp, #40]	; 0x28
 80046b4:	f898 3000 	ldrb.w	r3, [r8]
 80046b8:	2b2f      	cmp	r3, #47	; 0x2f
 80046ba:	d109      	bne.n	80046d0 <_tzset_unlocked_r+0x208>
 80046bc:	e9cd a602 	strd	sl, r6, [sp, #8]
 80046c0:	e9cd b600 	strd	fp, r6, [sp]
 80046c4:	493e      	ldr	r1, [pc, #248]	; (80047c0 <_tzset_unlocked_r+0x2f8>)
 80046c6:	4633      	mov	r3, r6
 80046c8:	aa07      	add	r2, sp, #28
 80046ca:	4640      	mov	r0, r8
 80046cc:	f000 ffb6 	bl	800563c <siscanf>
 80046d0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80046d4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80046d8:	213c      	movs	r1, #60	; 0x3c
 80046da:	fb01 3302 	mla	r3, r1, r2, r3
 80046de:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80046e2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80046e6:	fb01 3302 	mla	r3, r1, r2, r3
 80046ea:	61bb      	str	r3, [r7, #24]
 80046ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80046ee:	3728      	adds	r7, #40	; 0x28
 80046f0:	4444      	add	r4, r8
 80046f2:	f1b9 0f00 	cmp.w	r9, #0
 80046f6:	d020      	beq.n	800473a <_tzset_unlocked_r+0x272>
 80046f8:	6868      	ldr	r0, [r5, #4]
 80046fa:	f7ff fe29 	bl	8004350 <__tzcalc_limits>
 80046fe:	4b28      	ldr	r3, [pc, #160]	; (80047a0 <_tzset_unlocked_r+0x2d8>)
 8004700:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8004706:	1a9b      	subs	r3, r3, r2
 8004708:	4a27      	ldr	r2, [pc, #156]	; (80047a8 <_tzset_unlocked_r+0x2e0>)
 800470a:	bf18      	it	ne
 800470c:	2301      	movne	r3, #1
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	e6f4      	b.n	80044fc <_tzset_unlocked_r+0x34>
 8004712:	2b2b      	cmp	r3, #43	; 0x2b
 8004714:	bf08      	it	eq
 8004716:	3401      	addeq	r4, #1
 8004718:	2701      	movs	r7, #1
 800471a:	e772      	b.n	8004602 <_tzset_unlocked_r+0x13a>
 800471c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8004720:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8004724:	213c      	movs	r1, #60	; 0x3c
 8004726:	fb01 3302 	mla	r3, r1, r2, r3
 800472a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800472e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004732:	fb01 3302 	mla	r3, r1, r2, r3
 8004736:	437b      	muls	r3, r7
 8004738:	e77a      	b.n	8004630 <_tzset_unlocked_r+0x168>
 800473a:	f04f 0901 	mov.w	r9, #1
 800473e:	e77d      	b.n	800463c <_tzset_unlocked_r+0x174>
 8004740:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8004744:	bf06      	itte	eq
 8004746:	3401      	addeq	r4, #1
 8004748:	4643      	moveq	r3, r8
 800474a:	2344      	movne	r3, #68	; 0x44
 800474c:	220a      	movs	r2, #10
 800474e:	a90b      	add	r1, sp, #44	; 0x2c
 8004750:	4620      	mov	r0, r4
 8004752:	9305      	str	r3, [sp, #20]
 8004754:	f001 f874 	bl	8005840 <strtoul>
 8004758:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800475c:	9b05      	ldr	r3, [sp, #20]
 800475e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8004762:	45a0      	cmp	r8, r4
 8004764:	d114      	bne.n	8004790 <_tzset_unlocked_r+0x2c8>
 8004766:	234d      	movs	r3, #77	; 0x4d
 8004768:	f1b9 0f00 	cmp.w	r9, #0
 800476c:	d107      	bne.n	800477e <_tzset_unlocked_r+0x2b6>
 800476e:	722b      	strb	r3, [r5, #8]
 8004770:	2103      	movs	r1, #3
 8004772:	2302      	movs	r3, #2
 8004774:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8004778:	f8c5 9014 	str.w	r9, [r5, #20]
 800477c:	e791      	b.n	80046a2 <_tzset_unlocked_r+0x1da>
 800477e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8004782:	220b      	movs	r2, #11
 8004784:	2301      	movs	r3, #1
 8004786:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800478a:	2300      	movs	r3, #0
 800478c:	63eb      	str	r3, [r5, #60]	; 0x3c
 800478e:	e788      	b.n	80046a2 <_tzset_unlocked_r+0x1da>
 8004790:	b280      	uxth	r0, r0
 8004792:	723b      	strb	r3, [r7, #8]
 8004794:	6178      	str	r0, [r7, #20]
 8004796:	e784      	b.n	80046a2 <_tzset_unlocked_r+0x1da>
 8004798:	08006898 	.word	0x08006898
 800479c:	20000294 	.word	0x20000294
 80047a0:	2000029c 	.word	0x2000029c
 80047a4:	0800689b 	.word	0x0800689b
 80047a8:	20000298 	.word	0x20000298
 80047ac:	20000074 	.word	0x20000074
 80047b0:	20000287 	.word	0x20000287
 80047b4:	0800689f 	.word	0x0800689f
 80047b8:	080068c2 	.word	0x080068c2
 80047bc:	080068ae 	.word	0x080068ae
 80047c0:	080068c1 	.word	0x080068c1
 80047c4:	2000027c 	.word	0x2000027c

080047c8 <asctime>:
 80047c8:	4b0d      	ldr	r3, [pc, #52]	; (8004800 <asctime+0x38>)
 80047ca:	b570      	push	{r4, r5, r6, lr}
 80047cc:	681d      	ldr	r5, [r3, #0]
 80047ce:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 80047d0:	4604      	mov	r4, r0
 80047d2:	b976      	cbnz	r6, 80047f2 <asctime+0x2a>
 80047d4:	201a      	movs	r0, #26
 80047d6:	f7ff f9df 	bl	8003b98 <malloc>
 80047da:	4602      	mov	r2, r0
 80047dc:	6428      	str	r0, [r5, #64]	; 0x40
 80047de:	b920      	cbnz	r0, 80047ea <asctime+0x22>
 80047e0:	4b08      	ldr	r3, [pc, #32]	; (8004804 <asctime+0x3c>)
 80047e2:	4809      	ldr	r0, [pc, #36]	; (8004808 <asctime+0x40>)
 80047e4:	2137      	movs	r1, #55	; 0x37
 80047e6:	f000 f837 	bl	8004858 <__assert_func>
 80047ea:	221a      	movs	r2, #26
 80047ec:	4631      	mov	r1, r6
 80047ee:	f7ff f9e3 	bl	8003bb8 <memset>
 80047f2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80047f4:	4620      	mov	r0, r4
 80047f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80047fa:	f000 b807 	b.w	800480c <asctime_r>
 80047fe:	bf00      	nop
 8004800:	20000010 	.word	0x20000010
 8004804:	08006764 	.word	0x08006764
 8004808:	080068d4 	.word	0x080068d4

0800480c <asctime_r>:
 800480c:	b510      	push	{r4, lr}
 800480e:	460c      	mov	r4, r1
 8004810:	6941      	ldr	r1, [r0, #20]
 8004812:	6903      	ldr	r3, [r0, #16]
 8004814:	6982      	ldr	r2, [r0, #24]
 8004816:	b086      	sub	sp, #24
 8004818:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 800481c:	9104      	str	r1, [sp, #16]
 800481e:	6801      	ldr	r1, [r0, #0]
 8004820:	9103      	str	r1, [sp, #12]
 8004822:	6841      	ldr	r1, [r0, #4]
 8004824:	9102      	str	r1, [sp, #8]
 8004826:	6881      	ldr	r1, [r0, #8]
 8004828:	9101      	str	r1, [sp, #4]
 800482a:	68c1      	ldr	r1, [r0, #12]
 800482c:	9100      	str	r1, [sp, #0]
 800482e:	4907      	ldr	r1, [pc, #28]	; (800484c <asctime_r+0x40>)
 8004830:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004834:	440b      	add	r3, r1
 8004836:	4906      	ldr	r1, [pc, #24]	; (8004850 <asctime_r+0x44>)
 8004838:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800483c:	440a      	add	r2, r1
 800483e:	4620      	mov	r0, r4
 8004840:	4904      	ldr	r1, [pc, #16]	; (8004854 <asctime_r+0x48>)
 8004842:	f000 fedb 	bl	80055fc <siprintf>
 8004846:	4620      	mov	r0, r4
 8004848:	b006      	add	sp, #24
 800484a:	bd10      	pop	{r4, pc}
 800484c:	08006965 	.word	0x08006965
 8004850:	08006950 	.word	0x08006950
 8004854:	08006930 	.word	0x08006930

08004858 <__assert_func>:
 8004858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800485a:	4614      	mov	r4, r2
 800485c:	461a      	mov	r2, r3
 800485e:	4b09      	ldr	r3, [pc, #36]	; (8004884 <__assert_func+0x2c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4605      	mov	r5, r0
 8004864:	68d8      	ldr	r0, [r3, #12]
 8004866:	b14c      	cbz	r4, 800487c <__assert_func+0x24>
 8004868:	4b07      	ldr	r3, [pc, #28]	; (8004888 <__assert_func+0x30>)
 800486a:	9100      	str	r1, [sp, #0]
 800486c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004870:	4906      	ldr	r1, [pc, #24]	; (800488c <__assert_func+0x34>)
 8004872:	462b      	mov	r3, r5
 8004874:	f000 f8f8 	bl	8004a68 <fiprintf>
 8004878:	f001 f8be 	bl	80059f8 <abort>
 800487c:	4b04      	ldr	r3, [pc, #16]	; (8004890 <__assert_func+0x38>)
 800487e:	461c      	mov	r4, r3
 8004880:	e7f3      	b.n	800486a <__assert_func+0x12>
 8004882:	bf00      	nop
 8004884:	20000010 	.word	0x20000010
 8004888:	08006989 	.word	0x08006989
 800488c:	08006996 	.word	0x08006996
 8004890:	0800694f 	.word	0x0800694f

08004894 <div>:
 8004894:	2900      	cmp	r1, #0
 8004896:	b510      	push	{r4, lr}
 8004898:	fb91 f4f2 	sdiv	r4, r1, r2
 800489c:	fb02 1314 	mls	r3, r2, r4, r1
 80048a0:	db06      	blt.n	80048b0 <div+0x1c>
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	da01      	bge.n	80048aa <div+0x16>
 80048a6:	3401      	adds	r4, #1
 80048a8:	1a9b      	subs	r3, r3, r2
 80048aa:	e9c0 4300 	strd	r4, r3, [r0]
 80048ae:	bd10      	pop	{r4, pc}
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	bfc4      	itt	gt
 80048b4:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
 80048b8:	189b      	addgt	r3, r3, r2
 80048ba:	e7f6      	b.n	80048aa <div+0x16>

080048bc <std>:
 80048bc:	2300      	movs	r3, #0
 80048be:	b510      	push	{r4, lr}
 80048c0:	4604      	mov	r4, r0
 80048c2:	e9c0 3300 	strd	r3, r3, [r0]
 80048c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048ca:	6083      	str	r3, [r0, #8]
 80048cc:	8181      	strh	r1, [r0, #12]
 80048ce:	6643      	str	r3, [r0, #100]	; 0x64
 80048d0:	81c2      	strh	r2, [r0, #14]
 80048d2:	6183      	str	r3, [r0, #24]
 80048d4:	4619      	mov	r1, r3
 80048d6:	2208      	movs	r2, #8
 80048d8:	305c      	adds	r0, #92	; 0x5c
 80048da:	f7ff f96d 	bl	8003bb8 <memset>
 80048de:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <std+0x38>)
 80048e0:	6263      	str	r3, [r4, #36]	; 0x24
 80048e2:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <std+0x3c>)
 80048e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80048e6:	4b05      	ldr	r3, [pc, #20]	; (80048fc <std+0x40>)
 80048e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80048ea:	4b05      	ldr	r3, [pc, #20]	; (8004900 <std+0x44>)
 80048ec:	6224      	str	r4, [r4, #32]
 80048ee:	6323      	str	r3, [r4, #48]	; 0x30
 80048f0:	bd10      	pop	{r4, pc}
 80048f2:	bf00      	nop
 80048f4:	08005695 	.word	0x08005695
 80048f8:	080056bb 	.word	0x080056bb
 80048fc:	080056f3 	.word	0x080056f3
 8004900:	08005717 	.word	0x08005717

08004904 <_cleanup_r>:
 8004904:	4901      	ldr	r1, [pc, #4]	; (800490c <_cleanup_r+0x8>)
 8004906:	f000 b8c1 	b.w	8004a8c <_fwalk_reent>
 800490a:	bf00      	nop
 800490c:	08005b4d 	.word	0x08005b4d

08004910 <__sfmoreglue>:
 8004910:	b570      	push	{r4, r5, r6, lr}
 8004912:	2268      	movs	r2, #104	; 0x68
 8004914:	1e4d      	subs	r5, r1, #1
 8004916:	4355      	muls	r5, r2
 8004918:	460e      	mov	r6, r1
 800491a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800491e:	f7ff fc31 	bl	8004184 <_malloc_r>
 8004922:	4604      	mov	r4, r0
 8004924:	b140      	cbz	r0, 8004938 <__sfmoreglue+0x28>
 8004926:	2100      	movs	r1, #0
 8004928:	e9c0 1600 	strd	r1, r6, [r0]
 800492c:	300c      	adds	r0, #12
 800492e:	60a0      	str	r0, [r4, #8]
 8004930:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004934:	f7ff f940 	bl	8003bb8 <memset>
 8004938:	4620      	mov	r0, r4
 800493a:	bd70      	pop	{r4, r5, r6, pc}

0800493c <__sfp_lock_acquire>:
 800493c:	4801      	ldr	r0, [pc, #4]	; (8004944 <__sfp_lock_acquire+0x8>)
 800493e:	f000 b9bb 	b.w	8004cb8 <__retarget_lock_acquire_recursive>
 8004942:	bf00      	nop
 8004944:	200002a2 	.word	0x200002a2

08004948 <__sfp_lock_release>:
 8004948:	4801      	ldr	r0, [pc, #4]	; (8004950 <__sfp_lock_release+0x8>)
 800494a:	f000 b9b7 	b.w	8004cbc <__retarget_lock_release_recursive>
 800494e:	bf00      	nop
 8004950:	200002a2 	.word	0x200002a2

08004954 <__sinit_lock_acquire>:
 8004954:	4801      	ldr	r0, [pc, #4]	; (800495c <__sinit_lock_acquire+0x8>)
 8004956:	f000 b9af 	b.w	8004cb8 <__retarget_lock_acquire_recursive>
 800495a:	bf00      	nop
 800495c:	200002a3 	.word	0x200002a3

08004960 <__sinit_lock_release>:
 8004960:	4801      	ldr	r0, [pc, #4]	; (8004968 <__sinit_lock_release+0x8>)
 8004962:	f000 b9ab 	b.w	8004cbc <__retarget_lock_release_recursive>
 8004966:	bf00      	nop
 8004968:	200002a3 	.word	0x200002a3

0800496c <__sinit>:
 800496c:	b510      	push	{r4, lr}
 800496e:	4604      	mov	r4, r0
 8004970:	f7ff fff0 	bl	8004954 <__sinit_lock_acquire>
 8004974:	69a3      	ldr	r3, [r4, #24]
 8004976:	b11b      	cbz	r3, 8004980 <__sinit+0x14>
 8004978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800497c:	f7ff bff0 	b.w	8004960 <__sinit_lock_release>
 8004980:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004984:	6523      	str	r3, [r4, #80]	; 0x50
 8004986:	4b13      	ldr	r3, [pc, #76]	; (80049d4 <__sinit+0x68>)
 8004988:	4a13      	ldr	r2, [pc, #76]	; (80049d8 <__sinit+0x6c>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	62a2      	str	r2, [r4, #40]	; 0x28
 800498e:	42a3      	cmp	r3, r4
 8004990:	bf04      	itt	eq
 8004992:	2301      	moveq	r3, #1
 8004994:	61a3      	streq	r3, [r4, #24]
 8004996:	4620      	mov	r0, r4
 8004998:	f000 f820 	bl	80049dc <__sfp>
 800499c:	6060      	str	r0, [r4, #4]
 800499e:	4620      	mov	r0, r4
 80049a0:	f000 f81c 	bl	80049dc <__sfp>
 80049a4:	60a0      	str	r0, [r4, #8]
 80049a6:	4620      	mov	r0, r4
 80049a8:	f000 f818 	bl	80049dc <__sfp>
 80049ac:	2200      	movs	r2, #0
 80049ae:	60e0      	str	r0, [r4, #12]
 80049b0:	2104      	movs	r1, #4
 80049b2:	6860      	ldr	r0, [r4, #4]
 80049b4:	f7ff ff82 	bl	80048bc <std>
 80049b8:	68a0      	ldr	r0, [r4, #8]
 80049ba:	2201      	movs	r2, #1
 80049bc:	2109      	movs	r1, #9
 80049be:	f7ff ff7d 	bl	80048bc <std>
 80049c2:	68e0      	ldr	r0, [r4, #12]
 80049c4:	2202      	movs	r2, #2
 80049c6:	2112      	movs	r1, #18
 80049c8:	f7ff ff78 	bl	80048bc <std>
 80049cc:	2301      	movs	r3, #1
 80049ce:	61a3      	str	r3, [r4, #24]
 80049d0:	e7d2      	b.n	8004978 <__sinit+0xc>
 80049d2:	bf00      	nop
 80049d4:	08006760 	.word	0x08006760
 80049d8:	08004905 	.word	0x08004905

080049dc <__sfp>:
 80049dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049de:	4607      	mov	r7, r0
 80049e0:	f7ff ffac 	bl	800493c <__sfp_lock_acquire>
 80049e4:	4b1e      	ldr	r3, [pc, #120]	; (8004a60 <__sfp+0x84>)
 80049e6:	681e      	ldr	r6, [r3, #0]
 80049e8:	69b3      	ldr	r3, [r6, #24]
 80049ea:	b913      	cbnz	r3, 80049f2 <__sfp+0x16>
 80049ec:	4630      	mov	r0, r6
 80049ee:	f7ff ffbd 	bl	800496c <__sinit>
 80049f2:	3648      	adds	r6, #72	; 0x48
 80049f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80049f8:	3b01      	subs	r3, #1
 80049fa:	d503      	bpl.n	8004a04 <__sfp+0x28>
 80049fc:	6833      	ldr	r3, [r6, #0]
 80049fe:	b30b      	cbz	r3, 8004a44 <__sfp+0x68>
 8004a00:	6836      	ldr	r6, [r6, #0]
 8004a02:	e7f7      	b.n	80049f4 <__sfp+0x18>
 8004a04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a08:	b9d5      	cbnz	r5, 8004a40 <__sfp+0x64>
 8004a0a:	4b16      	ldr	r3, [pc, #88]	; (8004a64 <__sfp+0x88>)
 8004a0c:	60e3      	str	r3, [r4, #12]
 8004a0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004a12:	6665      	str	r5, [r4, #100]	; 0x64
 8004a14:	f000 f94e 	bl	8004cb4 <__retarget_lock_init_recursive>
 8004a18:	f7ff ff96 	bl	8004948 <__sfp_lock_release>
 8004a1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004a20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004a24:	6025      	str	r5, [r4, #0]
 8004a26:	61a5      	str	r5, [r4, #24]
 8004a28:	2208      	movs	r2, #8
 8004a2a:	4629      	mov	r1, r5
 8004a2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a30:	f7ff f8c2 	bl	8003bb8 <memset>
 8004a34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004a38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a40:	3468      	adds	r4, #104	; 0x68
 8004a42:	e7d9      	b.n	80049f8 <__sfp+0x1c>
 8004a44:	2104      	movs	r1, #4
 8004a46:	4638      	mov	r0, r7
 8004a48:	f7ff ff62 	bl	8004910 <__sfmoreglue>
 8004a4c:	4604      	mov	r4, r0
 8004a4e:	6030      	str	r0, [r6, #0]
 8004a50:	2800      	cmp	r0, #0
 8004a52:	d1d5      	bne.n	8004a00 <__sfp+0x24>
 8004a54:	f7ff ff78 	bl	8004948 <__sfp_lock_release>
 8004a58:	230c      	movs	r3, #12
 8004a5a:	603b      	str	r3, [r7, #0]
 8004a5c:	e7ee      	b.n	8004a3c <__sfp+0x60>
 8004a5e:	bf00      	nop
 8004a60:	08006760 	.word	0x08006760
 8004a64:	ffff0001 	.word	0xffff0001

08004a68 <fiprintf>:
 8004a68:	b40e      	push	{r1, r2, r3}
 8004a6a:	b503      	push	{r0, r1, lr}
 8004a6c:	4601      	mov	r1, r0
 8004a6e:	ab03      	add	r3, sp, #12
 8004a70:	4805      	ldr	r0, [pc, #20]	; (8004a88 <fiprintf+0x20>)
 8004a72:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a76:	6800      	ldr	r0, [r0, #0]
 8004a78:	9301      	str	r3, [sp, #4]
 8004a7a:	f000 fab3 	bl	8004fe4 <_vfiprintf_r>
 8004a7e:	b002      	add	sp, #8
 8004a80:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a84:	b003      	add	sp, #12
 8004a86:	4770      	bx	lr
 8004a88:	20000010 	.word	0x20000010

08004a8c <_fwalk_reent>:
 8004a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a90:	4606      	mov	r6, r0
 8004a92:	4688      	mov	r8, r1
 8004a94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004a98:	2700      	movs	r7, #0
 8004a9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a9e:	f1b9 0901 	subs.w	r9, r9, #1
 8004aa2:	d505      	bpl.n	8004ab0 <_fwalk_reent+0x24>
 8004aa4:	6824      	ldr	r4, [r4, #0]
 8004aa6:	2c00      	cmp	r4, #0
 8004aa8:	d1f7      	bne.n	8004a9a <_fwalk_reent+0xe>
 8004aaa:	4638      	mov	r0, r7
 8004aac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ab0:	89ab      	ldrh	r3, [r5, #12]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d907      	bls.n	8004ac6 <_fwalk_reent+0x3a>
 8004ab6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004aba:	3301      	adds	r3, #1
 8004abc:	d003      	beq.n	8004ac6 <_fwalk_reent+0x3a>
 8004abe:	4629      	mov	r1, r5
 8004ac0:	4630      	mov	r0, r6
 8004ac2:	47c0      	blx	r8
 8004ac4:	4307      	orrs	r7, r0
 8004ac6:	3568      	adds	r5, #104	; 0x68
 8004ac8:	e7e9      	b.n	8004a9e <_fwalk_reent+0x12>
	...

08004acc <_findenv_r>:
 8004acc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ad0:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8004b40 <_findenv_r+0x74>
 8004ad4:	4607      	mov	r7, r0
 8004ad6:	4689      	mov	r9, r1
 8004ad8:	4616      	mov	r6, r2
 8004ada:	f000 ffa5 	bl	8005a28 <__env_lock>
 8004ade:	f8da 4000 	ldr.w	r4, [sl]
 8004ae2:	b134      	cbz	r4, 8004af2 <_findenv_r+0x26>
 8004ae4:	464b      	mov	r3, r9
 8004ae6:	4698      	mov	r8, r3
 8004ae8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004aec:	b13a      	cbz	r2, 8004afe <_findenv_r+0x32>
 8004aee:	2a3d      	cmp	r2, #61	; 0x3d
 8004af0:	d1f9      	bne.n	8004ae6 <_findenv_r+0x1a>
 8004af2:	4638      	mov	r0, r7
 8004af4:	f000 ff9e 	bl	8005a34 <__env_unlock>
 8004af8:	2000      	movs	r0, #0
 8004afa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004afe:	eba8 0809 	sub.w	r8, r8, r9
 8004b02:	46a3      	mov	fp, r4
 8004b04:	f854 0b04 	ldr.w	r0, [r4], #4
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	d0f2      	beq.n	8004af2 <_findenv_r+0x26>
 8004b0c:	4642      	mov	r2, r8
 8004b0e:	4649      	mov	r1, r9
 8004b10:	f000 fe0d 	bl	800572e <strncmp>
 8004b14:	2800      	cmp	r0, #0
 8004b16:	d1f4      	bne.n	8004b02 <_findenv_r+0x36>
 8004b18:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8004b1c:	eb03 0508 	add.w	r5, r3, r8
 8004b20:	f813 3008 	ldrb.w	r3, [r3, r8]
 8004b24:	2b3d      	cmp	r3, #61	; 0x3d
 8004b26:	d1ec      	bne.n	8004b02 <_findenv_r+0x36>
 8004b28:	f8da 3000 	ldr.w	r3, [sl]
 8004b2c:	ebab 0303 	sub.w	r3, fp, r3
 8004b30:	109b      	asrs	r3, r3, #2
 8004b32:	4638      	mov	r0, r7
 8004b34:	6033      	str	r3, [r6, #0]
 8004b36:	f000 ff7d 	bl	8005a34 <__env_unlock>
 8004b3a:	1c68      	adds	r0, r5, #1
 8004b3c:	e7dd      	b.n	8004afa <_findenv_r+0x2e>
 8004b3e:	bf00      	nop
 8004b40:	20000000 	.word	0x20000000

08004b44 <_getenv_r>:
 8004b44:	b507      	push	{r0, r1, r2, lr}
 8004b46:	aa01      	add	r2, sp, #4
 8004b48:	f7ff ffc0 	bl	8004acc <_findenv_r>
 8004b4c:	b003      	add	sp, #12
 8004b4e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004b54 <__gettzinfo>:
 8004b54:	4800      	ldr	r0, [pc, #0]	; (8004b58 <__gettzinfo+0x4>)
 8004b56:	4770      	bx	lr
 8004b58:	20000080 	.word	0x20000080

08004b5c <gmtime_r>:
 8004b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b60:	e9d0 6700 	ldrd	r6, r7, [r0]
 8004b64:	460c      	mov	r4, r1
 8004b66:	4a4f      	ldr	r2, [pc, #316]	; (8004ca4 <gmtime_r+0x148>)
 8004b68:	2300      	movs	r3, #0
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	4639      	mov	r1, r7
 8004b6e:	f7fb fb97 	bl	80002a0 <__aeabi_ldivmod>
 8004b72:	4639      	mov	r1, r7
 8004b74:	4605      	mov	r5, r0
 8004b76:	4a4b      	ldr	r2, [pc, #300]	; (8004ca4 <gmtime_r+0x148>)
 8004b78:	4630      	mov	r0, r6
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f7fb fb90 	bl	80002a0 <__aeabi_ldivmod>
 8004b80:	2a00      	cmp	r2, #0
 8004b82:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8004b86:	bfb7      	itett	lt
 8004b88:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8004b8c:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 8004b90:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 8004b94:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8004b98:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8004b9c:	fbb2 f1f0 	udiv	r1, r2, r0
 8004ba0:	fb00 2211 	mls	r2, r0, r1, r2
 8004ba4:	203c      	movs	r0, #60	; 0x3c
 8004ba6:	60a1      	str	r1, [r4, #8]
 8004ba8:	fbb2 f1f0 	udiv	r1, r2, r0
 8004bac:	fb00 2211 	mls	r2, r0, r1, r2
 8004bb0:	6061      	str	r1, [r4, #4]
 8004bb2:	6022      	str	r2, [r4, #0]
 8004bb4:	2107      	movs	r1, #7
 8004bb6:	1cda      	adds	r2, r3, #3
 8004bb8:	fb92 f1f1 	sdiv	r1, r2, r1
 8004bbc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004bc0:	1a52      	subs	r2, r2, r1
 8004bc2:	bf48      	it	mi
 8004bc4:	3207      	addmi	r2, #7
 8004bc6:	4d38      	ldr	r5, [pc, #224]	; (8004ca8 <gmtime_r+0x14c>)
 8004bc8:	4838      	ldr	r0, [pc, #224]	; (8004cac <gmtime_r+0x150>)
 8004bca:	61a2      	str	r2, [r4, #24]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	bfb7      	itett	lt
 8004bd0:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 8004bd4:	fb93 f5f5 	sdivge	r5, r3, r5
 8004bd8:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 8004bdc:	fb92 f5f5 	sdivlt	r5, r2, r5
 8004be0:	fb00 3005 	mla	r0, r0, r5, r3
 8004be4:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8004be8:	fbb0 f2f2 	udiv	r2, r0, r2
 8004bec:	4402      	add	r2, r0
 8004bee:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8004bf2:	fbb0 f1f3 	udiv	r1, r0, r3
 8004bf6:	1a52      	subs	r2, r2, r1
 8004bf8:	f240 1c6d 	movw	ip, #365	; 0x16d
 8004bfc:	492c      	ldr	r1, [pc, #176]	; (8004cb0 <gmtime_r+0x154>)
 8004bfe:	fbb0 f1f1 	udiv	r1, r0, r1
 8004c02:	2764      	movs	r7, #100	; 0x64
 8004c04:	1a52      	subs	r2, r2, r1
 8004c06:	fbb2 f1fc 	udiv	r1, r2, ip
 8004c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0e:	fbb1 f6f7 	udiv	r6, r1, r7
 8004c12:	1af3      	subs	r3, r6, r3
 8004c14:	4403      	add	r3, r0
 8004c16:	fb0c 3311 	mls	r3, ip, r1, r3
 8004c1a:	2299      	movs	r2, #153	; 0x99
 8004c1c:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8004c20:	f10e 0e02 	add.w	lr, lr, #2
 8004c24:	f103 0c01 	add.w	ip, r3, #1
 8004c28:	fbbe f0f2 	udiv	r0, lr, r2
 8004c2c:	4342      	muls	r2, r0
 8004c2e:	3202      	adds	r2, #2
 8004c30:	f04f 0805 	mov.w	r8, #5
 8004c34:	fbb2 f2f8 	udiv	r2, r2, r8
 8004c38:	ebac 0c02 	sub.w	ip, ip, r2
 8004c3c:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8004c40:	4596      	cmp	lr, r2
 8004c42:	bf94      	ite	ls
 8004c44:	2202      	movls	r2, #2
 8004c46:	f06f 0209 	mvnhi.w	r2, #9
 8004c4a:	4410      	add	r0, r2
 8004c4c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004c50:	fb02 1505 	mla	r5, r2, r5, r1
 8004c54:	2801      	cmp	r0, #1
 8004c56:	bf98      	it	ls
 8004c58:	3501      	addls	r5, #1
 8004c5a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8004c5e:	d30d      	bcc.n	8004c7c <gmtime_r+0x120>
 8004c60:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8004c64:	61e3      	str	r3, [r4, #28]
 8004c66:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	e9c4 0504 	strd	r0, r5, [r4, #16]
 8004c70:	f8c4 c00c 	str.w	ip, [r4, #12]
 8004c74:	6223      	str	r3, [r4, #32]
 8004c76:	4620      	mov	r0, r4
 8004c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c7c:	078a      	lsls	r2, r1, #30
 8004c7e:	d102      	bne.n	8004c86 <gmtime_r+0x12a>
 8004c80:	fb07 1616 	mls	r6, r7, r6, r1
 8004c84:	b95e      	cbnz	r6, 8004c9e <gmtime_r+0x142>
 8004c86:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004c8a:	fbb1 f6f2 	udiv	r6, r1, r2
 8004c8e:	fb02 1216 	mls	r2, r2, r6, r1
 8004c92:	fab2 f282 	clz	r2, r2
 8004c96:	0952      	lsrs	r2, r2, #5
 8004c98:	333b      	adds	r3, #59	; 0x3b
 8004c9a:	4413      	add	r3, r2
 8004c9c:	e7e2      	b.n	8004c64 <gmtime_r+0x108>
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	e7fa      	b.n	8004c98 <gmtime_r+0x13c>
 8004ca2:	bf00      	nop
 8004ca4:	00015180 	.word	0x00015180
 8004ca8:	00023ab1 	.word	0x00023ab1
 8004cac:	fffdc54f 	.word	0xfffdc54f
 8004cb0:	00023ab0 	.word	0x00023ab0

08004cb4 <__retarget_lock_init_recursive>:
 8004cb4:	4770      	bx	lr

08004cb6 <__retarget_lock_acquire>:
 8004cb6:	4770      	bx	lr

08004cb8 <__retarget_lock_acquire_recursive>:
 8004cb8:	4770      	bx	lr

08004cba <__retarget_lock_release>:
 8004cba:	4770      	bx	lr

08004cbc <__retarget_lock_release_recursive>:
 8004cbc:	4770      	bx	lr
	...

08004cc0 <__malloc_lock>:
 8004cc0:	4801      	ldr	r0, [pc, #4]	; (8004cc8 <__malloc_lock+0x8>)
 8004cc2:	f7ff bff9 	b.w	8004cb8 <__retarget_lock_acquire_recursive>
 8004cc6:	bf00      	nop
 8004cc8:	200002a1 	.word	0x200002a1

08004ccc <__malloc_unlock>:
 8004ccc:	4801      	ldr	r0, [pc, #4]	; (8004cd4 <__malloc_unlock+0x8>)
 8004cce:	f7ff bff5 	b.w	8004cbc <__retarget_lock_release_recursive>
 8004cd2:	bf00      	nop
 8004cd4:	200002a1 	.word	0x200002a1

08004cd8 <__ssputs_r>:
 8004cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cdc:	688e      	ldr	r6, [r1, #8]
 8004cde:	429e      	cmp	r6, r3
 8004ce0:	4682      	mov	sl, r0
 8004ce2:	460c      	mov	r4, r1
 8004ce4:	4690      	mov	r8, r2
 8004ce6:	461f      	mov	r7, r3
 8004ce8:	d838      	bhi.n	8004d5c <__ssputs_r+0x84>
 8004cea:	898a      	ldrh	r2, [r1, #12]
 8004cec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004cf0:	d032      	beq.n	8004d58 <__ssputs_r+0x80>
 8004cf2:	6825      	ldr	r5, [r4, #0]
 8004cf4:	6909      	ldr	r1, [r1, #16]
 8004cf6:	eba5 0901 	sub.w	r9, r5, r1
 8004cfa:	6965      	ldr	r5, [r4, #20]
 8004cfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d04:	3301      	adds	r3, #1
 8004d06:	444b      	add	r3, r9
 8004d08:	106d      	asrs	r5, r5, #1
 8004d0a:	429d      	cmp	r5, r3
 8004d0c:	bf38      	it	cc
 8004d0e:	461d      	movcc	r5, r3
 8004d10:	0553      	lsls	r3, r2, #21
 8004d12:	d531      	bpl.n	8004d78 <__ssputs_r+0xa0>
 8004d14:	4629      	mov	r1, r5
 8004d16:	f7ff fa35 	bl	8004184 <_malloc_r>
 8004d1a:	4606      	mov	r6, r0
 8004d1c:	b950      	cbnz	r0, 8004d34 <__ssputs_r+0x5c>
 8004d1e:	230c      	movs	r3, #12
 8004d20:	f8ca 3000 	str.w	r3, [sl]
 8004d24:	89a3      	ldrh	r3, [r4, #12]
 8004d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d2a:	81a3      	strh	r3, [r4, #12]
 8004d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d34:	6921      	ldr	r1, [r4, #16]
 8004d36:	464a      	mov	r2, r9
 8004d38:	f000 ffbc 	bl	8005cb4 <memcpy>
 8004d3c:	89a3      	ldrh	r3, [r4, #12]
 8004d3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d46:	81a3      	strh	r3, [r4, #12]
 8004d48:	6126      	str	r6, [r4, #16]
 8004d4a:	6165      	str	r5, [r4, #20]
 8004d4c:	444e      	add	r6, r9
 8004d4e:	eba5 0509 	sub.w	r5, r5, r9
 8004d52:	6026      	str	r6, [r4, #0]
 8004d54:	60a5      	str	r5, [r4, #8]
 8004d56:	463e      	mov	r6, r7
 8004d58:	42be      	cmp	r6, r7
 8004d5a:	d900      	bls.n	8004d5e <__ssputs_r+0x86>
 8004d5c:	463e      	mov	r6, r7
 8004d5e:	6820      	ldr	r0, [r4, #0]
 8004d60:	4632      	mov	r2, r6
 8004d62:	4641      	mov	r1, r8
 8004d64:	f000 ffb4 	bl	8005cd0 <memmove>
 8004d68:	68a3      	ldr	r3, [r4, #8]
 8004d6a:	1b9b      	subs	r3, r3, r6
 8004d6c:	60a3      	str	r3, [r4, #8]
 8004d6e:	6823      	ldr	r3, [r4, #0]
 8004d70:	4433      	add	r3, r6
 8004d72:	6023      	str	r3, [r4, #0]
 8004d74:	2000      	movs	r0, #0
 8004d76:	e7db      	b.n	8004d30 <__ssputs_r+0x58>
 8004d78:	462a      	mov	r2, r5
 8004d7a:	f000 ffc3 	bl	8005d04 <_realloc_r>
 8004d7e:	4606      	mov	r6, r0
 8004d80:	2800      	cmp	r0, #0
 8004d82:	d1e1      	bne.n	8004d48 <__ssputs_r+0x70>
 8004d84:	6921      	ldr	r1, [r4, #16]
 8004d86:	4650      	mov	r0, sl
 8004d88:	f7ff f990 	bl	80040ac <_free_r>
 8004d8c:	e7c7      	b.n	8004d1e <__ssputs_r+0x46>
	...

08004d90 <_svfiprintf_r>:
 8004d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d94:	4698      	mov	r8, r3
 8004d96:	898b      	ldrh	r3, [r1, #12]
 8004d98:	061b      	lsls	r3, r3, #24
 8004d9a:	b09d      	sub	sp, #116	; 0x74
 8004d9c:	4607      	mov	r7, r0
 8004d9e:	460d      	mov	r5, r1
 8004da0:	4614      	mov	r4, r2
 8004da2:	d50e      	bpl.n	8004dc2 <_svfiprintf_r+0x32>
 8004da4:	690b      	ldr	r3, [r1, #16]
 8004da6:	b963      	cbnz	r3, 8004dc2 <_svfiprintf_r+0x32>
 8004da8:	2140      	movs	r1, #64	; 0x40
 8004daa:	f7ff f9eb 	bl	8004184 <_malloc_r>
 8004dae:	6028      	str	r0, [r5, #0]
 8004db0:	6128      	str	r0, [r5, #16]
 8004db2:	b920      	cbnz	r0, 8004dbe <_svfiprintf_r+0x2e>
 8004db4:	230c      	movs	r3, #12
 8004db6:	603b      	str	r3, [r7, #0]
 8004db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dbc:	e0d1      	b.n	8004f62 <_svfiprintf_r+0x1d2>
 8004dbe:	2340      	movs	r3, #64	; 0x40
 8004dc0:	616b      	str	r3, [r5, #20]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8004dc6:	2320      	movs	r3, #32
 8004dc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004dcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dd0:	2330      	movs	r3, #48	; 0x30
 8004dd2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004f7c <_svfiprintf_r+0x1ec>
 8004dd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004dda:	f04f 0901 	mov.w	r9, #1
 8004dde:	4623      	mov	r3, r4
 8004de0:	469a      	mov	sl, r3
 8004de2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004de6:	b10a      	cbz	r2, 8004dec <_svfiprintf_r+0x5c>
 8004de8:	2a25      	cmp	r2, #37	; 0x25
 8004dea:	d1f9      	bne.n	8004de0 <_svfiprintf_r+0x50>
 8004dec:	ebba 0b04 	subs.w	fp, sl, r4
 8004df0:	d00b      	beq.n	8004e0a <_svfiprintf_r+0x7a>
 8004df2:	465b      	mov	r3, fp
 8004df4:	4622      	mov	r2, r4
 8004df6:	4629      	mov	r1, r5
 8004df8:	4638      	mov	r0, r7
 8004dfa:	f7ff ff6d 	bl	8004cd8 <__ssputs_r>
 8004dfe:	3001      	adds	r0, #1
 8004e00:	f000 80aa 	beq.w	8004f58 <_svfiprintf_r+0x1c8>
 8004e04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e06:	445a      	add	r2, fp
 8004e08:	9209      	str	r2, [sp, #36]	; 0x24
 8004e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f000 80a2 	beq.w	8004f58 <_svfiprintf_r+0x1c8>
 8004e14:	2300      	movs	r3, #0
 8004e16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e1e:	f10a 0a01 	add.w	sl, sl, #1
 8004e22:	9304      	str	r3, [sp, #16]
 8004e24:	9307      	str	r3, [sp, #28]
 8004e26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e2a:	931a      	str	r3, [sp, #104]	; 0x68
 8004e2c:	4654      	mov	r4, sl
 8004e2e:	2205      	movs	r2, #5
 8004e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e34:	4851      	ldr	r0, [pc, #324]	; (8004f7c <_svfiprintf_r+0x1ec>)
 8004e36:	f7fb f9e3 	bl	8000200 <memchr>
 8004e3a:	9a04      	ldr	r2, [sp, #16]
 8004e3c:	b9d8      	cbnz	r0, 8004e76 <_svfiprintf_r+0xe6>
 8004e3e:	06d0      	lsls	r0, r2, #27
 8004e40:	bf44      	itt	mi
 8004e42:	2320      	movmi	r3, #32
 8004e44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e48:	0711      	lsls	r1, r2, #28
 8004e4a:	bf44      	itt	mi
 8004e4c:	232b      	movmi	r3, #43	; 0x2b
 8004e4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e52:	f89a 3000 	ldrb.w	r3, [sl]
 8004e56:	2b2a      	cmp	r3, #42	; 0x2a
 8004e58:	d015      	beq.n	8004e86 <_svfiprintf_r+0xf6>
 8004e5a:	9a07      	ldr	r2, [sp, #28]
 8004e5c:	4654      	mov	r4, sl
 8004e5e:	2000      	movs	r0, #0
 8004e60:	f04f 0c0a 	mov.w	ip, #10
 8004e64:	4621      	mov	r1, r4
 8004e66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e6a:	3b30      	subs	r3, #48	; 0x30
 8004e6c:	2b09      	cmp	r3, #9
 8004e6e:	d94e      	bls.n	8004f0e <_svfiprintf_r+0x17e>
 8004e70:	b1b0      	cbz	r0, 8004ea0 <_svfiprintf_r+0x110>
 8004e72:	9207      	str	r2, [sp, #28]
 8004e74:	e014      	b.n	8004ea0 <_svfiprintf_r+0x110>
 8004e76:	eba0 0308 	sub.w	r3, r0, r8
 8004e7a:	fa09 f303 	lsl.w	r3, r9, r3
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	9304      	str	r3, [sp, #16]
 8004e82:	46a2      	mov	sl, r4
 8004e84:	e7d2      	b.n	8004e2c <_svfiprintf_r+0x9c>
 8004e86:	9b03      	ldr	r3, [sp, #12]
 8004e88:	1d19      	adds	r1, r3, #4
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	9103      	str	r1, [sp, #12]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	bfbb      	ittet	lt
 8004e92:	425b      	neglt	r3, r3
 8004e94:	f042 0202 	orrlt.w	r2, r2, #2
 8004e98:	9307      	strge	r3, [sp, #28]
 8004e9a:	9307      	strlt	r3, [sp, #28]
 8004e9c:	bfb8      	it	lt
 8004e9e:	9204      	strlt	r2, [sp, #16]
 8004ea0:	7823      	ldrb	r3, [r4, #0]
 8004ea2:	2b2e      	cmp	r3, #46	; 0x2e
 8004ea4:	d10c      	bne.n	8004ec0 <_svfiprintf_r+0x130>
 8004ea6:	7863      	ldrb	r3, [r4, #1]
 8004ea8:	2b2a      	cmp	r3, #42	; 0x2a
 8004eaa:	d135      	bne.n	8004f18 <_svfiprintf_r+0x188>
 8004eac:	9b03      	ldr	r3, [sp, #12]
 8004eae:	1d1a      	adds	r2, r3, #4
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	9203      	str	r2, [sp, #12]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	bfb8      	it	lt
 8004eb8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004ebc:	3402      	adds	r4, #2
 8004ebe:	9305      	str	r3, [sp, #20]
 8004ec0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004f8c <_svfiprintf_r+0x1fc>
 8004ec4:	7821      	ldrb	r1, [r4, #0]
 8004ec6:	2203      	movs	r2, #3
 8004ec8:	4650      	mov	r0, sl
 8004eca:	f7fb f999 	bl	8000200 <memchr>
 8004ece:	b140      	cbz	r0, 8004ee2 <_svfiprintf_r+0x152>
 8004ed0:	2340      	movs	r3, #64	; 0x40
 8004ed2:	eba0 000a 	sub.w	r0, r0, sl
 8004ed6:	fa03 f000 	lsl.w	r0, r3, r0
 8004eda:	9b04      	ldr	r3, [sp, #16]
 8004edc:	4303      	orrs	r3, r0
 8004ede:	3401      	adds	r4, #1
 8004ee0:	9304      	str	r3, [sp, #16]
 8004ee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ee6:	4826      	ldr	r0, [pc, #152]	; (8004f80 <_svfiprintf_r+0x1f0>)
 8004ee8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004eec:	2206      	movs	r2, #6
 8004eee:	f7fb f987 	bl	8000200 <memchr>
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	d038      	beq.n	8004f68 <_svfiprintf_r+0x1d8>
 8004ef6:	4b23      	ldr	r3, [pc, #140]	; (8004f84 <_svfiprintf_r+0x1f4>)
 8004ef8:	bb1b      	cbnz	r3, 8004f42 <_svfiprintf_r+0x1b2>
 8004efa:	9b03      	ldr	r3, [sp, #12]
 8004efc:	3307      	adds	r3, #7
 8004efe:	f023 0307 	bic.w	r3, r3, #7
 8004f02:	3308      	adds	r3, #8
 8004f04:	9303      	str	r3, [sp, #12]
 8004f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f08:	4433      	add	r3, r6
 8004f0a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f0c:	e767      	b.n	8004dde <_svfiprintf_r+0x4e>
 8004f0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f12:	460c      	mov	r4, r1
 8004f14:	2001      	movs	r0, #1
 8004f16:	e7a5      	b.n	8004e64 <_svfiprintf_r+0xd4>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	3401      	adds	r4, #1
 8004f1c:	9305      	str	r3, [sp, #20]
 8004f1e:	4619      	mov	r1, r3
 8004f20:	f04f 0c0a 	mov.w	ip, #10
 8004f24:	4620      	mov	r0, r4
 8004f26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f2a:	3a30      	subs	r2, #48	; 0x30
 8004f2c:	2a09      	cmp	r2, #9
 8004f2e:	d903      	bls.n	8004f38 <_svfiprintf_r+0x1a8>
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0c5      	beq.n	8004ec0 <_svfiprintf_r+0x130>
 8004f34:	9105      	str	r1, [sp, #20]
 8004f36:	e7c3      	b.n	8004ec0 <_svfiprintf_r+0x130>
 8004f38:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f3c:	4604      	mov	r4, r0
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e7f0      	b.n	8004f24 <_svfiprintf_r+0x194>
 8004f42:	ab03      	add	r3, sp, #12
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	462a      	mov	r2, r5
 8004f48:	4b0f      	ldr	r3, [pc, #60]	; (8004f88 <_svfiprintf_r+0x1f8>)
 8004f4a:	a904      	add	r1, sp, #16
 8004f4c:	4638      	mov	r0, r7
 8004f4e:	f3af 8000 	nop.w
 8004f52:	1c42      	adds	r2, r0, #1
 8004f54:	4606      	mov	r6, r0
 8004f56:	d1d6      	bne.n	8004f06 <_svfiprintf_r+0x176>
 8004f58:	89ab      	ldrh	r3, [r5, #12]
 8004f5a:	065b      	lsls	r3, r3, #25
 8004f5c:	f53f af2c 	bmi.w	8004db8 <_svfiprintf_r+0x28>
 8004f60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f62:	b01d      	add	sp, #116	; 0x74
 8004f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f68:	ab03      	add	r3, sp, #12
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	462a      	mov	r2, r5
 8004f6e:	4b06      	ldr	r3, [pc, #24]	; (8004f88 <_svfiprintf_r+0x1f8>)
 8004f70:	a904      	add	r1, sp, #16
 8004f72:	4638      	mov	r0, r7
 8004f74:	f000 f9d4 	bl	8005320 <_printf_i>
 8004f78:	e7eb      	b.n	8004f52 <_svfiprintf_r+0x1c2>
 8004f7a:	bf00      	nop
 8004f7c:	08006a28 	.word	0x08006a28
 8004f80:	08006a32 	.word	0x08006a32
 8004f84:	00000000 	.word	0x00000000
 8004f88:	08004cd9 	.word	0x08004cd9
 8004f8c:	08006a2e 	.word	0x08006a2e

08004f90 <__sfputc_r>:
 8004f90:	6893      	ldr	r3, [r2, #8]
 8004f92:	3b01      	subs	r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	b410      	push	{r4}
 8004f98:	6093      	str	r3, [r2, #8]
 8004f9a:	da08      	bge.n	8004fae <__sfputc_r+0x1e>
 8004f9c:	6994      	ldr	r4, [r2, #24]
 8004f9e:	42a3      	cmp	r3, r4
 8004fa0:	db01      	blt.n	8004fa6 <__sfputc_r+0x16>
 8004fa2:	290a      	cmp	r1, #10
 8004fa4:	d103      	bne.n	8004fae <__sfputc_r+0x1e>
 8004fa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004faa:	f000 bc53 	b.w	8005854 <__swbuf_r>
 8004fae:	6813      	ldr	r3, [r2, #0]
 8004fb0:	1c58      	adds	r0, r3, #1
 8004fb2:	6010      	str	r0, [r2, #0]
 8004fb4:	7019      	strb	r1, [r3, #0]
 8004fb6:	4608      	mov	r0, r1
 8004fb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <__sfputs_r>:
 8004fbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fc0:	4606      	mov	r6, r0
 8004fc2:	460f      	mov	r7, r1
 8004fc4:	4614      	mov	r4, r2
 8004fc6:	18d5      	adds	r5, r2, r3
 8004fc8:	42ac      	cmp	r4, r5
 8004fca:	d101      	bne.n	8004fd0 <__sfputs_r+0x12>
 8004fcc:	2000      	movs	r0, #0
 8004fce:	e007      	b.n	8004fe0 <__sfputs_r+0x22>
 8004fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fd4:	463a      	mov	r2, r7
 8004fd6:	4630      	mov	r0, r6
 8004fd8:	f7ff ffda 	bl	8004f90 <__sfputc_r>
 8004fdc:	1c43      	adds	r3, r0, #1
 8004fde:	d1f3      	bne.n	8004fc8 <__sfputs_r+0xa>
 8004fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004fe4 <_vfiprintf_r>:
 8004fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe8:	460d      	mov	r5, r1
 8004fea:	b09d      	sub	sp, #116	; 0x74
 8004fec:	4614      	mov	r4, r2
 8004fee:	4698      	mov	r8, r3
 8004ff0:	4606      	mov	r6, r0
 8004ff2:	b118      	cbz	r0, 8004ffc <_vfiprintf_r+0x18>
 8004ff4:	6983      	ldr	r3, [r0, #24]
 8004ff6:	b90b      	cbnz	r3, 8004ffc <_vfiprintf_r+0x18>
 8004ff8:	f7ff fcb8 	bl	800496c <__sinit>
 8004ffc:	4b89      	ldr	r3, [pc, #548]	; (8005224 <_vfiprintf_r+0x240>)
 8004ffe:	429d      	cmp	r5, r3
 8005000:	d11b      	bne.n	800503a <_vfiprintf_r+0x56>
 8005002:	6875      	ldr	r5, [r6, #4]
 8005004:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005006:	07d9      	lsls	r1, r3, #31
 8005008:	d405      	bmi.n	8005016 <_vfiprintf_r+0x32>
 800500a:	89ab      	ldrh	r3, [r5, #12]
 800500c:	059a      	lsls	r2, r3, #22
 800500e:	d402      	bmi.n	8005016 <_vfiprintf_r+0x32>
 8005010:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005012:	f7ff fe51 	bl	8004cb8 <__retarget_lock_acquire_recursive>
 8005016:	89ab      	ldrh	r3, [r5, #12]
 8005018:	071b      	lsls	r3, r3, #28
 800501a:	d501      	bpl.n	8005020 <_vfiprintf_r+0x3c>
 800501c:	692b      	ldr	r3, [r5, #16]
 800501e:	b9eb      	cbnz	r3, 800505c <_vfiprintf_r+0x78>
 8005020:	4629      	mov	r1, r5
 8005022:	4630      	mov	r0, r6
 8005024:	f000 fc7a 	bl	800591c <__swsetup_r>
 8005028:	b1c0      	cbz	r0, 800505c <_vfiprintf_r+0x78>
 800502a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800502c:	07dc      	lsls	r4, r3, #31
 800502e:	d50e      	bpl.n	800504e <_vfiprintf_r+0x6a>
 8005030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005034:	b01d      	add	sp, #116	; 0x74
 8005036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800503a:	4b7b      	ldr	r3, [pc, #492]	; (8005228 <_vfiprintf_r+0x244>)
 800503c:	429d      	cmp	r5, r3
 800503e:	d101      	bne.n	8005044 <_vfiprintf_r+0x60>
 8005040:	68b5      	ldr	r5, [r6, #8]
 8005042:	e7df      	b.n	8005004 <_vfiprintf_r+0x20>
 8005044:	4b79      	ldr	r3, [pc, #484]	; (800522c <_vfiprintf_r+0x248>)
 8005046:	429d      	cmp	r5, r3
 8005048:	bf08      	it	eq
 800504a:	68f5      	ldreq	r5, [r6, #12]
 800504c:	e7da      	b.n	8005004 <_vfiprintf_r+0x20>
 800504e:	89ab      	ldrh	r3, [r5, #12]
 8005050:	0598      	lsls	r0, r3, #22
 8005052:	d4ed      	bmi.n	8005030 <_vfiprintf_r+0x4c>
 8005054:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005056:	f7ff fe31 	bl	8004cbc <__retarget_lock_release_recursive>
 800505a:	e7e9      	b.n	8005030 <_vfiprintf_r+0x4c>
 800505c:	2300      	movs	r3, #0
 800505e:	9309      	str	r3, [sp, #36]	; 0x24
 8005060:	2320      	movs	r3, #32
 8005062:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005066:	f8cd 800c 	str.w	r8, [sp, #12]
 800506a:	2330      	movs	r3, #48	; 0x30
 800506c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005230 <_vfiprintf_r+0x24c>
 8005070:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005074:	f04f 0901 	mov.w	r9, #1
 8005078:	4623      	mov	r3, r4
 800507a:	469a      	mov	sl, r3
 800507c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005080:	b10a      	cbz	r2, 8005086 <_vfiprintf_r+0xa2>
 8005082:	2a25      	cmp	r2, #37	; 0x25
 8005084:	d1f9      	bne.n	800507a <_vfiprintf_r+0x96>
 8005086:	ebba 0b04 	subs.w	fp, sl, r4
 800508a:	d00b      	beq.n	80050a4 <_vfiprintf_r+0xc0>
 800508c:	465b      	mov	r3, fp
 800508e:	4622      	mov	r2, r4
 8005090:	4629      	mov	r1, r5
 8005092:	4630      	mov	r0, r6
 8005094:	f7ff ff93 	bl	8004fbe <__sfputs_r>
 8005098:	3001      	adds	r0, #1
 800509a:	f000 80aa 	beq.w	80051f2 <_vfiprintf_r+0x20e>
 800509e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050a0:	445a      	add	r2, fp
 80050a2:	9209      	str	r2, [sp, #36]	; 0x24
 80050a4:	f89a 3000 	ldrb.w	r3, [sl]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 80a2 	beq.w	80051f2 <_vfiprintf_r+0x20e>
 80050ae:	2300      	movs	r3, #0
 80050b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050b8:	f10a 0a01 	add.w	sl, sl, #1
 80050bc:	9304      	str	r3, [sp, #16]
 80050be:	9307      	str	r3, [sp, #28]
 80050c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050c4:	931a      	str	r3, [sp, #104]	; 0x68
 80050c6:	4654      	mov	r4, sl
 80050c8:	2205      	movs	r2, #5
 80050ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050ce:	4858      	ldr	r0, [pc, #352]	; (8005230 <_vfiprintf_r+0x24c>)
 80050d0:	f7fb f896 	bl	8000200 <memchr>
 80050d4:	9a04      	ldr	r2, [sp, #16]
 80050d6:	b9d8      	cbnz	r0, 8005110 <_vfiprintf_r+0x12c>
 80050d8:	06d1      	lsls	r1, r2, #27
 80050da:	bf44      	itt	mi
 80050dc:	2320      	movmi	r3, #32
 80050de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050e2:	0713      	lsls	r3, r2, #28
 80050e4:	bf44      	itt	mi
 80050e6:	232b      	movmi	r3, #43	; 0x2b
 80050e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050ec:	f89a 3000 	ldrb.w	r3, [sl]
 80050f0:	2b2a      	cmp	r3, #42	; 0x2a
 80050f2:	d015      	beq.n	8005120 <_vfiprintf_r+0x13c>
 80050f4:	9a07      	ldr	r2, [sp, #28]
 80050f6:	4654      	mov	r4, sl
 80050f8:	2000      	movs	r0, #0
 80050fa:	f04f 0c0a 	mov.w	ip, #10
 80050fe:	4621      	mov	r1, r4
 8005100:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005104:	3b30      	subs	r3, #48	; 0x30
 8005106:	2b09      	cmp	r3, #9
 8005108:	d94e      	bls.n	80051a8 <_vfiprintf_r+0x1c4>
 800510a:	b1b0      	cbz	r0, 800513a <_vfiprintf_r+0x156>
 800510c:	9207      	str	r2, [sp, #28]
 800510e:	e014      	b.n	800513a <_vfiprintf_r+0x156>
 8005110:	eba0 0308 	sub.w	r3, r0, r8
 8005114:	fa09 f303 	lsl.w	r3, r9, r3
 8005118:	4313      	orrs	r3, r2
 800511a:	9304      	str	r3, [sp, #16]
 800511c:	46a2      	mov	sl, r4
 800511e:	e7d2      	b.n	80050c6 <_vfiprintf_r+0xe2>
 8005120:	9b03      	ldr	r3, [sp, #12]
 8005122:	1d19      	adds	r1, r3, #4
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	9103      	str	r1, [sp, #12]
 8005128:	2b00      	cmp	r3, #0
 800512a:	bfbb      	ittet	lt
 800512c:	425b      	neglt	r3, r3
 800512e:	f042 0202 	orrlt.w	r2, r2, #2
 8005132:	9307      	strge	r3, [sp, #28]
 8005134:	9307      	strlt	r3, [sp, #28]
 8005136:	bfb8      	it	lt
 8005138:	9204      	strlt	r2, [sp, #16]
 800513a:	7823      	ldrb	r3, [r4, #0]
 800513c:	2b2e      	cmp	r3, #46	; 0x2e
 800513e:	d10c      	bne.n	800515a <_vfiprintf_r+0x176>
 8005140:	7863      	ldrb	r3, [r4, #1]
 8005142:	2b2a      	cmp	r3, #42	; 0x2a
 8005144:	d135      	bne.n	80051b2 <_vfiprintf_r+0x1ce>
 8005146:	9b03      	ldr	r3, [sp, #12]
 8005148:	1d1a      	adds	r2, r3, #4
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	9203      	str	r2, [sp, #12]
 800514e:	2b00      	cmp	r3, #0
 8005150:	bfb8      	it	lt
 8005152:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005156:	3402      	adds	r4, #2
 8005158:	9305      	str	r3, [sp, #20]
 800515a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005240 <_vfiprintf_r+0x25c>
 800515e:	7821      	ldrb	r1, [r4, #0]
 8005160:	2203      	movs	r2, #3
 8005162:	4650      	mov	r0, sl
 8005164:	f7fb f84c 	bl	8000200 <memchr>
 8005168:	b140      	cbz	r0, 800517c <_vfiprintf_r+0x198>
 800516a:	2340      	movs	r3, #64	; 0x40
 800516c:	eba0 000a 	sub.w	r0, r0, sl
 8005170:	fa03 f000 	lsl.w	r0, r3, r0
 8005174:	9b04      	ldr	r3, [sp, #16]
 8005176:	4303      	orrs	r3, r0
 8005178:	3401      	adds	r4, #1
 800517a:	9304      	str	r3, [sp, #16]
 800517c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005180:	482c      	ldr	r0, [pc, #176]	; (8005234 <_vfiprintf_r+0x250>)
 8005182:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005186:	2206      	movs	r2, #6
 8005188:	f7fb f83a 	bl	8000200 <memchr>
 800518c:	2800      	cmp	r0, #0
 800518e:	d03f      	beq.n	8005210 <_vfiprintf_r+0x22c>
 8005190:	4b29      	ldr	r3, [pc, #164]	; (8005238 <_vfiprintf_r+0x254>)
 8005192:	bb1b      	cbnz	r3, 80051dc <_vfiprintf_r+0x1f8>
 8005194:	9b03      	ldr	r3, [sp, #12]
 8005196:	3307      	adds	r3, #7
 8005198:	f023 0307 	bic.w	r3, r3, #7
 800519c:	3308      	adds	r3, #8
 800519e:	9303      	str	r3, [sp, #12]
 80051a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051a2:	443b      	add	r3, r7
 80051a4:	9309      	str	r3, [sp, #36]	; 0x24
 80051a6:	e767      	b.n	8005078 <_vfiprintf_r+0x94>
 80051a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80051ac:	460c      	mov	r4, r1
 80051ae:	2001      	movs	r0, #1
 80051b0:	e7a5      	b.n	80050fe <_vfiprintf_r+0x11a>
 80051b2:	2300      	movs	r3, #0
 80051b4:	3401      	adds	r4, #1
 80051b6:	9305      	str	r3, [sp, #20]
 80051b8:	4619      	mov	r1, r3
 80051ba:	f04f 0c0a 	mov.w	ip, #10
 80051be:	4620      	mov	r0, r4
 80051c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051c4:	3a30      	subs	r2, #48	; 0x30
 80051c6:	2a09      	cmp	r2, #9
 80051c8:	d903      	bls.n	80051d2 <_vfiprintf_r+0x1ee>
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d0c5      	beq.n	800515a <_vfiprintf_r+0x176>
 80051ce:	9105      	str	r1, [sp, #20]
 80051d0:	e7c3      	b.n	800515a <_vfiprintf_r+0x176>
 80051d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80051d6:	4604      	mov	r4, r0
 80051d8:	2301      	movs	r3, #1
 80051da:	e7f0      	b.n	80051be <_vfiprintf_r+0x1da>
 80051dc:	ab03      	add	r3, sp, #12
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	462a      	mov	r2, r5
 80051e2:	4b16      	ldr	r3, [pc, #88]	; (800523c <_vfiprintf_r+0x258>)
 80051e4:	a904      	add	r1, sp, #16
 80051e6:	4630      	mov	r0, r6
 80051e8:	f3af 8000 	nop.w
 80051ec:	4607      	mov	r7, r0
 80051ee:	1c78      	adds	r0, r7, #1
 80051f0:	d1d6      	bne.n	80051a0 <_vfiprintf_r+0x1bc>
 80051f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051f4:	07d9      	lsls	r1, r3, #31
 80051f6:	d405      	bmi.n	8005204 <_vfiprintf_r+0x220>
 80051f8:	89ab      	ldrh	r3, [r5, #12]
 80051fa:	059a      	lsls	r2, r3, #22
 80051fc:	d402      	bmi.n	8005204 <_vfiprintf_r+0x220>
 80051fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005200:	f7ff fd5c 	bl	8004cbc <__retarget_lock_release_recursive>
 8005204:	89ab      	ldrh	r3, [r5, #12]
 8005206:	065b      	lsls	r3, r3, #25
 8005208:	f53f af12 	bmi.w	8005030 <_vfiprintf_r+0x4c>
 800520c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800520e:	e711      	b.n	8005034 <_vfiprintf_r+0x50>
 8005210:	ab03      	add	r3, sp, #12
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	462a      	mov	r2, r5
 8005216:	4b09      	ldr	r3, [pc, #36]	; (800523c <_vfiprintf_r+0x258>)
 8005218:	a904      	add	r1, sp, #16
 800521a:	4630      	mov	r0, r6
 800521c:	f000 f880 	bl	8005320 <_printf_i>
 8005220:	e7e4      	b.n	80051ec <_vfiprintf_r+0x208>
 8005222:	bf00      	nop
 8005224:	080069e8 	.word	0x080069e8
 8005228:	08006a08 	.word	0x08006a08
 800522c:	080069c8 	.word	0x080069c8
 8005230:	08006a28 	.word	0x08006a28
 8005234:	08006a32 	.word	0x08006a32
 8005238:	00000000 	.word	0x00000000
 800523c:	08004fbf 	.word	0x08004fbf
 8005240:	08006a2e 	.word	0x08006a2e

08005244 <_printf_common>:
 8005244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005248:	4616      	mov	r6, r2
 800524a:	4699      	mov	r9, r3
 800524c:	688a      	ldr	r2, [r1, #8]
 800524e:	690b      	ldr	r3, [r1, #16]
 8005250:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005254:	4293      	cmp	r3, r2
 8005256:	bfb8      	it	lt
 8005258:	4613      	movlt	r3, r2
 800525a:	6033      	str	r3, [r6, #0]
 800525c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005260:	4607      	mov	r7, r0
 8005262:	460c      	mov	r4, r1
 8005264:	b10a      	cbz	r2, 800526a <_printf_common+0x26>
 8005266:	3301      	adds	r3, #1
 8005268:	6033      	str	r3, [r6, #0]
 800526a:	6823      	ldr	r3, [r4, #0]
 800526c:	0699      	lsls	r1, r3, #26
 800526e:	bf42      	ittt	mi
 8005270:	6833      	ldrmi	r3, [r6, #0]
 8005272:	3302      	addmi	r3, #2
 8005274:	6033      	strmi	r3, [r6, #0]
 8005276:	6825      	ldr	r5, [r4, #0]
 8005278:	f015 0506 	ands.w	r5, r5, #6
 800527c:	d106      	bne.n	800528c <_printf_common+0x48>
 800527e:	f104 0a19 	add.w	sl, r4, #25
 8005282:	68e3      	ldr	r3, [r4, #12]
 8005284:	6832      	ldr	r2, [r6, #0]
 8005286:	1a9b      	subs	r3, r3, r2
 8005288:	42ab      	cmp	r3, r5
 800528a:	dc26      	bgt.n	80052da <_printf_common+0x96>
 800528c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005290:	1e13      	subs	r3, r2, #0
 8005292:	6822      	ldr	r2, [r4, #0]
 8005294:	bf18      	it	ne
 8005296:	2301      	movne	r3, #1
 8005298:	0692      	lsls	r2, r2, #26
 800529a:	d42b      	bmi.n	80052f4 <_printf_common+0xb0>
 800529c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052a0:	4649      	mov	r1, r9
 80052a2:	4638      	mov	r0, r7
 80052a4:	47c0      	blx	r8
 80052a6:	3001      	adds	r0, #1
 80052a8:	d01e      	beq.n	80052e8 <_printf_common+0xa4>
 80052aa:	6823      	ldr	r3, [r4, #0]
 80052ac:	68e5      	ldr	r5, [r4, #12]
 80052ae:	6832      	ldr	r2, [r6, #0]
 80052b0:	f003 0306 	and.w	r3, r3, #6
 80052b4:	2b04      	cmp	r3, #4
 80052b6:	bf08      	it	eq
 80052b8:	1aad      	subeq	r5, r5, r2
 80052ba:	68a3      	ldr	r3, [r4, #8]
 80052bc:	6922      	ldr	r2, [r4, #16]
 80052be:	bf0c      	ite	eq
 80052c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052c4:	2500      	movne	r5, #0
 80052c6:	4293      	cmp	r3, r2
 80052c8:	bfc4      	itt	gt
 80052ca:	1a9b      	subgt	r3, r3, r2
 80052cc:	18ed      	addgt	r5, r5, r3
 80052ce:	2600      	movs	r6, #0
 80052d0:	341a      	adds	r4, #26
 80052d2:	42b5      	cmp	r5, r6
 80052d4:	d11a      	bne.n	800530c <_printf_common+0xc8>
 80052d6:	2000      	movs	r0, #0
 80052d8:	e008      	b.n	80052ec <_printf_common+0xa8>
 80052da:	2301      	movs	r3, #1
 80052dc:	4652      	mov	r2, sl
 80052de:	4649      	mov	r1, r9
 80052e0:	4638      	mov	r0, r7
 80052e2:	47c0      	blx	r8
 80052e4:	3001      	adds	r0, #1
 80052e6:	d103      	bne.n	80052f0 <_printf_common+0xac>
 80052e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052f0:	3501      	adds	r5, #1
 80052f2:	e7c6      	b.n	8005282 <_printf_common+0x3e>
 80052f4:	18e1      	adds	r1, r4, r3
 80052f6:	1c5a      	adds	r2, r3, #1
 80052f8:	2030      	movs	r0, #48	; 0x30
 80052fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052fe:	4422      	add	r2, r4
 8005300:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005304:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005308:	3302      	adds	r3, #2
 800530a:	e7c7      	b.n	800529c <_printf_common+0x58>
 800530c:	2301      	movs	r3, #1
 800530e:	4622      	mov	r2, r4
 8005310:	4649      	mov	r1, r9
 8005312:	4638      	mov	r0, r7
 8005314:	47c0      	blx	r8
 8005316:	3001      	adds	r0, #1
 8005318:	d0e6      	beq.n	80052e8 <_printf_common+0xa4>
 800531a:	3601      	adds	r6, #1
 800531c:	e7d9      	b.n	80052d2 <_printf_common+0x8e>
	...

08005320 <_printf_i>:
 8005320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005324:	7e0f      	ldrb	r7, [r1, #24]
 8005326:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005328:	2f78      	cmp	r7, #120	; 0x78
 800532a:	4691      	mov	r9, r2
 800532c:	4680      	mov	r8, r0
 800532e:	460c      	mov	r4, r1
 8005330:	469a      	mov	sl, r3
 8005332:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005336:	d807      	bhi.n	8005348 <_printf_i+0x28>
 8005338:	2f62      	cmp	r7, #98	; 0x62
 800533a:	d80a      	bhi.n	8005352 <_printf_i+0x32>
 800533c:	2f00      	cmp	r7, #0
 800533e:	f000 80d8 	beq.w	80054f2 <_printf_i+0x1d2>
 8005342:	2f58      	cmp	r7, #88	; 0x58
 8005344:	f000 80a3 	beq.w	800548e <_printf_i+0x16e>
 8005348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800534c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005350:	e03a      	b.n	80053c8 <_printf_i+0xa8>
 8005352:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005356:	2b15      	cmp	r3, #21
 8005358:	d8f6      	bhi.n	8005348 <_printf_i+0x28>
 800535a:	a101      	add	r1, pc, #4	; (adr r1, 8005360 <_printf_i+0x40>)
 800535c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005360:	080053b9 	.word	0x080053b9
 8005364:	080053cd 	.word	0x080053cd
 8005368:	08005349 	.word	0x08005349
 800536c:	08005349 	.word	0x08005349
 8005370:	08005349 	.word	0x08005349
 8005374:	08005349 	.word	0x08005349
 8005378:	080053cd 	.word	0x080053cd
 800537c:	08005349 	.word	0x08005349
 8005380:	08005349 	.word	0x08005349
 8005384:	08005349 	.word	0x08005349
 8005388:	08005349 	.word	0x08005349
 800538c:	080054d9 	.word	0x080054d9
 8005390:	080053fd 	.word	0x080053fd
 8005394:	080054bb 	.word	0x080054bb
 8005398:	08005349 	.word	0x08005349
 800539c:	08005349 	.word	0x08005349
 80053a0:	080054fb 	.word	0x080054fb
 80053a4:	08005349 	.word	0x08005349
 80053a8:	080053fd 	.word	0x080053fd
 80053ac:	08005349 	.word	0x08005349
 80053b0:	08005349 	.word	0x08005349
 80053b4:	080054c3 	.word	0x080054c3
 80053b8:	682b      	ldr	r3, [r5, #0]
 80053ba:	1d1a      	adds	r2, r3, #4
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	602a      	str	r2, [r5, #0]
 80053c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053c8:	2301      	movs	r3, #1
 80053ca:	e0a3      	b.n	8005514 <_printf_i+0x1f4>
 80053cc:	6820      	ldr	r0, [r4, #0]
 80053ce:	6829      	ldr	r1, [r5, #0]
 80053d0:	0606      	lsls	r6, r0, #24
 80053d2:	f101 0304 	add.w	r3, r1, #4
 80053d6:	d50a      	bpl.n	80053ee <_printf_i+0xce>
 80053d8:	680e      	ldr	r6, [r1, #0]
 80053da:	602b      	str	r3, [r5, #0]
 80053dc:	2e00      	cmp	r6, #0
 80053de:	da03      	bge.n	80053e8 <_printf_i+0xc8>
 80053e0:	232d      	movs	r3, #45	; 0x2d
 80053e2:	4276      	negs	r6, r6
 80053e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053e8:	485e      	ldr	r0, [pc, #376]	; (8005564 <_printf_i+0x244>)
 80053ea:	230a      	movs	r3, #10
 80053ec:	e019      	b.n	8005422 <_printf_i+0x102>
 80053ee:	680e      	ldr	r6, [r1, #0]
 80053f0:	602b      	str	r3, [r5, #0]
 80053f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80053f6:	bf18      	it	ne
 80053f8:	b236      	sxthne	r6, r6
 80053fa:	e7ef      	b.n	80053dc <_printf_i+0xbc>
 80053fc:	682b      	ldr	r3, [r5, #0]
 80053fe:	6820      	ldr	r0, [r4, #0]
 8005400:	1d19      	adds	r1, r3, #4
 8005402:	6029      	str	r1, [r5, #0]
 8005404:	0601      	lsls	r1, r0, #24
 8005406:	d501      	bpl.n	800540c <_printf_i+0xec>
 8005408:	681e      	ldr	r6, [r3, #0]
 800540a:	e002      	b.n	8005412 <_printf_i+0xf2>
 800540c:	0646      	lsls	r6, r0, #25
 800540e:	d5fb      	bpl.n	8005408 <_printf_i+0xe8>
 8005410:	881e      	ldrh	r6, [r3, #0]
 8005412:	4854      	ldr	r0, [pc, #336]	; (8005564 <_printf_i+0x244>)
 8005414:	2f6f      	cmp	r7, #111	; 0x6f
 8005416:	bf0c      	ite	eq
 8005418:	2308      	moveq	r3, #8
 800541a:	230a      	movne	r3, #10
 800541c:	2100      	movs	r1, #0
 800541e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005422:	6865      	ldr	r5, [r4, #4]
 8005424:	60a5      	str	r5, [r4, #8]
 8005426:	2d00      	cmp	r5, #0
 8005428:	bfa2      	ittt	ge
 800542a:	6821      	ldrge	r1, [r4, #0]
 800542c:	f021 0104 	bicge.w	r1, r1, #4
 8005430:	6021      	strge	r1, [r4, #0]
 8005432:	b90e      	cbnz	r6, 8005438 <_printf_i+0x118>
 8005434:	2d00      	cmp	r5, #0
 8005436:	d04d      	beq.n	80054d4 <_printf_i+0x1b4>
 8005438:	4615      	mov	r5, r2
 800543a:	fbb6 f1f3 	udiv	r1, r6, r3
 800543e:	fb03 6711 	mls	r7, r3, r1, r6
 8005442:	5dc7      	ldrb	r7, [r0, r7]
 8005444:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005448:	4637      	mov	r7, r6
 800544a:	42bb      	cmp	r3, r7
 800544c:	460e      	mov	r6, r1
 800544e:	d9f4      	bls.n	800543a <_printf_i+0x11a>
 8005450:	2b08      	cmp	r3, #8
 8005452:	d10b      	bne.n	800546c <_printf_i+0x14c>
 8005454:	6823      	ldr	r3, [r4, #0]
 8005456:	07de      	lsls	r6, r3, #31
 8005458:	d508      	bpl.n	800546c <_printf_i+0x14c>
 800545a:	6923      	ldr	r3, [r4, #16]
 800545c:	6861      	ldr	r1, [r4, #4]
 800545e:	4299      	cmp	r1, r3
 8005460:	bfde      	ittt	le
 8005462:	2330      	movle	r3, #48	; 0x30
 8005464:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005468:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800546c:	1b52      	subs	r2, r2, r5
 800546e:	6122      	str	r2, [r4, #16]
 8005470:	f8cd a000 	str.w	sl, [sp]
 8005474:	464b      	mov	r3, r9
 8005476:	aa03      	add	r2, sp, #12
 8005478:	4621      	mov	r1, r4
 800547a:	4640      	mov	r0, r8
 800547c:	f7ff fee2 	bl	8005244 <_printf_common>
 8005480:	3001      	adds	r0, #1
 8005482:	d14c      	bne.n	800551e <_printf_i+0x1fe>
 8005484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005488:	b004      	add	sp, #16
 800548a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800548e:	4835      	ldr	r0, [pc, #212]	; (8005564 <_printf_i+0x244>)
 8005490:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005494:	6829      	ldr	r1, [r5, #0]
 8005496:	6823      	ldr	r3, [r4, #0]
 8005498:	f851 6b04 	ldr.w	r6, [r1], #4
 800549c:	6029      	str	r1, [r5, #0]
 800549e:	061d      	lsls	r5, r3, #24
 80054a0:	d514      	bpl.n	80054cc <_printf_i+0x1ac>
 80054a2:	07df      	lsls	r7, r3, #31
 80054a4:	bf44      	itt	mi
 80054a6:	f043 0320 	orrmi.w	r3, r3, #32
 80054aa:	6023      	strmi	r3, [r4, #0]
 80054ac:	b91e      	cbnz	r6, 80054b6 <_printf_i+0x196>
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	f023 0320 	bic.w	r3, r3, #32
 80054b4:	6023      	str	r3, [r4, #0]
 80054b6:	2310      	movs	r3, #16
 80054b8:	e7b0      	b.n	800541c <_printf_i+0xfc>
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	f043 0320 	orr.w	r3, r3, #32
 80054c0:	6023      	str	r3, [r4, #0]
 80054c2:	2378      	movs	r3, #120	; 0x78
 80054c4:	4828      	ldr	r0, [pc, #160]	; (8005568 <_printf_i+0x248>)
 80054c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054ca:	e7e3      	b.n	8005494 <_printf_i+0x174>
 80054cc:	0659      	lsls	r1, r3, #25
 80054ce:	bf48      	it	mi
 80054d0:	b2b6      	uxthmi	r6, r6
 80054d2:	e7e6      	b.n	80054a2 <_printf_i+0x182>
 80054d4:	4615      	mov	r5, r2
 80054d6:	e7bb      	b.n	8005450 <_printf_i+0x130>
 80054d8:	682b      	ldr	r3, [r5, #0]
 80054da:	6826      	ldr	r6, [r4, #0]
 80054dc:	6961      	ldr	r1, [r4, #20]
 80054de:	1d18      	adds	r0, r3, #4
 80054e0:	6028      	str	r0, [r5, #0]
 80054e2:	0635      	lsls	r5, r6, #24
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	d501      	bpl.n	80054ec <_printf_i+0x1cc>
 80054e8:	6019      	str	r1, [r3, #0]
 80054ea:	e002      	b.n	80054f2 <_printf_i+0x1d2>
 80054ec:	0670      	lsls	r0, r6, #25
 80054ee:	d5fb      	bpl.n	80054e8 <_printf_i+0x1c8>
 80054f0:	8019      	strh	r1, [r3, #0]
 80054f2:	2300      	movs	r3, #0
 80054f4:	6123      	str	r3, [r4, #16]
 80054f6:	4615      	mov	r5, r2
 80054f8:	e7ba      	b.n	8005470 <_printf_i+0x150>
 80054fa:	682b      	ldr	r3, [r5, #0]
 80054fc:	1d1a      	adds	r2, r3, #4
 80054fe:	602a      	str	r2, [r5, #0]
 8005500:	681d      	ldr	r5, [r3, #0]
 8005502:	6862      	ldr	r2, [r4, #4]
 8005504:	2100      	movs	r1, #0
 8005506:	4628      	mov	r0, r5
 8005508:	f7fa fe7a 	bl	8000200 <memchr>
 800550c:	b108      	cbz	r0, 8005512 <_printf_i+0x1f2>
 800550e:	1b40      	subs	r0, r0, r5
 8005510:	6060      	str	r0, [r4, #4]
 8005512:	6863      	ldr	r3, [r4, #4]
 8005514:	6123      	str	r3, [r4, #16]
 8005516:	2300      	movs	r3, #0
 8005518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800551c:	e7a8      	b.n	8005470 <_printf_i+0x150>
 800551e:	6923      	ldr	r3, [r4, #16]
 8005520:	462a      	mov	r2, r5
 8005522:	4649      	mov	r1, r9
 8005524:	4640      	mov	r0, r8
 8005526:	47d0      	blx	sl
 8005528:	3001      	adds	r0, #1
 800552a:	d0ab      	beq.n	8005484 <_printf_i+0x164>
 800552c:	6823      	ldr	r3, [r4, #0]
 800552e:	079b      	lsls	r3, r3, #30
 8005530:	d413      	bmi.n	800555a <_printf_i+0x23a>
 8005532:	68e0      	ldr	r0, [r4, #12]
 8005534:	9b03      	ldr	r3, [sp, #12]
 8005536:	4298      	cmp	r0, r3
 8005538:	bfb8      	it	lt
 800553a:	4618      	movlt	r0, r3
 800553c:	e7a4      	b.n	8005488 <_printf_i+0x168>
 800553e:	2301      	movs	r3, #1
 8005540:	4632      	mov	r2, r6
 8005542:	4649      	mov	r1, r9
 8005544:	4640      	mov	r0, r8
 8005546:	47d0      	blx	sl
 8005548:	3001      	adds	r0, #1
 800554a:	d09b      	beq.n	8005484 <_printf_i+0x164>
 800554c:	3501      	adds	r5, #1
 800554e:	68e3      	ldr	r3, [r4, #12]
 8005550:	9903      	ldr	r1, [sp, #12]
 8005552:	1a5b      	subs	r3, r3, r1
 8005554:	42ab      	cmp	r3, r5
 8005556:	dcf2      	bgt.n	800553e <_printf_i+0x21e>
 8005558:	e7eb      	b.n	8005532 <_printf_i+0x212>
 800555a:	2500      	movs	r5, #0
 800555c:	f104 0619 	add.w	r6, r4, #25
 8005560:	e7f5      	b.n	800554e <_printf_i+0x22e>
 8005562:	bf00      	nop
 8005564:	08006a39 	.word	0x08006a39
 8005568:	08006a4a 	.word	0x08006a4a

0800556c <_putc_r>:
 800556c:	b570      	push	{r4, r5, r6, lr}
 800556e:	460d      	mov	r5, r1
 8005570:	4614      	mov	r4, r2
 8005572:	4606      	mov	r6, r0
 8005574:	b118      	cbz	r0, 800557e <_putc_r+0x12>
 8005576:	6983      	ldr	r3, [r0, #24]
 8005578:	b90b      	cbnz	r3, 800557e <_putc_r+0x12>
 800557a:	f7ff f9f7 	bl	800496c <__sinit>
 800557e:	4b1c      	ldr	r3, [pc, #112]	; (80055f0 <_putc_r+0x84>)
 8005580:	429c      	cmp	r4, r3
 8005582:	d124      	bne.n	80055ce <_putc_r+0x62>
 8005584:	6874      	ldr	r4, [r6, #4]
 8005586:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005588:	07d8      	lsls	r0, r3, #31
 800558a:	d405      	bmi.n	8005598 <_putc_r+0x2c>
 800558c:	89a3      	ldrh	r3, [r4, #12]
 800558e:	0599      	lsls	r1, r3, #22
 8005590:	d402      	bmi.n	8005598 <_putc_r+0x2c>
 8005592:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005594:	f7ff fb90 	bl	8004cb8 <__retarget_lock_acquire_recursive>
 8005598:	68a3      	ldr	r3, [r4, #8]
 800559a:	3b01      	subs	r3, #1
 800559c:	2b00      	cmp	r3, #0
 800559e:	60a3      	str	r3, [r4, #8]
 80055a0:	da05      	bge.n	80055ae <_putc_r+0x42>
 80055a2:	69a2      	ldr	r2, [r4, #24]
 80055a4:	4293      	cmp	r3, r2
 80055a6:	db1c      	blt.n	80055e2 <_putc_r+0x76>
 80055a8:	b2eb      	uxtb	r3, r5
 80055aa:	2b0a      	cmp	r3, #10
 80055ac:	d019      	beq.n	80055e2 <_putc_r+0x76>
 80055ae:	6823      	ldr	r3, [r4, #0]
 80055b0:	1c5a      	adds	r2, r3, #1
 80055b2:	6022      	str	r2, [r4, #0]
 80055b4:	701d      	strb	r5, [r3, #0]
 80055b6:	b2ed      	uxtb	r5, r5
 80055b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055ba:	07da      	lsls	r2, r3, #31
 80055bc:	d405      	bmi.n	80055ca <_putc_r+0x5e>
 80055be:	89a3      	ldrh	r3, [r4, #12]
 80055c0:	059b      	lsls	r3, r3, #22
 80055c2:	d402      	bmi.n	80055ca <_putc_r+0x5e>
 80055c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055c6:	f7ff fb79 	bl	8004cbc <__retarget_lock_release_recursive>
 80055ca:	4628      	mov	r0, r5
 80055cc:	bd70      	pop	{r4, r5, r6, pc}
 80055ce:	4b09      	ldr	r3, [pc, #36]	; (80055f4 <_putc_r+0x88>)
 80055d0:	429c      	cmp	r4, r3
 80055d2:	d101      	bne.n	80055d8 <_putc_r+0x6c>
 80055d4:	68b4      	ldr	r4, [r6, #8]
 80055d6:	e7d6      	b.n	8005586 <_putc_r+0x1a>
 80055d8:	4b07      	ldr	r3, [pc, #28]	; (80055f8 <_putc_r+0x8c>)
 80055da:	429c      	cmp	r4, r3
 80055dc:	bf08      	it	eq
 80055de:	68f4      	ldreq	r4, [r6, #12]
 80055e0:	e7d1      	b.n	8005586 <_putc_r+0x1a>
 80055e2:	4629      	mov	r1, r5
 80055e4:	4622      	mov	r2, r4
 80055e6:	4630      	mov	r0, r6
 80055e8:	f000 f934 	bl	8005854 <__swbuf_r>
 80055ec:	4605      	mov	r5, r0
 80055ee:	e7e3      	b.n	80055b8 <_putc_r+0x4c>
 80055f0:	080069e8 	.word	0x080069e8
 80055f4:	08006a08 	.word	0x08006a08
 80055f8:	080069c8 	.word	0x080069c8

080055fc <siprintf>:
 80055fc:	b40e      	push	{r1, r2, r3}
 80055fe:	b500      	push	{lr}
 8005600:	b09c      	sub	sp, #112	; 0x70
 8005602:	ab1d      	add	r3, sp, #116	; 0x74
 8005604:	9002      	str	r0, [sp, #8]
 8005606:	9006      	str	r0, [sp, #24]
 8005608:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800560c:	4809      	ldr	r0, [pc, #36]	; (8005634 <siprintf+0x38>)
 800560e:	9107      	str	r1, [sp, #28]
 8005610:	9104      	str	r1, [sp, #16]
 8005612:	4909      	ldr	r1, [pc, #36]	; (8005638 <siprintf+0x3c>)
 8005614:	f853 2b04 	ldr.w	r2, [r3], #4
 8005618:	9105      	str	r1, [sp, #20]
 800561a:	6800      	ldr	r0, [r0, #0]
 800561c:	9301      	str	r3, [sp, #4]
 800561e:	a902      	add	r1, sp, #8
 8005620:	f7ff fbb6 	bl	8004d90 <_svfiprintf_r>
 8005624:	9b02      	ldr	r3, [sp, #8]
 8005626:	2200      	movs	r2, #0
 8005628:	701a      	strb	r2, [r3, #0]
 800562a:	b01c      	add	sp, #112	; 0x70
 800562c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005630:	b003      	add	sp, #12
 8005632:	4770      	bx	lr
 8005634:	20000010 	.word	0x20000010
 8005638:	ffff0208 	.word	0xffff0208

0800563c <siscanf>:
 800563c:	b40e      	push	{r1, r2, r3}
 800563e:	b510      	push	{r4, lr}
 8005640:	b09f      	sub	sp, #124	; 0x7c
 8005642:	ac21      	add	r4, sp, #132	; 0x84
 8005644:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005648:	f854 2b04 	ldr.w	r2, [r4], #4
 800564c:	9201      	str	r2, [sp, #4]
 800564e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8005652:	9004      	str	r0, [sp, #16]
 8005654:	9008      	str	r0, [sp, #32]
 8005656:	f7fa fdbb 	bl	80001d0 <strlen>
 800565a:	4b0c      	ldr	r3, [pc, #48]	; (800568c <siscanf+0x50>)
 800565c:	9005      	str	r0, [sp, #20]
 800565e:	9009      	str	r0, [sp, #36]	; 0x24
 8005660:	930d      	str	r3, [sp, #52]	; 0x34
 8005662:	480b      	ldr	r0, [pc, #44]	; (8005690 <siscanf+0x54>)
 8005664:	9a01      	ldr	r2, [sp, #4]
 8005666:	6800      	ldr	r0, [r0, #0]
 8005668:	9403      	str	r4, [sp, #12]
 800566a:	2300      	movs	r3, #0
 800566c:	9311      	str	r3, [sp, #68]	; 0x44
 800566e:	9316      	str	r3, [sp, #88]	; 0x58
 8005670:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005674:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005678:	a904      	add	r1, sp, #16
 800567a:	4623      	mov	r3, r4
 800567c:	f000 fbcc 	bl	8005e18 <__ssvfiscanf_r>
 8005680:	b01f      	add	sp, #124	; 0x7c
 8005682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005686:	b003      	add	sp, #12
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	080056b7 	.word	0x080056b7
 8005690:	20000010 	.word	0x20000010

08005694 <__sread>:
 8005694:	b510      	push	{r4, lr}
 8005696:	460c      	mov	r4, r1
 8005698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800569c:	f000 fe86 	bl	80063ac <_read_r>
 80056a0:	2800      	cmp	r0, #0
 80056a2:	bfab      	itete	ge
 80056a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80056a6:	89a3      	ldrhlt	r3, [r4, #12]
 80056a8:	181b      	addge	r3, r3, r0
 80056aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80056ae:	bfac      	ite	ge
 80056b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80056b2:	81a3      	strhlt	r3, [r4, #12]
 80056b4:	bd10      	pop	{r4, pc}

080056b6 <__seofread>:
 80056b6:	2000      	movs	r0, #0
 80056b8:	4770      	bx	lr

080056ba <__swrite>:
 80056ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056be:	461f      	mov	r7, r3
 80056c0:	898b      	ldrh	r3, [r1, #12]
 80056c2:	05db      	lsls	r3, r3, #23
 80056c4:	4605      	mov	r5, r0
 80056c6:	460c      	mov	r4, r1
 80056c8:	4616      	mov	r6, r2
 80056ca:	d505      	bpl.n	80056d8 <__swrite+0x1e>
 80056cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056d0:	2302      	movs	r3, #2
 80056d2:	2200      	movs	r2, #0
 80056d4:	f000 fa76 	bl	8005bc4 <_lseek_r>
 80056d8:	89a3      	ldrh	r3, [r4, #12]
 80056da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056e2:	81a3      	strh	r3, [r4, #12]
 80056e4:	4632      	mov	r2, r6
 80056e6:	463b      	mov	r3, r7
 80056e8:	4628      	mov	r0, r5
 80056ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056ee:	f000 b903 	b.w	80058f8 <_write_r>

080056f2 <__sseek>:
 80056f2:	b510      	push	{r4, lr}
 80056f4:	460c      	mov	r4, r1
 80056f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056fa:	f000 fa63 	bl	8005bc4 <_lseek_r>
 80056fe:	1c43      	adds	r3, r0, #1
 8005700:	89a3      	ldrh	r3, [r4, #12]
 8005702:	bf15      	itete	ne
 8005704:	6560      	strne	r0, [r4, #84]	; 0x54
 8005706:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800570a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800570e:	81a3      	strheq	r3, [r4, #12]
 8005710:	bf18      	it	ne
 8005712:	81a3      	strhne	r3, [r4, #12]
 8005714:	bd10      	pop	{r4, pc}

08005716 <__sclose>:
 8005716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800571a:	f000 b975 	b.w	8005a08 <_close_r>

0800571e <strcpy>:
 800571e:	4603      	mov	r3, r0
 8005720:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005724:	f803 2b01 	strb.w	r2, [r3], #1
 8005728:	2a00      	cmp	r2, #0
 800572a:	d1f9      	bne.n	8005720 <strcpy+0x2>
 800572c:	4770      	bx	lr

0800572e <strncmp>:
 800572e:	b510      	push	{r4, lr}
 8005730:	b17a      	cbz	r2, 8005752 <strncmp+0x24>
 8005732:	4603      	mov	r3, r0
 8005734:	3901      	subs	r1, #1
 8005736:	1884      	adds	r4, r0, r2
 8005738:	f813 0b01 	ldrb.w	r0, [r3], #1
 800573c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005740:	4290      	cmp	r0, r2
 8005742:	d101      	bne.n	8005748 <strncmp+0x1a>
 8005744:	42a3      	cmp	r3, r4
 8005746:	d101      	bne.n	800574c <strncmp+0x1e>
 8005748:	1a80      	subs	r0, r0, r2
 800574a:	bd10      	pop	{r4, pc}
 800574c:	2800      	cmp	r0, #0
 800574e:	d1f3      	bne.n	8005738 <strncmp+0xa>
 8005750:	e7fa      	b.n	8005748 <strncmp+0x1a>
 8005752:	4610      	mov	r0, r2
 8005754:	e7f9      	b.n	800574a <strncmp+0x1c>
	...

08005758 <_strtoul_l.constprop.0>:
 8005758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800575c:	4f36      	ldr	r7, [pc, #216]	; (8005838 <_strtoul_l.constprop.0+0xe0>)
 800575e:	4686      	mov	lr, r0
 8005760:	460d      	mov	r5, r1
 8005762:	4628      	mov	r0, r5
 8005764:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005768:	5de6      	ldrb	r6, [r4, r7]
 800576a:	f016 0608 	ands.w	r6, r6, #8
 800576e:	d1f8      	bne.n	8005762 <_strtoul_l.constprop.0+0xa>
 8005770:	2c2d      	cmp	r4, #45	; 0x2d
 8005772:	d12f      	bne.n	80057d4 <_strtoul_l.constprop.0+0x7c>
 8005774:	782c      	ldrb	r4, [r5, #0]
 8005776:	2601      	movs	r6, #1
 8005778:	1c85      	adds	r5, r0, #2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d057      	beq.n	800582e <_strtoul_l.constprop.0+0xd6>
 800577e:	2b10      	cmp	r3, #16
 8005780:	d109      	bne.n	8005796 <_strtoul_l.constprop.0+0x3e>
 8005782:	2c30      	cmp	r4, #48	; 0x30
 8005784:	d107      	bne.n	8005796 <_strtoul_l.constprop.0+0x3e>
 8005786:	7828      	ldrb	r0, [r5, #0]
 8005788:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800578c:	2858      	cmp	r0, #88	; 0x58
 800578e:	d149      	bne.n	8005824 <_strtoul_l.constprop.0+0xcc>
 8005790:	786c      	ldrb	r4, [r5, #1]
 8005792:	2310      	movs	r3, #16
 8005794:	3502      	adds	r5, #2
 8005796:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800579a:	2700      	movs	r7, #0
 800579c:	fbb8 f8f3 	udiv	r8, r8, r3
 80057a0:	fb03 f908 	mul.w	r9, r3, r8
 80057a4:	ea6f 0909 	mvn.w	r9, r9
 80057a8:	4638      	mov	r0, r7
 80057aa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80057ae:	f1bc 0f09 	cmp.w	ip, #9
 80057b2:	d814      	bhi.n	80057de <_strtoul_l.constprop.0+0x86>
 80057b4:	4664      	mov	r4, ip
 80057b6:	42a3      	cmp	r3, r4
 80057b8:	dd22      	ble.n	8005800 <_strtoul_l.constprop.0+0xa8>
 80057ba:	2f00      	cmp	r7, #0
 80057bc:	db1d      	blt.n	80057fa <_strtoul_l.constprop.0+0xa2>
 80057be:	4580      	cmp	r8, r0
 80057c0:	d31b      	bcc.n	80057fa <_strtoul_l.constprop.0+0xa2>
 80057c2:	d101      	bne.n	80057c8 <_strtoul_l.constprop.0+0x70>
 80057c4:	45a1      	cmp	r9, r4
 80057c6:	db18      	blt.n	80057fa <_strtoul_l.constprop.0+0xa2>
 80057c8:	fb00 4003 	mla	r0, r0, r3, r4
 80057cc:	2701      	movs	r7, #1
 80057ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80057d2:	e7ea      	b.n	80057aa <_strtoul_l.constprop.0+0x52>
 80057d4:	2c2b      	cmp	r4, #43	; 0x2b
 80057d6:	bf04      	itt	eq
 80057d8:	782c      	ldrbeq	r4, [r5, #0]
 80057da:	1c85      	addeq	r5, r0, #2
 80057dc:	e7cd      	b.n	800577a <_strtoul_l.constprop.0+0x22>
 80057de:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80057e2:	f1bc 0f19 	cmp.w	ip, #25
 80057e6:	d801      	bhi.n	80057ec <_strtoul_l.constprop.0+0x94>
 80057e8:	3c37      	subs	r4, #55	; 0x37
 80057ea:	e7e4      	b.n	80057b6 <_strtoul_l.constprop.0+0x5e>
 80057ec:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80057f0:	f1bc 0f19 	cmp.w	ip, #25
 80057f4:	d804      	bhi.n	8005800 <_strtoul_l.constprop.0+0xa8>
 80057f6:	3c57      	subs	r4, #87	; 0x57
 80057f8:	e7dd      	b.n	80057b6 <_strtoul_l.constprop.0+0x5e>
 80057fa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80057fe:	e7e6      	b.n	80057ce <_strtoul_l.constprop.0+0x76>
 8005800:	2f00      	cmp	r7, #0
 8005802:	da07      	bge.n	8005814 <_strtoul_l.constprop.0+0xbc>
 8005804:	2322      	movs	r3, #34	; 0x22
 8005806:	f8ce 3000 	str.w	r3, [lr]
 800580a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800580e:	b932      	cbnz	r2, 800581e <_strtoul_l.constprop.0+0xc6>
 8005810:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005814:	b106      	cbz	r6, 8005818 <_strtoul_l.constprop.0+0xc0>
 8005816:	4240      	negs	r0, r0
 8005818:	2a00      	cmp	r2, #0
 800581a:	d0f9      	beq.n	8005810 <_strtoul_l.constprop.0+0xb8>
 800581c:	b107      	cbz	r7, 8005820 <_strtoul_l.constprop.0+0xc8>
 800581e:	1e69      	subs	r1, r5, #1
 8005820:	6011      	str	r1, [r2, #0]
 8005822:	e7f5      	b.n	8005810 <_strtoul_l.constprop.0+0xb8>
 8005824:	2430      	movs	r4, #48	; 0x30
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1b5      	bne.n	8005796 <_strtoul_l.constprop.0+0x3e>
 800582a:	2308      	movs	r3, #8
 800582c:	e7b3      	b.n	8005796 <_strtoul_l.constprop.0+0x3e>
 800582e:	2c30      	cmp	r4, #48	; 0x30
 8005830:	d0a9      	beq.n	8005786 <_strtoul_l.constprop.0+0x2e>
 8005832:	230a      	movs	r3, #10
 8005834:	e7af      	b.n	8005796 <_strtoul_l.constprop.0+0x3e>
 8005836:	bf00      	nop
 8005838:	08006a5c 	.word	0x08006a5c

0800583c <_strtoul_r>:
 800583c:	f7ff bf8c 	b.w	8005758 <_strtoul_l.constprop.0>

08005840 <strtoul>:
 8005840:	4613      	mov	r3, r2
 8005842:	460a      	mov	r2, r1
 8005844:	4601      	mov	r1, r0
 8005846:	4802      	ldr	r0, [pc, #8]	; (8005850 <strtoul+0x10>)
 8005848:	6800      	ldr	r0, [r0, #0]
 800584a:	f7ff bf85 	b.w	8005758 <_strtoul_l.constprop.0>
 800584e:	bf00      	nop
 8005850:	20000010 	.word	0x20000010

08005854 <__swbuf_r>:
 8005854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005856:	460e      	mov	r6, r1
 8005858:	4614      	mov	r4, r2
 800585a:	4605      	mov	r5, r0
 800585c:	b118      	cbz	r0, 8005866 <__swbuf_r+0x12>
 800585e:	6983      	ldr	r3, [r0, #24]
 8005860:	b90b      	cbnz	r3, 8005866 <__swbuf_r+0x12>
 8005862:	f7ff f883 	bl	800496c <__sinit>
 8005866:	4b21      	ldr	r3, [pc, #132]	; (80058ec <__swbuf_r+0x98>)
 8005868:	429c      	cmp	r4, r3
 800586a:	d12b      	bne.n	80058c4 <__swbuf_r+0x70>
 800586c:	686c      	ldr	r4, [r5, #4]
 800586e:	69a3      	ldr	r3, [r4, #24]
 8005870:	60a3      	str	r3, [r4, #8]
 8005872:	89a3      	ldrh	r3, [r4, #12]
 8005874:	071a      	lsls	r2, r3, #28
 8005876:	d52f      	bpl.n	80058d8 <__swbuf_r+0x84>
 8005878:	6923      	ldr	r3, [r4, #16]
 800587a:	b36b      	cbz	r3, 80058d8 <__swbuf_r+0x84>
 800587c:	6923      	ldr	r3, [r4, #16]
 800587e:	6820      	ldr	r0, [r4, #0]
 8005880:	1ac0      	subs	r0, r0, r3
 8005882:	6963      	ldr	r3, [r4, #20]
 8005884:	b2f6      	uxtb	r6, r6
 8005886:	4283      	cmp	r3, r0
 8005888:	4637      	mov	r7, r6
 800588a:	dc04      	bgt.n	8005896 <__swbuf_r+0x42>
 800588c:	4621      	mov	r1, r4
 800588e:	4628      	mov	r0, r5
 8005890:	f000 f95c 	bl	8005b4c <_fflush_r>
 8005894:	bb30      	cbnz	r0, 80058e4 <__swbuf_r+0x90>
 8005896:	68a3      	ldr	r3, [r4, #8]
 8005898:	3b01      	subs	r3, #1
 800589a:	60a3      	str	r3, [r4, #8]
 800589c:	6823      	ldr	r3, [r4, #0]
 800589e:	1c5a      	adds	r2, r3, #1
 80058a0:	6022      	str	r2, [r4, #0]
 80058a2:	701e      	strb	r6, [r3, #0]
 80058a4:	6963      	ldr	r3, [r4, #20]
 80058a6:	3001      	adds	r0, #1
 80058a8:	4283      	cmp	r3, r0
 80058aa:	d004      	beq.n	80058b6 <__swbuf_r+0x62>
 80058ac:	89a3      	ldrh	r3, [r4, #12]
 80058ae:	07db      	lsls	r3, r3, #31
 80058b0:	d506      	bpl.n	80058c0 <__swbuf_r+0x6c>
 80058b2:	2e0a      	cmp	r6, #10
 80058b4:	d104      	bne.n	80058c0 <__swbuf_r+0x6c>
 80058b6:	4621      	mov	r1, r4
 80058b8:	4628      	mov	r0, r5
 80058ba:	f000 f947 	bl	8005b4c <_fflush_r>
 80058be:	b988      	cbnz	r0, 80058e4 <__swbuf_r+0x90>
 80058c0:	4638      	mov	r0, r7
 80058c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058c4:	4b0a      	ldr	r3, [pc, #40]	; (80058f0 <__swbuf_r+0x9c>)
 80058c6:	429c      	cmp	r4, r3
 80058c8:	d101      	bne.n	80058ce <__swbuf_r+0x7a>
 80058ca:	68ac      	ldr	r4, [r5, #8]
 80058cc:	e7cf      	b.n	800586e <__swbuf_r+0x1a>
 80058ce:	4b09      	ldr	r3, [pc, #36]	; (80058f4 <__swbuf_r+0xa0>)
 80058d0:	429c      	cmp	r4, r3
 80058d2:	bf08      	it	eq
 80058d4:	68ec      	ldreq	r4, [r5, #12]
 80058d6:	e7ca      	b.n	800586e <__swbuf_r+0x1a>
 80058d8:	4621      	mov	r1, r4
 80058da:	4628      	mov	r0, r5
 80058dc:	f000 f81e 	bl	800591c <__swsetup_r>
 80058e0:	2800      	cmp	r0, #0
 80058e2:	d0cb      	beq.n	800587c <__swbuf_r+0x28>
 80058e4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80058e8:	e7ea      	b.n	80058c0 <__swbuf_r+0x6c>
 80058ea:	bf00      	nop
 80058ec:	080069e8 	.word	0x080069e8
 80058f0:	08006a08 	.word	0x08006a08
 80058f4:	080069c8 	.word	0x080069c8

080058f8 <_write_r>:
 80058f8:	b538      	push	{r3, r4, r5, lr}
 80058fa:	4d07      	ldr	r5, [pc, #28]	; (8005918 <_write_r+0x20>)
 80058fc:	4604      	mov	r4, r0
 80058fe:	4608      	mov	r0, r1
 8005900:	4611      	mov	r1, r2
 8005902:	2200      	movs	r2, #0
 8005904:	602a      	str	r2, [r5, #0]
 8005906:	461a      	mov	r2, r3
 8005908:	f7fa fec4 	bl	8000694 <_write>
 800590c:	1c43      	adds	r3, r0, #1
 800590e:	d102      	bne.n	8005916 <_write_r+0x1e>
 8005910:	682b      	ldr	r3, [r5, #0]
 8005912:	b103      	cbz	r3, 8005916 <_write_r+0x1e>
 8005914:	6023      	str	r3, [r4, #0]
 8005916:	bd38      	pop	{r3, r4, r5, pc}
 8005918:	200002a8 	.word	0x200002a8

0800591c <__swsetup_r>:
 800591c:	4b32      	ldr	r3, [pc, #200]	; (80059e8 <__swsetup_r+0xcc>)
 800591e:	b570      	push	{r4, r5, r6, lr}
 8005920:	681d      	ldr	r5, [r3, #0]
 8005922:	4606      	mov	r6, r0
 8005924:	460c      	mov	r4, r1
 8005926:	b125      	cbz	r5, 8005932 <__swsetup_r+0x16>
 8005928:	69ab      	ldr	r3, [r5, #24]
 800592a:	b913      	cbnz	r3, 8005932 <__swsetup_r+0x16>
 800592c:	4628      	mov	r0, r5
 800592e:	f7ff f81d 	bl	800496c <__sinit>
 8005932:	4b2e      	ldr	r3, [pc, #184]	; (80059ec <__swsetup_r+0xd0>)
 8005934:	429c      	cmp	r4, r3
 8005936:	d10f      	bne.n	8005958 <__swsetup_r+0x3c>
 8005938:	686c      	ldr	r4, [r5, #4]
 800593a:	89a3      	ldrh	r3, [r4, #12]
 800593c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005940:	0719      	lsls	r1, r3, #28
 8005942:	d42c      	bmi.n	800599e <__swsetup_r+0x82>
 8005944:	06dd      	lsls	r5, r3, #27
 8005946:	d411      	bmi.n	800596c <__swsetup_r+0x50>
 8005948:	2309      	movs	r3, #9
 800594a:	6033      	str	r3, [r6, #0]
 800594c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005950:	81a3      	strh	r3, [r4, #12]
 8005952:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005956:	e03e      	b.n	80059d6 <__swsetup_r+0xba>
 8005958:	4b25      	ldr	r3, [pc, #148]	; (80059f0 <__swsetup_r+0xd4>)
 800595a:	429c      	cmp	r4, r3
 800595c:	d101      	bne.n	8005962 <__swsetup_r+0x46>
 800595e:	68ac      	ldr	r4, [r5, #8]
 8005960:	e7eb      	b.n	800593a <__swsetup_r+0x1e>
 8005962:	4b24      	ldr	r3, [pc, #144]	; (80059f4 <__swsetup_r+0xd8>)
 8005964:	429c      	cmp	r4, r3
 8005966:	bf08      	it	eq
 8005968:	68ec      	ldreq	r4, [r5, #12]
 800596a:	e7e6      	b.n	800593a <__swsetup_r+0x1e>
 800596c:	0758      	lsls	r0, r3, #29
 800596e:	d512      	bpl.n	8005996 <__swsetup_r+0x7a>
 8005970:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005972:	b141      	cbz	r1, 8005986 <__swsetup_r+0x6a>
 8005974:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005978:	4299      	cmp	r1, r3
 800597a:	d002      	beq.n	8005982 <__swsetup_r+0x66>
 800597c:	4630      	mov	r0, r6
 800597e:	f7fe fb95 	bl	80040ac <_free_r>
 8005982:	2300      	movs	r3, #0
 8005984:	6363      	str	r3, [r4, #52]	; 0x34
 8005986:	89a3      	ldrh	r3, [r4, #12]
 8005988:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800598c:	81a3      	strh	r3, [r4, #12]
 800598e:	2300      	movs	r3, #0
 8005990:	6063      	str	r3, [r4, #4]
 8005992:	6923      	ldr	r3, [r4, #16]
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	89a3      	ldrh	r3, [r4, #12]
 8005998:	f043 0308 	orr.w	r3, r3, #8
 800599c:	81a3      	strh	r3, [r4, #12]
 800599e:	6923      	ldr	r3, [r4, #16]
 80059a0:	b94b      	cbnz	r3, 80059b6 <__swsetup_r+0x9a>
 80059a2:	89a3      	ldrh	r3, [r4, #12]
 80059a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80059a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059ac:	d003      	beq.n	80059b6 <__swsetup_r+0x9a>
 80059ae:	4621      	mov	r1, r4
 80059b0:	4630      	mov	r0, r6
 80059b2:	f000 f93f 	bl	8005c34 <__smakebuf_r>
 80059b6:	89a0      	ldrh	r0, [r4, #12]
 80059b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059bc:	f010 0301 	ands.w	r3, r0, #1
 80059c0:	d00a      	beq.n	80059d8 <__swsetup_r+0xbc>
 80059c2:	2300      	movs	r3, #0
 80059c4:	60a3      	str	r3, [r4, #8]
 80059c6:	6963      	ldr	r3, [r4, #20]
 80059c8:	425b      	negs	r3, r3
 80059ca:	61a3      	str	r3, [r4, #24]
 80059cc:	6923      	ldr	r3, [r4, #16]
 80059ce:	b943      	cbnz	r3, 80059e2 <__swsetup_r+0xc6>
 80059d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80059d4:	d1ba      	bne.n	800594c <__swsetup_r+0x30>
 80059d6:	bd70      	pop	{r4, r5, r6, pc}
 80059d8:	0781      	lsls	r1, r0, #30
 80059da:	bf58      	it	pl
 80059dc:	6963      	ldrpl	r3, [r4, #20]
 80059de:	60a3      	str	r3, [r4, #8]
 80059e0:	e7f4      	b.n	80059cc <__swsetup_r+0xb0>
 80059e2:	2000      	movs	r0, #0
 80059e4:	e7f7      	b.n	80059d6 <__swsetup_r+0xba>
 80059e6:	bf00      	nop
 80059e8:	20000010 	.word	0x20000010
 80059ec:	080069e8 	.word	0x080069e8
 80059f0:	08006a08 	.word	0x08006a08
 80059f4:	080069c8 	.word	0x080069c8

080059f8 <abort>:
 80059f8:	b508      	push	{r3, lr}
 80059fa:	2006      	movs	r0, #6
 80059fc:	f000 fd48 	bl	8006490 <raise>
 8005a00:	2001      	movs	r0, #1
 8005a02:	f7fb fa7d 	bl	8000f00 <_exit>
	...

08005a08 <_close_r>:
 8005a08:	b538      	push	{r3, r4, r5, lr}
 8005a0a:	4d06      	ldr	r5, [pc, #24]	; (8005a24 <_close_r+0x1c>)
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	4604      	mov	r4, r0
 8005a10:	4608      	mov	r0, r1
 8005a12:	602b      	str	r3, [r5, #0]
 8005a14:	f7fb fa9b 	bl	8000f4e <_close>
 8005a18:	1c43      	adds	r3, r0, #1
 8005a1a:	d102      	bne.n	8005a22 <_close_r+0x1a>
 8005a1c:	682b      	ldr	r3, [r5, #0]
 8005a1e:	b103      	cbz	r3, 8005a22 <_close_r+0x1a>
 8005a20:	6023      	str	r3, [r4, #0]
 8005a22:	bd38      	pop	{r3, r4, r5, pc}
 8005a24:	200002a8 	.word	0x200002a8

08005a28 <__env_lock>:
 8005a28:	4801      	ldr	r0, [pc, #4]	; (8005a30 <__env_lock+0x8>)
 8005a2a:	f7ff b945 	b.w	8004cb8 <__retarget_lock_acquire_recursive>
 8005a2e:	bf00      	nop
 8005a30:	200002a0 	.word	0x200002a0

08005a34 <__env_unlock>:
 8005a34:	4801      	ldr	r0, [pc, #4]	; (8005a3c <__env_unlock+0x8>)
 8005a36:	f7ff b941 	b.w	8004cbc <__retarget_lock_release_recursive>
 8005a3a:	bf00      	nop
 8005a3c:	200002a0 	.word	0x200002a0

08005a40 <__sflush_r>:
 8005a40:	898a      	ldrh	r2, [r1, #12]
 8005a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a46:	4605      	mov	r5, r0
 8005a48:	0710      	lsls	r0, r2, #28
 8005a4a:	460c      	mov	r4, r1
 8005a4c:	d458      	bmi.n	8005b00 <__sflush_r+0xc0>
 8005a4e:	684b      	ldr	r3, [r1, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	dc05      	bgt.n	8005a60 <__sflush_r+0x20>
 8005a54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	dc02      	bgt.n	8005a60 <__sflush_r+0x20>
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a62:	2e00      	cmp	r6, #0
 8005a64:	d0f9      	beq.n	8005a5a <__sflush_r+0x1a>
 8005a66:	2300      	movs	r3, #0
 8005a68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a6c:	682f      	ldr	r7, [r5, #0]
 8005a6e:	602b      	str	r3, [r5, #0]
 8005a70:	d032      	beq.n	8005ad8 <__sflush_r+0x98>
 8005a72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a74:	89a3      	ldrh	r3, [r4, #12]
 8005a76:	075a      	lsls	r2, r3, #29
 8005a78:	d505      	bpl.n	8005a86 <__sflush_r+0x46>
 8005a7a:	6863      	ldr	r3, [r4, #4]
 8005a7c:	1ac0      	subs	r0, r0, r3
 8005a7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a80:	b10b      	cbz	r3, 8005a86 <__sflush_r+0x46>
 8005a82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a84:	1ac0      	subs	r0, r0, r3
 8005a86:	2300      	movs	r3, #0
 8005a88:	4602      	mov	r2, r0
 8005a8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a8c:	6a21      	ldr	r1, [r4, #32]
 8005a8e:	4628      	mov	r0, r5
 8005a90:	47b0      	blx	r6
 8005a92:	1c43      	adds	r3, r0, #1
 8005a94:	89a3      	ldrh	r3, [r4, #12]
 8005a96:	d106      	bne.n	8005aa6 <__sflush_r+0x66>
 8005a98:	6829      	ldr	r1, [r5, #0]
 8005a9a:	291d      	cmp	r1, #29
 8005a9c:	d82c      	bhi.n	8005af8 <__sflush_r+0xb8>
 8005a9e:	4a2a      	ldr	r2, [pc, #168]	; (8005b48 <__sflush_r+0x108>)
 8005aa0:	40ca      	lsrs	r2, r1
 8005aa2:	07d6      	lsls	r6, r2, #31
 8005aa4:	d528      	bpl.n	8005af8 <__sflush_r+0xb8>
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	6062      	str	r2, [r4, #4]
 8005aaa:	04d9      	lsls	r1, r3, #19
 8005aac:	6922      	ldr	r2, [r4, #16]
 8005aae:	6022      	str	r2, [r4, #0]
 8005ab0:	d504      	bpl.n	8005abc <__sflush_r+0x7c>
 8005ab2:	1c42      	adds	r2, r0, #1
 8005ab4:	d101      	bne.n	8005aba <__sflush_r+0x7a>
 8005ab6:	682b      	ldr	r3, [r5, #0]
 8005ab8:	b903      	cbnz	r3, 8005abc <__sflush_r+0x7c>
 8005aba:	6560      	str	r0, [r4, #84]	; 0x54
 8005abc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005abe:	602f      	str	r7, [r5, #0]
 8005ac0:	2900      	cmp	r1, #0
 8005ac2:	d0ca      	beq.n	8005a5a <__sflush_r+0x1a>
 8005ac4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ac8:	4299      	cmp	r1, r3
 8005aca:	d002      	beq.n	8005ad2 <__sflush_r+0x92>
 8005acc:	4628      	mov	r0, r5
 8005ace:	f7fe faed 	bl	80040ac <_free_r>
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	6360      	str	r0, [r4, #52]	; 0x34
 8005ad6:	e7c1      	b.n	8005a5c <__sflush_r+0x1c>
 8005ad8:	6a21      	ldr	r1, [r4, #32]
 8005ada:	2301      	movs	r3, #1
 8005adc:	4628      	mov	r0, r5
 8005ade:	47b0      	blx	r6
 8005ae0:	1c41      	adds	r1, r0, #1
 8005ae2:	d1c7      	bne.n	8005a74 <__sflush_r+0x34>
 8005ae4:	682b      	ldr	r3, [r5, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d0c4      	beq.n	8005a74 <__sflush_r+0x34>
 8005aea:	2b1d      	cmp	r3, #29
 8005aec:	d001      	beq.n	8005af2 <__sflush_r+0xb2>
 8005aee:	2b16      	cmp	r3, #22
 8005af0:	d101      	bne.n	8005af6 <__sflush_r+0xb6>
 8005af2:	602f      	str	r7, [r5, #0]
 8005af4:	e7b1      	b.n	8005a5a <__sflush_r+0x1a>
 8005af6:	89a3      	ldrh	r3, [r4, #12]
 8005af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005afc:	81a3      	strh	r3, [r4, #12]
 8005afe:	e7ad      	b.n	8005a5c <__sflush_r+0x1c>
 8005b00:	690f      	ldr	r7, [r1, #16]
 8005b02:	2f00      	cmp	r7, #0
 8005b04:	d0a9      	beq.n	8005a5a <__sflush_r+0x1a>
 8005b06:	0793      	lsls	r3, r2, #30
 8005b08:	680e      	ldr	r6, [r1, #0]
 8005b0a:	bf08      	it	eq
 8005b0c:	694b      	ldreq	r3, [r1, #20]
 8005b0e:	600f      	str	r7, [r1, #0]
 8005b10:	bf18      	it	ne
 8005b12:	2300      	movne	r3, #0
 8005b14:	eba6 0807 	sub.w	r8, r6, r7
 8005b18:	608b      	str	r3, [r1, #8]
 8005b1a:	f1b8 0f00 	cmp.w	r8, #0
 8005b1e:	dd9c      	ble.n	8005a5a <__sflush_r+0x1a>
 8005b20:	6a21      	ldr	r1, [r4, #32]
 8005b22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b24:	4643      	mov	r3, r8
 8005b26:	463a      	mov	r2, r7
 8005b28:	4628      	mov	r0, r5
 8005b2a:	47b0      	blx	r6
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	dc06      	bgt.n	8005b3e <__sflush_r+0xfe>
 8005b30:	89a3      	ldrh	r3, [r4, #12]
 8005b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b36:	81a3      	strh	r3, [r4, #12]
 8005b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b3c:	e78e      	b.n	8005a5c <__sflush_r+0x1c>
 8005b3e:	4407      	add	r7, r0
 8005b40:	eba8 0800 	sub.w	r8, r8, r0
 8005b44:	e7e9      	b.n	8005b1a <__sflush_r+0xda>
 8005b46:	bf00      	nop
 8005b48:	20400001 	.word	0x20400001

08005b4c <_fflush_r>:
 8005b4c:	b538      	push	{r3, r4, r5, lr}
 8005b4e:	690b      	ldr	r3, [r1, #16]
 8005b50:	4605      	mov	r5, r0
 8005b52:	460c      	mov	r4, r1
 8005b54:	b913      	cbnz	r3, 8005b5c <_fflush_r+0x10>
 8005b56:	2500      	movs	r5, #0
 8005b58:	4628      	mov	r0, r5
 8005b5a:	bd38      	pop	{r3, r4, r5, pc}
 8005b5c:	b118      	cbz	r0, 8005b66 <_fflush_r+0x1a>
 8005b5e:	6983      	ldr	r3, [r0, #24]
 8005b60:	b90b      	cbnz	r3, 8005b66 <_fflush_r+0x1a>
 8005b62:	f7fe ff03 	bl	800496c <__sinit>
 8005b66:	4b14      	ldr	r3, [pc, #80]	; (8005bb8 <_fflush_r+0x6c>)
 8005b68:	429c      	cmp	r4, r3
 8005b6a:	d11b      	bne.n	8005ba4 <_fflush_r+0x58>
 8005b6c:	686c      	ldr	r4, [r5, #4]
 8005b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d0ef      	beq.n	8005b56 <_fflush_r+0xa>
 8005b76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b78:	07d0      	lsls	r0, r2, #31
 8005b7a:	d404      	bmi.n	8005b86 <_fflush_r+0x3a>
 8005b7c:	0599      	lsls	r1, r3, #22
 8005b7e:	d402      	bmi.n	8005b86 <_fflush_r+0x3a>
 8005b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b82:	f7ff f899 	bl	8004cb8 <__retarget_lock_acquire_recursive>
 8005b86:	4628      	mov	r0, r5
 8005b88:	4621      	mov	r1, r4
 8005b8a:	f7ff ff59 	bl	8005a40 <__sflush_r>
 8005b8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b90:	07da      	lsls	r2, r3, #31
 8005b92:	4605      	mov	r5, r0
 8005b94:	d4e0      	bmi.n	8005b58 <_fflush_r+0xc>
 8005b96:	89a3      	ldrh	r3, [r4, #12]
 8005b98:	059b      	lsls	r3, r3, #22
 8005b9a:	d4dd      	bmi.n	8005b58 <_fflush_r+0xc>
 8005b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b9e:	f7ff f88d 	bl	8004cbc <__retarget_lock_release_recursive>
 8005ba2:	e7d9      	b.n	8005b58 <_fflush_r+0xc>
 8005ba4:	4b05      	ldr	r3, [pc, #20]	; (8005bbc <_fflush_r+0x70>)
 8005ba6:	429c      	cmp	r4, r3
 8005ba8:	d101      	bne.n	8005bae <_fflush_r+0x62>
 8005baa:	68ac      	ldr	r4, [r5, #8]
 8005bac:	e7df      	b.n	8005b6e <_fflush_r+0x22>
 8005bae:	4b04      	ldr	r3, [pc, #16]	; (8005bc0 <_fflush_r+0x74>)
 8005bb0:	429c      	cmp	r4, r3
 8005bb2:	bf08      	it	eq
 8005bb4:	68ec      	ldreq	r4, [r5, #12]
 8005bb6:	e7da      	b.n	8005b6e <_fflush_r+0x22>
 8005bb8:	080069e8 	.word	0x080069e8
 8005bbc:	08006a08 	.word	0x08006a08
 8005bc0:	080069c8 	.word	0x080069c8

08005bc4 <_lseek_r>:
 8005bc4:	b538      	push	{r3, r4, r5, lr}
 8005bc6:	4d07      	ldr	r5, [pc, #28]	; (8005be4 <_lseek_r+0x20>)
 8005bc8:	4604      	mov	r4, r0
 8005bca:	4608      	mov	r0, r1
 8005bcc:	4611      	mov	r1, r2
 8005bce:	2200      	movs	r2, #0
 8005bd0:	602a      	str	r2, [r5, #0]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f7fb f9e2 	bl	8000f9c <_lseek>
 8005bd8:	1c43      	adds	r3, r0, #1
 8005bda:	d102      	bne.n	8005be2 <_lseek_r+0x1e>
 8005bdc:	682b      	ldr	r3, [r5, #0]
 8005bde:	b103      	cbz	r3, 8005be2 <_lseek_r+0x1e>
 8005be0:	6023      	str	r3, [r4, #0]
 8005be2:	bd38      	pop	{r3, r4, r5, pc}
 8005be4:	200002a8 	.word	0x200002a8

08005be8 <__swhatbuf_r>:
 8005be8:	b570      	push	{r4, r5, r6, lr}
 8005bea:	460e      	mov	r6, r1
 8005bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bf0:	2900      	cmp	r1, #0
 8005bf2:	b096      	sub	sp, #88	; 0x58
 8005bf4:	4614      	mov	r4, r2
 8005bf6:	461d      	mov	r5, r3
 8005bf8:	da08      	bge.n	8005c0c <__swhatbuf_r+0x24>
 8005bfa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	602a      	str	r2, [r5, #0]
 8005c02:	061a      	lsls	r2, r3, #24
 8005c04:	d410      	bmi.n	8005c28 <__swhatbuf_r+0x40>
 8005c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c0a:	e00e      	b.n	8005c2a <__swhatbuf_r+0x42>
 8005c0c:	466a      	mov	r2, sp
 8005c0e:	f000 fd19 	bl	8006644 <_fstat_r>
 8005c12:	2800      	cmp	r0, #0
 8005c14:	dbf1      	blt.n	8005bfa <__swhatbuf_r+0x12>
 8005c16:	9a01      	ldr	r2, [sp, #4]
 8005c18:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005c1c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005c20:	425a      	negs	r2, r3
 8005c22:	415a      	adcs	r2, r3
 8005c24:	602a      	str	r2, [r5, #0]
 8005c26:	e7ee      	b.n	8005c06 <__swhatbuf_r+0x1e>
 8005c28:	2340      	movs	r3, #64	; 0x40
 8005c2a:	2000      	movs	r0, #0
 8005c2c:	6023      	str	r3, [r4, #0]
 8005c2e:	b016      	add	sp, #88	; 0x58
 8005c30:	bd70      	pop	{r4, r5, r6, pc}
	...

08005c34 <__smakebuf_r>:
 8005c34:	898b      	ldrh	r3, [r1, #12]
 8005c36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c38:	079d      	lsls	r5, r3, #30
 8005c3a:	4606      	mov	r6, r0
 8005c3c:	460c      	mov	r4, r1
 8005c3e:	d507      	bpl.n	8005c50 <__smakebuf_r+0x1c>
 8005c40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c44:	6023      	str	r3, [r4, #0]
 8005c46:	6123      	str	r3, [r4, #16]
 8005c48:	2301      	movs	r3, #1
 8005c4a:	6163      	str	r3, [r4, #20]
 8005c4c:	b002      	add	sp, #8
 8005c4e:	bd70      	pop	{r4, r5, r6, pc}
 8005c50:	ab01      	add	r3, sp, #4
 8005c52:	466a      	mov	r2, sp
 8005c54:	f7ff ffc8 	bl	8005be8 <__swhatbuf_r>
 8005c58:	9900      	ldr	r1, [sp, #0]
 8005c5a:	4605      	mov	r5, r0
 8005c5c:	4630      	mov	r0, r6
 8005c5e:	f7fe fa91 	bl	8004184 <_malloc_r>
 8005c62:	b948      	cbnz	r0, 8005c78 <__smakebuf_r+0x44>
 8005c64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c68:	059a      	lsls	r2, r3, #22
 8005c6a:	d4ef      	bmi.n	8005c4c <__smakebuf_r+0x18>
 8005c6c:	f023 0303 	bic.w	r3, r3, #3
 8005c70:	f043 0302 	orr.w	r3, r3, #2
 8005c74:	81a3      	strh	r3, [r4, #12]
 8005c76:	e7e3      	b.n	8005c40 <__smakebuf_r+0xc>
 8005c78:	4b0d      	ldr	r3, [pc, #52]	; (8005cb0 <__smakebuf_r+0x7c>)
 8005c7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c7c:	89a3      	ldrh	r3, [r4, #12]
 8005c7e:	6020      	str	r0, [r4, #0]
 8005c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c84:	81a3      	strh	r3, [r4, #12]
 8005c86:	9b00      	ldr	r3, [sp, #0]
 8005c88:	6163      	str	r3, [r4, #20]
 8005c8a:	9b01      	ldr	r3, [sp, #4]
 8005c8c:	6120      	str	r0, [r4, #16]
 8005c8e:	b15b      	cbz	r3, 8005ca8 <__smakebuf_r+0x74>
 8005c90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c94:	4630      	mov	r0, r6
 8005c96:	f000 fce7 	bl	8006668 <_isatty_r>
 8005c9a:	b128      	cbz	r0, 8005ca8 <__smakebuf_r+0x74>
 8005c9c:	89a3      	ldrh	r3, [r4, #12]
 8005c9e:	f023 0303 	bic.w	r3, r3, #3
 8005ca2:	f043 0301 	orr.w	r3, r3, #1
 8005ca6:	81a3      	strh	r3, [r4, #12]
 8005ca8:	89a0      	ldrh	r0, [r4, #12]
 8005caa:	4305      	orrs	r5, r0
 8005cac:	81a5      	strh	r5, [r4, #12]
 8005cae:	e7cd      	b.n	8005c4c <__smakebuf_r+0x18>
 8005cb0:	08004905 	.word	0x08004905

08005cb4 <memcpy>:
 8005cb4:	440a      	add	r2, r1
 8005cb6:	4291      	cmp	r1, r2
 8005cb8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005cbc:	d100      	bne.n	8005cc0 <memcpy+0xc>
 8005cbe:	4770      	bx	lr
 8005cc0:	b510      	push	{r4, lr}
 8005cc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cca:	4291      	cmp	r1, r2
 8005ccc:	d1f9      	bne.n	8005cc2 <memcpy+0xe>
 8005cce:	bd10      	pop	{r4, pc}

08005cd0 <memmove>:
 8005cd0:	4288      	cmp	r0, r1
 8005cd2:	b510      	push	{r4, lr}
 8005cd4:	eb01 0402 	add.w	r4, r1, r2
 8005cd8:	d902      	bls.n	8005ce0 <memmove+0x10>
 8005cda:	4284      	cmp	r4, r0
 8005cdc:	4623      	mov	r3, r4
 8005cde:	d807      	bhi.n	8005cf0 <memmove+0x20>
 8005ce0:	1e43      	subs	r3, r0, #1
 8005ce2:	42a1      	cmp	r1, r4
 8005ce4:	d008      	beq.n	8005cf8 <memmove+0x28>
 8005ce6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005cea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005cee:	e7f8      	b.n	8005ce2 <memmove+0x12>
 8005cf0:	4402      	add	r2, r0
 8005cf2:	4601      	mov	r1, r0
 8005cf4:	428a      	cmp	r2, r1
 8005cf6:	d100      	bne.n	8005cfa <memmove+0x2a>
 8005cf8:	bd10      	pop	{r4, pc}
 8005cfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005cfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d02:	e7f7      	b.n	8005cf4 <memmove+0x24>

08005d04 <_realloc_r>:
 8005d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d08:	4680      	mov	r8, r0
 8005d0a:	4614      	mov	r4, r2
 8005d0c:	460e      	mov	r6, r1
 8005d0e:	b921      	cbnz	r1, 8005d1a <_realloc_r+0x16>
 8005d10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d14:	4611      	mov	r1, r2
 8005d16:	f7fe ba35 	b.w	8004184 <_malloc_r>
 8005d1a:	b92a      	cbnz	r2, 8005d28 <_realloc_r+0x24>
 8005d1c:	f7fe f9c6 	bl	80040ac <_free_r>
 8005d20:	4625      	mov	r5, r4
 8005d22:	4628      	mov	r0, r5
 8005d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d28:	f000 fcae 	bl	8006688 <_malloc_usable_size_r>
 8005d2c:	4284      	cmp	r4, r0
 8005d2e:	4607      	mov	r7, r0
 8005d30:	d802      	bhi.n	8005d38 <_realloc_r+0x34>
 8005d32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005d36:	d812      	bhi.n	8005d5e <_realloc_r+0x5a>
 8005d38:	4621      	mov	r1, r4
 8005d3a:	4640      	mov	r0, r8
 8005d3c:	f7fe fa22 	bl	8004184 <_malloc_r>
 8005d40:	4605      	mov	r5, r0
 8005d42:	2800      	cmp	r0, #0
 8005d44:	d0ed      	beq.n	8005d22 <_realloc_r+0x1e>
 8005d46:	42bc      	cmp	r4, r7
 8005d48:	4622      	mov	r2, r4
 8005d4a:	4631      	mov	r1, r6
 8005d4c:	bf28      	it	cs
 8005d4e:	463a      	movcs	r2, r7
 8005d50:	f7ff ffb0 	bl	8005cb4 <memcpy>
 8005d54:	4631      	mov	r1, r6
 8005d56:	4640      	mov	r0, r8
 8005d58:	f7fe f9a8 	bl	80040ac <_free_r>
 8005d5c:	e7e1      	b.n	8005d22 <_realloc_r+0x1e>
 8005d5e:	4635      	mov	r5, r6
 8005d60:	e7df      	b.n	8005d22 <_realloc_r+0x1e>

08005d62 <_sungetc_r>:
 8005d62:	b538      	push	{r3, r4, r5, lr}
 8005d64:	1c4b      	adds	r3, r1, #1
 8005d66:	4614      	mov	r4, r2
 8005d68:	d103      	bne.n	8005d72 <_sungetc_r+0x10>
 8005d6a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005d6e:	4628      	mov	r0, r5
 8005d70:	bd38      	pop	{r3, r4, r5, pc}
 8005d72:	8993      	ldrh	r3, [r2, #12]
 8005d74:	f023 0320 	bic.w	r3, r3, #32
 8005d78:	8193      	strh	r3, [r2, #12]
 8005d7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d7c:	6852      	ldr	r2, [r2, #4]
 8005d7e:	b2cd      	uxtb	r5, r1
 8005d80:	b18b      	cbz	r3, 8005da6 <_sungetc_r+0x44>
 8005d82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d84:	4293      	cmp	r3, r2
 8005d86:	dd08      	ble.n	8005d9a <_sungetc_r+0x38>
 8005d88:	6823      	ldr	r3, [r4, #0]
 8005d8a:	1e5a      	subs	r2, r3, #1
 8005d8c:	6022      	str	r2, [r4, #0]
 8005d8e:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005d92:	6863      	ldr	r3, [r4, #4]
 8005d94:	3301      	adds	r3, #1
 8005d96:	6063      	str	r3, [r4, #4]
 8005d98:	e7e9      	b.n	8005d6e <_sungetc_r+0xc>
 8005d9a:	4621      	mov	r1, r4
 8005d9c:	f000 fc18 	bl	80065d0 <__submore>
 8005da0:	2800      	cmp	r0, #0
 8005da2:	d0f1      	beq.n	8005d88 <_sungetc_r+0x26>
 8005da4:	e7e1      	b.n	8005d6a <_sungetc_r+0x8>
 8005da6:	6921      	ldr	r1, [r4, #16]
 8005da8:	6823      	ldr	r3, [r4, #0]
 8005daa:	b151      	cbz	r1, 8005dc2 <_sungetc_r+0x60>
 8005dac:	4299      	cmp	r1, r3
 8005dae:	d208      	bcs.n	8005dc2 <_sungetc_r+0x60>
 8005db0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005db4:	42a9      	cmp	r1, r5
 8005db6:	d104      	bne.n	8005dc2 <_sungetc_r+0x60>
 8005db8:	3b01      	subs	r3, #1
 8005dba:	3201      	adds	r2, #1
 8005dbc:	6023      	str	r3, [r4, #0]
 8005dbe:	6062      	str	r2, [r4, #4]
 8005dc0:	e7d5      	b.n	8005d6e <_sungetc_r+0xc>
 8005dc2:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005dc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005dca:	6363      	str	r3, [r4, #52]	; 0x34
 8005dcc:	2303      	movs	r3, #3
 8005dce:	63a3      	str	r3, [r4, #56]	; 0x38
 8005dd0:	4623      	mov	r3, r4
 8005dd2:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005dd6:	6023      	str	r3, [r4, #0]
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e7dc      	b.n	8005d96 <_sungetc_r+0x34>

08005ddc <__ssrefill_r>:
 8005ddc:	b510      	push	{r4, lr}
 8005dde:	460c      	mov	r4, r1
 8005de0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005de2:	b169      	cbz	r1, 8005e00 <__ssrefill_r+0x24>
 8005de4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005de8:	4299      	cmp	r1, r3
 8005dea:	d001      	beq.n	8005df0 <__ssrefill_r+0x14>
 8005dec:	f7fe f95e 	bl	80040ac <_free_r>
 8005df0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005df2:	6063      	str	r3, [r4, #4]
 8005df4:	2000      	movs	r0, #0
 8005df6:	6360      	str	r0, [r4, #52]	; 0x34
 8005df8:	b113      	cbz	r3, 8005e00 <__ssrefill_r+0x24>
 8005dfa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005dfc:	6023      	str	r3, [r4, #0]
 8005dfe:	bd10      	pop	{r4, pc}
 8005e00:	6923      	ldr	r3, [r4, #16]
 8005e02:	6023      	str	r3, [r4, #0]
 8005e04:	2300      	movs	r3, #0
 8005e06:	6063      	str	r3, [r4, #4]
 8005e08:	89a3      	ldrh	r3, [r4, #12]
 8005e0a:	f043 0320 	orr.w	r3, r3, #32
 8005e0e:	81a3      	strh	r3, [r4, #12]
 8005e10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e14:	e7f3      	b.n	8005dfe <__ssrefill_r+0x22>
	...

08005e18 <__ssvfiscanf_r>:
 8005e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e1c:	460c      	mov	r4, r1
 8005e1e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8005e22:	2100      	movs	r1, #0
 8005e24:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005e28:	49a6      	ldr	r1, [pc, #664]	; (80060c4 <__ssvfiscanf_r+0x2ac>)
 8005e2a:	91a0      	str	r1, [sp, #640]	; 0x280
 8005e2c:	f10d 0804 	add.w	r8, sp, #4
 8005e30:	49a5      	ldr	r1, [pc, #660]	; (80060c8 <__ssvfiscanf_r+0x2b0>)
 8005e32:	4fa6      	ldr	r7, [pc, #664]	; (80060cc <__ssvfiscanf_r+0x2b4>)
 8005e34:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80060d0 <__ssvfiscanf_r+0x2b8>
 8005e38:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005e3c:	4606      	mov	r6, r0
 8005e3e:	91a1      	str	r1, [sp, #644]	; 0x284
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	7813      	ldrb	r3, [r2, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f000 815a 	beq.w	80060fe <__ssvfiscanf_r+0x2e6>
 8005e4a:	5dd9      	ldrb	r1, [r3, r7]
 8005e4c:	f011 0108 	ands.w	r1, r1, #8
 8005e50:	f102 0501 	add.w	r5, r2, #1
 8005e54:	d019      	beq.n	8005e8a <__ssvfiscanf_r+0x72>
 8005e56:	6863      	ldr	r3, [r4, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	dd0f      	ble.n	8005e7c <__ssvfiscanf_r+0x64>
 8005e5c:	6823      	ldr	r3, [r4, #0]
 8005e5e:	781a      	ldrb	r2, [r3, #0]
 8005e60:	5cba      	ldrb	r2, [r7, r2]
 8005e62:	0712      	lsls	r2, r2, #28
 8005e64:	d401      	bmi.n	8005e6a <__ssvfiscanf_r+0x52>
 8005e66:	462a      	mov	r2, r5
 8005e68:	e7eb      	b.n	8005e42 <__ssvfiscanf_r+0x2a>
 8005e6a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005e6c:	3201      	adds	r2, #1
 8005e6e:	9245      	str	r2, [sp, #276]	; 0x114
 8005e70:	6862      	ldr	r2, [r4, #4]
 8005e72:	3301      	adds	r3, #1
 8005e74:	3a01      	subs	r2, #1
 8005e76:	6062      	str	r2, [r4, #4]
 8005e78:	6023      	str	r3, [r4, #0]
 8005e7a:	e7ec      	b.n	8005e56 <__ssvfiscanf_r+0x3e>
 8005e7c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005e7e:	4621      	mov	r1, r4
 8005e80:	4630      	mov	r0, r6
 8005e82:	4798      	blx	r3
 8005e84:	2800      	cmp	r0, #0
 8005e86:	d0e9      	beq.n	8005e5c <__ssvfiscanf_r+0x44>
 8005e88:	e7ed      	b.n	8005e66 <__ssvfiscanf_r+0x4e>
 8005e8a:	2b25      	cmp	r3, #37	; 0x25
 8005e8c:	d012      	beq.n	8005eb4 <__ssvfiscanf_r+0x9c>
 8005e8e:	469a      	mov	sl, r3
 8005e90:	6863      	ldr	r3, [r4, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f340 8091 	ble.w	8005fba <__ssvfiscanf_r+0x1a2>
 8005e98:	6822      	ldr	r2, [r4, #0]
 8005e9a:	7813      	ldrb	r3, [r2, #0]
 8005e9c:	4553      	cmp	r3, sl
 8005e9e:	f040 812e 	bne.w	80060fe <__ssvfiscanf_r+0x2e6>
 8005ea2:	6863      	ldr	r3, [r4, #4]
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	6063      	str	r3, [r4, #4]
 8005ea8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005eaa:	3201      	adds	r2, #1
 8005eac:	3301      	adds	r3, #1
 8005eae:	6022      	str	r2, [r4, #0]
 8005eb0:	9345      	str	r3, [sp, #276]	; 0x114
 8005eb2:	e7d8      	b.n	8005e66 <__ssvfiscanf_r+0x4e>
 8005eb4:	9141      	str	r1, [sp, #260]	; 0x104
 8005eb6:	9143      	str	r1, [sp, #268]	; 0x10c
 8005eb8:	7853      	ldrb	r3, [r2, #1]
 8005eba:	2b2a      	cmp	r3, #42	; 0x2a
 8005ebc:	bf02      	ittt	eq
 8005ebe:	2310      	moveq	r3, #16
 8005ec0:	1c95      	addeq	r5, r2, #2
 8005ec2:	9341      	streq	r3, [sp, #260]	; 0x104
 8005ec4:	220a      	movs	r2, #10
 8005ec6:	46aa      	mov	sl, r5
 8005ec8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005ecc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005ed0:	2b09      	cmp	r3, #9
 8005ed2:	d91d      	bls.n	8005f10 <__ssvfiscanf_r+0xf8>
 8005ed4:	487e      	ldr	r0, [pc, #504]	; (80060d0 <__ssvfiscanf_r+0x2b8>)
 8005ed6:	2203      	movs	r2, #3
 8005ed8:	f7fa f992 	bl	8000200 <memchr>
 8005edc:	b140      	cbz	r0, 8005ef0 <__ssvfiscanf_r+0xd8>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	eba0 0009 	sub.w	r0, r0, r9
 8005ee4:	fa03 f000 	lsl.w	r0, r3, r0
 8005ee8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005eea:	4318      	orrs	r0, r3
 8005eec:	9041      	str	r0, [sp, #260]	; 0x104
 8005eee:	4655      	mov	r5, sl
 8005ef0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005ef4:	2b78      	cmp	r3, #120	; 0x78
 8005ef6:	d806      	bhi.n	8005f06 <__ssvfiscanf_r+0xee>
 8005ef8:	2b57      	cmp	r3, #87	; 0x57
 8005efa:	d810      	bhi.n	8005f1e <__ssvfiscanf_r+0x106>
 8005efc:	2b25      	cmp	r3, #37	; 0x25
 8005efe:	d0c6      	beq.n	8005e8e <__ssvfiscanf_r+0x76>
 8005f00:	d856      	bhi.n	8005fb0 <__ssvfiscanf_r+0x198>
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d064      	beq.n	8005fd0 <__ssvfiscanf_r+0x1b8>
 8005f06:	2303      	movs	r3, #3
 8005f08:	9347      	str	r3, [sp, #284]	; 0x11c
 8005f0a:	230a      	movs	r3, #10
 8005f0c:	9342      	str	r3, [sp, #264]	; 0x108
 8005f0e:	e071      	b.n	8005ff4 <__ssvfiscanf_r+0x1dc>
 8005f10:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005f12:	fb02 1103 	mla	r1, r2, r3, r1
 8005f16:	3930      	subs	r1, #48	; 0x30
 8005f18:	9143      	str	r1, [sp, #268]	; 0x10c
 8005f1a:	4655      	mov	r5, sl
 8005f1c:	e7d3      	b.n	8005ec6 <__ssvfiscanf_r+0xae>
 8005f1e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005f22:	2a20      	cmp	r2, #32
 8005f24:	d8ef      	bhi.n	8005f06 <__ssvfiscanf_r+0xee>
 8005f26:	a101      	add	r1, pc, #4	; (adr r1, 8005f2c <__ssvfiscanf_r+0x114>)
 8005f28:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005f2c:	08005fdf 	.word	0x08005fdf
 8005f30:	08005f07 	.word	0x08005f07
 8005f34:	08005f07 	.word	0x08005f07
 8005f38:	0800603d 	.word	0x0800603d
 8005f3c:	08005f07 	.word	0x08005f07
 8005f40:	08005f07 	.word	0x08005f07
 8005f44:	08005f07 	.word	0x08005f07
 8005f48:	08005f07 	.word	0x08005f07
 8005f4c:	08005f07 	.word	0x08005f07
 8005f50:	08005f07 	.word	0x08005f07
 8005f54:	08005f07 	.word	0x08005f07
 8005f58:	08006053 	.word	0x08006053
 8005f5c:	08006029 	.word	0x08006029
 8005f60:	08005fb7 	.word	0x08005fb7
 8005f64:	08005fb7 	.word	0x08005fb7
 8005f68:	08005fb7 	.word	0x08005fb7
 8005f6c:	08005f07 	.word	0x08005f07
 8005f70:	0800602d 	.word	0x0800602d
 8005f74:	08005f07 	.word	0x08005f07
 8005f78:	08005f07 	.word	0x08005f07
 8005f7c:	08005f07 	.word	0x08005f07
 8005f80:	08005f07 	.word	0x08005f07
 8005f84:	08006063 	.word	0x08006063
 8005f88:	08006035 	.word	0x08006035
 8005f8c:	08005fd7 	.word	0x08005fd7
 8005f90:	08005f07 	.word	0x08005f07
 8005f94:	08005f07 	.word	0x08005f07
 8005f98:	0800605f 	.word	0x0800605f
 8005f9c:	08005f07 	.word	0x08005f07
 8005fa0:	08006029 	.word	0x08006029
 8005fa4:	08005f07 	.word	0x08005f07
 8005fa8:	08005f07 	.word	0x08005f07
 8005fac:	08005fdf 	.word	0x08005fdf
 8005fb0:	3b45      	subs	r3, #69	; 0x45
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d8a7      	bhi.n	8005f06 <__ssvfiscanf_r+0xee>
 8005fb6:	2305      	movs	r3, #5
 8005fb8:	e01b      	b.n	8005ff2 <__ssvfiscanf_r+0x1da>
 8005fba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005fbc:	4621      	mov	r1, r4
 8005fbe:	4630      	mov	r0, r6
 8005fc0:	4798      	blx	r3
 8005fc2:	2800      	cmp	r0, #0
 8005fc4:	f43f af68 	beq.w	8005e98 <__ssvfiscanf_r+0x80>
 8005fc8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005fca:	2800      	cmp	r0, #0
 8005fcc:	f040 808d 	bne.w	80060ea <__ssvfiscanf_r+0x2d2>
 8005fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fd4:	e08f      	b.n	80060f6 <__ssvfiscanf_r+0x2de>
 8005fd6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005fd8:	f042 0220 	orr.w	r2, r2, #32
 8005fdc:	9241      	str	r2, [sp, #260]	; 0x104
 8005fde:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005fe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fe4:	9241      	str	r2, [sp, #260]	; 0x104
 8005fe6:	2210      	movs	r2, #16
 8005fe8:	2b6f      	cmp	r3, #111	; 0x6f
 8005fea:	9242      	str	r2, [sp, #264]	; 0x108
 8005fec:	bf34      	ite	cc
 8005fee:	2303      	movcc	r3, #3
 8005ff0:	2304      	movcs	r3, #4
 8005ff2:	9347      	str	r3, [sp, #284]	; 0x11c
 8005ff4:	6863      	ldr	r3, [r4, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	dd42      	ble.n	8006080 <__ssvfiscanf_r+0x268>
 8005ffa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005ffc:	0659      	lsls	r1, r3, #25
 8005ffe:	d404      	bmi.n	800600a <__ssvfiscanf_r+0x1f2>
 8006000:	6823      	ldr	r3, [r4, #0]
 8006002:	781a      	ldrb	r2, [r3, #0]
 8006004:	5cba      	ldrb	r2, [r7, r2]
 8006006:	0712      	lsls	r2, r2, #28
 8006008:	d441      	bmi.n	800608e <__ssvfiscanf_r+0x276>
 800600a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800600c:	2b02      	cmp	r3, #2
 800600e:	dc50      	bgt.n	80060b2 <__ssvfiscanf_r+0x29a>
 8006010:	466b      	mov	r3, sp
 8006012:	4622      	mov	r2, r4
 8006014:	a941      	add	r1, sp, #260	; 0x104
 8006016:	4630      	mov	r0, r6
 8006018:	f000 f876 	bl	8006108 <_scanf_chars>
 800601c:	2801      	cmp	r0, #1
 800601e:	d06e      	beq.n	80060fe <__ssvfiscanf_r+0x2e6>
 8006020:	2802      	cmp	r0, #2
 8006022:	f47f af20 	bne.w	8005e66 <__ssvfiscanf_r+0x4e>
 8006026:	e7cf      	b.n	8005fc8 <__ssvfiscanf_r+0x1b0>
 8006028:	220a      	movs	r2, #10
 800602a:	e7dd      	b.n	8005fe8 <__ssvfiscanf_r+0x1d0>
 800602c:	2300      	movs	r3, #0
 800602e:	9342      	str	r3, [sp, #264]	; 0x108
 8006030:	2303      	movs	r3, #3
 8006032:	e7de      	b.n	8005ff2 <__ssvfiscanf_r+0x1da>
 8006034:	2308      	movs	r3, #8
 8006036:	9342      	str	r3, [sp, #264]	; 0x108
 8006038:	2304      	movs	r3, #4
 800603a:	e7da      	b.n	8005ff2 <__ssvfiscanf_r+0x1da>
 800603c:	4629      	mov	r1, r5
 800603e:	4640      	mov	r0, r8
 8006040:	f000 f9c6 	bl	80063d0 <__sccl>
 8006044:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800604a:	9341      	str	r3, [sp, #260]	; 0x104
 800604c:	4605      	mov	r5, r0
 800604e:	2301      	movs	r3, #1
 8006050:	e7cf      	b.n	8005ff2 <__ssvfiscanf_r+0x1da>
 8006052:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006058:	9341      	str	r3, [sp, #260]	; 0x104
 800605a:	2300      	movs	r3, #0
 800605c:	e7c9      	b.n	8005ff2 <__ssvfiscanf_r+0x1da>
 800605e:	2302      	movs	r3, #2
 8006060:	e7c7      	b.n	8005ff2 <__ssvfiscanf_r+0x1da>
 8006062:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006064:	06c3      	lsls	r3, r0, #27
 8006066:	f53f aefe 	bmi.w	8005e66 <__ssvfiscanf_r+0x4e>
 800606a:	9b00      	ldr	r3, [sp, #0]
 800606c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800606e:	1d19      	adds	r1, r3, #4
 8006070:	9100      	str	r1, [sp, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f010 0f01 	tst.w	r0, #1
 8006078:	bf14      	ite	ne
 800607a:	801a      	strhne	r2, [r3, #0]
 800607c:	601a      	streq	r2, [r3, #0]
 800607e:	e6f2      	b.n	8005e66 <__ssvfiscanf_r+0x4e>
 8006080:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006082:	4621      	mov	r1, r4
 8006084:	4630      	mov	r0, r6
 8006086:	4798      	blx	r3
 8006088:	2800      	cmp	r0, #0
 800608a:	d0b6      	beq.n	8005ffa <__ssvfiscanf_r+0x1e2>
 800608c:	e79c      	b.n	8005fc8 <__ssvfiscanf_r+0x1b0>
 800608e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006090:	3201      	adds	r2, #1
 8006092:	9245      	str	r2, [sp, #276]	; 0x114
 8006094:	6862      	ldr	r2, [r4, #4]
 8006096:	3a01      	subs	r2, #1
 8006098:	2a00      	cmp	r2, #0
 800609a:	6062      	str	r2, [r4, #4]
 800609c:	dd02      	ble.n	80060a4 <__ssvfiscanf_r+0x28c>
 800609e:	3301      	adds	r3, #1
 80060a0:	6023      	str	r3, [r4, #0]
 80060a2:	e7ad      	b.n	8006000 <__ssvfiscanf_r+0x1e8>
 80060a4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80060a6:	4621      	mov	r1, r4
 80060a8:	4630      	mov	r0, r6
 80060aa:	4798      	blx	r3
 80060ac:	2800      	cmp	r0, #0
 80060ae:	d0a7      	beq.n	8006000 <__ssvfiscanf_r+0x1e8>
 80060b0:	e78a      	b.n	8005fc8 <__ssvfiscanf_r+0x1b0>
 80060b2:	2b04      	cmp	r3, #4
 80060b4:	dc0e      	bgt.n	80060d4 <__ssvfiscanf_r+0x2bc>
 80060b6:	466b      	mov	r3, sp
 80060b8:	4622      	mov	r2, r4
 80060ba:	a941      	add	r1, sp, #260	; 0x104
 80060bc:	4630      	mov	r0, r6
 80060be:	f000 f87d 	bl	80061bc <_scanf_i>
 80060c2:	e7ab      	b.n	800601c <__ssvfiscanf_r+0x204>
 80060c4:	08005d63 	.word	0x08005d63
 80060c8:	08005ddd 	.word	0x08005ddd
 80060cc:	08006a5c 	.word	0x08006a5c
 80060d0:	08006a2e 	.word	0x08006a2e
 80060d4:	4b0b      	ldr	r3, [pc, #44]	; (8006104 <__ssvfiscanf_r+0x2ec>)
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f43f aec5 	beq.w	8005e66 <__ssvfiscanf_r+0x4e>
 80060dc:	466b      	mov	r3, sp
 80060de:	4622      	mov	r2, r4
 80060e0:	a941      	add	r1, sp, #260	; 0x104
 80060e2:	4630      	mov	r0, r6
 80060e4:	f3af 8000 	nop.w
 80060e8:	e798      	b.n	800601c <__ssvfiscanf_r+0x204>
 80060ea:	89a3      	ldrh	r3, [r4, #12]
 80060ec:	f013 0f40 	tst.w	r3, #64	; 0x40
 80060f0:	bf18      	it	ne
 80060f2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80060f6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80060fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060fe:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006100:	e7f9      	b.n	80060f6 <__ssvfiscanf_r+0x2de>
 8006102:	bf00      	nop
 8006104:	00000000 	.word	0x00000000

08006108 <_scanf_chars>:
 8006108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800610c:	4615      	mov	r5, r2
 800610e:	688a      	ldr	r2, [r1, #8]
 8006110:	4680      	mov	r8, r0
 8006112:	460c      	mov	r4, r1
 8006114:	b932      	cbnz	r2, 8006124 <_scanf_chars+0x1c>
 8006116:	698a      	ldr	r2, [r1, #24]
 8006118:	2a00      	cmp	r2, #0
 800611a:	bf0c      	ite	eq
 800611c:	2201      	moveq	r2, #1
 800611e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8006122:	608a      	str	r2, [r1, #8]
 8006124:	6822      	ldr	r2, [r4, #0]
 8006126:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80061b8 <_scanf_chars+0xb0>
 800612a:	06d1      	lsls	r1, r2, #27
 800612c:	bf5f      	itttt	pl
 800612e:	681a      	ldrpl	r2, [r3, #0]
 8006130:	1d11      	addpl	r1, r2, #4
 8006132:	6019      	strpl	r1, [r3, #0]
 8006134:	6816      	ldrpl	r6, [r2, #0]
 8006136:	2700      	movs	r7, #0
 8006138:	69a0      	ldr	r0, [r4, #24]
 800613a:	b188      	cbz	r0, 8006160 <_scanf_chars+0x58>
 800613c:	2801      	cmp	r0, #1
 800613e:	d107      	bne.n	8006150 <_scanf_chars+0x48>
 8006140:	682a      	ldr	r2, [r5, #0]
 8006142:	7811      	ldrb	r1, [r2, #0]
 8006144:	6962      	ldr	r2, [r4, #20]
 8006146:	5c52      	ldrb	r2, [r2, r1]
 8006148:	b952      	cbnz	r2, 8006160 <_scanf_chars+0x58>
 800614a:	2f00      	cmp	r7, #0
 800614c:	d031      	beq.n	80061b2 <_scanf_chars+0xaa>
 800614e:	e022      	b.n	8006196 <_scanf_chars+0x8e>
 8006150:	2802      	cmp	r0, #2
 8006152:	d120      	bne.n	8006196 <_scanf_chars+0x8e>
 8006154:	682b      	ldr	r3, [r5, #0]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	f813 3009 	ldrb.w	r3, [r3, r9]
 800615c:	071b      	lsls	r3, r3, #28
 800615e:	d41a      	bmi.n	8006196 <_scanf_chars+0x8e>
 8006160:	6823      	ldr	r3, [r4, #0]
 8006162:	06da      	lsls	r2, r3, #27
 8006164:	bf5e      	ittt	pl
 8006166:	682b      	ldrpl	r3, [r5, #0]
 8006168:	781b      	ldrbpl	r3, [r3, #0]
 800616a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800616e:	682a      	ldr	r2, [r5, #0]
 8006170:	686b      	ldr	r3, [r5, #4]
 8006172:	3201      	adds	r2, #1
 8006174:	602a      	str	r2, [r5, #0]
 8006176:	68a2      	ldr	r2, [r4, #8]
 8006178:	3b01      	subs	r3, #1
 800617a:	3a01      	subs	r2, #1
 800617c:	606b      	str	r3, [r5, #4]
 800617e:	3701      	adds	r7, #1
 8006180:	60a2      	str	r2, [r4, #8]
 8006182:	b142      	cbz	r2, 8006196 <_scanf_chars+0x8e>
 8006184:	2b00      	cmp	r3, #0
 8006186:	dcd7      	bgt.n	8006138 <_scanf_chars+0x30>
 8006188:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800618c:	4629      	mov	r1, r5
 800618e:	4640      	mov	r0, r8
 8006190:	4798      	blx	r3
 8006192:	2800      	cmp	r0, #0
 8006194:	d0d0      	beq.n	8006138 <_scanf_chars+0x30>
 8006196:	6823      	ldr	r3, [r4, #0]
 8006198:	f013 0310 	ands.w	r3, r3, #16
 800619c:	d105      	bne.n	80061aa <_scanf_chars+0xa2>
 800619e:	68e2      	ldr	r2, [r4, #12]
 80061a0:	3201      	adds	r2, #1
 80061a2:	60e2      	str	r2, [r4, #12]
 80061a4:	69a2      	ldr	r2, [r4, #24]
 80061a6:	b102      	cbz	r2, 80061aa <_scanf_chars+0xa2>
 80061a8:	7033      	strb	r3, [r6, #0]
 80061aa:	6923      	ldr	r3, [r4, #16]
 80061ac:	443b      	add	r3, r7
 80061ae:	6123      	str	r3, [r4, #16]
 80061b0:	2000      	movs	r0, #0
 80061b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061b6:	bf00      	nop
 80061b8:	08006a5c 	.word	0x08006a5c

080061bc <_scanf_i>:
 80061bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c0:	4698      	mov	r8, r3
 80061c2:	4b76      	ldr	r3, [pc, #472]	; (800639c <_scanf_i+0x1e0>)
 80061c4:	460c      	mov	r4, r1
 80061c6:	4682      	mov	sl, r0
 80061c8:	4616      	mov	r6, r2
 80061ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80061ce:	b087      	sub	sp, #28
 80061d0:	ab03      	add	r3, sp, #12
 80061d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80061d6:	4b72      	ldr	r3, [pc, #456]	; (80063a0 <_scanf_i+0x1e4>)
 80061d8:	69a1      	ldr	r1, [r4, #24]
 80061da:	4a72      	ldr	r2, [pc, #456]	; (80063a4 <_scanf_i+0x1e8>)
 80061dc:	2903      	cmp	r1, #3
 80061de:	bf18      	it	ne
 80061e0:	461a      	movne	r2, r3
 80061e2:	68a3      	ldr	r3, [r4, #8]
 80061e4:	9201      	str	r2, [sp, #4]
 80061e6:	1e5a      	subs	r2, r3, #1
 80061e8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80061ec:	bf88      	it	hi
 80061ee:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80061f2:	4627      	mov	r7, r4
 80061f4:	bf82      	ittt	hi
 80061f6:	eb03 0905 	addhi.w	r9, r3, r5
 80061fa:	f240 135d 	movwhi	r3, #349	; 0x15d
 80061fe:	60a3      	strhi	r3, [r4, #8]
 8006200:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006204:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006208:	bf98      	it	ls
 800620a:	f04f 0900 	movls.w	r9, #0
 800620e:	6023      	str	r3, [r4, #0]
 8006210:	463d      	mov	r5, r7
 8006212:	f04f 0b00 	mov.w	fp, #0
 8006216:	6831      	ldr	r1, [r6, #0]
 8006218:	ab03      	add	r3, sp, #12
 800621a:	7809      	ldrb	r1, [r1, #0]
 800621c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006220:	2202      	movs	r2, #2
 8006222:	f7f9 ffed 	bl	8000200 <memchr>
 8006226:	b328      	cbz	r0, 8006274 <_scanf_i+0xb8>
 8006228:	f1bb 0f01 	cmp.w	fp, #1
 800622c:	d159      	bne.n	80062e2 <_scanf_i+0x126>
 800622e:	6862      	ldr	r2, [r4, #4]
 8006230:	b92a      	cbnz	r2, 800623e <_scanf_i+0x82>
 8006232:	6822      	ldr	r2, [r4, #0]
 8006234:	2308      	movs	r3, #8
 8006236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800623a:	6063      	str	r3, [r4, #4]
 800623c:	6022      	str	r2, [r4, #0]
 800623e:	6822      	ldr	r2, [r4, #0]
 8006240:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8006244:	6022      	str	r2, [r4, #0]
 8006246:	68a2      	ldr	r2, [r4, #8]
 8006248:	1e51      	subs	r1, r2, #1
 800624a:	60a1      	str	r1, [r4, #8]
 800624c:	b192      	cbz	r2, 8006274 <_scanf_i+0xb8>
 800624e:	6832      	ldr	r2, [r6, #0]
 8006250:	1c51      	adds	r1, r2, #1
 8006252:	6031      	str	r1, [r6, #0]
 8006254:	7812      	ldrb	r2, [r2, #0]
 8006256:	f805 2b01 	strb.w	r2, [r5], #1
 800625a:	6872      	ldr	r2, [r6, #4]
 800625c:	3a01      	subs	r2, #1
 800625e:	2a00      	cmp	r2, #0
 8006260:	6072      	str	r2, [r6, #4]
 8006262:	dc07      	bgt.n	8006274 <_scanf_i+0xb8>
 8006264:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8006268:	4631      	mov	r1, r6
 800626a:	4650      	mov	r0, sl
 800626c:	4790      	blx	r2
 800626e:	2800      	cmp	r0, #0
 8006270:	f040 8085 	bne.w	800637e <_scanf_i+0x1c2>
 8006274:	f10b 0b01 	add.w	fp, fp, #1
 8006278:	f1bb 0f03 	cmp.w	fp, #3
 800627c:	d1cb      	bne.n	8006216 <_scanf_i+0x5a>
 800627e:	6863      	ldr	r3, [r4, #4]
 8006280:	b90b      	cbnz	r3, 8006286 <_scanf_i+0xca>
 8006282:	230a      	movs	r3, #10
 8006284:	6063      	str	r3, [r4, #4]
 8006286:	6863      	ldr	r3, [r4, #4]
 8006288:	4947      	ldr	r1, [pc, #284]	; (80063a8 <_scanf_i+0x1ec>)
 800628a:	6960      	ldr	r0, [r4, #20]
 800628c:	1ac9      	subs	r1, r1, r3
 800628e:	f000 f89f 	bl	80063d0 <__sccl>
 8006292:	f04f 0b00 	mov.w	fp, #0
 8006296:	68a3      	ldr	r3, [r4, #8]
 8006298:	6822      	ldr	r2, [r4, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d03d      	beq.n	800631a <_scanf_i+0x15e>
 800629e:	6831      	ldr	r1, [r6, #0]
 80062a0:	6960      	ldr	r0, [r4, #20]
 80062a2:	f891 c000 	ldrb.w	ip, [r1]
 80062a6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80062aa:	2800      	cmp	r0, #0
 80062ac:	d035      	beq.n	800631a <_scanf_i+0x15e>
 80062ae:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80062b2:	d124      	bne.n	80062fe <_scanf_i+0x142>
 80062b4:	0510      	lsls	r0, r2, #20
 80062b6:	d522      	bpl.n	80062fe <_scanf_i+0x142>
 80062b8:	f10b 0b01 	add.w	fp, fp, #1
 80062bc:	f1b9 0f00 	cmp.w	r9, #0
 80062c0:	d003      	beq.n	80062ca <_scanf_i+0x10e>
 80062c2:	3301      	adds	r3, #1
 80062c4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80062c8:	60a3      	str	r3, [r4, #8]
 80062ca:	6873      	ldr	r3, [r6, #4]
 80062cc:	3b01      	subs	r3, #1
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	6073      	str	r3, [r6, #4]
 80062d2:	dd1b      	ble.n	800630c <_scanf_i+0x150>
 80062d4:	6833      	ldr	r3, [r6, #0]
 80062d6:	3301      	adds	r3, #1
 80062d8:	6033      	str	r3, [r6, #0]
 80062da:	68a3      	ldr	r3, [r4, #8]
 80062dc:	3b01      	subs	r3, #1
 80062de:	60a3      	str	r3, [r4, #8]
 80062e0:	e7d9      	b.n	8006296 <_scanf_i+0xda>
 80062e2:	f1bb 0f02 	cmp.w	fp, #2
 80062e6:	d1ae      	bne.n	8006246 <_scanf_i+0x8a>
 80062e8:	6822      	ldr	r2, [r4, #0]
 80062ea:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80062ee:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80062f2:	d1bf      	bne.n	8006274 <_scanf_i+0xb8>
 80062f4:	2310      	movs	r3, #16
 80062f6:	6063      	str	r3, [r4, #4]
 80062f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062fc:	e7a2      	b.n	8006244 <_scanf_i+0x88>
 80062fe:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006302:	6022      	str	r2, [r4, #0]
 8006304:	780b      	ldrb	r3, [r1, #0]
 8006306:	f805 3b01 	strb.w	r3, [r5], #1
 800630a:	e7de      	b.n	80062ca <_scanf_i+0x10e>
 800630c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006310:	4631      	mov	r1, r6
 8006312:	4650      	mov	r0, sl
 8006314:	4798      	blx	r3
 8006316:	2800      	cmp	r0, #0
 8006318:	d0df      	beq.n	80062da <_scanf_i+0x11e>
 800631a:	6823      	ldr	r3, [r4, #0]
 800631c:	05db      	lsls	r3, r3, #23
 800631e:	d50d      	bpl.n	800633c <_scanf_i+0x180>
 8006320:	42bd      	cmp	r5, r7
 8006322:	d909      	bls.n	8006338 <_scanf_i+0x17c>
 8006324:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006328:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800632c:	4632      	mov	r2, r6
 800632e:	4650      	mov	r0, sl
 8006330:	4798      	blx	r3
 8006332:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8006336:	464d      	mov	r5, r9
 8006338:	42bd      	cmp	r5, r7
 800633a:	d02d      	beq.n	8006398 <_scanf_i+0x1dc>
 800633c:	6822      	ldr	r2, [r4, #0]
 800633e:	f012 0210 	ands.w	r2, r2, #16
 8006342:	d113      	bne.n	800636c <_scanf_i+0x1b0>
 8006344:	702a      	strb	r2, [r5, #0]
 8006346:	6863      	ldr	r3, [r4, #4]
 8006348:	9e01      	ldr	r6, [sp, #4]
 800634a:	4639      	mov	r1, r7
 800634c:	4650      	mov	r0, sl
 800634e:	47b0      	blx	r6
 8006350:	6821      	ldr	r1, [r4, #0]
 8006352:	f8d8 3000 	ldr.w	r3, [r8]
 8006356:	f011 0f20 	tst.w	r1, #32
 800635a:	d013      	beq.n	8006384 <_scanf_i+0x1c8>
 800635c:	1d1a      	adds	r2, r3, #4
 800635e:	f8c8 2000 	str.w	r2, [r8]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6018      	str	r0, [r3, #0]
 8006366:	68e3      	ldr	r3, [r4, #12]
 8006368:	3301      	adds	r3, #1
 800636a:	60e3      	str	r3, [r4, #12]
 800636c:	1bed      	subs	r5, r5, r7
 800636e:	44ab      	add	fp, r5
 8006370:	6925      	ldr	r5, [r4, #16]
 8006372:	445d      	add	r5, fp
 8006374:	6125      	str	r5, [r4, #16]
 8006376:	2000      	movs	r0, #0
 8006378:	b007      	add	sp, #28
 800637a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800637e:	f04f 0b00 	mov.w	fp, #0
 8006382:	e7ca      	b.n	800631a <_scanf_i+0x15e>
 8006384:	1d1a      	adds	r2, r3, #4
 8006386:	f8c8 2000 	str.w	r2, [r8]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f011 0f01 	tst.w	r1, #1
 8006390:	bf14      	ite	ne
 8006392:	8018      	strhne	r0, [r3, #0]
 8006394:	6018      	streq	r0, [r3, #0]
 8006396:	e7e6      	b.n	8006366 <_scanf_i+0x1aa>
 8006398:	2001      	movs	r0, #1
 800639a:	e7ed      	b.n	8006378 <_scanf_i+0x1bc>
 800639c:	0800673c 	.word	0x0800673c
 80063a0:	0800583d 	.word	0x0800583d
 80063a4:	080065cd 	.word	0x080065cd
 80063a8:	08006b75 	.word	0x08006b75

080063ac <_read_r>:
 80063ac:	b538      	push	{r3, r4, r5, lr}
 80063ae:	4d07      	ldr	r5, [pc, #28]	; (80063cc <_read_r+0x20>)
 80063b0:	4604      	mov	r4, r0
 80063b2:	4608      	mov	r0, r1
 80063b4:	4611      	mov	r1, r2
 80063b6:	2200      	movs	r2, #0
 80063b8:	602a      	str	r2, [r5, #0]
 80063ba:	461a      	mov	r2, r3
 80063bc:	f7fa fdaa 	bl	8000f14 <_read>
 80063c0:	1c43      	adds	r3, r0, #1
 80063c2:	d102      	bne.n	80063ca <_read_r+0x1e>
 80063c4:	682b      	ldr	r3, [r5, #0]
 80063c6:	b103      	cbz	r3, 80063ca <_read_r+0x1e>
 80063c8:	6023      	str	r3, [r4, #0]
 80063ca:	bd38      	pop	{r3, r4, r5, pc}
 80063cc:	200002a8 	.word	0x200002a8

080063d0 <__sccl>:
 80063d0:	b570      	push	{r4, r5, r6, lr}
 80063d2:	780b      	ldrb	r3, [r1, #0]
 80063d4:	4604      	mov	r4, r0
 80063d6:	2b5e      	cmp	r3, #94	; 0x5e
 80063d8:	bf0b      	itete	eq
 80063da:	784b      	ldrbeq	r3, [r1, #1]
 80063dc:	1c48      	addne	r0, r1, #1
 80063de:	1c88      	addeq	r0, r1, #2
 80063e0:	2200      	movne	r2, #0
 80063e2:	bf08      	it	eq
 80063e4:	2201      	moveq	r2, #1
 80063e6:	1e61      	subs	r1, r4, #1
 80063e8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80063ec:	f801 2f01 	strb.w	r2, [r1, #1]!
 80063f0:	42a9      	cmp	r1, r5
 80063f2:	d1fb      	bne.n	80063ec <__sccl+0x1c>
 80063f4:	b90b      	cbnz	r3, 80063fa <__sccl+0x2a>
 80063f6:	3801      	subs	r0, #1
 80063f8:	bd70      	pop	{r4, r5, r6, pc}
 80063fa:	f082 0201 	eor.w	r2, r2, #1
 80063fe:	54e2      	strb	r2, [r4, r3]
 8006400:	4605      	mov	r5, r0
 8006402:	4628      	mov	r0, r5
 8006404:	f810 1b01 	ldrb.w	r1, [r0], #1
 8006408:	292d      	cmp	r1, #45	; 0x2d
 800640a:	d006      	beq.n	800641a <__sccl+0x4a>
 800640c:	295d      	cmp	r1, #93	; 0x5d
 800640e:	d0f3      	beq.n	80063f8 <__sccl+0x28>
 8006410:	b909      	cbnz	r1, 8006416 <__sccl+0x46>
 8006412:	4628      	mov	r0, r5
 8006414:	e7f0      	b.n	80063f8 <__sccl+0x28>
 8006416:	460b      	mov	r3, r1
 8006418:	e7f1      	b.n	80063fe <__sccl+0x2e>
 800641a:	786e      	ldrb	r6, [r5, #1]
 800641c:	2e5d      	cmp	r6, #93	; 0x5d
 800641e:	d0fa      	beq.n	8006416 <__sccl+0x46>
 8006420:	42b3      	cmp	r3, r6
 8006422:	dcf8      	bgt.n	8006416 <__sccl+0x46>
 8006424:	3502      	adds	r5, #2
 8006426:	4619      	mov	r1, r3
 8006428:	3101      	adds	r1, #1
 800642a:	428e      	cmp	r6, r1
 800642c:	5462      	strb	r2, [r4, r1]
 800642e:	dcfb      	bgt.n	8006428 <__sccl+0x58>
 8006430:	1af1      	subs	r1, r6, r3
 8006432:	3901      	subs	r1, #1
 8006434:	1c58      	adds	r0, r3, #1
 8006436:	42b3      	cmp	r3, r6
 8006438:	bfa8      	it	ge
 800643a:	2100      	movge	r1, #0
 800643c:	1843      	adds	r3, r0, r1
 800643e:	e7e0      	b.n	8006402 <__sccl+0x32>

08006440 <_raise_r>:
 8006440:	291f      	cmp	r1, #31
 8006442:	b538      	push	{r3, r4, r5, lr}
 8006444:	4604      	mov	r4, r0
 8006446:	460d      	mov	r5, r1
 8006448:	d904      	bls.n	8006454 <_raise_r+0x14>
 800644a:	2316      	movs	r3, #22
 800644c:	6003      	str	r3, [r0, #0]
 800644e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006452:	bd38      	pop	{r3, r4, r5, pc}
 8006454:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006456:	b112      	cbz	r2, 800645e <_raise_r+0x1e>
 8006458:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800645c:	b94b      	cbnz	r3, 8006472 <_raise_r+0x32>
 800645e:	4620      	mov	r0, r4
 8006460:	f000 f830 	bl	80064c4 <_getpid_r>
 8006464:	462a      	mov	r2, r5
 8006466:	4601      	mov	r1, r0
 8006468:	4620      	mov	r0, r4
 800646a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800646e:	f000 b817 	b.w	80064a0 <_kill_r>
 8006472:	2b01      	cmp	r3, #1
 8006474:	d00a      	beq.n	800648c <_raise_r+0x4c>
 8006476:	1c59      	adds	r1, r3, #1
 8006478:	d103      	bne.n	8006482 <_raise_r+0x42>
 800647a:	2316      	movs	r3, #22
 800647c:	6003      	str	r3, [r0, #0]
 800647e:	2001      	movs	r0, #1
 8006480:	e7e7      	b.n	8006452 <_raise_r+0x12>
 8006482:	2400      	movs	r4, #0
 8006484:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006488:	4628      	mov	r0, r5
 800648a:	4798      	blx	r3
 800648c:	2000      	movs	r0, #0
 800648e:	e7e0      	b.n	8006452 <_raise_r+0x12>

08006490 <raise>:
 8006490:	4b02      	ldr	r3, [pc, #8]	; (800649c <raise+0xc>)
 8006492:	4601      	mov	r1, r0
 8006494:	6818      	ldr	r0, [r3, #0]
 8006496:	f7ff bfd3 	b.w	8006440 <_raise_r>
 800649a:	bf00      	nop
 800649c:	20000010 	.word	0x20000010

080064a0 <_kill_r>:
 80064a0:	b538      	push	{r3, r4, r5, lr}
 80064a2:	4d07      	ldr	r5, [pc, #28]	; (80064c0 <_kill_r+0x20>)
 80064a4:	2300      	movs	r3, #0
 80064a6:	4604      	mov	r4, r0
 80064a8:	4608      	mov	r0, r1
 80064aa:	4611      	mov	r1, r2
 80064ac:	602b      	str	r3, [r5, #0]
 80064ae:	f7fa fd17 	bl	8000ee0 <_kill>
 80064b2:	1c43      	adds	r3, r0, #1
 80064b4:	d102      	bne.n	80064bc <_kill_r+0x1c>
 80064b6:	682b      	ldr	r3, [r5, #0]
 80064b8:	b103      	cbz	r3, 80064bc <_kill_r+0x1c>
 80064ba:	6023      	str	r3, [r4, #0]
 80064bc:	bd38      	pop	{r3, r4, r5, pc}
 80064be:	bf00      	nop
 80064c0:	200002a8 	.word	0x200002a8

080064c4 <_getpid_r>:
 80064c4:	f7fa bd04 	b.w	8000ed0 <_getpid>

080064c8 <_strtol_l.constprop.0>:
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064ce:	d001      	beq.n	80064d4 <_strtol_l.constprop.0+0xc>
 80064d0:	2b24      	cmp	r3, #36	; 0x24
 80064d2:	d906      	bls.n	80064e2 <_strtol_l.constprop.0+0x1a>
 80064d4:	f7fd fa24 	bl	8003920 <__errno>
 80064d8:	2316      	movs	r3, #22
 80064da:	6003      	str	r3, [r0, #0]
 80064dc:	2000      	movs	r0, #0
 80064de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80065c8 <_strtol_l.constprop.0+0x100>
 80064e6:	460d      	mov	r5, r1
 80064e8:	462e      	mov	r6, r5
 80064ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80064ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 80064f2:	f017 0708 	ands.w	r7, r7, #8
 80064f6:	d1f7      	bne.n	80064e8 <_strtol_l.constprop.0+0x20>
 80064f8:	2c2d      	cmp	r4, #45	; 0x2d
 80064fa:	d132      	bne.n	8006562 <_strtol_l.constprop.0+0x9a>
 80064fc:	782c      	ldrb	r4, [r5, #0]
 80064fe:	2701      	movs	r7, #1
 8006500:	1cb5      	adds	r5, r6, #2
 8006502:	2b00      	cmp	r3, #0
 8006504:	d05b      	beq.n	80065be <_strtol_l.constprop.0+0xf6>
 8006506:	2b10      	cmp	r3, #16
 8006508:	d109      	bne.n	800651e <_strtol_l.constprop.0+0x56>
 800650a:	2c30      	cmp	r4, #48	; 0x30
 800650c:	d107      	bne.n	800651e <_strtol_l.constprop.0+0x56>
 800650e:	782c      	ldrb	r4, [r5, #0]
 8006510:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006514:	2c58      	cmp	r4, #88	; 0x58
 8006516:	d14d      	bne.n	80065b4 <_strtol_l.constprop.0+0xec>
 8006518:	786c      	ldrb	r4, [r5, #1]
 800651a:	2310      	movs	r3, #16
 800651c:	3502      	adds	r5, #2
 800651e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006522:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006526:	f04f 0c00 	mov.w	ip, #0
 800652a:	fbb8 f9f3 	udiv	r9, r8, r3
 800652e:	4666      	mov	r6, ip
 8006530:	fb03 8a19 	mls	sl, r3, r9, r8
 8006534:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006538:	f1be 0f09 	cmp.w	lr, #9
 800653c:	d816      	bhi.n	800656c <_strtol_l.constprop.0+0xa4>
 800653e:	4674      	mov	r4, lr
 8006540:	42a3      	cmp	r3, r4
 8006542:	dd24      	ble.n	800658e <_strtol_l.constprop.0+0xc6>
 8006544:	f1bc 0f00 	cmp.w	ip, #0
 8006548:	db1e      	blt.n	8006588 <_strtol_l.constprop.0+0xc0>
 800654a:	45b1      	cmp	r9, r6
 800654c:	d31c      	bcc.n	8006588 <_strtol_l.constprop.0+0xc0>
 800654e:	d101      	bne.n	8006554 <_strtol_l.constprop.0+0x8c>
 8006550:	45a2      	cmp	sl, r4
 8006552:	db19      	blt.n	8006588 <_strtol_l.constprop.0+0xc0>
 8006554:	fb06 4603 	mla	r6, r6, r3, r4
 8006558:	f04f 0c01 	mov.w	ip, #1
 800655c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006560:	e7e8      	b.n	8006534 <_strtol_l.constprop.0+0x6c>
 8006562:	2c2b      	cmp	r4, #43	; 0x2b
 8006564:	bf04      	itt	eq
 8006566:	782c      	ldrbeq	r4, [r5, #0]
 8006568:	1cb5      	addeq	r5, r6, #2
 800656a:	e7ca      	b.n	8006502 <_strtol_l.constprop.0+0x3a>
 800656c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006570:	f1be 0f19 	cmp.w	lr, #25
 8006574:	d801      	bhi.n	800657a <_strtol_l.constprop.0+0xb2>
 8006576:	3c37      	subs	r4, #55	; 0x37
 8006578:	e7e2      	b.n	8006540 <_strtol_l.constprop.0+0x78>
 800657a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800657e:	f1be 0f19 	cmp.w	lr, #25
 8006582:	d804      	bhi.n	800658e <_strtol_l.constprop.0+0xc6>
 8006584:	3c57      	subs	r4, #87	; 0x57
 8006586:	e7db      	b.n	8006540 <_strtol_l.constprop.0+0x78>
 8006588:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800658c:	e7e6      	b.n	800655c <_strtol_l.constprop.0+0x94>
 800658e:	f1bc 0f00 	cmp.w	ip, #0
 8006592:	da05      	bge.n	80065a0 <_strtol_l.constprop.0+0xd8>
 8006594:	2322      	movs	r3, #34	; 0x22
 8006596:	6003      	str	r3, [r0, #0]
 8006598:	4646      	mov	r6, r8
 800659a:	b942      	cbnz	r2, 80065ae <_strtol_l.constprop.0+0xe6>
 800659c:	4630      	mov	r0, r6
 800659e:	e79e      	b.n	80064de <_strtol_l.constprop.0+0x16>
 80065a0:	b107      	cbz	r7, 80065a4 <_strtol_l.constprop.0+0xdc>
 80065a2:	4276      	negs	r6, r6
 80065a4:	2a00      	cmp	r2, #0
 80065a6:	d0f9      	beq.n	800659c <_strtol_l.constprop.0+0xd4>
 80065a8:	f1bc 0f00 	cmp.w	ip, #0
 80065ac:	d000      	beq.n	80065b0 <_strtol_l.constprop.0+0xe8>
 80065ae:	1e69      	subs	r1, r5, #1
 80065b0:	6011      	str	r1, [r2, #0]
 80065b2:	e7f3      	b.n	800659c <_strtol_l.constprop.0+0xd4>
 80065b4:	2430      	movs	r4, #48	; 0x30
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1b1      	bne.n	800651e <_strtol_l.constprop.0+0x56>
 80065ba:	2308      	movs	r3, #8
 80065bc:	e7af      	b.n	800651e <_strtol_l.constprop.0+0x56>
 80065be:	2c30      	cmp	r4, #48	; 0x30
 80065c0:	d0a5      	beq.n	800650e <_strtol_l.constprop.0+0x46>
 80065c2:	230a      	movs	r3, #10
 80065c4:	e7ab      	b.n	800651e <_strtol_l.constprop.0+0x56>
 80065c6:	bf00      	nop
 80065c8:	08006a5c 	.word	0x08006a5c

080065cc <_strtol_r>:
 80065cc:	f7ff bf7c 	b.w	80064c8 <_strtol_l.constprop.0>

080065d0 <__submore>:
 80065d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065d4:	460c      	mov	r4, r1
 80065d6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80065d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065dc:	4299      	cmp	r1, r3
 80065de:	d11d      	bne.n	800661c <__submore+0x4c>
 80065e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065e4:	f7fd fdce 	bl	8004184 <_malloc_r>
 80065e8:	b918      	cbnz	r0, 80065f2 <__submore+0x22>
 80065ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065f6:	63a3      	str	r3, [r4, #56]	; 0x38
 80065f8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80065fc:	6360      	str	r0, [r4, #52]	; 0x34
 80065fe:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006602:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006606:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800660a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800660e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8006612:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006616:	6020      	str	r0, [r4, #0]
 8006618:	2000      	movs	r0, #0
 800661a:	e7e8      	b.n	80065ee <__submore+0x1e>
 800661c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800661e:	0077      	lsls	r7, r6, #1
 8006620:	463a      	mov	r2, r7
 8006622:	f7ff fb6f 	bl	8005d04 <_realloc_r>
 8006626:	4605      	mov	r5, r0
 8006628:	2800      	cmp	r0, #0
 800662a:	d0de      	beq.n	80065ea <__submore+0x1a>
 800662c:	eb00 0806 	add.w	r8, r0, r6
 8006630:	4601      	mov	r1, r0
 8006632:	4632      	mov	r2, r6
 8006634:	4640      	mov	r0, r8
 8006636:	f7ff fb3d 	bl	8005cb4 <memcpy>
 800663a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800663e:	f8c4 8000 	str.w	r8, [r4]
 8006642:	e7e9      	b.n	8006618 <__submore+0x48>

08006644 <_fstat_r>:
 8006644:	b538      	push	{r3, r4, r5, lr}
 8006646:	4d07      	ldr	r5, [pc, #28]	; (8006664 <_fstat_r+0x20>)
 8006648:	2300      	movs	r3, #0
 800664a:	4604      	mov	r4, r0
 800664c:	4608      	mov	r0, r1
 800664e:	4611      	mov	r1, r2
 8006650:	602b      	str	r3, [r5, #0]
 8006652:	f7fa fc88 	bl	8000f66 <_fstat>
 8006656:	1c43      	adds	r3, r0, #1
 8006658:	d102      	bne.n	8006660 <_fstat_r+0x1c>
 800665a:	682b      	ldr	r3, [r5, #0]
 800665c:	b103      	cbz	r3, 8006660 <_fstat_r+0x1c>
 800665e:	6023      	str	r3, [r4, #0]
 8006660:	bd38      	pop	{r3, r4, r5, pc}
 8006662:	bf00      	nop
 8006664:	200002a8 	.word	0x200002a8

08006668 <_isatty_r>:
 8006668:	b538      	push	{r3, r4, r5, lr}
 800666a:	4d06      	ldr	r5, [pc, #24]	; (8006684 <_isatty_r+0x1c>)
 800666c:	2300      	movs	r3, #0
 800666e:	4604      	mov	r4, r0
 8006670:	4608      	mov	r0, r1
 8006672:	602b      	str	r3, [r5, #0]
 8006674:	f7fa fc87 	bl	8000f86 <_isatty>
 8006678:	1c43      	adds	r3, r0, #1
 800667a:	d102      	bne.n	8006682 <_isatty_r+0x1a>
 800667c:	682b      	ldr	r3, [r5, #0]
 800667e:	b103      	cbz	r3, 8006682 <_isatty_r+0x1a>
 8006680:	6023      	str	r3, [r4, #0]
 8006682:	bd38      	pop	{r3, r4, r5, pc}
 8006684:	200002a8 	.word	0x200002a8

08006688 <_malloc_usable_size_r>:
 8006688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800668c:	1f18      	subs	r0, r3, #4
 800668e:	2b00      	cmp	r3, #0
 8006690:	bfbc      	itt	lt
 8006692:	580b      	ldrlt	r3, [r1, r0]
 8006694:	18c0      	addlt	r0, r0, r3
 8006696:	4770      	bx	lr

08006698 <_init>:
 8006698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669a:	bf00      	nop
 800669c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800669e:	bc08      	pop	{r3}
 80066a0:	469e      	mov	lr, r3
 80066a2:	4770      	bx	lr

080066a4 <_fini>:
 80066a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066a6:	bf00      	nop
 80066a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066aa:	bc08      	pop	{r3}
 80066ac:	469e      	mov	lr, r3
 80066ae:	4770      	bx	lr
