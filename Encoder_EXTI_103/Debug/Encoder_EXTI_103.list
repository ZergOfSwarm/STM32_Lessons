
Encoder_EXTI_103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080033bc  080033bc  000133bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800349c  0800349c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800349c  0800349c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800349c  0800349c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800349c  0800349c  0001349c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034a0  080034a0  000134a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080034a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000070  08003514  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08003514  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad3c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d59  00000000  00000000  0002add5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  0002cb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b98  00000000  00000000  0002d780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001857b  00000000  00000000  0002e318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c560  00000000  00000000  00046893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b7ed  00000000  00000000  00052df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de5e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ad4  00000000  00000000  000de630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080033a4 	.word	0x080033a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080033a4 	.word	0x080033a4

0800014c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000154:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000158:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	2b00      	cmp	r3, #0
 8000162:	d013      	beq.n	800018c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800016c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000170:	2b00      	cmp	r3, #0
 8000172:	d00b      	beq.n	800018c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000174:	e000      	b.n	8000178 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000176:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d0f9      	beq.n	8000176 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000182:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000186:	687a      	ldr	r2, [r7, #4]
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800018c:	687b      	ldr	r3, [r7, #4]
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <_write>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af00      	add	r7, sp, #0
 800019e:	60f8      	str	r0, [r7, #12]
 80001a0:	60b9      	str	r1, [r7, #8]
 80001a2:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 50);
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	b29a      	uxth	r2, r3
 80001a8:	2332      	movs	r3, #50	; 0x32
 80001aa:	68b9      	ldr	r1, [r7, #8]
 80001ac:	480c      	ldr	r0, [pc, #48]	; (80001e0 <_write+0x48>)
 80001ae:	f001 ffc8 	bl	8002142 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 80001b2:	2300      	movs	r3, #0
 80001b4:	617b      	str	r3, [r7, #20]
 80001b6:	e009      	b.n	80001cc <_write+0x34>
		ITM_SendChar(*ptr++);
 80001b8:	68bb      	ldr	r3, [r7, #8]
 80001ba:	1c5a      	adds	r2, r3, #1
 80001bc:	60ba      	str	r2, [r7, #8]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	4618      	mov	r0, r3
 80001c2:	f7ff ffc3 	bl	800014c <ITM_SendChar>
	for (i = 0; i < len; i++) {
 80001c6:	697b      	ldr	r3, [r7, #20]
 80001c8:	3301      	adds	r3, #1
 80001ca:	617b      	str	r3, [r7, #20]
 80001cc:	697a      	ldr	r2, [r7, #20]
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	429a      	cmp	r2, r3
 80001d2:	dbf1      	blt.n	80001b8 <_write+0x20>
	}
	return len;
 80001d4:	687b      	ldr	r3, [r7, #4]
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	3718      	adds	r7, #24
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	20000090 	.word	0x20000090

080001e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e8:	f000 fdd6 	bl	8000d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ec:	f000 f87e 	bl	80002ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f0:	f000 f8ec 	bl	80003cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001f4:	f000 f8c0 	bl	8000378 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_Delay(100);
 80001f8:	2064      	movs	r0, #100	; 0x64
 80001fa:	f000 fdff 	bl	8000dfc <HAL_Delay>
	if (!(GPIOB->IDR & GPIO_PIN_4) && (!(GPIOB->IDR & GPIO_PIN_5))) {
 80001fe:	4b35      	ldr	r3, [pc, #212]	; (80002d4 <main+0xf0>)
 8000200:	689b      	ldr	r3, [r3, #8]
 8000202:	f003 0310 	and.w	r3, r3, #16
 8000206:	2b00      	cmp	r3, #0
 8000208:	d109      	bne.n	800021e <main+0x3a>
 800020a:	4b32      	ldr	r3, [pc, #200]	; (80002d4 <main+0xf0>)
 800020c:	689b      	ldr	r3, [r3, #8]
 800020e:	f003 0320 	and.w	r3, r3, #32
 8000212:	2b00      	cmp	r3, #0
 8000214:	d103      	bne.n	800021e <main+0x3a>
		status_old = 0x00;
 8000216:	4b30      	ldr	r3, [pc, #192]	; (80002d8 <main+0xf4>)
 8000218:	2200      	movs	r2, #0
 800021a:	701a      	strb	r2, [r3, #0]
 800021c:	e02e      	b.n	800027c <main+0x98>
	} else if ((GPIOB->IDR & GPIO_PIN_4) && (!(GPIOB->IDR & GPIO_PIN_5))) {
 800021e:	4b2d      	ldr	r3, [pc, #180]	; (80002d4 <main+0xf0>)
 8000220:	689b      	ldr	r3, [r3, #8]
 8000222:	f003 0310 	and.w	r3, r3, #16
 8000226:	2b00      	cmp	r3, #0
 8000228:	d009      	beq.n	800023e <main+0x5a>
 800022a:	4b2a      	ldr	r3, [pc, #168]	; (80002d4 <main+0xf0>)
 800022c:	689b      	ldr	r3, [r3, #8]
 800022e:	f003 0320 	and.w	r3, r3, #32
 8000232:	2b00      	cmp	r3, #0
 8000234:	d103      	bne.n	800023e <main+0x5a>
		status_old = 0x10;
 8000236:	4b28      	ldr	r3, [pc, #160]	; (80002d8 <main+0xf4>)
 8000238:	2210      	movs	r2, #16
 800023a:	701a      	strb	r2, [r3, #0]
 800023c:	e01e      	b.n	800027c <main+0x98>
	} else if ((GPIOB->IDR & GPIO_PIN_4) && (GPIOB->IDR & GPIO_PIN_5)) {
 800023e:	4b25      	ldr	r3, [pc, #148]	; (80002d4 <main+0xf0>)
 8000240:	689b      	ldr	r3, [r3, #8]
 8000242:	f003 0310 	and.w	r3, r3, #16
 8000246:	2b00      	cmp	r3, #0
 8000248:	d009      	beq.n	800025e <main+0x7a>
 800024a:	4b22      	ldr	r3, [pc, #136]	; (80002d4 <main+0xf0>)
 800024c:	689b      	ldr	r3, [r3, #8]
 800024e:	f003 0320 	and.w	r3, r3, #32
 8000252:	2b00      	cmp	r3, #0
 8000254:	d003      	beq.n	800025e <main+0x7a>
		status_old = 0x11;
 8000256:	4b20      	ldr	r3, [pc, #128]	; (80002d8 <main+0xf4>)
 8000258:	2211      	movs	r2, #17
 800025a:	701a      	strb	r2, [r3, #0]
 800025c:	e00e      	b.n	800027c <main+0x98>
	} else if (!(GPIOB->IDR & GPIO_PIN_4) && (GPIOB->IDR & GPIO_PIN_5)) {
 800025e:	4b1d      	ldr	r3, [pc, #116]	; (80002d4 <main+0xf0>)
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	f003 0310 	and.w	r3, r3, #16
 8000266:	2b00      	cmp	r3, #0
 8000268:	d108      	bne.n	800027c <main+0x98>
 800026a:	4b1a      	ldr	r3, [pc, #104]	; (80002d4 <main+0xf0>)
 800026c:	689b      	ldr	r3, [r3, #8]
 800026e:	f003 0320 	and.w	r3, r3, #32
 8000272:	2b00      	cmp	r3, #0
 8000274:	d002      	beq.n	800027c <main+0x98>
		status_old = 0x01;
 8000276:	4b18      	ldr	r3, [pc, #96]	; (80002d8 <main+0xf4>)
 8000278:	2201      	movs	r2, #1
 800027a:	701a      	strb	r2, [r3, #0]
	}

	A = 0;
 800027c:	4b17      	ldr	r3, [pc, #92]	; (80002dc <main+0xf8>)
 800027e:	2200      	movs	r2, #0
 8000280:	801a      	strh	r2, [r3, #0]
	printf("Configured A = %d\r\n",A);
 8000282:	4b16      	ldr	r3, [pc, #88]	; (80002dc <main+0xf8>)
 8000284:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000288:	4619      	mov	r1, r3
 800028a:	4815      	ldr	r0, [pc, #84]	; (80002e0 <main+0xfc>)
 800028c:	f002 f8f6 	bl	800247c <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (send_to_uart) {
 8000290:	4b14      	ldr	r3, [pc, #80]	; (80002e4 <main+0x100>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d0fb      	beq.n	8000290 <main+0xac>
			A >= 2500 ? A = 2500 : A;
 8000298:	4b10      	ldr	r3, [pc, #64]	; (80002dc <main+0xf8>)
 800029a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800029e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80002a2:	4293      	cmp	r3, r2
 80002a4:	dd03      	ble.n	80002ae <main+0xca>
 80002a6:	4b0d      	ldr	r3, [pc, #52]	; (80002dc <main+0xf8>)
 80002a8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80002ac:	801a      	strh	r2, [r3, #0]
			/*if (A >= 2500) {
			 A = 2500;
			 } else {
			 A = A;
			 }*/
			A <= 0 ? A = 0 : A;
 80002ae:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <main+0xf8>)
 80002b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	dc02      	bgt.n	80002be <main+0xda>
 80002b8:	4b08      	ldr	r3, [pc, #32]	; (80002dc <main+0xf8>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	801a      	strh	r2, [r3, #0]
			/*if (A <= 0) {
			 A = 0;
			 } else {
			 A = A;
			 }*/
			printf("A = %d\r\n",A);
 80002be:	4b07      	ldr	r3, [pc, #28]	; (80002dc <main+0xf8>)
 80002c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002c4:	4619      	mov	r1, r3
 80002c6:	4808      	ldr	r0, [pc, #32]	; (80002e8 <main+0x104>)
 80002c8:	f002 f8d8 	bl	800247c <iprintf>
			send_to_uart = 0;
 80002cc:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <main+0x100>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	701a      	strb	r2, [r3, #0]
		if (send_to_uart) {
 80002d2:	e7dd      	b.n	8000290 <main+0xac>
 80002d4:	40010c00 	.word	0x40010c00
 80002d8:	2000011d 	.word	0x2000011d
 80002dc:	2000008e 	.word	0x2000008e
 80002e0:	080033bc 	.word	0x080033bc
 80002e4:	2000008c 	.word	0x2000008c
 80002e8:	080033d0 	.word	0x080033d0

080002ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b090      	sub	sp, #64	; 0x40
 80002f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	f107 0318 	add.w	r3, r7, #24
 80002f6:	2228      	movs	r2, #40	; 0x28
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f002 f8b6 	bl	800246c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]
 800030c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800030e:	2301      	movs	r3, #1
 8000310:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000312:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000316:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031c:	2301      	movs	r3, #1
 800031e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000320:	2302      	movs	r3, #2
 8000322:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000324:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000328:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800032a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800032e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000330:	f107 0318 	add.w	r3, r7, #24
 8000334:	4618      	mov	r0, r3
 8000336:	f001 f823 	bl	8001380 <HAL_RCC_OscConfig>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000340:	f000 f8d6 	bl	80004f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000344:	230f      	movs	r3, #15
 8000346:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000348:	2302      	movs	r3, #2
 800034a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034c:	2300      	movs	r3, #0
 800034e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000354:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000356:	2300      	movs	r3, #0
 8000358:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	2102      	movs	r1, #2
 800035e:	4618      	mov	r0, r3
 8000360:	f001 fa90 	bl	8001884 <HAL_RCC_ClockConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800036a:	f000 f8c1 	bl	80004f0 <Error_Handler>
  }
}
 800036e:	bf00      	nop
 8000370:	3740      	adds	r7, #64	; 0x40
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
	...

08000378 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800037c:	4b11      	ldr	r3, [pc, #68]	; (80003c4 <MX_USART2_UART_Init+0x4c>)
 800037e:	4a12      	ldr	r2, [pc, #72]	; (80003c8 <MX_USART2_UART_Init+0x50>)
 8000380:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000382:	4b10      	ldr	r3, [pc, #64]	; (80003c4 <MX_USART2_UART_Init+0x4c>)
 8000384:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000388:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <MX_USART2_UART_Init+0x4c>)
 800038c:	2200      	movs	r2, #0
 800038e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000390:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <MX_USART2_UART_Init+0x4c>)
 8000392:	2200      	movs	r2, #0
 8000394:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000396:	4b0b      	ldr	r3, [pc, #44]	; (80003c4 <MX_USART2_UART_Init+0x4c>)
 8000398:	2200      	movs	r2, #0
 800039a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800039c:	4b09      	ldr	r3, [pc, #36]	; (80003c4 <MX_USART2_UART_Init+0x4c>)
 800039e:	220c      	movs	r2, #12
 80003a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003a2:	4b08      	ldr	r3, [pc, #32]	; (80003c4 <MX_USART2_UART_Init+0x4c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003a8:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <MX_USART2_UART_Init+0x4c>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003ae:	4805      	ldr	r0, [pc, #20]	; (80003c4 <MX_USART2_UART_Init+0x4c>)
 80003b0:	f001 fe7a 	bl	80020a8 <HAL_UART_Init>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003ba:	f000 f899 	bl	80004f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	20000090 	.word	0x20000090
 80003c8:	40004400 	.word	0x40004400

080003cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b088      	sub	sp, #32
 80003d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d2:	f107 0310 	add.w	r3, r7, #16
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
 80003de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003e0:	4b36      	ldr	r3, [pc, #216]	; (80004bc <MX_GPIO_Init+0xf0>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a35      	ldr	r2, [pc, #212]	; (80004bc <MX_GPIO_Init+0xf0>)
 80003e6:	f043 0310 	orr.w	r3, r3, #16
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	4b33      	ldr	r3, [pc, #204]	; (80004bc <MX_GPIO_Init+0xf0>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f003 0310 	and.w	r3, r3, #16
 80003f4:	60fb      	str	r3, [r7, #12]
 80003f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003f8:	4b30      	ldr	r3, [pc, #192]	; (80004bc <MX_GPIO_Init+0xf0>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	4a2f      	ldr	r2, [pc, #188]	; (80004bc <MX_GPIO_Init+0xf0>)
 80003fe:	f043 0320 	orr.w	r3, r3, #32
 8000402:	6193      	str	r3, [r2, #24]
 8000404:	4b2d      	ldr	r3, [pc, #180]	; (80004bc <MX_GPIO_Init+0xf0>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	f003 0320 	and.w	r3, r3, #32
 800040c:	60bb      	str	r3, [r7, #8]
 800040e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000410:	4b2a      	ldr	r3, [pc, #168]	; (80004bc <MX_GPIO_Init+0xf0>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a29      	ldr	r2, [pc, #164]	; (80004bc <MX_GPIO_Init+0xf0>)
 8000416:	f043 0304 	orr.w	r3, r3, #4
 800041a:	6193      	str	r3, [r2, #24]
 800041c:	4b27      	ldr	r3, [pc, #156]	; (80004bc <MX_GPIO_Init+0xf0>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f003 0304 	and.w	r3, r3, #4
 8000424:	607b      	str	r3, [r7, #4]
 8000426:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000428:	4b24      	ldr	r3, [pc, #144]	; (80004bc <MX_GPIO_Init+0xf0>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a23      	ldr	r2, [pc, #140]	; (80004bc <MX_GPIO_Init+0xf0>)
 800042e:	f043 0308 	orr.w	r3, r3, #8
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b21      	ldr	r3, [pc, #132]	; (80004bc <MX_GPIO_Init+0xf0>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0308 	and.w	r3, r3, #8
 800043c:	603b      	str	r3, [r7, #0]
 800043e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000440:	2201      	movs	r2, #1
 8000442:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000446:	481e      	ldr	r0, [pc, #120]	; (80004c0 <MX_GPIO_Init+0xf4>)
 8000448:	f000 ff60 	bl	800130c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800044c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000450:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000452:	2301      	movs	r3, #1
 8000454:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000456:	2300      	movs	r3, #0
 8000458:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045a:	2302      	movs	r3, #2
 800045c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800045e:	f107 0310 	add.w	r3, r7, #16
 8000462:	4619      	mov	r1, r3
 8000464:	4816      	ldr	r0, [pc, #88]	; (80004c0 <MX_GPIO_Init+0xf4>)
 8000466:	f000 fdcd 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800046a:	2338      	movs	r3, #56	; 0x38
 800046c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800046e:	4b15      	ldr	r3, [pc, #84]	; (80004c4 <MX_GPIO_Init+0xf8>)
 8000470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000472:	2300      	movs	r3, #0
 8000474:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000476:	f107 0310 	add.w	r3, r7, #16
 800047a:	4619      	mov	r1, r3
 800047c:	4812      	ldr	r0, [pc, #72]	; (80004c8 <MX_GPIO_Init+0xfc>)
 800047e:	f000 fdc1 	bl	8001004 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000482:	2200      	movs	r2, #0
 8000484:	2100      	movs	r1, #0
 8000486:	2009      	movs	r0, #9
 8000488:	f000 fd91 	bl	8000fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800048c:	2009      	movs	r0, #9
 800048e:	f000 fdaa 	bl	8000fe6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000492:	2200      	movs	r2, #0
 8000494:	2100      	movs	r1, #0
 8000496:	200a      	movs	r0, #10
 8000498:	f000 fd89 	bl	8000fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800049c:	200a      	movs	r0, #10
 800049e:	f000 fda2 	bl	8000fe6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80004a2:	2200      	movs	r2, #0
 80004a4:	2100      	movs	r1, #0
 80004a6:	2017      	movs	r0, #23
 80004a8:	f000 fd81 	bl	8000fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80004ac:	2017      	movs	r0, #23
 80004ae:	f000 fd9a 	bl	8000fe6 <HAL_NVIC_EnableIRQ>

}
 80004b2:	bf00      	nop
 80004b4:	3720      	adds	r7, #32
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	40021000 	.word	0x40021000
 80004c0:	40011000 	.word	0x40011000
 80004c4:	10310000 	.word	0x10310000
 80004c8:	40010c00 	.word	0x40010c00

080004cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d101      	bne.n	80004e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004de:	f000 fc71 	bl	8000dc4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40000800 	.word	0x40000800

080004f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f4:	b672      	cpsid	i
}
 80004f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <Error_Handler+0x8>
	...

080004fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000502:	4b15      	ldr	r3, [pc, #84]	; (8000558 <HAL_MspInit+0x5c>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	4a14      	ldr	r2, [pc, #80]	; (8000558 <HAL_MspInit+0x5c>)
 8000508:	f043 0301 	orr.w	r3, r3, #1
 800050c:	6193      	str	r3, [r2, #24]
 800050e:	4b12      	ldr	r3, [pc, #72]	; (8000558 <HAL_MspInit+0x5c>)
 8000510:	699b      	ldr	r3, [r3, #24]
 8000512:	f003 0301 	and.w	r3, r3, #1
 8000516:	60bb      	str	r3, [r7, #8]
 8000518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051a:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <HAL_MspInit+0x5c>)
 800051c:	69db      	ldr	r3, [r3, #28]
 800051e:	4a0e      	ldr	r2, [pc, #56]	; (8000558 <HAL_MspInit+0x5c>)
 8000520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000524:	61d3      	str	r3, [r2, #28]
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <HAL_MspInit+0x5c>)
 8000528:	69db      	ldr	r3, [r3, #28]
 800052a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000532:	4b0a      	ldr	r3, [pc, #40]	; (800055c <HAL_MspInit+0x60>)
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	4a04      	ldr	r2, [pc, #16]	; (800055c <HAL_MspInit+0x60>)
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800054e:	bf00      	nop
 8000550:	3714      	adds	r7, #20
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr
 8000558:	40021000 	.word	0x40021000
 800055c:	40010000 	.word	0x40010000

08000560 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b088      	sub	sp, #32
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000568:	f107 0310 	add.w	r3, r7, #16
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a1b      	ldr	r2, [pc, #108]	; (80005e8 <HAL_UART_MspInit+0x88>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d12f      	bne.n	80005e0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000580:	4b1a      	ldr	r3, [pc, #104]	; (80005ec <HAL_UART_MspInit+0x8c>)
 8000582:	69db      	ldr	r3, [r3, #28]
 8000584:	4a19      	ldr	r2, [pc, #100]	; (80005ec <HAL_UART_MspInit+0x8c>)
 8000586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800058a:	61d3      	str	r3, [r2, #28]
 800058c:	4b17      	ldr	r3, [pc, #92]	; (80005ec <HAL_UART_MspInit+0x8c>)
 800058e:	69db      	ldr	r3, [r3, #28]
 8000590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000598:	4b14      	ldr	r3, [pc, #80]	; (80005ec <HAL_UART_MspInit+0x8c>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	4a13      	ldr	r2, [pc, #76]	; (80005ec <HAL_UART_MspInit+0x8c>)
 800059e:	f043 0304 	orr.w	r3, r3, #4
 80005a2:	6193      	str	r3, [r2, #24]
 80005a4:	4b11      	ldr	r3, [pc, #68]	; (80005ec <HAL_UART_MspInit+0x8c>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	f003 0304 	and.w	r3, r3, #4
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005b0:	2304      	movs	r3, #4
 80005b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b4:	2302      	movs	r3, #2
 80005b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b8:	2303      	movs	r3, #3
 80005ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005bc:	f107 0310 	add.w	r3, r7, #16
 80005c0:	4619      	mov	r1, r3
 80005c2:	480b      	ldr	r0, [pc, #44]	; (80005f0 <HAL_UART_MspInit+0x90>)
 80005c4:	f000 fd1e 	bl	8001004 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80005c8:	2308      	movs	r3, #8
 80005ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d4:	f107 0310 	add.w	r3, r7, #16
 80005d8:	4619      	mov	r1, r3
 80005da:	4805      	ldr	r0, [pc, #20]	; (80005f0 <HAL_UART_MspInit+0x90>)
 80005dc:	f000 fd12 	bl	8001004 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005e0:	bf00      	nop
 80005e2:	3720      	adds	r7, #32
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40004400 	.word	0x40004400
 80005ec:	40021000 	.word	0x40021000
 80005f0:	40010800 	.word	0x40010800

080005f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08e      	sub	sp, #56	; 0x38
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80005fc:	2300      	movs	r3, #0
 80005fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000600:	2300      	movs	r3, #0
 8000602:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000604:	2300      	movs	r3, #0
 8000606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800060a:	4b34      	ldr	r3, [pc, #208]	; (80006dc <HAL_InitTick+0xe8>)
 800060c:	69db      	ldr	r3, [r3, #28]
 800060e:	4a33      	ldr	r2, [pc, #204]	; (80006dc <HAL_InitTick+0xe8>)
 8000610:	f043 0304 	orr.w	r3, r3, #4
 8000614:	61d3      	str	r3, [r2, #28]
 8000616:	4b31      	ldr	r3, [pc, #196]	; (80006dc <HAL_InitTick+0xe8>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	f003 0304 	and.w	r3, r3, #4
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000622:	f107 0210 	add.w	r2, r7, #16
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4611      	mov	r1, r2
 800062c:	4618      	mov	r0, r3
 800062e:	f001 faa3 	bl	8001b78 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000632:	6a3b      	ldr	r3, [r7, #32]
 8000634:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000638:	2b00      	cmp	r3, #0
 800063a:	d103      	bne.n	8000644 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800063c:	f001 fa74 	bl	8001b28 <HAL_RCC_GetPCLK1Freq>
 8000640:	6378      	str	r0, [r7, #52]	; 0x34
 8000642:	e004      	b.n	800064e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000644:	f001 fa70 	bl	8001b28 <HAL_RCC_GetPCLK1Freq>
 8000648:	4603      	mov	r3, r0
 800064a:	005b      	lsls	r3, r3, #1
 800064c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800064e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000650:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <HAL_InitTick+0xec>)
 8000652:	fba2 2303 	umull	r2, r3, r2, r3
 8000656:	0c9b      	lsrs	r3, r3, #18
 8000658:	3b01      	subs	r3, #1
 800065a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800065c:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <HAL_InitTick+0xf0>)
 800065e:	4a22      	ldr	r2, [pc, #136]	; (80006e8 <HAL_InitTick+0xf4>)
 8000660:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000662:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <HAL_InitTick+0xf0>)
 8000664:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000668:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800066a:	4a1e      	ldr	r2, [pc, #120]	; (80006e4 <HAL_InitTick+0xf0>)
 800066c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800066e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <HAL_InitTick+0xf0>)
 8000672:	2200      	movs	r2, #0
 8000674:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000676:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <HAL_InitTick+0xf0>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800067c:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <HAL_InitTick+0xf0>)
 800067e:	2200      	movs	r2, #0
 8000680:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000682:	4818      	ldr	r0, [pc, #96]	; (80006e4 <HAL_InitTick+0xf0>)
 8000684:	f001 fac6 	bl	8001c14 <HAL_TIM_Base_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800068e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000692:	2b00      	cmp	r3, #0
 8000694:	d11b      	bne.n	80006ce <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000696:	4813      	ldr	r0, [pc, #76]	; (80006e4 <HAL_InitTick+0xf0>)
 8000698:	f001 fb14 	bl	8001cc4 <HAL_TIM_Base_Start_IT>
 800069c:	4603      	mov	r3, r0
 800069e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80006a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d111      	bne.n	80006ce <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80006aa:	201e      	movs	r0, #30
 80006ac:	f000 fc9b 	bl	8000fe6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2b0f      	cmp	r3, #15
 80006b4:	d808      	bhi.n	80006c8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80006b6:	2200      	movs	r2, #0
 80006b8:	6879      	ldr	r1, [r7, #4]
 80006ba:	201e      	movs	r0, #30
 80006bc:	f000 fc77 	bl	8000fae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006c0:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <HAL_InitTick+0xf8>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6013      	str	r3, [r2, #0]
 80006c6:	e002      	b.n	80006ce <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80006c8:	2301      	movs	r3, #1
 80006ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80006ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3738      	adds	r7, #56	; 0x38
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40021000 	.word	0x40021000
 80006e0:	431bde83 	.word	0x431bde83
 80006e4:	200000d4 	.word	0x200000d4
 80006e8:	40000800 	.word	0x40000800
 80006ec:	20000004 	.word	0x20000004

080006f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <NMI_Handler+0x4>

080006f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <HardFault_Handler+0x4>

080006fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <MemManage_Handler+0x4>

08000702 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000706:	e7fe      	b.n	8000706 <BusFault_Handler+0x4>

08000708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800070c:	e7fe      	b.n	800070c <UsageFault_Handler+0x4>

0800070e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr

0800071a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr

08000726 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr

08000732 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr
	...

08000740 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	if (GPIOB->IDR & GPIO_PIN_3) { // Если кнопка нажата
 8000744:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <EXTI3_IRQHandler+0x34>)
 8000746:	689b      	ldr	r3, [r3, #8]
 8000748:	f003 0308 	and.w	r3, r3, #8
 800074c:	2b00      	cmp	r3, #0
 800074e:	d004      	beq.n	800075a <EXTI3_IRQHandler+0x1a>
		GPIOC->BSRR = LED_Pin;      // то LED ON
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <EXTI3_IRQHandler+0x38>)
 8000752:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000756:	611a      	str	r2, [r3, #16]
 8000758:	e003      	b.n	8000762 <EXTI3_IRQHandler+0x22>
	} else {
		GPIOC->BRR = LED_Pin;     // иначе LED OFF
 800075a:	4b07      	ldr	r3, [pc, #28]	; (8000778 <EXTI3_IRQHandler+0x38>)
 800075c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000760:	615a      	str	r2, [r3, #20]
	}
	/* USER CODE END EXTI4_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000762:	2010      	movs	r0, #16
 8000764:	f000 fdea 	bl	800133c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000768:	2008      	movs	r0, #8
 800076a:	f000 fde7 	bl	800133c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40010c00 	.word	0x40010c00
 8000778:	40011000 	.word	0x40011000

0800077c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if (!(GPIOB->IDR & GPIO_PIN_4) && (!(GPIOB->IDR & GPIO_PIN_5))) {
 8000780:	4b8c      	ldr	r3, [pc, #560]	; (80009b4 <EXTI4_IRQHandler+0x238>)
 8000782:	689b      	ldr	r3, [r3, #8]
 8000784:	f003 0310 	and.w	r3, r3, #16
 8000788:	2b00      	cmp	r3, #0
 800078a:	d109      	bne.n	80007a0 <EXTI4_IRQHandler+0x24>
 800078c:	4b89      	ldr	r3, [pc, #548]	; (80009b4 <EXTI4_IRQHandler+0x238>)
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	f003 0320 	and.w	r3, r3, #32
 8000794:	2b00      	cmp	r3, #0
 8000796:	d103      	bne.n	80007a0 <EXTI4_IRQHandler+0x24>
		status = 0x00;
 8000798:	4b87      	ldr	r3, [pc, #540]	; (80009b8 <EXTI4_IRQHandler+0x23c>)
 800079a:	2200      	movs	r2, #0
 800079c:	701a      	strb	r2, [r3, #0]
 800079e:	e02e      	b.n	80007fe <EXTI4_IRQHandler+0x82>
	} else if ((GPIOB->IDR & GPIO_PIN_4) && (!(GPIOB->IDR & GPIO_PIN_5))) {
 80007a0:	4b84      	ldr	r3, [pc, #528]	; (80009b4 <EXTI4_IRQHandler+0x238>)
 80007a2:	689b      	ldr	r3, [r3, #8]
 80007a4:	f003 0310 	and.w	r3, r3, #16
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d009      	beq.n	80007c0 <EXTI4_IRQHandler+0x44>
 80007ac:	4b81      	ldr	r3, [pc, #516]	; (80009b4 <EXTI4_IRQHandler+0x238>)
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	f003 0320 	and.w	r3, r3, #32
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d103      	bne.n	80007c0 <EXTI4_IRQHandler+0x44>
		status = 0x10;
 80007b8:	4b7f      	ldr	r3, [pc, #508]	; (80009b8 <EXTI4_IRQHandler+0x23c>)
 80007ba:	2210      	movs	r2, #16
 80007bc:	701a      	strb	r2, [r3, #0]
 80007be:	e01e      	b.n	80007fe <EXTI4_IRQHandler+0x82>
	} else if ((GPIOB->IDR & GPIO_PIN_4) && (GPIOB->IDR & GPIO_PIN_5)) {
 80007c0:	4b7c      	ldr	r3, [pc, #496]	; (80009b4 <EXTI4_IRQHandler+0x238>)
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	f003 0310 	and.w	r3, r3, #16
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d009      	beq.n	80007e0 <EXTI4_IRQHandler+0x64>
 80007cc:	4b79      	ldr	r3, [pc, #484]	; (80009b4 <EXTI4_IRQHandler+0x238>)
 80007ce:	689b      	ldr	r3, [r3, #8]
 80007d0:	f003 0320 	and.w	r3, r3, #32
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d003      	beq.n	80007e0 <EXTI4_IRQHandler+0x64>
		status = 0x11;
 80007d8:	4b77      	ldr	r3, [pc, #476]	; (80009b8 <EXTI4_IRQHandler+0x23c>)
 80007da:	2211      	movs	r2, #17
 80007dc:	701a      	strb	r2, [r3, #0]
 80007de:	e00e      	b.n	80007fe <EXTI4_IRQHandler+0x82>
	} else if (!(GPIOB->IDR & GPIO_PIN_4) && (GPIOB->IDR & GPIO_PIN_5)) {
 80007e0:	4b74      	ldr	r3, [pc, #464]	; (80009b4 <EXTI4_IRQHandler+0x238>)
 80007e2:	689b      	ldr	r3, [r3, #8]
 80007e4:	f003 0310 	and.w	r3, r3, #16
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d108      	bne.n	80007fe <EXTI4_IRQHandler+0x82>
 80007ec:	4b71      	ldr	r3, [pc, #452]	; (80009b4 <EXTI4_IRQHandler+0x238>)
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	f003 0320 	and.w	r3, r3, #32
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d002      	beq.n	80007fe <EXTI4_IRQHandler+0x82>
		status = 0x01;
 80007f8:	4b6f      	ldr	r3, [pc, #444]	; (80009b8 <EXTI4_IRQHandler+0x23c>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	701a      	strb	r2, [r3, #0]
	}

	if (status_old == 0x10 && status == 0x11) {
 80007fe:	4b6f      	ldr	r3, [pc, #444]	; (80009bc <EXTI4_IRQHandler+0x240>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b10      	cmp	r3, #16
 8000804:	d12a      	bne.n	800085c <EXTI4_IRQHandler+0xe0>
 8000806:	4b6c      	ldr	r3, [pc, #432]	; (80009b8 <EXTI4_IRQHandler+0x23c>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b11      	cmp	r3, #17
 800080c:	d126      	bne.n	800085c <EXTI4_IRQHandler+0xe0>
		Time = HAL_GetTick();
 800080e:	f000 faeb 	bl	8000de8 <HAL_GetTick>
 8000812:	4603      	mov	r3, r0
 8000814:	4a6a      	ldr	r2, [pc, #424]	; (80009c0 <EXTI4_IRQHandler+0x244>)
 8000816:	6013      	str	r3, [r2, #0]
		if (Time - Time_old < reaction) {
 8000818:	4b69      	ldr	r3, [pc, #420]	; (80009c0 <EXTI4_IRQHandler+0x244>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	4b69      	ldr	r3, [pc, #420]	; (80009c4 <EXTI4_IRQHandler+0x248>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	1ad3      	subs	r3, r2, r3
 8000822:	2b09      	cmp	r3, #9
 8000824:	d809      	bhi.n	800083a <EXTI4_IRQHandler+0xbe>
			A = A + scroll;
 8000826:	4b68      	ldr	r3, [pc, #416]	; (80009c8 <EXTI4_IRQHandler+0x24c>)
 8000828:	f9b3 3000 	ldrsh.w	r3, [r3]
 800082c:	b29b      	uxth	r3, r3
 800082e:	3332      	adds	r3, #50	; 0x32
 8000830:	b29b      	uxth	r3, r3
 8000832:	b21a      	sxth	r2, r3
 8000834:	4b64      	ldr	r3, [pc, #400]	; (80009c8 <EXTI4_IRQHandler+0x24c>)
 8000836:	801a      	strh	r2, [r3, #0]
 8000838:	e008      	b.n	800084c <EXTI4_IRQHandler+0xd0>
		} else {
			A = A + 1;
 800083a:	4b63      	ldr	r3, [pc, #396]	; (80009c8 <EXTI4_IRQHandler+0x24c>)
 800083c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000840:	b29b      	uxth	r3, r3
 8000842:	3301      	adds	r3, #1
 8000844:	b29b      	uxth	r3, r3
 8000846:	b21a      	sxth	r2, r3
 8000848:	4b5f      	ldr	r3, [pc, #380]	; (80009c8 <EXTI4_IRQHandler+0x24c>)
 800084a:	801a      	strh	r2, [r3, #0]
		}
		Time_old = Time;
 800084c:	4b5c      	ldr	r3, [pc, #368]	; (80009c0 <EXTI4_IRQHandler+0x244>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a5c      	ldr	r2, [pc, #368]	; (80009c4 <EXTI4_IRQHandler+0x248>)
 8000852:	6013      	str	r3, [r2, #0]
		send_to_uart = 1;
 8000854:	4b5d      	ldr	r3, [pc, #372]	; (80009cc <EXTI4_IRQHandler+0x250>)
 8000856:	2201      	movs	r2, #1
 8000858:	701a      	strb	r2, [r3, #0]
 800085a:	e02d      	b.n	80008b8 <EXTI4_IRQHandler+0x13c>
	} else if (status_old == 0x01 && status == 0x00) {
 800085c:	4b57      	ldr	r3, [pc, #348]	; (80009bc <EXTI4_IRQHandler+0x240>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b01      	cmp	r3, #1
 8000862:	d129      	bne.n	80008b8 <EXTI4_IRQHandler+0x13c>
 8000864:	4b54      	ldr	r3, [pc, #336]	; (80009b8 <EXTI4_IRQHandler+0x23c>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d125      	bne.n	80008b8 <EXTI4_IRQHandler+0x13c>
		Time = HAL_GetTick();
 800086c:	f000 fabc 	bl	8000de8 <HAL_GetTick>
 8000870:	4603      	mov	r3, r0
 8000872:	4a53      	ldr	r2, [pc, #332]	; (80009c0 <EXTI4_IRQHandler+0x244>)
 8000874:	6013      	str	r3, [r2, #0]
		if (Time - Time_old < reaction) {
 8000876:	4b52      	ldr	r3, [pc, #328]	; (80009c0 <EXTI4_IRQHandler+0x244>)
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	4b52      	ldr	r3, [pc, #328]	; (80009c4 <EXTI4_IRQHandler+0x248>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	2b09      	cmp	r3, #9
 8000882:	d809      	bhi.n	8000898 <EXTI4_IRQHandler+0x11c>
			A = A + scroll;
 8000884:	4b50      	ldr	r3, [pc, #320]	; (80009c8 <EXTI4_IRQHandler+0x24c>)
 8000886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800088a:	b29b      	uxth	r3, r3
 800088c:	3332      	adds	r3, #50	; 0x32
 800088e:	b29b      	uxth	r3, r3
 8000890:	b21a      	sxth	r2, r3
 8000892:	4b4d      	ldr	r3, [pc, #308]	; (80009c8 <EXTI4_IRQHandler+0x24c>)
 8000894:	801a      	strh	r2, [r3, #0]
 8000896:	e008      	b.n	80008aa <EXTI4_IRQHandler+0x12e>
		} else {
			A = A + 1;
 8000898:	4b4b      	ldr	r3, [pc, #300]	; (80009c8 <EXTI4_IRQHandler+0x24c>)
 800089a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800089e:	b29b      	uxth	r3, r3
 80008a0:	3301      	adds	r3, #1
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	b21a      	sxth	r2, r3
 80008a6:	4b48      	ldr	r3, [pc, #288]	; (80009c8 <EXTI4_IRQHandler+0x24c>)
 80008a8:	801a      	strh	r2, [r3, #0]
		}
		Time_old = Time;
 80008aa:	4b45      	ldr	r3, [pc, #276]	; (80009c0 <EXTI4_IRQHandler+0x244>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a45      	ldr	r2, [pc, #276]	; (80009c4 <EXTI4_IRQHandler+0x248>)
 80008b0:	6013      	str	r3, [r2, #0]
		send_to_uart = 1;
 80008b2:	4b46      	ldr	r3, [pc, #280]	; (80009cc <EXTI4_IRQHandler+0x250>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	701a      	strb	r2, [r3, #0]
	}

	if (status_old == 0x11 && status == 0x10) {
 80008b8:	4b40      	ldr	r3, [pc, #256]	; (80009bc <EXTI4_IRQHandler+0x240>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b11      	cmp	r3, #17
 80008be:	d107      	bne.n	80008d0 <EXTI4_IRQHandler+0x154>
 80008c0:	4b3d      	ldr	r3, [pc, #244]	; (80009b8 <EXTI4_IRQHandler+0x23c>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b10      	cmp	r3, #16
 80008c6:	d103      	bne.n	80008d0 <EXTI4_IRQHandler+0x154>
		status_old = 0x10;
 80008c8:	4b3c      	ldr	r3, [pc, #240]	; (80009bc <EXTI4_IRQHandler+0x240>)
 80008ca:	2210      	movs	r2, #16
 80008cc:	701a      	strb	r2, [r3, #0]
 80008ce:	e068      	b.n	80009a2 <EXTI4_IRQHandler+0x226>

	} else if (status_old == 0x00 && status == 0x01) {
 80008d0:	4b3a      	ldr	r3, [pc, #232]	; (80009bc <EXTI4_IRQHandler+0x240>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d107      	bne.n	80008e8 <EXTI4_IRQHandler+0x16c>
 80008d8:	4b37      	ldr	r3, [pc, #220]	; (80009b8 <EXTI4_IRQHandler+0x23c>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d103      	bne.n	80008e8 <EXTI4_IRQHandler+0x16c>
		status_old = 0x01;
 80008e0:	4b36      	ldr	r3, [pc, #216]	; (80009bc <EXTI4_IRQHandler+0x240>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	701a      	strb	r2, [r3, #0]
 80008e6:	e05c      	b.n	80009a2 <EXTI4_IRQHandler+0x226>

	}

	else if (status_old == 0x10 && status == 0x00) {
 80008e8:	4b34      	ldr	r3, [pc, #208]	; (80009bc <EXTI4_IRQHandler+0x240>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b10      	cmp	r3, #16
 80008ee:	d12a      	bne.n	8000946 <EXTI4_IRQHandler+0x1ca>
 80008f0:	4b31      	ldr	r3, [pc, #196]	; (80009b8 <EXTI4_IRQHandler+0x23c>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d126      	bne.n	8000946 <EXTI4_IRQHandler+0x1ca>
		Time = HAL_GetTick();
 80008f8:	f000 fa76 	bl	8000de8 <HAL_GetTick>
 80008fc:	4603      	mov	r3, r0
 80008fe:	4a30      	ldr	r2, [pc, #192]	; (80009c0 <EXTI4_IRQHandler+0x244>)
 8000900:	6013      	str	r3, [r2, #0]
		if (Time - Time_old < reaction) {
 8000902:	4b2f      	ldr	r3, [pc, #188]	; (80009c0 <EXTI4_IRQHandler+0x244>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	4b2f      	ldr	r3, [pc, #188]	; (80009c4 <EXTI4_IRQHandler+0x248>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	1ad3      	subs	r3, r2, r3
 800090c:	2b09      	cmp	r3, #9
 800090e:	d809      	bhi.n	8000924 <EXTI4_IRQHandler+0x1a8>
			A = A - scroll;
 8000910:	4b2d      	ldr	r3, [pc, #180]	; (80009c8 <EXTI4_IRQHandler+0x24c>)
 8000912:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000916:	b29b      	uxth	r3, r3
 8000918:	3b32      	subs	r3, #50	; 0x32
 800091a:	b29b      	uxth	r3, r3
 800091c:	b21a      	sxth	r2, r3
 800091e:	4b2a      	ldr	r3, [pc, #168]	; (80009c8 <EXTI4_IRQHandler+0x24c>)
 8000920:	801a      	strh	r2, [r3, #0]
 8000922:	e008      	b.n	8000936 <EXTI4_IRQHandler+0x1ba>
		} else {
			A = A - 1;
 8000924:	4b28      	ldr	r3, [pc, #160]	; (80009c8 <EXTI4_IRQHandler+0x24c>)
 8000926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800092a:	b29b      	uxth	r3, r3
 800092c:	3b01      	subs	r3, #1
 800092e:	b29b      	uxth	r3, r3
 8000930:	b21a      	sxth	r2, r3
 8000932:	4b25      	ldr	r3, [pc, #148]	; (80009c8 <EXTI4_IRQHandler+0x24c>)
 8000934:	801a      	strh	r2, [r3, #0]
		}
		Time_old = Time;
 8000936:	4b22      	ldr	r3, [pc, #136]	; (80009c0 <EXTI4_IRQHandler+0x244>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a22      	ldr	r2, [pc, #136]	; (80009c4 <EXTI4_IRQHandler+0x248>)
 800093c:	6013      	str	r3, [r2, #0]
		send_to_uart = 1;
 800093e:	4b23      	ldr	r3, [pc, #140]	; (80009cc <EXTI4_IRQHandler+0x250>)
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]
 8000944:	e02d      	b.n	80009a2 <EXTI4_IRQHandler+0x226>
	}

	else if (status_old == 0x01 && status == 0x11) {
 8000946:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <EXTI4_IRQHandler+0x240>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d129      	bne.n	80009a2 <EXTI4_IRQHandler+0x226>
 800094e:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <EXTI4_IRQHandler+0x23c>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b11      	cmp	r3, #17
 8000954:	d125      	bne.n	80009a2 <EXTI4_IRQHandler+0x226>
		Time = HAL_GetTick();
 8000956:	f000 fa47 	bl	8000de8 <HAL_GetTick>
 800095a:	4603      	mov	r3, r0
 800095c:	4a18      	ldr	r2, [pc, #96]	; (80009c0 <EXTI4_IRQHandler+0x244>)
 800095e:	6013      	str	r3, [r2, #0]
		if (Time - Time_old < reaction) {
 8000960:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <EXTI4_IRQHandler+0x244>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <EXTI4_IRQHandler+0x248>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	2b09      	cmp	r3, #9
 800096c:	d809      	bhi.n	8000982 <EXTI4_IRQHandler+0x206>
			A = A - scroll;
 800096e:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <EXTI4_IRQHandler+0x24c>)
 8000970:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000974:	b29b      	uxth	r3, r3
 8000976:	3b32      	subs	r3, #50	; 0x32
 8000978:	b29b      	uxth	r3, r3
 800097a:	b21a      	sxth	r2, r3
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <EXTI4_IRQHandler+0x24c>)
 800097e:	801a      	strh	r2, [r3, #0]
 8000980:	e008      	b.n	8000994 <EXTI4_IRQHandler+0x218>
		} else {
			A = A - 1;
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <EXTI4_IRQHandler+0x24c>)
 8000984:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000988:	b29b      	uxth	r3, r3
 800098a:	3b01      	subs	r3, #1
 800098c:	b29b      	uxth	r3, r3
 800098e:	b21a      	sxth	r2, r3
 8000990:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <EXTI4_IRQHandler+0x24c>)
 8000992:	801a      	strh	r2, [r3, #0]
		}
		Time_old = Time;
 8000994:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <EXTI4_IRQHandler+0x244>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <EXTI4_IRQHandler+0x248>)
 800099a:	6013      	str	r3, [r2, #0]
		send_to_uart = 1;
 800099c:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <EXTI4_IRQHandler+0x250>)
 800099e:	2201      	movs	r2, #1
 80009a0:	701a      	strb	r2, [r3, #0]
	}
	status_old = status;
 80009a2:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <EXTI4_IRQHandler+0x23c>)
 80009a4:	781a      	ldrb	r2, [r3, #0]
 80009a6:	4b05      	ldr	r3, [pc, #20]	; (80009bc <EXTI4_IRQHandler+0x240>)
 80009a8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80009aa:	2010      	movs	r0, #16
 80009ac:	f000 fcc6 	bl	800133c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40010c00 	.word	0x40010c00
 80009b8:	2000011c 	.word	0x2000011c
 80009bc:	2000011d 	.word	0x2000011d
 80009c0:	20000120 	.word	0x20000120
 80009c4:	20000124 	.word	0x20000124
 80009c8:	2000008e 	.word	0x2000008e
 80009cc:	2000008c 	.word	0x2000008c

080009d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if (!(GPIOB->IDR & GPIO_PIN_4) && (!(GPIOB->IDR & GPIO_PIN_5))) {
 80009d4:	4b8c      	ldr	r3, [pc, #560]	; (8000c08 <EXTI9_5_IRQHandler+0x238>)
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	f003 0310 	and.w	r3, r3, #16
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d109      	bne.n	80009f4 <EXTI9_5_IRQHandler+0x24>
 80009e0:	4b89      	ldr	r3, [pc, #548]	; (8000c08 <EXTI9_5_IRQHandler+0x238>)
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	f003 0320 	and.w	r3, r3, #32
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d103      	bne.n	80009f4 <EXTI9_5_IRQHandler+0x24>
		status = 0x00;
 80009ec:	4b87      	ldr	r3, [pc, #540]	; (8000c0c <EXTI9_5_IRQHandler+0x23c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
 80009f2:	e02e      	b.n	8000a52 <EXTI9_5_IRQHandler+0x82>
	} else if ((GPIOB->IDR & GPIO_PIN_4) && (!(GPIOB->IDR & GPIO_PIN_5))) {
 80009f4:	4b84      	ldr	r3, [pc, #528]	; (8000c08 <EXTI9_5_IRQHandler+0x238>)
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	f003 0310 	and.w	r3, r3, #16
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d009      	beq.n	8000a14 <EXTI9_5_IRQHandler+0x44>
 8000a00:	4b81      	ldr	r3, [pc, #516]	; (8000c08 <EXTI9_5_IRQHandler+0x238>)
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	f003 0320 	and.w	r3, r3, #32
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d103      	bne.n	8000a14 <EXTI9_5_IRQHandler+0x44>
		status = 0x10;
 8000a0c:	4b7f      	ldr	r3, [pc, #508]	; (8000c0c <EXTI9_5_IRQHandler+0x23c>)
 8000a0e:	2210      	movs	r2, #16
 8000a10:	701a      	strb	r2, [r3, #0]
 8000a12:	e01e      	b.n	8000a52 <EXTI9_5_IRQHandler+0x82>
	} else if ((GPIOB->IDR & GPIO_PIN_4) && (GPIOB->IDR & GPIO_PIN_5)) {
 8000a14:	4b7c      	ldr	r3, [pc, #496]	; (8000c08 <EXTI9_5_IRQHandler+0x238>)
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	f003 0310 	and.w	r3, r3, #16
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d009      	beq.n	8000a34 <EXTI9_5_IRQHandler+0x64>
 8000a20:	4b79      	ldr	r3, [pc, #484]	; (8000c08 <EXTI9_5_IRQHandler+0x238>)
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	f003 0320 	and.w	r3, r3, #32
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d003      	beq.n	8000a34 <EXTI9_5_IRQHandler+0x64>
		status = 0x11;
 8000a2c:	4b77      	ldr	r3, [pc, #476]	; (8000c0c <EXTI9_5_IRQHandler+0x23c>)
 8000a2e:	2211      	movs	r2, #17
 8000a30:	701a      	strb	r2, [r3, #0]
 8000a32:	e00e      	b.n	8000a52 <EXTI9_5_IRQHandler+0x82>
	} else if (!(GPIOB->IDR & GPIO_PIN_4) && (GPIOB->IDR & GPIO_PIN_5)) {
 8000a34:	4b74      	ldr	r3, [pc, #464]	; (8000c08 <EXTI9_5_IRQHandler+0x238>)
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	f003 0310 	and.w	r3, r3, #16
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d108      	bne.n	8000a52 <EXTI9_5_IRQHandler+0x82>
 8000a40:	4b71      	ldr	r3, [pc, #452]	; (8000c08 <EXTI9_5_IRQHandler+0x238>)
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	f003 0320 	and.w	r3, r3, #32
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d002      	beq.n	8000a52 <EXTI9_5_IRQHandler+0x82>
		status = 0x01;
 8000a4c:	4b6f      	ldr	r3, [pc, #444]	; (8000c0c <EXTI9_5_IRQHandler+0x23c>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	701a      	strb	r2, [r3, #0]
	}

	if (status_old == 0x10 && status == 0x11) {
 8000a52:	4b6f      	ldr	r3, [pc, #444]	; (8000c10 <EXTI9_5_IRQHandler+0x240>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b10      	cmp	r3, #16
 8000a58:	d12a      	bne.n	8000ab0 <EXTI9_5_IRQHandler+0xe0>
 8000a5a:	4b6c      	ldr	r3, [pc, #432]	; (8000c0c <EXTI9_5_IRQHandler+0x23c>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b11      	cmp	r3, #17
 8000a60:	d126      	bne.n	8000ab0 <EXTI9_5_IRQHandler+0xe0>
		Time = HAL_GetTick();
 8000a62:	f000 f9c1 	bl	8000de8 <HAL_GetTick>
 8000a66:	4603      	mov	r3, r0
 8000a68:	4a6a      	ldr	r2, [pc, #424]	; (8000c14 <EXTI9_5_IRQHandler+0x244>)
 8000a6a:	6013      	str	r3, [r2, #0]
		if (Time - Time_old < reaction) {
 8000a6c:	4b69      	ldr	r3, [pc, #420]	; (8000c14 <EXTI9_5_IRQHandler+0x244>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b69      	ldr	r3, [pc, #420]	; (8000c18 <EXTI9_5_IRQHandler+0x248>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	2b09      	cmp	r3, #9
 8000a78:	d809      	bhi.n	8000a8e <EXTI9_5_IRQHandler+0xbe>
			A = A + scroll;
 8000a7a:	4b68      	ldr	r3, [pc, #416]	; (8000c1c <EXTI9_5_IRQHandler+0x24c>)
 8000a7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	3332      	adds	r3, #50	; 0x32
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	b21a      	sxth	r2, r3
 8000a88:	4b64      	ldr	r3, [pc, #400]	; (8000c1c <EXTI9_5_IRQHandler+0x24c>)
 8000a8a:	801a      	strh	r2, [r3, #0]
 8000a8c:	e008      	b.n	8000aa0 <EXTI9_5_IRQHandler+0xd0>
		} else {
			A = A + 1;
 8000a8e:	4b63      	ldr	r3, [pc, #396]	; (8000c1c <EXTI9_5_IRQHandler+0x24c>)
 8000a90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	3301      	adds	r3, #1
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	b21a      	sxth	r2, r3
 8000a9c:	4b5f      	ldr	r3, [pc, #380]	; (8000c1c <EXTI9_5_IRQHandler+0x24c>)
 8000a9e:	801a      	strh	r2, [r3, #0]
		}
		Time_old = Time;
 8000aa0:	4b5c      	ldr	r3, [pc, #368]	; (8000c14 <EXTI9_5_IRQHandler+0x244>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a5c      	ldr	r2, [pc, #368]	; (8000c18 <EXTI9_5_IRQHandler+0x248>)
 8000aa6:	6013      	str	r3, [r2, #0]
		send_to_uart = 1;
 8000aa8:	4b5d      	ldr	r3, [pc, #372]	; (8000c20 <EXTI9_5_IRQHandler+0x250>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	701a      	strb	r2, [r3, #0]
 8000aae:	e02d      	b.n	8000b0c <EXTI9_5_IRQHandler+0x13c>
	} else if (status_old == 0x01 && status == 0x00) {
 8000ab0:	4b57      	ldr	r3, [pc, #348]	; (8000c10 <EXTI9_5_IRQHandler+0x240>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d129      	bne.n	8000b0c <EXTI9_5_IRQHandler+0x13c>
 8000ab8:	4b54      	ldr	r3, [pc, #336]	; (8000c0c <EXTI9_5_IRQHandler+0x23c>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d125      	bne.n	8000b0c <EXTI9_5_IRQHandler+0x13c>
		Time = HAL_GetTick();
 8000ac0:	f000 f992 	bl	8000de8 <HAL_GetTick>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	4a53      	ldr	r2, [pc, #332]	; (8000c14 <EXTI9_5_IRQHandler+0x244>)
 8000ac8:	6013      	str	r3, [r2, #0]
		if (Time - Time_old < reaction) {
 8000aca:	4b52      	ldr	r3, [pc, #328]	; (8000c14 <EXTI9_5_IRQHandler+0x244>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	4b52      	ldr	r3, [pc, #328]	; (8000c18 <EXTI9_5_IRQHandler+0x248>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	1ad3      	subs	r3, r2, r3
 8000ad4:	2b09      	cmp	r3, #9
 8000ad6:	d809      	bhi.n	8000aec <EXTI9_5_IRQHandler+0x11c>
			A = A + scroll;
 8000ad8:	4b50      	ldr	r3, [pc, #320]	; (8000c1c <EXTI9_5_IRQHandler+0x24c>)
 8000ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	3332      	adds	r3, #50	; 0x32
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	b21a      	sxth	r2, r3
 8000ae6:	4b4d      	ldr	r3, [pc, #308]	; (8000c1c <EXTI9_5_IRQHandler+0x24c>)
 8000ae8:	801a      	strh	r2, [r3, #0]
 8000aea:	e008      	b.n	8000afe <EXTI9_5_IRQHandler+0x12e>
		} else {
			A = A + 1;
 8000aec:	4b4b      	ldr	r3, [pc, #300]	; (8000c1c <EXTI9_5_IRQHandler+0x24c>)
 8000aee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	3301      	adds	r3, #1
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	b21a      	sxth	r2, r3
 8000afa:	4b48      	ldr	r3, [pc, #288]	; (8000c1c <EXTI9_5_IRQHandler+0x24c>)
 8000afc:	801a      	strh	r2, [r3, #0]
		}
		Time_old = Time;
 8000afe:	4b45      	ldr	r3, [pc, #276]	; (8000c14 <EXTI9_5_IRQHandler+0x244>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a45      	ldr	r2, [pc, #276]	; (8000c18 <EXTI9_5_IRQHandler+0x248>)
 8000b04:	6013      	str	r3, [r2, #0]
		send_to_uart = 1;
 8000b06:	4b46      	ldr	r3, [pc, #280]	; (8000c20 <EXTI9_5_IRQHandler+0x250>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	701a      	strb	r2, [r3, #0]
	}

	if (status_old == 0x11 && status == 0x10) {
 8000b0c:	4b40      	ldr	r3, [pc, #256]	; (8000c10 <EXTI9_5_IRQHandler+0x240>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b11      	cmp	r3, #17
 8000b12:	d107      	bne.n	8000b24 <EXTI9_5_IRQHandler+0x154>
 8000b14:	4b3d      	ldr	r3, [pc, #244]	; (8000c0c <EXTI9_5_IRQHandler+0x23c>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b10      	cmp	r3, #16
 8000b1a:	d103      	bne.n	8000b24 <EXTI9_5_IRQHandler+0x154>
		status_old = 0x10;
 8000b1c:	4b3c      	ldr	r3, [pc, #240]	; (8000c10 <EXTI9_5_IRQHandler+0x240>)
 8000b1e:	2210      	movs	r2, #16
 8000b20:	701a      	strb	r2, [r3, #0]
 8000b22:	e068      	b.n	8000bf6 <EXTI9_5_IRQHandler+0x226>

	} else if (status_old == 0x00 && status == 0x01) {
 8000b24:	4b3a      	ldr	r3, [pc, #232]	; (8000c10 <EXTI9_5_IRQHandler+0x240>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d107      	bne.n	8000b3c <EXTI9_5_IRQHandler+0x16c>
 8000b2c:	4b37      	ldr	r3, [pc, #220]	; (8000c0c <EXTI9_5_IRQHandler+0x23c>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d103      	bne.n	8000b3c <EXTI9_5_IRQHandler+0x16c>
		status_old = 0x01;
 8000b34:	4b36      	ldr	r3, [pc, #216]	; (8000c10 <EXTI9_5_IRQHandler+0x240>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	701a      	strb	r2, [r3, #0]
 8000b3a:	e05c      	b.n	8000bf6 <EXTI9_5_IRQHandler+0x226>

	}

	else if (status_old == 0x10 && status == 0x00) {
 8000b3c:	4b34      	ldr	r3, [pc, #208]	; (8000c10 <EXTI9_5_IRQHandler+0x240>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b10      	cmp	r3, #16
 8000b42:	d12a      	bne.n	8000b9a <EXTI9_5_IRQHandler+0x1ca>
 8000b44:	4b31      	ldr	r3, [pc, #196]	; (8000c0c <EXTI9_5_IRQHandler+0x23c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d126      	bne.n	8000b9a <EXTI9_5_IRQHandler+0x1ca>
		Time = HAL_GetTick();
 8000b4c:	f000 f94c 	bl	8000de8 <HAL_GetTick>
 8000b50:	4603      	mov	r3, r0
 8000b52:	4a30      	ldr	r2, [pc, #192]	; (8000c14 <EXTI9_5_IRQHandler+0x244>)
 8000b54:	6013      	str	r3, [r2, #0]
		if (Time - Time_old < reaction) {
 8000b56:	4b2f      	ldr	r3, [pc, #188]	; (8000c14 <EXTI9_5_IRQHandler+0x244>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	4b2f      	ldr	r3, [pc, #188]	; (8000c18 <EXTI9_5_IRQHandler+0x248>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	2b09      	cmp	r3, #9
 8000b62:	d809      	bhi.n	8000b78 <EXTI9_5_IRQHandler+0x1a8>
			A = A - scroll;
 8000b64:	4b2d      	ldr	r3, [pc, #180]	; (8000c1c <EXTI9_5_IRQHandler+0x24c>)
 8000b66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	3b32      	subs	r3, #50	; 0x32
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	b21a      	sxth	r2, r3
 8000b72:	4b2a      	ldr	r3, [pc, #168]	; (8000c1c <EXTI9_5_IRQHandler+0x24c>)
 8000b74:	801a      	strh	r2, [r3, #0]
 8000b76:	e008      	b.n	8000b8a <EXTI9_5_IRQHandler+0x1ba>
		} else {
			A = A - 1;
 8000b78:	4b28      	ldr	r3, [pc, #160]	; (8000c1c <EXTI9_5_IRQHandler+0x24c>)
 8000b7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	3b01      	subs	r3, #1
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	b21a      	sxth	r2, r3
 8000b86:	4b25      	ldr	r3, [pc, #148]	; (8000c1c <EXTI9_5_IRQHandler+0x24c>)
 8000b88:	801a      	strh	r2, [r3, #0]
		}
		Time_old = Time;
 8000b8a:	4b22      	ldr	r3, [pc, #136]	; (8000c14 <EXTI9_5_IRQHandler+0x244>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a22      	ldr	r2, [pc, #136]	; (8000c18 <EXTI9_5_IRQHandler+0x248>)
 8000b90:	6013      	str	r3, [r2, #0]
		send_to_uart = 1;
 8000b92:	4b23      	ldr	r3, [pc, #140]	; (8000c20 <EXTI9_5_IRQHandler+0x250>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	701a      	strb	r2, [r3, #0]
 8000b98:	e02d      	b.n	8000bf6 <EXTI9_5_IRQHandler+0x226>
	}

	else if (status_old == 0x01 && status == 0x11) {
 8000b9a:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <EXTI9_5_IRQHandler+0x240>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d129      	bne.n	8000bf6 <EXTI9_5_IRQHandler+0x226>
 8000ba2:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <EXTI9_5_IRQHandler+0x23c>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b11      	cmp	r3, #17
 8000ba8:	d125      	bne.n	8000bf6 <EXTI9_5_IRQHandler+0x226>
		Time = HAL_GetTick();
 8000baa:	f000 f91d 	bl	8000de8 <HAL_GetTick>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	4a18      	ldr	r2, [pc, #96]	; (8000c14 <EXTI9_5_IRQHandler+0x244>)
 8000bb2:	6013      	str	r3, [r2, #0]
		if (Time - Time_old < reaction) {
 8000bb4:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <EXTI9_5_IRQHandler+0x244>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <EXTI9_5_IRQHandler+0x248>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	2b09      	cmp	r3, #9
 8000bc0:	d809      	bhi.n	8000bd6 <EXTI9_5_IRQHandler+0x206>
			A = A - scroll;
 8000bc2:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <EXTI9_5_IRQHandler+0x24c>)
 8000bc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	3b32      	subs	r3, #50	; 0x32
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	b21a      	sxth	r2, r3
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <EXTI9_5_IRQHandler+0x24c>)
 8000bd2:	801a      	strh	r2, [r3, #0]
 8000bd4:	e008      	b.n	8000be8 <EXTI9_5_IRQHandler+0x218>
		} else {
			A = A - 1;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <EXTI9_5_IRQHandler+0x24c>)
 8000bd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	3b01      	subs	r3, #1
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	b21a      	sxth	r2, r3
 8000be4:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <EXTI9_5_IRQHandler+0x24c>)
 8000be6:	801a      	strh	r2, [r3, #0]
		}
		Time_old = Time;
 8000be8:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <EXTI9_5_IRQHandler+0x244>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <EXTI9_5_IRQHandler+0x248>)
 8000bee:	6013      	str	r3, [r2, #0]
		send_to_uart = 1;
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <EXTI9_5_IRQHandler+0x250>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	701a      	strb	r2, [r3, #0]
	}
	status_old = status;
 8000bf6:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <EXTI9_5_IRQHandler+0x23c>)
 8000bf8:	781a      	ldrb	r2, [r3, #0]
 8000bfa:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <EXTI9_5_IRQHandler+0x240>)
 8000bfc:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000bfe:	2020      	movs	r0, #32
 8000c00:	f000 fb9c 	bl	800133c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40010c00 	.word	0x40010c00
 8000c0c:	2000011c 	.word	0x2000011c
 8000c10:	2000011d 	.word	0x2000011d
 8000c14:	20000120 	.word	0x20000120
 8000c18:	20000124 	.word	0x20000124
 8000c1c:	2000008e 	.word	0x2000008e
 8000c20:	2000008c 	.word	0x2000008c

08000c24 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <TIM4_IRQHandler+0x10>)
 8000c2a:	f001 f89d 	bl	8001d68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200000d4 	.word	0x200000d4

08000c38 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	e00a      	b.n	8000c60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c4a:	f3af 8000 	nop.w
 8000c4e:	4601      	mov	r1, r0
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	1c5a      	adds	r2, r3, #1
 8000c54:	60ba      	str	r2, [r7, #8]
 8000c56:	b2ca      	uxtb	r2, r1
 8000c58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	697a      	ldr	r2, [r7, #20]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	dbf0      	blt.n	8000c4a <_read+0x12>
	}

return len;
 8000c68:	687b      	ldr	r3, [r7, #4]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
	return -1;
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr

08000c88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c98:	605a      	str	r2, [r3, #4]
	return 0;
 8000c9a:	2300      	movs	r3, #0
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr

08000ca6 <_isatty>:

int _isatty(int file)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
	return 1;
 8000cae:	2301      	movs	r3, #1
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr

08000cba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b085      	sub	sp, #20
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	60f8      	str	r0, [r7, #12]
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
	return 0;
 8000cc6:	2300      	movs	r3, #0
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
	...

08000cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cdc:	4a14      	ldr	r2, [pc, #80]	; (8000d30 <_sbrk+0x5c>)
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <_sbrk+0x60>)
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce8:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <_sbrk+0x64>)
 8000cf2:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <_sbrk+0x68>)
 8000cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d207      	bcs.n	8000d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d04:	f001 fb88 	bl	8002418 <__errno>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d12:	e009      	b.n	8000d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <_sbrk+0x64>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1a:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <_sbrk+0x64>)
 8000d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d26:	68fb      	ldr	r3, [r7, #12]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20005000 	.word	0x20005000
 8000d34:	00000400 	.word	0x00000400
 8000d38:	20000128 	.word	0x20000128
 8000d3c:	20000140 	.word	0x20000140

08000d40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr

08000d4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d4c:	480c      	ldr	r0, [pc, #48]	; (8000d80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d4e:	490d      	ldr	r1, [pc, #52]	; (8000d84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d50:	4a0d      	ldr	r2, [pc, #52]	; (8000d88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d54:	e002      	b.n	8000d5c <LoopCopyDataInit>

08000d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5a:	3304      	adds	r3, #4

08000d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d60:	d3f9      	bcc.n	8000d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d64:	4c0a      	ldr	r4, [pc, #40]	; (8000d90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d68:	e001      	b.n	8000d6e <LoopFillZerobss>

08000d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d6c:	3204      	adds	r2, #4

08000d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d70:	d3fb      	bcc.n	8000d6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d72:	f7ff ffe5 	bl	8000d40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d76:	f001 fb55 	bl	8002424 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d7a:	f7ff fa33 	bl	80001e4 <main>
  bx lr
 8000d7e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d84:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d88:	080034a4 	.word	0x080034a4
  ldr r2, =_sbss
 8000d8c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d90:	20000140 	.word	0x20000140

08000d94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC1_2_IRQHandler>
	...

08000d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <HAL_Init+0x28>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <HAL_Init+0x28>)
 8000da2:	f043 0310 	orr.w	r3, r3, #16
 8000da6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da8:	2003      	movs	r0, #3
 8000daa:	f000 f8f5 	bl	8000f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dae:	200f      	movs	r0, #15
 8000db0:	f7ff fc20 	bl	80005f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db4:	f7ff fba2 	bl	80004fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40022000 	.word	0x40022000

08000dc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <HAL_IncTick+0x1c>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <HAL_IncTick+0x20>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4a03      	ldr	r2, [pc, #12]	; (8000de4 <HAL_IncTick+0x20>)
 8000dd6:	6013      	str	r3, [r2, #0]
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr
 8000de0:	20000008 	.word	0x20000008
 8000de4:	2000012c 	.word	0x2000012c

08000de8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return uwTick;
 8000dec:	4b02      	ldr	r3, [pc, #8]	; (8000df8 <HAL_GetTick+0x10>)
 8000dee:	681b      	ldr	r3, [r3, #0]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	2000012c 	.word	0x2000012c

08000dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e04:	f7ff fff0 	bl	8000de8 <HAL_GetTick>
 8000e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e14:	d005      	beq.n	8000e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <HAL_Delay+0x44>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4413      	add	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e22:	bf00      	nop
 8000e24:	f7ff ffe0 	bl	8000de8 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d8f7      	bhi.n	8000e24 <HAL_Delay+0x28>
  {
  }
}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000008 	.word	0x20000008

08000e44 <__NVIC_SetPriorityGrouping>:
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e60:	4013      	ands	r3, r2
 8000e62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e76:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	60d3      	str	r3, [r2, #12]
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_GetPriorityGrouping>:
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	0a1b      	lsrs	r3, r3, #8
 8000e96:	f003 0307 	and.w	r3, r3, #7
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_EnableIRQ>:
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	db0b      	blt.n	8000ed2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	f003 021f 	and.w	r2, r3, #31
 8000ec0:	4906      	ldr	r1, [pc, #24]	; (8000edc <__NVIC_EnableIRQ+0x34>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	095b      	lsrs	r3, r3, #5
 8000ec8:	2001      	movs	r0, #1
 8000eca:	fa00 f202 	lsl.w	r2, r0, r2
 8000ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr
 8000edc:	e000e100 	.word	0xe000e100

08000ee0 <__NVIC_SetPriority>:
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	db0a      	blt.n	8000f0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	490c      	ldr	r1, [pc, #48]	; (8000f2c <__NVIC_SetPriority+0x4c>)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	0112      	lsls	r2, r2, #4
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	440b      	add	r3, r1
 8000f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f08:	e00a      	b.n	8000f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4908      	ldr	r1, [pc, #32]	; (8000f30 <__NVIC_SetPriority+0x50>)
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	f003 030f 	and.w	r3, r3, #15
 8000f16:	3b04      	subs	r3, #4
 8000f18:	0112      	lsls	r2, r2, #4
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	761a      	strb	r2, [r3, #24]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000e100 	.word	0xe000e100
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <NVIC_EncodePriority>:
{
 8000f34:	b480      	push	{r7}
 8000f36:	b089      	sub	sp, #36	; 0x24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f1c3 0307 	rsb	r3, r3, #7
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	bf28      	it	cs
 8000f52:	2304      	movcs	r3, #4
 8000f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	2b06      	cmp	r3, #6
 8000f5c:	d902      	bls.n	8000f64 <NVIC_EncodePriority+0x30>
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3b03      	subs	r3, #3
 8000f62:	e000      	b.n	8000f66 <NVIC_EncodePriority+0x32>
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43da      	mvns	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	401a      	ands	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	fa01 f303 	lsl.w	r3, r1, r3
 8000f86:	43d9      	mvns	r1, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	4313      	orrs	r3, r2
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3724      	adds	r7, #36	; 0x24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr

08000f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff ff4f 	bl	8000e44 <__NVIC_SetPriorityGrouping>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
 8000fba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc0:	f7ff ff64 	bl	8000e8c <__NVIC_GetPriorityGrouping>
 8000fc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	68b9      	ldr	r1, [r7, #8]
 8000fca:	6978      	ldr	r0, [r7, #20]
 8000fcc:	f7ff ffb2 	bl	8000f34 <NVIC_EncodePriority>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff81 	bl	8000ee0 <__NVIC_SetPriority>
}
 8000fde:	bf00      	nop
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4603      	mov	r3, r0
 8000fee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff57 	bl	8000ea8 <__NVIC_EnableIRQ>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001004:	b480      	push	{r7}
 8001006:	b08b      	sub	sp, #44	; 0x2c
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800100e:	2300      	movs	r3, #0
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001012:	2300      	movs	r3, #0
 8001014:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001016:	e169      	b.n	80012ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001018:	2201      	movs	r2, #1
 800101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	69fa      	ldr	r2, [r7, #28]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	429a      	cmp	r2, r3
 8001032:	f040 8158 	bne.w	80012e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	4a9a      	ldr	r2, [pc, #616]	; (80012a4 <HAL_GPIO_Init+0x2a0>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d05e      	beq.n	80010fe <HAL_GPIO_Init+0xfa>
 8001040:	4a98      	ldr	r2, [pc, #608]	; (80012a4 <HAL_GPIO_Init+0x2a0>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d875      	bhi.n	8001132 <HAL_GPIO_Init+0x12e>
 8001046:	4a98      	ldr	r2, [pc, #608]	; (80012a8 <HAL_GPIO_Init+0x2a4>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d058      	beq.n	80010fe <HAL_GPIO_Init+0xfa>
 800104c:	4a96      	ldr	r2, [pc, #600]	; (80012a8 <HAL_GPIO_Init+0x2a4>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d86f      	bhi.n	8001132 <HAL_GPIO_Init+0x12e>
 8001052:	4a96      	ldr	r2, [pc, #600]	; (80012ac <HAL_GPIO_Init+0x2a8>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d052      	beq.n	80010fe <HAL_GPIO_Init+0xfa>
 8001058:	4a94      	ldr	r2, [pc, #592]	; (80012ac <HAL_GPIO_Init+0x2a8>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d869      	bhi.n	8001132 <HAL_GPIO_Init+0x12e>
 800105e:	4a94      	ldr	r2, [pc, #592]	; (80012b0 <HAL_GPIO_Init+0x2ac>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d04c      	beq.n	80010fe <HAL_GPIO_Init+0xfa>
 8001064:	4a92      	ldr	r2, [pc, #584]	; (80012b0 <HAL_GPIO_Init+0x2ac>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d863      	bhi.n	8001132 <HAL_GPIO_Init+0x12e>
 800106a:	4a92      	ldr	r2, [pc, #584]	; (80012b4 <HAL_GPIO_Init+0x2b0>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d046      	beq.n	80010fe <HAL_GPIO_Init+0xfa>
 8001070:	4a90      	ldr	r2, [pc, #576]	; (80012b4 <HAL_GPIO_Init+0x2b0>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d85d      	bhi.n	8001132 <HAL_GPIO_Init+0x12e>
 8001076:	2b12      	cmp	r3, #18
 8001078:	d82a      	bhi.n	80010d0 <HAL_GPIO_Init+0xcc>
 800107a:	2b12      	cmp	r3, #18
 800107c:	d859      	bhi.n	8001132 <HAL_GPIO_Init+0x12e>
 800107e:	a201      	add	r2, pc, #4	; (adr r2, 8001084 <HAL_GPIO_Init+0x80>)
 8001080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001084:	080010ff 	.word	0x080010ff
 8001088:	080010d9 	.word	0x080010d9
 800108c:	080010eb 	.word	0x080010eb
 8001090:	0800112d 	.word	0x0800112d
 8001094:	08001133 	.word	0x08001133
 8001098:	08001133 	.word	0x08001133
 800109c:	08001133 	.word	0x08001133
 80010a0:	08001133 	.word	0x08001133
 80010a4:	08001133 	.word	0x08001133
 80010a8:	08001133 	.word	0x08001133
 80010ac:	08001133 	.word	0x08001133
 80010b0:	08001133 	.word	0x08001133
 80010b4:	08001133 	.word	0x08001133
 80010b8:	08001133 	.word	0x08001133
 80010bc:	08001133 	.word	0x08001133
 80010c0:	08001133 	.word	0x08001133
 80010c4:	08001133 	.word	0x08001133
 80010c8:	080010e1 	.word	0x080010e1
 80010cc:	080010f5 	.word	0x080010f5
 80010d0:	4a79      	ldr	r2, [pc, #484]	; (80012b8 <HAL_GPIO_Init+0x2b4>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d013      	beq.n	80010fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010d6:	e02c      	b.n	8001132 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	623b      	str	r3, [r7, #32]
          break;
 80010de:	e029      	b.n	8001134 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	3304      	adds	r3, #4
 80010e6:	623b      	str	r3, [r7, #32]
          break;
 80010e8:	e024      	b.n	8001134 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	3308      	adds	r3, #8
 80010f0:	623b      	str	r3, [r7, #32]
          break;
 80010f2:	e01f      	b.n	8001134 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	330c      	adds	r3, #12
 80010fa:	623b      	str	r3, [r7, #32]
          break;
 80010fc:	e01a      	b.n	8001134 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d102      	bne.n	800110c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001106:	2304      	movs	r3, #4
 8001108:	623b      	str	r3, [r7, #32]
          break;
 800110a:	e013      	b.n	8001134 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d105      	bne.n	8001120 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001114:	2308      	movs	r3, #8
 8001116:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69fa      	ldr	r2, [r7, #28]
 800111c:	611a      	str	r2, [r3, #16]
          break;
 800111e:	e009      	b.n	8001134 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001120:	2308      	movs	r3, #8
 8001122:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69fa      	ldr	r2, [r7, #28]
 8001128:	615a      	str	r2, [r3, #20]
          break;
 800112a:	e003      	b.n	8001134 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800112c:	2300      	movs	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
          break;
 8001130:	e000      	b.n	8001134 <HAL_GPIO_Init+0x130>
          break;
 8001132:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	2bff      	cmp	r3, #255	; 0xff
 8001138:	d801      	bhi.n	800113e <HAL_GPIO_Init+0x13a>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	e001      	b.n	8001142 <HAL_GPIO_Init+0x13e>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3304      	adds	r3, #4
 8001142:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	2bff      	cmp	r3, #255	; 0xff
 8001148:	d802      	bhi.n	8001150 <HAL_GPIO_Init+0x14c>
 800114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	e002      	b.n	8001156 <HAL_GPIO_Init+0x152>
 8001150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001152:	3b08      	subs	r3, #8
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	210f      	movs	r1, #15
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	fa01 f303 	lsl.w	r3, r1, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	401a      	ands	r2, r3
 8001168:	6a39      	ldr	r1, [r7, #32]
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	fa01 f303 	lsl.w	r3, r1, r3
 8001170:	431a      	orrs	r2, r3
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 80b1 	beq.w	80012e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001184:	4b4d      	ldr	r3, [pc, #308]	; (80012bc <HAL_GPIO_Init+0x2b8>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	4a4c      	ldr	r2, [pc, #304]	; (80012bc <HAL_GPIO_Init+0x2b8>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	6193      	str	r3, [r2, #24]
 8001190:	4b4a      	ldr	r3, [pc, #296]	; (80012bc <HAL_GPIO_Init+0x2b8>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800119c:	4a48      	ldr	r2, [pc, #288]	; (80012c0 <HAL_GPIO_Init+0x2bc>)
 800119e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a0:	089b      	lsrs	r3, r3, #2
 80011a2:	3302      	adds	r3, #2
 80011a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	220f      	movs	r2, #15
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	4013      	ands	r3, r2
 80011be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a40      	ldr	r2, [pc, #256]	; (80012c4 <HAL_GPIO_Init+0x2c0>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d013      	beq.n	80011f0 <HAL_GPIO_Init+0x1ec>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a3f      	ldr	r2, [pc, #252]	; (80012c8 <HAL_GPIO_Init+0x2c4>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d00d      	beq.n	80011ec <HAL_GPIO_Init+0x1e8>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a3e      	ldr	r2, [pc, #248]	; (80012cc <HAL_GPIO_Init+0x2c8>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d007      	beq.n	80011e8 <HAL_GPIO_Init+0x1e4>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a3d      	ldr	r2, [pc, #244]	; (80012d0 <HAL_GPIO_Init+0x2cc>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d101      	bne.n	80011e4 <HAL_GPIO_Init+0x1e0>
 80011e0:	2303      	movs	r3, #3
 80011e2:	e006      	b.n	80011f2 <HAL_GPIO_Init+0x1ee>
 80011e4:	2304      	movs	r3, #4
 80011e6:	e004      	b.n	80011f2 <HAL_GPIO_Init+0x1ee>
 80011e8:	2302      	movs	r3, #2
 80011ea:	e002      	b.n	80011f2 <HAL_GPIO_Init+0x1ee>
 80011ec:	2301      	movs	r3, #1
 80011ee:	e000      	b.n	80011f2 <HAL_GPIO_Init+0x1ee>
 80011f0:	2300      	movs	r3, #0
 80011f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f4:	f002 0203 	and.w	r2, r2, #3
 80011f8:	0092      	lsls	r2, r2, #2
 80011fa:	4093      	lsls	r3, r2
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	4313      	orrs	r3, r2
 8001200:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001202:	492f      	ldr	r1, [pc, #188]	; (80012c0 <HAL_GPIO_Init+0x2bc>)
 8001204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001206:	089b      	lsrs	r3, r3, #2
 8001208:	3302      	adds	r3, #2
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d006      	beq.n	800122a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800121c:	4b2d      	ldr	r3, [pc, #180]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	492c      	ldr	r1, [pc, #176]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	600b      	str	r3, [r1, #0]
 8001228:	e006      	b.n	8001238 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800122a:	4b2a      	ldr	r3, [pc, #168]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	43db      	mvns	r3, r3
 8001232:	4928      	ldr	r1, [pc, #160]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 8001234:	4013      	ands	r3, r2
 8001236:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d006      	beq.n	8001252 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001244:	4b23      	ldr	r3, [pc, #140]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	4922      	ldr	r1, [pc, #136]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	604b      	str	r3, [r1, #4]
 8001250:	e006      	b.n	8001260 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001252:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	43db      	mvns	r3, r3
 800125a:	491e      	ldr	r1, [pc, #120]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 800125c:	4013      	ands	r3, r2
 800125e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d006      	beq.n	800127a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800126c:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	4918      	ldr	r1, [pc, #96]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	608b      	str	r3, [r1, #8]
 8001278:	e006      	b.n	8001288 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800127a:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 800127c:	689a      	ldr	r2, [r3, #8]
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	43db      	mvns	r3, r3
 8001282:	4914      	ldr	r1, [pc, #80]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 8001284:	4013      	ands	r3, r2
 8001286:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d021      	beq.n	80012d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001294:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 8001296:	68da      	ldr	r2, [r3, #12]
 8001298:	490e      	ldr	r1, [pc, #56]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	60cb      	str	r3, [r1, #12]
 80012a0:	e021      	b.n	80012e6 <HAL_GPIO_Init+0x2e2>
 80012a2:	bf00      	nop
 80012a4:	10320000 	.word	0x10320000
 80012a8:	10310000 	.word	0x10310000
 80012ac:	10220000 	.word	0x10220000
 80012b0:	10210000 	.word	0x10210000
 80012b4:	10120000 	.word	0x10120000
 80012b8:	10110000 	.word	0x10110000
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40010000 	.word	0x40010000
 80012c4:	40010800 	.word	0x40010800
 80012c8:	40010c00 	.word	0x40010c00
 80012cc:	40011000 	.word	0x40011000
 80012d0:	40011400 	.word	0x40011400
 80012d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012d8:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <HAL_GPIO_Init+0x304>)
 80012da:	68da      	ldr	r2, [r3, #12]
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	43db      	mvns	r3, r3
 80012e0:	4909      	ldr	r1, [pc, #36]	; (8001308 <HAL_GPIO_Init+0x304>)
 80012e2:	4013      	ands	r3, r2
 80012e4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80012e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e8:	3301      	adds	r3, #1
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f2:	fa22 f303 	lsr.w	r3, r2, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f47f ae8e 	bne.w	8001018 <HAL_GPIO_Init+0x14>
  }
}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	372c      	adds	r7, #44	; 0x2c
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr
 8001308:	40010400 	.word	0x40010400

0800130c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
 8001318:	4613      	mov	r3, r2
 800131a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800131c:	787b      	ldrb	r3, [r7, #1]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001322:	887a      	ldrh	r2, [r7, #2]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001328:	e003      	b.n	8001332 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800132a:	887b      	ldrh	r3, [r7, #2]
 800132c:	041a      	lsls	r2, r3, #16
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	611a      	str	r2, [r3, #16]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr

0800133c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001348:	695a      	ldr	r2, [r3, #20]
 800134a:	88fb      	ldrh	r3, [r7, #6]
 800134c:	4013      	ands	r3, r2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d006      	beq.n	8001360 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001352:	4a05      	ldr	r2, [pc, #20]	; (8001368 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001354:	88fb      	ldrh	r3, [r7, #6]
 8001356:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001358:	88fb      	ldrh	r3, [r7, #6]
 800135a:	4618      	mov	r0, r3
 800135c:	f000 f806 	bl	800136c <HAL_GPIO_EXTI_Callback>
  }
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40010400 	.word	0x40010400

0800136c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e272      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	f000 8087 	beq.w	80014ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013a0:	4b92      	ldr	r3, [pc, #584]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 030c 	and.w	r3, r3, #12
 80013a8:	2b04      	cmp	r3, #4
 80013aa:	d00c      	beq.n	80013c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013ac:	4b8f      	ldr	r3, [pc, #572]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 030c 	and.w	r3, r3, #12
 80013b4:	2b08      	cmp	r3, #8
 80013b6:	d112      	bne.n	80013de <HAL_RCC_OscConfig+0x5e>
 80013b8:	4b8c      	ldr	r3, [pc, #560]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c4:	d10b      	bne.n	80013de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c6:	4b89      	ldr	r3, [pc, #548]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d06c      	beq.n	80014ac <HAL_RCC_OscConfig+0x12c>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d168      	bne.n	80014ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e24c      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e6:	d106      	bne.n	80013f6 <HAL_RCC_OscConfig+0x76>
 80013e8:	4b80      	ldr	r3, [pc, #512]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a7f      	ldr	r2, [pc, #508]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80013ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	e02e      	b.n	8001454 <HAL_RCC_OscConfig+0xd4>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d10c      	bne.n	8001418 <HAL_RCC_OscConfig+0x98>
 80013fe:	4b7b      	ldr	r3, [pc, #492]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a7a      	ldr	r2, [pc, #488]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	4b78      	ldr	r3, [pc, #480]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a77      	ldr	r2, [pc, #476]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001410:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	e01d      	b.n	8001454 <HAL_RCC_OscConfig+0xd4>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001420:	d10c      	bne.n	800143c <HAL_RCC_OscConfig+0xbc>
 8001422:	4b72      	ldr	r3, [pc, #456]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a71      	ldr	r2, [pc, #452]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	4b6f      	ldr	r3, [pc, #444]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a6e      	ldr	r2, [pc, #440]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	e00b      	b.n	8001454 <HAL_RCC_OscConfig+0xd4>
 800143c:	4b6b      	ldr	r3, [pc, #428]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a6a      	ldr	r2, [pc, #424]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4b68      	ldr	r3, [pc, #416]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a67      	ldr	r2, [pc, #412]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 800144e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001452:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d013      	beq.n	8001484 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7ff fcc4 	bl	8000de8 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001464:	f7ff fcc0 	bl	8000de8 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b64      	cmp	r3, #100	; 0x64
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e200      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001476:	4b5d      	ldr	r3, [pc, #372]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f0      	beq.n	8001464 <HAL_RCC_OscConfig+0xe4>
 8001482:	e014      	b.n	80014ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001484:	f7ff fcb0 	bl	8000de8 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800148c:	f7ff fcac 	bl	8000de8 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b64      	cmp	r3, #100	; 0x64
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e1ec      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800149e:	4b53      	ldr	r3, [pc, #332]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0x10c>
 80014aa:	e000      	b.n	80014ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d063      	beq.n	8001582 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014ba:	4b4c      	ldr	r3, [pc, #304]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 030c 	and.w	r3, r3, #12
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00b      	beq.n	80014de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014c6:	4b49      	ldr	r3, [pc, #292]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 030c 	and.w	r3, r3, #12
 80014ce:	2b08      	cmp	r3, #8
 80014d0:	d11c      	bne.n	800150c <HAL_RCC_OscConfig+0x18c>
 80014d2:	4b46      	ldr	r3, [pc, #280]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d116      	bne.n	800150c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014de:	4b43      	ldr	r3, [pc, #268]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d005      	beq.n	80014f6 <HAL_RCC_OscConfig+0x176>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d001      	beq.n	80014f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e1c0      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f6:	4b3d      	ldr	r3, [pc, #244]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	4939      	ldr	r1, [pc, #228]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001506:	4313      	orrs	r3, r2
 8001508:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150a:	e03a      	b.n	8001582 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d020      	beq.n	8001556 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001514:	4b36      	ldr	r3, [pc, #216]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001516:	2201      	movs	r2, #1
 8001518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151a:	f7ff fc65 	bl	8000de8 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001522:	f7ff fc61 	bl	8000de8 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e1a1      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001534:	4b2d      	ldr	r3, [pc, #180]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0f0      	beq.n	8001522 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001540:	4b2a      	ldr	r3, [pc, #168]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	4927      	ldr	r1, [pc, #156]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001550:	4313      	orrs	r3, r2
 8001552:	600b      	str	r3, [r1, #0]
 8001554:	e015      	b.n	8001582 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001556:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155c:	f7ff fc44 	bl	8000de8 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001564:	f7ff fc40 	bl	8000de8 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e180      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001576:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f0      	bne.n	8001564 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	2b00      	cmp	r3, #0
 800158c:	d03a      	beq.n	8001604 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d019      	beq.n	80015ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001596:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <HAL_RCC_OscConfig+0x274>)
 8001598:	2201      	movs	r2, #1
 800159a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159c:	f7ff fc24 	bl	8000de8 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a4:	f7ff fc20 	bl	8000de8 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e160      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b6:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f0      	beq.n	80015a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015c2:	2001      	movs	r0, #1
 80015c4:	f000 fb08 	bl	8001bd8 <RCC_Delay>
 80015c8:	e01c      	b.n	8001604 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ca:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <HAL_RCC_OscConfig+0x274>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d0:	f7ff fc0a 	bl	8000de8 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d6:	e00f      	b.n	80015f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d8:	f7ff fc06 	bl	8000de8 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d908      	bls.n	80015f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e146      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000
 80015f0:	42420000 	.word	0x42420000
 80015f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f8:	4b92      	ldr	r3, [pc, #584]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80015fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1e9      	bne.n	80015d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 80a6 	beq.w	800175e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001612:	2300      	movs	r3, #0
 8001614:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001616:	4b8b      	ldr	r3, [pc, #556]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10d      	bne.n	800163e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001622:	4b88      	ldr	r3, [pc, #544]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	4a87      	ldr	r2, [pc, #540]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 8001628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800162c:	61d3      	str	r3, [r2, #28]
 800162e:	4b85      	ldr	r3, [pc, #532]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800163a:	2301      	movs	r3, #1
 800163c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163e:	4b82      	ldr	r3, [pc, #520]	; (8001848 <HAL_RCC_OscConfig+0x4c8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001646:	2b00      	cmp	r3, #0
 8001648:	d118      	bne.n	800167c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800164a:	4b7f      	ldr	r3, [pc, #508]	; (8001848 <HAL_RCC_OscConfig+0x4c8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a7e      	ldr	r2, [pc, #504]	; (8001848 <HAL_RCC_OscConfig+0x4c8>)
 8001650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001656:	f7ff fbc7 	bl	8000de8 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800165e:	f7ff fbc3 	bl	8000de8 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b64      	cmp	r3, #100	; 0x64
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e103      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001670:	4b75      	ldr	r3, [pc, #468]	; (8001848 <HAL_RCC_OscConfig+0x4c8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0f0      	beq.n	800165e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d106      	bne.n	8001692 <HAL_RCC_OscConfig+0x312>
 8001684:	4b6f      	ldr	r3, [pc, #444]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	4a6e      	ldr	r2, [pc, #440]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6213      	str	r3, [r2, #32]
 8001690:	e02d      	b.n	80016ee <HAL_RCC_OscConfig+0x36e>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10c      	bne.n	80016b4 <HAL_RCC_OscConfig+0x334>
 800169a:	4b6a      	ldr	r3, [pc, #424]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	4a69      	ldr	r2, [pc, #420]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80016a0:	f023 0301 	bic.w	r3, r3, #1
 80016a4:	6213      	str	r3, [r2, #32]
 80016a6:	4b67      	ldr	r3, [pc, #412]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	4a66      	ldr	r2, [pc, #408]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80016ac:	f023 0304 	bic.w	r3, r3, #4
 80016b0:	6213      	str	r3, [r2, #32]
 80016b2:	e01c      	b.n	80016ee <HAL_RCC_OscConfig+0x36e>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	2b05      	cmp	r3, #5
 80016ba:	d10c      	bne.n	80016d6 <HAL_RCC_OscConfig+0x356>
 80016bc:	4b61      	ldr	r3, [pc, #388]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	4a60      	ldr	r2, [pc, #384]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80016c2:	f043 0304 	orr.w	r3, r3, #4
 80016c6:	6213      	str	r3, [r2, #32]
 80016c8:	4b5e      	ldr	r3, [pc, #376]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	4a5d      	ldr	r2, [pc, #372]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	6213      	str	r3, [r2, #32]
 80016d4:	e00b      	b.n	80016ee <HAL_RCC_OscConfig+0x36e>
 80016d6:	4b5b      	ldr	r3, [pc, #364]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	4a5a      	ldr	r2, [pc, #360]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80016dc:	f023 0301 	bic.w	r3, r3, #1
 80016e0:	6213      	str	r3, [r2, #32]
 80016e2:	4b58      	ldr	r3, [pc, #352]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	4a57      	ldr	r2, [pc, #348]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80016e8:	f023 0304 	bic.w	r3, r3, #4
 80016ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d015      	beq.n	8001722 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f6:	f7ff fb77 	bl	8000de8 <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016fc:	e00a      	b.n	8001714 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016fe:	f7ff fb73 	bl	8000de8 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	f241 3288 	movw	r2, #5000	; 0x1388
 800170c:	4293      	cmp	r3, r2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e0b1      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001714:	4b4b      	ldr	r3, [pc, #300]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0ee      	beq.n	80016fe <HAL_RCC_OscConfig+0x37e>
 8001720:	e014      	b.n	800174c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001722:	f7ff fb61 	bl	8000de8 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001728:	e00a      	b.n	8001740 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172a:	f7ff fb5d 	bl	8000de8 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	f241 3288 	movw	r2, #5000	; 0x1388
 8001738:	4293      	cmp	r3, r2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e09b      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001740:	4b40      	ldr	r3, [pc, #256]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1ee      	bne.n	800172a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800174c:	7dfb      	ldrb	r3, [r7, #23]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d105      	bne.n	800175e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001752:	4b3c      	ldr	r3, [pc, #240]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	4a3b      	ldr	r2, [pc, #236]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 8001758:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800175c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 8087 	beq.w	8001876 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001768:	4b36      	ldr	r3, [pc, #216]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 030c 	and.w	r3, r3, #12
 8001770:	2b08      	cmp	r3, #8
 8001772:	d061      	beq.n	8001838 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	2b02      	cmp	r3, #2
 800177a:	d146      	bne.n	800180a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800177c:	4b33      	ldr	r3, [pc, #204]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001782:	f7ff fb31 	bl	8000de8 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178a:	f7ff fb2d 	bl	8000de8 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e06d      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800179c:	4b29      	ldr	r3, [pc, #164]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1f0      	bne.n	800178a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b0:	d108      	bne.n	80017c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017b2:	4b24      	ldr	r3, [pc, #144]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	4921      	ldr	r1, [pc, #132]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017c4:	4b1f      	ldr	r3, [pc, #124]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a19      	ldr	r1, [r3, #32]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	430b      	orrs	r3, r1
 80017d6:	491b      	ldr	r1, [pc, #108]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017dc:	4b1b      	ldr	r3, [pc, #108]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 80017de:	2201      	movs	r2, #1
 80017e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e2:	f7ff fb01 	bl	8000de8 <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ea:	f7ff fafd 	bl	8000de8 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e03d      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0f0      	beq.n	80017ea <HAL_RCC_OscConfig+0x46a>
 8001808:	e035      	b.n	8001876 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001810:	f7ff faea 	bl	8000de8 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001818:	f7ff fae6 	bl	8000de8 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e026      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1f0      	bne.n	8001818 <HAL_RCC_OscConfig+0x498>
 8001836:	e01e      	b.n	8001876 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d107      	bne.n	8001850 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e019      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
 8001844:	40021000 	.word	0x40021000
 8001848:	40007000 	.word	0x40007000
 800184c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <HAL_RCC_OscConfig+0x500>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	429a      	cmp	r2, r3
 8001862:	d106      	bne.n	8001872 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800186e:	429a      	cmp	r2, r3
 8001870:	d001      	beq.n	8001876 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e000      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40021000 	.word	0x40021000

08001884 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0d0      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001898:	4b6a      	ldr	r3, [pc, #424]	; (8001a44 <HAL_RCC_ClockConfig+0x1c0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d910      	bls.n	80018c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a6:	4b67      	ldr	r3, [pc, #412]	; (8001a44 <HAL_RCC_ClockConfig+0x1c0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f023 0207 	bic.w	r2, r3, #7
 80018ae:	4965      	ldr	r1, [pc, #404]	; (8001a44 <HAL_RCC_ClockConfig+0x1c0>)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b6:	4b63      	ldr	r3, [pc, #396]	; (8001a44 <HAL_RCC_ClockConfig+0x1c0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d001      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e0b8      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d020      	beq.n	8001916 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018e0:	4b59      	ldr	r3, [pc, #356]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	4a58      	ldr	r2, [pc, #352]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 80018e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018f8:	4b53      	ldr	r3, [pc, #332]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	4a52      	ldr	r2, [pc, #328]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 80018fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001902:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001904:	4b50      	ldr	r3, [pc, #320]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	494d      	ldr	r1, [pc, #308]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 8001912:	4313      	orrs	r3, r2
 8001914:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d040      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d107      	bne.n	800193a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192a:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d115      	bne.n	8001962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e07f      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d107      	bne.n	8001952 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001942:	4b41      	ldr	r3, [pc, #260]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d109      	bne.n	8001962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e073      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001952:	4b3d      	ldr	r3, [pc, #244]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e06b      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001962:	4b39      	ldr	r3, [pc, #228]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f023 0203 	bic.w	r2, r3, #3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	4936      	ldr	r1, [pc, #216]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 8001970:	4313      	orrs	r3, r2
 8001972:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001974:	f7ff fa38 	bl	8000de8 <HAL_GetTick>
 8001978:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197a:	e00a      	b.n	8001992 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800197c:	f7ff fa34 	bl	8000de8 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	f241 3288 	movw	r2, #5000	; 0x1388
 800198a:	4293      	cmp	r3, r2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e053      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001992:	4b2d      	ldr	r3, [pc, #180]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 020c 	and.w	r2, r3, #12
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d1eb      	bne.n	800197c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019a4:	4b27      	ldr	r3, [pc, #156]	; (8001a44 <HAL_RCC_ClockConfig+0x1c0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d210      	bcs.n	80019d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b2:	4b24      	ldr	r3, [pc, #144]	; (8001a44 <HAL_RCC_ClockConfig+0x1c0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f023 0207 	bic.w	r2, r3, #7
 80019ba:	4922      	ldr	r1, [pc, #136]	; (8001a44 <HAL_RCC_ClockConfig+0x1c0>)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	4313      	orrs	r3, r2
 80019c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c2:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <HAL_RCC_ClockConfig+0x1c0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d001      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e032      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d008      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019e0:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	4916      	ldr	r1, [pc, #88]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d009      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	490e      	ldr	r1, [pc, #56]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a12:	f000 f821 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 8001a16:	4602      	mov	r2, r0
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	091b      	lsrs	r3, r3, #4
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	490a      	ldr	r1, [pc, #40]	; (8001a4c <HAL_RCC_ClockConfig+0x1c8>)
 8001a24:	5ccb      	ldrb	r3, [r1, r3]
 8001a26:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2a:	4a09      	ldr	r2, [pc, #36]	; (8001a50 <HAL_RCC_ClockConfig+0x1cc>)
 8001a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <HAL_RCC_ClockConfig+0x1d0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fdde 	bl	80005f4 <HAL_InitTick>

  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40022000 	.word	0x40022000
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	080033ec 	.word	0x080033ec
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000004 	.word	0x20000004

08001a58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a58:	b490      	push	{r4, r7}
 8001a5a:	b08a      	sub	sp, #40	; 0x28
 8001a5c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a5e:	4b29      	ldr	r3, [pc, #164]	; (8001b04 <HAL_RCC_GetSysClockFreq+0xac>)
 8001a60:	1d3c      	adds	r4, r7, #4
 8001a62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a68:	f240 2301 	movw	r3, #513	; 0x201
 8001a6c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
 8001a72:	2300      	movs	r3, #0
 8001a74:	61bb      	str	r3, [r7, #24]
 8001a76:	2300      	movs	r3, #0
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a82:	4b21      	ldr	r3, [pc, #132]	; (8001b08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d002      	beq.n	8001a98 <HAL_RCC_GetSysClockFreq+0x40>
 8001a92:	2b08      	cmp	r3, #8
 8001a94:	d003      	beq.n	8001a9e <HAL_RCC_GetSysClockFreq+0x46>
 8001a96:	e02b      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a98:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a9a:	623b      	str	r3, [r7, #32]
      break;
 8001a9c:	e02b      	b.n	8001af6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	0c9b      	lsrs	r3, r3, #18
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	3328      	adds	r3, #40	; 0x28
 8001aa8:	443b      	add	r3, r7
 8001aaa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001aae:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d012      	beq.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001aba:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	0c5b      	lsrs	r3, r3, #17
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	3328      	adds	r3, #40	; 0x28
 8001ac6:	443b      	add	r3, r7
 8001ac8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001acc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	4a0e      	ldr	r2, [pc, #56]	; (8001b0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ad2:	fb03 f202 	mul.w	r2, r3, r2
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ade:	e004      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	4a0b      	ldr	r2, [pc, #44]	; (8001b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ae4:	fb02 f303 	mul.w	r3, r2, r3
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	623b      	str	r3, [r7, #32]
      break;
 8001aee:	e002      	b.n	8001af6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001af2:	623b      	str	r3, [r7, #32]
      break;
 8001af4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001af6:	6a3b      	ldr	r3, [r7, #32]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3728      	adds	r7, #40	; 0x28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc90      	pop	{r4, r7}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	080033dc 	.word	0x080033dc
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	007a1200 	.word	0x007a1200
 8001b10:	003d0900 	.word	0x003d0900

08001b14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b18:	4b02      	ldr	r3, [pc, #8]	; (8001b24 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr
 8001b24:	20000000 	.word	0x20000000

08001b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b2c:	f7ff fff2 	bl	8001b14 <HAL_RCC_GetHCLKFreq>
 8001b30:	4602      	mov	r2, r0
 8001b32:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	0a1b      	lsrs	r3, r3, #8
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	4903      	ldr	r1, [pc, #12]	; (8001b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b3e:	5ccb      	ldrb	r3, [r1, r3]
 8001b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	080033fc 	.word	0x080033fc

08001b50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b54:	f7ff ffde 	bl	8001b14 <HAL_RCC_GetHCLKFreq>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	0adb      	lsrs	r3, r3, #11
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	4903      	ldr	r1, [pc, #12]	; (8001b74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b66:	5ccb      	ldrb	r3, [r1, r3]
 8001b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40021000 	.word	0x40021000
 8001b74:	080033fc 	.word	0x080033fc

08001b78 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	220f      	movs	r2, #15
 8001b86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <HAL_RCC_GetClockConfig+0x58>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0203 	and.w	r2, r3, #3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b94:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <HAL_RCC_GetClockConfig+0x58>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_RCC_GetClockConfig+0x58>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <HAL_RCC_GetClockConfig+0x58>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	08db      	lsrs	r3, r3, #3
 8001bb2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0207 	and.w	r2, r3, #7
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40022000 	.word	0x40022000

08001bd8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001be0:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <RCC_Delay+0x34>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a0a      	ldr	r2, [pc, #40]	; (8001c10 <RCC_Delay+0x38>)
 8001be6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bea:	0a5b      	lsrs	r3, r3, #9
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	fb02 f303 	mul.w	r3, r2, r3
 8001bf2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bf4:	bf00      	nop
  }
  while (Delay --);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	1e5a      	subs	r2, r3, #1
 8001bfa:	60fa      	str	r2, [r7, #12]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1f9      	bne.n	8001bf4 <RCC_Delay+0x1c>
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr
 8001c0c:	20000000 	.word	0x20000000
 8001c10:	10624dd3 	.word	0x10624dd3

08001c14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e041      	b.n	8001caa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d106      	bne.n	8001c40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f839 	bl	8001cb2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2202      	movs	r2, #2
 8001c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3304      	adds	r3, #4
 8001c50:	4619      	mov	r1, r3
 8001c52:	4610      	mov	r0, r2
 8001c54:	f000 f9b4 	bl	8001fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d001      	beq.n	8001cdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e03a      	b.n	8001d52 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0201 	orr.w	r2, r2, #1
 8001cf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a18      	ldr	r2, [pc, #96]	; (8001d5c <HAL_TIM_Base_Start_IT+0x98>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d00e      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x58>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d06:	d009      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x58>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a14      	ldr	r2, [pc, #80]	; (8001d60 <HAL_TIM_Base_Start_IT+0x9c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d004      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x58>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a13      	ldr	r2, [pc, #76]	; (8001d64 <HAL_TIM_Base_Start_IT+0xa0>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d111      	bne.n	8001d40 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2b06      	cmp	r3, #6
 8001d2c:	d010      	beq.n	8001d50 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f042 0201 	orr.w	r2, r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d3e:	e007      	b.n	8001d50 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0201 	orr.w	r2, r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr
 8001d5c:	40012c00 	.word	0x40012c00
 8001d60:	40000400 	.word	0x40000400
 8001d64:	40000800 	.word	0x40000800

08001d68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d122      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d11b      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f06f 0202 	mvn.w	r2, #2
 8001d94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f8ed 	bl	8001f8a <HAL_TIM_IC_CaptureCallback>
 8001db0:	e005      	b.n	8001dbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f8e0 	bl	8001f78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f8ef 	bl	8001f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	f003 0304 	and.w	r3, r3, #4
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d122      	bne.n	8001e18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d11b      	bne.n	8001e18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f06f 0204 	mvn.w	r2, #4
 8001de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2202      	movs	r2, #2
 8001dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f8c3 	bl	8001f8a <HAL_TIM_IC_CaptureCallback>
 8001e04:	e005      	b.n	8001e12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8b6 	bl	8001f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f8c5 	bl	8001f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d122      	bne.n	8001e6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d11b      	bne.n	8001e6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f06f 0208 	mvn.w	r2, #8
 8001e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2204      	movs	r2, #4
 8001e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f899 	bl	8001f8a <HAL_TIM_IC_CaptureCallback>
 8001e58:	e005      	b.n	8001e66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f88c 	bl	8001f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f89b 	bl	8001f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	f003 0310 	and.w	r3, r3, #16
 8001e76:	2b10      	cmp	r3, #16
 8001e78:	d122      	bne.n	8001ec0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f003 0310 	and.w	r3, r3, #16
 8001e84:	2b10      	cmp	r3, #16
 8001e86:	d11b      	bne.n	8001ec0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f06f 0210 	mvn.w	r2, #16
 8001e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2208      	movs	r2, #8
 8001e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f86f 	bl	8001f8a <HAL_TIM_IC_CaptureCallback>
 8001eac:	e005      	b.n	8001eba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f862 	bl	8001f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f871 	bl	8001f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d10e      	bne.n	8001eec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d107      	bne.n	8001eec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f06f 0201 	mvn.w	r2, #1
 8001ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7fe faf0 	bl	80004cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef6:	2b80      	cmp	r3, #128	; 0x80
 8001ef8:	d10e      	bne.n	8001f18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f04:	2b80      	cmp	r3, #128	; 0x80
 8001f06:	d107      	bne.n	8001f18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f8bf 	bl	8002096 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f22:	2b40      	cmp	r3, #64	; 0x40
 8001f24:	d10e      	bne.n	8001f44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f30:	2b40      	cmp	r3, #64	; 0x40
 8001f32:	d107      	bne.n	8001f44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f835 	bl	8001fae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	f003 0320 	and.w	r3, r3, #32
 8001f4e:	2b20      	cmp	r3, #32
 8001f50:	d10e      	bne.n	8001f70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f003 0320 	and.w	r3, r3, #32
 8001f5c:	2b20      	cmp	r3, #32
 8001f5e:	d107      	bne.n	8001f70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f06f 0220 	mvn.w	r2, #32
 8001f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f88a 	bl	8002084 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr

08001f8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr

08001fae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr

08001fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a29      	ldr	r2, [pc, #164]	; (8002078 <TIM_Base_SetConfig+0xb8>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d00b      	beq.n	8001ff0 <TIM_Base_SetConfig+0x30>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fde:	d007      	beq.n	8001ff0 <TIM_Base_SetConfig+0x30>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a26      	ldr	r2, [pc, #152]	; (800207c <TIM_Base_SetConfig+0xbc>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d003      	beq.n	8001ff0 <TIM_Base_SetConfig+0x30>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a25      	ldr	r2, [pc, #148]	; (8002080 <TIM_Base_SetConfig+0xc0>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d108      	bne.n	8002002 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a1c      	ldr	r2, [pc, #112]	; (8002078 <TIM_Base_SetConfig+0xb8>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00b      	beq.n	8002022 <TIM_Base_SetConfig+0x62>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002010:	d007      	beq.n	8002022 <TIM_Base_SetConfig+0x62>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a19      	ldr	r2, [pc, #100]	; (800207c <TIM_Base_SetConfig+0xbc>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d003      	beq.n	8002022 <TIM_Base_SetConfig+0x62>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a18      	ldr	r2, [pc, #96]	; (8002080 <TIM_Base_SetConfig+0xc0>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d108      	bne.n	8002034 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002028:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	4313      	orrs	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	4313      	orrs	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a07      	ldr	r2, [pc, #28]	; (8002078 <TIM_Base_SetConfig+0xb8>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d103      	bne.n	8002068 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	691a      	ldr	r2, [r3, #16]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	615a      	str	r2, [r3, #20]
}
 800206e:	bf00      	nop
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr
 8002078:	40012c00 	.word	0x40012c00
 800207c:	40000400 	.word	0x40000400
 8002080:	40000800 	.word	0x40000800

08002084 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr

08002096 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr

080020a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e03f      	b.n	800213a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d106      	bne.n	80020d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7fe fa46 	bl	8000560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2224      	movs	r2, #36	; 0x24
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f905 	bl	80022fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	691a      	ldr	r2, [r3, #16]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002100:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695a      	ldr	r2, [r3, #20]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002110:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002120:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2220      	movs	r2, #32
 800212c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2220      	movs	r2, #32
 8002134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b08a      	sub	sp, #40	; 0x28
 8002146:	af02      	add	r7, sp, #8
 8002148:	60f8      	str	r0, [r7, #12]
 800214a:	60b9      	str	r1, [r7, #8]
 800214c:	603b      	str	r3, [r7, #0]
 800214e:	4613      	mov	r3, r2
 8002150:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b20      	cmp	r3, #32
 8002160:	d17c      	bne.n	800225c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d002      	beq.n	800216e <HAL_UART_Transmit+0x2c>
 8002168:	88fb      	ldrh	r3, [r7, #6]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e075      	b.n	800225e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002178:	2b01      	cmp	r3, #1
 800217a:	d101      	bne.n	8002180 <HAL_UART_Transmit+0x3e>
 800217c:	2302      	movs	r3, #2
 800217e:	e06e      	b.n	800225e <HAL_UART_Transmit+0x11c>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2221      	movs	r2, #33	; 0x21
 8002192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002196:	f7fe fe27 	bl	8000de8 <HAL_GetTick>
 800219a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	88fa      	ldrh	r2, [r7, #6]
 80021a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	88fa      	ldrh	r2, [r7, #6]
 80021a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021b0:	d108      	bne.n	80021c4 <HAL_UART_Transmit+0x82>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d104      	bne.n	80021c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	61bb      	str	r3, [r7, #24]
 80021c2:	e003      	b.n	80021cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80021d4:	e02a      	b.n	800222c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	2200      	movs	r2, #0
 80021de:	2180      	movs	r1, #128	; 0x80
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	f000 f840 	bl	8002266 <UART_WaitOnFlagUntilTimeout>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e036      	b.n	800225e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10b      	bne.n	800220e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	461a      	mov	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002204:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	3302      	adds	r3, #2
 800220a:	61bb      	str	r3, [r7, #24]
 800220c:	e007      	b.n	800221e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	781a      	ldrb	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	3301      	adds	r3, #1
 800221c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002222:	b29b      	uxth	r3, r3
 8002224:	3b01      	subs	r3, #1
 8002226:	b29a      	uxth	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002230:	b29b      	uxth	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1cf      	bne.n	80021d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2200      	movs	r2, #0
 800223e:	2140      	movs	r1, #64	; 0x40
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 f810 	bl	8002266 <UART_WaitOnFlagUntilTimeout>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e006      	b.n	800225e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2220      	movs	r2, #32
 8002254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002258:	2300      	movs	r3, #0
 800225a:	e000      	b.n	800225e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800225c:	2302      	movs	r3, #2
  }
}
 800225e:	4618      	mov	r0, r3
 8002260:	3720      	adds	r7, #32
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b084      	sub	sp, #16
 800226a:	af00      	add	r7, sp, #0
 800226c:	60f8      	str	r0, [r7, #12]
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	603b      	str	r3, [r7, #0]
 8002272:	4613      	mov	r3, r2
 8002274:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002276:	e02c      	b.n	80022d2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800227e:	d028      	beq.n	80022d2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d007      	beq.n	8002296 <UART_WaitOnFlagUntilTimeout+0x30>
 8002286:	f7fe fdaf 	bl	8000de8 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	429a      	cmp	r2, r3
 8002294:	d21d      	bcs.n	80022d2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80022a4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	695a      	ldr	r2, [r3, #20]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0201 	bic.w	r2, r2, #1
 80022b4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2220      	movs	r2, #32
 80022ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2220      	movs	r2, #32
 80022c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e00f      	b.n	80022f2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	4013      	ands	r3, r2
 80022dc:	68ba      	ldr	r2, [r7, #8]
 80022de:	429a      	cmp	r2, r3
 80022e0:	bf0c      	ite	eq
 80022e2:	2301      	moveq	r3, #1
 80022e4:	2300      	movne	r3, #0
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	461a      	mov	r2, r3
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d0c3      	beq.n	8002278 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68da      	ldr	r2, [r3, #12]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	4313      	orrs	r3, r2
 800232a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002336:	f023 030c 	bic.w	r3, r3, #12
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6812      	ldr	r2, [r2, #0]
 800233e:	68b9      	ldr	r1, [r7, #8]
 8002340:	430b      	orrs	r3, r1
 8002342:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	699a      	ldr	r2, [r3, #24]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a2c      	ldr	r2, [pc, #176]	; (8002410 <UART_SetConfig+0x114>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d103      	bne.n	800236c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002364:	f7ff fbf4 	bl	8001b50 <HAL_RCC_GetPCLK2Freq>
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	e002      	b.n	8002372 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800236c:	f7ff fbdc 	bl	8001b28 <HAL_RCC_GetPCLK1Freq>
 8002370:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	009a      	lsls	r2, r3, #2
 800237c:	441a      	add	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	fbb2 f3f3 	udiv	r3, r2, r3
 8002388:	4a22      	ldr	r2, [pc, #136]	; (8002414 <UART_SetConfig+0x118>)
 800238a:	fba2 2303 	umull	r2, r3, r2, r3
 800238e:	095b      	lsrs	r3, r3, #5
 8002390:	0119      	lsls	r1, r3, #4
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	009a      	lsls	r2, r3, #2
 800239c:	441a      	add	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80023a8:	4b1a      	ldr	r3, [pc, #104]	; (8002414 <UART_SetConfig+0x118>)
 80023aa:	fba3 0302 	umull	r0, r3, r3, r2
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	2064      	movs	r0, #100	; 0x64
 80023b2:	fb00 f303 	mul.w	r3, r0, r3
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	3332      	adds	r3, #50	; 0x32
 80023bc:	4a15      	ldr	r2, [pc, #84]	; (8002414 <UART_SetConfig+0x118>)
 80023be:	fba2 2303 	umull	r2, r3, r2, r3
 80023c2:	095b      	lsrs	r3, r3, #5
 80023c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023c8:	4419      	add	r1, r3
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	009a      	lsls	r2, r3, #2
 80023d4:	441a      	add	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80023e0:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <UART_SetConfig+0x118>)
 80023e2:	fba3 0302 	umull	r0, r3, r3, r2
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	2064      	movs	r0, #100	; 0x64
 80023ea:	fb00 f303 	mul.w	r3, r0, r3
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	3332      	adds	r3, #50	; 0x32
 80023f4:	4a07      	ldr	r2, [pc, #28]	; (8002414 <UART_SetConfig+0x118>)
 80023f6:	fba2 2303 	umull	r2, r3, r2, r3
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	f003 020f 	and.w	r2, r3, #15
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	440a      	add	r2, r1
 8002406:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002408:	bf00      	nop
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40013800 	.word	0x40013800
 8002414:	51eb851f 	.word	0x51eb851f

08002418 <__errno>:
 8002418:	4b01      	ldr	r3, [pc, #4]	; (8002420 <__errno+0x8>)
 800241a:	6818      	ldr	r0, [r3, #0]
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	2000000c 	.word	0x2000000c

08002424 <__libc_init_array>:
 8002424:	b570      	push	{r4, r5, r6, lr}
 8002426:	2600      	movs	r6, #0
 8002428:	4d0c      	ldr	r5, [pc, #48]	; (800245c <__libc_init_array+0x38>)
 800242a:	4c0d      	ldr	r4, [pc, #52]	; (8002460 <__libc_init_array+0x3c>)
 800242c:	1b64      	subs	r4, r4, r5
 800242e:	10a4      	asrs	r4, r4, #2
 8002430:	42a6      	cmp	r6, r4
 8002432:	d109      	bne.n	8002448 <__libc_init_array+0x24>
 8002434:	f000 ffb6 	bl	80033a4 <_init>
 8002438:	2600      	movs	r6, #0
 800243a:	4d0a      	ldr	r5, [pc, #40]	; (8002464 <__libc_init_array+0x40>)
 800243c:	4c0a      	ldr	r4, [pc, #40]	; (8002468 <__libc_init_array+0x44>)
 800243e:	1b64      	subs	r4, r4, r5
 8002440:	10a4      	asrs	r4, r4, #2
 8002442:	42a6      	cmp	r6, r4
 8002444:	d105      	bne.n	8002452 <__libc_init_array+0x2e>
 8002446:	bd70      	pop	{r4, r5, r6, pc}
 8002448:	f855 3b04 	ldr.w	r3, [r5], #4
 800244c:	4798      	blx	r3
 800244e:	3601      	adds	r6, #1
 8002450:	e7ee      	b.n	8002430 <__libc_init_array+0xc>
 8002452:	f855 3b04 	ldr.w	r3, [r5], #4
 8002456:	4798      	blx	r3
 8002458:	3601      	adds	r6, #1
 800245a:	e7f2      	b.n	8002442 <__libc_init_array+0x1e>
 800245c:	0800349c 	.word	0x0800349c
 8002460:	0800349c 	.word	0x0800349c
 8002464:	0800349c 	.word	0x0800349c
 8002468:	080034a0 	.word	0x080034a0

0800246c <memset>:
 800246c:	4603      	mov	r3, r0
 800246e:	4402      	add	r2, r0
 8002470:	4293      	cmp	r3, r2
 8002472:	d100      	bne.n	8002476 <memset+0xa>
 8002474:	4770      	bx	lr
 8002476:	f803 1b01 	strb.w	r1, [r3], #1
 800247a:	e7f9      	b.n	8002470 <memset+0x4>

0800247c <iprintf>:
 800247c:	b40f      	push	{r0, r1, r2, r3}
 800247e:	4b0a      	ldr	r3, [pc, #40]	; (80024a8 <iprintf+0x2c>)
 8002480:	b513      	push	{r0, r1, r4, lr}
 8002482:	681c      	ldr	r4, [r3, #0]
 8002484:	b124      	cbz	r4, 8002490 <iprintf+0x14>
 8002486:	69a3      	ldr	r3, [r4, #24]
 8002488:	b913      	cbnz	r3, 8002490 <iprintf+0x14>
 800248a:	4620      	mov	r0, r4
 800248c:	f000 f866 	bl	800255c <__sinit>
 8002490:	ab05      	add	r3, sp, #20
 8002492:	4620      	mov	r0, r4
 8002494:	9a04      	ldr	r2, [sp, #16]
 8002496:	68a1      	ldr	r1, [r4, #8]
 8002498:	9301      	str	r3, [sp, #4]
 800249a:	f000 f9bb 	bl	8002814 <_vfiprintf_r>
 800249e:	b002      	add	sp, #8
 80024a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024a4:	b004      	add	sp, #16
 80024a6:	4770      	bx	lr
 80024a8:	2000000c 	.word	0x2000000c

080024ac <std>:
 80024ac:	2300      	movs	r3, #0
 80024ae:	b510      	push	{r4, lr}
 80024b0:	4604      	mov	r4, r0
 80024b2:	e9c0 3300 	strd	r3, r3, [r0]
 80024b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80024ba:	6083      	str	r3, [r0, #8]
 80024bc:	8181      	strh	r1, [r0, #12]
 80024be:	6643      	str	r3, [r0, #100]	; 0x64
 80024c0:	81c2      	strh	r2, [r0, #14]
 80024c2:	6183      	str	r3, [r0, #24]
 80024c4:	4619      	mov	r1, r3
 80024c6:	2208      	movs	r2, #8
 80024c8:	305c      	adds	r0, #92	; 0x5c
 80024ca:	f7ff ffcf 	bl	800246c <memset>
 80024ce:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <std+0x38>)
 80024d0:	6224      	str	r4, [r4, #32]
 80024d2:	6263      	str	r3, [r4, #36]	; 0x24
 80024d4:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <std+0x3c>)
 80024d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80024d8:	4b04      	ldr	r3, [pc, #16]	; (80024ec <std+0x40>)
 80024da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80024dc:	4b04      	ldr	r3, [pc, #16]	; (80024f0 <std+0x44>)
 80024de:	6323      	str	r3, [r4, #48]	; 0x30
 80024e0:	bd10      	pop	{r4, pc}
 80024e2:	bf00      	nop
 80024e4:	08002dc1 	.word	0x08002dc1
 80024e8:	08002de3 	.word	0x08002de3
 80024ec:	08002e1b 	.word	0x08002e1b
 80024f0:	08002e3f 	.word	0x08002e3f

080024f4 <_cleanup_r>:
 80024f4:	4901      	ldr	r1, [pc, #4]	; (80024fc <_cleanup_r+0x8>)
 80024f6:	f000 b8af 	b.w	8002658 <_fwalk_reent>
 80024fa:	bf00      	nop
 80024fc:	08003111 	.word	0x08003111

08002500 <__sfmoreglue>:
 8002500:	2268      	movs	r2, #104	; 0x68
 8002502:	b570      	push	{r4, r5, r6, lr}
 8002504:	1e4d      	subs	r5, r1, #1
 8002506:	4355      	muls	r5, r2
 8002508:	460e      	mov	r6, r1
 800250a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800250e:	f000 f8e5 	bl	80026dc <_malloc_r>
 8002512:	4604      	mov	r4, r0
 8002514:	b140      	cbz	r0, 8002528 <__sfmoreglue+0x28>
 8002516:	2100      	movs	r1, #0
 8002518:	e9c0 1600 	strd	r1, r6, [r0]
 800251c:	300c      	adds	r0, #12
 800251e:	60a0      	str	r0, [r4, #8]
 8002520:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002524:	f7ff ffa2 	bl	800246c <memset>
 8002528:	4620      	mov	r0, r4
 800252a:	bd70      	pop	{r4, r5, r6, pc}

0800252c <__sfp_lock_acquire>:
 800252c:	4801      	ldr	r0, [pc, #4]	; (8002534 <__sfp_lock_acquire+0x8>)
 800252e:	f000 b8b3 	b.w	8002698 <__retarget_lock_acquire_recursive>
 8002532:	bf00      	nop
 8002534:	20000131 	.word	0x20000131

08002538 <__sfp_lock_release>:
 8002538:	4801      	ldr	r0, [pc, #4]	; (8002540 <__sfp_lock_release+0x8>)
 800253a:	f000 b8ae 	b.w	800269a <__retarget_lock_release_recursive>
 800253e:	bf00      	nop
 8002540:	20000131 	.word	0x20000131

08002544 <__sinit_lock_acquire>:
 8002544:	4801      	ldr	r0, [pc, #4]	; (800254c <__sinit_lock_acquire+0x8>)
 8002546:	f000 b8a7 	b.w	8002698 <__retarget_lock_acquire_recursive>
 800254a:	bf00      	nop
 800254c:	20000132 	.word	0x20000132

08002550 <__sinit_lock_release>:
 8002550:	4801      	ldr	r0, [pc, #4]	; (8002558 <__sinit_lock_release+0x8>)
 8002552:	f000 b8a2 	b.w	800269a <__retarget_lock_release_recursive>
 8002556:	bf00      	nop
 8002558:	20000132 	.word	0x20000132

0800255c <__sinit>:
 800255c:	b510      	push	{r4, lr}
 800255e:	4604      	mov	r4, r0
 8002560:	f7ff fff0 	bl	8002544 <__sinit_lock_acquire>
 8002564:	69a3      	ldr	r3, [r4, #24]
 8002566:	b11b      	cbz	r3, 8002570 <__sinit+0x14>
 8002568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800256c:	f7ff bff0 	b.w	8002550 <__sinit_lock_release>
 8002570:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002574:	6523      	str	r3, [r4, #80]	; 0x50
 8002576:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <__sinit+0x68>)
 8002578:	4a13      	ldr	r2, [pc, #76]	; (80025c8 <__sinit+0x6c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	62a2      	str	r2, [r4, #40]	; 0x28
 800257e:	42a3      	cmp	r3, r4
 8002580:	bf08      	it	eq
 8002582:	2301      	moveq	r3, #1
 8002584:	4620      	mov	r0, r4
 8002586:	bf08      	it	eq
 8002588:	61a3      	streq	r3, [r4, #24]
 800258a:	f000 f81f 	bl	80025cc <__sfp>
 800258e:	6060      	str	r0, [r4, #4]
 8002590:	4620      	mov	r0, r4
 8002592:	f000 f81b 	bl	80025cc <__sfp>
 8002596:	60a0      	str	r0, [r4, #8]
 8002598:	4620      	mov	r0, r4
 800259a:	f000 f817 	bl	80025cc <__sfp>
 800259e:	2200      	movs	r2, #0
 80025a0:	2104      	movs	r1, #4
 80025a2:	60e0      	str	r0, [r4, #12]
 80025a4:	6860      	ldr	r0, [r4, #4]
 80025a6:	f7ff ff81 	bl	80024ac <std>
 80025aa:	2201      	movs	r2, #1
 80025ac:	2109      	movs	r1, #9
 80025ae:	68a0      	ldr	r0, [r4, #8]
 80025b0:	f7ff ff7c 	bl	80024ac <std>
 80025b4:	2202      	movs	r2, #2
 80025b6:	2112      	movs	r1, #18
 80025b8:	68e0      	ldr	r0, [r4, #12]
 80025ba:	f7ff ff77 	bl	80024ac <std>
 80025be:	2301      	movs	r3, #1
 80025c0:	61a3      	str	r3, [r4, #24]
 80025c2:	e7d1      	b.n	8002568 <__sinit+0xc>
 80025c4:	08003404 	.word	0x08003404
 80025c8:	080024f5 	.word	0x080024f5

080025cc <__sfp>:
 80025cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ce:	4607      	mov	r7, r0
 80025d0:	f7ff ffac 	bl	800252c <__sfp_lock_acquire>
 80025d4:	4b1e      	ldr	r3, [pc, #120]	; (8002650 <__sfp+0x84>)
 80025d6:	681e      	ldr	r6, [r3, #0]
 80025d8:	69b3      	ldr	r3, [r6, #24]
 80025da:	b913      	cbnz	r3, 80025e2 <__sfp+0x16>
 80025dc:	4630      	mov	r0, r6
 80025de:	f7ff ffbd 	bl	800255c <__sinit>
 80025e2:	3648      	adds	r6, #72	; 0x48
 80025e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80025e8:	3b01      	subs	r3, #1
 80025ea:	d503      	bpl.n	80025f4 <__sfp+0x28>
 80025ec:	6833      	ldr	r3, [r6, #0]
 80025ee:	b30b      	cbz	r3, 8002634 <__sfp+0x68>
 80025f0:	6836      	ldr	r6, [r6, #0]
 80025f2:	e7f7      	b.n	80025e4 <__sfp+0x18>
 80025f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80025f8:	b9d5      	cbnz	r5, 8002630 <__sfp+0x64>
 80025fa:	4b16      	ldr	r3, [pc, #88]	; (8002654 <__sfp+0x88>)
 80025fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002600:	60e3      	str	r3, [r4, #12]
 8002602:	6665      	str	r5, [r4, #100]	; 0x64
 8002604:	f000 f847 	bl	8002696 <__retarget_lock_init_recursive>
 8002608:	f7ff ff96 	bl	8002538 <__sfp_lock_release>
 800260c:	2208      	movs	r2, #8
 800260e:	4629      	mov	r1, r5
 8002610:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002614:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002618:	6025      	str	r5, [r4, #0]
 800261a:	61a5      	str	r5, [r4, #24]
 800261c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002620:	f7ff ff24 	bl	800246c <memset>
 8002624:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002628:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800262c:	4620      	mov	r0, r4
 800262e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002630:	3468      	adds	r4, #104	; 0x68
 8002632:	e7d9      	b.n	80025e8 <__sfp+0x1c>
 8002634:	2104      	movs	r1, #4
 8002636:	4638      	mov	r0, r7
 8002638:	f7ff ff62 	bl	8002500 <__sfmoreglue>
 800263c:	4604      	mov	r4, r0
 800263e:	6030      	str	r0, [r6, #0]
 8002640:	2800      	cmp	r0, #0
 8002642:	d1d5      	bne.n	80025f0 <__sfp+0x24>
 8002644:	f7ff ff78 	bl	8002538 <__sfp_lock_release>
 8002648:	230c      	movs	r3, #12
 800264a:	603b      	str	r3, [r7, #0]
 800264c:	e7ee      	b.n	800262c <__sfp+0x60>
 800264e:	bf00      	nop
 8002650:	08003404 	.word	0x08003404
 8002654:	ffff0001 	.word	0xffff0001

08002658 <_fwalk_reent>:
 8002658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800265c:	4606      	mov	r6, r0
 800265e:	4688      	mov	r8, r1
 8002660:	2700      	movs	r7, #0
 8002662:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002666:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800266a:	f1b9 0901 	subs.w	r9, r9, #1
 800266e:	d505      	bpl.n	800267c <_fwalk_reent+0x24>
 8002670:	6824      	ldr	r4, [r4, #0]
 8002672:	2c00      	cmp	r4, #0
 8002674:	d1f7      	bne.n	8002666 <_fwalk_reent+0xe>
 8002676:	4638      	mov	r0, r7
 8002678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800267c:	89ab      	ldrh	r3, [r5, #12]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d907      	bls.n	8002692 <_fwalk_reent+0x3a>
 8002682:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002686:	3301      	adds	r3, #1
 8002688:	d003      	beq.n	8002692 <_fwalk_reent+0x3a>
 800268a:	4629      	mov	r1, r5
 800268c:	4630      	mov	r0, r6
 800268e:	47c0      	blx	r8
 8002690:	4307      	orrs	r7, r0
 8002692:	3568      	adds	r5, #104	; 0x68
 8002694:	e7e9      	b.n	800266a <_fwalk_reent+0x12>

08002696 <__retarget_lock_init_recursive>:
 8002696:	4770      	bx	lr

08002698 <__retarget_lock_acquire_recursive>:
 8002698:	4770      	bx	lr

0800269a <__retarget_lock_release_recursive>:
 800269a:	4770      	bx	lr

0800269c <sbrk_aligned>:
 800269c:	b570      	push	{r4, r5, r6, lr}
 800269e:	4e0e      	ldr	r6, [pc, #56]	; (80026d8 <sbrk_aligned+0x3c>)
 80026a0:	460c      	mov	r4, r1
 80026a2:	6831      	ldr	r1, [r6, #0]
 80026a4:	4605      	mov	r5, r0
 80026a6:	b911      	cbnz	r1, 80026ae <sbrk_aligned+0x12>
 80026a8:	f000 fb7a 	bl	8002da0 <_sbrk_r>
 80026ac:	6030      	str	r0, [r6, #0]
 80026ae:	4621      	mov	r1, r4
 80026b0:	4628      	mov	r0, r5
 80026b2:	f000 fb75 	bl	8002da0 <_sbrk_r>
 80026b6:	1c43      	adds	r3, r0, #1
 80026b8:	d00a      	beq.n	80026d0 <sbrk_aligned+0x34>
 80026ba:	1cc4      	adds	r4, r0, #3
 80026bc:	f024 0403 	bic.w	r4, r4, #3
 80026c0:	42a0      	cmp	r0, r4
 80026c2:	d007      	beq.n	80026d4 <sbrk_aligned+0x38>
 80026c4:	1a21      	subs	r1, r4, r0
 80026c6:	4628      	mov	r0, r5
 80026c8:	f000 fb6a 	bl	8002da0 <_sbrk_r>
 80026cc:	3001      	adds	r0, #1
 80026ce:	d101      	bne.n	80026d4 <sbrk_aligned+0x38>
 80026d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80026d4:	4620      	mov	r0, r4
 80026d6:	bd70      	pop	{r4, r5, r6, pc}
 80026d8:	20000138 	.word	0x20000138

080026dc <_malloc_r>:
 80026dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026e0:	1ccd      	adds	r5, r1, #3
 80026e2:	f025 0503 	bic.w	r5, r5, #3
 80026e6:	3508      	adds	r5, #8
 80026e8:	2d0c      	cmp	r5, #12
 80026ea:	bf38      	it	cc
 80026ec:	250c      	movcc	r5, #12
 80026ee:	2d00      	cmp	r5, #0
 80026f0:	4607      	mov	r7, r0
 80026f2:	db01      	blt.n	80026f8 <_malloc_r+0x1c>
 80026f4:	42a9      	cmp	r1, r5
 80026f6:	d905      	bls.n	8002704 <_malloc_r+0x28>
 80026f8:	230c      	movs	r3, #12
 80026fa:	2600      	movs	r6, #0
 80026fc:	603b      	str	r3, [r7, #0]
 80026fe:	4630      	mov	r0, r6
 8002700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002704:	4e2e      	ldr	r6, [pc, #184]	; (80027c0 <_malloc_r+0xe4>)
 8002706:	f000 fdc5 	bl	8003294 <__malloc_lock>
 800270a:	6833      	ldr	r3, [r6, #0]
 800270c:	461c      	mov	r4, r3
 800270e:	bb34      	cbnz	r4, 800275e <_malloc_r+0x82>
 8002710:	4629      	mov	r1, r5
 8002712:	4638      	mov	r0, r7
 8002714:	f7ff ffc2 	bl	800269c <sbrk_aligned>
 8002718:	1c43      	adds	r3, r0, #1
 800271a:	4604      	mov	r4, r0
 800271c:	d14d      	bne.n	80027ba <_malloc_r+0xde>
 800271e:	6834      	ldr	r4, [r6, #0]
 8002720:	4626      	mov	r6, r4
 8002722:	2e00      	cmp	r6, #0
 8002724:	d140      	bne.n	80027a8 <_malloc_r+0xcc>
 8002726:	6823      	ldr	r3, [r4, #0]
 8002728:	4631      	mov	r1, r6
 800272a:	4638      	mov	r0, r7
 800272c:	eb04 0803 	add.w	r8, r4, r3
 8002730:	f000 fb36 	bl	8002da0 <_sbrk_r>
 8002734:	4580      	cmp	r8, r0
 8002736:	d13a      	bne.n	80027ae <_malloc_r+0xd2>
 8002738:	6821      	ldr	r1, [r4, #0]
 800273a:	3503      	adds	r5, #3
 800273c:	1a6d      	subs	r5, r5, r1
 800273e:	f025 0503 	bic.w	r5, r5, #3
 8002742:	3508      	adds	r5, #8
 8002744:	2d0c      	cmp	r5, #12
 8002746:	bf38      	it	cc
 8002748:	250c      	movcc	r5, #12
 800274a:	4638      	mov	r0, r7
 800274c:	4629      	mov	r1, r5
 800274e:	f7ff ffa5 	bl	800269c <sbrk_aligned>
 8002752:	3001      	adds	r0, #1
 8002754:	d02b      	beq.n	80027ae <_malloc_r+0xd2>
 8002756:	6823      	ldr	r3, [r4, #0]
 8002758:	442b      	add	r3, r5
 800275a:	6023      	str	r3, [r4, #0]
 800275c:	e00e      	b.n	800277c <_malloc_r+0xa0>
 800275e:	6822      	ldr	r2, [r4, #0]
 8002760:	1b52      	subs	r2, r2, r5
 8002762:	d41e      	bmi.n	80027a2 <_malloc_r+0xc6>
 8002764:	2a0b      	cmp	r2, #11
 8002766:	d916      	bls.n	8002796 <_malloc_r+0xba>
 8002768:	1961      	adds	r1, r4, r5
 800276a:	42a3      	cmp	r3, r4
 800276c:	6025      	str	r5, [r4, #0]
 800276e:	bf18      	it	ne
 8002770:	6059      	strne	r1, [r3, #4]
 8002772:	6863      	ldr	r3, [r4, #4]
 8002774:	bf08      	it	eq
 8002776:	6031      	streq	r1, [r6, #0]
 8002778:	5162      	str	r2, [r4, r5]
 800277a:	604b      	str	r3, [r1, #4]
 800277c:	4638      	mov	r0, r7
 800277e:	f104 060b 	add.w	r6, r4, #11
 8002782:	f000 fd8d 	bl	80032a0 <__malloc_unlock>
 8002786:	f026 0607 	bic.w	r6, r6, #7
 800278a:	1d23      	adds	r3, r4, #4
 800278c:	1af2      	subs	r2, r6, r3
 800278e:	d0b6      	beq.n	80026fe <_malloc_r+0x22>
 8002790:	1b9b      	subs	r3, r3, r6
 8002792:	50a3      	str	r3, [r4, r2]
 8002794:	e7b3      	b.n	80026fe <_malloc_r+0x22>
 8002796:	6862      	ldr	r2, [r4, #4]
 8002798:	42a3      	cmp	r3, r4
 800279a:	bf0c      	ite	eq
 800279c:	6032      	streq	r2, [r6, #0]
 800279e:	605a      	strne	r2, [r3, #4]
 80027a0:	e7ec      	b.n	800277c <_malloc_r+0xa0>
 80027a2:	4623      	mov	r3, r4
 80027a4:	6864      	ldr	r4, [r4, #4]
 80027a6:	e7b2      	b.n	800270e <_malloc_r+0x32>
 80027a8:	4634      	mov	r4, r6
 80027aa:	6876      	ldr	r6, [r6, #4]
 80027ac:	e7b9      	b.n	8002722 <_malloc_r+0x46>
 80027ae:	230c      	movs	r3, #12
 80027b0:	4638      	mov	r0, r7
 80027b2:	603b      	str	r3, [r7, #0]
 80027b4:	f000 fd74 	bl	80032a0 <__malloc_unlock>
 80027b8:	e7a1      	b.n	80026fe <_malloc_r+0x22>
 80027ba:	6025      	str	r5, [r4, #0]
 80027bc:	e7de      	b.n	800277c <_malloc_r+0xa0>
 80027be:	bf00      	nop
 80027c0:	20000134 	.word	0x20000134

080027c4 <__sfputc_r>:
 80027c4:	6893      	ldr	r3, [r2, #8]
 80027c6:	b410      	push	{r4}
 80027c8:	3b01      	subs	r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	6093      	str	r3, [r2, #8]
 80027ce:	da07      	bge.n	80027e0 <__sfputc_r+0x1c>
 80027d0:	6994      	ldr	r4, [r2, #24]
 80027d2:	42a3      	cmp	r3, r4
 80027d4:	db01      	blt.n	80027da <__sfputc_r+0x16>
 80027d6:	290a      	cmp	r1, #10
 80027d8:	d102      	bne.n	80027e0 <__sfputc_r+0x1c>
 80027da:	bc10      	pop	{r4}
 80027dc:	f000 bb34 	b.w	8002e48 <__swbuf_r>
 80027e0:	6813      	ldr	r3, [r2, #0]
 80027e2:	1c58      	adds	r0, r3, #1
 80027e4:	6010      	str	r0, [r2, #0]
 80027e6:	7019      	strb	r1, [r3, #0]
 80027e8:	4608      	mov	r0, r1
 80027ea:	bc10      	pop	{r4}
 80027ec:	4770      	bx	lr

080027ee <__sfputs_r>:
 80027ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027f0:	4606      	mov	r6, r0
 80027f2:	460f      	mov	r7, r1
 80027f4:	4614      	mov	r4, r2
 80027f6:	18d5      	adds	r5, r2, r3
 80027f8:	42ac      	cmp	r4, r5
 80027fa:	d101      	bne.n	8002800 <__sfputs_r+0x12>
 80027fc:	2000      	movs	r0, #0
 80027fe:	e007      	b.n	8002810 <__sfputs_r+0x22>
 8002800:	463a      	mov	r2, r7
 8002802:	4630      	mov	r0, r6
 8002804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002808:	f7ff ffdc 	bl	80027c4 <__sfputc_r>
 800280c:	1c43      	adds	r3, r0, #1
 800280e:	d1f3      	bne.n	80027f8 <__sfputs_r+0xa>
 8002810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002814 <_vfiprintf_r>:
 8002814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002818:	460d      	mov	r5, r1
 800281a:	4614      	mov	r4, r2
 800281c:	4698      	mov	r8, r3
 800281e:	4606      	mov	r6, r0
 8002820:	b09d      	sub	sp, #116	; 0x74
 8002822:	b118      	cbz	r0, 800282c <_vfiprintf_r+0x18>
 8002824:	6983      	ldr	r3, [r0, #24]
 8002826:	b90b      	cbnz	r3, 800282c <_vfiprintf_r+0x18>
 8002828:	f7ff fe98 	bl	800255c <__sinit>
 800282c:	4b89      	ldr	r3, [pc, #548]	; (8002a54 <_vfiprintf_r+0x240>)
 800282e:	429d      	cmp	r5, r3
 8002830:	d11b      	bne.n	800286a <_vfiprintf_r+0x56>
 8002832:	6875      	ldr	r5, [r6, #4]
 8002834:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002836:	07d9      	lsls	r1, r3, #31
 8002838:	d405      	bmi.n	8002846 <_vfiprintf_r+0x32>
 800283a:	89ab      	ldrh	r3, [r5, #12]
 800283c:	059a      	lsls	r2, r3, #22
 800283e:	d402      	bmi.n	8002846 <_vfiprintf_r+0x32>
 8002840:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002842:	f7ff ff29 	bl	8002698 <__retarget_lock_acquire_recursive>
 8002846:	89ab      	ldrh	r3, [r5, #12]
 8002848:	071b      	lsls	r3, r3, #28
 800284a:	d501      	bpl.n	8002850 <_vfiprintf_r+0x3c>
 800284c:	692b      	ldr	r3, [r5, #16]
 800284e:	b9eb      	cbnz	r3, 800288c <_vfiprintf_r+0x78>
 8002850:	4629      	mov	r1, r5
 8002852:	4630      	mov	r0, r6
 8002854:	f000 fb5c 	bl	8002f10 <__swsetup_r>
 8002858:	b1c0      	cbz	r0, 800288c <_vfiprintf_r+0x78>
 800285a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800285c:	07dc      	lsls	r4, r3, #31
 800285e:	d50e      	bpl.n	800287e <_vfiprintf_r+0x6a>
 8002860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002864:	b01d      	add	sp, #116	; 0x74
 8002866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800286a:	4b7b      	ldr	r3, [pc, #492]	; (8002a58 <_vfiprintf_r+0x244>)
 800286c:	429d      	cmp	r5, r3
 800286e:	d101      	bne.n	8002874 <_vfiprintf_r+0x60>
 8002870:	68b5      	ldr	r5, [r6, #8]
 8002872:	e7df      	b.n	8002834 <_vfiprintf_r+0x20>
 8002874:	4b79      	ldr	r3, [pc, #484]	; (8002a5c <_vfiprintf_r+0x248>)
 8002876:	429d      	cmp	r5, r3
 8002878:	bf08      	it	eq
 800287a:	68f5      	ldreq	r5, [r6, #12]
 800287c:	e7da      	b.n	8002834 <_vfiprintf_r+0x20>
 800287e:	89ab      	ldrh	r3, [r5, #12]
 8002880:	0598      	lsls	r0, r3, #22
 8002882:	d4ed      	bmi.n	8002860 <_vfiprintf_r+0x4c>
 8002884:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002886:	f7ff ff08 	bl	800269a <__retarget_lock_release_recursive>
 800288a:	e7e9      	b.n	8002860 <_vfiprintf_r+0x4c>
 800288c:	2300      	movs	r3, #0
 800288e:	9309      	str	r3, [sp, #36]	; 0x24
 8002890:	2320      	movs	r3, #32
 8002892:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002896:	2330      	movs	r3, #48	; 0x30
 8002898:	f04f 0901 	mov.w	r9, #1
 800289c:	f8cd 800c 	str.w	r8, [sp, #12]
 80028a0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002a60 <_vfiprintf_r+0x24c>
 80028a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80028a8:	4623      	mov	r3, r4
 80028aa:	469a      	mov	sl, r3
 80028ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80028b0:	b10a      	cbz	r2, 80028b6 <_vfiprintf_r+0xa2>
 80028b2:	2a25      	cmp	r2, #37	; 0x25
 80028b4:	d1f9      	bne.n	80028aa <_vfiprintf_r+0x96>
 80028b6:	ebba 0b04 	subs.w	fp, sl, r4
 80028ba:	d00b      	beq.n	80028d4 <_vfiprintf_r+0xc0>
 80028bc:	465b      	mov	r3, fp
 80028be:	4622      	mov	r2, r4
 80028c0:	4629      	mov	r1, r5
 80028c2:	4630      	mov	r0, r6
 80028c4:	f7ff ff93 	bl	80027ee <__sfputs_r>
 80028c8:	3001      	adds	r0, #1
 80028ca:	f000 80aa 	beq.w	8002a22 <_vfiprintf_r+0x20e>
 80028ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028d0:	445a      	add	r2, fp
 80028d2:	9209      	str	r2, [sp, #36]	; 0x24
 80028d4:	f89a 3000 	ldrb.w	r3, [sl]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 80a2 	beq.w	8002a22 <_vfiprintf_r+0x20e>
 80028de:	2300      	movs	r3, #0
 80028e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028e8:	f10a 0a01 	add.w	sl, sl, #1
 80028ec:	9304      	str	r3, [sp, #16]
 80028ee:	9307      	str	r3, [sp, #28]
 80028f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80028f4:	931a      	str	r3, [sp, #104]	; 0x68
 80028f6:	4654      	mov	r4, sl
 80028f8:	2205      	movs	r2, #5
 80028fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028fe:	4858      	ldr	r0, [pc, #352]	; (8002a60 <_vfiprintf_r+0x24c>)
 8002900:	f000 fcba 	bl	8003278 <memchr>
 8002904:	9a04      	ldr	r2, [sp, #16]
 8002906:	b9d8      	cbnz	r0, 8002940 <_vfiprintf_r+0x12c>
 8002908:	06d1      	lsls	r1, r2, #27
 800290a:	bf44      	itt	mi
 800290c:	2320      	movmi	r3, #32
 800290e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002912:	0713      	lsls	r3, r2, #28
 8002914:	bf44      	itt	mi
 8002916:	232b      	movmi	r3, #43	; 0x2b
 8002918:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800291c:	f89a 3000 	ldrb.w	r3, [sl]
 8002920:	2b2a      	cmp	r3, #42	; 0x2a
 8002922:	d015      	beq.n	8002950 <_vfiprintf_r+0x13c>
 8002924:	4654      	mov	r4, sl
 8002926:	2000      	movs	r0, #0
 8002928:	f04f 0c0a 	mov.w	ip, #10
 800292c:	9a07      	ldr	r2, [sp, #28]
 800292e:	4621      	mov	r1, r4
 8002930:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002934:	3b30      	subs	r3, #48	; 0x30
 8002936:	2b09      	cmp	r3, #9
 8002938:	d94e      	bls.n	80029d8 <_vfiprintf_r+0x1c4>
 800293a:	b1b0      	cbz	r0, 800296a <_vfiprintf_r+0x156>
 800293c:	9207      	str	r2, [sp, #28]
 800293e:	e014      	b.n	800296a <_vfiprintf_r+0x156>
 8002940:	eba0 0308 	sub.w	r3, r0, r8
 8002944:	fa09 f303 	lsl.w	r3, r9, r3
 8002948:	4313      	orrs	r3, r2
 800294a:	46a2      	mov	sl, r4
 800294c:	9304      	str	r3, [sp, #16]
 800294e:	e7d2      	b.n	80028f6 <_vfiprintf_r+0xe2>
 8002950:	9b03      	ldr	r3, [sp, #12]
 8002952:	1d19      	adds	r1, r3, #4
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	9103      	str	r1, [sp, #12]
 8002958:	2b00      	cmp	r3, #0
 800295a:	bfbb      	ittet	lt
 800295c:	425b      	neglt	r3, r3
 800295e:	f042 0202 	orrlt.w	r2, r2, #2
 8002962:	9307      	strge	r3, [sp, #28]
 8002964:	9307      	strlt	r3, [sp, #28]
 8002966:	bfb8      	it	lt
 8002968:	9204      	strlt	r2, [sp, #16]
 800296a:	7823      	ldrb	r3, [r4, #0]
 800296c:	2b2e      	cmp	r3, #46	; 0x2e
 800296e:	d10c      	bne.n	800298a <_vfiprintf_r+0x176>
 8002970:	7863      	ldrb	r3, [r4, #1]
 8002972:	2b2a      	cmp	r3, #42	; 0x2a
 8002974:	d135      	bne.n	80029e2 <_vfiprintf_r+0x1ce>
 8002976:	9b03      	ldr	r3, [sp, #12]
 8002978:	3402      	adds	r4, #2
 800297a:	1d1a      	adds	r2, r3, #4
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	9203      	str	r2, [sp, #12]
 8002980:	2b00      	cmp	r3, #0
 8002982:	bfb8      	it	lt
 8002984:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002988:	9305      	str	r3, [sp, #20]
 800298a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002a64 <_vfiprintf_r+0x250>
 800298e:	2203      	movs	r2, #3
 8002990:	4650      	mov	r0, sl
 8002992:	7821      	ldrb	r1, [r4, #0]
 8002994:	f000 fc70 	bl	8003278 <memchr>
 8002998:	b140      	cbz	r0, 80029ac <_vfiprintf_r+0x198>
 800299a:	2340      	movs	r3, #64	; 0x40
 800299c:	eba0 000a 	sub.w	r0, r0, sl
 80029a0:	fa03 f000 	lsl.w	r0, r3, r0
 80029a4:	9b04      	ldr	r3, [sp, #16]
 80029a6:	3401      	adds	r4, #1
 80029a8:	4303      	orrs	r3, r0
 80029aa:	9304      	str	r3, [sp, #16]
 80029ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029b0:	2206      	movs	r2, #6
 80029b2:	482d      	ldr	r0, [pc, #180]	; (8002a68 <_vfiprintf_r+0x254>)
 80029b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80029b8:	f000 fc5e 	bl	8003278 <memchr>
 80029bc:	2800      	cmp	r0, #0
 80029be:	d03f      	beq.n	8002a40 <_vfiprintf_r+0x22c>
 80029c0:	4b2a      	ldr	r3, [pc, #168]	; (8002a6c <_vfiprintf_r+0x258>)
 80029c2:	bb1b      	cbnz	r3, 8002a0c <_vfiprintf_r+0x1f8>
 80029c4:	9b03      	ldr	r3, [sp, #12]
 80029c6:	3307      	adds	r3, #7
 80029c8:	f023 0307 	bic.w	r3, r3, #7
 80029cc:	3308      	adds	r3, #8
 80029ce:	9303      	str	r3, [sp, #12]
 80029d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029d2:	443b      	add	r3, r7
 80029d4:	9309      	str	r3, [sp, #36]	; 0x24
 80029d6:	e767      	b.n	80028a8 <_vfiprintf_r+0x94>
 80029d8:	460c      	mov	r4, r1
 80029da:	2001      	movs	r0, #1
 80029dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80029e0:	e7a5      	b.n	800292e <_vfiprintf_r+0x11a>
 80029e2:	2300      	movs	r3, #0
 80029e4:	f04f 0c0a 	mov.w	ip, #10
 80029e8:	4619      	mov	r1, r3
 80029ea:	3401      	adds	r4, #1
 80029ec:	9305      	str	r3, [sp, #20]
 80029ee:	4620      	mov	r0, r4
 80029f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029f4:	3a30      	subs	r2, #48	; 0x30
 80029f6:	2a09      	cmp	r2, #9
 80029f8:	d903      	bls.n	8002a02 <_vfiprintf_r+0x1ee>
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0c5      	beq.n	800298a <_vfiprintf_r+0x176>
 80029fe:	9105      	str	r1, [sp, #20]
 8002a00:	e7c3      	b.n	800298a <_vfiprintf_r+0x176>
 8002a02:	4604      	mov	r4, r0
 8002a04:	2301      	movs	r3, #1
 8002a06:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a0a:	e7f0      	b.n	80029ee <_vfiprintf_r+0x1da>
 8002a0c:	ab03      	add	r3, sp, #12
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	462a      	mov	r2, r5
 8002a12:	4630      	mov	r0, r6
 8002a14:	4b16      	ldr	r3, [pc, #88]	; (8002a70 <_vfiprintf_r+0x25c>)
 8002a16:	a904      	add	r1, sp, #16
 8002a18:	f3af 8000 	nop.w
 8002a1c:	4607      	mov	r7, r0
 8002a1e:	1c78      	adds	r0, r7, #1
 8002a20:	d1d6      	bne.n	80029d0 <_vfiprintf_r+0x1bc>
 8002a22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a24:	07d9      	lsls	r1, r3, #31
 8002a26:	d405      	bmi.n	8002a34 <_vfiprintf_r+0x220>
 8002a28:	89ab      	ldrh	r3, [r5, #12]
 8002a2a:	059a      	lsls	r2, r3, #22
 8002a2c:	d402      	bmi.n	8002a34 <_vfiprintf_r+0x220>
 8002a2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a30:	f7ff fe33 	bl	800269a <__retarget_lock_release_recursive>
 8002a34:	89ab      	ldrh	r3, [r5, #12]
 8002a36:	065b      	lsls	r3, r3, #25
 8002a38:	f53f af12 	bmi.w	8002860 <_vfiprintf_r+0x4c>
 8002a3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a3e:	e711      	b.n	8002864 <_vfiprintf_r+0x50>
 8002a40:	ab03      	add	r3, sp, #12
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	462a      	mov	r2, r5
 8002a46:	4630      	mov	r0, r6
 8002a48:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <_vfiprintf_r+0x25c>)
 8002a4a:	a904      	add	r1, sp, #16
 8002a4c:	f000 f882 	bl	8002b54 <_printf_i>
 8002a50:	e7e4      	b.n	8002a1c <_vfiprintf_r+0x208>
 8002a52:	bf00      	nop
 8002a54:	08003428 	.word	0x08003428
 8002a58:	08003448 	.word	0x08003448
 8002a5c:	08003408 	.word	0x08003408
 8002a60:	08003468 	.word	0x08003468
 8002a64:	0800346e 	.word	0x0800346e
 8002a68:	08003472 	.word	0x08003472
 8002a6c:	00000000 	.word	0x00000000
 8002a70:	080027ef 	.word	0x080027ef

08002a74 <_printf_common>:
 8002a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a78:	4616      	mov	r6, r2
 8002a7a:	4699      	mov	r9, r3
 8002a7c:	688a      	ldr	r2, [r1, #8]
 8002a7e:	690b      	ldr	r3, [r1, #16]
 8002a80:	4607      	mov	r7, r0
 8002a82:	4293      	cmp	r3, r2
 8002a84:	bfb8      	it	lt
 8002a86:	4613      	movlt	r3, r2
 8002a88:	6033      	str	r3, [r6, #0]
 8002a8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a8e:	460c      	mov	r4, r1
 8002a90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a94:	b10a      	cbz	r2, 8002a9a <_printf_common+0x26>
 8002a96:	3301      	adds	r3, #1
 8002a98:	6033      	str	r3, [r6, #0]
 8002a9a:	6823      	ldr	r3, [r4, #0]
 8002a9c:	0699      	lsls	r1, r3, #26
 8002a9e:	bf42      	ittt	mi
 8002aa0:	6833      	ldrmi	r3, [r6, #0]
 8002aa2:	3302      	addmi	r3, #2
 8002aa4:	6033      	strmi	r3, [r6, #0]
 8002aa6:	6825      	ldr	r5, [r4, #0]
 8002aa8:	f015 0506 	ands.w	r5, r5, #6
 8002aac:	d106      	bne.n	8002abc <_printf_common+0x48>
 8002aae:	f104 0a19 	add.w	sl, r4, #25
 8002ab2:	68e3      	ldr	r3, [r4, #12]
 8002ab4:	6832      	ldr	r2, [r6, #0]
 8002ab6:	1a9b      	subs	r3, r3, r2
 8002ab8:	42ab      	cmp	r3, r5
 8002aba:	dc28      	bgt.n	8002b0e <_printf_common+0x9a>
 8002abc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ac0:	1e13      	subs	r3, r2, #0
 8002ac2:	6822      	ldr	r2, [r4, #0]
 8002ac4:	bf18      	it	ne
 8002ac6:	2301      	movne	r3, #1
 8002ac8:	0692      	lsls	r2, r2, #26
 8002aca:	d42d      	bmi.n	8002b28 <_printf_common+0xb4>
 8002acc:	4649      	mov	r1, r9
 8002ace:	4638      	mov	r0, r7
 8002ad0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ad4:	47c0      	blx	r8
 8002ad6:	3001      	adds	r0, #1
 8002ad8:	d020      	beq.n	8002b1c <_printf_common+0xa8>
 8002ada:	6823      	ldr	r3, [r4, #0]
 8002adc:	68e5      	ldr	r5, [r4, #12]
 8002ade:	f003 0306 	and.w	r3, r3, #6
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	bf18      	it	ne
 8002ae6:	2500      	movne	r5, #0
 8002ae8:	6832      	ldr	r2, [r6, #0]
 8002aea:	f04f 0600 	mov.w	r6, #0
 8002aee:	68a3      	ldr	r3, [r4, #8]
 8002af0:	bf08      	it	eq
 8002af2:	1aad      	subeq	r5, r5, r2
 8002af4:	6922      	ldr	r2, [r4, #16]
 8002af6:	bf08      	it	eq
 8002af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002afc:	4293      	cmp	r3, r2
 8002afe:	bfc4      	itt	gt
 8002b00:	1a9b      	subgt	r3, r3, r2
 8002b02:	18ed      	addgt	r5, r5, r3
 8002b04:	341a      	adds	r4, #26
 8002b06:	42b5      	cmp	r5, r6
 8002b08:	d11a      	bne.n	8002b40 <_printf_common+0xcc>
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	e008      	b.n	8002b20 <_printf_common+0xac>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	4652      	mov	r2, sl
 8002b12:	4649      	mov	r1, r9
 8002b14:	4638      	mov	r0, r7
 8002b16:	47c0      	blx	r8
 8002b18:	3001      	adds	r0, #1
 8002b1a:	d103      	bne.n	8002b24 <_printf_common+0xb0>
 8002b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b24:	3501      	adds	r5, #1
 8002b26:	e7c4      	b.n	8002ab2 <_printf_common+0x3e>
 8002b28:	2030      	movs	r0, #48	; 0x30
 8002b2a:	18e1      	adds	r1, r4, r3
 8002b2c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b36:	4422      	add	r2, r4
 8002b38:	3302      	adds	r3, #2
 8002b3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b3e:	e7c5      	b.n	8002acc <_printf_common+0x58>
 8002b40:	2301      	movs	r3, #1
 8002b42:	4622      	mov	r2, r4
 8002b44:	4649      	mov	r1, r9
 8002b46:	4638      	mov	r0, r7
 8002b48:	47c0      	blx	r8
 8002b4a:	3001      	adds	r0, #1
 8002b4c:	d0e6      	beq.n	8002b1c <_printf_common+0xa8>
 8002b4e:	3601      	adds	r6, #1
 8002b50:	e7d9      	b.n	8002b06 <_printf_common+0x92>
	...

08002b54 <_printf_i>:
 8002b54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b58:	7e0f      	ldrb	r7, [r1, #24]
 8002b5a:	4691      	mov	r9, r2
 8002b5c:	2f78      	cmp	r7, #120	; 0x78
 8002b5e:	4680      	mov	r8, r0
 8002b60:	460c      	mov	r4, r1
 8002b62:	469a      	mov	sl, r3
 8002b64:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002b66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002b6a:	d807      	bhi.n	8002b7c <_printf_i+0x28>
 8002b6c:	2f62      	cmp	r7, #98	; 0x62
 8002b6e:	d80a      	bhi.n	8002b86 <_printf_i+0x32>
 8002b70:	2f00      	cmp	r7, #0
 8002b72:	f000 80d9 	beq.w	8002d28 <_printf_i+0x1d4>
 8002b76:	2f58      	cmp	r7, #88	; 0x58
 8002b78:	f000 80a4 	beq.w	8002cc4 <_printf_i+0x170>
 8002b7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002b84:	e03a      	b.n	8002bfc <_printf_i+0xa8>
 8002b86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002b8a:	2b15      	cmp	r3, #21
 8002b8c:	d8f6      	bhi.n	8002b7c <_printf_i+0x28>
 8002b8e:	a101      	add	r1, pc, #4	; (adr r1, 8002b94 <_printf_i+0x40>)
 8002b90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b94:	08002bed 	.word	0x08002bed
 8002b98:	08002c01 	.word	0x08002c01
 8002b9c:	08002b7d 	.word	0x08002b7d
 8002ba0:	08002b7d 	.word	0x08002b7d
 8002ba4:	08002b7d 	.word	0x08002b7d
 8002ba8:	08002b7d 	.word	0x08002b7d
 8002bac:	08002c01 	.word	0x08002c01
 8002bb0:	08002b7d 	.word	0x08002b7d
 8002bb4:	08002b7d 	.word	0x08002b7d
 8002bb8:	08002b7d 	.word	0x08002b7d
 8002bbc:	08002b7d 	.word	0x08002b7d
 8002bc0:	08002d0f 	.word	0x08002d0f
 8002bc4:	08002c31 	.word	0x08002c31
 8002bc8:	08002cf1 	.word	0x08002cf1
 8002bcc:	08002b7d 	.word	0x08002b7d
 8002bd0:	08002b7d 	.word	0x08002b7d
 8002bd4:	08002d31 	.word	0x08002d31
 8002bd8:	08002b7d 	.word	0x08002b7d
 8002bdc:	08002c31 	.word	0x08002c31
 8002be0:	08002b7d 	.word	0x08002b7d
 8002be4:	08002b7d 	.word	0x08002b7d
 8002be8:	08002cf9 	.word	0x08002cf9
 8002bec:	682b      	ldr	r3, [r5, #0]
 8002bee:	1d1a      	adds	r2, r3, #4
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	602a      	str	r2, [r5, #0]
 8002bf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e0a4      	b.n	8002d4a <_printf_i+0x1f6>
 8002c00:	6820      	ldr	r0, [r4, #0]
 8002c02:	6829      	ldr	r1, [r5, #0]
 8002c04:	0606      	lsls	r6, r0, #24
 8002c06:	f101 0304 	add.w	r3, r1, #4
 8002c0a:	d50a      	bpl.n	8002c22 <_printf_i+0xce>
 8002c0c:	680e      	ldr	r6, [r1, #0]
 8002c0e:	602b      	str	r3, [r5, #0]
 8002c10:	2e00      	cmp	r6, #0
 8002c12:	da03      	bge.n	8002c1c <_printf_i+0xc8>
 8002c14:	232d      	movs	r3, #45	; 0x2d
 8002c16:	4276      	negs	r6, r6
 8002c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c1c:	230a      	movs	r3, #10
 8002c1e:	485e      	ldr	r0, [pc, #376]	; (8002d98 <_printf_i+0x244>)
 8002c20:	e019      	b.n	8002c56 <_printf_i+0x102>
 8002c22:	680e      	ldr	r6, [r1, #0]
 8002c24:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002c28:	602b      	str	r3, [r5, #0]
 8002c2a:	bf18      	it	ne
 8002c2c:	b236      	sxthne	r6, r6
 8002c2e:	e7ef      	b.n	8002c10 <_printf_i+0xbc>
 8002c30:	682b      	ldr	r3, [r5, #0]
 8002c32:	6820      	ldr	r0, [r4, #0]
 8002c34:	1d19      	adds	r1, r3, #4
 8002c36:	6029      	str	r1, [r5, #0]
 8002c38:	0601      	lsls	r1, r0, #24
 8002c3a:	d501      	bpl.n	8002c40 <_printf_i+0xec>
 8002c3c:	681e      	ldr	r6, [r3, #0]
 8002c3e:	e002      	b.n	8002c46 <_printf_i+0xf2>
 8002c40:	0646      	lsls	r6, r0, #25
 8002c42:	d5fb      	bpl.n	8002c3c <_printf_i+0xe8>
 8002c44:	881e      	ldrh	r6, [r3, #0]
 8002c46:	2f6f      	cmp	r7, #111	; 0x6f
 8002c48:	bf0c      	ite	eq
 8002c4a:	2308      	moveq	r3, #8
 8002c4c:	230a      	movne	r3, #10
 8002c4e:	4852      	ldr	r0, [pc, #328]	; (8002d98 <_printf_i+0x244>)
 8002c50:	2100      	movs	r1, #0
 8002c52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c56:	6865      	ldr	r5, [r4, #4]
 8002c58:	2d00      	cmp	r5, #0
 8002c5a:	bfa8      	it	ge
 8002c5c:	6821      	ldrge	r1, [r4, #0]
 8002c5e:	60a5      	str	r5, [r4, #8]
 8002c60:	bfa4      	itt	ge
 8002c62:	f021 0104 	bicge.w	r1, r1, #4
 8002c66:	6021      	strge	r1, [r4, #0]
 8002c68:	b90e      	cbnz	r6, 8002c6e <_printf_i+0x11a>
 8002c6a:	2d00      	cmp	r5, #0
 8002c6c:	d04d      	beq.n	8002d0a <_printf_i+0x1b6>
 8002c6e:	4615      	mov	r5, r2
 8002c70:	fbb6 f1f3 	udiv	r1, r6, r3
 8002c74:	fb03 6711 	mls	r7, r3, r1, r6
 8002c78:	5dc7      	ldrb	r7, [r0, r7]
 8002c7a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002c7e:	4637      	mov	r7, r6
 8002c80:	42bb      	cmp	r3, r7
 8002c82:	460e      	mov	r6, r1
 8002c84:	d9f4      	bls.n	8002c70 <_printf_i+0x11c>
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d10b      	bne.n	8002ca2 <_printf_i+0x14e>
 8002c8a:	6823      	ldr	r3, [r4, #0]
 8002c8c:	07de      	lsls	r6, r3, #31
 8002c8e:	d508      	bpl.n	8002ca2 <_printf_i+0x14e>
 8002c90:	6923      	ldr	r3, [r4, #16]
 8002c92:	6861      	ldr	r1, [r4, #4]
 8002c94:	4299      	cmp	r1, r3
 8002c96:	bfde      	ittt	le
 8002c98:	2330      	movle	r3, #48	; 0x30
 8002c9a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c9e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002ca2:	1b52      	subs	r2, r2, r5
 8002ca4:	6122      	str	r2, [r4, #16]
 8002ca6:	464b      	mov	r3, r9
 8002ca8:	4621      	mov	r1, r4
 8002caa:	4640      	mov	r0, r8
 8002cac:	f8cd a000 	str.w	sl, [sp]
 8002cb0:	aa03      	add	r2, sp, #12
 8002cb2:	f7ff fedf 	bl	8002a74 <_printf_common>
 8002cb6:	3001      	adds	r0, #1
 8002cb8:	d14c      	bne.n	8002d54 <_printf_i+0x200>
 8002cba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cbe:	b004      	add	sp, #16
 8002cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cc4:	4834      	ldr	r0, [pc, #208]	; (8002d98 <_printf_i+0x244>)
 8002cc6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002cca:	6829      	ldr	r1, [r5, #0]
 8002ccc:	6823      	ldr	r3, [r4, #0]
 8002cce:	f851 6b04 	ldr.w	r6, [r1], #4
 8002cd2:	6029      	str	r1, [r5, #0]
 8002cd4:	061d      	lsls	r5, r3, #24
 8002cd6:	d514      	bpl.n	8002d02 <_printf_i+0x1ae>
 8002cd8:	07df      	lsls	r7, r3, #31
 8002cda:	bf44      	itt	mi
 8002cdc:	f043 0320 	orrmi.w	r3, r3, #32
 8002ce0:	6023      	strmi	r3, [r4, #0]
 8002ce2:	b91e      	cbnz	r6, 8002cec <_printf_i+0x198>
 8002ce4:	6823      	ldr	r3, [r4, #0]
 8002ce6:	f023 0320 	bic.w	r3, r3, #32
 8002cea:	6023      	str	r3, [r4, #0]
 8002cec:	2310      	movs	r3, #16
 8002cee:	e7af      	b.n	8002c50 <_printf_i+0xfc>
 8002cf0:	6823      	ldr	r3, [r4, #0]
 8002cf2:	f043 0320 	orr.w	r3, r3, #32
 8002cf6:	6023      	str	r3, [r4, #0]
 8002cf8:	2378      	movs	r3, #120	; 0x78
 8002cfa:	4828      	ldr	r0, [pc, #160]	; (8002d9c <_printf_i+0x248>)
 8002cfc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d00:	e7e3      	b.n	8002cca <_printf_i+0x176>
 8002d02:	0659      	lsls	r1, r3, #25
 8002d04:	bf48      	it	mi
 8002d06:	b2b6      	uxthmi	r6, r6
 8002d08:	e7e6      	b.n	8002cd8 <_printf_i+0x184>
 8002d0a:	4615      	mov	r5, r2
 8002d0c:	e7bb      	b.n	8002c86 <_printf_i+0x132>
 8002d0e:	682b      	ldr	r3, [r5, #0]
 8002d10:	6826      	ldr	r6, [r4, #0]
 8002d12:	1d18      	adds	r0, r3, #4
 8002d14:	6961      	ldr	r1, [r4, #20]
 8002d16:	6028      	str	r0, [r5, #0]
 8002d18:	0635      	lsls	r5, r6, #24
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	d501      	bpl.n	8002d22 <_printf_i+0x1ce>
 8002d1e:	6019      	str	r1, [r3, #0]
 8002d20:	e002      	b.n	8002d28 <_printf_i+0x1d4>
 8002d22:	0670      	lsls	r0, r6, #25
 8002d24:	d5fb      	bpl.n	8002d1e <_printf_i+0x1ca>
 8002d26:	8019      	strh	r1, [r3, #0]
 8002d28:	2300      	movs	r3, #0
 8002d2a:	4615      	mov	r5, r2
 8002d2c:	6123      	str	r3, [r4, #16]
 8002d2e:	e7ba      	b.n	8002ca6 <_printf_i+0x152>
 8002d30:	682b      	ldr	r3, [r5, #0]
 8002d32:	2100      	movs	r1, #0
 8002d34:	1d1a      	adds	r2, r3, #4
 8002d36:	602a      	str	r2, [r5, #0]
 8002d38:	681d      	ldr	r5, [r3, #0]
 8002d3a:	6862      	ldr	r2, [r4, #4]
 8002d3c:	4628      	mov	r0, r5
 8002d3e:	f000 fa9b 	bl	8003278 <memchr>
 8002d42:	b108      	cbz	r0, 8002d48 <_printf_i+0x1f4>
 8002d44:	1b40      	subs	r0, r0, r5
 8002d46:	6060      	str	r0, [r4, #4]
 8002d48:	6863      	ldr	r3, [r4, #4]
 8002d4a:	6123      	str	r3, [r4, #16]
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d52:	e7a8      	b.n	8002ca6 <_printf_i+0x152>
 8002d54:	462a      	mov	r2, r5
 8002d56:	4649      	mov	r1, r9
 8002d58:	4640      	mov	r0, r8
 8002d5a:	6923      	ldr	r3, [r4, #16]
 8002d5c:	47d0      	blx	sl
 8002d5e:	3001      	adds	r0, #1
 8002d60:	d0ab      	beq.n	8002cba <_printf_i+0x166>
 8002d62:	6823      	ldr	r3, [r4, #0]
 8002d64:	079b      	lsls	r3, r3, #30
 8002d66:	d413      	bmi.n	8002d90 <_printf_i+0x23c>
 8002d68:	68e0      	ldr	r0, [r4, #12]
 8002d6a:	9b03      	ldr	r3, [sp, #12]
 8002d6c:	4298      	cmp	r0, r3
 8002d6e:	bfb8      	it	lt
 8002d70:	4618      	movlt	r0, r3
 8002d72:	e7a4      	b.n	8002cbe <_printf_i+0x16a>
 8002d74:	2301      	movs	r3, #1
 8002d76:	4632      	mov	r2, r6
 8002d78:	4649      	mov	r1, r9
 8002d7a:	4640      	mov	r0, r8
 8002d7c:	47d0      	blx	sl
 8002d7e:	3001      	adds	r0, #1
 8002d80:	d09b      	beq.n	8002cba <_printf_i+0x166>
 8002d82:	3501      	adds	r5, #1
 8002d84:	68e3      	ldr	r3, [r4, #12]
 8002d86:	9903      	ldr	r1, [sp, #12]
 8002d88:	1a5b      	subs	r3, r3, r1
 8002d8a:	42ab      	cmp	r3, r5
 8002d8c:	dcf2      	bgt.n	8002d74 <_printf_i+0x220>
 8002d8e:	e7eb      	b.n	8002d68 <_printf_i+0x214>
 8002d90:	2500      	movs	r5, #0
 8002d92:	f104 0619 	add.w	r6, r4, #25
 8002d96:	e7f5      	b.n	8002d84 <_printf_i+0x230>
 8002d98:	08003479 	.word	0x08003479
 8002d9c:	0800348a 	.word	0x0800348a

08002da0 <_sbrk_r>:
 8002da0:	b538      	push	{r3, r4, r5, lr}
 8002da2:	2300      	movs	r3, #0
 8002da4:	4d05      	ldr	r5, [pc, #20]	; (8002dbc <_sbrk_r+0x1c>)
 8002da6:	4604      	mov	r4, r0
 8002da8:	4608      	mov	r0, r1
 8002daa:	602b      	str	r3, [r5, #0]
 8002dac:	f7fd ff92 	bl	8000cd4 <_sbrk>
 8002db0:	1c43      	adds	r3, r0, #1
 8002db2:	d102      	bne.n	8002dba <_sbrk_r+0x1a>
 8002db4:	682b      	ldr	r3, [r5, #0]
 8002db6:	b103      	cbz	r3, 8002dba <_sbrk_r+0x1a>
 8002db8:	6023      	str	r3, [r4, #0]
 8002dba:	bd38      	pop	{r3, r4, r5, pc}
 8002dbc:	2000013c 	.word	0x2000013c

08002dc0 <__sread>:
 8002dc0:	b510      	push	{r4, lr}
 8002dc2:	460c      	mov	r4, r1
 8002dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dc8:	f000 fab8 	bl	800333c <_read_r>
 8002dcc:	2800      	cmp	r0, #0
 8002dce:	bfab      	itete	ge
 8002dd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002dd2:	89a3      	ldrhlt	r3, [r4, #12]
 8002dd4:	181b      	addge	r3, r3, r0
 8002dd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002dda:	bfac      	ite	ge
 8002ddc:	6563      	strge	r3, [r4, #84]	; 0x54
 8002dde:	81a3      	strhlt	r3, [r4, #12]
 8002de0:	bd10      	pop	{r4, pc}

08002de2 <__swrite>:
 8002de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002de6:	461f      	mov	r7, r3
 8002de8:	898b      	ldrh	r3, [r1, #12]
 8002dea:	4605      	mov	r5, r0
 8002dec:	05db      	lsls	r3, r3, #23
 8002dee:	460c      	mov	r4, r1
 8002df0:	4616      	mov	r6, r2
 8002df2:	d505      	bpl.n	8002e00 <__swrite+0x1e>
 8002df4:	2302      	movs	r3, #2
 8002df6:	2200      	movs	r2, #0
 8002df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dfc:	f000 f9c4 	bl	8003188 <_lseek_r>
 8002e00:	89a3      	ldrh	r3, [r4, #12]
 8002e02:	4632      	mov	r2, r6
 8002e04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e08:	81a3      	strh	r3, [r4, #12]
 8002e0a:	4628      	mov	r0, r5
 8002e0c:	463b      	mov	r3, r7
 8002e0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e16:	f000 b869 	b.w	8002eec <_write_r>

08002e1a <__sseek>:
 8002e1a:	b510      	push	{r4, lr}
 8002e1c:	460c      	mov	r4, r1
 8002e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e22:	f000 f9b1 	bl	8003188 <_lseek_r>
 8002e26:	1c43      	adds	r3, r0, #1
 8002e28:	89a3      	ldrh	r3, [r4, #12]
 8002e2a:	bf15      	itete	ne
 8002e2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8002e2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002e32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002e36:	81a3      	strheq	r3, [r4, #12]
 8002e38:	bf18      	it	ne
 8002e3a:	81a3      	strhne	r3, [r4, #12]
 8002e3c:	bd10      	pop	{r4, pc}

08002e3e <__sclose>:
 8002e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e42:	f000 b8d3 	b.w	8002fec <_close_r>
	...

08002e48 <__swbuf_r>:
 8002e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e4a:	460e      	mov	r6, r1
 8002e4c:	4614      	mov	r4, r2
 8002e4e:	4605      	mov	r5, r0
 8002e50:	b118      	cbz	r0, 8002e5a <__swbuf_r+0x12>
 8002e52:	6983      	ldr	r3, [r0, #24]
 8002e54:	b90b      	cbnz	r3, 8002e5a <__swbuf_r+0x12>
 8002e56:	f7ff fb81 	bl	800255c <__sinit>
 8002e5a:	4b21      	ldr	r3, [pc, #132]	; (8002ee0 <__swbuf_r+0x98>)
 8002e5c:	429c      	cmp	r4, r3
 8002e5e:	d12b      	bne.n	8002eb8 <__swbuf_r+0x70>
 8002e60:	686c      	ldr	r4, [r5, #4]
 8002e62:	69a3      	ldr	r3, [r4, #24]
 8002e64:	60a3      	str	r3, [r4, #8]
 8002e66:	89a3      	ldrh	r3, [r4, #12]
 8002e68:	071a      	lsls	r2, r3, #28
 8002e6a:	d52f      	bpl.n	8002ecc <__swbuf_r+0x84>
 8002e6c:	6923      	ldr	r3, [r4, #16]
 8002e6e:	b36b      	cbz	r3, 8002ecc <__swbuf_r+0x84>
 8002e70:	6923      	ldr	r3, [r4, #16]
 8002e72:	6820      	ldr	r0, [r4, #0]
 8002e74:	b2f6      	uxtb	r6, r6
 8002e76:	1ac0      	subs	r0, r0, r3
 8002e78:	6963      	ldr	r3, [r4, #20]
 8002e7a:	4637      	mov	r7, r6
 8002e7c:	4283      	cmp	r3, r0
 8002e7e:	dc04      	bgt.n	8002e8a <__swbuf_r+0x42>
 8002e80:	4621      	mov	r1, r4
 8002e82:	4628      	mov	r0, r5
 8002e84:	f000 f944 	bl	8003110 <_fflush_r>
 8002e88:	bb30      	cbnz	r0, 8002ed8 <__swbuf_r+0x90>
 8002e8a:	68a3      	ldr	r3, [r4, #8]
 8002e8c:	3001      	adds	r0, #1
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	60a3      	str	r3, [r4, #8]
 8002e92:	6823      	ldr	r3, [r4, #0]
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	6022      	str	r2, [r4, #0]
 8002e98:	701e      	strb	r6, [r3, #0]
 8002e9a:	6963      	ldr	r3, [r4, #20]
 8002e9c:	4283      	cmp	r3, r0
 8002e9e:	d004      	beq.n	8002eaa <__swbuf_r+0x62>
 8002ea0:	89a3      	ldrh	r3, [r4, #12]
 8002ea2:	07db      	lsls	r3, r3, #31
 8002ea4:	d506      	bpl.n	8002eb4 <__swbuf_r+0x6c>
 8002ea6:	2e0a      	cmp	r6, #10
 8002ea8:	d104      	bne.n	8002eb4 <__swbuf_r+0x6c>
 8002eaa:	4621      	mov	r1, r4
 8002eac:	4628      	mov	r0, r5
 8002eae:	f000 f92f 	bl	8003110 <_fflush_r>
 8002eb2:	b988      	cbnz	r0, 8002ed8 <__swbuf_r+0x90>
 8002eb4:	4638      	mov	r0, r7
 8002eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002eb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ee4 <__swbuf_r+0x9c>)
 8002eba:	429c      	cmp	r4, r3
 8002ebc:	d101      	bne.n	8002ec2 <__swbuf_r+0x7a>
 8002ebe:	68ac      	ldr	r4, [r5, #8]
 8002ec0:	e7cf      	b.n	8002e62 <__swbuf_r+0x1a>
 8002ec2:	4b09      	ldr	r3, [pc, #36]	; (8002ee8 <__swbuf_r+0xa0>)
 8002ec4:	429c      	cmp	r4, r3
 8002ec6:	bf08      	it	eq
 8002ec8:	68ec      	ldreq	r4, [r5, #12]
 8002eca:	e7ca      	b.n	8002e62 <__swbuf_r+0x1a>
 8002ecc:	4621      	mov	r1, r4
 8002ece:	4628      	mov	r0, r5
 8002ed0:	f000 f81e 	bl	8002f10 <__swsetup_r>
 8002ed4:	2800      	cmp	r0, #0
 8002ed6:	d0cb      	beq.n	8002e70 <__swbuf_r+0x28>
 8002ed8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002edc:	e7ea      	b.n	8002eb4 <__swbuf_r+0x6c>
 8002ede:	bf00      	nop
 8002ee0:	08003428 	.word	0x08003428
 8002ee4:	08003448 	.word	0x08003448
 8002ee8:	08003408 	.word	0x08003408

08002eec <_write_r>:
 8002eec:	b538      	push	{r3, r4, r5, lr}
 8002eee:	4604      	mov	r4, r0
 8002ef0:	4608      	mov	r0, r1
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	4d05      	ldr	r5, [pc, #20]	; (8002f0c <_write_r+0x20>)
 8002ef8:	602a      	str	r2, [r5, #0]
 8002efa:	461a      	mov	r2, r3
 8002efc:	f7fd f94c 	bl	8000198 <_write>
 8002f00:	1c43      	adds	r3, r0, #1
 8002f02:	d102      	bne.n	8002f0a <_write_r+0x1e>
 8002f04:	682b      	ldr	r3, [r5, #0]
 8002f06:	b103      	cbz	r3, 8002f0a <_write_r+0x1e>
 8002f08:	6023      	str	r3, [r4, #0]
 8002f0a:	bd38      	pop	{r3, r4, r5, pc}
 8002f0c:	2000013c 	.word	0x2000013c

08002f10 <__swsetup_r>:
 8002f10:	4b32      	ldr	r3, [pc, #200]	; (8002fdc <__swsetup_r+0xcc>)
 8002f12:	b570      	push	{r4, r5, r6, lr}
 8002f14:	681d      	ldr	r5, [r3, #0]
 8002f16:	4606      	mov	r6, r0
 8002f18:	460c      	mov	r4, r1
 8002f1a:	b125      	cbz	r5, 8002f26 <__swsetup_r+0x16>
 8002f1c:	69ab      	ldr	r3, [r5, #24]
 8002f1e:	b913      	cbnz	r3, 8002f26 <__swsetup_r+0x16>
 8002f20:	4628      	mov	r0, r5
 8002f22:	f7ff fb1b 	bl	800255c <__sinit>
 8002f26:	4b2e      	ldr	r3, [pc, #184]	; (8002fe0 <__swsetup_r+0xd0>)
 8002f28:	429c      	cmp	r4, r3
 8002f2a:	d10f      	bne.n	8002f4c <__swsetup_r+0x3c>
 8002f2c:	686c      	ldr	r4, [r5, #4]
 8002f2e:	89a3      	ldrh	r3, [r4, #12]
 8002f30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f34:	0719      	lsls	r1, r3, #28
 8002f36:	d42c      	bmi.n	8002f92 <__swsetup_r+0x82>
 8002f38:	06dd      	lsls	r5, r3, #27
 8002f3a:	d411      	bmi.n	8002f60 <__swsetup_r+0x50>
 8002f3c:	2309      	movs	r3, #9
 8002f3e:	6033      	str	r3, [r6, #0]
 8002f40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f48:	81a3      	strh	r3, [r4, #12]
 8002f4a:	e03e      	b.n	8002fca <__swsetup_r+0xba>
 8002f4c:	4b25      	ldr	r3, [pc, #148]	; (8002fe4 <__swsetup_r+0xd4>)
 8002f4e:	429c      	cmp	r4, r3
 8002f50:	d101      	bne.n	8002f56 <__swsetup_r+0x46>
 8002f52:	68ac      	ldr	r4, [r5, #8]
 8002f54:	e7eb      	b.n	8002f2e <__swsetup_r+0x1e>
 8002f56:	4b24      	ldr	r3, [pc, #144]	; (8002fe8 <__swsetup_r+0xd8>)
 8002f58:	429c      	cmp	r4, r3
 8002f5a:	bf08      	it	eq
 8002f5c:	68ec      	ldreq	r4, [r5, #12]
 8002f5e:	e7e6      	b.n	8002f2e <__swsetup_r+0x1e>
 8002f60:	0758      	lsls	r0, r3, #29
 8002f62:	d512      	bpl.n	8002f8a <__swsetup_r+0x7a>
 8002f64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f66:	b141      	cbz	r1, 8002f7a <__swsetup_r+0x6a>
 8002f68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f6c:	4299      	cmp	r1, r3
 8002f6e:	d002      	beq.n	8002f76 <__swsetup_r+0x66>
 8002f70:	4630      	mov	r0, r6
 8002f72:	f000 f99b 	bl	80032ac <_free_r>
 8002f76:	2300      	movs	r3, #0
 8002f78:	6363      	str	r3, [r4, #52]	; 0x34
 8002f7a:	89a3      	ldrh	r3, [r4, #12]
 8002f7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002f80:	81a3      	strh	r3, [r4, #12]
 8002f82:	2300      	movs	r3, #0
 8002f84:	6063      	str	r3, [r4, #4]
 8002f86:	6923      	ldr	r3, [r4, #16]
 8002f88:	6023      	str	r3, [r4, #0]
 8002f8a:	89a3      	ldrh	r3, [r4, #12]
 8002f8c:	f043 0308 	orr.w	r3, r3, #8
 8002f90:	81a3      	strh	r3, [r4, #12]
 8002f92:	6923      	ldr	r3, [r4, #16]
 8002f94:	b94b      	cbnz	r3, 8002faa <__swsetup_r+0x9a>
 8002f96:	89a3      	ldrh	r3, [r4, #12]
 8002f98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa0:	d003      	beq.n	8002faa <__swsetup_r+0x9a>
 8002fa2:	4621      	mov	r1, r4
 8002fa4:	4630      	mov	r0, r6
 8002fa6:	f000 f927 	bl	80031f8 <__smakebuf_r>
 8002faa:	89a0      	ldrh	r0, [r4, #12]
 8002fac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002fb0:	f010 0301 	ands.w	r3, r0, #1
 8002fb4:	d00a      	beq.n	8002fcc <__swsetup_r+0xbc>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60a3      	str	r3, [r4, #8]
 8002fba:	6963      	ldr	r3, [r4, #20]
 8002fbc:	425b      	negs	r3, r3
 8002fbe:	61a3      	str	r3, [r4, #24]
 8002fc0:	6923      	ldr	r3, [r4, #16]
 8002fc2:	b943      	cbnz	r3, 8002fd6 <__swsetup_r+0xc6>
 8002fc4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002fc8:	d1ba      	bne.n	8002f40 <__swsetup_r+0x30>
 8002fca:	bd70      	pop	{r4, r5, r6, pc}
 8002fcc:	0781      	lsls	r1, r0, #30
 8002fce:	bf58      	it	pl
 8002fd0:	6963      	ldrpl	r3, [r4, #20]
 8002fd2:	60a3      	str	r3, [r4, #8]
 8002fd4:	e7f4      	b.n	8002fc0 <__swsetup_r+0xb0>
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	e7f7      	b.n	8002fca <__swsetup_r+0xba>
 8002fda:	bf00      	nop
 8002fdc:	2000000c 	.word	0x2000000c
 8002fe0:	08003428 	.word	0x08003428
 8002fe4:	08003448 	.word	0x08003448
 8002fe8:	08003408 	.word	0x08003408

08002fec <_close_r>:
 8002fec:	b538      	push	{r3, r4, r5, lr}
 8002fee:	2300      	movs	r3, #0
 8002ff0:	4d05      	ldr	r5, [pc, #20]	; (8003008 <_close_r+0x1c>)
 8002ff2:	4604      	mov	r4, r0
 8002ff4:	4608      	mov	r0, r1
 8002ff6:	602b      	str	r3, [r5, #0]
 8002ff8:	f7fd fe3b 	bl	8000c72 <_close>
 8002ffc:	1c43      	adds	r3, r0, #1
 8002ffe:	d102      	bne.n	8003006 <_close_r+0x1a>
 8003000:	682b      	ldr	r3, [r5, #0]
 8003002:	b103      	cbz	r3, 8003006 <_close_r+0x1a>
 8003004:	6023      	str	r3, [r4, #0]
 8003006:	bd38      	pop	{r3, r4, r5, pc}
 8003008:	2000013c 	.word	0x2000013c

0800300c <__sflush_r>:
 800300c:	898a      	ldrh	r2, [r1, #12]
 800300e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003010:	4605      	mov	r5, r0
 8003012:	0710      	lsls	r0, r2, #28
 8003014:	460c      	mov	r4, r1
 8003016:	d457      	bmi.n	80030c8 <__sflush_r+0xbc>
 8003018:	684b      	ldr	r3, [r1, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	dc04      	bgt.n	8003028 <__sflush_r+0x1c>
 800301e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003020:	2b00      	cmp	r3, #0
 8003022:	dc01      	bgt.n	8003028 <__sflush_r+0x1c>
 8003024:	2000      	movs	r0, #0
 8003026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003028:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800302a:	2e00      	cmp	r6, #0
 800302c:	d0fa      	beq.n	8003024 <__sflush_r+0x18>
 800302e:	2300      	movs	r3, #0
 8003030:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003034:	682f      	ldr	r7, [r5, #0]
 8003036:	602b      	str	r3, [r5, #0]
 8003038:	d032      	beq.n	80030a0 <__sflush_r+0x94>
 800303a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800303c:	89a3      	ldrh	r3, [r4, #12]
 800303e:	075a      	lsls	r2, r3, #29
 8003040:	d505      	bpl.n	800304e <__sflush_r+0x42>
 8003042:	6863      	ldr	r3, [r4, #4]
 8003044:	1ac0      	subs	r0, r0, r3
 8003046:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003048:	b10b      	cbz	r3, 800304e <__sflush_r+0x42>
 800304a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800304c:	1ac0      	subs	r0, r0, r3
 800304e:	2300      	movs	r3, #0
 8003050:	4602      	mov	r2, r0
 8003052:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003054:	4628      	mov	r0, r5
 8003056:	6a21      	ldr	r1, [r4, #32]
 8003058:	47b0      	blx	r6
 800305a:	1c43      	adds	r3, r0, #1
 800305c:	89a3      	ldrh	r3, [r4, #12]
 800305e:	d106      	bne.n	800306e <__sflush_r+0x62>
 8003060:	6829      	ldr	r1, [r5, #0]
 8003062:	291d      	cmp	r1, #29
 8003064:	d82c      	bhi.n	80030c0 <__sflush_r+0xb4>
 8003066:	4a29      	ldr	r2, [pc, #164]	; (800310c <__sflush_r+0x100>)
 8003068:	40ca      	lsrs	r2, r1
 800306a:	07d6      	lsls	r6, r2, #31
 800306c:	d528      	bpl.n	80030c0 <__sflush_r+0xb4>
 800306e:	2200      	movs	r2, #0
 8003070:	6062      	str	r2, [r4, #4]
 8003072:	6922      	ldr	r2, [r4, #16]
 8003074:	04d9      	lsls	r1, r3, #19
 8003076:	6022      	str	r2, [r4, #0]
 8003078:	d504      	bpl.n	8003084 <__sflush_r+0x78>
 800307a:	1c42      	adds	r2, r0, #1
 800307c:	d101      	bne.n	8003082 <__sflush_r+0x76>
 800307e:	682b      	ldr	r3, [r5, #0]
 8003080:	b903      	cbnz	r3, 8003084 <__sflush_r+0x78>
 8003082:	6560      	str	r0, [r4, #84]	; 0x54
 8003084:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003086:	602f      	str	r7, [r5, #0]
 8003088:	2900      	cmp	r1, #0
 800308a:	d0cb      	beq.n	8003024 <__sflush_r+0x18>
 800308c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003090:	4299      	cmp	r1, r3
 8003092:	d002      	beq.n	800309a <__sflush_r+0x8e>
 8003094:	4628      	mov	r0, r5
 8003096:	f000 f909 	bl	80032ac <_free_r>
 800309a:	2000      	movs	r0, #0
 800309c:	6360      	str	r0, [r4, #52]	; 0x34
 800309e:	e7c2      	b.n	8003026 <__sflush_r+0x1a>
 80030a0:	6a21      	ldr	r1, [r4, #32]
 80030a2:	2301      	movs	r3, #1
 80030a4:	4628      	mov	r0, r5
 80030a6:	47b0      	blx	r6
 80030a8:	1c41      	adds	r1, r0, #1
 80030aa:	d1c7      	bne.n	800303c <__sflush_r+0x30>
 80030ac:	682b      	ldr	r3, [r5, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0c4      	beq.n	800303c <__sflush_r+0x30>
 80030b2:	2b1d      	cmp	r3, #29
 80030b4:	d001      	beq.n	80030ba <__sflush_r+0xae>
 80030b6:	2b16      	cmp	r3, #22
 80030b8:	d101      	bne.n	80030be <__sflush_r+0xb2>
 80030ba:	602f      	str	r7, [r5, #0]
 80030bc:	e7b2      	b.n	8003024 <__sflush_r+0x18>
 80030be:	89a3      	ldrh	r3, [r4, #12]
 80030c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030c4:	81a3      	strh	r3, [r4, #12]
 80030c6:	e7ae      	b.n	8003026 <__sflush_r+0x1a>
 80030c8:	690f      	ldr	r7, [r1, #16]
 80030ca:	2f00      	cmp	r7, #0
 80030cc:	d0aa      	beq.n	8003024 <__sflush_r+0x18>
 80030ce:	0793      	lsls	r3, r2, #30
 80030d0:	bf18      	it	ne
 80030d2:	2300      	movne	r3, #0
 80030d4:	680e      	ldr	r6, [r1, #0]
 80030d6:	bf08      	it	eq
 80030d8:	694b      	ldreq	r3, [r1, #20]
 80030da:	1bf6      	subs	r6, r6, r7
 80030dc:	600f      	str	r7, [r1, #0]
 80030de:	608b      	str	r3, [r1, #8]
 80030e0:	2e00      	cmp	r6, #0
 80030e2:	dd9f      	ble.n	8003024 <__sflush_r+0x18>
 80030e4:	4633      	mov	r3, r6
 80030e6:	463a      	mov	r2, r7
 80030e8:	4628      	mov	r0, r5
 80030ea:	6a21      	ldr	r1, [r4, #32]
 80030ec:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80030f0:	47e0      	blx	ip
 80030f2:	2800      	cmp	r0, #0
 80030f4:	dc06      	bgt.n	8003104 <__sflush_r+0xf8>
 80030f6:	89a3      	ldrh	r3, [r4, #12]
 80030f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003100:	81a3      	strh	r3, [r4, #12]
 8003102:	e790      	b.n	8003026 <__sflush_r+0x1a>
 8003104:	4407      	add	r7, r0
 8003106:	1a36      	subs	r6, r6, r0
 8003108:	e7ea      	b.n	80030e0 <__sflush_r+0xd4>
 800310a:	bf00      	nop
 800310c:	20400001 	.word	0x20400001

08003110 <_fflush_r>:
 8003110:	b538      	push	{r3, r4, r5, lr}
 8003112:	690b      	ldr	r3, [r1, #16]
 8003114:	4605      	mov	r5, r0
 8003116:	460c      	mov	r4, r1
 8003118:	b913      	cbnz	r3, 8003120 <_fflush_r+0x10>
 800311a:	2500      	movs	r5, #0
 800311c:	4628      	mov	r0, r5
 800311e:	bd38      	pop	{r3, r4, r5, pc}
 8003120:	b118      	cbz	r0, 800312a <_fflush_r+0x1a>
 8003122:	6983      	ldr	r3, [r0, #24]
 8003124:	b90b      	cbnz	r3, 800312a <_fflush_r+0x1a>
 8003126:	f7ff fa19 	bl	800255c <__sinit>
 800312a:	4b14      	ldr	r3, [pc, #80]	; (800317c <_fflush_r+0x6c>)
 800312c:	429c      	cmp	r4, r3
 800312e:	d11b      	bne.n	8003168 <_fflush_r+0x58>
 8003130:	686c      	ldr	r4, [r5, #4]
 8003132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0ef      	beq.n	800311a <_fflush_r+0xa>
 800313a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800313c:	07d0      	lsls	r0, r2, #31
 800313e:	d404      	bmi.n	800314a <_fflush_r+0x3a>
 8003140:	0599      	lsls	r1, r3, #22
 8003142:	d402      	bmi.n	800314a <_fflush_r+0x3a>
 8003144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003146:	f7ff faa7 	bl	8002698 <__retarget_lock_acquire_recursive>
 800314a:	4628      	mov	r0, r5
 800314c:	4621      	mov	r1, r4
 800314e:	f7ff ff5d 	bl	800300c <__sflush_r>
 8003152:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003154:	4605      	mov	r5, r0
 8003156:	07da      	lsls	r2, r3, #31
 8003158:	d4e0      	bmi.n	800311c <_fflush_r+0xc>
 800315a:	89a3      	ldrh	r3, [r4, #12]
 800315c:	059b      	lsls	r3, r3, #22
 800315e:	d4dd      	bmi.n	800311c <_fflush_r+0xc>
 8003160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003162:	f7ff fa9a 	bl	800269a <__retarget_lock_release_recursive>
 8003166:	e7d9      	b.n	800311c <_fflush_r+0xc>
 8003168:	4b05      	ldr	r3, [pc, #20]	; (8003180 <_fflush_r+0x70>)
 800316a:	429c      	cmp	r4, r3
 800316c:	d101      	bne.n	8003172 <_fflush_r+0x62>
 800316e:	68ac      	ldr	r4, [r5, #8]
 8003170:	e7df      	b.n	8003132 <_fflush_r+0x22>
 8003172:	4b04      	ldr	r3, [pc, #16]	; (8003184 <_fflush_r+0x74>)
 8003174:	429c      	cmp	r4, r3
 8003176:	bf08      	it	eq
 8003178:	68ec      	ldreq	r4, [r5, #12]
 800317a:	e7da      	b.n	8003132 <_fflush_r+0x22>
 800317c:	08003428 	.word	0x08003428
 8003180:	08003448 	.word	0x08003448
 8003184:	08003408 	.word	0x08003408

08003188 <_lseek_r>:
 8003188:	b538      	push	{r3, r4, r5, lr}
 800318a:	4604      	mov	r4, r0
 800318c:	4608      	mov	r0, r1
 800318e:	4611      	mov	r1, r2
 8003190:	2200      	movs	r2, #0
 8003192:	4d05      	ldr	r5, [pc, #20]	; (80031a8 <_lseek_r+0x20>)
 8003194:	602a      	str	r2, [r5, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	f7fd fd8f 	bl	8000cba <_lseek>
 800319c:	1c43      	adds	r3, r0, #1
 800319e:	d102      	bne.n	80031a6 <_lseek_r+0x1e>
 80031a0:	682b      	ldr	r3, [r5, #0]
 80031a2:	b103      	cbz	r3, 80031a6 <_lseek_r+0x1e>
 80031a4:	6023      	str	r3, [r4, #0]
 80031a6:	bd38      	pop	{r3, r4, r5, pc}
 80031a8:	2000013c 	.word	0x2000013c

080031ac <__swhatbuf_r>:
 80031ac:	b570      	push	{r4, r5, r6, lr}
 80031ae:	460e      	mov	r6, r1
 80031b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031b4:	4614      	mov	r4, r2
 80031b6:	2900      	cmp	r1, #0
 80031b8:	461d      	mov	r5, r3
 80031ba:	b096      	sub	sp, #88	; 0x58
 80031bc:	da08      	bge.n	80031d0 <__swhatbuf_r+0x24>
 80031be:	2200      	movs	r2, #0
 80031c0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80031c4:	602a      	str	r2, [r5, #0]
 80031c6:	061a      	lsls	r2, r3, #24
 80031c8:	d410      	bmi.n	80031ec <__swhatbuf_r+0x40>
 80031ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031ce:	e00e      	b.n	80031ee <__swhatbuf_r+0x42>
 80031d0:	466a      	mov	r2, sp
 80031d2:	f000 f8c5 	bl	8003360 <_fstat_r>
 80031d6:	2800      	cmp	r0, #0
 80031d8:	dbf1      	blt.n	80031be <__swhatbuf_r+0x12>
 80031da:	9a01      	ldr	r2, [sp, #4]
 80031dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80031e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80031e4:	425a      	negs	r2, r3
 80031e6:	415a      	adcs	r2, r3
 80031e8:	602a      	str	r2, [r5, #0]
 80031ea:	e7ee      	b.n	80031ca <__swhatbuf_r+0x1e>
 80031ec:	2340      	movs	r3, #64	; 0x40
 80031ee:	2000      	movs	r0, #0
 80031f0:	6023      	str	r3, [r4, #0]
 80031f2:	b016      	add	sp, #88	; 0x58
 80031f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080031f8 <__smakebuf_r>:
 80031f8:	898b      	ldrh	r3, [r1, #12]
 80031fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80031fc:	079d      	lsls	r5, r3, #30
 80031fe:	4606      	mov	r6, r0
 8003200:	460c      	mov	r4, r1
 8003202:	d507      	bpl.n	8003214 <__smakebuf_r+0x1c>
 8003204:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003208:	6023      	str	r3, [r4, #0]
 800320a:	6123      	str	r3, [r4, #16]
 800320c:	2301      	movs	r3, #1
 800320e:	6163      	str	r3, [r4, #20]
 8003210:	b002      	add	sp, #8
 8003212:	bd70      	pop	{r4, r5, r6, pc}
 8003214:	466a      	mov	r2, sp
 8003216:	ab01      	add	r3, sp, #4
 8003218:	f7ff ffc8 	bl	80031ac <__swhatbuf_r>
 800321c:	9900      	ldr	r1, [sp, #0]
 800321e:	4605      	mov	r5, r0
 8003220:	4630      	mov	r0, r6
 8003222:	f7ff fa5b 	bl	80026dc <_malloc_r>
 8003226:	b948      	cbnz	r0, 800323c <__smakebuf_r+0x44>
 8003228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800322c:	059a      	lsls	r2, r3, #22
 800322e:	d4ef      	bmi.n	8003210 <__smakebuf_r+0x18>
 8003230:	f023 0303 	bic.w	r3, r3, #3
 8003234:	f043 0302 	orr.w	r3, r3, #2
 8003238:	81a3      	strh	r3, [r4, #12]
 800323a:	e7e3      	b.n	8003204 <__smakebuf_r+0xc>
 800323c:	4b0d      	ldr	r3, [pc, #52]	; (8003274 <__smakebuf_r+0x7c>)
 800323e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003240:	89a3      	ldrh	r3, [r4, #12]
 8003242:	6020      	str	r0, [r4, #0]
 8003244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003248:	81a3      	strh	r3, [r4, #12]
 800324a:	9b00      	ldr	r3, [sp, #0]
 800324c:	6120      	str	r0, [r4, #16]
 800324e:	6163      	str	r3, [r4, #20]
 8003250:	9b01      	ldr	r3, [sp, #4]
 8003252:	b15b      	cbz	r3, 800326c <__smakebuf_r+0x74>
 8003254:	4630      	mov	r0, r6
 8003256:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800325a:	f000 f893 	bl	8003384 <_isatty_r>
 800325e:	b128      	cbz	r0, 800326c <__smakebuf_r+0x74>
 8003260:	89a3      	ldrh	r3, [r4, #12]
 8003262:	f023 0303 	bic.w	r3, r3, #3
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	81a3      	strh	r3, [r4, #12]
 800326c:	89a0      	ldrh	r0, [r4, #12]
 800326e:	4305      	orrs	r5, r0
 8003270:	81a5      	strh	r5, [r4, #12]
 8003272:	e7cd      	b.n	8003210 <__smakebuf_r+0x18>
 8003274:	080024f5 	.word	0x080024f5

08003278 <memchr>:
 8003278:	4603      	mov	r3, r0
 800327a:	b510      	push	{r4, lr}
 800327c:	b2c9      	uxtb	r1, r1
 800327e:	4402      	add	r2, r0
 8003280:	4293      	cmp	r3, r2
 8003282:	4618      	mov	r0, r3
 8003284:	d101      	bne.n	800328a <memchr+0x12>
 8003286:	2000      	movs	r0, #0
 8003288:	e003      	b.n	8003292 <memchr+0x1a>
 800328a:	7804      	ldrb	r4, [r0, #0]
 800328c:	3301      	adds	r3, #1
 800328e:	428c      	cmp	r4, r1
 8003290:	d1f6      	bne.n	8003280 <memchr+0x8>
 8003292:	bd10      	pop	{r4, pc}

08003294 <__malloc_lock>:
 8003294:	4801      	ldr	r0, [pc, #4]	; (800329c <__malloc_lock+0x8>)
 8003296:	f7ff b9ff 	b.w	8002698 <__retarget_lock_acquire_recursive>
 800329a:	bf00      	nop
 800329c:	20000130 	.word	0x20000130

080032a0 <__malloc_unlock>:
 80032a0:	4801      	ldr	r0, [pc, #4]	; (80032a8 <__malloc_unlock+0x8>)
 80032a2:	f7ff b9fa 	b.w	800269a <__retarget_lock_release_recursive>
 80032a6:	bf00      	nop
 80032a8:	20000130 	.word	0x20000130

080032ac <_free_r>:
 80032ac:	b538      	push	{r3, r4, r5, lr}
 80032ae:	4605      	mov	r5, r0
 80032b0:	2900      	cmp	r1, #0
 80032b2:	d040      	beq.n	8003336 <_free_r+0x8a>
 80032b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032b8:	1f0c      	subs	r4, r1, #4
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	bfb8      	it	lt
 80032be:	18e4      	addlt	r4, r4, r3
 80032c0:	f7ff ffe8 	bl	8003294 <__malloc_lock>
 80032c4:	4a1c      	ldr	r2, [pc, #112]	; (8003338 <_free_r+0x8c>)
 80032c6:	6813      	ldr	r3, [r2, #0]
 80032c8:	b933      	cbnz	r3, 80032d8 <_free_r+0x2c>
 80032ca:	6063      	str	r3, [r4, #4]
 80032cc:	6014      	str	r4, [r2, #0]
 80032ce:	4628      	mov	r0, r5
 80032d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032d4:	f7ff bfe4 	b.w	80032a0 <__malloc_unlock>
 80032d8:	42a3      	cmp	r3, r4
 80032da:	d908      	bls.n	80032ee <_free_r+0x42>
 80032dc:	6820      	ldr	r0, [r4, #0]
 80032de:	1821      	adds	r1, r4, r0
 80032e0:	428b      	cmp	r3, r1
 80032e2:	bf01      	itttt	eq
 80032e4:	6819      	ldreq	r1, [r3, #0]
 80032e6:	685b      	ldreq	r3, [r3, #4]
 80032e8:	1809      	addeq	r1, r1, r0
 80032ea:	6021      	streq	r1, [r4, #0]
 80032ec:	e7ed      	b.n	80032ca <_free_r+0x1e>
 80032ee:	461a      	mov	r2, r3
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	b10b      	cbz	r3, 80032f8 <_free_r+0x4c>
 80032f4:	42a3      	cmp	r3, r4
 80032f6:	d9fa      	bls.n	80032ee <_free_r+0x42>
 80032f8:	6811      	ldr	r1, [r2, #0]
 80032fa:	1850      	adds	r0, r2, r1
 80032fc:	42a0      	cmp	r0, r4
 80032fe:	d10b      	bne.n	8003318 <_free_r+0x6c>
 8003300:	6820      	ldr	r0, [r4, #0]
 8003302:	4401      	add	r1, r0
 8003304:	1850      	adds	r0, r2, r1
 8003306:	4283      	cmp	r3, r0
 8003308:	6011      	str	r1, [r2, #0]
 800330a:	d1e0      	bne.n	80032ce <_free_r+0x22>
 800330c:	6818      	ldr	r0, [r3, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	4401      	add	r1, r0
 8003312:	6011      	str	r1, [r2, #0]
 8003314:	6053      	str	r3, [r2, #4]
 8003316:	e7da      	b.n	80032ce <_free_r+0x22>
 8003318:	d902      	bls.n	8003320 <_free_r+0x74>
 800331a:	230c      	movs	r3, #12
 800331c:	602b      	str	r3, [r5, #0]
 800331e:	e7d6      	b.n	80032ce <_free_r+0x22>
 8003320:	6820      	ldr	r0, [r4, #0]
 8003322:	1821      	adds	r1, r4, r0
 8003324:	428b      	cmp	r3, r1
 8003326:	bf01      	itttt	eq
 8003328:	6819      	ldreq	r1, [r3, #0]
 800332a:	685b      	ldreq	r3, [r3, #4]
 800332c:	1809      	addeq	r1, r1, r0
 800332e:	6021      	streq	r1, [r4, #0]
 8003330:	6063      	str	r3, [r4, #4]
 8003332:	6054      	str	r4, [r2, #4]
 8003334:	e7cb      	b.n	80032ce <_free_r+0x22>
 8003336:	bd38      	pop	{r3, r4, r5, pc}
 8003338:	20000134 	.word	0x20000134

0800333c <_read_r>:
 800333c:	b538      	push	{r3, r4, r5, lr}
 800333e:	4604      	mov	r4, r0
 8003340:	4608      	mov	r0, r1
 8003342:	4611      	mov	r1, r2
 8003344:	2200      	movs	r2, #0
 8003346:	4d05      	ldr	r5, [pc, #20]	; (800335c <_read_r+0x20>)
 8003348:	602a      	str	r2, [r5, #0]
 800334a:	461a      	mov	r2, r3
 800334c:	f7fd fc74 	bl	8000c38 <_read>
 8003350:	1c43      	adds	r3, r0, #1
 8003352:	d102      	bne.n	800335a <_read_r+0x1e>
 8003354:	682b      	ldr	r3, [r5, #0]
 8003356:	b103      	cbz	r3, 800335a <_read_r+0x1e>
 8003358:	6023      	str	r3, [r4, #0]
 800335a:	bd38      	pop	{r3, r4, r5, pc}
 800335c:	2000013c 	.word	0x2000013c

08003360 <_fstat_r>:
 8003360:	b538      	push	{r3, r4, r5, lr}
 8003362:	2300      	movs	r3, #0
 8003364:	4d06      	ldr	r5, [pc, #24]	; (8003380 <_fstat_r+0x20>)
 8003366:	4604      	mov	r4, r0
 8003368:	4608      	mov	r0, r1
 800336a:	4611      	mov	r1, r2
 800336c:	602b      	str	r3, [r5, #0]
 800336e:	f7fd fc8b 	bl	8000c88 <_fstat>
 8003372:	1c43      	adds	r3, r0, #1
 8003374:	d102      	bne.n	800337c <_fstat_r+0x1c>
 8003376:	682b      	ldr	r3, [r5, #0]
 8003378:	b103      	cbz	r3, 800337c <_fstat_r+0x1c>
 800337a:	6023      	str	r3, [r4, #0]
 800337c:	bd38      	pop	{r3, r4, r5, pc}
 800337e:	bf00      	nop
 8003380:	2000013c 	.word	0x2000013c

08003384 <_isatty_r>:
 8003384:	b538      	push	{r3, r4, r5, lr}
 8003386:	2300      	movs	r3, #0
 8003388:	4d05      	ldr	r5, [pc, #20]	; (80033a0 <_isatty_r+0x1c>)
 800338a:	4604      	mov	r4, r0
 800338c:	4608      	mov	r0, r1
 800338e:	602b      	str	r3, [r5, #0]
 8003390:	f7fd fc89 	bl	8000ca6 <_isatty>
 8003394:	1c43      	adds	r3, r0, #1
 8003396:	d102      	bne.n	800339e <_isatty_r+0x1a>
 8003398:	682b      	ldr	r3, [r5, #0]
 800339a:	b103      	cbz	r3, 800339e <_isatty_r+0x1a>
 800339c:	6023      	str	r3, [r4, #0]
 800339e:	bd38      	pop	{r3, r4, r5, pc}
 80033a0:	2000013c 	.word	0x2000013c

080033a4 <_init>:
 80033a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033a6:	bf00      	nop
 80033a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033aa:	bc08      	pop	{r3}
 80033ac:	469e      	mov	lr, r3
 80033ae:	4770      	bx	lr

080033b0 <_fini>:
 80033b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b2:	bf00      	nop
 80033b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033b6:	bc08      	pop	{r3}
 80033b8:	469e      	mov	lr, r3
 80033ba:	4770      	bx	lr
