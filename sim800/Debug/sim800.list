
sim800.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001748  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001854  08001854  00011854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800187c  0800187c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800187c  0800187c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800187c  0800187c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800187c  0800187c  0001187c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001880  08001880  00011880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001890  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001890  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000448e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013e6  00000000  00000000  000244c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000598  00000000  00000000  000258b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004f0  00000000  00000000  00025e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001704d  00000000  00000000  00026338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005a0f  00000000  00000000  0003d385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081a81  00000000  00000000  00042d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c4815  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000149c  00000000  00000000  000c4868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800183c 	.word	0x0800183c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800183c 	.word	0x0800183c

0800014c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000150:	4b04      	ldr	r3, [pc, #16]	; (8000164 <__NVIC_GetPriorityGrouping+0x18>)
 8000152:	68db      	ldr	r3, [r3, #12]
 8000154:	0a1b      	lsrs	r3, r3, #8
 8000156:	f003 0307 	and.w	r3, r3, #7
}
 800015a:	4618      	mov	r0, r3
 800015c:	46bd      	mov	sp, r7
 800015e:	bc80      	pop	{r7}
 8000160:	4770      	bx	lr
 8000162:	bf00      	nop
 8000164:	e000ed00 	.word	0xe000ed00

08000168 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000168:	b480      	push	{r7}
 800016a:	b083      	sub	sp, #12
 800016c:	af00      	add	r7, sp, #0
 800016e:	4603      	mov	r3, r0
 8000170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000176:	2b00      	cmp	r3, #0
 8000178:	db0b      	blt.n	8000192 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800017a:	79fb      	ldrb	r3, [r7, #7]
 800017c:	f003 021f 	and.w	r2, r3, #31
 8000180:	4906      	ldr	r1, [pc, #24]	; (800019c <__NVIC_EnableIRQ+0x34>)
 8000182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000186:	095b      	lsrs	r3, r3, #5
 8000188:	2001      	movs	r0, #1
 800018a:	fa00 f202 	lsl.w	r2, r0, r2
 800018e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	e000e100 	.word	0xe000e100

080001a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001a0:	b480      	push	{r7}
 80001a2:	b083      	sub	sp, #12
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	4603      	mov	r3, r0
 80001a8:	6039      	str	r1, [r7, #0]
 80001aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	db0a      	blt.n	80001ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001b4:	683b      	ldr	r3, [r7, #0]
 80001b6:	b2da      	uxtb	r2, r3
 80001b8:	490c      	ldr	r1, [pc, #48]	; (80001ec <__NVIC_SetPriority+0x4c>)
 80001ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001be:	0112      	lsls	r2, r2, #4
 80001c0:	b2d2      	uxtb	r2, r2
 80001c2:	440b      	add	r3, r1
 80001c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001c8:	e00a      	b.n	80001e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ca:	683b      	ldr	r3, [r7, #0]
 80001cc:	b2da      	uxtb	r2, r3
 80001ce:	4908      	ldr	r1, [pc, #32]	; (80001f0 <__NVIC_SetPriority+0x50>)
 80001d0:	79fb      	ldrb	r3, [r7, #7]
 80001d2:	f003 030f 	and.w	r3, r3, #15
 80001d6:	3b04      	subs	r3, #4
 80001d8:	0112      	lsls	r2, r2, #4
 80001da:	b2d2      	uxtb	r2, r2
 80001dc:	440b      	add	r3, r1
 80001de:	761a      	strb	r2, [r3, #24]
}
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bc80      	pop	{r7}
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	e000e100 	.word	0xe000e100
 80001f0:	e000ed00 	.word	0xe000ed00

080001f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80001f4:	b480      	push	{r7}
 80001f6:	b089      	sub	sp, #36	; 0x24
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	60f8      	str	r0, [r7, #12]
 80001fc:	60b9      	str	r1, [r7, #8]
 80001fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	f003 0307 	and.w	r3, r3, #7
 8000206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000208:	69fb      	ldr	r3, [r7, #28]
 800020a:	f1c3 0307 	rsb	r3, r3, #7
 800020e:	2b04      	cmp	r3, #4
 8000210:	bf28      	it	cs
 8000212:	2304      	movcs	r3, #4
 8000214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000216:	69fb      	ldr	r3, [r7, #28]
 8000218:	3304      	adds	r3, #4
 800021a:	2b06      	cmp	r3, #6
 800021c:	d902      	bls.n	8000224 <NVIC_EncodePriority+0x30>
 800021e:	69fb      	ldr	r3, [r7, #28]
 8000220:	3b03      	subs	r3, #3
 8000222:	e000      	b.n	8000226 <NVIC_EncodePriority+0x32>
 8000224:	2300      	movs	r3, #0
 8000226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000228:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800022c:	69bb      	ldr	r3, [r7, #24]
 800022e:	fa02 f303 	lsl.w	r3, r2, r3
 8000232:	43da      	mvns	r2, r3
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	401a      	ands	r2, r3
 8000238:	697b      	ldr	r3, [r7, #20]
 800023a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800023c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000240:	697b      	ldr	r3, [r7, #20]
 8000242:	fa01 f303 	lsl.w	r3, r1, r3
 8000246:	43d9      	mvns	r1, r3
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800024c:	4313      	orrs	r3, r2
         );
}
 800024e:	4618      	mov	r0, r3
 8000250:	3724      	adds	r7, #36	; 0x24
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr

08000258 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	68db      	ldr	r3, [r3, #12]
 8000264:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	60da      	str	r2, [r3, #12]
}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	bc80      	pop	{r7}
 8000274:	4770      	bx	lr

08000276 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000276:	b480      	push	{r7}
 8000278:	b083      	sub	sp, #12
 800027a:	af00      	add	r7, sp, #0
 800027c:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	691b      	ldr	r3, [r3, #16]
 8000282:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	695b      	ldr	r3, [r3, #20]
 800028e:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	615a      	str	r2, [r3, #20]
}
 8000296:	bf00      	nop
 8000298:	370c      	adds	r7, #12
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr

080002a0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80002a8:	4b08      	ldr	r3, [pc, #32]	; (80002cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80002aa:	69da      	ldr	r2, [r3, #28]
 80002ac:	4907      	ldr	r1, [pc, #28]	; (80002cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	4313      	orrs	r3, r2
 80002b2:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80002b4:	4b05      	ldr	r3, [pc, #20]	; (80002cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80002b6:	69da      	ldr	r2, [r3, #28]
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	4013      	ands	r3, r2
 80002bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002be:	68fb      	ldr	r3, [r7, #12]
}
 80002c0:	bf00      	nop
 80002c2:	3714      	adds	r7, #20
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bc80      	pop	{r7}
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40021000 	.word	0x40021000

080002d0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b085      	sub	sp, #20
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80002d8:	4b08      	ldr	r3, [pc, #32]	; (80002fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80002da:	699a      	ldr	r2, [r3, #24]
 80002dc:	4907      	ldr	r1, [pc, #28]	; (80002fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	4313      	orrs	r3, r2
 80002e2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80002e4:	4b05      	ldr	r3, [pc, #20]	; (80002fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80002e6:	699a      	ldr	r2, [r3, #24]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	4013      	ands	r3, r2
 80002ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002ee:	68fb      	ldr	r3, [r7, #12]
}
 80002f0:	bf00      	nop
 80002f2:	3714      	adds	r7, #20
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bc80      	pop	{r7}
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	40021000 	.word	0x40021000

08000300 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	0a1b      	lsrs	r3, r3, #8
 800030e:	b29a      	uxth	r2, r3
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	615a      	str	r2, [r3, #20]
}
 8000314:	bf00      	nop
 8000316:	370c      	adds	r7, #12
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr

0800031e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800031e:	b580      	push	{r7, lr}
 8000320:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000322:	f000 fa0b 	bl	800073c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000326:	f000 f807 	bl	8000338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800032a:	f000 f907 	bl	800053c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800032e:	f000 f845 	bl	80003bc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000332:	f000 f89d 	bl	8000470 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000336:	e7fe      	b.n	8000336 <main+0x18>

08000338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b090      	sub	sp, #64	; 0x40
 800033c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033e:	f107 0318 	add.w	r3, r7, #24
 8000342:	2228      	movs	r2, #40	; 0x28
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f001 fa70 	bl	800182c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
 8000358:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800035a:	2302      	movs	r3, #2
 800035c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800035e:	2301      	movs	r3, #1
 8000360:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000362:	2310      	movs	r3, #16
 8000364:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000366:	2302      	movs	r3, #2
 8000368:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800036a:	2300      	movs	r3, #0
 800036c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800036e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000372:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000374:	f107 0318 	add.w	r3, r7, #24
 8000378:	4618      	mov	r0, r3
 800037a:	f000 fb25 	bl	80009c8 <HAL_RCC_OscConfig>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000384:	f000 f948 	bl	8000618 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000388:	230f      	movs	r3, #15
 800038a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800038c:	2302      	movs	r3, #2
 800038e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000390:	2300      	movs	r3, #0
 8000392:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000398:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2102      	movs	r1, #2
 80003a2:	4618      	mov	r0, r3
 80003a4:	f000 fd90 	bl	8000ec8 <HAL_RCC_ClockConfig>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80003ae:	f000 f933 	bl	8000618 <Error_Handler>
  }
}
 80003b2:	bf00      	nop
 80003b4:	3740      	adds	r7, #64	; 0x40
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
	...

080003bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b08c      	sub	sp, #48	; 0x30
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80003c2:	f107 0314 	add.w	r3, r7, #20
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]
 80003d0:	611a      	str	r2, [r3, #16]
 80003d2:	615a      	str	r2, [r3, #20]
 80003d4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d6:	463b      	mov	r3, r7
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	609a      	str	r2, [r3, #8]
 80003e0:	60da      	str	r2, [r3, #12]
 80003e2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80003e4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80003e8:	f7ff ff72 	bl	80002d0 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80003ec:	2004      	movs	r0, #4
 80003ee:	f7ff ff6f 	bl	80002d0 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80003f2:	4b1a      	ldr	r3, [pc, #104]	; (800045c <MX_USART1_UART_Init+0xa0>)
 80003f4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80003f6:	2309      	movs	r3, #9
 80003f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80003fa:	2303      	movs	r3, #3
 80003fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80003fe:	2300      	movs	r3, #0
 8000400:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000402:	463b      	mov	r3, r7
 8000404:	4619      	mov	r1, r3
 8000406:	4816      	ldr	r0, [pc, #88]	; (8000460 <MX_USART1_UART_Init+0xa4>)
 8000408:	f000 ff7e 	bl	8001308 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800040c:	4b15      	ldr	r3, [pc, #84]	; (8000464 <MX_USART1_UART_Init+0xa8>)
 800040e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000410:	2304      	movs	r3, #4
 8000412:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000414:	463b      	mov	r3, r7
 8000416:	4619      	mov	r1, r3
 8000418:	4811      	ldr	r0, [pc, #68]	; (8000460 <MX_USART1_UART_Init+0xa4>)
 800041a:	f000 ff75 	bl	8001308 <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 500000;
 800041e:	4b12      	ldr	r3, [pc, #72]	; (8000468 <MX_USART1_UART_Init+0xac>)
 8000420:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000422:	2300      	movs	r3, #0
 8000424:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000426:	2300      	movs	r3, #0
 8000428:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800042a:	2300      	movs	r3, #0
 800042c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800042e:	230c      	movs	r3, #12
 8000430:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000432:	2300      	movs	r3, #0
 8000434:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000436:	2300      	movs	r3, #0
 8000438:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 800043a:	f107 0314 	add.w	r3, r7, #20
 800043e:	4619      	mov	r1, r3
 8000440:	480a      	ldr	r0, [pc, #40]	; (800046c <MX_USART1_UART_Init+0xb0>)
 8000442:	f001 f96f 	bl	8001724 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8000446:	4809      	ldr	r0, [pc, #36]	; (800046c <MX_USART1_UART_Init+0xb0>)
 8000448:	f7ff ff15 	bl	8000276 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 800044c:	4807      	ldr	r0, [pc, #28]	; (800046c <MX_USART1_UART_Init+0xb0>)
 800044e:	f7ff ff03 	bl	8000258 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000452:	bf00      	nop
 8000454:	3730      	adds	r7, #48	; 0x30
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	04020002 	.word	0x04020002
 8000460:	40010800 	.word	0x40010800
 8000464:	04040004 	.word	0x04040004
 8000468:	0007a120 	.word	0x0007a120
 800046c:	40013800 	.word	0x40013800

08000470 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b08c      	sub	sp, #48	; 0x30
 8000474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000476:	f107 0314 	add.w	r3, r7, #20
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	60da      	str	r2, [r3, #12]
 8000484:	611a      	str	r2, [r3, #16]
 8000486:	615a      	str	r2, [r3, #20]
 8000488:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048a:	463b      	mov	r3, r7
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]
 8000494:	60da      	str	r2, [r3, #12]
 8000496:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000498:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800049c:	f7ff ff00 	bl	80002a0 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80004a0:	2004      	movs	r0, #4
 80004a2:	f7ff ff15 	bl	80002d0 <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80004a6:	f240 4304 	movw	r3, #1028	; 0x404
 80004aa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80004ac:	2309      	movs	r3, #9
 80004ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80004b0:	2303      	movs	r3, #3
 80004b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80004b4:	2300      	movs	r3, #0
 80004b6:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b8:	463b      	mov	r3, r7
 80004ba:	4619      	mov	r1, r3
 80004bc:	481d      	ldr	r0, [pc, #116]	; (8000534 <MX_USART2_UART_Init+0xc4>)
 80004be:	f000 ff23 	bl	8001308 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80004c2:	f640 0308 	movw	r3, #2056	; 0x808
 80004c6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80004c8:	2304      	movs	r3, #4
 80004ca:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004cc:	463b      	mov	r3, r7
 80004ce:	4619      	mov	r1, r3
 80004d0:	4818      	ldr	r0, [pc, #96]	; (8000534 <MX_USART2_UART_Init+0xc4>)
 80004d2:	f000 ff19 	bl	8001308 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80004d6:	f7ff fe39 	bl	800014c <__NVIC_GetPriorityGrouping>
 80004da:	4603      	mov	r3, r0
 80004dc:	2200      	movs	r2, #0
 80004de:	2100      	movs	r1, #0
 80004e0:	4618      	mov	r0, r3
 80004e2:	f7ff fe87 	bl	80001f4 <NVIC_EncodePriority>
 80004e6:	4603      	mov	r3, r0
 80004e8:	4619      	mov	r1, r3
 80004ea:	2026      	movs	r0, #38	; 0x26
 80004ec:	f7ff fe58 	bl	80001a0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80004f0:	2026      	movs	r0, #38	; 0x26
 80004f2:	f7ff fe39 	bl	8000168 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80004f6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80004fa:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80004fc:	2300      	movs	r3, #0
 80004fe:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000500:	2300      	movs	r3, #0
 8000502:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000504:	2300      	movs	r3, #0
 8000506:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000508:	230c      	movs	r3, #12
 800050a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800050c:	2300      	movs	r3, #0
 800050e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000510:	2300      	movs	r3, #0
 8000512:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 8000514:	f107 0314 	add.w	r3, r7, #20
 8000518:	4619      	mov	r1, r3
 800051a:	4807      	ldr	r0, [pc, #28]	; (8000538 <MX_USART2_UART_Init+0xc8>)
 800051c:	f001 f902 	bl	8001724 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000520:	4805      	ldr	r0, [pc, #20]	; (8000538 <MX_USART2_UART_Init+0xc8>)
 8000522:	f7ff fea8 	bl	8000276 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000526:	4804      	ldr	r0, [pc, #16]	; (8000538 <MX_USART2_UART_Init+0xc8>)
 8000528:	f7ff fe96 	bl	8000258 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800052c:	bf00      	nop
 800052e:	3730      	adds	r7, #48	; 0x30
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40010800 	.word	0x40010800
 8000538:	40004400 	.word	0x40004400

0800053c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8000550:	2010      	movs	r0, #16
 8000552:	f7ff febd 	bl	80002d0 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000556:	2004      	movs	r0, #4
 8000558:	f7ff feba 	bl	80002d0 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800055c:	2008      	movs	r0, #8
 800055e:	f7ff feb7 	bl	80002d0 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 8000562:	4926      	ldr	r1, [pc, #152]	; (80005fc <MX_GPIO_Init+0xc0>)
 8000564:	4826      	ldr	r0, [pc, #152]	; (8000600 <MX_GPIO_Init+0xc4>)
 8000566:	f7ff fecb 	bl	8000300 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SIM800_RST_GPIO_Port, SIM800_RST_Pin);
 800056a:	4926      	ldr	r1, [pc, #152]	; (8000604 <MX_GPIO_Init+0xc8>)
 800056c:	4826      	ldr	r0, [pc, #152]	; (8000608 <MX_GPIO_Init+0xcc>)
 800056e:	f7ff fec7 	bl	8000300 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED2_GPIO_Port, LED2_Pin);
 8000572:	4926      	ldr	r1, [pc, #152]	; (800060c <MX_GPIO_Init+0xd0>)
 8000574:	4826      	ldr	r0, [pc, #152]	; (8000610 <MX_GPIO_Init+0xd4>)
 8000576:	f7ff fec3 	bl	8000300 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 800057a:	4b20      	ldr	r3, [pc, #128]	; (80005fc <MX_GPIO_Init+0xc0>)
 800057c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800057e:	2301      	movs	r3, #1
 8000580:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000582:	2302      	movs	r3, #2
 8000584:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000586:	2300      	movs	r3, #0
 8000588:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	4619      	mov	r1, r3
 800058e:	481c      	ldr	r0, [pc, #112]	; (8000600 <MX_GPIO_Init+0xc4>)
 8000590:	f000 feba 	bl	8001308 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SETUP_Pin;
 8000594:	f240 4304 	movw	r3, #1028	; 0x404
 8000598:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 800059a:	2304      	movs	r3, #4
 800059c:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(SETUP_GPIO_Port, &GPIO_InitStruct);
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	4619      	mov	r1, r3
 80005a2:	481b      	ldr	r0, [pc, #108]	; (8000610 <MX_GPIO_Init+0xd4>)
 80005a4:	f000 feb0 	bl	8001308 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ALARM_Pin;
 80005a8:	4b1a      	ldr	r3, [pc, #104]	; (8000614 <MX_GPIO_Init+0xd8>)
 80005aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80005ac:	2308      	movs	r3, #8
 80005ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80005b0:	2301      	movs	r3, #1
 80005b2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ALARM_GPIO_Port, &GPIO_InitStruct);
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	4619      	mov	r1, r3
 80005b8:	4815      	ldr	r0, [pc, #84]	; (8000610 <MX_GPIO_Init+0xd4>)
 80005ba:	f000 fea5 	bl	8001308 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SIM800_RST_Pin;
 80005be:	4b11      	ldr	r3, [pc, #68]	; (8000604 <MX_GPIO_Init+0xc8>)
 80005c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005c2:	2301      	movs	r3, #1
 80005c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80005c6:	2302      	movs	r3, #2
 80005c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80005ca:	2304      	movs	r3, #4
 80005cc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SIM800_RST_GPIO_Port, &GPIO_InitStruct);
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	4619      	mov	r1, r3
 80005d2:	480d      	ldr	r0, [pc, #52]	; (8000608 <MX_GPIO_Init+0xcc>)
 80005d4:	f000 fe98 	bl	8001308 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED2_Pin;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <MX_GPIO_Init+0xd0>)
 80005da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005dc:	2301      	movs	r3, #1
 80005de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80005e0:	2302      	movs	r3, #2
 80005e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	4619      	mov	r1, r3
 80005ec:	4808      	ldr	r0, [pc, #32]	; (8000610 <MX_GPIO_Init+0xd4>)
 80005ee:	f000 fe8b 	bl	8001308 <LL_GPIO_Init>

}
 80005f2:	bf00      	nop
 80005f4:	3718      	adds	r7, #24
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	04200020 	.word	0x04200020
 8000600:	40011000 	.word	0x40011000
 8000604:	04010001 	.word	0x04010001
 8000608:	40010800 	.word	0x40010800
 800060c:	04020002 	.word	0x04020002
 8000610:	40010c00 	.word	0x40010c00
 8000614:	04080008 	.word	0x04080008

08000618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800061c:	b672      	cpsid	i
}
 800061e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000620:	e7fe      	b.n	8000620 <Error_Handler+0x8>
	...

08000624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <HAL_MspInit+0x5c>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	4a14      	ldr	r2, [pc, #80]	; (8000680 <HAL_MspInit+0x5c>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6193      	str	r3, [r2, #24]
 8000636:	4b12      	ldr	r3, [pc, #72]	; (8000680 <HAL_MspInit+0x5c>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <HAL_MspInit+0x5c>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	4a0e      	ldr	r2, [pc, #56]	; (8000680 <HAL_MspInit+0x5c>)
 8000648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064c:	61d3      	str	r3, [r2, #28]
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <HAL_MspInit+0x5c>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800065a:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <HAL_MspInit+0x60>)
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	4a04      	ldr	r2, [pc, #16]	; (8000684 <HAL_MspInit+0x60>)
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000676:	bf00      	nop
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	40021000 	.word	0x40021000
 8000684:	40010000 	.word	0x40010000

08000688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800068c:	e7fe      	b.n	800068c <NMI_Handler+0x4>

0800068e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000692:	e7fe      	b.n	8000692 <HardFault_Handler+0x4>

08000694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000698:	e7fe      	b.n	8000698 <MemManage_Handler+0x4>

0800069a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800069e:	e7fe      	b.n	800069e <BusFault_Handler+0x4>

080006a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <UsageFault_Handler+0x4>

080006a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr

080006b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr

080006be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr

080006ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ce:	f000 f87b 	bl	80007c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr

080006e2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
	...

080006f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f0:	480c      	ldr	r0, [pc, #48]	; (8000724 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006f2:	490d      	ldr	r1, [pc, #52]	; (8000728 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006f4:	4a0d      	ldr	r2, [pc, #52]	; (800072c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f8:	e002      	b.n	8000700 <LoopCopyDataInit>

080006fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006fe:	3304      	adds	r3, #4

08000700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000704:	d3f9      	bcc.n	80006fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000706:	4a0a      	ldr	r2, [pc, #40]	; (8000730 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000708:	4c0a      	ldr	r4, [pc, #40]	; (8000734 <LoopFillZerobss+0x22>)
  movs r3, #0
 800070a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800070c:	e001      	b.n	8000712 <LoopFillZerobss>

0800070e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800070e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000710:	3204      	adds	r2, #4

08000712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000714:	d3fb      	bcc.n	800070e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000716:	f7ff ffe4 	bl	80006e2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800071a:	f001 f863 	bl	80017e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800071e:	f7ff fdfe 	bl	800031e <main>
  bx lr
 8000722:	4770      	bx	lr
  ldr r0, =_sdata
 8000724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000728:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800072c:	08001884 	.word	0x08001884
  ldr r2, =_sbss
 8000730:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000734:	2000002c 	.word	0x2000002c

08000738 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000738:	e7fe      	b.n	8000738 <ADC1_2_IRQHandler>
	...

0800073c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000740:	4b08      	ldr	r3, [pc, #32]	; (8000764 <HAL_Init+0x28>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a07      	ldr	r2, [pc, #28]	; (8000764 <HAL_Init+0x28>)
 8000746:	f043 0310 	orr.w	r3, r3, #16
 800074a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800074c:	2003      	movs	r0, #3
 800074e:	f000 f907 	bl	8000960 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000752:	2000      	movs	r0, #0
 8000754:	f000 f808 	bl	8000768 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000758:	f7ff ff64 	bl	8000624 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40022000 	.word	0x40022000

08000768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <HAL_InitTick+0x54>)
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <HAL_InitTick+0x58>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	4619      	mov	r1, r3
 800077a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800077e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000782:	fbb2 f3f3 	udiv	r3, r2, r3
 8000786:	4618      	mov	r0, r3
 8000788:	f000 f911 	bl	80009ae <HAL_SYSTICK_Config>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000792:	2301      	movs	r3, #1
 8000794:	e00e      	b.n	80007b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2b0f      	cmp	r3, #15
 800079a:	d80a      	bhi.n	80007b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800079c:	2200      	movs	r2, #0
 800079e:	6879      	ldr	r1, [r7, #4]
 80007a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007a4:	f000 f8e7 	bl	8000976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007a8:	4a06      	ldr	r2, [pc, #24]	; (80007c4 <HAL_InitTick+0x5c>)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007ae:	2300      	movs	r3, #0
 80007b0:	e000      	b.n	80007b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007b2:	2301      	movs	r3, #1
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000000 	.word	0x20000000
 80007c0:	20000008 	.word	0x20000008
 80007c4:	20000004 	.word	0x20000004

080007c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <HAL_IncTick+0x1c>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	461a      	mov	r2, r3
 80007d2:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <HAL_IncTick+0x20>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4413      	add	r3, r2
 80007d8:	4a03      	ldr	r2, [pc, #12]	; (80007e8 <HAL_IncTick+0x20>)
 80007da:	6013      	str	r3, [r2, #0]
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr
 80007e4:	20000008 	.word	0x20000008
 80007e8:	20000028 	.word	0x20000028

080007ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  return uwTick;
 80007f0:	4b02      	ldr	r3, [pc, #8]	; (80007fc <HAL_GetTick+0x10>)
 80007f2:	681b      	ldr	r3, [r3, #0]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr
 80007fc:	20000028 	.word	0x20000028

08000800 <__NVIC_SetPriorityGrouping>:
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f003 0307 	and.w	r3, r3, #7
 800080e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <__NVIC_SetPriorityGrouping+0x44>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800081c:	4013      	ands	r3, r2
 800081e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800082c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000832:	4a04      	ldr	r2, [pc, #16]	; (8000844 <__NVIC_SetPriorityGrouping+0x44>)
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	60d3      	str	r3, [r2, #12]
}
 8000838:	bf00      	nop
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <__NVIC_GetPriorityGrouping>:
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <__NVIC_GetPriorityGrouping+0x18>)
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	0a1b      	lsrs	r3, r3, #8
 8000852:	f003 0307 	and.w	r3, r3, #7
}
 8000856:	4618      	mov	r0, r3
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <__NVIC_SetPriority>:
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	6039      	str	r1, [r7, #0]
 800086e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000874:	2b00      	cmp	r3, #0
 8000876:	db0a      	blt.n	800088e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	b2da      	uxtb	r2, r3
 800087c:	490c      	ldr	r1, [pc, #48]	; (80008b0 <__NVIC_SetPriority+0x4c>)
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	0112      	lsls	r2, r2, #4
 8000884:	b2d2      	uxtb	r2, r2
 8000886:	440b      	add	r3, r1
 8000888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800088c:	e00a      	b.n	80008a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4908      	ldr	r1, [pc, #32]	; (80008b4 <__NVIC_SetPriority+0x50>)
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 030f 	and.w	r3, r3, #15
 800089a:	3b04      	subs	r3, #4
 800089c:	0112      	lsls	r2, r2, #4
 800089e:	b2d2      	uxtb	r2, r2
 80008a0:	440b      	add	r3, r1
 80008a2:	761a      	strb	r2, [r3, #24]
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	e000e100 	.word	0xe000e100
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <NVIC_EncodePriority>:
{
 80008b8:	b480      	push	{r7}
 80008ba:	b089      	sub	sp, #36	; 0x24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	f003 0307 	and.w	r3, r3, #7
 80008ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	f1c3 0307 	rsb	r3, r3, #7
 80008d2:	2b04      	cmp	r3, #4
 80008d4:	bf28      	it	cs
 80008d6:	2304      	movcs	r3, #4
 80008d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	3304      	adds	r3, #4
 80008de:	2b06      	cmp	r3, #6
 80008e0:	d902      	bls.n	80008e8 <NVIC_EncodePriority+0x30>
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	3b03      	subs	r3, #3
 80008e6:	e000      	b.n	80008ea <NVIC_EncodePriority+0x32>
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	43da      	mvns	r2, r3
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	401a      	ands	r2, r3
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000900:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	fa01 f303 	lsl.w	r3, r1, r3
 800090a:	43d9      	mvns	r1, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000910:	4313      	orrs	r3, r2
}
 8000912:	4618      	mov	r0, r3
 8000914:	3724      	adds	r7, #36	; 0x24
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr

0800091c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	3b01      	subs	r3, #1
 8000928:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800092c:	d301      	bcc.n	8000932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800092e:	2301      	movs	r3, #1
 8000930:	e00f      	b.n	8000952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000932:	4a0a      	ldr	r2, [pc, #40]	; (800095c <SysTick_Config+0x40>)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3b01      	subs	r3, #1
 8000938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800093a:	210f      	movs	r1, #15
 800093c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000940:	f7ff ff90 	bl	8000864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <SysTick_Config+0x40>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800094a:	4b04      	ldr	r3, [pc, #16]	; (800095c <SysTick_Config+0x40>)
 800094c:	2207      	movs	r2, #7
 800094e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000950:	2300      	movs	r3, #0
}
 8000952:	4618      	mov	r0, r3
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	e000e010 	.word	0xe000e010

08000960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f7ff ff49 	bl	8000800 <__NVIC_SetPriorityGrouping>
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000976:	b580      	push	{r7, lr}
 8000978:	b086      	sub	sp, #24
 800097a:	af00      	add	r7, sp, #0
 800097c:	4603      	mov	r3, r0
 800097e:	60b9      	str	r1, [r7, #8]
 8000980:	607a      	str	r2, [r7, #4]
 8000982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000988:	f7ff ff5e 	bl	8000848 <__NVIC_GetPriorityGrouping>
 800098c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	68b9      	ldr	r1, [r7, #8]
 8000992:	6978      	ldr	r0, [r7, #20]
 8000994:	f7ff ff90 	bl	80008b8 <NVIC_EncodePriority>
 8000998:	4602      	mov	r2, r0
 800099a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800099e:	4611      	mov	r1, r2
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff ff5f 	bl	8000864 <__NVIC_SetPriority>
}
 80009a6:	bf00      	nop
 80009a8:	3718      	adds	r7, #24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b082      	sub	sp, #8
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f7ff ffb0 	bl	800091c <SysTick_Config>
 80009bc:	4603      	mov	r3, r0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d101      	bne.n	80009da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	e26c      	b.n	8000eb4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	f000 8087 	beq.w	8000af6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80009e8:	4b92      	ldr	r3, [pc, #584]	; (8000c34 <HAL_RCC_OscConfig+0x26c>)
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	f003 030c 	and.w	r3, r3, #12
 80009f0:	2b04      	cmp	r3, #4
 80009f2:	d00c      	beq.n	8000a0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80009f4:	4b8f      	ldr	r3, [pc, #572]	; (8000c34 <HAL_RCC_OscConfig+0x26c>)
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	f003 030c 	and.w	r3, r3, #12
 80009fc:	2b08      	cmp	r3, #8
 80009fe:	d112      	bne.n	8000a26 <HAL_RCC_OscConfig+0x5e>
 8000a00:	4b8c      	ldr	r3, [pc, #560]	; (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a0c:	d10b      	bne.n	8000a26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a0e:	4b89      	ldr	r3, [pc, #548]	; (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d06c      	beq.n	8000af4 <HAL_RCC_OscConfig+0x12c>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d168      	bne.n	8000af4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e246      	b.n	8000eb4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a2e:	d106      	bne.n	8000a3e <HAL_RCC_OscConfig+0x76>
 8000a30:	4b80      	ldr	r3, [pc, #512]	; (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a7f      	ldr	r2, [pc, #508]	; (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a3a:	6013      	str	r3, [r2, #0]
 8000a3c:	e02e      	b.n	8000a9c <HAL_RCC_OscConfig+0xd4>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d10c      	bne.n	8000a60 <HAL_RCC_OscConfig+0x98>
 8000a46:	4b7b      	ldr	r3, [pc, #492]	; (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a7a      	ldr	r2, [pc, #488]	; (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a50:	6013      	str	r3, [r2, #0]
 8000a52:	4b78      	ldr	r3, [pc, #480]	; (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a77      	ldr	r2, [pc, #476]	; (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000a58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a5c:	6013      	str	r3, [r2, #0]
 8000a5e:	e01d      	b.n	8000a9c <HAL_RCC_OscConfig+0xd4>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a68:	d10c      	bne.n	8000a84 <HAL_RCC_OscConfig+0xbc>
 8000a6a:	4b72      	ldr	r3, [pc, #456]	; (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a71      	ldr	r2, [pc, #452]	; (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a74:	6013      	str	r3, [r2, #0]
 8000a76:	4b6f      	ldr	r3, [pc, #444]	; (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a6e      	ldr	r2, [pc, #440]	; (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a80:	6013      	str	r3, [r2, #0]
 8000a82:	e00b      	b.n	8000a9c <HAL_RCC_OscConfig+0xd4>
 8000a84:	4b6b      	ldr	r3, [pc, #428]	; (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a6a      	ldr	r2, [pc, #424]	; (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a8e:	6013      	str	r3, [r2, #0]
 8000a90:	4b68      	ldr	r3, [pc, #416]	; (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a67      	ldr	r2, [pc, #412]	; (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d013      	beq.n	8000acc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000aa4:	f7ff fea2 	bl	80007ec <HAL_GetTick>
 8000aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000aaa:	e008      	b.n	8000abe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000aac:	f7ff fe9e 	bl	80007ec <HAL_GetTick>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	2b64      	cmp	r3, #100	; 0x64
 8000ab8:	d901      	bls.n	8000abe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000aba:	2303      	movs	r3, #3
 8000abc:	e1fa      	b.n	8000eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000abe:	4b5d      	ldr	r3, [pc, #372]	; (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d0f0      	beq.n	8000aac <HAL_RCC_OscConfig+0xe4>
 8000aca:	e014      	b.n	8000af6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000acc:	f7ff fe8e 	bl	80007ec <HAL_GetTick>
 8000ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ad2:	e008      	b.n	8000ae6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ad4:	f7ff fe8a 	bl	80007ec <HAL_GetTick>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	2b64      	cmp	r3, #100	; 0x64
 8000ae0:	d901      	bls.n	8000ae6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	e1e6      	b.n	8000eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ae6:	4b53      	ldr	r3, [pc, #332]	; (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d1f0      	bne.n	8000ad4 <HAL_RCC_OscConfig+0x10c>
 8000af2:	e000      	b.n	8000af6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d063      	beq.n	8000bca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b02:	4b4c      	ldr	r3, [pc, #304]	; (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f003 030c 	and.w	r3, r3, #12
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d00b      	beq.n	8000b26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b0e:	4b49      	ldr	r3, [pc, #292]	; (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f003 030c 	and.w	r3, r3, #12
 8000b16:	2b08      	cmp	r3, #8
 8000b18:	d11c      	bne.n	8000b54 <HAL_RCC_OscConfig+0x18c>
 8000b1a:	4b46      	ldr	r3, [pc, #280]	; (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d116      	bne.n	8000b54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b26:	4b43      	ldr	r3, [pc, #268]	; (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d005      	beq.n	8000b3e <HAL_RCC_OscConfig+0x176>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	691b      	ldr	r3, [r3, #16]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d001      	beq.n	8000b3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e1ba      	b.n	8000eb4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b3e:	4b3d      	ldr	r3, [pc, #244]	; (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	00db      	lsls	r3, r3, #3
 8000b4c:	4939      	ldr	r1, [pc, #228]	; (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b52:	e03a      	b.n	8000bca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	691b      	ldr	r3, [r3, #16]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d020      	beq.n	8000b9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b5c:	4b36      	ldr	r3, [pc, #216]	; (8000c38 <HAL_RCC_OscConfig+0x270>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b62:	f7ff fe43 	bl	80007ec <HAL_GetTick>
 8000b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b68:	e008      	b.n	8000b7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b6a:	f7ff fe3f 	bl	80007ec <HAL_GetTick>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d901      	bls.n	8000b7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	e19b      	b.n	8000eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b7c:	4b2d      	ldr	r3, [pc, #180]	; (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f003 0302 	and.w	r3, r3, #2
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d0f0      	beq.n	8000b6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b88:	4b2a      	ldr	r3, [pc, #168]	; (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	695b      	ldr	r3, [r3, #20]
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	4927      	ldr	r1, [pc, #156]	; (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	600b      	str	r3, [r1, #0]
 8000b9c:	e015      	b.n	8000bca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b9e:	4b26      	ldr	r3, [pc, #152]	; (8000c38 <HAL_RCC_OscConfig+0x270>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ba4:	f7ff fe22 	bl	80007ec <HAL_GetTick>
 8000ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000baa:	e008      	b.n	8000bbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bac:	f7ff fe1e 	bl	80007ec <HAL_GetTick>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	d901      	bls.n	8000bbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	e17a      	b.n	8000eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bbe:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d1f0      	bne.n	8000bac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f003 0308 	and.w	r3, r3, #8
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d03a      	beq.n	8000c4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	699b      	ldr	r3, [r3, #24]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d019      	beq.n	8000c12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000bde:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <HAL_RCC_OscConfig+0x274>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000be4:	f7ff fe02 	bl	80007ec <HAL_GetTick>
 8000be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bea:	e008      	b.n	8000bfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bec:	f7ff fdfe 	bl	80007ec <HAL_GetTick>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d901      	bls.n	8000bfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	e15a      	b.n	8000eb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d0f0      	beq.n	8000bec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	f000 faa6 	bl	800115c <RCC_Delay>
 8000c10:	e01c      	b.n	8000c4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c12:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <HAL_RCC_OscConfig+0x274>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c18:	f7ff fde8 	bl	80007ec <HAL_GetTick>
 8000c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c1e:	e00f      	b.n	8000c40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c20:	f7ff fde4 	bl	80007ec <HAL_GetTick>
 8000c24:	4602      	mov	r2, r0
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d908      	bls.n	8000c40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	e140      	b.n	8000eb4 <HAL_RCC_OscConfig+0x4ec>
 8000c32:	bf00      	nop
 8000c34:	40021000 	.word	0x40021000
 8000c38:	42420000 	.word	0x42420000
 8000c3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c40:	4b9e      	ldr	r3, [pc, #632]	; (8000ebc <HAL_RCC_OscConfig+0x4f4>)
 8000c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c44:	f003 0302 	and.w	r3, r3, #2
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d1e9      	bne.n	8000c20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f003 0304 	and.w	r3, r3, #4
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	f000 80a6 	beq.w	8000da6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c5e:	4b97      	ldr	r3, [pc, #604]	; (8000ebc <HAL_RCC_OscConfig+0x4f4>)
 8000c60:	69db      	ldr	r3, [r3, #28]
 8000c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d10d      	bne.n	8000c86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c6a:	4b94      	ldr	r3, [pc, #592]	; (8000ebc <HAL_RCC_OscConfig+0x4f4>)
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	4a93      	ldr	r2, [pc, #588]	; (8000ebc <HAL_RCC_OscConfig+0x4f4>)
 8000c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c74:	61d3      	str	r3, [r2, #28]
 8000c76:	4b91      	ldr	r3, [pc, #580]	; (8000ebc <HAL_RCC_OscConfig+0x4f4>)
 8000c78:	69db      	ldr	r3, [r3, #28]
 8000c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000c82:	2301      	movs	r3, #1
 8000c84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c86:	4b8e      	ldr	r3, [pc, #568]	; (8000ec0 <HAL_RCC_OscConfig+0x4f8>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d118      	bne.n	8000cc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c92:	4b8b      	ldr	r3, [pc, #556]	; (8000ec0 <HAL_RCC_OscConfig+0x4f8>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a8a      	ldr	r2, [pc, #552]	; (8000ec0 <HAL_RCC_OscConfig+0x4f8>)
 8000c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000c9e:	f7ff fda5 	bl	80007ec <HAL_GetTick>
 8000ca2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ca4:	e008      	b.n	8000cb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ca6:	f7ff fda1 	bl	80007ec <HAL_GetTick>
 8000caa:	4602      	mov	r2, r0
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	1ad3      	subs	r3, r2, r3
 8000cb0:	2b64      	cmp	r3, #100	; 0x64
 8000cb2:	d901      	bls.n	8000cb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	e0fd      	b.n	8000eb4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cb8:	4b81      	ldr	r3, [pc, #516]	; (8000ec0 <HAL_RCC_OscConfig+0x4f8>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d0f0      	beq.n	8000ca6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d106      	bne.n	8000cda <HAL_RCC_OscConfig+0x312>
 8000ccc:	4b7b      	ldr	r3, [pc, #492]	; (8000ebc <HAL_RCC_OscConfig+0x4f4>)
 8000cce:	6a1b      	ldr	r3, [r3, #32]
 8000cd0:	4a7a      	ldr	r2, [pc, #488]	; (8000ebc <HAL_RCC_OscConfig+0x4f4>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	6213      	str	r3, [r2, #32]
 8000cd8:	e02d      	b.n	8000d36 <HAL_RCC_OscConfig+0x36e>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d10c      	bne.n	8000cfc <HAL_RCC_OscConfig+0x334>
 8000ce2:	4b76      	ldr	r3, [pc, #472]	; (8000ebc <HAL_RCC_OscConfig+0x4f4>)
 8000ce4:	6a1b      	ldr	r3, [r3, #32]
 8000ce6:	4a75      	ldr	r2, [pc, #468]	; (8000ebc <HAL_RCC_OscConfig+0x4f4>)
 8000ce8:	f023 0301 	bic.w	r3, r3, #1
 8000cec:	6213      	str	r3, [r2, #32]
 8000cee:	4b73      	ldr	r3, [pc, #460]	; (8000ebc <HAL_RCC_OscConfig+0x4f4>)
 8000cf0:	6a1b      	ldr	r3, [r3, #32]
 8000cf2:	4a72      	ldr	r2, [pc, #456]	; (8000ebc <HAL_RCC_OscConfig+0x4f4>)
 8000cf4:	f023 0304 	bic.w	r3, r3, #4
 8000cf8:	6213      	str	r3, [r2, #32]
 8000cfa:	e01c      	b.n	8000d36 <HAL_RCC_OscConfig+0x36e>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	2b05      	cmp	r3, #5
 8000d02:	d10c      	bne.n	8000d1e <HAL_RCC_OscConfig+0x356>
 8000d04:	4b6d      	ldr	r3, [pc, #436]	; (8000ebc <HAL_RCC_OscConfig+0x4f4>)
 8000d06:	6a1b      	ldr	r3, [r3, #32]
 8000d08:	4a6c      	ldr	r2, [pc, #432]	; (8000ebc <HAL_RCC_OscConfig+0x4f4>)
 8000d0a:	f043 0304 	orr.w	r3, r3, #4
 8000d0e:	6213      	str	r3, [r2, #32]
 8000d10:	4b6a      	ldr	r3, [pc, #424]	; (8000ebc <HAL_RCC_OscConfig+0x4f4>)
 8000d12:	6a1b      	ldr	r3, [r3, #32]
 8000d14:	4a69      	ldr	r2, [pc, #420]	; (8000ebc <HAL_RCC_OscConfig+0x4f4>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	6213      	str	r3, [r2, #32]
 8000d1c:	e00b      	b.n	8000d36 <HAL_RCC_OscConfig+0x36e>
 8000d1e:	4b67      	ldr	r3, [pc, #412]	; (8000ebc <HAL_RCC_OscConfig+0x4f4>)
 8000d20:	6a1b      	ldr	r3, [r3, #32]
 8000d22:	4a66      	ldr	r2, [pc, #408]	; (8000ebc <HAL_RCC_OscConfig+0x4f4>)
 8000d24:	f023 0301 	bic.w	r3, r3, #1
 8000d28:	6213      	str	r3, [r2, #32]
 8000d2a:	4b64      	ldr	r3, [pc, #400]	; (8000ebc <HAL_RCC_OscConfig+0x4f4>)
 8000d2c:	6a1b      	ldr	r3, [r3, #32]
 8000d2e:	4a63      	ldr	r2, [pc, #396]	; (8000ebc <HAL_RCC_OscConfig+0x4f4>)
 8000d30:	f023 0304 	bic.w	r3, r3, #4
 8000d34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d015      	beq.n	8000d6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d3e:	f7ff fd55 	bl	80007ec <HAL_GetTick>
 8000d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d44:	e00a      	b.n	8000d5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d46:	f7ff fd51 	bl	80007ec <HAL_GetTick>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d901      	bls.n	8000d5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	e0ab      	b.n	8000eb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d5c:	4b57      	ldr	r3, [pc, #348]	; (8000ebc <HAL_RCC_OscConfig+0x4f4>)
 8000d5e:	6a1b      	ldr	r3, [r3, #32]
 8000d60:	f003 0302 	and.w	r3, r3, #2
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d0ee      	beq.n	8000d46 <HAL_RCC_OscConfig+0x37e>
 8000d68:	e014      	b.n	8000d94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d6a:	f7ff fd3f 	bl	80007ec <HAL_GetTick>
 8000d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d70:	e00a      	b.n	8000d88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d72:	f7ff fd3b 	bl	80007ec <HAL_GetTick>
 8000d76:	4602      	mov	r2, r0
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d901      	bls.n	8000d88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000d84:	2303      	movs	r3, #3
 8000d86:	e095      	b.n	8000eb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d88:	4b4c      	ldr	r3, [pc, #304]	; (8000ebc <HAL_RCC_OscConfig+0x4f4>)
 8000d8a:	6a1b      	ldr	r3, [r3, #32]
 8000d8c:	f003 0302 	and.w	r3, r3, #2
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d1ee      	bne.n	8000d72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000d94:	7dfb      	ldrb	r3, [r7, #23]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d105      	bne.n	8000da6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d9a:	4b48      	ldr	r3, [pc, #288]	; (8000ebc <HAL_RCC_OscConfig+0x4f4>)
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	4a47      	ldr	r2, [pc, #284]	; (8000ebc <HAL_RCC_OscConfig+0x4f4>)
 8000da0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000da4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	69db      	ldr	r3, [r3, #28]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f000 8081 	beq.w	8000eb2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000db0:	4b42      	ldr	r3, [pc, #264]	; (8000ebc <HAL_RCC_OscConfig+0x4f4>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 030c 	and.w	r3, r3, #12
 8000db8:	2b08      	cmp	r3, #8
 8000dba:	d061      	beq.n	8000e80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	69db      	ldr	r3, [r3, #28]
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d146      	bne.n	8000e52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000dc4:	4b3f      	ldr	r3, [pc, #252]	; (8000ec4 <HAL_RCC_OscConfig+0x4fc>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dca:	f7ff fd0f 	bl	80007ec <HAL_GetTick>
 8000dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dd0:	e008      	b.n	8000de4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000dd2:	f7ff fd0b 	bl	80007ec <HAL_GetTick>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	1ad3      	subs	r3, r2, r3
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d901      	bls.n	8000de4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000de0:	2303      	movs	r3, #3
 8000de2:	e067      	b.n	8000eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000de4:	4b35      	ldr	r3, [pc, #212]	; (8000ebc <HAL_RCC_OscConfig+0x4f4>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1f0      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6a1b      	ldr	r3, [r3, #32]
 8000df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000df8:	d108      	bne.n	8000e0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000dfa:	4b30      	ldr	r3, [pc, #192]	; (8000ebc <HAL_RCC_OscConfig+0x4f4>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	492d      	ldr	r1, [pc, #180]	; (8000ebc <HAL_RCC_OscConfig+0x4f4>)
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e0c:	4b2b      	ldr	r3, [pc, #172]	; (8000ebc <HAL_RCC_OscConfig+0x4f4>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6a19      	ldr	r1, [r3, #32]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1c:	430b      	orrs	r3, r1
 8000e1e:	4927      	ldr	r1, [pc, #156]	; (8000ebc <HAL_RCC_OscConfig+0x4f4>)
 8000e20:	4313      	orrs	r3, r2
 8000e22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e24:	4b27      	ldr	r3, [pc, #156]	; (8000ec4 <HAL_RCC_OscConfig+0x4fc>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e2a:	f7ff fcdf 	bl	80007ec <HAL_GetTick>
 8000e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e30:	e008      	b.n	8000e44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e32:	f7ff fcdb 	bl	80007ec <HAL_GetTick>
 8000e36:	4602      	mov	r2, r0
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d901      	bls.n	8000e44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000e40:	2303      	movs	r3, #3
 8000e42:	e037      	b.n	8000eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e44:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <HAL_RCC_OscConfig+0x4f4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d0f0      	beq.n	8000e32 <HAL_RCC_OscConfig+0x46a>
 8000e50:	e02f      	b.n	8000eb2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e52:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <HAL_RCC_OscConfig+0x4fc>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e58:	f7ff fcc8 	bl	80007ec <HAL_GetTick>
 8000e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e5e:	e008      	b.n	8000e72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e60:	f7ff fcc4 	bl	80007ec <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d901      	bls.n	8000e72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e020      	b.n	8000eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e72:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_RCC_OscConfig+0x4f4>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d1f0      	bne.n	8000e60 <HAL_RCC_OscConfig+0x498>
 8000e7e:	e018      	b.n	8000eb2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	69db      	ldr	r3, [r3, #28]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d101      	bne.n	8000e8c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e013      	b.n	8000eb4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <HAL_RCC_OscConfig+0x4f4>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6a1b      	ldr	r3, [r3, #32]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d106      	bne.n	8000eae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d001      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e000      	b.n	8000eb4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000eb2:	2300      	movs	r3, #0
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3718      	adds	r7, #24
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	40007000 	.word	0x40007000
 8000ec4:	42420060 	.word	0x42420060

08000ec8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d101      	bne.n	8000edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e0d0      	b.n	800107e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000edc:	4b6a      	ldr	r3, [pc, #424]	; (8001088 <HAL_RCC_ClockConfig+0x1c0>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 0307 	and.w	r3, r3, #7
 8000ee4:	683a      	ldr	r2, [r7, #0]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d910      	bls.n	8000f0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eea:	4b67      	ldr	r3, [pc, #412]	; (8001088 <HAL_RCC_ClockConfig+0x1c0>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f023 0207 	bic.w	r2, r3, #7
 8000ef2:	4965      	ldr	r1, [pc, #404]	; (8001088 <HAL_RCC_ClockConfig+0x1c0>)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000efa:	4b63      	ldr	r3, [pc, #396]	; (8001088 <HAL_RCC_ClockConfig+0x1c0>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	683a      	ldr	r2, [r7, #0]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d001      	beq.n	8000f0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e0b8      	b.n	800107e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d020      	beq.n	8000f5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f003 0304 	and.w	r3, r3, #4
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d005      	beq.n	8000f30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f24:	4b59      	ldr	r3, [pc, #356]	; (800108c <HAL_RCC_ClockConfig+0x1c4>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	4a58      	ldr	r2, [pc, #352]	; (800108c <HAL_RCC_ClockConfig+0x1c4>)
 8000f2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000f2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 0308 	and.w	r3, r3, #8
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d005      	beq.n	8000f48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f3c:	4b53      	ldr	r3, [pc, #332]	; (800108c <HAL_RCC_ClockConfig+0x1c4>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	4a52      	ldr	r2, [pc, #328]	; (800108c <HAL_RCC_ClockConfig+0x1c4>)
 8000f42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000f46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f48:	4b50      	ldr	r3, [pc, #320]	; (800108c <HAL_RCC_ClockConfig+0x1c4>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	494d      	ldr	r1, [pc, #308]	; (800108c <HAL_RCC_ClockConfig+0x1c4>)
 8000f56:	4313      	orrs	r3, r2
 8000f58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d040      	beq.n	8000fe8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d107      	bne.n	8000f7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6e:	4b47      	ldr	r3, [pc, #284]	; (800108c <HAL_RCC_ClockConfig+0x1c4>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d115      	bne.n	8000fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e07f      	b.n	800107e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d107      	bne.n	8000f96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f86:	4b41      	ldr	r3, [pc, #260]	; (800108c <HAL_RCC_ClockConfig+0x1c4>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d109      	bne.n	8000fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e073      	b.n	800107e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f96:	4b3d      	ldr	r3, [pc, #244]	; (800108c <HAL_RCC_ClockConfig+0x1c4>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e06b      	b.n	800107e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fa6:	4b39      	ldr	r3, [pc, #228]	; (800108c <HAL_RCC_ClockConfig+0x1c4>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f023 0203 	bic.w	r2, r3, #3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	4936      	ldr	r1, [pc, #216]	; (800108c <HAL_RCC_ClockConfig+0x1c4>)
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000fb8:	f7ff fc18 	bl	80007ec <HAL_GetTick>
 8000fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fbe:	e00a      	b.n	8000fd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fc0:	f7ff fc14 	bl	80007ec <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e053      	b.n	800107e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fd6:	4b2d      	ldr	r3, [pc, #180]	; (800108c <HAL_RCC_ClockConfig+0x1c4>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 020c 	and.w	r2, r3, #12
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d1eb      	bne.n	8000fc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000fe8:	4b27      	ldr	r3, [pc, #156]	; (8001088 <HAL_RCC_ClockConfig+0x1c0>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d210      	bcs.n	8001018 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ff6:	4b24      	ldr	r3, [pc, #144]	; (8001088 <HAL_RCC_ClockConfig+0x1c0>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f023 0207 	bic.w	r2, r3, #7
 8000ffe:	4922      	ldr	r1, [pc, #136]	; (8001088 <HAL_RCC_ClockConfig+0x1c0>)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	4313      	orrs	r3, r2
 8001004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001006:	4b20      	ldr	r3, [pc, #128]	; (8001088 <HAL_RCC_ClockConfig+0x1c0>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	429a      	cmp	r2, r3
 8001012:	d001      	beq.n	8001018 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e032      	b.n	800107e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0304 	and.w	r3, r3, #4
 8001020:	2b00      	cmp	r3, #0
 8001022:	d008      	beq.n	8001036 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001024:	4b19      	ldr	r3, [pc, #100]	; (800108c <HAL_RCC_ClockConfig+0x1c4>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	4916      	ldr	r1, [pc, #88]	; (800108c <HAL_RCC_ClockConfig+0x1c4>)
 8001032:	4313      	orrs	r3, r2
 8001034:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0308 	and.w	r3, r3, #8
 800103e:	2b00      	cmp	r3, #0
 8001040:	d009      	beq.n	8001056 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001042:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_RCC_ClockConfig+0x1c4>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	691b      	ldr	r3, [r3, #16]
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	490e      	ldr	r1, [pc, #56]	; (800108c <HAL_RCC_ClockConfig+0x1c4>)
 8001052:	4313      	orrs	r3, r2
 8001054:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001056:	f000 f821 	bl	800109c <HAL_RCC_GetSysClockFreq>
 800105a:	4602      	mov	r2, r0
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <HAL_RCC_ClockConfig+0x1c4>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	091b      	lsrs	r3, r3, #4
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	490a      	ldr	r1, [pc, #40]	; (8001090 <HAL_RCC_ClockConfig+0x1c8>)
 8001068:	5ccb      	ldrb	r3, [r1, r3]
 800106a:	fa22 f303 	lsr.w	r3, r2, r3
 800106e:	4a09      	ldr	r2, [pc, #36]	; (8001094 <HAL_RCC_ClockConfig+0x1cc>)
 8001070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <HAL_RCC_ClockConfig+0x1d0>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fb76 	bl	8000768 <HAL_InitTick>

  return HAL_OK;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40022000 	.word	0x40022000
 800108c:	40021000 	.word	0x40021000
 8001090:	08001864 	.word	0x08001864
 8001094:	20000000 	.word	0x20000000
 8001098:	20000004 	.word	0x20000004

0800109c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800109c:	b490      	push	{r4, r7}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80010a2:	4b2a      	ldr	r3, [pc, #168]	; (800114c <HAL_RCC_GetSysClockFreq+0xb0>)
 80010a4:	1d3c      	adds	r4, r7, #4
 80010a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80010ac:	f240 2301 	movw	r3, #513	; 0x201
 80010b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
 80010ba:	2300      	movs	r3, #0
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80010c6:	4b22      	ldr	r3, [pc, #136]	; (8001150 <HAL_RCC_GetSysClockFreq+0xb4>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f003 030c 	and.w	r3, r3, #12
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	d002      	beq.n	80010dc <HAL_RCC_GetSysClockFreq+0x40>
 80010d6:	2b08      	cmp	r3, #8
 80010d8:	d003      	beq.n	80010e2 <HAL_RCC_GetSysClockFreq+0x46>
 80010da:	e02d      	b.n	8001138 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <HAL_RCC_GetSysClockFreq+0xb8>)
 80010de:	623b      	str	r3, [r7, #32]
      break;
 80010e0:	e02d      	b.n	800113e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	0c9b      	lsrs	r3, r3, #18
 80010e6:	f003 030f 	and.w	r3, r3, #15
 80010ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80010ee:	4413      	add	r3, r2
 80010f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80010f4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d013      	beq.n	8001128 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001100:	4b13      	ldr	r3, [pc, #76]	; (8001150 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	0c5b      	lsrs	r3, r3, #17
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800110e:	4413      	add	r3, r2
 8001110:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001114:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	4a0e      	ldr	r2, [pc, #56]	; (8001154 <HAL_RCC_GetSysClockFreq+0xb8>)
 800111a:	fb02 f203 	mul.w	r2, r2, r3
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	fbb2 f3f3 	udiv	r3, r2, r3
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
 8001126:	e004      	b.n	8001132 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <HAL_RCC_GetSysClockFreq+0xbc>)
 800112c:	fb02 f303 	mul.w	r3, r2, r3
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001134:	623b      	str	r3, [r7, #32]
      break;
 8001136:	e002      	b.n	800113e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_RCC_GetSysClockFreq+0xb8>)
 800113a:	623b      	str	r3, [r7, #32]
      break;
 800113c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800113e:	6a3b      	ldr	r3, [r7, #32]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3728      	adds	r7, #40	; 0x28
 8001144:	46bd      	mov	sp, r7
 8001146:	bc90      	pop	{r4, r7}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	08001854 	.word	0x08001854
 8001150:	40021000 	.word	0x40021000
 8001154:	007a1200 	.word	0x007a1200
 8001158:	003d0900 	.word	0x003d0900

0800115c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001164:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <RCC_Delay+0x34>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <RCC_Delay+0x38>)
 800116a:	fba2 2303 	umull	r2, r3, r2, r3
 800116e:	0a5b      	lsrs	r3, r3, #9
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	fb02 f303 	mul.w	r3, r2, r3
 8001176:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001178:	bf00      	nop
  }
  while (Delay --);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	1e5a      	subs	r2, r3, #1
 800117e:	60fa      	str	r2, [r7, #12]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1f9      	bne.n	8001178 <RCC_Delay+0x1c>
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr
 8001190:	20000000 	.word	0x20000000
 8001194:	10624dd3 	.word	0x10624dd3

08001198 <LL_GPIO_SetPinMode>:
{
 8001198:	b490      	push	{r4, r7}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	461a      	mov	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	0e1b      	lsrs	r3, r3, #24
 80011ac:	4413      	add	r3, r2
 80011ae:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80011b0:	6822      	ldr	r2, [r4, #0]
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	fa93 f3a3 	rbit	r3, r3
 80011bc:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	fab3 f383 	clz	r3, r3
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	210f      	movs	r1, #15
 80011ca:	fa01 f303 	lsl.w	r3, r1, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	401a      	ands	r2, r3
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	fa93 f3a3 	rbit	r3, r3
 80011dc:	61bb      	str	r3, [r7, #24]
  return result;
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	fab3 f383 	clz	r3, r3
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	4313      	orrs	r3, r2
 80011f0:	6023      	str	r3, [r4, #0]
}
 80011f2:	bf00      	nop
 80011f4:	3720      	adds	r7, #32
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc90      	pop	{r4, r7}
 80011fa:	4770      	bx	lr

080011fc <LL_GPIO_SetPinSpeed>:
{
 80011fc:	b490      	push	{r4, r7}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	461a      	mov	r2, r3
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	0e1b      	lsrs	r3, r3, #24
 8001210:	4413      	add	r3, r2
 8001212:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8001214:	6822      	ldr	r2, [r4, #0]
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	fa93 f3a3 	rbit	r3, r3
 8001220:	613b      	str	r3, [r7, #16]
  return result;
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	fab3 f383 	clz	r3, r3
 8001228:	b2db      	uxtb	r3, r3
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	2103      	movs	r1, #3
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	401a      	ands	r2, r3
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	fa93 f3a3 	rbit	r3, r3
 8001240:	61bb      	str	r3, [r7, #24]
  return result;
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	fab3 f383 	clz	r3, r3
 8001248:	b2db      	uxtb	r3, r3
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	4313      	orrs	r3, r2
 8001254:	6023      	str	r3, [r4, #0]
}
 8001256:	bf00      	nop
 8001258:	3720      	adds	r7, #32
 800125a:	46bd      	mov	sp, r7
 800125c:	bc90      	pop	{r4, r7}
 800125e:	4770      	bx	lr

08001260 <LL_GPIO_SetPinOutputType>:
{
 8001260:	b490      	push	{r4, r7}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	461a      	mov	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	0e1b      	lsrs	r3, r3, #24
 8001274:	4413      	add	r3, r2
 8001276:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8001278:	6822      	ldr	r2, [r4, #0]
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	fa93 f3a3 	rbit	r3, r3
 8001284:	613b      	str	r3, [r7, #16]
  return result;
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	fab3 f383 	clz	r3, r3
 800128c:	b2db      	uxtb	r3, r3
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	2104      	movs	r1, #4
 8001292:	fa01 f303 	lsl.w	r3, r1, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	401a      	ands	r2, r3
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	fa93 f3a3 	rbit	r3, r3
 80012a4:	61bb      	str	r3, [r7, #24]
  return result;
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	fab3 f383 	clz	r3, r3
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	6879      	ldr	r1, [r7, #4]
 80012b2:	fa01 f303 	lsl.w	r3, r1, r3
 80012b6:	4313      	orrs	r3, r2
 80012b8:	6023      	str	r3, [r4, #0]
}
 80012ba:	bf00      	nop
 80012bc:	3720      	adds	r7, #32
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc90      	pop	{r4, r7}
 80012c2:	4770      	bx	lr

080012c4 <LL_GPIO_SetPinPull>:
{
 80012c4:	b480      	push	{r7}
 80012c6:	b087      	sub	sp, #28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	68da      	ldr	r2, [r3, #12]
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	0a1b      	lsrs	r3, r3, #8
 80012d8:	43db      	mvns	r3, r3
 80012da:	401a      	ands	r2, r3
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	0a1b      	lsrs	r3, r3, #8
 80012e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	fa93 f3a3 	rbit	r3, r3
 80012e8:	613b      	str	r3, [r7, #16]
  return result;
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	fab3 f383 	clz	r3, r3
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	4619      	mov	r1, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	408b      	lsls	r3, r1
 80012f8:	431a      	orrs	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	60da      	str	r2, [r3, #12]
}
 80012fe:	bf00      	nop
 8001300:	371c      	adds	r7, #28
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	021b      	lsls	r3, r3, #8
 8001318:	0c1b      	lsrs	r3, r3, #16
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	fa93 f3a3 	rbit	r3, r3
 8001326:	60fb      	str	r3, [r7, #12]
  return result;
 8001328:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 800132a:	fab3 f383 	clz	r3, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8001332:	e044      	b.n	80013be <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8001334:	2201      	movs	r2, #1
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	409a      	lsls	r2, r3
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	4013      	ands	r3, r2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d03a      	beq.n	80013b8 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	2b07      	cmp	r3, #7
 8001346:	d806      	bhi.n	8001356 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8001348:	f240 1201 	movw	r2, #257	; 0x101
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	61bb      	str	r3, [r7, #24]
 8001354:	e008      	b.n	8001368 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3b08      	subs	r3, #8
 800135a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001366:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b08      	cmp	r3, #8
 800136e:	d106      	bne.n	800137e <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	461a      	mov	r2, r3
 8001376:	69b9      	ldr	r1, [r7, #24]
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff ffa3 	bl	80012c4 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	461a      	mov	r2, r3
 8001384:	69b9      	ldr	r1, [r7, #24]
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ff06 	bl	8001198 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d003      	beq.n	800139c <LL_GPIO_Init+0x94>
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b09      	cmp	r3, #9
 800139a:	d10d      	bne.n	80013b8 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	461a      	mov	r2, r3
 80013a2:	69b9      	ldr	r1, [r7, #24]
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ff29 	bl	80011fc <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	461a      	mov	r2, r3
 80013b0:	69b9      	ldr	r1, [r7, #24]
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ff54 	bl	8001260 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	3301      	adds	r3, #1
 80013bc:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	fa22 f303 	lsr.w	r3, r2, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1b4      	bne.n	8001334 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3720      	adds	r7, #32
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <LL_RCC_GetSysClkSource+0x14>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 030c 	and.w	r3, r3, #12
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	40021000 	.word	0x40021000

080013ec <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <LL_RCC_GetAHBPrescaler+0x14>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	40021000 	.word	0x40021000

08001404 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <LL_RCC_GetAPB1Prescaler+0x14>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	40021000 	.word	0x40021000

0800141c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <LL_RCC_GetAPB2Prescaler+0x14>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	40021000 	.word	0x40021000

08001434 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001438:	4b03      	ldr	r3, [pc, #12]	; (8001448 <LL_RCC_PLL_GetMainSource+0x14>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	40021000 	.word	0x40021000

0800144c <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8001450:	4b03      	ldr	r3, [pc, #12]	; (8001460 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	40021000 	.word	0x40021000

08001464 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <LL_RCC_PLL_GetPrediv+0x18>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	0c5b      	lsrs	r3, r3, #17
 800146e:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8001472:	4618      	mov	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	40021000 	.word	0x40021000

08001480 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001488:	f000 f820 	bl	80014cc <RCC_GetSystemClockFreq>
 800148c:	4602      	mov	r2, r0
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f000 f83e 	bl	8001518 <RCC_GetHCLKClockFreq>
 800149c:	4602      	mov	r2, r0
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 f84c 	bl	8001544 <RCC_GetPCLK1ClockFreq>
 80014ac:	4602      	mov	r2, r0
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 f858 	bl	800156c <RCC_GetPCLK2ClockFreq>
 80014bc:	4602      	mov	r2, r0
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	60da      	str	r2, [r3, #12]
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80014d6:	f7ff ff7d 	bl	80013d4 <LL_RCC_GetSysClkSource>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b08      	cmp	r3, #8
 80014de:	d00c      	beq.n	80014fa <RCC_GetSystemClockFreq+0x2e>
 80014e0:	2b08      	cmp	r3, #8
 80014e2:	d80e      	bhi.n	8001502 <RCC_GetSystemClockFreq+0x36>
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d002      	beq.n	80014ee <RCC_GetSystemClockFreq+0x22>
 80014e8:	2b04      	cmp	r3, #4
 80014ea:	d003      	beq.n	80014f4 <RCC_GetSystemClockFreq+0x28>
 80014ec:	e009      	b.n	8001502 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <RCC_GetSystemClockFreq+0x48>)
 80014f0:	607b      	str	r3, [r7, #4]
      break;
 80014f2:	e009      	b.n	8001508 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <RCC_GetSystemClockFreq+0x48>)
 80014f6:	607b      	str	r3, [r7, #4]
      break;
 80014f8:	e006      	b.n	8001508 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80014fa:	f000 f84b 	bl	8001594 <RCC_PLL_GetFreqDomain_SYS>
 80014fe:	6078      	str	r0, [r7, #4]
      break;
 8001500:	e002      	b.n	8001508 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8001502:	4b04      	ldr	r3, [pc, #16]	; (8001514 <RCC_GetSystemClockFreq+0x48>)
 8001504:	607b      	str	r3, [r7, #4]
      break;
 8001506:	bf00      	nop
  }

  return frequency;
 8001508:	687b      	ldr	r3, [r7, #4]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	007a1200 	.word	0x007a1200

08001518 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001520:	f7ff ff64 	bl	80013ec <LL_RCC_GetAHBPrescaler>
 8001524:	4603      	mov	r3, r0
 8001526:	091b      	lsrs	r3, r3, #4
 8001528:	f003 030f 	and.w	r3, r3, #15
 800152c:	4a04      	ldr	r2, [pc, #16]	; (8001540 <RCC_GetHCLKClockFreq+0x28>)
 800152e:	5cd3      	ldrb	r3, [r2, r3]
 8001530:	461a      	mov	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	40d3      	lsrs	r3, r2
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	08001864 	.word	0x08001864

08001544 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800154c:	f7ff ff5a 	bl	8001404 <LL_RCC_GetAPB1Prescaler>
 8001550:	4603      	mov	r3, r0
 8001552:	0a1b      	lsrs	r3, r3, #8
 8001554:	4a04      	ldr	r2, [pc, #16]	; (8001568 <RCC_GetPCLK1ClockFreq+0x24>)
 8001556:	5cd3      	ldrb	r3, [r2, r3]
 8001558:	461a      	mov	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	40d3      	lsrs	r3, r2
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	08001874 	.word	0x08001874

0800156c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001574:	f7ff ff52 	bl	800141c <LL_RCC_GetAPB2Prescaler>
 8001578:	4603      	mov	r3, r0
 800157a:	0adb      	lsrs	r3, r3, #11
 800157c:	4a04      	ldr	r2, [pc, #16]	; (8001590 <RCC_GetPCLK2ClockFreq+0x24>)
 800157e:	5cd3      	ldrb	r3, [r2, r3]
 8001580:	461a      	mov	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	40d3      	lsrs	r3, r2
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	08001874 	.word	0x08001874

08001594 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	2300      	movs	r3, #0
 80015a0:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80015a2:	f7ff ff47 	bl	8001434 <LL_RCC_PLL_GetMainSource>
 80015a6:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d004      	beq.n	80015b8 <RCC_PLL_GetFreqDomain_SYS+0x24>
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b4:	d003      	beq.n	80015be <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80015b6:	e00b      	b.n	80015d0 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80015b8:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80015ba:	607b      	str	r3, [r7, #4]
      break;
 80015bc:	e00b      	b.n	80015d6 <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 80015be:	f7ff ff51 	bl	8001464 <LL_RCC_PLL_GetPrediv>
 80015c2:	4603      	mov	r3, r0
 80015c4:	3301      	adds	r3, #1
 80015c6:	4a0b      	ldr	r2, [pc, #44]	; (80015f4 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80015c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015cc:	607b      	str	r3, [r7, #4]
      break;
 80015ce:	e002      	b.n	80015d6 <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80015d2:	607b      	str	r3, [r7, #4]
      break;
 80015d4:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 80015d6:	f7ff ff39 	bl	800144c <LL_RCC_PLL_GetMultiplicator>
 80015da:	4603      	mov	r3, r0
 80015dc:	0c9b      	lsrs	r3, r3, #18
 80015de:	3302      	adds	r3, #2
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	fb02 f303 	mul.w	r3, r2, r3
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	003d0900 	.word	0x003d0900
 80015f4:	007a1200 	.word	0x007a1200

080015f8 <LL_USART_IsEnabled>:
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001608:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800160c:	bf0c      	ite	eq
 800160e:	2301      	moveq	r3, #1
 8001610:	2300      	movne	r3, #0
 8001612:	b2db      	uxtb	r3, r3
}
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr

0800161e <LL_USART_SetStopBitsLength>:
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	611a      	str	r2, [r3, #16]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr

08001642 <LL_USART_SetHWFlowCtrl>:
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	431a      	orrs	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	615a      	str	r2, [r3, #20]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr
	...

08001668 <LL_USART_SetBaudRate>:
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001674:	68ba      	ldr	r2, [r7, #8]
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	009a      	lsls	r2, r3, #2
 800167e:	441a      	add	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	fbb2 f3f3 	udiv	r3, r2, r3
 8001688:	4a25      	ldr	r2, [pc, #148]	; (8001720 <LL_USART_SetBaudRate+0xb8>)
 800168a:	fba2 2303 	umull	r2, r3, r2, r3
 800168e:	095b      	lsrs	r3, r3, #5
 8001690:	b29b      	uxth	r3, r3
 8001692:	011b      	lsls	r3, r3, #4
 8001694:	b299      	uxth	r1, r3
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	009a      	lsls	r2, r3, #2
 80016a0:	441a      	add	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80016aa:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <LL_USART_SetBaudRate+0xb8>)
 80016ac:	fba3 0302 	umull	r0, r3, r3, r2
 80016b0:	095b      	lsrs	r3, r3, #5
 80016b2:	2064      	movs	r0, #100	; 0x64
 80016b4:	fb00 f303 	mul.w	r3, r0, r3
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	011b      	lsls	r3, r3, #4
 80016bc:	3332      	adds	r3, #50	; 0x32
 80016be:	4a18      	ldr	r2, [pc, #96]	; (8001720 <LL_USART_SetBaudRate+0xb8>)
 80016c0:	fba2 2303 	umull	r2, r3, r2, r3
 80016c4:	095b      	lsrs	r3, r3, #5
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	440b      	add	r3, r1
 80016d0:	b299      	uxth	r1, r3
 80016d2:	68ba      	ldr	r2, [r7, #8]
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	009a      	lsls	r2, r3, #2
 80016dc:	441a      	add	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <LL_USART_SetBaudRate+0xb8>)
 80016e8:	fba3 0302 	umull	r0, r3, r3, r2
 80016ec:	095b      	lsrs	r3, r3, #5
 80016ee:	2064      	movs	r0, #100	; 0x64
 80016f0:	fb00 f303 	mul.w	r3, r0, r3
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	011b      	lsls	r3, r3, #4
 80016f8:	3332      	adds	r3, #50	; 0x32
 80016fa:	4a09      	ldr	r2, [pc, #36]	; (8001720 <LL_USART_SetBaudRate+0xb8>)
 80016fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001700:	095b      	lsrs	r3, r3, #5
 8001702:	b29b      	uxth	r3, r3
 8001704:	f003 030f 	and.w	r3, r3, #15
 8001708:	b29b      	uxth	r3, r3
 800170a:	440b      	add	r3, r1
 800170c:	b29b      	uxth	r3, r3
 800170e:	461a      	mov	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	609a      	str	r2, [r3, #8]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	51eb851f 	.word	0x51eb851f

08001724 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b088      	sub	sp, #32
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001732:	2300      	movs	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ff5e 	bl	80015f8 <LL_USART_IsEnabled>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d145      	bne.n	80017ce <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800174a:	f023 030c 	bic.w	r3, r3, #12
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	6851      	ldr	r1, [r2, #4]
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	68d2      	ldr	r2, [r2, #12]
 8001756:	4311      	orrs	r1, r2
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	6912      	ldr	r2, [r2, #16]
 800175c:	430a      	orrs	r2, r1
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	4619      	mov	r1, r3
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ff57 	bl	800161e <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	4619      	mov	r1, r3
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff ff63 	bl	8001642 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800177c:	f107 0308 	add.w	r3, r7, #8
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fe7d 	bl	8001480 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a13      	ldr	r2, [pc, #76]	; (80017d8 <LL_USART_Init+0xb4>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d102      	bne.n	8001794 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	61bb      	str	r3, [r7, #24]
 8001792:	e00c      	b.n	80017ae <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a11      	ldr	r2, [pc, #68]	; (80017dc <LL_USART_Init+0xb8>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d102      	bne.n	80017a2 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	61bb      	str	r3, [r7, #24]
 80017a0:	e005      	b.n	80017ae <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a0e      	ldr	r2, [pc, #56]	; (80017e0 <LL_USART_Init+0xbc>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d101      	bne.n	80017ae <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d00c      	beq.n	80017ce <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d008      	beq.n	80017ce <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 80017bc:	2300      	movs	r3, #0
 80017be:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	69b9      	ldr	r1, [r7, #24]
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff ff4d 	bl	8001668 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80017ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3720      	adds	r7, #32
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40013800 	.word	0x40013800
 80017dc:	40004400 	.word	0x40004400
 80017e0:	40004800 	.word	0x40004800

080017e4 <__libc_init_array>:
 80017e4:	b570      	push	{r4, r5, r6, lr}
 80017e6:	2600      	movs	r6, #0
 80017e8:	4d0c      	ldr	r5, [pc, #48]	; (800181c <__libc_init_array+0x38>)
 80017ea:	4c0d      	ldr	r4, [pc, #52]	; (8001820 <__libc_init_array+0x3c>)
 80017ec:	1b64      	subs	r4, r4, r5
 80017ee:	10a4      	asrs	r4, r4, #2
 80017f0:	42a6      	cmp	r6, r4
 80017f2:	d109      	bne.n	8001808 <__libc_init_array+0x24>
 80017f4:	f000 f822 	bl	800183c <_init>
 80017f8:	2600      	movs	r6, #0
 80017fa:	4d0a      	ldr	r5, [pc, #40]	; (8001824 <__libc_init_array+0x40>)
 80017fc:	4c0a      	ldr	r4, [pc, #40]	; (8001828 <__libc_init_array+0x44>)
 80017fe:	1b64      	subs	r4, r4, r5
 8001800:	10a4      	asrs	r4, r4, #2
 8001802:	42a6      	cmp	r6, r4
 8001804:	d105      	bne.n	8001812 <__libc_init_array+0x2e>
 8001806:	bd70      	pop	{r4, r5, r6, pc}
 8001808:	f855 3b04 	ldr.w	r3, [r5], #4
 800180c:	4798      	blx	r3
 800180e:	3601      	adds	r6, #1
 8001810:	e7ee      	b.n	80017f0 <__libc_init_array+0xc>
 8001812:	f855 3b04 	ldr.w	r3, [r5], #4
 8001816:	4798      	blx	r3
 8001818:	3601      	adds	r6, #1
 800181a:	e7f2      	b.n	8001802 <__libc_init_array+0x1e>
 800181c:	0800187c 	.word	0x0800187c
 8001820:	0800187c 	.word	0x0800187c
 8001824:	0800187c 	.word	0x0800187c
 8001828:	08001880 	.word	0x08001880

0800182c <memset>:
 800182c:	4603      	mov	r3, r0
 800182e:	4402      	add	r2, r0
 8001830:	4293      	cmp	r3, r2
 8001832:	d100      	bne.n	8001836 <memset+0xa>
 8001834:	4770      	bx	lr
 8001836:	f803 1b01 	strb.w	r1, [r3], #1
 800183a:	e7f9      	b.n	8001830 <memset+0x4>

0800183c <_init>:
 800183c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800183e:	bf00      	nop
 8001840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001842:	bc08      	pop	{r3}
 8001844:	469e      	mov	lr, r3
 8001846:	4770      	bx	lr

08001848 <_fini>:
 8001848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800184a:	bf00      	nop
 800184c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800184e:	bc08      	pop	{r3}
 8001850:	469e      	mov	lr, r3
 8001852:	4770      	bx	lr
