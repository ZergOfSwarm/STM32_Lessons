
ADC_Loop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cac  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08005dbc  08005dbc  00015dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f24  08005f24  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005f24  08005f24  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f24  08005f24  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f24  08005f24  00015f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f28  08005f28  00015f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005f2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c58  20000074  08005fa0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ccc  08005fa0  00021ccc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001893f  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003305  00000000  00000000  000389dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001330  00000000  00000000  0003bce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011b8  00000000  00000000  0003d018  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004788  00000000  00000000  0003e1d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010397  00000000  00000000  00042958  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097b13  00000000  00000000  00052cef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ea802  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000565c  00000000  00000000  000ea880  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08005da4 	.word	0x08005da4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08005da4 	.word	0x08005da4

08000150 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000158:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800015c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000160:	f003 0301 	and.w	r3, r3, #1
 8000164:	2b00      	cmp	r3, #0
 8000166:	d013      	beq.n	8000190 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000168:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800016c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000170:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000174:	2b00      	cmp	r3, #0
 8000176:	d00b      	beq.n	8000190 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	e000      	b.n	800017c <ITM_SendChar+0x2c>
    {
      __NOP();
 800017a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800017c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	2b00      	cmp	r3, #0
 8000184:	d0f9      	beq.n	800017a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000186:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800018a:	687a      	ldr	r2, [r7, #4]
 800018c:	b2d2      	uxtb	r2, r2
 800018e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000190:	687b      	ldr	r3, [r7, #4]
}
 8000192:	4618      	mov	r0, r3
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr

0800019c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*-----------------------------for prinf--------------------------------------*/
int _write(int file, uint8_t *ptr, int len) {
 800019c:	b580      	push	{r7, lr}
 800019e:	b086      	sub	sp, #24
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	60f8      	str	r0, [r7, #12]
 80001a4:	60b9      	str	r1, [r7, #8]
 80001a6:	607a      	str	r2, [r7, #4]
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 80001a8:	2300      	movs	r3, #0
 80001aa:	617b      	str	r3, [r7, #20]
 80001ac:	e009      	b.n	80001c2 <_write+0x26>
		ITM_SendChar(*ptr++);
 80001ae:	68bb      	ldr	r3, [r7, #8]
 80001b0:	1c5a      	adds	r2, r3, #1
 80001b2:	60ba      	str	r2, [r7, #8]
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	4618      	mov	r0, r3
 80001b8:	f7ff ffca 	bl	8000150 <ITM_SendChar>
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 80001bc:	697b      	ldr	r3, [r7, #20]
 80001be:	3301      	adds	r3, #1
 80001c0:	617b      	str	r3, [r7, #20]
 80001c2:	697a      	ldr	r2, [r7, #20]
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	429a      	cmp	r2, r3
 80001c8:	dbf1      	blt.n	80001ae <_write+0x12>
	}
	return len;
 80001ca:	687b      	ldr	r3, [r7, #4]
}
 80001cc:	4618      	mov	r0, r3
 80001ce:	3718      	adds	r7, #24
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bd80      	pop	{r7, pc}

080001d4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001d8:	f000 fad4 	bl	8000784 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001dc:	f000 f82a 	bl	8000234 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001e0:	f000 f8c2 	bl	8000368 <MX_GPIO_Init>
	MX_ADC1_Init();
 80001e4:	f000 f882 	bl	80002ec <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADCEx_Calibration_Start(&hadc1); // Делаем калибровку ADC
 80001e8:	480b      	ldr	r0, [pc, #44]	; (8000218 <main+0x44>)
 80001ea:	f000 ff39 	bl	8001060 <HAL_ADCEx_Calibration_Start>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80001ee:	f002 fa15 	bl	800261c <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 80001f2:	4a0a      	ldr	r2, [pc, #40]	; (800021c <main+0x48>)
 80001f4:	2100      	movs	r1, #0
 80001f6:	480a      	ldr	r0, [pc, #40]	; (8000220 <main+0x4c>)
 80001f8:	f002 fa76 	bl	80026e8 <osThreadNew>
 80001fc:	4602      	mov	r2, r0
 80001fe:	4b09      	ldr	r3, [pc, #36]	; (8000224 <main+0x50>)
 8000200:	601a      	str	r2, [r3, #0]
			&defaultTask_attributes);

	/* creation of my_PhotoResisto */
	my_PhotoResistoHandle = osThreadNew(Start_PhotoResistor_Task, NULL,
 8000202:	4a09      	ldr	r2, [pc, #36]	; (8000228 <main+0x54>)
 8000204:	2100      	movs	r1, #0
 8000206:	4809      	ldr	r0, [pc, #36]	; (800022c <main+0x58>)
 8000208:	f002 fa6e 	bl	80026e8 <osThreadNew>
 800020c:	4602      	mov	r2, r0
 800020e:	4b08      	ldr	r3, [pc, #32]	; (8000230 <main+0x5c>)
 8000210:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000212:	f002 fa35 	bl	8002680 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000216:	e7fe      	b.n	8000216 <main+0x42>
 8000218:	200019ac 	.word	0x200019ac
 800021c:	08005e2c 	.word	0x08005e2c
 8000220:	080003c5 	.word	0x080003c5
 8000224:	200019a4 	.word	0x200019a4
 8000228:	08005e50 	.word	0x08005e50
 800022c:	080003d5 	.word	0x080003d5
 8000230:	200019dc 	.word	0x200019dc

08000234 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b094      	sub	sp, #80	; 0x50
 8000238:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800023a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800023e:	2228      	movs	r2, #40	; 0x28
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f004 feb7 	bl	8004fb6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000248:	f107 0314 	add.w	r3, r7, #20
 800024c:	2200      	movs	r2, #0
 800024e:	601a      	str	r2, [r3, #0]
 8000250:	605a      	str	r2, [r3, #4]
 8000252:	609a      	str	r2, [r3, #8]
 8000254:	60da      	str	r2, [r3, #12]
 8000256:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000264:	2301      	movs	r3, #1
 8000266:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000268:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800026c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000272:	2301      	movs	r3, #1
 8000274:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000276:	2302      	movs	r3, #2
 8000278:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800027a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800027e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000280:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000284:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000286:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800028a:	4618      	mov	r0, r3
 800028c:	f001 f9be 	bl	800160c <HAL_RCC_OscConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x66>
		Error_Handler();
 8000296:	f000 f8d5 	bl	8000444 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800029a:	230f      	movs	r3, #15
 800029c:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029e:	2302      	movs	r3, #2
 80002a0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002aa:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80002b0:	f107 0314 	add.w	r3, r7, #20
 80002b4:	2102      	movs	r1, #2
 80002b6:	4618      	mov	r0, r3
 80002b8:	f001 fc28 	bl	8001b0c <HAL_RCC_ClockConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x92>
		Error_Handler();
 80002c2:	f000 f8bf 	bl	8000444 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002c6:	2302      	movs	r3, #2
 80002c8:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80002ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002ce:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	4618      	mov	r0, r3
 80002d4:	f001 fde6 	bl	8001ea4 <HAL_RCCEx_PeriphCLKConfig>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0xae>
		Error_Handler();
 80002de:	f000 f8b1 	bl	8000444 <Error_Handler>
	}
}
 80002e2:	bf00      	nop
 80002e4:	3750      	adds	r7, #80	; 0x50
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
	...

080002ec <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
 80002fa:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 80002fc:	4b18      	ldr	r3, [pc, #96]	; (8000360 <MX_ADC1_Init+0x74>)
 80002fe:	4a19      	ldr	r2, [pc, #100]	; (8000364 <MX_ADC1_Init+0x78>)
 8000300:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000302:	4b17      	ldr	r3, [pc, #92]	; (8000360 <MX_ADC1_Init+0x74>)
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000308:	4b15      	ldr	r3, [pc, #84]	; (8000360 <MX_ADC1_Init+0x74>)
 800030a:	2200      	movs	r2, #0
 800030c:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800030e:	4b14      	ldr	r3, [pc, #80]	; (8000360 <MX_ADC1_Init+0x74>)
 8000310:	2200      	movs	r2, #0
 8000312:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000314:	4b12      	ldr	r3, [pc, #72]	; (8000360 <MX_ADC1_Init+0x74>)
 8000316:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800031a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800031c:	4b10      	ldr	r3, [pc, #64]	; (8000360 <MX_ADC1_Init+0x74>)
 800031e:	2200      	movs	r2, #0
 8000320:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8000322:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <MX_ADC1_Init+0x74>)
 8000324:	2201      	movs	r2, #1
 8000326:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000328:	480d      	ldr	r0, [pc, #52]	; (8000360 <MX_ADC1_Init+0x74>)
 800032a:	f000 fa5d 	bl	80007e8 <HAL_ADC_Init>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_ADC1_Init+0x4c>
		Error_Handler();
 8000334:	f000 f886 	bl	8000444 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000338:	2300      	movs	r3, #0
 800033a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800033c:	2301      	movs	r3, #1
 800033e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000340:	2300      	movs	r3, #0
 8000342:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	4619      	mov	r1, r3
 8000348:	4805      	ldr	r0, [pc, #20]	; (8000360 <MX_ADC1_Init+0x74>)
 800034a:	f000 fd05 	bl	8000d58 <HAL_ADC_ConfigChannel>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_ADC1_Init+0x6c>
		Error_Handler();
 8000354:	f000 f876 	bl	8000444 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000358:	bf00      	nop
 800035a:	3710      	adds	r7, #16
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	200019ac 	.word	0x200019ac
 8000364:	40012400 	.word	0x40012400

08000368 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000368:	b480      	push	{r7}
 800036a:	b085      	sub	sp, #20
 800036c:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800036e:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <MX_GPIO_Init+0x58>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	4a13      	ldr	r2, [pc, #76]	; (80003c0 <MX_GPIO_Init+0x58>)
 8000374:	f043 0320 	orr.w	r3, r3, #32
 8000378:	6193      	str	r3, [r2, #24]
 800037a:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <MX_GPIO_Init+0x58>)
 800037c:	699b      	ldr	r3, [r3, #24]
 800037e:	f003 0320 	and.w	r3, r3, #32
 8000382:	60fb      	str	r3, [r7, #12]
 8000384:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000386:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <MX_GPIO_Init+0x58>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	4a0d      	ldr	r2, [pc, #52]	; (80003c0 <MX_GPIO_Init+0x58>)
 800038c:	f043 0304 	orr.w	r3, r3, #4
 8000390:	6193      	str	r3, [r2, #24]
 8000392:	4b0b      	ldr	r3, [pc, #44]	; (80003c0 <MX_GPIO_Init+0x58>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	f003 0304 	and.w	r3, r3, #4
 800039a:	60bb      	str	r3, [r7, #8]
 800039c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800039e:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <MX_GPIO_Init+0x58>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	4a07      	ldr	r2, [pc, #28]	; (80003c0 <MX_GPIO_Init+0x58>)
 80003a4:	f043 0308 	orr.w	r3, r3, #8
 80003a8:	6193      	str	r3, [r2, #24]
 80003aa:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <MX_GPIO_Init+0x58>)
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	f003 0308 	and.w	r3, r3, #8
 80003b2:	607b      	str	r3, [r7, #4]
 80003b4:	687b      	ldr	r3, [r7, #4]

}
 80003b6:	bf00      	nop
 80003b8:	3714      	adds	r7, #20
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr
 80003c0:	40021000 	.word	0x40021000

080003c4 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80003cc:	2001      	movs	r0, #1
 80003ce:	f002 fa35 	bl	800283c <osDelay>
 80003d2:	e7fb      	b.n	80003cc <StartDefaultTask+0x8>

080003d4 <Start_PhotoResistor_Task>:
 * @brief Function implementing the my_PhotoResisto thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_PhotoResistor_Task */
void Start_PhotoResistor_Task(void *argument) {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_PhotoResistor_Task */
	/* Infinite loop */
	for (;;) {
		HAL_ADC_Start(&hadc1); // Эту функция запускает АЦП
 80003dc:	480d      	ldr	r0, [pc, #52]	; (8000414 <Start_PhotoResistor_Task+0x40>)
 80003de:	f000 fadb 	bl	8000998 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100); // Ожидание окончания преобразования! 100мс -это не означает...
 80003e2:	2164      	movs	r1, #100	; 0x64
 80003e4:	480b      	ldr	r0, [pc, #44]	; (8000414 <Start_PhotoResistor_Task+0x40>)
 80003e6:	f000 fbb1 	bl	8000b4c <HAL_ADC_PollForConversion>
		adc_value = HAL_ADC_GetValue(&hadc1); // Читаем наше значение с АЦП1.
 80003ea:	480a      	ldr	r0, [pc, #40]	; (8000414 <Start_PhotoResistor_Task+0x40>)
 80003ec:	f000 fca8 	bl	8000d40 <HAL_ADC_GetValue>
 80003f0:	4603      	mov	r3, r0
 80003f2:	b29a      	uxth	r2, r3
 80003f4:	4b08      	ldr	r3, [pc, #32]	; (8000418 <Start_PhotoResistor_Task+0x44>)
 80003f6:	801a      	strh	r2, [r3, #0]
		printf("adc_value - %d \n", adc_value);
 80003f8:	4b07      	ldr	r3, [pc, #28]	; (8000418 <Start_PhotoResistor_Task+0x44>)
 80003fa:	881b      	ldrh	r3, [r3, #0]
 80003fc:	4619      	mov	r1, r3
 80003fe:	4807      	ldr	r0, [pc, #28]	; (800041c <Start_PhotoResistor_Task+0x48>)
 8000400:	f004 fde2 	bl	8004fc8 <iprintf>
		HAL_ADC_Stop(&hadc1); // Останавливаем проеобразование сигнала с АЦП1
 8000404:	4803      	ldr	r0, [pc, #12]	; (8000414 <Start_PhotoResistor_Task+0x40>)
 8000406:	f000 fb75 	bl	8000af4 <HAL_ADC_Stop>
		osDelay(100);
 800040a:	2064      	movs	r0, #100	; 0x64
 800040c:	f002 fa16 	bl	800283c <osDelay>
		HAL_ADC_Start(&hadc1); // Эту функция запускает АЦП
 8000410:	e7e4      	b.n	80003dc <Start_PhotoResistor_Task+0x8>
 8000412:	bf00      	nop
 8000414:	200019ac 	.word	0x200019ac
 8000418:	200019a8 	.word	0x200019a8
 800041c:	08005dd8 	.word	0x08005dd8

08000420 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a04      	ldr	r2, [pc, #16]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d101      	bne.n	8000436 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000432:	f000 f9bd 	bl	80007b0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000436:	bf00      	nop
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40000800 	.word	0x40000800

08000444 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000448:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800044a:	e7fe      	b.n	800044a <Error_Handler+0x6>

0800044c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000452:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <HAL_MspInit+0x68>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	4a17      	ldr	r2, [pc, #92]	; (80004b4 <HAL_MspInit+0x68>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	6193      	str	r3, [r2, #24]
 800045e:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <HAL_MspInit+0x68>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	60bb      	str	r3, [r7, #8]
 8000468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800046a:	4b12      	ldr	r3, [pc, #72]	; (80004b4 <HAL_MspInit+0x68>)
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	4a11      	ldr	r2, [pc, #68]	; (80004b4 <HAL_MspInit+0x68>)
 8000470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000474:	61d3      	str	r3, [r2, #28]
 8000476:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <HAL_MspInit+0x68>)
 8000478:	69db      	ldr	r3, [r3, #28]
 800047a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000482:	2200      	movs	r2, #0
 8000484:	210f      	movs	r1, #15
 8000486:	f06f 0001 	mvn.w	r0, #1
 800048a:	f000 ff3a 	bl	8001302 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800048e:	4b0a      	ldr	r3, [pc, #40]	; (80004b8 <HAL_MspInit+0x6c>)
 8000490:	685b      	ldr	r3, [r3, #4]
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	4a04      	ldr	r2, [pc, #16]	; (80004b8 <HAL_MspInit+0x6c>)
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004aa:	bf00      	nop
 80004ac:	3710      	adds	r7, #16
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	40021000 	.word	0x40021000
 80004b8:	40010000 	.word	0x40010000

080004bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b088      	sub	sp, #32
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c4:	f107 0310 	add.w	r3, r7, #16
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a14      	ldr	r2, [pc, #80]	; (8000528 <HAL_ADC_MspInit+0x6c>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d121      	bne.n	8000520 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004dc:	4b13      	ldr	r3, [pc, #76]	; (800052c <HAL_ADC_MspInit+0x70>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	4a12      	ldr	r2, [pc, #72]	; (800052c <HAL_ADC_MspInit+0x70>)
 80004e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e6:	6193      	str	r3, [r2, #24]
 80004e8:	4b10      	ldr	r3, [pc, #64]	; (800052c <HAL_ADC_MspInit+0x70>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80004f0:	60fb      	str	r3, [r7, #12]
 80004f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f4:	4b0d      	ldr	r3, [pc, #52]	; (800052c <HAL_ADC_MspInit+0x70>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	4a0c      	ldr	r2, [pc, #48]	; (800052c <HAL_ADC_MspInit+0x70>)
 80004fa:	f043 0304 	orr.w	r3, r3, #4
 80004fe:	6193      	str	r3, [r2, #24]
 8000500:	4b0a      	ldr	r3, [pc, #40]	; (800052c <HAL_ADC_MspInit+0x70>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	f003 0304 	and.w	r3, r3, #4
 8000508:	60bb      	str	r3, [r7, #8]
 800050a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800050c:	2301      	movs	r3, #1
 800050e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000510:	2303      	movs	r3, #3
 8000512:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000514:	f107 0310 	add.w	r3, r7, #16
 8000518:	4619      	mov	r1, r3
 800051a:	4805      	ldr	r0, [pc, #20]	; (8000530 <HAL_ADC_MspInit+0x74>)
 800051c:	f000 ff1c 	bl	8001358 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000520:	bf00      	nop
 8000522:	3720      	adds	r7, #32
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40012400 	.word	0x40012400
 800052c:	40021000 	.word	0x40021000
 8000530:	40010800 	.word	0x40010800

08000534 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b08c      	sub	sp, #48	; 0x30
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000540:	2300      	movs	r3, #0
 8000542:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000544:	2200      	movs	r2, #0
 8000546:	6879      	ldr	r1, [r7, #4]
 8000548:	201e      	movs	r0, #30
 800054a:	f000 feda 	bl	8001302 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800054e:	201e      	movs	r0, #30
 8000550:	f000 fef3 	bl	800133a <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <HAL_InitTick+0xa0>)
 8000556:	69db      	ldr	r3, [r3, #28]
 8000558:	4a1e      	ldr	r2, [pc, #120]	; (80005d4 <HAL_InitTick+0xa0>)
 800055a:	f043 0304 	orr.w	r3, r3, #4
 800055e:	61d3      	str	r3, [r2, #28]
 8000560:	4b1c      	ldr	r3, [pc, #112]	; (80005d4 <HAL_InitTick+0xa0>)
 8000562:	69db      	ldr	r3, [r3, #28]
 8000564:	f003 0304 	and.w	r3, r3, #4
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800056c:	f107 0210 	add.w	r2, r7, #16
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	4611      	mov	r1, r2
 8000576:	4618      	mov	r0, r3
 8000578:	f001 fc46 	bl	8001e08 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800057c:	f001 fc1c 	bl	8001db8 <HAL_RCC_GetPCLK1Freq>
 8000580:	4603      	mov	r3, r0
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000588:	4a13      	ldr	r2, [pc, #76]	; (80005d8 <HAL_InitTick+0xa4>)
 800058a:	fba2 2303 	umull	r2, r3, r2, r3
 800058e:	0c9b      	lsrs	r3, r3, #18
 8000590:	3b01      	subs	r3, #1
 8000592:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000594:	4b11      	ldr	r3, [pc, #68]	; (80005dc <HAL_InitTick+0xa8>)
 8000596:	4a12      	ldr	r2, [pc, #72]	; (80005e0 <HAL_InitTick+0xac>)
 8000598:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800059a:	4b10      	ldr	r3, [pc, #64]	; (80005dc <HAL_InitTick+0xa8>)
 800059c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005a0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80005a2:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <HAL_InitTick+0xa8>)
 80005a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005a6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <HAL_InitTick+0xa8>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ae:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <HAL_InitTick+0xa8>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80005b4:	4809      	ldr	r0, [pc, #36]	; (80005dc <HAL_InitTick+0xa8>)
 80005b6:	f001 fde7 	bl	8002188 <HAL_TIM_Base_Init>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d104      	bne.n	80005ca <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80005c0:	4806      	ldr	r0, [pc, #24]	; (80005dc <HAL_InitTick+0xa8>)
 80005c2:	f001 fe39 	bl	8002238 <HAL_TIM_Base_Start_IT>
 80005c6:	4603      	mov	r3, r0
 80005c8:	e000      	b.n	80005cc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80005ca:	2301      	movs	r3, #1
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3730      	adds	r7, #48	; 0x30
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40021000 	.word	0x40021000
 80005d8:	431bde83 	.word	0x431bde83
 80005dc:	20001c3c 	.word	0x20001c3c
 80005e0:	40000800 	.word	0x40000800

080005e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <NMI_Handler+0x4>

080005ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ee:	e7fe      	b.n	80005ee <HardFault_Handler+0x4>

080005f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <MemManage_Handler+0x4>

080005f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005fa:	e7fe      	b.n	80005fa <BusFault_Handler+0x4>

080005fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <UsageFault_Handler+0x4>

08000602 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr
	...

08000610 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000614:	4802      	ldr	r0, [pc, #8]	; (8000620 <TIM4_IRQHandler+0x10>)
 8000616:	f001 fe61 	bl	80022dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20001c3c 	.word	0x20001c3c

08000624 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af00      	add	r7, sp, #0
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
 8000634:	e00a      	b.n	800064c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000636:	f3af 8000 	nop.w
 800063a:	4601      	mov	r1, r0
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	1c5a      	adds	r2, r3, #1
 8000640:	60ba      	str	r2, [r7, #8]
 8000642:	b2ca      	uxtb	r2, r1
 8000644:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	3301      	adds	r3, #1
 800064a:	617b      	str	r3, [r7, #20]
 800064c:	697a      	ldr	r2, [r7, #20]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	429a      	cmp	r2, r3
 8000652:	dbf0      	blt.n	8000636 <_read+0x12>
	}

return len;
 8000654:	687b      	ldr	r3, [r7, #4]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3718      	adds	r7, #24
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <_close>:
	}
	return len;
}

int _close(int file)
{
 800065e:	b480      	push	{r7}
 8000660:	b083      	sub	sp, #12
 8000662:	af00      	add	r7, sp, #0
 8000664:	6078      	str	r0, [r7, #4]
	return -1;
 8000666:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800066a:	4618      	mov	r0, r3
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr

08000674 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000684:	605a      	str	r2, [r3, #4]
	return 0;
 8000686:	2300      	movs	r3, #0
}
 8000688:	4618      	mov	r0, r3
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr

08000692 <_isatty>:

int _isatty(int file)
{
 8000692:	b480      	push	{r7}
 8000694:	b083      	sub	sp, #12
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
	return 1;
 800069a:	2301      	movs	r3, #1
}
 800069c:	4618      	mov	r0, r3
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr

080006a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006a6:	b480      	push	{r7}
 80006a8:	b085      	sub	sp, #20
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	60f8      	str	r0, [r7, #12]
 80006ae:	60b9      	str	r1, [r7, #8]
 80006b0:	607a      	str	r2, [r7, #4]
	return 0;
 80006b2:	2300      	movs	r3, #0
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr
	...

080006c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006c8:	4a14      	ldr	r2, [pc, #80]	; (800071c <_sbrk+0x5c>)
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <_sbrk+0x60>)
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006d4:	4b13      	ldr	r3, [pc, #76]	; (8000724 <_sbrk+0x64>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d102      	bne.n	80006e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006dc:	4b11      	ldr	r3, [pc, #68]	; (8000724 <_sbrk+0x64>)
 80006de:	4a12      	ldr	r2, [pc, #72]	; (8000728 <_sbrk+0x68>)
 80006e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <_sbrk+0x64>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4413      	add	r3, r2
 80006ea:	693a      	ldr	r2, [r7, #16]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d207      	bcs.n	8000700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006f0:	f004 fc2c 	bl	8004f4c <__errno>
 80006f4:	4602      	mov	r2, r0
 80006f6:	230c      	movs	r3, #12
 80006f8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006fe:	e009      	b.n	8000714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000700:	4b08      	ldr	r3, [pc, #32]	; (8000724 <_sbrk+0x64>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000706:	4b07      	ldr	r3, [pc, #28]	; (8000724 <_sbrk+0x64>)
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4413      	add	r3, r2
 800070e:	4a05      	ldr	r2, [pc, #20]	; (8000724 <_sbrk+0x64>)
 8000710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000712:	68fb      	ldr	r3, [r7, #12]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20005000 	.word	0x20005000
 8000720:	00000400 	.word	0x00000400
 8000724:	20000090 	.word	0x20000090
 8000728:	20001cd0 	.word	0x20001cd0

0800072c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000738:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800073a:	e003      	b.n	8000744 <LoopCopyDataInit>

0800073c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800073e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000740:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000742:	3104      	adds	r1, #4

08000744 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000744:	480a      	ldr	r0, [pc, #40]	; (8000770 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000748:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800074a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800074c:	d3f6      	bcc.n	800073c <CopyDataInit>
  ldr r2, =_sbss
 800074e:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000750:	e002      	b.n	8000758 <LoopFillZerobss>

08000752 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000754:	f842 3b04 	str.w	r3, [r2], #4

08000758 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800075a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800075c:	d3f9      	bcc.n	8000752 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800075e:	f7ff ffe5 	bl	800072c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000762:	f004 fbf9 	bl	8004f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000766:	f7ff fd35 	bl	80001d4 <main>
  bx lr
 800076a:	4770      	bx	lr
  ldr r3, =_sidata
 800076c:	08005f2c 	.word	0x08005f2c
  ldr r0, =_sdata
 8000770:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000774:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8000778:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 800077c:	20001ccc 	.word	0x20001ccc

08000780 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000780:	e7fe      	b.n	8000780 <ADC1_2_IRQHandler>
	...

08000784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <HAL_Init+0x28>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a07      	ldr	r2, [pc, #28]	; (80007ac <HAL_Init+0x28>)
 800078e:	f043 0310 	orr.w	r3, r3, #16
 8000792:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000794:	2003      	movs	r0, #3
 8000796:	f000 fda9 	bl	80012ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800079a:	2000      	movs	r0, #0
 800079c:	f7ff feca 	bl	8000534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007a0:	f7ff fe54 	bl	800044c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40022000 	.word	0x40022000

080007b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <HAL_IncTick+0x1c>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <HAL_IncTick+0x20>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4413      	add	r3, r2
 80007c0:	4a03      	ldr	r2, [pc, #12]	; (80007d0 <HAL_IncTick+0x20>)
 80007c2:	6013      	str	r3, [r2, #0]
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr
 80007cc:	20000008 	.word	0x20000008
 80007d0:	20001c84 	.word	0x20001c84

080007d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  return uwTick;
 80007d8:	4b02      	ldr	r3, [pc, #8]	; (80007e4 <HAL_GetTick+0x10>)
 80007da:	681b      	ldr	r3, [r3, #0]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr
 80007e4:	20001c84 	.word	0x20001c84

080007e8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007f0:	2300      	movs	r3, #0
 80007f2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80007f4:	2300      	movs	r3, #0
 80007f6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d101      	bne.n	800080a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000806:	2301      	movs	r3, #1
 8000808:	e0be      	b.n	8000988 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	689b      	ldr	r3, [r3, #8]
 800080e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000814:	2b00      	cmp	r3, #0
 8000816:	d109      	bne.n	800082c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2200      	movs	r2, #0
 800081c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2200      	movs	r2, #0
 8000822:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff fe48 	bl	80004bc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f000 fbdd 	bl	8000fec <ADC_ConversionStop_Disable>
 8000832:	4603      	mov	r3, r0
 8000834:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800083a:	f003 0310 	and.w	r3, r3, #16
 800083e:	2b00      	cmp	r3, #0
 8000840:	f040 8099 	bne.w	8000976 <HAL_ADC_Init+0x18e>
 8000844:	7dfb      	ldrb	r3, [r7, #23]
 8000846:	2b00      	cmp	r3, #0
 8000848:	f040 8095 	bne.w	8000976 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000850:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000854:	f023 0302 	bic.w	r3, r3, #2
 8000858:	f043 0202 	orr.w	r2, r3, #2
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000868:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	7b1b      	ldrb	r3, [r3, #12]
 800086e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000870:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000872:	68ba      	ldr	r2, [r7, #8]
 8000874:	4313      	orrs	r3, r2
 8000876:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000880:	d003      	beq.n	800088a <HAL_ADC_Init+0xa2>
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	689b      	ldr	r3, [r3, #8]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d102      	bne.n	8000890 <HAL_ADC_Init+0xa8>
 800088a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800088e:	e000      	b.n	8000892 <HAL_ADC_Init+0xaa>
 8000890:	2300      	movs	r3, #0
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	4313      	orrs	r3, r2
 8000896:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	7d1b      	ldrb	r3, [r3, #20]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d119      	bne.n	80008d4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	7b1b      	ldrb	r3, [r3, #12]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d109      	bne.n	80008bc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	3b01      	subs	r3, #1
 80008ae:	035a      	lsls	r2, r3, #13
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	e00b      	b.n	80008d4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008c0:	f043 0220 	orr.w	r2, r3, #32
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008cc:	f043 0201 	orr.w	r2, r3, #1
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	430a      	orrs	r2, r1
 80008e6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	689a      	ldr	r2, [r3, #8]
 80008ee:	4b28      	ldr	r3, [pc, #160]	; (8000990 <HAL_ADC_Init+0x1a8>)
 80008f0:	4013      	ands	r3, r2
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	6812      	ldr	r2, [r2, #0]
 80008f6:	68b9      	ldr	r1, [r7, #8]
 80008f8:	430b      	orrs	r3, r1
 80008fa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	689b      	ldr	r3, [r3, #8]
 8000900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000904:	d003      	beq.n	800090e <HAL_ADC_Init+0x126>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	689b      	ldr	r3, [r3, #8]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d104      	bne.n	8000918 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	691b      	ldr	r3, [r3, #16]
 8000912:	3b01      	subs	r3, #1
 8000914:	051b      	lsls	r3, r3, #20
 8000916:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800091e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	430a      	orrs	r2, r1
 800092a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	689a      	ldr	r2, [r3, #8]
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <HAL_ADC_Init+0x1ac>)
 8000934:	4013      	ands	r3, r2
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	429a      	cmp	r2, r3
 800093a:	d10b      	bne.n	8000954 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2200      	movs	r2, #0
 8000940:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000946:	f023 0303 	bic.w	r3, r3, #3
 800094a:	f043 0201 	orr.w	r2, r3, #1
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000952:	e018      	b.n	8000986 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000958:	f023 0312 	bic.w	r3, r3, #18
 800095c:	f043 0210 	orr.w	r2, r3, #16
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000968:	f043 0201 	orr.w	r2, r3, #1
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000970:	2301      	movs	r3, #1
 8000972:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000974:	e007      	b.n	8000986 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800097a:	f043 0210 	orr.w	r2, r3, #16
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000986:	7dfb      	ldrb	r3, [r7, #23]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	ffe1f7fd 	.word	0xffe1f7fd
 8000994:	ff1f0efe 	.word	0xff1f0efe

08000998 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009a0:	2300      	movs	r3, #0
 80009a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d101      	bne.n	80009b2 <HAL_ADC_Start+0x1a>
 80009ae:	2302      	movs	r3, #2
 80009b0:	e098      	b.n	8000ae4 <HAL_ADC_Start+0x14c>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2201      	movs	r2, #1
 80009b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f000 fac4 	bl	8000f48 <ADC_Enable>
 80009c0:	4603      	mov	r3, r0
 80009c2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80009c4:	7bfb      	ldrb	r3, [r7, #15]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	f040 8087 	bne.w	8000ada <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80009d4:	f023 0301 	bic.w	r3, r3, #1
 80009d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a41      	ldr	r2, [pc, #260]	; (8000aec <HAL_ADC_Start+0x154>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d105      	bne.n	80009f6 <HAL_ADC_Start+0x5e>
 80009ea:	4b41      	ldr	r3, [pc, #260]	; (8000af0 <HAL_ADC_Start+0x158>)
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d115      	bne.n	8000a22 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d026      	beq.n	8000a5e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a18:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a20:	e01d      	b.n	8000a5e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a2f      	ldr	r2, [pc, #188]	; (8000af0 <HAL_ADC_Start+0x158>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d004      	beq.n	8000a42 <HAL_ADC_Start+0xaa>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a2b      	ldr	r2, [pc, #172]	; (8000aec <HAL_ADC_Start+0x154>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d10d      	bne.n	8000a5e <HAL_ADC_Start+0xc6>
 8000a42:	4b2b      	ldr	r3, [pc, #172]	; (8000af0 <HAL_ADC_Start+0x158>)
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d007      	beq.n	8000a5e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a56:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d006      	beq.n	8000a78 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a6e:	f023 0206 	bic.w	r2, r3, #6
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a76:	e002      	b.n	8000a7e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2200      	movs	r2, #0
 8000a82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f06f 0202 	mvn.w	r2, #2
 8000a8e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000a9a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000a9e:	d113      	bne.n	8000ac8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000aa4:	4a11      	ldr	r2, [pc, #68]	; (8000aec <HAL_ADC_Start+0x154>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d105      	bne.n	8000ab6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <HAL_ADC_Start+0x158>)
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d108      	bne.n	8000ac8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	689a      	ldr	r2, [r3, #8]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	e00c      	b.n	8000ae2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	689a      	ldr	r2, [r3, #8]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	e003      	b.n	8000ae2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2200      	movs	r2, #0
 8000ade:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40012800 	.word	0x40012800
 8000af0:	40012400 	.word	0x40012400

08000af4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000afc:	2300      	movs	r3, #0
 8000afe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d101      	bne.n	8000b0e <HAL_ADC_Stop+0x1a>
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	e01a      	b.n	8000b44 <HAL_ADC_Stop+0x50>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2201      	movs	r2, #1
 8000b12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f000 fa68 	bl	8000fec <ADC_ConversionStop_Disable>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d109      	bne.n	8000b3a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b2a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b2e:	f023 0301 	bic.w	r3, r3, #1
 8000b32:	f043 0201 	orr.w	r2, r3, #1
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b087      	sub	sp, #28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000b62:	f7ff fe37 	bl	80007d4 <HAL_GetTick>
 8000b66:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d00b      	beq.n	8000b8e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b7a:	f043 0220 	orr.w	r2, r3, #32
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2200      	movs	r2, #0
 8000b86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e0c8      	b.n	8000d20 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d12a      	bne.n	8000bf2 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d123      	bne.n	8000bf2 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000baa:	e01a      	b.n	8000be2 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bb2:	d016      	beq.n	8000be2 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d007      	beq.n	8000bca <HAL_ADC_PollForConversion+0x7e>
 8000bba:	f7ff fe0b 	bl	80007d4 <HAL_GetTick>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	683a      	ldr	r2, [r7, #0]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d20b      	bcs.n	8000be2 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bce:	f043 0204 	orr.w	r2, r3, #4
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000bde:	2303      	movs	r3, #3
 8000be0:	e09e      	b.n	8000d20 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f003 0302 	and.w	r3, r3, #2
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d0dd      	beq.n	8000bac <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000bf0:	e06c      	b.n	8000ccc <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000bf2:	4b4d      	ldr	r3, [pc, #308]	; (8000d28 <HAL_ADC_PollForConversion+0x1dc>)
 8000bf4:	681c      	ldr	r4, [r3, #0]
 8000bf6:	2002      	movs	r0, #2
 8000bf8:	f001 fa0a 	bl	8002010 <HAL_RCCEx_GetPeriphCLKFreq>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	6919      	ldr	r1, [r3, #16]
 8000c08:	4b48      	ldr	r3, [pc, #288]	; (8000d2c <HAL_ADC_PollForConversion+0x1e0>)
 8000c0a:	400b      	ands	r3, r1
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d118      	bne.n	8000c42 <HAL_ADC_PollForConversion+0xf6>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	68d9      	ldr	r1, [r3, #12]
 8000c16:	4b46      	ldr	r3, [pc, #280]	; (8000d30 <HAL_ADC_PollForConversion+0x1e4>)
 8000c18:	400b      	ands	r3, r1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d111      	bne.n	8000c42 <HAL_ADC_PollForConversion+0xf6>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	6919      	ldr	r1, [r3, #16]
 8000c24:	4b43      	ldr	r3, [pc, #268]	; (8000d34 <HAL_ADC_PollForConversion+0x1e8>)
 8000c26:	400b      	ands	r3, r1
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d108      	bne.n	8000c3e <HAL_ADC_PollForConversion+0xf2>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	68d9      	ldr	r1, [r3, #12]
 8000c32:	4b41      	ldr	r3, [pc, #260]	; (8000d38 <HAL_ADC_PollForConversion+0x1ec>)
 8000c34:	400b      	ands	r3, r1
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d101      	bne.n	8000c3e <HAL_ADC_PollForConversion+0xf2>
 8000c3a:	2314      	movs	r3, #20
 8000c3c:	e020      	b.n	8000c80 <HAL_ADC_PollForConversion+0x134>
 8000c3e:	2329      	movs	r3, #41	; 0x29
 8000c40:	e01e      	b.n	8000c80 <HAL_ADC_PollForConversion+0x134>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	6919      	ldr	r1, [r3, #16]
 8000c48:	4b3a      	ldr	r3, [pc, #232]	; (8000d34 <HAL_ADC_PollForConversion+0x1e8>)
 8000c4a:	400b      	ands	r3, r1
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d106      	bne.n	8000c5e <HAL_ADC_PollForConversion+0x112>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	68d9      	ldr	r1, [r3, #12]
 8000c56:	4b38      	ldr	r3, [pc, #224]	; (8000d38 <HAL_ADC_PollForConversion+0x1ec>)
 8000c58:	400b      	ands	r3, r1
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d00d      	beq.n	8000c7a <HAL_ADC_PollForConversion+0x12e>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	6919      	ldr	r1, [r3, #16]
 8000c64:	4b35      	ldr	r3, [pc, #212]	; (8000d3c <HAL_ADC_PollForConversion+0x1f0>)
 8000c66:	400b      	ands	r3, r1
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d108      	bne.n	8000c7e <HAL_ADC_PollForConversion+0x132>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	68d9      	ldr	r1, [r3, #12]
 8000c72:	4b32      	ldr	r3, [pc, #200]	; (8000d3c <HAL_ADC_PollForConversion+0x1f0>)
 8000c74:	400b      	ands	r3, r1
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <HAL_ADC_PollForConversion+0x132>
 8000c7a:	2354      	movs	r3, #84	; 0x54
 8000c7c:	e000      	b.n	8000c80 <HAL_ADC_PollForConversion+0x134>
 8000c7e:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000c80:	fb02 f303 	mul.w	r3, r2, r3
 8000c84:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000c86:	e01d      	b.n	8000cc4 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c8e:	d016      	beq.n	8000cbe <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d007      	beq.n	8000ca6 <HAL_ADC_PollForConversion+0x15a>
 8000c96:	f7ff fd9d 	bl	80007d4 <HAL_GetTick>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	1ad3      	subs	r3, r2, r3
 8000ca0:	683a      	ldr	r2, [r7, #0]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d20b      	bcs.n	8000cbe <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000caa:	f043 0204 	orr.w	r2, r3, #4
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	e030      	b.n	8000d20 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d8dd      	bhi.n	8000c88 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f06f 0212 	mvn.w	r2, #18
 8000cd4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cda:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000cec:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000cf0:	d115      	bne.n	8000d1e <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d111      	bne.n	8000d1e <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d105      	bne.n	8000d1e <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d16:	f043 0201 	orr.w	r2, r3, #1
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000d1e:	2300      	movs	r3, #0
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	371c      	adds	r7, #28
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd90      	pop	{r4, r7, pc}
 8000d28:	20000000 	.word	0x20000000
 8000d2c:	24924924 	.word	0x24924924
 8000d30:	00924924 	.word	0x00924924
 8000d34:	12492492 	.word	0x12492492
 8000d38:	00492492 	.word	0x00492492
 8000d3c:	00249249 	.word	0x00249249

08000d40 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr

08000d58 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d62:	2300      	movs	r3, #0
 8000d64:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d101      	bne.n	8000d78 <HAL_ADC_ConfigChannel+0x20>
 8000d74:	2302      	movs	r3, #2
 8000d76:	e0dc      	b.n	8000f32 <HAL_ADC_ConfigChannel+0x1da>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	2b06      	cmp	r3, #6
 8000d86:	d81c      	bhi.n	8000dc2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685a      	ldr	r2, [r3, #4]
 8000d92:	4613      	mov	r3, r2
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	4413      	add	r3, r2
 8000d98:	3b05      	subs	r3, #5
 8000d9a:	221f      	movs	r2, #31
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	4019      	ands	r1, r3
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	6818      	ldr	r0, [r3, #0]
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685a      	ldr	r2, [r3, #4]
 8000dac:	4613      	mov	r3, r2
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	4413      	add	r3, r2
 8000db2:	3b05      	subs	r3, #5
 8000db4:	fa00 f203 	lsl.w	r2, r0, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	635a      	str	r2, [r3, #52]	; 0x34
 8000dc0:	e03c      	b.n	8000e3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	2b0c      	cmp	r3, #12
 8000dc8:	d81c      	bhi.n	8000e04 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	4413      	add	r3, r2
 8000dda:	3b23      	subs	r3, #35	; 0x23
 8000ddc:	221f      	movs	r2, #31
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	4019      	ands	r1, r3
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	6818      	ldr	r0, [r3, #0]
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685a      	ldr	r2, [r3, #4]
 8000dee:	4613      	mov	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	4413      	add	r3, r2
 8000df4:	3b23      	subs	r3, #35	; 0x23
 8000df6:	fa00 f203 	lsl.w	r2, r0, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	631a      	str	r2, [r3, #48]	; 0x30
 8000e02:	e01b      	b.n	8000e3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685a      	ldr	r2, [r3, #4]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	3b41      	subs	r3, #65	; 0x41
 8000e16:	221f      	movs	r2, #31
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	4019      	ands	r1, r3
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	6818      	ldr	r0, [r3, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685a      	ldr	r2, [r3, #4]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	4413      	add	r3, r2
 8000e2e:	3b41      	subs	r3, #65	; 0x41
 8000e30:	fa00 f203 	lsl.w	r2, r0, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b09      	cmp	r3, #9
 8000e42:	d91c      	bls.n	8000e7e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	68d9      	ldr	r1, [r3, #12]
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	4413      	add	r3, r2
 8000e54:	3b1e      	subs	r3, #30
 8000e56:	2207      	movs	r2, #7
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	4019      	ands	r1, r3
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	6898      	ldr	r0, [r3, #8]
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	4413      	add	r3, r2
 8000e6e:	3b1e      	subs	r3, #30
 8000e70:	fa00 f203 	lsl.w	r2, r0, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	e019      	b.n	8000eb2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	6919      	ldr	r1, [r3, #16]
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	4413      	add	r3, r2
 8000e8e:	2207      	movs	r2, #7
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	4019      	ands	r1, r3
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	6898      	ldr	r0, [r3, #8]
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	4413      	add	r3, r2
 8000ea6:	fa00 f203 	lsl.w	r2, r0, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b10      	cmp	r3, #16
 8000eb8:	d003      	beq.n	8000ec2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ebe:	2b11      	cmp	r3, #17
 8000ec0:	d132      	bne.n	8000f28 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a1d      	ldr	r2, [pc, #116]	; (8000f3c <HAL_ADC_ConfigChannel+0x1e4>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d125      	bne.n	8000f18 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d126      	bne.n	8000f28 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000ee8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2b10      	cmp	r3, #16
 8000ef0:	d11a      	bne.n	8000f28 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000ef2:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <HAL_ADC_ConfigChannel+0x1e8>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a13      	ldr	r2, [pc, #76]	; (8000f44 <HAL_ADC_ConfigChannel+0x1ec>)
 8000ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8000efc:	0c9a      	lsrs	r2, r3, #18
 8000efe:	4613      	mov	r3, r2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	4413      	add	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f08:	e002      	b.n	8000f10 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d1f9      	bne.n	8000f0a <HAL_ADC_ConfigChannel+0x1b2>
 8000f16:	e007      	b.n	8000f28 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1c:	f043 0220 	orr.w	r2, r3, #32
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr
 8000f3c:	40012400 	.word	0x40012400
 8000f40:	20000000 	.word	0x20000000
 8000f44:	431bde83 	.word	0x431bde83

08000f48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d039      	beq.n	8000fda <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	689a      	ldr	r2, [r3, #8]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f042 0201 	orr.w	r2, r2, #1
 8000f74:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f76:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <ADC_Enable+0x9c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a1b      	ldr	r2, [pc, #108]	; (8000fe8 <ADC_Enable+0xa0>)
 8000f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f80:	0c9b      	lsrs	r3, r3, #18
 8000f82:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f84:	e002      	b.n	8000f8c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d1f9      	bne.n	8000f86 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f92:	f7ff fc1f 	bl	80007d4 <HAL_GetTick>
 8000f96:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f98:	e018      	b.n	8000fcc <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000f9a:	f7ff fc1b 	bl	80007d4 <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d911      	bls.n	8000fcc <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fac:	f043 0210 	orr.w	r2, r3, #16
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb8:	f043 0201 	orr.w	r2, r3, #1
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e007      	b.n	8000fdc <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d1df      	bne.n	8000f9a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	431bde83 	.word	0x431bde83

08000fec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	2b01      	cmp	r3, #1
 8001004:	d127      	bne.n	8001056 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f022 0201 	bic.w	r2, r2, #1
 8001014:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001016:	f7ff fbdd 	bl	80007d4 <HAL_GetTick>
 800101a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800101c:	e014      	b.n	8001048 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800101e:	f7ff fbd9 	bl	80007d4 <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d90d      	bls.n	8001048 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001030:	f043 0210 	orr.w	r2, r3, #16
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103c:	f043 0201 	orr.w	r2, r3, #1
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e007      	b.n	8001058 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	2b01      	cmp	r3, #1
 8001054:	d0e3      	beq.n	800101e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b087      	sub	sp, #28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800106c:	2300      	movs	r3, #0
 800106e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001076:	2b01      	cmp	r3, #1
 8001078:	d101      	bne.n	800107e <HAL_ADCEx_Calibration_Start+0x1e>
 800107a:	2302      	movs	r3, #2
 800107c:	e086      	b.n	800118c <HAL_ADCEx_Calibration_Start+0x12c>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2201      	movs	r2, #1
 8001082:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff ffb0 	bl	8000fec <ADC_ConversionStop_Disable>
 800108c:	4603      	mov	r3, r0
 800108e:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001090:	7dfb      	ldrb	r3, [r7, #23]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d175      	bne.n	8001182 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800109a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800109e:	f023 0302 	bic.w	r3, r3, #2
 80010a2:	f043 0202 	orr.w	r2, r3, #2
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80010aa:	4b3a      	ldr	r3, [pc, #232]	; (8001194 <HAL_ADCEx_Calibration_Start+0x134>)
 80010ac:	681c      	ldr	r4, [r3, #0]
 80010ae:	2002      	movs	r0, #2
 80010b0:	f000 ffae 	bl	8002010 <HAL_RCCEx_GetPeriphCLKFreq>
 80010b4:	4603      	mov	r3, r0
 80010b6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80010ba:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80010bc:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80010be:	e002      	b.n	80010c6 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1f9      	bne.n	80010c0 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff3b 	bl	8000f48 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	689a      	ldr	r2, [r3, #8]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f042 0208 	orr.w	r2, r2, #8
 80010e0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80010e2:	f7ff fb77 	bl	80007d4 <HAL_GetTick>
 80010e6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80010e8:	e014      	b.n	8001114 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80010ea:	f7ff fb73 	bl	80007d4 <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b0a      	cmp	r3, #10
 80010f6:	d90d      	bls.n	8001114 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fc:	f023 0312 	bic.w	r3, r3, #18
 8001100:	f043 0210 	orr.w	r2, r3, #16
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e03b      	b.n	800118c <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f003 0308 	and.w	r3, r3, #8
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1e3      	bne.n	80010ea <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f042 0204 	orr.w	r2, r2, #4
 8001130:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001132:	f7ff fb4f 	bl	80007d4 <HAL_GetTick>
 8001136:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001138:	e014      	b.n	8001164 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800113a:	f7ff fb4b 	bl	80007d4 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b0a      	cmp	r3, #10
 8001146:	d90d      	bls.n	8001164 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114c:	f023 0312 	bic.w	r3, r3, #18
 8001150:	f043 0210 	orr.w	r2, r3, #16
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e013      	b.n	800118c <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1e3      	bne.n	800113a <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001176:	f023 0303 	bic.w	r3, r3, #3
 800117a:	f043 0201 	orr.w	r2, r3, #1
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800118a:	7dfb      	ldrb	r3, [r7, #23]
}
 800118c:	4618      	mov	r0, r3
 800118e:	371c      	adds	r7, #28
 8001190:	46bd      	mov	sp, r7
 8001192:	bd90      	pop	{r4, r7, pc}
 8001194:	20000000 	.word	0x20000000

08001198 <__NVIC_SetPriorityGrouping>:
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b4:	4013      	ands	r3, r2
 80011b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ca:	4a04      	ldr	r2, [pc, #16]	; (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	60d3      	str	r3, [r2, #12]
}
 80011d0:	bf00      	nop
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_GetPriorityGrouping>:
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e4:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <__NVIC_GetPriorityGrouping+0x18>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	0a1b      	lsrs	r3, r3, #8
 80011ea:	f003 0307 	and.w	r3, r3, #7
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_EnableIRQ>:
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	2b00      	cmp	r3, #0
 800120c:	db0b      	blt.n	8001226 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	f003 021f 	and.w	r2, r3, #31
 8001214:	4906      	ldr	r1, [pc, #24]	; (8001230 <__NVIC_EnableIRQ+0x34>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	095b      	lsrs	r3, r3, #5
 800121c:	2001      	movs	r0, #1
 800121e:	fa00 f202 	lsl.w	r2, r0, r2
 8001222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100

08001234 <__NVIC_SetPriority>:
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	2b00      	cmp	r3, #0
 8001246:	db0a      	blt.n	800125e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	490c      	ldr	r1, [pc, #48]	; (8001280 <__NVIC_SetPriority+0x4c>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	0112      	lsls	r2, r2, #4
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	440b      	add	r3, r1
 8001258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800125c:	e00a      	b.n	8001274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4908      	ldr	r1, [pc, #32]	; (8001284 <__NVIC_SetPriority+0x50>)
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	3b04      	subs	r3, #4
 800126c:	0112      	lsls	r2, r2, #4
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	440b      	add	r3, r1
 8001272:	761a      	strb	r2, [r3, #24]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000e100 	.word	0xe000e100
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <NVIC_EncodePriority>:
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	; 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f1c3 0307 	rsb	r3, r3, #7
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	bf28      	it	cs
 80012a6:	2304      	movcs	r3, #4
 80012a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3304      	adds	r3, #4
 80012ae:	2b06      	cmp	r3, #6
 80012b0:	d902      	bls.n	80012b8 <NVIC_EncodePriority+0x30>
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3b03      	subs	r3, #3
 80012b6:	e000      	b.n	80012ba <NVIC_EncodePriority+0x32>
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43da      	mvns	r2, r3
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	401a      	ands	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	43d9      	mvns	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	4313      	orrs	r3, r2
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3724      	adds	r7, #36	; 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ff4f 	bl	8001198 <__NVIC_SetPriorityGrouping>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
 800130e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001314:	f7ff ff64 	bl	80011e0 <__NVIC_GetPriorityGrouping>
 8001318:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	68b9      	ldr	r1, [r7, #8]
 800131e:	6978      	ldr	r0, [r7, #20]
 8001320:	f7ff ffb2 	bl	8001288 <NVIC_EncodePriority>
 8001324:	4602      	mov	r2, r0
 8001326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132a:	4611      	mov	r1, r2
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff81 	bl	8001234 <__NVIC_SetPriority>
}
 8001332:	bf00      	nop
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff57 	bl	80011fc <__NVIC_EnableIRQ>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001358:	b480      	push	{r7}
 800135a:	b08b      	sub	sp, #44	; 0x2c
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001362:	2300      	movs	r3, #0
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001366:	2300      	movs	r3, #0
 8001368:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800136a:	e127      	b.n	80015bc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800136c:	2201      	movs	r2, #1
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	69fa      	ldr	r2, [r7, #28]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	429a      	cmp	r2, r3
 8001386:	f040 8116 	bne.w	80015b6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b12      	cmp	r3, #18
 8001390:	d034      	beq.n	80013fc <HAL_GPIO_Init+0xa4>
 8001392:	2b12      	cmp	r3, #18
 8001394:	d80d      	bhi.n	80013b2 <HAL_GPIO_Init+0x5a>
 8001396:	2b02      	cmp	r3, #2
 8001398:	d02b      	beq.n	80013f2 <HAL_GPIO_Init+0x9a>
 800139a:	2b02      	cmp	r3, #2
 800139c:	d804      	bhi.n	80013a8 <HAL_GPIO_Init+0x50>
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d031      	beq.n	8001406 <HAL_GPIO_Init+0xae>
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d01c      	beq.n	80013e0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013a6:	e048      	b.n	800143a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80013a8:	2b03      	cmp	r3, #3
 80013aa:	d043      	beq.n	8001434 <HAL_GPIO_Init+0xdc>
 80013ac:	2b11      	cmp	r3, #17
 80013ae:	d01b      	beq.n	80013e8 <HAL_GPIO_Init+0x90>
          break;
 80013b0:	e043      	b.n	800143a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80013b2:	4a89      	ldr	r2, [pc, #548]	; (80015d8 <HAL_GPIO_Init+0x280>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d026      	beq.n	8001406 <HAL_GPIO_Init+0xae>
 80013b8:	4a87      	ldr	r2, [pc, #540]	; (80015d8 <HAL_GPIO_Init+0x280>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d806      	bhi.n	80013cc <HAL_GPIO_Init+0x74>
 80013be:	4a87      	ldr	r2, [pc, #540]	; (80015dc <HAL_GPIO_Init+0x284>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d020      	beq.n	8001406 <HAL_GPIO_Init+0xae>
 80013c4:	4a86      	ldr	r2, [pc, #536]	; (80015e0 <HAL_GPIO_Init+0x288>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d01d      	beq.n	8001406 <HAL_GPIO_Init+0xae>
          break;
 80013ca:	e036      	b.n	800143a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80013cc:	4a85      	ldr	r2, [pc, #532]	; (80015e4 <HAL_GPIO_Init+0x28c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d019      	beq.n	8001406 <HAL_GPIO_Init+0xae>
 80013d2:	4a85      	ldr	r2, [pc, #532]	; (80015e8 <HAL_GPIO_Init+0x290>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d016      	beq.n	8001406 <HAL_GPIO_Init+0xae>
 80013d8:	4a84      	ldr	r2, [pc, #528]	; (80015ec <HAL_GPIO_Init+0x294>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d013      	beq.n	8001406 <HAL_GPIO_Init+0xae>
          break;
 80013de:	e02c      	b.n	800143a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	623b      	str	r3, [r7, #32]
          break;
 80013e6:	e028      	b.n	800143a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	3304      	adds	r3, #4
 80013ee:	623b      	str	r3, [r7, #32]
          break;
 80013f0:	e023      	b.n	800143a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	3308      	adds	r3, #8
 80013f8:	623b      	str	r3, [r7, #32]
          break;
 80013fa:	e01e      	b.n	800143a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	330c      	adds	r3, #12
 8001402:	623b      	str	r3, [r7, #32]
          break;
 8001404:	e019      	b.n	800143a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d102      	bne.n	8001414 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800140e:	2304      	movs	r3, #4
 8001410:	623b      	str	r3, [r7, #32]
          break;
 8001412:	e012      	b.n	800143a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d105      	bne.n	8001428 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800141c:	2308      	movs	r3, #8
 800141e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69fa      	ldr	r2, [r7, #28]
 8001424:	611a      	str	r2, [r3, #16]
          break;
 8001426:	e008      	b.n	800143a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001428:	2308      	movs	r3, #8
 800142a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69fa      	ldr	r2, [r7, #28]
 8001430:	615a      	str	r2, [r3, #20]
          break;
 8001432:	e002      	b.n	800143a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001434:	2300      	movs	r3, #0
 8001436:	623b      	str	r3, [r7, #32]
          break;
 8001438:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	2bff      	cmp	r3, #255	; 0xff
 800143e:	d801      	bhi.n	8001444 <HAL_GPIO_Init+0xec>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	e001      	b.n	8001448 <HAL_GPIO_Init+0xf0>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3304      	adds	r3, #4
 8001448:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	2bff      	cmp	r3, #255	; 0xff
 800144e:	d802      	bhi.n	8001456 <HAL_GPIO_Init+0xfe>
 8001450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	e002      	b.n	800145c <HAL_GPIO_Init+0x104>
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	3b08      	subs	r3, #8
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	210f      	movs	r1, #15
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	fa01 f303 	lsl.w	r3, r1, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	401a      	ands	r2, r3
 800146e:	6a39      	ldr	r1, [r7, #32]
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	fa01 f303 	lsl.w	r3, r1, r3
 8001476:	431a      	orrs	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 8096 	beq.w	80015b6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800148a:	4b59      	ldr	r3, [pc, #356]	; (80015f0 <HAL_GPIO_Init+0x298>)
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	4a58      	ldr	r2, [pc, #352]	; (80015f0 <HAL_GPIO_Init+0x298>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6193      	str	r3, [r2, #24]
 8001496:	4b56      	ldr	r3, [pc, #344]	; (80015f0 <HAL_GPIO_Init+0x298>)
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014a2:	4a54      	ldr	r2, [pc, #336]	; (80015f4 <HAL_GPIO_Init+0x29c>)
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	089b      	lsrs	r3, r3, #2
 80014a8:	3302      	adds	r3, #2
 80014aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ae:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	220f      	movs	r2, #15
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	4013      	ands	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a4b      	ldr	r2, [pc, #300]	; (80015f8 <HAL_GPIO_Init+0x2a0>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d013      	beq.n	80014f6 <HAL_GPIO_Init+0x19e>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a4a      	ldr	r2, [pc, #296]	; (80015fc <HAL_GPIO_Init+0x2a4>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d00d      	beq.n	80014f2 <HAL_GPIO_Init+0x19a>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a49      	ldr	r2, [pc, #292]	; (8001600 <HAL_GPIO_Init+0x2a8>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d007      	beq.n	80014ee <HAL_GPIO_Init+0x196>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a48      	ldr	r2, [pc, #288]	; (8001604 <HAL_GPIO_Init+0x2ac>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d101      	bne.n	80014ea <HAL_GPIO_Init+0x192>
 80014e6:	2303      	movs	r3, #3
 80014e8:	e006      	b.n	80014f8 <HAL_GPIO_Init+0x1a0>
 80014ea:	2304      	movs	r3, #4
 80014ec:	e004      	b.n	80014f8 <HAL_GPIO_Init+0x1a0>
 80014ee:	2302      	movs	r3, #2
 80014f0:	e002      	b.n	80014f8 <HAL_GPIO_Init+0x1a0>
 80014f2:	2301      	movs	r3, #1
 80014f4:	e000      	b.n	80014f8 <HAL_GPIO_Init+0x1a0>
 80014f6:	2300      	movs	r3, #0
 80014f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014fa:	f002 0203 	and.w	r2, r2, #3
 80014fe:	0092      	lsls	r2, r2, #2
 8001500:	4093      	lsls	r3, r2
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	4313      	orrs	r3, r2
 8001506:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001508:	493a      	ldr	r1, [pc, #232]	; (80015f4 <HAL_GPIO_Init+0x29c>)
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	089b      	lsrs	r3, r3, #2
 800150e:	3302      	adds	r3, #2
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d006      	beq.n	8001530 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001522:	4b39      	ldr	r3, [pc, #228]	; (8001608 <HAL_GPIO_Init+0x2b0>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	4938      	ldr	r1, [pc, #224]	; (8001608 <HAL_GPIO_Init+0x2b0>)
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	4313      	orrs	r3, r2
 800152c:	600b      	str	r3, [r1, #0]
 800152e:	e006      	b.n	800153e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001530:	4b35      	ldr	r3, [pc, #212]	; (8001608 <HAL_GPIO_Init+0x2b0>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	43db      	mvns	r3, r3
 8001538:	4933      	ldr	r1, [pc, #204]	; (8001608 <HAL_GPIO_Init+0x2b0>)
 800153a:	4013      	ands	r3, r2
 800153c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d006      	beq.n	8001558 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800154a:	4b2f      	ldr	r3, [pc, #188]	; (8001608 <HAL_GPIO_Init+0x2b0>)
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	492e      	ldr	r1, [pc, #184]	; (8001608 <HAL_GPIO_Init+0x2b0>)
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	4313      	orrs	r3, r2
 8001554:	604b      	str	r3, [r1, #4]
 8001556:	e006      	b.n	8001566 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001558:	4b2b      	ldr	r3, [pc, #172]	; (8001608 <HAL_GPIO_Init+0x2b0>)
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	43db      	mvns	r3, r3
 8001560:	4929      	ldr	r1, [pc, #164]	; (8001608 <HAL_GPIO_Init+0x2b0>)
 8001562:	4013      	ands	r3, r2
 8001564:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d006      	beq.n	8001580 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001572:	4b25      	ldr	r3, [pc, #148]	; (8001608 <HAL_GPIO_Init+0x2b0>)
 8001574:	689a      	ldr	r2, [r3, #8]
 8001576:	4924      	ldr	r1, [pc, #144]	; (8001608 <HAL_GPIO_Init+0x2b0>)
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	4313      	orrs	r3, r2
 800157c:	608b      	str	r3, [r1, #8]
 800157e:	e006      	b.n	800158e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001580:	4b21      	ldr	r3, [pc, #132]	; (8001608 <HAL_GPIO_Init+0x2b0>)
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	43db      	mvns	r3, r3
 8001588:	491f      	ldr	r1, [pc, #124]	; (8001608 <HAL_GPIO_Init+0x2b0>)
 800158a:	4013      	ands	r3, r2
 800158c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d006      	beq.n	80015a8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800159a:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <HAL_GPIO_Init+0x2b0>)
 800159c:	68da      	ldr	r2, [r3, #12]
 800159e:	491a      	ldr	r1, [pc, #104]	; (8001608 <HAL_GPIO_Init+0x2b0>)
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	60cb      	str	r3, [r1, #12]
 80015a6:	e006      	b.n	80015b6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015a8:	4b17      	ldr	r3, [pc, #92]	; (8001608 <HAL_GPIO_Init+0x2b0>)
 80015aa:	68da      	ldr	r2, [r3, #12]
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	43db      	mvns	r3, r3
 80015b0:	4915      	ldr	r1, [pc, #84]	; (8001608 <HAL_GPIO_Init+0x2b0>)
 80015b2:	4013      	ands	r3, r2
 80015b4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	3301      	adds	r3, #1
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	fa22 f303 	lsr.w	r3, r2, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f47f aed0 	bne.w	800136c <HAL_GPIO_Init+0x14>
  }
}
 80015cc:	bf00      	nop
 80015ce:	372c      	adds	r7, #44	; 0x2c
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	10210000 	.word	0x10210000
 80015dc:	10110000 	.word	0x10110000
 80015e0:	10120000 	.word	0x10120000
 80015e4:	10310000 	.word	0x10310000
 80015e8:	10320000 	.word	0x10320000
 80015ec:	10220000 	.word	0x10220000
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40010000 	.word	0x40010000
 80015f8:	40010800 	.word	0x40010800
 80015fc:	40010c00 	.word	0x40010c00
 8001600:	40011000 	.word	0x40011000
 8001604:	40011400 	.word	0x40011400
 8001608:	40010400 	.word	0x40010400

0800160c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e26c      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	f000 8087 	beq.w	800173a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800162c:	4b92      	ldr	r3, [pc, #584]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 030c 	and.w	r3, r3, #12
 8001634:	2b04      	cmp	r3, #4
 8001636:	d00c      	beq.n	8001652 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001638:	4b8f      	ldr	r3, [pc, #572]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 030c 	and.w	r3, r3, #12
 8001640:	2b08      	cmp	r3, #8
 8001642:	d112      	bne.n	800166a <HAL_RCC_OscConfig+0x5e>
 8001644:	4b8c      	ldr	r3, [pc, #560]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800164c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001650:	d10b      	bne.n	800166a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001652:	4b89      	ldr	r3, [pc, #548]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d06c      	beq.n	8001738 <HAL_RCC_OscConfig+0x12c>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d168      	bne.n	8001738 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e246      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001672:	d106      	bne.n	8001682 <HAL_RCC_OscConfig+0x76>
 8001674:	4b80      	ldr	r3, [pc, #512]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a7f      	ldr	r2, [pc, #508]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 800167a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	e02e      	b.n	80016e0 <HAL_RCC_OscConfig+0xd4>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10c      	bne.n	80016a4 <HAL_RCC_OscConfig+0x98>
 800168a:	4b7b      	ldr	r3, [pc, #492]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a7a      	ldr	r2, [pc, #488]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	4b78      	ldr	r3, [pc, #480]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a77      	ldr	r2, [pc, #476]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 800169c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	e01d      	b.n	80016e0 <HAL_RCC_OscConfig+0xd4>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016ac:	d10c      	bne.n	80016c8 <HAL_RCC_OscConfig+0xbc>
 80016ae:	4b72      	ldr	r3, [pc, #456]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a71      	ldr	r2, [pc, #452]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 80016b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	4b6f      	ldr	r3, [pc, #444]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a6e      	ldr	r2, [pc, #440]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 80016c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	e00b      	b.n	80016e0 <HAL_RCC_OscConfig+0xd4>
 80016c8:	4b6b      	ldr	r3, [pc, #428]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a6a      	ldr	r2, [pc, #424]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 80016ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016d2:	6013      	str	r3, [r2, #0]
 80016d4:	4b68      	ldr	r3, [pc, #416]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a67      	ldr	r2, [pc, #412]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 80016da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d013      	beq.n	8001710 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e8:	f7ff f874 	bl	80007d4 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f0:	f7ff f870 	bl	80007d4 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b64      	cmp	r3, #100	; 0x64
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e1fa      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001702:	4b5d      	ldr	r3, [pc, #372]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0f0      	beq.n	80016f0 <HAL_RCC_OscConfig+0xe4>
 800170e:	e014      	b.n	800173a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001710:	f7ff f860 	bl	80007d4 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001718:	f7ff f85c 	bl	80007d4 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b64      	cmp	r3, #100	; 0x64
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e1e6      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172a:	4b53      	ldr	r3, [pc, #332]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f0      	bne.n	8001718 <HAL_RCC_OscConfig+0x10c>
 8001736:	e000      	b.n	800173a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d063      	beq.n	800180e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001746:	4b4c      	ldr	r3, [pc, #304]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 030c 	and.w	r3, r3, #12
 800174e:	2b00      	cmp	r3, #0
 8001750:	d00b      	beq.n	800176a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001752:	4b49      	ldr	r3, [pc, #292]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 030c 	and.w	r3, r3, #12
 800175a:	2b08      	cmp	r3, #8
 800175c:	d11c      	bne.n	8001798 <HAL_RCC_OscConfig+0x18c>
 800175e:	4b46      	ldr	r3, [pc, #280]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d116      	bne.n	8001798 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800176a:	4b43      	ldr	r3, [pc, #268]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d005      	beq.n	8001782 <HAL_RCC_OscConfig+0x176>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d001      	beq.n	8001782 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e1ba      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001782:	4b3d      	ldr	r3, [pc, #244]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	4939      	ldr	r1, [pc, #228]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001792:	4313      	orrs	r3, r2
 8001794:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001796:	e03a      	b.n	800180e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d020      	beq.n	80017e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017a0:	4b36      	ldr	r3, [pc, #216]	; (800187c <HAL_RCC_OscConfig+0x270>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a6:	f7ff f815 	bl	80007d4 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ae:	f7ff f811 	bl	80007d4 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e19b      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c0:	4b2d      	ldr	r3, [pc, #180]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0f0      	beq.n	80017ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017cc:	4b2a      	ldr	r3, [pc, #168]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	695b      	ldr	r3, [r3, #20]
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	4927      	ldr	r1, [pc, #156]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	600b      	str	r3, [r1, #0]
 80017e0:	e015      	b.n	800180e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017e2:	4b26      	ldr	r3, [pc, #152]	; (800187c <HAL_RCC_OscConfig+0x270>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e8:	f7fe fff4 	bl	80007d4 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017f0:	f7fe fff0 	bl	80007d4 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e17a      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001802:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0308 	and.w	r3, r3, #8
 8001816:	2b00      	cmp	r3, #0
 8001818:	d03a      	beq.n	8001890 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d019      	beq.n	8001856 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001822:	4b17      	ldr	r3, [pc, #92]	; (8001880 <HAL_RCC_OscConfig+0x274>)
 8001824:	2201      	movs	r2, #1
 8001826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001828:	f7fe ffd4 	bl	80007d4 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001830:	f7fe ffd0 	bl	80007d4 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e15a      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001842:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0f0      	beq.n	8001830 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800184e:	2001      	movs	r0, #1
 8001850:	f000 fb0a 	bl	8001e68 <RCC_Delay>
 8001854:	e01c      	b.n	8001890 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001856:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <HAL_RCC_OscConfig+0x274>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800185c:	f7fe ffba 	bl	80007d4 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001862:	e00f      	b.n	8001884 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001864:	f7fe ffb6 	bl	80007d4 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d908      	bls.n	8001884 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e140      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000
 800187c:	42420000 	.word	0x42420000
 8001880:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001884:	4b9e      	ldr	r3, [pc, #632]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1e9      	bne.n	8001864 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 80a6 	beq.w	80019ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800189e:	2300      	movs	r3, #0
 80018a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018a2:	4b97      	ldr	r3, [pc, #604]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10d      	bne.n	80018ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ae:	4b94      	ldr	r3, [pc, #592]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	4a93      	ldr	r2, [pc, #588]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 80018b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b8:	61d3      	str	r3, [r2, #28]
 80018ba:	4b91      	ldr	r3, [pc, #580]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018c6:	2301      	movs	r3, #1
 80018c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ca:	4b8e      	ldr	r3, [pc, #568]	; (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d118      	bne.n	8001908 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018d6:	4b8b      	ldr	r3, [pc, #556]	; (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a8a      	ldr	r2, [pc, #552]	; (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80018dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018e2:	f7fe ff77 	bl	80007d4 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ea:	f7fe ff73 	bl	80007d4 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b64      	cmp	r3, #100	; 0x64
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e0fd      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018fc:	4b81      	ldr	r3, [pc, #516]	; (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0f0      	beq.n	80018ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d106      	bne.n	800191e <HAL_RCC_OscConfig+0x312>
 8001910:	4b7b      	ldr	r3, [pc, #492]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	4a7a      	ldr	r2, [pc, #488]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	6213      	str	r3, [r2, #32]
 800191c:	e02d      	b.n	800197a <HAL_RCC_OscConfig+0x36e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10c      	bne.n	8001940 <HAL_RCC_OscConfig+0x334>
 8001926:	4b76      	ldr	r3, [pc, #472]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	4a75      	ldr	r2, [pc, #468]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 800192c:	f023 0301 	bic.w	r3, r3, #1
 8001930:	6213      	str	r3, [r2, #32]
 8001932:	4b73      	ldr	r3, [pc, #460]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	4a72      	ldr	r2, [pc, #456]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001938:	f023 0304 	bic.w	r3, r3, #4
 800193c:	6213      	str	r3, [r2, #32]
 800193e:	e01c      	b.n	800197a <HAL_RCC_OscConfig+0x36e>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	2b05      	cmp	r3, #5
 8001946:	d10c      	bne.n	8001962 <HAL_RCC_OscConfig+0x356>
 8001948:	4b6d      	ldr	r3, [pc, #436]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	4a6c      	ldr	r2, [pc, #432]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 800194e:	f043 0304 	orr.w	r3, r3, #4
 8001952:	6213      	str	r3, [r2, #32]
 8001954:	4b6a      	ldr	r3, [pc, #424]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	4a69      	ldr	r2, [pc, #420]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	6213      	str	r3, [r2, #32]
 8001960:	e00b      	b.n	800197a <HAL_RCC_OscConfig+0x36e>
 8001962:	4b67      	ldr	r3, [pc, #412]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	4a66      	ldr	r2, [pc, #408]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001968:	f023 0301 	bic.w	r3, r3, #1
 800196c:	6213      	str	r3, [r2, #32]
 800196e:	4b64      	ldr	r3, [pc, #400]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	4a63      	ldr	r2, [pc, #396]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001974:	f023 0304 	bic.w	r3, r3, #4
 8001978:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d015      	beq.n	80019ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001982:	f7fe ff27 	bl	80007d4 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001988:	e00a      	b.n	80019a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198a:	f7fe ff23 	bl	80007d4 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	f241 3288 	movw	r2, #5000	; 0x1388
 8001998:	4293      	cmp	r3, r2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e0ab      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a0:	4b57      	ldr	r3, [pc, #348]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0ee      	beq.n	800198a <HAL_RCC_OscConfig+0x37e>
 80019ac:	e014      	b.n	80019d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ae:	f7fe ff11 	bl	80007d4 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b4:	e00a      	b.n	80019cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b6:	f7fe ff0d 	bl	80007d4 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e095      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019cc:	4b4c      	ldr	r3, [pc, #304]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1ee      	bne.n	80019b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019d8:	7dfb      	ldrb	r3, [r7, #23]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d105      	bne.n	80019ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019de:	4b48      	ldr	r3, [pc, #288]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	4a47      	ldr	r2, [pc, #284]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 80019e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 8081 	beq.w	8001af6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019f4:	4b42      	ldr	r3, [pc, #264]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 030c 	and.w	r3, r3, #12
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d061      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69db      	ldr	r3, [r3, #28]
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d146      	bne.n	8001a96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a08:	4b3f      	ldr	r3, [pc, #252]	; (8001b08 <HAL_RCC_OscConfig+0x4fc>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0e:	f7fe fee1 	bl	80007d4 <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a16:	f7fe fedd 	bl	80007d4 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e067      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a28:	4b35      	ldr	r3, [pc, #212]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1f0      	bne.n	8001a16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a3c:	d108      	bne.n	8001a50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a3e:	4b30      	ldr	r3, [pc, #192]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	492d      	ldr	r1, [pc, #180]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a50:	4b2b      	ldr	r3, [pc, #172]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a19      	ldr	r1, [r3, #32]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	430b      	orrs	r3, r1
 8001a62:	4927      	ldr	r1, [pc, #156]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a68:	4b27      	ldr	r3, [pc, #156]	; (8001b08 <HAL_RCC_OscConfig+0x4fc>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6e:	f7fe feb1 	bl	80007d4 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a76:	f7fe fead 	bl	80007d4 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e037      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a88:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0f0      	beq.n	8001a76 <HAL_RCC_OscConfig+0x46a>
 8001a94:	e02f      	b.n	8001af6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a96:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <HAL_RCC_OscConfig+0x4fc>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9c:	f7fe fe9a 	bl	80007d4 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa4:	f7fe fe96 	bl	80007d4 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e020      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab6:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f0      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x498>
 8001ac2:	e018      	b.n	8001af6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d101      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e013      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d106      	bne.n	8001af2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d001      	beq.n	8001af6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40007000 	.word	0x40007000
 8001b08:	42420060 	.word	0x42420060

08001b0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e0d0      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b20:	4b6a      	ldr	r3, [pc, #424]	; (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d910      	bls.n	8001b50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2e:	4b67      	ldr	r3, [pc, #412]	; (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f023 0207 	bic.w	r2, r3, #7
 8001b36:	4965      	ldr	r1, [pc, #404]	; (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3e:	4b63      	ldr	r3, [pc, #396]	; (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d001      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0b8      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d020      	beq.n	8001b9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d005      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b68:	4b59      	ldr	r3, [pc, #356]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	4a58      	ldr	r2, [pc, #352]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0308 	and.w	r3, r3, #8
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d005      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b80:	4b53      	ldr	r3, [pc, #332]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	4a52      	ldr	r2, [pc, #328]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b8c:	4b50      	ldr	r3, [pc, #320]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	494d      	ldr	r1, [pc, #308]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d040      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d107      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb2:	4b47      	ldr	r3, [pc, #284]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d115      	bne.n	8001bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e07f      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d107      	bne.n	8001bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bca:	4b41      	ldr	r3, [pc, #260]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d109      	bne.n	8001bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e073      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bda:	4b3d      	ldr	r3, [pc, #244]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e06b      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bea:	4b39      	ldr	r3, [pc, #228]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f023 0203 	bic.w	r2, r3, #3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	4936      	ldr	r1, [pc, #216]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bfc:	f7fe fdea 	bl	80007d4 <HAL_GetTick>
 8001c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c02:	e00a      	b.n	8001c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c04:	f7fe fde6 	bl	80007d4 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e053      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1a:	4b2d      	ldr	r3, [pc, #180]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 020c 	and.w	r2, r3, #12
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d1eb      	bne.n	8001c04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c2c:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d210      	bcs.n	8001c5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3a:	4b24      	ldr	r3, [pc, #144]	; (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f023 0207 	bic.w	r2, r3, #7
 8001c42:	4922      	ldr	r1, [pc, #136]	; (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4a:	4b20      	ldr	r3, [pc, #128]	; (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d001      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e032      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d008      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c68:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	4916      	ldr	r1, [pc, #88]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d009      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c86:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	490e      	ldr	r1, [pc, #56]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c9a:	f000 f821 	bl	8001ce0 <HAL_RCC_GetSysClockFreq>
 8001c9e:	4601      	mov	r1, r0
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001cac:	5cd3      	ldrb	r3, [r2, r3]
 8001cae:	fa21 f303 	lsr.w	r3, r1, r3
 8001cb2:	4a09      	ldr	r2, [pc, #36]	; (8001cd8 <HAL_RCC_ClockConfig+0x1cc>)
 8001cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_RCC_ClockConfig+0x1d0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe fc3a 	bl	8000534 <HAL_InitTick>

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40022000 	.word	0x40022000
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	08005e74 	.word	0x08005e74
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	20000004 	.word	0x20000004

08001ce0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce0:	b490      	push	{r4, r7}
 8001ce2:	b08a      	sub	sp, #40	; 0x28
 8001ce4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ce6:	4b2a      	ldr	r3, [pc, #168]	; (8001d90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ce8:	1d3c      	adds	r4, r7, #4
 8001cea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001cf0:	4b28      	ldr	r3, [pc, #160]	; (8001d94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61bb      	str	r3, [r7, #24]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d0a:	4b23      	ldr	r3, [pc, #140]	; (8001d98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	d002      	beq.n	8001d20 <HAL_RCC_GetSysClockFreq+0x40>
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d003      	beq.n	8001d26 <HAL_RCC_GetSysClockFreq+0x46>
 8001d1e:	e02d      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d20:	4b1e      	ldr	r3, [pc, #120]	; (8001d9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d22:	623b      	str	r3, [r7, #32]
      break;
 8001d24:	e02d      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	0c9b      	lsrs	r3, r3, #18
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d32:	4413      	add	r3, r2
 8001d34:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d38:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d013      	beq.n	8001d6c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d44:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	0c5b      	lsrs	r3, r3, #17
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d52:	4413      	add	r3, r2
 8001d54:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d58:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	4a0f      	ldr	r2, [pc, #60]	; (8001d9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d5e:	fb02 f203 	mul.w	r2, r2, r3
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
 8001d6a:	e004      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	4a0c      	ldr	r2, [pc, #48]	; (8001da0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d70:	fb02 f303 	mul.w	r3, r2, r3
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	623b      	str	r3, [r7, #32]
      break;
 8001d7a:	e002      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d7c:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d7e:	623b      	str	r3, [r7, #32]
      break;
 8001d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d82:	6a3b      	ldr	r3, [r7, #32]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3728      	adds	r7, #40	; 0x28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc90      	pop	{r4, r7}
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	08005dec 	.word	0x08005dec
 8001d94:	08005dfc 	.word	0x08005dfc
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	007a1200 	.word	0x007a1200
 8001da0:	003d0900 	.word	0x003d0900

08001da4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001da8:	4b02      	ldr	r3, [pc, #8]	; (8001db4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001daa:	681b      	ldr	r3, [r3, #0]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr
 8001db4:	20000000 	.word	0x20000000

08001db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001dbc:	f7ff fff2 	bl	8001da4 <HAL_RCC_GetHCLKFreq>
 8001dc0:	4601      	mov	r1, r0
 8001dc2:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	0a1b      	lsrs	r3, r3, #8
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	4a03      	ldr	r2, [pc, #12]	; (8001ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dce:	5cd3      	ldrb	r3, [r2, r3]
 8001dd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	08005e84 	.word	0x08005e84

08001de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001de4:	f7ff ffde 	bl	8001da4 <HAL_RCC_GetHCLKFreq>
 8001de8:	4601      	mov	r1, r0
 8001dea:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	0adb      	lsrs	r3, r3, #11
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	4a03      	ldr	r2, [pc, #12]	; (8001e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001df6:	5cd3      	ldrb	r3, [r2, r3]
 8001df8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40021000 	.word	0x40021000
 8001e04:	08005e84 	.word	0x08005e84

08001e08 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	220f      	movs	r2, #15
 8001e16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e18:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <HAL_RCC_GetClockConfig+0x58>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 0203 	and.w	r2, r3, #3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e24:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <HAL_RCC_GetClockConfig+0x58>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <HAL_RCC_GetClockConfig+0x58>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001e3c:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <HAL_RCC_GetClockConfig+0x58>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	08db      	lsrs	r3, r3, #3
 8001e42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_RCC_GetClockConfig+0x5c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0207 	and.w	r2, r3, #7
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40022000 	.word	0x40022000

08001e68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e70:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <RCC_Delay+0x34>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <RCC_Delay+0x38>)
 8001e76:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7a:	0a5b      	lsrs	r3, r3, #9
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	fb02 f303 	mul.w	r3, r2, r3
 8001e82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e84:	bf00      	nop
  }
  while (Delay --);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1e5a      	subs	r2, r3, #1
 8001e8a:	60fa      	str	r2, [r7, #12]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f9      	bne.n	8001e84 <RCC_Delay+0x1c>
}
 8001e90:	bf00      	nop
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	20000000 	.word	0x20000000
 8001ea0:	10624dd3 	.word	0x10624dd3

08001ea4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d07d      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ec4:	4b4f      	ldr	r3, [pc, #316]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ec6:	69db      	ldr	r3, [r3, #28]
 8001ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10d      	bne.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed0:	4b4c      	ldr	r3, [pc, #304]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	4a4b      	ldr	r2, [pc, #300]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eda:	61d3      	str	r3, [r2, #28]
 8001edc:	4b49      	ldr	r3, [pc, #292]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eec:	4b46      	ldr	r3, [pc, #280]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d118      	bne.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ef8:	4b43      	ldr	r3, [pc, #268]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a42      	ldr	r2, [pc, #264]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f04:	f7fe fc66 	bl	80007d4 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0a:	e008      	b.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f0c:	f7fe fc62 	bl	80007d4 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	; 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e06d      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1e:	4b3a      	ldr	r3, [pc, #232]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f2a:	4b36      	ldr	r3, [pc, #216]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f32:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d02e      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d027      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f48:	4b2e      	ldr	r3, [pc, #184]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f50:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f52:	4b2e      	ldr	r3, [pc, #184]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f58:	4b2c      	ldr	r3, [pc, #176]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f5e:	4a29      	ldr	r2, [pc, #164]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d014      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6e:	f7fe fc31 	bl	80007d4 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f74:	e00a      	b.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f76:	f7fe fc2d 	bl	80007d4 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e036      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f8c:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0ee      	beq.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f98:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	4917      	ldr	r1, [pc, #92]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001faa:	7dfb      	ldrb	r3, [r7, #23]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d105      	bne.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb0:	4b14      	ldr	r3, [pc, #80]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	4a13      	ldr	r2, [pc, #76]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d008      	beq.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fc8:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	490b      	ldr	r1, [pc, #44]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0310 	and.w	r3, r3, #16
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d008      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001fe6:	4b07      	ldr	r3, [pc, #28]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	4904      	ldr	r1, [pc, #16]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40021000 	.word	0x40021000
 8002008:	40007000 	.word	0x40007000
 800200c:	42420440 	.word	0x42420440

08002010 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002010:	b590      	push	{r4, r7, lr}
 8002012:	b08d      	sub	sp, #52	; 0x34
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002018:	4b55      	ldr	r3, [pc, #340]	; (8002170 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800201a:	f107 040c 	add.w	r4, r7, #12
 800201e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002020:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002024:	4b53      	ldr	r3, [pc, #332]	; (8002174 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
 800202e:	2300      	movs	r3, #0
 8002030:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002032:	2300      	movs	r3, #0
 8002034:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
 800203a:	2300      	movs	r3, #0
 800203c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b02      	cmp	r3, #2
 8002042:	d07f      	beq.n	8002144 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002044:	2b10      	cmp	r3, #16
 8002046:	d002      	beq.n	800204e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002048:	2b01      	cmp	r3, #1
 800204a:	d048      	beq.n	80020de <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800204c:	e08b      	b.n	8002166 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800204e:	4b4a      	ldr	r3, [pc, #296]	; (8002178 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002054:	4b48      	ldr	r3, [pc, #288]	; (8002178 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d07f      	beq.n	8002160 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	0c9b      	lsrs	r3, r3, #18
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800206c:	4413      	add	r3, r2
 800206e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002072:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d018      	beq.n	80020b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800207e:	4b3e      	ldr	r3, [pc, #248]	; (8002178 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	0c5b      	lsrs	r3, r3, #17
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800208c:	4413      	add	r3, r2
 800208e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00d      	beq.n	80020ba <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800209e:	4a37      	ldr	r2, [pc, #220]	; (800217c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80020a6:	6a3b      	ldr	r3, [r7, #32]
 80020a8:	fb02 f303 	mul.w	r3, r2, r3
 80020ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020ae:	e004      	b.n	80020ba <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	4a33      	ldr	r2, [pc, #204]	; (8002180 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80020b4:	fb02 f303 	mul.w	r3, r2, r3
 80020b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80020ba:	4b2f      	ldr	r3, [pc, #188]	; (8002178 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020c6:	d102      	bne.n	80020ce <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80020c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ca:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80020cc:	e048      	b.n	8002160 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80020ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	4a2c      	ldr	r2, [pc, #176]	; (8002184 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80020d4:	fba2 2303 	umull	r2, r3, r2, r3
 80020d8:	085b      	lsrs	r3, r3, #1
 80020da:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80020dc:	e040      	b.n	8002160 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80020de:	4b26      	ldr	r3, [pc, #152]	; (8002178 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020ee:	d108      	bne.n	8002102 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80020fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002100:	e01f      	b.n	8002142 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800210c:	d109      	bne.n	8002122 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800210e:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 800211a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800211e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002120:	e00f      	b.n	8002142 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002128:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800212c:	d11a      	bne.n	8002164 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800212e:	4b12      	ldr	r3, [pc, #72]	; (8002178 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d014      	beq.n	8002164 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 800213a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800213e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002140:	e010      	b.n	8002164 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002142:	e00f      	b.n	8002164 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002144:	f7ff fe4c 	bl	8001de0 <HAL_RCC_GetPCLK2Freq>
 8002148:	4602      	mov	r2, r0
 800214a:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	0b9b      	lsrs	r3, r3, #14
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	3301      	adds	r3, #1
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	fbb2 f3f3 	udiv	r3, r2, r3
 800215c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800215e:	e002      	b.n	8002166 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002160:	bf00      	nop
 8002162:	e000      	b.n	8002166 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002164:	bf00      	nop
    }
  }
  return (frequency);
 8002166:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002168:	4618      	mov	r0, r3
 800216a:	3734      	adds	r7, #52	; 0x34
 800216c:	46bd      	mov	sp, r7
 800216e:	bd90      	pop	{r4, r7, pc}
 8002170:	08005e00 	.word	0x08005e00
 8002174:	08005e10 	.word	0x08005e10
 8002178:	40021000 	.word	0x40021000
 800217c:	007a1200 	.word	0x007a1200
 8002180:	003d0900 	.word	0x003d0900
 8002184:	aaaaaaab 	.word	0xaaaaaaab

08002188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e041      	b.n	800221e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d106      	bne.n	80021b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f839 	bl	8002226 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2202      	movs	r2, #2
 80021b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3304      	adds	r3, #4
 80021c4:	4619      	mov	r1, r3
 80021c6:	4610      	mov	r0, r2
 80021c8:	f000 f9b4 	bl	8002534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr

08002238 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b01      	cmp	r3, #1
 800224a:	d001      	beq.n	8002250 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e03a      	b.n	80022c6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2202      	movs	r2, #2
 8002254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0201 	orr.w	r2, r2, #1
 8002266:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a18      	ldr	r2, [pc, #96]	; (80022d0 <HAL_TIM_Base_Start_IT+0x98>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d00e      	beq.n	8002290 <HAL_TIM_Base_Start_IT+0x58>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800227a:	d009      	beq.n	8002290 <HAL_TIM_Base_Start_IT+0x58>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a14      	ldr	r2, [pc, #80]	; (80022d4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d004      	beq.n	8002290 <HAL_TIM_Base_Start_IT+0x58>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a13      	ldr	r2, [pc, #76]	; (80022d8 <HAL_TIM_Base_Start_IT+0xa0>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d111      	bne.n	80022b4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2b06      	cmp	r3, #6
 80022a0:	d010      	beq.n	80022c4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f042 0201 	orr.w	r2, r2, #1
 80022b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022b2:	e007      	b.n	80022c4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0201 	orr.w	r2, r2, #1
 80022c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr
 80022d0:	40012c00 	.word	0x40012c00
 80022d4:	40000400 	.word	0x40000400
 80022d8:	40000800 	.word	0x40000800

080022dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d122      	bne.n	8002338 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d11b      	bne.n	8002338 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f06f 0202 	mvn.w	r2, #2
 8002308:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f8ed 	bl	80024fe <HAL_TIM_IC_CaptureCallback>
 8002324:	e005      	b.n	8002332 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f8e0 	bl	80024ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f8ef 	bl	8002510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f003 0304 	and.w	r3, r3, #4
 8002342:	2b04      	cmp	r3, #4
 8002344:	d122      	bne.n	800238c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b04      	cmp	r3, #4
 8002352:	d11b      	bne.n	800238c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f06f 0204 	mvn.w	r2, #4
 800235c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2202      	movs	r2, #2
 8002362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f8c3 	bl	80024fe <HAL_TIM_IC_CaptureCallback>
 8002378:	e005      	b.n	8002386 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f8b6 	bl	80024ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 f8c5 	bl	8002510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b08      	cmp	r3, #8
 8002398:	d122      	bne.n	80023e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d11b      	bne.n	80023e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f06f 0208 	mvn.w	r2, #8
 80023b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2204      	movs	r2, #4
 80023b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f899 	bl	80024fe <HAL_TIM_IC_CaptureCallback>
 80023cc:	e005      	b.n	80023da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f88c 	bl	80024ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f89b 	bl	8002510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	f003 0310 	and.w	r3, r3, #16
 80023ea:	2b10      	cmp	r3, #16
 80023ec:	d122      	bne.n	8002434 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f003 0310 	and.w	r3, r3, #16
 80023f8:	2b10      	cmp	r3, #16
 80023fa:	d11b      	bne.n	8002434 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f06f 0210 	mvn.w	r2, #16
 8002404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2208      	movs	r2, #8
 800240a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f86f 	bl	80024fe <HAL_TIM_IC_CaptureCallback>
 8002420:	e005      	b.n	800242e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f862 	bl	80024ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f871 	bl	8002510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b01      	cmp	r3, #1
 8002440:	d10e      	bne.n	8002460 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b01      	cmp	r3, #1
 800244e:	d107      	bne.n	8002460 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0201 	mvn.w	r2, #1
 8002458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7fd ffe0 	bl	8000420 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800246a:	2b80      	cmp	r3, #128	; 0x80
 800246c:	d10e      	bne.n	800248c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002478:	2b80      	cmp	r3, #128	; 0x80
 800247a:	d107      	bne.n	800248c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f8bf 	bl	800260a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002496:	2b40      	cmp	r3, #64	; 0x40
 8002498:	d10e      	bne.n	80024b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a4:	2b40      	cmp	r3, #64	; 0x40
 80024a6:	d107      	bne.n	80024b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f835 	bl	8002522 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f003 0320 	and.w	r3, r3, #32
 80024c2:	2b20      	cmp	r3, #32
 80024c4:	d10e      	bne.n	80024e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f003 0320 	and.w	r3, r3, #32
 80024d0:	2b20      	cmp	r3, #32
 80024d2:	d107      	bne.n	80024e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f06f 0220 	mvn.w	r2, #32
 80024dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f88a 	bl	80025f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr

080024fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr

08002510 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr

08002522 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr

08002534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a29      	ldr	r2, [pc, #164]	; (80025ec <TIM_Base_SetConfig+0xb8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d00b      	beq.n	8002564 <TIM_Base_SetConfig+0x30>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002552:	d007      	beq.n	8002564 <TIM_Base_SetConfig+0x30>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a26      	ldr	r2, [pc, #152]	; (80025f0 <TIM_Base_SetConfig+0xbc>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d003      	beq.n	8002564 <TIM_Base_SetConfig+0x30>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a25      	ldr	r2, [pc, #148]	; (80025f4 <TIM_Base_SetConfig+0xc0>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d108      	bne.n	8002576 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800256a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	4313      	orrs	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a1c      	ldr	r2, [pc, #112]	; (80025ec <TIM_Base_SetConfig+0xb8>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d00b      	beq.n	8002596 <TIM_Base_SetConfig+0x62>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002584:	d007      	beq.n	8002596 <TIM_Base_SetConfig+0x62>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a19      	ldr	r2, [pc, #100]	; (80025f0 <TIM_Base_SetConfig+0xbc>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d003      	beq.n	8002596 <TIM_Base_SetConfig+0x62>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a18      	ldr	r2, [pc, #96]	; (80025f4 <TIM_Base_SetConfig+0xc0>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d108      	bne.n	80025a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800259c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a07      	ldr	r2, [pc, #28]	; (80025ec <TIM_Base_SetConfig+0xb8>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d103      	bne.n	80025dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	615a      	str	r2, [r3, #20]
}
 80025e2:	bf00      	nop
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr
 80025ec:	40012c00 	.word	0x40012c00
 80025f0:	40000400 	.word	0x40000400
 80025f4:	40000800 	.word	0x40000800

080025f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr

0800260a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002622:	f3ef 8305 	mrs	r3, IPSR
 8002626:	60bb      	str	r3, [r7, #8]
  return(result);
 8002628:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10f      	bne.n	800264e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800262e:	f3ef 8310 	mrs	r3, PRIMASK
 8002632:	607b      	str	r3, [r7, #4]
  return(result);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d109      	bne.n	800264e <osKernelInitialize+0x32>
 800263a:	4b10      	ldr	r3, [pc, #64]	; (800267c <osKernelInitialize+0x60>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d109      	bne.n	8002656 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002642:	f3ef 8311 	mrs	r3, BASEPRI
 8002646:	603b      	str	r3, [r7, #0]
  return(result);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800264e:	f06f 0305 	mvn.w	r3, #5
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	e00c      	b.n	8002670 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002656:	4b09      	ldr	r3, [pc, #36]	; (800267c <osKernelInitialize+0x60>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d105      	bne.n	800266a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800265e:	4b07      	ldr	r3, [pc, #28]	; (800267c <osKernelInitialize+0x60>)
 8002660:	2201      	movs	r2, #1
 8002662:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	e002      	b.n	8002670 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800266a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800266e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002670:	68fb      	ldr	r3, [r7, #12]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr
 800267c:	20000094 	.word	0x20000094

08002680 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002686:	f3ef 8305 	mrs	r3, IPSR
 800268a:	60bb      	str	r3, [r7, #8]
  return(result);
 800268c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10f      	bne.n	80026b2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002692:	f3ef 8310 	mrs	r3, PRIMASK
 8002696:	607b      	str	r3, [r7, #4]
  return(result);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d109      	bne.n	80026b2 <osKernelStart+0x32>
 800269e:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <osKernelStart+0x64>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d109      	bne.n	80026ba <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80026a6:	f3ef 8311 	mrs	r3, BASEPRI
 80026aa:	603b      	str	r3, [r7, #0]
  return(result);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <osKernelStart+0x3a>
    stat = osErrorISR;
 80026b2:	f06f 0305 	mvn.w	r3, #5
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	e00e      	b.n	80026d8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80026ba:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <osKernelStart+0x64>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d107      	bne.n	80026d2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80026c2:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <osKernelStart+0x64>)
 80026c4:	2202      	movs	r2, #2
 80026c6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80026c8:	f001 f864 	bl	8003794 <vTaskStartScheduler>
      stat = osOK;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	e002      	b.n	80026d8 <osKernelStart+0x58>
    } else {
      stat = osError;
 80026d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80026d8:	68fb      	ldr	r3, [r7, #12]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000094 	.word	0x20000094

080026e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b092      	sub	sp, #72	; 0x48
 80026ec:	af04      	add	r7, sp, #16
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026f8:	f3ef 8305 	mrs	r3, IPSR
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002700:	2b00      	cmp	r3, #0
 8002702:	f040 8094 	bne.w	800282e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002706:	f3ef 8310 	mrs	r3, PRIMASK
 800270a:	623b      	str	r3, [r7, #32]
  return(result);
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	2b00      	cmp	r3, #0
 8002710:	f040 808d 	bne.w	800282e <osThreadNew+0x146>
 8002714:	4b48      	ldr	r3, [pc, #288]	; (8002838 <osThreadNew+0x150>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b02      	cmp	r3, #2
 800271a:	d106      	bne.n	800272a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800271c:	f3ef 8311 	mrs	r3, BASEPRI
 8002720:	61fb      	str	r3, [r7, #28]
  return(result);
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	2b00      	cmp	r3, #0
 8002726:	f040 8082 	bne.w	800282e <osThreadNew+0x146>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d07e      	beq.n	800282e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002730:	2380      	movs	r3, #128	; 0x80
 8002732:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002734:	2318      	movs	r3, #24
 8002736:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002738:	2300      	movs	r3, #0
 800273a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800273c:	f107 031b 	add.w	r3, r7, #27
 8002740:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002742:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002746:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d045      	beq.n	80027da <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <osThreadNew+0x74>
        name = attr->name;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800276a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276c:	2b00      	cmp	r3, #0
 800276e:	d008      	beq.n	8002782 <osThreadNew+0x9a>
 8002770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002772:	2b38      	cmp	r3, #56	; 0x38
 8002774:	d805      	bhi.n	8002782 <osThreadNew+0x9a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <osThreadNew+0x9e>
        return (NULL);
 8002782:	2300      	movs	r3, #0
 8002784:	e054      	b.n	8002830 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	089b      	lsrs	r3, r3, #2
 8002794:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00e      	beq.n	80027bc <osThreadNew+0xd4>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	2b5b      	cmp	r3, #91	; 0x5b
 80027a4:	d90a      	bls.n	80027bc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d006      	beq.n	80027bc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d002      	beq.n	80027bc <osThreadNew+0xd4>
        mem = 1;
 80027b6:	2301      	movs	r3, #1
 80027b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ba:	e010      	b.n	80027de <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10c      	bne.n	80027de <osThreadNew+0xf6>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d108      	bne.n	80027de <osThreadNew+0xf6>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d104      	bne.n	80027de <osThreadNew+0xf6>
          mem = 0;
 80027d4:	2300      	movs	r3, #0
 80027d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80027d8:	e001      	b.n	80027de <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80027de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d110      	bne.n	8002806 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80027ec:	9202      	str	r2, [sp, #8]
 80027ee:	9301      	str	r3, [sp, #4]
 80027f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 fe02 	bl	8003404 <xTaskCreateStatic>
 8002800:	4603      	mov	r3, r0
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	e013      	b.n	800282e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002808:	2b00      	cmp	r3, #0
 800280a:	d110      	bne.n	800282e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800280c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280e:	b29a      	uxth	r2, r3
 8002810:	f107 0314 	add.w	r3, r7, #20
 8002814:	9301      	str	r3, [sp, #4]
 8002816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 fe49 	bl	80034b6 <xTaskCreate>
 8002824:	4603      	mov	r3, r0
 8002826:	2b01      	cmp	r3, #1
 8002828:	d001      	beq.n	800282e <osThreadNew+0x146>
          hTask = NULL;
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800282e:	697b      	ldr	r3, [r7, #20]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3738      	adds	r7, #56	; 0x38
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	20000094 	.word	0x20000094

0800283c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002844:	f3ef 8305 	mrs	r3, IPSR
 8002848:	613b      	str	r3, [r7, #16]
  return(result);
 800284a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10f      	bne.n	8002870 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002850:	f3ef 8310 	mrs	r3, PRIMASK
 8002854:	60fb      	str	r3, [r7, #12]
  return(result);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d109      	bne.n	8002870 <osDelay+0x34>
 800285c:	4b0d      	ldr	r3, [pc, #52]	; (8002894 <osDelay+0x58>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d109      	bne.n	8002878 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002864:	f3ef 8311 	mrs	r3, BASEPRI
 8002868:	60bb      	str	r3, [r7, #8]
  return(result);
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <osDelay+0x3c>
    stat = osErrorISR;
 8002870:	f06f 0305 	mvn.w	r3, #5
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	e007      	b.n	8002888 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002878:	2300      	movs	r3, #0
 800287a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d002      	beq.n	8002888 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 ff52 	bl	800372c <vTaskDelay>
    }
  }

  return (stat);
 8002888:	697b      	ldr	r3, [r7, #20]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3718      	adds	r7, #24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000094 	.word	0x20000094

08002898 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4a06      	ldr	r2, [pc, #24]	; (80028c0 <vApplicationGetIdleTaskMemory+0x28>)
 80028a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	4a05      	ldr	r2, [pc, #20]	; (80028c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80028ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2280      	movs	r2, #128	; 0x80
 80028b4:	601a      	str	r2, [r3, #0]
}
 80028b6:	bf00      	nop
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr
 80028c0:	20000098 	.word	0x20000098
 80028c4:	200000f4 	.word	0x200000f4

080028c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4a07      	ldr	r2, [pc, #28]	; (80028f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80028d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	4a06      	ldr	r2, [pc, #24]	; (80028f8 <vApplicationGetTimerTaskMemory+0x30>)
 80028de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028e6:	601a      	str	r2, [r3, #0]
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	200002f4 	.word	0x200002f4
 80028f8:	20000350 	.word	0x20000350

080028fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f103 0208 	add.w	r2, r3, #8
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002914:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f103 0208 	add.w	r2, r3, #8
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f103 0208 	add.w	r2, r3, #8
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr

0800293a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr

08002952 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002952:	b480      	push	{r7}
 8002954:	b085      	sub	sp, #20
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	601a      	str	r2, [r3, #0]
}
 800298e:	bf00      	nop
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029ae:	d103      	bne.n	80029b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	e00c      	b.n	80029d2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3308      	adds	r3, #8
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	e002      	b.n	80029c6 <vListInsert+0x2e>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d2f6      	bcs.n	80029c0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	601a      	str	r2, [r3, #0]
}
 80029fe:	bf00      	nop
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6892      	ldr	r2, [r2, #8]
 8002a1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6852      	ldr	r2, [r2, #4]
 8002a28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d103      	bne.n	8002a3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	1e5a      	subs	r2, r3, #1
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr
	...

08002a5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d109      	bne.n	8002a84 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a74:	f383 8811 	msr	BASEPRI, r3
 8002a78:	f3bf 8f6f 	isb	sy
 8002a7c:	f3bf 8f4f 	dsb	sy
 8002a80:	60bb      	str	r3, [r7, #8]
 8002a82:	e7fe      	b.n	8002a82 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002a84:	f001 ff98 	bl	80049b8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a90:	68f9      	ldr	r1, [r7, #12]
 8002a92:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a94:	fb01 f303 	mul.w	r3, r1, r3
 8002a98:	441a      	add	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	68f9      	ldr	r1, [r7, #12]
 8002ab8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002aba:	fb01 f303 	mul.w	r3, r1, r3
 8002abe:	441a      	add	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	22ff      	movs	r2, #255	; 0xff
 8002ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	22ff      	movs	r2, #255	; 0xff
 8002ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d114      	bne.n	8002b04 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d01a      	beq.n	8002b18 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	3310      	adds	r3, #16
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f001 f8d8 	bl	8003c9c <xTaskRemoveFromEventList>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d012      	beq.n	8002b18 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002af2:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <xQueueGenericReset+0xcc>)
 8002af4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	f3bf 8f4f 	dsb	sy
 8002afe:	f3bf 8f6f 	isb	sy
 8002b02:	e009      	b.n	8002b18 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	3310      	adds	r3, #16
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff fef7 	bl	80028fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	3324      	adds	r3, #36	; 0x24
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff fef2 	bl	80028fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b18:	f001 ff7c 	bl	8004a14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b1c:	2301      	movs	r3, #1
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	e000ed04 	.word	0xe000ed04

08002b2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08e      	sub	sp, #56	; 0x38
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
 8002b38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d109      	bne.n	8002b54 <xQueueGenericCreateStatic+0x28>
 8002b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b44:	f383 8811 	msr	BASEPRI, r3
 8002b48:	f3bf 8f6f 	isb	sy
 8002b4c:	f3bf 8f4f 	dsb	sy
 8002b50:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b52:	e7fe      	b.n	8002b52 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d109      	bne.n	8002b6e <xQueueGenericCreateStatic+0x42>
 8002b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5e:	f383 8811 	msr	BASEPRI, r3
 8002b62:	f3bf 8f6f 	isb	sy
 8002b66:	f3bf 8f4f 	dsb	sy
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b6c:	e7fe      	b.n	8002b6c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d002      	beq.n	8002b7a <xQueueGenericCreateStatic+0x4e>
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <xQueueGenericCreateStatic+0x52>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e000      	b.n	8002b80 <xQueueGenericCreateStatic+0x54>
 8002b7e:	2300      	movs	r3, #0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d109      	bne.n	8002b98 <xQueueGenericCreateStatic+0x6c>
 8002b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b88:	f383 8811 	msr	BASEPRI, r3
 8002b8c:	f3bf 8f6f 	isb	sy
 8002b90:	f3bf 8f4f 	dsb	sy
 8002b94:	623b      	str	r3, [r7, #32]
 8002b96:	e7fe      	b.n	8002b96 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d102      	bne.n	8002ba4 <xQueueGenericCreateStatic+0x78>
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <xQueueGenericCreateStatic+0x7c>
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e000      	b.n	8002baa <xQueueGenericCreateStatic+0x7e>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d109      	bne.n	8002bc2 <xQueueGenericCreateStatic+0x96>
 8002bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb2:	f383 8811 	msr	BASEPRI, r3
 8002bb6:	f3bf 8f6f 	isb	sy
 8002bba:	f3bf 8f4f 	dsb	sy
 8002bbe:	61fb      	str	r3, [r7, #28]
 8002bc0:	e7fe      	b.n	8002bc0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002bc2:	2350      	movs	r3, #80	; 0x50
 8002bc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	2b50      	cmp	r3, #80	; 0x50
 8002bca:	d009      	beq.n	8002be0 <xQueueGenericCreateStatic+0xb4>
 8002bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd0:	f383 8811 	msr	BASEPRI, r3
 8002bd4:	f3bf 8f6f 	isb	sy
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	61bb      	str	r3, [r7, #24]
 8002bde:	e7fe      	b.n	8002bde <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00d      	beq.n	8002c06 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002bf2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	68b9      	ldr	r1, [r7, #8]
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 f805 	bl	8002c10 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3730      	adds	r7, #48	; 0x30
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
 8002c1c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d103      	bne.n	8002c2c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	e002      	b.n	8002c32 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c3e:	2101      	movs	r1, #1
 8002c40:	69b8      	ldr	r0, [r7, #24]
 8002c42:	f7ff ff0b 	bl	8002a5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	78fa      	ldrb	r2, [r7, #3]
 8002c4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002c4e:	bf00      	nop
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08e      	sub	sp, #56	; 0x38
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
 8002c64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c66:	2300      	movs	r3, #0
 8002c68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d109      	bne.n	8002c88 <xQueueGenericSend+0x30>
 8002c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c78:	f383 8811 	msr	BASEPRI, r3
 8002c7c:	f3bf 8f6f 	isb	sy
 8002c80:	f3bf 8f4f 	dsb	sy
 8002c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c86:	e7fe      	b.n	8002c86 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d103      	bne.n	8002c96 <xQueueGenericSend+0x3e>
 8002c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <xQueueGenericSend+0x42>
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <xQueueGenericSend+0x44>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d109      	bne.n	8002cb4 <xQueueGenericSend+0x5c>
 8002ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca4:	f383 8811 	msr	BASEPRI, r3
 8002ca8:	f3bf 8f6f 	isb	sy
 8002cac:	f3bf 8f4f 	dsb	sy
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb2:	e7fe      	b.n	8002cb2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d103      	bne.n	8002cc2 <xQueueGenericSend+0x6a>
 8002cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <xQueueGenericSend+0x6e>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <xQueueGenericSend+0x70>
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d109      	bne.n	8002ce0 <xQueueGenericSend+0x88>
 8002ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd0:	f383 8811 	msr	BASEPRI, r3
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	623b      	str	r3, [r7, #32]
 8002cde:	e7fe      	b.n	8002cde <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ce0:	f001 f996 	bl	8004010 <xTaskGetSchedulerState>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d102      	bne.n	8002cf0 <xQueueGenericSend+0x98>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <xQueueGenericSend+0x9c>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <xQueueGenericSend+0x9e>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d109      	bne.n	8002d0e <xQueueGenericSend+0xb6>
 8002cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfe:	f383 8811 	msr	BASEPRI, r3
 8002d02:	f3bf 8f6f 	isb	sy
 8002d06:	f3bf 8f4f 	dsb	sy
 8002d0a:	61fb      	str	r3, [r7, #28]
 8002d0c:	e7fe      	b.n	8002d0c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d0e:	f001 fe53 	bl	80049b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d302      	bcc.n	8002d24 <xQueueGenericSend+0xcc>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d129      	bne.n	8002d78 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	68b9      	ldr	r1, [r7, #8]
 8002d28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d2a:	f000 f9ff 	bl	800312c <prvCopyDataToQueue>
 8002d2e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d010      	beq.n	8002d5a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3a:	3324      	adds	r3, #36	; 0x24
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 ffad 	bl	8003c9c <xTaskRemoveFromEventList>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d013      	beq.n	8002d70 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002d48:	4b3f      	ldr	r3, [pc, #252]	; (8002e48 <xQueueGenericSend+0x1f0>)
 8002d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	f3bf 8f4f 	dsb	sy
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	e00a      	b.n	8002d70 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d007      	beq.n	8002d70 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002d60:	4b39      	ldr	r3, [pc, #228]	; (8002e48 <xQueueGenericSend+0x1f0>)
 8002d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	f3bf 8f4f 	dsb	sy
 8002d6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d70:	f001 fe50 	bl	8004a14 <vPortExitCritical>
				return pdPASS;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e063      	b.n	8002e40 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d103      	bne.n	8002d86 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d7e:	f001 fe49 	bl	8004a14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d82:	2300      	movs	r3, #0
 8002d84:	e05c      	b.n	8002e40 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d106      	bne.n	8002d9a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d8c:	f107 0314 	add.w	r3, r7, #20
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 ffe5 	bl	8003d60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d96:	2301      	movs	r3, #1
 8002d98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d9a:	f001 fe3b 	bl	8004a14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d9e:	f000 fd5d 	bl	800385c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002da2:	f001 fe09 	bl	80049b8 <vPortEnterCritical>
 8002da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dac:	b25b      	sxtb	r3, r3
 8002dae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002db2:	d103      	bne.n	8002dbc <xQueueGenericSend+0x164>
 8002db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dc2:	b25b      	sxtb	r3, r3
 8002dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dc8:	d103      	bne.n	8002dd2 <xQueueGenericSend+0x17a>
 8002dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dd2:	f001 fe1f 	bl	8004a14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002dd6:	1d3a      	adds	r2, r7, #4
 8002dd8:	f107 0314 	add.w	r3, r7, #20
 8002ddc:	4611      	mov	r1, r2
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 ffd4 	bl	8003d8c <xTaskCheckForTimeOut>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d124      	bne.n	8002e34 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002dea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dec:	f000 fa96 	bl	800331c <prvIsQueueFull>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d018      	beq.n	8002e28 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df8:	3310      	adds	r3, #16
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	4611      	mov	r1, r2
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 fefe 	bl	8003c00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002e04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e06:	f000 fa21 	bl	800324c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002e0a:	f000 fd35 	bl	8003878 <xTaskResumeAll>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f47f af7c 	bne.w	8002d0e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002e16:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <xQueueGenericSend+0x1f0>)
 8002e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	f3bf 8f4f 	dsb	sy
 8002e22:	f3bf 8f6f 	isb	sy
 8002e26:	e772      	b.n	8002d0e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002e28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e2a:	f000 fa0f 	bl	800324c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e2e:	f000 fd23 	bl	8003878 <xTaskResumeAll>
 8002e32:	e76c      	b.n	8002d0e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002e34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e36:	f000 fa09 	bl	800324c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e3a:	f000 fd1d 	bl	8003878 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002e3e:	2300      	movs	r3, #0
		}
	}
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3738      	adds	r7, #56	; 0x38
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	e000ed04 	.word	0xe000ed04

08002e4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b08e      	sub	sp, #56	; 0x38
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
 8002e58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d109      	bne.n	8002e78 <xQueueGenericSendFromISR+0x2c>
 8002e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e68:	f383 8811 	msr	BASEPRI, r3
 8002e6c:	f3bf 8f6f 	isb	sy
 8002e70:	f3bf 8f4f 	dsb	sy
 8002e74:	627b      	str	r3, [r7, #36]	; 0x24
 8002e76:	e7fe      	b.n	8002e76 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d103      	bne.n	8002e86 <xQueueGenericSendFromISR+0x3a>
 8002e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <xQueueGenericSendFromISR+0x3e>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <xQueueGenericSendFromISR+0x40>
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d109      	bne.n	8002ea4 <xQueueGenericSendFromISR+0x58>
 8002e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e94:	f383 8811 	msr	BASEPRI, r3
 8002e98:	f3bf 8f6f 	isb	sy
 8002e9c:	f3bf 8f4f 	dsb	sy
 8002ea0:	623b      	str	r3, [r7, #32]
 8002ea2:	e7fe      	b.n	8002ea2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d103      	bne.n	8002eb2 <xQueueGenericSendFromISR+0x66>
 8002eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <xQueueGenericSendFromISR+0x6a>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <xQueueGenericSendFromISR+0x6c>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d109      	bne.n	8002ed0 <xQueueGenericSendFromISR+0x84>
 8002ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec0:	f383 8811 	msr	BASEPRI, r3
 8002ec4:	f3bf 8f6f 	isb	sy
 8002ec8:	f3bf 8f4f 	dsb	sy
 8002ecc:	61fb      	str	r3, [r7, #28]
 8002ece:	e7fe      	b.n	8002ece <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ed0:	f001 fe2c 	bl	8004b2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002ed4:	f3ef 8211 	mrs	r2, BASEPRI
 8002ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002edc:	f383 8811 	msr	BASEPRI, r3
 8002ee0:	f3bf 8f6f 	isb	sy
 8002ee4:	f3bf 8f4f 	dsb	sy
 8002ee8:	61ba      	str	r2, [r7, #24]
 8002eea:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002eec:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002eee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d302      	bcc.n	8002f02 <xQueueGenericSendFromISR+0xb6>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d12c      	bne.n	8002f5c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	68b9      	ldr	r1, [r7, #8]
 8002f10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f12:	f000 f90b 	bl	800312c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002f16:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002f1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f1e:	d112      	bne.n	8002f46 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d016      	beq.n	8002f56 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2a:	3324      	adds	r3, #36	; 0x24
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f000 feb5 	bl	8003c9c <xTaskRemoveFromEventList>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00e      	beq.n	8002f56 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00b      	beq.n	8002f56 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	e007      	b.n	8002f56 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	b25a      	sxtb	r2, r3
 8002f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002f56:	2301      	movs	r3, #1
 8002f58:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002f5a:	e001      	b.n	8002f60 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f62:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3738      	adds	r7, #56	; 0x38
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08c      	sub	sp, #48	; 0x30
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f80:	2300      	movs	r3, #0
 8002f82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d109      	bne.n	8002fa2 <xQueueReceive+0x2e>
	__asm volatile
 8002f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f92:	f383 8811 	msr	BASEPRI, r3
 8002f96:	f3bf 8f6f 	isb	sy
 8002f9a:	f3bf 8f4f 	dsb	sy
 8002f9e:	623b      	str	r3, [r7, #32]
 8002fa0:	e7fe      	b.n	8002fa0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d103      	bne.n	8002fb0 <xQueueReceive+0x3c>
 8002fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <xQueueReceive+0x40>
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e000      	b.n	8002fb6 <xQueueReceive+0x42>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d109      	bne.n	8002fce <xQueueReceive+0x5a>
 8002fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbe:	f383 8811 	msr	BASEPRI, r3
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	f3bf 8f4f 	dsb	sy
 8002fca:	61fb      	str	r3, [r7, #28]
 8002fcc:	e7fe      	b.n	8002fcc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fce:	f001 f81f 	bl	8004010 <xTaskGetSchedulerState>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d102      	bne.n	8002fde <xQueueReceive+0x6a>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <xQueueReceive+0x6e>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <xQueueReceive+0x70>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d109      	bne.n	8002ffc <xQueueReceive+0x88>
 8002fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fec:	f383 8811 	msr	BASEPRI, r3
 8002ff0:	f3bf 8f6f 	isb	sy
 8002ff4:	f3bf 8f4f 	dsb	sy
 8002ff8:	61bb      	str	r3, [r7, #24]
 8002ffa:	e7fe      	b.n	8002ffa <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ffc:	f001 fcdc 	bl	80049b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003004:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	2b00      	cmp	r3, #0
 800300a:	d01f      	beq.n	800304c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800300c:	68b9      	ldr	r1, [r7, #8]
 800300e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003010:	f000 f8f6 	bl	8003200 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	1e5a      	subs	r2, r3, #1
 8003018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800301c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00f      	beq.n	8003044 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003026:	3310      	adds	r3, #16
 8003028:	4618      	mov	r0, r3
 800302a:	f000 fe37 	bl	8003c9c <xTaskRemoveFromEventList>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d007      	beq.n	8003044 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003034:	4b3c      	ldr	r3, [pc, #240]	; (8003128 <xQueueReceive+0x1b4>)
 8003036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	f3bf 8f4f 	dsb	sy
 8003040:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003044:	f001 fce6 	bl	8004a14 <vPortExitCritical>
				return pdPASS;
 8003048:	2301      	movs	r3, #1
 800304a:	e069      	b.n	8003120 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d103      	bne.n	800305a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003052:	f001 fcdf 	bl	8004a14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003056:	2300      	movs	r3, #0
 8003058:	e062      	b.n	8003120 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800305a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305c:	2b00      	cmp	r3, #0
 800305e:	d106      	bne.n	800306e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003060:	f107 0310 	add.w	r3, r7, #16
 8003064:	4618      	mov	r0, r3
 8003066:	f000 fe7b 	bl	8003d60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800306a:	2301      	movs	r3, #1
 800306c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800306e:	f001 fcd1 	bl	8004a14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003072:	f000 fbf3 	bl	800385c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003076:	f001 fc9f 	bl	80049b8 <vPortEnterCritical>
 800307a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003080:	b25b      	sxtb	r3, r3
 8003082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003086:	d103      	bne.n	8003090 <xQueueReceive+0x11c>
 8003088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003092:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003096:	b25b      	sxtb	r3, r3
 8003098:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800309c:	d103      	bne.n	80030a6 <xQueueReceive+0x132>
 800309e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030a6:	f001 fcb5 	bl	8004a14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030aa:	1d3a      	adds	r2, r7, #4
 80030ac:	f107 0310 	add.w	r3, r7, #16
 80030b0:	4611      	mov	r1, r2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 fe6a 	bl	8003d8c <xTaskCheckForTimeOut>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d123      	bne.n	8003106 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030c0:	f000 f916 	bl	80032f0 <prvIsQueueEmpty>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d017      	beq.n	80030fa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030cc:	3324      	adds	r3, #36	; 0x24
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	4611      	mov	r1, r2
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 fd94 	bl	8003c00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80030d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030da:	f000 f8b7 	bl	800324c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80030de:	f000 fbcb 	bl	8003878 <xTaskResumeAll>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d189      	bne.n	8002ffc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80030e8:	4b0f      	ldr	r3, [pc, #60]	; (8003128 <xQueueReceive+0x1b4>)
 80030ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	f3bf 8f4f 	dsb	sy
 80030f4:	f3bf 8f6f 	isb	sy
 80030f8:	e780      	b.n	8002ffc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80030fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030fc:	f000 f8a6 	bl	800324c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003100:	f000 fbba 	bl	8003878 <xTaskResumeAll>
 8003104:	e77a      	b.n	8002ffc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003108:	f000 f8a0 	bl	800324c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800310c:	f000 fbb4 	bl	8003878 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003110:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003112:	f000 f8ed 	bl	80032f0 <prvIsQueueEmpty>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	f43f af6f 	beq.w	8002ffc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800311e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003120:	4618      	mov	r0, r3
 8003122:	3730      	adds	r7, #48	; 0x30
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	e000ed04 	.word	0xe000ed04

0800312c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003140:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10d      	bne.n	8003166 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d14d      	bne.n	80031ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	4618      	mov	r0, r3
 8003158:	f000 ff78 	bl	800404c <xTaskPriorityDisinherit>
 800315c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	605a      	str	r2, [r3, #4]
 8003164:	e043      	b.n	80031ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d119      	bne.n	80031a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6898      	ldr	r0, [r3, #8]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	461a      	mov	r2, r3
 8003176:	68b9      	ldr	r1, [r7, #8]
 8003178:	f001 ff12 	bl	8004fa0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	441a      	add	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	689a      	ldr	r2, [r3, #8]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	429a      	cmp	r2, r3
 8003194:	d32b      	bcc.n	80031ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	609a      	str	r2, [r3, #8]
 800319e:	e026      	b.n	80031ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	68d8      	ldr	r0, [r3, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	461a      	mov	r2, r3
 80031aa:	68b9      	ldr	r1, [r7, #8]
 80031ac:	f001 fef8 	bl	8004fa0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	68da      	ldr	r2, [r3, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	425b      	negs	r3, r3
 80031ba:	441a      	add	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d207      	bcs.n	80031dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	425b      	negs	r3, r3
 80031d6:	441a      	add	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d105      	bne.n	80031ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80031f6:	697b      	ldr	r3, [r7, #20]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	2b00      	cmp	r3, #0
 8003210:	d018      	beq.n	8003244 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68da      	ldr	r2, [r3, #12]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	441a      	add	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	429a      	cmp	r2, r3
 800322a:	d303      	bcc.n	8003234 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68d9      	ldr	r1, [r3, #12]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	461a      	mov	r2, r3
 800323e:	6838      	ldr	r0, [r7, #0]
 8003240:	f001 feae 	bl	8004fa0 <memcpy>
	}
}
 8003244:	bf00      	nop
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003254:	f001 fbb0 	bl	80049b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800325e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003260:	e011      	b.n	8003286 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	2b00      	cmp	r3, #0
 8003268:	d012      	beq.n	8003290 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3324      	adds	r3, #36	; 0x24
 800326e:	4618      	mov	r0, r3
 8003270:	f000 fd14 	bl	8003c9c <xTaskRemoveFromEventList>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800327a:	f000 fde7 	bl	8003e4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800327e:	7bfb      	ldrb	r3, [r7, #15]
 8003280:	3b01      	subs	r3, #1
 8003282:	b2db      	uxtb	r3, r3
 8003284:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800328a:	2b00      	cmp	r3, #0
 800328c:	dce9      	bgt.n	8003262 <prvUnlockQueue+0x16>
 800328e:	e000      	b.n	8003292 <prvUnlockQueue+0x46>
					break;
 8003290:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	22ff      	movs	r2, #255	; 0xff
 8003296:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800329a:	f001 fbbb 	bl	8004a14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800329e:	f001 fb8b 	bl	80049b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032aa:	e011      	b.n	80032d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d012      	beq.n	80032da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3310      	adds	r3, #16
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 fcef 	bl	8003c9c <xTaskRemoveFromEventList>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80032c4:	f000 fdc2 	bl	8003e4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80032c8:	7bbb      	ldrb	r3, [r7, #14]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	dce9      	bgt.n	80032ac <prvUnlockQueue+0x60>
 80032d8:	e000      	b.n	80032dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80032da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	22ff      	movs	r2, #255	; 0xff
 80032e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80032e4:	f001 fb96 	bl	8004a14 <vPortExitCritical>
}
 80032e8:	bf00      	nop
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80032f8:	f001 fb5e 	bl	80049b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003300:	2b00      	cmp	r3, #0
 8003302:	d102      	bne.n	800330a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003304:	2301      	movs	r3, #1
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	e001      	b.n	800330e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800330a:	2300      	movs	r3, #0
 800330c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800330e:	f001 fb81 	bl	8004a14 <vPortExitCritical>

	return xReturn;
 8003312:	68fb      	ldr	r3, [r7, #12]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003324:	f001 fb48 	bl	80049b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003330:	429a      	cmp	r2, r3
 8003332:	d102      	bne.n	800333a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003334:	2301      	movs	r3, #1
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	e001      	b.n	800333e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800333a:	2300      	movs	r3, #0
 800333c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800333e:	f001 fb69 	bl	8004a14 <vPortExitCritical>

	return xReturn;
 8003342:	68fb      	ldr	r3, [r7, #12]
}
 8003344:	4618      	mov	r0, r3
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003356:	2300      	movs	r3, #0
 8003358:	60fb      	str	r3, [r7, #12]
 800335a:	e014      	b.n	8003386 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800335c:	4a0e      	ldr	r2, [pc, #56]	; (8003398 <vQueueAddToRegistry+0x4c>)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10b      	bne.n	8003380 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003368:	490b      	ldr	r1, [pc, #44]	; (8003398 <vQueueAddToRegistry+0x4c>)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003372:	4a09      	ldr	r2, [pc, #36]	; (8003398 <vQueueAddToRegistry+0x4c>)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	4413      	add	r3, r2
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800337e:	e005      	b.n	800338c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	3301      	adds	r3, #1
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2b07      	cmp	r3, #7
 800338a:	d9e7      	bls.n	800335c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800338c:	bf00      	nop
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	20001c88 	.word	0x20001c88

0800339c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80033ac:	f001 fb04 	bl	80049b8 <vPortEnterCritical>
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033b6:	b25b      	sxtb	r3, r3
 80033b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033bc:	d103      	bne.n	80033c6 <vQueueWaitForMessageRestricted+0x2a>
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033cc:	b25b      	sxtb	r3, r3
 80033ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033d2:	d103      	bne.n	80033dc <vQueueWaitForMessageRestricted+0x40>
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033dc:	f001 fb1a 	bl	8004a14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d106      	bne.n	80033f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	3324      	adds	r3, #36	; 0x24
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	68b9      	ldr	r1, [r7, #8]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 fc29 	bl	8003c48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80033f6:	6978      	ldr	r0, [r7, #20]
 80033f8:	f7ff ff28 	bl	800324c <prvUnlockQueue>
	}
 80033fc:	bf00      	nop
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003404:	b580      	push	{r7, lr}
 8003406:	b08e      	sub	sp, #56	; 0x38
 8003408:	af04      	add	r7, sp, #16
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
 8003410:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003414:	2b00      	cmp	r3, #0
 8003416:	d109      	bne.n	800342c <xTaskCreateStatic+0x28>
 8003418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341c:	f383 8811 	msr	BASEPRI, r3
 8003420:	f3bf 8f6f 	isb	sy
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	623b      	str	r3, [r7, #32]
 800342a:	e7fe      	b.n	800342a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800342c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342e:	2b00      	cmp	r3, #0
 8003430:	d109      	bne.n	8003446 <xTaskCreateStatic+0x42>
 8003432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003436:	f383 8811 	msr	BASEPRI, r3
 800343a:	f3bf 8f6f 	isb	sy
 800343e:	f3bf 8f4f 	dsb	sy
 8003442:	61fb      	str	r3, [r7, #28]
 8003444:	e7fe      	b.n	8003444 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003446:	235c      	movs	r3, #92	; 0x5c
 8003448:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	2b5c      	cmp	r3, #92	; 0x5c
 800344e:	d009      	beq.n	8003464 <xTaskCreateStatic+0x60>
 8003450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003454:	f383 8811 	msr	BASEPRI, r3
 8003458:	f3bf 8f6f 	isb	sy
 800345c:	f3bf 8f4f 	dsb	sy
 8003460:	61bb      	str	r3, [r7, #24]
 8003462:	e7fe      	b.n	8003462 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003466:	2b00      	cmp	r3, #0
 8003468:	d01e      	beq.n	80034a8 <xTaskCreateStatic+0xa4>
 800346a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800346c:	2b00      	cmp	r3, #0
 800346e:	d01b      	beq.n	80034a8 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003472:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003478:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	2202      	movs	r2, #2
 800347e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003482:	2300      	movs	r3, #0
 8003484:	9303      	str	r3, [sp, #12]
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	9302      	str	r3, [sp, #8]
 800348a:	f107 0314 	add.w	r3, r7, #20
 800348e:	9301      	str	r3, [sp, #4]
 8003490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	68b9      	ldr	r1, [r7, #8]
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 f850 	bl	8003540 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034a2:	f000 f8d3 	bl	800364c <prvAddNewTaskToReadyList>
 80034a6:	e001      	b.n	80034ac <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80034ac:	697b      	ldr	r3, [r7, #20]
	}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3728      	adds	r7, #40	; 0x28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b08c      	sub	sp, #48	; 0x30
 80034ba:	af04      	add	r7, sp, #16
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	603b      	str	r3, [r7, #0]
 80034c2:	4613      	mov	r3, r2
 80034c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034c6:	88fb      	ldrh	r3, [r7, #6]
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4618      	mov	r0, r3
 80034cc:	f001 fb6a 	bl	8004ba4 <pvPortMalloc>
 80034d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00e      	beq.n	80034f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80034d8:	205c      	movs	r0, #92	; 0x5c
 80034da:	f001 fb63 	bl	8004ba4 <pvPortMalloc>
 80034de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30
 80034ec:	e005      	b.n	80034fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80034ee:	6978      	ldr	r0, [r7, #20]
 80034f0:	f001 fc1a 	bl	8004d28 <vPortFree>
 80034f4:	e001      	b.n	80034fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d017      	beq.n	8003530 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003508:	88fa      	ldrh	r2, [r7, #6]
 800350a:	2300      	movs	r3, #0
 800350c:	9303      	str	r3, [sp, #12]
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	9302      	str	r3, [sp, #8]
 8003512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003514:	9301      	str	r3, [sp, #4]
 8003516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68b9      	ldr	r1, [r7, #8]
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 f80e 	bl	8003540 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003524:	69f8      	ldr	r0, [r7, #28]
 8003526:	f000 f891 	bl	800364c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800352a:	2301      	movs	r3, #1
 800352c:	61bb      	str	r3, [r7, #24]
 800352e:	e002      	b.n	8003536 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003534:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003536:	69bb      	ldr	r3, [r7, #24]
	}
 8003538:	4618      	mov	r0, r3
 800353a:	3720      	adds	r7, #32
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b088      	sub	sp, #32
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
 800354c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800354e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003550:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	461a      	mov	r2, r3
 8003558:	21a5      	movs	r1, #165	; 0xa5
 800355a:	f001 fd2c 	bl	8004fb6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800355e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003568:	3b01      	subs	r3, #1
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	f023 0307 	bic.w	r3, r3, #7
 8003576:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	2b00      	cmp	r3, #0
 8003580:	d009      	beq.n	8003596 <prvInitialiseNewTask+0x56>
 8003582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003586:	f383 8811 	msr	BASEPRI, r3
 800358a:	f3bf 8f6f 	isb	sy
 800358e:	f3bf 8f4f 	dsb	sy
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	e7fe      	b.n	8003594 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003596:	2300      	movs	r3, #0
 8003598:	61fb      	str	r3, [r7, #28]
 800359a:	e012      	b.n	80035c2 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	4413      	add	r3, r2
 80035a2:	7819      	ldrb	r1, [r3, #0]
 80035a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	4413      	add	r3, r2
 80035aa:	3334      	adds	r3, #52	; 0x34
 80035ac:	460a      	mov	r2, r1
 80035ae:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	4413      	add	r3, r2
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d006      	beq.n	80035ca <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	3301      	adds	r3, #1
 80035c0:	61fb      	str	r3, [r7, #28]
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	2b0f      	cmp	r3, #15
 80035c6:	d9e9      	bls.n	800359c <prvInitialiseNewTask+0x5c>
 80035c8:	e000      	b.n	80035cc <prvInitialiseNewTask+0x8c>
		{
			break;
 80035ca:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80035cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80035d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d6:	2b37      	cmp	r3, #55	; 0x37
 80035d8:	d901      	bls.n	80035de <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80035da:	2337      	movs	r3, #55	; 0x37
 80035dc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80035de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035e2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80035e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035e8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80035ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ec:	2200      	movs	r2, #0
 80035ee:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80035f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f2:	3304      	adds	r3, #4
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff f9a0 	bl	800293a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80035fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fc:	3318      	adds	r3, #24
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff f99b 	bl	800293a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003608:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800360a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003612:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003618:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800361a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361c:	2200      	movs	r2, #0
 800361e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	68f9      	ldr	r1, [r7, #12]
 800362c:	69b8      	ldr	r0, [r7, #24]
 800362e:	f001 f8d7 	bl	80047e0 <pxPortInitialiseStack>
 8003632:	4602      	mov	r2, r0
 8003634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003636:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800363e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003642:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003644:	bf00      	nop
 8003646:	3720      	adds	r7, #32
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003654:	f001 f9b0 	bl	80049b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003658:	4b2d      	ldr	r3, [pc, #180]	; (8003710 <prvAddNewTaskToReadyList+0xc4>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3301      	adds	r3, #1
 800365e:	4a2c      	ldr	r2, [pc, #176]	; (8003710 <prvAddNewTaskToReadyList+0xc4>)
 8003660:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003662:	4b2c      	ldr	r3, [pc, #176]	; (8003714 <prvAddNewTaskToReadyList+0xc8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d109      	bne.n	800367e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800366a:	4a2a      	ldr	r2, [pc, #168]	; (8003714 <prvAddNewTaskToReadyList+0xc8>)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003670:	4b27      	ldr	r3, [pc, #156]	; (8003710 <prvAddNewTaskToReadyList+0xc4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d110      	bne.n	800369a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003678:	f000 fc0c 	bl	8003e94 <prvInitialiseTaskLists>
 800367c:	e00d      	b.n	800369a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800367e:	4b26      	ldr	r3, [pc, #152]	; (8003718 <prvAddNewTaskToReadyList+0xcc>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d109      	bne.n	800369a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003686:	4b23      	ldr	r3, [pc, #140]	; (8003714 <prvAddNewTaskToReadyList+0xc8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003690:	429a      	cmp	r2, r3
 8003692:	d802      	bhi.n	800369a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003694:	4a1f      	ldr	r2, [pc, #124]	; (8003714 <prvAddNewTaskToReadyList+0xc8>)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800369a:	4b20      	ldr	r3, [pc, #128]	; (800371c <prvAddNewTaskToReadyList+0xd0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	3301      	adds	r3, #1
 80036a0:	4a1e      	ldr	r2, [pc, #120]	; (800371c <prvAddNewTaskToReadyList+0xd0>)
 80036a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80036a4:	4b1d      	ldr	r3, [pc, #116]	; (800371c <prvAddNewTaskToReadyList+0xd0>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b0:	4b1b      	ldr	r3, [pc, #108]	; (8003720 <prvAddNewTaskToReadyList+0xd4>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d903      	bls.n	80036c0 <prvAddNewTaskToReadyList+0x74>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036bc:	4a18      	ldr	r2, [pc, #96]	; (8003720 <prvAddNewTaskToReadyList+0xd4>)
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c4:	4613      	mov	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4a15      	ldr	r2, [pc, #84]	; (8003724 <prvAddNewTaskToReadyList+0xd8>)
 80036ce:	441a      	add	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3304      	adds	r3, #4
 80036d4:	4619      	mov	r1, r3
 80036d6:	4610      	mov	r0, r2
 80036d8:	f7ff f93b 	bl	8002952 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80036dc:	f001 f99a 	bl	8004a14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80036e0:	4b0d      	ldr	r3, [pc, #52]	; (8003718 <prvAddNewTaskToReadyList+0xcc>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00e      	beq.n	8003706 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80036e8:	4b0a      	ldr	r3, [pc, #40]	; (8003714 <prvAddNewTaskToReadyList+0xc8>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d207      	bcs.n	8003706 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80036f6:	4b0c      	ldr	r3, [pc, #48]	; (8003728 <prvAddNewTaskToReadyList+0xdc>)
 80036f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	f3bf 8f4f 	dsb	sy
 8003702:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003706:	bf00      	nop
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	20000c24 	.word	0x20000c24
 8003714:	20000750 	.word	0x20000750
 8003718:	20000c30 	.word	0x20000c30
 800371c:	20000c40 	.word	0x20000c40
 8003720:	20000c2c 	.word	0x20000c2c
 8003724:	20000754 	.word	0x20000754
 8003728:	e000ed04 	.word	0xe000ed04

0800372c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003734:	2300      	movs	r3, #0
 8003736:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d016      	beq.n	800376c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800373e:	4b13      	ldr	r3, [pc, #76]	; (800378c <vTaskDelay+0x60>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d009      	beq.n	800375a <vTaskDelay+0x2e>
 8003746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374a:	f383 8811 	msr	BASEPRI, r3
 800374e:	f3bf 8f6f 	isb	sy
 8003752:	f3bf 8f4f 	dsb	sy
 8003756:	60bb      	str	r3, [r7, #8]
 8003758:	e7fe      	b.n	8003758 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800375a:	f000 f87f 	bl	800385c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800375e:	2100      	movs	r1, #0
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 fcdf 	bl	8004124 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003766:	f000 f887 	bl	8003878 <xTaskResumeAll>
 800376a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d107      	bne.n	8003782 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003772:	4b07      	ldr	r3, [pc, #28]	; (8003790 <vTaskDelay+0x64>)
 8003774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	f3bf 8f4f 	dsb	sy
 800377e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003782:	bf00      	nop
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	20000c4c 	.word	0x20000c4c
 8003790:	e000ed04 	.word	0xe000ed04

08003794 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b08a      	sub	sp, #40	; 0x28
 8003798:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800379a:	2300      	movs	r3, #0
 800379c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800379e:	2300      	movs	r3, #0
 80037a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80037a2:	463a      	mov	r2, r7
 80037a4:	1d39      	adds	r1, r7, #4
 80037a6:	f107 0308 	add.w	r3, r7, #8
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff f874 	bl	8002898 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80037b0:	6839      	ldr	r1, [r7, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	9202      	str	r2, [sp, #8]
 80037b8:	9301      	str	r3, [sp, #4]
 80037ba:	2300      	movs	r3, #0
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	2300      	movs	r3, #0
 80037c0:	460a      	mov	r2, r1
 80037c2:	4920      	ldr	r1, [pc, #128]	; (8003844 <vTaskStartScheduler+0xb0>)
 80037c4:	4820      	ldr	r0, [pc, #128]	; (8003848 <vTaskStartScheduler+0xb4>)
 80037c6:	f7ff fe1d 	bl	8003404 <xTaskCreateStatic>
 80037ca:	4602      	mov	r2, r0
 80037cc:	4b1f      	ldr	r3, [pc, #124]	; (800384c <vTaskStartScheduler+0xb8>)
 80037ce:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80037d0:	4b1e      	ldr	r3, [pc, #120]	; (800384c <vTaskStartScheduler+0xb8>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d002      	beq.n	80037de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80037d8:	2301      	movs	r3, #1
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	e001      	b.n	80037e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80037de:	2300      	movs	r3, #0
 80037e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d102      	bne.n	80037ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80037e8:	f000 fcf0 	bl	80041cc <xTimerCreateTimerTask>
 80037ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d115      	bne.n	8003820 <vTaskStartScheduler+0x8c>
 80037f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f8:	f383 8811 	msr	BASEPRI, r3
 80037fc:	f3bf 8f6f 	isb	sy
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003806:	4b12      	ldr	r3, [pc, #72]	; (8003850 <vTaskStartScheduler+0xbc>)
 8003808:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800380c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800380e:	4b11      	ldr	r3, [pc, #68]	; (8003854 <vTaskStartScheduler+0xc0>)
 8003810:	2201      	movs	r2, #1
 8003812:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003814:	4b10      	ldr	r3, [pc, #64]	; (8003858 <vTaskStartScheduler+0xc4>)
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800381a:	f001 f85d 	bl	80048d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800381e:	e00d      	b.n	800383c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003826:	d109      	bne.n	800383c <vTaskStartScheduler+0xa8>
 8003828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382c:	f383 8811 	msr	BASEPRI, r3
 8003830:	f3bf 8f6f 	isb	sy
 8003834:	f3bf 8f4f 	dsb	sy
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	e7fe      	b.n	800383a <vTaskStartScheduler+0xa6>
}
 800383c:	bf00      	nop
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	08005e14 	.word	0x08005e14
 8003848:	08003e65 	.word	0x08003e65
 800384c:	20000c48 	.word	0x20000c48
 8003850:	20000c44 	.word	0x20000c44
 8003854:	20000c30 	.word	0x20000c30
 8003858:	20000c28 	.word	0x20000c28

0800385c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003860:	4b04      	ldr	r3, [pc, #16]	; (8003874 <vTaskSuspendAll+0x18>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	3301      	adds	r3, #1
 8003866:	4a03      	ldr	r2, [pc, #12]	; (8003874 <vTaskSuspendAll+0x18>)
 8003868:	6013      	str	r3, [r2, #0]
}
 800386a:	bf00      	nop
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	20000c4c 	.word	0x20000c4c

08003878 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800387e:	2300      	movs	r3, #0
 8003880:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003882:	2300      	movs	r3, #0
 8003884:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003886:	4b41      	ldr	r3, [pc, #260]	; (800398c <xTaskResumeAll+0x114>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d109      	bne.n	80038a2 <xTaskResumeAll+0x2a>
 800388e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003892:	f383 8811 	msr	BASEPRI, r3
 8003896:	f3bf 8f6f 	isb	sy
 800389a:	f3bf 8f4f 	dsb	sy
 800389e:	603b      	str	r3, [r7, #0]
 80038a0:	e7fe      	b.n	80038a0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80038a2:	f001 f889 	bl	80049b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80038a6:	4b39      	ldr	r3, [pc, #228]	; (800398c <xTaskResumeAll+0x114>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	4a37      	ldr	r2, [pc, #220]	; (800398c <xTaskResumeAll+0x114>)
 80038ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038b0:	4b36      	ldr	r3, [pc, #216]	; (800398c <xTaskResumeAll+0x114>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d162      	bne.n	800397e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80038b8:	4b35      	ldr	r3, [pc, #212]	; (8003990 <xTaskResumeAll+0x118>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d05e      	beq.n	800397e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038c0:	e02f      	b.n	8003922 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80038c2:	4b34      	ldr	r3, [pc, #208]	; (8003994 <xTaskResumeAll+0x11c>)
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	3318      	adds	r3, #24
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff f89a 	bl	8002a08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	3304      	adds	r3, #4
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff f895 	bl	8002a08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e2:	4b2d      	ldr	r3, [pc, #180]	; (8003998 <xTaskResumeAll+0x120>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d903      	bls.n	80038f2 <xTaskResumeAll+0x7a>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	4a2a      	ldr	r2, [pc, #168]	; (8003998 <xTaskResumeAll+0x120>)
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f6:	4613      	mov	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4a27      	ldr	r2, [pc, #156]	; (800399c <xTaskResumeAll+0x124>)
 8003900:	441a      	add	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	3304      	adds	r3, #4
 8003906:	4619      	mov	r1, r3
 8003908:	4610      	mov	r0, r2
 800390a:	f7ff f822 	bl	8002952 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003912:	4b23      	ldr	r3, [pc, #140]	; (80039a0 <xTaskResumeAll+0x128>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003918:	429a      	cmp	r2, r3
 800391a:	d302      	bcc.n	8003922 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800391c:	4b21      	ldr	r3, [pc, #132]	; (80039a4 <xTaskResumeAll+0x12c>)
 800391e:	2201      	movs	r2, #1
 8003920:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003922:	4b1c      	ldr	r3, [pc, #112]	; (8003994 <xTaskResumeAll+0x11c>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1cb      	bne.n	80038c2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003930:	f000 fb4a 	bl	8003fc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003934:	4b1c      	ldr	r3, [pc, #112]	; (80039a8 <xTaskResumeAll+0x130>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d010      	beq.n	8003962 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003940:	f000 f844 	bl	80039cc <xTaskIncrementTick>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d002      	beq.n	8003950 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800394a:	4b16      	ldr	r3, [pc, #88]	; (80039a4 <xTaskResumeAll+0x12c>)
 800394c:	2201      	movs	r2, #1
 800394e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3b01      	subs	r3, #1
 8003954:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1f1      	bne.n	8003940 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800395c:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <xTaskResumeAll+0x130>)
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003962:	4b10      	ldr	r3, [pc, #64]	; (80039a4 <xTaskResumeAll+0x12c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d009      	beq.n	800397e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800396a:	2301      	movs	r3, #1
 800396c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800396e:	4b0f      	ldr	r3, [pc, #60]	; (80039ac <xTaskResumeAll+0x134>)
 8003970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800397e:	f001 f849 	bl	8004a14 <vPortExitCritical>

	return xAlreadyYielded;
 8003982:	68bb      	ldr	r3, [r7, #8]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20000c4c 	.word	0x20000c4c
 8003990:	20000c24 	.word	0x20000c24
 8003994:	20000be4 	.word	0x20000be4
 8003998:	20000c2c 	.word	0x20000c2c
 800399c:	20000754 	.word	0x20000754
 80039a0:	20000750 	.word	0x20000750
 80039a4:	20000c38 	.word	0x20000c38
 80039a8:	20000c34 	.word	0x20000c34
 80039ac:	e000ed04 	.word	0xe000ed04

080039b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80039b6:	4b04      	ldr	r3, [pc, #16]	; (80039c8 <xTaskGetTickCount+0x18>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80039bc:	687b      	ldr	r3, [r7, #4]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr
 80039c8:	20000c28 	.word	0x20000c28

080039cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80039d2:	2300      	movs	r3, #0
 80039d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039d6:	4b51      	ldr	r3, [pc, #324]	; (8003b1c <xTaskIncrementTick+0x150>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f040 808d 	bne.w	8003afa <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80039e0:	4b4f      	ldr	r3, [pc, #316]	; (8003b20 <xTaskIncrementTick+0x154>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	3301      	adds	r3, #1
 80039e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80039e8:	4a4d      	ldr	r2, [pc, #308]	; (8003b20 <xTaskIncrementTick+0x154>)
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d11f      	bne.n	8003a34 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80039f4:	4b4b      	ldr	r3, [pc, #300]	; (8003b24 <xTaskIncrementTick+0x158>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d009      	beq.n	8003a12 <xTaskIncrementTick+0x46>
 80039fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a02:	f383 8811 	msr	BASEPRI, r3
 8003a06:	f3bf 8f6f 	isb	sy
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	603b      	str	r3, [r7, #0]
 8003a10:	e7fe      	b.n	8003a10 <xTaskIncrementTick+0x44>
 8003a12:	4b44      	ldr	r3, [pc, #272]	; (8003b24 <xTaskIncrementTick+0x158>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	4b43      	ldr	r3, [pc, #268]	; (8003b28 <xTaskIncrementTick+0x15c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a41      	ldr	r2, [pc, #260]	; (8003b24 <xTaskIncrementTick+0x158>)
 8003a1e:	6013      	str	r3, [r2, #0]
 8003a20:	4a41      	ldr	r2, [pc, #260]	; (8003b28 <xTaskIncrementTick+0x15c>)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	4b41      	ldr	r3, [pc, #260]	; (8003b2c <xTaskIncrementTick+0x160>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	4a3f      	ldr	r2, [pc, #252]	; (8003b2c <xTaskIncrementTick+0x160>)
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	f000 faca 	bl	8003fc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a34:	4b3e      	ldr	r3, [pc, #248]	; (8003b30 <xTaskIncrementTick+0x164>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d34e      	bcc.n	8003adc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a3e:	4b39      	ldr	r3, [pc, #228]	; (8003b24 <xTaskIncrementTick+0x158>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <xTaskIncrementTick+0x80>
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e000      	b.n	8003a4e <xTaskIncrementTick+0x82>
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d004      	beq.n	8003a5c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a52:	4b37      	ldr	r3, [pc, #220]	; (8003b30 <xTaskIncrementTick+0x164>)
 8003a54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a58:	601a      	str	r2, [r3, #0]
					break;
 8003a5a:	e03f      	b.n	8003adc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a5c:	4b31      	ldr	r3, [pc, #196]	; (8003b24 <xTaskIncrementTick+0x158>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d203      	bcs.n	8003a7c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003a74:	4a2e      	ldr	r2, [pc, #184]	; (8003b30 <xTaskIncrementTick+0x164>)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6013      	str	r3, [r2, #0]
						break;
 8003a7a:	e02f      	b.n	8003adc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	3304      	adds	r3, #4
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fe ffc1 	bl	8002a08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d004      	beq.n	8003a98 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	3318      	adds	r3, #24
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fe ffb8 	bl	8002a08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a9c:	4b25      	ldr	r3, [pc, #148]	; (8003b34 <xTaskIncrementTick+0x168>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d903      	bls.n	8003aac <xTaskIncrementTick+0xe0>
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	4a22      	ldr	r2, [pc, #136]	; (8003b34 <xTaskIncrementTick+0x168>)
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4a1f      	ldr	r2, [pc, #124]	; (8003b38 <xTaskIncrementTick+0x16c>)
 8003aba:	441a      	add	r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	3304      	adds	r3, #4
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4610      	mov	r0, r2
 8003ac4:	f7fe ff45 	bl	8002952 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003acc:	4b1b      	ldr	r3, [pc, #108]	; (8003b3c <xTaskIncrementTick+0x170>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d3b3      	bcc.n	8003a3e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ada:	e7b0      	b.n	8003a3e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003adc:	4b17      	ldr	r3, [pc, #92]	; (8003b3c <xTaskIncrementTick+0x170>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae2:	4915      	ldr	r1, [pc, #84]	; (8003b38 <xTaskIncrementTick+0x16c>)
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d907      	bls.n	8003b04 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003af4:	2301      	movs	r3, #1
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	e004      	b.n	8003b04 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003afa:	4b11      	ldr	r3, [pc, #68]	; (8003b40 <xTaskIncrementTick+0x174>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	3301      	adds	r3, #1
 8003b00:	4a0f      	ldr	r2, [pc, #60]	; (8003b40 <xTaskIncrementTick+0x174>)
 8003b02:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003b04:	4b0f      	ldr	r3, [pc, #60]	; (8003b44 <xTaskIncrementTick+0x178>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003b10:	697b      	ldr	r3, [r7, #20]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20000c4c 	.word	0x20000c4c
 8003b20:	20000c28 	.word	0x20000c28
 8003b24:	20000bdc 	.word	0x20000bdc
 8003b28:	20000be0 	.word	0x20000be0
 8003b2c:	20000c3c 	.word	0x20000c3c
 8003b30:	20000c44 	.word	0x20000c44
 8003b34:	20000c2c 	.word	0x20000c2c
 8003b38:	20000754 	.word	0x20000754
 8003b3c:	20000750 	.word	0x20000750
 8003b40:	20000c34 	.word	0x20000c34
 8003b44:	20000c38 	.word	0x20000c38

08003b48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b4e:	4b27      	ldr	r3, [pc, #156]	; (8003bec <vTaskSwitchContext+0xa4>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003b56:	4b26      	ldr	r3, [pc, #152]	; (8003bf0 <vTaskSwitchContext+0xa8>)
 8003b58:	2201      	movs	r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003b5c:	e040      	b.n	8003be0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003b5e:	4b24      	ldr	r3, [pc, #144]	; (8003bf0 <vTaskSwitchContext+0xa8>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003b64:	4b23      	ldr	r3, [pc, #140]	; (8003bf4 <vTaskSwitchContext+0xac>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	e00f      	b.n	8003b8c <vTaskSwitchContext+0x44>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d109      	bne.n	8003b86 <vTaskSwitchContext+0x3e>
 8003b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b76:	f383 8811 	msr	BASEPRI, r3
 8003b7a:	f3bf 8f6f 	isb	sy
 8003b7e:	f3bf 8f4f 	dsb	sy
 8003b82:	607b      	str	r3, [r7, #4]
 8003b84:	e7fe      	b.n	8003b84 <vTaskSwitchContext+0x3c>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	60fb      	str	r3, [r7, #12]
 8003b8c:	491a      	ldr	r1, [pc, #104]	; (8003bf8 <vTaskSwitchContext+0xb0>)
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	4613      	mov	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0e5      	beq.n	8003b6c <vTaskSwitchContext+0x24>
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4a13      	ldr	r2, [pc, #76]	; (8003bf8 <vTaskSwitchContext+0xb0>)
 8003bac:	4413      	add	r3, r2
 8003bae:	60bb      	str	r3, [r7, #8]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	605a      	str	r2, [r3, #4]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	3308      	adds	r3, #8
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d104      	bne.n	8003bd0 <vTaskSwitchContext+0x88>
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	605a      	str	r2, [r3, #4]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	4a09      	ldr	r2, [pc, #36]	; (8003bfc <vTaskSwitchContext+0xb4>)
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	4a06      	ldr	r2, [pc, #24]	; (8003bf4 <vTaskSwitchContext+0xac>)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6013      	str	r3, [r2, #0]
}
 8003be0:	bf00      	nop
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bc80      	pop	{r7}
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	20000c4c 	.word	0x20000c4c
 8003bf0:	20000c38 	.word	0x20000c38
 8003bf4:	20000c2c 	.word	0x20000c2c
 8003bf8:	20000754 	.word	0x20000754
 8003bfc:	20000750 	.word	0x20000750

08003c00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d109      	bne.n	8003c24 <vTaskPlaceOnEventList+0x24>
 8003c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c14:	f383 8811 	msr	BASEPRI, r3
 8003c18:	f3bf 8f6f 	isb	sy
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	e7fe      	b.n	8003c22 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c24:	4b07      	ldr	r3, [pc, #28]	; (8003c44 <vTaskPlaceOnEventList+0x44>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3318      	adds	r3, #24
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7fe feb3 	bl	8002998 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c32:	2101      	movs	r1, #1
 8003c34:	6838      	ldr	r0, [r7, #0]
 8003c36:	f000 fa75 	bl	8004124 <prvAddCurrentTaskToDelayedList>
}
 8003c3a:	bf00      	nop
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000750 	.word	0x20000750

08003c48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d109      	bne.n	8003c6e <vTaskPlaceOnEventListRestricted+0x26>
 8003c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5e:	f383 8811 	msr	BASEPRI, r3
 8003c62:	f3bf 8f6f 	isb	sy
 8003c66:	f3bf 8f4f 	dsb	sy
 8003c6a:	617b      	str	r3, [r7, #20]
 8003c6c:	e7fe      	b.n	8003c6c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c6e:	4b0a      	ldr	r3, [pc, #40]	; (8003c98 <vTaskPlaceOnEventListRestricted+0x50>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	3318      	adds	r3, #24
 8003c74:	4619      	mov	r1, r3
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f7fe fe6b 	bl	8002952 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d002      	beq.n	8003c88 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8003c82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c86:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	68b8      	ldr	r0, [r7, #8]
 8003c8c:	f000 fa4a 	bl	8004124 <prvAddCurrentTaskToDelayedList>
	}
 8003c90:	bf00      	nop
 8003c92:	3718      	adds	r7, #24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	20000750 	.word	0x20000750

08003c9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d109      	bne.n	8003cc6 <xTaskRemoveFromEventList+0x2a>
 8003cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb6:	f383 8811 	msr	BASEPRI, r3
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	e7fe      	b.n	8003cc4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	3318      	adds	r3, #24
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fe fe9c 	bl	8002a08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cd0:	4b1d      	ldr	r3, [pc, #116]	; (8003d48 <xTaskRemoveFromEventList+0xac>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d11d      	bne.n	8003d14 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	3304      	adds	r3, #4
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fe fe93 	bl	8002a08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce6:	4b19      	ldr	r3, [pc, #100]	; (8003d4c <xTaskRemoveFromEventList+0xb0>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d903      	bls.n	8003cf6 <xTaskRemoveFromEventList+0x5a>
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf2:	4a16      	ldr	r2, [pc, #88]	; (8003d4c <xTaskRemoveFromEventList+0xb0>)
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4a13      	ldr	r2, [pc, #76]	; (8003d50 <xTaskRemoveFromEventList+0xb4>)
 8003d04:	441a      	add	r2, r3
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	3304      	adds	r3, #4
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	f7fe fe20 	bl	8002952 <vListInsertEnd>
 8003d12:	e005      	b.n	8003d20 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	3318      	adds	r3, #24
 8003d18:	4619      	mov	r1, r3
 8003d1a:	480e      	ldr	r0, [pc, #56]	; (8003d54 <xTaskRemoveFromEventList+0xb8>)
 8003d1c:	f7fe fe19 	bl	8002952 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d24:	4b0c      	ldr	r3, [pc, #48]	; (8003d58 <xTaskRemoveFromEventList+0xbc>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d905      	bls.n	8003d3a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003d32:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <xTaskRemoveFromEventList+0xc0>)
 8003d34:	2201      	movs	r2, #1
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	e001      	b.n	8003d3e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003d3e:	697b      	ldr	r3, [r7, #20]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	20000c4c 	.word	0x20000c4c
 8003d4c:	20000c2c 	.word	0x20000c2c
 8003d50:	20000754 	.word	0x20000754
 8003d54:	20000be4 	.word	0x20000be4
 8003d58:	20000750 	.word	0x20000750
 8003d5c:	20000c38 	.word	0x20000c38

08003d60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d68:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <vTaskInternalSetTimeOutState+0x24>)
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003d70:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <vTaskInternalSetTimeOutState+0x28>)
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	605a      	str	r2, [r3, #4]
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bc80      	pop	{r7}
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	20000c3c 	.word	0x20000c3c
 8003d88:	20000c28 	.word	0x20000c28

08003d8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b088      	sub	sp, #32
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d109      	bne.n	8003db0 <xTaskCheckForTimeOut+0x24>
 8003d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da0:	f383 8811 	msr	BASEPRI, r3
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	613b      	str	r3, [r7, #16]
 8003dae:	e7fe      	b.n	8003dae <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d109      	bne.n	8003dca <xTaskCheckForTimeOut+0x3e>
 8003db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	e7fe      	b.n	8003dc8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003dca:	f000 fdf5 	bl	80049b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003dce:	4b1d      	ldr	r3, [pc, #116]	; (8003e44 <xTaskCheckForTimeOut+0xb8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003de6:	d102      	bne.n	8003dee <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003de8:	2300      	movs	r3, #0
 8003dea:	61fb      	str	r3, [r7, #28]
 8003dec:	e023      	b.n	8003e36 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	4b15      	ldr	r3, [pc, #84]	; (8003e48 <xTaskCheckForTimeOut+0xbc>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d007      	beq.n	8003e0a <xTaskCheckForTimeOut+0x7e>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d302      	bcc.n	8003e0a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003e04:	2301      	movs	r3, #1
 8003e06:	61fb      	str	r3, [r7, #28]
 8003e08:	e015      	b.n	8003e36 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d20b      	bcs.n	8003e2c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	1ad2      	subs	r2, r2, r3
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7ff ff9d 	bl	8003d60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003e26:	2300      	movs	r3, #0
 8003e28:	61fb      	str	r3, [r7, #28]
 8003e2a:	e004      	b.n	8003e36 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003e32:	2301      	movs	r3, #1
 8003e34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003e36:	f000 fded 	bl	8004a14 <vPortExitCritical>

	return xReturn;
 8003e3a:	69fb      	ldr	r3, [r7, #28]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3720      	adds	r7, #32
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	20000c28 	.word	0x20000c28
 8003e48:	20000c3c 	.word	0x20000c3c

08003e4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003e50:	4b03      	ldr	r3, [pc, #12]	; (8003e60 <vTaskMissedYield+0x14>)
 8003e52:	2201      	movs	r2, #1
 8003e54:	601a      	str	r2, [r3, #0]
}
 8003e56:	bf00      	nop
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	20000c38 	.word	0x20000c38

08003e64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e6c:	f000 f852 	bl	8003f14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e70:	4b06      	ldr	r3, [pc, #24]	; (8003e8c <prvIdleTask+0x28>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d9f9      	bls.n	8003e6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e78:	4b05      	ldr	r3, [pc, #20]	; (8003e90 <prvIdleTask+0x2c>)
 8003e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e88:	e7f0      	b.n	8003e6c <prvIdleTask+0x8>
 8003e8a:	bf00      	nop
 8003e8c:	20000754 	.word	0x20000754
 8003e90:	e000ed04 	.word	0xe000ed04

08003e94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	607b      	str	r3, [r7, #4]
 8003e9e:	e00c      	b.n	8003eba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4a12      	ldr	r2, [pc, #72]	; (8003ef4 <prvInitialiseTaskLists+0x60>)
 8003eac:	4413      	add	r3, r2
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fe fd24 	bl	80028fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	607b      	str	r3, [r7, #4]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b37      	cmp	r3, #55	; 0x37
 8003ebe:	d9ef      	bls.n	8003ea0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ec0:	480d      	ldr	r0, [pc, #52]	; (8003ef8 <prvInitialiseTaskLists+0x64>)
 8003ec2:	f7fe fd1b 	bl	80028fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ec6:	480d      	ldr	r0, [pc, #52]	; (8003efc <prvInitialiseTaskLists+0x68>)
 8003ec8:	f7fe fd18 	bl	80028fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ecc:	480c      	ldr	r0, [pc, #48]	; (8003f00 <prvInitialiseTaskLists+0x6c>)
 8003ece:	f7fe fd15 	bl	80028fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003ed2:	480c      	ldr	r0, [pc, #48]	; (8003f04 <prvInitialiseTaskLists+0x70>)
 8003ed4:	f7fe fd12 	bl	80028fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ed8:	480b      	ldr	r0, [pc, #44]	; (8003f08 <prvInitialiseTaskLists+0x74>)
 8003eda:	f7fe fd0f 	bl	80028fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ede:	4b0b      	ldr	r3, [pc, #44]	; (8003f0c <prvInitialiseTaskLists+0x78>)
 8003ee0:	4a05      	ldr	r2, [pc, #20]	; (8003ef8 <prvInitialiseTaskLists+0x64>)
 8003ee2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ee4:	4b0a      	ldr	r3, [pc, #40]	; (8003f10 <prvInitialiseTaskLists+0x7c>)
 8003ee6:	4a05      	ldr	r2, [pc, #20]	; (8003efc <prvInitialiseTaskLists+0x68>)
 8003ee8:	601a      	str	r2, [r3, #0]
}
 8003eea:	bf00      	nop
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	20000754 	.word	0x20000754
 8003ef8:	20000bb4 	.word	0x20000bb4
 8003efc:	20000bc8 	.word	0x20000bc8
 8003f00:	20000be4 	.word	0x20000be4
 8003f04:	20000bf8 	.word	0x20000bf8
 8003f08:	20000c10 	.word	0x20000c10
 8003f0c:	20000bdc 	.word	0x20000bdc
 8003f10:	20000be0 	.word	0x20000be0

08003f14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f1a:	e019      	b.n	8003f50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003f1c:	f000 fd4c 	bl	80049b8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003f20:	4b0f      	ldr	r3, [pc, #60]	; (8003f60 <prvCheckTasksWaitingTermination+0x4c>)
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7fe fd6b 	bl	8002a08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003f32:	4b0c      	ldr	r3, [pc, #48]	; (8003f64 <prvCheckTasksWaitingTermination+0x50>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	3b01      	subs	r3, #1
 8003f38:	4a0a      	ldr	r2, [pc, #40]	; (8003f64 <prvCheckTasksWaitingTermination+0x50>)
 8003f3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003f3c:	4b0a      	ldr	r3, [pc, #40]	; (8003f68 <prvCheckTasksWaitingTermination+0x54>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3b01      	subs	r3, #1
 8003f42:	4a09      	ldr	r2, [pc, #36]	; (8003f68 <prvCheckTasksWaitingTermination+0x54>)
 8003f44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003f46:	f000 fd65 	bl	8004a14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f80e 	bl	8003f6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f50:	4b05      	ldr	r3, [pc, #20]	; (8003f68 <prvCheckTasksWaitingTermination+0x54>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e1      	bne.n	8003f1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f58:	bf00      	nop
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	20000bf8 	.word	0x20000bf8
 8003f64:	20000c24 	.word	0x20000c24
 8003f68:	20000c0c 	.word	0x20000c0c

08003f6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d108      	bne.n	8003f90 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 fed0 	bl	8004d28 <vPortFree>
				vPortFree( pxTCB );
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 fecd 	bl	8004d28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f8e:	e017      	b.n	8003fc0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d103      	bne.n	8003fa2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fec4 	bl	8004d28 <vPortFree>
	}
 8003fa0:	e00e      	b.n	8003fc0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d009      	beq.n	8003fc0 <prvDeleteTCB+0x54>
 8003fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb0:	f383 8811 	msr	BASEPRI, r3
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	e7fe      	b.n	8003fbe <prvDeleteTCB+0x52>
	}
 8003fc0:	bf00      	nop
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fce:	4b0e      	ldr	r3, [pc, #56]	; (8004008 <prvResetNextTaskUnblockTime+0x40>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d101      	bne.n	8003fdc <prvResetNextTaskUnblockTime+0x14>
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e000      	b.n	8003fde <prvResetNextTaskUnblockTime+0x16>
 8003fdc:	2300      	movs	r3, #0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d004      	beq.n	8003fec <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003fe2:	4b0a      	ldr	r3, [pc, #40]	; (800400c <prvResetNextTaskUnblockTime+0x44>)
 8003fe4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fe8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003fea:	e008      	b.n	8003ffe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003fec:	4b06      	ldr	r3, [pc, #24]	; (8004008 <prvResetNextTaskUnblockTime+0x40>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	4a04      	ldr	r2, [pc, #16]	; (800400c <prvResetNextTaskUnblockTime+0x44>)
 8003ffc:	6013      	str	r3, [r2, #0]
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	bc80      	pop	{r7}
 8004006:	4770      	bx	lr
 8004008:	20000bdc 	.word	0x20000bdc
 800400c:	20000c44 	.word	0x20000c44

08004010 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004016:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <xTaskGetSchedulerState+0x34>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d102      	bne.n	8004024 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800401e:	2301      	movs	r3, #1
 8004020:	607b      	str	r3, [r7, #4]
 8004022:	e008      	b.n	8004036 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004024:	4b08      	ldr	r3, [pc, #32]	; (8004048 <xTaskGetSchedulerState+0x38>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d102      	bne.n	8004032 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800402c:	2302      	movs	r3, #2
 800402e:	607b      	str	r3, [r7, #4]
 8004030:	e001      	b.n	8004036 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004032:	2300      	movs	r3, #0
 8004034:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004036:	687b      	ldr	r3, [r7, #4]
	}
 8004038:	4618      	mov	r0, r3
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	bc80      	pop	{r7}
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	20000c30 	.word	0x20000c30
 8004048:	20000c4c 	.word	0x20000c4c

0800404c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004058:	2300      	movs	r3, #0
 800405a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d054      	beq.n	800410c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004062:	4b2d      	ldr	r3, [pc, #180]	; (8004118 <xTaskPriorityDisinherit+0xcc>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	429a      	cmp	r2, r3
 800406a:	d009      	beq.n	8004080 <xTaskPriorityDisinherit+0x34>
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	e7fe      	b.n	800407e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004084:	2b00      	cmp	r3, #0
 8004086:	d109      	bne.n	800409c <xTaskPriorityDisinherit+0x50>
 8004088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408c:	f383 8811 	msr	BASEPRI, r3
 8004090:	f3bf 8f6f 	isb	sy
 8004094:	f3bf 8f4f 	dsb	sy
 8004098:	60bb      	str	r3, [r7, #8]
 800409a:	e7fe      	b.n	800409a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a0:	1e5a      	subs	r2, r3, #1
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d02c      	beq.n	800410c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d128      	bne.n	800410c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	3304      	adds	r3, #4
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fe fca2 	bl	8002a08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040dc:	4b0f      	ldr	r3, [pc, #60]	; (800411c <xTaskPriorityDisinherit+0xd0>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d903      	bls.n	80040ec <xTaskPriorityDisinherit+0xa0>
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	4a0c      	ldr	r2, [pc, #48]	; (800411c <xTaskPriorityDisinherit+0xd0>)
 80040ea:	6013      	str	r3, [r2, #0]
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f0:	4613      	mov	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4a09      	ldr	r2, [pc, #36]	; (8004120 <xTaskPriorityDisinherit+0xd4>)
 80040fa:	441a      	add	r2, r3
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	3304      	adds	r3, #4
 8004100:	4619      	mov	r1, r3
 8004102:	4610      	mov	r0, r2
 8004104:	f7fe fc25 	bl	8002952 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004108:	2301      	movs	r3, #1
 800410a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800410c:	697b      	ldr	r3, [r7, #20]
	}
 800410e:	4618      	mov	r0, r3
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	20000750 	.word	0x20000750
 800411c:	20000c2c 	.word	0x20000c2c
 8004120:	20000754 	.word	0x20000754

08004124 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800412e:	4b21      	ldr	r3, [pc, #132]	; (80041b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004134:	4b20      	ldr	r3, [pc, #128]	; (80041b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	3304      	adds	r3, #4
 800413a:	4618      	mov	r0, r3
 800413c:	f7fe fc64 	bl	8002a08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004146:	d10a      	bne.n	800415e <prvAddCurrentTaskToDelayedList+0x3a>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d007      	beq.n	800415e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800414e:	4b1a      	ldr	r3, [pc, #104]	; (80041b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3304      	adds	r3, #4
 8004154:	4619      	mov	r1, r3
 8004156:	4819      	ldr	r0, [pc, #100]	; (80041bc <prvAddCurrentTaskToDelayedList+0x98>)
 8004158:	f7fe fbfb 	bl	8002952 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800415c:	e026      	b.n	80041ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4413      	add	r3, r2
 8004164:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004166:	4b14      	ldr	r3, [pc, #80]	; (80041b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	429a      	cmp	r2, r3
 8004174:	d209      	bcs.n	800418a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004176:	4b12      	ldr	r3, [pc, #72]	; (80041c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	4b0f      	ldr	r3, [pc, #60]	; (80041b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3304      	adds	r3, #4
 8004180:	4619      	mov	r1, r3
 8004182:	4610      	mov	r0, r2
 8004184:	f7fe fc08 	bl	8002998 <vListInsert>
}
 8004188:	e010      	b.n	80041ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800418a:	4b0e      	ldr	r3, [pc, #56]	; (80041c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	4b0a      	ldr	r3, [pc, #40]	; (80041b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	3304      	adds	r3, #4
 8004194:	4619      	mov	r1, r3
 8004196:	4610      	mov	r0, r2
 8004198:	f7fe fbfe 	bl	8002998 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800419c:	4b0a      	ldr	r3, [pc, #40]	; (80041c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68ba      	ldr	r2, [r7, #8]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d202      	bcs.n	80041ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80041a6:	4a08      	ldr	r2, [pc, #32]	; (80041c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	6013      	str	r3, [r2, #0]
}
 80041ac:	bf00      	nop
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	20000c28 	.word	0x20000c28
 80041b8:	20000750 	.word	0x20000750
 80041bc:	20000c10 	.word	0x20000c10
 80041c0:	20000be0 	.word	0x20000be0
 80041c4:	20000bdc 	.word	0x20000bdc
 80041c8:	20000c44 	.word	0x20000c44

080041cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b08a      	sub	sp, #40	; 0x28
 80041d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80041d2:	2300      	movs	r3, #0
 80041d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80041d6:	f000 fac3 	bl	8004760 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80041da:	4b1c      	ldr	r3, [pc, #112]	; (800424c <xTimerCreateTimerTask+0x80>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d021      	beq.n	8004226 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80041e2:	2300      	movs	r3, #0
 80041e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80041e6:	2300      	movs	r3, #0
 80041e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80041ea:	1d3a      	adds	r2, r7, #4
 80041ec:	f107 0108 	add.w	r1, r7, #8
 80041f0:	f107 030c 	add.w	r3, r7, #12
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fe fb67 	bl	80028c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	9202      	str	r2, [sp, #8]
 8004202:	9301      	str	r3, [sp, #4]
 8004204:	2302      	movs	r3, #2
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	2300      	movs	r3, #0
 800420a:	460a      	mov	r2, r1
 800420c:	4910      	ldr	r1, [pc, #64]	; (8004250 <xTimerCreateTimerTask+0x84>)
 800420e:	4811      	ldr	r0, [pc, #68]	; (8004254 <xTimerCreateTimerTask+0x88>)
 8004210:	f7ff f8f8 	bl	8003404 <xTaskCreateStatic>
 8004214:	4602      	mov	r2, r0
 8004216:	4b10      	ldr	r3, [pc, #64]	; (8004258 <xTimerCreateTimerTask+0x8c>)
 8004218:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800421a:	4b0f      	ldr	r3, [pc, #60]	; (8004258 <xTimerCreateTimerTask+0x8c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004222:	2301      	movs	r3, #1
 8004224:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d109      	bne.n	8004240 <xTimerCreateTimerTask+0x74>
 800422c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004230:	f383 8811 	msr	BASEPRI, r3
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	f3bf 8f4f 	dsb	sy
 800423c:	613b      	str	r3, [r7, #16]
 800423e:	e7fe      	b.n	800423e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004240:	697b      	ldr	r3, [r7, #20]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	20000c80 	.word	0x20000c80
 8004250:	08005e1c 	.word	0x08005e1c
 8004254:	08004375 	.word	0x08004375
 8004258:	20000c84 	.word	0x20000c84

0800425c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08a      	sub	sp, #40	; 0x28
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
 8004268:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800426a:	2300      	movs	r3, #0
 800426c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d109      	bne.n	8004288 <xTimerGenericCommand+0x2c>
 8004274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004278:	f383 8811 	msr	BASEPRI, r3
 800427c:	f3bf 8f6f 	isb	sy
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	623b      	str	r3, [r7, #32]
 8004286:	e7fe      	b.n	8004286 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004288:	4b19      	ldr	r3, [pc, #100]	; (80042f0 <xTimerGenericCommand+0x94>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d02a      	beq.n	80042e6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b05      	cmp	r3, #5
 80042a0:	dc18      	bgt.n	80042d4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80042a2:	f7ff feb5 	bl	8004010 <xTaskGetSchedulerState>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d109      	bne.n	80042c0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80042ac:	4b10      	ldr	r3, [pc, #64]	; (80042f0 <xTimerGenericCommand+0x94>)
 80042ae:	6818      	ldr	r0, [r3, #0]
 80042b0:	f107 0110 	add.w	r1, r7, #16
 80042b4:	2300      	movs	r3, #0
 80042b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042b8:	f7fe fcce 	bl	8002c58 <xQueueGenericSend>
 80042bc:	6278      	str	r0, [r7, #36]	; 0x24
 80042be:	e012      	b.n	80042e6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80042c0:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <xTimerGenericCommand+0x94>)
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	f107 0110 	add.w	r1, r7, #16
 80042c8:	2300      	movs	r3, #0
 80042ca:	2200      	movs	r2, #0
 80042cc:	f7fe fcc4 	bl	8002c58 <xQueueGenericSend>
 80042d0:	6278      	str	r0, [r7, #36]	; 0x24
 80042d2:	e008      	b.n	80042e6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80042d4:	4b06      	ldr	r3, [pc, #24]	; (80042f0 <xTimerGenericCommand+0x94>)
 80042d6:	6818      	ldr	r0, [r3, #0]
 80042d8:	f107 0110 	add.w	r1, r7, #16
 80042dc:	2300      	movs	r3, #0
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	f7fe fdb4 	bl	8002e4c <xQueueGenericSendFromISR>
 80042e4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3728      	adds	r7, #40	; 0x28
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	20000c80 	.word	0x20000c80

080042f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b088      	sub	sp, #32
 80042f8:	af02      	add	r7, sp, #8
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042fe:	4b1c      	ldr	r3, [pc, #112]	; (8004370 <prvProcessExpiredTimer+0x7c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	3304      	adds	r3, #4
 800430c:	4618      	mov	r0, r3
 800430e:	f7fe fb7b 	bl	8002a08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d121      	bne.n	800435e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	699a      	ldr	r2, [r3, #24]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	18d1      	adds	r1, r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	6978      	ldr	r0, [r7, #20]
 8004328:	f000 f8c8 	bl	80044bc <prvInsertTimerInActiveList>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d015      	beq.n	800435e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004332:	2300      	movs	r3, #0
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	2300      	movs	r3, #0
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	2100      	movs	r1, #0
 800433c:	6978      	ldr	r0, [r7, #20]
 800433e:	f7ff ff8d 	bl	800425c <xTimerGenericCommand>
 8004342:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d109      	bne.n	800435e <prvProcessExpiredTimer+0x6a>
 800434a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	e7fe      	b.n	800435c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	6978      	ldr	r0, [r7, #20]
 8004364:	4798      	blx	r3
}
 8004366:	bf00      	nop
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	20000c78 	.word	0x20000c78

08004374 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800437c:	f107 0308 	add.w	r3, r7, #8
 8004380:	4618      	mov	r0, r3
 8004382:	f000 f857 	bl	8004434 <prvGetNextExpireTime>
 8004386:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	4619      	mov	r1, r3
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 f803 	bl	8004398 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004392:	f000 f8d5 	bl	8004540 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004396:	e7f1      	b.n	800437c <prvTimerTask+0x8>

08004398 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80043a2:	f7ff fa5b 	bl	800385c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80043a6:	f107 0308 	add.w	r3, r7, #8
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 f866 	bl	800447c <prvSampleTimeNow>
 80043b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d130      	bne.n	800441a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10a      	bne.n	80043d4 <prvProcessTimerOrBlockTask+0x3c>
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d806      	bhi.n	80043d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80043c6:	f7ff fa57 	bl	8003878 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80043ca:	68f9      	ldr	r1, [r7, #12]
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f7ff ff91 	bl	80042f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80043d2:	e024      	b.n	800441e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d008      	beq.n	80043ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80043da:	4b13      	ldr	r3, [pc, #76]	; (8004428 <prvProcessTimerOrBlockTask+0x90>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	bf0c      	ite	eq
 80043e4:	2301      	moveq	r3, #1
 80043e6:	2300      	movne	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80043ec:	4b0f      	ldr	r3, [pc, #60]	; (800442c <prvProcessTimerOrBlockTask+0x94>)
 80043ee:	6818      	ldr	r0, [r3, #0]
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	4619      	mov	r1, r3
 80043fa:	f7fe ffcf 	bl	800339c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80043fe:	f7ff fa3b 	bl	8003878 <xTaskResumeAll>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10a      	bne.n	800441e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004408:	4b09      	ldr	r3, [pc, #36]	; (8004430 <prvProcessTimerOrBlockTask+0x98>)
 800440a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	f3bf 8f6f 	isb	sy
}
 8004418:	e001      	b.n	800441e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800441a:	f7ff fa2d 	bl	8003878 <xTaskResumeAll>
}
 800441e:	bf00      	nop
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	20000c7c 	.word	0x20000c7c
 800442c:	20000c80 	.word	0x20000c80
 8004430:	e000ed04 	.word	0xe000ed04

08004434 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800443c:	4b0e      	ldr	r3, [pc, #56]	; (8004478 <prvGetNextExpireTime+0x44>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	bf0c      	ite	eq
 8004446:	2301      	moveq	r3, #1
 8004448:	2300      	movne	r3, #0
 800444a:	b2db      	uxtb	r3, r3
 800444c:	461a      	mov	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d105      	bne.n	8004466 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800445a:	4b07      	ldr	r3, [pc, #28]	; (8004478 <prvGetNextExpireTime+0x44>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	e001      	b.n	800446a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004466:	2300      	movs	r3, #0
 8004468:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800446a:	68fb      	ldr	r3, [r7, #12]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	bc80      	pop	{r7}
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	20000c78 	.word	0x20000c78

0800447c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004484:	f7ff fa94 	bl	80039b0 <xTaskGetTickCount>
 8004488:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800448a:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <prvSampleTimeNow+0x3c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	429a      	cmp	r2, r3
 8004492:	d205      	bcs.n	80044a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004494:	f000 f904 	bl	80046a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	e002      	b.n	80044a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80044a6:	4a04      	ldr	r2, [pc, #16]	; (80044b8 <prvSampleTimeNow+0x3c>)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80044ac:	68fb      	ldr	r3, [r7, #12]
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	20000c88 	.word	0x20000c88

080044bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
 80044c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80044ca:	2300      	movs	r3, #0
 80044cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d812      	bhi.n	8004508 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	1ad2      	subs	r2, r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d302      	bcc.n	80044f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80044f0:	2301      	movs	r3, #1
 80044f2:	617b      	str	r3, [r7, #20]
 80044f4:	e01b      	b.n	800452e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80044f6:	4b10      	ldr	r3, [pc, #64]	; (8004538 <prvInsertTimerInActiveList+0x7c>)
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	3304      	adds	r3, #4
 80044fe:	4619      	mov	r1, r3
 8004500:	4610      	mov	r0, r2
 8004502:	f7fe fa49 	bl	8002998 <vListInsert>
 8004506:	e012      	b.n	800452e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	429a      	cmp	r2, r3
 800450e:	d206      	bcs.n	800451e <prvInsertTimerInActiveList+0x62>
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	429a      	cmp	r2, r3
 8004516:	d302      	bcc.n	800451e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004518:	2301      	movs	r3, #1
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	e007      	b.n	800452e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800451e:	4b07      	ldr	r3, [pc, #28]	; (800453c <prvInsertTimerInActiveList+0x80>)
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	3304      	adds	r3, #4
 8004526:	4619      	mov	r1, r3
 8004528:	4610      	mov	r0, r2
 800452a:	f7fe fa35 	bl	8002998 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800452e:	697b      	ldr	r3, [r7, #20]
}
 8004530:	4618      	mov	r0, r3
 8004532:	3718      	adds	r7, #24
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	20000c7c 	.word	0x20000c7c
 800453c:	20000c78 	.word	0x20000c78

08004540 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b08e      	sub	sp, #56	; 0x38
 8004544:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004546:	e099      	b.n	800467c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	da17      	bge.n	800457e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800454e:	1d3b      	adds	r3, r7, #4
 8004550:	3304      	adds	r3, #4
 8004552:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004556:	2b00      	cmp	r3, #0
 8004558:	d109      	bne.n	800456e <prvProcessReceivedCommands+0x2e>
 800455a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455e:	f383 8811 	msr	BASEPRI, r3
 8004562:	f3bf 8f6f 	isb	sy
 8004566:	f3bf 8f4f 	dsb	sy
 800456a:	61fb      	str	r3, [r7, #28]
 800456c:	e7fe      	b.n	800456c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800456e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004574:	6850      	ldr	r0, [r2, #4]
 8004576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004578:	6892      	ldr	r2, [r2, #8]
 800457a:	4611      	mov	r1, r2
 800457c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	db7a      	blt.n	800467a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d004      	beq.n	800459a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004592:	3304      	adds	r3, #4
 8004594:	4618      	mov	r0, r3
 8004596:	f7fe fa37 	bl	8002a08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800459a:	463b      	mov	r3, r7
 800459c:	4618      	mov	r0, r3
 800459e:	f7ff ff6d 	bl	800447c <prvSampleTimeNow>
 80045a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b09      	cmp	r3, #9
 80045a8:	d868      	bhi.n	800467c <prvProcessReceivedCommands+0x13c>
 80045aa:	a201      	add	r2, pc, #4	; (adr r2, 80045b0 <prvProcessReceivedCommands+0x70>)
 80045ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b0:	080045d9 	.word	0x080045d9
 80045b4:	080045d9 	.word	0x080045d9
 80045b8:	080045d9 	.word	0x080045d9
 80045bc:	0800467d 	.word	0x0800467d
 80045c0:	08004633 	.word	0x08004633
 80045c4:	08004669 	.word	0x08004669
 80045c8:	080045d9 	.word	0x080045d9
 80045cc:	080045d9 	.word	0x080045d9
 80045d0:	0800467d 	.word	0x0800467d
 80045d4:	08004633 	.word	0x08004633
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	18d1      	adds	r1, r2, r3
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045e6:	f7ff ff69 	bl	80044bc <prvInsertTimerInActiveList>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d045      	beq.n	800467c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045f6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80045f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d13d      	bne.n	800467c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	441a      	add	r2, r3
 8004608:	2300      	movs	r3, #0
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	2300      	movs	r3, #0
 800460e:	2100      	movs	r1, #0
 8004610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004612:	f7ff fe23 	bl	800425c <xTimerGenericCommand>
 8004616:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d12e      	bne.n	800467c <prvProcessReceivedCommands+0x13c>
 800461e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004622:	f383 8811 	msr	BASEPRI, r3
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	61bb      	str	r3, [r7, #24]
 8004630:	e7fe      	b.n	8004630 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004636:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d109      	bne.n	8004654 <prvProcessReceivedCommands+0x114>
 8004640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004644:	f383 8811 	msr	BASEPRI, r3
 8004648:	f3bf 8f6f 	isb	sy
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	617b      	str	r3, [r7, #20]
 8004652:	e7fe      	b.n	8004652 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004656:	699a      	ldr	r2, [r3, #24]
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	18d1      	adds	r1, r2, r3
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004662:	f7ff ff2b 	bl	80044bc <prvInsertTimerInActiveList>
					break;
 8004666:	e009      	b.n	800467c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800466e:	2b00      	cmp	r3, #0
 8004670:	d104      	bne.n	800467c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8004672:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004674:	f000 fb58 	bl	8004d28 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004678:	e000      	b.n	800467c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800467a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800467c:	4b07      	ldr	r3, [pc, #28]	; (800469c <prvProcessReceivedCommands+0x15c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	1d39      	adds	r1, r7, #4
 8004682:	2200      	movs	r2, #0
 8004684:	4618      	mov	r0, r3
 8004686:	f7fe fc75 	bl	8002f74 <xQueueReceive>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	f47f af5b 	bne.w	8004548 <prvProcessReceivedCommands+0x8>
	}
}
 8004692:	bf00      	nop
 8004694:	3730      	adds	r7, #48	; 0x30
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	20000c80 	.word	0x20000c80

080046a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b088      	sub	sp, #32
 80046a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80046a6:	e044      	b.n	8004732 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046a8:	4b2b      	ldr	r3, [pc, #172]	; (8004758 <prvSwitchTimerLists+0xb8>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046b2:	4b29      	ldr	r3, [pc, #164]	; (8004758 <prvSwitchTimerLists+0xb8>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	3304      	adds	r3, #4
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fe f9a1 	bl	8002a08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d12d      	bne.n	8004732 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	4413      	add	r3, r2
 80046de:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d90e      	bls.n	8004706 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80046f4:	4b18      	ldr	r3, [pc, #96]	; (8004758 <prvSwitchTimerLists+0xb8>)
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	3304      	adds	r3, #4
 80046fc:	4619      	mov	r1, r3
 80046fe:	4610      	mov	r0, r2
 8004700:	f7fe f94a 	bl	8002998 <vListInsert>
 8004704:	e015      	b.n	8004732 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004706:	2300      	movs	r3, #0
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	2300      	movs	r3, #0
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	2100      	movs	r1, #0
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f7ff fda3 	bl	800425c <xTimerGenericCommand>
 8004716:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d109      	bne.n	8004732 <prvSwitchTimerLists+0x92>
 800471e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	f3bf 8f6f 	isb	sy
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	603b      	str	r3, [r7, #0]
 8004730:	e7fe      	b.n	8004730 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004732:	4b09      	ldr	r3, [pc, #36]	; (8004758 <prvSwitchTimerLists+0xb8>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1b5      	bne.n	80046a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800473c:	4b06      	ldr	r3, [pc, #24]	; (8004758 <prvSwitchTimerLists+0xb8>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004742:	4b06      	ldr	r3, [pc, #24]	; (800475c <prvSwitchTimerLists+0xbc>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a04      	ldr	r2, [pc, #16]	; (8004758 <prvSwitchTimerLists+0xb8>)
 8004748:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800474a:	4a04      	ldr	r2, [pc, #16]	; (800475c <prvSwitchTimerLists+0xbc>)
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	6013      	str	r3, [r2, #0]
}
 8004750:	bf00      	nop
 8004752:	3718      	adds	r7, #24
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	20000c78 	.word	0x20000c78
 800475c:	20000c7c 	.word	0x20000c7c

08004760 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004766:	f000 f927 	bl	80049b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800476a:	4b15      	ldr	r3, [pc, #84]	; (80047c0 <prvCheckForValidListAndQueue+0x60>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d120      	bne.n	80047b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004772:	4814      	ldr	r0, [pc, #80]	; (80047c4 <prvCheckForValidListAndQueue+0x64>)
 8004774:	f7fe f8c2 	bl	80028fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004778:	4813      	ldr	r0, [pc, #76]	; (80047c8 <prvCheckForValidListAndQueue+0x68>)
 800477a:	f7fe f8bf 	bl	80028fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800477e:	4b13      	ldr	r3, [pc, #76]	; (80047cc <prvCheckForValidListAndQueue+0x6c>)
 8004780:	4a10      	ldr	r2, [pc, #64]	; (80047c4 <prvCheckForValidListAndQueue+0x64>)
 8004782:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004784:	4b12      	ldr	r3, [pc, #72]	; (80047d0 <prvCheckForValidListAndQueue+0x70>)
 8004786:	4a10      	ldr	r2, [pc, #64]	; (80047c8 <prvCheckForValidListAndQueue+0x68>)
 8004788:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800478a:	2300      	movs	r3, #0
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	4b11      	ldr	r3, [pc, #68]	; (80047d4 <prvCheckForValidListAndQueue+0x74>)
 8004790:	4a11      	ldr	r2, [pc, #68]	; (80047d8 <prvCheckForValidListAndQueue+0x78>)
 8004792:	2110      	movs	r1, #16
 8004794:	200a      	movs	r0, #10
 8004796:	f7fe f9c9 	bl	8002b2c <xQueueGenericCreateStatic>
 800479a:	4602      	mov	r2, r0
 800479c:	4b08      	ldr	r3, [pc, #32]	; (80047c0 <prvCheckForValidListAndQueue+0x60>)
 800479e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80047a0:	4b07      	ldr	r3, [pc, #28]	; (80047c0 <prvCheckForValidListAndQueue+0x60>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d005      	beq.n	80047b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80047a8:	4b05      	ldr	r3, [pc, #20]	; (80047c0 <prvCheckForValidListAndQueue+0x60>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	490b      	ldr	r1, [pc, #44]	; (80047dc <prvCheckForValidListAndQueue+0x7c>)
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fe fdcc 	bl	800334c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047b4:	f000 f92e 	bl	8004a14 <vPortExitCritical>
}
 80047b8:	bf00      	nop
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	20000c80 	.word	0x20000c80
 80047c4:	20000c50 	.word	0x20000c50
 80047c8:	20000c64 	.word	0x20000c64
 80047cc:	20000c78 	.word	0x20000c78
 80047d0:	20000c7c 	.word	0x20000c7c
 80047d4:	20000d2c 	.word	0x20000d2c
 80047d8:	20000c8c 	.word	0x20000c8c
 80047dc:	08005e24 	.word	0x08005e24

080047e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	3b04      	subs	r3, #4
 80047f0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80047f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	3b04      	subs	r3, #4
 80047fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f023 0201 	bic.w	r2, r3, #1
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	3b04      	subs	r3, #4
 800480e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004810:	4a08      	ldr	r2, [pc, #32]	; (8004834 <pxPortInitialiseStack+0x54>)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	3b14      	subs	r3, #20
 800481a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	3b20      	subs	r3, #32
 8004826:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004828:	68fb      	ldr	r3, [r7, #12]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	bc80      	pop	{r7}
 8004832:	4770      	bx	lr
 8004834:	08004839 	.word	0x08004839

08004838 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800483e:	2300      	movs	r3, #0
 8004840:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004842:	4b10      	ldr	r3, [pc, #64]	; (8004884 <prvTaskExitError+0x4c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800484a:	d009      	beq.n	8004860 <prvTaskExitError+0x28>
 800484c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004850:	f383 8811 	msr	BASEPRI, r3
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	60fb      	str	r3, [r7, #12]
 800485e:	e7fe      	b.n	800485e <prvTaskExitError+0x26>
 8004860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004864:	f383 8811 	msr	BASEPRI, r3
 8004868:	f3bf 8f6f 	isb	sy
 800486c:	f3bf 8f4f 	dsb	sy
 8004870:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004872:	bf00      	nop
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0fc      	beq.n	8004874 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800487a:	bf00      	nop
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	bc80      	pop	{r7}
 8004882:	4770      	bx	lr
 8004884:	2000000c 	.word	0x2000000c
	...

08004890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004890:	4b07      	ldr	r3, [pc, #28]	; (80048b0 <pxCurrentTCBConst2>)
 8004892:	6819      	ldr	r1, [r3, #0]
 8004894:	6808      	ldr	r0, [r1, #0]
 8004896:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800489a:	f380 8809 	msr	PSP, r0
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f04f 0000 	mov.w	r0, #0
 80048a6:	f380 8811 	msr	BASEPRI, r0
 80048aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80048ae:	4770      	bx	lr

080048b0 <pxCurrentTCBConst2>:
 80048b0:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop

080048b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80048b8:	4806      	ldr	r0, [pc, #24]	; (80048d4 <prvPortStartFirstTask+0x1c>)
 80048ba:	6800      	ldr	r0, [r0, #0]
 80048bc:	6800      	ldr	r0, [r0, #0]
 80048be:	f380 8808 	msr	MSP, r0
 80048c2:	b662      	cpsie	i
 80048c4:	b661      	cpsie	f
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	df00      	svc	0
 80048d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80048d2:	bf00      	nop
 80048d4:	e000ed08 	.word	0xe000ed08

080048d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80048de:	4b31      	ldr	r3, [pc, #196]	; (80049a4 <xPortStartScheduler+0xcc>)
 80048e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	22ff      	movs	r2, #255	; 0xff
 80048ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80048f8:	78fb      	ldrb	r3, [r7, #3]
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004900:	b2da      	uxtb	r2, r3
 8004902:	4b29      	ldr	r3, [pc, #164]	; (80049a8 <xPortStartScheduler+0xd0>)
 8004904:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004906:	4b29      	ldr	r3, [pc, #164]	; (80049ac <xPortStartScheduler+0xd4>)
 8004908:	2207      	movs	r2, #7
 800490a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800490c:	e009      	b.n	8004922 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800490e:	4b27      	ldr	r3, [pc, #156]	; (80049ac <xPortStartScheduler+0xd4>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	3b01      	subs	r3, #1
 8004914:	4a25      	ldr	r2, [pc, #148]	; (80049ac <xPortStartScheduler+0xd4>)
 8004916:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004918:	78fb      	ldrb	r3, [r7, #3]
 800491a:	b2db      	uxtb	r3, r3
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	b2db      	uxtb	r3, r3
 8004920:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004922:	78fb      	ldrb	r3, [r7, #3]
 8004924:	b2db      	uxtb	r3, r3
 8004926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800492a:	2b80      	cmp	r3, #128	; 0x80
 800492c:	d0ef      	beq.n	800490e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800492e:	4b1f      	ldr	r3, [pc, #124]	; (80049ac <xPortStartScheduler+0xd4>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f1c3 0307 	rsb	r3, r3, #7
 8004936:	2b04      	cmp	r3, #4
 8004938:	d009      	beq.n	800494e <xPortStartScheduler+0x76>
 800493a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	60bb      	str	r3, [r7, #8]
 800494c:	e7fe      	b.n	800494c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800494e:	4b17      	ldr	r3, [pc, #92]	; (80049ac <xPortStartScheduler+0xd4>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	021b      	lsls	r3, r3, #8
 8004954:	4a15      	ldr	r2, [pc, #84]	; (80049ac <xPortStartScheduler+0xd4>)
 8004956:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004958:	4b14      	ldr	r3, [pc, #80]	; (80049ac <xPortStartScheduler+0xd4>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004960:	4a12      	ldr	r2, [pc, #72]	; (80049ac <xPortStartScheduler+0xd4>)
 8004962:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	b2da      	uxtb	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800496c:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <xPortStartScheduler+0xd8>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a0f      	ldr	r2, [pc, #60]	; (80049b0 <xPortStartScheduler+0xd8>)
 8004972:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004976:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004978:	4b0d      	ldr	r3, [pc, #52]	; (80049b0 <xPortStartScheduler+0xd8>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a0c      	ldr	r2, [pc, #48]	; (80049b0 <xPortStartScheduler+0xd8>)
 800497e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004982:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004984:	f000 f8b0 	bl	8004ae8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004988:	4b0a      	ldr	r3, [pc, #40]	; (80049b4 <xPortStartScheduler+0xdc>)
 800498a:	2200      	movs	r2, #0
 800498c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800498e:	f7ff ff93 	bl	80048b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004992:	f7ff f8d9 	bl	8003b48 <vTaskSwitchContext>
	prvTaskExitError();
 8004996:	f7ff ff4f 	bl	8004838 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	e000e400 	.word	0xe000e400
 80049a8:	20000d7c 	.word	0x20000d7c
 80049ac:	20000d80 	.word	0x20000d80
 80049b0:	e000ed20 	.word	0xe000ed20
 80049b4:	2000000c 	.word	0x2000000c

080049b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80049d0:	4b0e      	ldr	r3, [pc, #56]	; (8004a0c <vPortEnterCritical+0x54>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	3301      	adds	r3, #1
 80049d6:	4a0d      	ldr	r2, [pc, #52]	; (8004a0c <vPortEnterCritical+0x54>)
 80049d8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80049da:	4b0c      	ldr	r3, [pc, #48]	; (8004a0c <vPortEnterCritical+0x54>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d10e      	bne.n	8004a00 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80049e2:	4b0b      	ldr	r3, [pc, #44]	; (8004a10 <vPortEnterCritical+0x58>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d009      	beq.n	8004a00 <vPortEnterCritical+0x48>
 80049ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f0:	f383 8811 	msr	BASEPRI, r3
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	603b      	str	r3, [r7, #0]
 80049fe:	e7fe      	b.n	80049fe <vPortEnterCritical+0x46>
	}
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bc80      	pop	{r7}
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	2000000c 	.word	0x2000000c
 8004a10:	e000ed04 	.word	0xe000ed04

08004a14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a1a:	4b10      	ldr	r3, [pc, #64]	; (8004a5c <vPortExitCritical+0x48>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d109      	bne.n	8004a36 <vPortExitCritical+0x22>
 8004a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a26:	f383 8811 	msr	BASEPRI, r3
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	607b      	str	r3, [r7, #4]
 8004a34:	e7fe      	b.n	8004a34 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004a36:	4b09      	ldr	r3, [pc, #36]	; (8004a5c <vPortExitCritical+0x48>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	4a07      	ldr	r2, [pc, #28]	; (8004a5c <vPortExitCritical+0x48>)
 8004a3e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a40:	4b06      	ldr	r3, [pc, #24]	; (8004a5c <vPortExitCritical+0x48>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d104      	bne.n	8004a52 <vPortExitCritical+0x3e>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004a52:	bf00      	nop
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bc80      	pop	{r7}
 8004a5a:	4770      	bx	lr
 8004a5c:	2000000c 	.word	0x2000000c

08004a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004a60:	f3ef 8009 	mrs	r0, PSP
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	4b0d      	ldr	r3, [pc, #52]	; (8004aa0 <pxCurrentTCBConst>)
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004a70:	6010      	str	r0, [r2, #0]
 8004a72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004a76:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004a7a:	f380 8811 	msr	BASEPRI, r0
 8004a7e:	f7ff f863 	bl	8003b48 <vTaskSwitchContext>
 8004a82:	f04f 0000 	mov.w	r0, #0
 8004a86:	f380 8811 	msr	BASEPRI, r0
 8004a8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004a8e:	6819      	ldr	r1, [r3, #0]
 8004a90:	6808      	ldr	r0, [r1, #0]
 8004a92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004a96:	f380 8809 	msr	PSP, r0
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	4770      	bx	lr

08004aa0 <pxCurrentTCBConst>:
 8004aa0:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004aa4:	bf00      	nop
 8004aa6:	bf00      	nop

08004aa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
	__asm volatile
 8004aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab2:	f383 8811 	msr	BASEPRI, r3
 8004ab6:	f3bf 8f6f 	isb	sy
 8004aba:	f3bf 8f4f 	dsb	sy
 8004abe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ac0:	f7fe ff84 	bl	80039cc <xTaskIncrementTick>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004aca:	4b06      	ldr	r3, [pc, #24]	; (8004ae4 <SysTick_Handler+0x3c>)
 8004acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004adc:	bf00      	nop
 8004ade:	3708      	adds	r7, #8
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	e000ed04 	.word	0xe000ed04

08004ae8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004ae8:	b480      	push	{r7}
 8004aea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004aec:	4b0a      	ldr	r3, [pc, #40]	; (8004b18 <vPortSetupTimerInterrupt+0x30>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004af2:	4b0a      	ldr	r3, [pc, #40]	; (8004b1c <vPortSetupTimerInterrupt+0x34>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004af8:	4b09      	ldr	r3, [pc, #36]	; (8004b20 <vPortSetupTimerInterrupt+0x38>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a09      	ldr	r2, [pc, #36]	; (8004b24 <vPortSetupTimerInterrupt+0x3c>)
 8004afe:	fba2 2303 	umull	r2, r3, r2, r3
 8004b02:	099b      	lsrs	r3, r3, #6
 8004b04:	4a08      	ldr	r2, [pc, #32]	; (8004b28 <vPortSetupTimerInterrupt+0x40>)
 8004b06:	3b01      	subs	r3, #1
 8004b08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b0a:	4b03      	ldr	r3, [pc, #12]	; (8004b18 <vPortSetupTimerInterrupt+0x30>)
 8004b0c:	2207      	movs	r2, #7
 8004b0e:	601a      	str	r2, [r3, #0]
}
 8004b10:	bf00      	nop
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bc80      	pop	{r7}
 8004b16:	4770      	bx	lr
 8004b18:	e000e010 	.word	0xe000e010
 8004b1c:	e000e018 	.word	0xe000e018
 8004b20:	20000000 	.word	0x20000000
 8004b24:	10624dd3 	.word	0x10624dd3
 8004b28:	e000e014 	.word	0xe000e014

08004b2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004b32:	f3ef 8305 	mrs	r3, IPSR
 8004b36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2b0f      	cmp	r3, #15
 8004b3c:	d913      	bls.n	8004b66 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004b3e:	4a15      	ldr	r2, [pc, #84]	; (8004b94 <vPortValidateInterruptPriority+0x68>)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4413      	add	r3, r2
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004b48:	4b13      	ldr	r3, [pc, #76]	; (8004b98 <vPortValidateInterruptPriority+0x6c>)
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	7afa      	ldrb	r2, [r7, #11]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d209      	bcs.n	8004b66 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b56:	f383 8811 	msr	BASEPRI, r3
 8004b5a:	f3bf 8f6f 	isb	sy
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	607b      	str	r3, [r7, #4]
 8004b64:	e7fe      	b.n	8004b64 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004b66:	4b0d      	ldr	r3, [pc, #52]	; (8004b9c <vPortValidateInterruptPriority+0x70>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ba0 <vPortValidateInterruptPriority+0x74>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d909      	bls.n	8004b8a <vPortValidateInterruptPriority+0x5e>
 8004b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7a:	f383 8811 	msr	BASEPRI, r3
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	603b      	str	r3, [r7, #0]
 8004b88:	e7fe      	b.n	8004b88 <vPortValidateInterruptPriority+0x5c>
	}
 8004b8a:	bf00      	nop
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr
 8004b94:	e000e3f0 	.word	0xe000e3f0
 8004b98:	20000d7c 	.word	0x20000d7c
 8004b9c:	e000ed0c 	.word	0xe000ed0c
 8004ba0:	20000d80 	.word	0x20000d80

08004ba4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b08a      	sub	sp, #40	; 0x28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004bac:	2300      	movs	r3, #0
 8004bae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004bb0:	f7fe fe54 	bl	800385c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004bb4:	4b57      	ldr	r3, [pc, #348]	; (8004d14 <pvPortMalloc+0x170>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004bbc:	f000 f90c 	bl	8004dd8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004bc0:	4b55      	ldr	r3, [pc, #340]	; (8004d18 <pvPortMalloc+0x174>)
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f040 808c 	bne.w	8004ce6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d01c      	beq.n	8004c0e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004bd4:	2208      	movs	r2, #8
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4413      	add	r3, r2
 8004bda:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d013      	beq.n	8004c0e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f023 0307 	bic.w	r3, r3, #7
 8004bec:	3308      	adds	r3, #8
 8004bee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f003 0307 	and.w	r3, r3, #7
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d009      	beq.n	8004c0e <pvPortMalloc+0x6a>
 8004bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfe:	f383 8811 	msr	BASEPRI, r3
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	617b      	str	r3, [r7, #20]
 8004c0c:	e7fe      	b.n	8004c0c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d068      	beq.n	8004ce6 <pvPortMalloc+0x142>
 8004c14:	4b41      	ldr	r3, [pc, #260]	; (8004d1c <pvPortMalloc+0x178>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d863      	bhi.n	8004ce6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c1e:	4b40      	ldr	r3, [pc, #256]	; (8004d20 <pvPortMalloc+0x17c>)
 8004c20:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c22:	4b3f      	ldr	r3, [pc, #252]	; (8004d20 <pvPortMalloc+0x17c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c28:	e004      	b.n	8004c34 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d903      	bls.n	8004c46 <pvPortMalloc+0xa2>
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1f1      	bne.n	8004c2a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c46:	4b33      	ldr	r3, [pc, #204]	; (8004d14 <pvPortMalloc+0x170>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d04a      	beq.n	8004ce6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c50:	6a3b      	ldr	r3, [r7, #32]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2208      	movs	r2, #8
 8004c56:	4413      	add	r3, r2
 8004c58:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	6a3b      	ldr	r3, [r7, #32]
 8004c60:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	685a      	ldr	r2, [r3, #4]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	1ad2      	subs	r2, r2, r3
 8004c6a:	2308      	movs	r3, #8
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d91e      	bls.n	8004cb0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4413      	add	r3, r2
 8004c78:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	f003 0307 	and.w	r3, r3, #7
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d009      	beq.n	8004c98 <pvPortMalloc+0xf4>
 8004c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c88:	f383 8811 	msr	BASEPRI, r3
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	f3bf 8f4f 	dsb	sy
 8004c94:	613b      	str	r3, [r7, #16]
 8004c96:	e7fe      	b.n	8004c96 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	1ad2      	subs	r2, r2, r3
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004caa:	69b8      	ldr	r0, [r7, #24]
 8004cac:	f000 f8f6 	bl	8004e9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004cb0:	4b1a      	ldr	r3, [pc, #104]	; (8004d1c <pvPortMalloc+0x178>)
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	4a18      	ldr	r2, [pc, #96]	; (8004d1c <pvPortMalloc+0x178>)
 8004cbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004cbe:	4b17      	ldr	r3, [pc, #92]	; (8004d1c <pvPortMalloc+0x178>)
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	4b18      	ldr	r3, [pc, #96]	; (8004d24 <pvPortMalloc+0x180>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d203      	bcs.n	8004cd2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004cca:	4b14      	ldr	r3, [pc, #80]	; (8004d1c <pvPortMalloc+0x178>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a15      	ldr	r2, [pc, #84]	; (8004d24 <pvPortMalloc+0x180>)
 8004cd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	4b10      	ldr	r3, [pc, #64]	; (8004d18 <pvPortMalloc+0x174>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004ce6:	f7fe fdc7 	bl	8003878 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d009      	beq.n	8004d08 <pvPortMalloc+0x164>
 8004cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf8:	f383 8811 	msr	BASEPRI, r3
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	f3bf 8f4f 	dsb	sy
 8004d04:	60fb      	str	r3, [r7, #12]
 8004d06:	e7fe      	b.n	8004d06 <pvPortMalloc+0x162>
	return pvReturn;
 8004d08:	69fb      	ldr	r3, [r7, #28]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3728      	adds	r7, #40	; 0x28
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	2000198c 	.word	0x2000198c
 8004d18:	20001998 	.word	0x20001998
 8004d1c:	20001990 	.word	0x20001990
 8004d20:	20001984 	.word	0x20001984
 8004d24:	20001994 	.word	0x20001994

08004d28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d046      	beq.n	8004dc8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d3a:	2308      	movs	r3, #8
 8004d3c:	425b      	negs	r3, r3
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	4413      	add	r3, r2
 8004d42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	4b20      	ldr	r3, [pc, #128]	; (8004dd0 <vPortFree+0xa8>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4013      	ands	r3, r2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d109      	bne.n	8004d6a <vPortFree+0x42>
 8004d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5a:	f383 8811 	msr	BASEPRI, r3
 8004d5e:	f3bf 8f6f 	isb	sy
 8004d62:	f3bf 8f4f 	dsb	sy
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	e7fe      	b.n	8004d68 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d009      	beq.n	8004d86 <vPortFree+0x5e>
 8004d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	60bb      	str	r3, [r7, #8]
 8004d84:	e7fe      	b.n	8004d84 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	4b11      	ldr	r3, [pc, #68]	; (8004dd0 <vPortFree+0xa8>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4013      	ands	r3, r2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d019      	beq.n	8004dc8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d115      	bne.n	8004dc8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	4b0b      	ldr	r3, [pc, #44]	; (8004dd0 <vPortFree+0xa8>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	43db      	mvns	r3, r3
 8004da6:	401a      	ands	r2, r3
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004dac:	f7fe fd56 	bl	800385c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	4b07      	ldr	r3, [pc, #28]	; (8004dd4 <vPortFree+0xac>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4413      	add	r3, r2
 8004dba:	4a06      	ldr	r2, [pc, #24]	; (8004dd4 <vPortFree+0xac>)
 8004dbc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004dbe:	6938      	ldr	r0, [r7, #16]
 8004dc0:	f000 f86c 	bl	8004e9c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004dc4:	f7fe fd58 	bl	8003878 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004dc8:	bf00      	nop
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	20001998 	.word	0x20001998
 8004dd4:	20001990 	.word	0x20001990

08004dd8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004dde:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004de2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004de4:	4b27      	ldr	r3, [pc, #156]	; (8004e84 <prvHeapInit+0xac>)
 8004de6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00c      	beq.n	8004e0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	3307      	adds	r3, #7
 8004df6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f023 0307 	bic.w	r3, r3, #7
 8004dfe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	4a1f      	ldr	r2, [pc, #124]	; (8004e84 <prvHeapInit+0xac>)
 8004e08:	4413      	add	r3, r2
 8004e0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e10:	4a1d      	ldr	r2, [pc, #116]	; (8004e88 <prvHeapInit+0xb0>)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e16:	4b1c      	ldr	r3, [pc, #112]	; (8004e88 <prvHeapInit+0xb0>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	4413      	add	r3, r2
 8004e22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e24:	2208      	movs	r2, #8
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	1a9b      	subs	r3, r3, r2
 8004e2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f023 0307 	bic.w	r3, r3, #7
 8004e32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4a15      	ldr	r2, [pc, #84]	; (8004e8c <prvHeapInit+0xb4>)
 8004e38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004e3a:	4b14      	ldr	r3, [pc, #80]	; (8004e8c <prvHeapInit+0xb4>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004e42:	4b12      	ldr	r3, [pc, #72]	; (8004e8c <prvHeapInit+0xb4>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2200      	movs	r2, #0
 8004e48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	1ad2      	subs	r2, r2, r3
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004e58:	4b0c      	ldr	r3, [pc, #48]	; (8004e8c <prvHeapInit+0xb4>)
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	4a0a      	ldr	r2, [pc, #40]	; (8004e90 <prvHeapInit+0xb8>)
 8004e66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	4a09      	ldr	r2, [pc, #36]	; (8004e94 <prvHeapInit+0xbc>)
 8004e6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004e70:	4b09      	ldr	r3, [pc, #36]	; (8004e98 <prvHeapInit+0xc0>)
 8004e72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004e76:	601a      	str	r2, [r3, #0]
}
 8004e78:	bf00      	nop
 8004e7a:	3714      	adds	r7, #20
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bc80      	pop	{r7}
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	20000d84 	.word	0x20000d84
 8004e88:	20001984 	.word	0x20001984
 8004e8c:	2000198c 	.word	0x2000198c
 8004e90:	20001994 	.word	0x20001994
 8004e94:	20001990 	.word	0x20001990
 8004e98:	20001998 	.word	0x20001998

08004e9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ea4:	4b27      	ldr	r3, [pc, #156]	; (8004f44 <prvInsertBlockIntoFreeList+0xa8>)
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	e002      	b.n	8004eb0 <prvInsertBlockIntoFreeList+0x14>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d8f7      	bhi.n	8004eaa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d108      	bne.n	8004ede <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	441a      	add	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	441a      	add	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d118      	bne.n	8004f24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	4b14      	ldr	r3, [pc, #80]	; (8004f48 <prvInsertBlockIntoFreeList+0xac>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d00d      	beq.n	8004f1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	441a      	add	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	e008      	b.n	8004f2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f1a:	4b0b      	ldr	r3, [pc, #44]	; (8004f48 <prvInsertBlockIntoFreeList+0xac>)
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	e003      	b.n	8004f2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d002      	beq.n	8004f3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f3a:	bf00      	nop
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr
 8004f44:	20001984 	.word	0x20001984
 8004f48:	2000198c 	.word	0x2000198c

08004f4c <__errno>:
 8004f4c:	4b01      	ldr	r3, [pc, #4]	; (8004f54 <__errno+0x8>)
 8004f4e:	6818      	ldr	r0, [r3, #0]
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	20000010 	.word	0x20000010

08004f58 <__libc_init_array>:
 8004f58:	b570      	push	{r4, r5, r6, lr}
 8004f5a:	2500      	movs	r5, #0
 8004f5c:	4e0c      	ldr	r6, [pc, #48]	; (8004f90 <__libc_init_array+0x38>)
 8004f5e:	4c0d      	ldr	r4, [pc, #52]	; (8004f94 <__libc_init_array+0x3c>)
 8004f60:	1ba4      	subs	r4, r4, r6
 8004f62:	10a4      	asrs	r4, r4, #2
 8004f64:	42a5      	cmp	r5, r4
 8004f66:	d109      	bne.n	8004f7c <__libc_init_array+0x24>
 8004f68:	f000 ff1c 	bl	8005da4 <_init>
 8004f6c:	2500      	movs	r5, #0
 8004f6e:	4e0a      	ldr	r6, [pc, #40]	; (8004f98 <__libc_init_array+0x40>)
 8004f70:	4c0a      	ldr	r4, [pc, #40]	; (8004f9c <__libc_init_array+0x44>)
 8004f72:	1ba4      	subs	r4, r4, r6
 8004f74:	10a4      	asrs	r4, r4, #2
 8004f76:	42a5      	cmp	r5, r4
 8004f78:	d105      	bne.n	8004f86 <__libc_init_array+0x2e>
 8004f7a:	bd70      	pop	{r4, r5, r6, pc}
 8004f7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f80:	4798      	blx	r3
 8004f82:	3501      	adds	r5, #1
 8004f84:	e7ee      	b.n	8004f64 <__libc_init_array+0xc>
 8004f86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f8a:	4798      	blx	r3
 8004f8c:	3501      	adds	r5, #1
 8004f8e:	e7f2      	b.n	8004f76 <__libc_init_array+0x1e>
 8004f90:	08005f24 	.word	0x08005f24
 8004f94:	08005f24 	.word	0x08005f24
 8004f98:	08005f24 	.word	0x08005f24
 8004f9c:	08005f28 	.word	0x08005f28

08004fa0 <memcpy>:
 8004fa0:	b510      	push	{r4, lr}
 8004fa2:	1e43      	subs	r3, r0, #1
 8004fa4:	440a      	add	r2, r1
 8004fa6:	4291      	cmp	r1, r2
 8004fa8:	d100      	bne.n	8004fac <memcpy+0xc>
 8004faa:	bd10      	pop	{r4, pc}
 8004fac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fb4:	e7f7      	b.n	8004fa6 <memcpy+0x6>

08004fb6 <memset>:
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	4402      	add	r2, r0
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d100      	bne.n	8004fc0 <memset+0xa>
 8004fbe:	4770      	bx	lr
 8004fc0:	f803 1b01 	strb.w	r1, [r3], #1
 8004fc4:	e7f9      	b.n	8004fba <memset+0x4>
	...

08004fc8 <iprintf>:
 8004fc8:	b40f      	push	{r0, r1, r2, r3}
 8004fca:	4b0a      	ldr	r3, [pc, #40]	; (8004ff4 <iprintf+0x2c>)
 8004fcc:	b513      	push	{r0, r1, r4, lr}
 8004fce:	681c      	ldr	r4, [r3, #0]
 8004fd0:	b124      	cbz	r4, 8004fdc <iprintf+0x14>
 8004fd2:	69a3      	ldr	r3, [r4, #24]
 8004fd4:	b913      	cbnz	r3, 8004fdc <iprintf+0x14>
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	f000 f84e 	bl	8005078 <__sinit>
 8004fdc:	ab05      	add	r3, sp, #20
 8004fde:	9a04      	ldr	r2, [sp, #16]
 8004fe0:	68a1      	ldr	r1, [r4, #8]
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	9301      	str	r3, [sp, #4]
 8004fe6:	f000 f953 	bl	8005290 <_vfiprintf_r>
 8004fea:	b002      	add	sp, #8
 8004fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ff0:	b004      	add	sp, #16
 8004ff2:	4770      	bx	lr
 8004ff4:	20000010 	.word	0x20000010

08004ff8 <std>:
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	b510      	push	{r4, lr}
 8004ffc:	4604      	mov	r4, r0
 8004ffe:	e9c0 3300 	strd	r3, r3, [r0]
 8005002:	6083      	str	r3, [r0, #8]
 8005004:	8181      	strh	r1, [r0, #12]
 8005006:	6643      	str	r3, [r0, #100]	; 0x64
 8005008:	81c2      	strh	r2, [r0, #14]
 800500a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800500e:	6183      	str	r3, [r0, #24]
 8005010:	4619      	mov	r1, r3
 8005012:	2208      	movs	r2, #8
 8005014:	305c      	adds	r0, #92	; 0x5c
 8005016:	f7ff ffce 	bl	8004fb6 <memset>
 800501a:	4b05      	ldr	r3, [pc, #20]	; (8005030 <std+0x38>)
 800501c:	6224      	str	r4, [r4, #32]
 800501e:	6263      	str	r3, [r4, #36]	; 0x24
 8005020:	4b04      	ldr	r3, [pc, #16]	; (8005034 <std+0x3c>)
 8005022:	62a3      	str	r3, [r4, #40]	; 0x28
 8005024:	4b04      	ldr	r3, [pc, #16]	; (8005038 <std+0x40>)
 8005026:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005028:	4b04      	ldr	r3, [pc, #16]	; (800503c <std+0x44>)
 800502a:	6323      	str	r3, [r4, #48]	; 0x30
 800502c:	bd10      	pop	{r4, pc}
 800502e:	bf00      	nop
 8005030:	080057ed 	.word	0x080057ed
 8005034:	0800580f 	.word	0x0800580f
 8005038:	08005847 	.word	0x08005847
 800503c:	0800586b 	.word	0x0800586b

08005040 <_cleanup_r>:
 8005040:	4901      	ldr	r1, [pc, #4]	; (8005048 <_cleanup_r+0x8>)
 8005042:	f000 b885 	b.w	8005150 <_fwalk_reent>
 8005046:	bf00      	nop
 8005048:	08005b45 	.word	0x08005b45

0800504c <__sfmoreglue>:
 800504c:	b570      	push	{r4, r5, r6, lr}
 800504e:	2568      	movs	r5, #104	; 0x68
 8005050:	1e4a      	subs	r2, r1, #1
 8005052:	4355      	muls	r5, r2
 8005054:	460e      	mov	r6, r1
 8005056:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800505a:	f000 f897 	bl	800518c <_malloc_r>
 800505e:	4604      	mov	r4, r0
 8005060:	b140      	cbz	r0, 8005074 <__sfmoreglue+0x28>
 8005062:	2100      	movs	r1, #0
 8005064:	e9c0 1600 	strd	r1, r6, [r0]
 8005068:	300c      	adds	r0, #12
 800506a:	60a0      	str	r0, [r4, #8]
 800506c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005070:	f7ff ffa1 	bl	8004fb6 <memset>
 8005074:	4620      	mov	r0, r4
 8005076:	bd70      	pop	{r4, r5, r6, pc}

08005078 <__sinit>:
 8005078:	6983      	ldr	r3, [r0, #24]
 800507a:	b510      	push	{r4, lr}
 800507c:	4604      	mov	r4, r0
 800507e:	bb33      	cbnz	r3, 80050ce <__sinit+0x56>
 8005080:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005084:	6503      	str	r3, [r0, #80]	; 0x50
 8005086:	4b12      	ldr	r3, [pc, #72]	; (80050d0 <__sinit+0x58>)
 8005088:	4a12      	ldr	r2, [pc, #72]	; (80050d4 <__sinit+0x5c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6282      	str	r2, [r0, #40]	; 0x28
 800508e:	4298      	cmp	r0, r3
 8005090:	bf04      	itt	eq
 8005092:	2301      	moveq	r3, #1
 8005094:	6183      	streq	r3, [r0, #24]
 8005096:	f000 f81f 	bl	80050d8 <__sfp>
 800509a:	6060      	str	r0, [r4, #4]
 800509c:	4620      	mov	r0, r4
 800509e:	f000 f81b 	bl	80050d8 <__sfp>
 80050a2:	60a0      	str	r0, [r4, #8]
 80050a4:	4620      	mov	r0, r4
 80050a6:	f000 f817 	bl	80050d8 <__sfp>
 80050aa:	2200      	movs	r2, #0
 80050ac:	60e0      	str	r0, [r4, #12]
 80050ae:	2104      	movs	r1, #4
 80050b0:	6860      	ldr	r0, [r4, #4]
 80050b2:	f7ff ffa1 	bl	8004ff8 <std>
 80050b6:	2201      	movs	r2, #1
 80050b8:	2109      	movs	r1, #9
 80050ba:	68a0      	ldr	r0, [r4, #8]
 80050bc:	f7ff ff9c 	bl	8004ff8 <std>
 80050c0:	2202      	movs	r2, #2
 80050c2:	2112      	movs	r1, #18
 80050c4:	68e0      	ldr	r0, [r4, #12]
 80050c6:	f7ff ff97 	bl	8004ff8 <std>
 80050ca:	2301      	movs	r3, #1
 80050cc:	61a3      	str	r3, [r4, #24]
 80050ce:	bd10      	pop	{r4, pc}
 80050d0:	08005e8c 	.word	0x08005e8c
 80050d4:	08005041 	.word	0x08005041

080050d8 <__sfp>:
 80050d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050da:	4b1b      	ldr	r3, [pc, #108]	; (8005148 <__sfp+0x70>)
 80050dc:	4607      	mov	r7, r0
 80050de:	681e      	ldr	r6, [r3, #0]
 80050e0:	69b3      	ldr	r3, [r6, #24]
 80050e2:	b913      	cbnz	r3, 80050ea <__sfp+0x12>
 80050e4:	4630      	mov	r0, r6
 80050e6:	f7ff ffc7 	bl	8005078 <__sinit>
 80050ea:	3648      	adds	r6, #72	; 0x48
 80050ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80050f0:	3b01      	subs	r3, #1
 80050f2:	d503      	bpl.n	80050fc <__sfp+0x24>
 80050f4:	6833      	ldr	r3, [r6, #0]
 80050f6:	b133      	cbz	r3, 8005106 <__sfp+0x2e>
 80050f8:	6836      	ldr	r6, [r6, #0]
 80050fa:	e7f7      	b.n	80050ec <__sfp+0x14>
 80050fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005100:	b16d      	cbz	r5, 800511e <__sfp+0x46>
 8005102:	3468      	adds	r4, #104	; 0x68
 8005104:	e7f4      	b.n	80050f0 <__sfp+0x18>
 8005106:	2104      	movs	r1, #4
 8005108:	4638      	mov	r0, r7
 800510a:	f7ff ff9f 	bl	800504c <__sfmoreglue>
 800510e:	6030      	str	r0, [r6, #0]
 8005110:	2800      	cmp	r0, #0
 8005112:	d1f1      	bne.n	80050f8 <__sfp+0x20>
 8005114:	230c      	movs	r3, #12
 8005116:	4604      	mov	r4, r0
 8005118:	603b      	str	r3, [r7, #0]
 800511a:	4620      	mov	r0, r4
 800511c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800511e:	4b0b      	ldr	r3, [pc, #44]	; (800514c <__sfp+0x74>)
 8005120:	6665      	str	r5, [r4, #100]	; 0x64
 8005122:	e9c4 5500 	strd	r5, r5, [r4]
 8005126:	60a5      	str	r5, [r4, #8]
 8005128:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800512c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005130:	2208      	movs	r2, #8
 8005132:	4629      	mov	r1, r5
 8005134:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005138:	f7ff ff3d 	bl	8004fb6 <memset>
 800513c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005140:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005144:	e7e9      	b.n	800511a <__sfp+0x42>
 8005146:	bf00      	nop
 8005148:	08005e8c 	.word	0x08005e8c
 800514c:	ffff0001 	.word	0xffff0001

08005150 <_fwalk_reent>:
 8005150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005154:	4680      	mov	r8, r0
 8005156:	4689      	mov	r9, r1
 8005158:	2600      	movs	r6, #0
 800515a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800515e:	b914      	cbnz	r4, 8005166 <_fwalk_reent+0x16>
 8005160:	4630      	mov	r0, r6
 8005162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005166:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800516a:	3f01      	subs	r7, #1
 800516c:	d501      	bpl.n	8005172 <_fwalk_reent+0x22>
 800516e:	6824      	ldr	r4, [r4, #0]
 8005170:	e7f5      	b.n	800515e <_fwalk_reent+0xe>
 8005172:	89ab      	ldrh	r3, [r5, #12]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d907      	bls.n	8005188 <_fwalk_reent+0x38>
 8005178:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800517c:	3301      	adds	r3, #1
 800517e:	d003      	beq.n	8005188 <_fwalk_reent+0x38>
 8005180:	4629      	mov	r1, r5
 8005182:	4640      	mov	r0, r8
 8005184:	47c8      	blx	r9
 8005186:	4306      	orrs	r6, r0
 8005188:	3568      	adds	r5, #104	; 0x68
 800518a:	e7ee      	b.n	800516a <_fwalk_reent+0x1a>

0800518c <_malloc_r>:
 800518c:	b570      	push	{r4, r5, r6, lr}
 800518e:	1ccd      	adds	r5, r1, #3
 8005190:	f025 0503 	bic.w	r5, r5, #3
 8005194:	3508      	adds	r5, #8
 8005196:	2d0c      	cmp	r5, #12
 8005198:	bf38      	it	cc
 800519a:	250c      	movcc	r5, #12
 800519c:	2d00      	cmp	r5, #0
 800519e:	4606      	mov	r6, r0
 80051a0:	db01      	blt.n	80051a6 <_malloc_r+0x1a>
 80051a2:	42a9      	cmp	r1, r5
 80051a4:	d903      	bls.n	80051ae <_malloc_r+0x22>
 80051a6:	230c      	movs	r3, #12
 80051a8:	6033      	str	r3, [r6, #0]
 80051aa:	2000      	movs	r0, #0
 80051ac:	bd70      	pop	{r4, r5, r6, pc}
 80051ae:	f000 fd77 	bl	8005ca0 <__malloc_lock>
 80051b2:	4a21      	ldr	r2, [pc, #132]	; (8005238 <_malloc_r+0xac>)
 80051b4:	6814      	ldr	r4, [r2, #0]
 80051b6:	4621      	mov	r1, r4
 80051b8:	b991      	cbnz	r1, 80051e0 <_malloc_r+0x54>
 80051ba:	4c20      	ldr	r4, [pc, #128]	; (800523c <_malloc_r+0xb0>)
 80051bc:	6823      	ldr	r3, [r4, #0]
 80051be:	b91b      	cbnz	r3, 80051c8 <_malloc_r+0x3c>
 80051c0:	4630      	mov	r0, r6
 80051c2:	f000 fb03 	bl	80057cc <_sbrk_r>
 80051c6:	6020      	str	r0, [r4, #0]
 80051c8:	4629      	mov	r1, r5
 80051ca:	4630      	mov	r0, r6
 80051cc:	f000 fafe 	bl	80057cc <_sbrk_r>
 80051d0:	1c43      	adds	r3, r0, #1
 80051d2:	d124      	bne.n	800521e <_malloc_r+0x92>
 80051d4:	230c      	movs	r3, #12
 80051d6:	4630      	mov	r0, r6
 80051d8:	6033      	str	r3, [r6, #0]
 80051da:	f000 fd62 	bl	8005ca2 <__malloc_unlock>
 80051de:	e7e4      	b.n	80051aa <_malloc_r+0x1e>
 80051e0:	680b      	ldr	r3, [r1, #0]
 80051e2:	1b5b      	subs	r3, r3, r5
 80051e4:	d418      	bmi.n	8005218 <_malloc_r+0x8c>
 80051e6:	2b0b      	cmp	r3, #11
 80051e8:	d90f      	bls.n	800520a <_malloc_r+0x7e>
 80051ea:	600b      	str	r3, [r1, #0]
 80051ec:	18cc      	adds	r4, r1, r3
 80051ee:	50cd      	str	r5, [r1, r3]
 80051f0:	4630      	mov	r0, r6
 80051f2:	f000 fd56 	bl	8005ca2 <__malloc_unlock>
 80051f6:	f104 000b 	add.w	r0, r4, #11
 80051fa:	1d23      	adds	r3, r4, #4
 80051fc:	f020 0007 	bic.w	r0, r0, #7
 8005200:	1ac3      	subs	r3, r0, r3
 8005202:	d0d3      	beq.n	80051ac <_malloc_r+0x20>
 8005204:	425a      	negs	r2, r3
 8005206:	50e2      	str	r2, [r4, r3]
 8005208:	e7d0      	b.n	80051ac <_malloc_r+0x20>
 800520a:	684b      	ldr	r3, [r1, #4]
 800520c:	428c      	cmp	r4, r1
 800520e:	bf16      	itet	ne
 8005210:	6063      	strne	r3, [r4, #4]
 8005212:	6013      	streq	r3, [r2, #0]
 8005214:	460c      	movne	r4, r1
 8005216:	e7eb      	b.n	80051f0 <_malloc_r+0x64>
 8005218:	460c      	mov	r4, r1
 800521a:	6849      	ldr	r1, [r1, #4]
 800521c:	e7cc      	b.n	80051b8 <_malloc_r+0x2c>
 800521e:	1cc4      	adds	r4, r0, #3
 8005220:	f024 0403 	bic.w	r4, r4, #3
 8005224:	42a0      	cmp	r0, r4
 8005226:	d005      	beq.n	8005234 <_malloc_r+0xa8>
 8005228:	1a21      	subs	r1, r4, r0
 800522a:	4630      	mov	r0, r6
 800522c:	f000 face 	bl	80057cc <_sbrk_r>
 8005230:	3001      	adds	r0, #1
 8005232:	d0cf      	beq.n	80051d4 <_malloc_r+0x48>
 8005234:	6025      	str	r5, [r4, #0]
 8005236:	e7db      	b.n	80051f0 <_malloc_r+0x64>
 8005238:	2000199c 	.word	0x2000199c
 800523c:	200019a0 	.word	0x200019a0

08005240 <__sfputc_r>:
 8005240:	6893      	ldr	r3, [r2, #8]
 8005242:	b410      	push	{r4}
 8005244:	3b01      	subs	r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	6093      	str	r3, [r2, #8]
 800524a:	da07      	bge.n	800525c <__sfputc_r+0x1c>
 800524c:	6994      	ldr	r4, [r2, #24]
 800524e:	42a3      	cmp	r3, r4
 8005250:	db01      	blt.n	8005256 <__sfputc_r+0x16>
 8005252:	290a      	cmp	r1, #10
 8005254:	d102      	bne.n	800525c <__sfputc_r+0x1c>
 8005256:	bc10      	pop	{r4}
 8005258:	f000 bb0c 	b.w	8005874 <__swbuf_r>
 800525c:	6813      	ldr	r3, [r2, #0]
 800525e:	1c58      	adds	r0, r3, #1
 8005260:	6010      	str	r0, [r2, #0]
 8005262:	7019      	strb	r1, [r3, #0]
 8005264:	4608      	mov	r0, r1
 8005266:	bc10      	pop	{r4}
 8005268:	4770      	bx	lr

0800526a <__sfputs_r>:
 800526a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526c:	4606      	mov	r6, r0
 800526e:	460f      	mov	r7, r1
 8005270:	4614      	mov	r4, r2
 8005272:	18d5      	adds	r5, r2, r3
 8005274:	42ac      	cmp	r4, r5
 8005276:	d101      	bne.n	800527c <__sfputs_r+0x12>
 8005278:	2000      	movs	r0, #0
 800527a:	e007      	b.n	800528c <__sfputs_r+0x22>
 800527c:	463a      	mov	r2, r7
 800527e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005282:	4630      	mov	r0, r6
 8005284:	f7ff ffdc 	bl	8005240 <__sfputc_r>
 8005288:	1c43      	adds	r3, r0, #1
 800528a:	d1f3      	bne.n	8005274 <__sfputs_r+0xa>
 800528c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005290 <_vfiprintf_r>:
 8005290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005294:	460c      	mov	r4, r1
 8005296:	b09d      	sub	sp, #116	; 0x74
 8005298:	4617      	mov	r7, r2
 800529a:	461d      	mov	r5, r3
 800529c:	4606      	mov	r6, r0
 800529e:	b118      	cbz	r0, 80052a8 <_vfiprintf_r+0x18>
 80052a0:	6983      	ldr	r3, [r0, #24]
 80052a2:	b90b      	cbnz	r3, 80052a8 <_vfiprintf_r+0x18>
 80052a4:	f7ff fee8 	bl	8005078 <__sinit>
 80052a8:	4b7c      	ldr	r3, [pc, #496]	; (800549c <_vfiprintf_r+0x20c>)
 80052aa:	429c      	cmp	r4, r3
 80052ac:	d158      	bne.n	8005360 <_vfiprintf_r+0xd0>
 80052ae:	6874      	ldr	r4, [r6, #4]
 80052b0:	89a3      	ldrh	r3, [r4, #12]
 80052b2:	0718      	lsls	r0, r3, #28
 80052b4:	d55e      	bpl.n	8005374 <_vfiprintf_r+0xe4>
 80052b6:	6923      	ldr	r3, [r4, #16]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d05b      	beq.n	8005374 <_vfiprintf_r+0xe4>
 80052bc:	2300      	movs	r3, #0
 80052be:	9309      	str	r3, [sp, #36]	; 0x24
 80052c0:	2320      	movs	r3, #32
 80052c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052c6:	2330      	movs	r3, #48	; 0x30
 80052c8:	f04f 0b01 	mov.w	fp, #1
 80052cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052d0:	9503      	str	r5, [sp, #12]
 80052d2:	46b8      	mov	r8, r7
 80052d4:	4645      	mov	r5, r8
 80052d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80052da:	b10b      	cbz	r3, 80052e0 <_vfiprintf_r+0x50>
 80052dc:	2b25      	cmp	r3, #37	; 0x25
 80052de:	d154      	bne.n	800538a <_vfiprintf_r+0xfa>
 80052e0:	ebb8 0a07 	subs.w	sl, r8, r7
 80052e4:	d00b      	beq.n	80052fe <_vfiprintf_r+0x6e>
 80052e6:	4653      	mov	r3, sl
 80052e8:	463a      	mov	r2, r7
 80052ea:	4621      	mov	r1, r4
 80052ec:	4630      	mov	r0, r6
 80052ee:	f7ff ffbc 	bl	800526a <__sfputs_r>
 80052f2:	3001      	adds	r0, #1
 80052f4:	f000 80c2 	beq.w	800547c <_vfiprintf_r+0x1ec>
 80052f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052fa:	4453      	add	r3, sl
 80052fc:	9309      	str	r3, [sp, #36]	; 0x24
 80052fe:	f898 3000 	ldrb.w	r3, [r8]
 8005302:	2b00      	cmp	r3, #0
 8005304:	f000 80ba 	beq.w	800547c <_vfiprintf_r+0x1ec>
 8005308:	2300      	movs	r3, #0
 800530a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800530e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005312:	9304      	str	r3, [sp, #16]
 8005314:	9307      	str	r3, [sp, #28]
 8005316:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800531a:	931a      	str	r3, [sp, #104]	; 0x68
 800531c:	46a8      	mov	r8, r5
 800531e:	2205      	movs	r2, #5
 8005320:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005324:	485e      	ldr	r0, [pc, #376]	; (80054a0 <_vfiprintf_r+0x210>)
 8005326:	f000 fcad 	bl	8005c84 <memchr>
 800532a:	9b04      	ldr	r3, [sp, #16]
 800532c:	bb78      	cbnz	r0, 800538e <_vfiprintf_r+0xfe>
 800532e:	06d9      	lsls	r1, r3, #27
 8005330:	bf44      	itt	mi
 8005332:	2220      	movmi	r2, #32
 8005334:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005338:	071a      	lsls	r2, r3, #28
 800533a:	bf44      	itt	mi
 800533c:	222b      	movmi	r2, #43	; 0x2b
 800533e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005342:	782a      	ldrb	r2, [r5, #0]
 8005344:	2a2a      	cmp	r2, #42	; 0x2a
 8005346:	d02a      	beq.n	800539e <_vfiprintf_r+0x10e>
 8005348:	46a8      	mov	r8, r5
 800534a:	2000      	movs	r0, #0
 800534c:	250a      	movs	r5, #10
 800534e:	9a07      	ldr	r2, [sp, #28]
 8005350:	4641      	mov	r1, r8
 8005352:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005356:	3b30      	subs	r3, #48	; 0x30
 8005358:	2b09      	cmp	r3, #9
 800535a:	d969      	bls.n	8005430 <_vfiprintf_r+0x1a0>
 800535c:	b360      	cbz	r0, 80053b8 <_vfiprintf_r+0x128>
 800535e:	e024      	b.n	80053aa <_vfiprintf_r+0x11a>
 8005360:	4b50      	ldr	r3, [pc, #320]	; (80054a4 <_vfiprintf_r+0x214>)
 8005362:	429c      	cmp	r4, r3
 8005364:	d101      	bne.n	800536a <_vfiprintf_r+0xda>
 8005366:	68b4      	ldr	r4, [r6, #8]
 8005368:	e7a2      	b.n	80052b0 <_vfiprintf_r+0x20>
 800536a:	4b4f      	ldr	r3, [pc, #316]	; (80054a8 <_vfiprintf_r+0x218>)
 800536c:	429c      	cmp	r4, r3
 800536e:	bf08      	it	eq
 8005370:	68f4      	ldreq	r4, [r6, #12]
 8005372:	e79d      	b.n	80052b0 <_vfiprintf_r+0x20>
 8005374:	4621      	mov	r1, r4
 8005376:	4630      	mov	r0, r6
 8005378:	f000 fae0 	bl	800593c <__swsetup_r>
 800537c:	2800      	cmp	r0, #0
 800537e:	d09d      	beq.n	80052bc <_vfiprintf_r+0x2c>
 8005380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005384:	b01d      	add	sp, #116	; 0x74
 8005386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800538a:	46a8      	mov	r8, r5
 800538c:	e7a2      	b.n	80052d4 <_vfiprintf_r+0x44>
 800538e:	4a44      	ldr	r2, [pc, #272]	; (80054a0 <_vfiprintf_r+0x210>)
 8005390:	4645      	mov	r5, r8
 8005392:	1a80      	subs	r0, r0, r2
 8005394:	fa0b f000 	lsl.w	r0, fp, r0
 8005398:	4318      	orrs	r0, r3
 800539a:	9004      	str	r0, [sp, #16]
 800539c:	e7be      	b.n	800531c <_vfiprintf_r+0x8c>
 800539e:	9a03      	ldr	r2, [sp, #12]
 80053a0:	1d11      	adds	r1, r2, #4
 80053a2:	6812      	ldr	r2, [r2, #0]
 80053a4:	9103      	str	r1, [sp, #12]
 80053a6:	2a00      	cmp	r2, #0
 80053a8:	db01      	blt.n	80053ae <_vfiprintf_r+0x11e>
 80053aa:	9207      	str	r2, [sp, #28]
 80053ac:	e004      	b.n	80053b8 <_vfiprintf_r+0x128>
 80053ae:	4252      	negs	r2, r2
 80053b0:	f043 0302 	orr.w	r3, r3, #2
 80053b4:	9207      	str	r2, [sp, #28]
 80053b6:	9304      	str	r3, [sp, #16]
 80053b8:	f898 3000 	ldrb.w	r3, [r8]
 80053bc:	2b2e      	cmp	r3, #46	; 0x2e
 80053be:	d10e      	bne.n	80053de <_vfiprintf_r+0x14e>
 80053c0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80053c4:	2b2a      	cmp	r3, #42	; 0x2a
 80053c6:	d138      	bne.n	800543a <_vfiprintf_r+0x1aa>
 80053c8:	9b03      	ldr	r3, [sp, #12]
 80053ca:	f108 0802 	add.w	r8, r8, #2
 80053ce:	1d1a      	adds	r2, r3, #4
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	9203      	str	r2, [sp, #12]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	bfb8      	it	lt
 80053d8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80053dc:	9305      	str	r3, [sp, #20]
 80053de:	4d33      	ldr	r5, [pc, #204]	; (80054ac <_vfiprintf_r+0x21c>)
 80053e0:	2203      	movs	r2, #3
 80053e2:	f898 1000 	ldrb.w	r1, [r8]
 80053e6:	4628      	mov	r0, r5
 80053e8:	f000 fc4c 	bl	8005c84 <memchr>
 80053ec:	b140      	cbz	r0, 8005400 <_vfiprintf_r+0x170>
 80053ee:	2340      	movs	r3, #64	; 0x40
 80053f0:	1b40      	subs	r0, r0, r5
 80053f2:	fa03 f000 	lsl.w	r0, r3, r0
 80053f6:	9b04      	ldr	r3, [sp, #16]
 80053f8:	f108 0801 	add.w	r8, r8, #1
 80053fc:	4303      	orrs	r3, r0
 80053fe:	9304      	str	r3, [sp, #16]
 8005400:	f898 1000 	ldrb.w	r1, [r8]
 8005404:	2206      	movs	r2, #6
 8005406:	482a      	ldr	r0, [pc, #168]	; (80054b0 <_vfiprintf_r+0x220>)
 8005408:	f108 0701 	add.w	r7, r8, #1
 800540c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005410:	f000 fc38 	bl	8005c84 <memchr>
 8005414:	2800      	cmp	r0, #0
 8005416:	d037      	beq.n	8005488 <_vfiprintf_r+0x1f8>
 8005418:	4b26      	ldr	r3, [pc, #152]	; (80054b4 <_vfiprintf_r+0x224>)
 800541a:	bb1b      	cbnz	r3, 8005464 <_vfiprintf_r+0x1d4>
 800541c:	9b03      	ldr	r3, [sp, #12]
 800541e:	3307      	adds	r3, #7
 8005420:	f023 0307 	bic.w	r3, r3, #7
 8005424:	3308      	adds	r3, #8
 8005426:	9303      	str	r3, [sp, #12]
 8005428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800542a:	444b      	add	r3, r9
 800542c:	9309      	str	r3, [sp, #36]	; 0x24
 800542e:	e750      	b.n	80052d2 <_vfiprintf_r+0x42>
 8005430:	fb05 3202 	mla	r2, r5, r2, r3
 8005434:	2001      	movs	r0, #1
 8005436:	4688      	mov	r8, r1
 8005438:	e78a      	b.n	8005350 <_vfiprintf_r+0xc0>
 800543a:	2300      	movs	r3, #0
 800543c:	250a      	movs	r5, #10
 800543e:	4619      	mov	r1, r3
 8005440:	f108 0801 	add.w	r8, r8, #1
 8005444:	9305      	str	r3, [sp, #20]
 8005446:	4640      	mov	r0, r8
 8005448:	f810 2b01 	ldrb.w	r2, [r0], #1
 800544c:	3a30      	subs	r2, #48	; 0x30
 800544e:	2a09      	cmp	r2, #9
 8005450:	d903      	bls.n	800545a <_vfiprintf_r+0x1ca>
 8005452:	2b00      	cmp	r3, #0
 8005454:	d0c3      	beq.n	80053de <_vfiprintf_r+0x14e>
 8005456:	9105      	str	r1, [sp, #20]
 8005458:	e7c1      	b.n	80053de <_vfiprintf_r+0x14e>
 800545a:	fb05 2101 	mla	r1, r5, r1, r2
 800545e:	2301      	movs	r3, #1
 8005460:	4680      	mov	r8, r0
 8005462:	e7f0      	b.n	8005446 <_vfiprintf_r+0x1b6>
 8005464:	ab03      	add	r3, sp, #12
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	4622      	mov	r2, r4
 800546a:	4b13      	ldr	r3, [pc, #76]	; (80054b8 <_vfiprintf_r+0x228>)
 800546c:	a904      	add	r1, sp, #16
 800546e:	4630      	mov	r0, r6
 8005470:	f3af 8000 	nop.w
 8005474:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005478:	4681      	mov	r9, r0
 800547a:	d1d5      	bne.n	8005428 <_vfiprintf_r+0x198>
 800547c:	89a3      	ldrh	r3, [r4, #12]
 800547e:	065b      	lsls	r3, r3, #25
 8005480:	f53f af7e 	bmi.w	8005380 <_vfiprintf_r+0xf0>
 8005484:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005486:	e77d      	b.n	8005384 <_vfiprintf_r+0xf4>
 8005488:	ab03      	add	r3, sp, #12
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	4622      	mov	r2, r4
 800548e:	4b0a      	ldr	r3, [pc, #40]	; (80054b8 <_vfiprintf_r+0x228>)
 8005490:	a904      	add	r1, sp, #16
 8005492:	4630      	mov	r0, r6
 8005494:	f000 f888 	bl	80055a8 <_printf_i>
 8005498:	e7ec      	b.n	8005474 <_vfiprintf_r+0x1e4>
 800549a:	bf00      	nop
 800549c:	08005eb0 	.word	0x08005eb0
 80054a0:	08005ef0 	.word	0x08005ef0
 80054a4:	08005ed0 	.word	0x08005ed0
 80054a8:	08005e90 	.word	0x08005e90
 80054ac:	08005ef6 	.word	0x08005ef6
 80054b0:	08005efa 	.word	0x08005efa
 80054b4:	00000000 	.word	0x00000000
 80054b8:	0800526b 	.word	0x0800526b

080054bc <_printf_common>:
 80054bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054c0:	4691      	mov	r9, r2
 80054c2:	461f      	mov	r7, r3
 80054c4:	688a      	ldr	r2, [r1, #8]
 80054c6:	690b      	ldr	r3, [r1, #16]
 80054c8:	4606      	mov	r6, r0
 80054ca:	4293      	cmp	r3, r2
 80054cc:	bfb8      	it	lt
 80054ce:	4613      	movlt	r3, r2
 80054d0:	f8c9 3000 	str.w	r3, [r9]
 80054d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054d8:	460c      	mov	r4, r1
 80054da:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054de:	b112      	cbz	r2, 80054e6 <_printf_common+0x2a>
 80054e0:	3301      	adds	r3, #1
 80054e2:	f8c9 3000 	str.w	r3, [r9]
 80054e6:	6823      	ldr	r3, [r4, #0]
 80054e8:	0699      	lsls	r1, r3, #26
 80054ea:	bf42      	ittt	mi
 80054ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80054f0:	3302      	addmi	r3, #2
 80054f2:	f8c9 3000 	strmi.w	r3, [r9]
 80054f6:	6825      	ldr	r5, [r4, #0]
 80054f8:	f015 0506 	ands.w	r5, r5, #6
 80054fc:	d107      	bne.n	800550e <_printf_common+0x52>
 80054fe:	f104 0a19 	add.w	sl, r4, #25
 8005502:	68e3      	ldr	r3, [r4, #12]
 8005504:	f8d9 2000 	ldr.w	r2, [r9]
 8005508:	1a9b      	subs	r3, r3, r2
 800550a:	42ab      	cmp	r3, r5
 800550c:	dc29      	bgt.n	8005562 <_printf_common+0xa6>
 800550e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005512:	6822      	ldr	r2, [r4, #0]
 8005514:	3300      	adds	r3, #0
 8005516:	bf18      	it	ne
 8005518:	2301      	movne	r3, #1
 800551a:	0692      	lsls	r2, r2, #26
 800551c:	d42e      	bmi.n	800557c <_printf_common+0xc0>
 800551e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005522:	4639      	mov	r1, r7
 8005524:	4630      	mov	r0, r6
 8005526:	47c0      	blx	r8
 8005528:	3001      	adds	r0, #1
 800552a:	d021      	beq.n	8005570 <_printf_common+0xb4>
 800552c:	6823      	ldr	r3, [r4, #0]
 800552e:	68e5      	ldr	r5, [r4, #12]
 8005530:	f003 0306 	and.w	r3, r3, #6
 8005534:	2b04      	cmp	r3, #4
 8005536:	bf18      	it	ne
 8005538:	2500      	movne	r5, #0
 800553a:	f8d9 2000 	ldr.w	r2, [r9]
 800553e:	f04f 0900 	mov.w	r9, #0
 8005542:	bf08      	it	eq
 8005544:	1aad      	subeq	r5, r5, r2
 8005546:	68a3      	ldr	r3, [r4, #8]
 8005548:	6922      	ldr	r2, [r4, #16]
 800554a:	bf08      	it	eq
 800554c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005550:	4293      	cmp	r3, r2
 8005552:	bfc4      	itt	gt
 8005554:	1a9b      	subgt	r3, r3, r2
 8005556:	18ed      	addgt	r5, r5, r3
 8005558:	341a      	adds	r4, #26
 800555a:	454d      	cmp	r5, r9
 800555c:	d11a      	bne.n	8005594 <_printf_common+0xd8>
 800555e:	2000      	movs	r0, #0
 8005560:	e008      	b.n	8005574 <_printf_common+0xb8>
 8005562:	2301      	movs	r3, #1
 8005564:	4652      	mov	r2, sl
 8005566:	4639      	mov	r1, r7
 8005568:	4630      	mov	r0, r6
 800556a:	47c0      	blx	r8
 800556c:	3001      	adds	r0, #1
 800556e:	d103      	bne.n	8005578 <_printf_common+0xbc>
 8005570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005578:	3501      	adds	r5, #1
 800557a:	e7c2      	b.n	8005502 <_printf_common+0x46>
 800557c:	2030      	movs	r0, #48	; 0x30
 800557e:	18e1      	adds	r1, r4, r3
 8005580:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005584:	1c5a      	adds	r2, r3, #1
 8005586:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800558a:	4422      	add	r2, r4
 800558c:	3302      	adds	r3, #2
 800558e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005592:	e7c4      	b.n	800551e <_printf_common+0x62>
 8005594:	2301      	movs	r3, #1
 8005596:	4622      	mov	r2, r4
 8005598:	4639      	mov	r1, r7
 800559a:	4630      	mov	r0, r6
 800559c:	47c0      	blx	r8
 800559e:	3001      	adds	r0, #1
 80055a0:	d0e6      	beq.n	8005570 <_printf_common+0xb4>
 80055a2:	f109 0901 	add.w	r9, r9, #1
 80055a6:	e7d8      	b.n	800555a <_printf_common+0x9e>

080055a8 <_printf_i>:
 80055a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80055ac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80055b0:	460c      	mov	r4, r1
 80055b2:	7e09      	ldrb	r1, [r1, #24]
 80055b4:	b085      	sub	sp, #20
 80055b6:	296e      	cmp	r1, #110	; 0x6e
 80055b8:	4617      	mov	r7, r2
 80055ba:	4606      	mov	r6, r0
 80055bc:	4698      	mov	r8, r3
 80055be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80055c0:	f000 80b3 	beq.w	800572a <_printf_i+0x182>
 80055c4:	d822      	bhi.n	800560c <_printf_i+0x64>
 80055c6:	2963      	cmp	r1, #99	; 0x63
 80055c8:	d036      	beq.n	8005638 <_printf_i+0x90>
 80055ca:	d80a      	bhi.n	80055e2 <_printf_i+0x3a>
 80055cc:	2900      	cmp	r1, #0
 80055ce:	f000 80b9 	beq.w	8005744 <_printf_i+0x19c>
 80055d2:	2958      	cmp	r1, #88	; 0x58
 80055d4:	f000 8083 	beq.w	80056de <_printf_i+0x136>
 80055d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80055e0:	e032      	b.n	8005648 <_printf_i+0xa0>
 80055e2:	2964      	cmp	r1, #100	; 0x64
 80055e4:	d001      	beq.n	80055ea <_printf_i+0x42>
 80055e6:	2969      	cmp	r1, #105	; 0x69
 80055e8:	d1f6      	bne.n	80055d8 <_printf_i+0x30>
 80055ea:	6820      	ldr	r0, [r4, #0]
 80055ec:	6813      	ldr	r3, [r2, #0]
 80055ee:	0605      	lsls	r5, r0, #24
 80055f0:	f103 0104 	add.w	r1, r3, #4
 80055f4:	d52a      	bpl.n	800564c <_printf_i+0xa4>
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6011      	str	r1, [r2, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	da03      	bge.n	8005606 <_printf_i+0x5e>
 80055fe:	222d      	movs	r2, #45	; 0x2d
 8005600:	425b      	negs	r3, r3
 8005602:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005606:	486f      	ldr	r0, [pc, #444]	; (80057c4 <_printf_i+0x21c>)
 8005608:	220a      	movs	r2, #10
 800560a:	e039      	b.n	8005680 <_printf_i+0xd8>
 800560c:	2973      	cmp	r1, #115	; 0x73
 800560e:	f000 809d 	beq.w	800574c <_printf_i+0x1a4>
 8005612:	d808      	bhi.n	8005626 <_printf_i+0x7e>
 8005614:	296f      	cmp	r1, #111	; 0x6f
 8005616:	d020      	beq.n	800565a <_printf_i+0xb2>
 8005618:	2970      	cmp	r1, #112	; 0x70
 800561a:	d1dd      	bne.n	80055d8 <_printf_i+0x30>
 800561c:	6823      	ldr	r3, [r4, #0]
 800561e:	f043 0320 	orr.w	r3, r3, #32
 8005622:	6023      	str	r3, [r4, #0]
 8005624:	e003      	b.n	800562e <_printf_i+0x86>
 8005626:	2975      	cmp	r1, #117	; 0x75
 8005628:	d017      	beq.n	800565a <_printf_i+0xb2>
 800562a:	2978      	cmp	r1, #120	; 0x78
 800562c:	d1d4      	bne.n	80055d8 <_printf_i+0x30>
 800562e:	2378      	movs	r3, #120	; 0x78
 8005630:	4865      	ldr	r0, [pc, #404]	; (80057c8 <_printf_i+0x220>)
 8005632:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005636:	e055      	b.n	80056e4 <_printf_i+0x13c>
 8005638:	6813      	ldr	r3, [r2, #0]
 800563a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800563e:	1d19      	adds	r1, r3, #4
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6011      	str	r1, [r2, #0]
 8005644:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005648:	2301      	movs	r3, #1
 800564a:	e08c      	b.n	8005766 <_printf_i+0x1be>
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005652:	6011      	str	r1, [r2, #0]
 8005654:	bf18      	it	ne
 8005656:	b21b      	sxthne	r3, r3
 8005658:	e7cf      	b.n	80055fa <_printf_i+0x52>
 800565a:	6813      	ldr	r3, [r2, #0]
 800565c:	6825      	ldr	r5, [r4, #0]
 800565e:	1d18      	adds	r0, r3, #4
 8005660:	6010      	str	r0, [r2, #0]
 8005662:	0628      	lsls	r0, r5, #24
 8005664:	d501      	bpl.n	800566a <_printf_i+0xc2>
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	e002      	b.n	8005670 <_printf_i+0xc8>
 800566a:	0668      	lsls	r0, r5, #25
 800566c:	d5fb      	bpl.n	8005666 <_printf_i+0xbe>
 800566e:	881b      	ldrh	r3, [r3, #0]
 8005670:	296f      	cmp	r1, #111	; 0x6f
 8005672:	bf14      	ite	ne
 8005674:	220a      	movne	r2, #10
 8005676:	2208      	moveq	r2, #8
 8005678:	4852      	ldr	r0, [pc, #328]	; (80057c4 <_printf_i+0x21c>)
 800567a:	2100      	movs	r1, #0
 800567c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005680:	6865      	ldr	r5, [r4, #4]
 8005682:	2d00      	cmp	r5, #0
 8005684:	60a5      	str	r5, [r4, #8]
 8005686:	f2c0 8095 	blt.w	80057b4 <_printf_i+0x20c>
 800568a:	6821      	ldr	r1, [r4, #0]
 800568c:	f021 0104 	bic.w	r1, r1, #4
 8005690:	6021      	str	r1, [r4, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d13d      	bne.n	8005712 <_printf_i+0x16a>
 8005696:	2d00      	cmp	r5, #0
 8005698:	f040 808e 	bne.w	80057b8 <_printf_i+0x210>
 800569c:	4665      	mov	r5, ip
 800569e:	2a08      	cmp	r2, #8
 80056a0:	d10b      	bne.n	80056ba <_printf_i+0x112>
 80056a2:	6823      	ldr	r3, [r4, #0]
 80056a4:	07db      	lsls	r3, r3, #31
 80056a6:	d508      	bpl.n	80056ba <_printf_i+0x112>
 80056a8:	6923      	ldr	r3, [r4, #16]
 80056aa:	6862      	ldr	r2, [r4, #4]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	bfde      	ittt	le
 80056b0:	2330      	movle	r3, #48	; 0x30
 80056b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80056b6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80056ba:	ebac 0305 	sub.w	r3, ip, r5
 80056be:	6123      	str	r3, [r4, #16]
 80056c0:	f8cd 8000 	str.w	r8, [sp]
 80056c4:	463b      	mov	r3, r7
 80056c6:	aa03      	add	r2, sp, #12
 80056c8:	4621      	mov	r1, r4
 80056ca:	4630      	mov	r0, r6
 80056cc:	f7ff fef6 	bl	80054bc <_printf_common>
 80056d0:	3001      	adds	r0, #1
 80056d2:	d14d      	bne.n	8005770 <_printf_i+0x1c8>
 80056d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056d8:	b005      	add	sp, #20
 80056da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80056de:	4839      	ldr	r0, [pc, #228]	; (80057c4 <_printf_i+0x21c>)
 80056e0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80056e4:	6813      	ldr	r3, [r2, #0]
 80056e6:	6821      	ldr	r1, [r4, #0]
 80056e8:	1d1d      	adds	r5, r3, #4
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6015      	str	r5, [r2, #0]
 80056ee:	060a      	lsls	r2, r1, #24
 80056f0:	d50b      	bpl.n	800570a <_printf_i+0x162>
 80056f2:	07ca      	lsls	r2, r1, #31
 80056f4:	bf44      	itt	mi
 80056f6:	f041 0120 	orrmi.w	r1, r1, #32
 80056fa:	6021      	strmi	r1, [r4, #0]
 80056fc:	b91b      	cbnz	r3, 8005706 <_printf_i+0x15e>
 80056fe:	6822      	ldr	r2, [r4, #0]
 8005700:	f022 0220 	bic.w	r2, r2, #32
 8005704:	6022      	str	r2, [r4, #0]
 8005706:	2210      	movs	r2, #16
 8005708:	e7b7      	b.n	800567a <_printf_i+0xd2>
 800570a:	064d      	lsls	r5, r1, #25
 800570c:	bf48      	it	mi
 800570e:	b29b      	uxthmi	r3, r3
 8005710:	e7ef      	b.n	80056f2 <_printf_i+0x14a>
 8005712:	4665      	mov	r5, ip
 8005714:	fbb3 f1f2 	udiv	r1, r3, r2
 8005718:	fb02 3311 	mls	r3, r2, r1, r3
 800571c:	5cc3      	ldrb	r3, [r0, r3]
 800571e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005722:	460b      	mov	r3, r1
 8005724:	2900      	cmp	r1, #0
 8005726:	d1f5      	bne.n	8005714 <_printf_i+0x16c>
 8005728:	e7b9      	b.n	800569e <_printf_i+0xf6>
 800572a:	6813      	ldr	r3, [r2, #0]
 800572c:	6825      	ldr	r5, [r4, #0]
 800572e:	1d18      	adds	r0, r3, #4
 8005730:	6961      	ldr	r1, [r4, #20]
 8005732:	6010      	str	r0, [r2, #0]
 8005734:	0628      	lsls	r0, r5, #24
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	d501      	bpl.n	800573e <_printf_i+0x196>
 800573a:	6019      	str	r1, [r3, #0]
 800573c:	e002      	b.n	8005744 <_printf_i+0x19c>
 800573e:	066a      	lsls	r2, r5, #25
 8005740:	d5fb      	bpl.n	800573a <_printf_i+0x192>
 8005742:	8019      	strh	r1, [r3, #0]
 8005744:	2300      	movs	r3, #0
 8005746:	4665      	mov	r5, ip
 8005748:	6123      	str	r3, [r4, #16]
 800574a:	e7b9      	b.n	80056c0 <_printf_i+0x118>
 800574c:	6813      	ldr	r3, [r2, #0]
 800574e:	1d19      	adds	r1, r3, #4
 8005750:	6011      	str	r1, [r2, #0]
 8005752:	681d      	ldr	r5, [r3, #0]
 8005754:	6862      	ldr	r2, [r4, #4]
 8005756:	2100      	movs	r1, #0
 8005758:	4628      	mov	r0, r5
 800575a:	f000 fa93 	bl	8005c84 <memchr>
 800575e:	b108      	cbz	r0, 8005764 <_printf_i+0x1bc>
 8005760:	1b40      	subs	r0, r0, r5
 8005762:	6060      	str	r0, [r4, #4]
 8005764:	6863      	ldr	r3, [r4, #4]
 8005766:	6123      	str	r3, [r4, #16]
 8005768:	2300      	movs	r3, #0
 800576a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800576e:	e7a7      	b.n	80056c0 <_printf_i+0x118>
 8005770:	6923      	ldr	r3, [r4, #16]
 8005772:	462a      	mov	r2, r5
 8005774:	4639      	mov	r1, r7
 8005776:	4630      	mov	r0, r6
 8005778:	47c0      	blx	r8
 800577a:	3001      	adds	r0, #1
 800577c:	d0aa      	beq.n	80056d4 <_printf_i+0x12c>
 800577e:	6823      	ldr	r3, [r4, #0]
 8005780:	079b      	lsls	r3, r3, #30
 8005782:	d413      	bmi.n	80057ac <_printf_i+0x204>
 8005784:	68e0      	ldr	r0, [r4, #12]
 8005786:	9b03      	ldr	r3, [sp, #12]
 8005788:	4298      	cmp	r0, r3
 800578a:	bfb8      	it	lt
 800578c:	4618      	movlt	r0, r3
 800578e:	e7a3      	b.n	80056d8 <_printf_i+0x130>
 8005790:	2301      	movs	r3, #1
 8005792:	464a      	mov	r2, r9
 8005794:	4639      	mov	r1, r7
 8005796:	4630      	mov	r0, r6
 8005798:	47c0      	blx	r8
 800579a:	3001      	adds	r0, #1
 800579c:	d09a      	beq.n	80056d4 <_printf_i+0x12c>
 800579e:	3501      	adds	r5, #1
 80057a0:	68e3      	ldr	r3, [r4, #12]
 80057a2:	9a03      	ldr	r2, [sp, #12]
 80057a4:	1a9b      	subs	r3, r3, r2
 80057a6:	42ab      	cmp	r3, r5
 80057a8:	dcf2      	bgt.n	8005790 <_printf_i+0x1e8>
 80057aa:	e7eb      	b.n	8005784 <_printf_i+0x1dc>
 80057ac:	2500      	movs	r5, #0
 80057ae:	f104 0919 	add.w	r9, r4, #25
 80057b2:	e7f5      	b.n	80057a0 <_printf_i+0x1f8>
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1ac      	bne.n	8005712 <_printf_i+0x16a>
 80057b8:	7803      	ldrb	r3, [r0, #0]
 80057ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057c2:	e76c      	b.n	800569e <_printf_i+0xf6>
 80057c4:	08005f01 	.word	0x08005f01
 80057c8:	08005f12 	.word	0x08005f12

080057cc <_sbrk_r>:
 80057cc:	b538      	push	{r3, r4, r5, lr}
 80057ce:	2300      	movs	r3, #0
 80057d0:	4c05      	ldr	r4, [pc, #20]	; (80057e8 <_sbrk_r+0x1c>)
 80057d2:	4605      	mov	r5, r0
 80057d4:	4608      	mov	r0, r1
 80057d6:	6023      	str	r3, [r4, #0]
 80057d8:	f7fa ff72 	bl	80006c0 <_sbrk>
 80057dc:	1c43      	adds	r3, r0, #1
 80057de:	d102      	bne.n	80057e6 <_sbrk_r+0x1a>
 80057e0:	6823      	ldr	r3, [r4, #0]
 80057e2:	b103      	cbz	r3, 80057e6 <_sbrk_r+0x1a>
 80057e4:	602b      	str	r3, [r5, #0]
 80057e6:	bd38      	pop	{r3, r4, r5, pc}
 80057e8:	20001cc8 	.word	0x20001cc8

080057ec <__sread>:
 80057ec:	b510      	push	{r4, lr}
 80057ee:	460c      	mov	r4, r1
 80057f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057f4:	f000 faa2 	bl	8005d3c <_read_r>
 80057f8:	2800      	cmp	r0, #0
 80057fa:	bfab      	itete	ge
 80057fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80057fe:	89a3      	ldrhlt	r3, [r4, #12]
 8005800:	181b      	addge	r3, r3, r0
 8005802:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005806:	bfac      	ite	ge
 8005808:	6563      	strge	r3, [r4, #84]	; 0x54
 800580a:	81a3      	strhlt	r3, [r4, #12]
 800580c:	bd10      	pop	{r4, pc}

0800580e <__swrite>:
 800580e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005812:	461f      	mov	r7, r3
 8005814:	898b      	ldrh	r3, [r1, #12]
 8005816:	4605      	mov	r5, r0
 8005818:	05db      	lsls	r3, r3, #23
 800581a:	460c      	mov	r4, r1
 800581c:	4616      	mov	r6, r2
 800581e:	d505      	bpl.n	800582c <__swrite+0x1e>
 8005820:	2302      	movs	r3, #2
 8005822:	2200      	movs	r2, #0
 8005824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005828:	f000 f9b6 	bl	8005b98 <_lseek_r>
 800582c:	89a3      	ldrh	r3, [r4, #12]
 800582e:	4632      	mov	r2, r6
 8005830:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005834:	81a3      	strh	r3, [r4, #12]
 8005836:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800583a:	463b      	mov	r3, r7
 800583c:	4628      	mov	r0, r5
 800583e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005842:	f000 b869 	b.w	8005918 <_write_r>

08005846 <__sseek>:
 8005846:	b510      	push	{r4, lr}
 8005848:	460c      	mov	r4, r1
 800584a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800584e:	f000 f9a3 	bl	8005b98 <_lseek_r>
 8005852:	1c43      	adds	r3, r0, #1
 8005854:	89a3      	ldrh	r3, [r4, #12]
 8005856:	bf15      	itete	ne
 8005858:	6560      	strne	r0, [r4, #84]	; 0x54
 800585a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800585e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005862:	81a3      	strheq	r3, [r4, #12]
 8005864:	bf18      	it	ne
 8005866:	81a3      	strhne	r3, [r4, #12]
 8005868:	bd10      	pop	{r4, pc}

0800586a <__sclose>:
 800586a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800586e:	f000 b8d3 	b.w	8005a18 <_close_r>
	...

08005874 <__swbuf_r>:
 8005874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005876:	460e      	mov	r6, r1
 8005878:	4614      	mov	r4, r2
 800587a:	4605      	mov	r5, r0
 800587c:	b118      	cbz	r0, 8005886 <__swbuf_r+0x12>
 800587e:	6983      	ldr	r3, [r0, #24]
 8005880:	b90b      	cbnz	r3, 8005886 <__swbuf_r+0x12>
 8005882:	f7ff fbf9 	bl	8005078 <__sinit>
 8005886:	4b21      	ldr	r3, [pc, #132]	; (800590c <__swbuf_r+0x98>)
 8005888:	429c      	cmp	r4, r3
 800588a:	d12a      	bne.n	80058e2 <__swbuf_r+0x6e>
 800588c:	686c      	ldr	r4, [r5, #4]
 800588e:	69a3      	ldr	r3, [r4, #24]
 8005890:	60a3      	str	r3, [r4, #8]
 8005892:	89a3      	ldrh	r3, [r4, #12]
 8005894:	071a      	lsls	r2, r3, #28
 8005896:	d52e      	bpl.n	80058f6 <__swbuf_r+0x82>
 8005898:	6923      	ldr	r3, [r4, #16]
 800589a:	b363      	cbz	r3, 80058f6 <__swbuf_r+0x82>
 800589c:	6923      	ldr	r3, [r4, #16]
 800589e:	6820      	ldr	r0, [r4, #0]
 80058a0:	b2f6      	uxtb	r6, r6
 80058a2:	1ac0      	subs	r0, r0, r3
 80058a4:	6963      	ldr	r3, [r4, #20]
 80058a6:	4637      	mov	r7, r6
 80058a8:	4283      	cmp	r3, r0
 80058aa:	dc04      	bgt.n	80058b6 <__swbuf_r+0x42>
 80058ac:	4621      	mov	r1, r4
 80058ae:	4628      	mov	r0, r5
 80058b0:	f000 f948 	bl	8005b44 <_fflush_r>
 80058b4:	bb28      	cbnz	r0, 8005902 <__swbuf_r+0x8e>
 80058b6:	68a3      	ldr	r3, [r4, #8]
 80058b8:	3001      	adds	r0, #1
 80058ba:	3b01      	subs	r3, #1
 80058bc:	60a3      	str	r3, [r4, #8]
 80058be:	6823      	ldr	r3, [r4, #0]
 80058c0:	1c5a      	adds	r2, r3, #1
 80058c2:	6022      	str	r2, [r4, #0]
 80058c4:	701e      	strb	r6, [r3, #0]
 80058c6:	6963      	ldr	r3, [r4, #20]
 80058c8:	4283      	cmp	r3, r0
 80058ca:	d004      	beq.n	80058d6 <__swbuf_r+0x62>
 80058cc:	89a3      	ldrh	r3, [r4, #12]
 80058ce:	07db      	lsls	r3, r3, #31
 80058d0:	d519      	bpl.n	8005906 <__swbuf_r+0x92>
 80058d2:	2e0a      	cmp	r6, #10
 80058d4:	d117      	bne.n	8005906 <__swbuf_r+0x92>
 80058d6:	4621      	mov	r1, r4
 80058d8:	4628      	mov	r0, r5
 80058da:	f000 f933 	bl	8005b44 <_fflush_r>
 80058de:	b190      	cbz	r0, 8005906 <__swbuf_r+0x92>
 80058e0:	e00f      	b.n	8005902 <__swbuf_r+0x8e>
 80058e2:	4b0b      	ldr	r3, [pc, #44]	; (8005910 <__swbuf_r+0x9c>)
 80058e4:	429c      	cmp	r4, r3
 80058e6:	d101      	bne.n	80058ec <__swbuf_r+0x78>
 80058e8:	68ac      	ldr	r4, [r5, #8]
 80058ea:	e7d0      	b.n	800588e <__swbuf_r+0x1a>
 80058ec:	4b09      	ldr	r3, [pc, #36]	; (8005914 <__swbuf_r+0xa0>)
 80058ee:	429c      	cmp	r4, r3
 80058f0:	bf08      	it	eq
 80058f2:	68ec      	ldreq	r4, [r5, #12]
 80058f4:	e7cb      	b.n	800588e <__swbuf_r+0x1a>
 80058f6:	4621      	mov	r1, r4
 80058f8:	4628      	mov	r0, r5
 80058fa:	f000 f81f 	bl	800593c <__swsetup_r>
 80058fe:	2800      	cmp	r0, #0
 8005900:	d0cc      	beq.n	800589c <__swbuf_r+0x28>
 8005902:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005906:	4638      	mov	r0, r7
 8005908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800590a:	bf00      	nop
 800590c:	08005eb0 	.word	0x08005eb0
 8005910:	08005ed0 	.word	0x08005ed0
 8005914:	08005e90 	.word	0x08005e90

08005918 <_write_r>:
 8005918:	b538      	push	{r3, r4, r5, lr}
 800591a:	4605      	mov	r5, r0
 800591c:	4608      	mov	r0, r1
 800591e:	4611      	mov	r1, r2
 8005920:	2200      	movs	r2, #0
 8005922:	4c05      	ldr	r4, [pc, #20]	; (8005938 <_write_r+0x20>)
 8005924:	6022      	str	r2, [r4, #0]
 8005926:	461a      	mov	r2, r3
 8005928:	f7fa fc38 	bl	800019c <_write>
 800592c:	1c43      	adds	r3, r0, #1
 800592e:	d102      	bne.n	8005936 <_write_r+0x1e>
 8005930:	6823      	ldr	r3, [r4, #0]
 8005932:	b103      	cbz	r3, 8005936 <_write_r+0x1e>
 8005934:	602b      	str	r3, [r5, #0]
 8005936:	bd38      	pop	{r3, r4, r5, pc}
 8005938:	20001cc8 	.word	0x20001cc8

0800593c <__swsetup_r>:
 800593c:	4b32      	ldr	r3, [pc, #200]	; (8005a08 <__swsetup_r+0xcc>)
 800593e:	b570      	push	{r4, r5, r6, lr}
 8005940:	681d      	ldr	r5, [r3, #0]
 8005942:	4606      	mov	r6, r0
 8005944:	460c      	mov	r4, r1
 8005946:	b125      	cbz	r5, 8005952 <__swsetup_r+0x16>
 8005948:	69ab      	ldr	r3, [r5, #24]
 800594a:	b913      	cbnz	r3, 8005952 <__swsetup_r+0x16>
 800594c:	4628      	mov	r0, r5
 800594e:	f7ff fb93 	bl	8005078 <__sinit>
 8005952:	4b2e      	ldr	r3, [pc, #184]	; (8005a0c <__swsetup_r+0xd0>)
 8005954:	429c      	cmp	r4, r3
 8005956:	d10f      	bne.n	8005978 <__swsetup_r+0x3c>
 8005958:	686c      	ldr	r4, [r5, #4]
 800595a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800595e:	b29a      	uxth	r2, r3
 8005960:	0715      	lsls	r5, r2, #28
 8005962:	d42c      	bmi.n	80059be <__swsetup_r+0x82>
 8005964:	06d0      	lsls	r0, r2, #27
 8005966:	d411      	bmi.n	800598c <__swsetup_r+0x50>
 8005968:	2209      	movs	r2, #9
 800596a:	6032      	str	r2, [r6, #0]
 800596c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005970:	81a3      	strh	r3, [r4, #12]
 8005972:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005976:	e03e      	b.n	80059f6 <__swsetup_r+0xba>
 8005978:	4b25      	ldr	r3, [pc, #148]	; (8005a10 <__swsetup_r+0xd4>)
 800597a:	429c      	cmp	r4, r3
 800597c:	d101      	bne.n	8005982 <__swsetup_r+0x46>
 800597e:	68ac      	ldr	r4, [r5, #8]
 8005980:	e7eb      	b.n	800595a <__swsetup_r+0x1e>
 8005982:	4b24      	ldr	r3, [pc, #144]	; (8005a14 <__swsetup_r+0xd8>)
 8005984:	429c      	cmp	r4, r3
 8005986:	bf08      	it	eq
 8005988:	68ec      	ldreq	r4, [r5, #12]
 800598a:	e7e6      	b.n	800595a <__swsetup_r+0x1e>
 800598c:	0751      	lsls	r1, r2, #29
 800598e:	d512      	bpl.n	80059b6 <__swsetup_r+0x7a>
 8005990:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005992:	b141      	cbz	r1, 80059a6 <__swsetup_r+0x6a>
 8005994:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005998:	4299      	cmp	r1, r3
 800599a:	d002      	beq.n	80059a2 <__swsetup_r+0x66>
 800599c:	4630      	mov	r0, r6
 800599e:	f000 f981 	bl	8005ca4 <_free_r>
 80059a2:	2300      	movs	r3, #0
 80059a4:	6363      	str	r3, [r4, #52]	; 0x34
 80059a6:	89a3      	ldrh	r3, [r4, #12]
 80059a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80059ac:	81a3      	strh	r3, [r4, #12]
 80059ae:	2300      	movs	r3, #0
 80059b0:	6063      	str	r3, [r4, #4]
 80059b2:	6923      	ldr	r3, [r4, #16]
 80059b4:	6023      	str	r3, [r4, #0]
 80059b6:	89a3      	ldrh	r3, [r4, #12]
 80059b8:	f043 0308 	orr.w	r3, r3, #8
 80059bc:	81a3      	strh	r3, [r4, #12]
 80059be:	6923      	ldr	r3, [r4, #16]
 80059c0:	b94b      	cbnz	r3, 80059d6 <__swsetup_r+0x9a>
 80059c2:	89a3      	ldrh	r3, [r4, #12]
 80059c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80059c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059cc:	d003      	beq.n	80059d6 <__swsetup_r+0x9a>
 80059ce:	4621      	mov	r1, r4
 80059d0:	4630      	mov	r0, r6
 80059d2:	f000 f917 	bl	8005c04 <__smakebuf_r>
 80059d6:	89a2      	ldrh	r2, [r4, #12]
 80059d8:	f012 0301 	ands.w	r3, r2, #1
 80059dc:	d00c      	beq.n	80059f8 <__swsetup_r+0xbc>
 80059de:	2300      	movs	r3, #0
 80059e0:	60a3      	str	r3, [r4, #8]
 80059e2:	6963      	ldr	r3, [r4, #20]
 80059e4:	425b      	negs	r3, r3
 80059e6:	61a3      	str	r3, [r4, #24]
 80059e8:	6923      	ldr	r3, [r4, #16]
 80059ea:	b953      	cbnz	r3, 8005a02 <__swsetup_r+0xc6>
 80059ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059f0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80059f4:	d1ba      	bne.n	800596c <__swsetup_r+0x30>
 80059f6:	bd70      	pop	{r4, r5, r6, pc}
 80059f8:	0792      	lsls	r2, r2, #30
 80059fa:	bf58      	it	pl
 80059fc:	6963      	ldrpl	r3, [r4, #20]
 80059fe:	60a3      	str	r3, [r4, #8]
 8005a00:	e7f2      	b.n	80059e8 <__swsetup_r+0xac>
 8005a02:	2000      	movs	r0, #0
 8005a04:	e7f7      	b.n	80059f6 <__swsetup_r+0xba>
 8005a06:	bf00      	nop
 8005a08:	20000010 	.word	0x20000010
 8005a0c:	08005eb0 	.word	0x08005eb0
 8005a10:	08005ed0 	.word	0x08005ed0
 8005a14:	08005e90 	.word	0x08005e90

08005a18 <_close_r>:
 8005a18:	b538      	push	{r3, r4, r5, lr}
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	4c05      	ldr	r4, [pc, #20]	; (8005a34 <_close_r+0x1c>)
 8005a1e:	4605      	mov	r5, r0
 8005a20:	4608      	mov	r0, r1
 8005a22:	6023      	str	r3, [r4, #0]
 8005a24:	f7fa fe1b 	bl	800065e <_close>
 8005a28:	1c43      	adds	r3, r0, #1
 8005a2a:	d102      	bne.n	8005a32 <_close_r+0x1a>
 8005a2c:	6823      	ldr	r3, [r4, #0]
 8005a2e:	b103      	cbz	r3, 8005a32 <_close_r+0x1a>
 8005a30:	602b      	str	r3, [r5, #0]
 8005a32:	bd38      	pop	{r3, r4, r5, pc}
 8005a34:	20001cc8 	.word	0x20001cc8

08005a38 <__sflush_r>:
 8005a38:	898a      	ldrh	r2, [r1, #12]
 8005a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a3e:	4605      	mov	r5, r0
 8005a40:	0710      	lsls	r0, r2, #28
 8005a42:	460c      	mov	r4, r1
 8005a44:	d458      	bmi.n	8005af8 <__sflush_r+0xc0>
 8005a46:	684b      	ldr	r3, [r1, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	dc05      	bgt.n	8005a58 <__sflush_r+0x20>
 8005a4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	dc02      	bgt.n	8005a58 <__sflush_r+0x20>
 8005a52:	2000      	movs	r0, #0
 8005a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a5a:	2e00      	cmp	r6, #0
 8005a5c:	d0f9      	beq.n	8005a52 <__sflush_r+0x1a>
 8005a5e:	2300      	movs	r3, #0
 8005a60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a64:	682f      	ldr	r7, [r5, #0]
 8005a66:	6a21      	ldr	r1, [r4, #32]
 8005a68:	602b      	str	r3, [r5, #0]
 8005a6a:	d032      	beq.n	8005ad2 <__sflush_r+0x9a>
 8005a6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a6e:	89a3      	ldrh	r3, [r4, #12]
 8005a70:	075a      	lsls	r2, r3, #29
 8005a72:	d505      	bpl.n	8005a80 <__sflush_r+0x48>
 8005a74:	6863      	ldr	r3, [r4, #4]
 8005a76:	1ac0      	subs	r0, r0, r3
 8005a78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a7a:	b10b      	cbz	r3, 8005a80 <__sflush_r+0x48>
 8005a7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a7e:	1ac0      	subs	r0, r0, r3
 8005a80:	2300      	movs	r3, #0
 8005a82:	4602      	mov	r2, r0
 8005a84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a86:	6a21      	ldr	r1, [r4, #32]
 8005a88:	4628      	mov	r0, r5
 8005a8a:	47b0      	blx	r6
 8005a8c:	1c43      	adds	r3, r0, #1
 8005a8e:	89a3      	ldrh	r3, [r4, #12]
 8005a90:	d106      	bne.n	8005aa0 <__sflush_r+0x68>
 8005a92:	6829      	ldr	r1, [r5, #0]
 8005a94:	291d      	cmp	r1, #29
 8005a96:	d848      	bhi.n	8005b2a <__sflush_r+0xf2>
 8005a98:	4a29      	ldr	r2, [pc, #164]	; (8005b40 <__sflush_r+0x108>)
 8005a9a:	40ca      	lsrs	r2, r1
 8005a9c:	07d6      	lsls	r6, r2, #31
 8005a9e:	d544      	bpl.n	8005b2a <__sflush_r+0xf2>
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	6062      	str	r2, [r4, #4]
 8005aa4:	6922      	ldr	r2, [r4, #16]
 8005aa6:	04d9      	lsls	r1, r3, #19
 8005aa8:	6022      	str	r2, [r4, #0]
 8005aaa:	d504      	bpl.n	8005ab6 <__sflush_r+0x7e>
 8005aac:	1c42      	adds	r2, r0, #1
 8005aae:	d101      	bne.n	8005ab4 <__sflush_r+0x7c>
 8005ab0:	682b      	ldr	r3, [r5, #0]
 8005ab2:	b903      	cbnz	r3, 8005ab6 <__sflush_r+0x7e>
 8005ab4:	6560      	str	r0, [r4, #84]	; 0x54
 8005ab6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ab8:	602f      	str	r7, [r5, #0]
 8005aba:	2900      	cmp	r1, #0
 8005abc:	d0c9      	beq.n	8005a52 <__sflush_r+0x1a>
 8005abe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ac2:	4299      	cmp	r1, r3
 8005ac4:	d002      	beq.n	8005acc <__sflush_r+0x94>
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	f000 f8ec 	bl	8005ca4 <_free_r>
 8005acc:	2000      	movs	r0, #0
 8005ace:	6360      	str	r0, [r4, #52]	; 0x34
 8005ad0:	e7c0      	b.n	8005a54 <__sflush_r+0x1c>
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	47b0      	blx	r6
 8005ad8:	1c41      	adds	r1, r0, #1
 8005ada:	d1c8      	bne.n	8005a6e <__sflush_r+0x36>
 8005adc:	682b      	ldr	r3, [r5, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d0c5      	beq.n	8005a6e <__sflush_r+0x36>
 8005ae2:	2b1d      	cmp	r3, #29
 8005ae4:	d001      	beq.n	8005aea <__sflush_r+0xb2>
 8005ae6:	2b16      	cmp	r3, #22
 8005ae8:	d101      	bne.n	8005aee <__sflush_r+0xb6>
 8005aea:	602f      	str	r7, [r5, #0]
 8005aec:	e7b1      	b.n	8005a52 <__sflush_r+0x1a>
 8005aee:	89a3      	ldrh	r3, [r4, #12]
 8005af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005af4:	81a3      	strh	r3, [r4, #12]
 8005af6:	e7ad      	b.n	8005a54 <__sflush_r+0x1c>
 8005af8:	690f      	ldr	r7, [r1, #16]
 8005afa:	2f00      	cmp	r7, #0
 8005afc:	d0a9      	beq.n	8005a52 <__sflush_r+0x1a>
 8005afe:	0793      	lsls	r3, r2, #30
 8005b00:	bf18      	it	ne
 8005b02:	2300      	movne	r3, #0
 8005b04:	680e      	ldr	r6, [r1, #0]
 8005b06:	bf08      	it	eq
 8005b08:	694b      	ldreq	r3, [r1, #20]
 8005b0a:	eba6 0807 	sub.w	r8, r6, r7
 8005b0e:	600f      	str	r7, [r1, #0]
 8005b10:	608b      	str	r3, [r1, #8]
 8005b12:	f1b8 0f00 	cmp.w	r8, #0
 8005b16:	dd9c      	ble.n	8005a52 <__sflush_r+0x1a>
 8005b18:	4643      	mov	r3, r8
 8005b1a:	463a      	mov	r2, r7
 8005b1c:	6a21      	ldr	r1, [r4, #32]
 8005b1e:	4628      	mov	r0, r5
 8005b20:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b22:	47b0      	blx	r6
 8005b24:	2800      	cmp	r0, #0
 8005b26:	dc06      	bgt.n	8005b36 <__sflush_r+0xfe>
 8005b28:	89a3      	ldrh	r3, [r4, #12]
 8005b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b2e:	81a3      	strh	r3, [r4, #12]
 8005b30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b34:	e78e      	b.n	8005a54 <__sflush_r+0x1c>
 8005b36:	4407      	add	r7, r0
 8005b38:	eba8 0800 	sub.w	r8, r8, r0
 8005b3c:	e7e9      	b.n	8005b12 <__sflush_r+0xda>
 8005b3e:	bf00      	nop
 8005b40:	20400001 	.word	0x20400001

08005b44 <_fflush_r>:
 8005b44:	b538      	push	{r3, r4, r5, lr}
 8005b46:	690b      	ldr	r3, [r1, #16]
 8005b48:	4605      	mov	r5, r0
 8005b4a:	460c      	mov	r4, r1
 8005b4c:	b1db      	cbz	r3, 8005b86 <_fflush_r+0x42>
 8005b4e:	b118      	cbz	r0, 8005b58 <_fflush_r+0x14>
 8005b50:	6983      	ldr	r3, [r0, #24]
 8005b52:	b90b      	cbnz	r3, 8005b58 <_fflush_r+0x14>
 8005b54:	f7ff fa90 	bl	8005078 <__sinit>
 8005b58:	4b0c      	ldr	r3, [pc, #48]	; (8005b8c <_fflush_r+0x48>)
 8005b5a:	429c      	cmp	r4, r3
 8005b5c:	d109      	bne.n	8005b72 <_fflush_r+0x2e>
 8005b5e:	686c      	ldr	r4, [r5, #4]
 8005b60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b64:	b17b      	cbz	r3, 8005b86 <_fflush_r+0x42>
 8005b66:	4621      	mov	r1, r4
 8005b68:	4628      	mov	r0, r5
 8005b6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b6e:	f7ff bf63 	b.w	8005a38 <__sflush_r>
 8005b72:	4b07      	ldr	r3, [pc, #28]	; (8005b90 <_fflush_r+0x4c>)
 8005b74:	429c      	cmp	r4, r3
 8005b76:	d101      	bne.n	8005b7c <_fflush_r+0x38>
 8005b78:	68ac      	ldr	r4, [r5, #8]
 8005b7a:	e7f1      	b.n	8005b60 <_fflush_r+0x1c>
 8005b7c:	4b05      	ldr	r3, [pc, #20]	; (8005b94 <_fflush_r+0x50>)
 8005b7e:	429c      	cmp	r4, r3
 8005b80:	bf08      	it	eq
 8005b82:	68ec      	ldreq	r4, [r5, #12]
 8005b84:	e7ec      	b.n	8005b60 <_fflush_r+0x1c>
 8005b86:	2000      	movs	r0, #0
 8005b88:	bd38      	pop	{r3, r4, r5, pc}
 8005b8a:	bf00      	nop
 8005b8c:	08005eb0 	.word	0x08005eb0
 8005b90:	08005ed0 	.word	0x08005ed0
 8005b94:	08005e90 	.word	0x08005e90

08005b98 <_lseek_r>:
 8005b98:	b538      	push	{r3, r4, r5, lr}
 8005b9a:	4605      	mov	r5, r0
 8005b9c:	4608      	mov	r0, r1
 8005b9e:	4611      	mov	r1, r2
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	4c05      	ldr	r4, [pc, #20]	; (8005bb8 <_lseek_r+0x20>)
 8005ba4:	6022      	str	r2, [r4, #0]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	f7fa fd7d 	bl	80006a6 <_lseek>
 8005bac:	1c43      	adds	r3, r0, #1
 8005bae:	d102      	bne.n	8005bb6 <_lseek_r+0x1e>
 8005bb0:	6823      	ldr	r3, [r4, #0]
 8005bb2:	b103      	cbz	r3, 8005bb6 <_lseek_r+0x1e>
 8005bb4:	602b      	str	r3, [r5, #0]
 8005bb6:	bd38      	pop	{r3, r4, r5, pc}
 8005bb8:	20001cc8 	.word	0x20001cc8

08005bbc <__swhatbuf_r>:
 8005bbc:	b570      	push	{r4, r5, r6, lr}
 8005bbe:	460e      	mov	r6, r1
 8005bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bc4:	b096      	sub	sp, #88	; 0x58
 8005bc6:	2900      	cmp	r1, #0
 8005bc8:	4614      	mov	r4, r2
 8005bca:	461d      	mov	r5, r3
 8005bcc:	da07      	bge.n	8005bde <__swhatbuf_r+0x22>
 8005bce:	2300      	movs	r3, #0
 8005bd0:	602b      	str	r3, [r5, #0]
 8005bd2:	89b3      	ldrh	r3, [r6, #12]
 8005bd4:	061a      	lsls	r2, r3, #24
 8005bd6:	d410      	bmi.n	8005bfa <__swhatbuf_r+0x3e>
 8005bd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bdc:	e00e      	b.n	8005bfc <__swhatbuf_r+0x40>
 8005bde:	466a      	mov	r2, sp
 8005be0:	f000 f8be 	bl	8005d60 <_fstat_r>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	dbf2      	blt.n	8005bce <__swhatbuf_r+0x12>
 8005be8:	9a01      	ldr	r2, [sp, #4]
 8005bea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005bee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005bf2:	425a      	negs	r2, r3
 8005bf4:	415a      	adcs	r2, r3
 8005bf6:	602a      	str	r2, [r5, #0]
 8005bf8:	e7ee      	b.n	8005bd8 <__swhatbuf_r+0x1c>
 8005bfa:	2340      	movs	r3, #64	; 0x40
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	6023      	str	r3, [r4, #0]
 8005c00:	b016      	add	sp, #88	; 0x58
 8005c02:	bd70      	pop	{r4, r5, r6, pc}

08005c04 <__smakebuf_r>:
 8005c04:	898b      	ldrh	r3, [r1, #12]
 8005c06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c08:	079d      	lsls	r5, r3, #30
 8005c0a:	4606      	mov	r6, r0
 8005c0c:	460c      	mov	r4, r1
 8005c0e:	d507      	bpl.n	8005c20 <__smakebuf_r+0x1c>
 8005c10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c14:	6023      	str	r3, [r4, #0]
 8005c16:	6123      	str	r3, [r4, #16]
 8005c18:	2301      	movs	r3, #1
 8005c1a:	6163      	str	r3, [r4, #20]
 8005c1c:	b002      	add	sp, #8
 8005c1e:	bd70      	pop	{r4, r5, r6, pc}
 8005c20:	ab01      	add	r3, sp, #4
 8005c22:	466a      	mov	r2, sp
 8005c24:	f7ff ffca 	bl	8005bbc <__swhatbuf_r>
 8005c28:	9900      	ldr	r1, [sp, #0]
 8005c2a:	4605      	mov	r5, r0
 8005c2c:	4630      	mov	r0, r6
 8005c2e:	f7ff faad 	bl	800518c <_malloc_r>
 8005c32:	b948      	cbnz	r0, 8005c48 <__smakebuf_r+0x44>
 8005c34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c38:	059a      	lsls	r2, r3, #22
 8005c3a:	d4ef      	bmi.n	8005c1c <__smakebuf_r+0x18>
 8005c3c:	f023 0303 	bic.w	r3, r3, #3
 8005c40:	f043 0302 	orr.w	r3, r3, #2
 8005c44:	81a3      	strh	r3, [r4, #12]
 8005c46:	e7e3      	b.n	8005c10 <__smakebuf_r+0xc>
 8005c48:	4b0d      	ldr	r3, [pc, #52]	; (8005c80 <__smakebuf_r+0x7c>)
 8005c4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c4c:	89a3      	ldrh	r3, [r4, #12]
 8005c4e:	6020      	str	r0, [r4, #0]
 8005c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c54:	81a3      	strh	r3, [r4, #12]
 8005c56:	9b00      	ldr	r3, [sp, #0]
 8005c58:	6120      	str	r0, [r4, #16]
 8005c5a:	6163      	str	r3, [r4, #20]
 8005c5c:	9b01      	ldr	r3, [sp, #4]
 8005c5e:	b15b      	cbz	r3, 8005c78 <__smakebuf_r+0x74>
 8005c60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c64:	4630      	mov	r0, r6
 8005c66:	f000 f88d 	bl	8005d84 <_isatty_r>
 8005c6a:	b128      	cbz	r0, 8005c78 <__smakebuf_r+0x74>
 8005c6c:	89a3      	ldrh	r3, [r4, #12]
 8005c6e:	f023 0303 	bic.w	r3, r3, #3
 8005c72:	f043 0301 	orr.w	r3, r3, #1
 8005c76:	81a3      	strh	r3, [r4, #12]
 8005c78:	89a3      	ldrh	r3, [r4, #12]
 8005c7a:	431d      	orrs	r5, r3
 8005c7c:	81a5      	strh	r5, [r4, #12]
 8005c7e:	e7cd      	b.n	8005c1c <__smakebuf_r+0x18>
 8005c80:	08005041 	.word	0x08005041

08005c84 <memchr>:
 8005c84:	b510      	push	{r4, lr}
 8005c86:	b2c9      	uxtb	r1, r1
 8005c88:	4402      	add	r2, r0
 8005c8a:	4290      	cmp	r0, r2
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	d101      	bne.n	8005c94 <memchr+0x10>
 8005c90:	2300      	movs	r3, #0
 8005c92:	e003      	b.n	8005c9c <memchr+0x18>
 8005c94:	781c      	ldrb	r4, [r3, #0]
 8005c96:	3001      	adds	r0, #1
 8005c98:	428c      	cmp	r4, r1
 8005c9a:	d1f6      	bne.n	8005c8a <memchr+0x6>
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	bd10      	pop	{r4, pc}

08005ca0 <__malloc_lock>:
 8005ca0:	4770      	bx	lr

08005ca2 <__malloc_unlock>:
 8005ca2:	4770      	bx	lr

08005ca4 <_free_r>:
 8005ca4:	b538      	push	{r3, r4, r5, lr}
 8005ca6:	4605      	mov	r5, r0
 8005ca8:	2900      	cmp	r1, #0
 8005caa:	d043      	beq.n	8005d34 <_free_r+0x90>
 8005cac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cb0:	1f0c      	subs	r4, r1, #4
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	bfb8      	it	lt
 8005cb6:	18e4      	addlt	r4, r4, r3
 8005cb8:	f7ff fff2 	bl	8005ca0 <__malloc_lock>
 8005cbc:	4a1e      	ldr	r2, [pc, #120]	; (8005d38 <_free_r+0x94>)
 8005cbe:	6813      	ldr	r3, [r2, #0]
 8005cc0:	4610      	mov	r0, r2
 8005cc2:	b933      	cbnz	r3, 8005cd2 <_free_r+0x2e>
 8005cc4:	6063      	str	r3, [r4, #4]
 8005cc6:	6014      	str	r4, [r2, #0]
 8005cc8:	4628      	mov	r0, r5
 8005cca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cce:	f7ff bfe8 	b.w	8005ca2 <__malloc_unlock>
 8005cd2:	42a3      	cmp	r3, r4
 8005cd4:	d90b      	bls.n	8005cee <_free_r+0x4a>
 8005cd6:	6821      	ldr	r1, [r4, #0]
 8005cd8:	1862      	adds	r2, r4, r1
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	bf01      	itttt	eq
 8005cde:	681a      	ldreq	r2, [r3, #0]
 8005ce0:	685b      	ldreq	r3, [r3, #4]
 8005ce2:	1852      	addeq	r2, r2, r1
 8005ce4:	6022      	streq	r2, [r4, #0]
 8005ce6:	6063      	str	r3, [r4, #4]
 8005ce8:	6004      	str	r4, [r0, #0]
 8005cea:	e7ed      	b.n	8005cc8 <_free_r+0x24>
 8005cec:	4613      	mov	r3, r2
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	b10a      	cbz	r2, 8005cf6 <_free_r+0x52>
 8005cf2:	42a2      	cmp	r2, r4
 8005cf4:	d9fa      	bls.n	8005cec <_free_r+0x48>
 8005cf6:	6819      	ldr	r1, [r3, #0]
 8005cf8:	1858      	adds	r0, r3, r1
 8005cfa:	42a0      	cmp	r0, r4
 8005cfc:	d10b      	bne.n	8005d16 <_free_r+0x72>
 8005cfe:	6820      	ldr	r0, [r4, #0]
 8005d00:	4401      	add	r1, r0
 8005d02:	1858      	adds	r0, r3, r1
 8005d04:	4282      	cmp	r2, r0
 8005d06:	6019      	str	r1, [r3, #0]
 8005d08:	d1de      	bne.n	8005cc8 <_free_r+0x24>
 8005d0a:	6810      	ldr	r0, [r2, #0]
 8005d0c:	6852      	ldr	r2, [r2, #4]
 8005d0e:	4401      	add	r1, r0
 8005d10:	6019      	str	r1, [r3, #0]
 8005d12:	605a      	str	r2, [r3, #4]
 8005d14:	e7d8      	b.n	8005cc8 <_free_r+0x24>
 8005d16:	d902      	bls.n	8005d1e <_free_r+0x7a>
 8005d18:	230c      	movs	r3, #12
 8005d1a:	602b      	str	r3, [r5, #0]
 8005d1c:	e7d4      	b.n	8005cc8 <_free_r+0x24>
 8005d1e:	6820      	ldr	r0, [r4, #0]
 8005d20:	1821      	adds	r1, r4, r0
 8005d22:	428a      	cmp	r2, r1
 8005d24:	bf01      	itttt	eq
 8005d26:	6811      	ldreq	r1, [r2, #0]
 8005d28:	6852      	ldreq	r2, [r2, #4]
 8005d2a:	1809      	addeq	r1, r1, r0
 8005d2c:	6021      	streq	r1, [r4, #0]
 8005d2e:	6062      	str	r2, [r4, #4]
 8005d30:	605c      	str	r4, [r3, #4]
 8005d32:	e7c9      	b.n	8005cc8 <_free_r+0x24>
 8005d34:	bd38      	pop	{r3, r4, r5, pc}
 8005d36:	bf00      	nop
 8005d38:	2000199c 	.word	0x2000199c

08005d3c <_read_r>:
 8005d3c:	b538      	push	{r3, r4, r5, lr}
 8005d3e:	4605      	mov	r5, r0
 8005d40:	4608      	mov	r0, r1
 8005d42:	4611      	mov	r1, r2
 8005d44:	2200      	movs	r2, #0
 8005d46:	4c05      	ldr	r4, [pc, #20]	; (8005d5c <_read_r+0x20>)
 8005d48:	6022      	str	r2, [r4, #0]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f7fa fc6a 	bl	8000624 <_read>
 8005d50:	1c43      	adds	r3, r0, #1
 8005d52:	d102      	bne.n	8005d5a <_read_r+0x1e>
 8005d54:	6823      	ldr	r3, [r4, #0]
 8005d56:	b103      	cbz	r3, 8005d5a <_read_r+0x1e>
 8005d58:	602b      	str	r3, [r5, #0]
 8005d5a:	bd38      	pop	{r3, r4, r5, pc}
 8005d5c:	20001cc8 	.word	0x20001cc8

08005d60 <_fstat_r>:
 8005d60:	b538      	push	{r3, r4, r5, lr}
 8005d62:	2300      	movs	r3, #0
 8005d64:	4c06      	ldr	r4, [pc, #24]	; (8005d80 <_fstat_r+0x20>)
 8005d66:	4605      	mov	r5, r0
 8005d68:	4608      	mov	r0, r1
 8005d6a:	4611      	mov	r1, r2
 8005d6c:	6023      	str	r3, [r4, #0]
 8005d6e:	f7fa fc81 	bl	8000674 <_fstat>
 8005d72:	1c43      	adds	r3, r0, #1
 8005d74:	d102      	bne.n	8005d7c <_fstat_r+0x1c>
 8005d76:	6823      	ldr	r3, [r4, #0]
 8005d78:	b103      	cbz	r3, 8005d7c <_fstat_r+0x1c>
 8005d7a:	602b      	str	r3, [r5, #0]
 8005d7c:	bd38      	pop	{r3, r4, r5, pc}
 8005d7e:	bf00      	nop
 8005d80:	20001cc8 	.word	0x20001cc8

08005d84 <_isatty_r>:
 8005d84:	b538      	push	{r3, r4, r5, lr}
 8005d86:	2300      	movs	r3, #0
 8005d88:	4c05      	ldr	r4, [pc, #20]	; (8005da0 <_isatty_r+0x1c>)
 8005d8a:	4605      	mov	r5, r0
 8005d8c:	4608      	mov	r0, r1
 8005d8e:	6023      	str	r3, [r4, #0]
 8005d90:	f7fa fc7f 	bl	8000692 <_isatty>
 8005d94:	1c43      	adds	r3, r0, #1
 8005d96:	d102      	bne.n	8005d9e <_isatty_r+0x1a>
 8005d98:	6823      	ldr	r3, [r4, #0]
 8005d9a:	b103      	cbz	r3, 8005d9e <_isatty_r+0x1a>
 8005d9c:	602b      	str	r3, [r5, #0]
 8005d9e:	bd38      	pop	{r3, r4, r5, pc}
 8005da0:	20001cc8 	.word	0x20001cc8

08005da4 <_init>:
 8005da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da6:	bf00      	nop
 8005da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005daa:	bc08      	pop	{r3}
 8005dac:	469e      	mov	lr, r3
 8005dae:	4770      	bx	lr

08005db0 <_fini>:
 8005db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db2:	bf00      	nop
 8005db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005db6:	bc08      	pop	{r3}
 8005db8:	469e      	mov	lr, r3
 8005dba:	4770      	bx	lr
