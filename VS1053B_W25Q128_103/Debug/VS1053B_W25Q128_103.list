
VS1053B_W25Q128_103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004820  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  0800492c  0800492c  0001492c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ad8  08004ad8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004ad8  08004ad8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ad8  08004ad8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ad8  08004ad8  00014ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004adc  08004adc  00014adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004ae0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  20000074  08004b54  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  08004b54  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff4b  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002637  00000000  00000000  0002ffe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  00032620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec0  00000000  00000000  000335d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019224  00000000  00000000  00034498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000110c6  00000000  00000000  0004d6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dfea  00000000  00000000  0005e782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec76c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004898  00000000  00000000  000ec7bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08004914 	.word	0x08004914

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08004914 	.word	0x08004914

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800016c:	f003 0301 	and.w	r3, r3, #1
 8000170:	2b00      	cmp	r3, #0
 8000172:	d013      	beq.n	800019c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000174:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000178:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800017c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000180:	2b00      	cmp	r3, #0
 8000182:	d00b      	beq.n	800019c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000184:	e000      	b.n	8000188 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000186:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000188:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d0f9      	beq.n	8000186 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000192:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000196:	687a      	ldr	r2, [r7, #4]
 8000198:	b2d2      	uxtb	r2, r2
 800019a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800019c:	687b      	ldr	r3, [r7, #4]
}
 800019e:	4618      	mov	r0, r3
 80001a0:	370c      	adds	r7, #12
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <send_uart>:
static void MX_DMA_Init(void);
static void MX_SPI1_Init(void);
static void MX_SPI2_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void send_uart(unsigned char *string) {
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b084      	sub	sp, #16
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
	uint16_t len = strlen((const char*) string);
 80001b0:	6878      	ldr	r0, [r7, #4]
 80001b2:	f7ff ffcb 	bl	800014c <strlen>
 80001b6:	4603      	mov	r3, r0
 80001b8:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart1, (uint8_t*) string, len, HAL_MAX_DELAY); // transmit in blocking mode
 80001ba:	89fa      	ldrh	r2, [r7, #14]
 80001bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80001c0:	6879      	ldr	r1, [r7, #4]
 80001c2:	4803      	ldr	r0, [pc, #12]	; (80001d0 <send_uart+0x28>)
 80001c4:	f002 fde6 	bl	8002d94 <HAL_UART_Transmit>
}
 80001c8:	bf00      	nop
 80001ca:	3710      	adds	r7, #16
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}
 80001d0:	20000248 	.word	0x20000248

080001d4 <_write>:

int _write(int file, char *ptr, int len) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af00      	add	r7, sp, #0
 80001da:	60f8      	str	r0, [r7, #12]
 80001dc:	60b9      	str	r1, [r7, #8]
 80001de:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 50);
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	b29a      	uxth	r2, r3
 80001e4:	2332      	movs	r3, #50	; 0x32
 80001e6:	68b9      	ldr	r1, [r7, #8]
 80001e8:	480c      	ldr	r0, [pc, #48]	; (800021c <_write+0x48>)
 80001ea:	f002 fdd3 	bl	8002d94 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 80001ee:	2300      	movs	r3, #0
 80001f0:	617b      	str	r3, [r7, #20]
 80001f2:	e009      	b.n	8000208 <_write+0x34>
		ITM_SendChar(*ptr++);
 80001f4:	68bb      	ldr	r3, [r7, #8]
 80001f6:	1c5a      	adds	r2, r3, #1
 80001f8:	60ba      	str	r2, [r7, #8]
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	4618      	mov	r0, r3
 80001fe:	f7ff ffad 	bl	800015c <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8000202:	697b      	ldr	r3, [r7, #20]
 8000204:	3301      	adds	r3, #1
 8000206:	617b      	str	r3, [r7, #20]
 8000208:	697a      	ldr	r2, [r7, #20]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	429a      	cmp	r2, r3
 800020e:	dbf1      	blt.n	80001f4 <_write+0x20>
	}
	return len;
 8000210:	687b      	ldr	r3, [r7, #4]
}
 8000212:	4618      	mov	r0, r3
 8000214:	3718      	adds	r7, #24
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	20000248 	.word	0x20000248

08000220 <play_music.0>:
	MX_DMA_Init();
	MX_SPI1_Init();
	MX_SPI2_Init();
	MX_USART1_UART_Init();
	/* USER CODE BEGIN 2 */
	void play_music(uint32_t addr_pointer, uint32_t song_end_addr) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	f8c7 c004 	str.w	ip, [r7, #4]
		while (addr_pointer < song_end_addr) {
 800022e:	e058      	b.n	80002e2 <play_music.0+0xc2>
			if (next_page_flag) {
 8000230:	4b30      	ldr	r3, [pc, #192]	; (80002f4 <play_music.0+0xd4>)
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d01a      	beq.n	800026e <play_music.0+0x4e>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000238:	2200      	movs	r2, #0
 800023a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800023e:	482e      	ldr	r0, [pc, #184]	; (80002f8 <play_music.0+0xd8>)
 8000240:	f001 fe32 	bl	8001ea8 <HAL_GPIO_WritePin>
				flash_read_page(music_buf, addr_pointer, 255);
 8000244:	22ff      	movs	r2, #255	; 0xff
 8000246:	68f9      	ldr	r1, [r7, #12]
 8000248:	482c      	ldr	r0, [pc, #176]	; (80002fc <play_music.0+0xdc>)
 800024a:	f001 f833 	bl	80012b4 <flash_read_page>
				page_pointer = 0;
 800024e:	4b2c      	ldr	r3, [pc, #176]	; (8000300 <play_music.0+0xe0>)
 8000250:	2200      	movs	r2, #0
 8000252:	701a      	strb	r2, [r3, #0]
				addr_pointer += 256;
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800025a:	60fb      	str	r3, [r7, #12]
				next_page_flag = false;
 800025c:	4b25      	ldr	r3, [pc, #148]	; (80002f4 <play_music.0+0xd4>)
 800025e:	2200      	movs	r2, #0
 8000260:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000262:	2201      	movs	r2, #1
 8000264:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000268:	4823      	ldr	r0, [pc, #140]	; (80002f8 <play_music.0+0xd8>)
 800026a:	f001 fe1d 	bl	8001ea8 <HAL_GPIO_WritePin>
			}
			if (vs1053_isDataReq()) {
 800026e:	f000 ff13 	bl	8001098 <vs1053_isDataReq>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d034      	beq.n	80002e2 <play_music.0+0xc2>
				if (!pause_flag && !stop_flag) {
 8000278:	4b22      	ldr	r3, [pc, #136]	; (8000304 <play_music.0+0xe4>)
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	f083 0301 	eor.w	r3, r3, #1
 8000280:	b2db      	uxtb	r3, r3
 8000282:	2b00      	cmp	r3, #0
 8000284:	d025      	beq.n	80002d2 <play_music.0+0xb2>
 8000286:	4b20      	ldr	r3, [pc, #128]	; (8000308 <play_music.0+0xe8>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	f083 0301 	eor.w	r3, r3, #1
 800028e:	b2db      	uxtb	r3, r3
 8000290:	2b00      	cmp	r3, #0
 8000292:	d01e      	beq.n	80002d2 <play_music.0+0xb2>
					vs1053_send32(&(music_buf[page_pointer]));
 8000294:	4b1a      	ldr	r3, [pc, #104]	; (8000300 <play_music.0+0xe0>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	461a      	mov	r2, r3
 800029a:	4b18      	ldr	r3, [pc, #96]	; (80002fc <play_music.0+0xdc>)
 800029c:	4413      	add	r3, r2
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 ff0c 	bl	80010bc <vs1053_send32>
					if (page_pointer < 193) {
 80002a4:	4b16      	ldr	r3, [pc, #88]	; (8000300 <play_music.0+0xe0>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	2bc0      	cmp	r3, #192	; 0xc0
 80002aa:	d806      	bhi.n	80002ba <play_music.0+0x9a>
						page_pointer += 32;
 80002ac:	4b14      	ldr	r3, [pc, #80]	; (8000300 <play_music.0+0xe0>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	3320      	adds	r3, #32
 80002b2:	b2da      	uxtb	r2, r3
 80002b4:	4b12      	ldr	r3, [pc, #72]	; (8000300 <play_music.0+0xe0>)
 80002b6:	701a      	strb	r2, [r3, #0]
 80002b8:	e002      	b.n	80002c0 <play_music.0+0xa0>
					} else {
						next_page_flag = true;
 80002ba:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <play_music.0+0xd4>)
 80002bc:	2201      	movs	r2, #1
 80002be:	701a      	strb	r2, [r3, #0]
					}
					if (next_page_flag && addr_pointer >= song_end_addr) {
 80002c0:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <play_music.0+0xd4>)
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d00c      	beq.n	80002e2 <play_music.0+0xc2>
 80002c8:	68fa      	ldr	r2, [r7, #12]
 80002ca:	68bb      	ldr	r3, [r7, #8]
 80002cc:	429a      	cmp	r2, r3
 80002ce:	d20d      	bcs.n	80002ec <play_music.0+0xcc>
 80002d0:	e007      	b.n	80002e2 <play_music.0+0xc2>
					}
				}
//				else if (pause_flag) {
//					//HAL_Delay(3000);
//				}
				else if (stop_flag) {
 80002d2:	4b0d      	ldr	r3, [pc, #52]	; (8000308 <play_music.0+0xe8>)
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d003      	beq.n	80002e2 <play_music.0+0xc2>
					stop_flag = false;
 80002da:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <play_music.0+0xe8>)
 80002dc:	2200      	movs	r2, #0
 80002de:	701a      	strb	r2, [r3, #0]
					return;
 80002e0:	e005      	b.n	80002ee <play_music.0+0xce>
		while (addr_pointer < song_end_addr) {
 80002e2:	68fa      	ldr	r2, [r7, #12]
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	429a      	cmp	r2, r3
 80002e8:	d3a2      	bcc.n	8000230 <play_music.0+0x10>
 80002ea:	e000      	b.n	80002ee <play_music.0+0xce>
						break;
 80002ec:	bf00      	nop
				}
			}
		}
	}
 80002ee:	3710      	adds	r7, #16
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	20000000 	.word	0x20000000
 80002f8:	40011000 	.word	0x40011000
 80002fc:	20000090 	.word	0x20000090
 8000300:	20000190 	.word	0x20000190
 8000304:	20000191 	.word	0x20000191
 8000308:	20000192 	.word	0x20000192

0800030c <main>:
int main(void) {
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	f107 0310 	add.w	r3, r7, #16
 8000316:	603b      	str	r3, [r7, #0]
	HAL_Init();
 8000318:	f001 f86a 	bl	80013f0 <HAL_Init>
	SystemClock_Config();
 800031c:	f000 f8c0 	bl	80004a0 <SystemClock_Config>
	MX_GPIO_Init();
 8000320:	f000 f9c0 	bl	80006a4 <MX_GPIO_Init>
	MX_DMA_Init();
 8000324:	f000 f998 	bl	8000658 <MX_DMA_Init>
	MX_SPI1_Init();
 8000328:	f000 f900 	bl	800052c <MX_SPI1_Init>
	MX_SPI2_Init();
 800032c:	f000 f934 	bl	8000598 <MX_SPI2_Init>
	MX_USART1_UART_Init();
 8000330:	f000 f968 	bl	8000604 <MX_USART1_UART_Init>

	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuf, sizeof(RxBuf));
 8000334:	2210      	movs	r2, #16
 8000336:	494b      	ldr	r1, [pc, #300]	; (8000464 <main+0x158>)
 8000338:	484b      	ldr	r0, [pc, #300]	; (8000468 <main+0x15c>)
 800033a:	f002 fdae 	bl	8002e9a <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT); // По дефолту HAL активирует прерывания! Мы отключим половину этих функций.
 800033e:	4b4b      	ldr	r3, [pc, #300]	; (800046c <main+0x160>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	681a      	ldr	r2, [r3, #0]
 8000344:	4b49      	ldr	r3, [pc, #292]	; (800046c <main+0x160>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	f022 0204 	bic.w	r2, r2, #4
 800034c:	601a      	str	r2, [r3, #0]

	SPI1->CR1 |= SPI_CR1_SPE;
 800034e:	4b48      	ldr	r3, [pc, #288]	; (8000470 <main+0x164>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4a47      	ldr	r2, [pc, #284]	; (8000470 <main+0x164>)
 8000354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000358:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |= SPI_CR1_SPE;
 800035a:	4b46      	ldr	r3, [pc, #280]	; (8000474 <main+0x168>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	4a45      	ldr	r2, [pc, #276]	; (8000474 <main+0x168>)
 8000360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000364:	6013      	str	r3, [r2, #0]
	vs1053_init();
 8000366:	f000 fe13 	bl	8000f90 <vs1053_init>
	vs1053_reset();
 800036a:	f000 fe31 	bl	8000fd0 <vs1053_reset>
	flash_reset();
 800036e:	f000 ff79 	bl	8001264 <flash_reset>
	if (get_flash_id())
 8000372:	f000 ffe3 	bl	800133c <get_flash_id>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d002      	beq.n	8000382 <main+0x76>
		printf("Hello world! \r\n");
 800037c:	483e      	ldr	r0, [pc, #248]	; (8000478 <main+0x16c>)
 800037e:	f003 fda7 	bl	8003ed0 <puts>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (strlen((const char*) MainBuf) != 0) {
 8000382:	4b3e      	ldr	r3, [pc, #248]	; (800047c <main+0x170>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d0fb      	beq.n	8000382 <main+0x76>
			// Скопируем содержимое MainBuf от oldPos до newPos в rangeBuf
			for (int i = oldPos; i <= newPos; i++) {
 800038a:	4b3d      	ldr	r3, [pc, #244]	; (8000480 <main+0x174>)
 800038c:	881b      	ldrh	r3, [r3, #0]
 800038e:	607b      	str	r3, [r7, #4]
 8000390:	e00d      	b.n	80003ae <main+0xa2>
				rangeBuf[i - oldPos] = MainBuf[i];
 8000392:	4b3b      	ldr	r3, [pc, #236]	; (8000480 <main+0x174>)
 8000394:	881b      	ldrh	r3, [r3, #0]
 8000396:	461a      	mov	r2, r3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	1a9b      	subs	r3, r3, r2
 800039c:	4937      	ldr	r1, [pc, #220]	; (800047c <main+0x170>)
 800039e:	687a      	ldr	r2, [r7, #4]
 80003a0:	440a      	add	r2, r1
 80003a2:	7811      	ldrb	r1, [r2, #0]
 80003a4:	4a37      	ldr	r2, [pc, #220]	; (8000484 <main+0x178>)
 80003a6:	54d1      	strb	r1, [r2, r3]
			for (int i = oldPos; i <= newPos; i++) {
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	3301      	adds	r3, #1
 80003ac:	607b      	str	r3, [r7, #4]
 80003ae:	4b36      	ldr	r3, [pc, #216]	; (8000488 <main+0x17c>)
 80003b0:	881b      	ldrh	r3, [r3, #0]
 80003b2:	461a      	mov	r2, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4293      	cmp	r3, r2
 80003b8:	ddeb      	ble.n	8000392 <main+0x86>
			}
			if (strlen((const char*) rangeBuf) != 0) {
 80003ba:	4b32      	ldr	r3, [pc, #200]	; (8000484 <main+0x178>)
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d0df      	beq.n	8000382 <main+0x76>
				send_uart(rangeBuf);
 80003c2:	4830      	ldr	r0, [pc, #192]	; (8000484 <main+0x178>)
 80003c4:	f7ff fef0 	bl	80001a8 <send_uart>

				if (rangeBuf[0] != '\n' && rangeBuf[0] != '\r'
 80003c8:	4b2e      	ldr	r3, [pc, #184]	; (8000484 <main+0x178>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	2b0a      	cmp	r3, #10
 80003ce:	d00e      	beq.n	80003ee <main+0xe2>
 80003d0:	4b2c      	ldr	r3, [pc, #176]	; (8000484 <main+0x178>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	2b0d      	cmp	r3, #13
 80003d6:	d00a      	beq.n	80003ee <main+0xe2>
						&& rangeBuf[0] == '1') {
 80003d8:	4b2a      	ldr	r3, [pc, #168]	; (8000484 <main+0x178>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b31      	cmp	r3, #49	; 0x31
 80003de:	d106      	bne.n	80003ee <main+0xe2>
					play_music(0, 0x455600); // проигрывание музыки в бесконечном цикле
 80003e0:	463b      	mov	r3, r7
 80003e2:	469c      	mov	ip, r3
 80003e4:	4929      	ldr	r1, [pc, #164]	; (800048c <main+0x180>)
 80003e6:	2000      	movs	r0, #0
 80003e8:	f7ff ff1a 	bl	8000220 <play_music.0>
 80003ec:	e024      	b.n	8000438 <main+0x12c>
				} else if (rangeBuf[0] != '\n' && rangeBuf[0] != '\r'
 80003ee:	4b25      	ldr	r3, [pc, #148]	; (8000484 <main+0x178>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b0a      	cmp	r3, #10
 80003f4:	d00e      	beq.n	8000414 <main+0x108>
 80003f6:	4b23      	ldr	r3, [pc, #140]	; (8000484 <main+0x178>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	2b0d      	cmp	r3, #13
 80003fc:	d00a      	beq.n	8000414 <main+0x108>
						&& rangeBuf[0] == '2') {
 80003fe:	4b21      	ldr	r3, [pc, #132]	; (8000484 <main+0x178>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b32      	cmp	r3, #50	; 0x32
 8000404:	d106      	bne.n	8000414 <main+0x108>
					play_music(0x46A700, 0x89E600); // проигрывание музыки в бесконечном цикле
 8000406:	463b      	mov	r3, r7
 8000408:	469c      	mov	ip, r3
 800040a:	4921      	ldr	r1, [pc, #132]	; (8000490 <main+0x184>)
 800040c:	4821      	ldr	r0, [pc, #132]	; (8000494 <main+0x188>)
 800040e:	f7ff ff07 	bl	8000220 <play_music.0>
 8000412:	e011      	b.n	8000438 <main+0x12c>
				} else if (rangeBuf[0] != '\n' && rangeBuf[0] != '\r'
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <main+0x178>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2b0a      	cmp	r3, #10
 800041a:	d00d      	beq.n	8000438 <main+0x12c>
 800041c:	4b19      	ldr	r3, [pc, #100]	; (8000484 <main+0x178>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	2b0d      	cmp	r3, #13
 8000422:	d009      	beq.n	8000438 <main+0x12c>
						&& rangeBuf[0] == '3') {
 8000424:	4b17      	ldr	r3, [pc, #92]	; (8000484 <main+0x178>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b33      	cmp	r3, #51	; 0x33
 800042a:	d105      	bne.n	8000438 <main+0x12c>
					play_music(0x8B1B00, 0xD65800); // проигрывание музыки в бесконечном цикле
 800042c:	463b      	mov	r3, r7
 800042e:	469c      	mov	ip, r3
 8000430:	4919      	ldr	r1, [pc, #100]	; (8000498 <main+0x18c>)
 8000432:	481a      	ldr	r0, [pc, #104]	; (800049c <main+0x190>)
 8000434:	f7ff fef4 	bl	8000220 <play_music.0>
				}

				memset(RxBuf, 0, sizeof(RxBuf)); // Очистим перед внесением данных
 8000438:	2210      	movs	r2, #16
 800043a:	2100      	movs	r1, #0
 800043c:	4809      	ldr	r0, [pc, #36]	; (8000464 <main+0x158>)
 800043e:	f003 fcd1 	bl	8003de4 <memset>
				memset(MainBuf, 0, sizeof(MainBuf)); // Очистим
 8000442:	2220      	movs	r2, #32
 8000444:	2100      	movs	r1, #0
 8000446:	480d      	ldr	r0, [pc, #52]	; (800047c <main+0x170>)
 8000448:	f003 fccc 	bl	8003de4 <memset>
				memset(rangeBuf, 0, sizeof(rangeBuf)); // Очистим
 800044c:	2220      	movs	r2, #32
 800044e:	2100      	movs	r1, #0
 8000450:	480c      	ldr	r0, [pc, #48]	; (8000484 <main+0x178>)
 8000452:	f003 fcc7 	bl	8003de4 <memset>
				oldPos = 0;
 8000456:	4b0a      	ldr	r3, [pc, #40]	; (8000480 <main+0x174>)
 8000458:	2200      	movs	r2, #0
 800045a:	801a      	strh	r2, [r3, #0]
				newPos = 0;
 800045c:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <main+0x17c>)
 800045e:	2200      	movs	r2, #0
 8000460:	801a      	strh	r2, [r3, #0]
		if (strlen((const char*) MainBuf) != 0) {
 8000462:	e78e      	b.n	8000382 <main+0x76>
 8000464:	20000318 	.word	0x20000318
 8000468:	20000248 	.word	0x20000248
 800046c:	20000290 	.word	0x20000290
 8000470:	40013000 	.word	0x40013000
 8000474:	40003800 	.word	0x40003800
 8000478:	0800492c 	.word	0x0800492c
 800047c:	20000328 	.word	0x20000328
 8000480:	20000388 	.word	0x20000388
 8000484:	20000348 	.word	0x20000348
 8000488:	2000038a 	.word	0x2000038a
 800048c:	00455600 	.word	0x00455600
 8000490:	0089e600 	.word	0x0089e600
 8000494:	0046a700 	.word	0x0046a700
 8000498:	00d65800 	.word	0x00d65800
 800049c:	008b1b00 	.word	0x008b1b00

080004a0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b090      	sub	sp, #64	; 0x40
 80004a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80004a6:	f107 0318 	add.w	r3, r7, #24
 80004aa:	2228      	movs	r2, #40	; 0x28
 80004ac:	2100      	movs	r1, #0
 80004ae:	4618      	mov	r0, r3
 80004b0:	f003 fc98 	bl	8003de4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]
 80004bc:	609a      	str	r2, [r3, #8]
 80004be:	60da      	str	r2, [r3, #12]
 80004c0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004c2:	2301      	movs	r3, #1
 80004c4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004ca:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004cc:	2300      	movs	r3, #0
 80004ce:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004d0:	2301      	movs	r3, #1
 80004d2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004d4:	2302      	movs	r3, #2
 80004d6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004dc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004de:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80004e4:	f107 0318 	add.w	r3, r7, #24
 80004e8:	4618      	mov	r0, r3
 80004ea:	f001 fcf5 	bl	8001ed8 <HAL_RCC_OscConfig>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <SystemClock_Config+0x58>
		Error_Handler();
 80004f4:	f000 fa56 	bl	80009a4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80004f8:	230f      	movs	r3, #15
 80004fa:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004fc:	2302      	movs	r3, #2
 80004fe:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000500:	2300      	movs	r3, #0
 8000502:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000504:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000508:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	2102      	movs	r1, #2
 8000512:	4618      	mov	r0, r3
 8000514:	f001 ff62 	bl	80023dc <HAL_RCC_ClockConfig>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <SystemClock_Config+0x82>
		Error_Handler();
 800051e:	f000 fa41 	bl	80009a4 <Error_Handler>
	}
}
 8000522:	bf00      	nop
 8000524:	3740      	adds	r7, #64	; 0x40
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000530:	4b17      	ldr	r3, [pc, #92]	; (8000590 <MX_SPI1_Init+0x64>)
 8000532:	4a18      	ldr	r2, [pc, #96]	; (8000594 <MX_SPI1_Init+0x68>)
 8000534:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000536:	4b16      	ldr	r3, [pc, #88]	; (8000590 <MX_SPI1_Init+0x64>)
 8000538:	f44f 7282 	mov.w	r2, #260	; 0x104
 800053c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800053e:	4b14      	ldr	r3, [pc, #80]	; (8000590 <MX_SPI1_Init+0x64>)
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000544:	4b12      	ldr	r3, [pc, #72]	; (8000590 <MX_SPI1_Init+0x64>)
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800054a:	4b11      	ldr	r3, [pc, #68]	; (8000590 <MX_SPI1_Init+0x64>)
 800054c:	2202      	movs	r2, #2
 800054e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000550:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <MX_SPI1_Init+0x64>)
 8000552:	2201      	movs	r2, #1
 8000554:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000556:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <MX_SPI1_Init+0x64>)
 8000558:	f44f 7200 	mov.w	r2, #512	; 0x200
 800055c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800055e:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <MX_SPI1_Init+0x64>)
 8000560:	2238      	movs	r2, #56	; 0x38
 8000562:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000564:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <MX_SPI1_Init+0x64>)
 8000566:	2200      	movs	r2, #0
 8000568:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800056a:	4b09      	ldr	r3, [pc, #36]	; (8000590 <MX_SPI1_Init+0x64>)
 800056c:	2200      	movs	r2, #0
 800056e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000570:	4b07      	ldr	r3, [pc, #28]	; (8000590 <MX_SPI1_Init+0x64>)
 8000572:	2200      	movs	r2, #0
 8000574:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <MX_SPI1_Init+0x64>)
 8000578:	220a      	movs	r2, #10
 800057a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800057c:	4804      	ldr	r0, [pc, #16]	; (8000590 <MX_SPI1_Init+0x64>)
 800057e:	f002 f8eb 	bl	8002758 <HAL_SPI_Init>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <MX_SPI1_Init+0x60>
		Error_Handler();
 8000588:	f000 fa0c 	bl	80009a4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000198 	.word	0x20000198
 8000594:	40013000 	.word	0x40013000

08000598 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800059c:	4b17      	ldr	r3, [pc, #92]	; (80005fc <MX_SPI2_Init+0x64>)
 800059e:	4a18      	ldr	r2, [pc, #96]	; (8000600 <MX_SPI2_Init+0x68>)
 80005a0:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80005a2:	4b16      	ldr	r3, [pc, #88]	; (80005fc <MX_SPI2_Init+0x64>)
 80005a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005a8:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005aa:	4b14      	ldr	r3, [pc, #80]	; (80005fc <MX_SPI2_Init+0x64>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80005b0:	4b12      	ldr	r3, [pc, #72]	; (80005fc <MX_SPI2_Init+0x64>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80005b6:	4b11      	ldr	r3, [pc, #68]	; (80005fc <MX_SPI2_Init+0x64>)
 80005b8:	2202      	movs	r2, #2
 80005ba:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80005bc:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <MX_SPI2_Init+0x64>)
 80005be:	2201      	movs	r2, #1
 80005c0:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <MX_SPI2_Init+0x64>)
 80005c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005c8:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80005ca:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <MX_SPI2_Init+0x64>)
 80005cc:	2220      	movs	r2, #32
 80005ce:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005d0:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <MX_SPI2_Init+0x64>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <MX_SPI2_Init+0x64>)
 80005d8:	2200      	movs	r2, #0
 80005da:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005dc:	4b07      	ldr	r3, [pc, #28]	; (80005fc <MX_SPI2_Init+0x64>)
 80005de:	2200      	movs	r2, #0
 80005e0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 80005e2:	4b06      	ldr	r3, [pc, #24]	; (80005fc <MX_SPI2_Init+0x64>)
 80005e4:	220a      	movs	r2, #10
 80005e6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80005e8:	4804      	ldr	r0, [pc, #16]	; (80005fc <MX_SPI2_Init+0x64>)
 80005ea:	f002 f8b5 	bl	8002758 <HAL_SPI_Init>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_SPI2_Init+0x60>
		Error_Handler();
 80005f4:	f000 f9d6 	bl	80009a4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	200001f0 	.word	0x200001f0
 8000600:	40003800 	.word	0x40003800

08000604 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000608:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_USART1_UART_Init+0x4c>)
 800060a:	4a12      	ldr	r2, [pc, #72]	; (8000654 <MX_USART1_UART_Init+0x50>)
 800060c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <MX_USART1_UART_Init+0x4c>)
 8000610:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000614:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_USART1_UART_Init+0x4c>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_USART1_UART_Init+0x4c>)
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <MX_USART1_UART_Init+0x4c>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_USART1_UART_Init+0x4c>)
 800062a:	220c      	movs	r2, #12
 800062c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <MX_USART1_UART_Init+0x4c>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_USART1_UART_Init+0x4c>)
 8000636:	2200      	movs	r2, #0
 8000638:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_USART1_UART_Init+0x4c>)
 800063c:	f002 fb5a 	bl	8002cf4 <HAL_UART_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000646:	f000 f9ad 	bl	80009a4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000248 	.word	0x20000248
 8000654:	40013800 	.word	0x40013800

08000658 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <MX_DMA_Init+0x48>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	4a0f      	ldr	r2, [pc, #60]	; (80006a0 <MX_DMA_Init+0x48>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6153      	str	r3, [r2, #20]
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <MX_DMA_Init+0x48>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2100      	movs	r1, #0
 800067a:	200e      	movs	r0, #14
 800067c:	f000 ffc3 	bl	8001606 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000680:	200e      	movs	r0, #14
 8000682:	f000 ffdc 	bl	800163e <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2100      	movs	r1, #0
 800068a:	200f      	movs	r0, #15
 800068c:	f000 ffbb 	bl	8001606 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000690:	200f      	movs	r0, #15
 8000692:	f000 ffd4 	bl	800163e <HAL_NVIC_EnableIRQ>

}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40021000 	.word	0x40021000

080006a4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006aa:	f107 0310 	add.w	r3, r7, #16
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006b8:	4b3e      	ldr	r3, [pc, #248]	; (80007b4 <MX_GPIO_Init+0x110>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	4a3d      	ldr	r2, [pc, #244]	; (80007b4 <MX_GPIO_Init+0x110>)
 80006be:	f043 0310 	orr.w	r3, r3, #16
 80006c2:	6193      	str	r3, [r2, #24]
 80006c4:	4b3b      	ldr	r3, [pc, #236]	; (80007b4 <MX_GPIO_Init+0x110>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	f003 0310 	and.w	r3, r3, #16
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80006d0:	4b38      	ldr	r3, [pc, #224]	; (80007b4 <MX_GPIO_Init+0x110>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a37      	ldr	r2, [pc, #220]	; (80007b4 <MX_GPIO_Init+0x110>)
 80006d6:	f043 0320 	orr.w	r3, r3, #32
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b35      	ldr	r3, [pc, #212]	; (80007b4 <MX_GPIO_Init+0x110>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0320 	and.w	r3, r3, #32
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006e8:	4b32      	ldr	r3, [pc, #200]	; (80007b4 <MX_GPIO_Init+0x110>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a31      	ldr	r2, [pc, #196]	; (80007b4 <MX_GPIO_Init+0x110>)
 80006ee:	f043 0304 	orr.w	r3, r3, #4
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b2f      	ldr	r3, [pc, #188]	; (80007b4 <MX_GPIO_Init+0x110>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f003 0304 	and.w	r3, r3, #4
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000700:	4b2c      	ldr	r3, [pc, #176]	; (80007b4 <MX_GPIO_Init+0x110>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a2b      	ldr	r2, [pc, #172]	; (80007b4 <MX_GPIO_Init+0x110>)
 8000706:	f043 0308 	orr.w	r3, r3, #8
 800070a:	6193      	str	r3, [r2, #24]
 800070c:	4b29      	ldr	r3, [pc, #164]	; (80007b4 <MX_GPIO_Init+0x110>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f003 0308 	and.w	r3, r3, #8
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800071e:	4826      	ldr	r0, [pc, #152]	; (80007b8 <MX_GPIO_Init+0x114>)
 8000720:	f001 fbc2 	bl	8001ea8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4,
 8000724:	2200      	movs	r2, #0
 8000726:	211a      	movs	r1, #26
 8000728:	4824      	ldr	r0, [pc, #144]	; (80007bc <MX_GPIO_Init+0x118>)
 800072a:	f001 fbbd 	bl	8001ea8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000734:	4822      	ldr	r0, [pc, #136]	; (80007c0 <MX_GPIO_Init+0x11c>)
 8000736:	f001 fbb7 	bl	8001ea8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 800073a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800073e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000740:	2301      	movs	r3, #1
 8000742:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000748:	2302      	movs	r3, #2
 800074a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800074c:	f107 0310 	add.w	r3, r7, #16
 8000750:	4619      	mov	r1, r3
 8000752:	4819      	ldr	r0, [pc, #100]	; (80007b8 <MX_GPIO_Init+0x114>)
 8000754:	f001 fa24 	bl	8001ba0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA1 PA3 PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4;
 8000758:	231a      	movs	r3, #26
 800075a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075c:	2301      	movs	r3, #1
 800075e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000764:	2302      	movs	r3, #2
 8000766:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	4619      	mov	r1, r3
 800076e:	4813      	ldr	r0, [pc, #76]	; (80007bc <MX_GPIO_Init+0x118>)
 8000770:	f001 fa16 	bl	8001ba0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000774:	2304      	movs	r3, #4
 8000776:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000780:	f107 0310 	add.w	r3, r7, #16
 8000784:	4619      	mov	r1, r3
 8000786:	480d      	ldr	r0, [pc, #52]	; (80007bc <MX_GPIO_Init+0x118>)
 8000788:	f001 fa0a 	bl	8001ba0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 800078c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000790:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	2301      	movs	r3, #1
 8000794:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2302      	movs	r3, #2
 800079c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079e:	f107 0310 	add.w	r3, r7, #16
 80007a2:	4619      	mov	r1, r3
 80007a4:	4806      	ldr	r0, [pc, #24]	; (80007c0 <MX_GPIO_Init+0x11c>)
 80007a6:	f001 f9fb 	bl	8001ba0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80007aa:	bf00      	nop
 80007ac:	3720      	adds	r7, #32
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40021000 	.word	0x40021000
 80007b8:	40011000 	.word	0x40011000
 80007bc:	40010800 	.word	0x40010800
 80007c0:	40010c00 	.word	0x40010c00

080007c4 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1) {
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a5c      	ldr	r2, [pc, #368]	; (8000948 <HAL_UARTEx_RxEventCallback+0x184>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	f040 8098 	bne.w	800090c <HAL_UARTEx_RxEventCallback+0x148>
		oldPos = newPos;  // Update the last position before copying new data
 80007dc:	4b5b      	ldr	r3, [pc, #364]	; (800094c <HAL_UARTEx_RxEventCallback+0x188>)
 80007de:	881a      	ldrh	r2, [r3, #0]
 80007e0:	4b5b      	ldr	r3, [pc, #364]	; (8000950 <HAL_UARTEx_RxEventCallback+0x18c>)
 80007e2:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (oldPos + Size > MainBuf_SIZE) // If the current position + new data size is greater than the main buffer
 80007e4:	4b5a      	ldr	r3, [pc, #360]	; (8000950 <HAL_UARTEx_RxEventCallback+0x18c>)
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	887b      	ldrh	r3, [r7, #2]
 80007ec:	4413      	add	r3, r2
 80007ee:	2b20      	cmp	r3, #32
 80007f0:	dd22      	ble.n	8000838 <HAL_UARTEx_RxEventCallback+0x74>
		{
			uint16_t datatocopy = MainBuf_SIZE - oldPos; // find out how much space is left in the main buffer
 80007f2:	4b57      	ldr	r3, [pc, #348]	; (8000950 <HAL_UARTEx_RxEventCallback+0x18c>)
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	f1c3 0320 	rsb	r3, r3, #32
 80007fa:	81fb      	strh	r3, [r7, #14]
			memcpy((uint8_t*) MainBuf + oldPos, RxBuf, datatocopy); // copy data in that remaining space
 80007fc:	4b54      	ldr	r3, [pc, #336]	; (8000950 <HAL_UARTEx_RxEventCallback+0x18c>)
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	461a      	mov	r2, r3
 8000802:	4b54      	ldr	r3, [pc, #336]	; (8000954 <HAL_UARTEx_RxEventCallback+0x190>)
 8000804:	4413      	add	r3, r2
 8000806:	89fa      	ldrh	r2, [r7, #14]
 8000808:	4953      	ldr	r1, [pc, #332]	; (8000958 <HAL_UARTEx_RxEventCallback+0x194>)
 800080a:	4618      	mov	r0, r3
 800080c:	f003 fadc 	bl	8003dc8 <memcpy>

			oldPos = 0;  // point to the start of the buffer
 8000810:	4b4f      	ldr	r3, [pc, #316]	; (8000950 <HAL_UARTEx_RxEventCallback+0x18c>)
 8000812:	2200      	movs	r2, #0
 8000814:	801a      	strh	r2, [r3, #0]
			memcpy((uint8_t*) MainBuf, (uint8_t*) RxBuf + datatocopy,
 8000816:	89fb      	ldrh	r3, [r7, #14]
 8000818:	4a4f      	ldr	r2, [pc, #316]	; (8000958 <HAL_UARTEx_RxEventCallback+0x194>)
 800081a:	1899      	adds	r1, r3, r2
					(Size - datatocopy));  // copy the remaining data
 800081c:	887a      	ldrh	r2, [r7, #2]
 800081e:	89fb      	ldrh	r3, [r7, #14]
 8000820:	1ad3      	subs	r3, r2, r3
			memcpy((uint8_t*) MainBuf, (uint8_t*) RxBuf + datatocopy,
 8000822:	461a      	mov	r2, r3
 8000824:	484b      	ldr	r0, [pc, #300]	; (8000954 <HAL_UARTEx_RxEventCallback+0x190>)
 8000826:	f003 facf 	bl	8003dc8 <memcpy>
			newPos = (Size - datatocopy);  // update the position
 800082a:	887a      	ldrh	r2, [r7, #2]
 800082c:	89fb      	ldrh	r3, [r7, #14]
 800082e:	1ad3      	subs	r3, r2, r3
 8000830:	b29a      	uxth	r2, r3
 8000832:	4b46      	ldr	r3, [pc, #280]	; (800094c <HAL_UARTEx_RxEventCallback+0x188>)
 8000834:	801a      	strh	r2, [r3, #0]
 8000836:	e05c      	b.n	80008f2 <HAL_UARTEx_RxEventCallback+0x12e>

		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else {
			memcpy((uint8_t*) MainBuf + oldPos, RxBuf, Size);
 8000838:	4b45      	ldr	r3, [pc, #276]	; (8000950 <HAL_UARTEx_RxEventCallback+0x18c>)
 800083a:	881b      	ldrh	r3, [r3, #0]
 800083c:	461a      	mov	r2, r3
 800083e:	4b45      	ldr	r3, [pc, #276]	; (8000954 <HAL_UARTEx_RxEventCallback+0x190>)
 8000840:	4413      	add	r3, r2
 8000842:	887a      	ldrh	r2, [r7, #2]
 8000844:	4944      	ldr	r1, [pc, #272]	; (8000958 <HAL_UARTEx_RxEventCallback+0x194>)
 8000846:	4618      	mov	r0, r3
 8000848:	f003 fabe 	bl	8003dc8 <memcpy>
			newPos = Size + oldPos;
 800084c:	4b40      	ldr	r3, [pc, #256]	; (8000950 <HAL_UARTEx_RxEventCallback+0x18c>)
 800084e:	881a      	ldrh	r2, [r3, #0]
 8000850:	887b      	ldrh	r3, [r7, #2]
 8000852:	4413      	add	r3, r2
 8000854:	b29a      	uxth	r2, r3
 8000856:	4b3d      	ldr	r3, [pc, #244]	; (800094c <HAL_UARTEx_RxEventCallback+0x188>)
 8000858:	801a      	strh	r2, [r3, #0]
			// Скопируем содержимое MainBuf от oldPos до newPos в rangeBuf
			for (int i = oldPos; i <= newPos; i++) {
 800085a:	4b3d      	ldr	r3, [pc, #244]	; (8000950 <HAL_UARTEx_RxEventCallback+0x18c>)
 800085c:	881b      	ldrh	r3, [r3, #0]
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	e00d      	b.n	800087e <HAL_UARTEx_RxEventCallback+0xba>
				checkBuf[i - oldPos] = MainBuf[i];
 8000862:	4b3b      	ldr	r3, [pc, #236]	; (8000950 <HAL_UARTEx_RxEventCallback+0x18c>)
 8000864:	881b      	ldrh	r3, [r3, #0]
 8000866:	461a      	mov	r2, r3
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	1a9b      	subs	r3, r3, r2
 800086c:	4939      	ldr	r1, [pc, #228]	; (8000954 <HAL_UARTEx_RxEventCallback+0x190>)
 800086e:	697a      	ldr	r2, [r7, #20]
 8000870:	440a      	add	r2, r1
 8000872:	7811      	ldrb	r1, [r2, #0]
 8000874:	4a39      	ldr	r2, [pc, #228]	; (800095c <HAL_UARTEx_RxEventCallback+0x198>)
 8000876:	54d1      	strb	r1, [r2, r3]
			for (int i = oldPos; i <= newPos; i++) {
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	3301      	adds	r3, #1
 800087c:	617b      	str	r3, [r7, #20]
 800087e:	4b33      	ldr	r3, [pc, #204]	; (800094c <HAL_UARTEx_RxEventCallback+0x188>)
 8000880:	881b      	ldrh	r3, [r3, #0]
 8000882:	461a      	mov	r2, r3
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	4293      	cmp	r3, r2
 8000888:	ddeb      	ble.n	8000862 <HAL_UARTEx_RxEventCallback+0x9e>
			}

			if (checkBuf[0] == 'p') {
 800088a:	4b34      	ldr	r3, [pc, #208]	; (800095c <HAL_UARTEx_RxEventCallback+0x198>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b70      	cmp	r3, #112	; 0x70
 8000890:	d103      	bne.n	800089a <HAL_UARTEx_RxEventCallback+0xd6>
				pause_flag = true;
 8000892:	4b33      	ldr	r3, [pc, #204]	; (8000960 <HAL_UARTEx_RxEventCallback+0x19c>)
 8000894:	2201      	movs	r2, #1
 8000896:	701a      	strb	r2, [r3, #0]
 8000898:	e02b      	b.n	80008f2 <HAL_UARTEx_RxEventCallback+0x12e>
			} else if (checkBuf[0] == 's') {
 800089a:	4b30      	ldr	r3, [pc, #192]	; (800095c <HAL_UARTEx_RxEventCallback+0x198>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b73      	cmp	r3, #115	; 0x73
 80008a0:	d103      	bne.n	80008aa <HAL_UARTEx_RxEventCallback+0xe6>
				stop_flag = true;
 80008a2:	4b30      	ldr	r3, [pc, #192]	; (8000964 <HAL_UARTEx_RxEventCallback+0x1a0>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	701a      	strb	r2, [r3, #0]
 80008a8:	e023      	b.n	80008f2 <HAL_UARTEx_RxEventCallback+0x12e>
			} else if (checkBuf[0] == 'r') {
 80008aa:	4b2c      	ldr	r3, [pc, #176]	; (800095c <HAL_UARTEx_RxEventCallback+0x198>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b72      	cmp	r3, #114	; 0x72
 80008b0:	d106      	bne.n	80008c0 <HAL_UARTEx_RxEventCallback+0xfc>
				pause_flag = false;
 80008b2:	4b2b      	ldr	r3, [pc, #172]	; (8000960 <HAL_UARTEx_RxEventCallback+0x19c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
				stop_flag = false;
 80008b8:	4b2a      	ldr	r3, [pc, #168]	; (8000964 <HAL_UARTEx_RxEventCallback+0x1a0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	701a      	strb	r2, [r3, #0]
 80008be:	e018      	b.n	80008f2 <HAL_UARTEx_RxEventCallback+0x12e>
			}else if (strncmp(checkBuf, "vol=", 4) == 0) {
 80008c0:	2204      	movs	r2, #4
 80008c2:	4929      	ldr	r1, [pc, #164]	; (8000968 <HAL_UARTEx_RxEventCallback+0x1a4>)
 80008c4:	4825      	ldr	r0, [pc, #148]	; (800095c <HAL_UARTEx_RxEventCallback+0x198>)
 80008c6:	f003 fb0b 	bl	8003ee0 <strncmp>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d110      	bne.n	80008f2 <HAL_UARTEx_RxEventCallback+0x12e>
				// Извлекаем значение переменной
				vol = atoi(checkBuf + 4);
 80008d0:	4b26      	ldr	r3, [pc, #152]	; (800096c <HAL_UARTEx_RxEventCallback+0x1a8>)
 80008d2:	4618      	mov	r0, r3
 80008d4:	f003 fa4a 	bl	8003d6c <atoi>
 80008d8:	4603      	mov	r3, r0
 80008da:	4a25      	ldr	r2, [pc, #148]	; (8000970 <HAL_UARTEx_RxEventCallback+0x1ac>)
 80008dc:	6013      	str	r3, [r2, #0]
				// Используем значение переменной
				vs1053_setvolume(vol,vol);
 80008de:	4b24      	ldr	r3, [pc, #144]	; (8000970 <HAL_UARTEx_RxEventCallback+0x1ac>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	4a22      	ldr	r2, [pc, #136]	; (8000970 <HAL_UARTEx_RxEventCallback+0x1ac>)
 80008e6:	6812      	ldr	r2, [r2, #0]
 80008e8:	b2d2      	uxtb	r2, r2
 80008ea:	4611      	mov	r1, r2
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 fc0b 	bl	8001108 <vs1053_setvolume>
			}
		}

		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) RxBuf, RxBuf_SIZE);
 80008f2:	2210      	movs	r2, #16
 80008f4:	4918      	ldr	r1, [pc, #96]	; (8000958 <HAL_UARTEx_RxEventCallback+0x194>)
 80008f6:	481f      	ldr	r0, [pc, #124]	; (8000974 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80008f8:	f002 facf 	bl	8002e9a <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80008fc:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f022 0204 	bic.w	r2, r2, #4
 800090a:	601a      	str	r2, [r3, #0]
	}

	/****************** PROCESS (Little) THE DATA HERE *********************/

	/* Let's say we want to check for the keyword "OK" within our incoming DATA */
	for (int i = 0; i < Size; i++) {
 800090c:	2300      	movs	r3, #0
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	e011      	b.n	8000936 <HAL_UARTEx_RxEventCallback+0x172>
		if ((RxBuf[i] == 'O') && (RxBuf[i + 1] == 'K')) {
 8000912:	4a11      	ldr	r2, [pc, #68]	; (8000958 <HAL_UARTEx_RxEventCallback+0x194>)
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	4413      	add	r3, r2
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b4f      	cmp	r3, #79	; 0x4f
 800091c:	d108      	bne.n	8000930 <HAL_UARTEx_RxEventCallback+0x16c>
 800091e:	693b      	ldr	r3, [r7, #16]
 8000920:	3301      	adds	r3, #1
 8000922:	4a0d      	ldr	r2, [pc, #52]	; (8000958 <HAL_UARTEx_RxEventCallback+0x194>)
 8000924:	5cd3      	ldrb	r3, [r2, r3]
 8000926:	2b4b      	cmp	r3, #75	; 0x4b
 8000928:	d102      	bne.n	8000930 <HAL_UARTEx_RxEventCallback+0x16c>
			isOK = 1;
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <HAL_UARTEx_RxEventCallback+0x1b8>)
 800092c:	2201      	movs	r2, #1
 800092e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < Size; i++) {
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	3301      	adds	r3, #1
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	887b      	ldrh	r3, [r7, #2]
 8000938:	693a      	ldr	r2, [r7, #16]
 800093a:	429a      	cmp	r2, r3
 800093c:	dbe9      	blt.n	8000912 <HAL_UARTEx_RxEventCallback+0x14e>
		}
	}
}
 800093e:	bf00      	nop
 8000940:	bf00      	nop
 8000942:	3718      	adds	r7, #24
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40013800 	.word	0x40013800
 800094c:	2000038a 	.word	0x2000038a
 8000950:	20000388 	.word	0x20000388
 8000954:	20000328 	.word	0x20000328
 8000958:	20000318 	.word	0x20000318
 800095c:	20000368 	.word	0x20000368
 8000960:	20000191 	.word	0x20000191
 8000964:	20000192 	.word	0x20000192
 8000968:	0800493c 	.word	0x0800493c
 800096c:	2000036c 	.word	0x2000036c
 8000970:	20000194 	.word	0x20000194
 8000974:	20000248 	.word	0x20000248
 8000978:	20000290 	.word	0x20000290
 800097c:	2000038c 	.word	0x2000038c

08000980 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a04      	ldr	r2, [pc, #16]	; (80009a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d101      	bne.n	8000996 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000992:	f000 fd43 	bl	800141c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40000800 	.word	0x40000800

080009a4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a8:	b672      	cpsid	i
}
 80009aa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009ac:	e7fe      	b.n	80009ac <Error_Handler+0x8>
	...

080009b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <HAL_MspInit+0x5c>)
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	4a14      	ldr	r2, [pc, #80]	; (8000a0c <HAL_MspInit+0x5c>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6193      	str	r3, [r2, #24]
 80009c2:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_MspInit+0x5c>)
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <HAL_MspInit+0x5c>)
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <HAL_MspInit+0x5c>)
 80009d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d8:	61d3      	str	r3, [r2, #28]
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <HAL_MspInit+0x5c>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <HAL_MspInit+0x60>)
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <HAL_MspInit+0x60>)
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a02:	bf00      	nop
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	40010000 	.word	0x40010000

08000a14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	; 0x28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0318 	add.w	r3, r7, #24
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a37      	ldr	r2, [pc, #220]	; (8000b0c <HAL_SPI_MspInit+0xf8>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d130      	bne.n	8000a96 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a34:	4b36      	ldr	r3, [pc, #216]	; (8000b10 <HAL_SPI_MspInit+0xfc>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	4a35      	ldr	r2, [pc, #212]	; (8000b10 <HAL_SPI_MspInit+0xfc>)
 8000a3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a3e:	6193      	str	r3, [r2, #24]
 8000a40:	4b33      	ldr	r3, [pc, #204]	; (8000b10 <HAL_SPI_MspInit+0xfc>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a48:	617b      	str	r3, [r7, #20]
 8000a4a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4c:	4b30      	ldr	r3, [pc, #192]	; (8000b10 <HAL_SPI_MspInit+0xfc>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	4a2f      	ldr	r2, [pc, #188]	; (8000b10 <HAL_SPI_MspInit+0xfc>)
 8000a52:	f043 0304 	orr.w	r3, r3, #4
 8000a56:	6193      	str	r3, [r2, #24]
 8000a58:	4b2d      	ldr	r3, [pc, #180]	; (8000b10 <HAL_SPI_MspInit+0xfc>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	f003 0304 	and.w	r3, r3, #4
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000a64:	23a0      	movs	r3, #160	; 0xa0
 8000a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	f107 0318 	add.w	r3, r7, #24
 8000a74:	4619      	mov	r1, r3
 8000a76:	4827      	ldr	r0, [pc, #156]	; (8000b14 <HAL_SPI_MspInit+0x100>)
 8000a78:	f001 f892 	bl	8001ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a7c:	2340      	movs	r3, #64	; 0x40
 8000a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a88:	f107 0318 	add.w	r3, r7, #24
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4821      	ldr	r0, [pc, #132]	; (8000b14 <HAL_SPI_MspInit+0x100>)
 8000a90:	f001 f886 	bl	8001ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a94:	e036      	b.n	8000b04 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a1f      	ldr	r2, [pc, #124]	; (8000b18 <HAL_SPI_MspInit+0x104>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d131      	bne.n	8000b04 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000aa0:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <HAL_SPI_MspInit+0xfc>)
 8000aa2:	69db      	ldr	r3, [r3, #28]
 8000aa4:	4a1a      	ldr	r2, [pc, #104]	; (8000b10 <HAL_SPI_MspInit+0xfc>)
 8000aa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aaa:	61d3      	str	r3, [r2, #28]
 8000aac:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <HAL_SPI_MspInit+0xfc>)
 8000aae:	69db      	ldr	r3, [r3, #28]
 8000ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab8:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <HAL_SPI_MspInit+0xfc>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	4a14      	ldr	r2, [pc, #80]	; (8000b10 <HAL_SPI_MspInit+0xfc>)
 8000abe:	f043 0308 	orr.w	r3, r3, #8
 8000ac2:	6193      	str	r3, [r2, #24]
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_SPI_MspInit+0xfc>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	f003 0308 	and.w	r3, r3, #8
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000ad0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ada:	2303      	movs	r3, #3
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ade:	f107 0318 	add.w	r3, r7, #24
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480d      	ldr	r0, [pc, #52]	; (8000b1c <HAL_SPI_MspInit+0x108>)
 8000ae6:	f001 f85b 	bl	8001ba0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000aea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af8:	f107 0318 	add.w	r3, r7, #24
 8000afc:	4619      	mov	r1, r3
 8000afe:	4807      	ldr	r0, [pc, #28]	; (8000b1c <HAL_SPI_MspInit+0x108>)
 8000b00:	f001 f84e 	bl	8001ba0 <HAL_GPIO_Init>
}
 8000b04:	bf00      	nop
 8000b06:	3728      	adds	r7, #40	; 0x28
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40013000 	.word	0x40013000
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40010800 	.word	0x40010800
 8000b18:	40003800 	.word	0x40003800
 8000b1c:	40010c00 	.word	0x40010c00

08000b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b088      	sub	sp, #32
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0310 	add.w	r3, r7, #16
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a48      	ldr	r2, [pc, #288]	; (8000c5c <HAL_UART_MspInit+0x13c>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	f040 8088 	bne.w	8000c52 <HAL_UART_MspInit+0x132>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b42:	4b47      	ldr	r3, [pc, #284]	; (8000c60 <HAL_UART_MspInit+0x140>)
 8000b44:	699b      	ldr	r3, [r3, #24]
 8000b46:	4a46      	ldr	r2, [pc, #280]	; (8000c60 <HAL_UART_MspInit+0x140>)
 8000b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b4c:	6193      	str	r3, [r2, #24]
 8000b4e:	4b44      	ldr	r3, [pc, #272]	; (8000c60 <HAL_UART_MspInit+0x140>)
 8000b50:	699b      	ldr	r3, [r3, #24]
 8000b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	4b41      	ldr	r3, [pc, #260]	; (8000c60 <HAL_UART_MspInit+0x140>)
 8000b5c:	699b      	ldr	r3, [r3, #24]
 8000b5e:	4a40      	ldr	r2, [pc, #256]	; (8000c60 <HAL_UART_MspInit+0x140>)
 8000b60:	f043 0304 	orr.w	r3, r3, #4
 8000b64:	6193      	str	r3, [r2, #24]
 8000b66:	4b3e      	ldr	r3, [pc, #248]	; (8000c60 <HAL_UART_MspInit+0x140>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	f003 0304 	and.w	r3, r3, #4
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	f107 0310 	add.w	r3, r7, #16
 8000b84:	4619      	mov	r1, r3
 8000b86:	4837      	ldr	r0, [pc, #220]	; (8000c64 <HAL_UART_MspInit+0x144>)
 8000b88:	f001 f80a 	bl	8001ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 0310 	add.w	r3, r7, #16
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4830      	ldr	r0, [pc, #192]	; (8000c64 <HAL_UART_MspInit+0x144>)
 8000ba2:	f000 fffd 	bl	8001ba0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000ba6:	4b30      	ldr	r3, [pc, #192]	; (8000c68 <HAL_UART_MspInit+0x148>)
 8000ba8:	4a30      	ldr	r2, [pc, #192]	; (8000c6c <HAL_UART_MspInit+0x14c>)
 8000baa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bac:	4b2e      	ldr	r3, [pc, #184]	; (8000c68 <HAL_UART_MspInit+0x148>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bb2:	4b2d      	ldr	r3, [pc, #180]	; (8000c68 <HAL_UART_MspInit+0x148>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bb8:	4b2b      	ldr	r3, [pc, #172]	; (8000c68 <HAL_UART_MspInit+0x148>)
 8000bba:	2280      	movs	r2, #128	; 0x80
 8000bbc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bbe:	4b2a      	ldr	r3, [pc, #168]	; (8000c68 <HAL_UART_MspInit+0x148>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bc4:	4b28      	ldr	r3, [pc, #160]	; (8000c68 <HAL_UART_MspInit+0x148>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000bca:	4b27      	ldr	r3, [pc, #156]	; (8000c68 <HAL_UART_MspInit+0x148>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000bd0:	4b25      	ldr	r3, [pc, #148]	; (8000c68 <HAL_UART_MspInit+0x148>)
 8000bd2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000bd6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000bd8:	4823      	ldr	r0, [pc, #140]	; (8000c68 <HAL_UART_MspInit+0x148>)
 8000bda:	f000 fd3f 	bl	800165c <HAL_DMA_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000be4:	f7ff fede 	bl	80009a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a1f      	ldr	r2, [pc, #124]	; (8000c68 <HAL_UART_MspInit+0x148>)
 8000bec:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bee:	4a1e      	ldr	r2, [pc, #120]	; (8000c68 <HAL_UART_MspInit+0x148>)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000bf4:	4b1e      	ldr	r3, [pc, #120]	; (8000c70 <HAL_UART_MspInit+0x150>)
 8000bf6:	4a1f      	ldr	r2, [pc, #124]	; (8000c74 <HAL_UART_MspInit+0x154>)
 8000bf8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <HAL_UART_MspInit+0x150>)
 8000bfc:	2210      	movs	r2, #16
 8000bfe:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c00:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <HAL_UART_MspInit+0x150>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c06:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <HAL_UART_MspInit+0x150>)
 8000c08:	2280      	movs	r2, #128	; 0x80
 8000c0a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c0c:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <HAL_UART_MspInit+0x150>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c12:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <HAL_UART_MspInit+0x150>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000c18:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <HAL_UART_MspInit+0x150>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c1e:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <HAL_UART_MspInit+0x150>)
 8000c20:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000c24:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000c26:	4812      	ldr	r0, [pc, #72]	; (8000c70 <HAL_UART_MspInit+0x150>)
 8000c28:	f000 fd18 	bl	800165c <HAL_DMA_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8000c32:	f7ff feb7 	bl	80009a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a0d      	ldr	r2, [pc, #52]	; (8000c70 <HAL_UART_MspInit+0x150>)
 8000c3a:	639a      	str	r2, [r3, #56]	; 0x38
 8000c3c:	4a0c      	ldr	r2, [pc, #48]	; (8000c70 <HAL_UART_MspInit+0x150>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2100      	movs	r1, #0
 8000c46:	2025      	movs	r0, #37	; 0x25
 8000c48:	f000 fcdd 	bl	8001606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c4c:	2025      	movs	r0, #37	; 0x25
 8000c4e:	f000 fcf6 	bl	800163e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c52:	bf00      	nop
 8000c54:	3720      	adds	r7, #32
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40013800 	.word	0x40013800
 8000c60:	40021000 	.word	0x40021000
 8000c64:	40010800 	.word	0x40010800
 8000c68:	20000290 	.word	0x20000290
 8000c6c:	40020058 	.word	0x40020058
 8000c70:	200002d4 	.word	0x200002d4
 8000c74:	40020044 	.word	0x40020044

08000c78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08e      	sub	sp, #56	; 0x38
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000c8e:	4b34      	ldr	r3, [pc, #208]	; (8000d60 <HAL_InitTick+0xe8>)
 8000c90:	69db      	ldr	r3, [r3, #28]
 8000c92:	4a33      	ldr	r2, [pc, #204]	; (8000d60 <HAL_InitTick+0xe8>)
 8000c94:	f043 0304 	orr.w	r3, r3, #4
 8000c98:	61d3      	str	r3, [r2, #28]
 8000c9a:	4b31      	ldr	r3, [pc, #196]	; (8000d60 <HAL_InitTick+0xe8>)
 8000c9c:	69db      	ldr	r3, [r3, #28]
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ca6:	f107 0210 	add.w	r2, r7, #16
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4611      	mov	r1, r2
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f001 fd03 	bl	80026bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cb6:	6a3b      	ldr	r3, [r7, #32]
 8000cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d103      	bne.n	8000cc8 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cc0:	f001 fcd4 	bl	800266c <HAL_RCC_GetPCLK1Freq>
 8000cc4:	6378      	str	r0, [r7, #52]	; 0x34
 8000cc6:	e004      	b.n	8000cd2 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cc8:	f001 fcd0 	bl	800266c <HAL_RCC_GetPCLK1Freq>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cd4:	4a23      	ldr	r2, [pc, #140]	; (8000d64 <HAL_InitTick+0xec>)
 8000cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cda:	0c9b      	lsrs	r3, r3, #18
 8000cdc:	3b01      	subs	r3, #1
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000ce0:	4b21      	ldr	r3, [pc, #132]	; (8000d68 <HAL_InitTick+0xf0>)
 8000ce2:	4a22      	ldr	r2, [pc, #136]	; (8000d6c <HAL_InitTick+0xf4>)
 8000ce4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000ce6:	4b20      	ldr	r3, [pc, #128]	; (8000d68 <HAL_InitTick+0xf0>)
 8000ce8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cec:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000cee:	4a1e      	ldr	r2, [pc, #120]	; (8000d68 <HAL_InitTick+0xf0>)
 8000cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000cf4:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <HAL_InitTick+0xf0>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfa:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <HAL_InitTick+0xf0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d00:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <HAL_InitTick+0xf0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000d06:	4818      	ldr	r0, [pc, #96]	; (8000d68 <HAL_InitTick+0xf0>)
 8000d08:	f001 fdaa 	bl	8002860 <HAL_TIM_Base_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d11b      	bne.n	8000d52 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000d1a:	4813      	ldr	r0, [pc, #76]	; (8000d68 <HAL_InitTick+0xf0>)
 8000d1c:	f001 fdf8 	bl	8002910 <HAL_TIM_Base_Start_IT>
 8000d20:	4603      	mov	r3, r0
 8000d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d111      	bne.n	8000d52 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d2e:	201e      	movs	r0, #30
 8000d30:	f000 fc85 	bl	800163e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b0f      	cmp	r3, #15
 8000d38:	d808      	bhi.n	8000d4c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	6879      	ldr	r1, [r7, #4]
 8000d3e:	201e      	movs	r0, #30
 8000d40:	f000 fc61 	bl	8001606 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d44:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <HAL_InitTick+0xf8>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6013      	str	r3, [r2, #0]
 8000d4a:	e002      	b.n	8000d52 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3738      	adds	r7, #56	; 0x38
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40021000 	.word	0x40021000
 8000d64:	431bde83 	.word	0x431bde83
 8000d68:	20000390 	.word	0x20000390
 8000d6c:	40000800 	.word	0x40000800
 8000d70:	20000008 	.word	0x20000008

08000d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <NMI_Handler+0x4>

08000d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <HardFault_Handler+0x4>

08000d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <MemManage_Handler+0x4>

08000d86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <BusFault_Handler+0x4>

08000d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <UsageFault_Handler+0x4>

08000d92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr

08000d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr

08000daa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr

08000db6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr
	...

08000dc4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000dc8:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <DMA1_Channel4_IRQHandler+0x10>)
 8000dca:	f000 fdb5 	bl	8001938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	200002d4 	.word	0x200002d4

08000dd8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000ddc:	4802      	ldr	r0, [pc, #8]	; (8000de8 <DMA1_Channel5_IRQHandler+0x10>)
 8000dde:	f000 fdab 	bl	8001938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000290 	.word	0x20000290

08000dec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000df0:	4802      	ldr	r0, [pc, #8]	; (8000dfc <TIM4_IRQHandler+0x10>)
 8000df2:	f001 fddf 	bl	80029b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000390 	.word	0x20000390

08000e00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e04:	4802      	ldr	r0, [pc, #8]	; (8000e10 <USART1_IRQHandler+0x10>)
 8000e06:	f002 f8a5 	bl	8002f54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000248 	.word	0x20000248

08000e14 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	e00a      	b.n	8000e3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e26:	f3af 8000 	nop.w
 8000e2a:	4601      	mov	r1, r0
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	1c5a      	adds	r2, r3, #1
 8000e30:	60ba      	str	r2, [r7, #8]
 8000e32:	b2ca      	uxtb	r2, r1
 8000e34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	dbf0      	blt.n	8000e26 <_read+0x12>
  }

  return len;
 8000e44:	687b      	ldr	r3, [r7, #4]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b083      	sub	sp, #12
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr

08000e64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e74:	605a      	str	r2, [r3, #4]
  return 0;
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr

08000e82 <_isatty>:

int _isatty(int file)
{
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e8a:	2301      	movs	r3, #1
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr

08000e96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b085      	sub	sp, #20
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	60f8      	str	r0, [r7, #12]
 8000e9e:	60b9      	str	r1, [r7, #8]
 8000ea0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr
	...

08000eb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb8:	4a14      	ldr	r2, [pc, #80]	; (8000f0c <_sbrk+0x5c>)
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <_sbrk+0x60>)
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec4:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <_sbrk+0x64>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d102      	bne.n	8000ed2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <_sbrk+0x64>)
 8000ece:	4a12      	ldr	r2, [pc, #72]	; (8000f18 <_sbrk+0x68>)
 8000ed0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d207      	bcs.n	8000ef0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee0:	f002 ff48 	bl	8003d74 <__errno>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eee:	e009      	b.n	8000f04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <_sbrk+0x64>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ef6:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <_sbrk+0x64>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	4a05      	ldr	r2, [pc, #20]	; (8000f14 <_sbrk+0x64>)
 8000f00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f02:	68fb      	ldr	r3, [r7, #12]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20005000 	.word	0x20005000
 8000f10:	00000400 	.word	0x00000400
 8000f14:	200003d8 	.word	0x200003d8
 8000f18:	200003f8 	.word	0x200003f8

08000f1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <SpiInit>:

//============================================================================//
//++++++++++++++++++++++++++++++++  SPI  +++++++++++++++++++++++++++++++++++++//
//============================================================================//
static void SpiInit ( uint32_t value )
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]

   SPI1->CR1 |= value;
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <SpiInit+0x20>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4904      	ldr	r1, [pc, #16]	; (8000f48 <SpiInit+0x20>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	600b      	str	r3, [r1, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40013000 	.word	0x40013000

08000f4c <SPI_sendByte>:
//============================================================================//
//++++++++++++++++++++++++++++++++  SPI  +++++++++++++++++++++++++++++++++++++//
//============================================================================//
static uint8_t SPI_sendByte ( uint8_t data )
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
    uint8_t rxbyte;

    while ( !( SPI_PORT -> SR & SPI_SR_TXE ) );
 8000f56:	bf00      	nop
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <SPI_sendByte+0x40>)
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	f003 0302 	and.w	r3, r3, #2
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d0f9      	beq.n	8000f58 <SPI_sendByte+0xc>
    SPI_PORT -> DR = data;
 8000f64:	4a09      	ldr	r2, [pc, #36]	; (8000f8c <SPI_sendByte+0x40>)
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	60d3      	str	r3, [r2, #12]

    while ( !( SPI_PORT -> SR & SPI_SR_RXNE ) );
 8000f6a:	bf00      	nop
 8000f6c:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <SPI_sendByte+0x40>)
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0f9      	beq.n	8000f6c <SPI_sendByte+0x20>
    rxbyte = SPI_PORT->DR;
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <SPI_sendByte+0x40>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	73fb      	strb	r3, [r7, #15]

    return rxbyte;
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	40013000 	.word	0x40013000

08000f90 <vs1053_init>:
//============================================================================//
//++++++++++++++++++++++++++  vs1053_init  +++++++++++++++++++++++++++++++++++//
//============================================================================//
void vs1053_init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
	VS1053_RESET_RES();		 // XRESET = 0
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <vs1053_init+0x38>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <vs1053_init+0x38>)
 8000f9a:	f023 0302 	bic.w	r3, r3, #2
 8000f9e:	60d3      	str	r3, [r2, #12]
	VS1053_SET_XDCS();		 // XDCS = 1
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <vs1053_init+0x38>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	4a08      	ldr	r2, [pc, #32]	; (8000fc8 <vs1053_init+0x38>)
 8000fa6:	f043 0308 	orr.w	r3, r3, #8
 8000faa:	60d3      	str	r3, [r2, #12]
	VS1053_DCS();			   	 // nCS = 1
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <vs1053_init+0x38>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <vs1053_init+0x38>)
 8000fb2:	f043 0310 	orr.w	r3, r3, #16
 8000fb6:	60d3      	str	r3, [r2, #12]
	SpiInit((uint32_t)(SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0));//256
 8000fb8:	2038      	movs	r0, #56	; 0x38
 8000fba:	f7ff ffb5 	bl	8000f28 <SpiInit>
	chip_id = 0xFF;
 8000fbe:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <vs1053_init+0x3c>)
 8000fc0:	22ff      	movs	r2, #255	; 0xff
 8000fc2:	701a      	strb	r2, [r3, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40010800 	.word	0x40010800
 8000fcc:	200003dc 	.word	0x200003dc

08000fd0 <vs1053_reset>:

//============================================================================//
//+++++++++++++++++++ Perform a vs1053 hard soft reset +++++++++++++++++++++++//
//============================================================================//
void vs1053_reset(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
	uint16_t temp;
	SpiInit((uint32_t)(SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0));//НАСТРОЙКУ ПРОИЗВОДИТЬ НА НИЗКОЙ!!!!!
 8000fd6:	2038      	movs	r0, #56	; 0x38
 8000fd8:	f7ff ffa6 	bl	8000f28 <SpiInit>
	VS1053_RESET_RES();		// XRESET = 0 Harware reset VS1053b is reset and all the control registers and
 8000fdc:	4b2c      	ldr	r3, [pc, #176]	; (8001090 <vs1053_reset+0xc0>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	4a2b      	ldr	r2, [pc, #172]	; (8001090 <vs1053_reset+0xc0>)
 8000fe2:	f023 0302 	bic.w	r3, r3, #2
 8000fe6:	60d3      	str	r3, [r2, #12]
	HAL_Delay (5);
 8000fe8:	2005      	movs	r0, #5
 8000fea:	f000 fa33 	bl	8001454 <HAL_Delay>
	VS1053_SET_RES();			// XRESET = 1 //internal states are set to the initial values
 8000fee:	4b28      	ldr	r3, [pc, #160]	; (8001090 <vs1053_reset+0xc0>)
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	4a27      	ldr	r2, [pc, #156]	; (8001090 <vs1053_reset+0xc0>)
 8000ff4:	f043 0302 	orr.w	r3, r3, #2
 8000ff8:	60d3      	str	r3, [r2, #12]
	HAL_Delay (5); //500
 8000ffa:	2005      	movs	r0, #5
 8000ffc:	f000 fa2a 	bl	8001454 <HAL_Delay>

	while(!VS1053_DREQ){};
 8001000:	bf00      	nop
 8001002:	4b23      	ldr	r3, [pc, #140]	; (8001090 <vs1053_reset+0xc0>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	2b00      	cmp	r3, #0
 800100c:	d0f9      	beq.n	8001002 <vs1053_reset+0x32>

    temp = vs1053_readData(vs1053_STATUS);	// read status, must be 0x000C
 800100e:	2001      	movs	r0, #1
 8001010:	f000 f8ca 	bl	80011a8 <vs1053_readData>
 8001014:	4603      	mov	r3, r0
 8001016:	80fb      	strh	r3, [r7, #6]
    temp = vs1053_readData(vs1053_MODE);	// read status, must be 0x4000
 8001018:	2000      	movs	r0, #0
 800101a:	f000 f8c5 	bl	80011a8 <vs1053_readData>
 800101e:	4603      	mov	r3, r0
 8001020:	80fb      	strh	r3, [r7, #6]
  	// Soft reset 16
  	vs1053_writeCommand(vs1053_MODE,SM_RESET|SM_SDINEW);//| SM_CLK_RANGE for 24MHz-26
 8001022:	f640 0104 	movw	r1, #2052	; 0x804
 8001026:	2000      	movs	r0, #0
 8001028:	f000 f890 	bl	800114c <vs1053_writeCommand>
		//SM_RESET-soft Reset
		//SM_SDINEW- by default at startup native SPI modes
  	HAL_Delay(500);
 800102c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001030:	f000 fa10 	bl	8001454 <HAL_Delay>
    do
    {
    	temp=vs1053_readData(vs1053_MODE);
 8001034:	2000      	movs	r0, #0
 8001036:	f000 f8b7 	bl	80011a8 <vs1053_readData>
 800103a:	4603      	mov	r3, r0
 800103c:	80fb      	strh	r3, [r7, #6]
    } while((temp&SM_RESET)!=0);
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1f5      	bne.n	8001034 <vs1053_reset+0x64>
    vs1053_writeCommand(vs1053_MODE, SM_SDINEW);// | SM_CLK_RANGE 24MHz только для 24MHz
 8001048:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800104c:	2000      	movs	r0, #0
 800104e:	f000 f87d 	bl	800114c <vs1053_writeCommand>

    temp = vs1053_readData(vs1053_STATUS);
 8001052:	2001      	movs	r0, #1
 8001054:	f000 f8a8 	bl	80011a8 <vs1053_readData>
 8001058:	4603      	mov	r3, r0
 800105a:	80fb      	strh	r3, [r7, #6]
    chip_id=(temp >> 4)&0x0F;// 0 - VS1001, 1 - VS1011, 2 - VS1002, 3 - VS1003, 4 - VS1053
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	091b      	lsrs	r3, r3, #4
 8001060:	b29b      	uxth	r3, r3
 8001062:	b2db      	uxtb	r3, r3
 8001064:	f003 030f 	and.w	r3, r3, #15
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <vs1053_reset+0xc4>)
 800106c:	701a      	strb	r2, [r3, #0]
	  //Для 12.288MHz:
	  //(XTLI_HZ - 8000000) / 4000 = (12288000 - 8000000) / 4000 = 4288000 / 4000 = 1072 = 0x0430 = 0000 0100 0011 0000
		/*The maximum sample rate that can be played with correct speed is XTALI/256 (or XTALI/512
    if SM_CLK_RANGE is set). Thus, XTALI must be at least 12.288 MHz (24.576 MHz) to be able
    to play 48 kHz at correct speed. Reset value is 1.0 × . Recommended SC_MULT=3.5 × , SC_ADD=1.0 × (SCI_CLOCKF=0x8800).*/
    vs1053_writeCommand (vs1053_CLOCKF, 0x8000 | 0x0800 | 0x0430 );// 0x0430 можно было не указывать,ноль в SC_FREQ означает 12,288!!!
 800106e:	f648 4130 	movw	r1, #35888	; 0x8c30
 8001072:	2003      	movs	r0, #3
 8001074:	f000 f86a 	bl	800114c <vs1053_writeCommand>
	  vs1053_setvolume ( 50, 50 );// Начальная громкость чем меньше тем громче))
 8001078:	2132      	movs	r1, #50	; 0x32
 800107a:	2032      	movs	r0, #50	; 0x32
 800107c:	f000 f844 	bl	8001108 <vs1053_setvolume>
  	SpiInit (SPI_CR1_BR_2);//музыку гоним на высокой скрости
 8001080:	2020      	movs	r0, #32
 8001082:	f7ff ff51 	bl	8000f28 <SpiInit>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40010800 	.word	0x40010800
 8001094:	200003dc 	.word	0x200003dc

08001098 <vs1053_isDataReq>:

//============================================================================//
//+++++++++++++++++++++++++++++ VS1053_DREQ STATE ++++++++++++++++++++++++++++//
//============================================================================//
bool vs1053_isDataReq(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  if (VS1053_DREQ == RESET )
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <vs1053_isDataReq+0x20>)
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f003 0304 	and.w	r3, r3, #4
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d101      	bne.n	80010ac <vs1053_isDataReq+0x14>
    return false;
 80010a8:	2300      	movs	r3, #0
 80010aa:	e000      	b.n	80010ae <vs1053_isDataReq+0x16>

  return true;
 80010ac:	2301      	movs	r3, #1
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	40010800 	.word	0x40010800

080010bc <vs1053_send32>:
//============================================================================//
//+++++++++++++++++ Send an 32 byte block of audio stream data +++++++++++++++//
//============================================================================//
void vs1053_send32(uint8_t *pData)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	uint8_t i;
	VS1053_RESET_XDCS();
 80010c4:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <vs1053_send32+0x48>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	4a0e      	ldr	r2, [pc, #56]	; (8001104 <vs1053_send32+0x48>)
 80010ca:	f023 0308 	bic.w	r3, r3, #8
 80010ce:	60d3      	str	r3, [r2, #12]
	for (i=0;i <32;i++)// send 32 bytes
 80010d0:	2300      	movs	r3, #0
 80010d2:	73fb      	strb	r3, [r7, #15]
 80010d4:	e009      	b.n	80010ea <vs1053_send32+0x2e>
		SPI_sendByte(*pData ++ );
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	1c5a      	adds	r2, r3, #1
 80010da:	607a      	str	r2, [r7, #4]
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff ff34 	bl	8000f4c <SPI_sendByte>
	for (i=0;i <32;i++)// send 32 bytes
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	3301      	adds	r3, #1
 80010e8:	73fb      	strb	r3, [r7, #15]
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	2b1f      	cmp	r3, #31
 80010ee:	d9f2      	bls.n	80010d6 <vs1053_send32+0x1a>
	VS1053_SET_XDCS();
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <vs1053_send32+0x48>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	4a03      	ldr	r2, [pc, #12]	; (8001104 <vs1053_send32+0x48>)
 80010f6:	f043 0308 	orr.w	r3, r3, #8
 80010fa:	60d3      	str	r3, [r2, #12]
}
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40010800 	.word	0x40010800

08001108 <vs1053_setvolume>:
//============================================================================//
//++++++++++++++++++++++++++++ Set audio volume ++++++++++++++++++++++++++++++//
//============================================================================//
void vs1053_setvolume(uint8_t volumeLeft,uint8_t volumeRight)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	460a      	mov	r2, r1
 8001112:	71fb      	strb	r3, [r7, #7]
 8001114:	4613      	mov	r3, r2
 8001116:	71bb      	strb	r3, [r7, #6]
	uint16_t vol;
	vol = volumeLeft;
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	81fb      	strh	r3, [r7, #14]
	vol <<= 8;
 800111c:	89fb      	ldrh	r3, [r7, #14]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	81fb      	strh	r3, [r7, #14]
	vol |= volumeRight;
 8001122:	79bb      	ldrb	r3, [r7, #6]
 8001124:	b29a      	uxth	r2, r3
 8001126:	89fb      	ldrh	r3, [r7, #14]
 8001128:	4313      	orrs	r3, r2
 800112a:	81fb      	strh	r3, [r7, #14]
 	SpiInit((uint32_t)(SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0));
 800112c:	2038      	movs	r0, #56	; 0x38
 800112e:	f7ff fefb 	bl	8000f28 <SpiInit>
	vs1053_writeCommand (vs1053_VOL,vol);			// set vs1053 volume register
 8001132:	89fb      	ldrh	r3, [r7, #14]
 8001134:	4619      	mov	r1, r3
 8001136:	200b      	movs	r0, #11
 8001138:	f000 f808 	bl	800114c <vs1053_writeCommand>
 	SpiInit(SPI_CR1_BR_0);
 800113c:	2008      	movs	r0, #8
 800113e:	f7ff fef3 	bl	8000f28 <SpiInit>
}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <vs1053_writeCommand>:
//============================================================================//
//+++++++++++++++++++++ Write a data word to specific address ++++++++++++++++//
//============================================================================//
void vs1053_writeCommand(uint8_t addr,uint16_t data)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	460a      	mov	r2, r1
 8001156:	71fb      	strb	r3, [r7, #7]
 8001158:	4613      	mov	r3, r2
 800115a:	80bb      	strh	r3, [r7, #4]
    VS1053_CS();
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <vs1053_writeCommand+0x58>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	4a10      	ldr	r2, [pc, #64]	; (80011a4 <vs1053_writeCommand+0x58>)
 8001162:	f023 0310 	bic.w	r3, r3, #16
 8001166:	60d3      	str	r3, [r2, #12]
    SPI_sendByte(VS1053_CMD_WRITE );// send write opcode 0x02
 8001168:	2002      	movs	r0, #2
 800116a:	f7ff feef 	bl	8000f4c <SPI_sendByte>
    SPI_sendByte(addr);			    // send address
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff feeb 	bl	8000f4c <SPI_sendByte>
    SPI_sendByte(data >> 8);		// send MSB
 8001176:	88bb      	ldrh	r3, [r7, #4]
 8001178:	0a1b      	lsrs	r3, r3, #8
 800117a:	b29b      	uxth	r3, r3
 800117c:	b2db      	uxtb	r3, r3
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fee4 	bl	8000f4c <SPI_sendByte>
    SPI_sendByte(data);			    //send LSB
 8001184:	88bb      	ldrh	r3, [r7, #4]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fedf 	bl	8000f4c <SPI_sendByte>
    VS1053_DCS();
 800118e:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <vs1053_writeCommand+0x58>)
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <vs1053_writeCommand+0x58>)
 8001194:	f043 0310 	orr.w	r3, r3, #16
 8001198:	60d3      	str	r3, [r2, #12]
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40010800 	.word	0x40010800

080011a8 <vs1053_readData>:

//============================================================================//
//+++++++++++++++ Read a data word from vs1053 specific address ++++++++++++++//
//============================================================================//
uint16_t vs1053_readData(uint8_t addr)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
    uint16_t tempdata = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	81fb      	strh	r3, [r7, #14]
    uint8_t temp;
	  VS1053_SET_XDCS();              // XDCS = 0
 80011b6:	4b19      	ldr	r3, [pc, #100]	; (800121c <vs1053_readData+0x74>)
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	4a18      	ldr	r2, [pc, #96]	; (800121c <vs1053_readData+0x74>)
 80011bc:	f043 0308 	orr.w	r3, r3, #8
 80011c0:	60d3      	str	r3, [r2, #12]
    VS1053_CS();			              // xCS = 0
 80011c2:	4b16      	ldr	r3, [pc, #88]	; (800121c <vs1053_readData+0x74>)
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	4a15      	ldr	r2, [pc, #84]	; (800121c <vs1053_readData+0x74>)
 80011c8:	f023 0310 	bic.w	r3, r3, #16
 80011cc:	60d3      	str	r3, [r2, #12]
    SPI_sendByte(VS1053_CMD_READ );	// send read opcode 0x03
 80011ce:	2003      	movs	r0, #3
 80011d0:	f7ff febc 	bl	8000f4c <SPI_sendByte>
    SPI_sendByte(addr);				      // send address
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff feb8 	bl	8000f4c <SPI_sendByte>
    temp = SPI_sendByte(0);		      // send zero dummy to receive one byte
 80011dc:	2000      	movs	r0, #0
 80011de:	f7ff feb5 	bl	8000f4c <SPI_sendByte>
 80011e2:	4603      	mov	r3, r0
 80011e4:	737b      	strb	r3, [r7, #13]
    tempdata = temp;
 80011e6:	7b7b      	ldrb	r3, [r7, #13]
 80011e8:	81fb      	strh	r3, [r7, #14]
    tempdata <<= 8;						      // MSB was sent first
 80011ea:	89fb      	ldrh	r3, [r7, #14]
 80011ec:	021b      	lsls	r3, r3, #8
 80011ee:	81fb      	strh	r3, [r7, #14]
    temp = SPI_sendByte(0);		      // send zero dummy to receive one byte
 80011f0:	2000      	movs	r0, #0
 80011f2:	f7ff feab 	bl	8000f4c <SPI_sendByte>
 80011f6:	4603      	mov	r3, r0
 80011f8:	737b      	strb	r3, [r7, #13]
    tempdata |= temp;
 80011fa:	7b7b      	ldrb	r3, [r7, #13]
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	89fb      	ldrh	r3, [r7, #14]
 8001200:	4313      	orrs	r3, r2
 8001202:	81fb      	strh	r3, [r7, #14]
    VS1053_DCS();			              // xCS = 1
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <vs1053_readData+0x74>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	4a04      	ldr	r2, [pc, #16]	; (800121c <vs1053_readData+0x74>)
 800120a:	f043 0310 	orr.w	r3, r3, #16
 800120e:	60d3      	str	r3, [r2, #12]
    return tempdata;	             	// return data word
 8001210:	89fb      	ldrh	r3, [r7, #14]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40010800 	.word	0x40010800

08001220 <SPI_SendReceiveByte>:
uint8_t response;
#define CS_ON GPIOB->ODR &= ~GPIO_ODR_ODR12
#define CS_OFF GPIOB->ODR |= GPIO_ODR_ODR12

 uint8_t SPI_SendReceiveByte( uint8_t data )
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
    uint8_t rxbyte;

    while ( !( SPI_PORT -> SR & SPI_SR_TXE ) );
 800122a:	bf00      	nop
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <SPI_SendReceiveByte+0x40>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d0f9      	beq.n	800122c <SPI_SendReceiveByte+0xc>
    SPI_PORT -> DR = data;
 8001238:	4a09      	ldr	r2, [pc, #36]	; (8001260 <SPI_SendReceiveByte+0x40>)
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	60d3      	str	r3, [r2, #12]

    while ( !( SPI_PORT -> SR & SPI_SR_RXNE ) );
 800123e:	bf00      	nop
 8001240:	4b07      	ldr	r3, [pc, #28]	; (8001260 <SPI_SendReceiveByte+0x40>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0f9      	beq.n	8001240 <SPI_SendReceiveByte+0x20>
    rxbyte = SPI_PORT->DR;
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <SPI_SendReceiveByte+0x40>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	73fb      	strb	r3, [r7, #15]

    return rxbyte;
 8001252:	7bfb      	ldrb	r3, [r7, #15]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	40003800 	.word	0x40003800

08001264 <flash_reset>:
//=========================================================================//
//+++++++++++++++сброс флеш и влючение ее в работу+++++++++++++++++++++++++//
//=========================================================================//
void flash_reset()
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
    CS_ON;
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <flash_reset+0x4c>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	4a10      	ldr	r2, [pc, #64]	; (80012b0 <flash_reset+0x4c>)
 800126e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001272:	60d3      	str	r3, [r2, #12]
    SPI_SendReceiveByte(F_ENABLE_RESET);
 8001274:	2066      	movs	r0, #102	; 0x66
 8001276:	f7ff ffd3 	bl	8001220 <SPI_SendReceiveByte>
    CS_OFF;
 800127a:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <flash_reset+0x4c>)
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	4a0c      	ldr	r2, [pc, #48]	; (80012b0 <flash_reset+0x4c>)
 8001280:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001284:	60d3      	str	r3, [r2, #12]

    CS_ON;
 8001286:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <flash_reset+0x4c>)
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	4a09      	ldr	r2, [pc, #36]	; (80012b0 <flash_reset+0x4c>)
 800128c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001290:	60d3      	str	r3, [r2, #12]
    SPI_SendReceiveByte(F_RESET_DEVICE);
 8001292:	2099      	movs	r0, #153	; 0x99
 8001294:	f7ff ffc4 	bl	8001220 <SPI_SendReceiveByte>
    CS_OFF;
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <flash_reset+0x4c>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <flash_reset+0x4c>)
 800129e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012a2:	60d3      	str	r3, [r2, #12]
	  HAL_Delay(1000);
 80012a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012a8:	f000 f8d4 	bl	8001454 <HAL_Delay>
}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40010c00 	.word	0x40010c00

080012b4 <flash_read_page>:
}
//=========================================================================//
//+++++++++++++++++++++++++++чтение страницы+++++++++++++++++++++++++++++++//
//=========================================================================//
 void flash_read_page(uint8_t data[], uint32_t addr, uint8_t len)//len 0 = 1 байт
{//256 bytes max per read / write.Clock frequency for Read Data instruction (03h) max 33 MHz
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	4613      	mov	r3, r2
 80012c0:	71fb      	strb	r3, [r7, #7]
    CS_ON;
 80012c2:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <flash_read_page+0x84>)
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	4a1c      	ldr	r2, [pc, #112]	; (8001338 <flash_read_page+0x84>)
 80012c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012cc:	60d3      	str	r3, [r2, #12]
    SPI_SendReceiveByte(F_READ);
 80012ce:	2003      	movs	r0, #3
 80012d0:	f7ff ffa6 	bl	8001220 <SPI_SendReceiveByte>
    SPI_SendReceiveByte((addr >> 16) & 0xFF);
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	0c1b      	lsrs	r3, r3, #16
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff ffa0 	bl	8001220 <SPI_SendReceiveByte>
    SPI_SendReceiveByte((addr >> 8) & 0xFF);
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	0a1b      	lsrs	r3, r3, #8
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ff9a 	bl	8001220 <SPI_SendReceiveByte>
    SPI_SendReceiveByte(addr & 0xFF);
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff95 	bl	8001220 <SPI_SendReceiveByte>
	  *data++ = SPI_SendReceiveByte(0);// send zero dummy to receive one byte
 80012f6:	68fc      	ldr	r4, [r7, #12]
 80012f8:	1c63      	adds	r3, r4, #1
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	2000      	movs	r0, #0
 80012fe:	f7ff ff8f 	bl	8001220 <SPI_SendReceiveByte>
 8001302:	4603      	mov	r3, r0
 8001304:	7023      	strb	r3, [r4, #0]
    while(len--)
 8001306:	e007      	b.n	8001318 <flash_read_page+0x64>
    {
        *data++ = SPI_SendReceiveByte(0);
 8001308:	68fc      	ldr	r4, [r7, #12]
 800130a:	1c63      	adds	r3, r4, #1
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	2000      	movs	r0, #0
 8001310:	f7ff ff86 	bl	8001220 <SPI_SendReceiveByte>
 8001314:	4603      	mov	r3, r0
 8001316:	7023      	strb	r3, [r4, #0]
    while(len--)
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	1e5a      	subs	r2, r3, #1
 800131c:	71fa      	strb	r2, [r7, #7]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f2      	bne.n	8001308 <flash_read_page+0x54>
    }
    CS_OFF;
 8001322:	4b05      	ldr	r3, [pc, #20]	; (8001338 <flash_read_page+0x84>)
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	4a04      	ldr	r2, [pc, #16]	; (8001338 <flash_read_page+0x84>)
 8001328:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800132c:	60d3      	str	r3, [r2, #12]
}
 800132e:	bf00      	nop
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	bd90      	pop	{r4, r7, pc}
 8001336:	bf00      	nop
 8001338:	40010c00 	.word	0x40010c00

0800133c <get_flash_id>:
//=========================================================================//
//++++++++++++++++++++++++чтение айди флэш+++++++++++++++++++++++++++++++++//
//=========================================================================//
uint8_t get_flash_id()
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0

    uint8_t buff[2];
    CS_ON;
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <get_flash_id+0x64>)
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	4a16      	ldr	r2, [pc, #88]	; (80013a0 <get_flash_id+0x64>)
 8001348:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800134c:	60d3      	str	r3, [r2, #12]
    SPI_SendReceiveByte(F_GET_DEV_ID);
 800134e:	2090      	movs	r0, #144	; 0x90
 8001350:	f7ff ff66 	bl	8001220 <SPI_SendReceiveByte>
	  SPI_SendReceiveByte(0x00);//ПОСЫЛАЕМ 000000 24-bit address
 8001354:	2000      	movs	r0, #0
 8001356:	f7ff ff63 	bl	8001220 <SPI_SendReceiveByte>
    SPI_SendReceiveByte(0x00);//ПОСЫЛАЕМ 000000 24-bit address
 800135a:	2000      	movs	r0, #0
 800135c:	f7ff ff60 	bl	8001220 <SPI_SendReceiveByte>
    SPI_SendReceiveByte(0x00);//ПОСЫЛАЕМ 000000 24-bit address
 8001360:	2000      	movs	r0, #0
 8001362:	f7ff ff5d 	bl	8001220 <SPI_SendReceiveByte>
	  buff[1] = SPI_SendReceiveByte(0);// send zero dummy to receive one byte
 8001366:	2000      	movs	r0, #0
 8001368:	f7ff ff5a 	bl	8001220 <SPI_SendReceiveByte>
 800136c:	4603      	mov	r3, r0
 800136e:	717b      	strb	r3, [r7, #5]
	  buff[0] = SPI_SendReceiveByte(0);// send zero dummy to receive one byte
 8001370:	2000      	movs	r0, #0
 8001372:	f7ff ff55 	bl	8001220 <SPI_SendReceiveByte>
 8001376:	4603      	mov	r3, r0
 8001378:	713b      	strb	r3, [r7, #4]
    CS_OFF;
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <get_flash_id+0x64>)
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	4a08      	ldr	r2, [pc, #32]	; (80013a0 <get_flash_id+0x64>)
 8001380:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001384:	60d3      	str	r3, [r2, #12]
   //EFh manufaturer id for windbond,17h device ID
    if (buff[0] == 0x17  && buff[1] == 0xEF)
 8001386:	793b      	ldrb	r3, [r7, #4]
 8001388:	2b17      	cmp	r3, #23
 800138a:	d104      	bne.n	8001396 <get_flash_id+0x5a>
 800138c:	797b      	ldrb	r3, [r7, #5]
 800138e:	2bef      	cmp	r3, #239	; 0xef
 8001390:	d101      	bne.n	8001396 <get_flash_id+0x5a>
        return 1;//OK;
 8001392:	2301      	movs	r3, #1
 8001394:	e000      	b.n	8001398 <get_flash_id+0x5c>

    return 0;//Problem;
 8001396:	2300      	movs	r3, #0


}
 8001398:	4618      	mov	r0, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40010c00 	.word	0x40010c00

080013a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013a4:	f7ff fdba 	bl	8000f1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a8:	480b      	ldr	r0, [pc, #44]	; (80013d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013aa:	490c      	ldr	r1, [pc, #48]	; (80013dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013ac:	4a0c      	ldr	r2, [pc, #48]	; (80013e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b0:	e002      	b.n	80013b8 <LoopCopyDataInit>

080013b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013b6:	3304      	adds	r3, #4

080013b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013bc:	d3f9      	bcc.n	80013b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013be:	4a09      	ldr	r2, [pc, #36]	; (80013e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013c0:	4c09      	ldr	r4, [pc, #36]	; (80013e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c4:	e001      	b.n	80013ca <LoopFillZerobss>

080013c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c8:	3204      	adds	r2, #4

080013ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013cc:	d3fb      	bcc.n	80013c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ce:	f002 fcd7 	bl	8003d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013d2:	f7fe ff9b 	bl	800030c <main>
  bx lr
 80013d6:	4770      	bx	lr
  ldr r0, =_sdata
 80013d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013dc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80013e0:	08004ae0 	.word	0x08004ae0
  ldr r2, =_sbss
 80013e4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80013e8:	200003f4 	.word	0x200003f4

080013ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013ec:	e7fe      	b.n	80013ec <ADC1_2_IRQHandler>
	...

080013f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <HAL_Init+0x28>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a07      	ldr	r2, [pc, #28]	; (8001418 <HAL_Init+0x28>)
 80013fa:	f043 0310 	orr.w	r3, r3, #16
 80013fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001400:	2003      	movs	r0, #3
 8001402:	f000 f8f5 	bl	80015f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001406:	200f      	movs	r0, #15
 8001408:	f7ff fc36 	bl	8000c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800140c:	f7ff fad0 	bl	80009b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40022000 	.word	0x40022000

0800141c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <HAL_IncTick+0x1c>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	4b05      	ldr	r3, [pc, #20]	; (800143c <HAL_IncTick+0x20>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4413      	add	r3, r2
 800142c:	4a03      	ldr	r2, [pc, #12]	; (800143c <HAL_IncTick+0x20>)
 800142e:	6013      	str	r3, [r2, #0]
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr
 8001438:	2000000c 	.word	0x2000000c
 800143c:	200003e0 	.word	0x200003e0

08001440 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return uwTick;
 8001444:	4b02      	ldr	r3, [pc, #8]	; (8001450 <HAL_GetTick+0x10>)
 8001446:	681b      	ldr	r3, [r3, #0]
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	200003e0 	.word	0x200003e0

08001454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800145c:	f7ff fff0 	bl	8001440 <HAL_GetTick>
 8001460:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800146c:	d005      	beq.n	800147a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800146e:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <HAL_Delay+0x44>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	461a      	mov	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4413      	add	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800147a:	bf00      	nop
 800147c:	f7ff ffe0 	bl	8001440 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	429a      	cmp	r2, r3
 800148a:	d8f7      	bhi.n	800147c <HAL_Delay+0x28>
  {
  }
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	2000000c 	.word	0x2000000c

0800149c <__NVIC_SetPriorityGrouping>:
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b8:	4013      	ands	r3, r2
 80014ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ce:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	60d3      	str	r3, [r2, #12]
}
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <__NVIC_GetPriorityGrouping>:
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e8:	4b04      	ldr	r3, [pc, #16]	; (80014fc <__NVIC_GetPriorityGrouping+0x18>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	f003 0307 	and.w	r3, r3, #7
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <__NVIC_EnableIRQ>:
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	2b00      	cmp	r3, #0
 8001510:	db0b      	blt.n	800152a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	f003 021f 	and.w	r2, r3, #31
 8001518:	4906      	ldr	r1, [pc, #24]	; (8001534 <__NVIC_EnableIRQ+0x34>)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	095b      	lsrs	r3, r3, #5
 8001520:	2001      	movs	r0, #1
 8001522:	fa00 f202 	lsl.w	r2, r0, r2
 8001526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	e000e100 	.word	0xe000e100

08001538 <__NVIC_SetPriority>:
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	6039      	str	r1, [r7, #0]
 8001542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001548:	2b00      	cmp	r3, #0
 800154a:	db0a      	blt.n	8001562 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	b2da      	uxtb	r2, r3
 8001550:	490c      	ldr	r1, [pc, #48]	; (8001584 <__NVIC_SetPriority+0x4c>)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	0112      	lsls	r2, r2, #4
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	440b      	add	r3, r1
 800155c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001560:	e00a      	b.n	8001578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	b2da      	uxtb	r2, r3
 8001566:	4908      	ldr	r1, [pc, #32]	; (8001588 <__NVIC_SetPriority+0x50>)
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	3b04      	subs	r3, #4
 8001570:	0112      	lsls	r2, r2, #4
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	440b      	add	r3, r1
 8001576:	761a      	strb	r2, [r3, #24]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000e100 	.word	0xe000e100
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <NVIC_EncodePriority>:
{
 800158c:	b480      	push	{r7}
 800158e:	b089      	sub	sp, #36	; 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f1c3 0307 	rsb	r3, r3, #7
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	bf28      	it	cs
 80015aa:	2304      	movcs	r3, #4
 80015ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3304      	adds	r3, #4
 80015b2:	2b06      	cmp	r3, #6
 80015b4:	d902      	bls.n	80015bc <NVIC_EncodePriority+0x30>
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3b03      	subs	r3, #3
 80015ba:	e000      	b.n	80015be <NVIC_EncodePriority+0x32>
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43da      	mvns	r2, r3
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	401a      	ands	r2, r3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	fa01 f303 	lsl.w	r3, r1, r3
 80015de:	43d9      	mvns	r1, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e4:	4313      	orrs	r3, r2
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3724      	adds	r7, #36	; 0x24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff ff4f 	bl	800149c <__NVIC_SetPriorityGrouping>
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001606:	b580      	push	{r7, lr}
 8001608:	b086      	sub	sp, #24
 800160a:	af00      	add	r7, sp, #0
 800160c:	4603      	mov	r3, r0
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
 8001612:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001618:	f7ff ff64 	bl	80014e4 <__NVIC_GetPriorityGrouping>
 800161c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	68b9      	ldr	r1, [r7, #8]
 8001622:	6978      	ldr	r0, [r7, #20]
 8001624:	f7ff ffb2 	bl	800158c <NVIC_EncodePriority>
 8001628:	4602      	mov	r2, r0
 800162a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162e:	4611      	mov	r1, r2
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff ff81 	bl	8001538 <__NVIC_SetPriority>
}
 8001636:	bf00      	nop
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff57 	bl	8001500 <__NVIC_EnableIRQ>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e043      	b.n	80016fa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	4b22      	ldr	r3, [pc, #136]	; (8001704 <HAL_DMA_Init+0xa8>)
 800167a:	4413      	add	r3, r2
 800167c:	4a22      	ldr	r2, [pc, #136]	; (8001708 <HAL_DMA_Init+0xac>)
 800167e:	fba2 2303 	umull	r2, r3, r2, r3
 8001682:	091b      	lsrs	r3, r3, #4
 8001684:	009a      	lsls	r2, r3, #2
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a1f      	ldr	r2, [pc, #124]	; (800170c <HAL_DMA_Init+0xb0>)
 800168e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2202      	movs	r2, #2
 8001694:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80016a6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80016aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80016b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016d4:	68fa      	ldr	r2, [r7, #12]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	bffdfff8 	.word	0xbffdfff8
 8001708:	cccccccd 	.word	0xcccccccd
 800170c:	40020000 	.word	0x40020000

08001710 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
 800171c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d101      	bne.n	8001730 <HAL_DMA_Start_IT+0x20>
 800172c:	2302      	movs	r3, #2
 800172e:	e04b      	b.n	80017c8 <HAL_DMA_Start_IT+0xb8>
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b01      	cmp	r3, #1
 8001742:	d13a      	bne.n	80017ba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2202      	movs	r2, #2
 8001748:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0201 	bic.w	r2, r2, #1
 8001760:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	68b9      	ldr	r1, [r7, #8]
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f000 f9eb 	bl	8001b44 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001772:	2b00      	cmp	r3, #0
 8001774:	d008      	beq.n	8001788 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f042 020e 	orr.w	r2, r2, #14
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	e00f      	b.n	80017a8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 0204 	bic.w	r2, r2, #4
 8001796:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f042 020a 	orr.w	r2, r2, #10
 80017a6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0201 	orr.w	r2, r2, #1
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	e005      	b.n	80017c6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80017c2:	2302      	movs	r3, #2
 80017c4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80017c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d008      	beq.n	80017fa <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2204      	movs	r2, #4
 80017ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e020      	b.n	800183c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 020e 	bic.w	r2, r2, #14
 8001808:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 0201 	bic.w	r2, r2, #1
 8001818:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001822:	2101      	movs	r1, #1
 8001824:	fa01 f202 	lsl.w	r2, r1, r2
 8001828:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800183a:	7bfb      	ldrb	r3, [r7, #15]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
	...

08001848 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001850:	2300      	movs	r3, #0
 8001852:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d005      	beq.n	800186c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2204      	movs	r2, #4
 8001864:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	73fb      	strb	r3, [r7, #15]
 800186a:	e051      	b.n	8001910 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 020e 	bic.w	r2, r2, #14
 800187a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f022 0201 	bic.w	r2, r2, #1
 800188a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a22      	ldr	r2, [pc, #136]	; (800191c <HAL_DMA_Abort_IT+0xd4>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d029      	beq.n	80018ea <HAL_DMA_Abort_IT+0xa2>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a21      	ldr	r2, [pc, #132]	; (8001920 <HAL_DMA_Abort_IT+0xd8>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d022      	beq.n	80018e6 <HAL_DMA_Abort_IT+0x9e>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a1f      	ldr	r2, [pc, #124]	; (8001924 <HAL_DMA_Abort_IT+0xdc>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d01a      	beq.n	80018e0 <HAL_DMA_Abort_IT+0x98>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a1e      	ldr	r2, [pc, #120]	; (8001928 <HAL_DMA_Abort_IT+0xe0>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d012      	beq.n	80018da <HAL_DMA_Abort_IT+0x92>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a1c      	ldr	r2, [pc, #112]	; (800192c <HAL_DMA_Abort_IT+0xe4>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d00a      	beq.n	80018d4 <HAL_DMA_Abort_IT+0x8c>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a1b      	ldr	r2, [pc, #108]	; (8001930 <HAL_DMA_Abort_IT+0xe8>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d102      	bne.n	80018ce <HAL_DMA_Abort_IT+0x86>
 80018c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018cc:	e00e      	b.n	80018ec <HAL_DMA_Abort_IT+0xa4>
 80018ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018d2:	e00b      	b.n	80018ec <HAL_DMA_Abort_IT+0xa4>
 80018d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018d8:	e008      	b.n	80018ec <HAL_DMA_Abort_IT+0xa4>
 80018da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018de:	e005      	b.n	80018ec <HAL_DMA_Abort_IT+0xa4>
 80018e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018e4:	e002      	b.n	80018ec <HAL_DMA_Abort_IT+0xa4>
 80018e6:	2310      	movs	r3, #16
 80018e8:	e000      	b.n	80018ec <HAL_DMA_Abort_IT+0xa4>
 80018ea:	2301      	movs	r3, #1
 80018ec:	4a11      	ldr	r2, [pc, #68]	; (8001934 <HAL_DMA_Abort_IT+0xec>)
 80018ee:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	4798      	blx	r3
    } 
  }
  return status;
 8001910:	7bfb      	ldrb	r3, [r7, #15]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40020008 	.word	0x40020008
 8001920:	4002001c 	.word	0x4002001c
 8001924:	40020030 	.word	0x40020030
 8001928:	40020044 	.word	0x40020044
 800192c:	40020058 	.word	0x40020058
 8001930:	4002006c 	.word	0x4002006c
 8001934:	40020000 	.word	0x40020000

08001938 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	2204      	movs	r2, #4
 8001956:	409a      	lsls	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4013      	ands	r3, r2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d04f      	beq.n	8001a00 <HAL_DMA_IRQHandler+0xc8>
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	f003 0304 	and.w	r3, r3, #4
 8001966:	2b00      	cmp	r3, #0
 8001968:	d04a      	beq.n	8001a00 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0320 	and.w	r3, r3, #32
 8001974:	2b00      	cmp	r3, #0
 8001976:	d107      	bne.n	8001988 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0204 	bic.w	r2, r2, #4
 8001986:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a66      	ldr	r2, [pc, #408]	; (8001b28 <HAL_DMA_IRQHandler+0x1f0>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d029      	beq.n	80019e6 <HAL_DMA_IRQHandler+0xae>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a65      	ldr	r2, [pc, #404]	; (8001b2c <HAL_DMA_IRQHandler+0x1f4>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d022      	beq.n	80019e2 <HAL_DMA_IRQHandler+0xaa>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a63      	ldr	r2, [pc, #396]	; (8001b30 <HAL_DMA_IRQHandler+0x1f8>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d01a      	beq.n	80019dc <HAL_DMA_IRQHandler+0xa4>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a62      	ldr	r2, [pc, #392]	; (8001b34 <HAL_DMA_IRQHandler+0x1fc>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d012      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x9e>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a60      	ldr	r2, [pc, #384]	; (8001b38 <HAL_DMA_IRQHandler+0x200>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d00a      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x98>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a5f      	ldr	r2, [pc, #380]	; (8001b3c <HAL_DMA_IRQHandler+0x204>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d102      	bne.n	80019ca <HAL_DMA_IRQHandler+0x92>
 80019c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019c8:	e00e      	b.n	80019e8 <HAL_DMA_IRQHandler+0xb0>
 80019ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80019ce:	e00b      	b.n	80019e8 <HAL_DMA_IRQHandler+0xb0>
 80019d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80019d4:	e008      	b.n	80019e8 <HAL_DMA_IRQHandler+0xb0>
 80019d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019da:	e005      	b.n	80019e8 <HAL_DMA_IRQHandler+0xb0>
 80019dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019e0:	e002      	b.n	80019e8 <HAL_DMA_IRQHandler+0xb0>
 80019e2:	2340      	movs	r3, #64	; 0x40
 80019e4:	e000      	b.n	80019e8 <HAL_DMA_IRQHandler+0xb0>
 80019e6:	2304      	movs	r3, #4
 80019e8:	4a55      	ldr	r2, [pc, #340]	; (8001b40 <HAL_DMA_IRQHandler+0x208>)
 80019ea:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 8094 	beq.w	8001b1e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80019fe:	e08e      	b.n	8001b1e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a04:	2202      	movs	r2, #2
 8001a06:	409a      	lsls	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d056      	beq.n	8001abe <HAL_DMA_IRQHandler+0x186>
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d051      	beq.n	8001abe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0320 	and.w	r3, r3, #32
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d10b      	bne.n	8001a40 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 020a 	bic.w	r2, r2, #10
 8001a36:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a38      	ldr	r2, [pc, #224]	; (8001b28 <HAL_DMA_IRQHandler+0x1f0>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d029      	beq.n	8001a9e <HAL_DMA_IRQHandler+0x166>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a37      	ldr	r2, [pc, #220]	; (8001b2c <HAL_DMA_IRQHandler+0x1f4>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d022      	beq.n	8001a9a <HAL_DMA_IRQHandler+0x162>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a35      	ldr	r2, [pc, #212]	; (8001b30 <HAL_DMA_IRQHandler+0x1f8>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d01a      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x15c>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a34      	ldr	r2, [pc, #208]	; (8001b34 <HAL_DMA_IRQHandler+0x1fc>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d012      	beq.n	8001a8e <HAL_DMA_IRQHandler+0x156>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a32      	ldr	r2, [pc, #200]	; (8001b38 <HAL_DMA_IRQHandler+0x200>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d00a      	beq.n	8001a88 <HAL_DMA_IRQHandler+0x150>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a31      	ldr	r2, [pc, #196]	; (8001b3c <HAL_DMA_IRQHandler+0x204>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d102      	bne.n	8001a82 <HAL_DMA_IRQHandler+0x14a>
 8001a7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a80:	e00e      	b.n	8001aa0 <HAL_DMA_IRQHandler+0x168>
 8001a82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a86:	e00b      	b.n	8001aa0 <HAL_DMA_IRQHandler+0x168>
 8001a88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a8c:	e008      	b.n	8001aa0 <HAL_DMA_IRQHandler+0x168>
 8001a8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a92:	e005      	b.n	8001aa0 <HAL_DMA_IRQHandler+0x168>
 8001a94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a98:	e002      	b.n	8001aa0 <HAL_DMA_IRQHandler+0x168>
 8001a9a:	2320      	movs	r3, #32
 8001a9c:	e000      	b.n	8001aa0 <HAL_DMA_IRQHandler+0x168>
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	4a27      	ldr	r2, [pc, #156]	; (8001b40 <HAL_DMA_IRQHandler+0x208>)
 8001aa2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d034      	beq.n	8001b1e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001abc:	e02f      	b.n	8001b1e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	2208      	movs	r2, #8
 8001ac4:	409a      	lsls	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d028      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x1e8>
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	f003 0308 	and.w	r3, r3, #8
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d023      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 020e 	bic.w	r2, r2, #14
 8001ae6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af0:	2101      	movs	r1, #1
 8001af2:	fa01 f202 	lsl.w	r2, r1, r2
 8001af6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d004      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	4798      	blx	r3
    }
  }
  return;
 8001b1e:	bf00      	nop
 8001b20:	bf00      	nop
}
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40020008 	.word	0x40020008
 8001b2c:	4002001c 	.word	0x4002001c
 8001b30:	40020030 	.word	0x40020030
 8001b34:	40020044 	.word	0x40020044
 8001b38:	40020058 	.word	0x40020058
 8001b3c:	4002006c 	.word	0x4002006c
 8001b40:	40020000 	.word	0x40020000

08001b44 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
 8001b50:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b60:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b10      	cmp	r3, #16
 8001b70:	d108      	bne.n	8001b84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68ba      	ldr	r2, [r7, #8]
 8001b80:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b82:	e007      	b.n	8001b94 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68ba      	ldr	r2, [r7, #8]
 8001b8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	60da      	str	r2, [r3, #12]
}
 8001b94:	bf00      	nop
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr
	...

08001ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b08b      	sub	sp, #44	; 0x2c
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001baa:	2300      	movs	r3, #0
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bb2:	e169      	b.n	8001e88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	69fa      	ldr	r2, [r7, #28]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	f040 8158 	bne.w	8001e82 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	4a9a      	ldr	r2, [pc, #616]	; (8001e40 <HAL_GPIO_Init+0x2a0>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d05e      	beq.n	8001c9a <HAL_GPIO_Init+0xfa>
 8001bdc:	4a98      	ldr	r2, [pc, #608]	; (8001e40 <HAL_GPIO_Init+0x2a0>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d875      	bhi.n	8001cce <HAL_GPIO_Init+0x12e>
 8001be2:	4a98      	ldr	r2, [pc, #608]	; (8001e44 <HAL_GPIO_Init+0x2a4>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d058      	beq.n	8001c9a <HAL_GPIO_Init+0xfa>
 8001be8:	4a96      	ldr	r2, [pc, #600]	; (8001e44 <HAL_GPIO_Init+0x2a4>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d86f      	bhi.n	8001cce <HAL_GPIO_Init+0x12e>
 8001bee:	4a96      	ldr	r2, [pc, #600]	; (8001e48 <HAL_GPIO_Init+0x2a8>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d052      	beq.n	8001c9a <HAL_GPIO_Init+0xfa>
 8001bf4:	4a94      	ldr	r2, [pc, #592]	; (8001e48 <HAL_GPIO_Init+0x2a8>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d869      	bhi.n	8001cce <HAL_GPIO_Init+0x12e>
 8001bfa:	4a94      	ldr	r2, [pc, #592]	; (8001e4c <HAL_GPIO_Init+0x2ac>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d04c      	beq.n	8001c9a <HAL_GPIO_Init+0xfa>
 8001c00:	4a92      	ldr	r2, [pc, #584]	; (8001e4c <HAL_GPIO_Init+0x2ac>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d863      	bhi.n	8001cce <HAL_GPIO_Init+0x12e>
 8001c06:	4a92      	ldr	r2, [pc, #584]	; (8001e50 <HAL_GPIO_Init+0x2b0>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d046      	beq.n	8001c9a <HAL_GPIO_Init+0xfa>
 8001c0c:	4a90      	ldr	r2, [pc, #576]	; (8001e50 <HAL_GPIO_Init+0x2b0>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d85d      	bhi.n	8001cce <HAL_GPIO_Init+0x12e>
 8001c12:	2b12      	cmp	r3, #18
 8001c14:	d82a      	bhi.n	8001c6c <HAL_GPIO_Init+0xcc>
 8001c16:	2b12      	cmp	r3, #18
 8001c18:	d859      	bhi.n	8001cce <HAL_GPIO_Init+0x12e>
 8001c1a:	a201      	add	r2, pc, #4	; (adr r2, 8001c20 <HAL_GPIO_Init+0x80>)
 8001c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c20:	08001c9b 	.word	0x08001c9b
 8001c24:	08001c75 	.word	0x08001c75
 8001c28:	08001c87 	.word	0x08001c87
 8001c2c:	08001cc9 	.word	0x08001cc9
 8001c30:	08001ccf 	.word	0x08001ccf
 8001c34:	08001ccf 	.word	0x08001ccf
 8001c38:	08001ccf 	.word	0x08001ccf
 8001c3c:	08001ccf 	.word	0x08001ccf
 8001c40:	08001ccf 	.word	0x08001ccf
 8001c44:	08001ccf 	.word	0x08001ccf
 8001c48:	08001ccf 	.word	0x08001ccf
 8001c4c:	08001ccf 	.word	0x08001ccf
 8001c50:	08001ccf 	.word	0x08001ccf
 8001c54:	08001ccf 	.word	0x08001ccf
 8001c58:	08001ccf 	.word	0x08001ccf
 8001c5c:	08001ccf 	.word	0x08001ccf
 8001c60:	08001ccf 	.word	0x08001ccf
 8001c64:	08001c7d 	.word	0x08001c7d
 8001c68:	08001c91 	.word	0x08001c91
 8001c6c:	4a79      	ldr	r2, [pc, #484]	; (8001e54 <HAL_GPIO_Init+0x2b4>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d013      	beq.n	8001c9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c72:	e02c      	b.n	8001cce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	623b      	str	r3, [r7, #32]
          break;
 8001c7a:	e029      	b.n	8001cd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	3304      	adds	r3, #4
 8001c82:	623b      	str	r3, [r7, #32]
          break;
 8001c84:	e024      	b.n	8001cd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	3308      	adds	r3, #8
 8001c8c:	623b      	str	r3, [r7, #32]
          break;
 8001c8e:	e01f      	b.n	8001cd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	330c      	adds	r3, #12
 8001c96:	623b      	str	r3, [r7, #32]
          break;
 8001c98:	e01a      	b.n	8001cd0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d102      	bne.n	8001ca8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ca2:	2304      	movs	r3, #4
 8001ca4:	623b      	str	r3, [r7, #32]
          break;
 8001ca6:	e013      	b.n	8001cd0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d105      	bne.n	8001cbc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cb0:	2308      	movs	r3, #8
 8001cb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69fa      	ldr	r2, [r7, #28]
 8001cb8:	611a      	str	r2, [r3, #16]
          break;
 8001cba:	e009      	b.n	8001cd0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cbc:	2308      	movs	r3, #8
 8001cbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	69fa      	ldr	r2, [r7, #28]
 8001cc4:	615a      	str	r2, [r3, #20]
          break;
 8001cc6:	e003      	b.n	8001cd0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	623b      	str	r3, [r7, #32]
          break;
 8001ccc:	e000      	b.n	8001cd0 <HAL_GPIO_Init+0x130>
          break;
 8001cce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	2bff      	cmp	r3, #255	; 0xff
 8001cd4:	d801      	bhi.n	8001cda <HAL_GPIO_Init+0x13a>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	e001      	b.n	8001cde <HAL_GPIO_Init+0x13e>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3304      	adds	r3, #4
 8001cde:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	2bff      	cmp	r3, #255	; 0xff
 8001ce4:	d802      	bhi.n	8001cec <HAL_GPIO_Init+0x14c>
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	e002      	b.n	8001cf2 <HAL_GPIO_Init+0x152>
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	3b08      	subs	r3, #8
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	210f      	movs	r1, #15
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	401a      	ands	r2, r3
 8001d04:	6a39      	ldr	r1, [r7, #32]
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 80b1 	beq.w	8001e82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d20:	4b4d      	ldr	r3, [pc, #308]	; (8001e58 <HAL_GPIO_Init+0x2b8>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	4a4c      	ldr	r2, [pc, #304]	; (8001e58 <HAL_GPIO_Init+0x2b8>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6193      	str	r3, [r2, #24]
 8001d2c:	4b4a      	ldr	r3, [pc, #296]	; (8001e58 <HAL_GPIO_Init+0x2b8>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d38:	4a48      	ldr	r2, [pc, #288]	; (8001e5c <HAL_GPIO_Init+0x2bc>)
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	089b      	lsrs	r3, r3, #2
 8001d3e:	3302      	adds	r3, #2
 8001d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	220f      	movs	r2, #15
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a40      	ldr	r2, [pc, #256]	; (8001e60 <HAL_GPIO_Init+0x2c0>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d013      	beq.n	8001d8c <HAL_GPIO_Init+0x1ec>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a3f      	ldr	r2, [pc, #252]	; (8001e64 <HAL_GPIO_Init+0x2c4>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d00d      	beq.n	8001d88 <HAL_GPIO_Init+0x1e8>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a3e      	ldr	r2, [pc, #248]	; (8001e68 <HAL_GPIO_Init+0x2c8>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d007      	beq.n	8001d84 <HAL_GPIO_Init+0x1e4>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a3d      	ldr	r2, [pc, #244]	; (8001e6c <HAL_GPIO_Init+0x2cc>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d101      	bne.n	8001d80 <HAL_GPIO_Init+0x1e0>
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e006      	b.n	8001d8e <HAL_GPIO_Init+0x1ee>
 8001d80:	2304      	movs	r3, #4
 8001d82:	e004      	b.n	8001d8e <HAL_GPIO_Init+0x1ee>
 8001d84:	2302      	movs	r3, #2
 8001d86:	e002      	b.n	8001d8e <HAL_GPIO_Init+0x1ee>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <HAL_GPIO_Init+0x1ee>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d90:	f002 0203 	and.w	r2, r2, #3
 8001d94:	0092      	lsls	r2, r2, #2
 8001d96:	4093      	lsls	r3, r2
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d9e:	492f      	ldr	r1, [pc, #188]	; (8001e5c <HAL_GPIO_Init+0x2bc>)
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	089b      	lsrs	r3, r3, #2
 8001da4:	3302      	adds	r3, #2
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d006      	beq.n	8001dc6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001db8:	4b2d      	ldr	r3, [pc, #180]	; (8001e70 <HAL_GPIO_Init+0x2d0>)
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	492c      	ldr	r1, [pc, #176]	; (8001e70 <HAL_GPIO_Init+0x2d0>)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	608b      	str	r3, [r1, #8]
 8001dc4:	e006      	b.n	8001dd4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dc6:	4b2a      	ldr	r3, [pc, #168]	; (8001e70 <HAL_GPIO_Init+0x2d0>)
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	4928      	ldr	r1, [pc, #160]	; (8001e70 <HAL_GPIO_Init+0x2d0>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d006      	beq.n	8001dee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001de0:	4b23      	ldr	r3, [pc, #140]	; (8001e70 <HAL_GPIO_Init+0x2d0>)
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	4922      	ldr	r1, [pc, #136]	; (8001e70 <HAL_GPIO_Init+0x2d0>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	60cb      	str	r3, [r1, #12]
 8001dec:	e006      	b.n	8001dfc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dee:	4b20      	ldr	r3, [pc, #128]	; (8001e70 <HAL_GPIO_Init+0x2d0>)
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	491e      	ldr	r1, [pc, #120]	; (8001e70 <HAL_GPIO_Init+0x2d0>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d006      	beq.n	8001e16 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e08:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <HAL_GPIO_Init+0x2d0>)
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	4918      	ldr	r1, [pc, #96]	; (8001e70 <HAL_GPIO_Init+0x2d0>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	604b      	str	r3, [r1, #4]
 8001e14:	e006      	b.n	8001e24 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e16:	4b16      	ldr	r3, [pc, #88]	; (8001e70 <HAL_GPIO_Init+0x2d0>)
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	4914      	ldr	r1, [pc, #80]	; (8001e70 <HAL_GPIO_Init+0x2d0>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d021      	beq.n	8001e74 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e30:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <HAL_GPIO_Init+0x2d0>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	490e      	ldr	r1, [pc, #56]	; (8001e70 <HAL_GPIO_Init+0x2d0>)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	600b      	str	r3, [r1, #0]
 8001e3c:	e021      	b.n	8001e82 <HAL_GPIO_Init+0x2e2>
 8001e3e:	bf00      	nop
 8001e40:	10320000 	.word	0x10320000
 8001e44:	10310000 	.word	0x10310000
 8001e48:	10220000 	.word	0x10220000
 8001e4c:	10210000 	.word	0x10210000
 8001e50:	10120000 	.word	0x10120000
 8001e54:	10110000 	.word	0x10110000
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40010000 	.word	0x40010000
 8001e60:	40010800 	.word	0x40010800
 8001e64:	40010c00 	.word	0x40010c00
 8001e68:	40011000 	.word	0x40011000
 8001e6c:	40011400 	.word	0x40011400
 8001e70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <HAL_GPIO_Init+0x304>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	4909      	ldr	r1, [pc, #36]	; (8001ea4 <HAL_GPIO_Init+0x304>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	3301      	adds	r3, #1
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f47f ae8e 	bne.w	8001bb4 <HAL_GPIO_Init+0x14>
  }
}
 8001e98:	bf00      	nop
 8001e9a:	bf00      	nop
 8001e9c:	372c      	adds	r7, #44	; 0x2c
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr
 8001ea4:	40010400 	.word	0x40010400

08001ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	807b      	strh	r3, [r7, #2]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eb8:	787b      	ldrb	r3, [r7, #1]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ebe:	887a      	ldrh	r2, [r7, #2]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ec4:	e003      	b.n	8001ece <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ec6:	887b      	ldrh	r3, [r7, #2]
 8001ec8:	041a      	lsls	r2, r3, #16
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	611a      	str	r2, [r3, #16]
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e272      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 8087 	beq.w	8002006 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ef8:	4b92      	ldr	r3, [pc, #584]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 030c 	and.w	r3, r3, #12
 8001f00:	2b04      	cmp	r3, #4
 8001f02:	d00c      	beq.n	8001f1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f04:	4b8f      	ldr	r3, [pc, #572]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 030c 	and.w	r3, r3, #12
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d112      	bne.n	8001f36 <HAL_RCC_OscConfig+0x5e>
 8001f10:	4b8c      	ldr	r3, [pc, #560]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f1c:	d10b      	bne.n	8001f36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f1e:	4b89      	ldr	r3, [pc, #548]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d06c      	beq.n	8002004 <HAL_RCC_OscConfig+0x12c>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d168      	bne.n	8002004 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e24c      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f3e:	d106      	bne.n	8001f4e <HAL_RCC_OscConfig+0x76>
 8001f40:	4b80      	ldr	r3, [pc, #512]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a7f      	ldr	r2, [pc, #508]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4a:	6013      	str	r3, [r2, #0]
 8001f4c:	e02e      	b.n	8001fac <HAL_RCC_OscConfig+0xd4>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10c      	bne.n	8001f70 <HAL_RCC_OscConfig+0x98>
 8001f56:	4b7b      	ldr	r3, [pc, #492]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a7a      	ldr	r2, [pc, #488]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	4b78      	ldr	r3, [pc, #480]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a77      	ldr	r2, [pc, #476]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	e01d      	b.n	8001fac <HAL_RCC_OscConfig+0xd4>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f78:	d10c      	bne.n	8001f94 <HAL_RCC_OscConfig+0xbc>
 8001f7a:	4b72      	ldr	r3, [pc, #456]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a71      	ldr	r2, [pc, #452]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	4b6f      	ldr	r3, [pc, #444]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a6e      	ldr	r2, [pc, #440]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	e00b      	b.n	8001fac <HAL_RCC_OscConfig+0xd4>
 8001f94:	4b6b      	ldr	r3, [pc, #428]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a6a      	ldr	r2, [pc, #424]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	4b68      	ldr	r3, [pc, #416]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a67      	ldr	r2, [pc, #412]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001faa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d013      	beq.n	8001fdc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb4:	f7ff fa44 	bl	8001440 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fbc:	f7ff fa40 	bl	8001440 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b64      	cmp	r3, #100	; 0x64
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e200      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fce:	4b5d      	ldr	r3, [pc, #372]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0f0      	beq.n	8001fbc <HAL_RCC_OscConfig+0xe4>
 8001fda:	e014      	b.n	8002006 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7ff fa30 	bl	8001440 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe4:	f7ff fa2c 	bl	8001440 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b64      	cmp	r3, #100	; 0x64
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e1ec      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff6:	4b53      	ldr	r3, [pc, #332]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x10c>
 8002002:	e000      	b.n	8002006 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d063      	beq.n	80020da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002012:	4b4c      	ldr	r3, [pc, #304]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 030c 	and.w	r3, r3, #12
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00b      	beq.n	8002036 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800201e:	4b49      	ldr	r3, [pc, #292]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b08      	cmp	r3, #8
 8002028:	d11c      	bne.n	8002064 <HAL_RCC_OscConfig+0x18c>
 800202a:	4b46      	ldr	r3, [pc, #280]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d116      	bne.n	8002064 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002036:	4b43      	ldr	r3, [pc, #268]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d005      	beq.n	800204e <HAL_RCC_OscConfig+0x176>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d001      	beq.n	800204e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e1c0      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204e:	4b3d      	ldr	r3, [pc, #244]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	4939      	ldr	r1, [pc, #228]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002062:	e03a      	b.n	80020da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d020      	beq.n	80020ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800206c:	4b36      	ldr	r3, [pc, #216]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 800206e:	2201      	movs	r2, #1
 8002070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002072:	f7ff f9e5 	bl	8001440 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800207a:	f7ff f9e1 	bl	8001440 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e1a1      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208c:	4b2d      	ldr	r3, [pc, #180]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0f0      	beq.n	800207a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002098:	4b2a      	ldr	r3, [pc, #168]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4927      	ldr	r1, [pc, #156]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	600b      	str	r3, [r1, #0]
 80020ac:	e015      	b.n	80020da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ae:	4b26      	ldr	r3, [pc, #152]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b4:	f7ff f9c4 	bl	8001440 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020bc:	f7ff f9c0 	bl	8001440 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e180      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ce:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f0      	bne.n	80020bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d03a      	beq.n	800215c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d019      	beq.n	8002122 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ee:	4b17      	ldr	r3, [pc, #92]	; (800214c <HAL_RCC_OscConfig+0x274>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f4:	f7ff f9a4 	bl	8001440 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020fc:	f7ff f9a0 	bl	8001440 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e160      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800210e:	4b0d      	ldr	r3, [pc, #52]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0f0      	beq.n	80020fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800211a:	2001      	movs	r0, #1
 800211c:	f000 fafe 	bl	800271c <RCC_Delay>
 8002120:	e01c      	b.n	800215c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002122:	4b0a      	ldr	r3, [pc, #40]	; (800214c <HAL_RCC_OscConfig+0x274>)
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002128:	f7ff f98a 	bl	8001440 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800212e:	e00f      	b.n	8002150 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002130:	f7ff f986 	bl	8001440 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d908      	bls.n	8002150 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e146      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
 8002142:	bf00      	nop
 8002144:	40021000 	.word	0x40021000
 8002148:	42420000 	.word	0x42420000
 800214c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002150:	4b92      	ldr	r3, [pc, #584]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1e9      	bne.n	8002130 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80a6 	beq.w	80022b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800216a:	2300      	movs	r3, #0
 800216c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800216e:	4b8b      	ldr	r3, [pc, #556]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10d      	bne.n	8002196 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800217a:	4b88      	ldr	r3, [pc, #544]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	4a87      	ldr	r2, [pc, #540]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002184:	61d3      	str	r3, [r2, #28]
 8002186:	4b85      	ldr	r3, [pc, #532]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002192:	2301      	movs	r3, #1
 8002194:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002196:	4b82      	ldr	r3, [pc, #520]	; (80023a0 <HAL_RCC_OscConfig+0x4c8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d118      	bne.n	80021d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021a2:	4b7f      	ldr	r3, [pc, #508]	; (80023a0 <HAL_RCC_OscConfig+0x4c8>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a7e      	ldr	r2, [pc, #504]	; (80023a0 <HAL_RCC_OscConfig+0x4c8>)
 80021a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ae:	f7ff f947 	bl	8001440 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b6:	f7ff f943 	bl	8001440 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b64      	cmp	r3, #100	; 0x64
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e103      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c8:	4b75      	ldr	r3, [pc, #468]	; (80023a0 <HAL_RCC_OscConfig+0x4c8>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d106      	bne.n	80021ea <HAL_RCC_OscConfig+0x312>
 80021dc:	4b6f      	ldr	r3, [pc, #444]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	4a6e      	ldr	r2, [pc, #440]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	6213      	str	r3, [r2, #32]
 80021e8:	e02d      	b.n	8002246 <HAL_RCC_OscConfig+0x36e>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10c      	bne.n	800220c <HAL_RCC_OscConfig+0x334>
 80021f2:	4b6a      	ldr	r3, [pc, #424]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	4a69      	ldr	r2, [pc, #420]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 80021f8:	f023 0301 	bic.w	r3, r3, #1
 80021fc:	6213      	str	r3, [r2, #32]
 80021fe:	4b67      	ldr	r3, [pc, #412]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	4a66      	ldr	r2, [pc, #408]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002204:	f023 0304 	bic.w	r3, r3, #4
 8002208:	6213      	str	r3, [r2, #32]
 800220a:	e01c      	b.n	8002246 <HAL_RCC_OscConfig+0x36e>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	2b05      	cmp	r3, #5
 8002212:	d10c      	bne.n	800222e <HAL_RCC_OscConfig+0x356>
 8002214:	4b61      	ldr	r3, [pc, #388]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	4a60      	ldr	r2, [pc, #384]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 800221a:	f043 0304 	orr.w	r3, r3, #4
 800221e:	6213      	str	r3, [r2, #32]
 8002220:	4b5e      	ldr	r3, [pc, #376]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	4a5d      	ldr	r2, [pc, #372]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	6213      	str	r3, [r2, #32]
 800222c:	e00b      	b.n	8002246 <HAL_RCC_OscConfig+0x36e>
 800222e:	4b5b      	ldr	r3, [pc, #364]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	4a5a      	ldr	r2, [pc, #360]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002234:	f023 0301 	bic.w	r3, r3, #1
 8002238:	6213      	str	r3, [r2, #32]
 800223a:	4b58      	ldr	r3, [pc, #352]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	4a57      	ldr	r2, [pc, #348]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002240:	f023 0304 	bic.w	r3, r3, #4
 8002244:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d015      	beq.n	800227a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224e:	f7ff f8f7 	bl	8001440 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002254:	e00a      	b.n	800226c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002256:	f7ff f8f3 	bl	8001440 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	f241 3288 	movw	r2, #5000	; 0x1388
 8002264:	4293      	cmp	r3, r2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e0b1      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800226c:	4b4b      	ldr	r3, [pc, #300]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0ee      	beq.n	8002256 <HAL_RCC_OscConfig+0x37e>
 8002278:	e014      	b.n	80022a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227a:	f7ff f8e1 	bl	8001440 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002280:	e00a      	b.n	8002298 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002282:	f7ff f8dd 	bl	8001440 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002290:	4293      	cmp	r3, r2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e09b      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002298:	4b40      	ldr	r3, [pc, #256]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1ee      	bne.n	8002282 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022a4:	7dfb      	ldrb	r3, [r7, #23]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d105      	bne.n	80022b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022aa:	4b3c      	ldr	r3, [pc, #240]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	4a3b      	ldr	r2, [pc, #236]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 8087 	beq.w	80023ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022c0:	4b36      	ldr	r3, [pc, #216]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 030c 	and.w	r3, r3, #12
 80022c8:	2b08      	cmp	r3, #8
 80022ca:	d061      	beq.n	8002390 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d146      	bne.n	8002362 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d4:	4b33      	ldr	r3, [pc, #204]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022da:	f7ff f8b1 	bl	8001440 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e2:	f7ff f8ad 	bl	8001440 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e06d      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f4:	4b29      	ldr	r3, [pc, #164]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1f0      	bne.n	80022e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002308:	d108      	bne.n	800231c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800230a:	4b24      	ldr	r3, [pc, #144]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	4921      	ldr	r1, [pc, #132]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002318:	4313      	orrs	r3, r2
 800231a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800231c:	4b1f      	ldr	r3, [pc, #124]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a19      	ldr	r1, [r3, #32]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	430b      	orrs	r3, r1
 800232e:	491b      	ldr	r1, [pc, #108]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002330:	4313      	orrs	r3, r2
 8002332:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002334:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002336:	2201      	movs	r2, #1
 8002338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233a:	f7ff f881 	bl	8001440 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002342:	f7ff f87d 	bl	8001440 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e03d      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0f0      	beq.n	8002342 <HAL_RCC_OscConfig+0x46a>
 8002360:	e035      	b.n	80023ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002368:	f7ff f86a 	bl	8001440 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002370:	f7ff f866 	bl	8001440 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e026      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002382:	4b06      	ldr	r3, [pc, #24]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x498>
 800238e:	e01e      	b.n	80023ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d107      	bne.n	80023a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e019      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
 800239c:	40021000 	.word	0x40021000
 80023a0:	40007000 	.word	0x40007000
 80023a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <HAL_RCC_OscConfig+0x500>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d106      	bne.n	80023ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d001      	beq.n	80023ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40021000 	.word	0x40021000

080023dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0d0      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023f0:	4b6a      	ldr	r3, [pc, #424]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d910      	bls.n	8002420 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fe:	4b67      	ldr	r3, [pc, #412]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 0207 	bic.w	r2, r3, #7
 8002406:	4965      	ldr	r1, [pc, #404]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	4313      	orrs	r3, r2
 800240c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800240e:	4b63      	ldr	r3, [pc, #396]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d001      	beq.n	8002420 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0b8      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d020      	beq.n	800246e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002438:	4b59      	ldr	r3, [pc, #356]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	4a58      	ldr	r2, [pc, #352]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002442:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002450:	4b53      	ldr	r3, [pc, #332]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	4a52      	ldr	r2, [pc, #328]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800245a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800245c:	4b50      	ldr	r3, [pc, #320]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	494d      	ldr	r1, [pc, #308]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	4313      	orrs	r3, r2
 800246c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d040      	beq.n	80024fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d107      	bne.n	8002492 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002482:	4b47      	ldr	r3, [pc, #284]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d115      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e07f      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d107      	bne.n	80024aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800249a:	4b41      	ldr	r3, [pc, #260]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e073      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024aa:	4b3d      	ldr	r3, [pc, #244]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e06b      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ba:	4b39      	ldr	r3, [pc, #228]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f023 0203 	bic.w	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	4936      	ldr	r1, [pc, #216]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024cc:	f7fe ffb8 	bl	8001440 <HAL_GetTick>
 80024d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d2:	e00a      	b.n	80024ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d4:	f7fe ffb4 	bl	8001440 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e053      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ea:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 020c 	and.w	r2, r3, #12
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d1eb      	bne.n	80024d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024fc:	4b27      	ldr	r3, [pc, #156]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d210      	bcs.n	800252c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250a:	4b24      	ldr	r3, [pc, #144]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 0207 	bic.w	r2, r3, #7
 8002512:	4922      	ldr	r1, [pc, #136]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	4313      	orrs	r3, r2
 8002518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800251a:	4b20      	ldr	r3, [pc, #128]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d001      	beq.n	800252c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e032      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d008      	beq.n	800254a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002538:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	4916      	ldr	r1, [pc, #88]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	4313      	orrs	r3, r2
 8002548:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d009      	beq.n	800256a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002556:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	490e      	ldr	r1, [pc, #56]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002566:	4313      	orrs	r3, r2
 8002568:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800256a:	f000 f821 	bl	80025b0 <HAL_RCC_GetSysClockFreq>
 800256e:	4602      	mov	r2, r0
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	490a      	ldr	r1, [pc, #40]	; (80025a4 <HAL_RCC_ClockConfig+0x1c8>)
 800257c:	5ccb      	ldrb	r3, [r1, r3]
 800257e:	fa22 f303 	lsr.w	r3, r2, r3
 8002582:	4a09      	ldr	r2, [pc, #36]	; (80025a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <HAL_RCC_ClockConfig+0x1d0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7fe fb74 	bl	8000c78 <HAL_InitTick>

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40022000 	.word	0x40022000
 80025a0:	40021000 	.word	0x40021000
 80025a4:	08004944 	.word	0x08004944
 80025a8:	20000004 	.word	0x20000004
 80025ac:	20000008 	.word	0x20000008

080025b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b087      	sub	sp, #28
 80025b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	2300      	movs	r3, #0
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	2300      	movs	r3, #0
 80025c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025ca:	4b1e      	ldr	r3, [pc, #120]	; (8002644 <HAL_RCC_GetSysClockFreq+0x94>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f003 030c 	and.w	r3, r3, #12
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d002      	beq.n	80025e0 <HAL_RCC_GetSysClockFreq+0x30>
 80025da:	2b08      	cmp	r3, #8
 80025dc:	d003      	beq.n	80025e6 <HAL_RCC_GetSysClockFreq+0x36>
 80025de:	e027      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025e0:	4b19      	ldr	r3, [pc, #100]	; (8002648 <HAL_RCC_GetSysClockFreq+0x98>)
 80025e2:	613b      	str	r3, [r7, #16]
      break;
 80025e4:	e027      	b.n	8002636 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	0c9b      	lsrs	r3, r3, #18
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	4a17      	ldr	r2, [pc, #92]	; (800264c <HAL_RCC_GetSysClockFreq+0x9c>)
 80025f0:	5cd3      	ldrb	r3, [r2, r3]
 80025f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d010      	beq.n	8002620 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025fe:	4b11      	ldr	r3, [pc, #68]	; (8002644 <HAL_RCC_GetSysClockFreq+0x94>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	0c5b      	lsrs	r3, r3, #17
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	4a11      	ldr	r2, [pc, #68]	; (8002650 <HAL_RCC_GetSysClockFreq+0xa0>)
 800260a:	5cd3      	ldrb	r3, [r2, r3]
 800260c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a0d      	ldr	r2, [pc, #52]	; (8002648 <HAL_RCC_GetSysClockFreq+0x98>)
 8002612:	fb03 f202 	mul.w	r2, r3, r2
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	fbb2 f3f3 	udiv	r3, r2, r3
 800261c:	617b      	str	r3, [r7, #20]
 800261e:	e004      	b.n	800262a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a0c      	ldr	r2, [pc, #48]	; (8002654 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002624:	fb02 f303 	mul.w	r3, r2, r3
 8002628:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	613b      	str	r3, [r7, #16]
      break;
 800262e:	e002      	b.n	8002636 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002630:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_RCC_GetSysClockFreq+0x98>)
 8002632:	613b      	str	r3, [r7, #16]
      break;
 8002634:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002636:	693b      	ldr	r3, [r7, #16]
}
 8002638:	4618      	mov	r0, r3
 800263a:	371c      	adds	r7, #28
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40021000 	.word	0x40021000
 8002648:	007a1200 	.word	0x007a1200
 800264c:	0800495c 	.word	0x0800495c
 8002650:	0800496c 	.word	0x0800496c
 8002654:	003d0900 	.word	0x003d0900

08002658 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800265c:	4b02      	ldr	r3, [pc, #8]	; (8002668 <HAL_RCC_GetHCLKFreq+0x10>)
 800265e:	681b      	ldr	r3, [r3, #0]
}
 8002660:	4618      	mov	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr
 8002668:	20000004 	.word	0x20000004

0800266c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002670:	f7ff fff2 	bl	8002658 <HAL_RCC_GetHCLKFreq>
 8002674:	4602      	mov	r2, r0
 8002676:	4b05      	ldr	r3, [pc, #20]	; (800268c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	0a1b      	lsrs	r3, r3, #8
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	4903      	ldr	r1, [pc, #12]	; (8002690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002682:	5ccb      	ldrb	r3, [r1, r3]
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002688:	4618      	mov	r0, r3
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40021000 	.word	0x40021000
 8002690:	08004954 	.word	0x08004954

08002694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002698:	f7ff ffde 	bl	8002658 <HAL_RCC_GetHCLKFreq>
 800269c:	4602      	mov	r2, r0
 800269e:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	0adb      	lsrs	r3, r3, #11
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	4903      	ldr	r1, [pc, #12]	; (80026b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026aa:	5ccb      	ldrb	r3, [r1, r3]
 80026ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40021000 	.word	0x40021000
 80026b8:	08004954 	.word	0x08004954

080026bc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	220f      	movs	r2, #15
 80026ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80026cc:	4b11      	ldr	r3, [pc, #68]	; (8002714 <HAL_RCC_GetClockConfig+0x58>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 0203 	and.w	r2, r3, #3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80026d8:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <HAL_RCC_GetClockConfig+0x58>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80026e4:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <HAL_RCC_GetClockConfig+0x58>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80026f0:	4b08      	ldr	r3, [pc, #32]	; (8002714 <HAL_RCC_GetClockConfig+0x58>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	08db      	lsrs	r3, r3, #3
 80026f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80026fe:	4b06      	ldr	r3, [pc, #24]	; (8002718 <HAL_RCC_GetClockConfig+0x5c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0207 	and.w	r2, r3, #7
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr
 8002714:	40021000 	.word	0x40021000
 8002718:	40022000 	.word	0x40022000

0800271c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002724:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <RCC_Delay+0x34>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a0a      	ldr	r2, [pc, #40]	; (8002754 <RCC_Delay+0x38>)
 800272a:	fba2 2303 	umull	r2, r3, r2, r3
 800272e:	0a5b      	lsrs	r3, r3, #9
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	fb02 f303 	mul.w	r3, r2, r3
 8002736:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002738:	bf00      	nop
  }
  while (Delay --);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	1e5a      	subs	r2, r3, #1
 800273e:	60fa      	str	r2, [r7, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1f9      	bne.n	8002738 <RCC_Delay+0x1c>
}
 8002744:	bf00      	nop
 8002746:	bf00      	nop
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr
 8002750:	20000004 	.word	0x20000004
 8002754:	10624dd3 	.word	0x10624dd3

08002758 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e076      	b.n	8002858 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	2b00      	cmp	r3, #0
 8002770:	d108      	bne.n	8002784 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800277a:	d009      	beq.n	8002790 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	61da      	str	r2, [r3, #28]
 8002782:	e005      	b.n	8002790 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d106      	bne.n	80027b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7fe f932 	bl	8000a14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2202      	movs	r2, #2
 80027b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80027d8:	431a      	orrs	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002814:	ea42 0103 	orr.w	r1, r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	0c1a      	lsrs	r2, r3, #16
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f002 0204 	and.w	r2, r2, #4
 8002836:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	69da      	ldr	r2, [r3, #28]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002846:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e041      	b.n	80028f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d106      	bne.n	800288c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f839 	bl	80028fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3304      	adds	r3, #4
 800289c:	4619      	mov	r1, r3
 800289e:	4610      	mov	r0, r2
 80028a0:	f000 f9b4 	bl	8002c0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr

08002910 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b01      	cmp	r3, #1
 8002922:	d001      	beq.n	8002928 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e03a      	b.n	800299e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a18      	ldr	r2, [pc, #96]	; (80029a8 <HAL_TIM_Base_Start_IT+0x98>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d00e      	beq.n	8002968 <HAL_TIM_Base_Start_IT+0x58>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002952:	d009      	beq.n	8002968 <HAL_TIM_Base_Start_IT+0x58>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a14      	ldr	r2, [pc, #80]	; (80029ac <HAL_TIM_Base_Start_IT+0x9c>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d004      	beq.n	8002968 <HAL_TIM_Base_Start_IT+0x58>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a13      	ldr	r2, [pc, #76]	; (80029b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d111      	bne.n	800298c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2b06      	cmp	r3, #6
 8002978:	d010      	beq.n	800299c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f042 0201 	orr.w	r2, r2, #1
 8002988:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800298a:	e007      	b.n	800299c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0201 	orr.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr
 80029a8:	40012c00 	.word	0x40012c00
 80029ac:	40000400 	.word	0x40000400
 80029b0:	40000800 	.word	0x40000800

080029b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d122      	bne.n	8002a10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d11b      	bne.n	8002a10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f06f 0202 	mvn.w	r2, #2
 80029e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f8ed 	bl	8002bd6 <HAL_TIM_IC_CaptureCallback>
 80029fc:	e005      	b.n	8002a0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f8e0 	bl	8002bc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f8ef 	bl	8002be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d122      	bne.n	8002a64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d11b      	bne.n	8002a64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f06f 0204 	mvn.w	r2, #4
 8002a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2202      	movs	r2, #2
 8002a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f8c3 	bl	8002bd6 <HAL_TIM_IC_CaptureCallback>
 8002a50:	e005      	b.n	8002a5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f8b6 	bl	8002bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f8c5 	bl	8002be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d122      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d11b      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f06f 0208 	mvn.w	r2, #8
 8002a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2204      	movs	r2, #4
 8002a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f899 	bl	8002bd6 <HAL_TIM_IC_CaptureCallback>
 8002aa4:	e005      	b.n	8002ab2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f88c 	bl	8002bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 f89b 	bl	8002be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f003 0310 	and.w	r3, r3, #16
 8002ac2:	2b10      	cmp	r3, #16
 8002ac4:	d122      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b10      	cmp	r3, #16
 8002ad2:	d11b      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0210 	mvn.w	r2, #16
 8002adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2208      	movs	r2, #8
 8002ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f86f 	bl	8002bd6 <HAL_TIM_IC_CaptureCallback>
 8002af8:	e005      	b.n	8002b06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f862 	bl	8002bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f871 	bl	8002be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d10e      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d107      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f06f 0201 	mvn.w	r2, #1
 8002b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7fd ff24 	bl	8000980 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b42:	2b80      	cmp	r3, #128	; 0x80
 8002b44:	d10e      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b50:	2b80      	cmp	r3, #128	; 0x80
 8002b52:	d107      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f8bf 	bl	8002ce2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6e:	2b40      	cmp	r3, #64	; 0x40
 8002b70:	d10e      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7c:	2b40      	cmp	r3, #64	; 0x40
 8002b7e:	d107      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f835 	bl	8002bfa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f003 0320 	and.w	r3, r3, #32
 8002b9a:	2b20      	cmp	r3, #32
 8002b9c:	d10e      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f003 0320 	and.w	r3, r3, #32
 8002ba8:	2b20      	cmp	r3, #32
 8002baa:	d107      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f06f 0220 	mvn.w	r2, #32
 8002bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f88a 	bl	8002cd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bbc:	bf00      	nop
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr

08002bd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr

08002be8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr

08002bfa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr

08002c0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a29      	ldr	r2, [pc, #164]	; (8002cc4 <TIM_Base_SetConfig+0xb8>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d00b      	beq.n	8002c3c <TIM_Base_SetConfig+0x30>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c2a:	d007      	beq.n	8002c3c <TIM_Base_SetConfig+0x30>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a26      	ldr	r2, [pc, #152]	; (8002cc8 <TIM_Base_SetConfig+0xbc>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d003      	beq.n	8002c3c <TIM_Base_SetConfig+0x30>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a25      	ldr	r2, [pc, #148]	; (8002ccc <TIM_Base_SetConfig+0xc0>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d108      	bne.n	8002c4e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a1c      	ldr	r2, [pc, #112]	; (8002cc4 <TIM_Base_SetConfig+0xb8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d00b      	beq.n	8002c6e <TIM_Base_SetConfig+0x62>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c5c:	d007      	beq.n	8002c6e <TIM_Base_SetConfig+0x62>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a19      	ldr	r2, [pc, #100]	; (8002cc8 <TIM_Base_SetConfig+0xbc>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d003      	beq.n	8002c6e <TIM_Base_SetConfig+0x62>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a18      	ldr	r2, [pc, #96]	; (8002ccc <TIM_Base_SetConfig+0xc0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d108      	bne.n	8002c80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a07      	ldr	r2, [pc, #28]	; (8002cc4 <TIM_Base_SetConfig+0xb8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d103      	bne.n	8002cb4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	615a      	str	r2, [r3, #20]
}
 8002cba:	bf00      	nop
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr
 8002cc4:	40012c00 	.word	0x40012c00
 8002cc8:	40000400 	.word	0x40000400
 8002ccc:	40000800 	.word	0x40000800

08002cd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr

08002ce2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e042      	b.n	8002d8c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d106      	bne.n	8002d20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7fd ff00 	bl	8000b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2224      	movs	r2, #36	; 0x24
 8002d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68da      	ldr	r2, [r3, #12]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 ff89 	bl	8003c50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695a      	ldr	r2, [r3, #20]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08a      	sub	sp, #40	; 0x28
 8002d98:	af02      	add	r7, sp, #8
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	4613      	mov	r3, r2
 8002da2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b20      	cmp	r3, #32
 8002db2:	d16d      	bne.n	8002e90 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <HAL_UART_Transmit+0x2c>
 8002dba:	88fb      	ldrh	r3, [r7, #6]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e066      	b.n	8002e92 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2221      	movs	r2, #33	; 0x21
 8002dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dd2:	f7fe fb35 	bl	8001440 <HAL_GetTick>
 8002dd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	88fa      	ldrh	r2, [r7, #6]
 8002ddc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	88fa      	ldrh	r2, [r7, #6]
 8002de2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dec:	d108      	bne.n	8002e00 <HAL_UART_Transmit+0x6c>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d104      	bne.n	8002e00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	61bb      	str	r3, [r7, #24]
 8002dfe:	e003      	b.n	8002e08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e08:	e02a      	b.n	8002e60 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2200      	movs	r2, #0
 8002e12:	2180      	movs	r1, #128	; 0x80
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 fc51 	bl	80036bc <UART_WaitOnFlagUntilTimeout>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e036      	b.n	8002e92 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10b      	bne.n	8002e42 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	3302      	adds	r3, #2
 8002e3e:	61bb      	str	r3, [r7, #24]
 8002e40:	e007      	b.n	8002e52 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	781a      	ldrb	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1cf      	bne.n	8002e0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2200      	movs	r2, #0
 8002e72:	2140      	movs	r1, #64	; 0x40
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 fc21 	bl	80036bc <UART_WaitOnFlagUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e006      	b.n	8002e92 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	e000      	b.n	8002e92 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002e90:	2302      	movs	r3, #2
  }
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3720      	adds	r7, #32
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b08c      	sub	sp, #48	; 0x30
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	60f8      	str	r0, [r7, #12]
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b20      	cmp	r3, #32
 8002eb2:	d14a      	bne.n	8002f4a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8002eba:	88fb      	ldrh	r3, [r7, #6]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e043      	b.n	8002f4c <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002ed0:	88fb      	ldrh	r3, [r7, #6]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	68b9      	ldr	r1, [r7, #8]
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 fc5e 	bl	8003798 <UART_Start_Receive_DMA>
 8002edc:	4603      	mov	r3, r0
 8002ede:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002ee2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d12c      	bne.n	8002f44 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d125      	bne.n	8002f3e <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	613b      	str	r3, [r7, #16]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	330c      	adds	r3, #12
 8002f0e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	e853 3f00 	ldrex	r3, [r3]
 8002f16:	617b      	str	r3, [r7, #20]
   return(result);
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f043 0310 	orr.w	r3, r3, #16
 8002f1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	330c      	adds	r3, #12
 8002f26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f28:	627a      	str	r2, [r7, #36]	; 0x24
 8002f2a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f2c:	6a39      	ldr	r1, [r7, #32]
 8002f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f30:	e841 2300 	strex	r3, r2, [r1]
 8002f34:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1e5      	bne.n	8002f08 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8002f3c:	e002      	b.n	8002f44 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8002f44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f48:	e000      	b.n	8002f4c <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8002f4a:	2302      	movs	r3, #2
  }
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3730      	adds	r7, #48	; 0x30
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b0ba      	sub	sp, #232	; 0xe8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002f92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10f      	bne.n	8002fba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f9e:	f003 0320 	and.w	r3, r3, #32
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d009      	beq.n	8002fba <HAL_UART_IRQHandler+0x66>
 8002fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002faa:	f003 0320 	and.w	r3, r3, #32
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 fd8e 	bl	8003ad4 <UART_Receive_IT>
      return;
 8002fb8:	e25b      	b.n	8003472 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002fba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 80de 	beq.w	8003180 <HAL_UART_IRQHandler+0x22c>
 8002fc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d106      	bne.n	8002fde <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fd4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 80d1 	beq.w	8003180 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00b      	beq.n	8003002 <HAL_UART_IRQHandler+0xae>
 8002fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d005      	beq.n	8003002 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffa:	f043 0201 	orr.w	r2, r3, #1
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00b      	beq.n	8003026 <HAL_UART_IRQHandler+0xd2>
 800300e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d005      	beq.n	8003026 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	f043 0202 	orr.w	r2, r3, #2
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00b      	beq.n	800304a <HAL_UART_IRQHandler+0xf6>
 8003032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d005      	beq.n	800304a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003042:	f043 0204 	orr.w	r2, r3, #4
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800304a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b00      	cmp	r3, #0
 8003054:	d011      	beq.n	800307a <HAL_UART_IRQHandler+0x126>
 8003056:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800305a:	f003 0320 	and.w	r3, r3, #32
 800305e:	2b00      	cmp	r3, #0
 8003060:	d105      	bne.n	800306e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003062:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d005      	beq.n	800307a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003072:	f043 0208 	orr.w	r2, r3, #8
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 81f2 	beq.w	8003468 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003088:	f003 0320 	and.w	r3, r3, #32
 800308c:	2b00      	cmp	r3, #0
 800308e:	d008      	beq.n	80030a2 <HAL_UART_IRQHandler+0x14e>
 8003090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003094:	f003 0320 	and.w	r3, r3, #32
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 fd19 	bl	8003ad4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	bf14      	ite	ne
 80030b0:	2301      	movne	r3, #1
 80030b2:	2300      	moveq	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d103      	bne.n	80030ce <HAL_UART_IRQHandler+0x17a>
 80030c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d04f      	beq.n	800316e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 fc23 	bl	800391a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d041      	beq.n	8003166 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3314      	adds	r3, #20
 80030e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030f0:	e853 3f00 	ldrex	r3, [r3]
 80030f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80030f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003100:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	3314      	adds	r3, #20
 800310a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800310e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003112:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003116:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800311a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800311e:	e841 2300 	strex	r3, r2, [r1]
 8003122:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003126:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1d9      	bne.n	80030e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003132:	2b00      	cmp	r3, #0
 8003134:	d013      	beq.n	800315e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313a:	4a7e      	ldr	r2, [pc, #504]	; (8003334 <HAL_UART_IRQHandler+0x3e0>)
 800313c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003142:	4618      	mov	r0, r3
 8003144:	f7fe fb80 	bl	8001848 <HAL_DMA_Abort_IT>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d016      	beq.n	800317c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003158:	4610      	mov	r0, r2
 800315a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800315c:	e00e      	b.n	800317c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f9a5 	bl	80034ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003164:	e00a      	b.n	800317c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f9a1 	bl	80034ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800316c:	e006      	b.n	800317c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f99d 	bl	80034ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800317a:	e175      	b.n	8003468 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800317c:	bf00      	nop
    return;
 800317e:	e173      	b.n	8003468 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003184:	2b01      	cmp	r3, #1
 8003186:	f040 814f 	bne.w	8003428 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800318a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800318e:	f003 0310 	and.w	r3, r3, #16
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 8148 	beq.w	8003428 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800319c:	f003 0310 	and.w	r3, r3, #16
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 8141 	beq.w	8003428 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031a6:	2300      	movs	r3, #0
 80031a8:	60bb      	str	r3, [r7, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	60bb      	str	r3, [r7, #8]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	60bb      	str	r3, [r7, #8]
 80031ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 80b6 	beq.w	8003338 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 8145 	beq.w	800346c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031ea:	429a      	cmp	r2, r3
 80031ec:	f080 813e 	bcs.w	800346c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	2b20      	cmp	r3, #32
 8003200:	f000 8088 	beq.w	8003314 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	330c      	adds	r3, #12
 800320a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003212:	e853 3f00 	ldrex	r3, [r3]
 8003216:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800321a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800321e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003222:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	330c      	adds	r3, #12
 800322c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003230:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003234:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003238:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800323c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003240:	e841 2300 	strex	r3, r2, [r1]
 8003244:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003248:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1d9      	bne.n	8003204 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3314      	adds	r3, #20
 8003256:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003258:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800325a:	e853 3f00 	ldrex	r3, [r3]
 800325e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003260:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003262:	f023 0301 	bic.w	r3, r3, #1
 8003266:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	3314      	adds	r3, #20
 8003270:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003274:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003278:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800327c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003280:	e841 2300 	strex	r3, r2, [r1]
 8003284:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003286:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1e1      	bne.n	8003250 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3314      	adds	r3, #20
 8003292:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003294:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003296:	e853 3f00 	ldrex	r3, [r3]
 800329a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800329c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800329e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	3314      	adds	r3, #20
 80032ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032b0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032b8:	e841 2300 	strex	r3, r2, [r1]
 80032bc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1e3      	bne.n	800328c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2220      	movs	r2, #32
 80032c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	330c      	adds	r3, #12
 80032d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032dc:	e853 3f00 	ldrex	r3, [r3]
 80032e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80032e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032e4:	f023 0310 	bic.w	r3, r3, #16
 80032e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	330c      	adds	r3, #12
 80032f2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80032f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80032f8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80032fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032fe:	e841 2300 	strex	r3, r2, [r1]
 8003302:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1e3      	bne.n	80032d2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330e:	4618      	mov	r0, r3
 8003310:	f7fe fa5e 	bl	80017d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003322:	b29b      	uxth	r3, r3
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	b29b      	uxth	r3, r3
 8003328:	4619      	mov	r1, r3
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7fd fa4a 	bl	80007c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003330:	e09c      	b.n	800346c <HAL_UART_IRQHandler+0x518>
 8003332:	bf00      	nop
 8003334:	080039df 	.word	0x080039df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003340:	b29b      	uxth	r3, r3
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800334c:	b29b      	uxth	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 808e 	beq.w	8003470 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003354:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 8089 	beq.w	8003470 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	330c      	adds	r3, #12
 8003364:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003368:	e853 3f00 	ldrex	r3, [r3]
 800336c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800336e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003370:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003374:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	330c      	adds	r3, #12
 800337e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003382:	647a      	str	r2, [r7, #68]	; 0x44
 8003384:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003386:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003388:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800338a:	e841 2300 	strex	r3, r2, [r1]
 800338e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1e3      	bne.n	800335e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	3314      	adds	r3, #20
 800339c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	e853 3f00 	ldrex	r3, [r3]
 80033a4:	623b      	str	r3, [r7, #32]
   return(result);
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	f023 0301 	bic.w	r3, r3, #1
 80033ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	3314      	adds	r3, #20
 80033b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033ba:	633a      	str	r2, [r7, #48]	; 0x30
 80033bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033c2:	e841 2300 	strex	r3, r2, [r1]
 80033c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1e3      	bne.n	8003396 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2220      	movs	r2, #32
 80033d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	330c      	adds	r3, #12
 80033e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	e853 3f00 	ldrex	r3, [r3]
 80033ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f023 0310 	bic.w	r3, r3, #16
 80033f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	330c      	adds	r3, #12
 80033fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003400:	61fa      	str	r2, [r7, #28]
 8003402:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003404:	69b9      	ldr	r1, [r7, #24]
 8003406:	69fa      	ldr	r2, [r7, #28]
 8003408:	e841 2300 	strex	r3, r2, [r1]
 800340c:	617b      	str	r3, [r7, #20]
   return(result);
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1e3      	bne.n	80033dc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2202      	movs	r2, #2
 8003418:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800341a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800341e:	4619      	mov	r1, r3
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7fd f9cf 	bl	80007c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003426:	e023      	b.n	8003470 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800342c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003430:	2b00      	cmp	r3, #0
 8003432:	d009      	beq.n	8003448 <HAL_UART_IRQHandler+0x4f4>
 8003434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 fae0 	bl	8003a06 <UART_Transmit_IT>
    return;
 8003446:	e014      	b.n	8003472 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800344c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00e      	beq.n	8003472 <HAL_UART_IRQHandler+0x51e>
 8003454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345c:	2b00      	cmp	r3, #0
 800345e:	d008      	beq.n	8003472 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 fb1f 	bl	8003aa4 <UART_EndTransmit_IT>
    return;
 8003466:	e004      	b.n	8003472 <HAL_UART_IRQHandler+0x51e>
    return;
 8003468:	bf00      	nop
 800346a:	e002      	b.n	8003472 <HAL_UART_IRQHandler+0x51e>
      return;
 800346c:	bf00      	nop
 800346e:	e000      	b.n	8003472 <HAL_UART_IRQHandler+0x51e>
      return;
 8003470:	bf00      	nop
  }
}
 8003472:	37e8      	adds	r7, #232	; 0xe8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	bc80      	pop	{r7}
 8003488:	4770      	bx	lr

0800348a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr

0800349c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr

080034ae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b083      	sub	sp, #12
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr

080034c0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b09c      	sub	sp, #112	; 0x70
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0320 	and.w	r3, r3, #32
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d172      	bne.n	80035c2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80034dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034de:	2200      	movs	r2, #0
 80034e0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	330c      	adds	r3, #12
 80034e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ec:	e853 3f00 	ldrex	r3, [r3]
 80034f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80034f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80034fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	330c      	adds	r3, #12
 8003500:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003502:	65ba      	str	r2, [r7, #88]	; 0x58
 8003504:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003506:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003508:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800350a:	e841 2300 	strex	r3, r2, [r1]
 800350e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1e5      	bne.n	80034e2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	3314      	adds	r3, #20
 800351c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003520:	e853 3f00 	ldrex	r3, [r3]
 8003524:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003528:	f023 0301 	bic.w	r3, r3, #1
 800352c:	667b      	str	r3, [r7, #100]	; 0x64
 800352e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	3314      	adds	r3, #20
 8003534:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003536:	647a      	str	r2, [r7, #68]	; 0x44
 8003538:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800353c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800353e:	e841 2300 	strex	r3, r2, [r1]
 8003542:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1e5      	bne.n	8003516 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800354a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	3314      	adds	r3, #20
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	e853 3f00 	ldrex	r3, [r3]
 8003558:	623b      	str	r3, [r7, #32]
   return(result);
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003560:	663b      	str	r3, [r7, #96]	; 0x60
 8003562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	3314      	adds	r3, #20
 8003568:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800356a:	633a      	str	r2, [r7, #48]	; 0x30
 800356c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003572:	e841 2300 	strex	r3, r2, [r1]
 8003576:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1e5      	bne.n	800354a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800357e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003580:	2220      	movs	r2, #32
 8003582:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	2b01      	cmp	r3, #1
 800358c:	d119      	bne.n	80035c2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800358e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	330c      	adds	r3, #12
 8003594:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	e853 3f00 	ldrex	r3, [r3]
 800359c:	60fb      	str	r3, [r7, #12]
   return(result);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f023 0310 	bic.w	r3, r3, #16
 80035a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	330c      	adds	r3, #12
 80035ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80035ae:	61fa      	str	r2, [r7, #28]
 80035b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b2:	69b9      	ldr	r1, [r7, #24]
 80035b4:	69fa      	ldr	r2, [r7, #28]
 80035b6:	e841 2300 	strex	r3, r2, [r1]
 80035ba:	617b      	str	r3, [r7, #20]
   return(result);
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1e5      	bne.n	800358e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035c4:	2200      	movs	r2, #0
 80035c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d106      	bne.n	80035de <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80035d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035d4:	4619      	mov	r1, r3
 80035d6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80035d8:	f7fd f8f4 	bl	80007c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80035dc:	e002      	b.n	80035e4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80035de:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80035e0:	f7ff ff53 	bl	800348a <HAL_UART_RxCpltCallback>
}
 80035e4:	bf00      	nop
 80035e6:	3770      	adds	r7, #112	; 0x70
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2201      	movs	r2, #1
 80035fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003604:	2b01      	cmp	r3, #1
 8003606:	d108      	bne.n	800361a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800360c:	085b      	lsrs	r3, r3, #1
 800360e:	b29b      	uxth	r3, r3
 8003610:	4619      	mov	r1, r3
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f7fd f8d6 	bl	80007c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003618:	e002      	b.n	8003620 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f7ff ff3e 	bl	800349c <HAL_UART_RxHalfCpltCallback>
}
 8003620:	bf00      	nop
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003630:	2300      	movs	r3, #0
 8003632:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003644:	2b00      	cmp	r3, #0
 8003646:	bf14      	ite	ne
 8003648:	2301      	movne	r3, #1
 800364a:	2300      	moveq	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b21      	cmp	r3, #33	; 0x21
 800365a:	d108      	bne.n	800366e <UART_DMAError+0x46>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d005      	beq.n	800366e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2200      	movs	r2, #0
 8003666:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003668:	68b8      	ldr	r0, [r7, #8]
 800366a:	f000 f92f 	bl	80038cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003678:	2b00      	cmp	r3, #0
 800367a:	bf14      	ite	ne
 800367c:	2301      	movne	r3, #1
 800367e:	2300      	moveq	r3, #0
 8003680:	b2db      	uxtb	r3, r3
 8003682:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b22      	cmp	r3, #34	; 0x22
 800368e:	d108      	bne.n	80036a2 <UART_DMAError+0x7a>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d005      	beq.n	80036a2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	2200      	movs	r2, #0
 800369a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800369c:	68b8      	ldr	r0, [r7, #8]
 800369e:	f000 f93c 	bl	800391a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	f043 0210 	orr.w	r2, r3, #16
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036ae:	68b8      	ldr	r0, [r7, #8]
 80036b0:	f7ff fefd 	bl	80034ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036b4:	bf00      	nop
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b090      	sub	sp, #64	; 0x40
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	603b      	str	r3, [r7, #0]
 80036c8:	4613      	mov	r3, r2
 80036ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036cc:	e050      	b.n	8003770 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036d4:	d04c      	beq.n	8003770 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d007      	beq.n	80036ec <UART_WaitOnFlagUntilTimeout+0x30>
 80036dc:	f7fd feb0 	bl	8001440 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d241      	bcs.n	8003770 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	330c      	adds	r3, #12
 80036f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f6:	e853 3f00 	ldrex	r3, [r3]
 80036fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003702:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	330c      	adds	r3, #12
 800370a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800370c:	637a      	str	r2, [r7, #52]	; 0x34
 800370e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003710:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003712:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003714:	e841 2300 	strex	r3, r2, [r1]
 8003718:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800371a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1e5      	bne.n	80036ec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	3314      	adds	r3, #20
 8003726:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	e853 3f00 	ldrex	r3, [r3]
 800372e:	613b      	str	r3, [r7, #16]
   return(result);
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f023 0301 	bic.w	r3, r3, #1
 8003736:	63bb      	str	r3, [r7, #56]	; 0x38
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	3314      	adds	r3, #20
 800373e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003740:	623a      	str	r2, [r7, #32]
 8003742:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003744:	69f9      	ldr	r1, [r7, #28]
 8003746:	6a3a      	ldr	r2, [r7, #32]
 8003748:	e841 2300 	strex	r3, r2, [r1]
 800374c:	61bb      	str	r3, [r7, #24]
   return(result);
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1e5      	bne.n	8003720 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2220      	movs	r2, #32
 8003758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2220      	movs	r2, #32
 8003760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e00f      	b.n	8003790 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	4013      	ands	r3, r2
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	429a      	cmp	r2, r3
 800377e:	bf0c      	ite	eq
 8003780:	2301      	moveq	r3, #1
 8003782:	2300      	movne	r3, #0
 8003784:	b2db      	uxtb	r3, r3
 8003786:	461a      	mov	r2, r3
 8003788:	79fb      	ldrb	r3, [r7, #7]
 800378a:	429a      	cmp	r2, r3
 800378c:	d09f      	beq.n	80036ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3740      	adds	r7, #64	; 0x40
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b098      	sub	sp, #96	; 0x60
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	4613      	mov	r3, r2
 80037a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	88fa      	ldrh	r2, [r7, #6]
 80037b0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2222      	movs	r2, #34	; 0x22
 80037bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c4:	4a3e      	ldr	r2, [pc, #248]	; (80038c0 <UART_Start_Receive_DMA+0x128>)
 80037c6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037cc:	4a3d      	ldr	r2, [pc, #244]	; (80038c4 <UART_Start_Receive_DMA+0x12c>)
 80037ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d4:	4a3c      	ldr	r2, [pc, #240]	; (80038c8 <UART_Start_Receive_DMA+0x130>)
 80037d6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037dc:	2200      	movs	r2, #0
 80037de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80037e0:	f107 0308 	add.w	r3, r7, #8
 80037e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	3304      	adds	r3, #4
 80037f0:	4619      	mov	r1, r3
 80037f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	88fb      	ldrh	r3, [r7, #6]
 80037f8:	f7fd ff8a 	bl	8001710 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80037fc:	2300      	movs	r3, #0
 80037fe:	613b      	str	r3, [r7, #16]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	613b      	str	r3, [r7, #16]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	613b      	str	r3, [r7, #16]
 8003810:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d019      	beq.n	800384e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	330c      	adds	r3, #12
 8003820:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003824:	e853 3f00 	ldrex	r3, [r3]
 8003828:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800382a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800382c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003830:	65bb      	str	r3, [r7, #88]	; 0x58
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	330c      	adds	r3, #12
 8003838:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800383a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800383c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003840:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003842:	e841 2300 	strex	r3, r2, [r1]
 8003846:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1e5      	bne.n	800381a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3314      	adds	r3, #20
 8003854:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003858:	e853 3f00 	ldrex	r3, [r3]
 800385c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800385e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003860:	f043 0301 	orr.w	r3, r3, #1
 8003864:	657b      	str	r3, [r7, #84]	; 0x54
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	3314      	adds	r3, #20
 800386c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800386e:	63ba      	str	r2, [r7, #56]	; 0x38
 8003870:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003872:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003874:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003876:	e841 2300 	strex	r3, r2, [r1]
 800387a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800387c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1e5      	bne.n	800384e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	3314      	adds	r3, #20
 8003888:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	e853 3f00 	ldrex	r3, [r3]
 8003890:	617b      	str	r3, [r7, #20]
   return(result);
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003898:	653b      	str	r3, [r7, #80]	; 0x50
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	3314      	adds	r3, #20
 80038a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80038a2:	627a      	str	r2, [r7, #36]	; 0x24
 80038a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a6:	6a39      	ldr	r1, [r7, #32]
 80038a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038aa:	e841 2300 	strex	r3, r2, [r1]
 80038ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1e5      	bne.n	8003882 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3760      	adds	r7, #96	; 0x60
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	080034c1 	.word	0x080034c1
 80038c4:	080035ed 	.word	0x080035ed
 80038c8:	08003629 	.word	0x08003629

080038cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b089      	sub	sp, #36	; 0x24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	330c      	adds	r3, #12
 80038da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	e853 3f00 	ldrex	r3, [r3]
 80038e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80038ea:	61fb      	str	r3, [r7, #28]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	330c      	adds	r3, #12
 80038f2:	69fa      	ldr	r2, [r7, #28]
 80038f4:	61ba      	str	r2, [r7, #24]
 80038f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f8:	6979      	ldr	r1, [r7, #20]
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	e841 2300 	strex	r3, r2, [r1]
 8003900:	613b      	str	r3, [r7, #16]
   return(result);
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1e5      	bne.n	80038d4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2220      	movs	r2, #32
 800390c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8003910:	bf00      	nop
 8003912:	3724      	adds	r7, #36	; 0x24
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr

0800391a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800391a:	b480      	push	{r7}
 800391c:	b095      	sub	sp, #84	; 0x54
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	330c      	adds	r3, #12
 8003928:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800392c:	e853 3f00 	ldrex	r3, [r3]
 8003930:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003934:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003938:	64fb      	str	r3, [r7, #76]	; 0x4c
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	330c      	adds	r3, #12
 8003940:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003942:	643a      	str	r2, [r7, #64]	; 0x40
 8003944:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003946:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003948:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800394a:	e841 2300 	strex	r3, r2, [r1]
 800394e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1e5      	bne.n	8003922 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	3314      	adds	r3, #20
 800395c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	e853 3f00 	ldrex	r3, [r3]
 8003964:	61fb      	str	r3, [r7, #28]
   return(result);
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	f023 0301 	bic.w	r3, r3, #1
 800396c:	64bb      	str	r3, [r7, #72]	; 0x48
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3314      	adds	r3, #20
 8003974:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003976:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003978:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800397c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800397e:	e841 2300 	strex	r3, r2, [r1]
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1e5      	bne.n	8003956 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	2b01      	cmp	r3, #1
 8003990:	d119      	bne.n	80039c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	330c      	adds	r3, #12
 8003998:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	e853 3f00 	ldrex	r3, [r3]
 80039a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	f023 0310 	bic.w	r3, r3, #16
 80039a8:	647b      	str	r3, [r7, #68]	; 0x44
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	330c      	adds	r3, #12
 80039b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039b2:	61ba      	str	r2, [r7, #24]
 80039b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b6:	6979      	ldr	r1, [r7, #20]
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	e841 2300 	strex	r3, r2, [r1]
 80039be:	613b      	str	r3, [r7, #16]
   return(result);
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1e5      	bne.n	8003992 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80039d4:	bf00      	nop
 80039d6:	3754      	adds	r7, #84	; 0x54
 80039d8:	46bd      	mov	sp, r7
 80039da:	bc80      	pop	{r7}
 80039dc:	4770      	bx	lr

080039de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b084      	sub	sp, #16
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f7ff fd58 	bl	80034ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039fe:	bf00      	nop
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b085      	sub	sp, #20
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b21      	cmp	r3, #33	; 0x21
 8003a18:	d13e      	bne.n	8003a98 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a22:	d114      	bne.n	8003a4e <UART_Transmit_IT+0x48>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d110      	bne.n	8003a4e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	881b      	ldrh	r3, [r3, #0]
 8003a36:	461a      	mov	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a40:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	1c9a      	adds	r2, r3, #2
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	621a      	str	r2, [r3, #32]
 8003a4c:	e008      	b.n	8003a60 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	1c59      	adds	r1, r3, #1
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6211      	str	r1, [r2, #32]
 8003a58:	781a      	ldrb	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10f      	bne.n	8003a94 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a82:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a92:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a94:	2300      	movs	r3, #0
 8003a96:	e000      	b.n	8003a9a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a98:	2302      	movs	r3, #2
  }
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr

08003aa4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7ff fcd7 	bl	8003478 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08c      	sub	sp, #48	; 0x30
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b22      	cmp	r3, #34	; 0x22
 8003ae6:	f040 80ae 	bne.w	8003c46 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af2:	d117      	bne.n	8003b24 <UART_Receive_IT+0x50>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d113      	bne.n	8003b24 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003afc:	2300      	movs	r3, #0
 8003afe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b04:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b16:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1c:	1c9a      	adds	r2, r3, #2
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	629a      	str	r2, [r3, #40]	; 0x28
 8003b22:	e026      	b.n	8003b72 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b28:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b36:	d007      	beq.n	8003b48 <UART_Receive_IT+0x74>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10a      	bne.n	8003b56 <UART_Receive_IT+0x82>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d106      	bne.n	8003b56 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	b2da      	uxtb	r2, r3
 8003b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b52:	701a      	strb	r2, [r3, #0]
 8003b54:	e008      	b.n	8003b68 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b66:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	4619      	mov	r1, r3
 8003b80:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d15d      	bne.n	8003c42 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68da      	ldr	r2, [r3, #12]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0220 	bic.w	r2, r2, #32
 8003b94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ba4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695a      	ldr	r2, [r3, #20]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0201 	bic.w	r2, r2, #1
 8003bb4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d135      	bne.n	8003c38 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	330c      	adds	r3, #12
 8003bd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	e853 3f00 	ldrex	r3, [r3]
 8003be0:	613b      	str	r3, [r7, #16]
   return(result);
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f023 0310 	bic.w	r3, r3, #16
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	330c      	adds	r3, #12
 8003bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf2:	623a      	str	r2, [r7, #32]
 8003bf4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf6:	69f9      	ldr	r1, [r7, #28]
 8003bf8:	6a3a      	ldr	r2, [r7, #32]
 8003bfa:	e841 2300 	strex	r3, r2, [r1]
 8003bfe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1e5      	bne.n	8003bd2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0310 	and.w	r3, r3, #16
 8003c10:	2b10      	cmp	r3, #16
 8003c12:	d10a      	bne.n	8003c2a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c14:	2300      	movs	r3, #0
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c2e:	4619      	mov	r1, r3
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7fc fdc7 	bl	80007c4 <HAL_UARTEx_RxEventCallback>
 8003c36:	e002      	b.n	8003c3e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7ff fc26 	bl	800348a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	e002      	b.n	8003c48 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003c42:	2300      	movs	r3, #0
 8003c44:	e000      	b.n	8003c48 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003c46:	2302      	movs	r3, #2
  }
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3730      	adds	r7, #48	; 0x30
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689a      	ldr	r2, [r3, #8]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003c8a:	f023 030c 	bic.w	r3, r3, #12
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6812      	ldr	r2, [r2, #0]
 8003c92:	68b9      	ldr	r1, [r7, #8]
 8003c94:	430b      	orrs	r3, r1
 8003c96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699a      	ldr	r2, [r3, #24]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a2c      	ldr	r2, [pc, #176]	; (8003d64 <UART_SetConfig+0x114>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d103      	bne.n	8003cc0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003cb8:	f7fe fcec 	bl	8002694 <HAL_RCC_GetPCLK2Freq>
 8003cbc:	60f8      	str	r0, [r7, #12]
 8003cbe:	e002      	b.n	8003cc6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003cc0:	f7fe fcd4 	bl	800266c <HAL_RCC_GetPCLK1Freq>
 8003cc4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	009a      	lsls	r2, r3, #2
 8003cd0:	441a      	add	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cdc:	4a22      	ldr	r2, [pc, #136]	; (8003d68 <UART_SetConfig+0x118>)
 8003cde:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce2:	095b      	lsrs	r3, r3, #5
 8003ce4:	0119      	lsls	r1, r3, #4
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4413      	add	r3, r2
 8003cee:	009a      	lsls	r2, r3, #2
 8003cf0:	441a      	add	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cfc:	4b1a      	ldr	r3, [pc, #104]	; (8003d68 <UART_SetConfig+0x118>)
 8003cfe:	fba3 0302 	umull	r0, r3, r3, r2
 8003d02:	095b      	lsrs	r3, r3, #5
 8003d04:	2064      	movs	r0, #100	; 0x64
 8003d06:	fb00 f303 	mul.w	r3, r0, r3
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	3332      	adds	r3, #50	; 0x32
 8003d10:	4a15      	ldr	r2, [pc, #84]	; (8003d68 <UART_SetConfig+0x118>)
 8003d12:	fba2 2303 	umull	r2, r3, r2, r3
 8003d16:	095b      	lsrs	r3, r3, #5
 8003d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d1c:	4419      	add	r1, r3
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	009a      	lsls	r2, r3, #2
 8003d28:	441a      	add	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d34:	4b0c      	ldr	r3, [pc, #48]	; (8003d68 <UART_SetConfig+0x118>)
 8003d36:	fba3 0302 	umull	r0, r3, r3, r2
 8003d3a:	095b      	lsrs	r3, r3, #5
 8003d3c:	2064      	movs	r0, #100	; 0x64
 8003d3e:	fb00 f303 	mul.w	r3, r0, r3
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	3332      	adds	r3, #50	; 0x32
 8003d48:	4a07      	ldr	r2, [pc, #28]	; (8003d68 <UART_SetConfig+0x118>)
 8003d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4e:	095b      	lsrs	r3, r3, #5
 8003d50:	f003 020f 	and.w	r2, r3, #15
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	440a      	add	r2, r1
 8003d5a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d5c:	bf00      	nop
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40013800 	.word	0x40013800
 8003d68:	51eb851f 	.word	0x51eb851f

08003d6c <atoi>:
 8003d6c:	220a      	movs	r2, #10
 8003d6e:	2100      	movs	r1, #0
 8003d70:	f000 b946 	b.w	8004000 <strtol>

08003d74 <__errno>:
 8003d74:	4b01      	ldr	r3, [pc, #4]	; (8003d7c <__errno+0x8>)
 8003d76:	6818      	ldr	r0, [r3, #0]
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	20000010 	.word	0x20000010

08003d80 <__libc_init_array>:
 8003d80:	b570      	push	{r4, r5, r6, lr}
 8003d82:	2600      	movs	r6, #0
 8003d84:	4d0c      	ldr	r5, [pc, #48]	; (8003db8 <__libc_init_array+0x38>)
 8003d86:	4c0d      	ldr	r4, [pc, #52]	; (8003dbc <__libc_init_array+0x3c>)
 8003d88:	1b64      	subs	r4, r4, r5
 8003d8a:	10a4      	asrs	r4, r4, #2
 8003d8c:	42a6      	cmp	r6, r4
 8003d8e:	d109      	bne.n	8003da4 <__libc_init_array+0x24>
 8003d90:	f000 fdc0 	bl	8004914 <_init>
 8003d94:	2600      	movs	r6, #0
 8003d96:	4d0a      	ldr	r5, [pc, #40]	; (8003dc0 <__libc_init_array+0x40>)
 8003d98:	4c0a      	ldr	r4, [pc, #40]	; (8003dc4 <__libc_init_array+0x44>)
 8003d9a:	1b64      	subs	r4, r4, r5
 8003d9c:	10a4      	asrs	r4, r4, #2
 8003d9e:	42a6      	cmp	r6, r4
 8003da0:	d105      	bne.n	8003dae <__libc_init_array+0x2e>
 8003da2:	bd70      	pop	{r4, r5, r6, pc}
 8003da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003da8:	4798      	blx	r3
 8003daa:	3601      	adds	r6, #1
 8003dac:	e7ee      	b.n	8003d8c <__libc_init_array+0xc>
 8003dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8003db2:	4798      	blx	r3
 8003db4:	3601      	adds	r6, #1
 8003db6:	e7f2      	b.n	8003d9e <__libc_init_array+0x1e>
 8003db8:	08004ad8 	.word	0x08004ad8
 8003dbc:	08004ad8 	.word	0x08004ad8
 8003dc0:	08004ad8 	.word	0x08004ad8
 8003dc4:	08004adc 	.word	0x08004adc

08003dc8 <memcpy>:
 8003dc8:	440a      	add	r2, r1
 8003dca:	4291      	cmp	r1, r2
 8003dcc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003dd0:	d100      	bne.n	8003dd4 <memcpy+0xc>
 8003dd2:	4770      	bx	lr
 8003dd4:	b510      	push	{r4, lr}
 8003dd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003dda:	4291      	cmp	r1, r2
 8003ddc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003de0:	d1f9      	bne.n	8003dd6 <memcpy+0xe>
 8003de2:	bd10      	pop	{r4, pc}

08003de4 <memset>:
 8003de4:	4603      	mov	r3, r0
 8003de6:	4402      	add	r2, r0
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d100      	bne.n	8003dee <memset+0xa>
 8003dec:	4770      	bx	lr
 8003dee:	f803 1b01 	strb.w	r1, [r3], #1
 8003df2:	e7f9      	b.n	8003de8 <memset+0x4>

08003df4 <_puts_r>:
 8003df4:	b570      	push	{r4, r5, r6, lr}
 8003df6:	460e      	mov	r6, r1
 8003df8:	4605      	mov	r5, r0
 8003dfa:	b118      	cbz	r0, 8003e04 <_puts_r+0x10>
 8003dfc:	6983      	ldr	r3, [r0, #24]
 8003dfe:	b90b      	cbnz	r3, 8003e04 <_puts_r+0x10>
 8003e00:	f000 fade 	bl	80043c0 <__sinit>
 8003e04:	69ab      	ldr	r3, [r5, #24]
 8003e06:	68ac      	ldr	r4, [r5, #8]
 8003e08:	b913      	cbnz	r3, 8003e10 <_puts_r+0x1c>
 8003e0a:	4628      	mov	r0, r5
 8003e0c:	f000 fad8 	bl	80043c0 <__sinit>
 8003e10:	4b2c      	ldr	r3, [pc, #176]	; (8003ec4 <_puts_r+0xd0>)
 8003e12:	429c      	cmp	r4, r3
 8003e14:	d120      	bne.n	8003e58 <_puts_r+0x64>
 8003e16:	686c      	ldr	r4, [r5, #4]
 8003e18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e1a:	07db      	lsls	r3, r3, #31
 8003e1c:	d405      	bmi.n	8003e2a <_puts_r+0x36>
 8003e1e:	89a3      	ldrh	r3, [r4, #12]
 8003e20:	0598      	lsls	r0, r3, #22
 8003e22:	d402      	bmi.n	8003e2a <_puts_r+0x36>
 8003e24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e26:	f000 fb69 	bl	80044fc <__retarget_lock_acquire_recursive>
 8003e2a:	89a3      	ldrh	r3, [r4, #12]
 8003e2c:	0719      	lsls	r1, r3, #28
 8003e2e:	d51d      	bpl.n	8003e6c <_puts_r+0x78>
 8003e30:	6923      	ldr	r3, [r4, #16]
 8003e32:	b1db      	cbz	r3, 8003e6c <_puts_r+0x78>
 8003e34:	3e01      	subs	r6, #1
 8003e36:	68a3      	ldr	r3, [r4, #8]
 8003e38:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	60a3      	str	r3, [r4, #8]
 8003e40:	bb39      	cbnz	r1, 8003e92 <_puts_r+0x9e>
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	da38      	bge.n	8003eb8 <_puts_r+0xc4>
 8003e46:	4622      	mov	r2, r4
 8003e48:	210a      	movs	r1, #10
 8003e4a:	4628      	mov	r0, r5
 8003e4c:	f000 f8e2 	bl	8004014 <__swbuf_r>
 8003e50:	3001      	adds	r0, #1
 8003e52:	d011      	beq.n	8003e78 <_puts_r+0x84>
 8003e54:	250a      	movs	r5, #10
 8003e56:	e011      	b.n	8003e7c <_puts_r+0x88>
 8003e58:	4b1b      	ldr	r3, [pc, #108]	; (8003ec8 <_puts_r+0xd4>)
 8003e5a:	429c      	cmp	r4, r3
 8003e5c:	d101      	bne.n	8003e62 <_puts_r+0x6e>
 8003e5e:	68ac      	ldr	r4, [r5, #8]
 8003e60:	e7da      	b.n	8003e18 <_puts_r+0x24>
 8003e62:	4b1a      	ldr	r3, [pc, #104]	; (8003ecc <_puts_r+0xd8>)
 8003e64:	429c      	cmp	r4, r3
 8003e66:	bf08      	it	eq
 8003e68:	68ec      	ldreq	r4, [r5, #12]
 8003e6a:	e7d5      	b.n	8003e18 <_puts_r+0x24>
 8003e6c:	4621      	mov	r1, r4
 8003e6e:	4628      	mov	r0, r5
 8003e70:	f000 f922 	bl	80040b8 <__swsetup_r>
 8003e74:	2800      	cmp	r0, #0
 8003e76:	d0dd      	beq.n	8003e34 <_puts_r+0x40>
 8003e78:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003e7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e7e:	07da      	lsls	r2, r3, #31
 8003e80:	d405      	bmi.n	8003e8e <_puts_r+0x9a>
 8003e82:	89a3      	ldrh	r3, [r4, #12]
 8003e84:	059b      	lsls	r3, r3, #22
 8003e86:	d402      	bmi.n	8003e8e <_puts_r+0x9a>
 8003e88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e8a:	f000 fb38 	bl	80044fe <__retarget_lock_release_recursive>
 8003e8e:	4628      	mov	r0, r5
 8003e90:	bd70      	pop	{r4, r5, r6, pc}
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	da04      	bge.n	8003ea0 <_puts_r+0xac>
 8003e96:	69a2      	ldr	r2, [r4, #24]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	dc06      	bgt.n	8003eaa <_puts_r+0xb6>
 8003e9c:	290a      	cmp	r1, #10
 8003e9e:	d004      	beq.n	8003eaa <_puts_r+0xb6>
 8003ea0:	6823      	ldr	r3, [r4, #0]
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	6022      	str	r2, [r4, #0]
 8003ea6:	7019      	strb	r1, [r3, #0]
 8003ea8:	e7c5      	b.n	8003e36 <_puts_r+0x42>
 8003eaa:	4622      	mov	r2, r4
 8003eac:	4628      	mov	r0, r5
 8003eae:	f000 f8b1 	bl	8004014 <__swbuf_r>
 8003eb2:	3001      	adds	r0, #1
 8003eb4:	d1bf      	bne.n	8003e36 <_puts_r+0x42>
 8003eb6:	e7df      	b.n	8003e78 <_puts_r+0x84>
 8003eb8:	250a      	movs	r5, #10
 8003eba:	6823      	ldr	r3, [r4, #0]
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	6022      	str	r2, [r4, #0]
 8003ec0:	701d      	strb	r5, [r3, #0]
 8003ec2:	e7db      	b.n	8003e7c <_puts_r+0x88>
 8003ec4:	08004a98 	.word	0x08004a98
 8003ec8:	08004ab8 	.word	0x08004ab8
 8003ecc:	08004a78 	.word	0x08004a78

08003ed0 <puts>:
 8003ed0:	4b02      	ldr	r3, [pc, #8]	; (8003edc <puts+0xc>)
 8003ed2:	4601      	mov	r1, r0
 8003ed4:	6818      	ldr	r0, [r3, #0]
 8003ed6:	f7ff bf8d 	b.w	8003df4 <_puts_r>
 8003eda:	bf00      	nop
 8003edc:	20000010 	.word	0x20000010

08003ee0 <strncmp>:
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	b510      	push	{r4, lr}
 8003ee4:	b172      	cbz	r2, 8003f04 <strncmp+0x24>
 8003ee6:	3901      	subs	r1, #1
 8003ee8:	1884      	adds	r4, r0, r2
 8003eea:	f813 0b01 	ldrb.w	r0, [r3], #1
 8003eee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003ef2:	4290      	cmp	r0, r2
 8003ef4:	d101      	bne.n	8003efa <strncmp+0x1a>
 8003ef6:	42a3      	cmp	r3, r4
 8003ef8:	d101      	bne.n	8003efe <strncmp+0x1e>
 8003efa:	1a80      	subs	r0, r0, r2
 8003efc:	bd10      	pop	{r4, pc}
 8003efe:	2800      	cmp	r0, #0
 8003f00:	d1f3      	bne.n	8003eea <strncmp+0xa>
 8003f02:	e7fa      	b.n	8003efa <strncmp+0x1a>
 8003f04:	4610      	mov	r0, r2
 8003f06:	e7f9      	b.n	8003efc <strncmp+0x1c>

08003f08 <_strtol_l.constprop.0>:
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f0e:	4680      	mov	r8, r0
 8003f10:	d001      	beq.n	8003f16 <_strtol_l.constprop.0+0xe>
 8003f12:	2b24      	cmp	r3, #36	; 0x24
 8003f14:	d906      	bls.n	8003f24 <_strtol_l.constprop.0+0x1c>
 8003f16:	f7ff ff2d 	bl	8003d74 <__errno>
 8003f1a:	2316      	movs	r3, #22
 8003f1c:	6003      	str	r3, [r0, #0]
 8003f1e:	2000      	movs	r0, #0
 8003f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f24:	460d      	mov	r5, r1
 8003f26:	4f35      	ldr	r7, [pc, #212]	; (8003ffc <_strtol_l.constprop.0+0xf4>)
 8003f28:	4628      	mov	r0, r5
 8003f2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f2e:	5de6      	ldrb	r6, [r4, r7]
 8003f30:	f016 0608 	ands.w	r6, r6, #8
 8003f34:	d1f8      	bne.n	8003f28 <_strtol_l.constprop.0+0x20>
 8003f36:	2c2d      	cmp	r4, #45	; 0x2d
 8003f38:	d12f      	bne.n	8003f9a <_strtol_l.constprop.0+0x92>
 8003f3a:	2601      	movs	r6, #1
 8003f3c:	782c      	ldrb	r4, [r5, #0]
 8003f3e:	1c85      	adds	r5, r0, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d057      	beq.n	8003ff4 <_strtol_l.constprop.0+0xec>
 8003f44:	2b10      	cmp	r3, #16
 8003f46:	d109      	bne.n	8003f5c <_strtol_l.constprop.0+0x54>
 8003f48:	2c30      	cmp	r4, #48	; 0x30
 8003f4a:	d107      	bne.n	8003f5c <_strtol_l.constprop.0+0x54>
 8003f4c:	7828      	ldrb	r0, [r5, #0]
 8003f4e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003f52:	2858      	cmp	r0, #88	; 0x58
 8003f54:	d149      	bne.n	8003fea <_strtol_l.constprop.0+0xe2>
 8003f56:	2310      	movs	r3, #16
 8003f58:	786c      	ldrb	r4, [r5, #1]
 8003f5a:	3502      	adds	r5, #2
 8003f5c:	2700      	movs	r7, #0
 8003f5e:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8003f62:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8003f66:	fbbe f9f3 	udiv	r9, lr, r3
 8003f6a:	4638      	mov	r0, r7
 8003f6c:	fb03 ea19 	mls	sl, r3, r9, lr
 8003f70:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003f74:	f1bc 0f09 	cmp.w	ip, #9
 8003f78:	d814      	bhi.n	8003fa4 <_strtol_l.constprop.0+0x9c>
 8003f7a:	4664      	mov	r4, ip
 8003f7c:	42a3      	cmp	r3, r4
 8003f7e:	dd22      	ble.n	8003fc6 <_strtol_l.constprop.0+0xbe>
 8003f80:	2f00      	cmp	r7, #0
 8003f82:	db1d      	blt.n	8003fc0 <_strtol_l.constprop.0+0xb8>
 8003f84:	4581      	cmp	r9, r0
 8003f86:	d31b      	bcc.n	8003fc0 <_strtol_l.constprop.0+0xb8>
 8003f88:	d101      	bne.n	8003f8e <_strtol_l.constprop.0+0x86>
 8003f8a:	45a2      	cmp	sl, r4
 8003f8c:	db18      	blt.n	8003fc0 <_strtol_l.constprop.0+0xb8>
 8003f8e:	2701      	movs	r7, #1
 8003f90:	fb00 4003 	mla	r0, r0, r3, r4
 8003f94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f98:	e7ea      	b.n	8003f70 <_strtol_l.constprop.0+0x68>
 8003f9a:	2c2b      	cmp	r4, #43	; 0x2b
 8003f9c:	bf04      	itt	eq
 8003f9e:	782c      	ldrbeq	r4, [r5, #0]
 8003fa0:	1c85      	addeq	r5, r0, #2
 8003fa2:	e7cd      	b.n	8003f40 <_strtol_l.constprop.0+0x38>
 8003fa4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003fa8:	f1bc 0f19 	cmp.w	ip, #25
 8003fac:	d801      	bhi.n	8003fb2 <_strtol_l.constprop.0+0xaa>
 8003fae:	3c37      	subs	r4, #55	; 0x37
 8003fb0:	e7e4      	b.n	8003f7c <_strtol_l.constprop.0+0x74>
 8003fb2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003fb6:	f1bc 0f19 	cmp.w	ip, #25
 8003fba:	d804      	bhi.n	8003fc6 <_strtol_l.constprop.0+0xbe>
 8003fbc:	3c57      	subs	r4, #87	; 0x57
 8003fbe:	e7dd      	b.n	8003f7c <_strtol_l.constprop.0+0x74>
 8003fc0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003fc4:	e7e6      	b.n	8003f94 <_strtol_l.constprop.0+0x8c>
 8003fc6:	2f00      	cmp	r7, #0
 8003fc8:	da07      	bge.n	8003fda <_strtol_l.constprop.0+0xd2>
 8003fca:	2322      	movs	r3, #34	; 0x22
 8003fcc:	4670      	mov	r0, lr
 8003fce:	f8c8 3000 	str.w	r3, [r8]
 8003fd2:	2a00      	cmp	r2, #0
 8003fd4:	d0a4      	beq.n	8003f20 <_strtol_l.constprop.0+0x18>
 8003fd6:	1e69      	subs	r1, r5, #1
 8003fd8:	e005      	b.n	8003fe6 <_strtol_l.constprop.0+0xde>
 8003fda:	b106      	cbz	r6, 8003fde <_strtol_l.constprop.0+0xd6>
 8003fdc:	4240      	negs	r0, r0
 8003fde:	2a00      	cmp	r2, #0
 8003fe0:	d09e      	beq.n	8003f20 <_strtol_l.constprop.0+0x18>
 8003fe2:	2f00      	cmp	r7, #0
 8003fe4:	d1f7      	bne.n	8003fd6 <_strtol_l.constprop.0+0xce>
 8003fe6:	6011      	str	r1, [r2, #0]
 8003fe8:	e79a      	b.n	8003f20 <_strtol_l.constprop.0+0x18>
 8003fea:	2430      	movs	r4, #48	; 0x30
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1b5      	bne.n	8003f5c <_strtol_l.constprop.0+0x54>
 8003ff0:	2308      	movs	r3, #8
 8003ff2:	e7b3      	b.n	8003f5c <_strtol_l.constprop.0+0x54>
 8003ff4:	2c30      	cmp	r4, #48	; 0x30
 8003ff6:	d0a9      	beq.n	8003f4c <_strtol_l.constprop.0+0x44>
 8003ff8:	230a      	movs	r3, #10
 8003ffa:	e7af      	b.n	8003f5c <_strtol_l.constprop.0+0x54>
 8003ffc:	08004975 	.word	0x08004975

08004000 <strtol>:
 8004000:	4613      	mov	r3, r2
 8004002:	460a      	mov	r2, r1
 8004004:	4601      	mov	r1, r0
 8004006:	4802      	ldr	r0, [pc, #8]	; (8004010 <strtol+0x10>)
 8004008:	6800      	ldr	r0, [r0, #0]
 800400a:	f7ff bf7d 	b.w	8003f08 <_strtol_l.constprop.0>
 800400e:	bf00      	nop
 8004010:	20000010 	.word	0x20000010

08004014 <__swbuf_r>:
 8004014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004016:	460e      	mov	r6, r1
 8004018:	4614      	mov	r4, r2
 800401a:	4605      	mov	r5, r0
 800401c:	b118      	cbz	r0, 8004026 <__swbuf_r+0x12>
 800401e:	6983      	ldr	r3, [r0, #24]
 8004020:	b90b      	cbnz	r3, 8004026 <__swbuf_r+0x12>
 8004022:	f000 f9cd 	bl	80043c0 <__sinit>
 8004026:	4b21      	ldr	r3, [pc, #132]	; (80040ac <__swbuf_r+0x98>)
 8004028:	429c      	cmp	r4, r3
 800402a:	d12b      	bne.n	8004084 <__swbuf_r+0x70>
 800402c:	686c      	ldr	r4, [r5, #4]
 800402e:	69a3      	ldr	r3, [r4, #24]
 8004030:	60a3      	str	r3, [r4, #8]
 8004032:	89a3      	ldrh	r3, [r4, #12]
 8004034:	071a      	lsls	r2, r3, #28
 8004036:	d52f      	bpl.n	8004098 <__swbuf_r+0x84>
 8004038:	6923      	ldr	r3, [r4, #16]
 800403a:	b36b      	cbz	r3, 8004098 <__swbuf_r+0x84>
 800403c:	6923      	ldr	r3, [r4, #16]
 800403e:	6820      	ldr	r0, [r4, #0]
 8004040:	b2f6      	uxtb	r6, r6
 8004042:	1ac0      	subs	r0, r0, r3
 8004044:	6963      	ldr	r3, [r4, #20]
 8004046:	4637      	mov	r7, r6
 8004048:	4283      	cmp	r3, r0
 800404a:	dc04      	bgt.n	8004056 <__swbuf_r+0x42>
 800404c:	4621      	mov	r1, r4
 800404e:	4628      	mov	r0, r5
 8004050:	f000 f922 	bl	8004298 <_fflush_r>
 8004054:	bb30      	cbnz	r0, 80040a4 <__swbuf_r+0x90>
 8004056:	68a3      	ldr	r3, [r4, #8]
 8004058:	3001      	adds	r0, #1
 800405a:	3b01      	subs	r3, #1
 800405c:	60a3      	str	r3, [r4, #8]
 800405e:	6823      	ldr	r3, [r4, #0]
 8004060:	1c5a      	adds	r2, r3, #1
 8004062:	6022      	str	r2, [r4, #0]
 8004064:	701e      	strb	r6, [r3, #0]
 8004066:	6963      	ldr	r3, [r4, #20]
 8004068:	4283      	cmp	r3, r0
 800406a:	d004      	beq.n	8004076 <__swbuf_r+0x62>
 800406c:	89a3      	ldrh	r3, [r4, #12]
 800406e:	07db      	lsls	r3, r3, #31
 8004070:	d506      	bpl.n	8004080 <__swbuf_r+0x6c>
 8004072:	2e0a      	cmp	r6, #10
 8004074:	d104      	bne.n	8004080 <__swbuf_r+0x6c>
 8004076:	4621      	mov	r1, r4
 8004078:	4628      	mov	r0, r5
 800407a:	f000 f90d 	bl	8004298 <_fflush_r>
 800407e:	b988      	cbnz	r0, 80040a4 <__swbuf_r+0x90>
 8004080:	4638      	mov	r0, r7
 8004082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004084:	4b0a      	ldr	r3, [pc, #40]	; (80040b0 <__swbuf_r+0x9c>)
 8004086:	429c      	cmp	r4, r3
 8004088:	d101      	bne.n	800408e <__swbuf_r+0x7a>
 800408a:	68ac      	ldr	r4, [r5, #8]
 800408c:	e7cf      	b.n	800402e <__swbuf_r+0x1a>
 800408e:	4b09      	ldr	r3, [pc, #36]	; (80040b4 <__swbuf_r+0xa0>)
 8004090:	429c      	cmp	r4, r3
 8004092:	bf08      	it	eq
 8004094:	68ec      	ldreq	r4, [r5, #12]
 8004096:	e7ca      	b.n	800402e <__swbuf_r+0x1a>
 8004098:	4621      	mov	r1, r4
 800409a:	4628      	mov	r0, r5
 800409c:	f000 f80c 	bl	80040b8 <__swsetup_r>
 80040a0:	2800      	cmp	r0, #0
 80040a2:	d0cb      	beq.n	800403c <__swbuf_r+0x28>
 80040a4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80040a8:	e7ea      	b.n	8004080 <__swbuf_r+0x6c>
 80040aa:	bf00      	nop
 80040ac:	08004a98 	.word	0x08004a98
 80040b0:	08004ab8 	.word	0x08004ab8
 80040b4:	08004a78 	.word	0x08004a78

080040b8 <__swsetup_r>:
 80040b8:	4b32      	ldr	r3, [pc, #200]	; (8004184 <__swsetup_r+0xcc>)
 80040ba:	b570      	push	{r4, r5, r6, lr}
 80040bc:	681d      	ldr	r5, [r3, #0]
 80040be:	4606      	mov	r6, r0
 80040c0:	460c      	mov	r4, r1
 80040c2:	b125      	cbz	r5, 80040ce <__swsetup_r+0x16>
 80040c4:	69ab      	ldr	r3, [r5, #24]
 80040c6:	b913      	cbnz	r3, 80040ce <__swsetup_r+0x16>
 80040c8:	4628      	mov	r0, r5
 80040ca:	f000 f979 	bl	80043c0 <__sinit>
 80040ce:	4b2e      	ldr	r3, [pc, #184]	; (8004188 <__swsetup_r+0xd0>)
 80040d0:	429c      	cmp	r4, r3
 80040d2:	d10f      	bne.n	80040f4 <__swsetup_r+0x3c>
 80040d4:	686c      	ldr	r4, [r5, #4]
 80040d6:	89a3      	ldrh	r3, [r4, #12]
 80040d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040dc:	0719      	lsls	r1, r3, #28
 80040de:	d42c      	bmi.n	800413a <__swsetup_r+0x82>
 80040e0:	06dd      	lsls	r5, r3, #27
 80040e2:	d411      	bmi.n	8004108 <__swsetup_r+0x50>
 80040e4:	2309      	movs	r3, #9
 80040e6:	6033      	str	r3, [r6, #0]
 80040e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80040ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040f0:	81a3      	strh	r3, [r4, #12]
 80040f2:	e03e      	b.n	8004172 <__swsetup_r+0xba>
 80040f4:	4b25      	ldr	r3, [pc, #148]	; (800418c <__swsetup_r+0xd4>)
 80040f6:	429c      	cmp	r4, r3
 80040f8:	d101      	bne.n	80040fe <__swsetup_r+0x46>
 80040fa:	68ac      	ldr	r4, [r5, #8]
 80040fc:	e7eb      	b.n	80040d6 <__swsetup_r+0x1e>
 80040fe:	4b24      	ldr	r3, [pc, #144]	; (8004190 <__swsetup_r+0xd8>)
 8004100:	429c      	cmp	r4, r3
 8004102:	bf08      	it	eq
 8004104:	68ec      	ldreq	r4, [r5, #12]
 8004106:	e7e6      	b.n	80040d6 <__swsetup_r+0x1e>
 8004108:	0758      	lsls	r0, r3, #29
 800410a:	d512      	bpl.n	8004132 <__swsetup_r+0x7a>
 800410c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800410e:	b141      	cbz	r1, 8004122 <__swsetup_r+0x6a>
 8004110:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004114:	4299      	cmp	r1, r3
 8004116:	d002      	beq.n	800411e <__swsetup_r+0x66>
 8004118:	4630      	mov	r0, r6
 800411a:	f000 fa57 	bl	80045cc <_free_r>
 800411e:	2300      	movs	r3, #0
 8004120:	6363      	str	r3, [r4, #52]	; 0x34
 8004122:	89a3      	ldrh	r3, [r4, #12]
 8004124:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004128:	81a3      	strh	r3, [r4, #12]
 800412a:	2300      	movs	r3, #0
 800412c:	6063      	str	r3, [r4, #4]
 800412e:	6923      	ldr	r3, [r4, #16]
 8004130:	6023      	str	r3, [r4, #0]
 8004132:	89a3      	ldrh	r3, [r4, #12]
 8004134:	f043 0308 	orr.w	r3, r3, #8
 8004138:	81a3      	strh	r3, [r4, #12]
 800413a:	6923      	ldr	r3, [r4, #16]
 800413c:	b94b      	cbnz	r3, 8004152 <__swsetup_r+0x9a>
 800413e:	89a3      	ldrh	r3, [r4, #12]
 8004140:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004148:	d003      	beq.n	8004152 <__swsetup_r+0x9a>
 800414a:	4621      	mov	r1, r4
 800414c:	4630      	mov	r0, r6
 800414e:	f000 f9fd 	bl	800454c <__smakebuf_r>
 8004152:	89a0      	ldrh	r0, [r4, #12]
 8004154:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004158:	f010 0301 	ands.w	r3, r0, #1
 800415c:	d00a      	beq.n	8004174 <__swsetup_r+0xbc>
 800415e:	2300      	movs	r3, #0
 8004160:	60a3      	str	r3, [r4, #8]
 8004162:	6963      	ldr	r3, [r4, #20]
 8004164:	425b      	negs	r3, r3
 8004166:	61a3      	str	r3, [r4, #24]
 8004168:	6923      	ldr	r3, [r4, #16]
 800416a:	b943      	cbnz	r3, 800417e <__swsetup_r+0xc6>
 800416c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004170:	d1ba      	bne.n	80040e8 <__swsetup_r+0x30>
 8004172:	bd70      	pop	{r4, r5, r6, pc}
 8004174:	0781      	lsls	r1, r0, #30
 8004176:	bf58      	it	pl
 8004178:	6963      	ldrpl	r3, [r4, #20]
 800417a:	60a3      	str	r3, [r4, #8]
 800417c:	e7f4      	b.n	8004168 <__swsetup_r+0xb0>
 800417e:	2000      	movs	r0, #0
 8004180:	e7f7      	b.n	8004172 <__swsetup_r+0xba>
 8004182:	bf00      	nop
 8004184:	20000010 	.word	0x20000010
 8004188:	08004a98 	.word	0x08004a98
 800418c:	08004ab8 	.word	0x08004ab8
 8004190:	08004a78 	.word	0x08004a78

08004194 <__sflush_r>:
 8004194:	898a      	ldrh	r2, [r1, #12]
 8004196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004198:	4605      	mov	r5, r0
 800419a:	0710      	lsls	r0, r2, #28
 800419c:	460c      	mov	r4, r1
 800419e:	d457      	bmi.n	8004250 <__sflush_r+0xbc>
 80041a0:	684b      	ldr	r3, [r1, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	dc04      	bgt.n	80041b0 <__sflush_r+0x1c>
 80041a6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	dc01      	bgt.n	80041b0 <__sflush_r+0x1c>
 80041ac:	2000      	movs	r0, #0
 80041ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041b2:	2e00      	cmp	r6, #0
 80041b4:	d0fa      	beq.n	80041ac <__sflush_r+0x18>
 80041b6:	2300      	movs	r3, #0
 80041b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80041bc:	682f      	ldr	r7, [r5, #0]
 80041be:	602b      	str	r3, [r5, #0]
 80041c0:	d032      	beq.n	8004228 <__sflush_r+0x94>
 80041c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80041c4:	89a3      	ldrh	r3, [r4, #12]
 80041c6:	075a      	lsls	r2, r3, #29
 80041c8:	d505      	bpl.n	80041d6 <__sflush_r+0x42>
 80041ca:	6863      	ldr	r3, [r4, #4]
 80041cc:	1ac0      	subs	r0, r0, r3
 80041ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041d0:	b10b      	cbz	r3, 80041d6 <__sflush_r+0x42>
 80041d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041d4:	1ac0      	subs	r0, r0, r3
 80041d6:	2300      	movs	r3, #0
 80041d8:	4602      	mov	r2, r0
 80041da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041dc:	4628      	mov	r0, r5
 80041de:	6a21      	ldr	r1, [r4, #32]
 80041e0:	47b0      	blx	r6
 80041e2:	1c43      	adds	r3, r0, #1
 80041e4:	89a3      	ldrh	r3, [r4, #12]
 80041e6:	d106      	bne.n	80041f6 <__sflush_r+0x62>
 80041e8:	6829      	ldr	r1, [r5, #0]
 80041ea:	291d      	cmp	r1, #29
 80041ec:	d82c      	bhi.n	8004248 <__sflush_r+0xb4>
 80041ee:	4a29      	ldr	r2, [pc, #164]	; (8004294 <__sflush_r+0x100>)
 80041f0:	40ca      	lsrs	r2, r1
 80041f2:	07d6      	lsls	r6, r2, #31
 80041f4:	d528      	bpl.n	8004248 <__sflush_r+0xb4>
 80041f6:	2200      	movs	r2, #0
 80041f8:	6062      	str	r2, [r4, #4]
 80041fa:	6922      	ldr	r2, [r4, #16]
 80041fc:	04d9      	lsls	r1, r3, #19
 80041fe:	6022      	str	r2, [r4, #0]
 8004200:	d504      	bpl.n	800420c <__sflush_r+0x78>
 8004202:	1c42      	adds	r2, r0, #1
 8004204:	d101      	bne.n	800420a <__sflush_r+0x76>
 8004206:	682b      	ldr	r3, [r5, #0]
 8004208:	b903      	cbnz	r3, 800420c <__sflush_r+0x78>
 800420a:	6560      	str	r0, [r4, #84]	; 0x54
 800420c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800420e:	602f      	str	r7, [r5, #0]
 8004210:	2900      	cmp	r1, #0
 8004212:	d0cb      	beq.n	80041ac <__sflush_r+0x18>
 8004214:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004218:	4299      	cmp	r1, r3
 800421a:	d002      	beq.n	8004222 <__sflush_r+0x8e>
 800421c:	4628      	mov	r0, r5
 800421e:	f000 f9d5 	bl	80045cc <_free_r>
 8004222:	2000      	movs	r0, #0
 8004224:	6360      	str	r0, [r4, #52]	; 0x34
 8004226:	e7c2      	b.n	80041ae <__sflush_r+0x1a>
 8004228:	6a21      	ldr	r1, [r4, #32]
 800422a:	2301      	movs	r3, #1
 800422c:	4628      	mov	r0, r5
 800422e:	47b0      	blx	r6
 8004230:	1c41      	adds	r1, r0, #1
 8004232:	d1c7      	bne.n	80041c4 <__sflush_r+0x30>
 8004234:	682b      	ldr	r3, [r5, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d0c4      	beq.n	80041c4 <__sflush_r+0x30>
 800423a:	2b1d      	cmp	r3, #29
 800423c:	d001      	beq.n	8004242 <__sflush_r+0xae>
 800423e:	2b16      	cmp	r3, #22
 8004240:	d101      	bne.n	8004246 <__sflush_r+0xb2>
 8004242:	602f      	str	r7, [r5, #0]
 8004244:	e7b2      	b.n	80041ac <__sflush_r+0x18>
 8004246:	89a3      	ldrh	r3, [r4, #12]
 8004248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800424c:	81a3      	strh	r3, [r4, #12]
 800424e:	e7ae      	b.n	80041ae <__sflush_r+0x1a>
 8004250:	690f      	ldr	r7, [r1, #16]
 8004252:	2f00      	cmp	r7, #0
 8004254:	d0aa      	beq.n	80041ac <__sflush_r+0x18>
 8004256:	0793      	lsls	r3, r2, #30
 8004258:	bf18      	it	ne
 800425a:	2300      	movne	r3, #0
 800425c:	680e      	ldr	r6, [r1, #0]
 800425e:	bf08      	it	eq
 8004260:	694b      	ldreq	r3, [r1, #20]
 8004262:	1bf6      	subs	r6, r6, r7
 8004264:	600f      	str	r7, [r1, #0]
 8004266:	608b      	str	r3, [r1, #8]
 8004268:	2e00      	cmp	r6, #0
 800426a:	dd9f      	ble.n	80041ac <__sflush_r+0x18>
 800426c:	4633      	mov	r3, r6
 800426e:	463a      	mov	r2, r7
 8004270:	4628      	mov	r0, r5
 8004272:	6a21      	ldr	r1, [r4, #32]
 8004274:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004278:	47e0      	blx	ip
 800427a:	2800      	cmp	r0, #0
 800427c:	dc06      	bgt.n	800428c <__sflush_r+0xf8>
 800427e:	89a3      	ldrh	r3, [r4, #12]
 8004280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004288:	81a3      	strh	r3, [r4, #12]
 800428a:	e790      	b.n	80041ae <__sflush_r+0x1a>
 800428c:	4407      	add	r7, r0
 800428e:	1a36      	subs	r6, r6, r0
 8004290:	e7ea      	b.n	8004268 <__sflush_r+0xd4>
 8004292:	bf00      	nop
 8004294:	20400001 	.word	0x20400001

08004298 <_fflush_r>:
 8004298:	b538      	push	{r3, r4, r5, lr}
 800429a:	690b      	ldr	r3, [r1, #16]
 800429c:	4605      	mov	r5, r0
 800429e:	460c      	mov	r4, r1
 80042a0:	b913      	cbnz	r3, 80042a8 <_fflush_r+0x10>
 80042a2:	2500      	movs	r5, #0
 80042a4:	4628      	mov	r0, r5
 80042a6:	bd38      	pop	{r3, r4, r5, pc}
 80042a8:	b118      	cbz	r0, 80042b2 <_fflush_r+0x1a>
 80042aa:	6983      	ldr	r3, [r0, #24]
 80042ac:	b90b      	cbnz	r3, 80042b2 <_fflush_r+0x1a>
 80042ae:	f000 f887 	bl	80043c0 <__sinit>
 80042b2:	4b14      	ldr	r3, [pc, #80]	; (8004304 <_fflush_r+0x6c>)
 80042b4:	429c      	cmp	r4, r3
 80042b6:	d11b      	bne.n	80042f0 <_fflush_r+0x58>
 80042b8:	686c      	ldr	r4, [r5, #4]
 80042ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0ef      	beq.n	80042a2 <_fflush_r+0xa>
 80042c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80042c4:	07d0      	lsls	r0, r2, #31
 80042c6:	d404      	bmi.n	80042d2 <_fflush_r+0x3a>
 80042c8:	0599      	lsls	r1, r3, #22
 80042ca:	d402      	bmi.n	80042d2 <_fflush_r+0x3a>
 80042cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042ce:	f000 f915 	bl	80044fc <__retarget_lock_acquire_recursive>
 80042d2:	4628      	mov	r0, r5
 80042d4:	4621      	mov	r1, r4
 80042d6:	f7ff ff5d 	bl	8004194 <__sflush_r>
 80042da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042dc:	4605      	mov	r5, r0
 80042de:	07da      	lsls	r2, r3, #31
 80042e0:	d4e0      	bmi.n	80042a4 <_fflush_r+0xc>
 80042e2:	89a3      	ldrh	r3, [r4, #12]
 80042e4:	059b      	lsls	r3, r3, #22
 80042e6:	d4dd      	bmi.n	80042a4 <_fflush_r+0xc>
 80042e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042ea:	f000 f908 	bl	80044fe <__retarget_lock_release_recursive>
 80042ee:	e7d9      	b.n	80042a4 <_fflush_r+0xc>
 80042f0:	4b05      	ldr	r3, [pc, #20]	; (8004308 <_fflush_r+0x70>)
 80042f2:	429c      	cmp	r4, r3
 80042f4:	d101      	bne.n	80042fa <_fflush_r+0x62>
 80042f6:	68ac      	ldr	r4, [r5, #8]
 80042f8:	e7df      	b.n	80042ba <_fflush_r+0x22>
 80042fa:	4b04      	ldr	r3, [pc, #16]	; (800430c <_fflush_r+0x74>)
 80042fc:	429c      	cmp	r4, r3
 80042fe:	bf08      	it	eq
 8004300:	68ec      	ldreq	r4, [r5, #12]
 8004302:	e7da      	b.n	80042ba <_fflush_r+0x22>
 8004304:	08004a98 	.word	0x08004a98
 8004308:	08004ab8 	.word	0x08004ab8
 800430c:	08004a78 	.word	0x08004a78

08004310 <std>:
 8004310:	2300      	movs	r3, #0
 8004312:	b510      	push	{r4, lr}
 8004314:	4604      	mov	r4, r0
 8004316:	e9c0 3300 	strd	r3, r3, [r0]
 800431a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800431e:	6083      	str	r3, [r0, #8]
 8004320:	8181      	strh	r1, [r0, #12]
 8004322:	6643      	str	r3, [r0, #100]	; 0x64
 8004324:	81c2      	strh	r2, [r0, #14]
 8004326:	6183      	str	r3, [r0, #24]
 8004328:	4619      	mov	r1, r3
 800432a:	2208      	movs	r2, #8
 800432c:	305c      	adds	r0, #92	; 0x5c
 800432e:	f7ff fd59 	bl	8003de4 <memset>
 8004332:	4b05      	ldr	r3, [pc, #20]	; (8004348 <std+0x38>)
 8004334:	6224      	str	r4, [r4, #32]
 8004336:	6263      	str	r3, [r4, #36]	; 0x24
 8004338:	4b04      	ldr	r3, [pc, #16]	; (800434c <std+0x3c>)
 800433a:	62a3      	str	r3, [r4, #40]	; 0x28
 800433c:	4b04      	ldr	r3, [pc, #16]	; (8004350 <std+0x40>)
 800433e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004340:	4b04      	ldr	r3, [pc, #16]	; (8004354 <std+0x44>)
 8004342:	6323      	str	r3, [r4, #48]	; 0x30
 8004344:	bd10      	pop	{r4, pc}
 8004346:	bf00      	nop
 8004348:	080047a5 	.word	0x080047a5
 800434c:	080047c7 	.word	0x080047c7
 8004350:	080047ff 	.word	0x080047ff
 8004354:	08004823 	.word	0x08004823

08004358 <_cleanup_r>:
 8004358:	4901      	ldr	r1, [pc, #4]	; (8004360 <_cleanup_r+0x8>)
 800435a:	f000 b8af 	b.w	80044bc <_fwalk_reent>
 800435e:	bf00      	nop
 8004360:	08004299 	.word	0x08004299

08004364 <__sfmoreglue>:
 8004364:	2268      	movs	r2, #104	; 0x68
 8004366:	b570      	push	{r4, r5, r6, lr}
 8004368:	1e4d      	subs	r5, r1, #1
 800436a:	4355      	muls	r5, r2
 800436c:	460e      	mov	r6, r1
 800436e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004372:	f000 f993 	bl	800469c <_malloc_r>
 8004376:	4604      	mov	r4, r0
 8004378:	b140      	cbz	r0, 800438c <__sfmoreglue+0x28>
 800437a:	2100      	movs	r1, #0
 800437c:	e9c0 1600 	strd	r1, r6, [r0]
 8004380:	300c      	adds	r0, #12
 8004382:	60a0      	str	r0, [r4, #8]
 8004384:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004388:	f7ff fd2c 	bl	8003de4 <memset>
 800438c:	4620      	mov	r0, r4
 800438e:	bd70      	pop	{r4, r5, r6, pc}

08004390 <__sfp_lock_acquire>:
 8004390:	4801      	ldr	r0, [pc, #4]	; (8004398 <__sfp_lock_acquire+0x8>)
 8004392:	f000 b8b3 	b.w	80044fc <__retarget_lock_acquire_recursive>
 8004396:	bf00      	nop
 8004398:	200003e5 	.word	0x200003e5

0800439c <__sfp_lock_release>:
 800439c:	4801      	ldr	r0, [pc, #4]	; (80043a4 <__sfp_lock_release+0x8>)
 800439e:	f000 b8ae 	b.w	80044fe <__retarget_lock_release_recursive>
 80043a2:	bf00      	nop
 80043a4:	200003e5 	.word	0x200003e5

080043a8 <__sinit_lock_acquire>:
 80043a8:	4801      	ldr	r0, [pc, #4]	; (80043b0 <__sinit_lock_acquire+0x8>)
 80043aa:	f000 b8a7 	b.w	80044fc <__retarget_lock_acquire_recursive>
 80043ae:	bf00      	nop
 80043b0:	200003e6 	.word	0x200003e6

080043b4 <__sinit_lock_release>:
 80043b4:	4801      	ldr	r0, [pc, #4]	; (80043bc <__sinit_lock_release+0x8>)
 80043b6:	f000 b8a2 	b.w	80044fe <__retarget_lock_release_recursive>
 80043ba:	bf00      	nop
 80043bc:	200003e6 	.word	0x200003e6

080043c0 <__sinit>:
 80043c0:	b510      	push	{r4, lr}
 80043c2:	4604      	mov	r4, r0
 80043c4:	f7ff fff0 	bl	80043a8 <__sinit_lock_acquire>
 80043c8:	69a3      	ldr	r3, [r4, #24]
 80043ca:	b11b      	cbz	r3, 80043d4 <__sinit+0x14>
 80043cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043d0:	f7ff bff0 	b.w	80043b4 <__sinit_lock_release>
 80043d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80043d8:	6523      	str	r3, [r4, #80]	; 0x50
 80043da:	4b13      	ldr	r3, [pc, #76]	; (8004428 <__sinit+0x68>)
 80043dc:	4a13      	ldr	r2, [pc, #76]	; (800442c <__sinit+0x6c>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80043e2:	42a3      	cmp	r3, r4
 80043e4:	bf08      	it	eq
 80043e6:	2301      	moveq	r3, #1
 80043e8:	4620      	mov	r0, r4
 80043ea:	bf08      	it	eq
 80043ec:	61a3      	streq	r3, [r4, #24]
 80043ee:	f000 f81f 	bl	8004430 <__sfp>
 80043f2:	6060      	str	r0, [r4, #4]
 80043f4:	4620      	mov	r0, r4
 80043f6:	f000 f81b 	bl	8004430 <__sfp>
 80043fa:	60a0      	str	r0, [r4, #8]
 80043fc:	4620      	mov	r0, r4
 80043fe:	f000 f817 	bl	8004430 <__sfp>
 8004402:	2200      	movs	r2, #0
 8004404:	2104      	movs	r1, #4
 8004406:	60e0      	str	r0, [r4, #12]
 8004408:	6860      	ldr	r0, [r4, #4]
 800440a:	f7ff ff81 	bl	8004310 <std>
 800440e:	2201      	movs	r2, #1
 8004410:	2109      	movs	r1, #9
 8004412:	68a0      	ldr	r0, [r4, #8]
 8004414:	f7ff ff7c 	bl	8004310 <std>
 8004418:	2202      	movs	r2, #2
 800441a:	2112      	movs	r1, #18
 800441c:	68e0      	ldr	r0, [r4, #12]
 800441e:	f7ff ff77 	bl	8004310 <std>
 8004422:	2301      	movs	r3, #1
 8004424:	61a3      	str	r3, [r4, #24]
 8004426:	e7d1      	b.n	80043cc <__sinit+0xc>
 8004428:	08004970 	.word	0x08004970
 800442c:	08004359 	.word	0x08004359

08004430 <__sfp>:
 8004430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004432:	4607      	mov	r7, r0
 8004434:	f7ff ffac 	bl	8004390 <__sfp_lock_acquire>
 8004438:	4b1e      	ldr	r3, [pc, #120]	; (80044b4 <__sfp+0x84>)
 800443a:	681e      	ldr	r6, [r3, #0]
 800443c:	69b3      	ldr	r3, [r6, #24]
 800443e:	b913      	cbnz	r3, 8004446 <__sfp+0x16>
 8004440:	4630      	mov	r0, r6
 8004442:	f7ff ffbd 	bl	80043c0 <__sinit>
 8004446:	3648      	adds	r6, #72	; 0x48
 8004448:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800444c:	3b01      	subs	r3, #1
 800444e:	d503      	bpl.n	8004458 <__sfp+0x28>
 8004450:	6833      	ldr	r3, [r6, #0]
 8004452:	b30b      	cbz	r3, 8004498 <__sfp+0x68>
 8004454:	6836      	ldr	r6, [r6, #0]
 8004456:	e7f7      	b.n	8004448 <__sfp+0x18>
 8004458:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800445c:	b9d5      	cbnz	r5, 8004494 <__sfp+0x64>
 800445e:	4b16      	ldr	r3, [pc, #88]	; (80044b8 <__sfp+0x88>)
 8004460:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004464:	60e3      	str	r3, [r4, #12]
 8004466:	6665      	str	r5, [r4, #100]	; 0x64
 8004468:	f000 f847 	bl	80044fa <__retarget_lock_init_recursive>
 800446c:	f7ff ff96 	bl	800439c <__sfp_lock_release>
 8004470:	2208      	movs	r2, #8
 8004472:	4629      	mov	r1, r5
 8004474:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004478:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800447c:	6025      	str	r5, [r4, #0]
 800447e:	61a5      	str	r5, [r4, #24]
 8004480:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004484:	f7ff fcae 	bl	8003de4 <memset>
 8004488:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800448c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004490:	4620      	mov	r0, r4
 8004492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004494:	3468      	adds	r4, #104	; 0x68
 8004496:	e7d9      	b.n	800444c <__sfp+0x1c>
 8004498:	2104      	movs	r1, #4
 800449a:	4638      	mov	r0, r7
 800449c:	f7ff ff62 	bl	8004364 <__sfmoreglue>
 80044a0:	4604      	mov	r4, r0
 80044a2:	6030      	str	r0, [r6, #0]
 80044a4:	2800      	cmp	r0, #0
 80044a6:	d1d5      	bne.n	8004454 <__sfp+0x24>
 80044a8:	f7ff ff78 	bl	800439c <__sfp_lock_release>
 80044ac:	230c      	movs	r3, #12
 80044ae:	603b      	str	r3, [r7, #0]
 80044b0:	e7ee      	b.n	8004490 <__sfp+0x60>
 80044b2:	bf00      	nop
 80044b4:	08004970 	.word	0x08004970
 80044b8:	ffff0001 	.word	0xffff0001

080044bc <_fwalk_reent>:
 80044bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044c0:	4606      	mov	r6, r0
 80044c2:	4688      	mov	r8, r1
 80044c4:	2700      	movs	r7, #0
 80044c6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80044ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80044ce:	f1b9 0901 	subs.w	r9, r9, #1
 80044d2:	d505      	bpl.n	80044e0 <_fwalk_reent+0x24>
 80044d4:	6824      	ldr	r4, [r4, #0]
 80044d6:	2c00      	cmp	r4, #0
 80044d8:	d1f7      	bne.n	80044ca <_fwalk_reent+0xe>
 80044da:	4638      	mov	r0, r7
 80044dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044e0:	89ab      	ldrh	r3, [r5, #12]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d907      	bls.n	80044f6 <_fwalk_reent+0x3a>
 80044e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044ea:	3301      	adds	r3, #1
 80044ec:	d003      	beq.n	80044f6 <_fwalk_reent+0x3a>
 80044ee:	4629      	mov	r1, r5
 80044f0:	4630      	mov	r0, r6
 80044f2:	47c0      	blx	r8
 80044f4:	4307      	orrs	r7, r0
 80044f6:	3568      	adds	r5, #104	; 0x68
 80044f8:	e7e9      	b.n	80044ce <_fwalk_reent+0x12>

080044fa <__retarget_lock_init_recursive>:
 80044fa:	4770      	bx	lr

080044fc <__retarget_lock_acquire_recursive>:
 80044fc:	4770      	bx	lr

080044fe <__retarget_lock_release_recursive>:
 80044fe:	4770      	bx	lr

08004500 <__swhatbuf_r>:
 8004500:	b570      	push	{r4, r5, r6, lr}
 8004502:	460e      	mov	r6, r1
 8004504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004508:	4614      	mov	r4, r2
 800450a:	2900      	cmp	r1, #0
 800450c:	461d      	mov	r5, r3
 800450e:	b096      	sub	sp, #88	; 0x58
 8004510:	da08      	bge.n	8004524 <__swhatbuf_r+0x24>
 8004512:	2200      	movs	r2, #0
 8004514:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004518:	602a      	str	r2, [r5, #0]
 800451a:	061a      	lsls	r2, r3, #24
 800451c:	d410      	bmi.n	8004540 <__swhatbuf_r+0x40>
 800451e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004522:	e00e      	b.n	8004542 <__swhatbuf_r+0x42>
 8004524:	466a      	mov	r2, sp
 8004526:	f000 f9a3 	bl	8004870 <_fstat_r>
 800452a:	2800      	cmp	r0, #0
 800452c:	dbf1      	blt.n	8004512 <__swhatbuf_r+0x12>
 800452e:	9a01      	ldr	r2, [sp, #4]
 8004530:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004534:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004538:	425a      	negs	r2, r3
 800453a:	415a      	adcs	r2, r3
 800453c:	602a      	str	r2, [r5, #0]
 800453e:	e7ee      	b.n	800451e <__swhatbuf_r+0x1e>
 8004540:	2340      	movs	r3, #64	; 0x40
 8004542:	2000      	movs	r0, #0
 8004544:	6023      	str	r3, [r4, #0]
 8004546:	b016      	add	sp, #88	; 0x58
 8004548:	bd70      	pop	{r4, r5, r6, pc}
	...

0800454c <__smakebuf_r>:
 800454c:	898b      	ldrh	r3, [r1, #12]
 800454e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004550:	079d      	lsls	r5, r3, #30
 8004552:	4606      	mov	r6, r0
 8004554:	460c      	mov	r4, r1
 8004556:	d507      	bpl.n	8004568 <__smakebuf_r+0x1c>
 8004558:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800455c:	6023      	str	r3, [r4, #0]
 800455e:	6123      	str	r3, [r4, #16]
 8004560:	2301      	movs	r3, #1
 8004562:	6163      	str	r3, [r4, #20]
 8004564:	b002      	add	sp, #8
 8004566:	bd70      	pop	{r4, r5, r6, pc}
 8004568:	466a      	mov	r2, sp
 800456a:	ab01      	add	r3, sp, #4
 800456c:	f7ff ffc8 	bl	8004500 <__swhatbuf_r>
 8004570:	9900      	ldr	r1, [sp, #0]
 8004572:	4605      	mov	r5, r0
 8004574:	4630      	mov	r0, r6
 8004576:	f000 f891 	bl	800469c <_malloc_r>
 800457a:	b948      	cbnz	r0, 8004590 <__smakebuf_r+0x44>
 800457c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004580:	059a      	lsls	r2, r3, #22
 8004582:	d4ef      	bmi.n	8004564 <__smakebuf_r+0x18>
 8004584:	f023 0303 	bic.w	r3, r3, #3
 8004588:	f043 0302 	orr.w	r3, r3, #2
 800458c:	81a3      	strh	r3, [r4, #12]
 800458e:	e7e3      	b.n	8004558 <__smakebuf_r+0xc>
 8004590:	4b0d      	ldr	r3, [pc, #52]	; (80045c8 <__smakebuf_r+0x7c>)
 8004592:	62b3      	str	r3, [r6, #40]	; 0x28
 8004594:	89a3      	ldrh	r3, [r4, #12]
 8004596:	6020      	str	r0, [r4, #0]
 8004598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800459c:	81a3      	strh	r3, [r4, #12]
 800459e:	9b00      	ldr	r3, [sp, #0]
 80045a0:	6120      	str	r0, [r4, #16]
 80045a2:	6163      	str	r3, [r4, #20]
 80045a4:	9b01      	ldr	r3, [sp, #4]
 80045a6:	b15b      	cbz	r3, 80045c0 <__smakebuf_r+0x74>
 80045a8:	4630      	mov	r0, r6
 80045aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045ae:	f000 f971 	bl	8004894 <_isatty_r>
 80045b2:	b128      	cbz	r0, 80045c0 <__smakebuf_r+0x74>
 80045b4:	89a3      	ldrh	r3, [r4, #12]
 80045b6:	f023 0303 	bic.w	r3, r3, #3
 80045ba:	f043 0301 	orr.w	r3, r3, #1
 80045be:	81a3      	strh	r3, [r4, #12]
 80045c0:	89a0      	ldrh	r0, [r4, #12]
 80045c2:	4305      	orrs	r5, r0
 80045c4:	81a5      	strh	r5, [r4, #12]
 80045c6:	e7cd      	b.n	8004564 <__smakebuf_r+0x18>
 80045c8:	08004359 	.word	0x08004359

080045cc <_free_r>:
 80045cc:	b538      	push	{r3, r4, r5, lr}
 80045ce:	4605      	mov	r5, r0
 80045d0:	2900      	cmp	r1, #0
 80045d2:	d040      	beq.n	8004656 <_free_r+0x8a>
 80045d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045d8:	1f0c      	subs	r4, r1, #4
 80045da:	2b00      	cmp	r3, #0
 80045dc:	bfb8      	it	lt
 80045de:	18e4      	addlt	r4, r4, r3
 80045e0:	f000 f97a 	bl	80048d8 <__malloc_lock>
 80045e4:	4a1c      	ldr	r2, [pc, #112]	; (8004658 <_free_r+0x8c>)
 80045e6:	6813      	ldr	r3, [r2, #0]
 80045e8:	b933      	cbnz	r3, 80045f8 <_free_r+0x2c>
 80045ea:	6063      	str	r3, [r4, #4]
 80045ec:	6014      	str	r4, [r2, #0]
 80045ee:	4628      	mov	r0, r5
 80045f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045f4:	f000 b976 	b.w	80048e4 <__malloc_unlock>
 80045f8:	42a3      	cmp	r3, r4
 80045fa:	d908      	bls.n	800460e <_free_r+0x42>
 80045fc:	6820      	ldr	r0, [r4, #0]
 80045fe:	1821      	adds	r1, r4, r0
 8004600:	428b      	cmp	r3, r1
 8004602:	bf01      	itttt	eq
 8004604:	6819      	ldreq	r1, [r3, #0]
 8004606:	685b      	ldreq	r3, [r3, #4]
 8004608:	1809      	addeq	r1, r1, r0
 800460a:	6021      	streq	r1, [r4, #0]
 800460c:	e7ed      	b.n	80045ea <_free_r+0x1e>
 800460e:	461a      	mov	r2, r3
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	b10b      	cbz	r3, 8004618 <_free_r+0x4c>
 8004614:	42a3      	cmp	r3, r4
 8004616:	d9fa      	bls.n	800460e <_free_r+0x42>
 8004618:	6811      	ldr	r1, [r2, #0]
 800461a:	1850      	adds	r0, r2, r1
 800461c:	42a0      	cmp	r0, r4
 800461e:	d10b      	bne.n	8004638 <_free_r+0x6c>
 8004620:	6820      	ldr	r0, [r4, #0]
 8004622:	4401      	add	r1, r0
 8004624:	1850      	adds	r0, r2, r1
 8004626:	4283      	cmp	r3, r0
 8004628:	6011      	str	r1, [r2, #0]
 800462a:	d1e0      	bne.n	80045ee <_free_r+0x22>
 800462c:	6818      	ldr	r0, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	4401      	add	r1, r0
 8004632:	6011      	str	r1, [r2, #0]
 8004634:	6053      	str	r3, [r2, #4]
 8004636:	e7da      	b.n	80045ee <_free_r+0x22>
 8004638:	d902      	bls.n	8004640 <_free_r+0x74>
 800463a:	230c      	movs	r3, #12
 800463c:	602b      	str	r3, [r5, #0]
 800463e:	e7d6      	b.n	80045ee <_free_r+0x22>
 8004640:	6820      	ldr	r0, [r4, #0]
 8004642:	1821      	adds	r1, r4, r0
 8004644:	428b      	cmp	r3, r1
 8004646:	bf01      	itttt	eq
 8004648:	6819      	ldreq	r1, [r3, #0]
 800464a:	685b      	ldreq	r3, [r3, #4]
 800464c:	1809      	addeq	r1, r1, r0
 800464e:	6021      	streq	r1, [r4, #0]
 8004650:	6063      	str	r3, [r4, #4]
 8004652:	6054      	str	r4, [r2, #4]
 8004654:	e7cb      	b.n	80045ee <_free_r+0x22>
 8004656:	bd38      	pop	{r3, r4, r5, pc}
 8004658:	200003e8 	.word	0x200003e8

0800465c <sbrk_aligned>:
 800465c:	b570      	push	{r4, r5, r6, lr}
 800465e:	4e0e      	ldr	r6, [pc, #56]	; (8004698 <sbrk_aligned+0x3c>)
 8004660:	460c      	mov	r4, r1
 8004662:	6831      	ldr	r1, [r6, #0]
 8004664:	4605      	mov	r5, r0
 8004666:	b911      	cbnz	r1, 800466e <sbrk_aligned+0x12>
 8004668:	f000 f88c 	bl	8004784 <_sbrk_r>
 800466c:	6030      	str	r0, [r6, #0]
 800466e:	4621      	mov	r1, r4
 8004670:	4628      	mov	r0, r5
 8004672:	f000 f887 	bl	8004784 <_sbrk_r>
 8004676:	1c43      	adds	r3, r0, #1
 8004678:	d00a      	beq.n	8004690 <sbrk_aligned+0x34>
 800467a:	1cc4      	adds	r4, r0, #3
 800467c:	f024 0403 	bic.w	r4, r4, #3
 8004680:	42a0      	cmp	r0, r4
 8004682:	d007      	beq.n	8004694 <sbrk_aligned+0x38>
 8004684:	1a21      	subs	r1, r4, r0
 8004686:	4628      	mov	r0, r5
 8004688:	f000 f87c 	bl	8004784 <_sbrk_r>
 800468c:	3001      	adds	r0, #1
 800468e:	d101      	bne.n	8004694 <sbrk_aligned+0x38>
 8004690:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004694:	4620      	mov	r0, r4
 8004696:	bd70      	pop	{r4, r5, r6, pc}
 8004698:	200003ec 	.word	0x200003ec

0800469c <_malloc_r>:
 800469c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046a0:	1ccd      	adds	r5, r1, #3
 80046a2:	f025 0503 	bic.w	r5, r5, #3
 80046a6:	3508      	adds	r5, #8
 80046a8:	2d0c      	cmp	r5, #12
 80046aa:	bf38      	it	cc
 80046ac:	250c      	movcc	r5, #12
 80046ae:	2d00      	cmp	r5, #0
 80046b0:	4607      	mov	r7, r0
 80046b2:	db01      	blt.n	80046b8 <_malloc_r+0x1c>
 80046b4:	42a9      	cmp	r1, r5
 80046b6:	d905      	bls.n	80046c4 <_malloc_r+0x28>
 80046b8:	230c      	movs	r3, #12
 80046ba:	2600      	movs	r6, #0
 80046bc:	603b      	str	r3, [r7, #0]
 80046be:	4630      	mov	r0, r6
 80046c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046c4:	4e2e      	ldr	r6, [pc, #184]	; (8004780 <_malloc_r+0xe4>)
 80046c6:	f000 f907 	bl	80048d8 <__malloc_lock>
 80046ca:	6833      	ldr	r3, [r6, #0]
 80046cc:	461c      	mov	r4, r3
 80046ce:	bb34      	cbnz	r4, 800471e <_malloc_r+0x82>
 80046d0:	4629      	mov	r1, r5
 80046d2:	4638      	mov	r0, r7
 80046d4:	f7ff ffc2 	bl	800465c <sbrk_aligned>
 80046d8:	1c43      	adds	r3, r0, #1
 80046da:	4604      	mov	r4, r0
 80046dc:	d14d      	bne.n	800477a <_malloc_r+0xde>
 80046de:	6834      	ldr	r4, [r6, #0]
 80046e0:	4626      	mov	r6, r4
 80046e2:	2e00      	cmp	r6, #0
 80046e4:	d140      	bne.n	8004768 <_malloc_r+0xcc>
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	4631      	mov	r1, r6
 80046ea:	4638      	mov	r0, r7
 80046ec:	eb04 0803 	add.w	r8, r4, r3
 80046f0:	f000 f848 	bl	8004784 <_sbrk_r>
 80046f4:	4580      	cmp	r8, r0
 80046f6:	d13a      	bne.n	800476e <_malloc_r+0xd2>
 80046f8:	6821      	ldr	r1, [r4, #0]
 80046fa:	3503      	adds	r5, #3
 80046fc:	1a6d      	subs	r5, r5, r1
 80046fe:	f025 0503 	bic.w	r5, r5, #3
 8004702:	3508      	adds	r5, #8
 8004704:	2d0c      	cmp	r5, #12
 8004706:	bf38      	it	cc
 8004708:	250c      	movcc	r5, #12
 800470a:	4638      	mov	r0, r7
 800470c:	4629      	mov	r1, r5
 800470e:	f7ff ffa5 	bl	800465c <sbrk_aligned>
 8004712:	3001      	adds	r0, #1
 8004714:	d02b      	beq.n	800476e <_malloc_r+0xd2>
 8004716:	6823      	ldr	r3, [r4, #0]
 8004718:	442b      	add	r3, r5
 800471a:	6023      	str	r3, [r4, #0]
 800471c:	e00e      	b.n	800473c <_malloc_r+0xa0>
 800471e:	6822      	ldr	r2, [r4, #0]
 8004720:	1b52      	subs	r2, r2, r5
 8004722:	d41e      	bmi.n	8004762 <_malloc_r+0xc6>
 8004724:	2a0b      	cmp	r2, #11
 8004726:	d916      	bls.n	8004756 <_malloc_r+0xba>
 8004728:	1961      	adds	r1, r4, r5
 800472a:	42a3      	cmp	r3, r4
 800472c:	6025      	str	r5, [r4, #0]
 800472e:	bf18      	it	ne
 8004730:	6059      	strne	r1, [r3, #4]
 8004732:	6863      	ldr	r3, [r4, #4]
 8004734:	bf08      	it	eq
 8004736:	6031      	streq	r1, [r6, #0]
 8004738:	5162      	str	r2, [r4, r5]
 800473a:	604b      	str	r3, [r1, #4]
 800473c:	4638      	mov	r0, r7
 800473e:	f104 060b 	add.w	r6, r4, #11
 8004742:	f000 f8cf 	bl	80048e4 <__malloc_unlock>
 8004746:	f026 0607 	bic.w	r6, r6, #7
 800474a:	1d23      	adds	r3, r4, #4
 800474c:	1af2      	subs	r2, r6, r3
 800474e:	d0b6      	beq.n	80046be <_malloc_r+0x22>
 8004750:	1b9b      	subs	r3, r3, r6
 8004752:	50a3      	str	r3, [r4, r2]
 8004754:	e7b3      	b.n	80046be <_malloc_r+0x22>
 8004756:	6862      	ldr	r2, [r4, #4]
 8004758:	42a3      	cmp	r3, r4
 800475a:	bf0c      	ite	eq
 800475c:	6032      	streq	r2, [r6, #0]
 800475e:	605a      	strne	r2, [r3, #4]
 8004760:	e7ec      	b.n	800473c <_malloc_r+0xa0>
 8004762:	4623      	mov	r3, r4
 8004764:	6864      	ldr	r4, [r4, #4]
 8004766:	e7b2      	b.n	80046ce <_malloc_r+0x32>
 8004768:	4634      	mov	r4, r6
 800476a:	6876      	ldr	r6, [r6, #4]
 800476c:	e7b9      	b.n	80046e2 <_malloc_r+0x46>
 800476e:	230c      	movs	r3, #12
 8004770:	4638      	mov	r0, r7
 8004772:	603b      	str	r3, [r7, #0]
 8004774:	f000 f8b6 	bl	80048e4 <__malloc_unlock>
 8004778:	e7a1      	b.n	80046be <_malloc_r+0x22>
 800477a:	6025      	str	r5, [r4, #0]
 800477c:	e7de      	b.n	800473c <_malloc_r+0xa0>
 800477e:	bf00      	nop
 8004780:	200003e8 	.word	0x200003e8

08004784 <_sbrk_r>:
 8004784:	b538      	push	{r3, r4, r5, lr}
 8004786:	2300      	movs	r3, #0
 8004788:	4d05      	ldr	r5, [pc, #20]	; (80047a0 <_sbrk_r+0x1c>)
 800478a:	4604      	mov	r4, r0
 800478c:	4608      	mov	r0, r1
 800478e:	602b      	str	r3, [r5, #0]
 8004790:	f7fc fb8e 	bl	8000eb0 <_sbrk>
 8004794:	1c43      	adds	r3, r0, #1
 8004796:	d102      	bne.n	800479e <_sbrk_r+0x1a>
 8004798:	682b      	ldr	r3, [r5, #0]
 800479a:	b103      	cbz	r3, 800479e <_sbrk_r+0x1a>
 800479c:	6023      	str	r3, [r4, #0]
 800479e:	bd38      	pop	{r3, r4, r5, pc}
 80047a0:	200003f0 	.word	0x200003f0

080047a4 <__sread>:
 80047a4:	b510      	push	{r4, lr}
 80047a6:	460c      	mov	r4, r1
 80047a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047ac:	f000 f8a0 	bl	80048f0 <_read_r>
 80047b0:	2800      	cmp	r0, #0
 80047b2:	bfab      	itete	ge
 80047b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80047b6:	89a3      	ldrhlt	r3, [r4, #12]
 80047b8:	181b      	addge	r3, r3, r0
 80047ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80047be:	bfac      	ite	ge
 80047c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80047c2:	81a3      	strhlt	r3, [r4, #12]
 80047c4:	bd10      	pop	{r4, pc}

080047c6 <__swrite>:
 80047c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047ca:	461f      	mov	r7, r3
 80047cc:	898b      	ldrh	r3, [r1, #12]
 80047ce:	4605      	mov	r5, r0
 80047d0:	05db      	lsls	r3, r3, #23
 80047d2:	460c      	mov	r4, r1
 80047d4:	4616      	mov	r6, r2
 80047d6:	d505      	bpl.n	80047e4 <__swrite+0x1e>
 80047d8:	2302      	movs	r3, #2
 80047da:	2200      	movs	r2, #0
 80047dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047e0:	f000 f868 	bl	80048b4 <_lseek_r>
 80047e4:	89a3      	ldrh	r3, [r4, #12]
 80047e6:	4632      	mov	r2, r6
 80047e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047ec:	81a3      	strh	r3, [r4, #12]
 80047ee:	4628      	mov	r0, r5
 80047f0:	463b      	mov	r3, r7
 80047f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047fa:	f000 b817 	b.w	800482c <_write_r>

080047fe <__sseek>:
 80047fe:	b510      	push	{r4, lr}
 8004800:	460c      	mov	r4, r1
 8004802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004806:	f000 f855 	bl	80048b4 <_lseek_r>
 800480a:	1c43      	adds	r3, r0, #1
 800480c:	89a3      	ldrh	r3, [r4, #12]
 800480e:	bf15      	itete	ne
 8004810:	6560      	strne	r0, [r4, #84]	; 0x54
 8004812:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004816:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800481a:	81a3      	strheq	r3, [r4, #12]
 800481c:	bf18      	it	ne
 800481e:	81a3      	strhne	r3, [r4, #12]
 8004820:	bd10      	pop	{r4, pc}

08004822 <__sclose>:
 8004822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004826:	f000 b813 	b.w	8004850 <_close_r>
	...

0800482c <_write_r>:
 800482c:	b538      	push	{r3, r4, r5, lr}
 800482e:	4604      	mov	r4, r0
 8004830:	4608      	mov	r0, r1
 8004832:	4611      	mov	r1, r2
 8004834:	2200      	movs	r2, #0
 8004836:	4d05      	ldr	r5, [pc, #20]	; (800484c <_write_r+0x20>)
 8004838:	602a      	str	r2, [r5, #0]
 800483a:	461a      	mov	r2, r3
 800483c:	f7fb fcca 	bl	80001d4 <_write>
 8004840:	1c43      	adds	r3, r0, #1
 8004842:	d102      	bne.n	800484a <_write_r+0x1e>
 8004844:	682b      	ldr	r3, [r5, #0]
 8004846:	b103      	cbz	r3, 800484a <_write_r+0x1e>
 8004848:	6023      	str	r3, [r4, #0]
 800484a:	bd38      	pop	{r3, r4, r5, pc}
 800484c:	200003f0 	.word	0x200003f0

08004850 <_close_r>:
 8004850:	b538      	push	{r3, r4, r5, lr}
 8004852:	2300      	movs	r3, #0
 8004854:	4d05      	ldr	r5, [pc, #20]	; (800486c <_close_r+0x1c>)
 8004856:	4604      	mov	r4, r0
 8004858:	4608      	mov	r0, r1
 800485a:	602b      	str	r3, [r5, #0]
 800485c:	f7fc faf7 	bl	8000e4e <_close>
 8004860:	1c43      	adds	r3, r0, #1
 8004862:	d102      	bne.n	800486a <_close_r+0x1a>
 8004864:	682b      	ldr	r3, [r5, #0]
 8004866:	b103      	cbz	r3, 800486a <_close_r+0x1a>
 8004868:	6023      	str	r3, [r4, #0]
 800486a:	bd38      	pop	{r3, r4, r5, pc}
 800486c:	200003f0 	.word	0x200003f0

08004870 <_fstat_r>:
 8004870:	b538      	push	{r3, r4, r5, lr}
 8004872:	2300      	movs	r3, #0
 8004874:	4d06      	ldr	r5, [pc, #24]	; (8004890 <_fstat_r+0x20>)
 8004876:	4604      	mov	r4, r0
 8004878:	4608      	mov	r0, r1
 800487a:	4611      	mov	r1, r2
 800487c:	602b      	str	r3, [r5, #0]
 800487e:	f7fc faf1 	bl	8000e64 <_fstat>
 8004882:	1c43      	adds	r3, r0, #1
 8004884:	d102      	bne.n	800488c <_fstat_r+0x1c>
 8004886:	682b      	ldr	r3, [r5, #0]
 8004888:	b103      	cbz	r3, 800488c <_fstat_r+0x1c>
 800488a:	6023      	str	r3, [r4, #0]
 800488c:	bd38      	pop	{r3, r4, r5, pc}
 800488e:	bf00      	nop
 8004890:	200003f0 	.word	0x200003f0

08004894 <_isatty_r>:
 8004894:	b538      	push	{r3, r4, r5, lr}
 8004896:	2300      	movs	r3, #0
 8004898:	4d05      	ldr	r5, [pc, #20]	; (80048b0 <_isatty_r+0x1c>)
 800489a:	4604      	mov	r4, r0
 800489c:	4608      	mov	r0, r1
 800489e:	602b      	str	r3, [r5, #0]
 80048a0:	f7fc faef 	bl	8000e82 <_isatty>
 80048a4:	1c43      	adds	r3, r0, #1
 80048a6:	d102      	bne.n	80048ae <_isatty_r+0x1a>
 80048a8:	682b      	ldr	r3, [r5, #0]
 80048aa:	b103      	cbz	r3, 80048ae <_isatty_r+0x1a>
 80048ac:	6023      	str	r3, [r4, #0]
 80048ae:	bd38      	pop	{r3, r4, r5, pc}
 80048b0:	200003f0 	.word	0x200003f0

080048b4 <_lseek_r>:
 80048b4:	b538      	push	{r3, r4, r5, lr}
 80048b6:	4604      	mov	r4, r0
 80048b8:	4608      	mov	r0, r1
 80048ba:	4611      	mov	r1, r2
 80048bc:	2200      	movs	r2, #0
 80048be:	4d05      	ldr	r5, [pc, #20]	; (80048d4 <_lseek_r+0x20>)
 80048c0:	602a      	str	r2, [r5, #0]
 80048c2:	461a      	mov	r2, r3
 80048c4:	f7fc fae7 	bl	8000e96 <_lseek>
 80048c8:	1c43      	adds	r3, r0, #1
 80048ca:	d102      	bne.n	80048d2 <_lseek_r+0x1e>
 80048cc:	682b      	ldr	r3, [r5, #0]
 80048ce:	b103      	cbz	r3, 80048d2 <_lseek_r+0x1e>
 80048d0:	6023      	str	r3, [r4, #0]
 80048d2:	bd38      	pop	{r3, r4, r5, pc}
 80048d4:	200003f0 	.word	0x200003f0

080048d8 <__malloc_lock>:
 80048d8:	4801      	ldr	r0, [pc, #4]	; (80048e0 <__malloc_lock+0x8>)
 80048da:	f7ff be0f 	b.w	80044fc <__retarget_lock_acquire_recursive>
 80048de:	bf00      	nop
 80048e0:	200003e4 	.word	0x200003e4

080048e4 <__malloc_unlock>:
 80048e4:	4801      	ldr	r0, [pc, #4]	; (80048ec <__malloc_unlock+0x8>)
 80048e6:	f7ff be0a 	b.w	80044fe <__retarget_lock_release_recursive>
 80048ea:	bf00      	nop
 80048ec:	200003e4 	.word	0x200003e4

080048f0 <_read_r>:
 80048f0:	b538      	push	{r3, r4, r5, lr}
 80048f2:	4604      	mov	r4, r0
 80048f4:	4608      	mov	r0, r1
 80048f6:	4611      	mov	r1, r2
 80048f8:	2200      	movs	r2, #0
 80048fa:	4d05      	ldr	r5, [pc, #20]	; (8004910 <_read_r+0x20>)
 80048fc:	602a      	str	r2, [r5, #0]
 80048fe:	461a      	mov	r2, r3
 8004900:	f7fc fa88 	bl	8000e14 <_read>
 8004904:	1c43      	adds	r3, r0, #1
 8004906:	d102      	bne.n	800490e <_read_r+0x1e>
 8004908:	682b      	ldr	r3, [r5, #0]
 800490a:	b103      	cbz	r3, 800490e <_read_r+0x1e>
 800490c:	6023      	str	r3, [r4, #0]
 800490e:	bd38      	pop	{r3, r4, r5, pc}
 8004910:	200003f0 	.word	0x200003f0

08004914 <_init>:
 8004914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004916:	bf00      	nop
 8004918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800491a:	bc08      	pop	{r3}
 800491c:	469e      	mov	lr, r3
 800491e:	4770      	bx	lr

08004920 <_fini>:
 8004920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004922:	bf00      	nop
 8004924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004926:	bc08      	pop	{r3}
 8004928:	469e      	mov	lr, r3
 800492a:	4770      	bx	lr
