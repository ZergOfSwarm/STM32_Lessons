
VS1053B_W25Q128_103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000481c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08004928  08004928  00014928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ad4  08004ad4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004ad4  08004ad4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ad4  08004ad4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ad4  08004ad4  00014ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ad8  08004ad8  00014ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004adc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  20000074  08004b50  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  08004b50  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff30  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002637  00000000  00000000  0002ffcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  00032608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec0  00000000  00000000  000335c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019224  00000000  00000000  00034480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000110ac  00000000  00000000  0004d6a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dfea  00000000  00000000  0005e750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec73a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004898  00000000  00000000  000ec78c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08004910 	.word	0x08004910

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08004910 	.word	0x08004910

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800016c:	f003 0301 	and.w	r3, r3, #1
 8000170:	2b00      	cmp	r3, #0
 8000172:	d013      	beq.n	800019c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000174:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000178:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800017c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000180:	2b00      	cmp	r3, #0
 8000182:	d00b      	beq.n	800019c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000184:	e000      	b.n	8000188 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000186:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000188:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d0f9      	beq.n	8000186 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000192:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000196:	687a      	ldr	r2, [r7, #4]
 8000198:	b2d2      	uxtb	r2, r2
 800019a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800019c:	687b      	ldr	r3, [r7, #4]
}
 800019e:	4618      	mov	r0, r3
 80001a0:	370c      	adds	r7, #12
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <send_uart>:
static void MX_DMA_Init(void);
static void MX_SPI1_Init(void);
static void MX_SPI2_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void send_uart(unsigned char *string) {
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b084      	sub	sp, #16
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
	uint16_t len = strlen((const char*) string);
 80001b0:	6878      	ldr	r0, [r7, #4]
 80001b2:	f7ff ffcb 	bl	800014c <strlen>
 80001b6:	4603      	mov	r3, r0
 80001b8:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart1, (uint8_t*) string, len, HAL_MAX_DELAY); // transmit in blocking mode
 80001ba:	89fa      	ldrh	r2, [r7, #14]
 80001bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80001c0:	6879      	ldr	r1, [r7, #4]
 80001c2:	4803      	ldr	r0, [pc, #12]	; (80001d0 <send_uart+0x28>)
 80001c4:	f002 fde4 	bl	8002d90 <HAL_UART_Transmit>
}
 80001c8:	bf00      	nop
 80001ca:	3710      	adds	r7, #16
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}
 80001d0:	20000248 	.word	0x20000248

080001d4 <_write>:

int _write(int file, char *ptr, int len) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af00      	add	r7, sp, #0
 80001da:	60f8      	str	r0, [r7, #12]
 80001dc:	60b9      	str	r1, [r7, #8]
 80001de:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 50);
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	b29a      	uxth	r2, r3
 80001e4:	2332      	movs	r3, #50	; 0x32
 80001e6:	68b9      	ldr	r1, [r7, #8]
 80001e8:	480c      	ldr	r0, [pc, #48]	; (800021c <_write+0x48>)
 80001ea:	f002 fdd1 	bl	8002d90 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 80001ee:	2300      	movs	r3, #0
 80001f0:	617b      	str	r3, [r7, #20]
 80001f2:	e009      	b.n	8000208 <_write+0x34>
		ITM_SendChar(*ptr++);
 80001f4:	68bb      	ldr	r3, [r7, #8]
 80001f6:	1c5a      	adds	r2, r3, #1
 80001f8:	60ba      	str	r2, [r7, #8]
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	4618      	mov	r0, r3
 80001fe:	f7ff ffad 	bl	800015c <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8000202:	697b      	ldr	r3, [r7, #20]
 8000204:	3301      	adds	r3, #1
 8000206:	617b      	str	r3, [r7, #20]
 8000208:	697a      	ldr	r2, [r7, #20]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	429a      	cmp	r2, r3
 800020e:	dbf1      	blt.n	80001f4 <_write+0x20>
	}
	return len;
 8000210:	687b      	ldr	r3, [r7, #4]
}
 8000212:	4618      	mov	r0, r3
 8000214:	3718      	adds	r7, #24
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	20000248 	.word	0x20000248

08000220 <play_music.0>:
  MX_DMA_Init();
  MX_SPI1_Init();
  MX_SPI2_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
	void play_music(uint32_t addr_pointer, uint32_t song_end_addr) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	f8c7 c004 	str.w	ip, [r7, #4]
		while (addr_pointer < song_end_addr) {
 800022e:	e058      	b.n	80002e2 <play_music.0+0xc2>
			if (next_page_flag) {
 8000230:	4b30      	ldr	r3, [pc, #192]	; (80002f4 <play_music.0+0xd4>)
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d01a      	beq.n	800026e <play_music.0+0x4e>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000238:	2200      	movs	r2, #0
 800023a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800023e:	482e      	ldr	r0, [pc, #184]	; (80002f8 <play_music.0+0xd8>)
 8000240:	f001 fe30 	bl	8001ea4 <HAL_GPIO_WritePin>
				flash_read_page(music_buf, addr_pointer, 255);
 8000244:	22ff      	movs	r2, #255	; 0xff
 8000246:	68f9      	ldr	r1, [r7, #12]
 8000248:	482c      	ldr	r0, [pc, #176]	; (80002fc <play_music.0+0xdc>)
 800024a:	f001 f831 	bl	80012b0 <flash_read_page>
				page_pointer = 0;
 800024e:	4b2c      	ldr	r3, [pc, #176]	; (8000300 <play_music.0+0xe0>)
 8000250:	2200      	movs	r2, #0
 8000252:	701a      	strb	r2, [r3, #0]
				addr_pointer += 256;
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800025a:	60fb      	str	r3, [r7, #12]
				next_page_flag = false;
 800025c:	4b25      	ldr	r3, [pc, #148]	; (80002f4 <play_music.0+0xd4>)
 800025e:	2200      	movs	r2, #0
 8000260:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000262:	2201      	movs	r2, #1
 8000264:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000268:	4823      	ldr	r0, [pc, #140]	; (80002f8 <play_music.0+0xd8>)
 800026a:	f001 fe1b 	bl	8001ea4 <HAL_GPIO_WritePin>
			}
			if (vs1053_isDataReq()) {
 800026e:	f000 ff11 	bl	8001094 <vs1053_isDataReq>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d034      	beq.n	80002e2 <play_music.0+0xc2>
				if (!pause_flag && !stop_flag) {
 8000278:	4b22      	ldr	r3, [pc, #136]	; (8000304 <play_music.0+0xe4>)
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	f083 0301 	eor.w	r3, r3, #1
 8000280:	b2db      	uxtb	r3, r3
 8000282:	2b00      	cmp	r3, #0
 8000284:	d025      	beq.n	80002d2 <play_music.0+0xb2>
 8000286:	4b20      	ldr	r3, [pc, #128]	; (8000308 <play_music.0+0xe8>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	f083 0301 	eor.w	r3, r3, #1
 800028e:	b2db      	uxtb	r3, r3
 8000290:	2b00      	cmp	r3, #0
 8000292:	d01e      	beq.n	80002d2 <play_music.0+0xb2>
					vs1053_send32(&(music_buf[page_pointer]));
 8000294:	4b1a      	ldr	r3, [pc, #104]	; (8000300 <play_music.0+0xe0>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	461a      	mov	r2, r3
 800029a:	4b18      	ldr	r3, [pc, #96]	; (80002fc <play_music.0+0xdc>)
 800029c:	4413      	add	r3, r2
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 ff0a 	bl	80010b8 <vs1053_send32>
					if (page_pointer < 193) {
 80002a4:	4b16      	ldr	r3, [pc, #88]	; (8000300 <play_music.0+0xe0>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	2bc0      	cmp	r3, #192	; 0xc0
 80002aa:	d806      	bhi.n	80002ba <play_music.0+0x9a>
						page_pointer += 32;
 80002ac:	4b14      	ldr	r3, [pc, #80]	; (8000300 <play_music.0+0xe0>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	3320      	adds	r3, #32
 80002b2:	b2da      	uxtb	r2, r3
 80002b4:	4b12      	ldr	r3, [pc, #72]	; (8000300 <play_music.0+0xe0>)
 80002b6:	701a      	strb	r2, [r3, #0]
 80002b8:	e002      	b.n	80002c0 <play_music.0+0xa0>
					} else {
						next_page_flag = true;
 80002ba:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <play_music.0+0xd4>)
 80002bc:	2201      	movs	r2, #1
 80002be:	701a      	strb	r2, [r3, #0]
					}
					if (next_page_flag && addr_pointer >= song_end_addr) {
 80002c0:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <play_music.0+0xd4>)
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d00c      	beq.n	80002e2 <play_music.0+0xc2>
 80002c8:	68fa      	ldr	r2, [r7, #12]
 80002ca:	68bb      	ldr	r3, [r7, #8]
 80002cc:	429a      	cmp	r2, r3
 80002ce:	d20d      	bcs.n	80002ec <play_music.0+0xcc>
 80002d0:	e007      	b.n	80002e2 <play_music.0+0xc2>
					}
				}
//				else if (pause_flag) {
//					//HAL_Delay(3000);
//				}
				else if (stop_flag) {
 80002d2:	4b0d      	ldr	r3, [pc, #52]	; (8000308 <play_music.0+0xe8>)
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d003      	beq.n	80002e2 <play_music.0+0xc2>
					stop_flag = false;
 80002da:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <play_music.0+0xe8>)
 80002dc:	2200      	movs	r2, #0
 80002de:	701a      	strb	r2, [r3, #0]
					return;
 80002e0:	e005      	b.n	80002ee <play_music.0+0xce>
		while (addr_pointer < song_end_addr) {
 80002e2:	68fa      	ldr	r2, [r7, #12]
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	429a      	cmp	r2, r3
 80002e8:	d3a2      	bcc.n	8000230 <play_music.0+0x10>
 80002ea:	e000      	b.n	80002ee <play_music.0+0xce>
						break;
 80002ec:	bf00      	nop
				}
			}
		}
	}
 80002ee:	3710      	adds	r7, #16
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	20000000 	.word	0x20000000
 80002f8:	40011000 	.word	0x40011000
 80002fc:	20000090 	.word	0x20000090
 8000300:	20000190 	.word	0x20000190
 8000304:	20000191 	.word	0x20000191
 8000308:	20000192 	.word	0x20000192

0800030c <main>:
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
int main(void)
 8000312:	f107 0310 	add.w	r3, r7, #16
 8000316:	607b      	str	r3, [r7, #4]
  HAL_Init();
 8000318:	f001 f868 	bl	80013ec <HAL_Init>
  SystemClock_Config();
 800031c:	f000 f8b8 	bl	8000490 <SystemClock_Config>
  MX_GPIO_Init();
 8000320:	f000 f9b8 	bl	8000694 <MX_GPIO_Init>
  MX_DMA_Init();
 8000324:	f000 f990 	bl	8000648 <MX_DMA_Init>
  MX_SPI1_Init();
 8000328:	f000 f8f8 	bl	800051c <MX_SPI1_Init>
  MX_SPI2_Init();
 800032c:	f000 f92c 	bl	8000588 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000330:	f000 f960 	bl	80005f4 <MX_USART1_UART_Init>

	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuf, sizeof(RxBuf));
 8000334:	2210      	movs	r2, #16
 8000336:	4947      	ldr	r1, [pc, #284]	; (8000454 <main+0x148>)
 8000338:	4847      	ldr	r0, [pc, #284]	; (8000458 <main+0x14c>)
 800033a:	f002 fdac 	bl	8002e96 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT); // По дефолту HAL активирует прерывания! Мы отключим половину этих функций.
 800033e:	4b47      	ldr	r3, [pc, #284]	; (800045c <main+0x150>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	681a      	ldr	r2, [r3, #0]
 8000344:	4b45      	ldr	r3, [pc, #276]	; (800045c <main+0x150>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	f022 0204 	bic.w	r2, r2, #4
 800034c:	601a      	str	r2, [r3, #0]

	SPI1->CR1 |= SPI_CR1_SPE;
 800034e:	4b44      	ldr	r3, [pc, #272]	; (8000460 <main+0x154>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4a43      	ldr	r2, [pc, #268]	; (8000460 <main+0x154>)
 8000354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000358:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |= SPI_CR1_SPE;
 800035a:	4b42      	ldr	r3, [pc, #264]	; (8000464 <main+0x158>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	4a41      	ldr	r2, [pc, #260]	; (8000464 <main+0x158>)
 8000360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000364:	6013      	str	r3, [r2, #0]
	vs1053_init();
 8000366:	f000 fe11 	bl	8000f8c <vs1053_init>
	vs1053_reset();
 800036a:	f000 fe2f 	bl	8000fcc <vs1053_reset>
	flash_reset();
 800036e:	f000 ff77 	bl	8001260 <flash_reset>
	if (get_flash_id())
 8000372:	f000 ffe1 	bl	8001338 <get_flash_id>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d002      	beq.n	8000382 <main+0x76>
		printf("Hello world! \r\n");
 800037c:	483a      	ldr	r0, [pc, #232]	; (8000468 <main+0x15c>)
 800037e:	f003 fda5 	bl	8003ecc <puts>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (strlen((const char*) MainBuf) != 0) {
 8000382:	4b3a      	ldr	r3, [pc, #232]	; (800046c <main+0x160>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d0fb      	beq.n	8000382 <main+0x76>
			// Скопируем содержимое MainBuf от oldPos до newPos в rangeBuf
			memcpy(rangeBuf, MainBuf + oldPos, newPos - oldPos + 1);
 800038a:	4b39      	ldr	r3, [pc, #228]	; (8000470 <main+0x164>)
 800038c:	881b      	ldrh	r3, [r3, #0]
 800038e:	461a      	mov	r2, r3
 8000390:	4b36      	ldr	r3, [pc, #216]	; (800046c <main+0x160>)
 8000392:	18d1      	adds	r1, r2, r3
 8000394:	4b37      	ldr	r3, [pc, #220]	; (8000474 <main+0x168>)
 8000396:	881b      	ldrh	r3, [r3, #0]
 8000398:	461a      	mov	r2, r3
 800039a:	4b35      	ldr	r3, [pc, #212]	; (8000470 <main+0x164>)
 800039c:	881b      	ldrh	r3, [r3, #0]
 800039e:	1ad3      	subs	r3, r2, r3
 80003a0:	3301      	adds	r3, #1
 80003a2:	461a      	mov	r2, r3
 80003a4:	4834      	ldr	r0, [pc, #208]	; (8000478 <main+0x16c>)
 80003a6:	f003 fd0d 	bl	8003dc4 <memcpy>
			if (strlen((const char*) rangeBuf) != 0) {
 80003aa:	4b33      	ldr	r3, [pc, #204]	; (8000478 <main+0x16c>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d0e7      	beq.n	8000382 <main+0x76>
				send_uart(rangeBuf);
 80003b2:	4831      	ldr	r0, [pc, #196]	; (8000478 <main+0x16c>)
 80003b4:	f7ff fef8 	bl	80001a8 <send_uart>

				if (rangeBuf[0] != '\n' && rangeBuf[0] != '\r'
 80003b8:	4b2f      	ldr	r3, [pc, #188]	; (8000478 <main+0x16c>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	2b0a      	cmp	r3, #10
 80003be:	d00e      	beq.n	80003de <main+0xd2>
 80003c0:	4b2d      	ldr	r3, [pc, #180]	; (8000478 <main+0x16c>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	2b0d      	cmp	r3, #13
 80003c6:	d00a      	beq.n	80003de <main+0xd2>
						&& rangeBuf[0] == '1') {
 80003c8:	4b2b      	ldr	r3, [pc, #172]	; (8000478 <main+0x16c>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	2b31      	cmp	r3, #49	; 0x31
 80003ce:	d106      	bne.n	80003de <main+0xd2>
					play_music(0, 0x455600); // проигрывание музыки в бесконечном цикле
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	469c      	mov	ip, r3
 80003d4:	4929      	ldr	r1, [pc, #164]	; (800047c <main+0x170>)
 80003d6:	2000      	movs	r0, #0
 80003d8:	f7ff ff22 	bl	8000220 <play_music.0>
 80003dc:	e024      	b.n	8000428 <main+0x11c>
				} else if (rangeBuf[0] != '\n' && rangeBuf[0] != '\r'
 80003de:	4b26      	ldr	r3, [pc, #152]	; (8000478 <main+0x16c>)
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	2b0a      	cmp	r3, #10
 80003e4:	d00e      	beq.n	8000404 <main+0xf8>
 80003e6:	4b24      	ldr	r3, [pc, #144]	; (8000478 <main+0x16c>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	2b0d      	cmp	r3, #13
 80003ec:	d00a      	beq.n	8000404 <main+0xf8>
						&& rangeBuf[0] == '2') {
 80003ee:	4b22      	ldr	r3, [pc, #136]	; (8000478 <main+0x16c>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b32      	cmp	r3, #50	; 0x32
 80003f4:	d106      	bne.n	8000404 <main+0xf8>
					play_music(0x46A700, 0x89E600); // проигрывание музыки в бесконечном цикле
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	469c      	mov	ip, r3
 80003fa:	4921      	ldr	r1, [pc, #132]	; (8000480 <main+0x174>)
 80003fc:	4821      	ldr	r0, [pc, #132]	; (8000484 <main+0x178>)
 80003fe:	f7ff ff0f 	bl	8000220 <play_music.0>
 8000402:	e011      	b.n	8000428 <main+0x11c>
				} else if (rangeBuf[0] != '\n' && rangeBuf[0] != '\r'
 8000404:	4b1c      	ldr	r3, [pc, #112]	; (8000478 <main+0x16c>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	2b0a      	cmp	r3, #10
 800040a:	d00d      	beq.n	8000428 <main+0x11c>
 800040c:	4b1a      	ldr	r3, [pc, #104]	; (8000478 <main+0x16c>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b0d      	cmp	r3, #13
 8000412:	d009      	beq.n	8000428 <main+0x11c>
						&& rangeBuf[0] == '3') {
 8000414:	4b18      	ldr	r3, [pc, #96]	; (8000478 <main+0x16c>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2b33      	cmp	r3, #51	; 0x33
 800041a:	d105      	bne.n	8000428 <main+0x11c>
					play_music(0x8B1B00, 0xD65800); // проигрывание музыки в бесконечном цикле
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	469c      	mov	ip, r3
 8000420:	4919      	ldr	r1, [pc, #100]	; (8000488 <main+0x17c>)
 8000422:	481a      	ldr	r0, [pc, #104]	; (800048c <main+0x180>)
 8000424:	f7ff fefc 	bl	8000220 <play_music.0>
				}

				memset(RxBuf, 0, sizeof(RxBuf)); // Очистим перед внесением данных
 8000428:	2210      	movs	r2, #16
 800042a:	2100      	movs	r1, #0
 800042c:	4809      	ldr	r0, [pc, #36]	; (8000454 <main+0x148>)
 800042e:	f003 fcd7 	bl	8003de0 <memset>
				memset(MainBuf, 0, sizeof(MainBuf)); // Очистим
 8000432:	2220      	movs	r2, #32
 8000434:	2100      	movs	r1, #0
 8000436:	480d      	ldr	r0, [pc, #52]	; (800046c <main+0x160>)
 8000438:	f003 fcd2 	bl	8003de0 <memset>
				memset(rangeBuf, 0, sizeof(rangeBuf)); // Очистим
 800043c:	2220      	movs	r2, #32
 800043e:	2100      	movs	r1, #0
 8000440:	480d      	ldr	r0, [pc, #52]	; (8000478 <main+0x16c>)
 8000442:	f003 fccd 	bl	8003de0 <memset>
				oldPos = 0;
 8000446:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <main+0x164>)
 8000448:	2200      	movs	r2, #0
 800044a:	801a      	strh	r2, [r3, #0]
				newPos = 0;
 800044c:	4b09      	ldr	r3, [pc, #36]	; (8000474 <main+0x168>)
 800044e:	2200      	movs	r2, #0
 8000450:	801a      	strh	r2, [r3, #0]
		if (strlen((const char*) MainBuf) != 0) {
 8000452:	e796      	b.n	8000382 <main+0x76>
 8000454:	20000318 	.word	0x20000318
 8000458:	20000248 	.word	0x20000248
 800045c:	20000290 	.word	0x20000290
 8000460:	40013000 	.word	0x40013000
 8000464:	40003800 	.word	0x40003800
 8000468:	08004928 	.word	0x08004928
 800046c:	20000328 	.word	0x20000328
 8000470:	20000388 	.word	0x20000388
 8000474:	2000038a 	.word	0x2000038a
 8000478:	20000348 	.word	0x20000348
 800047c:	00455600 	.word	0x00455600
 8000480:	0089e600 	.word	0x0089e600
 8000484:	0046a700 	.word	0x0046a700
 8000488:	00d65800 	.word	0x00d65800
 800048c:	008b1b00 	.word	0x008b1b00

08000490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b090      	sub	sp, #64	; 0x40
 8000494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000496:	f107 0318 	add.w	r3, r7, #24
 800049a:	2228      	movs	r2, #40	; 0x28
 800049c:	2100      	movs	r1, #0
 800049e:	4618      	mov	r0, r3
 80004a0:	f003 fc9e 	bl	8003de0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]
 80004b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004b2:	2301      	movs	r3, #1
 80004b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004bc:	2300      	movs	r3, #0
 80004be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004c0:	2301      	movs	r3, #1
 80004c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004c4:	2302      	movs	r3, #2
 80004c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d4:	f107 0318 	add.w	r3, r7, #24
 80004d8:	4618      	mov	r0, r3
 80004da:	f001 fcfb 	bl	8001ed4 <HAL_RCC_OscConfig>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004e4:	f000 fa5c 	bl	80009a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e8:	230f      	movs	r3, #15
 80004ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ec:	2302      	movs	r3, #2
 80004ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f0:	2300      	movs	r3, #0
 80004f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004fa:	2300      	movs	r3, #0
 80004fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	2102      	movs	r1, #2
 8000502:	4618      	mov	r0, r3
 8000504:	f001 ff68 	bl	80023d8 <HAL_RCC_ClockConfig>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800050e:	f000 fa47 	bl	80009a0 <Error_Handler>
  }
}
 8000512:	bf00      	nop
 8000514:	3740      	adds	r7, #64	; 0x40
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
	...

0800051c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000520:	4b17      	ldr	r3, [pc, #92]	; (8000580 <MX_SPI1_Init+0x64>)
 8000522:	4a18      	ldr	r2, [pc, #96]	; (8000584 <MX_SPI1_Init+0x68>)
 8000524:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000526:	4b16      	ldr	r3, [pc, #88]	; (8000580 <MX_SPI1_Init+0x64>)
 8000528:	f44f 7282 	mov.w	r2, #260	; 0x104
 800052c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800052e:	4b14      	ldr	r3, [pc, #80]	; (8000580 <MX_SPI1_Init+0x64>)
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000534:	4b12      	ldr	r3, [pc, #72]	; (8000580 <MX_SPI1_Init+0x64>)
 8000536:	2200      	movs	r2, #0
 8000538:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800053a:	4b11      	ldr	r3, [pc, #68]	; (8000580 <MX_SPI1_Init+0x64>)
 800053c:	2202      	movs	r2, #2
 800053e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000540:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <MX_SPI1_Init+0x64>)
 8000542:	2201      	movs	r2, #1
 8000544:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000546:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <MX_SPI1_Init+0x64>)
 8000548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800054c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <MX_SPI1_Init+0x64>)
 8000550:	2238      	movs	r2, #56	; 0x38
 8000552:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000554:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <MX_SPI1_Init+0x64>)
 8000556:	2200      	movs	r2, #0
 8000558:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <MX_SPI1_Init+0x64>)
 800055c:	2200      	movs	r2, #0
 800055e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000560:	4b07      	ldr	r3, [pc, #28]	; (8000580 <MX_SPI1_Init+0x64>)
 8000562:	2200      	movs	r2, #0
 8000564:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <MX_SPI1_Init+0x64>)
 8000568:	220a      	movs	r2, #10
 800056a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800056c:	4804      	ldr	r0, [pc, #16]	; (8000580 <MX_SPI1_Init+0x64>)
 800056e:	f002 f8f1 	bl	8002754 <HAL_SPI_Init>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000578:	f000 fa12 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000198 	.word	0x20000198
 8000584:	40013000 	.word	0x40013000

08000588 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800058c:	4b17      	ldr	r3, [pc, #92]	; (80005ec <MX_SPI2_Init+0x64>)
 800058e:	4a18      	ldr	r2, [pc, #96]	; (80005f0 <MX_SPI2_Init+0x68>)
 8000590:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000592:	4b16      	ldr	r3, [pc, #88]	; (80005ec <MX_SPI2_Init+0x64>)
 8000594:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000598:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800059a:	4b14      	ldr	r3, [pc, #80]	; (80005ec <MX_SPI2_Init+0x64>)
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80005a0:	4b12      	ldr	r3, [pc, #72]	; (80005ec <MX_SPI2_Init+0x64>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80005a6:	4b11      	ldr	r3, [pc, #68]	; (80005ec <MX_SPI2_Init+0x64>)
 80005a8:	2202      	movs	r2, #2
 80005aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <MX_SPI2_Init+0x64>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <MX_SPI2_Init+0x64>)
 80005b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005b8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80005ba:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <MX_SPI2_Init+0x64>)
 80005bc:	2220      	movs	r2, #32
 80005be:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005c0:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <MX_SPI2_Init+0x64>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <MX_SPI2_Init+0x64>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005cc:	4b07      	ldr	r3, [pc, #28]	; (80005ec <MX_SPI2_Init+0x64>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <MX_SPI2_Init+0x64>)
 80005d4:	220a      	movs	r2, #10
 80005d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80005d8:	4804      	ldr	r0, [pc, #16]	; (80005ec <MX_SPI2_Init+0x64>)
 80005da:	f002 f8bb 	bl	8002754 <HAL_SPI_Init>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80005e4:	f000 f9dc 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	200001f0 	.word	0x200001f0
 80005f0:	40003800 	.word	0x40003800

080005f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 80005fa:	4a12      	ldr	r2, [pc, #72]	; (8000644 <MX_USART1_UART_Init+0x50>)
 80005fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 8000600:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000604:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000618:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 800061a:	220c      	movs	r2, #12
 800061c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 800062c:	f002 fb60 	bl	8002cf0 <HAL_UART_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000636:	f000 f9b3 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000248 	.word	0x20000248
 8000644:	40013800 	.word	0x40013800

08000648 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <MX_DMA_Init+0x48>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	4a0f      	ldr	r2, [pc, #60]	; (8000690 <MX_DMA_Init+0x48>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6153      	str	r3, [r2, #20]
 800065a:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <MX_DMA_Init+0x48>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	2100      	movs	r1, #0
 800066a:	200e      	movs	r0, #14
 800066c:	f000 ffc9 	bl	8001602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000670:	200e      	movs	r0, #14
 8000672:	f000 ffe2 	bl	800163a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2100      	movs	r1, #0
 800067a:	200f      	movs	r0, #15
 800067c:	f000 ffc1 	bl	8001602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000680:	200f      	movs	r0, #15
 8000682:	f000 ffda 	bl	800163a <HAL_NVIC_EnableIRQ>

}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000

08000694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 0310 	add.w	r3, r7, #16
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a8:	4b3e      	ldr	r3, [pc, #248]	; (80007a4 <MX_GPIO_Init+0x110>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	4a3d      	ldr	r2, [pc, #244]	; (80007a4 <MX_GPIO_Init+0x110>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6193      	str	r3, [r2, #24]
 80006b4:	4b3b      	ldr	r3, [pc, #236]	; (80007a4 <MX_GPIO_Init+0x110>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	f003 0310 	and.w	r3, r3, #16
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c0:	4b38      	ldr	r3, [pc, #224]	; (80007a4 <MX_GPIO_Init+0x110>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	4a37      	ldr	r2, [pc, #220]	; (80007a4 <MX_GPIO_Init+0x110>)
 80006c6:	f043 0320 	orr.w	r3, r3, #32
 80006ca:	6193      	str	r3, [r2, #24]
 80006cc:	4b35      	ldr	r3, [pc, #212]	; (80007a4 <MX_GPIO_Init+0x110>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	f003 0320 	and.w	r3, r3, #32
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d8:	4b32      	ldr	r3, [pc, #200]	; (80007a4 <MX_GPIO_Init+0x110>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a31      	ldr	r2, [pc, #196]	; (80007a4 <MX_GPIO_Init+0x110>)
 80006de:	f043 0304 	orr.w	r3, r3, #4
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b2f      	ldr	r3, [pc, #188]	; (80007a4 <MX_GPIO_Init+0x110>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f003 0304 	and.w	r3, r3, #4
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f0:	4b2c      	ldr	r3, [pc, #176]	; (80007a4 <MX_GPIO_Init+0x110>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a2b      	ldr	r2, [pc, #172]	; (80007a4 <MX_GPIO_Init+0x110>)
 80006f6:	f043 0308 	orr.w	r3, r3, #8
 80006fa:	6193      	str	r3, [r2, #24]
 80006fc:	4b29      	ldr	r3, [pc, #164]	; (80007a4 <MX_GPIO_Init+0x110>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	f003 0308 	and.w	r3, r3, #8
 8000704:	603b      	str	r3, [r7, #0]
 8000706:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800070e:	4826      	ldr	r0, [pc, #152]	; (80007a8 <MX_GPIO_Init+0x114>)
 8000710:	f001 fbc8 	bl	8001ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	211a      	movs	r1, #26
 8000718:	4824      	ldr	r0, [pc, #144]	; (80007ac <MX_GPIO_Init+0x118>)
 800071a:	f001 fbc3 	bl	8001ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000724:	4822      	ldr	r0, [pc, #136]	; (80007b0 <MX_GPIO_Init+0x11c>)
 8000726:	f001 fbbd 	bl	8001ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800072a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800072e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000730:	2301      	movs	r3, #1
 8000732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000738:	2302      	movs	r3, #2
 800073a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800073c:	f107 0310 	add.w	r3, r7, #16
 8000740:	4619      	mov	r1, r3
 8000742:	4819      	ldr	r0, [pc, #100]	; (80007a8 <MX_GPIO_Init+0x114>)
 8000744:	f001 fa2a 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8000748:	231a      	movs	r3, #26
 800074a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074c:	2301      	movs	r3, #1
 800074e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	2302      	movs	r3, #2
 8000756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000758:	f107 0310 	add.w	r3, r7, #16
 800075c:	4619      	mov	r1, r3
 800075e:	4813      	ldr	r0, [pc, #76]	; (80007ac <MX_GPIO_Init+0x118>)
 8000760:	f001 fa1c 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000764:	2304      	movs	r3, #4
 8000766:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000770:	f107 0310 	add.w	r3, r7, #16
 8000774:	4619      	mov	r1, r3
 8000776:	480d      	ldr	r0, [pc, #52]	; (80007ac <MX_GPIO_Init+0x118>)
 8000778:	f001 fa10 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800077c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000780:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	2301      	movs	r3, #1
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2302      	movs	r3, #2
 800078c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078e:	f107 0310 	add.w	r3, r7, #16
 8000792:	4619      	mov	r1, r3
 8000794:	4806      	ldr	r0, [pc, #24]	; (80007b0 <MX_GPIO_Init+0x11c>)
 8000796:	f001 fa01 	bl	8001b9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800079a:	bf00      	nop
 800079c:	3720      	adds	r7, #32
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40021000 	.word	0x40021000
 80007a8:	40011000 	.word	0x40011000
 80007ac:	40010800 	.word	0x40010800
 80007b0:	40010c00 	.word	0x40010c00

080007b4 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	460b      	mov	r3, r1
 80007be:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1) {
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a5f      	ldr	r2, [pc, #380]	; (8000944 <HAL_UARTEx_RxEventCallback+0x190>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	f040 809e 	bne.w	8000908 <HAL_UARTEx_RxEventCallback+0x154>
		oldPos = newPos;  // Update the last position before copying new data
 80007cc:	4b5e      	ldr	r3, [pc, #376]	; (8000948 <HAL_UARTEx_RxEventCallback+0x194>)
 80007ce:	881a      	ldrh	r2, [r3, #0]
 80007d0:	4b5e      	ldr	r3, [pc, #376]	; (800094c <HAL_UARTEx_RxEventCallback+0x198>)
 80007d2:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (oldPos + Size > MainBuf_SIZE) // If the current position + new data size is greater than the main buffer
 80007d4:	4b5d      	ldr	r3, [pc, #372]	; (800094c <HAL_UARTEx_RxEventCallback+0x198>)
 80007d6:	881b      	ldrh	r3, [r3, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	887b      	ldrh	r3, [r7, #2]
 80007dc:	4413      	add	r3, r2
 80007de:	2b20      	cmp	r3, #32
 80007e0:	dd22      	ble.n	8000828 <HAL_UARTEx_RxEventCallback+0x74>
		{
			uint16_t datatocopy = MainBuf_SIZE - oldPos; // find out how much space is left in the main buffer
 80007e2:	4b5a      	ldr	r3, [pc, #360]	; (800094c <HAL_UARTEx_RxEventCallback+0x198>)
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	f1c3 0320 	rsb	r3, r3, #32
 80007ea:	81fb      	strh	r3, [r7, #14]
			memcpy((uint8_t*) MainBuf + oldPos, RxBuf, datatocopy); // copy data in that remaining space
 80007ec:	4b57      	ldr	r3, [pc, #348]	; (800094c <HAL_UARTEx_RxEventCallback+0x198>)
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	461a      	mov	r2, r3
 80007f2:	4b57      	ldr	r3, [pc, #348]	; (8000950 <HAL_UARTEx_RxEventCallback+0x19c>)
 80007f4:	4413      	add	r3, r2
 80007f6:	89fa      	ldrh	r2, [r7, #14]
 80007f8:	4956      	ldr	r1, [pc, #344]	; (8000954 <HAL_UARTEx_RxEventCallback+0x1a0>)
 80007fa:	4618      	mov	r0, r3
 80007fc:	f003 fae2 	bl	8003dc4 <memcpy>

			oldPos = 0;  // point to the start of the buffer
 8000800:	4b52      	ldr	r3, [pc, #328]	; (800094c <HAL_UARTEx_RxEventCallback+0x198>)
 8000802:	2200      	movs	r2, #0
 8000804:	801a      	strh	r2, [r3, #0]
			memcpy((uint8_t*) MainBuf, (uint8_t*) RxBuf + datatocopy,
 8000806:	89fb      	ldrh	r3, [r7, #14]
 8000808:	4a52      	ldr	r2, [pc, #328]	; (8000954 <HAL_UARTEx_RxEventCallback+0x1a0>)
 800080a:	1899      	adds	r1, r3, r2
					(Size - datatocopy));  // copy the remaining data
 800080c:	887a      	ldrh	r2, [r7, #2]
 800080e:	89fb      	ldrh	r3, [r7, #14]
 8000810:	1ad3      	subs	r3, r2, r3
			memcpy((uint8_t*) MainBuf, (uint8_t*) RxBuf + datatocopy,
 8000812:	461a      	mov	r2, r3
 8000814:	484e      	ldr	r0, [pc, #312]	; (8000950 <HAL_UARTEx_RxEventCallback+0x19c>)
 8000816:	f003 fad5 	bl	8003dc4 <memcpy>
			newPos = (Size - datatocopy);  // update the position
 800081a:	887a      	ldrh	r2, [r7, #2]
 800081c:	89fb      	ldrh	r3, [r7, #14]
 800081e:	1ad3      	subs	r3, r2, r3
 8000820:	b29a      	uxth	r2, r3
 8000822:	4b49      	ldr	r3, [pc, #292]	; (8000948 <HAL_UARTEx_RxEventCallback+0x194>)
 8000824:	801a      	strh	r2, [r3, #0]
 8000826:	e062      	b.n	80008ee <HAL_UARTEx_RxEventCallback+0x13a>

		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else {
			memcpy((uint8_t*) MainBuf + oldPos, RxBuf, Size);
 8000828:	4b48      	ldr	r3, [pc, #288]	; (800094c <HAL_UARTEx_RxEventCallback+0x198>)
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	461a      	mov	r2, r3
 800082e:	4b48      	ldr	r3, [pc, #288]	; (8000950 <HAL_UARTEx_RxEventCallback+0x19c>)
 8000830:	4413      	add	r3, r2
 8000832:	887a      	ldrh	r2, [r7, #2]
 8000834:	4947      	ldr	r1, [pc, #284]	; (8000954 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8000836:	4618      	mov	r0, r3
 8000838:	f003 fac4 	bl	8003dc4 <memcpy>
			newPos = Size + oldPos;
 800083c:	4b43      	ldr	r3, [pc, #268]	; (800094c <HAL_UARTEx_RxEventCallback+0x198>)
 800083e:	881a      	ldrh	r2, [r3, #0]
 8000840:	887b      	ldrh	r3, [r7, #2]
 8000842:	4413      	add	r3, r2
 8000844:	b29a      	uxth	r2, r3
 8000846:	4b40      	ldr	r3, [pc, #256]	; (8000948 <HAL_UARTEx_RxEventCallback+0x194>)
 8000848:	801a      	strh	r2, [r3, #0]
			// Скопируем содержимое MainBuf от oldPos до newPos в rangeBuf
			for (int i = oldPos; i <= newPos; i++) {
 800084a:	4b40      	ldr	r3, [pc, #256]	; (800094c <HAL_UARTEx_RxEventCallback+0x198>)
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	617b      	str	r3, [r7, #20]
 8000850:	e00d      	b.n	800086e <HAL_UARTEx_RxEventCallback+0xba>
				checkBuf[i - oldPos] = MainBuf[i];
 8000852:	4b3e      	ldr	r3, [pc, #248]	; (800094c <HAL_UARTEx_RxEventCallback+0x198>)
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	461a      	mov	r2, r3
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	1a9b      	subs	r3, r3, r2
 800085c:	493c      	ldr	r1, [pc, #240]	; (8000950 <HAL_UARTEx_RxEventCallback+0x19c>)
 800085e:	697a      	ldr	r2, [r7, #20]
 8000860:	440a      	add	r2, r1
 8000862:	7811      	ldrb	r1, [r2, #0]
 8000864:	4a3c      	ldr	r2, [pc, #240]	; (8000958 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8000866:	54d1      	strb	r1, [r2, r3]
			for (int i = oldPos; i <= newPos; i++) {
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	3301      	adds	r3, #1
 800086c:	617b      	str	r3, [r7, #20]
 800086e:	4b36      	ldr	r3, [pc, #216]	; (8000948 <HAL_UARTEx_RxEventCallback+0x194>)
 8000870:	881b      	ldrh	r3, [r3, #0]
 8000872:	461a      	mov	r2, r3
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	4293      	cmp	r3, r2
 8000878:	ddeb      	ble.n	8000852 <HAL_UARTEx_RxEventCallback+0x9e>
			}

			if (checkBuf[0] == 'p') {
 800087a:	4b37      	ldr	r3, [pc, #220]	; (8000958 <HAL_UARTEx_RxEventCallback+0x1a4>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b70      	cmp	r3, #112	; 0x70
 8000880:	d103      	bne.n	800088a <HAL_UARTEx_RxEventCallback+0xd6>
				pause_flag = true;
 8000882:	4b36      	ldr	r3, [pc, #216]	; (800095c <HAL_UARTEx_RxEventCallback+0x1a8>)
 8000884:	2201      	movs	r2, #1
 8000886:	701a      	strb	r2, [r3, #0]
 8000888:	e031      	b.n	80008ee <HAL_UARTEx_RxEventCallback+0x13a>
			} else if (checkBuf[0] == 's') {
 800088a:	4b33      	ldr	r3, [pc, #204]	; (8000958 <HAL_UARTEx_RxEventCallback+0x1a4>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b73      	cmp	r3, #115	; 0x73
 8000890:	d103      	bne.n	800089a <HAL_UARTEx_RxEventCallback+0xe6>
				stop_flag = true;
 8000892:	4b33      	ldr	r3, [pc, #204]	; (8000960 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8000894:	2201      	movs	r2, #1
 8000896:	701a      	strb	r2, [r3, #0]
 8000898:	e029      	b.n	80008ee <HAL_UARTEx_RxEventCallback+0x13a>
			} else if (checkBuf[0] == 'r') {
 800089a:	4b2f      	ldr	r3, [pc, #188]	; (8000958 <HAL_UARTEx_RxEventCallback+0x1a4>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b72      	cmp	r3, #114	; 0x72
 80008a0:	d106      	bne.n	80008b0 <HAL_UARTEx_RxEventCallback+0xfc>
				pause_flag = false;
 80008a2:	4b2e      	ldr	r3, [pc, #184]	; (800095c <HAL_UARTEx_RxEventCallback+0x1a8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
				stop_flag = false;
 80008a8:	4b2d      	ldr	r3, [pc, #180]	; (8000960 <HAL_UARTEx_RxEventCallback+0x1ac>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]
 80008ae:	e01e      	b.n	80008ee <HAL_UARTEx_RxEventCallback+0x13a>
			}else if (strncmp(checkBuf, "vol=", 4) == 0) {
 80008b0:	2204      	movs	r2, #4
 80008b2:	492c      	ldr	r1, [pc, #176]	; (8000964 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80008b4:	4828      	ldr	r0, [pc, #160]	; (8000958 <HAL_UARTEx_RxEventCallback+0x1a4>)
 80008b6:	f003 fb11 	bl	8003edc <strncmp>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d116      	bne.n	80008ee <HAL_UARTEx_RxEventCallback+0x13a>
				// Извлекаем значение переменной
				vol = atoi(checkBuf + 4);
 80008c0:	4b29      	ldr	r3, [pc, #164]	; (8000968 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80008c2:	4618      	mov	r0, r3
 80008c4:	f003 fa50 	bl	8003d68 <atoi>
 80008c8:	4603      	mov	r3, r0
 80008ca:	4a28      	ldr	r2, [pc, #160]	; (800096c <HAL_UARTEx_RxEventCallback+0x1b8>)
 80008cc:	6013      	str	r3, [r2, #0]
				// Меняем значение громкости.
				pause_flag = true;
 80008ce:	4b23      	ldr	r3, [pc, #140]	; (800095c <HAL_UARTEx_RxEventCallback+0x1a8>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	701a      	strb	r2, [r3, #0]
				vs1053_setvolume(vol,vol);
 80008d4:	4b25      	ldr	r3, [pc, #148]	; (800096c <HAL_UARTEx_RxEventCallback+0x1b8>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	4a24      	ldr	r2, [pc, #144]	; (800096c <HAL_UARTEx_RxEventCallback+0x1b8>)
 80008dc:	6812      	ldr	r2, [r2, #0]
 80008de:	b2d2      	uxtb	r2, r2
 80008e0:	4611      	mov	r1, r2
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 fc0e 	bl	8001104 <vs1053_setvolume>
				pause_flag = false;
 80008e8:	4b1c      	ldr	r3, [pc, #112]	; (800095c <HAL_UARTEx_RxEventCallback+0x1a8>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	701a      	strb	r2, [r3, #0]
			}
		}

		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) RxBuf, RxBuf_SIZE);
 80008ee:	2210      	movs	r2, #16
 80008f0:	4918      	ldr	r1, [pc, #96]	; (8000954 <HAL_UARTEx_RxEventCallback+0x1a0>)
 80008f2:	481f      	ldr	r0, [pc, #124]	; (8000970 <HAL_UARTEx_RxEventCallback+0x1bc>)
 80008f4:	f002 facf 	bl	8002e96 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80008f8:	4b1e      	ldr	r3, [pc, #120]	; (8000974 <HAL_UARTEx_RxEventCallback+0x1c0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <HAL_UARTEx_RxEventCallback+0x1c0>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f022 0204 	bic.w	r2, r2, #4
 8000906:	601a      	str	r2, [r3, #0]
	}

	/****************** PROCESS (Little) THE DATA HERE *********************/

	/* Let's say we want to check for the keyword "OK" within our incoming DATA */
	for (int i = 0; i < Size; i++) {
 8000908:	2300      	movs	r3, #0
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	e011      	b.n	8000932 <HAL_UARTEx_RxEventCallback+0x17e>
		if ((RxBuf[i] == 'O') && (RxBuf[i + 1] == 'K')) {
 800090e:	4a11      	ldr	r2, [pc, #68]	; (8000954 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8000910:	693b      	ldr	r3, [r7, #16]
 8000912:	4413      	add	r3, r2
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b4f      	cmp	r3, #79	; 0x4f
 8000918:	d108      	bne.n	800092c <HAL_UARTEx_RxEventCallback+0x178>
 800091a:	693b      	ldr	r3, [r7, #16]
 800091c:	3301      	adds	r3, #1
 800091e:	4a0d      	ldr	r2, [pc, #52]	; (8000954 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8000920:	5cd3      	ldrb	r3, [r2, r3]
 8000922:	2b4b      	cmp	r3, #75	; 0x4b
 8000924:	d102      	bne.n	800092c <HAL_UARTEx_RxEventCallback+0x178>
			isOK = 1;
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8000928:	2201      	movs	r2, #1
 800092a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < Size; i++) {
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	3301      	adds	r3, #1
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	887b      	ldrh	r3, [r7, #2]
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	429a      	cmp	r2, r3
 8000938:	dbe9      	blt.n	800090e <HAL_UARTEx_RxEventCallback+0x15a>
		}
	}
}
 800093a:	bf00      	nop
 800093c:	bf00      	nop
 800093e:	3718      	adds	r7, #24
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40013800 	.word	0x40013800
 8000948:	2000038a 	.word	0x2000038a
 800094c:	20000388 	.word	0x20000388
 8000950:	20000328 	.word	0x20000328
 8000954:	20000318 	.word	0x20000318
 8000958:	20000368 	.word	0x20000368
 800095c:	20000191 	.word	0x20000191
 8000960:	20000192 	.word	0x20000192
 8000964:	08004938 	.word	0x08004938
 8000968:	2000036c 	.word	0x2000036c
 800096c:	20000194 	.word	0x20000194
 8000970:	20000248 	.word	0x20000248
 8000974:	20000290 	.word	0x20000290
 8000978:	2000038c 	.word	0x2000038c

0800097c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a04      	ldr	r2, [pc, #16]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d101      	bne.n	8000992 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800098e:	f000 fd43 	bl	8001418 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40000800 	.word	0x40000800

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009a8:	e7fe      	b.n	80009a8 <Error_Handler+0x8>
	...

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <HAL_MspInit+0x5c>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	4a14      	ldr	r2, [pc, #80]	; (8000a08 <HAL_MspInit+0x5c>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6193      	str	r3, [r2, #24]
 80009be:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_MspInit+0x5c>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <HAL_MspInit+0x5c>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	4a0e      	ldr	r2, [pc, #56]	; (8000a08 <HAL_MspInit+0x5c>)
 80009d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d4:	61d3      	str	r3, [r2, #28]
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <HAL_MspInit+0x5c>)
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009e2:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <HAL_MspInit+0x60>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <HAL_MspInit+0x60>)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fe:	bf00      	nop
 8000a00:	3714      	adds	r7, #20
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40010000 	.word	0x40010000

08000a10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0318 	add.w	r3, r7, #24
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a37      	ldr	r2, [pc, #220]	; (8000b08 <HAL_SPI_MspInit+0xf8>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d130      	bne.n	8000a92 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a30:	4b36      	ldr	r3, [pc, #216]	; (8000b0c <HAL_SPI_MspInit+0xfc>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a35      	ldr	r2, [pc, #212]	; (8000b0c <HAL_SPI_MspInit+0xfc>)
 8000a36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b33      	ldr	r3, [pc, #204]	; (8000b0c <HAL_SPI_MspInit+0xfc>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a44:	617b      	str	r3, [r7, #20]
 8000a46:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a48:	4b30      	ldr	r3, [pc, #192]	; (8000b0c <HAL_SPI_MspInit+0xfc>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	4a2f      	ldr	r2, [pc, #188]	; (8000b0c <HAL_SPI_MspInit+0xfc>)
 8000a4e:	f043 0304 	orr.w	r3, r3, #4
 8000a52:	6193      	str	r3, [r2, #24]
 8000a54:	4b2d      	ldr	r3, [pc, #180]	; (8000b0c <HAL_SPI_MspInit+0xfc>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f003 0304 	and.w	r3, r3, #4
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000a60:	23a0      	movs	r3, #160	; 0xa0
 8000a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6c:	f107 0318 	add.w	r3, r7, #24
 8000a70:	4619      	mov	r1, r3
 8000a72:	4827      	ldr	r0, [pc, #156]	; (8000b10 <HAL_SPI_MspInit+0x100>)
 8000a74:	f001 f892 	bl	8001b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a78:	2340      	movs	r3, #64	; 0x40
 8000a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	f107 0318 	add.w	r3, r7, #24
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4821      	ldr	r0, [pc, #132]	; (8000b10 <HAL_SPI_MspInit+0x100>)
 8000a8c:	f001 f886 	bl	8001b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a90:	e036      	b.n	8000b00 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a1f      	ldr	r2, [pc, #124]	; (8000b14 <HAL_SPI_MspInit+0x104>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d131      	bne.n	8000b00 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <HAL_SPI_MspInit+0xfc>)
 8000a9e:	69db      	ldr	r3, [r3, #28]
 8000aa0:	4a1a      	ldr	r2, [pc, #104]	; (8000b0c <HAL_SPI_MspInit+0xfc>)
 8000aa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa6:	61d3      	str	r3, [r2, #28]
 8000aa8:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <HAL_SPI_MspInit+0xfc>)
 8000aaa:	69db      	ldr	r3, [r3, #28]
 8000aac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab4:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <HAL_SPI_MspInit+0xfc>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a14      	ldr	r2, [pc, #80]	; (8000b0c <HAL_SPI_MspInit+0xfc>)
 8000aba:	f043 0308 	orr.w	r3, r3, #8
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_SPI_MspInit+0xfc>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0308 	and.w	r3, r3, #8
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000acc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ada:	f107 0318 	add.w	r3, r7, #24
 8000ade:	4619      	mov	r1, r3
 8000ae0:	480d      	ldr	r0, [pc, #52]	; (8000b18 <HAL_SPI_MspInit+0x108>)
 8000ae2:	f001 f85b 	bl	8001b9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000ae6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af4:	f107 0318 	add.w	r3, r7, #24
 8000af8:	4619      	mov	r1, r3
 8000afa:	4807      	ldr	r0, [pc, #28]	; (8000b18 <HAL_SPI_MspInit+0x108>)
 8000afc:	f001 f84e 	bl	8001b9c <HAL_GPIO_Init>
}
 8000b00:	bf00      	nop
 8000b02:	3728      	adds	r7, #40	; 0x28
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40013000 	.word	0x40013000
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40010800 	.word	0x40010800
 8000b14:	40003800 	.word	0x40003800
 8000b18:	40010c00 	.word	0x40010c00

08000b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b088      	sub	sp, #32
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a48      	ldr	r2, [pc, #288]	; (8000c58 <HAL_UART_MspInit+0x13c>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	f040 8088 	bne.w	8000c4e <HAL_UART_MspInit+0x132>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b3e:	4b47      	ldr	r3, [pc, #284]	; (8000c5c <HAL_UART_MspInit+0x140>)
 8000b40:	699b      	ldr	r3, [r3, #24]
 8000b42:	4a46      	ldr	r2, [pc, #280]	; (8000c5c <HAL_UART_MspInit+0x140>)
 8000b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b48:	6193      	str	r3, [r2, #24]
 8000b4a:	4b44      	ldr	r3, [pc, #272]	; (8000c5c <HAL_UART_MspInit+0x140>)
 8000b4c:	699b      	ldr	r3, [r3, #24]
 8000b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	4b41      	ldr	r3, [pc, #260]	; (8000c5c <HAL_UART_MspInit+0x140>)
 8000b58:	699b      	ldr	r3, [r3, #24]
 8000b5a:	4a40      	ldr	r2, [pc, #256]	; (8000c5c <HAL_UART_MspInit+0x140>)
 8000b5c:	f043 0304 	orr.w	r3, r3, #4
 8000b60:	6193      	str	r3, [r2, #24]
 8000b62:	4b3e      	ldr	r3, [pc, #248]	; (8000c5c <HAL_UART_MspInit+0x140>)
 8000b64:	699b      	ldr	r3, [r3, #24]
 8000b66:	f003 0304 	and.w	r3, r3, #4
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	4619      	mov	r1, r3
 8000b82:	4837      	ldr	r0, [pc, #220]	; (8000c60 <HAL_UART_MspInit+0x144>)
 8000b84:	f001 f80a 	bl	8001b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b96:	f107 0310 	add.w	r3, r7, #16
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4830      	ldr	r0, [pc, #192]	; (8000c60 <HAL_UART_MspInit+0x144>)
 8000b9e:	f000 fffd 	bl	8001b9c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000ba2:	4b30      	ldr	r3, [pc, #192]	; (8000c64 <HAL_UART_MspInit+0x148>)
 8000ba4:	4a30      	ldr	r2, [pc, #192]	; (8000c68 <HAL_UART_MspInit+0x14c>)
 8000ba6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ba8:	4b2e      	ldr	r3, [pc, #184]	; (8000c64 <HAL_UART_MspInit+0x148>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bae:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <HAL_UART_MspInit+0x148>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bb4:	4b2b      	ldr	r3, [pc, #172]	; (8000c64 <HAL_UART_MspInit+0x148>)
 8000bb6:	2280      	movs	r2, #128	; 0x80
 8000bb8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bba:	4b2a      	ldr	r3, [pc, #168]	; (8000c64 <HAL_UART_MspInit+0x148>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bc0:	4b28      	ldr	r3, [pc, #160]	; (8000c64 <HAL_UART_MspInit+0x148>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000bc6:	4b27      	ldr	r3, [pc, #156]	; (8000c64 <HAL_UART_MspInit+0x148>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000bcc:	4b25      	ldr	r3, [pc, #148]	; (8000c64 <HAL_UART_MspInit+0x148>)
 8000bce:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000bd2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000bd4:	4823      	ldr	r0, [pc, #140]	; (8000c64 <HAL_UART_MspInit+0x148>)
 8000bd6:	f000 fd3f 	bl	8001658 <HAL_DMA_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000be0:	f7ff fede 	bl	80009a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a1f      	ldr	r2, [pc, #124]	; (8000c64 <HAL_UART_MspInit+0x148>)
 8000be8:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bea:	4a1e      	ldr	r2, [pc, #120]	; (8000c64 <HAL_UART_MspInit+0x148>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000bf0:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <HAL_UART_MspInit+0x150>)
 8000bf2:	4a1f      	ldr	r2, [pc, #124]	; (8000c70 <HAL_UART_MspInit+0x154>)
 8000bf4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bf6:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <HAL_UART_MspInit+0x150>)
 8000bf8:	2210      	movs	r2, #16
 8000bfa:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <HAL_UART_MspInit+0x150>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c02:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <HAL_UART_MspInit+0x150>)
 8000c04:	2280      	movs	r2, #128	; 0x80
 8000c06:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c08:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <HAL_UART_MspInit+0x150>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <HAL_UART_MspInit+0x150>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000c14:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_UART_MspInit+0x150>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c1a:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <HAL_UART_MspInit+0x150>)
 8000c1c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000c20:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000c22:	4812      	ldr	r0, [pc, #72]	; (8000c6c <HAL_UART_MspInit+0x150>)
 8000c24:	f000 fd18 	bl	8001658 <HAL_DMA_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8000c2e:	f7ff feb7 	bl	80009a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a0d      	ldr	r2, [pc, #52]	; (8000c6c <HAL_UART_MspInit+0x150>)
 8000c36:	639a      	str	r2, [r3, #56]	; 0x38
 8000c38:	4a0c      	ldr	r2, [pc, #48]	; (8000c6c <HAL_UART_MspInit+0x150>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2100      	movs	r1, #0
 8000c42:	2025      	movs	r0, #37	; 0x25
 8000c44:	f000 fcdd 	bl	8001602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c48:	2025      	movs	r0, #37	; 0x25
 8000c4a:	f000 fcf6 	bl	800163a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c4e:	bf00      	nop
 8000c50:	3720      	adds	r7, #32
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40013800 	.word	0x40013800
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	40010800 	.word	0x40010800
 8000c64:	20000290 	.word	0x20000290
 8000c68:	40020058 	.word	0x40020058
 8000c6c:	200002d4 	.word	0x200002d4
 8000c70:	40020044 	.word	0x40020044

08000c74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08e      	sub	sp, #56	; 0x38
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000c8a:	4b34      	ldr	r3, [pc, #208]	; (8000d5c <HAL_InitTick+0xe8>)
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	4a33      	ldr	r2, [pc, #204]	; (8000d5c <HAL_InitTick+0xe8>)
 8000c90:	f043 0304 	orr.w	r3, r3, #4
 8000c94:	61d3      	str	r3, [r2, #28]
 8000c96:	4b31      	ldr	r3, [pc, #196]	; (8000d5c <HAL_InitTick+0xe8>)
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	f003 0304 	and.w	r3, r3, #4
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ca2:	f107 0210 	add.w	r2, r7, #16
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	4611      	mov	r1, r2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f001 fd03 	bl	80026b8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cb2:	6a3b      	ldr	r3, [r7, #32]
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d103      	bne.n	8000cc4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cbc:	f001 fcd4 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8000cc0:	6378      	str	r0, [r7, #52]	; 0x34
 8000cc2:	e004      	b.n	8000cce <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cc4:	f001 fcd0 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cd0:	4a23      	ldr	r2, [pc, #140]	; (8000d60 <HAL_InitTick+0xec>)
 8000cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd6:	0c9b      	lsrs	r3, r3, #18
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000cdc:	4b21      	ldr	r3, [pc, #132]	; (8000d64 <HAL_InitTick+0xf0>)
 8000cde:	4a22      	ldr	r2, [pc, #136]	; (8000d68 <HAL_InitTick+0xf4>)
 8000ce0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000ce2:	4b20      	ldr	r3, [pc, #128]	; (8000d64 <HAL_InitTick+0xf0>)
 8000ce4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ce8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000cea:	4a1e      	ldr	r2, [pc, #120]	; (8000d64 <HAL_InitTick+0xf0>)
 8000cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cee:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000cf0:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <HAL_InitTick+0xf0>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf6:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <HAL_InitTick+0xf0>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfc:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <HAL_InitTick+0xf0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000d02:	4818      	ldr	r0, [pc, #96]	; (8000d64 <HAL_InitTick+0xf0>)
 8000d04:	f001 fdaa 	bl	800285c <HAL_TIM_Base_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d11b      	bne.n	8000d4e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000d16:	4813      	ldr	r0, [pc, #76]	; (8000d64 <HAL_InitTick+0xf0>)
 8000d18:	f001 fdf8 	bl	800290c <HAL_TIM_Base_Start_IT>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d111      	bne.n	8000d4e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d2a:	201e      	movs	r0, #30
 8000d2c:	f000 fc85 	bl	800163a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2b0f      	cmp	r3, #15
 8000d34:	d808      	bhi.n	8000d48 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000d36:	2200      	movs	r2, #0
 8000d38:	6879      	ldr	r1, [r7, #4]
 8000d3a:	201e      	movs	r0, #30
 8000d3c:	f000 fc61 	bl	8001602 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d40:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <HAL_InitTick+0xf8>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6013      	str	r3, [r2, #0]
 8000d46:	e002      	b.n	8000d4e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3738      	adds	r7, #56	; 0x38
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	431bde83 	.word	0x431bde83
 8000d64:	20000390 	.word	0x20000390
 8000d68:	40000800 	.word	0x40000800
 8000d6c:	20000008 	.word	0x20000008

08000d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <NMI_Handler+0x4>

08000d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <HardFault_Handler+0x4>

08000d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <MemManage_Handler+0x4>

08000d82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <BusFault_Handler+0x4>

08000d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <UsageFault_Handler+0x4>

08000d8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr

08000d9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr

08000da6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr

08000db2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr
	...

08000dc0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <DMA1_Channel4_IRQHandler+0x10>)
 8000dc6:	f000 fdb5 	bl	8001934 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200002d4 	.word	0x200002d4

08000dd4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000dd8:	4802      	ldr	r0, [pc, #8]	; (8000de4 <DMA1_Channel5_IRQHandler+0x10>)
 8000dda:	f000 fdab 	bl	8001934 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000290 	.word	0x20000290

08000de8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <TIM4_IRQHandler+0x10>)
 8000dee:	f001 fddf 	bl	80029b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000390 	.word	0x20000390

08000dfc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <USART1_IRQHandler+0x10>)
 8000e02:	f002 f8a5 	bl	8002f50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000248 	.word	0x20000248

08000e10 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	e00a      	b.n	8000e38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e22:	f3af 8000 	nop.w
 8000e26:	4601      	mov	r1, r0
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	1c5a      	adds	r2, r3, #1
 8000e2c:	60ba      	str	r2, [r7, #8]
 8000e2e:	b2ca      	uxtb	r2, r1
 8000e30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	3301      	adds	r3, #1
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	697a      	ldr	r2, [r7, #20]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	dbf0      	blt.n	8000e22 <_read+0x12>
  }

  return len;
 8000e40:	687b      	ldr	r3, [r7, #4]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr

08000e60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e70:	605a      	str	r2, [r3, #4]
  return 0;
 8000e72:	2300      	movs	r3, #0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr

08000e7e <_isatty>:

int _isatty(int file)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b083      	sub	sp, #12
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr

08000e92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b085      	sub	sp, #20
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	60f8      	str	r0, [r7, #12]
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e9e:	2300      	movs	r3, #0
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr
	...

08000eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb4:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <_sbrk+0x5c>)
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <_sbrk+0x60>)
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <_sbrk+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d102      	bne.n	8000ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <_sbrk+0x64>)
 8000eca:	4a12      	ldr	r2, [pc, #72]	; (8000f14 <_sbrk+0x68>)
 8000ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <_sbrk+0x64>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d207      	bcs.n	8000eec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000edc:	f002 ff48 	bl	8003d70 <__errno>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eea:	e009      	b.n	8000f00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <_sbrk+0x64>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ef2:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <_sbrk+0x64>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	4a05      	ldr	r2, [pc, #20]	; (8000f10 <_sbrk+0x64>)
 8000efc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000efe:	68fb      	ldr	r3, [r7, #12]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20005000 	.word	0x20005000
 8000f0c:	00000400 	.word	0x00000400
 8000f10:	200003d8 	.word	0x200003d8
 8000f14:	200003f8 	.word	0x200003f8

08000f18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr

08000f24 <SpiInit>:

//============================================================================//
//++++++++++++++++++++++++++++++++  SPI  +++++++++++++++++++++++++++++++++++++//
//============================================================================//
static void SpiInit ( uint32_t value )
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

   SPI1->CR1 |= value;
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <SpiInit+0x20>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4904      	ldr	r1, [pc, #16]	; (8000f44 <SpiInit+0x20>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	600b      	str	r3, [r1, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	40013000 	.word	0x40013000

08000f48 <SPI_sendByte>:
//============================================================================//
//++++++++++++++++++++++++++++++++  SPI  +++++++++++++++++++++++++++++++++++++//
//============================================================================//
static uint8_t SPI_sendByte ( uint8_t data )
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
    uint8_t rxbyte;

    while ( !( SPI_PORT -> SR & SPI_SR_TXE ) );
 8000f52:	bf00      	nop
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <SPI_sendByte+0x40>)
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d0f9      	beq.n	8000f54 <SPI_sendByte+0xc>
    SPI_PORT -> DR = data;
 8000f60:	4a09      	ldr	r2, [pc, #36]	; (8000f88 <SPI_sendByte+0x40>)
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	60d3      	str	r3, [r2, #12]

    while ( !( SPI_PORT -> SR & SPI_SR_RXNE ) );
 8000f66:	bf00      	nop
 8000f68:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <SPI_sendByte+0x40>)
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d0f9      	beq.n	8000f68 <SPI_sendByte+0x20>
    rxbyte = SPI_PORT->DR;
 8000f74:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <SPI_sendByte+0x40>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	73fb      	strb	r3, [r7, #15]

    return rxbyte;
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	40013000 	.word	0x40013000

08000f8c <vs1053_init>:
//============================================================================//
//++++++++++++++++++++++++++  vs1053_init  +++++++++++++++++++++++++++++++++++//
//============================================================================//
void vs1053_init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	VS1053_RESET_RES();		 // XRESET = 0
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <vs1053_init+0x38>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <vs1053_init+0x38>)
 8000f96:	f023 0302 	bic.w	r3, r3, #2
 8000f9a:	60d3      	str	r3, [r2, #12]
	VS1053_SET_XDCS();		 // XDCS = 1
 8000f9c:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <vs1053_init+0x38>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	4a08      	ldr	r2, [pc, #32]	; (8000fc4 <vs1053_init+0x38>)
 8000fa2:	f043 0308 	orr.w	r3, r3, #8
 8000fa6:	60d3      	str	r3, [r2, #12]
	VS1053_DCS();			   	 // nCS = 1
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <vs1053_init+0x38>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	4a05      	ldr	r2, [pc, #20]	; (8000fc4 <vs1053_init+0x38>)
 8000fae:	f043 0310 	orr.w	r3, r3, #16
 8000fb2:	60d3      	str	r3, [r2, #12]
	SpiInit((uint32_t)(SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0));//256
 8000fb4:	2038      	movs	r0, #56	; 0x38
 8000fb6:	f7ff ffb5 	bl	8000f24 <SpiInit>
	chip_id = 0xFF;
 8000fba:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <vs1053_init+0x3c>)
 8000fbc:	22ff      	movs	r2, #255	; 0xff
 8000fbe:	701a      	strb	r2, [r3, #0]
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40010800 	.word	0x40010800
 8000fc8:	200003dc 	.word	0x200003dc

08000fcc <vs1053_reset>:

//============================================================================//
//+++++++++++++++++++ Perform a vs1053 hard soft reset +++++++++++++++++++++++//
//============================================================================//
void vs1053_reset(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
	uint16_t temp;
	SpiInit((uint32_t)(SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0));//НАСТРОЙКУ ПРОИЗВОДИТЬ НА НИЗКОЙ!!!!!
 8000fd2:	2038      	movs	r0, #56	; 0x38
 8000fd4:	f7ff ffa6 	bl	8000f24 <SpiInit>
	VS1053_RESET_RES();		// XRESET = 0 Harware reset VS1053b is reset and all the control registers and
 8000fd8:	4b2c      	ldr	r3, [pc, #176]	; (800108c <vs1053_reset+0xc0>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	4a2b      	ldr	r2, [pc, #172]	; (800108c <vs1053_reset+0xc0>)
 8000fde:	f023 0302 	bic.w	r3, r3, #2
 8000fe2:	60d3      	str	r3, [r2, #12]
	HAL_Delay (5);
 8000fe4:	2005      	movs	r0, #5
 8000fe6:	f000 fa33 	bl	8001450 <HAL_Delay>
	VS1053_SET_RES();			// XRESET = 1 //internal states are set to the initial values
 8000fea:	4b28      	ldr	r3, [pc, #160]	; (800108c <vs1053_reset+0xc0>)
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	4a27      	ldr	r2, [pc, #156]	; (800108c <vs1053_reset+0xc0>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	60d3      	str	r3, [r2, #12]
	HAL_Delay (5); //500
 8000ff6:	2005      	movs	r0, #5
 8000ff8:	f000 fa2a 	bl	8001450 <HAL_Delay>

	while(!VS1053_DREQ){};
 8000ffc:	bf00      	nop
 8000ffe:	4b23      	ldr	r3, [pc, #140]	; (800108c <vs1053_reset+0xc0>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	f003 0304 	and.w	r3, r3, #4
 8001006:	2b00      	cmp	r3, #0
 8001008:	d0f9      	beq.n	8000ffe <vs1053_reset+0x32>

    temp = vs1053_readData(vs1053_STATUS);	// read status, must be 0x000C
 800100a:	2001      	movs	r0, #1
 800100c:	f000 f8ca 	bl	80011a4 <vs1053_readData>
 8001010:	4603      	mov	r3, r0
 8001012:	80fb      	strh	r3, [r7, #6]
    temp = vs1053_readData(vs1053_MODE);	// read status, must be 0x4000
 8001014:	2000      	movs	r0, #0
 8001016:	f000 f8c5 	bl	80011a4 <vs1053_readData>
 800101a:	4603      	mov	r3, r0
 800101c:	80fb      	strh	r3, [r7, #6]
  	// Soft reset 16
  	vs1053_writeCommand(vs1053_MODE,SM_RESET|SM_SDINEW);//| SM_CLK_RANGE for 24MHz-26
 800101e:	f640 0104 	movw	r1, #2052	; 0x804
 8001022:	2000      	movs	r0, #0
 8001024:	f000 f890 	bl	8001148 <vs1053_writeCommand>
		//SM_RESET-soft Reset
		//SM_SDINEW- by default at startup native SPI modes
  	HAL_Delay(500);
 8001028:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800102c:	f000 fa10 	bl	8001450 <HAL_Delay>
    do
    {
    	temp=vs1053_readData(vs1053_MODE);
 8001030:	2000      	movs	r0, #0
 8001032:	f000 f8b7 	bl	80011a4 <vs1053_readData>
 8001036:	4603      	mov	r3, r0
 8001038:	80fb      	strh	r3, [r7, #6]
    } while((temp&SM_RESET)!=0);
 800103a:	88fb      	ldrh	r3, [r7, #6]
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1f5      	bne.n	8001030 <vs1053_reset+0x64>
    vs1053_writeCommand(vs1053_MODE, SM_SDINEW);// | SM_CLK_RANGE 24MHz только для 24MHz
 8001044:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001048:	2000      	movs	r0, #0
 800104a:	f000 f87d 	bl	8001148 <vs1053_writeCommand>

    temp = vs1053_readData(vs1053_STATUS);
 800104e:	2001      	movs	r0, #1
 8001050:	f000 f8a8 	bl	80011a4 <vs1053_readData>
 8001054:	4603      	mov	r3, r0
 8001056:	80fb      	strh	r3, [r7, #6]
    chip_id=(temp >> 4)&0x0F;// 0 - VS1001, 1 - VS1011, 2 - VS1002, 3 - VS1003, 4 - VS1053
 8001058:	88fb      	ldrh	r3, [r7, #6]
 800105a:	091b      	lsrs	r3, r3, #4
 800105c:	b29b      	uxth	r3, r3
 800105e:	b2db      	uxtb	r3, r3
 8001060:	f003 030f 	and.w	r3, r3, #15
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <vs1053_reset+0xc4>)
 8001068:	701a      	strb	r2, [r3, #0]
	  //Для 12.288MHz:
	  //(XTLI_HZ - 8000000) / 4000 = (12288000 - 8000000) / 4000 = 4288000 / 4000 = 1072 = 0x0430 = 0000 0100 0011 0000
		/*The maximum sample rate that can be played with correct speed is XTALI/256 (or XTALI/512
    if SM_CLK_RANGE is set). Thus, XTALI must be at least 12.288 MHz (24.576 MHz) to be able
    to play 48 kHz at correct speed. Reset value is 1.0 × . Recommended SC_MULT=3.5 × , SC_ADD=1.0 × (SCI_CLOCKF=0x8800).*/
    vs1053_writeCommand (vs1053_CLOCKF, 0x8000 | 0x0800 | 0x0430 );// 0x0430 можно было не указывать,ноль в SC_FREQ означает 12,288!!!
 800106a:	f648 4130 	movw	r1, #35888	; 0x8c30
 800106e:	2003      	movs	r0, #3
 8001070:	f000 f86a 	bl	8001148 <vs1053_writeCommand>
	  vs1053_setvolume ( 50, 50 );// Начальная громкость чем меньше тем громче))
 8001074:	2132      	movs	r1, #50	; 0x32
 8001076:	2032      	movs	r0, #50	; 0x32
 8001078:	f000 f844 	bl	8001104 <vs1053_setvolume>
  	SpiInit (SPI_CR1_BR_2);//музыку гоним на высокой скрости
 800107c:	2020      	movs	r0, #32
 800107e:	f7ff ff51 	bl	8000f24 <SpiInit>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40010800 	.word	0x40010800
 8001090:	200003dc 	.word	0x200003dc

08001094 <vs1053_isDataReq>:

//============================================================================//
//+++++++++++++++++++++++++++++ VS1053_DREQ STATE ++++++++++++++++++++++++++++//
//============================================================================//
bool vs1053_isDataReq(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  if (VS1053_DREQ == RESET )
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <vs1053_isDataReq+0x20>)
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f003 0304 	and.w	r3, r3, #4
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d101      	bne.n	80010a8 <vs1053_isDataReq+0x14>
    return false;
 80010a4:	2300      	movs	r3, #0
 80010a6:	e000      	b.n	80010aa <vs1053_isDataReq+0x16>

  return true;
 80010a8:	2301      	movs	r3, #1
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	40010800 	.word	0x40010800

080010b8 <vs1053_send32>:
//============================================================================//
//+++++++++++++++++ Send an 32 byte block of audio stream data +++++++++++++++//
//============================================================================//
void vs1053_send32(uint8_t *pData)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	uint8_t i;
	VS1053_RESET_XDCS();
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <vs1053_send32+0x48>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	4a0e      	ldr	r2, [pc, #56]	; (8001100 <vs1053_send32+0x48>)
 80010c6:	f023 0308 	bic.w	r3, r3, #8
 80010ca:	60d3      	str	r3, [r2, #12]
	for (i=0;i <32;i++)// send 32 bytes
 80010cc:	2300      	movs	r3, #0
 80010ce:	73fb      	strb	r3, [r7, #15]
 80010d0:	e009      	b.n	80010e6 <vs1053_send32+0x2e>
		SPI_sendByte(*pData ++ );
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	1c5a      	adds	r2, r3, #1
 80010d6:	607a      	str	r2, [r7, #4]
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ff34 	bl	8000f48 <SPI_sendByte>
	for (i=0;i <32;i++)// send 32 bytes
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	3301      	adds	r3, #1
 80010e4:	73fb      	strb	r3, [r7, #15]
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	2b1f      	cmp	r3, #31
 80010ea:	d9f2      	bls.n	80010d2 <vs1053_send32+0x1a>
	VS1053_SET_XDCS();
 80010ec:	4b04      	ldr	r3, [pc, #16]	; (8001100 <vs1053_send32+0x48>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	4a03      	ldr	r2, [pc, #12]	; (8001100 <vs1053_send32+0x48>)
 80010f2:	f043 0308 	orr.w	r3, r3, #8
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40010800 	.word	0x40010800

08001104 <vs1053_setvolume>:
//============================================================================//
//++++++++++++++++++++++++++++ Set audio volume ++++++++++++++++++++++++++++++//
//============================================================================//
void vs1053_setvolume(uint8_t volumeLeft,uint8_t volumeRight)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	460a      	mov	r2, r1
 800110e:	71fb      	strb	r3, [r7, #7]
 8001110:	4613      	mov	r3, r2
 8001112:	71bb      	strb	r3, [r7, #6]
	uint16_t vol;
	vol = volumeLeft;
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	81fb      	strh	r3, [r7, #14]
	vol <<= 8;
 8001118:	89fb      	ldrh	r3, [r7, #14]
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	81fb      	strh	r3, [r7, #14]
	vol |= volumeRight;
 800111e:	79bb      	ldrb	r3, [r7, #6]
 8001120:	b29a      	uxth	r2, r3
 8001122:	89fb      	ldrh	r3, [r7, #14]
 8001124:	4313      	orrs	r3, r2
 8001126:	81fb      	strh	r3, [r7, #14]
 	SpiInit((uint32_t)(SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0));
 8001128:	2038      	movs	r0, #56	; 0x38
 800112a:	f7ff fefb 	bl	8000f24 <SpiInit>
	vs1053_writeCommand (vs1053_VOL,vol);			// set vs1053 volume register
 800112e:	89fb      	ldrh	r3, [r7, #14]
 8001130:	4619      	mov	r1, r3
 8001132:	200b      	movs	r0, #11
 8001134:	f000 f808 	bl	8001148 <vs1053_writeCommand>
 	SpiInit(SPI_CR1_BR_0);
 8001138:	2008      	movs	r0, #8
 800113a:	f7ff fef3 	bl	8000f24 <SpiInit>
}
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <vs1053_writeCommand>:
//============================================================================//
//+++++++++++++++++++++ Write a data word to specific address ++++++++++++++++//
//============================================================================//
void vs1053_writeCommand(uint8_t addr,uint16_t data)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	460a      	mov	r2, r1
 8001152:	71fb      	strb	r3, [r7, #7]
 8001154:	4613      	mov	r3, r2
 8001156:	80bb      	strh	r3, [r7, #4]
    VS1053_CS();
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <vs1053_writeCommand+0x58>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	4a10      	ldr	r2, [pc, #64]	; (80011a0 <vs1053_writeCommand+0x58>)
 800115e:	f023 0310 	bic.w	r3, r3, #16
 8001162:	60d3      	str	r3, [r2, #12]
    SPI_sendByte(VS1053_CMD_WRITE );// send write opcode 0x02
 8001164:	2002      	movs	r0, #2
 8001166:	f7ff feef 	bl	8000f48 <SPI_sendByte>
    SPI_sendByte(addr);			    // send address
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff feeb 	bl	8000f48 <SPI_sendByte>
    SPI_sendByte(data >> 8);		// send MSB
 8001172:	88bb      	ldrh	r3, [r7, #4]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	b29b      	uxth	r3, r3
 8001178:	b2db      	uxtb	r3, r3
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fee4 	bl	8000f48 <SPI_sendByte>
    SPI_sendByte(data);			    //send LSB
 8001180:	88bb      	ldrh	r3, [r7, #4]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff fedf 	bl	8000f48 <SPI_sendByte>
    VS1053_DCS();
 800118a:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <vs1053_writeCommand+0x58>)
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <vs1053_writeCommand+0x58>)
 8001190:	f043 0310 	orr.w	r3, r3, #16
 8001194:	60d3      	str	r3, [r2, #12]
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40010800 	.word	0x40010800

080011a4 <vs1053_readData>:

//============================================================================//
//+++++++++++++++ Read a data word from vs1053 specific address ++++++++++++++//
//============================================================================//
uint16_t vs1053_readData(uint8_t addr)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
    uint16_t tempdata = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	81fb      	strh	r3, [r7, #14]
    uint8_t temp;
	  VS1053_SET_XDCS();              // XDCS = 0
 80011b2:	4b19      	ldr	r3, [pc, #100]	; (8001218 <vs1053_readData+0x74>)
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	4a18      	ldr	r2, [pc, #96]	; (8001218 <vs1053_readData+0x74>)
 80011b8:	f043 0308 	orr.w	r3, r3, #8
 80011bc:	60d3      	str	r3, [r2, #12]
    VS1053_CS();			              // xCS = 0
 80011be:	4b16      	ldr	r3, [pc, #88]	; (8001218 <vs1053_readData+0x74>)
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	4a15      	ldr	r2, [pc, #84]	; (8001218 <vs1053_readData+0x74>)
 80011c4:	f023 0310 	bic.w	r3, r3, #16
 80011c8:	60d3      	str	r3, [r2, #12]
    SPI_sendByte(VS1053_CMD_READ );	// send read opcode 0x03
 80011ca:	2003      	movs	r0, #3
 80011cc:	f7ff febc 	bl	8000f48 <SPI_sendByte>
    SPI_sendByte(addr);				      // send address
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff feb8 	bl	8000f48 <SPI_sendByte>
    temp = SPI_sendByte(0);		      // send zero dummy to receive one byte
 80011d8:	2000      	movs	r0, #0
 80011da:	f7ff feb5 	bl	8000f48 <SPI_sendByte>
 80011de:	4603      	mov	r3, r0
 80011e0:	737b      	strb	r3, [r7, #13]
    tempdata = temp;
 80011e2:	7b7b      	ldrb	r3, [r7, #13]
 80011e4:	81fb      	strh	r3, [r7, #14]
    tempdata <<= 8;						      // MSB was sent first
 80011e6:	89fb      	ldrh	r3, [r7, #14]
 80011e8:	021b      	lsls	r3, r3, #8
 80011ea:	81fb      	strh	r3, [r7, #14]
    temp = SPI_sendByte(0);		      // send zero dummy to receive one byte
 80011ec:	2000      	movs	r0, #0
 80011ee:	f7ff feab 	bl	8000f48 <SPI_sendByte>
 80011f2:	4603      	mov	r3, r0
 80011f4:	737b      	strb	r3, [r7, #13]
    tempdata |= temp;
 80011f6:	7b7b      	ldrb	r3, [r7, #13]
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	89fb      	ldrh	r3, [r7, #14]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	81fb      	strh	r3, [r7, #14]
    VS1053_DCS();			              // xCS = 1
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <vs1053_readData+0x74>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	4a04      	ldr	r2, [pc, #16]	; (8001218 <vs1053_readData+0x74>)
 8001206:	f043 0310 	orr.w	r3, r3, #16
 800120a:	60d3      	str	r3, [r2, #12]
    return tempdata;	             	// return data word
 800120c:	89fb      	ldrh	r3, [r7, #14]
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40010800 	.word	0x40010800

0800121c <SPI_SendReceiveByte>:
uint8_t response;
#define CS_ON GPIOB->ODR &= ~GPIO_ODR_ODR12
#define CS_OFF GPIOB->ODR |= GPIO_ODR_ODR12

 uint8_t SPI_SendReceiveByte( uint8_t data )
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
    uint8_t rxbyte;

    while ( !( SPI_PORT -> SR & SPI_SR_TXE ) );
 8001226:	bf00      	nop
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <SPI_SendReceiveByte+0x40>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d0f9      	beq.n	8001228 <SPI_SendReceiveByte+0xc>
    SPI_PORT -> DR = data;
 8001234:	4a09      	ldr	r2, [pc, #36]	; (800125c <SPI_SendReceiveByte+0x40>)
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	60d3      	str	r3, [r2, #12]

    while ( !( SPI_PORT -> SR & SPI_SR_RXNE ) );
 800123a:	bf00      	nop
 800123c:	4b07      	ldr	r3, [pc, #28]	; (800125c <SPI_SendReceiveByte+0x40>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0f9      	beq.n	800123c <SPI_SendReceiveByte+0x20>
    rxbyte = SPI_PORT->DR;
 8001248:	4b04      	ldr	r3, [pc, #16]	; (800125c <SPI_SendReceiveByte+0x40>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	73fb      	strb	r3, [r7, #15]

    return rxbyte;
 800124e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40003800 	.word	0x40003800

08001260 <flash_reset>:
//=========================================================================//
//+++++++++++++++сброс флеш и влючение ее в работу+++++++++++++++++++++++++//
//=========================================================================//
void flash_reset()
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
    CS_ON;
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <flash_reset+0x4c>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	4a10      	ldr	r2, [pc, #64]	; (80012ac <flash_reset+0x4c>)
 800126a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800126e:	60d3      	str	r3, [r2, #12]
    SPI_SendReceiveByte(F_ENABLE_RESET);
 8001270:	2066      	movs	r0, #102	; 0x66
 8001272:	f7ff ffd3 	bl	800121c <SPI_SendReceiveByte>
    CS_OFF;
 8001276:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <flash_reset+0x4c>)
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	4a0c      	ldr	r2, [pc, #48]	; (80012ac <flash_reset+0x4c>)
 800127c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001280:	60d3      	str	r3, [r2, #12]

    CS_ON;
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <flash_reset+0x4c>)
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	4a09      	ldr	r2, [pc, #36]	; (80012ac <flash_reset+0x4c>)
 8001288:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800128c:	60d3      	str	r3, [r2, #12]
    SPI_SendReceiveByte(F_RESET_DEVICE);
 800128e:	2099      	movs	r0, #153	; 0x99
 8001290:	f7ff ffc4 	bl	800121c <SPI_SendReceiveByte>
    CS_OFF;
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <flash_reset+0x4c>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	4a04      	ldr	r2, [pc, #16]	; (80012ac <flash_reset+0x4c>)
 800129a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800129e:	60d3      	str	r3, [r2, #12]
	  HAL_Delay(1000);
 80012a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012a4:	f000 f8d4 	bl	8001450 <HAL_Delay>
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40010c00 	.word	0x40010c00

080012b0 <flash_read_page>:
}
//=========================================================================//
//+++++++++++++++++++++++++++чтение страницы+++++++++++++++++++++++++++++++//
//=========================================================================//
 void flash_read_page(uint8_t data[], uint32_t addr, uint8_t len)//len 0 = 1 байт
{//256 bytes max per read / write.Clock frequency for Read Data instruction (03h) max 33 MHz
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	4613      	mov	r3, r2
 80012bc:	71fb      	strb	r3, [r7, #7]
    CS_ON;
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <flash_read_page+0x84>)
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	4a1c      	ldr	r2, [pc, #112]	; (8001334 <flash_read_page+0x84>)
 80012c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012c8:	60d3      	str	r3, [r2, #12]
    SPI_SendReceiveByte(F_READ);
 80012ca:	2003      	movs	r0, #3
 80012cc:	f7ff ffa6 	bl	800121c <SPI_SendReceiveByte>
    SPI_SendReceiveByte((addr >> 16) & 0xFF);
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	0c1b      	lsrs	r3, r3, #16
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ffa0 	bl	800121c <SPI_SendReceiveByte>
    SPI_SendReceiveByte((addr >> 8) & 0xFF);
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	0a1b      	lsrs	r3, r3, #8
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff ff9a 	bl	800121c <SPI_SendReceiveByte>
    SPI_SendReceiveByte(addr & 0xFF);
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff95 	bl	800121c <SPI_SendReceiveByte>
	  *data++ = SPI_SendReceiveByte(0);// send zero dummy to receive one byte
 80012f2:	68fc      	ldr	r4, [r7, #12]
 80012f4:	1c63      	adds	r3, r4, #1
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	2000      	movs	r0, #0
 80012fa:	f7ff ff8f 	bl	800121c <SPI_SendReceiveByte>
 80012fe:	4603      	mov	r3, r0
 8001300:	7023      	strb	r3, [r4, #0]
    while(len--)
 8001302:	e007      	b.n	8001314 <flash_read_page+0x64>
    {
        *data++ = SPI_SendReceiveByte(0);
 8001304:	68fc      	ldr	r4, [r7, #12]
 8001306:	1c63      	adds	r3, r4, #1
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	2000      	movs	r0, #0
 800130c:	f7ff ff86 	bl	800121c <SPI_SendReceiveByte>
 8001310:	4603      	mov	r3, r0
 8001312:	7023      	strb	r3, [r4, #0]
    while(len--)
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	1e5a      	subs	r2, r3, #1
 8001318:	71fa      	strb	r2, [r7, #7]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f2      	bne.n	8001304 <flash_read_page+0x54>
    }
    CS_OFF;
 800131e:	4b05      	ldr	r3, [pc, #20]	; (8001334 <flash_read_page+0x84>)
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	4a04      	ldr	r2, [pc, #16]	; (8001334 <flash_read_page+0x84>)
 8001324:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001328:	60d3      	str	r3, [r2, #12]
}
 800132a:	bf00      	nop
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	bd90      	pop	{r4, r7, pc}
 8001332:	bf00      	nop
 8001334:	40010c00 	.word	0x40010c00

08001338 <get_flash_id>:
//=========================================================================//
//++++++++++++++++++++++++чтение айди флэш+++++++++++++++++++++++++++++++++//
//=========================================================================//
uint8_t get_flash_id()
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0

    uint8_t buff[2];
    CS_ON;
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <get_flash_id+0x64>)
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	4a16      	ldr	r2, [pc, #88]	; (800139c <get_flash_id+0x64>)
 8001344:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001348:	60d3      	str	r3, [r2, #12]
    SPI_SendReceiveByte(F_GET_DEV_ID);
 800134a:	2090      	movs	r0, #144	; 0x90
 800134c:	f7ff ff66 	bl	800121c <SPI_SendReceiveByte>
	  SPI_SendReceiveByte(0x00);//ПОСЫЛАЕМ 000000 24-bit address
 8001350:	2000      	movs	r0, #0
 8001352:	f7ff ff63 	bl	800121c <SPI_SendReceiveByte>
    SPI_SendReceiveByte(0x00);//ПОСЫЛАЕМ 000000 24-bit address
 8001356:	2000      	movs	r0, #0
 8001358:	f7ff ff60 	bl	800121c <SPI_SendReceiveByte>
    SPI_SendReceiveByte(0x00);//ПОСЫЛАЕМ 000000 24-bit address
 800135c:	2000      	movs	r0, #0
 800135e:	f7ff ff5d 	bl	800121c <SPI_SendReceiveByte>
	  buff[1] = SPI_SendReceiveByte(0);// send zero dummy to receive one byte
 8001362:	2000      	movs	r0, #0
 8001364:	f7ff ff5a 	bl	800121c <SPI_SendReceiveByte>
 8001368:	4603      	mov	r3, r0
 800136a:	717b      	strb	r3, [r7, #5]
	  buff[0] = SPI_SendReceiveByte(0);// send zero dummy to receive one byte
 800136c:	2000      	movs	r0, #0
 800136e:	f7ff ff55 	bl	800121c <SPI_SendReceiveByte>
 8001372:	4603      	mov	r3, r0
 8001374:	713b      	strb	r3, [r7, #4]
    CS_OFF;
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <get_flash_id+0x64>)
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	4a08      	ldr	r2, [pc, #32]	; (800139c <get_flash_id+0x64>)
 800137c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001380:	60d3      	str	r3, [r2, #12]
   //EFh manufaturer id for windbond,17h device ID
    if (buff[0] == 0x17  && buff[1] == 0xEF)
 8001382:	793b      	ldrb	r3, [r7, #4]
 8001384:	2b17      	cmp	r3, #23
 8001386:	d104      	bne.n	8001392 <get_flash_id+0x5a>
 8001388:	797b      	ldrb	r3, [r7, #5]
 800138a:	2bef      	cmp	r3, #239	; 0xef
 800138c:	d101      	bne.n	8001392 <get_flash_id+0x5a>
        return 1;//OK;
 800138e:	2301      	movs	r3, #1
 8001390:	e000      	b.n	8001394 <get_flash_id+0x5c>

    return 0;//Problem;
 8001392:	2300      	movs	r3, #0


}
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40010c00 	.word	0x40010c00

080013a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013a0:	f7ff fdba 	bl	8000f18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a4:	480b      	ldr	r0, [pc, #44]	; (80013d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013a6:	490c      	ldr	r1, [pc, #48]	; (80013d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013a8:	4a0c      	ldr	r2, [pc, #48]	; (80013dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80013aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ac:	e002      	b.n	80013b4 <LoopCopyDataInit>

080013ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013b2:	3304      	adds	r3, #4

080013b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b8:	d3f9      	bcc.n	80013ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ba:	4a09      	ldr	r2, [pc, #36]	; (80013e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013bc:	4c09      	ldr	r4, [pc, #36]	; (80013e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c0:	e001      	b.n	80013c6 <LoopFillZerobss>

080013c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c4:	3204      	adds	r2, #4

080013c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c8:	d3fb      	bcc.n	80013c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ca:	f002 fcd7 	bl	8003d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ce:	f7fe ff9d 	bl	800030c <main>
  bx lr
 80013d2:	4770      	bx	lr
  ldr r0, =_sdata
 80013d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80013dc:	08004adc 	.word	0x08004adc
  ldr r2, =_sbss
 80013e0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80013e4:	200003f4 	.word	0x200003f4

080013e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013e8:	e7fe      	b.n	80013e8 <ADC1_2_IRQHandler>
	...

080013ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <HAL_Init+0x28>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a07      	ldr	r2, [pc, #28]	; (8001414 <HAL_Init+0x28>)
 80013f6:	f043 0310 	orr.w	r3, r3, #16
 80013fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013fc:	2003      	movs	r0, #3
 80013fe:	f000 f8f5 	bl	80015ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001402:	200f      	movs	r0, #15
 8001404:	f7ff fc36 	bl	8000c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001408:	f7ff fad0 	bl	80009ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40022000 	.word	0x40022000

08001418 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <HAL_IncTick+0x1c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	461a      	mov	r2, r3
 8001422:	4b05      	ldr	r3, [pc, #20]	; (8001438 <HAL_IncTick+0x20>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4413      	add	r3, r2
 8001428:	4a03      	ldr	r2, [pc, #12]	; (8001438 <HAL_IncTick+0x20>)
 800142a:	6013      	str	r3, [r2, #0]
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr
 8001434:	2000000c 	.word	0x2000000c
 8001438:	200003e0 	.word	0x200003e0

0800143c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return uwTick;
 8001440:	4b02      	ldr	r3, [pc, #8]	; (800144c <HAL_GetTick+0x10>)
 8001442:	681b      	ldr	r3, [r3, #0]
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	200003e0 	.word	0x200003e0

08001450 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001458:	f7ff fff0 	bl	800143c <HAL_GetTick>
 800145c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001468:	d005      	beq.n	8001476 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800146a:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <HAL_Delay+0x44>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4413      	add	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001476:	bf00      	nop
 8001478:	f7ff ffe0 	bl	800143c <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	429a      	cmp	r2, r3
 8001486:	d8f7      	bhi.n	8001478 <HAL_Delay+0x28>
  {
  }
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	2000000c 	.word	0x2000000c

08001498 <__NVIC_SetPriorityGrouping>:
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <__NVIC_SetPriorityGrouping+0x44>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b4:	4013      	ands	r3, r2
 80014b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ca:	4a04      	ldr	r2, [pc, #16]	; (80014dc <__NVIC_SetPriorityGrouping+0x44>)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	60d3      	str	r3, [r2, #12]
}
 80014d0:	bf00      	nop
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <__NVIC_GetPriorityGrouping>:
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e4:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <__NVIC_GetPriorityGrouping+0x18>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	0a1b      	lsrs	r3, r3, #8
 80014ea:	f003 0307 	and.w	r3, r3, #7
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <__NVIC_EnableIRQ>:
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	2b00      	cmp	r3, #0
 800150c:	db0b      	blt.n	8001526 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	f003 021f 	and.w	r2, r3, #31
 8001514:	4906      	ldr	r1, [pc, #24]	; (8001530 <__NVIC_EnableIRQ+0x34>)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	095b      	lsrs	r3, r3, #5
 800151c:	2001      	movs	r0, #1
 800151e:	fa00 f202 	lsl.w	r2, r0, r2
 8001522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	e000e100 	.word	0xe000e100

08001534 <__NVIC_SetPriority>:
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	6039      	str	r1, [r7, #0]
 800153e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001544:	2b00      	cmp	r3, #0
 8001546:	db0a      	blt.n	800155e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	490c      	ldr	r1, [pc, #48]	; (8001580 <__NVIC_SetPriority+0x4c>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	0112      	lsls	r2, r2, #4
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	440b      	add	r3, r1
 8001558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800155c:	e00a      	b.n	8001574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4908      	ldr	r1, [pc, #32]	; (8001584 <__NVIC_SetPriority+0x50>)
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	3b04      	subs	r3, #4
 800156c:	0112      	lsls	r2, r2, #4
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	440b      	add	r3, r1
 8001572:	761a      	strb	r2, [r3, #24]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000e100 	.word	0xe000e100
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <NVIC_EncodePriority>:
{
 8001588:	b480      	push	{r7}
 800158a:	b089      	sub	sp, #36	; 0x24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f1c3 0307 	rsb	r3, r3, #7
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	bf28      	it	cs
 80015a6:	2304      	movcs	r3, #4
 80015a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3304      	adds	r3, #4
 80015ae:	2b06      	cmp	r3, #6
 80015b0:	d902      	bls.n	80015b8 <NVIC_EncodePriority+0x30>
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3b03      	subs	r3, #3
 80015b6:	e000      	b.n	80015ba <NVIC_EncodePriority+0x32>
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43da      	mvns	r2, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	401a      	ands	r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	fa01 f303 	lsl.w	r3, r1, r3
 80015da:	43d9      	mvns	r1, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	4313      	orrs	r3, r2
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3724      	adds	r7, #36	; 0x24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr

080015ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ff4f 	bl	8001498 <__NVIC_SetPriorityGrouping>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001602:	b580      	push	{r7, lr}
 8001604:	b086      	sub	sp, #24
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	607a      	str	r2, [r7, #4]
 800160e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001614:	f7ff ff64 	bl	80014e0 <__NVIC_GetPriorityGrouping>
 8001618:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	6978      	ldr	r0, [r7, #20]
 8001620:	f7ff ffb2 	bl	8001588 <NVIC_EncodePriority>
 8001624:	4602      	mov	r2, r0
 8001626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff81 	bl	8001534 <__NVIC_SetPriority>
}
 8001632:	bf00      	nop
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	4603      	mov	r3, r0
 8001642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff57 	bl	80014fc <__NVIC_EnableIRQ>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e043      	b.n	80016f6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	461a      	mov	r2, r3
 8001674:	4b22      	ldr	r3, [pc, #136]	; (8001700 <HAL_DMA_Init+0xa8>)
 8001676:	4413      	add	r3, r2
 8001678:	4a22      	ldr	r2, [pc, #136]	; (8001704 <HAL_DMA_Init+0xac>)
 800167a:	fba2 2303 	umull	r2, r3, r2, r3
 800167e:	091b      	lsrs	r3, r3, #4
 8001680:	009a      	lsls	r2, r3, #2
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a1f      	ldr	r2, [pc, #124]	; (8001708 <HAL_DMA_Init+0xb0>)
 800168a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2202      	movs	r2, #2
 8001690:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80016a2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80016a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80016b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016d0:	68fa      	ldr	r2, [r7, #12]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr
 8001700:	bffdfff8 	.word	0xbffdfff8
 8001704:	cccccccd 	.word	0xcccccccd
 8001708:	40020000 	.word	0x40020000

0800170c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
 8001718:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d101      	bne.n	800172c <HAL_DMA_Start_IT+0x20>
 8001728:	2302      	movs	r3, #2
 800172a:	e04b      	b.n	80017c4 <HAL_DMA_Start_IT+0xb8>
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b01      	cmp	r3, #1
 800173e:	d13a      	bne.n	80017b6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2202      	movs	r2, #2
 8001744:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2200      	movs	r2, #0
 800174c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 0201 	bic.w	r2, r2, #1
 800175c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	68b9      	ldr	r1, [r7, #8]
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f000 f9eb 	bl	8001b40 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176e:	2b00      	cmp	r3, #0
 8001770:	d008      	beq.n	8001784 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f042 020e 	orr.w	r2, r2, #14
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	e00f      	b.n	80017a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 0204 	bic.w	r2, r2, #4
 8001792:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 020a 	orr.w	r2, r2, #10
 80017a2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f042 0201 	orr.w	r2, r2, #1
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	e005      	b.n	80017c2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80017be:	2302      	movs	r3, #2
 80017c0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80017c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017d4:	2300      	movs	r3, #0
 80017d6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d008      	beq.n	80017f6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2204      	movs	r2, #4
 80017e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e020      	b.n	8001838 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f022 020e 	bic.w	r2, r2, #14
 8001804:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 0201 	bic.w	r2, r2, #1
 8001814:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800181e:	2101      	movs	r1, #1
 8001820:	fa01 f202 	lsl.w	r2, r1, r2
 8001824:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001836:	7bfb      	ldrb	r3, [r7, #15]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr
	...

08001844 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d005      	beq.n	8001868 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2204      	movs	r2, #4
 8001860:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	73fb      	strb	r3, [r7, #15]
 8001866:	e051      	b.n	800190c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 020e 	bic.w	r2, r2, #14
 8001876:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 0201 	bic.w	r2, r2, #1
 8001886:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a22      	ldr	r2, [pc, #136]	; (8001918 <HAL_DMA_Abort_IT+0xd4>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d029      	beq.n	80018e6 <HAL_DMA_Abort_IT+0xa2>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a21      	ldr	r2, [pc, #132]	; (800191c <HAL_DMA_Abort_IT+0xd8>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d022      	beq.n	80018e2 <HAL_DMA_Abort_IT+0x9e>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a1f      	ldr	r2, [pc, #124]	; (8001920 <HAL_DMA_Abort_IT+0xdc>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d01a      	beq.n	80018dc <HAL_DMA_Abort_IT+0x98>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a1e      	ldr	r2, [pc, #120]	; (8001924 <HAL_DMA_Abort_IT+0xe0>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d012      	beq.n	80018d6 <HAL_DMA_Abort_IT+0x92>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <HAL_DMA_Abort_IT+0xe4>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d00a      	beq.n	80018d0 <HAL_DMA_Abort_IT+0x8c>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a1b      	ldr	r2, [pc, #108]	; (800192c <HAL_DMA_Abort_IT+0xe8>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d102      	bne.n	80018ca <HAL_DMA_Abort_IT+0x86>
 80018c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018c8:	e00e      	b.n	80018e8 <HAL_DMA_Abort_IT+0xa4>
 80018ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018ce:	e00b      	b.n	80018e8 <HAL_DMA_Abort_IT+0xa4>
 80018d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018d4:	e008      	b.n	80018e8 <HAL_DMA_Abort_IT+0xa4>
 80018d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018da:	e005      	b.n	80018e8 <HAL_DMA_Abort_IT+0xa4>
 80018dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018e0:	e002      	b.n	80018e8 <HAL_DMA_Abort_IT+0xa4>
 80018e2:	2310      	movs	r3, #16
 80018e4:	e000      	b.n	80018e8 <HAL_DMA_Abort_IT+0xa4>
 80018e6:	2301      	movs	r3, #1
 80018e8:	4a11      	ldr	r2, [pc, #68]	; (8001930 <HAL_DMA_Abort_IT+0xec>)
 80018ea:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	4798      	blx	r3
    } 
  }
  return status;
 800190c:	7bfb      	ldrb	r3, [r7, #15]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40020008 	.word	0x40020008
 800191c:	4002001c 	.word	0x4002001c
 8001920:	40020030 	.word	0x40020030
 8001924:	40020044 	.word	0x40020044
 8001928:	40020058 	.word	0x40020058
 800192c:	4002006c 	.word	0x4002006c
 8001930:	40020000 	.word	0x40020000

08001934 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	2204      	movs	r2, #4
 8001952:	409a      	lsls	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4013      	ands	r3, r2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d04f      	beq.n	80019fc <HAL_DMA_IRQHandler+0xc8>
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	2b00      	cmp	r3, #0
 8001964:	d04a      	beq.n	80019fc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0320 	and.w	r3, r3, #32
 8001970:	2b00      	cmp	r3, #0
 8001972:	d107      	bne.n	8001984 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f022 0204 	bic.w	r2, r2, #4
 8001982:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a66      	ldr	r2, [pc, #408]	; (8001b24 <HAL_DMA_IRQHandler+0x1f0>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d029      	beq.n	80019e2 <HAL_DMA_IRQHandler+0xae>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a65      	ldr	r2, [pc, #404]	; (8001b28 <HAL_DMA_IRQHandler+0x1f4>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d022      	beq.n	80019de <HAL_DMA_IRQHandler+0xaa>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a63      	ldr	r2, [pc, #396]	; (8001b2c <HAL_DMA_IRQHandler+0x1f8>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d01a      	beq.n	80019d8 <HAL_DMA_IRQHandler+0xa4>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a62      	ldr	r2, [pc, #392]	; (8001b30 <HAL_DMA_IRQHandler+0x1fc>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d012      	beq.n	80019d2 <HAL_DMA_IRQHandler+0x9e>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a60      	ldr	r2, [pc, #384]	; (8001b34 <HAL_DMA_IRQHandler+0x200>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d00a      	beq.n	80019cc <HAL_DMA_IRQHandler+0x98>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a5f      	ldr	r2, [pc, #380]	; (8001b38 <HAL_DMA_IRQHandler+0x204>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d102      	bne.n	80019c6 <HAL_DMA_IRQHandler+0x92>
 80019c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019c4:	e00e      	b.n	80019e4 <HAL_DMA_IRQHandler+0xb0>
 80019c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80019ca:	e00b      	b.n	80019e4 <HAL_DMA_IRQHandler+0xb0>
 80019cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80019d0:	e008      	b.n	80019e4 <HAL_DMA_IRQHandler+0xb0>
 80019d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019d6:	e005      	b.n	80019e4 <HAL_DMA_IRQHandler+0xb0>
 80019d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019dc:	e002      	b.n	80019e4 <HAL_DMA_IRQHandler+0xb0>
 80019de:	2340      	movs	r3, #64	; 0x40
 80019e0:	e000      	b.n	80019e4 <HAL_DMA_IRQHandler+0xb0>
 80019e2:	2304      	movs	r3, #4
 80019e4:	4a55      	ldr	r2, [pc, #340]	; (8001b3c <HAL_DMA_IRQHandler+0x208>)
 80019e6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f000 8094 	beq.w	8001b1a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80019fa:	e08e      	b.n	8001b1a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	2202      	movs	r2, #2
 8001a02:	409a      	lsls	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4013      	ands	r3, r2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d056      	beq.n	8001aba <HAL_DMA_IRQHandler+0x186>
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d051      	beq.n	8001aba <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0320 	and.w	r3, r3, #32
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d10b      	bne.n	8001a3c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 020a 	bic.w	r2, r2, #10
 8001a32:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a38      	ldr	r2, [pc, #224]	; (8001b24 <HAL_DMA_IRQHandler+0x1f0>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d029      	beq.n	8001a9a <HAL_DMA_IRQHandler+0x166>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a37      	ldr	r2, [pc, #220]	; (8001b28 <HAL_DMA_IRQHandler+0x1f4>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d022      	beq.n	8001a96 <HAL_DMA_IRQHandler+0x162>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a35      	ldr	r2, [pc, #212]	; (8001b2c <HAL_DMA_IRQHandler+0x1f8>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d01a      	beq.n	8001a90 <HAL_DMA_IRQHandler+0x15c>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a34      	ldr	r2, [pc, #208]	; (8001b30 <HAL_DMA_IRQHandler+0x1fc>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d012      	beq.n	8001a8a <HAL_DMA_IRQHandler+0x156>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a32      	ldr	r2, [pc, #200]	; (8001b34 <HAL_DMA_IRQHandler+0x200>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d00a      	beq.n	8001a84 <HAL_DMA_IRQHandler+0x150>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a31      	ldr	r2, [pc, #196]	; (8001b38 <HAL_DMA_IRQHandler+0x204>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d102      	bne.n	8001a7e <HAL_DMA_IRQHandler+0x14a>
 8001a78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a7c:	e00e      	b.n	8001a9c <HAL_DMA_IRQHandler+0x168>
 8001a7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a82:	e00b      	b.n	8001a9c <HAL_DMA_IRQHandler+0x168>
 8001a84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a88:	e008      	b.n	8001a9c <HAL_DMA_IRQHandler+0x168>
 8001a8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a8e:	e005      	b.n	8001a9c <HAL_DMA_IRQHandler+0x168>
 8001a90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a94:	e002      	b.n	8001a9c <HAL_DMA_IRQHandler+0x168>
 8001a96:	2320      	movs	r3, #32
 8001a98:	e000      	b.n	8001a9c <HAL_DMA_IRQHandler+0x168>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	4a27      	ldr	r2, [pc, #156]	; (8001b3c <HAL_DMA_IRQHandler+0x208>)
 8001a9e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d034      	beq.n	8001b1a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ab8:	e02f      	b.n	8001b1a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	2208      	movs	r2, #8
 8001ac0:	409a      	lsls	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d028      	beq.n	8001b1c <HAL_DMA_IRQHandler+0x1e8>
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	f003 0308 	and.w	r3, r3, #8
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d023      	beq.n	8001b1c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 020e 	bic.w	r2, r2, #14
 8001ae2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aec:	2101      	movs	r1, #1
 8001aee:	fa01 f202 	lsl.w	r2, r1, r2
 8001af2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d004      	beq.n	8001b1c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	4798      	blx	r3
    }
  }
  return;
 8001b1a:	bf00      	nop
 8001b1c:	bf00      	nop
}
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40020008 	.word	0x40020008
 8001b28:	4002001c 	.word	0x4002001c
 8001b2c:	40020030 	.word	0x40020030
 8001b30:	40020044 	.word	0x40020044
 8001b34:	40020058 	.word	0x40020058
 8001b38:	4002006c 	.word	0x4002006c
 8001b3c:	40020000 	.word	0x40020000

08001b40 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
 8001b4c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b56:	2101      	movs	r1, #1
 8001b58:	fa01 f202 	lsl.w	r2, r1, r2
 8001b5c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b10      	cmp	r3, #16
 8001b6c:	d108      	bne.n	8001b80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b7e:	e007      	b.n	8001b90 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	60da      	str	r2, [r3, #12]
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr
	...

08001b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b08b      	sub	sp, #44	; 0x2c
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001baa:	2300      	movs	r3, #0
 8001bac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bae:	e169      	b.n	8001e84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	69fa      	ldr	r2, [r7, #28]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	f040 8158 	bne.w	8001e7e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	4a9a      	ldr	r2, [pc, #616]	; (8001e3c <HAL_GPIO_Init+0x2a0>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d05e      	beq.n	8001c96 <HAL_GPIO_Init+0xfa>
 8001bd8:	4a98      	ldr	r2, [pc, #608]	; (8001e3c <HAL_GPIO_Init+0x2a0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d875      	bhi.n	8001cca <HAL_GPIO_Init+0x12e>
 8001bde:	4a98      	ldr	r2, [pc, #608]	; (8001e40 <HAL_GPIO_Init+0x2a4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d058      	beq.n	8001c96 <HAL_GPIO_Init+0xfa>
 8001be4:	4a96      	ldr	r2, [pc, #600]	; (8001e40 <HAL_GPIO_Init+0x2a4>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d86f      	bhi.n	8001cca <HAL_GPIO_Init+0x12e>
 8001bea:	4a96      	ldr	r2, [pc, #600]	; (8001e44 <HAL_GPIO_Init+0x2a8>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d052      	beq.n	8001c96 <HAL_GPIO_Init+0xfa>
 8001bf0:	4a94      	ldr	r2, [pc, #592]	; (8001e44 <HAL_GPIO_Init+0x2a8>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d869      	bhi.n	8001cca <HAL_GPIO_Init+0x12e>
 8001bf6:	4a94      	ldr	r2, [pc, #592]	; (8001e48 <HAL_GPIO_Init+0x2ac>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d04c      	beq.n	8001c96 <HAL_GPIO_Init+0xfa>
 8001bfc:	4a92      	ldr	r2, [pc, #584]	; (8001e48 <HAL_GPIO_Init+0x2ac>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d863      	bhi.n	8001cca <HAL_GPIO_Init+0x12e>
 8001c02:	4a92      	ldr	r2, [pc, #584]	; (8001e4c <HAL_GPIO_Init+0x2b0>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d046      	beq.n	8001c96 <HAL_GPIO_Init+0xfa>
 8001c08:	4a90      	ldr	r2, [pc, #576]	; (8001e4c <HAL_GPIO_Init+0x2b0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d85d      	bhi.n	8001cca <HAL_GPIO_Init+0x12e>
 8001c0e:	2b12      	cmp	r3, #18
 8001c10:	d82a      	bhi.n	8001c68 <HAL_GPIO_Init+0xcc>
 8001c12:	2b12      	cmp	r3, #18
 8001c14:	d859      	bhi.n	8001cca <HAL_GPIO_Init+0x12e>
 8001c16:	a201      	add	r2, pc, #4	; (adr r2, 8001c1c <HAL_GPIO_Init+0x80>)
 8001c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1c:	08001c97 	.word	0x08001c97
 8001c20:	08001c71 	.word	0x08001c71
 8001c24:	08001c83 	.word	0x08001c83
 8001c28:	08001cc5 	.word	0x08001cc5
 8001c2c:	08001ccb 	.word	0x08001ccb
 8001c30:	08001ccb 	.word	0x08001ccb
 8001c34:	08001ccb 	.word	0x08001ccb
 8001c38:	08001ccb 	.word	0x08001ccb
 8001c3c:	08001ccb 	.word	0x08001ccb
 8001c40:	08001ccb 	.word	0x08001ccb
 8001c44:	08001ccb 	.word	0x08001ccb
 8001c48:	08001ccb 	.word	0x08001ccb
 8001c4c:	08001ccb 	.word	0x08001ccb
 8001c50:	08001ccb 	.word	0x08001ccb
 8001c54:	08001ccb 	.word	0x08001ccb
 8001c58:	08001ccb 	.word	0x08001ccb
 8001c5c:	08001ccb 	.word	0x08001ccb
 8001c60:	08001c79 	.word	0x08001c79
 8001c64:	08001c8d 	.word	0x08001c8d
 8001c68:	4a79      	ldr	r2, [pc, #484]	; (8001e50 <HAL_GPIO_Init+0x2b4>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d013      	beq.n	8001c96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c6e:	e02c      	b.n	8001cca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	623b      	str	r3, [r7, #32]
          break;
 8001c76:	e029      	b.n	8001ccc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	623b      	str	r3, [r7, #32]
          break;
 8001c80:	e024      	b.n	8001ccc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	3308      	adds	r3, #8
 8001c88:	623b      	str	r3, [r7, #32]
          break;
 8001c8a:	e01f      	b.n	8001ccc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	330c      	adds	r3, #12
 8001c92:	623b      	str	r3, [r7, #32]
          break;
 8001c94:	e01a      	b.n	8001ccc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d102      	bne.n	8001ca4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c9e:	2304      	movs	r3, #4
 8001ca0:	623b      	str	r3, [r7, #32]
          break;
 8001ca2:	e013      	b.n	8001ccc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d105      	bne.n	8001cb8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cac:	2308      	movs	r3, #8
 8001cae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69fa      	ldr	r2, [r7, #28]
 8001cb4:	611a      	str	r2, [r3, #16]
          break;
 8001cb6:	e009      	b.n	8001ccc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cb8:	2308      	movs	r3, #8
 8001cba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69fa      	ldr	r2, [r7, #28]
 8001cc0:	615a      	str	r2, [r3, #20]
          break;
 8001cc2:	e003      	b.n	8001ccc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	623b      	str	r3, [r7, #32]
          break;
 8001cc8:	e000      	b.n	8001ccc <HAL_GPIO_Init+0x130>
          break;
 8001cca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	2bff      	cmp	r3, #255	; 0xff
 8001cd0:	d801      	bhi.n	8001cd6 <HAL_GPIO_Init+0x13a>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	e001      	b.n	8001cda <HAL_GPIO_Init+0x13e>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	2bff      	cmp	r3, #255	; 0xff
 8001ce0:	d802      	bhi.n	8001ce8 <HAL_GPIO_Init+0x14c>
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	e002      	b.n	8001cee <HAL_GPIO_Init+0x152>
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	3b08      	subs	r3, #8
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	210f      	movs	r1, #15
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	401a      	ands	r2, r3
 8001d00:	6a39      	ldr	r1, [r7, #32]
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	fa01 f303 	lsl.w	r3, r1, r3
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 80b1 	beq.w	8001e7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d1c:	4b4d      	ldr	r3, [pc, #308]	; (8001e54 <HAL_GPIO_Init+0x2b8>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	4a4c      	ldr	r2, [pc, #304]	; (8001e54 <HAL_GPIO_Init+0x2b8>)
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	6193      	str	r3, [r2, #24]
 8001d28:	4b4a      	ldr	r3, [pc, #296]	; (8001e54 <HAL_GPIO_Init+0x2b8>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d34:	4a48      	ldr	r2, [pc, #288]	; (8001e58 <HAL_GPIO_Init+0x2bc>)
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	089b      	lsrs	r3, r3, #2
 8001d3a:	3302      	adds	r3, #2
 8001d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	220f      	movs	r2, #15
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	4013      	ands	r3, r2
 8001d56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a40      	ldr	r2, [pc, #256]	; (8001e5c <HAL_GPIO_Init+0x2c0>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d013      	beq.n	8001d88 <HAL_GPIO_Init+0x1ec>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a3f      	ldr	r2, [pc, #252]	; (8001e60 <HAL_GPIO_Init+0x2c4>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d00d      	beq.n	8001d84 <HAL_GPIO_Init+0x1e8>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a3e      	ldr	r2, [pc, #248]	; (8001e64 <HAL_GPIO_Init+0x2c8>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d007      	beq.n	8001d80 <HAL_GPIO_Init+0x1e4>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a3d      	ldr	r2, [pc, #244]	; (8001e68 <HAL_GPIO_Init+0x2cc>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d101      	bne.n	8001d7c <HAL_GPIO_Init+0x1e0>
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e006      	b.n	8001d8a <HAL_GPIO_Init+0x1ee>
 8001d7c:	2304      	movs	r3, #4
 8001d7e:	e004      	b.n	8001d8a <HAL_GPIO_Init+0x1ee>
 8001d80:	2302      	movs	r3, #2
 8001d82:	e002      	b.n	8001d8a <HAL_GPIO_Init+0x1ee>
 8001d84:	2301      	movs	r3, #1
 8001d86:	e000      	b.n	8001d8a <HAL_GPIO_Init+0x1ee>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d8c:	f002 0203 	and.w	r2, r2, #3
 8001d90:	0092      	lsls	r2, r2, #2
 8001d92:	4093      	lsls	r3, r2
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d9a:	492f      	ldr	r1, [pc, #188]	; (8001e58 <HAL_GPIO_Init+0x2bc>)
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	089b      	lsrs	r3, r3, #2
 8001da0:	3302      	adds	r3, #2
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d006      	beq.n	8001dc2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001db4:	4b2d      	ldr	r3, [pc, #180]	; (8001e6c <HAL_GPIO_Init+0x2d0>)
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	492c      	ldr	r1, [pc, #176]	; (8001e6c <HAL_GPIO_Init+0x2d0>)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	608b      	str	r3, [r1, #8]
 8001dc0:	e006      	b.n	8001dd0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dc2:	4b2a      	ldr	r3, [pc, #168]	; (8001e6c <HAL_GPIO_Init+0x2d0>)
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	4928      	ldr	r1, [pc, #160]	; (8001e6c <HAL_GPIO_Init+0x2d0>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d006      	beq.n	8001dea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ddc:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <HAL_GPIO_Init+0x2d0>)
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	4922      	ldr	r1, [pc, #136]	; (8001e6c <HAL_GPIO_Init+0x2d0>)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	60cb      	str	r3, [r1, #12]
 8001de8:	e006      	b.n	8001df8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dea:	4b20      	ldr	r3, [pc, #128]	; (8001e6c <HAL_GPIO_Init+0x2d0>)
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	491e      	ldr	r1, [pc, #120]	; (8001e6c <HAL_GPIO_Init+0x2d0>)
 8001df4:	4013      	ands	r3, r2
 8001df6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d006      	beq.n	8001e12 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e04:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <HAL_GPIO_Init+0x2d0>)
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	4918      	ldr	r1, [pc, #96]	; (8001e6c <HAL_GPIO_Init+0x2d0>)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
 8001e10:	e006      	b.n	8001e20 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e12:	4b16      	ldr	r3, [pc, #88]	; (8001e6c <HAL_GPIO_Init+0x2d0>)
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	4914      	ldr	r1, [pc, #80]	; (8001e6c <HAL_GPIO_Init+0x2d0>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d021      	beq.n	8001e70 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e2c:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <HAL_GPIO_Init+0x2d0>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	490e      	ldr	r1, [pc, #56]	; (8001e6c <HAL_GPIO_Init+0x2d0>)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	600b      	str	r3, [r1, #0]
 8001e38:	e021      	b.n	8001e7e <HAL_GPIO_Init+0x2e2>
 8001e3a:	bf00      	nop
 8001e3c:	10320000 	.word	0x10320000
 8001e40:	10310000 	.word	0x10310000
 8001e44:	10220000 	.word	0x10220000
 8001e48:	10210000 	.word	0x10210000
 8001e4c:	10120000 	.word	0x10120000
 8001e50:	10110000 	.word	0x10110000
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40010000 	.word	0x40010000
 8001e5c:	40010800 	.word	0x40010800
 8001e60:	40010c00 	.word	0x40010c00
 8001e64:	40011000 	.word	0x40011000
 8001e68:	40011400 	.word	0x40011400
 8001e6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e70:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_GPIO_Init+0x304>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	43db      	mvns	r3, r3
 8001e78:	4909      	ldr	r1, [pc, #36]	; (8001ea0 <HAL_GPIO_Init+0x304>)
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	3301      	adds	r3, #1
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f47f ae8e 	bne.w	8001bb0 <HAL_GPIO_Init+0x14>
  }
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	372c      	adds	r7, #44	; 0x2c
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr
 8001ea0:	40010400 	.word	0x40010400

08001ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	807b      	strh	r3, [r7, #2]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eb4:	787b      	ldrb	r3, [r7, #1]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eba:	887a      	ldrh	r2, [r7, #2]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ec0:	e003      	b.n	8001eca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ec2:	887b      	ldrh	r3, [r7, #2]
 8001ec4:	041a      	lsls	r2, r3, #16
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	611a      	str	r2, [r3, #16]
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e272      	b.n	80023cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 8087 	beq.w	8002002 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ef4:	4b92      	ldr	r3, [pc, #584]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 030c 	and.w	r3, r3, #12
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d00c      	beq.n	8001f1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f00:	4b8f      	ldr	r3, [pc, #572]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 030c 	and.w	r3, r3, #12
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d112      	bne.n	8001f32 <HAL_RCC_OscConfig+0x5e>
 8001f0c:	4b8c      	ldr	r3, [pc, #560]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f18:	d10b      	bne.n	8001f32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f1a:	4b89      	ldr	r3, [pc, #548]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d06c      	beq.n	8002000 <HAL_RCC_OscConfig+0x12c>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d168      	bne.n	8002000 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e24c      	b.n	80023cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f3a:	d106      	bne.n	8001f4a <HAL_RCC_OscConfig+0x76>
 8001f3c:	4b80      	ldr	r3, [pc, #512]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a7f      	ldr	r2, [pc, #508]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	e02e      	b.n	8001fa8 <HAL_RCC_OscConfig+0xd4>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10c      	bne.n	8001f6c <HAL_RCC_OscConfig+0x98>
 8001f52:	4b7b      	ldr	r3, [pc, #492]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a7a      	ldr	r2, [pc, #488]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	4b78      	ldr	r3, [pc, #480]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a77      	ldr	r2, [pc, #476]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	e01d      	b.n	8001fa8 <HAL_RCC_OscConfig+0xd4>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f74:	d10c      	bne.n	8001f90 <HAL_RCC_OscConfig+0xbc>
 8001f76:	4b72      	ldr	r3, [pc, #456]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a71      	ldr	r2, [pc, #452]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	4b6f      	ldr	r3, [pc, #444]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a6e      	ldr	r2, [pc, #440]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	e00b      	b.n	8001fa8 <HAL_RCC_OscConfig+0xd4>
 8001f90:	4b6b      	ldr	r3, [pc, #428]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a6a      	ldr	r2, [pc, #424]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f9a:	6013      	str	r3, [r2, #0]
 8001f9c:	4b68      	ldr	r3, [pc, #416]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a67      	ldr	r2, [pc, #412]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fa6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d013      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb0:	f7ff fa44 	bl	800143c <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb8:	f7ff fa40 	bl	800143c <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b64      	cmp	r3, #100	; 0x64
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e200      	b.n	80023cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fca:	4b5d      	ldr	r3, [pc, #372]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0xe4>
 8001fd6:	e014      	b.n	8002002 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd8:	f7ff fa30 	bl	800143c <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe0:	f7ff fa2c 	bl	800143c <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b64      	cmp	r3, #100	; 0x64
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e1ec      	b.n	80023cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff2:	4b53      	ldr	r3, [pc, #332]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f0      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x10c>
 8001ffe:	e000      	b.n	8002002 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d063      	beq.n	80020d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800200e:	4b4c      	ldr	r3, [pc, #304]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 030c 	and.w	r3, r3, #12
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00b      	beq.n	8002032 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800201a:	4b49      	ldr	r3, [pc, #292]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 030c 	and.w	r3, r3, #12
 8002022:	2b08      	cmp	r3, #8
 8002024:	d11c      	bne.n	8002060 <HAL_RCC_OscConfig+0x18c>
 8002026:	4b46      	ldr	r3, [pc, #280]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d116      	bne.n	8002060 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002032:	4b43      	ldr	r3, [pc, #268]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d005      	beq.n	800204a <HAL_RCC_OscConfig+0x176>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d001      	beq.n	800204a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e1c0      	b.n	80023cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204a:	4b3d      	ldr	r3, [pc, #244]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4939      	ldr	r1, [pc, #228]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 800205a:	4313      	orrs	r3, r2
 800205c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800205e:	e03a      	b.n	80020d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d020      	beq.n	80020aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002068:	4b36      	ldr	r3, [pc, #216]	; (8002144 <HAL_RCC_OscConfig+0x270>)
 800206a:	2201      	movs	r2, #1
 800206c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206e:	f7ff f9e5 	bl	800143c <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002076:	f7ff f9e1 	bl	800143c <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e1a1      	b.n	80023cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002088:	4b2d      	ldr	r3, [pc, #180]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0f0      	beq.n	8002076 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002094:	4b2a      	ldr	r3, [pc, #168]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4927      	ldr	r1, [pc, #156]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	600b      	str	r3, [r1, #0]
 80020a8:	e015      	b.n	80020d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020aa:	4b26      	ldr	r3, [pc, #152]	; (8002144 <HAL_RCC_OscConfig+0x270>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b0:	f7ff f9c4 	bl	800143c <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020b8:	f7ff f9c0 	bl	800143c <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e180      	b.n	80023cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ca:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d03a      	beq.n	8002158 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d019      	beq.n	800211e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ea:	4b17      	ldr	r3, [pc, #92]	; (8002148 <HAL_RCC_OscConfig+0x274>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f0:	f7ff f9a4 	bl	800143c <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020f8:	f7ff f9a0 	bl	800143c <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e160      	b.n	80023cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800210a:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0f0      	beq.n	80020f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002116:	2001      	movs	r0, #1
 8002118:	f000 fafe 	bl	8002718 <RCC_Delay>
 800211c:	e01c      	b.n	8002158 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800211e:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <HAL_RCC_OscConfig+0x274>)
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002124:	f7ff f98a 	bl	800143c <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800212a:	e00f      	b.n	800214c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800212c:	f7ff f986 	bl	800143c <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d908      	bls.n	800214c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e146      	b.n	80023cc <HAL_RCC_OscConfig+0x4f8>
 800213e:	bf00      	nop
 8002140:	40021000 	.word	0x40021000
 8002144:	42420000 	.word	0x42420000
 8002148:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800214c:	4b92      	ldr	r3, [pc, #584]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1e9      	bne.n	800212c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 80a6 	beq.w	80022b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002166:	2300      	movs	r3, #0
 8002168:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800216a:	4b8b      	ldr	r3, [pc, #556]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10d      	bne.n	8002192 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002176:	4b88      	ldr	r3, [pc, #544]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	4a87      	ldr	r2, [pc, #540]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 800217c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002180:	61d3      	str	r3, [r2, #28]
 8002182:	4b85      	ldr	r3, [pc, #532]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800218e:	2301      	movs	r3, #1
 8002190:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002192:	4b82      	ldr	r3, [pc, #520]	; (800239c <HAL_RCC_OscConfig+0x4c8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219a:	2b00      	cmp	r3, #0
 800219c:	d118      	bne.n	80021d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800219e:	4b7f      	ldr	r3, [pc, #508]	; (800239c <HAL_RCC_OscConfig+0x4c8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a7e      	ldr	r2, [pc, #504]	; (800239c <HAL_RCC_OscConfig+0x4c8>)
 80021a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021aa:	f7ff f947 	bl	800143c <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b2:	f7ff f943 	bl	800143c <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b64      	cmp	r3, #100	; 0x64
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e103      	b.n	80023cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c4:	4b75      	ldr	r3, [pc, #468]	; (800239c <HAL_RCC_OscConfig+0x4c8>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d106      	bne.n	80021e6 <HAL_RCC_OscConfig+0x312>
 80021d8:	4b6f      	ldr	r3, [pc, #444]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	4a6e      	ldr	r2, [pc, #440]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	6213      	str	r3, [r2, #32]
 80021e4:	e02d      	b.n	8002242 <HAL_RCC_OscConfig+0x36e>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10c      	bne.n	8002208 <HAL_RCC_OscConfig+0x334>
 80021ee:	4b6a      	ldr	r3, [pc, #424]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	4a69      	ldr	r2, [pc, #420]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	f023 0301 	bic.w	r3, r3, #1
 80021f8:	6213      	str	r3, [r2, #32]
 80021fa:	4b67      	ldr	r3, [pc, #412]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	4a66      	ldr	r2, [pc, #408]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 8002200:	f023 0304 	bic.w	r3, r3, #4
 8002204:	6213      	str	r3, [r2, #32]
 8002206:	e01c      	b.n	8002242 <HAL_RCC_OscConfig+0x36e>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	2b05      	cmp	r3, #5
 800220e:	d10c      	bne.n	800222a <HAL_RCC_OscConfig+0x356>
 8002210:	4b61      	ldr	r3, [pc, #388]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	4a60      	ldr	r2, [pc, #384]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 8002216:	f043 0304 	orr.w	r3, r3, #4
 800221a:	6213      	str	r3, [r2, #32]
 800221c:	4b5e      	ldr	r3, [pc, #376]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	4a5d      	ldr	r2, [pc, #372]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	6213      	str	r3, [r2, #32]
 8002228:	e00b      	b.n	8002242 <HAL_RCC_OscConfig+0x36e>
 800222a:	4b5b      	ldr	r3, [pc, #364]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	4a5a      	ldr	r2, [pc, #360]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 8002230:	f023 0301 	bic.w	r3, r3, #1
 8002234:	6213      	str	r3, [r2, #32]
 8002236:	4b58      	ldr	r3, [pc, #352]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	4a57      	ldr	r2, [pc, #348]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 800223c:	f023 0304 	bic.w	r3, r3, #4
 8002240:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d015      	beq.n	8002276 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224a:	f7ff f8f7 	bl	800143c <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002250:	e00a      	b.n	8002268 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002252:	f7ff f8f3 	bl	800143c <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002260:	4293      	cmp	r3, r2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e0b1      	b.n	80023cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002268:	4b4b      	ldr	r3, [pc, #300]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0ee      	beq.n	8002252 <HAL_RCC_OscConfig+0x37e>
 8002274:	e014      	b.n	80022a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002276:	f7ff f8e1 	bl	800143c <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800227c:	e00a      	b.n	8002294 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800227e:	f7ff f8dd 	bl	800143c <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	f241 3288 	movw	r2, #5000	; 0x1388
 800228c:	4293      	cmp	r3, r2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e09b      	b.n	80023cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002294:	4b40      	ldr	r3, [pc, #256]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1ee      	bne.n	800227e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022a0:	7dfb      	ldrb	r3, [r7, #23]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d105      	bne.n	80022b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a6:	4b3c      	ldr	r3, [pc, #240]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	4a3b      	ldr	r2, [pc, #236]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 8087 	beq.w	80023ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022bc:	4b36      	ldr	r3, [pc, #216]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 030c 	and.w	r3, r3, #12
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d061      	beq.n	800238c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d146      	bne.n	800235e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d0:	4b33      	ldr	r3, [pc, #204]	; (80023a0 <HAL_RCC_OscConfig+0x4cc>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d6:	f7ff f8b1 	bl	800143c <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022de:	f7ff f8ad 	bl	800143c <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e06d      	b.n	80023cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f0:	4b29      	ldr	r3, [pc, #164]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1f0      	bne.n	80022de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002304:	d108      	bne.n	8002318 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002306:	4b24      	ldr	r3, [pc, #144]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	4921      	ldr	r1, [pc, #132]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 8002314:	4313      	orrs	r3, r2
 8002316:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002318:	4b1f      	ldr	r3, [pc, #124]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a19      	ldr	r1, [r3, #32]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	430b      	orrs	r3, r1
 800232a:	491b      	ldr	r1, [pc, #108]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 800232c:	4313      	orrs	r3, r2
 800232e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002330:	4b1b      	ldr	r3, [pc, #108]	; (80023a0 <HAL_RCC_OscConfig+0x4cc>)
 8002332:	2201      	movs	r2, #1
 8002334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002336:	f7ff f881 	bl	800143c <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233e:	f7ff f87d 	bl	800143c <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e03d      	b.n	80023cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002350:	4b11      	ldr	r3, [pc, #68]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0f0      	beq.n	800233e <HAL_RCC_OscConfig+0x46a>
 800235c:	e035      	b.n	80023ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800235e:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <HAL_RCC_OscConfig+0x4cc>)
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002364:	f7ff f86a 	bl	800143c <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236c:	f7ff f866 	bl	800143c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e026      	b.n	80023cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800237e:	4b06      	ldr	r3, [pc, #24]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f0      	bne.n	800236c <HAL_RCC_OscConfig+0x498>
 800238a:	e01e      	b.n	80023ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d107      	bne.n	80023a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e019      	b.n	80023cc <HAL_RCC_OscConfig+0x4f8>
 8002398:	40021000 	.word	0x40021000
 800239c:	40007000 	.word	0x40007000
 80023a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <HAL_RCC_OscConfig+0x500>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d106      	bne.n	80023c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d001      	beq.n	80023ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40021000 	.word	0x40021000

080023d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e0d0      	b.n	800258e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023ec:	4b6a      	ldr	r3, [pc, #424]	; (8002598 <HAL_RCC_ClockConfig+0x1c0>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d910      	bls.n	800241c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fa:	4b67      	ldr	r3, [pc, #412]	; (8002598 <HAL_RCC_ClockConfig+0x1c0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f023 0207 	bic.w	r2, r3, #7
 8002402:	4965      	ldr	r1, [pc, #404]	; (8002598 <HAL_RCC_ClockConfig+0x1c0>)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	4313      	orrs	r3, r2
 8002408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800240a:	4b63      	ldr	r3, [pc, #396]	; (8002598 <HAL_RCC_ClockConfig+0x1c0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d001      	beq.n	800241c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0b8      	b.n	800258e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d020      	beq.n	800246a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002434:	4b59      	ldr	r3, [pc, #356]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	4a58      	ldr	r2, [pc, #352]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 800243a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800243e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b00      	cmp	r3, #0
 800244a:	d005      	beq.n	8002458 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800244c:	4b53      	ldr	r3, [pc, #332]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	4a52      	ldr	r2, [pc, #328]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 8002452:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002456:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002458:	4b50      	ldr	r3, [pc, #320]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	494d      	ldr	r1, [pc, #308]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 8002466:	4313      	orrs	r3, r2
 8002468:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d040      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d107      	bne.n	800248e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247e:	4b47      	ldr	r3, [pc, #284]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d115      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e07f      	b.n	800258e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d107      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002496:	4b41      	ldr	r3, [pc, #260]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d109      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e073      	b.n	800258e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a6:	4b3d      	ldr	r3, [pc, #244]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e06b      	b.n	800258e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024b6:	4b39      	ldr	r3, [pc, #228]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f023 0203 	bic.w	r2, r3, #3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	4936      	ldr	r1, [pc, #216]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024c8:	f7fe ffb8 	bl	800143c <HAL_GetTick>
 80024cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ce:	e00a      	b.n	80024e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d0:	f7fe ffb4 	bl	800143c <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	f241 3288 	movw	r2, #5000	; 0x1388
 80024de:	4293      	cmp	r3, r2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e053      	b.n	800258e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e6:	4b2d      	ldr	r3, [pc, #180]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 020c 	and.w	r2, r3, #12
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d1eb      	bne.n	80024d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024f8:	4b27      	ldr	r3, [pc, #156]	; (8002598 <HAL_RCC_ClockConfig+0x1c0>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d210      	bcs.n	8002528 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002506:	4b24      	ldr	r3, [pc, #144]	; (8002598 <HAL_RCC_ClockConfig+0x1c0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f023 0207 	bic.w	r2, r3, #7
 800250e:	4922      	ldr	r1, [pc, #136]	; (8002598 <HAL_RCC_ClockConfig+0x1c0>)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	4313      	orrs	r3, r2
 8002514:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002516:	4b20      	ldr	r3, [pc, #128]	; (8002598 <HAL_RCC_ClockConfig+0x1c0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d001      	beq.n	8002528 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e032      	b.n	800258e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b00      	cmp	r3, #0
 8002532:	d008      	beq.n	8002546 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002534:	4b19      	ldr	r3, [pc, #100]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	4916      	ldr	r1, [pc, #88]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 8002542:	4313      	orrs	r3, r2
 8002544:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	2b00      	cmp	r3, #0
 8002550:	d009      	beq.n	8002566 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002552:	4b12      	ldr	r3, [pc, #72]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	490e      	ldr	r1, [pc, #56]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 8002562:	4313      	orrs	r3, r2
 8002564:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002566:	f000 f821 	bl	80025ac <HAL_RCC_GetSysClockFreq>
 800256a:	4602      	mov	r2, r0
 800256c:	4b0b      	ldr	r3, [pc, #44]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	091b      	lsrs	r3, r3, #4
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	490a      	ldr	r1, [pc, #40]	; (80025a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002578:	5ccb      	ldrb	r3, [r1, r3]
 800257a:	fa22 f303 	lsr.w	r3, r2, r3
 800257e:	4a09      	ldr	r2, [pc, #36]	; (80025a4 <HAL_RCC_ClockConfig+0x1cc>)
 8002580:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002582:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f7fe fb74 	bl	8000c74 <HAL_InitTick>

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40022000 	.word	0x40022000
 800259c:	40021000 	.word	0x40021000
 80025a0:	08004940 	.word	0x08004940
 80025a4:	20000004 	.word	0x20000004
 80025a8:	20000008 	.word	0x20000008

080025ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	2300      	movs	r3, #0
 80025b8:	60bb      	str	r3, [r7, #8]
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	2300      	movs	r3, #0
 80025c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025c6:	4b1e      	ldr	r3, [pc, #120]	; (8002640 <HAL_RCC_GetSysClockFreq+0x94>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d002      	beq.n	80025dc <HAL_RCC_GetSysClockFreq+0x30>
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d003      	beq.n	80025e2 <HAL_RCC_GetSysClockFreq+0x36>
 80025da:	e027      	b.n	800262c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025dc:	4b19      	ldr	r3, [pc, #100]	; (8002644 <HAL_RCC_GetSysClockFreq+0x98>)
 80025de:	613b      	str	r3, [r7, #16]
      break;
 80025e0:	e027      	b.n	8002632 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	0c9b      	lsrs	r3, r3, #18
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	4a17      	ldr	r2, [pc, #92]	; (8002648 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025ec:	5cd3      	ldrb	r3, [r2, r3]
 80025ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d010      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025fa:	4b11      	ldr	r3, [pc, #68]	; (8002640 <HAL_RCC_GetSysClockFreq+0x94>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	0c5b      	lsrs	r3, r3, #17
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	4a11      	ldr	r2, [pc, #68]	; (800264c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002606:	5cd3      	ldrb	r3, [r2, r3]
 8002608:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a0d      	ldr	r2, [pc, #52]	; (8002644 <HAL_RCC_GetSysClockFreq+0x98>)
 800260e:	fb03 f202 	mul.w	r2, r3, r2
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	fbb2 f3f3 	udiv	r3, r2, r3
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	e004      	b.n	8002626 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a0c      	ldr	r2, [pc, #48]	; (8002650 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002620:	fb02 f303 	mul.w	r3, r2, r3
 8002624:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	613b      	str	r3, [r7, #16]
      break;
 800262a:	e002      	b.n	8002632 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <HAL_RCC_GetSysClockFreq+0x98>)
 800262e:	613b      	str	r3, [r7, #16]
      break;
 8002630:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002632:	693b      	ldr	r3, [r7, #16]
}
 8002634:	4618      	mov	r0, r3
 8002636:	371c      	adds	r7, #28
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	40021000 	.word	0x40021000
 8002644:	007a1200 	.word	0x007a1200
 8002648:	08004958 	.word	0x08004958
 800264c:	08004968 	.word	0x08004968
 8002650:	003d0900 	.word	0x003d0900

08002654 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002658:	4b02      	ldr	r3, [pc, #8]	; (8002664 <HAL_RCC_GetHCLKFreq+0x10>)
 800265a:	681b      	ldr	r3, [r3, #0]
}
 800265c:	4618      	mov	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr
 8002664:	20000004 	.word	0x20000004

08002668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800266c:	f7ff fff2 	bl	8002654 <HAL_RCC_GetHCLKFreq>
 8002670:	4602      	mov	r2, r0
 8002672:	4b05      	ldr	r3, [pc, #20]	; (8002688 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	0a1b      	lsrs	r3, r3, #8
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	4903      	ldr	r1, [pc, #12]	; (800268c <HAL_RCC_GetPCLK1Freq+0x24>)
 800267e:	5ccb      	ldrb	r3, [r1, r3]
 8002680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002684:	4618      	mov	r0, r3
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40021000 	.word	0x40021000
 800268c:	08004950 	.word	0x08004950

08002690 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002694:	f7ff ffde 	bl	8002654 <HAL_RCC_GetHCLKFreq>
 8002698:	4602      	mov	r2, r0
 800269a:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	0adb      	lsrs	r3, r3, #11
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	4903      	ldr	r1, [pc, #12]	; (80026b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026a6:	5ccb      	ldrb	r3, [r1, r3]
 80026a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40021000 	.word	0x40021000
 80026b4:	08004950 	.word	0x08004950

080026b8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	220f      	movs	r2, #15
 80026c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80026c8:	4b11      	ldr	r3, [pc, #68]	; (8002710 <HAL_RCC_GetClockConfig+0x58>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f003 0203 	and.w	r2, r3, #3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80026d4:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <HAL_RCC_GetClockConfig+0x58>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80026e0:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <HAL_RCC_GetClockConfig+0x58>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80026ec:	4b08      	ldr	r3, [pc, #32]	; (8002710 <HAL_RCC_GetClockConfig+0x58>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	08db      	lsrs	r3, r3, #3
 80026f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80026fa:	4b06      	ldr	r3, [pc, #24]	; (8002714 <HAL_RCC_GetClockConfig+0x5c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0207 	and.w	r2, r3, #7
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr
 8002710:	40021000 	.word	0x40021000
 8002714:	40022000 	.word	0x40022000

08002718 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002720:	4b0a      	ldr	r3, [pc, #40]	; (800274c <RCC_Delay+0x34>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a0a      	ldr	r2, [pc, #40]	; (8002750 <RCC_Delay+0x38>)
 8002726:	fba2 2303 	umull	r2, r3, r2, r3
 800272a:	0a5b      	lsrs	r3, r3, #9
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	fb02 f303 	mul.w	r3, r2, r3
 8002732:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002734:	bf00      	nop
  }
  while (Delay --);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	1e5a      	subs	r2, r3, #1
 800273a:	60fa      	str	r2, [r7, #12]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1f9      	bne.n	8002734 <RCC_Delay+0x1c>
}
 8002740:	bf00      	nop
 8002742:	bf00      	nop
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr
 800274c:	20000004 	.word	0x20000004
 8002750:	10624dd3 	.word	0x10624dd3

08002754 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e076      	b.n	8002854 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	2b00      	cmp	r3, #0
 800276c:	d108      	bne.n	8002780 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002776:	d009      	beq.n	800278c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	61da      	str	r2, [r3, #28]
 800277e:	e005      	b.n	800278c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d106      	bne.n	80027ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7fe f932 	bl	8000a10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2202      	movs	r2, #2
 80027b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80027d4:	431a      	orrs	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027fc:	431a      	orrs	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002810:	ea42 0103 	orr.w	r1, r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002818:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	0c1a      	lsrs	r2, r3, #16
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f002 0204 	and.w	r2, r2, #4
 8002832:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	69da      	ldr	r2, [r3, #28]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002842:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e041      	b.n	80028f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d106      	bne.n	8002888 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f839 	bl	80028fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3304      	adds	r3, #4
 8002898:	4619      	mov	r1, r3
 800289a:	4610      	mov	r0, r2
 800289c:	f000 f9b4 	bl	8002c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b01      	cmp	r3, #1
 800291e:	d001      	beq.n	8002924 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e03a      	b.n	800299a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0201 	orr.w	r2, r2, #1
 800293a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a18      	ldr	r2, [pc, #96]	; (80029a4 <HAL_TIM_Base_Start_IT+0x98>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d00e      	beq.n	8002964 <HAL_TIM_Base_Start_IT+0x58>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294e:	d009      	beq.n	8002964 <HAL_TIM_Base_Start_IT+0x58>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a14      	ldr	r2, [pc, #80]	; (80029a8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d004      	beq.n	8002964 <HAL_TIM_Base_Start_IT+0x58>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a13      	ldr	r2, [pc, #76]	; (80029ac <HAL_TIM_Base_Start_IT+0xa0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d111      	bne.n	8002988 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2b06      	cmp	r3, #6
 8002974:	d010      	beq.n	8002998 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f042 0201 	orr.w	r2, r2, #1
 8002984:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002986:	e007      	b.n	8002998 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0201 	orr.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr
 80029a4:	40012c00 	.word	0x40012c00
 80029a8:	40000400 	.word	0x40000400
 80029ac:	40000800 	.word	0x40000800

080029b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d122      	bne.n	8002a0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d11b      	bne.n	8002a0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f06f 0202 	mvn.w	r2, #2
 80029dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f8ed 	bl	8002bd2 <HAL_TIM_IC_CaptureCallback>
 80029f8:	e005      	b.n	8002a06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f8e0 	bl	8002bc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f8ef 	bl	8002be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d122      	bne.n	8002a60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d11b      	bne.n	8002a60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f06f 0204 	mvn.w	r2, #4
 8002a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2202      	movs	r2, #2
 8002a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f8c3 	bl	8002bd2 <HAL_TIM_IC_CaptureCallback>
 8002a4c:	e005      	b.n	8002a5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f8b6 	bl	8002bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f8c5 	bl	8002be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d122      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f003 0308 	and.w	r3, r3, #8
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d11b      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f06f 0208 	mvn.w	r2, #8
 8002a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2204      	movs	r2, #4
 8002a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f899 	bl	8002bd2 <HAL_TIM_IC_CaptureCallback>
 8002aa0:	e005      	b.n	8002aae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f88c 	bl	8002bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f89b 	bl	8002be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f003 0310 	and.w	r3, r3, #16
 8002abe:	2b10      	cmp	r3, #16
 8002ac0:	d122      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f003 0310 	and.w	r3, r3, #16
 8002acc:	2b10      	cmp	r3, #16
 8002ace:	d11b      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0210 	mvn.w	r2, #16
 8002ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2208      	movs	r2, #8
 8002ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f86f 	bl	8002bd2 <HAL_TIM_IC_CaptureCallback>
 8002af4:	e005      	b.n	8002b02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f862 	bl	8002bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f871 	bl	8002be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d10e      	bne.n	8002b34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d107      	bne.n	8002b34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f06f 0201 	mvn.w	r2, #1
 8002b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7fd ff24 	bl	800097c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3e:	2b80      	cmp	r3, #128	; 0x80
 8002b40:	d10e      	bne.n	8002b60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4c:	2b80      	cmp	r3, #128	; 0x80
 8002b4e:	d107      	bne.n	8002b60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f8bf 	bl	8002cde <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6a:	2b40      	cmp	r3, #64	; 0x40
 8002b6c:	d10e      	bne.n	8002b8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b78:	2b40      	cmp	r3, #64	; 0x40
 8002b7a:	d107      	bne.n	8002b8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f835 	bl	8002bf6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	f003 0320 	and.w	r3, r3, #32
 8002b96:	2b20      	cmp	r3, #32
 8002b98:	d10e      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f003 0320 	and.w	r3, r3, #32
 8002ba4:	2b20      	cmp	r3, #32
 8002ba6:	d107      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f06f 0220 	mvn.w	r2, #32
 8002bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f88a 	bl	8002ccc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bb8:	bf00      	nop
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr

08002bd2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr

08002bf6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr

08002c08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a29      	ldr	r2, [pc, #164]	; (8002cc0 <TIM_Base_SetConfig+0xb8>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d00b      	beq.n	8002c38 <TIM_Base_SetConfig+0x30>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c26:	d007      	beq.n	8002c38 <TIM_Base_SetConfig+0x30>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a26      	ldr	r2, [pc, #152]	; (8002cc4 <TIM_Base_SetConfig+0xbc>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d003      	beq.n	8002c38 <TIM_Base_SetConfig+0x30>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a25      	ldr	r2, [pc, #148]	; (8002cc8 <TIM_Base_SetConfig+0xc0>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d108      	bne.n	8002c4a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a1c      	ldr	r2, [pc, #112]	; (8002cc0 <TIM_Base_SetConfig+0xb8>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d00b      	beq.n	8002c6a <TIM_Base_SetConfig+0x62>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c58:	d007      	beq.n	8002c6a <TIM_Base_SetConfig+0x62>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a19      	ldr	r2, [pc, #100]	; (8002cc4 <TIM_Base_SetConfig+0xbc>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d003      	beq.n	8002c6a <TIM_Base_SetConfig+0x62>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a18      	ldr	r2, [pc, #96]	; (8002cc8 <TIM_Base_SetConfig+0xc0>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d108      	bne.n	8002c7c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a07      	ldr	r2, [pc, #28]	; (8002cc0 <TIM_Base_SetConfig+0xb8>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d103      	bne.n	8002cb0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	691a      	ldr	r2, [r3, #16]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	615a      	str	r2, [r3, #20]
}
 8002cb6:	bf00      	nop
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr
 8002cc0:	40012c00 	.word	0x40012c00
 8002cc4:	40000400 	.word	0x40000400
 8002cc8:	40000800 	.word	0x40000800

08002ccc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr

08002cde <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr

08002cf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e042      	b.n	8002d88 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d106      	bne.n	8002d1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7fd ff00 	bl	8000b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2224      	movs	r2, #36	; 0x24
 8002d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 ff89 	bl	8003c4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695a      	ldr	r2, [r3, #20]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68da      	ldr	r2, [r3, #12]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08a      	sub	sp, #40	; 0x28
 8002d94:	af02      	add	r7, sp, #8
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b20      	cmp	r3, #32
 8002dae:	d16d      	bne.n	8002e8c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <HAL_UART_Transmit+0x2c>
 8002db6:	88fb      	ldrh	r3, [r7, #6]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e066      	b.n	8002e8e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2221      	movs	r2, #33	; 0x21
 8002dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dce:	f7fe fb35 	bl	800143c <HAL_GetTick>
 8002dd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	88fa      	ldrh	r2, [r7, #6]
 8002dd8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	88fa      	ldrh	r2, [r7, #6]
 8002dde:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002de8:	d108      	bne.n	8002dfc <HAL_UART_Transmit+0x6c>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d104      	bne.n	8002dfc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	61bb      	str	r3, [r7, #24]
 8002dfa:	e003      	b.n	8002e04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e04:	e02a      	b.n	8002e5c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2180      	movs	r1, #128	; 0x80
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 fc51 	bl	80036b8 <UART_WaitOnFlagUntilTimeout>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e036      	b.n	8002e8e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10b      	bne.n	8002e3e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	881b      	ldrh	r3, [r3, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	3302      	adds	r3, #2
 8002e3a:	61bb      	str	r3, [r7, #24]
 8002e3c:	e007      	b.n	8002e4e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	781a      	ldrb	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1cf      	bne.n	8002e06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2140      	movs	r1, #64	; 0x40
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 fc21 	bl	80036b8 <UART_WaitOnFlagUntilTimeout>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e006      	b.n	8002e8e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	e000      	b.n	8002e8e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002e8c:	2302      	movs	r3, #2
  }
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3720      	adds	r7, #32
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b08c      	sub	sp, #48	; 0x30
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	60f8      	str	r0, [r7, #12]
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b20      	cmp	r3, #32
 8002eae:	d14a      	bne.n	8002f46 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d002      	beq.n	8002ebc <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8002eb6:	88fb      	ldrh	r3, [r7, #6]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e043      	b.n	8002f48 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002ecc:	88fb      	ldrh	r3, [r7, #6]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	68b9      	ldr	r1, [r7, #8]
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 fc5e 	bl	8003794 <UART_Start_Receive_DMA>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002ede:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d12c      	bne.n	8002f40 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d125      	bne.n	8002f3a <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002eee:	2300      	movs	r3, #0
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	613b      	str	r3, [r7, #16]
 8002f02:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	330c      	adds	r3, #12
 8002f0a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	e853 3f00 	ldrex	r3, [r3]
 8002f12:	617b      	str	r3, [r7, #20]
   return(result);
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f043 0310 	orr.w	r3, r3, #16
 8002f1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	330c      	adds	r3, #12
 8002f22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f24:	627a      	str	r2, [r7, #36]	; 0x24
 8002f26:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f28:	6a39      	ldr	r1, [r7, #32]
 8002f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f2c:	e841 2300 	strex	r3, r2, [r1]
 8002f30:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1e5      	bne.n	8002f04 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8002f38:	e002      	b.n	8002f40 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8002f40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f44:	e000      	b.n	8002f48 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8002f46:	2302      	movs	r3, #2
  }
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3730      	adds	r7, #48	; 0x30
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b0ba      	sub	sp, #232	; 0xe8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002f8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10f      	bne.n	8002fb6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f9a:	f003 0320 	and.w	r3, r3, #32
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d009      	beq.n	8002fb6 <HAL_UART_IRQHandler+0x66>
 8002fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fa6:	f003 0320 	and.w	r3, r3, #32
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 fd8e 	bl	8003ad0 <UART_Receive_IT>
      return;
 8002fb4:	e25b      	b.n	800346e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002fb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 80de 	beq.w	800317c <HAL_UART_IRQHandler+0x22c>
 8002fc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d106      	bne.n	8002fda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fd0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 80d1 	beq.w	800317c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00b      	beq.n	8002ffe <HAL_UART_IRQHandler+0xae>
 8002fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d005      	beq.n	8002ffe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff6:	f043 0201 	orr.w	r2, r3, #1
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003002:	f003 0304 	and.w	r3, r3, #4
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00b      	beq.n	8003022 <HAL_UART_IRQHandler+0xd2>
 800300a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301a:	f043 0202 	orr.w	r2, r3, #2
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00b      	beq.n	8003046 <HAL_UART_IRQHandler+0xf6>
 800302e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d005      	beq.n	8003046 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303e:	f043 0204 	orr.w	r2, r3, #4
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d011      	beq.n	8003076 <HAL_UART_IRQHandler+0x126>
 8003052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003056:	f003 0320 	and.w	r3, r3, #32
 800305a:	2b00      	cmp	r3, #0
 800305c:	d105      	bne.n	800306a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800305e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d005      	beq.n	8003076 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306e:	f043 0208 	orr.w	r2, r3, #8
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 81f2 	beq.w	8003464 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003084:	f003 0320 	and.w	r3, r3, #32
 8003088:	2b00      	cmp	r3, #0
 800308a:	d008      	beq.n	800309e <HAL_UART_IRQHandler+0x14e>
 800308c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003090:	f003 0320 	and.w	r3, r3, #32
 8003094:	2b00      	cmp	r3, #0
 8003096:	d002      	beq.n	800309e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 fd19 	bl	8003ad0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	bf14      	ite	ne
 80030ac:	2301      	movne	r3, #1
 80030ae:	2300      	moveq	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d103      	bne.n	80030ca <HAL_UART_IRQHandler+0x17a>
 80030c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d04f      	beq.n	800316a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 fc23 	bl	8003916 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d041      	beq.n	8003162 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	3314      	adds	r3, #20
 80030e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030ec:	e853 3f00 	ldrex	r3, [r3]
 80030f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80030f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	3314      	adds	r3, #20
 8003106:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800310a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800310e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003112:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003116:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800311a:	e841 2300 	strex	r3, r2, [r1]
 800311e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1d9      	bne.n	80030de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312e:	2b00      	cmp	r3, #0
 8003130:	d013      	beq.n	800315a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003136:	4a7e      	ldr	r2, [pc, #504]	; (8003330 <HAL_UART_IRQHandler+0x3e0>)
 8003138:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313e:	4618      	mov	r0, r3
 8003140:	f7fe fb80 	bl	8001844 <HAL_DMA_Abort_IT>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d016      	beq.n	8003178 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003154:	4610      	mov	r0, r2
 8003156:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003158:	e00e      	b.n	8003178 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f9a5 	bl	80034aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003160:	e00a      	b.n	8003178 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f9a1 	bl	80034aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003168:	e006      	b.n	8003178 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f99d 	bl	80034aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003176:	e175      	b.n	8003464 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003178:	bf00      	nop
    return;
 800317a:	e173      	b.n	8003464 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003180:	2b01      	cmp	r3, #1
 8003182:	f040 814f 	bne.w	8003424 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800318a:	f003 0310 	and.w	r3, r3, #16
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 8148 	beq.w	8003424 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003198:	f003 0310 	and.w	r3, r3, #16
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 8141 	beq.w	8003424 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031a2:	2300      	movs	r3, #0
 80031a4:	60bb      	str	r3, [r7, #8]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 80b6 	beq.w	8003334 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 8145 	beq.w	8003468 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031e6:	429a      	cmp	r2, r3
 80031e8:	f080 813e 	bcs.w	8003468 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	2b20      	cmp	r3, #32
 80031fc:	f000 8088 	beq.w	8003310 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	330c      	adds	r3, #12
 8003206:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800320e:	e853 3f00 	ldrex	r3, [r3]
 8003212:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003216:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800321a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800321e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	330c      	adds	r3, #12
 8003228:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800322c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003230:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003234:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003238:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800323c:	e841 2300 	strex	r3, r2, [r1]
 8003240:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003244:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1d9      	bne.n	8003200 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	3314      	adds	r3, #20
 8003252:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003254:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003256:	e853 3f00 	ldrex	r3, [r3]
 800325a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800325c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800325e:	f023 0301 	bic.w	r3, r3, #1
 8003262:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	3314      	adds	r3, #20
 800326c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003270:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003274:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003276:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003278:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800327c:	e841 2300 	strex	r3, r2, [r1]
 8003280:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003282:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1e1      	bne.n	800324c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	3314      	adds	r3, #20
 800328e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003290:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003292:	e853 3f00 	ldrex	r3, [r3]
 8003296:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003298:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800329a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800329e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	3314      	adds	r3, #20
 80032a8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032ac:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032b4:	e841 2300 	strex	r3, r2, [r1]
 80032b8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1e3      	bne.n	8003288 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	330c      	adds	r3, #12
 80032d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032d8:	e853 3f00 	ldrex	r3, [r3]
 80032dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80032de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032e0:	f023 0310 	bic.w	r3, r3, #16
 80032e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	330c      	adds	r3, #12
 80032ee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80032f2:	65ba      	str	r2, [r7, #88]	; 0x58
 80032f4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80032f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032fa:	e841 2300 	strex	r3, r2, [r1]
 80032fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1e3      	bne.n	80032ce <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330a:	4618      	mov	r0, r3
 800330c:	f7fe fa5e 	bl	80017cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800331e:	b29b      	uxth	r3, r3
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	b29b      	uxth	r3, r3
 8003324:	4619      	mov	r1, r3
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7fd fa44 	bl	80007b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800332c:	e09c      	b.n	8003468 <HAL_UART_IRQHandler+0x518>
 800332e:	bf00      	nop
 8003330:	080039db 	.word	0x080039db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800333c:	b29b      	uxth	r3, r3
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003348:	b29b      	uxth	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 808e 	beq.w	800346c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003350:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 8089 	beq.w	800346c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	330c      	adds	r3, #12
 8003360:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003364:	e853 3f00 	ldrex	r3, [r3]
 8003368:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800336a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800336c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003370:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	330c      	adds	r3, #12
 800337a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800337e:	647a      	str	r2, [r7, #68]	; 0x44
 8003380:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003382:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003384:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003386:	e841 2300 	strex	r3, r2, [r1]
 800338a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800338c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1e3      	bne.n	800335a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	3314      	adds	r3, #20
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	e853 3f00 	ldrex	r3, [r3]
 80033a0:	623b      	str	r3, [r7, #32]
   return(result);
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	f023 0301 	bic.w	r3, r3, #1
 80033a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3314      	adds	r3, #20
 80033b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033b6:	633a      	str	r2, [r7, #48]	; 0x30
 80033b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033be:	e841 2300 	strex	r3, r2, [r1]
 80033c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1e3      	bne.n	8003392 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2220      	movs	r2, #32
 80033ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	330c      	adds	r3, #12
 80033de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	e853 3f00 	ldrex	r3, [r3]
 80033e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f023 0310 	bic.w	r3, r3, #16
 80033ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	330c      	adds	r3, #12
 80033f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80033fc:	61fa      	str	r2, [r7, #28]
 80033fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003400:	69b9      	ldr	r1, [r7, #24]
 8003402:	69fa      	ldr	r2, [r7, #28]
 8003404:	e841 2300 	strex	r3, r2, [r1]
 8003408:	617b      	str	r3, [r7, #20]
   return(result);
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1e3      	bne.n	80033d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003416:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800341a:	4619      	mov	r1, r3
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7fd f9c9 	bl	80007b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003422:	e023      	b.n	800346c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342c:	2b00      	cmp	r3, #0
 800342e:	d009      	beq.n	8003444 <HAL_UART_IRQHandler+0x4f4>
 8003430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fae0 	bl	8003a02 <UART_Transmit_IT>
    return;
 8003442:	e014      	b.n	800346e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00e      	beq.n	800346e <HAL_UART_IRQHandler+0x51e>
 8003450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003458:	2b00      	cmp	r3, #0
 800345a:	d008      	beq.n	800346e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 fb1f 	bl	8003aa0 <UART_EndTransmit_IT>
    return;
 8003462:	e004      	b.n	800346e <HAL_UART_IRQHandler+0x51e>
    return;
 8003464:	bf00      	nop
 8003466:	e002      	b.n	800346e <HAL_UART_IRQHandler+0x51e>
      return;
 8003468:	bf00      	nop
 800346a:	e000      	b.n	800346e <HAL_UART_IRQHandler+0x51e>
      return;
 800346c:	bf00      	nop
  }
}
 800346e:	37e8      	adds	r7, #232	; 0xe8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	bc80      	pop	{r7}
 8003484:	4770      	bx	lr

08003486 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr

08003498 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr

080034aa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr

080034bc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b09c      	sub	sp, #112	; 0x70
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0320 	and.w	r3, r3, #32
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d172      	bne.n	80035be <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80034d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034da:	2200      	movs	r2, #0
 80034dc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	330c      	adds	r3, #12
 80034e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034e8:	e853 3f00 	ldrex	r3, [r3]
 80034ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80034ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80034f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	330c      	adds	r3, #12
 80034fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80034fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8003500:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003502:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003504:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003506:	e841 2300 	strex	r3, r2, [r1]
 800350a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800350c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1e5      	bne.n	80034de <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	3314      	adds	r3, #20
 8003518:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800351c:	e853 3f00 	ldrex	r3, [r3]
 8003520:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003524:	f023 0301 	bic.w	r3, r3, #1
 8003528:	667b      	str	r3, [r7, #100]	; 0x64
 800352a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	3314      	adds	r3, #20
 8003530:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003532:	647a      	str	r2, [r7, #68]	; 0x44
 8003534:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003536:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003538:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800353a:	e841 2300 	strex	r3, r2, [r1]
 800353e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1e5      	bne.n	8003512 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	3314      	adds	r3, #20
 800354c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	e853 3f00 	ldrex	r3, [r3]
 8003554:	623b      	str	r3, [r7, #32]
   return(result);
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800355c:	663b      	str	r3, [r7, #96]	; 0x60
 800355e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	3314      	adds	r3, #20
 8003564:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003566:	633a      	str	r2, [r7, #48]	; 0x30
 8003568:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800356c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800356e:	e841 2300 	strex	r3, r2, [r1]
 8003572:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1e5      	bne.n	8003546 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800357a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800357c:	2220      	movs	r2, #32
 800357e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	2b01      	cmp	r3, #1
 8003588:	d119      	bne.n	80035be <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800358a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	330c      	adds	r3, #12
 8003590:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	e853 3f00 	ldrex	r3, [r3]
 8003598:	60fb      	str	r3, [r7, #12]
   return(result);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f023 0310 	bic.w	r3, r3, #16
 80035a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	330c      	adds	r3, #12
 80035a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80035aa:	61fa      	str	r2, [r7, #28]
 80035ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ae:	69b9      	ldr	r1, [r7, #24]
 80035b0:	69fa      	ldr	r2, [r7, #28]
 80035b2:	e841 2300 	strex	r3, r2, [r1]
 80035b6:	617b      	str	r3, [r7, #20]
   return(result);
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1e5      	bne.n	800358a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035c0:	2200      	movs	r2, #0
 80035c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d106      	bne.n	80035da <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80035cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035d0:	4619      	mov	r1, r3
 80035d2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80035d4:	f7fd f8ee 	bl	80007b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80035d8:	e002      	b.n	80035e0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80035da:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80035dc:	f7ff ff53 	bl	8003486 <HAL_UART_RxCpltCallback>
}
 80035e0:	bf00      	nop
 80035e2:	3770      	adds	r7, #112	; 0x70
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2201      	movs	r2, #1
 80035fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003600:	2b01      	cmp	r3, #1
 8003602:	d108      	bne.n	8003616 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003608:	085b      	lsrs	r3, r3, #1
 800360a:	b29b      	uxth	r3, r3
 800360c:	4619      	mov	r1, r3
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f7fd f8d0 	bl	80007b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003614:	e002      	b.n	800361c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f7ff ff3e 	bl	8003498 <HAL_UART_RxHalfCpltCallback>
}
 800361c:	bf00      	nop
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800362c:	2300      	movs	r3, #0
 800362e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003640:	2b00      	cmp	r3, #0
 8003642:	bf14      	ite	ne
 8003644:	2301      	movne	r3, #1
 8003646:	2300      	moveq	r3, #0
 8003648:	b2db      	uxtb	r3, r3
 800364a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b21      	cmp	r3, #33	; 0x21
 8003656:	d108      	bne.n	800366a <UART_DMAError+0x46>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d005      	beq.n	800366a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2200      	movs	r2, #0
 8003662:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003664:	68b8      	ldr	r0, [r7, #8]
 8003666:	f000 f92f 	bl	80038c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003674:	2b00      	cmp	r3, #0
 8003676:	bf14      	ite	ne
 8003678:	2301      	movne	r3, #1
 800367a:	2300      	moveq	r3, #0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b22      	cmp	r3, #34	; 0x22
 800368a:	d108      	bne.n	800369e <UART_DMAError+0x7a>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d005      	beq.n	800369e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2200      	movs	r2, #0
 8003696:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003698:	68b8      	ldr	r0, [r7, #8]
 800369a:	f000 f93c 	bl	8003916 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a2:	f043 0210 	orr.w	r2, r3, #16
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036aa:	68b8      	ldr	r0, [r7, #8]
 80036ac:	f7ff fefd 	bl	80034aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036b0:	bf00      	nop
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b090      	sub	sp, #64	; 0x40
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	603b      	str	r3, [r7, #0]
 80036c4:	4613      	mov	r3, r2
 80036c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036c8:	e050      	b.n	800376c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036d0:	d04c      	beq.n	800376c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d007      	beq.n	80036e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80036d8:	f7fd feb0 	bl	800143c <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d241      	bcs.n	800376c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	330c      	adds	r3, #12
 80036ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f2:	e853 3f00 	ldrex	r3, [r3]
 80036f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	330c      	adds	r3, #12
 8003706:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003708:	637a      	str	r2, [r7, #52]	; 0x34
 800370a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800370e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003710:	e841 2300 	strex	r3, r2, [r1]
 8003714:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1e5      	bne.n	80036e8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3314      	adds	r3, #20
 8003722:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	e853 3f00 	ldrex	r3, [r3]
 800372a:	613b      	str	r3, [r7, #16]
   return(result);
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	f023 0301 	bic.w	r3, r3, #1
 8003732:	63bb      	str	r3, [r7, #56]	; 0x38
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	3314      	adds	r3, #20
 800373a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800373c:	623a      	str	r2, [r7, #32]
 800373e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003740:	69f9      	ldr	r1, [r7, #28]
 8003742:	6a3a      	ldr	r2, [r7, #32]
 8003744:	e841 2300 	strex	r3, r2, [r1]
 8003748:	61bb      	str	r3, [r7, #24]
   return(result);
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1e5      	bne.n	800371c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e00f      	b.n	800378c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	4013      	ands	r3, r2
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	429a      	cmp	r2, r3
 800377a:	bf0c      	ite	eq
 800377c:	2301      	moveq	r3, #1
 800377e:	2300      	movne	r3, #0
 8003780:	b2db      	uxtb	r3, r3
 8003782:	461a      	mov	r2, r3
 8003784:	79fb      	ldrb	r3, [r7, #7]
 8003786:	429a      	cmp	r2, r3
 8003788:	d09f      	beq.n	80036ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3740      	adds	r7, #64	; 0x40
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b098      	sub	sp, #96	; 0x60
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	4613      	mov	r3, r2
 80037a0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	88fa      	ldrh	r2, [r7, #6]
 80037ac:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2222      	movs	r2, #34	; 0x22
 80037b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c0:	4a3e      	ldr	r2, [pc, #248]	; (80038bc <UART_Start_Receive_DMA+0x128>)
 80037c2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c8:	4a3d      	ldr	r2, [pc, #244]	; (80038c0 <UART_Start_Receive_DMA+0x12c>)
 80037ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d0:	4a3c      	ldr	r2, [pc, #240]	; (80038c4 <UART_Start_Receive_DMA+0x130>)
 80037d2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d8:	2200      	movs	r2, #0
 80037da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80037dc:	f107 0308 	add.w	r3, r7, #8
 80037e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	3304      	adds	r3, #4
 80037ec:	4619      	mov	r1, r3
 80037ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	88fb      	ldrh	r3, [r7, #6]
 80037f4:	f7fd ff8a 	bl	800170c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80037f8:	2300      	movs	r3, #0
 80037fa:	613b      	str	r3, [r7, #16]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	613b      	str	r3, [r7, #16]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	613b      	str	r3, [r7, #16]
 800380c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d019      	beq.n	800384a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	330c      	adds	r3, #12
 800381c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003820:	e853 3f00 	ldrex	r3, [r3]
 8003824:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800382c:	65bb      	str	r3, [r7, #88]	; 0x58
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	330c      	adds	r3, #12
 8003834:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003836:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003838:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800383c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800383e:	e841 2300 	strex	r3, r2, [r1]
 8003842:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1e5      	bne.n	8003816 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	3314      	adds	r3, #20
 8003850:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003854:	e853 3f00 	ldrex	r3, [r3]
 8003858:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800385a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385c:	f043 0301 	orr.w	r3, r3, #1
 8003860:	657b      	str	r3, [r7, #84]	; 0x54
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	3314      	adds	r3, #20
 8003868:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800386a:	63ba      	str	r2, [r7, #56]	; 0x38
 800386c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003870:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003872:	e841 2300 	strex	r3, r2, [r1]
 8003876:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1e5      	bne.n	800384a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	3314      	adds	r3, #20
 8003884:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	e853 3f00 	ldrex	r3, [r3]
 800388c:	617b      	str	r3, [r7, #20]
   return(result);
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003894:	653b      	str	r3, [r7, #80]	; 0x50
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	3314      	adds	r3, #20
 800389c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800389e:	627a      	str	r2, [r7, #36]	; 0x24
 80038a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a2:	6a39      	ldr	r1, [r7, #32]
 80038a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a6:	e841 2300 	strex	r3, r2, [r1]
 80038aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1e5      	bne.n	800387e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3760      	adds	r7, #96	; 0x60
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	080034bd 	.word	0x080034bd
 80038c0:	080035e9 	.word	0x080035e9
 80038c4:	08003625 	.word	0x08003625

080038c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b089      	sub	sp, #36	; 0x24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	330c      	adds	r3, #12
 80038d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	e853 3f00 	ldrex	r3, [r3]
 80038de:	60bb      	str	r3, [r7, #8]
   return(result);
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80038e6:	61fb      	str	r3, [r7, #28]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	330c      	adds	r3, #12
 80038ee:	69fa      	ldr	r2, [r7, #28]
 80038f0:	61ba      	str	r2, [r7, #24]
 80038f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f4:	6979      	ldr	r1, [r7, #20]
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	e841 2300 	strex	r3, r2, [r1]
 80038fc:	613b      	str	r3, [r7, #16]
   return(result);
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1e5      	bne.n	80038d0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800390c:	bf00      	nop
 800390e:	3724      	adds	r7, #36	; 0x24
 8003910:	46bd      	mov	sp, r7
 8003912:	bc80      	pop	{r7}
 8003914:	4770      	bx	lr

08003916 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003916:	b480      	push	{r7}
 8003918:	b095      	sub	sp, #84	; 0x54
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	330c      	adds	r3, #12
 8003924:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003928:	e853 3f00 	ldrex	r3, [r3]
 800392c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800392e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003930:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003934:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	330c      	adds	r3, #12
 800393c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800393e:	643a      	str	r2, [r7, #64]	; 0x40
 8003940:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003942:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003944:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003946:	e841 2300 	strex	r3, r2, [r1]
 800394a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800394c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1e5      	bne.n	800391e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3314      	adds	r3, #20
 8003958:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	e853 3f00 	ldrex	r3, [r3]
 8003960:	61fb      	str	r3, [r7, #28]
   return(result);
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	f023 0301 	bic.w	r3, r3, #1
 8003968:	64bb      	str	r3, [r7, #72]	; 0x48
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	3314      	adds	r3, #20
 8003970:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003972:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003974:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003976:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800397a:	e841 2300 	strex	r3, r2, [r1]
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1e5      	bne.n	8003952 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	2b01      	cmp	r3, #1
 800398c:	d119      	bne.n	80039c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	330c      	adds	r3, #12
 8003994:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	e853 3f00 	ldrex	r3, [r3]
 800399c:	60bb      	str	r3, [r7, #8]
   return(result);
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	f023 0310 	bic.w	r3, r3, #16
 80039a4:	647b      	str	r3, [r7, #68]	; 0x44
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	330c      	adds	r3, #12
 80039ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039ae:	61ba      	str	r2, [r7, #24]
 80039b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b2:	6979      	ldr	r1, [r7, #20]
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	e841 2300 	strex	r3, r2, [r1]
 80039ba:	613b      	str	r3, [r7, #16]
   return(result);
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1e5      	bne.n	800398e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2220      	movs	r2, #32
 80039c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	631a      	str	r2, [r3, #48]	; 0x30
}
 80039d0:	bf00      	nop
 80039d2:	3754      	adds	r7, #84	; 0x54
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	4770      	bx	lr

080039da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b084      	sub	sp, #16
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f7ff fd58 	bl	80034aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039fa:	bf00      	nop
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b085      	sub	sp, #20
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b21      	cmp	r3, #33	; 0x21
 8003a14:	d13e      	bne.n	8003a94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a1e:	d114      	bne.n	8003a4a <UART_Transmit_IT+0x48>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d110      	bne.n	8003a4a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	881b      	ldrh	r3, [r3, #0]
 8003a32:	461a      	mov	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	1c9a      	adds	r2, r3, #2
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	621a      	str	r2, [r3, #32]
 8003a48:	e008      	b.n	8003a5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	1c59      	adds	r1, r3, #1
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6211      	str	r1, [r2, #32]
 8003a54:	781a      	ldrb	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	4619      	mov	r1, r3
 8003a6a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10f      	bne.n	8003a90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	e000      	b.n	8003a96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a94:	2302      	movs	r3, #2
  }
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr

08003aa0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ab6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2220      	movs	r2, #32
 8003abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f7ff fcd7 	bl	8003474 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08c      	sub	sp, #48	; 0x30
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b22      	cmp	r3, #34	; 0x22
 8003ae2:	f040 80ae 	bne.w	8003c42 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aee:	d117      	bne.n	8003b20 <UART_Receive_IT+0x50>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d113      	bne.n	8003b20 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003af8:	2300      	movs	r3, #0
 8003afa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b00:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b12:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b18:	1c9a      	adds	r2, r3, #2
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	629a      	str	r2, [r3, #40]	; 0x28
 8003b1e:	e026      	b.n	8003b6e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b24:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003b26:	2300      	movs	r3, #0
 8003b28:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b32:	d007      	beq.n	8003b44 <UART_Receive_IT+0x74>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10a      	bne.n	8003b52 <UART_Receive_IT+0x82>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d106      	bne.n	8003b52 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4e:	701a      	strb	r2, [r3, #0]
 8003b50:	e008      	b.n	8003b64 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b62:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d15d      	bne.n	8003c3e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68da      	ldr	r2, [r3, #12]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0220 	bic.w	r2, r2, #32
 8003b90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ba0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695a      	ldr	r2, [r3, #20]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0201 	bic.w	r2, r2, #1
 8003bb0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d135      	bne.n	8003c34 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	330c      	adds	r3, #12
 8003bd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	e853 3f00 	ldrex	r3, [r3]
 8003bdc:	613b      	str	r3, [r7, #16]
   return(result);
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	f023 0310 	bic.w	r3, r3, #16
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	330c      	adds	r3, #12
 8003bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bee:	623a      	str	r2, [r7, #32]
 8003bf0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf2:	69f9      	ldr	r1, [r7, #28]
 8003bf4:	6a3a      	ldr	r2, [r7, #32]
 8003bf6:	e841 2300 	strex	r3, r2, [r1]
 8003bfa:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1e5      	bne.n	8003bce <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0310 	and.w	r3, r3, #16
 8003c0c:	2b10      	cmp	r3, #16
 8003c0e:	d10a      	bne.n	8003c26 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c10:	2300      	movs	r3, #0
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7fc fdc1 	bl	80007b4 <HAL_UARTEx_RxEventCallback>
 8003c32:	e002      	b.n	8003c3a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7ff fc26 	bl	8003486 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	e002      	b.n	8003c44 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	e000      	b.n	8003c44 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003c42:	2302      	movs	r3, #2
  }
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3730      	adds	r7, #48	; 0x30
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003c86:	f023 030c 	bic.w	r3, r3, #12
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6812      	ldr	r2, [r2, #0]
 8003c8e:	68b9      	ldr	r1, [r7, #8]
 8003c90:	430b      	orrs	r3, r1
 8003c92:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699a      	ldr	r2, [r3, #24]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a2c      	ldr	r2, [pc, #176]	; (8003d60 <UART_SetConfig+0x114>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d103      	bne.n	8003cbc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003cb4:	f7fe fcec 	bl	8002690 <HAL_RCC_GetPCLK2Freq>
 8003cb8:	60f8      	str	r0, [r7, #12]
 8003cba:	e002      	b.n	8003cc2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003cbc:	f7fe fcd4 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8003cc0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	009a      	lsls	r2, r3, #2
 8003ccc:	441a      	add	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd8:	4a22      	ldr	r2, [pc, #136]	; (8003d64 <UART_SetConfig+0x118>)
 8003cda:	fba2 2303 	umull	r2, r3, r2, r3
 8003cde:	095b      	lsrs	r3, r3, #5
 8003ce0:	0119      	lsls	r1, r3, #4
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	009a      	lsls	r2, r3, #2
 8003cec:	441a      	add	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cf8:	4b1a      	ldr	r3, [pc, #104]	; (8003d64 <UART_SetConfig+0x118>)
 8003cfa:	fba3 0302 	umull	r0, r3, r3, r2
 8003cfe:	095b      	lsrs	r3, r3, #5
 8003d00:	2064      	movs	r0, #100	; 0x64
 8003d02:	fb00 f303 	mul.w	r3, r0, r3
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	3332      	adds	r3, #50	; 0x32
 8003d0c:	4a15      	ldr	r2, [pc, #84]	; (8003d64 <UART_SetConfig+0x118>)
 8003d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d12:	095b      	lsrs	r3, r3, #5
 8003d14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d18:	4419      	add	r1, r3
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	009a      	lsls	r2, r3, #2
 8003d24:	441a      	add	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d30:	4b0c      	ldr	r3, [pc, #48]	; (8003d64 <UART_SetConfig+0x118>)
 8003d32:	fba3 0302 	umull	r0, r3, r3, r2
 8003d36:	095b      	lsrs	r3, r3, #5
 8003d38:	2064      	movs	r0, #100	; 0x64
 8003d3a:	fb00 f303 	mul.w	r3, r0, r3
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	011b      	lsls	r3, r3, #4
 8003d42:	3332      	adds	r3, #50	; 0x32
 8003d44:	4a07      	ldr	r2, [pc, #28]	; (8003d64 <UART_SetConfig+0x118>)
 8003d46:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4a:	095b      	lsrs	r3, r3, #5
 8003d4c:	f003 020f 	and.w	r2, r3, #15
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	440a      	add	r2, r1
 8003d56:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d58:	bf00      	nop
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40013800 	.word	0x40013800
 8003d64:	51eb851f 	.word	0x51eb851f

08003d68 <atoi>:
 8003d68:	220a      	movs	r2, #10
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	f000 b946 	b.w	8003ffc <strtol>

08003d70 <__errno>:
 8003d70:	4b01      	ldr	r3, [pc, #4]	; (8003d78 <__errno+0x8>)
 8003d72:	6818      	ldr	r0, [r3, #0]
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	20000010 	.word	0x20000010

08003d7c <__libc_init_array>:
 8003d7c:	b570      	push	{r4, r5, r6, lr}
 8003d7e:	2600      	movs	r6, #0
 8003d80:	4d0c      	ldr	r5, [pc, #48]	; (8003db4 <__libc_init_array+0x38>)
 8003d82:	4c0d      	ldr	r4, [pc, #52]	; (8003db8 <__libc_init_array+0x3c>)
 8003d84:	1b64      	subs	r4, r4, r5
 8003d86:	10a4      	asrs	r4, r4, #2
 8003d88:	42a6      	cmp	r6, r4
 8003d8a:	d109      	bne.n	8003da0 <__libc_init_array+0x24>
 8003d8c:	f000 fdc0 	bl	8004910 <_init>
 8003d90:	2600      	movs	r6, #0
 8003d92:	4d0a      	ldr	r5, [pc, #40]	; (8003dbc <__libc_init_array+0x40>)
 8003d94:	4c0a      	ldr	r4, [pc, #40]	; (8003dc0 <__libc_init_array+0x44>)
 8003d96:	1b64      	subs	r4, r4, r5
 8003d98:	10a4      	asrs	r4, r4, #2
 8003d9a:	42a6      	cmp	r6, r4
 8003d9c:	d105      	bne.n	8003daa <__libc_init_array+0x2e>
 8003d9e:	bd70      	pop	{r4, r5, r6, pc}
 8003da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003da4:	4798      	blx	r3
 8003da6:	3601      	adds	r6, #1
 8003da8:	e7ee      	b.n	8003d88 <__libc_init_array+0xc>
 8003daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dae:	4798      	blx	r3
 8003db0:	3601      	adds	r6, #1
 8003db2:	e7f2      	b.n	8003d9a <__libc_init_array+0x1e>
 8003db4:	08004ad4 	.word	0x08004ad4
 8003db8:	08004ad4 	.word	0x08004ad4
 8003dbc:	08004ad4 	.word	0x08004ad4
 8003dc0:	08004ad8 	.word	0x08004ad8

08003dc4 <memcpy>:
 8003dc4:	440a      	add	r2, r1
 8003dc6:	4291      	cmp	r1, r2
 8003dc8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003dcc:	d100      	bne.n	8003dd0 <memcpy+0xc>
 8003dce:	4770      	bx	lr
 8003dd0:	b510      	push	{r4, lr}
 8003dd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003dd6:	4291      	cmp	r1, r2
 8003dd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ddc:	d1f9      	bne.n	8003dd2 <memcpy+0xe>
 8003dde:	bd10      	pop	{r4, pc}

08003de0 <memset>:
 8003de0:	4603      	mov	r3, r0
 8003de2:	4402      	add	r2, r0
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d100      	bne.n	8003dea <memset+0xa>
 8003de8:	4770      	bx	lr
 8003dea:	f803 1b01 	strb.w	r1, [r3], #1
 8003dee:	e7f9      	b.n	8003de4 <memset+0x4>

08003df0 <_puts_r>:
 8003df0:	b570      	push	{r4, r5, r6, lr}
 8003df2:	460e      	mov	r6, r1
 8003df4:	4605      	mov	r5, r0
 8003df6:	b118      	cbz	r0, 8003e00 <_puts_r+0x10>
 8003df8:	6983      	ldr	r3, [r0, #24]
 8003dfa:	b90b      	cbnz	r3, 8003e00 <_puts_r+0x10>
 8003dfc:	f000 fade 	bl	80043bc <__sinit>
 8003e00:	69ab      	ldr	r3, [r5, #24]
 8003e02:	68ac      	ldr	r4, [r5, #8]
 8003e04:	b913      	cbnz	r3, 8003e0c <_puts_r+0x1c>
 8003e06:	4628      	mov	r0, r5
 8003e08:	f000 fad8 	bl	80043bc <__sinit>
 8003e0c:	4b2c      	ldr	r3, [pc, #176]	; (8003ec0 <_puts_r+0xd0>)
 8003e0e:	429c      	cmp	r4, r3
 8003e10:	d120      	bne.n	8003e54 <_puts_r+0x64>
 8003e12:	686c      	ldr	r4, [r5, #4]
 8003e14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e16:	07db      	lsls	r3, r3, #31
 8003e18:	d405      	bmi.n	8003e26 <_puts_r+0x36>
 8003e1a:	89a3      	ldrh	r3, [r4, #12]
 8003e1c:	0598      	lsls	r0, r3, #22
 8003e1e:	d402      	bmi.n	8003e26 <_puts_r+0x36>
 8003e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e22:	f000 fb69 	bl	80044f8 <__retarget_lock_acquire_recursive>
 8003e26:	89a3      	ldrh	r3, [r4, #12]
 8003e28:	0719      	lsls	r1, r3, #28
 8003e2a:	d51d      	bpl.n	8003e68 <_puts_r+0x78>
 8003e2c:	6923      	ldr	r3, [r4, #16]
 8003e2e:	b1db      	cbz	r3, 8003e68 <_puts_r+0x78>
 8003e30:	3e01      	subs	r6, #1
 8003e32:	68a3      	ldr	r3, [r4, #8]
 8003e34:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	60a3      	str	r3, [r4, #8]
 8003e3c:	bb39      	cbnz	r1, 8003e8e <_puts_r+0x9e>
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	da38      	bge.n	8003eb4 <_puts_r+0xc4>
 8003e42:	4622      	mov	r2, r4
 8003e44:	210a      	movs	r1, #10
 8003e46:	4628      	mov	r0, r5
 8003e48:	f000 f8e2 	bl	8004010 <__swbuf_r>
 8003e4c:	3001      	adds	r0, #1
 8003e4e:	d011      	beq.n	8003e74 <_puts_r+0x84>
 8003e50:	250a      	movs	r5, #10
 8003e52:	e011      	b.n	8003e78 <_puts_r+0x88>
 8003e54:	4b1b      	ldr	r3, [pc, #108]	; (8003ec4 <_puts_r+0xd4>)
 8003e56:	429c      	cmp	r4, r3
 8003e58:	d101      	bne.n	8003e5e <_puts_r+0x6e>
 8003e5a:	68ac      	ldr	r4, [r5, #8]
 8003e5c:	e7da      	b.n	8003e14 <_puts_r+0x24>
 8003e5e:	4b1a      	ldr	r3, [pc, #104]	; (8003ec8 <_puts_r+0xd8>)
 8003e60:	429c      	cmp	r4, r3
 8003e62:	bf08      	it	eq
 8003e64:	68ec      	ldreq	r4, [r5, #12]
 8003e66:	e7d5      	b.n	8003e14 <_puts_r+0x24>
 8003e68:	4621      	mov	r1, r4
 8003e6a:	4628      	mov	r0, r5
 8003e6c:	f000 f922 	bl	80040b4 <__swsetup_r>
 8003e70:	2800      	cmp	r0, #0
 8003e72:	d0dd      	beq.n	8003e30 <_puts_r+0x40>
 8003e74:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003e78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e7a:	07da      	lsls	r2, r3, #31
 8003e7c:	d405      	bmi.n	8003e8a <_puts_r+0x9a>
 8003e7e:	89a3      	ldrh	r3, [r4, #12]
 8003e80:	059b      	lsls	r3, r3, #22
 8003e82:	d402      	bmi.n	8003e8a <_puts_r+0x9a>
 8003e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e86:	f000 fb38 	bl	80044fa <__retarget_lock_release_recursive>
 8003e8a:	4628      	mov	r0, r5
 8003e8c:	bd70      	pop	{r4, r5, r6, pc}
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	da04      	bge.n	8003e9c <_puts_r+0xac>
 8003e92:	69a2      	ldr	r2, [r4, #24]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	dc06      	bgt.n	8003ea6 <_puts_r+0xb6>
 8003e98:	290a      	cmp	r1, #10
 8003e9a:	d004      	beq.n	8003ea6 <_puts_r+0xb6>
 8003e9c:	6823      	ldr	r3, [r4, #0]
 8003e9e:	1c5a      	adds	r2, r3, #1
 8003ea0:	6022      	str	r2, [r4, #0]
 8003ea2:	7019      	strb	r1, [r3, #0]
 8003ea4:	e7c5      	b.n	8003e32 <_puts_r+0x42>
 8003ea6:	4622      	mov	r2, r4
 8003ea8:	4628      	mov	r0, r5
 8003eaa:	f000 f8b1 	bl	8004010 <__swbuf_r>
 8003eae:	3001      	adds	r0, #1
 8003eb0:	d1bf      	bne.n	8003e32 <_puts_r+0x42>
 8003eb2:	e7df      	b.n	8003e74 <_puts_r+0x84>
 8003eb4:	250a      	movs	r5, #10
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	6022      	str	r2, [r4, #0]
 8003ebc:	701d      	strb	r5, [r3, #0]
 8003ebe:	e7db      	b.n	8003e78 <_puts_r+0x88>
 8003ec0:	08004a94 	.word	0x08004a94
 8003ec4:	08004ab4 	.word	0x08004ab4
 8003ec8:	08004a74 	.word	0x08004a74

08003ecc <puts>:
 8003ecc:	4b02      	ldr	r3, [pc, #8]	; (8003ed8 <puts+0xc>)
 8003ece:	4601      	mov	r1, r0
 8003ed0:	6818      	ldr	r0, [r3, #0]
 8003ed2:	f7ff bf8d 	b.w	8003df0 <_puts_r>
 8003ed6:	bf00      	nop
 8003ed8:	20000010 	.word	0x20000010

08003edc <strncmp>:
 8003edc:	4603      	mov	r3, r0
 8003ede:	b510      	push	{r4, lr}
 8003ee0:	b172      	cbz	r2, 8003f00 <strncmp+0x24>
 8003ee2:	3901      	subs	r1, #1
 8003ee4:	1884      	adds	r4, r0, r2
 8003ee6:	f813 0b01 	ldrb.w	r0, [r3], #1
 8003eea:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003eee:	4290      	cmp	r0, r2
 8003ef0:	d101      	bne.n	8003ef6 <strncmp+0x1a>
 8003ef2:	42a3      	cmp	r3, r4
 8003ef4:	d101      	bne.n	8003efa <strncmp+0x1e>
 8003ef6:	1a80      	subs	r0, r0, r2
 8003ef8:	bd10      	pop	{r4, pc}
 8003efa:	2800      	cmp	r0, #0
 8003efc:	d1f3      	bne.n	8003ee6 <strncmp+0xa>
 8003efe:	e7fa      	b.n	8003ef6 <strncmp+0x1a>
 8003f00:	4610      	mov	r0, r2
 8003f02:	e7f9      	b.n	8003ef8 <strncmp+0x1c>

08003f04 <_strtol_l.constprop.0>:
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f0a:	4680      	mov	r8, r0
 8003f0c:	d001      	beq.n	8003f12 <_strtol_l.constprop.0+0xe>
 8003f0e:	2b24      	cmp	r3, #36	; 0x24
 8003f10:	d906      	bls.n	8003f20 <_strtol_l.constprop.0+0x1c>
 8003f12:	f7ff ff2d 	bl	8003d70 <__errno>
 8003f16:	2316      	movs	r3, #22
 8003f18:	6003      	str	r3, [r0, #0]
 8003f1a:	2000      	movs	r0, #0
 8003f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f20:	460d      	mov	r5, r1
 8003f22:	4f35      	ldr	r7, [pc, #212]	; (8003ff8 <_strtol_l.constprop.0+0xf4>)
 8003f24:	4628      	mov	r0, r5
 8003f26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f2a:	5de6      	ldrb	r6, [r4, r7]
 8003f2c:	f016 0608 	ands.w	r6, r6, #8
 8003f30:	d1f8      	bne.n	8003f24 <_strtol_l.constprop.0+0x20>
 8003f32:	2c2d      	cmp	r4, #45	; 0x2d
 8003f34:	d12f      	bne.n	8003f96 <_strtol_l.constprop.0+0x92>
 8003f36:	2601      	movs	r6, #1
 8003f38:	782c      	ldrb	r4, [r5, #0]
 8003f3a:	1c85      	adds	r5, r0, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d057      	beq.n	8003ff0 <_strtol_l.constprop.0+0xec>
 8003f40:	2b10      	cmp	r3, #16
 8003f42:	d109      	bne.n	8003f58 <_strtol_l.constprop.0+0x54>
 8003f44:	2c30      	cmp	r4, #48	; 0x30
 8003f46:	d107      	bne.n	8003f58 <_strtol_l.constprop.0+0x54>
 8003f48:	7828      	ldrb	r0, [r5, #0]
 8003f4a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003f4e:	2858      	cmp	r0, #88	; 0x58
 8003f50:	d149      	bne.n	8003fe6 <_strtol_l.constprop.0+0xe2>
 8003f52:	2310      	movs	r3, #16
 8003f54:	786c      	ldrb	r4, [r5, #1]
 8003f56:	3502      	adds	r5, #2
 8003f58:	2700      	movs	r7, #0
 8003f5a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8003f5e:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8003f62:	fbbe f9f3 	udiv	r9, lr, r3
 8003f66:	4638      	mov	r0, r7
 8003f68:	fb03 ea19 	mls	sl, r3, r9, lr
 8003f6c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003f70:	f1bc 0f09 	cmp.w	ip, #9
 8003f74:	d814      	bhi.n	8003fa0 <_strtol_l.constprop.0+0x9c>
 8003f76:	4664      	mov	r4, ip
 8003f78:	42a3      	cmp	r3, r4
 8003f7a:	dd22      	ble.n	8003fc2 <_strtol_l.constprop.0+0xbe>
 8003f7c:	2f00      	cmp	r7, #0
 8003f7e:	db1d      	blt.n	8003fbc <_strtol_l.constprop.0+0xb8>
 8003f80:	4581      	cmp	r9, r0
 8003f82:	d31b      	bcc.n	8003fbc <_strtol_l.constprop.0+0xb8>
 8003f84:	d101      	bne.n	8003f8a <_strtol_l.constprop.0+0x86>
 8003f86:	45a2      	cmp	sl, r4
 8003f88:	db18      	blt.n	8003fbc <_strtol_l.constprop.0+0xb8>
 8003f8a:	2701      	movs	r7, #1
 8003f8c:	fb00 4003 	mla	r0, r0, r3, r4
 8003f90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f94:	e7ea      	b.n	8003f6c <_strtol_l.constprop.0+0x68>
 8003f96:	2c2b      	cmp	r4, #43	; 0x2b
 8003f98:	bf04      	itt	eq
 8003f9a:	782c      	ldrbeq	r4, [r5, #0]
 8003f9c:	1c85      	addeq	r5, r0, #2
 8003f9e:	e7cd      	b.n	8003f3c <_strtol_l.constprop.0+0x38>
 8003fa0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003fa4:	f1bc 0f19 	cmp.w	ip, #25
 8003fa8:	d801      	bhi.n	8003fae <_strtol_l.constprop.0+0xaa>
 8003faa:	3c37      	subs	r4, #55	; 0x37
 8003fac:	e7e4      	b.n	8003f78 <_strtol_l.constprop.0+0x74>
 8003fae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003fb2:	f1bc 0f19 	cmp.w	ip, #25
 8003fb6:	d804      	bhi.n	8003fc2 <_strtol_l.constprop.0+0xbe>
 8003fb8:	3c57      	subs	r4, #87	; 0x57
 8003fba:	e7dd      	b.n	8003f78 <_strtol_l.constprop.0+0x74>
 8003fbc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003fc0:	e7e6      	b.n	8003f90 <_strtol_l.constprop.0+0x8c>
 8003fc2:	2f00      	cmp	r7, #0
 8003fc4:	da07      	bge.n	8003fd6 <_strtol_l.constprop.0+0xd2>
 8003fc6:	2322      	movs	r3, #34	; 0x22
 8003fc8:	4670      	mov	r0, lr
 8003fca:	f8c8 3000 	str.w	r3, [r8]
 8003fce:	2a00      	cmp	r2, #0
 8003fd0:	d0a4      	beq.n	8003f1c <_strtol_l.constprop.0+0x18>
 8003fd2:	1e69      	subs	r1, r5, #1
 8003fd4:	e005      	b.n	8003fe2 <_strtol_l.constprop.0+0xde>
 8003fd6:	b106      	cbz	r6, 8003fda <_strtol_l.constprop.0+0xd6>
 8003fd8:	4240      	negs	r0, r0
 8003fda:	2a00      	cmp	r2, #0
 8003fdc:	d09e      	beq.n	8003f1c <_strtol_l.constprop.0+0x18>
 8003fde:	2f00      	cmp	r7, #0
 8003fe0:	d1f7      	bne.n	8003fd2 <_strtol_l.constprop.0+0xce>
 8003fe2:	6011      	str	r1, [r2, #0]
 8003fe4:	e79a      	b.n	8003f1c <_strtol_l.constprop.0+0x18>
 8003fe6:	2430      	movs	r4, #48	; 0x30
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1b5      	bne.n	8003f58 <_strtol_l.constprop.0+0x54>
 8003fec:	2308      	movs	r3, #8
 8003fee:	e7b3      	b.n	8003f58 <_strtol_l.constprop.0+0x54>
 8003ff0:	2c30      	cmp	r4, #48	; 0x30
 8003ff2:	d0a9      	beq.n	8003f48 <_strtol_l.constprop.0+0x44>
 8003ff4:	230a      	movs	r3, #10
 8003ff6:	e7af      	b.n	8003f58 <_strtol_l.constprop.0+0x54>
 8003ff8:	08004971 	.word	0x08004971

08003ffc <strtol>:
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	460a      	mov	r2, r1
 8004000:	4601      	mov	r1, r0
 8004002:	4802      	ldr	r0, [pc, #8]	; (800400c <strtol+0x10>)
 8004004:	6800      	ldr	r0, [r0, #0]
 8004006:	f7ff bf7d 	b.w	8003f04 <_strtol_l.constprop.0>
 800400a:	bf00      	nop
 800400c:	20000010 	.word	0x20000010

08004010 <__swbuf_r>:
 8004010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004012:	460e      	mov	r6, r1
 8004014:	4614      	mov	r4, r2
 8004016:	4605      	mov	r5, r0
 8004018:	b118      	cbz	r0, 8004022 <__swbuf_r+0x12>
 800401a:	6983      	ldr	r3, [r0, #24]
 800401c:	b90b      	cbnz	r3, 8004022 <__swbuf_r+0x12>
 800401e:	f000 f9cd 	bl	80043bc <__sinit>
 8004022:	4b21      	ldr	r3, [pc, #132]	; (80040a8 <__swbuf_r+0x98>)
 8004024:	429c      	cmp	r4, r3
 8004026:	d12b      	bne.n	8004080 <__swbuf_r+0x70>
 8004028:	686c      	ldr	r4, [r5, #4]
 800402a:	69a3      	ldr	r3, [r4, #24]
 800402c:	60a3      	str	r3, [r4, #8]
 800402e:	89a3      	ldrh	r3, [r4, #12]
 8004030:	071a      	lsls	r2, r3, #28
 8004032:	d52f      	bpl.n	8004094 <__swbuf_r+0x84>
 8004034:	6923      	ldr	r3, [r4, #16]
 8004036:	b36b      	cbz	r3, 8004094 <__swbuf_r+0x84>
 8004038:	6923      	ldr	r3, [r4, #16]
 800403a:	6820      	ldr	r0, [r4, #0]
 800403c:	b2f6      	uxtb	r6, r6
 800403e:	1ac0      	subs	r0, r0, r3
 8004040:	6963      	ldr	r3, [r4, #20]
 8004042:	4637      	mov	r7, r6
 8004044:	4283      	cmp	r3, r0
 8004046:	dc04      	bgt.n	8004052 <__swbuf_r+0x42>
 8004048:	4621      	mov	r1, r4
 800404a:	4628      	mov	r0, r5
 800404c:	f000 f922 	bl	8004294 <_fflush_r>
 8004050:	bb30      	cbnz	r0, 80040a0 <__swbuf_r+0x90>
 8004052:	68a3      	ldr	r3, [r4, #8]
 8004054:	3001      	adds	r0, #1
 8004056:	3b01      	subs	r3, #1
 8004058:	60a3      	str	r3, [r4, #8]
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	6022      	str	r2, [r4, #0]
 8004060:	701e      	strb	r6, [r3, #0]
 8004062:	6963      	ldr	r3, [r4, #20]
 8004064:	4283      	cmp	r3, r0
 8004066:	d004      	beq.n	8004072 <__swbuf_r+0x62>
 8004068:	89a3      	ldrh	r3, [r4, #12]
 800406a:	07db      	lsls	r3, r3, #31
 800406c:	d506      	bpl.n	800407c <__swbuf_r+0x6c>
 800406e:	2e0a      	cmp	r6, #10
 8004070:	d104      	bne.n	800407c <__swbuf_r+0x6c>
 8004072:	4621      	mov	r1, r4
 8004074:	4628      	mov	r0, r5
 8004076:	f000 f90d 	bl	8004294 <_fflush_r>
 800407a:	b988      	cbnz	r0, 80040a0 <__swbuf_r+0x90>
 800407c:	4638      	mov	r0, r7
 800407e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004080:	4b0a      	ldr	r3, [pc, #40]	; (80040ac <__swbuf_r+0x9c>)
 8004082:	429c      	cmp	r4, r3
 8004084:	d101      	bne.n	800408a <__swbuf_r+0x7a>
 8004086:	68ac      	ldr	r4, [r5, #8]
 8004088:	e7cf      	b.n	800402a <__swbuf_r+0x1a>
 800408a:	4b09      	ldr	r3, [pc, #36]	; (80040b0 <__swbuf_r+0xa0>)
 800408c:	429c      	cmp	r4, r3
 800408e:	bf08      	it	eq
 8004090:	68ec      	ldreq	r4, [r5, #12]
 8004092:	e7ca      	b.n	800402a <__swbuf_r+0x1a>
 8004094:	4621      	mov	r1, r4
 8004096:	4628      	mov	r0, r5
 8004098:	f000 f80c 	bl	80040b4 <__swsetup_r>
 800409c:	2800      	cmp	r0, #0
 800409e:	d0cb      	beq.n	8004038 <__swbuf_r+0x28>
 80040a0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80040a4:	e7ea      	b.n	800407c <__swbuf_r+0x6c>
 80040a6:	bf00      	nop
 80040a8:	08004a94 	.word	0x08004a94
 80040ac:	08004ab4 	.word	0x08004ab4
 80040b0:	08004a74 	.word	0x08004a74

080040b4 <__swsetup_r>:
 80040b4:	4b32      	ldr	r3, [pc, #200]	; (8004180 <__swsetup_r+0xcc>)
 80040b6:	b570      	push	{r4, r5, r6, lr}
 80040b8:	681d      	ldr	r5, [r3, #0]
 80040ba:	4606      	mov	r6, r0
 80040bc:	460c      	mov	r4, r1
 80040be:	b125      	cbz	r5, 80040ca <__swsetup_r+0x16>
 80040c0:	69ab      	ldr	r3, [r5, #24]
 80040c2:	b913      	cbnz	r3, 80040ca <__swsetup_r+0x16>
 80040c4:	4628      	mov	r0, r5
 80040c6:	f000 f979 	bl	80043bc <__sinit>
 80040ca:	4b2e      	ldr	r3, [pc, #184]	; (8004184 <__swsetup_r+0xd0>)
 80040cc:	429c      	cmp	r4, r3
 80040ce:	d10f      	bne.n	80040f0 <__swsetup_r+0x3c>
 80040d0:	686c      	ldr	r4, [r5, #4]
 80040d2:	89a3      	ldrh	r3, [r4, #12]
 80040d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040d8:	0719      	lsls	r1, r3, #28
 80040da:	d42c      	bmi.n	8004136 <__swsetup_r+0x82>
 80040dc:	06dd      	lsls	r5, r3, #27
 80040de:	d411      	bmi.n	8004104 <__swsetup_r+0x50>
 80040e0:	2309      	movs	r3, #9
 80040e2:	6033      	str	r3, [r6, #0]
 80040e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80040e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040ec:	81a3      	strh	r3, [r4, #12]
 80040ee:	e03e      	b.n	800416e <__swsetup_r+0xba>
 80040f0:	4b25      	ldr	r3, [pc, #148]	; (8004188 <__swsetup_r+0xd4>)
 80040f2:	429c      	cmp	r4, r3
 80040f4:	d101      	bne.n	80040fa <__swsetup_r+0x46>
 80040f6:	68ac      	ldr	r4, [r5, #8]
 80040f8:	e7eb      	b.n	80040d2 <__swsetup_r+0x1e>
 80040fa:	4b24      	ldr	r3, [pc, #144]	; (800418c <__swsetup_r+0xd8>)
 80040fc:	429c      	cmp	r4, r3
 80040fe:	bf08      	it	eq
 8004100:	68ec      	ldreq	r4, [r5, #12]
 8004102:	e7e6      	b.n	80040d2 <__swsetup_r+0x1e>
 8004104:	0758      	lsls	r0, r3, #29
 8004106:	d512      	bpl.n	800412e <__swsetup_r+0x7a>
 8004108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800410a:	b141      	cbz	r1, 800411e <__swsetup_r+0x6a>
 800410c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004110:	4299      	cmp	r1, r3
 8004112:	d002      	beq.n	800411a <__swsetup_r+0x66>
 8004114:	4630      	mov	r0, r6
 8004116:	f000 fa57 	bl	80045c8 <_free_r>
 800411a:	2300      	movs	r3, #0
 800411c:	6363      	str	r3, [r4, #52]	; 0x34
 800411e:	89a3      	ldrh	r3, [r4, #12]
 8004120:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004124:	81a3      	strh	r3, [r4, #12]
 8004126:	2300      	movs	r3, #0
 8004128:	6063      	str	r3, [r4, #4]
 800412a:	6923      	ldr	r3, [r4, #16]
 800412c:	6023      	str	r3, [r4, #0]
 800412e:	89a3      	ldrh	r3, [r4, #12]
 8004130:	f043 0308 	orr.w	r3, r3, #8
 8004134:	81a3      	strh	r3, [r4, #12]
 8004136:	6923      	ldr	r3, [r4, #16]
 8004138:	b94b      	cbnz	r3, 800414e <__swsetup_r+0x9a>
 800413a:	89a3      	ldrh	r3, [r4, #12]
 800413c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004144:	d003      	beq.n	800414e <__swsetup_r+0x9a>
 8004146:	4621      	mov	r1, r4
 8004148:	4630      	mov	r0, r6
 800414a:	f000 f9fd 	bl	8004548 <__smakebuf_r>
 800414e:	89a0      	ldrh	r0, [r4, #12]
 8004150:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004154:	f010 0301 	ands.w	r3, r0, #1
 8004158:	d00a      	beq.n	8004170 <__swsetup_r+0xbc>
 800415a:	2300      	movs	r3, #0
 800415c:	60a3      	str	r3, [r4, #8]
 800415e:	6963      	ldr	r3, [r4, #20]
 8004160:	425b      	negs	r3, r3
 8004162:	61a3      	str	r3, [r4, #24]
 8004164:	6923      	ldr	r3, [r4, #16]
 8004166:	b943      	cbnz	r3, 800417a <__swsetup_r+0xc6>
 8004168:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800416c:	d1ba      	bne.n	80040e4 <__swsetup_r+0x30>
 800416e:	bd70      	pop	{r4, r5, r6, pc}
 8004170:	0781      	lsls	r1, r0, #30
 8004172:	bf58      	it	pl
 8004174:	6963      	ldrpl	r3, [r4, #20]
 8004176:	60a3      	str	r3, [r4, #8]
 8004178:	e7f4      	b.n	8004164 <__swsetup_r+0xb0>
 800417a:	2000      	movs	r0, #0
 800417c:	e7f7      	b.n	800416e <__swsetup_r+0xba>
 800417e:	bf00      	nop
 8004180:	20000010 	.word	0x20000010
 8004184:	08004a94 	.word	0x08004a94
 8004188:	08004ab4 	.word	0x08004ab4
 800418c:	08004a74 	.word	0x08004a74

08004190 <__sflush_r>:
 8004190:	898a      	ldrh	r2, [r1, #12]
 8004192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004194:	4605      	mov	r5, r0
 8004196:	0710      	lsls	r0, r2, #28
 8004198:	460c      	mov	r4, r1
 800419a:	d457      	bmi.n	800424c <__sflush_r+0xbc>
 800419c:	684b      	ldr	r3, [r1, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	dc04      	bgt.n	80041ac <__sflush_r+0x1c>
 80041a2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	dc01      	bgt.n	80041ac <__sflush_r+0x1c>
 80041a8:	2000      	movs	r0, #0
 80041aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041ae:	2e00      	cmp	r6, #0
 80041b0:	d0fa      	beq.n	80041a8 <__sflush_r+0x18>
 80041b2:	2300      	movs	r3, #0
 80041b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80041b8:	682f      	ldr	r7, [r5, #0]
 80041ba:	602b      	str	r3, [r5, #0]
 80041bc:	d032      	beq.n	8004224 <__sflush_r+0x94>
 80041be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80041c0:	89a3      	ldrh	r3, [r4, #12]
 80041c2:	075a      	lsls	r2, r3, #29
 80041c4:	d505      	bpl.n	80041d2 <__sflush_r+0x42>
 80041c6:	6863      	ldr	r3, [r4, #4]
 80041c8:	1ac0      	subs	r0, r0, r3
 80041ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041cc:	b10b      	cbz	r3, 80041d2 <__sflush_r+0x42>
 80041ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041d0:	1ac0      	subs	r0, r0, r3
 80041d2:	2300      	movs	r3, #0
 80041d4:	4602      	mov	r2, r0
 80041d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041d8:	4628      	mov	r0, r5
 80041da:	6a21      	ldr	r1, [r4, #32]
 80041dc:	47b0      	blx	r6
 80041de:	1c43      	adds	r3, r0, #1
 80041e0:	89a3      	ldrh	r3, [r4, #12]
 80041e2:	d106      	bne.n	80041f2 <__sflush_r+0x62>
 80041e4:	6829      	ldr	r1, [r5, #0]
 80041e6:	291d      	cmp	r1, #29
 80041e8:	d82c      	bhi.n	8004244 <__sflush_r+0xb4>
 80041ea:	4a29      	ldr	r2, [pc, #164]	; (8004290 <__sflush_r+0x100>)
 80041ec:	40ca      	lsrs	r2, r1
 80041ee:	07d6      	lsls	r6, r2, #31
 80041f0:	d528      	bpl.n	8004244 <__sflush_r+0xb4>
 80041f2:	2200      	movs	r2, #0
 80041f4:	6062      	str	r2, [r4, #4]
 80041f6:	6922      	ldr	r2, [r4, #16]
 80041f8:	04d9      	lsls	r1, r3, #19
 80041fa:	6022      	str	r2, [r4, #0]
 80041fc:	d504      	bpl.n	8004208 <__sflush_r+0x78>
 80041fe:	1c42      	adds	r2, r0, #1
 8004200:	d101      	bne.n	8004206 <__sflush_r+0x76>
 8004202:	682b      	ldr	r3, [r5, #0]
 8004204:	b903      	cbnz	r3, 8004208 <__sflush_r+0x78>
 8004206:	6560      	str	r0, [r4, #84]	; 0x54
 8004208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800420a:	602f      	str	r7, [r5, #0]
 800420c:	2900      	cmp	r1, #0
 800420e:	d0cb      	beq.n	80041a8 <__sflush_r+0x18>
 8004210:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004214:	4299      	cmp	r1, r3
 8004216:	d002      	beq.n	800421e <__sflush_r+0x8e>
 8004218:	4628      	mov	r0, r5
 800421a:	f000 f9d5 	bl	80045c8 <_free_r>
 800421e:	2000      	movs	r0, #0
 8004220:	6360      	str	r0, [r4, #52]	; 0x34
 8004222:	e7c2      	b.n	80041aa <__sflush_r+0x1a>
 8004224:	6a21      	ldr	r1, [r4, #32]
 8004226:	2301      	movs	r3, #1
 8004228:	4628      	mov	r0, r5
 800422a:	47b0      	blx	r6
 800422c:	1c41      	adds	r1, r0, #1
 800422e:	d1c7      	bne.n	80041c0 <__sflush_r+0x30>
 8004230:	682b      	ldr	r3, [r5, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0c4      	beq.n	80041c0 <__sflush_r+0x30>
 8004236:	2b1d      	cmp	r3, #29
 8004238:	d001      	beq.n	800423e <__sflush_r+0xae>
 800423a:	2b16      	cmp	r3, #22
 800423c:	d101      	bne.n	8004242 <__sflush_r+0xb2>
 800423e:	602f      	str	r7, [r5, #0]
 8004240:	e7b2      	b.n	80041a8 <__sflush_r+0x18>
 8004242:	89a3      	ldrh	r3, [r4, #12]
 8004244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004248:	81a3      	strh	r3, [r4, #12]
 800424a:	e7ae      	b.n	80041aa <__sflush_r+0x1a>
 800424c:	690f      	ldr	r7, [r1, #16]
 800424e:	2f00      	cmp	r7, #0
 8004250:	d0aa      	beq.n	80041a8 <__sflush_r+0x18>
 8004252:	0793      	lsls	r3, r2, #30
 8004254:	bf18      	it	ne
 8004256:	2300      	movne	r3, #0
 8004258:	680e      	ldr	r6, [r1, #0]
 800425a:	bf08      	it	eq
 800425c:	694b      	ldreq	r3, [r1, #20]
 800425e:	1bf6      	subs	r6, r6, r7
 8004260:	600f      	str	r7, [r1, #0]
 8004262:	608b      	str	r3, [r1, #8]
 8004264:	2e00      	cmp	r6, #0
 8004266:	dd9f      	ble.n	80041a8 <__sflush_r+0x18>
 8004268:	4633      	mov	r3, r6
 800426a:	463a      	mov	r2, r7
 800426c:	4628      	mov	r0, r5
 800426e:	6a21      	ldr	r1, [r4, #32]
 8004270:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004274:	47e0      	blx	ip
 8004276:	2800      	cmp	r0, #0
 8004278:	dc06      	bgt.n	8004288 <__sflush_r+0xf8>
 800427a:	89a3      	ldrh	r3, [r4, #12]
 800427c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004284:	81a3      	strh	r3, [r4, #12]
 8004286:	e790      	b.n	80041aa <__sflush_r+0x1a>
 8004288:	4407      	add	r7, r0
 800428a:	1a36      	subs	r6, r6, r0
 800428c:	e7ea      	b.n	8004264 <__sflush_r+0xd4>
 800428e:	bf00      	nop
 8004290:	20400001 	.word	0x20400001

08004294 <_fflush_r>:
 8004294:	b538      	push	{r3, r4, r5, lr}
 8004296:	690b      	ldr	r3, [r1, #16]
 8004298:	4605      	mov	r5, r0
 800429a:	460c      	mov	r4, r1
 800429c:	b913      	cbnz	r3, 80042a4 <_fflush_r+0x10>
 800429e:	2500      	movs	r5, #0
 80042a0:	4628      	mov	r0, r5
 80042a2:	bd38      	pop	{r3, r4, r5, pc}
 80042a4:	b118      	cbz	r0, 80042ae <_fflush_r+0x1a>
 80042a6:	6983      	ldr	r3, [r0, #24]
 80042a8:	b90b      	cbnz	r3, 80042ae <_fflush_r+0x1a>
 80042aa:	f000 f887 	bl	80043bc <__sinit>
 80042ae:	4b14      	ldr	r3, [pc, #80]	; (8004300 <_fflush_r+0x6c>)
 80042b0:	429c      	cmp	r4, r3
 80042b2:	d11b      	bne.n	80042ec <_fflush_r+0x58>
 80042b4:	686c      	ldr	r4, [r5, #4]
 80042b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0ef      	beq.n	800429e <_fflush_r+0xa>
 80042be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80042c0:	07d0      	lsls	r0, r2, #31
 80042c2:	d404      	bmi.n	80042ce <_fflush_r+0x3a>
 80042c4:	0599      	lsls	r1, r3, #22
 80042c6:	d402      	bmi.n	80042ce <_fflush_r+0x3a>
 80042c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042ca:	f000 f915 	bl	80044f8 <__retarget_lock_acquire_recursive>
 80042ce:	4628      	mov	r0, r5
 80042d0:	4621      	mov	r1, r4
 80042d2:	f7ff ff5d 	bl	8004190 <__sflush_r>
 80042d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042d8:	4605      	mov	r5, r0
 80042da:	07da      	lsls	r2, r3, #31
 80042dc:	d4e0      	bmi.n	80042a0 <_fflush_r+0xc>
 80042de:	89a3      	ldrh	r3, [r4, #12]
 80042e0:	059b      	lsls	r3, r3, #22
 80042e2:	d4dd      	bmi.n	80042a0 <_fflush_r+0xc>
 80042e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042e6:	f000 f908 	bl	80044fa <__retarget_lock_release_recursive>
 80042ea:	e7d9      	b.n	80042a0 <_fflush_r+0xc>
 80042ec:	4b05      	ldr	r3, [pc, #20]	; (8004304 <_fflush_r+0x70>)
 80042ee:	429c      	cmp	r4, r3
 80042f0:	d101      	bne.n	80042f6 <_fflush_r+0x62>
 80042f2:	68ac      	ldr	r4, [r5, #8]
 80042f4:	e7df      	b.n	80042b6 <_fflush_r+0x22>
 80042f6:	4b04      	ldr	r3, [pc, #16]	; (8004308 <_fflush_r+0x74>)
 80042f8:	429c      	cmp	r4, r3
 80042fa:	bf08      	it	eq
 80042fc:	68ec      	ldreq	r4, [r5, #12]
 80042fe:	e7da      	b.n	80042b6 <_fflush_r+0x22>
 8004300:	08004a94 	.word	0x08004a94
 8004304:	08004ab4 	.word	0x08004ab4
 8004308:	08004a74 	.word	0x08004a74

0800430c <std>:
 800430c:	2300      	movs	r3, #0
 800430e:	b510      	push	{r4, lr}
 8004310:	4604      	mov	r4, r0
 8004312:	e9c0 3300 	strd	r3, r3, [r0]
 8004316:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800431a:	6083      	str	r3, [r0, #8]
 800431c:	8181      	strh	r1, [r0, #12]
 800431e:	6643      	str	r3, [r0, #100]	; 0x64
 8004320:	81c2      	strh	r2, [r0, #14]
 8004322:	6183      	str	r3, [r0, #24]
 8004324:	4619      	mov	r1, r3
 8004326:	2208      	movs	r2, #8
 8004328:	305c      	adds	r0, #92	; 0x5c
 800432a:	f7ff fd59 	bl	8003de0 <memset>
 800432e:	4b05      	ldr	r3, [pc, #20]	; (8004344 <std+0x38>)
 8004330:	6224      	str	r4, [r4, #32]
 8004332:	6263      	str	r3, [r4, #36]	; 0x24
 8004334:	4b04      	ldr	r3, [pc, #16]	; (8004348 <std+0x3c>)
 8004336:	62a3      	str	r3, [r4, #40]	; 0x28
 8004338:	4b04      	ldr	r3, [pc, #16]	; (800434c <std+0x40>)
 800433a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800433c:	4b04      	ldr	r3, [pc, #16]	; (8004350 <std+0x44>)
 800433e:	6323      	str	r3, [r4, #48]	; 0x30
 8004340:	bd10      	pop	{r4, pc}
 8004342:	bf00      	nop
 8004344:	080047a1 	.word	0x080047a1
 8004348:	080047c3 	.word	0x080047c3
 800434c:	080047fb 	.word	0x080047fb
 8004350:	0800481f 	.word	0x0800481f

08004354 <_cleanup_r>:
 8004354:	4901      	ldr	r1, [pc, #4]	; (800435c <_cleanup_r+0x8>)
 8004356:	f000 b8af 	b.w	80044b8 <_fwalk_reent>
 800435a:	bf00      	nop
 800435c:	08004295 	.word	0x08004295

08004360 <__sfmoreglue>:
 8004360:	2268      	movs	r2, #104	; 0x68
 8004362:	b570      	push	{r4, r5, r6, lr}
 8004364:	1e4d      	subs	r5, r1, #1
 8004366:	4355      	muls	r5, r2
 8004368:	460e      	mov	r6, r1
 800436a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800436e:	f000 f993 	bl	8004698 <_malloc_r>
 8004372:	4604      	mov	r4, r0
 8004374:	b140      	cbz	r0, 8004388 <__sfmoreglue+0x28>
 8004376:	2100      	movs	r1, #0
 8004378:	e9c0 1600 	strd	r1, r6, [r0]
 800437c:	300c      	adds	r0, #12
 800437e:	60a0      	str	r0, [r4, #8]
 8004380:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004384:	f7ff fd2c 	bl	8003de0 <memset>
 8004388:	4620      	mov	r0, r4
 800438a:	bd70      	pop	{r4, r5, r6, pc}

0800438c <__sfp_lock_acquire>:
 800438c:	4801      	ldr	r0, [pc, #4]	; (8004394 <__sfp_lock_acquire+0x8>)
 800438e:	f000 b8b3 	b.w	80044f8 <__retarget_lock_acquire_recursive>
 8004392:	bf00      	nop
 8004394:	200003e5 	.word	0x200003e5

08004398 <__sfp_lock_release>:
 8004398:	4801      	ldr	r0, [pc, #4]	; (80043a0 <__sfp_lock_release+0x8>)
 800439a:	f000 b8ae 	b.w	80044fa <__retarget_lock_release_recursive>
 800439e:	bf00      	nop
 80043a0:	200003e5 	.word	0x200003e5

080043a4 <__sinit_lock_acquire>:
 80043a4:	4801      	ldr	r0, [pc, #4]	; (80043ac <__sinit_lock_acquire+0x8>)
 80043a6:	f000 b8a7 	b.w	80044f8 <__retarget_lock_acquire_recursive>
 80043aa:	bf00      	nop
 80043ac:	200003e6 	.word	0x200003e6

080043b0 <__sinit_lock_release>:
 80043b0:	4801      	ldr	r0, [pc, #4]	; (80043b8 <__sinit_lock_release+0x8>)
 80043b2:	f000 b8a2 	b.w	80044fa <__retarget_lock_release_recursive>
 80043b6:	bf00      	nop
 80043b8:	200003e6 	.word	0x200003e6

080043bc <__sinit>:
 80043bc:	b510      	push	{r4, lr}
 80043be:	4604      	mov	r4, r0
 80043c0:	f7ff fff0 	bl	80043a4 <__sinit_lock_acquire>
 80043c4:	69a3      	ldr	r3, [r4, #24]
 80043c6:	b11b      	cbz	r3, 80043d0 <__sinit+0x14>
 80043c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043cc:	f7ff bff0 	b.w	80043b0 <__sinit_lock_release>
 80043d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80043d4:	6523      	str	r3, [r4, #80]	; 0x50
 80043d6:	4b13      	ldr	r3, [pc, #76]	; (8004424 <__sinit+0x68>)
 80043d8:	4a13      	ldr	r2, [pc, #76]	; (8004428 <__sinit+0x6c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80043de:	42a3      	cmp	r3, r4
 80043e0:	bf08      	it	eq
 80043e2:	2301      	moveq	r3, #1
 80043e4:	4620      	mov	r0, r4
 80043e6:	bf08      	it	eq
 80043e8:	61a3      	streq	r3, [r4, #24]
 80043ea:	f000 f81f 	bl	800442c <__sfp>
 80043ee:	6060      	str	r0, [r4, #4]
 80043f0:	4620      	mov	r0, r4
 80043f2:	f000 f81b 	bl	800442c <__sfp>
 80043f6:	60a0      	str	r0, [r4, #8]
 80043f8:	4620      	mov	r0, r4
 80043fa:	f000 f817 	bl	800442c <__sfp>
 80043fe:	2200      	movs	r2, #0
 8004400:	2104      	movs	r1, #4
 8004402:	60e0      	str	r0, [r4, #12]
 8004404:	6860      	ldr	r0, [r4, #4]
 8004406:	f7ff ff81 	bl	800430c <std>
 800440a:	2201      	movs	r2, #1
 800440c:	2109      	movs	r1, #9
 800440e:	68a0      	ldr	r0, [r4, #8]
 8004410:	f7ff ff7c 	bl	800430c <std>
 8004414:	2202      	movs	r2, #2
 8004416:	2112      	movs	r1, #18
 8004418:	68e0      	ldr	r0, [r4, #12]
 800441a:	f7ff ff77 	bl	800430c <std>
 800441e:	2301      	movs	r3, #1
 8004420:	61a3      	str	r3, [r4, #24]
 8004422:	e7d1      	b.n	80043c8 <__sinit+0xc>
 8004424:	0800496c 	.word	0x0800496c
 8004428:	08004355 	.word	0x08004355

0800442c <__sfp>:
 800442c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800442e:	4607      	mov	r7, r0
 8004430:	f7ff ffac 	bl	800438c <__sfp_lock_acquire>
 8004434:	4b1e      	ldr	r3, [pc, #120]	; (80044b0 <__sfp+0x84>)
 8004436:	681e      	ldr	r6, [r3, #0]
 8004438:	69b3      	ldr	r3, [r6, #24]
 800443a:	b913      	cbnz	r3, 8004442 <__sfp+0x16>
 800443c:	4630      	mov	r0, r6
 800443e:	f7ff ffbd 	bl	80043bc <__sinit>
 8004442:	3648      	adds	r6, #72	; 0x48
 8004444:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004448:	3b01      	subs	r3, #1
 800444a:	d503      	bpl.n	8004454 <__sfp+0x28>
 800444c:	6833      	ldr	r3, [r6, #0]
 800444e:	b30b      	cbz	r3, 8004494 <__sfp+0x68>
 8004450:	6836      	ldr	r6, [r6, #0]
 8004452:	e7f7      	b.n	8004444 <__sfp+0x18>
 8004454:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004458:	b9d5      	cbnz	r5, 8004490 <__sfp+0x64>
 800445a:	4b16      	ldr	r3, [pc, #88]	; (80044b4 <__sfp+0x88>)
 800445c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004460:	60e3      	str	r3, [r4, #12]
 8004462:	6665      	str	r5, [r4, #100]	; 0x64
 8004464:	f000 f847 	bl	80044f6 <__retarget_lock_init_recursive>
 8004468:	f7ff ff96 	bl	8004398 <__sfp_lock_release>
 800446c:	2208      	movs	r2, #8
 800446e:	4629      	mov	r1, r5
 8004470:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004474:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004478:	6025      	str	r5, [r4, #0]
 800447a:	61a5      	str	r5, [r4, #24]
 800447c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004480:	f7ff fcae 	bl	8003de0 <memset>
 8004484:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004488:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800448c:	4620      	mov	r0, r4
 800448e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004490:	3468      	adds	r4, #104	; 0x68
 8004492:	e7d9      	b.n	8004448 <__sfp+0x1c>
 8004494:	2104      	movs	r1, #4
 8004496:	4638      	mov	r0, r7
 8004498:	f7ff ff62 	bl	8004360 <__sfmoreglue>
 800449c:	4604      	mov	r4, r0
 800449e:	6030      	str	r0, [r6, #0]
 80044a0:	2800      	cmp	r0, #0
 80044a2:	d1d5      	bne.n	8004450 <__sfp+0x24>
 80044a4:	f7ff ff78 	bl	8004398 <__sfp_lock_release>
 80044a8:	230c      	movs	r3, #12
 80044aa:	603b      	str	r3, [r7, #0]
 80044ac:	e7ee      	b.n	800448c <__sfp+0x60>
 80044ae:	bf00      	nop
 80044b0:	0800496c 	.word	0x0800496c
 80044b4:	ffff0001 	.word	0xffff0001

080044b8 <_fwalk_reent>:
 80044b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044bc:	4606      	mov	r6, r0
 80044be:	4688      	mov	r8, r1
 80044c0:	2700      	movs	r7, #0
 80044c2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80044c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80044ca:	f1b9 0901 	subs.w	r9, r9, #1
 80044ce:	d505      	bpl.n	80044dc <_fwalk_reent+0x24>
 80044d0:	6824      	ldr	r4, [r4, #0]
 80044d2:	2c00      	cmp	r4, #0
 80044d4:	d1f7      	bne.n	80044c6 <_fwalk_reent+0xe>
 80044d6:	4638      	mov	r0, r7
 80044d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044dc:	89ab      	ldrh	r3, [r5, #12]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d907      	bls.n	80044f2 <_fwalk_reent+0x3a>
 80044e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044e6:	3301      	adds	r3, #1
 80044e8:	d003      	beq.n	80044f2 <_fwalk_reent+0x3a>
 80044ea:	4629      	mov	r1, r5
 80044ec:	4630      	mov	r0, r6
 80044ee:	47c0      	blx	r8
 80044f0:	4307      	orrs	r7, r0
 80044f2:	3568      	adds	r5, #104	; 0x68
 80044f4:	e7e9      	b.n	80044ca <_fwalk_reent+0x12>

080044f6 <__retarget_lock_init_recursive>:
 80044f6:	4770      	bx	lr

080044f8 <__retarget_lock_acquire_recursive>:
 80044f8:	4770      	bx	lr

080044fa <__retarget_lock_release_recursive>:
 80044fa:	4770      	bx	lr

080044fc <__swhatbuf_r>:
 80044fc:	b570      	push	{r4, r5, r6, lr}
 80044fe:	460e      	mov	r6, r1
 8004500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004504:	4614      	mov	r4, r2
 8004506:	2900      	cmp	r1, #0
 8004508:	461d      	mov	r5, r3
 800450a:	b096      	sub	sp, #88	; 0x58
 800450c:	da08      	bge.n	8004520 <__swhatbuf_r+0x24>
 800450e:	2200      	movs	r2, #0
 8004510:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004514:	602a      	str	r2, [r5, #0]
 8004516:	061a      	lsls	r2, r3, #24
 8004518:	d410      	bmi.n	800453c <__swhatbuf_r+0x40>
 800451a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800451e:	e00e      	b.n	800453e <__swhatbuf_r+0x42>
 8004520:	466a      	mov	r2, sp
 8004522:	f000 f9a3 	bl	800486c <_fstat_r>
 8004526:	2800      	cmp	r0, #0
 8004528:	dbf1      	blt.n	800450e <__swhatbuf_r+0x12>
 800452a:	9a01      	ldr	r2, [sp, #4]
 800452c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004530:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004534:	425a      	negs	r2, r3
 8004536:	415a      	adcs	r2, r3
 8004538:	602a      	str	r2, [r5, #0]
 800453a:	e7ee      	b.n	800451a <__swhatbuf_r+0x1e>
 800453c:	2340      	movs	r3, #64	; 0x40
 800453e:	2000      	movs	r0, #0
 8004540:	6023      	str	r3, [r4, #0]
 8004542:	b016      	add	sp, #88	; 0x58
 8004544:	bd70      	pop	{r4, r5, r6, pc}
	...

08004548 <__smakebuf_r>:
 8004548:	898b      	ldrh	r3, [r1, #12]
 800454a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800454c:	079d      	lsls	r5, r3, #30
 800454e:	4606      	mov	r6, r0
 8004550:	460c      	mov	r4, r1
 8004552:	d507      	bpl.n	8004564 <__smakebuf_r+0x1c>
 8004554:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004558:	6023      	str	r3, [r4, #0]
 800455a:	6123      	str	r3, [r4, #16]
 800455c:	2301      	movs	r3, #1
 800455e:	6163      	str	r3, [r4, #20]
 8004560:	b002      	add	sp, #8
 8004562:	bd70      	pop	{r4, r5, r6, pc}
 8004564:	466a      	mov	r2, sp
 8004566:	ab01      	add	r3, sp, #4
 8004568:	f7ff ffc8 	bl	80044fc <__swhatbuf_r>
 800456c:	9900      	ldr	r1, [sp, #0]
 800456e:	4605      	mov	r5, r0
 8004570:	4630      	mov	r0, r6
 8004572:	f000 f891 	bl	8004698 <_malloc_r>
 8004576:	b948      	cbnz	r0, 800458c <__smakebuf_r+0x44>
 8004578:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800457c:	059a      	lsls	r2, r3, #22
 800457e:	d4ef      	bmi.n	8004560 <__smakebuf_r+0x18>
 8004580:	f023 0303 	bic.w	r3, r3, #3
 8004584:	f043 0302 	orr.w	r3, r3, #2
 8004588:	81a3      	strh	r3, [r4, #12]
 800458a:	e7e3      	b.n	8004554 <__smakebuf_r+0xc>
 800458c:	4b0d      	ldr	r3, [pc, #52]	; (80045c4 <__smakebuf_r+0x7c>)
 800458e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004590:	89a3      	ldrh	r3, [r4, #12]
 8004592:	6020      	str	r0, [r4, #0]
 8004594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004598:	81a3      	strh	r3, [r4, #12]
 800459a:	9b00      	ldr	r3, [sp, #0]
 800459c:	6120      	str	r0, [r4, #16]
 800459e:	6163      	str	r3, [r4, #20]
 80045a0:	9b01      	ldr	r3, [sp, #4]
 80045a2:	b15b      	cbz	r3, 80045bc <__smakebuf_r+0x74>
 80045a4:	4630      	mov	r0, r6
 80045a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045aa:	f000 f971 	bl	8004890 <_isatty_r>
 80045ae:	b128      	cbz	r0, 80045bc <__smakebuf_r+0x74>
 80045b0:	89a3      	ldrh	r3, [r4, #12]
 80045b2:	f023 0303 	bic.w	r3, r3, #3
 80045b6:	f043 0301 	orr.w	r3, r3, #1
 80045ba:	81a3      	strh	r3, [r4, #12]
 80045bc:	89a0      	ldrh	r0, [r4, #12]
 80045be:	4305      	orrs	r5, r0
 80045c0:	81a5      	strh	r5, [r4, #12]
 80045c2:	e7cd      	b.n	8004560 <__smakebuf_r+0x18>
 80045c4:	08004355 	.word	0x08004355

080045c8 <_free_r>:
 80045c8:	b538      	push	{r3, r4, r5, lr}
 80045ca:	4605      	mov	r5, r0
 80045cc:	2900      	cmp	r1, #0
 80045ce:	d040      	beq.n	8004652 <_free_r+0x8a>
 80045d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045d4:	1f0c      	subs	r4, r1, #4
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	bfb8      	it	lt
 80045da:	18e4      	addlt	r4, r4, r3
 80045dc:	f000 f97a 	bl	80048d4 <__malloc_lock>
 80045e0:	4a1c      	ldr	r2, [pc, #112]	; (8004654 <_free_r+0x8c>)
 80045e2:	6813      	ldr	r3, [r2, #0]
 80045e4:	b933      	cbnz	r3, 80045f4 <_free_r+0x2c>
 80045e6:	6063      	str	r3, [r4, #4]
 80045e8:	6014      	str	r4, [r2, #0]
 80045ea:	4628      	mov	r0, r5
 80045ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045f0:	f000 b976 	b.w	80048e0 <__malloc_unlock>
 80045f4:	42a3      	cmp	r3, r4
 80045f6:	d908      	bls.n	800460a <_free_r+0x42>
 80045f8:	6820      	ldr	r0, [r4, #0]
 80045fa:	1821      	adds	r1, r4, r0
 80045fc:	428b      	cmp	r3, r1
 80045fe:	bf01      	itttt	eq
 8004600:	6819      	ldreq	r1, [r3, #0]
 8004602:	685b      	ldreq	r3, [r3, #4]
 8004604:	1809      	addeq	r1, r1, r0
 8004606:	6021      	streq	r1, [r4, #0]
 8004608:	e7ed      	b.n	80045e6 <_free_r+0x1e>
 800460a:	461a      	mov	r2, r3
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	b10b      	cbz	r3, 8004614 <_free_r+0x4c>
 8004610:	42a3      	cmp	r3, r4
 8004612:	d9fa      	bls.n	800460a <_free_r+0x42>
 8004614:	6811      	ldr	r1, [r2, #0]
 8004616:	1850      	adds	r0, r2, r1
 8004618:	42a0      	cmp	r0, r4
 800461a:	d10b      	bne.n	8004634 <_free_r+0x6c>
 800461c:	6820      	ldr	r0, [r4, #0]
 800461e:	4401      	add	r1, r0
 8004620:	1850      	adds	r0, r2, r1
 8004622:	4283      	cmp	r3, r0
 8004624:	6011      	str	r1, [r2, #0]
 8004626:	d1e0      	bne.n	80045ea <_free_r+0x22>
 8004628:	6818      	ldr	r0, [r3, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	4401      	add	r1, r0
 800462e:	6011      	str	r1, [r2, #0]
 8004630:	6053      	str	r3, [r2, #4]
 8004632:	e7da      	b.n	80045ea <_free_r+0x22>
 8004634:	d902      	bls.n	800463c <_free_r+0x74>
 8004636:	230c      	movs	r3, #12
 8004638:	602b      	str	r3, [r5, #0]
 800463a:	e7d6      	b.n	80045ea <_free_r+0x22>
 800463c:	6820      	ldr	r0, [r4, #0]
 800463e:	1821      	adds	r1, r4, r0
 8004640:	428b      	cmp	r3, r1
 8004642:	bf01      	itttt	eq
 8004644:	6819      	ldreq	r1, [r3, #0]
 8004646:	685b      	ldreq	r3, [r3, #4]
 8004648:	1809      	addeq	r1, r1, r0
 800464a:	6021      	streq	r1, [r4, #0]
 800464c:	6063      	str	r3, [r4, #4]
 800464e:	6054      	str	r4, [r2, #4]
 8004650:	e7cb      	b.n	80045ea <_free_r+0x22>
 8004652:	bd38      	pop	{r3, r4, r5, pc}
 8004654:	200003e8 	.word	0x200003e8

08004658 <sbrk_aligned>:
 8004658:	b570      	push	{r4, r5, r6, lr}
 800465a:	4e0e      	ldr	r6, [pc, #56]	; (8004694 <sbrk_aligned+0x3c>)
 800465c:	460c      	mov	r4, r1
 800465e:	6831      	ldr	r1, [r6, #0]
 8004660:	4605      	mov	r5, r0
 8004662:	b911      	cbnz	r1, 800466a <sbrk_aligned+0x12>
 8004664:	f000 f88c 	bl	8004780 <_sbrk_r>
 8004668:	6030      	str	r0, [r6, #0]
 800466a:	4621      	mov	r1, r4
 800466c:	4628      	mov	r0, r5
 800466e:	f000 f887 	bl	8004780 <_sbrk_r>
 8004672:	1c43      	adds	r3, r0, #1
 8004674:	d00a      	beq.n	800468c <sbrk_aligned+0x34>
 8004676:	1cc4      	adds	r4, r0, #3
 8004678:	f024 0403 	bic.w	r4, r4, #3
 800467c:	42a0      	cmp	r0, r4
 800467e:	d007      	beq.n	8004690 <sbrk_aligned+0x38>
 8004680:	1a21      	subs	r1, r4, r0
 8004682:	4628      	mov	r0, r5
 8004684:	f000 f87c 	bl	8004780 <_sbrk_r>
 8004688:	3001      	adds	r0, #1
 800468a:	d101      	bne.n	8004690 <sbrk_aligned+0x38>
 800468c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004690:	4620      	mov	r0, r4
 8004692:	bd70      	pop	{r4, r5, r6, pc}
 8004694:	200003ec 	.word	0x200003ec

08004698 <_malloc_r>:
 8004698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800469c:	1ccd      	adds	r5, r1, #3
 800469e:	f025 0503 	bic.w	r5, r5, #3
 80046a2:	3508      	adds	r5, #8
 80046a4:	2d0c      	cmp	r5, #12
 80046a6:	bf38      	it	cc
 80046a8:	250c      	movcc	r5, #12
 80046aa:	2d00      	cmp	r5, #0
 80046ac:	4607      	mov	r7, r0
 80046ae:	db01      	blt.n	80046b4 <_malloc_r+0x1c>
 80046b0:	42a9      	cmp	r1, r5
 80046b2:	d905      	bls.n	80046c0 <_malloc_r+0x28>
 80046b4:	230c      	movs	r3, #12
 80046b6:	2600      	movs	r6, #0
 80046b8:	603b      	str	r3, [r7, #0]
 80046ba:	4630      	mov	r0, r6
 80046bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046c0:	4e2e      	ldr	r6, [pc, #184]	; (800477c <_malloc_r+0xe4>)
 80046c2:	f000 f907 	bl	80048d4 <__malloc_lock>
 80046c6:	6833      	ldr	r3, [r6, #0]
 80046c8:	461c      	mov	r4, r3
 80046ca:	bb34      	cbnz	r4, 800471a <_malloc_r+0x82>
 80046cc:	4629      	mov	r1, r5
 80046ce:	4638      	mov	r0, r7
 80046d0:	f7ff ffc2 	bl	8004658 <sbrk_aligned>
 80046d4:	1c43      	adds	r3, r0, #1
 80046d6:	4604      	mov	r4, r0
 80046d8:	d14d      	bne.n	8004776 <_malloc_r+0xde>
 80046da:	6834      	ldr	r4, [r6, #0]
 80046dc:	4626      	mov	r6, r4
 80046de:	2e00      	cmp	r6, #0
 80046e0:	d140      	bne.n	8004764 <_malloc_r+0xcc>
 80046e2:	6823      	ldr	r3, [r4, #0]
 80046e4:	4631      	mov	r1, r6
 80046e6:	4638      	mov	r0, r7
 80046e8:	eb04 0803 	add.w	r8, r4, r3
 80046ec:	f000 f848 	bl	8004780 <_sbrk_r>
 80046f0:	4580      	cmp	r8, r0
 80046f2:	d13a      	bne.n	800476a <_malloc_r+0xd2>
 80046f4:	6821      	ldr	r1, [r4, #0]
 80046f6:	3503      	adds	r5, #3
 80046f8:	1a6d      	subs	r5, r5, r1
 80046fa:	f025 0503 	bic.w	r5, r5, #3
 80046fe:	3508      	adds	r5, #8
 8004700:	2d0c      	cmp	r5, #12
 8004702:	bf38      	it	cc
 8004704:	250c      	movcc	r5, #12
 8004706:	4638      	mov	r0, r7
 8004708:	4629      	mov	r1, r5
 800470a:	f7ff ffa5 	bl	8004658 <sbrk_aligned>
 800470e:	3001      	adds	r0, #1
 8004710:	d02b      	beq.n	800476a <_malloc_r+0xd2>
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	442b      	add	r3, r5
 8004716:	6023      	str	r3, [r4, #0]
 8004718:	e00e      	b.n	8004738 <_malloc_r+0xa0>
 800471a:	6822      	ldr	r2, [r4, #0]
 800471c:	1b52      	subs	r2, r2, r5
 800471e:	d41e      	bmi.n	800475e <_malloc_r+0xc6>
 8004720:	2a0b      	cmp	r2, #11
 8004722:	d916      	bls.n	8004752 <_malloc_r+0xba>
 8004724:	1961      	adds	r1, r4, r5
 8004726:	42a3      	cmp	r3, r4
 8004728:	6025      	str	r5, [r4, #0]
 800472a:	bf18      	it	ne
 800472c:	6059      	strne	r1, [r3, #4]
 800472e:	6863      	ldr	r3, [r4, #4]
 8004730:	bf08      	it	eq
 8004732:	6031      	streq	r1, [r6, #0]
 8004734:	5162      	str	r2, [r4, r5]
 8004736:	604b      	str	r3, [r1, #4]
 8004738:	4638      	mov	r0, r7
 800473a:	f104 060b 	add.w	r6, r4, #11
 800473e:	f000 f8cf 	bl	80048e0 <__malloc_unlock>
 8004742:	f026 0607 	bic.w	r6, r6, #7
 8004746:	1d23      	adds	r3, r4, #4
 8004748:	1af2      	subs	r2, r6, r3
 800474a:	d0b6      	beq.n	80046ba <_malloc_r+0x22>
 800474c:	1b9b      	subs	r3, r3, r6
 800474e:	50a3      	str	r3, [r4, r2]
 8004750:	e7b3      	b.n	80046ba <_malloc_r+0x22>
 8004752:	6862      	ldr	r2, [r4, #4]
 8004754:	42a3      	cmp	r3, r4
 8004756:	bf0c      	ite	eq
 8004758:	6032      	streq	r2, [r6, #0]
 800475a:	605a      	strne	r2, [r3, #4]
 800475c:	e7ec      	b.n	8004738 <_malloc_r+0xa0>
 800475e:	4623      	mov	r3, r4
 8004760:	6864      	ldr	r4, [r4, #4]
 8004762:	e7b2      	b.n	80046ca <_malloc_r+0x32>
 8004764:	4634      	mov	r4, r6
 8004766:	6876      	ldr	r6, [r6, #4]
 8004768:	e7b9      	b.n	80046de <_malloc_r+0x46>
 800476a:	230c      	movs	r3, #12
 800476c:	4638      	mov	r0, r7
 800476e:	603b      	str	r3, [r7, #0]
 8004770:	f000 f8b6 	bl	80048e0 <__malloc_unlock>
 8004774:	e7a1      	b.n	80046ba <_malloc_r+0x22>
 8004776:	6025      	str	r5, [r4, #0]
 8004778:	e7de      	b.n	8004738 <_malloc_r+0xa0>
 800477a:	bf00      	nop
 800477c:	200003e8 	.word	0x200003e8

08004780 <_sbrk_r>:
 8004780:	b538      	push	{r3, r4, r5, lr}
 8004782:	2300      	movs	r3, #0
 8004784:	4d05      	ldr	r5, [pc, #20]	; (800479c <_sbrk_r+0x1c>)
 8004786:	4604      	mov	r4, r0
 8004788:	4608      	mov	r0, r1
 800478a:	602b      	str	r3, [r5, #0]
 800478c:	f7fc fb8e 	bl	8000eac <_sbrk>
 8004790:	1c43      	adds	r3, r0, #1
 8004792:	d102      	bne.n	800479a <_sbrk_r+0x1a>
 8004794:	682b      	ldr	r3, [r5, #0]
 8004796:	b103      	cbz	r3, 800479a <_sbrk_r+0x1a>
 8004798:	6023      	str	r3, [r4, #0]
 800479a:	bd38      	pop	{r3, r4, r5, pc}
 800479c:	200003f0 	.word	0x200003f0

080047a0 <__sread>:
 80047a0:	b510      	push	{r4, lr}
 80047a2:	460c      	mov	r4, r1
 80047a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047a8:	f000 f8a0 	bl	80048ec <_read_r>
 80047ac:	2800      	cmp	r0, #0
 80047ae:	bfab      	itete	ge
 80047b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80047b2:	89a3      	ldrhlt	r3, [r4, #12]
 80047b4:	181b      	addge	r3, r3, r0
 80047b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80047ba:	bfac      	ite	ge
 80047bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80047be:	81a3      	strhlt	r3, [r4, #12]
 80047c0:	bd10      	pop	{r4, pc}

080047c2 <__swrite>:
 80047c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047c6:	461f      	mov	r7, r3
 80047c8:	898b      	ldrh	r3, [r1, #12]
 80047ca:	4605      	mov	r5, r0
 80047cc:	05db      	lsls	r3, r3, #23
 80047ce:	460c      	mov	r4, r1
 80047d0:	4616      	mov	r6, r2
 80047d2:	d505      	bpl.n	80047e0 <__swrite+0x1e>
 80047d4:	2302      	movs	r3, #2
 80047d6:	2200      	movs	r2, #0
 80047d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047dc:	f000 f868 	bl	80048b0 <_lseek_r>
 80047e0:	89a3      	ldrh	r3, [r4, #12]
 80047e2:	4632      	mov	r2, r6
 80047e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047e8:	81a3      	strh	r3, [r4, #12]
 80047ea:	4628      	mov	r0, r5
 80047ec:	463b      	mov	r3, r7
 80047ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047f6:	f000 b817 	b.w	8004828 <_write_r>

080047fa <__sseek>:
 80047fa:	b510      	push	{r4, lr}
 80047fc:	460c      	mov	r4, r1
 80047fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004802:	f000 f855 	bl	80048b0 <_lseek_r>
 8004806:	1c43      	adds	r3, r0, #1
 8004808:	89a3      	ldrh	r3, [r4, #12]
 800480a:	bf15      	itete	ne
 800480c:	6560      	strne	r0, [r4, #84]	; 0x54
 800480e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004812:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004816:	81a3      	strheq	r3, [r4, #12]
 8004818:	bf18      	it	ne
 800481a:	81a3      	strhne	r3, [r4, #12]
 800481c:	bd10      	pop	{r4, pc}

0800481e <__sclose>:
 800481e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004822:	f000 b813 	b.w	800484c <_close_r>
	...

08004828 <_write_r>:
 8004828:	b538      	push	{r3, r4, r5, lr}
 800482a:	4604      	mov	r4, r0
 800482c:	4608      	mov	r0, r1
 800482e:	4611      	mov	r1, r2
 8004830:	2200      	movs	r2, #0
 8004832:	4d05      	ldr	r5, [pc, #20]	; (8004848 <_write_r+0x20>)
 8004834:	602a      	str	r2, [r5, #0]
 8004836:	461a      	mov	r2, r3
 8004838:	f7fb fccc 	bl	80001d4 <_write>
 800483c:	1c43      	adds	r3, r0, #1
 800483e:	d102      	bne.n	8004846 <_write_r+0x1e>
 8004840:	682b      	ldr	r3, [r5, #0]
 8004842:	b103      	cbz	r3, 8004846 <_write_r+0x1e>
 8004844:	6023      	str	r3, [r4, #0]
 8004846:	bd38      	pop	{r3, r4, r5, pc}
 8004848:	200003f0 	.word	0x200003f0

0800484c <_close_r>:
 800484c:	b538      	push	{r3, r4, r5, lr}
 800484e:	2300      	movs	r3, #0
 8004850:	4d05      	ldr	r5, [pc, #20]	; (8004868 <_close_r+0x1c>)
 8004852:	4604      	mov	r4, r0
 8004854:	4608      	mov	r0, r1
 8004856:	602b      	str	r3, [r5, #0]
 8004858:	f7fc faf7 	bl	8000e4a <_close>
 800485c:	1c43      	adds	r3, r0, #1
 800485e:	d102      	bne.n	8004866 <_close_r+0x1a>
 8004860:	682b      	ldr	r3, [r5, #0]
 8004862:	b103      	cbz	r3, 8004866 <_close_r+0x1a>
 8004864:	6023      	str	r3, [r4, #0]
 8004866:	bd38      	pop	{r3, r4, r5, pc}
 8004868:	200003f0 	.word	0x200003f0

0800486c <_fstat_r>:
 800486c:	b538      	push	{r3, r4, r5, lr}
 800486e:	2300      	movs	r3, #0
 8004870:	4d06      	ldr	r5, [pc, #24]	; (800488c <_fstat_r+0x20>)
 8004872:	4604      	mov	r4, r0
 8004874:	4608      	mov	r0, r1
 8004876:	4611      	mov	r1, r2
 8004878:	602b      	str	r3, [r5, #0]
 800487a:	f7fc faf1 	bl	8000e60 <_fstat>
 800487e:	1c43      	adds	r3, r0, #1
 8004880:	d102      	bne.n	8004888 <_fstat_r+0x1c>
 8004882:	682b      	ldr	r3, [r5, #0]
 8004884:	b103      	cbz	r3, 8004888 <_fstat_r+0x1c>
 8004886:	6023      	str	r3, [r4, #0]
 8004888:	bd38      	pop	{r3, r4, r5, pc}
 800488a:	bf00      	nop
 800488c:	200003f0 	.word	0x200003f0

08004890 <_isatty_r>:
 8004890:	b538      	push	{r3, r4, r5, lr}
 8004892:	2300      	movs	r3, #0
 8004894:	4d05      	ldr	r5, [pc, #20]	; (80048ac <_isatty_r+0x1c>)
 8004896:	4604      	mov	r4, r0
 8004898:	4608      	mov	r0, r1
 800489a:	602b      	str	r3, [r5, #0]
 800489c:	f7fc faef 	bl	8000e7e <_isatty>
 80048a0:	1c43      	adds	r3, r0, #1
 80048a2:	d102      	bne.n	80048aa <_isatty_r+0x1a>
 80048a4:	682b      	ldr	r3, [r5, #0]
 80048a6:	b103      	cbz	r3, 80048aa <_isatty_r+0x1a>
 80048a8:	6023      	str	r3, [r4, #0]
 80048aa:	bd38      	pop	{r3, r4, r5, pc}
 80048ac:	200003f0 	.word	0x200003f0

080048b0 <_lseek_r>:
 80048b0:	b538      	push	{r3, r4, r5, lr}
 80048b2:	4604      	mov	r4, r0
 80048b4:	4608      	mov	r0, r1
 80048b6:	4611      	mov	r1, r2
 80048b8:	2200      	movs	r2, #0
 80048ba:	4d05      	ldr	r5, [pc, #20]	; (80048d0 <_lseek_r+0x20>)
 80048bc:	602a      	str	r2, [r5, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	f7fc fae7 	bl	8000e92 <_lseek>
 80048c4:	1c43      	adds	r3, r0, #1
 80048c6:	d102      	bne.n	80048ce <_lseek_r+0x1e>
 80048c8:	682b      	ldr	r3, [r5, #0]
 80048ca:	b103      	cbz	r3, 80048ce <_lseek_r+0x1e>
 80048cc:	6023      	str	r3, [r4, #0]
 80048ce:	bd38      	pop	{r3, r4, r5, pc}
 80048d0:	200003f0 	.word	0x200003f0

080048d4 <__malloc_lock>:
 80048d4:	4801      	ldr	r0, [pc, #4]	; (80048dc <__malloc_lock+0x8>)
 80048d6:	f7ff be0f 	b.w	80044f8 <__retarget_lock_acquire_recursive>
 80048da:	bf00      	nop
 80048dc:	200003e4 	.word	0x200003e4

080048e0 <__malloc_unlock>:
 80048e0:	4801      	ldr	r0, [pc, #4]	; (80048e8 <__malloc_unlock+0x8>)
 80048e2:	f7ff be0a 	b.w	80044fa <__retarget_lock_release_recursive>
 80048e6:	bf00      	nop
 80048e8:	200003e4 	.word	0x200003e4

080048ec <_read_r>:
 80048ec:	b538      	push	{r3, r4, r5, lr}
 80048ee:	4604      	mov	r4, r0
 80048f0:	4608      	mov	r0, r1
 80048f2:	4611      	mov	r1, r2
 80048f4:	2200      	movs	r2, #0
 80048f6:	4d05      	ldr	r5, [pc, #20]	; (800490c <_read_r+0x20>)
 80048f8:	602a      	str	r2, [r5, #0]
 80048fa:	461a      	mov	r2, r3
 80048fc:	f7fc fa88 	bl	8000e10 <_read>
 8004900:	1c43      	adds	r3, r0, #1
 8004902:	d102      	bne.n	800490a <_read_r+0x1e>
 8004904:	682b      	ldr	r3, [r5, #0]
 8004906:	b103      	cbz	r3, 800490a <_read_r+0x1e>
 8004908:	6023      	str	r3, [r4, #0]
 800490a:	bd38      	pop	{r3, r4, r5, pc}
 800490c:	200003f0 	.word	0x200003f0

08004910 <_init>:
 8004910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004912:	bf00      	nop
 8004914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004916:	bc08      	pop	{r3}
 8004918:	469e      	mov	lr, r3
 800491a:	4770      	bx	lr

0800491c <_fini>:
 800491c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491e:	bf00      	nop
 8004920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004922:	bc08      	pop	{r3}
 8004924:	469e      	mov	lr, r3
 8004926:	4770      	bx	lr
